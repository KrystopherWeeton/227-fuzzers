; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmsgamma.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmsgamma.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._cmsCurvesPluginChunkType = type { %struct._cmsParametricCurvesCollection_st* }
%struct._cmsParametricCurvesCollection_st = type { i32, [20 x i32], [20 x i32], double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }
%struct._cmsContext_struct = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator*, [15 x i8*], %struct._cmsMemPluginChunkType }
%struct._cmsSubAllocator = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsSubAllocator_chunk_st = type { i8*, i32, i32, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsMemPluginChunkType = type { i8* (%struct._cmsContext_struct*, i32)*, i8* (%struct._cmsContext_struct*, i32)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*, i32)*, i8* (%struct._cmsContext_struct*, i32, i32)*, i8* (%struct._cmsContext_struct*, i8*, i32)* }
%struct._cmsPluginBaseStruct = type { i32, i32, i32, %struct._cmsPluginBaseStruct* }
%struct.cmsPluginParametricCurves = type { %struct._cmsPluginBaseStruct, i32, [20 x i32], [20 x i32], double (i32, double*, double)* }
%struct._cms_curve_struct = type { %struct._cms_interp_struc*, i32, %struct.cmsCurveSegment*, %struct._cms_interp_struc**, double (i32, double*, double)**, i32, i16* }
%struct._cms_interp_struc = type { %struct._cmsContext_struct*, i32, i32, i32, [8 x i32], [8 x i32], [8 x i32], i8*, %union.cmsInterpFunction }
%union.cmsInterpFunction = type { void (i16*, i16*, %struct._cms_interp_struc*)* }
%struct.cmsCurveSegment = type { float, float, i32, [10 x double], i32, float* }

@_cmsAllocCurvesPluginChunk.CurvesPluginChunk = internal global %struct._cmsCurvesPluginChunkType zeroinitializer, align 8
@_cmsCurvesPluginChunk = hidden local_unnamed_addr global %struct._cmsCurvesPluginChunkType zeroinitializer, align 8
@__const.cmsBuildTabulatedToneCurveFloat.Seg = private unnamed_addr constant [3 x { float, float, i32, [4 x i8], [10 x double], i32, [4 x i8], float* }] [{ float, float, i32, [4 x i8], [10 x double], i32, [4 x i8], float* } { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [10 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", float* inttoptr (i64 -6148914691236517206 to float*) }, { float, float, i32, [4 x i8], [10 x double], i32, [4 x i8], float* } { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [10 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", float* inttoptr (i64 -6148914691236517206 to float*) }, { float, float, i32, [4 x i8], [10 x double], i32, [4 x i8], float* } { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [10 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", float* inttoptr (i64 -6148914691236517206 to float*) }], align 16
@__const.cmsBuildParametricToneCurve.Seg0 = private unnamed_addr constant { float, float, i32, [4 x i8], [10 x double], i32, [4 x i8], float* } { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [10 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", float* inttoptr (i64 -6148914691236517206 to float*) }, align 8
@.str = private unnamed_addr constant [33 x i8] c"Invalid parametric curve type %d\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"cmsSmoothToneCurve: Non-Monotonic.\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"cmsSmoothToneCurve: Degenerated, mostly zeros.\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"cmsSmoothToneCurve: Degenerated, mostly poles.\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"cmsSmoothToneCurve: Function smooth2 failed.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"cmsSmoothToneCurve: Could not allocate memory.\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"cmsSmoothToneCurve: Too many points.\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c"Couldn't create tone curve of more than 65530 entries\00", align 1
@.str.8 = private unnamed_addr constant [59 x i8] c"Couldn't create tone curve with zero segments and no table\00", align 1
@DefaultCurves = internal unnamed_addr constant { i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* } { i32 9, <{ [9 x i32], [11 x i32] }> <{ [9 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 108], [11 x i32] zeroinitializer }>, <{ [9 x i32], [11 x i32] }> <{ [9 x i32] [i32 1, i32 3, i32 4, i32 5, i32 7, i32 4, i32 5, i32 5, i32 1], [11 x i32] zeroinitializer }>, double (i32, double*, double)* @DefaultEvalParametricFn, %struct._cmsParametricCurvesCollection_st* null }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_cmsAllocCurvesPluginChunk(%struct._cmsContext_struct* nocapture, %struct._cmsContext_struct* readonly) local_unnamed_addr #0 {
  %3 = alloca %struct._cmsCurvesPluginChunkType, align 8
  %4 = icmp eq %struct._cmsContext_struct* %1, null
  br i1 %4, label %48, label %5

5:                                                ; preds = %2
  %6 = bitcast %struct._cmsCurvesPluginChunkType* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = bitcast %struct._cmsCurvesPluginChunkType* %3 to i64*
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %1, i64 0, i32 2, i64 6
  %9 = bitcast i8** %8 to %struct._cmsCurvesPluginChunkType**
  %10 = load %struct._cmsCurvesPluginChunkType*, %struct._cmsCurvesPluginChunkType** %9, align 8
  %11 = getelementptr inbounds %struct._cmsCurvesPluginChunkType, %struct._cmsCurvesPluginChunkType* %10, i64 0, i32 0
  %12 = load %struct._cmsParametricCurvesCollection_st*, %struct._cmsParametricCurvesCollection_st** %11, align 8
  %13 = icmp eq %struct._cmsParametricCurvesCollection_st* %12, null
  %14 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 1
  %15 = load %struct._cmsSubAllocator*, %struct._cmsSubAllocator** %14, align 8
  br i1 %13, label %43, label %16

16:                                               ; preds = %5
  %17 = bitcast %struct._cmsCurvesPluginChunkType* %3 to i8**
  br label %18

18:                                               ; preds = %37, %16
  %19 = phi %struct._cmsParametricCurvesCollection_st* [ null, %16 ], [ %38, %37 ]
  %20 = phi %struct._cmsSubAllocator* [ %15, %16 ], [ %42, %37 ]
  %21 = phi %struct._cmsParametricCurvesCollection_st* [ %12, %16 ], [ %40, %37 ]
  %22 = phi %struct._cmsParametricCurvesCollection_st* [ null, %16 ], [ %25, %37 ]
  %23 = bitcast %struct._cmsParametricCurvesCollection_st* %21 to i8*
  %24 = tail call i8* @_cmsSubAllocDup(%struct._cmsSubAllocator* %20, i8* nonnull %23, i32 184) #7
  %25 = bitcast i8* %24 to %struct._cmsParametricCurvesCollection_st*
  %26 = icmp eq i8* %24, null
  br i1 %26, label %47, label %27

27:                                               ; preds = %18
  %28 = getelementptr inbounds i8, i8* %24, i64 176
  %29 = bitcast i8* %28 to %struct._cmsParametricCurvesCollection_st**
  store %struct._cmsParametricCurvesCollection_st* null, %struct._cmsParametricCurvesCollection_st** %29, align 8
  %30 = icmp eq %struct._cmsParametricCurvesCollection_st* %22, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %22, i64 0, i32 4
  %33 = bitcast %struct._cmsParametricCurvesCollection_st** %32 to i8**
  store i8* %24, i8** %33, align 8
  br label %34

34:                                               ; preds = %31, %27
  %35 = icmp eq %struct._cmsParametricCurvesCollection_st* %19, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %34
  store i8* %24, i8** %17, align 8
  br label %37

37:                                               ; preds = %36, %34
  %38 = phi %struct._cmsParametricCurvesCollection_st* [ %25, %36 ], [ %19, %34 ]
  %39 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %21, i64 0, i32 4
  %40 = load %struct._cmsParametricCurvesCollection_st*, %struct._cmsParametricCurvesCollection_st** %39, align 8
  %41 = icmp eq %struct._cmsParametricCurvesCollection_st* %40, null
  %42 = load %struct._cmsSubAllocator*, %struct._cmsSubAllocator** %14, align 8
  br i1 %41, label %43, label %18

43:                                               ; preds = %37, %5
  %44 = phi %struct._cmsSubAllocator* [ %15, %5 ], [ %42, %37 ]
  %45 = call i8* @_cmsSubAllocDup(%struct._cmsSubAllocator* %44, i8* nonnull %6, i32 8) #7
  %46 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 2, i64 6
  store i8* %45, i8** %46, align 8
  br label %47

47:                                               ; preds = %18, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  br label %53

48:                                               ; preds = %2
  %49 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 1
  %50 = load %struct._cmsSubAllocator*, %struct._cmsSubAllocator** %49, align 8
  %51 = tail call i8* @_cmsSubAllocDup(%struct._cmsSubAllocator* %50, i8* bitcast (%struct._cmsCurvesPluginChunkType* @_cmsAllocCurvesPluginChunk.CurvesPluginChunk to i8*), i32 8) #7
  %52 = getelementptr inbounds %struct._cmsContext_struct, %struct._cmsContext_struct* %0, i64 0, i32 2, i64 6
  store i8* %51, i8** %52, align 8
  br label %53

53:                                               ; preds = %48, %47
  ret void
}

declare i8* @_cmsSubAllocDup(%struct._cmsSubAllocator*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cmsRegisterParametricCurvesPlugin(%struct._cmsContext_struct*, %struct._cmsPluginBaseStruct* readonly) local_unnamed_addr #0 {
  %3 = tail call i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct* %0, i32 6) #7
  %4 = bitcast %struct._cmsPluginBaseStruct* %1 to %struct.cmsPluginParametricCurves*
  %5 = icmp eq %struct._cmsPluginBaseStruct* %1, null
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = bitcast i8* %3 to %struct._cmsParametricCurvesCollection_st**
  store %struct._cmsParametricCurvesCollection_st* null, %struct._cmsParametricCurvesCollection_st** %7, align 8
  br label %35

8:                                                ; preds = %2
  %9 = tail call i8* @_cmsPluginMalloc(%struct._cmsContext_struct* %0, i32 184) #7
  %10 = icmp eq i8* %9, null
  br i1 %10, label %35, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct._cmsPluginBaseStruct, %struct._cmsPluginBaseStruct* %1, i64 8
  %13 = bitcast %struct._cmsPluginBaseStruct* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds i8, i8* %9, i64 168
  %16 = bitcast i8* %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = getelementptr inbounds %struct._cmsPluginBaseStruct, %struct._cmsPluginBaseStruct* %1, i64 1, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = bitcast i8* %9 to i32*
  %20 = icmp ult i32 %18, 20
  %21 = select i1 %20, i32 %18, i32 20
  store i32 %21, i32* %19, align 8
  %22 = getelementptr inbounds i8, i8* %9, i64 4
  %23 = getelementptr inbounds %struct._cmsPluginBaseStruct, %struct._cmsPluginBaseStruct* %1, i64 1, i32 1
  %24 = bitcast i32* %23 to i8*
  %25 = shl nuw nsw i32 %21, 2
  %26 = zext i32 %25 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %22, i8* align 4 %24, i64 %26, i1 false)
  %27 = getelementptr inbounds i8, i8* %9, i64 84
  %28 = getelementptr inbounds %struct.cmsPluginParametricCurves, %struct.cmsPluginParametricCurves* %4, i64 0, i32 3, i64 0
  %29 = bitcast i32* %28 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %29, i64 %26, i1 false)
  %30 = bitcast i8* %3 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds i8, i8* %9, i64 176
  %33 = bitcast i8* %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = bitcast i8* %3 to i8**
  store i8* %9, i8** %34, align 8
  br label %35

35:                                               ; preds = %8, %11, %6
  %36 = phi i32 [ 1, %6 ], [ 1, %11 ], [ 0, %8 ]
  ret i32 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct*, i32) local_unnamed_addr #1

declare i8* @_cmsPluginMalloc(%struct._cmsContext_struct*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @cmsGetToneCurveEstimatedTableEntries(%struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i16* @cmsGetToneCurveEstimatedTable(%struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 6
  %3 = load i16*, i16** %2, align 8
  ret i16* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @cmsBuildTabulatedToneCurve16(%struct._cmsContext_struct*, i32, i16* readonly) local_unnamed_addr #0 {
  %4 = tail call fastcc %struct._cms_curve_struct* @AllocateToneCurveStruct(%struct._cmsContext_struct* %0, i32 %1, i32 0, %struct.cmsCurveSegment* null, i16* %2)
  ret %struct._cms_curve_struct* %4
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct._cms_curve_struct* @AllocateToneCurveStruct(%struct._cmsContext_struct*, i32, i32, %struct.cmsCurveSegment* readonly, i16* readonly) unnamed_addr #0 {
  %6 = icmp ugt i32 %1, 65530
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %0, i32 2, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0)) #7
  br label %242

8:                                                ; preds = %5
  %9 = icmp eq i32 %1, 0
  %10 = icmp eq i32 %2, 0
  %11 = or i32 %2, %1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %0, i32 2, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.8, i64 0, i64 0)) #7
  br label %242

14:                                               ; preds = %8
  %15 = tail call i8* @_cmsMallocZero(%struct._cmsContext_struct* %0, i32 56) #7
  %16 = bitcast i8* %15 to %struct._cms_curve_struct*
  %17 = icmp eq i8* %15, null
  br i1 %17, label %242, label %18

18:                                               ; preds = %14
  br i1 %10, label %19, label %24

19:                                               ; preds = %18
  %20 = getelementptr inbounds i8, i8* %15, i64 16
  %21 = bitcast i8* %20 to %struct.cmsCurveSegment**
  store %struct.cmsCurveSegment* null, %struct.cmsCurveSegment** %21, align 8
  %22 = getelementptr inbounds i8, i8* %15, i64 32
  %23 = bitcast i8* %22 to double (i32, double*, double)***
  store double (i32, double*, double)** null, double (i32, double*, double)*** %23, align 8
  br label %34

24:                                               ; preds = %18
  %25 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %0, i32 %2, i32 112) #7
  %26 = getelementptr inbounds i8, i8* %15, i64 16
  %27 = bitcast i8* %26 to i8**
  store i8* %25, i8** %27, align 8
  %28 = icmp eq i8* %25, null
  br i1 %28, label %213, label %29

29:                                               ; preds = %24
  %30 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %0, i32 %2, i32 8) #7
  %31 = getelementptr inbounds i8, i8* %15, i64 32
  %32 = bitcast i8* %31 to i8**
  store i8* %30, i8** %32, align 8
  %33 = icmp eq i8* %30, null
  br i1 %33, label %213, label %34

34:                                               ; preds = %29, %19
  %35 = getelementptr inbounds i8, i8* %15, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 %2, i32* %36, align 8
  br i1 %9, label %37, label %42

37:                                               ; preds = %34
  %38 = getelementptr inbounds i8, i8* %15, i64 48
  %39 = bitcast i8* %38 to i16**
  store i16* null, i16** %39, align 8
  %40 = getelementptr inbounds i8, i8* %15, i64 40
  %41 = bitcast i8* %40 to i32*
  store i32 0, i32* %41, align 8
  br label %102

42:                                               ; preds = %34
  %43 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %0, i32 %1, i32 2) #7
  %44 = getelementptr inbounds i8, i8* %15, i64 48
  %45 = bitcast i8* %44 to i8**
  store i8* %43, i8** %45, align 8
  %46 = icmp eq i8* %43, null
  %47 = bitcast i8* %43 to i16*
  br i1 %46, label %213, label %48

48:                                               ; preds = %42
  %49 = getelementptr inbounds i8, i8* %15, i64 40
  %50 = bitcast i8* %49 to i32*
  store i32 %1, i32* %50, align 8
  %51 = icmp eq i16* %4, null
  br i1 %51, label %102, label %52

52:                                               ; preds = %48
  %53 = bitcast i8* %44 to i16**
  %54 = zext i32 %1 to i64
  %55 = load i16, i16* %4, align 2
  store i16 %55, i16* %47, align 2
  %56 = icmp eq i32 %1, 1
  br i1 %56, label %102, label %57

57:                                               ; preds = %52
  %58 = add nsw i64 %54, -1
  %59 = add nsw i64 %54, -2
  %60 = and i64 %58, 3
  %61 = icmp ult i64 %59, 3
  br i1 %61, label %89, label %62

62:                                               ; preds = %57
  %63 = sub nsw i64 %58, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 1, %62 ], [ %86, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %87, %64 ]
  %67 = load i16*, i16** %53, align 8
  %68 = getelementptr inbounds i16, i16* %4, i64 %65
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds i16, i16* %67, i64 %65
  store i16 %69, i16* %70, align 2
  %71 = add nuw nsw i64 %65, 1
  %72 = load i16*, i16** %53, align 8
  %73 = getelementptr inbounds i16, i16* %4, i64 %71
  %74 = load i16, i16* %73, align 2
  %75 = getelementptr inbounds i16, i16* %72, i64 %71
  store i16 %74, i16* %75, align 2
  %76 = add nuw nsw i64 %65, 2
  %77 = load i16*, i16** %53, align 8
  %78 = getelementptr inbounds i16, i16* %4, i64 %76
  %79 = load i16, i16* %78, align 2
  %80 = getelementptr inbounds i16, i16* %77, i64 %76
  store i16 %79, i16* %80, align 2
  %81 = add nuw nsw i64 %65, 3
  %82 = load i16*, i16** %53, align 8
  %83 = getelementptr inbounds i16, i16* %4, i64 %81
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %82, i64 %81
  store i16 %84, i16* %85, align 2
  %86 = add nuw nsw i64 %65, 4
  %87 = add i64 %66, -4
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %64

89:                                               ; preds = %64, %57
  %90 = phi i64 [ 1, %57 ], [ %86, %64 ]
  %91 = icmp eq i64 %60, 0
  br i1 %91, label %102, label %92

92:                                               ; preds = %89, %92
  %93 = phi i64 [ %99, %92 ], [ %90, %89 ]
  %94 = phi i64 [ %100, %92 ], [ %60, %89 ]
  %95 = load i16*, i16** %53, align 8
  %96 = getelementptr inbounds i16, i16* %4, i64 %93
  %97 = load i16, i16* %96, align 2
  %98 = getelementptr inbounds i16, i16* %95, i64 %93
  store i16 %97, i16* %98, align 2
  %99 = add nuw nsw i64 %93, 1
  %100 = add i64 %94, -1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %92, !llvm.loop !2

102:                                              ; preds = %89, %92, %52, %48, %37
  %103 = phi i32* [ %41, %37 ], [ %50, %48 ], [ %50, %52 ], [ %50, %92 ], [ %50, %89 ]
  %104 = icmp ne %struct.cmsCurveSegment* %3, null
  %105 = icmp ne i32 %2, 0
  %106 = and i1 %105, %104
  br i1 %106, label %107, label %205

107:                                              ; preds = %102
  %108 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %0, i32 %2, i32 8) #7
  %109 = getelementptr inbounds i8, i8* %15, i64 24
  %110 = bitcast i8* %109 to %struct._cms_interp_struc***
  %111 = bitcast i8* %109 to i8**
  store i8* %108, i8** %111, align 8
  %112 = icmp eq i8* %108, null
  br i1 %112, label %213, label %113

113:                                              ; preds = %107
  %114 = getelementptr inbounds i8, i8* %15, i64 16
  %115 = bitcast i8* %114 to %struct.cmsCurveSegment**
  %116 = getelementptr inbounds i8, i8* %15, i64 32
  %117 = bitcast i8* %116 to double (i32, double*, double)***
  %118 = zext i32 %2 to i64
  br label %119

119:                                              ; preds = %202, %113
  %120 = phi i64 [ 0, %113 ], [ %203, %202 ]
  %121 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %3, i64 %120
  %122 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %3, i64 %120, i32 2
  %123 = load i32, i32* %122, align 8
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %131

125:                                              ; preds = %119
  %126 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %3, i64 %120, i32 4
  %127 = load i32, i32* %126, align 8
  %128 = tail call %struct._cms_interp_struc* @_cmsComputeInterpParams(%struct._cmsContext_struct* %0, i32 %127, i32 1, i32 1, i8* null, i32 1) #7
  %129 = load %struct._cms_interp_struc**, %struct._cms_interp_struc*** %110, align 8
  %130 = getelementptr inbounds %struct._cms_interp_struc*, %struct._cms_interp_struc** %129, i64 %120
  store %struct._cms_interp_struc* %128, %struct._cms_interp_struc** %130, align 8
  br label %131

131:                                              ; preds = %125, %119
  %132 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %115, align 8
  %133 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %132, i64 %120
  %134 = bitcast %struct.cmsCurveSegment* %133 to i8*
  %135 = bitcast %struct.cmsCurveSegment* %121 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 112, i1 false)
  %136 = load i32, i32* %122, align 8
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %151

138:                                              ; preds = %131
  %139 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %3, i64 %120, i32 5
  %140 = load float*, float** %139, align 8
  %141 = icmp eq float* %140, null
  br i1 %141, label %151, label %142

142:                                              ; preds = %138
  %143 = bitcast float* %140 to i8*
  %144 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %3, i64 %120, i32 4
  %145 = load i32, i32* %144, align 8
  %146 = shl i32 %145, 2
  %147 = tail call i8* @_cmsDupMem(%struct._cmsContext_struct* %0, i8* nonnull %143, i32 %146) #7
  %148 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %115, align 8
  %149 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %148, i64 %120, i32 5
  %150 = bitcast float** %149 to i8**
  store i8* %147, i8** %150, align 8
  br label %154

151:                                              ; preds = %138, %131
  %152 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %115, align 8
  %153 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %152, i64 %120, i32 5
  store float* null, float** %153, align 8
  br label %154

154:                                              ; preds = %151, %142
  %155 = load i32, i32* %122, align 8
  %156 = tail call i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct* %0, i32 6) #7
  %157 = bitcast i8* %156 to %struct._cmsParametricCurvesCollection_st**
  %158 = load %struct._cmsParametricCurvesCollection_st*, %struct._cmsParametricCurvesCollection_st** %157, align 8
  %159 = icmp eq %struct._cmsParametricCurvesCollection_st* %158, null
  br i1 %159, label %160, label %162

160:                                              ; preds = %154
  %161 = sub nsw i32 0, %155
  br label %188

162:                                              ; preds = %154
  %163 = icmp slt i32 %155, 0
  %164 = sub nsw i32 0, %155
  %165 = select i1 %163, i32 %164, i32 %155
  br label %166

166:                                              ; preds = %184, %162
  %167 = phi %struct._cmsParametricCurvesCollection_st* [ %158, %162 ], [ %186, %184 ]
  %168 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %167, i64 0, i32 0
  %169 = load i32, i32* %168, align 8
  %170 = icmp sgt i32 %169, 0
  br i1 %170, label %171, label %184

171:                                              ; preds = %166
  %172 = sext i32 %169 to i64
  br label %173

173:                                              ; preds = %178, %171
  %174 = phi i64 [ 0, %171 ], [ %179, %178 ]
  %175 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %167, i64 0, i32 1, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %165, %176
  br i1 %177, label %181, label %178

178:                                              ; preds = %173
  %179 = add nuw nsw i64 %174, 1
  %180 = icmp eq i64 %179, %172
  br i1 %180, label %184, label %173

181:                                              ; preds = %173
  %182 = trunc i64 %174 to i32
  %183 = icmp eq i32 %182, -1
  br i1 %183, label %184, label %192

184:                                              ; preds = %178, %181, %166
  %185 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %167, i64 0, i32 4
  %186 = load %struct._cmsParametricCurvesCollection_st*, %struct._cmsParametricCurvesCollection_st** %185, align 8
  %187 = icmp eq %struct._cmsParametricCurvesCollection_st* %186, null
  br i1 %187, label %188, label %166

188:                                              ; preds = %184, %160
  %189 = phi i32 [ %161, %160 ], [ %164, %184 ]
  %190 = icmp slt i32 %155, 0
  %191 = select i1 %190, i32 %189, i32 %155
  switch i32 %191, label %202 [
    i32 1, label %194
    i32 2, label %194
    i32 3, label %194
    i32 4, label %194
    i32 5, label %194
    i32 6, label %194
    i32 7, label %194
    i32 8, label %194
    i32 108, label %194
  ]

192:                                              ; preds = %181
  %193 = icmp eq %struct._cmsParametricCurvesCollection_st* %167, null
  br i1 %193, label %202, label %194

194:                                              ; preds = %188, %188, %188, %188, %188, %188, %188, %188, %188, %192
  %195 = phi %struct._cmsParametricCurvesCollection_st* [ %167, %192 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %188 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %188 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %188 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %188 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %188 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %188 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %188 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %188 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %188 ]
  %196 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %195, i64 0, i32 3
  %197 = bitcast double (i32, double*, double)** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = load double (i32, double*, double)**, double (i32, double*, double)*** %117, align 8
  %200 = getelementptr inbounds double (i32, double*, double)*, double (i32, double*, double)** %199, i64 %120
  %201 = bitcast double (i32, double*, double)** %200 to i64*
  store i64 %198, i64* %201, align 8
  br label %202

202:                                              ; preds = %188, %192, %194
  %203 = add nuw nsw i64 %120, 1
  %204 = icmp eq i64 %203, %118
  br i1 %204, label %205, label %119

205:                                              ; preds = %202, %102
  %206 = load i32, i32* %103, align 8
  %207 = getelementptr inbounds i8, i8* %15, i64 48
  %208 = bitcast i8* %207 to i8**
  %209 = load i8*, i8** %208, align 8
  %210 = tail call %struct._cms_interp_struc* @_cmsComputeInterpParams(%struct._cmsContext_struct* %0, i32 %206, i32 1, i32 1, i8* %209, i32 0) #7
  %211 = bitcast i8* %15 to %struct._cms_interp_struc**
  store %struct._cms_interp_struc* %210, %struct._cms_interp_struc** %211, align 8
  %212 = icmp eq %struct._cms_interp_struc* %210, null
  br i1 %212, label %213, label %242

213:                                              ; preds = %107, %205, %42, %29, %24
  %214 = getelementptr inbounds i8, i8* %15, i64 24
  %215 = bitcast i8* %214 to %struct._cms_interp_struc***
  %216 = load %struct._cms_interp_struc**, %struct._cms_interp_struc*** %215, align 8
  %217 = icmp eq %struct._cms_interp_struc** %216, null
  br i1 %217, label %220, label %218

218:                                              ; preds = %213
  %219 = bitcast %struct._cms_interp_struc** %216 to i8*
  tail call void @_cmsFree(%struct._cmsContext_struct* %0, i8* nonnull %219) #7
  br label %220

220:                                              ; preds = %213, %218
  %221 = getelementptr inbounds i8, i8* %15, i64 16
  %222 = bitcast i8* %221 to %struct.cmsCurveSegment**
  %223 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %222, align 8
  %224 = icmp eq %struct.cmsCurveSegment* %223, null
  br i1 %224, label %227, label %225

225:                                              ; preds = %220
  %226 = bitcast %struct.cmsCurveSegment* %223 to i8*
  tail call void @_cmsFree(%struct._cmsContext_struct* %0, i8* nonnull %226) #7
  br label %227

227:                                              ; preds = %220, %225
  %228 = getelementptr inbounds i8, i8* %15, i64 32
  %229 = bitcast i8* %228 to double (i32, double*, double)***
  %230 = load double (i32, double*, double)**, double (i32, double*, double)*** %229, align 8
  %231 = icmp eq double (i32, double*, double)** %230, null
  br i1 %231, label %234, label %232

232:                                              ; preds = %227
  %233 = bitcast double (i32, double*, double)** %230 to i8*
  tail call void @_cmsFree(%struct._cmsContext_struct* %0, i8* nonnull %233) #7
  br label %234

234:                                              ; preds = %227, %232
  %235 = getelementptr inbounds i8, i8* %15, i64 48
  %236 = bitcast i8* %235 to i16**
  %237 = load i16*, i16** %236, align 8
  %238 = icmp eq i16* %237, null
  br i1 %238, label %241, label %239

239:                                              ; preds = %234
  %240 = bitcast i16* %237 to i8*
  tail call void @_cmsFree(%struct._cmsContext_struct* %0, i8* nonnull %240) #7
  br label %241

241:                                              ; preds = %234, %239
  tail call void @_cmsFree(%struct._cmsContext_struct* %0, i8* nonnull %15) #7
  br label %242

242:                                              ; preds = %205, %14, %241, %13, %7
  %243 = phi %struct._cms_curve_struct* [ null, %7 ], [ null, %13 ], [ null, %241 ], [ null, %14 ], [ %16, %205 ]
  ret %struct._cms_curve_struct* %243
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @cmsBuildSegmentedToneCurve(%struct._cmsContext_struct*, i32, %struct.cmsCurveSegment* readonly) local_unnamed_addr #0 {
  %4 = icmp eq i32 %1, 1
  br i1 %4, label %5, label %16

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %2, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %16

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %2, i64 0, i32 3, i64 0
  %11 = load double, double* %10, align 8
  %12 = fadd double %11, -1.000000e+00
  %13 = tail call double @llvm.fabs.f64(double %12) #7
  %14 = fcmp olt double %13, 1.000000e-03
  %15 = select i1 %14, i32 2, i32 4096
  br label %16

16:                                               ; preds = %9, %5, %3
  %17 = phi i32 [ %15, %9 ], [ 4096, %5 ], [ 4096, %3 ]
  %18 = tail call fastcc %struct._cms_curve_struct* @AllocateToneCurveStruct(%struct._cmsContext_struct* %0, i32 %17, i32 %1, %struct.cmsCurveSegment* %2, i16* null)
  %19 = icmp eq %struct._cms_curve_struct* %18, null
  br i1 %19, label %48, label %20

20:                                               ; preds = %16
  %21 = add nsw i32 %17, -1
  %22 = uitofp i32 %21 to double
  %23 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %18, i64 0, i32 6
  %24 = zext i32 %17 to i64
  br label %25

25:                                               ; preds = %20, %42
  %26 = phi i64 [ 0, %20 ], [ %46, %42 ]
  %27 = trunc i64 %26 to i32
  %28 = uitofp i32 %27 to double
  %29 = fdiv double %28, %22
  %30 = tail call fastcc double @EvalSegmentedFn(%struct._cms_curve_struct* nonnull %18, double %29)
  %31 = fmul double %30, 6.553500e+04
  %32 = fadd double %31, 5.000000e-01
  %33 = fcmp ugt double %32, 0.000000e+00
  br i1 %33, label %34, label %42

34:                                               ; preds = %25
  %35 = fcmp ult double %32, 6.553500e+04
  br i1 %35, label %36, label %42

36:                                               ; preds = %34
  %37 = fadd double %32, -3.276700e+04
  %38 = tail call double @llvm.floor.f64(double %37) #7
  %39 = fptosi double %38 to i32
  %40 = trunc i32 %39 to i16
  %41 = add i16 %40, 32767
  br label %42

42:                                               ; preds = %25, %34, %36
  %43 = phi i16 [ %41, %36 ], [ 0, %25 ], [ -1, %34 ]
  %44 = load i16*, i16** %23, align 8
  %45 = getelementptr inbounds i16, i16* %44, i64 %26
  store i16 %43, i16* %45, align 2
  %46 = add nuw nsw i64 %26, 1
  %47 = icmp ult i64 %46, %24
  br i1 %47, label %25, label %48

48:                                               ; preds = %42, %16
  ret %struct._cms_curve_struct* %18
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc double @EvalSegmentedFn(%struct._cms_curve_struct* nocapture readonly, double) unnamed_addr #0 {
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = bitcast float* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7
  store float 0xFFFFFFFFE0000000, float* %3, align 4
  %6 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %73

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 2
  %11 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %10, align 8
  %12 = sext i32 %7 to i64
  br label %13

13:                                               ; preds = %9, %71
  %14 = phi i64 [ %12, %9 ], [ %15, %71 ]
  %15 = add nsw i64 %14, -1
  %16 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %11, i64 %15, i32 0
  %17 = load float, float* %16, align 8
  %18 = fpext float %17 to double
  %19 = fcmp olt double %18, %1
  br i1 %19, label %20, label %71

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %11, i64 %15, i32 1
  %22 = load float, float* %21, align 4
  %23 = fpext float %22 to double
  %24 = fcmp ult double %23, %1
  br i1 %24, label %71, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %11, i64 %15, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %55

29:                                               ; preds = %25
  %30 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #7
  store float 0xFFFFFFFFE0000000, float* %4, align 4
  %31 = load float, float* %16, align 8
  %32 = fpext float %31 to double
  %33 = fsub double %1, %32
  %34 = fptrunc double %33 to float
  %35 = load float, float* %21, align 4
  %36 = fsub float %35, %31
  %37 = fdiv float %34, %36
  store float %37, float* %4, align 4
  %38 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %11, i64 %15, i32 5
  %39 = bitcast float** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 3
  %42 = load %struct._cms_interp_struc**, %struct._cms_interp_struc*** %41, align 8
  %43 = getelementptr inbounds %struct._cms_interp_struc*, %struct._cms_interp_struc** %42, i64 %15
  %44 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %43, align 8
  %45 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %44, i64 0, i32 7
  %46 = bitcast i8** %45 to i64*
  store i64 %40, i64* %46, align 8
  %47 = load %struct._cms_interp_struc**, %struct._cms_interp_struc*** %41, align 8
  %48 = getelementptr inbounds %struct._cms_interp_struc*, %struct._cms_interp_struc** %47, i64 %15
  %49 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %48, align 8
  %50 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %49, i64 0, i32 8
  %51 = bitcast %union.cmsInterpFunction* %50 to void (float*, float*, %struct._cms_interp_struc*)**
  %52 = load void (float*, float*, %struct._cms_interp_struc*)*, void (float*, float*, %struct._cms_interp_struc*)** %51, align 8
  call void %52(float* nonnull %4, float* nonnull %3, %struct._cms_interp_struc* %49) #7
  %53 = load float, float* %3, align 4
  %54 = fpext float %53 to double
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #7
  br label %62

55:                                               ; preds = %25
  %56 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 4
  %57 = load double (i32, double*, double)**, double (i32, double*, double)*** %56, align 8
  %58 = getelementptr inbounds double (i32, double*, double)*, double (i32, double*, double)** %57, i64 %15
  %59 = load double (i32, double*, double)*, double (i32, double*, double)** %58, align 8
  %60 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %11, i64 %15, i32 3, i64 0
  %61 = tail call double %59(i32 %27, double* %60, double %1) #7
  br label %62

62:                                               ; preds = %55, %29
  %63 = phi double [ %54, %29 ], [ %61, %55 ]
  %64 = call double @llvm.fabs.f64(double %63) #8
  %65 = fcmp oeq double %64, 0x7FF0000000000000
  br i1 %65, label %73, label %66

66:                                               ; preds = %62
  %67 = fsub double -0.000000e+00, %63
  %68 = call double @llvm.fabs.f64(double %67) #8
  %69 = fcmp oeq double %68, 0x7FF0000000000000
  %70 = select i1 %69, double 0xC480F0CF00000000, double %63
  br label %73

71:                                               ; preds = %20, %13
  %72 = icmp sgt i64 %15, 0
  br i1 %72, label %13, label %73

73:                                               ; preds = %71, %2, %66, %62
  %74 = phi double [ 0x4480F0CF00000000, %62 ], [ %70, %66 ], [ 0xC480F0CF00000000, %2 ], [ 0xC480F0CF00000000, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7
  ret double %74
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @cmsBuildTabulatedToneCurveFloat(%struct._cmsContext_struct*, i32, float*) local_unnamed_addr #0 {
  %4 = alloca [3 x %struct.cmsCurveSegment], align 16
  %5 = bitcast [3 x %struct.cmsCurveSegment]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 336, i8* nonnull %5) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 16 bitcast ([3 x { float, float, i32, [4 x i8], [10 x double], i32, [4 x i8], float* }]* @__const.cmsBuildTabulatedToneCurveFloat.Seg to i8*), i64 336, i1 false)
  %6 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 0
  %7 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 0, i32 0
  store float 0xC480F0CF00000000, float* %7, align 16
  %8 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 0, i32 1
  store float 0.000000e+00, float* %8, align 4
  %9 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 0, i32 2
  store i32 6, i32* %9, align 8
  %10 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 0, i32 3, i64 0
  store double 1.000000e+00, double* %10, align 16
  %11 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 0, i32 3, i64 1
  %12 = bitcast double* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false)
  %13 = load float, float* %2, align 4
  %14 = fpext float %13 to double
  %15 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 0, i32 3, i64 3
  store double %14, double* %15, align 8
  %16 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 0, i32 3, i64 4
  store double 0.000000e+00, double* %16, align 16
  %17 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 1, i32 0
  store float 0.000000e+00, float* %17, align 16
  %18 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 1, i32 1
  store float 1.000000e+00, float* %18, align 4
  %19 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 1, i32 2
  store i32 0, i32* %19, align 8
  %20 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 1, i32 4
  store i32 %1, i32* %20, align 16
  %21 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 1, i32 5
  store float* %2, float** %21, align 8
  %22 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 2, i32 0
  store float 1.000000e+00, float* %22, align 16
  %23 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 2, i32 1
  store float 0x4480F0CF00000000, float* %23, align 4
  %24 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 2, i32 2
  store i32 6, i32* %24, align 8
  %25 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 2, i32 3, i64 0
  store double 1.000000e+00, double* %25, align 16
  %26 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 2, i32 3, i64 1
  %27 = add i32 %1, -1
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds float, float* %2, i64 %28
  %30 = bitcast double* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false)
  %31 = load float, float* %29, align 4
  %32 = fpext float %31 to double
  %33 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 2, i32 3, i64 3
  store double %32, double* %33, align 8
  %34 = getelementptr inbounds [3 x %struct.cmsCurveSegment], [3 x %struct.cmsCurveSegment]* %4, i64 0, i64 2, i32 3, i64 4
  store double 0.000000e+00, double* %34, align 16
  %35 = call fastcc %struct._cms_curve_struct* @AllocateToneCurveStruct(%struct._cmsContext_struct* %0, i32 4096, i32 3, %struct.cmsCurveSegment* nonnull %6, i16* null) #7
  %36 = icmp eq %struct._cms_curve_struct* %35, null
  br i1 %36, label %62, label %37

37:                                               ; preds = %3
  %38 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %35, i64 0, i32 6
  br label %39

39:                                               ; preds = %56, %37
  %40 = phi i64 [ 0, %37 ], [ %60, %56 ]
  %41 = trunc i64 %40 to i32
  %42 = uitofp i32 %41 to double
  %43 = fdiv double %42, 4.095000e+03
  %44 = call fastcc double @EvalSegmentedFn(%struct._cms_curve_struct* nonnull %35, double %43) #7
  %45 = fmul double %44, 6.553500e+04
  %46 = fadd double %45, 5.000000e-01
  %47 = fcmp ugt double %46, 0.000000e+00
  br i1 %47, label %48, label %56

48:                                               ; preds = %39
  %49 = fcmp ult double %46, 6.553500e+04
  br i1 %49, label %50, label %56

50:                                               ; preds = %48
  %51 = fadd double %46, -3.276700e+04
  %52 = call double @llvm.floor.f64(double %51) #7
  %53 = fptosi double %52 to i32
  %54 = trunc i32 %53 to i16
  %55 = add i16 %54, 32767
  br label %56

56:                                               ; preds = %50, %48, %39
  %57 = phi i16 [ %55, %50 ], [ 0, %39 ], [ -1, %48 ]
  %58 = load i16*, i16** %38, align 8
  %59 = getelementptr inbounds i16, i16* %58, i64 %40
  store i16 %57, i16* %59, align 2
  %60 = add nuw nsw i64 %40, 1
  %61 = icmp eq i64 %60, 4096
  br i1 %61, label %62, label %39

62:                                               ; preds = %56, %3
  call void @llvm.lifetime.end.p0i8(i64 336, i8* nonnull %5) #7
  ret %struct._cms_curve_struct* %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @cmsBuildParametricToneCurve(%struct._cmsContext_struct*, i32, double* nocapture readonly) local_unnamed_addr #0 {
  %4 = alloca %struct.cmsCurveSegment, align 8
  %5 = bitcast %struct.cmsCurveSegment* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %5) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 bitcast ({ float, float, i32, [4 x i8], [10 x double], i32, [4 x i8], float* }* @__const.cmsBuildParametricToneCurve.Seg0 to i8*), i64 112, i1 false)
  %6 = tail call i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct* %0, i32 6) #7
  %7 = bitcast i8* %6 to %struct._cmsParametricCurvesCollection_st**
  %8 = load %struct._cmsParametricCurvesCollection_st*, %struct._cmsParametricCurvesCollection_st** %7, align 8
  %9 = icmp eq %struct._cmsParametricCurvesCollection_st* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = sub nsw i32 0, %1
  br label %38

12:                                               ; preds = %3
  %13 = icmp slt i32 %1, 0
  %14 = sub nsw i32 0, %1
  %15 = select i1 %13, i32 %14, i32 %1
  br label %16

16:                                               ; preds = %34, %12
  %17 = phi %struct._cmsParametricCurvesCollection_st* [ %8, %12 ], [ %36, %34 ]
  %18 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %34

21:                                               ; preds = %16
  %22 = sext i32 %19 to i64
  br label %23

23:                                               ; preds = %28, %21
  %24 = phi i64 [ 0, %21 ], [ %29, %28 ]
  %25 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %17, i64 0, i32 1, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %15, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %23
  %29 = add nuw nsw i64 %24, 1
  %30 = icmp eq i64 %29, %22
  br i1 %30, label %34, label %23

31:                                               ; preds = %23
  %32 = trunc i64 %24 to i32
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %42

34:                                               ; preds = %28, %31, %16
  %35 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %17, i64 0, i32 4
  %36 = load %struct._cmsParametricCurvesCollection_st*, %struct._cmsParametricCurvesCollection_st** %35, align 8
  %37 = icmp eq %struct._cmsParametricCurvesCollection_st* %36, null
  br i1 %37, label %38, label %16

38:                                               ; preds = %34, %10
  %39 = phi i32 [ %11, %10 ], [ %14, %34 ]
  %40 = icmp slt i32 %1, 0
  %41 = select i1 %40, i32 %39, i32 %1
  switch i32 %41, label %44 [
    i32 1, label %53
    i32 2, label %45
    i32 3, label %46
    i32 4, label %47
    i32 5, label %48
    i32 6, label %49
    i32 7, label %50
    i32 8, label %51
    i32 108, label %52
  ]

42:                                               ; preds = %31
  %43 = icmp eq %struct._cmsParametricCurvesCollection_st* %17, null
  br i1 %43, label %44, label %53

44:                                               ; preds = %38, %42
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %0, i32 8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 %1) #7
  br label %107

45:                                               ; preds = %38
  br label %53

46:                                               ; preds = %38
  br label %53

47:                                               ; preds = %38
  br label %53

48:                                               ; preds = %38
  br label %53

49:                                               ; preds = %38
  br label %53

50:                                               ; preds = %38
  br label %53

51:                                               ; preds = %38
  br label %53

52:                                               ; preds = %38
  br label %53

53:                                               ; preds = %38, %52, %51, %50, %49, %48, %47, %46, %45, %42
  %54 = phi %struct._cmsParametricCurvesCollection_st* [ %17, %42 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %38 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %45 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %46 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %47 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %48 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %49 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %50 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %51 ], [ bitcast ({ i32, <{ [9 x i32], [11 x i32] }>, <{ [9 x i32], [11 x i32] }>, double (i32, double*, double)*, %struct._cmsParametricCurvesCollection_st* }* @DefaultCurves to %struct._cmsParametricCurvesCollection_st*), %52 ]
  %55 = phi i64 [ %24, %42 ], [ 0, %38 ], [ 1, %45 ], [ 2, %46 ], [ 3, %47 ], [ 4, %48 ], [ 5, %49 ], [ 6, %50 ], [ 7, %51 ], [ 8, %52 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 112, i1 false)
  %56 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %4, i64 0, i32 0
  store float 0xC480F0CF00000000, float* %56, align 8
  %57 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %4, i64 0, i32 1
  store float 0x4480F0CF00000000, float* %57, align 4
  %58 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %4, i64 0, i32 2
  store i32 %1, i32* %58, align 8
  %59 = shl i64 %55, 32
  %60 = ashr exact i64 %59, 32
  %61 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %54, i64 0, i32 2, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = shl i32 %62, 3
  %64 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %4, i64 0, i32 3, i64 0
  %65 = bitcast double* %64 to i8*
  %66 = bitcast double* %2 to i8*
  %67 = zext i32 %63 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 %67, i1 false)
  %68 = icmp eq i32 %1, 1
  br i1 %68, label %69, label %75

69:                                               ; preds = %53
  %70 = load double, double* %64, align 8
  %71 = fadd double %70, -1.000000e+00
  %72 = tail call double @llvm.fabs.f64(double %71) #7
  %73 = fcmp olt double %72, 1.000000e-03
  %74 = select i1 %73, i32 2, i32 4096
  br label %75

75:                                               ; preds = %69, %53
  %76 = phi i32 [ %74, %69 ], [ 4096, %53 ]
  %77 = call fastcc %struct._cms_curve_struct* @AllocateToneCurveStruct(%struct._cmsContext_struct* %0, i32 %76, i32 1, %struct.cmsCurveSegment* nonnull %4, i16* null) #7
  %78 = icmp eq %struct._cms_curve_struct* %77, null
  br i1 %78, label %107, label %79

79:                                               ; preds = %75
  %80 = add nsw i32 %76, -1
  %81 = uitofp i32 %80 to double
  %82 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %77, i64 0, i32 6
  %83 = zext i32 %76 to i64
  br label %84

84:                                               ; preds = %101, %79
  %85 = phi i64 [ 0, %79 ], [ %105, %101 ]
  %86 = trunc i64 %85 to i32
  %87 = uitofp i32 %86 to double
  %88 = fdiv double %87, %81
  %89 = call fastcc double @EvalSegmentedFn(%struct._cms_curve_struct* nonnull %77, double %88) #7
  %90 = fmul double %89, 6.553500e+04
  %91 = fadd double %90, 5.000000e-01
  %92 = fcmp ugt double %91, 0.000000e+00
  br i1 %92, label %93, label %101

93:                                               ; preds = %84
  %94 = fcmp ult double %91, 6.553500e+04
  br i1 %94, label %95, label %101

95:                                               ; preds = %93
  %96 = fadd double %91, -3.276700e+04
  %97 = call double @llvm.floor.f64(double %96) #7
  %98 = fptosi double %97 to i32
  %99 = trunc i32 %98 to i16
  %100 = add i16 %99, 32767
  br label %101

101:                                              ; preds = %95, %93, %84
  %102 = phi i16 [ %100, %95 ], [ 0, %84 ], [ -1, %93 ]
  %103 = load i16*, i16** %82, align 8
  %104 = getelementptr inbounds i16, i16* %103, i64 %85
  store i16 %102, i16* %104, align 2
  %105 = add nuw nsw i64 %85, 1
  %106 = icmp ult i64 %105, %83
  br i1 %106, label %84, label %107

107:                                              ; preds = %101, %75, %44
  %108 = phi %struct._cms_curve_struct* [ null, %44 ], [ null, %75 ], [ %77, %101 ]
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %5) #7
  ret %struct._cms_curve_struct* %108
}

declare void @cmsSignalError(%struct._cmsContext_struct*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @cmsBuildGamma(%struct._cmsContext_struct*, double) local_unnamed_addr #0 {
  %3 = alloca double, align 8
  store double %1, double* %3, align 8
  %4 = call %struct._cms_curve_struct* @cmsBuildParametricToneCurve(%struct._cmsContext_struct* %0, i32 1, double* nonnull %3)
  ret %struct._cms_curve_struct* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsFreeToneCurve(%struct._cms_curve_struct*) local_unnamed_addr #0 {
  %2 = icmp eq %struct._cms_curve_struct* %0, null
  br i1 %2, label %67, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 0
  %5 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %4, align 8
  %6 = icmp eq %struct._cms_interp_struc* %5, null
  br i1 %6, label %67, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %5, i64 0, i32 0
  %9 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %8, align 8
  tail call void @_cmsFreeInterpParams(%struct._cms_interp_struc* nonnull %5) #7
  store %struct._cms_interp_struc* null, %struct._cms_interp_struc** %4, align 8
  %10 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 6
  %11 = load i16*, i16** %10, align 8
  %12 = icmp eq i16* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %7
  %14 = bitcast i16* %11 to i8*
  tail call void @_cmsFree(%struct._cmsContext_struct* %9, i8* nonnull %14) #7
  store i16* null, i16** %10, align 8
  br label %15

15:                                               ; preds = %7, %13
  %16 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 2
  %17 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %16, align 8
  %18 = icmp eq %struct.cmsCurveSegment* %17, null
  br i1 %18, label %59, label %19

19:                                               ; preds = %15
  %20 = bitcast %struct.cmsCurveSegment* %17 to i8*
  %21 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %54, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 3
  br label %26

26:                                               ; preds = %49, %24
  %27 = phi %struct.cmsCurveSegment* [ %17, %24 ], [ %50, %49 ]
  %28 = phi i64 [ 0, %24 ], [ %45, %49 ]
  %29 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %27, i64 %28, i32 5
  %30 = load float*, float** %29, align 8
  %31 = icmp eq float* %30, null
  br i1 %31, label %36, label %32

32:                                               ; preds = %26
  %33 = bitcast float* %30 to i8*
  tail call void @_cmsFree(%struct._cmsContext_struct* %9, i8* nonnull %33) #7
  %34 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %16, align 8
  %35 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %34, i64 %28, i32 5
  store float* null, float** %35, align 8
  br label %36

36:                                               ; preds = %26, %32
  %37 = load %struct._cms_interp_struc**, %struct._cms_interp_struc*** %25, align 8
  %38 = getelementptr inbounds %struct._cms_interp_struc*, %struct._cms_interp_struc** %37, i64 %28
  %39 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %38, align 8
  %40 = icmp eq %struct._cms_interp_struc* %39, null
  br i1 %40, label %44, label %41

41:                                               ; preds = %36
  tail call void @_cmsFreeInterpParams(%struct._cms_interp_struc* nonnull %39) #7
  %42 = load %struct._cms_interp_struc**, %struct._cms_interp_struc*** %25, align 8
  %43 = getelementptr inbounds %struct._cms_interp_struc*, %struct._cms_interp_struc** %42, i64 %28
  store %struct._cms_interp_struc* null, %struct._cms_interp_struc** %43, align 8
  br label %44

44:                                               ; preds = %36, %41
  %45 = add nuw nsw i64 %28, 1
  %46 = load i32, i32* %21, align 8
  %47 = zext i32 %46 to i64
  %48 = icmp ult i64 %45, %47
  br i1 %48, label %49, label %51

49:                                               ; preds = %44
  %50 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %16, align 8
  br label %26

51:                                               ; preds = %44
  %52 = bitcast %struct.cmsCurveSegment** %16 to i8**
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %19, %51
  %55 = phi i8* [ %53, %51 ], [ %20, %19 ]
  tail call void @_cmsFree(%struct._cmsContext_struct* %9, i8* %55) #7
  store %struct.cmsCurveSegment* null, %struct.cmsCurveSegment** %16, align 8
  %56 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 3
  %57 = bitcast %struct._cms_interp_struc*** %56 to i8**
  %58 = load i8*, i8** %57, align 8
  tail call void @_cmsFree(%struct._cmsContext_struct* %9, i8* %58) #7
  store %struct._cms_interp_struc** null, %struct._cms_interp_struc*** %56, align 8
  br label %59

59:                                               ; preds = %15, %54
  %60 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 4
  %61 = load double (i32, double*, double)**, double (i32, double*, double)*** %60, align 8
  %62 = icmp eq double (i32, double*, double)** %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %59
  %64 = bitcast double (i32, double*, double)** %61 to i8*
  tail call void @_cmsFree(%struct._cmsContext_struct* %9, i8* nonnull %64) #7
  store double (i32, double*, double)** null, double (i32, double*, double)*** %60, align 8
  br label %65

65:                                               ; preds = %59, %63
  %66 = bitcast %struct._cms_curve_struct* %0 to i8*
  tail call void @_cmsFree(%struct._cmsContext_struct* %9, i8* nonnull %66) #7
  br label %67

67:                                               ; preds = %1, %3, %65
  ret void
}

declare void @_cmsFreeInterpParams(%struct._cms_interp_struc*) local_unnamed_addr #1

declare void @_cmsFree(%struct._cmsContext_struct*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsFreeToneCurveTriple(%struct._cms_curve_struct** nocapture) local_unnamed_addr #0 {
  %2 = load %struct._cms_curve_struct*, %struct._cms_curve_struct** %0, align 8
  %3 = icmp eq %struct._cms_curve_struct* %2, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %1
  tail call void @cmsFreeToneCurve(%struct._cms_curve_struct* nonnull %2)
  br label %5

5:                                                ; preds = %1, %4
  %6 = getelementptr inbounds %struct._cms_curve_struct*, %struct._cms_curve_struct** %0, i64 1
  %7 = load %struct._cms_curve_struct*, %struct._cms_curve_struct** %6, align 8
  %8 = icmp eq %struct._cms_curve_struct* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %5
  tail call void @cmsFreeToneCurve(%struct._cms_curve_struct* nonnull %7)
  br label %10

10:                                               ; preds = %5, %9
  %11 = getelementptr inbounds %struct._cms_curve_struct*, %struct._cms_curve_struct** %0, i64 2
  %12 = load %struct._cms_curve_struct*, %struct._cms_curve_struct** %11, align 8
  %13 = icmp eq %struct._cms_curve_struct* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @cmsFreeToneCurve(%struct._cms_curve_struct* nonnull %12)
  br label %15

15:                                               ; preds = %10, %14
  %16 = bitcast %struct._cms_curve_struct** %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @cmsDupToneCurve(%struct._cms_curve_struct* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct._cms_curve_struct* %0, null
  br i1 %2, label %23, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 0
  %5 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %4, align 8
  %6 = icmp eq %struct._cms_interp_struc* %5, null
  br i1 %6, label %23, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 2
  %9 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %8, align 8
  %10 = icmp eq %struct.cmsCurveSegment* %9, null
  br i1 %10, label %23, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 6
  %13 = load i16*, i16** %12, align 8
  %14 = icmp eq i16* %13, null
  br i1 %14, label %23, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %5, i64 0, i32 0
  %17 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %16, align 8
  %18 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 5
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = tail call fastcc %struct._cms_curve_struct* @AllocateToneCurveStruct(%struct._cmsContext_struct* %17, i32 %19, i32 %21, %struct.cmsCurveSegment* nonnull %9, i16* nonnull %13)
  br label %23

23:                                               ; preds = %1, %3, %7, %11, %15
  %24 = phi %struct._cms_curve_struct* [ %22, %15 ], [ null, %11 ], [ null, %7 ], [ null, %3 ], [ null, %1 ]
  ret %struct._cms_curve_struct* %24
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @cmsJoinToneCurve(%struct._cmsContext_struct*, %struct._cms_curve_struct* nocapture readonly, %struct._cms_curve_struct* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  %9 = tail call %struct._cms_curve_struct* @cmsReverseToneCurveEx(i32 %3, %struct._cms_curve_struct* %2)
  %10 = icmp eq %struct._cms_curve_struct* %9, null
  br i1 %10, label %97, label %11

11:                                               ; preds = %4
  %12 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %0, i32 %3, i32 4) #7
  %13 = bitcast i8* %12 to float*
  %14 = icmp eq i8* %12, null
  br i1 %14, label %95, label %15

15:                                               ; preds = %11
  %16 = icmp eq i32 %3, 0
  br i1 %16, label %93, label %17

17:                                               ; preds = %15
  %18 = add i32 %3, -1
  %19 = uitofp i32 %18 to float
  %20 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %1, i64 0, i32 1
  %21 = bitcast i16* %7 to i8*
  %22 = bitcast i16* %8 to i8*
  %23 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %1, i64 0, i32 0
  %24 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %9, i64 0, i32 1
  %25 = bitcast i16* %5 to i8*
  %26 = bitcast i16* %6 to i8*
  %27 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %9, i64 0, i32 0
  %28 = zext i32 %3 to i64
  br label %29

29:                                               ; preds = %87, %17
  %30 = phi i64 [ 0, %17 ], [ %91, %87 ]
  %31 = trunc i64 %30 to i32
  %32 = uitofp i32 %31 to float
  %33 = fdiv float %32, %19
  %34 = load i32, i32* %20, align 8
  %35 = icmp eq i32 %34, 0
  %36 = fpext float %33 to double
  br i1 %35, label %37, label %57

37:                                               ; preds = %29
  %38 = fmul double %36, 6.553500e+04
  %39 = fadd double %38, 5.000000e-01
  %40 = fcmp ugt double %39, 0.000000e+00
  br i1 %40, label %41, label %49

41:                                               ; preds = %37
  %42 = fcmp ult double %39, 6.553500e+04
  br i1 %42, label %43, label %49

43:                                               ; preds = %41
  %44 = fadd double %39, -3.276700e+04
  %45 = call double @llvm.floor.f64(double %44) #7
  %46 = fptosi double %45 to i32
  %47 = trunc i32 %46 to i16
  %48 = add i16 %47, 32767
  br label %49

49:                                               ; preds = %43, %41, %37
  %50 = phi i16 [ %48, %43 ], [ 0, %37 ], [ -1, %41 ]
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %21) #7
  store i16 %50, i16* %7, align 2
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %22) #7
  store i16 -21846, i16* %8, align 2
  %51 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %23, align 8
  %52 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %51, i64 0, i32 8, i32 0
  %53 = load void (i16*, i16*, %struct._cms_interp_struc*)*, void (i16*, i16*, %struct._cms_interp_struc*)** %52, align 8
  call void %53(i16* nonnull %7, i16* nonnull %8, %struct._cms_interp_struc* %51) #7
  %54 = load i16, i16* %8, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %22) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %21) #7
  %55 = uitofp i16 %54 to double
  %56 = fdiv double %55, 6.553500e+04
  br label %59

57:                                               ; preds = %29
  %58 = call fastcc double @EvalSegmentedFn(%struct._cms_curve_struct* %1, double %36) #7
  br label %59

59:                                               ; preds = %49, %57
  %60 = phi double [ %56, %49 ], [ %58, %57 ]
  %61 = fptrunc double %60 to float
  %62 = load i32, i32* %24, align 8
  %63 = icmp eq i32 %62, 0
  %64 = fpext float %61 to double
  br i1 %63, label %65, label %85

65:                                               ; preds = %59
  %66 = fmul double %64, 6.553500e+04
  %67 = fadd double %66, 5.000000e-01
  %68 = fcmp ugt double %67, 0.000000e+00
  br i1 %68, label %69, label %77

69:                                               ; preds = %65
  %70 = fcmp ult double %67, 6.553500e+04
  br i1 %70, label %71, label %77

71:                                               ; preds = %69
  %72 = fadd double %67, -3.276700e+04
  %73 = call double @llvm.floor.f64(double %72) #7
  %74 = fptosi double %73 to i32
  %75 = trunc i32 %74 to i16
  %76 = add i16 %75, 32767
  br label %77

77:                                               ; preds = %71, %69, %65
  %78 = phi i16 [ %76, %71 ], [ 0, %65 ], [ -1, %69 ]
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %25) #7
  store i16 %78, i16* %5, align 2
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %26) #7
  store i16 -21846, i16* %6, align 2
  %79 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %27, align 8
  %80 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %79, i64 0, i32 8, i32 0
  %81 = load void (i16*, i16*, %struct._cms_interp_struc*)*, void (i16*, i16*, %struct._cms_interp_struc*)** %80, align 8
  call void %81(i16* nonnull %5, i16* nonnull %6, %struct._cms_interp_struc* %79) #7
  %82 = load i16, i16* %6, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %26) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %25) #7
  %83 = uitofp i16 %82 to double
  %84 = fdiv double %83, 6.553500e+04
  br label %87

85:                                               ; preds = %59
  %86 = call fastcc double @EvalSegmentedFn(%struct._cms_curve_struct* nonnull %9, double %64) #7
  br label %87

87:                                               ; preds = %77, %85
  %88 = phi double [ %84, %77 ], [ %86, %85 ]
  %89 = fptrunc double %88 to float
  %90 = getelementptr inbounds float, float* %13, i64 %30
  store float %89, float* %90, align 4
  %91 = add nuw nsw i64 %30, 1
  %92 = icmp eq i64 %91, %28
  br i1 %92, label %93, label %29

93:                                               ; preds = %87, %15
  %94 = call %struct._cms_curve_struct* @cmsBuildTabulatedToneCurveFloat(%struct._cmsContext_struct* %0, i32 %3, float* nonnull %13)
  call void @_cmsFree(%struct._cmsContext_struct* %0, i8* nonnull %12) #7
  br label %95

95:                                               ; preds = %93, %11
  %96 = phi %struct._cms_curve_struct* [ %94, %93 ], [ null, %11 ]
  call void @cmsFreeToneCurve(%struct._cms_curve_struct* nonnull %9)
  br label %97

97:                                               ; preds = %4, %95
  %98 = phi %struct._cms_curve_struct* [ %96, %95 ], [ null, %4 ]
  ret %struct._cms_curve_struct* %98
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @cmsReverseToneCurveEx(i32, %struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %6, label %59

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %1, i64 0, i32 2
  %8 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %7, align 8
  %9 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %59

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %1, i64 0, i32 0
  %14 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %13, align 8
  %15 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %14, i64 0, i32 0
  %16 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %15, align 8
  %17 = tail call i8* @_cmsContextGetClientChunk(%struct._cmsContext_struct* %16, i32 6) #7
  %18 = bitcast i8* %17 to %struct._cmsParametricCurvesCollection_st**
  %19 = load %struct._cmsParametricCurvesCollection_st*, %struct._cmsParametricCurvesCollection_st** %18, align 8
  %20 = icmp eq %struct._cmsParametricCurvesCollection_st* %19, null
  %21 = sub nsw i32 0, %10
  br i1 %20, label %44, label %22

22:                                               ; preds = %12, %40
  %23 = phi %struct._cmsParametricCurvesCollection_st* [ %42, %40 ], [ %19, %12 ]
  %24 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %23, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %40

27:                                               ; preds = %22
  %28 = sext i32 %25 to i64
  br label %29

29:                                               ; preds = %34, %27
  %30 = phi i64 [ 0, %27 ], [ %35, %34 ]
  %31 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %23, i64 0, i32 1, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %10, %32
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp eq i64 %35, %28
  br i1 %36, label %40, label %29

37:                                               ; preds = %29
  %38 = trunc i64 %30 to i32
  %39 = icmp eq i32 %38, -1
  br i1 %39, label %40, label %47

40:                                               ; preds = %34, %37, %22
  %41 = getelementptr inbounds %struct._cmsParametricCurvesCollection_st, %struct._cmsParametricCurvesCollection_st* %23, i64 0, i32 4
  %42 = load %struct._cmsParametricCurvesCollection_st*, %struct._cmsParametricCurvesCollection_st** %41, align 8
  %43 = icmp eq %struct._cmsParametricCurvesCollection_st* %42, null
  br i1 %43, label %44, label %22

44:                                               ; preds = %40, %12
  %45 = icmp slt i32 %10, 0
  %46 = select i1 %45, i32 %21, i32 %10
  switch i32 %46, label %59 [
    i32 1, label %49
    i32 2, label %49
    i32 3, label %49
    i32 4, label %49
    i32 5, label %49
    i32 6, label %49
    i32 7, label %49
    i32 8, label %49
    i32 108, label %49
  ]

47:                                               ; preds = %37
  %48 = icmp eq %struct._cmsParametricCurvesCollection_st* %23, null
  br i1 %48, label %59, label %49

49:                                               ; preds = %44, %44, %44, %44, %44, %44, %44, %44, %44, %47
  %50 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %13, align 8
  %51 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %50, i64 0, i32 0
  %52 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %51, align 8
  %53 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %7, align 8
  %54 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %53, i64 0, i32 2
  %55 = load i32, i32* %54, align 8
  %56 = sub nsw i32 0, %55
  %57 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %53, i64 0, i32 3, i64 0
  %58 = tail call %struct._cms_curve_struct* @cmsBuildParametricToneCurve(%struct._cmsContext_struct* %52, i32 %56, double* %57)
  br label %219

59:                                               ; preds = %44, %47, %6, %2
  %60 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %1, i64 0, i32 0
  %61 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %60, align 8
  %62 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %61, i64 0, i32 0
  %63 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %62, align 8
  %64 = tail call fastcc %struct._cms_curve_struct* @AllocateToneCurveStruct(%struct._cmsContext_struct* %63, i32 %0, i32 0, %struct.cmsCurveSegment* null, i16* null) #7
  %65 = icmp eq %struct._cms_curve_struct* %64, null
  br i1 %65, label %219, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %1, i64 0, i32 6
  %68 = load i16*, i16** %67, align 8
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %1, i64 0, i32 5
  %71 = load i32, i32* %70, align 8
  %72 = add i32 %71, -1
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %68, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = icmp ugt i16 %69, %75
  %77 = icmp sgt i32 %0, 0
  br i1 %77, label %78, label %219

78:                                               ; preds = %66
  %79 = add nsw i32 %0, -1
  %80 = uitofp i32 %79 to double
  %81 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %64, i64 0, i32 6
  %82 = zext i32 %0 to i64
  br label %83

83:                                               ; preds = %217, %78
  %84 = phi i16* [ %68, %78 ], [ %218, %217 ]
  %85 = phi i64 [ 0, %78 ], [ %215, %217 ]
  %86 = phi double [ 0.000000e+00, %78 ], [ %212, %217 ]
  %87 = phi double [ 0.000000e+00, %78 ], [ %211, %217 ]
  %88 = trunc i64 %85 to i32
  %89 = sitofp i32 %88 to double
  %90 = fmul double %89, 6.553500e+04
  %91 = fdiv double %90, %80
  %92 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %60, align 8
  %93 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %92, i64 0, i32 5, i64 0
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %194, label %96

96:                                               ; preds = %83
  %97 = load i16, i16* %84, align 2
  %98 = zext i32 %94 to i64
  %99 = getelementptr inbounds i16, i16* %84, i64 %98
  %100 = load i16, i16* %99, align 2
  %101 = icmp ult i16 %97, %100
  %102 = icmp sgt i32 %94, 0
  br i1 %101, label %104, label %103

103:                                              ; preds = %96
  br i1 %102, label %130, label %194

104:                                              ; preds = %96
  br i1 %102, label %105, label %194

105:                                              ; preds = %104
  %106 = sext i32 %94 to i64
  %107 = getelementptr inbounds i16, i16* %84, i64 %106
  %108 = load i16, i16* %107, align 2
  br label %109

109:                                              ; preds = %128, %105
  %110 = phi i16 [ %108, %105 ], [ %114, %128 ]
  %111 = phi i64 [ %106, %105 ], [ %112, %128 ]
  %112 = add nsw i64 %111, -1
  %113 = getelementptr inbounds i16, i16* %84, i64 %112
  %114 = load i16, i16* %113, align 2
  %115 = icmp ugt i16 %114, %110
  br i1 %115, label %122, label %116

116:                                              ; preds = %109
  %117 = uitofp i16 %114 to double
  %118 = fcmp ult double %91, %117
  %119 = uitofp i16 %110 to double
  %120 = fcmp ugt double %91, %119
  %121 = or i1 %120, %118
  br i1 %121, label %128, label %151

122:                                              ; preds = %109
  %123 = uitofp i16 %110 to double
  %124 = fcmp ult double %91, %123
  %125 = uitofp i16 %114 to double
  %126 = fcmp ugt double %91, %125
  %127 = or i1 %124, %126
  br i1 %127, label %128, label %151

128:                                              ; preds = %122, %116
  %129 = icmp sgt i64 %112, 0
  br i1 %129, label %109, label %194

130:                                              ; preds = %103, %149
  %131 = phi i16 [ %135, %149 ], [ %97, %103 ]
  %132 = phi i64 [ %133, %149 ], [ 0, %103 ]
  %133 = add nuw nsw i64 %132, 1
  %134 = getelementptr inbounds i16, i16* %84, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = icmp ugt i16 %131, %135
  br i1 %136, label %143, label %137

137:                                              ; preds = %130
  %138 = uitofp i16 %131 to double
  %139 = fcmp ult double %91, %138
  %140 = uitofp i16 %135 to double
  %141 = fcmp ugt double %91, %140
  %142 = or i1 %139, %141
  br i1 %142, label %149, label %151

143:                                              ; preds = %130
  %144 = uitofp i16 %135 to double
  %145 = fcmp ult double %91, %144
  %146 = uitofp i16 %131 to double
  %147 = fcmp ugt double %91, %146
  %148 = or i1 %147, %145
  br i1 %148, label %149, label %151

149:                                              ; preds = %143, %137
  %150 = icmp eq i64 %133, %98
  br i1 %150, label %194, label %130

151:                                              ; preds = %137, %143, %116, %122
  %152 = phi i64 [ %112, %122 ], [ %112, %116 ], [ %132, %143 ], [ %132, %137 ]
  %153 = trunc i64 %152 to i32
  %154 = icmp sgt i32 %153, -1
  br i1 %154, label %155, label %194

155:                                              ; preds = %151
  %156 = shl i64 %152, 32
  %157 = ashr exact i64 %156, 32
  %158 = getelementptr inbounds i16, i16* %84, i64 %157
  %159 = load i16, i16* %158, align 2
  %160 = uitofp i16 %159 to double
  %161 = add nuw nsw i32 %153, 1
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i16, i16* %84, i64 %162
  %164 = load i16, i16* %163, align 2
  %165 = uitofp i16 %164 to double
  %166 = sitofp i32 %153 to double
  %167 = fmul double %166, 6.553500e+04
  %168 = load i32, i32* %70, align 8
  %169 = add i32 %168, -1
  %170 = uitofp i32 %169 to double
  %171 = fdiv double %167, %170
  %172 = sitofp i32 %161 to double
  %173 = fmul double %172, 6.553500e+04
  %174 = fdiv double %173, %170
  %175 = fcmp oeq double %160, %165
  br i1 %175, label %176, label %188

176:                                              ; preds = %155
  %177 = select i1 %76, double %171, double %174
  %178 = fadd double %177, 5.000000e-01
  %179 = fcmp ugt double %178, 0.000000e+00
  br i1 %179, label %180, label %209

180:                                              ; preds = %176
  %181 = fcmp ult double %178, 6.553500e+04
  br i1 %181, label %182, label %209

182:                                              ; preds = %180
  %183 = fadd double %178, -3.276700e+04
  %184 = tail call double @llvm.floor.f64(double %183) #7
  %185 = fptosi double %184 to i32
  %186 = trunc i32 %185 to i16
  %187 = add i16 %186, 32767
  br label %209

188:                                              ; preds = %155
  %189 = fsub double %174, %171
  %190 = fsub double %165, %160
  %191 = fdiv double %189, %190
  %192 = fmul double %191, %165
  %193 = fsub double %174, %192
  br label %194

194:                                              ; preds = %149, %128, %103, %104, %83, %188, %151
  %195 = phi double [ %191, %188 ], [ %87, %151 ], [ %87, %83 ], [ %87, %104 ], [ %87, %103 ], [ %87, %128 ], [ %87, %149 ]
  %196 = phi double [ %193, %188 ], [ %86, %151 ], [ %86, %83 ], [ %86, %104 ], [ %86, %103 ], [ %86, %128 ], [ %86, %149 ]
  %197 = fmul double %91, %195
  %198 = fadd double %197, %196
  %199 = fadd double %198, 5.000000e-01
  %200 = fcmp ugt double %199, 0.000000e+00
  br i1 %200, label %201, label %209

201:                                              ; preds = %194
  %202 = fcmp ult double %199, 6.553500e+04
  br i1 %202, label %203, label %209

203:                                              ; preds = %201
  %204 = fadd double %199, -3.276700e+04
  %205 = tail call double @llvm.floor.f64(double %204) #7
  %206 = fptosi double %205 to i32
  %207 = trunc i32 %206 to i16
  %208 = add i16 %207, 32767
  br label %209

209:                                              ; preds = %203, %201, %194, %182, %180, %176
  %210 = phi i16 [ %187, %182 ], [ 0, %176 ], [ -1, %180 ], [ %208, %203 ], [ 0, %194 ], [ -1, %201 ]
  %211 = phi double [ %87, %182 ], [ %87, %176 ], [ %87, %180 ], [ %195, %203 ], [ %195, %194 ], [ %195, %201 ]
  %212 = phi double [ %86, %182 ], [ %86, %176 ], [ %86, %180 ], [ %196, %203 ], [ %196, %194 ], [ %196, %201 ]
  %213 = load i16*, i16** %81, align 8
  %214 = getelementptr inbounds i16, i16* %213, i64 %85
  store i16 %210, i16* %214, align 2
  %215 = add nuw nsw i64 %85, 1
  %216 = icmp eq i64 %215, %82
  br i1 %216, label %219, label %217

217:                                              ; preds = %209
  %218 = load i16*, i16** %67, align 8
  br label %83

219:                                              ; preds = %209, %66, %59, %49
  %220 = phi %struct._cms_curve_struct* [ %58, %49 ], [ null, %59 ], [ %64, %66 ], [ %64, %209 ]
  ret %struct._cms_curve_struct* %220
}

declare i8* @_cmsCalloc(%struct._cmsContext_struct*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden float @cmsEvalToneCurveFloat(%struct._cms_curve_struct* nocapture readonly, float) local_unnamed_addr #0 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  %8 = fpext float %1 to double
  br i1 %7, label %9, label %32

9:                                                ; preds = %2
  %10 = fmul double %8, 6.553500e+04
  %11 = fadd double %10, 5.000000e-01
  %12 = fcmp ugt double %11, 0.000000e+00
  br i1 %12, label %13, label %21

13:                                               ; preds = %9
  %14 = fcmp ult double %11, 6.553500e+04
  br i1 %14, label %15, label %21

15:                                               ; preds = %13
  %16 = fadd double %11, -3.276700e+04
  %17 = tail call double @llvm.floor.f64(double %16) #7
  %18 = fptosi double %17 to i32
  %19 = trunc i32 %18 to i16
  %20 = add i16 %19, 32767
  br label %21

21:                                               ; preds = %9, %13, %15
  %22 = phi i16 [ %20, %15 ], [ 0, %9 ], [ -1, %13 ]
  %23 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %23)
  store i16 %22, i16* %3, align 2
  %24 = bitcast i16* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %24) #7
  store i16 -21846, i16* %4, align 2
  %25 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 0
  %26 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %25, align 8
  %27 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %26, i64 0, i32 8, i32 0
  %28 = load void (i16*, i16*, %struct._cms_interp_struc*)*, void (i16*, i16*, %struct._cms_interp_struc*)** %27, align 8
  call void %28(i16* nonnull %3, i16* nonnull %4, %struct._cms_interp_struc* %26) #7
  %29 = load i16, i16* %4, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %24) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %23)
  %30 = uitofp i16 %29 to double
  %31 = fdiv double %30, 6.553500e+04
  br label %34

32:                                               ; preds = %2
  %33 = tail call fastcc double @EvalSegmentedFn(%struct._cms_curve_struct* %0, double %8)
  br label %34

34:                                               ; preds = %32, %21
  %35 = phi double [ %31, %21 ], [ %33, %32 ]
  %36 = fptrunc double %35 to float
  ret float %36
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @cmsIsToneCurveDescending(%struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 6
  %3 = load i16*, i16** %2, align 8
  %4 = load i16, i16* %3, align 2
  %5 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i16, i16* %3, i64 %8
  %10 = load i16, i16* %9, align 2
  %11 = icmp ugt i16 %4, %10
  %12 = zext i1 %11 to i32
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @cmsReverseToneCurve(%struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #0 {
  %2 = tail call %struct._cms_curve_struct* @cmsReverseToneCurveEx(i32 4096, %struct._cms_curve_struct* %0)
  ret %struct._cms_curve_struct* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsSmoothToneCurve(%struct._cms_curve_struct* readonly, double) local_unnamed_addr #0 {
  %3 = icmp eq %struct._cms_curve_struct* %0, null
  br i1 %3, label %483, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 0
  %6 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %5, align 8
  %7 = icmp eq %struct._cms_interp_struc* %6, null
  br i1 %7, label %483, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %6, i64 0, i32 0
  %10 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %9, align 8
  %11 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 6
  %12 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 5
  %13 = load i32, i32* %12, align 8
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %18, label %483

15:                                               ; preds = %18
  %16 = sext i32 %35 to i64
  %17 = icmp slt i64 %34, %16
  br i1 %17, label %18, label %483

18:                                               ; preds = %8, %15
  %19 = phi i64 [ %34, %15 ], [ 0, %8 ]
  %20 = phi i32 [ %35, %15 ], [ %13, %8 ]
  %21 = load i16*, i16** %11, align 8
  %22 = getelementptr inbounds i16, i16* %21, i64 %19
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = trunc i64 %19 to i32
  %26 = sitofp i32 %25 to double
  %27 = tail call zeroext i16 @_cmsQuantizeVal(double %26, i32 %20) #7
  %28 = zext i16 %27 to i32
  %29 = sub nsw i32 %24, %28
  %30 = icmp slt i32 %29, 0
  %31 = sub nsw i32 0, %29
  %32 = select i1 %30, i32 %31, i32 %29
  %33 = icmp sgt i32 %32, 15
  %34 = add nuw nsw i64 %19, 1
  %35 = load i32, i32* %12, align 8
  br i1 %33, label %36, label %15

36:                                               ; preds = %18
  %37 = icmp ult i32 %35, 4097
  br i1 %37, label %38, label %482

38:                                               ; preds = %36
  %39 = add nuw nsw i32 %35, 1
  %40 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %10, i32 %39, i32 4) #7
  %41 = bitcast i8* %40 to float*
  %42 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %10, i32 %39, i32 4) #7
  %43 = bitcast i8* %42 to float*
  %44 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %10, i32 %39, i32 4) #7
  %45 = bitcast i8* %44 to float*
  %46 = icmp ne i8* %40, null
  %47 = icmp ne i8* %42, null
  %48 = and i1 %46, %47
  %49 = icmp ne i8* %44, null
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %474

51:                                               ; preds = %38
  %52 = zext i32 %39 to i64
  %53 = shl nuw nsw i64 %52, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %40, i8 0, i64 %53, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %42, i8 0, i64 %53, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %44, i8 0, i64 %53, i1 false)
  %54 = icmp eq i32 %35, 0
  br i1 %54, label %91, label %55

55:                                               ; preds = %51
  %56 = zext i32 %35 to i64
  %57 = and i64 %56, 1
  %58 = icmp eq i32 %35, 1
  br i1 %58, label %80, label %59

59:                                               ; preds = %55
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %75, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %78, %61 ]
  %64 = load i16*, i16** %11, align 8
  %65 = getelementptr inbounds i16, i16* %64, i64 %62
  %66 = load i16, i16* %65, align 2
  %67 = uitofp i16 %66 to float
  %68 = or i64 %62, 1
  %69 = getelementptr inbounds float, float* %43, i64 %68
  store float %67, float* %69, align 4
  %70 = getelementptr inbounds float, float* %41, i64 %68
  store float 1.000000e+00, float* %70, align 4
  %71 = load i16*, i16** %11, align 8
  %72 = getelementptr inbounds i16, i16* %71, i64 %68
  %73 = load i16, i16* %72, align 2
  %74 = uitofp i16 %73 to float
  %75 = add nuw nsw i64 %62, 2
  %76 = getelementptr inbounds float, float* %43, i64 %75
  store float %74, float* %76, align 4
  %77 = getelementptr inbounds float, float* %41, i64 %75
  store float 1.000000e+00, float* %77, align 4
  %78 = add i64 %63, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %61

80:                                               ; preds = %61, %55
  %81 = phi i64 [ 0, %55 ], [ %75, %61 ]
  %82 = icmp eq i64 %57, 0
  br i1 %82, label %91, label %83

83:                                               ; preds = %80
  %84 = load i16*, i16** %11, align 8
  %85 = getelementptr inbounds i16, i16* %84, i64 %81
  %86 = load i16, i16* %85, align 2
  %87 = uitofp i16 %86 to float
  %88 = add nuw nsw i64 %81, 1
  %89 = getelementptr inbounds float, float* %43, i64 %88
  store float %87, float* %89, align 4
  %90 = getelementptr inbounds float, float* %41, i64 %88
  store float 1.000000e+00, float* %90, align 4
  br label %91

91:                                               ; preds = %83, %80, %51
  %92 = fptrunc double %1 to float
  %93 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %10, i32 4097, i32 4) #7
  %94 = bitcast i8* %93 to float*
  %95 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %10, i32 4097, i32 4) #7
  %96 = bitcast i8* %95 to float*
  %97 = tail call i8* @_cmsCalloc(%struct._cmsContext_struct* %10, i32 4097, i32 4) #7
  %98 = bitcast i8* %97 to float*
  %99 = icmp ne i8* %93, null
  %100 = icmp ne i8* %95, null
  %101 = and i1 %99, %100
  %102 = icmp ne i8* %97, null
  %103 = and i1 %101, %102
  br i1 %103, label %104, label %412

104:                                              ; preds = %91
  %105 = getelementptr inbounds i8, i8* %40, i64 4
  %106 = bitcast i8* %105 to float*
  %107 = load float, float* %106, align 4
  %108 = fadd float %107, %92
  %109 = getelementptr inbounds i8, i8* %95, i64 4
  %110 = bitcast i8* %109 to float*
  store float %108, float* %110, align 4
  %111 = fmul float %92, -2.000000e+00
  %112 = fdiv float %111, %108
  %113 = getelementptr inbounds i8, i8* %93, i64 4
  %114 = bitcast i8* %113 to float*
  store float %112, float* %114, align 4
  %115 = load float, float* %110, align 4
  %116 = fdiv float %92, %115
  %117 = getelementptr inbounds i8, i8* %97, i64 4
  %118 = bitcast i8* %117 to float*
  store float %116, float* %118, align 4
  %119 = load float, float* %106, align 4
  %120 = getelementptr inbounds i8, i8* %42, i64 4
  %121 = bitcast i8* %120 to float*
  %122 = load float, float* %121, align 4
  %123 = fmul float %119, %122
  %124 = getelementptr inbounds i8, i8* %44, i64 4
  %125 = bitcast i8* %124 to float*
  store float %123, float* %125, align 4
  %126 = getelementptr inbounds i8, i8* %40, i64 8
  %127 = bitcast i8* %126 to float*
  %128 = load float, float* %127, align 4
  %129 = fmul float %92, 5.000000e+00
  %130 = fadd float %129, %128
  %131 = load float, float* %110, align 4
  %132 = load float, float* %114, align 4
  %133 = fmul float %131, %132
  %134 = fmul float %132, %133
  %135 = fsub float %130, %134
  %136 = getelementptr inbounds i8, i8* %95, i64 8
  %137 = bitcast i8* %136 to float*
  store float %135, float* %137, align 4
  %138 = fmul float %92, -4.000000e+00
  %139 = load float, float* %114, align 4
  %140 = fmul float %131, %139
  %141 = load float, float* %118, align 4
  %142 = fmul float %140, %141
  %143 = fsub float %138, %142
  %144 = fdiv float %143, %135
  %145 = getelementptr inbounds i8, i8* %93, i64 8
  %146 = bitcast i8* %145 to float*
  store float %144, float* %146, align 4
  %147 = load float, float* %137, align 4
  %148 = fdiv float %92, %147
  %149 = getelementptr inbounds i8, i8* %97, i64 8
  %150 = bitcast i8* %149 to float*
  store float %148, float* %150, align 4
  %151 = load float, float* %127, align 4
  %152 = getelementptr inbounds i8, i8* %42, i64 8
  %153 = bitcast i8* %152 to float*
  %154 = load float, float* %153, align 4
  %155 = fmul float %151, %154
  %156 = load float, float* %114, align 4
  %157 = load float, float* %125, align 4
  %158 = fmul float %156, %157
  %159 = fsub float %155, %158
  %160 = getelementptr inbounds i8, i8* %44, i64 8
  %161 = bitcast i8* %160 to float*
  store float %159, float* %161, align 4
  %162 = add i32 %35, -1
  %163 = icmp sgt i32 %162, 3
  br i1 %163, label %164, label %305

164:                                              ; preds = %104
  %165 = fmul float %92, 6.000000e+00
  %166 = zext i32 %162 to i64
  %167 = getelementptr i8, i8* %95, i64 4
  %168 = shl nuw nsw i64 %166, 2
  %169 = getelementptr i8, i8* %95, i64 %168
  %170 = getelementptr i8, i8* %93, i64 8
  %171 = getelementptr i8, i8* %93, i64 %168
  %172 = getelementptr i8, i8* %97, i64 4
  %173 = getelementptr i8, i8* %97, i64 %168
  %174 = getelementptr i8, i8* %44, i64 4
  %175 = getelementptr i8, i8* %44, i64 %168
  %176 = icmp ult i8* %167, %171
  %177 = icmp ult i8* %170, %169
  %178 = and i1 %176, %177
  %179 = icmp ult i8* %167, %173
  %180 = icmp ult i8* %172, %169
  %181 = and i1 %179, %180
  %182 = or i1 %178, %181
  %183 = icmp ult i8* %167, %175
  %184 = icmp ult i8* %174, %169
  %185 = and i1 %183, %184
  %186 = or i1 %182, %185
  %187 = icmp ult i8* %170, %173
  %188 = icmp ult i8* %172, %171
  %189 = and i1 %187, %188
  %190 = or i1 %186, %189
  %191 = icmp ult i8* %170, %175
  %192 = icmp ult i8* %174, %171
  %193 = and i1 %191, %192
  %194 = or i1 %190, %193
  %195 = icmp ult i8* %172, %175
  %196 = icmp ult i8* %174, %173
  %197 = and i1 %195, %196
  %198 = or i1 %194, %197
  br i1 %198, label %199, label %249

199:                                              ; preds = %164, %199
  %200 = phi i64 [ %247, %199 ], [ 3, %164 ]
  %201 = add nsw i64 %200, -1
  %202 = add nsw i64 %200, -2
  %203 = getelementptr inbounds float, float* %41, i64 %200
  %204 = load float, float* %203, align 4
  %205 = fadd float %165, %204
  %206 = getelementptr inbounds float, float* %94, i64 %201
  %207 = load float, float* %206, align 4
  %208 = fmul float %207, %207
  %209 = getelementptr inbounds float, float* %96, i64 %201
  %210 = load float, float* %209, align 4
  %211 = fmul float %208, %210
  %212 = fsub float %205, %211
  %213 = getelementptr inbounds float, float* %98, i64 %202
  %214 = load float, float* %213, align 4
  %215 = fmul float %214, %214
  %216 = getelementptr inbounds float, float* %96, i64 %202
  %217 = load float, float* %216, align 4
  %218 = fmul float %215, %217
  %219 = fsub float %212, %218
  %220 = getelementptr inbounds float, float* %96, i64 %200
  store float %219, float* %220, align 4
  %221 = load float, float* %206, align 4
  %222 = fmul float %210, %221
  %223 = getelementptr inbounds float, float* %98, i64 %201
  %224 = load float, float* %223, align 4
  %225 = fmul float %222, %224
  %226 = fsub float %138, %225
  %227 = fdiv float %226, %219
  %228 = getelementptr inbounds float, float* %94, i64 %200
  store float %227, float* %228, align 4
  %229 = load float, float* %220, align 4
  %230 = fdiv float %92, %229
  %231 = getelementptr inbounds float, float* %98, i64 %200
  store float %230, float* %231, align 4
  %232 = load float, float* %203, align 4
  %233 = getelementptr inbounds float, float* %43, i64 %200
  %234 = load float, float* %233, align 4
  %235 = fmul float %232, %234
  %236 = load float, float* %206, align 4
  %237 = getelementptr inbounds float, float* %45, i64 %201
  %238 = load float, float* %237, align 4
  %239 = fmul float %236, %238
  %240 = fsub float %235, %239
  %241 = load float, float* %213, align 4
  %242 = getelementptr inbounds float, float* %45, i64 %202
  %243 = load float, float* %242, align 4
  %244 = fmul float %241, %243
  %245 = fsub float %240, %244
  %246 = getelementptr inbounds float, float* %45, i64 %200
  store float %245, float* %246, align 4
  %247 = add nuw nsw i64 %200, 1
  %248 = icmp eq i64 %247, %166
  br i1 %248, label %305, label %199

249:                                              ; preds = %164
  %250 = getelementptr i8, i8* %95, i64 8
  %251 = bitcast i8* %250 to float*
  %252 = load float, float* %251, align 4
  %253 = getelementptr i8, i8* %44, i64 8
  %254 = bitcast i8* %253 to float*
  %255 = load float, float* %254, align 4
  %256 = getelementptr i8, i8* %97, i64 8
  %257 = bitcast i8* %256 to float*
  %258 = load float, float* %257, align 4
  %259 = getelementptr i8, i8* %93, i64 8
  %260 = bitcast i8* %259 to float*
  %261 = load float, float* %260, align 4
  br label %262

262:                                              ; preds = %262, %249
  %263 = phi float [ %261, %249 ], [ %286, %262 ]
  %264 = phi float [ %258, %249 ], [ %289, %262 ]
  %265 = phi float [ %255, %249 ], [ %301, %262 ]
  %266 = phi float [ %252, %249 ], [ %281, %262 ]
  %267 = phi i64 [ 3, %249 ], [ %303, %262 ]
  %268 = add nsw i64 %267, -2
  %269 = getelementptr inbounds float, float* %41, i64 %267
  %270 = load float, float* %269, align 4
  %271 = fadd float %165, %270
  %272 = fmul float %263, %263
  %273 = fmul float %272, %266
  %274 = fsub float %271, %273
  %275 = getelementptr inbounds float, float* %98, i64 %268
  %276 = load float, float* %275, align 4
  %277 = fmul float %276, %276
  %278 = getelementptr inbounds float, float* %96, i64 %268
  %279 = load float, float* %278, align 4
  %280 = fmul float %277, %279
  %281 = fsub float %274, %280
  %282 = getelementptr inbounds float, float* %96, i64 %267
  store float %281, float* %282, align 4
  %283 = fmul float %266, %263
  %284 = fmul float %283, %264
  %285 = fsub float %138, %284
  %286 = fdiv float %285, %281
  %287 = getelementptr inbounds float, float* %94, i64 %267
  store float %286, float* %287, align 4
  %288 = load float, float* %282, align 4
  %289 = fdiv float %92, %288
  %290 = getelementptr inbounds float, float* %98, i64 %267
  store float %289, float* %290, align 4
  %291 = load float, float* %269, align 4
  %292 = getelementptr inbounds float, float* %43, i64 %267
  %293 = load float, float* %292, align 4
  %294 = fmul float %291, %293
  %295 = fmul float %263, %265
  %296 = fsub float %294, %295
  %297 = load float, float* %275, align 4
  %298 = getelementptr inbounds float, float* %45, i64 %268
  %299 = load float, float* %298, align 4
  %300 = fmul float %297, %299
  %301 = fsub float %296, %300
  %302 = getelementptr inbounds float, float* %45, i64 %267
  store float %301, float* %302, align 4
  %303 = add nuw nsw i64 %267, 1
  %304 = icmp eq i64 %303, %166
  br i1 %304, label %305, label %262

305:                                              ; preds = %262, %199, %104
  %306 = add i32 %35, -2
  %307 = add nsw i32 %35, -3
  %308 = sext i32 %162 to i64
  %309 = getelementptr inbounds float, float* %41, i64 %308
  %310 = load float, float* %309, align 4
  %311 = fadd float %129, %310
  %312 = sext i32 %306 to i64
  %313 = getelementptr inbounds float, float* %94, i64 %312
  %314 = load float, float* %313, align 4
  %315 = fmul float %314, %314
  %316 = getelementptr inbounds float, float* %96, i64 %312
  %317 = load float, float* %316, align 4
  %318 = fmul float %315, %317
  %319 = fsub float %311, %318
  %320 = sext i32 %307 to i64
  %321 = getelementptr inbounds float, float* %98, i64 %320
  %322 = load float, float* %321, align 4
  %323 = fmul float %322, %322
  %324 = getelementptr inbounds float, float* %96, i64 %320
  %325 = load float, float* %324, align 4
  %326 = fmul float %323, %325
  %327 = fsub float %319, %326
  %328 = getelementptr inbounds float, float* %96, i64 %308
  store float %327, float* %328, align 4
  %329 = load float, float* %313, align 4
  %330 = fmul float %317, %329
  %331 = getelementptr inbounds float, float* %98, i64 %312
  %332 = load float, float* %331, align 4
  %333 = fmul float %330, %332
  %334 = fsub float %111, %333
  %335 = fdiv float %334, %327
  %336 = getelementptr inbounds float, float* %94, i64 %308
  store float %335, float* %336, align 4
  %337 = load float, float* %309, align 4
  %338 = getelementptr inbounds float, float* %43, i64 %308
  %339 = load float, float* %338, align 4
  %340 = fmul float %337, %339
  %341 = getelementptr inbounds float, float* %45, i64 %312
  %342 = load float, float* %341, align 4
  %343 = fmul float %329, %342
  %344 = fsub float %340, %343
  %345 = load float, float* %321, align 4
  %346 = getelementptr inbounds float, float* %45, i64 %320
  %347 = load float, float* %346, align 4
  %348 = fmul float %345, %347
  %349 = fsub float %344, %348
  %350 = getelementptr inbounds float, float* %45, i64 %308
  store float %349, float* %350, align 4
  %351 = sext i32 %35 to i64
  %352 = getelementptr inbounds float, float* %41, i64 %351
  %353 = load float, float* %352, align 4
  %354 = fadd float %353, %92
  %355 = load float, float* %336, align 4
  %356 = fmul float %355, %355
  %357 = load float, float* %328, align 4
  %358 = fmul float %356, %357
  %359 = fsub float %354, %358
  %360 = load float, float* %331, align 4
  %361 = fmul float %360, %360
  %362 = load float, float* %316, align 4
  %363 = fmul float %361, %362
  %364 = fsub float %359, %363
  %365 = getelementptr inbounds float, float* %96, i64 %351
  store float %364, float* %365, align 4
  %366 = load float, float* %352, align 4
  %367 = getelementptr inbounds float, float* %43, i64 %351
  %368 = load float, float* %367, align 4
  %369 = fmul float %366, %368
  %370 = load float, float* %336, align 4
  %371 = load float, float* %350, align 4
  %372 = fmul float %370, %371
  %373 = fsub float %369, %372
  %374 = load float, float* %331, align 4
  %375 = load float, float* %341, align 4
  %376 = fmul float %374, %375
  %377 = fsub float %373, %376
  %378 = fdiv float %377, %364
  %379 = getelementptr inbounds float, float* %45, i64 %351
  store float %378, float* %379, align 4
  %380 = load float, float* %328, align 4
  %381 = fdiv float %371, %380
  %382 = load float, float* %336, align 4
  %383 = fmul float %382, %378
  %384 = fsub float %381, %383
  store float %384, float* %350, align 4
  %385 = icmp sgt i32 %306, 0
  br i1 %385, label %386, label %412

386:                                              ; preds = %305, %409
  %387 = phi float [ %411, %409 ], [ %375, %305 ]
  %388 = phi i64 [ %407, %409 ], [ %312, %305 ]
  %389 = getelementptr inbounds float, float* %45, i64 %388
  %390 = getelementptr inbounds float, float* %96, i64 %388
  %391 = load float, float* %390, align 4
  %392 = fdiv float %387, %391
  %393 = getelementptr inbounds float, float* %94, i64 %388
  %394 = load float, float* %393, align 4
  %395 = add nuw nsw i64 %388, 1
  %396 = getelementptr inbounds float, float* %45, i64 %395
  %397 = load float, float* %396, align 4
  %398 = fmul float %394, %397
  %399 = fsub float %392, %398
  %400 = getelementptr inbounds float, float* %98, i64 %388
  %401 = load float, float* %400, align 4
  %402 = add nuw nsw i64 %388, 2
  %403 = getelementptr inbounds float, float* %45, i64 %402
  %404 = load float, float* %403, align 4
  %405 = fmul float %401, %404
  %406 = fsub float %399, %405
  store float %406, float* %389, align 4
  %407 = add nsw i64 %388, -1
  %408 = icmp sgt i64 %407, 0
  br i1 %408, label %409, label %412

409:                                              ; preds = %386
  %410 = getelementptr inbounds float, float* %45, i64 %407
  %411 = load float, float* %410, align 4
  br label %386

412:                                              ; preds = %386, %305, %91
  %413 = phi i32 [ 0, %91 ], [ 1, %305 ], [ 1, %386 ]
  br i1 %99, label %414, label %415

414:                                              ; preds = %412
  tail call void @_cmsFree(%struct._cmsContext_struct* %10, i8* nonnull %93) #7
  br label %415

415:                                              ; preds = %414, %412
  br i1 %100, label %416, label %417

416:                                              ; preds = %415
  tail call void @_cmsFree(%struct._cmsContext_struct* %10, i8* nonnull %95) #7
  br label %417

417:                                              ; preds = %416, %415
  br i1 %102, label %418, label %419

418:                                              ; preds = %417
  tail call void @_cmsFree(%struct._cmsContext_struct* %10, i8* nonnull %97) #7
  br label %419

419:                                              ; preds = %417, %418
  %420 = icmp eq i32 %413, 0
  br i1 %420, label %473, label %421

421:                                              ; preds = %419, %426
  %422 = phi i32 [ %436, %426 ], [ %35, %419 ]
  %423 = phi i32 [ %432, %426 ], [ 0, %419 ]
  %424 = phi i32 [ %435, %426 ], [ 0, %419 ]
  %425 = icmp ugt i32 %422, 1
  br i1 %425, label %426, label %442

426:                                              ; preds = %421
  %427 = zext i32 %422 to i64
  %428 = getelementptr inbounds float, float* %45, i64 %427
  %429 = load float, float* %428, align 4
  %430 = fcmp oeq float %429, 0.000000e+00
  %431 = zext i1 %430 to i32
  %432 = add i32 %423, %431
  %433 = fcmp oge float %429, 6.553500e+04
  %434 = zext i1 %433 to i32
  %435 = add i32 %424, %434
  %436 = add i32 %422, -1
  %437 = zext i32 %436 to i64
  %438 = getelementptr inbounds float, float* %45, i64 %437
  %439 = load float, float* %438, align 4
  %440 = fcmp olt float %429, %439
  br i1 %440, label %441, label %421

441:                                              ; preds = %426
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %10, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %475

442:                                              ; preds = %421
  %443 = udiv i32 %35, 3
  %444 = icmp ugt i32 %423, %443
  br i1 %444, label %445, label %446

445:                                              ; preds = %442
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %10, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %475

446:                                              ; preds = %442
  %447 = icmp ugt i32 %424, %443
  br i1 %447, label %451, label %448

448:                                              ; preds = %446
  br i1 %54, label %475, label %449

449:                                              ; preds = %448
  %450 = zext i32 %35 to i64
  br label %452

451:                                              ; preds = %446
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %10, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0)) #7
  br label %475

452:                                              ; preds = %468, %449
  %453 = phi i64 [ 0, %449 ], [ %454, %468 ]
  %454 = add nuw nsw i64 %453, 1
  %455 = getelementptr inbounds float, float* %45, i64 %454
  %456 = load float, float* %455, align 4
  %457 = fpext float %456 to double
  %458 = fadd double %457, 5.000000e-01
  %459 = fcmp ugt double %458, 0.000000e+00
  br i1 %459, label %460, label %468

460:                                              ; preds = %452
  %461 = fcmp ult double %458, 6.553500e+04
  br i1 %461, label %462, label %468

462:                                              ; preds = %460
  %463 = fadd double %458, -3.276700e+04
  %464 = tail call double @llvm.floor.f64(double %463) #7
  %465 = fptosi double %464 to i32
  %466 = trunc i32 %465 to i16
  %467 = add i16 %466, 32767
  br label %468

468:                                              ; preds = %452, %460, %462
  %469 = phi i16 [ %467, %462 ], [ 0, %452 ], [ -1, %460 ]
  %470 = load i16*, i16** %11, align 8
  %471 = getelementptr inbounds i16, i16* %470, i64 %453
  store i16 %469, i16* %471, align 2
  %472 = icmp eq i64 %454, %450
  br i1 %472, label %475, label %452

473:                                              ; preds = %419
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %10, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #7
  br label %475

474:                                              ; preds = %38
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %10, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i64 0, i64 0)) #7
  br label %475

475:                                              ; preds = %468, %448, %441, %445, %451, %473, %474
  %476 = phi i32 [ 0, %473 ], [ 0, %474 ], [ 0, %451 ], [ 0, %445 ], [ 0, %441 ], [ 1, %448 ], [ 1, %468 ]
  br i1 %49, label %477, label %478

477:                                              ; preds = %475
  tail call void @_cmsFree(%struct._cmsContext_struct* %10, i8* nonnull %44) #7
  br label %478

478:                                              ; preds = %477, %475
  br i1 %47, label %479, label %480

479:                                              ; preds = %478
  tail call void @_cmsFree(%struct._cmsContext_struct* %10, i8* nonnull %42) #7
  br label %480

480:                                              ; preds = %479, %478
  br i1 %46, label %481, label %483

481:                                              ; preds = %480
  tail call void @_cmsFree(%struct._cmsContext_struct* %10, i8* nonnull %40) #7
  br label %483

482:                                              ; preds = %36
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %10, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0)) #7
  br label %483

483:                                              ; preds = %15, %8, %2, %4, %480, %481, %482
  %484 = phi i32 [ %476, %481 ], [ %476, %480 ], [ 0, %482 ], [ 0, %4 ], [ 0, %2 ], [ 1, %8 ], [ 1, %15 ]
  ret i32 %484
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsIsToneCurveLinear(%struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 6
  %3 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %10, label %27

6:                                                ; preds = %10
  %7 = load i32, i32* %3, align 8
  %8 = sext i32 %7 to i64
  %9 = icmp slt i64 %26, %8
  br i1 %9, label %10, label %27

10:                                               ; preds = %1, %6
  %11 = phi i64 [ %26, %6 ], [ 0, %1 ]
  %12 = phi i32 [ %7, %6 ], [ %4, %1 ]
  %13 = load i16*, i16** %2, align 8
  %14 = getelementptr inbounds i16, i16* %13, i64 %11
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = trunc i64 %11 to i32
  %18 = sitofp i32 %17 to double
  %19 = tail call zeroext i16 @_cmsQuantizeVal(double %18, i32 %12) #7
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %16, %20
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp sgt i32 %24, 15
  %26 = add nuw nsw i64 %11, 1
  br i1 %25, label %27, label %6

27:                                               ; preds = %10, %6, %1
  %28 = phi i32 [ 1, %1 ], [ 1, %6 ], [ 0, %10 ]
  ret i32 %28
}

declare zeroext i16 @_cmsQuantizeVal(double, i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @cmsIsToneCurveMonotonic(%struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 2
  br i1 %4, label %47, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 6
  %7 = load i16*, i16** %6, align 8
  %8 = load i16, i16* %7, align 2
  %9 = add i32 %3, -1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = load i16, i16* %11, align 2
  %13 = icmp ugt i16 %8, %12
  br i1 %13, label %14, label %30

14:                                               ; preds = %5
  %15 = icmp sgt i32 %3, 1
  br i1 %15, label %16, label %47

16:                                               ; preds = %14
  %17 = zext i16 %8 to i32
  %18 = zext i32 %3 to i64
  br label %21

19:                                               ; preds = %21
  %20 = icmp eq i64 %29, %18
  br i1 %20, label %47, label %21

21:                                               ; preds = %19, %16
  %22 = phi i64 [ 1, %16 ], [ %29, %19 ]
  %23 = phi i32 [ %17, %16 ], [ %26, %19 ]
  %24 = getelementptr inbounds i16, i16* %7, i64 %22
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = sub nsw i32 %26, %23
  %28 = icmp sgt i32 %27, 2
  %29 = add nuw nsw i64 %22, 1
  br i1 %28, label %47, label %19

30:                                               ; preds = %5
  %31 = add i32 %3, -2
  %32 = icmp sgt i32 %31, -1
  br i1 %32, label %33, label %47

33:                                               ; preds = %30
  %34 = zext i16 %12 to i32
  %35 = sext i32 %31 to i64
  br label %39

36:                                               ; preds = %39
  %37 = add nsw i64 %40, -1
  %38 = icmp sgt i64 %40, 0
  br i1 %38, label %39, label %47

39:                                               ; preds = %33, %36
  %40 = phi i64 [ %35, %33 ], [ %37, %36 ]
  %41 = phi i32 [ %34, %33 ], [ %44, %36 ]
  %42 = getelementptr inbounds i16, i16* %7, i64 %40
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = sub nsw i32 %44, %41
  %46 = icmp sgt i32 %45, 2
  br i1 %46, label %47, label %36

47:                                               ; preds = %39, %36, %21, %19, %30, %14, %1
  %48 = phi i32 [ 1, %1 ], [ 1, %14 ], [ 1, %30 ], [ 0, %21 ], [ 1, %19 ], [ 0, %39 ], [ 1, %36 ]
  ret i32 %48
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @cmsIsToneCurveMultisegment(%struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp ugt i32 %3, 1
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @cmsGetToneCurveParametricType(%struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 2
  %7 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %6, align 8
  %8 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  br label %10

10:                                               ; preds = %1, %5
  %11 = phi i32 [ %9, %5 ], [ 0, %1 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @cmsEvalToneCurve16(%struct._cms_curve_struct* nocapture readonly, i16 zeroext) local_unnamed_addr #0 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  store i16 %1, i16* %3, align 2
  %5 = bitcast i16* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %5) #7
  store i16 -21846, i16* %4, align 2
  %6 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 0
  %7 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %6, align 8
  %8 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %7, i64 0, i32 8, i32 0
  %9 = load void (i16*, i16*, %struct._cms_interp_struc*)*, void (i16*, i16*, %struct._cms_interp_struc*)** %8, align 8
  call void %9(i16* nonnull %3, i16* nonnull %4, %struct._cms_interp_struc* %7) #7
  %10 = load i16, i16* %4, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %5) #7
  ret i16 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden double @cmsEstimateGamma(%struct._cms_curve_struct* nocapture readonly, double) local_unnamed_addr #0 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 1
  %6 = bitcast i16* %3 to i8*
  %7 = bitcast i16* %4 to i8*
  %8 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 0
  br label %9

9:                                                ; preds = %59, %2
  %10 = phi i32 [ 1, %2 ], [ %63, %59 ]
  %11 = phi double [ 0.000000e+00, %2 ], [ %62, %59 ]
  %12 = phi double [ 0.000000e+00, %2 ], [ %61, %59 ]
  %13 = phi double [ 0.000000e+00, %2 ], [ %60, %59 ]
  %14 = uitofp i32 %10 to double
  %15 = fmul double %14, 0x3F30000000000000
  %16 = fptrunc double %15 to float
  %17 = load i32, i32* %5, align 8
  %18 = icmp eq i32 %17, 0
  %19 = fpext float %16 to double
  br i1 %18, label %20, label %40

20:                                               ; preds = %9
  %21 = fmul double %19, 6.553500e+04
  %22 = fadd double %21, 5.000000e-01
  %23 = fcmp ugt double %22, 0.000000e+00
  br i1 %23, label %24, label %32

24:                                               ; preds = %20
  %25 = fcmp ult double %22, 6.553500e+04
  br i1 %25, label %26, label %32

26:                                               ; preds = %24
  %27 = fadd double %22, -3.276700e+04
  %28 = call double @llvm.floor.f64(double %27) #7
  %29 = fptosi double %28 to i32
  %30 = trunc i32 %29 to i16
  %31 = add i16 %30, 32767
  br label %32

32:                                               ; preds = %26, %24, %20
  %33 = phi i16 [ %31, %26 ], [ 0, %20 ], [ -1, %24 ]
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %6) #7
  store i16 %33, i16* %3, align 2
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %7) #7
  store i16 -21846, i16* %4, align 2
  %34 = load %struct._cms_interp_struc*, %struct._cms_interp_struc** %8, align 8
  %35 = getelementptr inbounds %struct._cms_interp_struc, %struct._cms_interp_struc* %34, i64 0, i32 8, i32 0
  %36 = load void (i16*, i16*, %struct._cms_interp_struc*)*, void (i16*, i16*, %struct._cms_interp_struc*)** %35, align 8
  call void %36(i16* nonnull %3, i16* nonnull %4, %struct._cms_interp_struc* %34) #7
  %37 = load i16, i16* %4, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %6) #7
  %38 = uitofp i16 %37 to double
  %39 = fdiv double %38, 6.553500e+04
  br label %42

40:                                               ; preds = %9
  %41 = call fastcc double @EvalSegmentedFn(%struct._cms_curve_struct* %0, double %19) #7
  br label %42

42:                                               ; preds = %32, %40
  %43 = phi double [ %39, %32 ], [ %41, %40 ]
  %44 = fptrunc double %43 to float
  %45 = fcmp ogt float %44, 0.000000e+00
  %46 = fcmp olt float %44, 1.000000e+00
  %47 = and i1 %45, %46
  %48 = fcmp ogt double %15, 7.000000e-02
  %49 = and i1 %48, %47
  br i1 %49, label %50, label %59

50:                                               ; preds = %42
  %51 = fpext float %44 to double
  %52 = call double @log(double %51) #7
  %53 = call double @log(double %15) #7
  %54 = fdiv double %52, %53
  %55 = fadd double %13, %54
  %56 = fmul double %54, %54
  %57 = fadd double %12, %56
  %58 = fadd double %11, 1.000000e+00
  br label %59

59:                                               ; preds = %42, %50
  %60 = phi double [ %55, %50 ], [ %13, %42 ]
  %61 = phi double [ %57, %50 ], [ %12, %42 ]
  %62 = phi double [ %58, %50 ], [ %11, %42 ]
  %63 = add nuw nsw i32 %10, 1
  %64 = icmp eq i32 %63, 4096
  br i1 %64, label %65, label %9

65:                                               ; preds = %59
  %66 = fmul double %61, %62
  %67 = fmul double %60, %60
  %68 = fsub double %66, %67
  %69 = fadd double %62, -1.000000e+00
  %70 = fmul double %62, %69
  %71 = fdiv double %68, %70
  %72 = call double @sqrt(double %71) #7
  %73 = fcmp ogt double %72, %1
  %74 = fdiv double %60, %62
  %75 = select i1 %73, double -1.000000e+00, double %74
  ret double %75
}

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double* @cmsGetToneCurveParams(%struct._cms_curve_struct* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct._cms_curve_struct, %struct._cms_curve_struct* %0, i64 0, i32 2
  %7 = load %struct.cmsCurveSegment*, %struct.cmsCurveSegment** %6, align 8
  %8 = getelementptr inbounds %struct.cmsCurveSegment, %struct.cmsCurveSegment* %7, i64 0, i32 3, i64 0
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi double* [ %8, %5 ], [ null, %1 ]
  ret double* %10
}

declare i8* @_cmsMallocZero(%struct._cmsContext_struct*, i32) local_unnamed_addr #1

declare %struct._cms_interp_struc* @_cmsComputeInterpParams(%struct._cmsContext_struct*, i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare i8* @_cmsDupMem(%struct._cmsContext_struct*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: nofree nounwind ssp uwtable
define internal double @DefaultEvalParametricFn(i32, double* readonly, double) #6 {
  switch i32 %0, label %384 [
    i32 1, label %4
    i32 -1, label %14
    i32 2, label %28
    i32 -2, label %46
    i32 3, label %67
    i32 -3, label %93
    i32 4, label %119
    i32 -4, label %138
    i32 5, label %176
    i32 -5, label %204
    i32 6, label %239
    i32 -6, label %256
    i32 7, label %275
    i32 -7, label %296
    i32 8, label %324
    i32 -8, label %339
    i32 108, label %365
    i32 -108, label %377
  ]

4:                                                ; preds = %3
  %5 = fcmp olt double %2, 0.000000e+00
  %6 = load double, double* %1, align 8
  br i1 %5, label %7, label %12

7:                                                ; preds = %4
  %8 = fadd double %6, -1.000000e+00
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp olt double %9, 1.000000e-04
  %11 = select i1 %10, double %2, double 0.000000e+00
  br label %384

12:                                               ; preds = %4
  %13 = tail call double @pow(double %2, double %6) #7
  br label %384

14:                                               ; preds = %3
  %15 = fcmp olt double %2, 0.000000e+00
  %16 = load double, double* %1, align 8
  br i1 %15, label %17, label %22

17:                                               ; preds = %14
  %18 = fadd double %16, -1.000000e+00
  %19 = tail call double @llvm.fabs.f64(double %18)
  %20 = fcmp olt double %19, 1.000000e-04
  %21 = select i1 %20, double %2, double 0.000000e+00
  br label %384

22:                                               ; preds = %14
  %23 = tail call double @llvm.fabs.f64(double %16)
  %24 = fcmp olt double %23, 1.000000e-04
  br i1 %24, label %384, label %25

25:                                               ; preds = %22
  %26 = fdiv double 1.000000e+00, %16
  %27 = tail call double @pow(double %2, double %26) #7
  br label %384

28:                                               ; preds = %3
  %29 = getelementptr inbounds double, double* %1, i64 1
  %30 = load double, double* %29, align 8
  %31 = tail call double @llvm.fabs.f64(double %30)
  %32 = fcmp olt double %31, 1.000000e-04
  br i1 %32, label %384, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds double, double* %1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fsub double -0.000000e+00, %35
  %37 = fdiv double %36, %30
  %38 = fcmp ugt double %37, %2
  br i1 %38, label %384, label %39

39:                                               ; preds = %33
  %40 = fmul double %30, %2
  %41 = fadd double %40, %35
  %42 = fcmp ogt double %41, 0.000000e+00
  br i1 %42, label %43, label %384

43:                                               ; preds = %39
  %44 = load double, double* %1, align 8
  %45 = tail call double @pow(double %41, double %44) #7
  br label %384

46:                                               ; preds = %3
  %47 = load double, double* %1, align 8
  %48 = tail call double @llvm.fabs.f64(double %47)
  %49 = fcmp olt double %48, 1.000000e-04
  br i1 %49, label %384, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds double, double* %1, i64 1
  %52 = load double, double* %51, align 8
  %53 = tail call double @llvm.fabs.f64(double %52)
  %54 = fcmp olt double %53, 1.000000e-04
  %55 = fcmp olt double %2, 0.000000e+00
  %56 = or i1 %55, %54
  br i1 %56, label %384, label %57

57:                                               ; preds = %50
  %58 = fdiv double 1.000000e+00, %47
  %59 = tail call double @pow(double %2, double %58) #7
  %60 = getelementptr inbounds double, double* %1, i64 2
  %61 = load double, double* %60, align 8
  %62 = fsub double %59, %61
  %63 = load double, double* %51, align 8
  %64 = fdiv double %62, %63
  %65 = fcmp olt double %64, 0.000000e+00
  br i1 %65, label %66, label %384

66:                                               ; preds = %57
  br label %384

67:                                               ; preds = %3
  %68 = getelementptr inbounds double, double* %1, i64 1
  %69 = load double, double* %68, align 8
  %70 = tail call double @llvm.fabs.f64(double %69)
  %71 = fcmp olt double %70, 1.000000e-04
  br i1 %71, label %384, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds double, double* %1, i64 2
  %74 = load double, double* %73, align 8
  %75 = fsub double -0.000000e+00, %74
  %76 = fdiv double %75, %69
  %77 = fcmp olt double %76, 0.000000e+00
  %78 = select i1 %77, double 0.000000e+00, double %76
  %79 = fcmp ugt double %78, %2
  br i1 %79, label %90, label %80

80:                                               ; preds = %72
  %81 = fmul double %69, %2
  %82 = fadd double %81, %74
  %83 = fcmp ogt double %82, 0.000000e+00
  br i1 %83, label %84, label %384

84:                                               ; preds = %80
  %85 = load double, double* %1, align 8
  %86 = tail call double @pow(double %82, double %85) #7
  %87 = getelementptr inbounds double, double* %1, i64 3
  %88 = load double, double* %87, align 8
  %89 = fadd double %86, %88
  br label %384

90:                                               ; preds = %72
  %91 = getelementptr inbounds double, double* %1, i64 3
  %92 = load double, double* %91, align 8
  br label %384

93:                                               ; preds = %3
  %94 = getelementptr inbounds double, double* %1, i64 1
  %95 = load double, double* %94, align 8
  %96 = tail call double @llvm.fabs.f64(double %95)
  %97 = fcmp olt double %96, 1.000000e-04
  br i1 %97, label %384, label %98

98:                                               ; preds = %93
  %99 = getelementptr inbounds double, double* %1, i64 3
  %100 = load double, double* %99, align 8
  %101 = fcmp ugt double %100, %2
  br i1 %101, label %114, label %102

102:                                              ; preds = %98
  %103 = fsub double %2, %100
  %104 = fcmp ogt double %103, 0.000000e+00
  br i1 %104, label %105, label %384

105:                                              ; preds = %102
  %106 = load double, double* %1, align 8
  %107 = fdiv double 1.000000e+00, %106
  %108 = tail call double @pow(double %103, double %107) #7
  %109 = getelementptr inbounds double, double* %1, i64 2
  %110 = load double, double* %109, align 8
  %111 = fsub double %108, %110
  %112 = load double, double* %94, align 8
  %113 = fdiv double %111, %112
  br label %384

114:                                              ; preds = %98
  %115 = getelementptr inbounds double, double* %1, i64 2
  %116 = load double, double* %115, align 8
  %117 = fsub double -0.000000e+00, %116
  %118 = fdiv double %117, %95
  br label %384

119:                                              ; preds = %3
  %120 = getelementptr inbounds double, double* %1, i64 4
  %121 = load double, double* %120, align 8
  %122 = fcmp ugt double %121, %2
  br i1 %122, label %134, label %123

123:                                              ; preds = %119
  %124 = getelementptr inbounds double, double* %1, i64 1
  %125 = load double, double* %124, align 8
  %126 = fmul double %125, %2
  %127 = getelementptr inbounds double, double* %1, i64 2
  %128 = load double, double* %127, align 8
  %129 = fadd double %126, %128
  %130 = fcmp ogt double %129, 0.000000e+00
  br i1 %130, label %131, label %384

131:                                              ; preds = %123
  %132 = load double, double* %1, align 8
  %133 = tail call double @pow(double %129, double %132) #7
  br label %384

134:                                              ; preds = %119
  %135 = getelementptr inbounds double, double* %1, i64 3
  %136 = load double, double* %135, align 8
  %137 = fmul double %136, %2
  br label %384

138:                                              ; preds = %3
  %139 = load double, double* %1, align 8
  %140 = tail call double @llvm.fabs.f64(double %139)
  %141 = fcmp olt double %140, 1.000000e-04
  br i1 %141, label %384, label %142

142:                                              ; preds = %138
  %143 = getelementptr inbounds double, double* %1, i64 1
  %144 = load double, double* %143, align 8
  %145 = tail call double @llvm.fabs.f64(double %144)
  %146 = fcmp olt double %145, 1.000000e-04
  br i1 %146, label %384, label %147

147:                                              ; preds = %142
  %148 = getelementptr inbounds double, double* %1, i64 3
  %149 = load double, double* %148, align 8
  %150 = tail call double @llvm.fabs.f64(double %149)
  %151 = fcmp olt double %150, 1.000000e-04
  br i1 %151, label %384, label %152

152:                                              ; preds = %147
  %153 = getelementptr inbounds double, double* %1, i64 4
  %154 = load double, double* %153, align 8
  %155 = fmul double %144, %154
  %156 = getelementptr inbounds double, double* %1, i64 2
  %157 = load double, double* %156, align 8
  %158 = fadd double %155, %157
  %159 = fcmp olt double %158, 0.000000e+00
  br i1 %159, label %162, label %160

160:                                              ; preds = %152
  %161 = tail call double @pow(double %158, double %139) #7
  br label %162

162:                                              ; preds = %152, %160
  %163 = phi double [ %161, %160 ], [ 0.000000e+00, %152 ]
  %164 = fcmp ugt double %163, %2
  br i1 %164, label %173, label %165

165:                                              ; preds = %162
  %166 = load double, double* %1, align 8
  %167 = fdiv double 1.000000e+00, %166
  %168 = tail call double @pow(double %2, double %167) #7
  %169 = load double, double* %156, align 8
  %170 = fsub double %168, %169
  %171 = load double, double* %143, align 8
  %172 = fdiv double %170, %171
  br label %384

173:                                              ; preds = %162
  %174 = load double, double* %148, align 8
  %175 = fdiv double %2, %174
  br label %384

176:                                              ; preds = %3
  %177 = getelementptr inbounds double, double* %1, i64 4
  %178 = load double, double* %177, align 8
  %179 = fcmp ugt double %178, %2
  br i1 %179, label %197, label %180

180:                                              ; preds = %176
  %181 = getelementptr inbounds double, double* %1, i64 1
  %182 = load double, double* %181, align 8
  %183 = fmul double %182, %2
  %184 = getelementptr inbounds double, double* %1, i64 2
  %185 = load double, double* %184, align 8
  %186 = fadd double %183, %185
  %187 = fcmp ogt double %186, 0.000000e+00
  br i1 %187, label %188, label %194

188:                                              ; preds = %180
  %189 = load double, double* %1, align 8
  %190 = tail call double @pow(double %186, double %189) #7
  %191 = getelementptr inbounds double, double* %1, i64 5
  %192 = load double, double* %191, align 8
  %193 = fadd double %190, %192
  br label %384

194:                                              ; preds = %180
  %195 = getelementptr inbounds double, double* %1, i64 5
  %196 = load double, double* %195, align 8
  br label %384

197:                                              ; preds = %176
  %198 = getelementptr inbounds double, double* %1, i64 3
  %199 = load double, double* %198, align 8
  %200 = fmul double %199, %2
  %201 = getelementptr inbounds double, double* %1, i64 6
  %202 = load double, double* %201, align 8
  %203 = fadd double %200, %202
  br label %384

204:                                              ; preds = %3
  %205 = getelementptr inbounds double, double* %1, i64 1
  %206 = load double, double* %205, align 8
  %207 = tail call double @llvm.fabs.f64(double %206)
  %208 = fcmp olt double %207, 1.000000e-04
  br i1 %208, label %384, label %209

209:                                              ; preds = %204
  %210 = getelementptr inbounds double, double* %1, i64 3
  %211 = load double, double* %210, align 8
  %212 = tail call double @llvm.fabs.f64(double %211)
  %213 = fcmp olt double %212, 1.000000e-04
  br i1 %213, label %384, label %214

214:                                              ; preds = %209
  %215 = getelementptr inbounds double, double* %1, i64 4
  %216 = load double, double* %215, align 8
  %217 = fmul double %211, %216
  %218 = getelementptr inbounds double, double* %1, i64 6
  %219 = load double, double* %218, align 8
  %220 = fadd double %217, %219
  %221 = fcmp ugt double %220, %2
  br i1 %221, label %236, label %222

222:                                              ; preds = %214
  %223 = getelementptr inbounds double, double* %1, i64 5
  %224 = load double, double* %223, align 8
  %225 = fsub double %2, %224
  %226 = fcmp olt double %225, 0.000000e+00
  br i1 %226, label %384, label %227

227:                                              ; preds = %222
  %228 = load double, double* %1, align 8
  %229 = fdiv double 1.000000e+00, %228
  %230 = tail call double @pow(double %225, double %229) #7
  %231 = getelementptr inbounds double, double* %1, i64 2
  %232 = load double, double* %231, align 8
  %233 = fsub double %230, %232
  %234 = load double, double* %205, align 8
  %235 = fdiv double %233, %234
  br label %384

236:                                              ; preds = %214
  %237 = fsub double %2, %219
  %238 = fdiv double %237, %211
  br label %384

239:                                              ; preds = %3
  %240 = getelementptr inbounds double, double* %1, i64 1
  %241 = load double, double* %240, align 8
  %242 = fmul double %241, %2
  %243 = getelementptr inbounds double, double* %1, i64 2
  %244 = load double, double* %243, align 8
  %245 = fadd double %242, %244
  %246 = fcmp olt double %245, 0.000000e+00
  br i1 %246, label %247, label %250

247:                                              ; preds = %239
  %248 = getelementptr inbounds double, double* %1, i64 3
  %249 = load double, double* %248, align 8
  br label %384

250:                                              ; preds = %239
  %251 = load double, double* %1, align 8
  %252 = tail call double @pow(double %245, double %251) #7
  %253 = getelementptr inbounds double, double* %1, i64 3
  %254 = load double, double* %253, align 8
  %255 = fadd double %252, %254
  br label %384

256:                                              ; preds = %3
  %257 = getelementptr inbounds double, double* %1, i64 1
  %258 = load double, double* %257, align 8
  %259 = tail call double @llvm.fabs.f64(double %258)
  %260 = fcmp olt double %259, 1.000000e-04
  br i1 %260, label %384, label %261

261:                                              ; preds = %256
  %262 = getelementptr inbounds double, double* %1, i64 3
  %263 = load double, double* %262, align 8
  %264 = fsub double %2, %263
  %265 = fcmp olt double %264, 0.000000e+00
  br i1 %265, label %384, label %266

266:                                              ; preds = %261
  %267 = load double, double* %1, align 8
  %268 = fdiv double 1.000000e+00, %267
  %269 = tail call double @pow(double %264, double %268) #7
  %270 = getelementptr inbounds double, double* %1, i64 2
  %271 = load double, double* %270, align 8
  %272 = fsub double %269, %271
  %273 = load double, double* %257, align 8
  %274 = fdiv double %272, %273
  br label %384

275:                                              ; preds = %3
  %276 = getelementptr inbounds double, double* %1, i64 2
  %277 = load double, double* %276, align 8
  %278 = load double, double* %1, align 8
  %279 = tail call double @pow(double %2, double %278) #7
  %280 = fmul double %277, %279
  %281 = getelementptr inbounds double, double* %1, i64 3
  %282 = load double, double* %281, align 8
  %283 = fadd double %280, %282
  %284 = fcmp ugt double %283, 0.000000e+00
  br i1 %284, label %288, label %285

285:                                              ; preds = %275
  %286 = getelementptr inbounds double, double* %1, i64 4
  %287 = load double, double* %286, align 8
  br label %384

288:                                              ; preds = %275
  %289 = getelementptr inbounds double, double* %1, i64 1
  %290 = load double, double* %289, align 8
  %291 = tail call double @log10(double %283) #7
  %292 = fmul double %290, %291
  %293 = getelementptr inbounds double, double* %1, i64 4
  %294 = load double, double* %293, align 8
  %295 = fadd double %292, %294
  br label %384

296:                                              ; preds = %3
  %297 = load double, double* %1, align 8
  %298 = tail call double @llvm.fabs.f64(double %297)
  %299 = fcmp olt double %298, 1.000000e-04
  br i1 %299, label %384, label %300

300:                                              ; preds = %296
  %301 = getelementptr inbounds double, double* %1, i64 1
  %302 = load double, double* %301, align 8
  %303 = tail call double @llvm.fabs.f64(double %302)
  %304 = fcmp olt double %303, 1.000000e-04
  br i1 %304, label %384, label %305

305:                                              ; preds = %300
  %306 = getelementptr inbounds double, double* %1, i64 2
  %307 = load double, double* %306, align 8
  %308 = tail call double @llvm.fabs.f64(double %307)
  %309 = fcmp olt double %308, 1.000000e-04
  br i1 %309, label %384, label %310

310:                                              ; preds = %305
  %311 = getelementptr inbounds double, double* %1, i64 4
  %312 = load double, double* %311, align 8
  %313 = fsub double %2, %312
  %314 = fdiv double %313, %302
  %315 = tail call double @pow(double 1.000000e+01, double %314) #7
  %316 = getelementptr inbounds double, double* %1, i64 3
  %317 = load double, double* %316, align 8
  %318 = fsub double %315, %317
  %319 = load double, double* %306, align 8
  %320 = fdiv double %318, %319
  %321 = load double, double* %1, align 8
  %322 = fdiv double 1.000000e+00, %321
  %323 = tail call double @pow(double %320, double %322) #7
  br label %384

324:                                              ; preds = %3
  %325 = load double, double* %1, align 8
  %326 = getelementptr inbounds double, double* %1, i64 1
  %327 = load double, double* %326, align 8
  %328 = getelementptr inbounds double, double* %1, i64 2
  %329 = load double, double* %328, align 8
  %330 = fmul double %329, %2
  %331 = getelementptr inbounds double, double* %1, i64 3
  %332 = load double, double* %331, align 8
  %333 = fadd double %330, %332
  %334 = tail call double @pow(double %327, double %333) #7
  %335 = fmul double %325, %334
  %336 = getelementptr inbounds double, double* %1, i64 4
  %337 = load double, double* %336, align 8
  %338 = fadd double %335, %337
  br label %384

339:                                              ; preds = %3
  %340 = getelementptr inbounds double, double* %1, i64 4
  %341 = load double, double* %340, align 8
  %342 = fsub double %2, %341
  %343 = fcmp olt double %342, 0.000000e+00
  br i1 %343, label %384, label %344

344:                                              ; preds = %339
  %345 = load double, double* %1, align 8
  %346 = tail call double @llvm.fabs.f64(double %345)
  %347 = fcmp olt double %346, 1.000000e-04
  br i1 %347, label %384, label %348

348:                                              ; preds = %344
  %349 = getelementptr inbounds double, double* %1, i64 2
  %350 = load double, double* %349, align 8
  %351 = tail call double @llvm.fabs.f64(double %350)
  %352 = fcmp olt double %351, 1.000000e-04
  br i1 %352, label %384, label %353

353:                                              ; preds = %348
  %354 = fdiv double %342, %345
  %355 = tail call double @log(double %354) #7
  %356 = getelementptr inbounds double, double* %1, i64 1
  %357 = load double, double* %356, align 8
  %358 = tail call double @log(double %357) #7
  %359 = fdiv double %355, %358
  %360 = getelementptr inbounds double, double* %1, i64 3
  %361 = load double, double* %360, align 8
  %362 = fsub double %359, %361
  %363 = load double, double* %349, align 8
  %364 = fdiv double %362, %363
  br label %384

365:                                              ; preds = %3
  %366 = load double, double* %1, align 8
  %367 = tail call double @llvm.fabs.f64(double %366)
  %368 = fcmp olt double %367, 1.000000e-04
  br i1 %368, label %384, label %369

369:                                              ; preds = %365
  %370 = fsub double 1.000000e+00, %2
  %371 = fdiv double 1.000000e+00, %366
  %372 = tail call double @pow(double %370, double %371) #7
  %373 = fsub double 1.000000e+00, %372
  %374 = load double, double* %1, align 8
  %375 = fdiv double 1.000000e+00, %374
  %376 = tail call double @pow(double %373, double %375) #7
  br label %384

377:                                              ; preds = %3
  %378 = load double, double* %1, align 8
  %379 = tail call double @pow(double %2, double %378) #7
  %380 = fsub double 1.000000e+00, %379
  %381 = load double, double* %1, align 8
  %382 = tail call double @pow(double %380, double %381) #7
  %383 = fsub double 1.000000e+00, %382
  br label %384

384:                                              ; preds = %324, %377, %12, %25, %43, %57, %66, %90, %84, %114, %105, %131, %134, %165, %173, %188, %194, %197, %236, %227, %250, %247, %266, %288, %285, %310, %353, %369, %7, %17, %22, %28, %39, %33, %50, %46, %67, %80, %93, %102, %123, %147, %142, %138, %209, %204, %222, %256, %261, %305, %300, %296, %339, %348, %344, %365, %3
  %385 = phi double [ 0.000000e+00, %3 ], [ %383, %377 ], [ %376, %369 ], [ %364, %353 ], [ %338, %324 ], [ %323, %310 ], [ %287, %285 ], [ %295, %288 ], [ %274, %266 ], [ %249, %247 ], [ %255, %250 ], [ %235, %227 ], [ %238, %236 ], [ %193, %188 ], [ %196, %194 ], [ %203, %197 ], [ %172, %165 ], [ %175, %173 ], [ %133, %131 ], [ %137, %134 ], [ %113, %105 ], [ %118, %114 ], [ %89, %84 ], [ %92, %90 ], [ 0.000000e+00, %66 ], [ %64, %57 ], [ %45, %43 ], [ %27, %25 ], [ %13, %12 ], [ %11, %7 ], [ %21, %17 ], [ 0x4480F0CF00000000, %22 ], [ 0.000000e+00, %28 ], [ 0.000000e+00, %39 ], [ 0.000000e+00, %33 ], [ 0.000000e+00, %50 ], [ 0.000000e+00, %46 ], [ 0.000000e+00, %67 ], [ 0.000000e+00, %80 ], [ 0.000000e+00, %93 ], [ 0.000000e+00, %102 ], [ 0.000000e+00, %123 ], [ 0.000000e+00, %147 ], [ 0.000000e+00, %142 ], [ 0.000000e+00, %138 ], [ 0.000000e+00, %209 ], [ 0.000000e+00, %204 ], [ 0.000000e+00, %222 ], [ 0.000000e+00, %256 ], [ 0.000000e+00, %261 ], [ 0.000000e+00, %305 ], [ 0.000000e+00, %300 ], [ 0.000000e+00, %296 ], [ 0.000000e+00, %339 ], [ 0.000000e+00, %348 ], [ 0.000000e+00, %344 ], [ 0.000000e+00, %365 ]
  ret double %385
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @log10(double) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
