; ModuleID = '../../third_party/blink/renderer/platform/fonts/utf16_ragel_iterator.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/utf16_ragel_iterator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::UTF16RagelIterator" = type <{ i16*, i32, i32, i8, [7 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

@.str.1 = private unnamed_addr constant [72 x i8] c"../../third_party/blink/renderer/platform/fonts/utf16_ragel_iterator.cc\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"new_cursor < buffer_size_\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.blink::UTF16RagelIterator"* @_ZN5blink18UTF16RagelIterator9SetCursorEj(%"class.blink::UTF16RagelIterator"* returned, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #4
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #4
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #4
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %14, i8* %15) #4
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #4
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.1, i64 0, i64 0), i32 65, %"class.logging::CheckOpResult"* nonnull %4) #4
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #4
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #4
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #4
  %23 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  store i32 %1, i32* %23, align 4
  call void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* %0)
  ret %"class.blink::UTF16RagelIterator"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18UTF16RagelIterator20UpdateCachedCategoryEv(%"class.blink::UTF16RagelIterator"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %85

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 0
  %9 = load i16*, i16** %8, align 8
  %10 = zext i32 %3 to i64
  %11 = getelementptr inbounds i16, i16* %9, i64 %10
  %12 = load i16, i16* %11, align 2
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 63488
  %15 = icmp eq i32 %14, 55296
  br i1 %15, label %16, label %47

16:                                               ; preds = %7
  %17 = and i32 %13, 1024
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %16
  %20 = add nuw i32 %3, 1
  %21 = icmp eq i32 %20, %5
  br i1 %21, label %47, label %22

22:                                               ; preds = %19
  %23 = zext i32 %20 to i64
  %24 = getelementptr inbounds i16, i16* %9, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = and i32 %26, 64512
  %28 = icmp eq i32 %27, 56320
  br i1 %28, label %29, label %47

29:                                               ; preds = %22
  %30 = shl nuw nsw i32 %13, 10
  %31 = add nsw i32 %30, -56613888
  %32 = add nsw i32 %31, %26
  br label %47

33:                                               ; preds = %16
  %34 = icmp eq i32 %3, 0
  br i1 %34, label %47, label %35

35:                                               ; preds = %33
  %36 = add i32 %3, -1
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i16, i16* %9, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = and i32 %40, 64512
  %42 = icmp eq i32 %41, 55296
  br i1 %42, label %43, label %47

43:                                               ; preds = %35
  %44 = shl nuw nsw i32 %40, 10
  %45 = add nuw nsw i32 %13, -56613888
  %46 = add nsw i32 %45, %44
  br label %47

47:                                               ; preds = %7, %19, %22, %29, %33, %35, %43
  %48 = phi i32 [ %13, %7 ], [ %32, %29 ], [ %13, %22 ], [ %13, %19 ], [ %46, %43 ], [ %13, %35 ], [ %13, %33 ]
  %49 = icmp slt i32 %48, 128
  br i1 %49, label %50, label %58

50:                                               ; preds = %47
  %51 = add nsw i32 %48, -48
  %52 = icmp ult i32 %51, 10
  %53 = icmp eq i32 %48, 35
  %54 = or i1 %53, %52
  %55 = icmp eq i32 %48, 42
  %56 = or i1 %55, %54
  %57 = select i1 %56, i8 7, i8 16
  br label %82

58:                                               ; preds = %47
  switch i32 %48, label %64 [
    i32 8419, label %82
    i32 8416, label %59
    i32 8205, label %60
    i32 65038, label %61
    i32 65039, label %62
    i32 127988, label %63
  ]

59:                                               ; preds = %58
  br label %82

60:                                               ; preds = %58
  br label %82

61:                                               ; preds = %58
  br label %82

62:                                               ; preds = %58
  br label %82

63:                                               ; preds = %58
  br label %82

64:                                               ; preds = %58
  %65 = tail call zeroext i1 @_ZN5blink9Character18IsEmojiTagSequenceEi(i32 %48) #4
  br i1 %65, label %82, label %66

66:                                               ; preds = %64
  %67 = icmp eq i32 %48, 917631
  br i1 %67, label %82, label %68

68:                                               ; preds = %66
  %69 = tail call zeroext i1 @_ZN5blink9Character19IsEmojiModifierBaseEi(i32 %48) #4
  br i1 %69, label %82, label %70

70:                                               ; preds = %68
  %71 = add nsw i32 %48, -127995
  %72 = icmp ult i32 %71, 5
  br i1 %72, label %82, label %73

73:                                               ; preds = %70
  %74 = tail call zeroext i1 @_ZN5blink9Character19IsRegionalIndicatorEi(i32 %48) #4
  br i1 %74, label %82, label %75

75:                                               ; preds = %73
  %76 = tail call zeroext i1 @_ZN5blink9Character19IsEmojiEmojiDefaultEi(i32 %48) #4
  br i1 %76, label %82, label %77

77:                                               ; preds = %75
  %78 = tail call zeroext i1 @_ZN5blink9Character18IsEmojiTextDefaultEi(i32 %48) #4
  br i1 %78, label %82, label %79

79:                                               ; preds = %77
  %80 = tail call zeroext i1 @_ZN5blink9Character7IsEmojiEi(i32 %48) #4
  %81 = select i1 %80, i8 0, i8 16
  br label %82

82:                                               ; preds = %50, %58, %59, %60, %61, %62, %63, %64, %66, %68, %70, %73, %75, %77, %79
  %83 = phi i8 [ 9, %59 ], [ 10, %60 ], [ 11, %61 ], [ 12, %62 ], [ 13, %63 ], [ %57, %50 ], [ 8, %58 ], [ 14, %64 ], [ 15, %66 ], [ 3, %68 ], [ 4, %70 ], [ 6, %73 ], [ 2, %75 ], [ 1, %77 ], [ %81, %79 ]
  %84 = getelementptr inbounds %"class.blink::UTF16RagelIterator", %"class.blink::UTF16RagelIterator"* %0, i64 0, i32 3
  store i8 %83, i8* %84, align 8
  br label %85

85:                                               ; preds = %1, %82
  ret void
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare zeroext i1 @_ZN5blink9Character18IsEmojiTagSequenceEi(i32) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink9Character19IsEmojiModifierBaseEi(i32) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink9Character19IsRegionalIndicatorEi(i32) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink9Character19IsEmojiEmojiDefaultEi(i32) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink9Character18IsEmojiTextDefaultEi(i32) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink9Character7IsEmojiEi(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
