; ModuleID = '../../third_party/webrtc/video/adaptation/bitrate_constraint.cc'
source_filename = "../../third_party/webrtc/video/adaptation/bitrate_constraint.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::BitrateConstraint" = type { %"class.webrtc::AdaptationConstraint", %"class.absl::optional", %"class.absl::optional.65" }
%"class.webrtc::AdaptationConstraint" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.webrtc::EncoderSettings" }
%"class.webrtc::EncoderSettings" = type { %"struct.webrtc::VideoEncoder::EncoderInfo", %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoCodec" }
%"struct.webrtc::VideoEncoder::EncoderInfo" = type { %"struct.webrtc::VideoEncoder::ScalingSettings", i32, i8, i8, %"class.std::__1::basic_string", i8, i8, i8, [5 x %"class.absl::InlinedVector"], %"class.std::__1::vector", i8, %"class.absl::InlinedVector.15" }
%"struct.webrtc::VideoEncoder::ScalingSettings" = type { %"class.absl::optional.0", i32 }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { %"struct.webrtc::VideoEncoder::QpThresholds" }
%"struct.webrtc::VideoEncoder::QpThresholds" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.5 }
%union.anon.5 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.9" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.9" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Allocated" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*, %"class.std::__1::__compressed_pair.10" }
%"struct.webrtc::VideoEncoder::ResolutionBitrateLimits" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* }
%"class.absl::InlinedVector.15" = type { %"class.absl::inlined_vector_internal::Storage.16" }
%"class.absl::inlined_vector_internal::Storage.16" = type { %"class.absl::container_internal::CompressedTuple.17", %"union.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Data" }
%"class.absl::container_internal::CompressedTuple.17" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.18" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.18" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.9" }
%"union.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Allocated", [8 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Allocated" = type { i32*, i64 }
%"class.webrtc::VideoEncoderConfig" = type <{ i32, [4 x i8], %"struct.webrtc::SdpVideoFormat", %"class.rtc::scoped_refptr", %"class.std::__1::vector.30", i32, [4 x i8], %"class.rtc::scoped_refptr.37", i32, i32, double, %"class.std::__1::vector.38", i64, i8, i8, [6 x i8] }>
%"struct.webrtc::SdpVideoFormat" = type { %"class.std::__1::basic_string", %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.22", %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i64 }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface"* }
%"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::RefCountInterface" = type { i32 (...)** }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.webrtc::SpatialLayer"*, %"struct.webrtc::SpatialLayer"*, %"class.std::__1::__compressed_pair.32" }
%"struct.webrtc::SpatialLayer" = type { i16, i16, float, i8, i32, i32, i32, i32, i8 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.webrtc::SpatialLayer"* }
%"class.rtc::scoped_refptr.37" = type { %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings"* }
%"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings" = type { %"class.rtc::RefCountInterface" }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.webrtc::VideoStream"*, %"struct.webrtc::VideoStream"*, %"class.std::__1::__compressed_pair.55" }
%"struct.webrtc::VideoStream" = type <{ i64, i64, i32, i32, i32, i32, double, i32, [4 x i8], %"class.absl::optional.40", %"class.absl::optional.45", %"class.absl::optional.50", i8, [7 x i8] }>
%"class.absl::optional.40" = type { %"class.absl::optional_internal::optional_data.41" }
%"class.absl::optional_internal::optional_data.41" = type { %"class.absl::optional_internal::optional_data_base.42" }
%"class.absl::optional_internal::optional_data_base.42" = type { %"class.absl::optional_internal::optional_data_dtor_base.43" }
%"class.absl::optional_internal::optional_data_dtor_base.43" = type { i8, %union.anon.44 }
%union.anon.44 = type { i64 }
%"class.absl::optional.45" = type { %"class.absl::optional_internal::optional_data.46" }
%"class.absl::optional_internal::optional_data.46" = type { %"class.absl::optional_internal::optional_data_base.47" }
%"class.absl::optional_internal::optional_data_base.47" = type { %"class.absl::optional_internal::optional_data_dtor_base.48" }
%"class.absl::optional_internal::optional_data_dtor_base.48" = type { i8, %union.anon.49 }
%union.anon.49 = type { double }
%"class.absl::optional.50" = type { %"class.absl::optional_internal::optional_data.51" }
%"class.absl::optional_internal::optional_data.51" = type { %"class.absl::optional_internal::optional_data_base.52" }
%"class.absl::optional_internal::optional_data_base.52" = type { %"class.absl::optional_internal::optional_data_dtor_base.53" }
%"class.absl::optional_internal::optional_data_dtor_base.53" = type { i8, %union.anon.54 }
%union.anon.54 = type { %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.webrtc::VideoStream"* }
%"class.webrtc::VideoCodec" = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i8, [3 x %"struct.webrtc::SpatialLayer"], [5 x %"struct.webrtc::SpatialLayer"], i32, i8, %"class.absl::optional.60", %"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds", i8, %"union.webrtc::VideoCodecUnion", %"class.std::__1::basic_string" }
%"class.absl::optional.60" = type { %"class.absl::optional_internal::optional_data.61" }
%"class.absl::optional_internal::optional_data.61" = type { %"class.absl::optional_internal::optional_data_base.62" }
%"class.absl::optional_internal::optional_data_base.62" = type { %"class.absl::optional_internal::optional_data_dtor_base.63" }
%"class.absl::optional_internal::optional_data_dtor_base.63" = type { i8, %union.anon.64 }
%union.anon.64 = type { i32 }
%"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds" = type { i64, i16 }
%"union.webrtc::VideoCodecUnion" = type { %"struct.webrtc::VideoCodecVP9" }
%"struct.webrtc::VideoCodecVP9" = type { i32, i8, i8, i8, i32, i8, i8, i8, i8, i32 }
%"class.absl::optional.65" = type { %"class.absl::optional_internal::optional_data.66" }
%"class.absl::optional_internal::optional_data.66" = type { %"class.absl::optional_internal::optional_data_base.67" }
%"class.absl::optional_internal::optional_data_base.67" = type { %"class.absl::optional_internal::optional_data_dtor_base.68" }
%"class.absl::optional_internal::optional_data_dtor_base.68" = type { i8, %union.anon.69 }
%union.anon.69 = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.webrtc::VideoStreamInputState" = type { i8, %"class.absl::optional.60", i32, i32, i32, %"class.absl::optional.60" }
%"class.webrtc::VideoSourceRestrictions" = type { %"class.absl::optional.40", %"class.absl::optional.40", %"class.absl::optional.45" }
%"class.absl::optional.70" = type { %"class.absl::optional_internal::optional_data.71" }
%"class.absl::optional_internal::optional_data.71" = type { %"class.absl::optional_internal::optional_data_base.72" }
%"class.absl::optional_internal::optional_data_base.72" = type { %"class.absl::optional_internal::optional_data_dtor_base.73" }
%"class.absl::optional_internal::optional_data_dtor_base.73" = type { i8, %union.anon.74 }
%union.anon.74 = type { %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits" }

$_ZN6webrtc17BitrateConstraintD2Ev = comdat any

$_ZN6webrtc17BitrateConstraintD0Ev = comdat any

$_ZNK6webrtc17BitrateConstraint4NameEv = comdat any

@_ZTVN6webrtc17BitrateConstraintE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::BitrateConstraint"*)* @_ZN6webrtc17BitrateConstraintD2Ev to i8*), i8* bitcast (void (%"class.webrtc::BitrateConstraint"*)* @_ZN6webrtc17BitrateConstraintD0Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.webrtc::BitrateConstraint"*)* @_ZNK6webrtc17BitrateConstraint4NameEv to i8*), i8* bitcast (i1 (%"class.webrtc::BitrateConstraint"*, %"class.webrtc::VideoStreamInputState"*, %"class.webrtc::VideoSourceRestrictions"*, %"class.webrtc::VideoSourceRestrictions"*)* @_ZNK6webrtc17BitrateConstraint21IsAdaptationUpAllowedERKNS_21VideoStreamInputStateERKNS_23VideoSourceRestrictionsES6_ to i8*)] }, align 8
@.str = private unnamed_addr constant [18 x i8] c"BitrateConstraint\00", align 1

@_ZN6webrtc17BitrateConstraintC1Ev = hidden unnamed_addr alias void (%"class.webrtc::BitrateConstraint"*), void (%"class.webrtc::BitrateConstraint"*)* @_ZN6webrtc17BitrateConstraintC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc17BitrateConstraintC2Ev(%"class.webrtc::BitrateConstraint"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc17BitrateConstraintE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 777, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc17BitrateConstraint24OnEncoderSettingsUpdatedEN4absl8optionalINS_15EncoderSettingsEEE(%"class.webrtc::BitrateConstraint"*, %"class.absl::optional"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %14 = tail call dereferenceable(776) %"class.webrtc::EncoderSettings"* @_ZN6webrtc15EncoderSettingsaSERKS0_(%"class.webrtc::EncoderSettings"* %13, %"class.webrtc::EncoderSettings"* dereferenceable(776) %8) #7
  br label %34

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = bitcast i8* %16 to %"class.webrtc::EncoderSettings"*
  tail call void @_ZN6webrtc15EncoderSettingsC1ERKS0_(%"class.webrtc::EncoderSettings"* %17, %"class.webrtc::EncoderSettings"* dereferenceable(776) %8) #7
  store i8 1, i8* %9, align 8
  br label %34

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %34, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 18
  %24 = bitcast %"class.std::__1::basic_string"* %23 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  tail call void @_ZdlPv(i8* %30) #8
  br label %31

31:                                               ; preds = %28, %22
  %32 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  tail call void @_ZN6webrtc18VideoEncoderConfigD1Ev(%"class.webrtc::VideoEncoderConfig"* %32) #7
  %33 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @_ZN6webrtc12VideoEncoder11EncoderInfoD1Ev(%"struct.webrtc::VideoEncoder::EncoderInfo"* %33) #7
  store i8 0, i8* %19, align 8
  br label %34

34:                                               ; preds = %12, %15, %18, %31
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc17BitrateConstraint29OnEncoderTargetBitrateUpdatedEN4absl8optionalIjEE(%"class.webrtc::BitrateConstraint"* nocapture, i64) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast i8* %3 to i64*
  store i64 %1, i64* %4, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc17BitrateConstraint21IsAdaptationUpAllowedERKNS_21VideoStreamInputStateERKNS_23VideoSourceRestrictionsES6_(%"class.webrtc::BitrateConstraint"*, %"class.webrtc::VideoStreamInputState"* dereferenceable(32), %"class.webrtc::VideoSourceRestrictions"* nocapture readonly dereferenceable(48), %"class.webrtc::VideoSourceRestrictions"* nocapture readonly dereferenceable(48)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.webrtc::VideoSourceRestrictions", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.absl::optional.70", align 4
  %8 = getelementptr inbounds %"class.webrtc::VideoSourceRestrictions", %"class.webrtc::VideoSourceRestrictions"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.webrtc::VideoSourceRestrictions", %"class.webrtc::VideoSourceRestrictions"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 %9, i64 48, i1 false)
  %10 = tail call zeroext i1 @_ZN6webrtc21DidIncreaseResolutionENS_23VideoSourceRestrictionsES0_(%"class.webrtc::VideoSourceRestrictions"* nonnull byval(%"class.webrtc::VideoSourceRestrictions") align 8 %5, %"class.webrtc::VideoSourceRestrictions"* nonnull byval(%"class.webrtc::VideoSourceRestrictions") align 8 %3) #7
  br i1 %10, label %11, label %49

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %49, label %15

15:                                               ; preds = %11
  %16 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16)
  store i32 0, i32* %6, align 4
  %17 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  %20 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %21 = select i1 %19, i32* %6, i32* %20
  %22 = load i32, i32* %21, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %49, label %24

24:                                               ; preds = %15
  %25 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %26 = tail call dereferenceable(160) %"class.webrtc::VideoEncoderConfig"* @_ZNK6webrtc15EncoderSettings14encoder_configEv(%"class.webrtc::EncoderSettings"* %25) #7
  %27 = tail call zeroext i1 @_ZN6webrtc33VideoStreamEncoderResourceManager11IsSimulcastERKNS_18VideoEncoderConfigE(%"class.webrtc::VideoEncoderConfig"* dereferenceable(160) %26) #7
  br i1 %27, label %49, label %28

28:                                               ; preds = %24
  %29 = tail call i64 @_ZNK6webrtc21VideoStreamInputState27single_active_stream_pixelsEv(%"class.webrtc::VideoStreamInputState"* %1) #7
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %29, 32
  %32 = trunc i64 %31 to i32
  %33 = icmp eq i8 %30, 0
  br i1 %33, label %49, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.absl::optional.70", %"class.absl::optional.70"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %35) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %35, i8 -86, i64 20, i1 false)
  %36 = load i8, i8* %12, align 8, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %39, !prof !3

38:                                               ; preds = %34
  tail call void @llvm.trap() #7
  unreachable

39:                                               ; preds = %34
  %40 = tail call dereferenceable(240) %"struct.webrtc::VideoEncoder::EncoderInfo"* @_ZNK6webrtc15EncoderSettings12encoder_infoEv(%"class.webrtc::EncoderSettings"* %25) #7
  %41 = tail call i32 @_ZN6webrtc23GetHigherResolutionThanEi(i32 %32) #7
  call void @_ZNK6webrtc12VideoEncoder11EncoderInfo36GetEncoderBitrateLimitsForResolutionEi(%"class.absl::optional.70"* nonnull sret %7, %"struct.webrtc::VideoEncoder::EncoderInfo"* %40, i32 %41) #7
  %42 = load i8, i8* %35, align 4, !range !2
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %35) #7
  br label %49

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.absl::optional.70", %"class.absl::optional.70"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = icmp uge i32 %22, %47
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %35) #7
  br label %49

49:                                               ; preds = %28, %11, %24, %15, %4, %44, %45
  %50 = phi i1 [ %48, %45 ], [ true, %11 ], [ true, %44 ], [ true, %4 ], [ true, %15 ], [ true, %24 ], [ true, %28 ]
  ret i1 %50
}

declare zeroext i1 @_ZN6webrtc21DidIncreaseResolutionENS_23VideoSourceRestrictionsES0_(%"class.webrtc::VideoSourceRestrictions"* byval(%"class.webrtc::VideoSourceRestrictions") align 8, %"class.webrtc::VideoSourceRestrictions"* byval(%"class.webrtc::VideoSourceRestrictions") align 8) local_unnamed_addr #3

declare zeroext i1 @_ZN6webrtc33VideoStreamEncoderResourceManager11IsSimulcastERKNS_18VideoEncoderConfigE(%"class.webrtc::VideoEncoderConfig"* dereferenceable(160)) local_unnamed_addr #3

declare dereferenceable(160) %"class.webrtc::VideoEncoderConfig"* @_ZNK6webrtc15EncoderSettings14encoder_configEv(%"class.webrtc::EncoderSettings"*) local_unnamed_addr #3

declare i64 @_ZNK6webrtc21VideoStreamInputState27single_active_stream_pixelsEv(%"class.webrtc::VideoStreamInputState"*) local_unnamed_addr #3

declare dereferenceable(240) %"struct.webrtc::VideoEncoder::EncoderInfo"* @_ZNK6webrtc15EncoderSettings12encoder_infoEv(%"class.webrtc::EncoderSettings"*) local_unnamed_addr #3

declare void @_ZNK6webrtc12VideoEncoder11EncoderInfo36GetEncoderBitrateLimitsForResolutionEi(%"class.absl::optional.70"* sret, %"struct.webrtc::VideoEncoder::EncoderInfo"*, i32) local_unnamed_addr #3

declare i32 @_ZN6webrtc23GetHigherResolutionThanEi(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc17BitrateConstraintD2Ev(%"class.webrtc::BitrateConstraint"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc17BitrateConstraintE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 18
  %8 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZdlPv(i8* %14) #8
  br label %15

15:                                               ; preds = %12, %6
  %16 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  tail call void @_ZN6webrtc18VideoEncoderConfigD1Ev(%"class.webrtc::VideoEncoderConfig"* %16) #7
  %17 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @_ZN6webrtc12VideoEncoder11EncoderInfoD1Ev(%"struct.webrtc::VideoEncoder::EncoderInfo"* %17) #7
  store i8 0, i8* %3, align 8
  br label %18

18:                                               ; preds = %1, %15
  %19 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 0
  tail call void @_ZN6webrtc20AdaptationConstraintD2Ev(%"class.webrtc::AdaptationConstraint"* %19) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc17BitrateConstraintD0Ev(%"class.webrtc::BitrateConstraint"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc17BitrateConstraintE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 18
  %8 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  tail call void @_ZdlPv(i8* %14) #8
  br label %15

15:                                               ; preds = %12, %6
  %16 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  tail call void @_ZN6webrtc18VideoEncoderConfigD1Ev(%"class.webrtc::VideoEncoderConfig"* %16) #7
  %17 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @_ZN6webrtc12VideoEncoder11EncoderInfoD1Ev(%"struct.webrtc::VideoEncoder::EncoderInfo"* %17) #7
  store i8 0, i8* %3, align 8
  br label %18

18:                                               ; preds = %1, %15
  %19 = getelementptr inbounds %"class.webrtc::BitrateConstraint", %"class.webrtc::BitrateConstraint"* %0, i64 0, i32 0
  tail call void @_ZN6webrtc20AdaptationConstraintD2Ev(%"class.webrtc::AdaptationConstraint"* %19) #7
  %20 = bitcast %"class.webrtc::BitrateConstraint"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK6webrtc17BitrateConstraint4NameEv(%"class.std::__1::basic_string"* noalias sret, %"class.webrtc::BitrateConstraint"*) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  store i8 17, i8* %4, align 1
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 1 getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i64 17, i1 false) #7
  %6 = getelementptr inbounds i8, i8* %5, i64 17
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dereferenceable(776) %"class.webrtc::EncoderSettings"* @_ZN6webrtc15EncoderSettingsaSERKS0_(%"class.webrtc::EncoderSettings"*, %"class.webrtc::EncoderSettings"* dereferenceable(776)) local_unnamed_addr #3

declare void @_ZN6webrtc15EncoderSettingsC1ERKS0_(%"class.webrtc::EncoderSettings"*, %"class.webrtc::EncoderSettings"* dereferenceable(776)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN6webrtc18VideoEncoderConfigD1Ev(%"class.webrtc::VideoEncoderConfig"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN6webrtc12VideoEncoder11EncoderInfoD1Ev(%"struct.webrtc::VideoEncoder::EncoderInfo"*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind
declare void @_ZN6webrtc20AdaptationConstraintD2Ev(%"class.webrtc::AdaptationConstraint"*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
