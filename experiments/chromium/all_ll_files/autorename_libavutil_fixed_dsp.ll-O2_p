; ModuleID = '../../third_party/ffmpeg/libavutil/autorename_libavutil_fixed_dsp.c'
source_filename = "../../third_party/ffmpeg/libavutil/autorename_libavutil_fixed_dsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVFixedDSPContext = type { void (i16*, i32*, i32*, i32*, i32, i8)*, void (i32*, i32*, i32*, i32*, i32)*, void (i32*, i32*, i32*, i32)*, void (i32*, i32*, i32*, i32)*, void (i32*, i32*, i32*, i32*, i32)*, i32 (i32*, i32*, i32)*, void (i32*, i32*, i32)* }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVFixedDSPContext* @avpriv_alloc_fixed_dsp(i32) local_unnamed_addr #0 {
  %2 = tail call noalias i8* @av_malloc(i64 56) #4
  %3 = bitcast i8* %2 to %struct.AVFixedDSPContext*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to void (i16*, i32*, i32*, i32*, i32, i8)**
  store void (i16*, i32*, i32*, i32*, i32, i8)* @vector_fmul_window_scaled_c, void (i16*, i32*, i32*, i32*, i32, i8)** %6, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to void (i32*, i32*, i32*, i32*, i32)**
  store void (i32*, i32*, i32*, i32*, i32)* @vector_fmul_window_c, void (i32*, i32*, i32*, i32*, i32)** %8, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 16
  %10 = getelementptr inbounds i8, i8* %2, i64 32
  %11 = bitcast i8* %10 to void (i32*, i32*, i32*, i32*, i32)**
  store void (i32*, i32*, i32*, i32*, i32)* @vector_fmul_add_c, void (i32*, i32*, i32*, i32*, i32)** %11, align 8
  %12 = bitcast i8* %9 to <2 x void (i32*, i32*, i32*, i32)*>*
  store <2 x void (i32*, i32*, i32*, i32)*> <void (i32*, i32*, i32*, i32)* @vector_fmul_c, void (i32*, i32*, i32*, i32)* @vector_fmul_reverse_c>, <2 x void (i32*, i32*, i32*, i32)*>* %12, align 8
  %13 = getelementptr inbounds i8, i8* %2, i64 48
  %14 = bitcast i8* %13 to void (i32*, i32*, i32)**
  store void (i32*, i32*, i32)* @butterflies_fixed_c, void (i32*, i32*, i32)** %14, align 8
  %15 = getelementptr inbounds i8, i8* %2, i64 40
  %16 = bitcast i8* %15 to i32 (i32*, i32*, i32)**
  store i32 (i32*, i32*, i32)* @scalarproduct_fixed_c, i32 (i32*, i32*, i32)** %16, align 8
  tail call void @ff_fixed_dsp_init_x86(%struct.AVFixedDSPContext* nonnull %3) #4
  br label %17

17:                                               ; preds = %1, %5
  %18 = phi %struct.AVFixedDSPContext* [ %3, %5 ], [ null, %1 ]
  ret %struct.AVFixedDSPContext* %18
}

declare noalias i8* @av_malloc(i64) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_window_scaled_c(i16* nocapture, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32, i8 zeroext) #2 {
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds i16, i16* %0, i64 %7
  %9 = getelementptr inbounds i32, i32* %3, i64 %7
  %10 = getelementptr inbounds i32, i32* %1, i64 %7
  %11 = icmp eq i8 %5, 0
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = zext i8 %5 to i32
  %14 = add nsw i32 %13, -1
  %15 = shl i32 1, %14
  %16 = sext i32 %15 to i64
  br label %17

17:                                               ; preds = %6, %12
  %18 = phi i64 [ %16, %12 ], [ 0, %6 ]
  %19 = icmp sgt i32 %4, 0
  br i1 %19, label %20, label %72

20:                                               ; preds = %17
  %21 = zext i8 %5 to i64
  %22 = sub nsw i32 0, %4
  %23 = sext i32 %22 to i64
  br label %24

24:                                               ; preds = %20, %24
  %25 = phi i64 [ %23, %20 ], [ %70, %24 ]
  %26 = phi i64 [ %7, %20 ], [ %27, %24 ]
  %27 = add nsw i64 %26, -1
  %28 = getelementptr inbounds i32, i32* %10, i64 %25
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i32, i32* %2, i64 %27
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %9, i64 %25
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %9, i64 %27
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %29 to i64
  %37 = sext i32 %35 to i64
  %38 = mul nsw i64 %37, %36
  %39 = sext i32 %31 to i64
  %40 = sext i32 %33 to i64
  %41 = mul nsw i64 %40, %39
  %42 = sub nsw i64 1073741824, %41
  %43 = add nsw i64 %42, %38
  %44 = ashr i64 %43, 31
  %45 = add nsw i64 %44, %18
  %46 = ashr i64 %45, %21
  %47 = trunc i64 %46 to i32
  %48 = add i32 %47, 32768
  %49 = icmp ugt i32 %48, 65535
  %50 = ashr i32 %47, 31
  %51 = xor i32 %50, 32767
  %52 = select i1 %49, i32 %51, i32 %47
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %8, i64 %25
  store i16 %53, i16* %54, align 2
  %55 = mul nsw i64 %40, %36
  %56 = mul nsw i64 %37, %39
  %57 = add nsw i64 %55, 1073741824
  %58 = add i64 %57, %56
  %59 = ashr i64 %58, 31
  %60 = add nsw i64 %59, %18
  %61 = ashr i64 %60, %21
  %62 = trunc i64 %61 to i32
  %63 = add i32 %62, 32768
  %64 = icmp ugt i32 %63, 65535
  %65 = ashr i32 %62, 31
  %66 = xor i32 %65, 32767
  %67 = select i1 %64, i32 %66, i32 %62
  %68 = trunc i32 %67 to i16
  %69 = getelementptr inbounds i16, i16* %8, i64 %27
  store i16 %68, i16* %69, align 2
  %70 = add nsw i64 %25, 1
  %71 = icmp slt i64 %70, 0
  br i1 %71, label %24, label %72

72:                                               ; preds = %24, %17
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_window_c(i32* nocapture, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32) #2 {
  %6 = sext i32 %4 to i64
  %7 = getelementptr inbounds i32, i32* %0, i64 %6
  %8 = getelementptr inbounds i32, i32* %3, i64 %6
  %9 = getelementptr inbounds i32, i32* %1, i64 %6
  %10 = icmp sgt i32 %4, 0
  br i1 %10, label %11, label %46

11:                                               ; preds = %5
  %12 = sub nsw i32 0, %4
  %13 = sext i32 %12 to i64
  br label %14

14:                                               ; preds = %11, %14
  %15 = phi i64 [ %13, %11 ], [ %44, %14 ]
  %16 = phi i64 [ %6, %11 ], [ %17, %14 ]
  %17 = add nsw i64 %16, -1
  %18 = getelementptr inbounds i32, i32* %9, i64 %15
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds i32, i32* %2, i64 %17
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds i32, i32* %8, i64 %15
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds i32, i32* %8, i64 %17
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %19 to i64
  %27 = sext i32 %25 to i64
  %28 = mul nsw i64 %27, %26
  %29 = sext i32 %21 to i64
  %30 = sext i32 %23 to i64
  %31 = mul nsw i64 %30, %29
  %32 = sub nsw i64 1073741824, %31
  %33 = add nsw i64 %32, %28
  %34 = lshr i64 %33, 31
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds i32, i32* %7, i64 %15
  store i32 %35, i32* %36, align 4
  %37 = mul nsw i64 %30, %26
  %38 = mul nsw i64 %27, %29
  %39 = add nsw i64 %37, 1073741824
  %40 = add i64 %39, %38
  %41 = lshr i64 %40, 31
  %42 = trunc i64 %41 to i32
  %43 = getelementptr inbounds i32, i32* %7, i64 %17
  store i32 %42, i32* %43, align 4
  %44 = add nsw i64 %15, 1
  %45 = icmp slt i64 %44, 0
  br i1 %45, label %14, label %46

46:                                               ; preds = %14, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_c(i32* nocapture, i32* nocapture readonly, i32* nocapture readonly, i32) #2 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %56

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %3, 1
  br i1 %9, label %41, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %38, %12 ]
  %14 = phi i64 [ %11, %10 ], [ %39, %12 ]
  %15 = getelementptr inbounds i32, i32* %1, i64 %13
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32, i32* %2, i64 %13
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = mul nsw i64 %20, %17
  %22 = add nsw i64 %21, 1073741824
  %23 = lshr i64 %22, 31
  %24 = trunc i64 %23 to i32
  %25 = getelementptr inbounds i32, i32* %0, i64 %13
  store i32 %24, i32* %25, align 4
  %26 = or i64 %13, 1
  %27 = getelementptr inbounds i32, i32* %1, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %2, i64 %26
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = mul nsw i64 %32, %29
  %34 = add nsw i64 %33, 1073741824
  %35 = lshr i64 %34, 31
  %36 = trunc i64 %35 to i32
  %37 = getelementptr inbounds i32, i32* %0, i64 %26
  store i32 %36, i32* %37, align 4
  %38 = add nuw nsw i64 %13, 2
  %39 = add i64 %14, -2
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %12

41:                                               ; preds = %12, %6
  %42 = phi i64 [ 0, %6 ], [ %38, %12 ]
  %43 = icmp eq i64 %8, 0
  br i1 %43, label %56, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds i32, i32* %1, i64 %42
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %2, i64 %42
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = mul nsw i64 %50, %47
  %52 = add nsw i64 %51, 1073741824
  %53 = lshr i64 %52, 31
  %54 = trunc i64 %53 to i32
  %55 = getelementptr inbounds i32, i32* %0, i64 %42
  store i32 %54, i32* %55, align 4
  br label %56

56:                                               ; preds = %44, %41, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_add_c(i32* nocapture, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32) #2 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %66

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  %9 = and i64 %8, 1
  %10 = icmp eq i32 %4, 1
  br i1 %10, label %48, label %11

11:                                               ; preds = %7
  %12 = sub nsw i64 %8, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %45, %13 ]
  %15 = phi i64 [ %12, %11 ], [ %46, %13 ]
  %16 = getelementptr inbounds i32, i32* %1, i64 %14
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, i32* %2, i64 %14
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %21, %18
  %23 = getelementptr inbounds i32, i32* %3, i64 %14
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i64 %22, 1073741824
  %26 = lshr i64 %25, 31
  %27 = trunc i64 %26 to i32
  %28 = add nsw i32 %24, %27
  %29 = getelementptr inbounds i32, i32* %0, i64 %14
  store i32 %28, i32* %29, align 4
  %30 = or i64 %14, 1
  %31 = getelementptr inbounds i32, i32* %1, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i32, i32* %2, i64 %30
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = mul nsw i64 %36, %33
  %38 = getelementptr inbounds i32, i32* %3, i64 %30
  %39 = load i32, i32* %38, align 4
  %40 = add nsw i64 %37, 1073741824
  %41 = lshr i64 %40, 31
  %42 = trunc i64 %41 to i32
  %43 = add nsw i32 %39, %42
  %44 = getelementptr inbounds i32, i32* %0, i64 %30
  store i32 %43, i32* %44, align 4
  %45 = add nuw nsw i64 %14, 2
  %46 = add i64 %15, -2
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %13

48:                                               ; preds = %13, %7
  %49 = phi i64 [ 0, %7 ], [ %45, %13 ]
  %50 = icmp eq i64 %9, 0
  br i1 %50, label %66, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds i32, i32* %1, i64 %49
  %53 = load i32, i32* %52, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %2, i64 %49
  %56 = load i32, i32* %55, align 4
  %57 = sext i32 %56 to i64
  %58 = mul nsw i64 %57, %54
  %59 = getelementptr inbounds i32, i32* %3, i64 %49
  %60 = load i32, i32* %59, align 4
  %61 = add nsw i64 %58, 1073741824
  %62 = lshr i64 %61, 31
  %63 = trunc i64 %62 to i32
  %64 = add nsw i32 %60, %63
  %65 = getelementptr inbounds i32, i32* %0, i64 %49
  store i32 %64, i32* %65, align 4
  br label %66

66:                                               ; preds = %51, %48, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_reverse_c(i32* nocapture, i32* nocapture readonly, i32* nocapture readonly, i32) #2 {
  %5 = add nsw i32 %3, -1
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i32, i32* %2, i64 %6
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %62

9:                                                ; preds = %4
  %10 = zext i32 %3 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i32 %3, 1
  br i1 %12, label %46, label %13

13:                                               ; preds = %9
  %14 = sub nsw i64 %10, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i64 [ 0, %13 ], [ %43, %15 ]
  %17 = phi i64 [ %14, %13 ], [ %44, %15 ]
  %18 = getelementptr inbounds i32, i32* %1, i64 %16
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = sub nsw i64 0, %16
  %22 = getelementptr inbounds i32, i32* %7, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = mul nsw i64 %24, %20
  %26 = add nsw i64 %25, 1073741824
  %27 = lshr i64 %26, 31
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds i32, i32* %0, i64 %16
  store i32 %28, i32* %29, align 4
  %30 = or i64 %16, 1
  %31 = getelementptr inbounds i32, i32* %1, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = xor i64 %16, -1
  %35 = getelementptr inbounds i32, i32* %7, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  %38 = mul nsw i64 %37, %33
  %39 = add nsw i64 %38, 1073741824
  %40 = lshr i64 %39, 31
  %41 = trunc i64 %40 to i32
  %42 = getelementptr inbounds i32, i32* %0, i64 %30
  store i32 %41, i32* %42, align 4
  %43 = add nuw nsw i64 %16, 2
  %44 = add i64 %17, -2
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %15

46:                                               ; preds = %15, %9
  %47 = phi i64 [ 0, %9 ], [ %43, %15 ]
  %48 = icmp eq i64 %11, 0
  br i1 %48, label %62, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i32, i32* %1, i64 %47
  %51 = load i32, i32* %50, align 4
  %52 = sext i32 %51 to i64
  %53 = sub nsw i64 0, %47
  %54 = getelementptr inbounds i32, i32* %7, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  %57 = mul nsw i64 %56, %52
  %58 = add nsw i64 %57, 1073741824
  %59 = lshr i64 %58, 31
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds i32, i32* %0, i64 %47
  store i32 %60, i32* %61, align 4
  br label %62

62:                                               ; preds = %49, %46, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @butterflies_fixed_c(i32* nocapture, i32* nocapture, i32) #2 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %40

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = and i64 %6, 1
  %8 = icmp eq i32 %2, 1
  br i1 %8, label %30, label %9

9:                                                ; preds = %5
  %10 = sub nsw i64 %6, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %27, %11 ]
  %13 = phi i64 [ %10, %9 ], [ %28, %11 ]
  %14 = getelementptr inbounds i32, i32* %0, i64 %12
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds i32, i32* %1, i64 %12
  %17 = load i32, i32* %16, align 4
  %18 = sub i32 %15, %17
  %19 = add i32 %17, %15
  store i32 %19, i32* %14, align 4
  store i32 %18, i32* %16, align 4
  %20 = or i64 %12, 1
  %21 = getelementptr inbounds i32, i32* %0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds i32, i32* %1, i64 %20
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 %22, %24
  %26 = add i32 %24, %22
  store i32 %26, i32* %21, align 4
  store i32 %25, i32* %23, align 4
  %27 = add nuw nsw i64 %12, 2
  %28 = add i64 %13, -2
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %11

30:                                               ; preds = %11, %5
  %31 = phi i64 [ 0, %5 ], [ %27, %11 ]
  %32 = icmp eq i64 %7, 0
  br i1 %32, label %40, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds i32, i32* %0, i64 %31
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds i32, i32* %1, i64 %31
  %37 = load i32, i32* %36, align 4
  %38 = sub i32 %35, %37
  %39 = add i32 %37, %35
  store i32 %39, i32* %34, align 4
  store i32 %38, i32* %36, align 4
  br label %40

40:                                               ; preds = %33, %30, %3
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @scalarproduct_fixed_c(i32* nocapture readonly, i32* nocapture readonly, i32) #3 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %78

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = add nsw i64 %6, -1
  %8 = and i64 %6, 3
  %9 = icmp ult i64 %7, 3
  br i1 %9, label %54, label %10

10:                                               ; preds = %5
  %11 = sub nsw i64 %6, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %51, %12 ]
  %14 = phi i64 [ 1073741824, %10 ], [ %50, %12 ]
  %15 = phi i64 [ %11, %10 ], [ %52, %12 ]
  %16 = getelementptr inbounds i32, i32* %0, i64 %13
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, i32* %1, i64 %13
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %21, %18
  %23 = add nsw i64 %22, %14
  %24 = or i64 %13, 1
  %25 = getelementptr inbounds i32, i32* %0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %1, i64 %24
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = mul nsw i64 %30, %27
  %32 = add nsw i64 %31, %23
  %33 = or i64 %13, 2
  %34 = getelementptr inbounds i32, i32* %0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %1, i64 %33
  %38 = load i32, i32* %37, align 4
  %39 = sext i32 %38 to i64
  %40 = mul nsw i64 %39, %36
  %41 = add nsw i64 %40, %32
  %42 = or i64 %13, 3
  %43 = getelementptr inbounds i32, i32* %0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %1, i64 %42
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  %49 = mul nsw i64 %48, %45
  %50 = add nsw i64 %49, %41
  %51 = add nuw nsw i64 %13, 4
  %52 = add i64 %15, -4
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %12

54:                                               ; preds = %12, %5
  %55 = phi i64 [ undef, %5 ], [ %50, %12 ]
  %56 = phi i64 [ 0, %5 ], [ %51, %12 ]
  %57 = phi i64 [ 1073741824, %5 ], [ %50, %12 ]
  %58 = icmp eq i64 %8, 0
  br i1 %58, label %74, label %59

59:                                               ; preds = %54, %59
  %60 = phi i64 [ %71, %59 ], [ %56, %54 ]
  %61 = phi i64 [ %70, %59 ], [ %57, %54 ]
  %62 = phi i64 [ %72, %59 ], [ %8, %54 ]
  %63 = getelementptr inbounds i32, i32* %0, i64 %60
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %1, i64 %60
  %67 = load i32, i32* %66, align 4
  %68 = sext i32 %67 to i64
  %69 = mul nsw i64 %68, %65
  %70 = add nsw i64 %69, %61
  %71 = add nuw nsw i64 %60, 1
  %72 = add i64 %62, -1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %59, !llvm.loop !2

74:                                               ; preds = %59, %54
  %75 = phi i64 [ %55, %54 ], [ %70, %59 ]
  %76 = lshr i64 %75, 31
  %77 = trunc i64 %76 to i32
  br label %78

78:                                               ; preds = %74, %3
  %79 = phi i32 [ 0, %3 ], [ %77, %74 ]
  ret i32 %79
}

declare void @ff_fixed_dsp_init_x86(%struct.AVFixedDSPContext*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
