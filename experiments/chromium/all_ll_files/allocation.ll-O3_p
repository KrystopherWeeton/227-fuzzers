; ModuleID = '../../v8/src/heap/cppgc/allocation.cc'
source_filename = "../../v8/src/heap/cppgc/allocation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.cppgc::AllocationHandle" = type { i8 }
%"class.cppgc::internal::RawHeap" = type { %"class.cppgc::internal::HeapBase"*, %"class.std::__1::vector" }
%"class.cppgc::internal::HeapBase" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.cppgc::internal::BaseSpace"* }
%"class.cppgc::internal::BaseSpace" = type <{ %"class.cppgc::internal::RawHeap"*, %"class.std::__1::vector.0", %"class.v8::base::Mutex", i64, i32, i8, [3 x i8] }>
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.cppgc::internal::BasePage"**, %"class.cppgc::internal::BasePage"**, %"class.std::__1::__compressed_pair.2" }
%"class.cppgc::internal::BasePage" = type <{ %"class.cppgc::internal::HeapBase"*, %"class.cppgc::internal::BaseSpace"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.cppgc::internal::BasePage"** }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::unique_ptr"* }
%"class.cppgc::internal::NormalPageSpace" = type { %"class.cppgc::internal::BaseSpace.base", %"class.cppgc::internal::NormalPageSpace::LinearAllocationBuffer", %"class.cppgc::internal::FreeList" }
%"class.cppgc::internal::BaseSpace.base" = type <{ %"class.cppgc::internal::RawHeap"*, %"class.std::__1::vector.0", %"class.v8::base::Mutex", i64, i32, i8 }>
%"class.cppgc::internal::NormalPageSpace::LinearAllocationBuffer" = type { i8*, i64 }
%"class.cppgc::internal::FreeList" = type { %"struct.std::__1::array", %"struct.std::__1::array", i64 }
%"struct.std::__1::array" = type { [17 x %"class.cppgc::internal::FreeList::Entry"*] }
%"class.cppgc::internal::FreeList::Entry" = type opaque
%"class.cppgc::internal::ObjectAllocator" = type { %"class.cppgc::internal::RawHeap"*, %"class.cppgc::internal::PageBackend"*, %"class.cppgc::internal::StatsCollector"* }
%"class.cppgc::internal::PageBackend" = type opaque
%"class.cppgc::internal::StatsCollector" = type opaque
%"class.cppgc::internal::NormalPage" = type { %"class.cppgc::internal::BasePage.base", i64, %"class.cppgc::internal::PlatformAwareObjectStartBitmap" }
%"class.cppgc::internal::BasePage.base" = type <{ %"class.cppgc::internal::HeapBase"*, %"class.cppgc::internal::BaseSpace"*, i8 }>
%"class.cppgc::internal::PlatformAwareObjectStartBitmap" = type { %"class.cppgc::internal::ObjectStartBitmap" }
%"class.cppgc::internal::ObjectStartBitmap" = type { i8*, %"struct.std::__1::array.11" }
%"struct.std::__1::array.11" = type { [2048 x i8] }

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN5cppgc8internal33MakeGarbageCollectedTraitInternal8AllocateERNS_16AllocationHandleEmt(%"class.cppgc::AllocationHandle"* dereferenceable(1), i64, i16 zeroext) local_unnamed_addr #0 align 2 {
  %4 = add i64 %1, 15
  %5 = and i64 %4, -8
  %6 = icmp ult i64 %5, 64
  %7 = icmp ugt i64 %5, 31
  %8 = zext i1 %7 to i64
  %9 = icmp ult i64 %5, 128
  %10 = select i1 %9, i64 2, i64 3
  %11 = select i1 %6, i64 %8, i64 %10
  %12 = bitcast %"class.cppgc::AllocationHandle"* %0 to %"class.cppgc::internal::RawHeap"**
  %13 = load %"class.cppgc::internal::RawHeap"*, %"class.cppgc::internal::RawHeap"** %12, align 8
  %14 = getelementptr inbounds %"class.cppgc::internal::RawHeap", %"class.cppgc::internal::RawHeap"* %13, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 %11, i32 0, i32 0, i32 0
  %17 = bitcast %"class.cppgc::internal::BaseSpace"** %16 to %"class.cppgc::internal::NormalPageSpace"**
  %18 = load %"class.cppgc::internal::NormalPageSpace"*, %"class.cppgc::internal::NormalPageSpace"** %17, align 8
  %19 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %18, i64 0, i32 1, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp ult i64 %20, %5
  br i1 %21, label %22, label %25

22:                                               ; preds = %3
  %23 = bitcast %"class.cppgc::AllocationHandle"* %0 to %"class.cppgc::internal::ObjectAllocator"*
  %24 = tail call i8* @_ZN5cppgc8internal15ObjectAllocator17OutOfLineAllocateERNS0_15NormalPageSpaceEmt(%"class.cppgc::internal::ObjectAllocator"* %23, %"class.cppgc::internal::NormalPageSpace"* dereferenceable(384) %18, i64 %5, i16 zeroext %2) #2
  br label %56

25:                                               ; preds = %3
  %26 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %18, i64 0, i32 1, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 %5
  store i8* %28, i8** %26, align 8
  %29 = sub i64 %20, %5
  store i64 %29, i64* %19, align 8
  %30 = bitcast i8* %27 to i32*
  store i32 0, i32* %30, align 4
  %31 = lshr exact i64 %5, 2
  %32 = trunc i64 %31 to i16
  %33 = getelementptr inbounds i8, i8* %27, i64 6
  %34 = bitcast i8* %33 to i16*
  store i16 %32, i16* %34, align 2
  %35 = getelementptr inbounds i8, i8* %27, i64 4
  %36 = bitcast i8* %35 to i16*
  %37 = shl i16 %2, 2
  store atomic i16 %37, i16* %36 monotonic, align 2
  %38 = ptrtoint i8* %27 to i64
  %39 = and i64 %38, -131072
  %40 = or i64 %39, 4096
  %41 = inttoptr i64 %40 to %"class.cppgc::internal::NormalPage"*
  %42 = getelementptr inbounds %"class.cppgc::internal::NormalPage", %"class.cppgc::internal::NormalPage"* %41, i64 0, i32 2
  %43 = bitcast %"class.cppgc::internal::PlatformAwareObjectStartBitmap"* %42 to i64*
  %44 = load i64, i64* %43, align 32
  %45 = sub i64 %38, %44
  %46 = lshr i64 %45, 3
  %47 = lshr i64 %45, 6
  %48 = getelementptr inbounds %"class.cppgc::internal::NormalPage", %"class.cppgc::internal::NormalPage"* %41, i64 0, i32 2, i32 0, i32 1, i32 0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = trunc i64 %46 to i32
  %51 = and i32 %50, 7
  %52 = shl i32 1, %51
  %53 = trunc i32 %52 to i8
  %54 = or i8 %49, %53
  store atomic i8 %54, i8* %48 release, align 1
  %55 = getelementptr inbounds i8, i8* %27, i64 8
  br label %56

56:                                               ; preds = %22, %25
  %57 = phi i8* [ %24, %22 ], [ %55, %25 ]
  ret i8* %57
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN5cppgc8internal33MakeGarbageCollectedTraitInternal8AllocateERNS_16AllocationHandleEmtNS_16CustomSpaceIndexE(%"class.cppgc::AllocationHandle"* dereferenceable(1), i64, i16 zeroext, i64) local_unnamed_addr #0 align 2 {
  %5 = add i64 %1, 15
  %6 = and i64 %5, -8
  %7 = bitcast %"class.cppgc::AllocationHandle"* %0 to %"class.cppgc::internal::RawHeap"**
  %8 = load %"class.cppgc::internal::RawHeap"*, %"class.cppgc::internal::RawHeap"** %7, align 8
  %9 = add i64 %3, 5
  %10 = getelementptr inbounds %"class.cppgc::internal::RawHeap", %"class.cppgc::internal::RawHeap"* %8, i64 0, i32 1, i32 0, i32 0
  %11 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 %9, i32 0, i32 0, i32 0
  %13 = bitcast %"class.cppgc::internal::BaseSpace"** %12 to %"class.cppgc::internal::NormalPageSpace"**
  %14 = load %"class.cppgc::internal::NormalPageSpace"*, %"class.cppgc::internal::NormalPageSpace"** %13, align 8
  %15 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %14, i64 0, i32 1, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, %6
  br i1 %17, label %18, label %21

18:                                               ; preds = %4
  %19 = bitcast %"class.cppgc::AllocationHandle"* %0 to %"class.cppgc::internal::ObjectAllocator"*
  %20 = tail call i8* @_ZN5cppgc8internal15ObjectAllocator17OutOfLineAllocateERNS0_15NormalPageSpaceEmt(%"class.cppgc::internal::ObjectAllocator"* %19, %"class.cppgc::internal::NormalPageSpace"* dereferenceable(384) %14, i64 %6, i16 zeroext %2) #2
  br label %52

21:                                               ; preds = %4
  %22 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %14, i64 0, i32 1, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 %6
  store i8* %24, i8** %22, align 8
  %25 = sub i64 %16, %6
  store i64 %25, i64* %15, align 8
  %26 = bitcast i8* %23 to i32*
  store i32 0, i32* %26, align 4
  %27 = lshr exact i64 %6, 2
  %28 = trunc i64 %27 to i16
  %29 = getelementptr inbounds i8, i8* %23, i64 6
  %30 = bitcast i8* %29 to i16*
  store i16 %28, i16* %30, align 2
  %31 = getelementptr inbounds i8, i8* %23, i64 4
  %32 = bitcast i8* %31 to i16*
  %33 = shl i16 %2, 2
  store atomic i16 %33, i16* %32 monotonic, align 2
  %34 = ptrtoint i8* %23 to i64
  %35 = and i64 %34, -131072
  %36 = or i64 %35, 4096
  %37 = inttoptr i64 %36 to %"class.cppgc::internal::NormalPage"*
  %38 = getelementptr inbounds %"class.cppgc::internal::NormalPage", %"class.cppgc::internal::NormalPage"* %37, i64 0, i32 2
  %39 = bitcast %"class.cppgc::internal::PlatformAwareObjectStartBitmap"* %38 to i64*
  %40 = load i64, i64* %39, align 32
  %41 = sub i64 %34, %40
  %42 = lshr i64 %41, 3
  %43 = lshr i64 %41, 6
  %44 = getelementptr inbounds %"class.cppgc::internal::NormalPage", %"class.cppgc::internal::NormalPage"* %37, i64 0, i32 2, i32 0, i32 1, i32 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = trunc i64 %42 to i32
  %47 = and i32 %46, 7
  %48 = shl i32 1, %47
  %49 = trunc i32 %48 to i8
  %50 = or i8 %45, %49
  store atomic i8 %50, i8* %44 release, align 1
  %51 = getelementptr inbounds i8, i8* %23, i64 8
  br label %52

52:                                               ; preds = %18, %21
  %53 = phi i8* [ %20, %18 ], [ %51, %21 ]
  ret i8* %53
}

declare i8* @_ZN5cppgc8internal15ObjectAllocator17OutOfLineAllocateERNS0_15NormalPageSpaceEmt(%"class.cppgc::internal::ObjectAllocator"*, %"class.cppgc::internal::NormalPageSpace"* dereferenceable(384), i64, i16 zeroext) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
