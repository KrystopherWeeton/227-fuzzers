; ModuleID = '../../third_party/libjpeg_turbo/jidctred.c'
source_filename = "../../third_party/libjpeg_turbo/jidctred.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x {}*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_idct_4x4(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i16* nocapture readonly, i8** nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = alloca [32 x i32], align 16
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 128, i1 false)
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %11 = bitcast i8** %10 to i16**
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  br label %17

14:                                               ; preds = %140
  %15 = getelementptr inbounds i8, i8* %8, i64 128
  %16 = zext i32 %4 to i64
  br label %146

17:                                               ; preds = %140, %5
  %18 = phi i32 [ 8, %5 ], [ %144, %140 ]
  %19 = phi i32* [ %13, %5 ], [ %143, %140 ]
  %20 = phi i16* [ %12, %5 ], [ %142, %140 ]
  %21 = phi i16* [ %2, %5 ], [ %141, %140 ]
  %22 = icmp eq i32 %18, 4
  br i1 %22, label %140, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds i16, i16* %21, i64 8
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds i16, i16* %21, i64 16
  %27 = load i16, i16* %26, align 2
  %28 = or i16 %25, %27
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %30, label %55

30:                                               ; preds = %23
  %31 = getelementptr inbounds i16, i16* %21, i64 24
  %32 = load i16, i16* %31, align 2
  %33 = icmp eq i16 %32, 0
  br i1 %33, label %34, label %55

34:                                               ; preds = %30
  %35 = getelementptr inbounds i16, i16* %21, i64 40
  %36 = load i16, i16* %35, align 2
  %37 = icmp eq i16 %36, 0
  br i1 %37, label %38, label %55

38:                                               ; preds = %34
  %39 = getelementptr inbounds i16, i16* %21, i64 48
  %40 = load i16, i16* %39, align 2
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %42, label %55

42:                                               ; preds = %38
  %43 = getelementptr inbounds i16, i16* %21, i64 56
  %44 = load i16, i16* %43, align 2
  %45 = icmp eq i16 %44, 0
  br i1 %45, label %46, label %55

46:                                               ; preds = %42
  %47 = load i16, i16* %21, align 2
  %48 = sext i16 %47 to i32
  %49 = load i16, i16* %20, align 2
  %50 = sext i16 %49 to i32
  %51 = shl nsw i32 %48, 2
  %52 = mul i32 %51, %50
  store i32 %52, i32* %19, align 4
  %53 = getelementptr inbounds i32, i32* %19, i64 8
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds i32, i32* %19, i64 16
  store i32 %52, i32* %54, align 4
  br label %136

55:                                               ; preds = %23, %42, %38, %34, %30
  %56 = phi i16 [ 0, %42 ], [ 0, %38 ], [ 0, %34 ], [ 0, %30 ], [ %27, %23 ]
  %57 = load i16, i16* %21, align 2
  %58 = sext i16 %57 to i64
  %59 = load i16, i16* %20, align 2
  %60 = sext i16 %59 to i64
  %61 = shl nsw i64 %58, 14
  %62 = mul nsw i64 %61, %60
  %63 = sext i16 %56 to i64
  %64 = getelementptr inbounds i16, i16* %20, i64 16
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i64
  %67 = getelementptr inbounds i16, i16* %21, i64 48
  %68 = load i16, i16* %67, align 2
  %69 = sext i16 %68 to i64
  %70 = getelementptr inbounds i16, i16* %20, i64 48
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i64
  %73 = mul nsw i64 %63, 15137
  %74 = mul nsw i64 %73, %66
  %75 = mul nsw i64 %69, -6270
  %76 = mul nsw i64 %75, %72
  %77 = add nsw i64 %76, %74
  %78 = add nsw i64 %77, %62
  %79 = sub nsw i64 %62, %77
  %80 = getelementptr inbounds i16, i16* %21, i64 56
  %81 = load i16, i16* %80, align 2
  %82 = sext i16 %81 to i64
  %83 = getelementptr inbounds i16, i16* %20, i64 56
  %84 = load i16, i16* %83, align 2
  %85 = sext i16 %84 to i64
  %86 = mul nsw i64 %85, %82
  %87 = getelementptr inbounds i16, i16* %21, i64 40
  %88 = load i16, i16* %87, align 2
  %89 = sext i16 %88 to i64
  %90 = getelementptr inbounds i16, i16* %20, i64 40
  %91 = load i16, i16* %90, align 2
  %92 = sext i16 %91 to i64
  %93 = mul nsw i64 %92, %89
  %94 = getelementptr inbounds i16, i16* %21, i64 24
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i64
  %97 = getelementptr inbounds i16, i16* %20, i64 24
  %98 = load i16, i16* %97, align 2
  %99 = sext i16 %98 to i64
  %100 = mul nsw i64 %99, %96
  %101 = sext i16 %25 to i64
  %102 = getelementptr inbounds i16, i16* %20, i64 8
  %103 = load i16, i16* %102, align 2
  %104 = sext i16 %103 to i64
  %105 = mul nsw i64 %104, %101
  %106 = mul nsw i64 %86, -1730
  %107 = mul nsw i64 %93, 11893
  %108 = add nsw i64 %107, %106
  %109 = mul nsw i64 %100, -17799
  %110 = add nsw i64 %108, %109
  %111 = mul nsw i64 %105, 8697
  %112 = add nsw i64 %110, %111
  %113 = mul nsw i64 %86, -4176
  %114 = mul nsw i64 %93, -4926
  %115 = add nsw i64 %114, %113
  %116 = mul nsw i64 %100, 7373
  %117 = add nsw i64 %115, %116
  %118 = mul nsw i64 %105, 20995
  %119 = add nsw i64 %117, %118
  %120 = add nsw i64 %78, 2048
  %121 = add nsw i64 %120, %119
  %122 = lshr i64 %121, 12
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %19, align 4
  %124 = sub nsw i64 %120, %119
  %125 = lshr i64 %124, 12
  %126 = trunc i64 %125 to i32
  %127 = getelementptr inbounds i32, i32* %19, i64 24
  store i32 %126, i32* %127, align 4
  %128 = add nsw i64 %79, 2048
  %129 = add nsw i64 %128, %112
  %130 = lshr i64 %129, 12
  %131 = trunc i64 %130 to i32
  %132 = getelementptr inbounds i32, i32* %19, i64 8
  store i32 %131, i32* %132, align 4
  %133 = sub nsw i64 %128, %112
  %134 = lshr i64 %133, 12
  %135 = trunc i64 %134 to i32
  br label %136

136:                                              ; preds = %46, %55
  %137 = phi i64 [ 16, %55 ], [ 24, %46 ]
  %138 = phi i32 [ %135, %55 ], [ %52, %46 ]
  %139 = getelementptr inbounds i32, i32* %19, i64 %137
  store i32 %138, i32* %139, align 4
  br label %140

140:                                              ; preds = %136, %17
  %141 = getelementptr inbounds i16, i16* %21, i64 1
  %142 = getelementptr inbounds i16, i16* %20, i64 1
  %143 = getelementptr inbounds i32, i32* %19, i64 1
  %144 = add nsw i32 %18, -1
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %14, label %17

146:                                              ; preds = %246, %14
  %147 = phi i64 [ 0, %14 ], [ %251, %246 ]
  %148 = phi i32* [ %13, %14 ], [ %250, %246 ]
  %149 = getelementptr inbounds i8*, i8** %3, i64 %147
  %150 = load i8*, i8** %149, align 8
  %151 = getelementptr inbounds i8, i8* %150, i64 %16
  %152 = getelementptr inbounds i32, i32* %148, i64 1
  %153 = load i32, i32* %152, align 4
  %154 = getelementptr inbounds i32, i32* %148, i64 2
  %155 = load i32, i32* %154, align 4
  %156 = or i32 %153, %155
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %184

158:                                              ; preds = %146
  %159 = getelementptr inbounds i32, i32* %148, i64 3
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %184

162:                                              ; preds = %158
  %163 = getelementptr inbounds i32, i32* %148, i64 5
  %164 = load i32, i32* %163, align 4
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %184

166:                                              ; preds = %162
  %167 = getelementptr inbounds i32, i32* %148, i64 6
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %184

170:                                              ; preds = %166
  %171 = getelementptr inbounds i32, i32* %148, i64 7
  %172 = load i32, i32* %171, align 4
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %184

174:                                              ; preds = %170
  %175 = load i32, i32* %148, align 4
  %176 = zext i32 %175 to i64
  %177 = add nuw nsw i64 %176, 16
  %178 = lshr i64 %177, 5
  %179 = and i64 %178, 1023
  %180 = getelementptr inbounds i8, i8* %15, i64 %179
  %181 = load i8, i8* %180, align 1
  store i8 %181, i8* %151, align 1
  %182 = getelementptr inbounds i8, i8* %151, i64 1
  store i8 %181, i8* %182, align 1
  %183 = getelementptr inbounds i8, i8* %151, i64 2
  store i8 %181, i8* %183, align 1
  br label %246

184:                                              ; preds = %146, %170, %166, %162, %158
  %185 = phi i32 [ 0, %170 ], [ 0, %166 ], [ 0, %162 ], [ 0, %158 ], [ %155, %146 ]
  %186 = load i32, i32* %148, align 4
  %187 = sext i32 %186 to i64
  %188 = shl nsw i64 %187, 14
  %189 = sext i32 %185 to i64
  %190 = mul nsw i64 %189, 15137
  %191 = getelementptr inbounds i32, i32* %148, i64 6
  %192 = load i32, i32* %191, align 4
  %193 = sext i32 %192 to i64
  %194 = mul nsw i64 %193, -6270
  %195 = add nsw i64 %194, %190
  %196 = add nsw i64 %195, %188
  %197 = sub nsw i64 %188, %195
  %198 = getelementptr inbounds i32, i32* %148, i64 7
  %199 = load i32, i32* %198, align 4
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds i32, i32* %148, i64 5
  %202 = load i32, i32* %201, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i32, i32* %148, i64 3
  %205 = load i32, i32* %204, align 4
  %206 = sext i32 %205 to i64
  %207 = sext i32 %153 to i64
  %208 = mul nsw i64 %200, -1730
  %209 = mul nsw i64 %203, 11893
  %210 = mul nsw i64 %206, -17799
  %211 = mul nsw i64 %207, 8697
  %212 = add nsw i64 %208, %211
  %213 = add nsw i64 %212, %209
  %214 = add nsw i64 %213, %210
  %215 = mul nsw i64 %200, -4176
  %216 = mul nsw i64 %203, -4926
  %217 = mul nsw i64 %206, 7373
  %218 = mul nsw i64 %207, 20995
  %219 = add nsw i64 %215, %218
  %220 = add nsw i64 %219, %216
  %221 = add nsw i64 %220, %217
  %222 = add nsw i64 %196, 262144
  %223 = add nsw i64 %222, %221
  %224 = lshr i64 %223, 19
  %225 = and i64 %224, 1023
  %226 = getelementptr inbounds i8, i8* %15, i64 %225
  %227 = load i8, i8* %226, align 1
  store i8 %227, i8* %151, align 1
  %228 = sub nsw i64 %222, %221
  %229 = lshr i64 %228, 19
  %230 = and i64 %229, 1023
  %231 = getelementptr inbounds i8, i8* %15, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = getelementptr inbounds i8, i8* %151, i64 3
  store i8 %232, i8* %233, align 1
  %234 = add nsw i64 %197, 262144
  %235 = add nsw i64 %234, %214
  %236 = lshr i64 %235, 19
  %237 = and i64 %236, 1023
  %238 = getelementptr inbounds i8, i8* %15, i64 %237
  %239 = load i8, i8* %238, align 1
  %240 = getelementptr inbounds i8, i8* %151, i64 1
  store i8 %239, i8* %240, align 1
  %241 = sub nsw i64 %234, %214
  %242 = lshr i64 %241, 19
  %243 = and i64 %242, 1023
  %244 = getelementptr inbounds i8, i8* %15, i64 %243
  %245 = load i8, i8* %244, align 1
  br label %246

246:                                              ; preds = %184, %174
  %247 = phi i64 [ 2, %184 ], [ 3, %174 ]
  %248 = phi i8 [ %245, %184 ], [ %181, %174 ]
  %249 = getelementptr inbounds i8, i8* %151, i64 %247
  store i8 %248, i8* %249, align 1
  %250 = getelementptr inbounds i32, i32* %148, i64 8
  %251 = add nuw nsw i64 %147, 1
  %252 = icmp eq i64 %251, 4
  br i1 %252, label %253, label %146

253:                                              ; preds = %246
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %9) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_idct_2x2(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i16* nocapture readonly, i8** nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = alloca [16 x i32], align 16
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 64, i1 false)
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %11 = bitcast i8** %10 to i16**
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  br label %25

14:                                               ; preds = %100
  %15 = getelementptr inbounds i8, i8* %8, i64 128
  %16 = zext i32 %4 to i64
  %17 = load i8*, i8** %3, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 %16
  %19 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 3
  %22 = load i32, i32* %21, align 4
  %23 = or i32 %20, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %106, label %122

25:                                               ; preds = %100, %5
  %26 = phi i32 [ 8, %5 ], [ %104, %100 ]
  %27 = phi i32* [ %13, %5 ], [ %103, %100 ]
  %28 = phi i16* [ %12, %5 ], [ %102, %100 ]
  %29 = phi i16* [ %2, %5 ], [ %101, %100 ]
  switch i32 %26, label %30 [
    i32 6, label %100
    i32 4, label %100
    i32 2, label %100
  ]

30:                                               ; preds = %25
  %31 = getelementptr inbounds i16, i16* %29, i64 8
  %32 = load i16, i16* %31, align 2
  %33 = getelementptr inbounds i16, i16* %29, i64 24
  %34 = load i16, i16* %33, align 2
  %35 = or i16 %32, %34
  %36 = icmp eq i16 %35, 0
  br i1 %36, label %37, label %53

37:                                               ; preds = %30
  %38 = getelementptr inbounds i16, i16* %29, i64 40
  %39 = load i16, i16* %38, align 2
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = getelementptr inbounds i16, i16* %29, i64 56
  %43 = load i16, i16* %42, align 2
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = load i16, i16* %29, align 2
  %47 = sext i16 %46 to i32
  %48 = load i16, i16* %28, align 2
  %49 = sext i16 %48 to i32
  %50 = shl nsw i32 %47, 2
  %51 = mul i32 %50, %49
  store i32 %51, i32* %27, align 4
  %52 = getelementptr inbounds i32, i32* %27, i64 8
  store i32 %51, i32* %52, align 4
  br label %100

53:                                               ; preds = %30, %41, %37
  %54 = phi i16 [ 0, %41 ], [ 0, %37 ], [ %34, %30 ]
  %55 = load i16, i16* %29, align 2
  %56 = sext i16 %55 to i64
  %57 = load i16, i16* %28, align 2
  %58 = sext i16 %57 to i64
  %59 = shl nsw i64 %56, 15
  %60 = mul nsw i64 %59, %58
  %61 = getelementptr inbounds i16, i16* %29, i64 56
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i64
  %64 = getelementptr inbounds i16, i16* %28, i64 56
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i64
  %67 = mul nsw i64 %63, -5906
  %68 = mul nsw i64 %67, %66
  %69 = getelementptr inbounds i16, i16* %29, i64 40
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i64
  %72 = getelementptr inbounds i16, i16* %28, i64 40
  %73 = load i16, i16* %72, align 2
  %74 = sext i16 %73 to i64
  %75 = mul nsw i64 %71, 6967
  %76 = mul nsw i64 %75, %74
  %77 = add nsw i64 %76, %68
  %78 = sext i16 %54 to i64
  %79 = getelementptr inbounds i16, i16* %28, i64 24
  %80 = load i16, i16* %79, align 2
  %81 = sext i16 %80 to i64
  %82 = mul nsw i64 %78, -10426
  %83 = mul nsw i64 %82, %81
  %84 = add nsw i64 %77, %83
  %85 = sext i16 %32 to i64
  %86 = getelementptr inbounds i16, i16* %28, i64 8
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i64
  %89 = mul nsw i64 %85, 29692
  %90 = mul nsw i64 %89, %88
  %91 = add nsw i64 %84, %90
  %92 = or i64 %60, 4096
  %93 = add nsw i64 %92, %91
  %94 = lshr i64 %93, 13
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %27, align 4
  %96 = sub nsw i64 %92, %91
  %97 = lshr i64 %96, 13
  %98 = trunc i64 %97 to i32
  %99 = getelementptr inbounds i32, i32* %27, i64 8
  store i32 %98, i32* %99, align 4
  br label %100

100:                                              ; preds = %25, %25, %25, %53, %45
  %101 = getelementptr inbounds i16, i16* %29, i64 1
  %102 = getelementptr inbounds i16, i16* %28, i64 1
  %103 = getelementptr inbounds i32, i32* %27, i64 1
  %104 = add nsw i32 %26, -1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %14, label %25

106:                                              ; preds = %14
  %107 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 5
  %108 = load i32, i32* %107, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %122

110:                                              ; preds = %106
  %111 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 7
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %122

114:                                              ; preds = %110
  %115 = load i32, i32* %13, align 16
  %116 = zext i32 %115 to i64
  %117 = add nuw nsw i64 %116, 16
  %118 = lshr i64 %117, 5
  %119 = and i64 %118, 1023
  %120 = getelementptr inbounds i8, i8* %15, i64 %119
  %121 = load i8, i8* %120, align 1
  store i8 %121, i8* %18, align 1
  br label %153

122:                                              ; preds = %14, %110, %106
  %123 = phi i32 [ 0, %110 ], [ 0, %106 ], [ %22, %14 ]
  %124 = load i32, i32* %13, align 16
  %125 = sext i32 %124 to i64
  %126 = shl nsw i64 %125, 15
  %127 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 7
  %128 = load i32, i32* %127, align 4
  %129 = sext i32 %128 to i64
  %130 = mul nsw i64 %129, -5906
  %131 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 5
  %132 = load i32, i32* %131, align 4
  %133 = sext i32 %132 to i64
  %134 = mul nsw i64 %133, 6967
  %135 = sext i32 %123 to i64
  %136 = mul nsw i64 %135, -10426
  %137 = sext i32 %20 to i64
  %138 = mul nsw i64 %137, 29692
  %139 = add nsw i64 %130, %138
  %140 = add nsw i64 %139, %134
  %141 = add nsw i64 %140, %136
  %142 = add nsw i64 %126, 524288
  %143 = add nsw i64 %142, %141
  %144 = lshr i64 %143, 20
  %145 = and i64 %144, 1023
  %146 = getelementptr inbounds i8, i8* %15, i64 %145
  %147 = load i8, i8* %146, align 1
  store i8 %147, i8* %18, align 1
  %148 = sub nsw i64 %142, %141
  %149 = lshr i64 %148, 20
  %150 = and i64 %149, 1023
  %151 = getelementptr inbounds i8, i8* %15, i64 %150
  %152 = load i8, i8* %151, align 1
  br label %153

153:                                              ; preds = %122, %114
  %154 = phi i8 [ %152, %122 ], [ %121, %114 ]
  %155 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %154, i8* %155, align 1
  %156 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 8
  %157 = getelementptr inbounds i8*, i8** %3, i64 1
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds i8, i8* %158, i64 %16
  %160 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 9
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 11
  %163 = load i32, i32* %162, align 4
  %164 = or i32 %161, %163
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %174

166:                                              ; preds = %153
  %167 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 13
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %174

170:                                              ; preds = %166
  %171 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 15
  %172 = load i32, i32* %171, align 4
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %205, label %174

174:                                              ; preds = %153, %170, %166
  %175 = phi i32 [ 0, %170 ], [ 0, %166 ], [ %163, %153 ]
  %176 = load i32, i32* %156, align 16
  %177 = sext i32 %176 to i64
  %178 = shl nsw i64 %177, 15
  %179 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 15
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %180 to i64
  %182 = mul nsw i64 %181, -5906
  %183 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 13
  %184 = load i32, i32* %183, align 4
  %185 = sext i32 %184 to i64
  %186 = mul nsw i64 %185, 6967
  %187 = sext i32 %175 to i64
  %188 = mul nsw i64 %187, -10426
  %189 = sext i32 %161 to i64
  %190 = mul nsw i64 %189, 29692
  %191 = add nsw i64 %182, %190
  %192 = add nsw i64 %191, %186
  %193 = add nsw i64 %192, %188
  %194 = add nsw i64 %178, 524288
  %195 = add nsw i64 %194, %193
  %196 = lshr i64 %195, 20
  %197 = and i64 %196, 1023
  %198 = getelementptr inbounds i8, i8* %15, i64 %197
  %199 = load i8, i8* %198, align 1
  store i8 %199, i8* %159, align 1
  %200 = sub nsw i64 %194, %193
  %201 = lshr i64 %200, 20
  %202 = and i64 %201, 1023
  %203 = getelementptr inbounds i8, i8* %15, i64 %202
  %204 = load i8, i8* %203, align 1
  br label %213

205:                                              ; preds = %170
  %206 = load i32, i32* %156, align 16
  %207 = zext i32 %206 to i64
  %208 = add nuw nsw i64 %207, 16
  %209 = lshr i64 %208, 5
  %210 = and i64 %209, 1023
  %211 = getelementptr inbounds i8, i8* %15, i64 %210
  %212 = load i8, i8* %211, align 1
  store i8 %212, i8* %159, align 1
  br label %213

213:                                              ; preds = %205, %174
  %214 = phi i8 [ %212, %205 ], [ %204, %174 ]
  %215 = getelementptr inbounds i8, i8* %159, i64 1
  store i8 %214, i8* %215, align 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @jpeg_idct_1x1(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i16* nocapture readonly, i8** nocapture readonly, i32) local_unnamed_addr #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 128
  %9 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %10 = bitcast i8** %9 to i16**
  %11 = load i16*, i16** %10, align 8
  %12 = load i16, i16* %2, align 2
  %13 = sext i16 %12 to i64
  %14 = load i16, i16* %11, align 2
  %15 = sext i16 %14 to i64
  %16 = mul nsw i64 %15, %13
  %17 = add nsw i64 %16, 4
  %18 = lshr i64 %17, 3
  %19 = and i64 %18, 1023
  %20 = getelementptr inbounds i8, i8* %8, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = load i8*, i8** %3, align 8
  %23 = zext i32 %4 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  store i8 %21, i8* %24, align 1
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
