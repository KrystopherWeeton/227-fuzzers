; ModuleID = '../../third_party/libzip/src/lib/zip_source_crc.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_crc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_crc(%struct.zip*, %struct.zip_source*, i32) local_unnamed_addr #0 {
  %4 = icmp eq %struct.zip_source* %1, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %6, i32 18, i32 0) #5
  br label %27

7:                                                ; preds = %3
  %8 = tail call noalias i8* @malloc(i64 56) #5
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %11, i32 14, i32 0) #5
  br label %27

12:                                               ; preds = %7
  %13 = getelementptr inbounds i8, i8* %8, i64 8
  %14 = bitcast i8* %13 to %struct.zip_error*
  tail call void @zip_error_init(%struct.zip_error* %14) #5
  %15 = bitcast i8* %8 to i32*
  store i32 %2, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %8, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds i8, i8* %8, i64 40
  %19 = bitcast i8* %18 to i64*
  store i64 0, i64* %19, align 8
  %20 = tail call i64 @Cr_z_crc32(i64 0, i8* null, i32 0) #5
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds i8, i8* %8, i64 48
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 8
  %24 = getelementptr inbounds i8, i8* %8, i64 24
  %25 = bitcast i8* %24 to i64*
  store i64 0, i64* %25, align 8
  %26 = tail call %struct.zip_source* @zip_source_layered(%struct.zip* %0, %struct.zip_source* nonnull %1, i64 (%struct.zip_source*, i8*, i8*, i64, i32)* nonnull @crc_read, i8* nonnull %8) #5
  br label %27

27:                                               ; preds = %12, %10, %5
  %28 = phi %struct.zip_source* [ null, %5 ], [ null, %10 ], [ %26, %12 ]
  ret %struct.zip_source* %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

declare void @zip_error_init(%struct.zip_error*) local_unnamed_addr #2

declare i64 @Cr_z_crc32(i64, i8*, i32) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_layered(%struct.zip*, %struct.zip_source*, i64 (%struct.zip_source*, i8*, i8*, i64, i32)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i64 @crc_read(%struct.zip_source*, i8*, i8*, i64, i32) #0 {
  %6 = alloca %struct.zip_stat, align 8
  switch i32 %4, label %177 [
    i32 0, label %7
    i32 1, label %10
    i32 2, label %180
    i32 3, label %108
    i32 4, label %134
    i32 5, label %138
    i32 14, label %139
    i32 6, label %149
    i32 7, label %173
  ]

7:                                                ; preds = %5
  %8 = getelementptr inbounds i8, i8* %1, i64 32
  %9 = bitcast i8* %8 to i64*
  store i64 0, i64* %9, align 8
  br label %180

10:                                               ; preds = %5
  %11 = tail call i64 @zip_source_read(%struct.zip_source* %0, i8* %2, i64 %3) #5
  %12 = icmp slt i64 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %10
  %14 = getelementptr inbounds i8, i8* %1, i64 8
  %15 = bitcast i8* %14 to %struct.zip_error*
  tail call void @_zip_error_set_from_source(%struct.zip_error* %15, %struct.zip_source* %0) #5
  br label %180

16:                                               ; preds = %10
  %17 = icmp eq i64 %11, 0
  br i1 %17, label %18, label %68

18:                                               ; preds = %16
  %19 = getelementptr inbounds i8, i8* %1, i64 40
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 32
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %21, %24
  br i1 %25, label %26, label %103

26:                                               ; preds = %18
  %27 = getelementptr inbounds i8, i8* %1, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 1, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %1, i64 24
  %30 = bitcast i8* %29 to i64*
  store i64 %21, i64* %30, align 8
  %31 = bitcast i8* %1 to i32*
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %103, label %34

34:                                               ; preds = %26
  %35 = bitcast %struct.zip_stat* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %35) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 64, i1 false)
  %36 = call i32 @zip_source_stat(%struct.zip_source* %0, %struct.zip_stat* nonnull %6) #5
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %34
  %39 = getelementptr inbounds i8, i8* %1, i64 8
  %40 = bitcast i8* %39 to %struct.zip_error*
  call void @_zip_error_set_from_source(%struct.zip_error* %40, %struct.zip_source* %0) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #5
  br label %180

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %6, i64 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = and i64 %43, 32
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %56, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %6, i64 0, i32 6
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds i8, i8* %1, i64 48
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %48, %51
  br i1 %52, label %56, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds i8, i8* %1, i64 8
  %55 = bitcast i8* %54 to %struct.zip_error*
  call void @zip_error_set(%struct.zip_error* %55, i32 7, i32 0) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #5
  br label %180

56:                                               ; preds = %46, %41
  %57 = and i64 %43, 4
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %6, i64 0, i32 3
  %61 = load i64, i64* %60, align 8
  %62 = load i64, i64* %30, align 8
  %63 = icmp eq i64 %61, %62
  br i1 %63, label %67, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds i8, i8* %1, i64 8
  %66 = bitcast i8* %65 to %struct.zip_error*
  call void @zip_error_set(%struct.zip_error* %66, i32 21, i32 0) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #5
  br label %180

67:                                               ; preds = %56, %59
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #5
  br label %103

68:                                               ; preds = %16
  %69 = getelementptr inbounds i8, i8* %1, i64 4
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %103

73:                                               ; preds = %68
  %74 = getelementptr inbounds i8, i8* %1, i64 32
  %75 = bitcast i8* %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds i8, i8* %1, i64 40
  %78 = bitcast i8* %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = icmp ult i64 %79, %76
  br i1 %80, label %103, label %81

81:                                               ; preds = %73
  %82 = sub i64 %79, %76
  %83 = icmp ugt i64 %11, %82
  br i1 %83, label %84, label %103

84:                                               ; preds = %81
  %85 = getelementptr inbounds i8, i8* %1, i64 48
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 8
  br label %88

88:                                               ; preds = %84, %88
  %89 = phi i32 [ %87, %84 ], [ %98, %88 ]
  %90 = phi i64 [ %82, %84 ], [ %101, %88 ]
  %91 = sub i64 %11, %90
  %92 = icmp ult i64 %91, 4294967295
  %93 = select i1 %92, i64 %91, i64 4294967295
  %94 = zext i32 %89 to i64
  %95 = getelementptr inbounds i8, i8* %2, i64 %90
  %96 = trunc i64 %93 to i32
  %97 = tail call i64 @Cr_z_crc32(i64 %94, i8* %95, i32 %96) #5
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %86, align 8
  %99 = load i64, i64* %78, align 8
  %100 = add i64 %99, %93
  store i64 %100, i64* %78, align 8
  %101 = add i64 %93, %90
  %102 = icmp ugt i64 %11, %101
  br i1 %102, label %88, label %103

103:                                              ; preds = %88, %68, %81, %67, %26, %73, %18
  %104 = getelementptr inbounds i8, i8* %1, i64 32
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %106, %11
  store i64 %107, i64* %105, align 8
  br label %180

108:                                              ; preds = %5
  %109 = getelementptr inbounds i8, i8* %1, i64 4
  %110 = bitcast i8* %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %180, label %113

113:                                              ; preds = %108
  %114 = getelementptr inbounds i8, i8* %1, i64 24
  %115 = bitcast i8* %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds i8, i8* %2, i64 24
  %118 = bitcast i8* %117 to i64*
  store i64 %116, i64* %118, align 8
  %119 = getelementptr inbounds i8, i8* %1, i64 48
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 8
  %122 = getelementptr inbounds i8, i8* %2, i64 48
  %123 = bitcast i8* %122 to i32*
  store i32 %121, i32* %123, align 8
  %124 = load i64, i64* %115, align 8
  %125 = getelementptr inbounds i8, i8* %2, i64 32
  %126 = bitcast i8* %125 to i64*
  store i64 %124, i64* %126, align 8
  %127 = getelementptr inbounds i8, i8* %2, i64 52
  %128 = bitcast i8* %127 to i16*
  store i16 0, i16* %128, align 4
  %129 = getelementptr inbounds i8, i8* %2, i64 54
  %130 = bitcast i8* %129 to i16*
  store i16 0, i16* %130, align 2
  %131 = bitcast i8* %2 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = or i64 %132, 236
  store i64 %133, i64* %131, align 8
  br label %180

134:                                              ; preds = %5
  %135 = getelementptr inbounds i8, i8* %1, i64 8
  %136 = bitcast i8* %135 to %struct.zip_error*
  %137 = tail call i64 @zip_error_to_data(%struct.zip_error* %136, i8* %2, i64 %3) #5
  br label %180

138:                                              ; preds = %5
  tail call void @free(i8* %1) #5
  br label %180

139:                                              ; preds = %5
  %140 = tail call i64 @zip_source_supports(%struct.zip_source* %0) #5
  %141 = icmp slt i64 %140, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %139
  %143 = getelementptr inbounds i8, i8* %1, i64 8
  %144 = bitcast i8* %143 to %struct.zip_error*
  tail call void @_zip_error_set_from_source(%struct.zip_error* %144, %struct.zip_source* %0) #5
  br label %180

145:                                              ; preds = %139
  %146 = tail call i64 (i32, ...) @zip_source_make_command_bitmap(i32 8, i32 9, i32 10, i32 12, i32 13, i32 15, i32 19, i32 -1) #5
  %147 = xor i64 %146, -1
  %148 = and i64 %140, %147
  br label %180

149:                                              ; preds = %5
  %150 = icmp ult i64 %3, 16
  br i1 %150, label %151, label %154

151:                                              ; preds = %149
  %152 = getelementptr inbounds i8, i8* %1, i64 8
  %153 = bitcast i8* %152 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %153, i32 18, i32 0) #5
  br label %180

154:                                              ; preds = %149
  %155 = icmp eq i8* %2, null
  br i1 %155, label %180, label %156

156:                                              ; preds = %154
  %157 = bitcast i8* %2 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = getelementptr inbounds i8, i8* %2, i64 8
  %160 = bitcast i8* %159 to i32*
  %161 = load i32, i32* %160, align 8
  %162 = tail call i32 @zip_source_seek(%struct.zip_source* %0, i64 %158, i32 %161) #5
  %163 = icmp slt i32 %162, 0
  br i1 %163, label %167, label %164

164:                                              ; preds = %156
  %165 = tail call i64 @zip_source_tell(%struct.zip_source* %0) #5
  %166 = icmp slt i64 %165, 0
  br i1 %166, label %167, label %170

167:                                              ; preds = %164, %156
  %168 = getelementptr inbounds i8, i8* %1, i64 8
  %169 = bitcast i8* %168 to %struct.zip_error*
  tail call void @_zip_error_set_from_source(%struct.zip_error* %169, %struct.zip_source* %0) #5
  br label %180

170:                                              ; preds = %164
  %171 = getelementptr inbounds i8, i8* %1, i64 32
  %172 = bitcast i8* %171 to i64*
  store i64 %165, i64* %172, align 8
  br label %180

173:                                              ; preds = %5
  %174 = getelementptr inbounds i8, i8* %1, i64 32
  %175 = bitcast i8* %174 to i64*
  %176 = load i64, i64* %175, align 8
  br label %180

177:                                              ; preds = %5
  %178 = getelementptr inbounds i8, i8* %1, i64 8
  %179 = bitcast i8* %178 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %179, i32 28, i32 0) #5
  br label %180

180:                                              ; preds = %151, %167, %170, %154, %142, %145, %113, %108, %5, %64, %53, %38, %177, %173, %138, %134, %103, %13, %7
  %181 = phi i64 [ -1, %177 ], [ %176, %173 ], [ 0, %138 ], [ %137, %134 ], [ -1, %13 ], [ %11, %103 ], [ 0, %7 ], [ -1, %38 ], [ -1, %53 ], [ -1, %64 ], [ 0, %5 ], [ 0, %108 ], [ 0, %113 ], [ -1, %142 ], [ %148, %145 ], [ -1, %167 ], [ 0, %170 ], [ -1, %154 ], [ -1, %151 ]
  ret i64 %181
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @zip_source_read(%struct.zip_source*, i8*, i64) local_unnamed_addr #2

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @zip_source_stat(%struct.zip_source*, %struct.zip_stat*) local_unnamed_addr #2

declare i64 @zip_error_to_data(%struct.zip_error*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

declare i64 @zip_source_supports(%struct.zip_source*) local_unnamed_addr #2

declare i64 @zip_source_make_command_bitmap(i32, ...) local_unnamed_addr #2

declare i32 @zip_source_seek(%struct.zip_source*, i64, i32) local_unnamed_addr #2

declare i64 @zip_source_tell(%struct.zip_source*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
