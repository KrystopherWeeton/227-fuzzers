; ModuleID = '../../third_party/libjpeg_turbo/jdhuff.c'
source_filename = "../../third_party/libjpeg_turbo/jdhuff.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.d_derived_tbl = type { [18 x i64], [18 x i64], %struct.JHUFF_TBL*, [256 x i32] }
%struct.bitread_working_state = type { i8*, i64, i64, i32, %struct.jpeg_decompress_struct* }
%struct.huff_entropy_decoder = type { %struct.jpeg_entropy_decoder, %struct.bitread_perm_state, %struct.savable_state, i32, [4 x %struct.d_derived_tbl*], [4 x %struct.d_derived_tbl*], [10 x %struct.d_derived_tbl*], [10 x %struct.d_derived_tbl*], [10 x i32], [10 x i32] }
%struct.bitread_perm_state = type { i64, i32 }
%struct.savable_state = type { [4 x i32] }

@std_huff_tables.bits_dc_luminance = internal constant [17 x i8] c"\00\00\01\05\01\01\01\01\01\01\00\00\00\00\00\00\00", align 16
@std_huff_tables.val_dc_luminance = internal constant [12 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B", align 1
@std_huff_tables.bits_dc_chrominance = internal constant [17 x i8] c"\00\00\03\01\01\01\01\01\01\01\01\01\00\00\00\00\00", align 16
@std_huff_tables.val_dc_chrominance = internal constant [12 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B", align 1
@std_huff_tables.bits_ac_luminance = internal constant [17 x i8] c"\00\00\02\01\03\03\02\04\03\05\05\04\04\00\00\01}", align 16
@std_huff_tables.val_ac_luminance = internal constant [162 x i8] c"\01\02\03\00\04\11\05\12!1A\06\13Qa\07\22q\142\81\91\A1\08#B\B1\C1\15R\D1\F0$3br\82\09\0A\16\17\18\19\1A%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA", align 16
@std_huff_tables.bits_ac_chrominance = internal constant [17 x i8] c"\00\00\02\01\02\04\04\03\04\07\05\04\04\00\01\02w", align 16
@std_huff_tables.val_ac_chrominance = internal constant [162 x i8] c"\00\01\02\03\11\04\05!1\06\12AQ\07aq\13\222\81\08\14B\91\A1\B1\C1\09#3R\F0\15br\D1\0A\16$4\E1%\F1\17\18\19\1A&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\82\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E2\E3\E4\E5\E6\E7\E8\E9\EA\F2\F3\F4\F5\F6\F7\F8\F9\FA", align 16
@jpeg_natural_order = external local_unnamed_addr constant [0 x i32], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_make_d_derived_tbl(%struct.jpeg_decompress_struct*, i32, i32, %struct.d_derived_tbl** nocapture) local_unnamed_addr #0 {
  %5 = alloca [257 x i8], align 16
  %6 = alloca [257 x i32], align 16
  %7 = getelementptr inbounds [257 x i8], [257 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 257, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 257, i1 false)
  %8 = bitcast [257 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1028, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 1028, i1 false)
  %9 = icmp ugt i32 %2, 3
  br i1 %9, label %10, label %20

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %12 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 5
  store i32 50, i32* %13, align 8
  %14 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %15 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 6, i32 0, i64 0
  store i32 %2, i32* %15, align 4
  %16 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %17 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %16, i64 0, i32 0
  %18 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %17, align 8
  %19 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %18(%struct.jpeg_common_struct* %19) #3
  br label %20

20:                                               ; preds = %4, %10
  %21 = icmp ne i32 %1, 0
  %22 = sext i32 %2 to i64
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 41, i64 %22
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 42, i64 %22
  %25 = select i1 %21, %struct.JHUFF_TBL** %23, %struct.JHUFF_TBL** %24
  %26 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %25, align 8
  %27 = icmp eq %struct.JHUFF_TBL* %26, null
  br i1 %27, label %28, label %38

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %30 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %29, align 8
  %31 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %30, i64 0, i32 5
  store i32 50, i32* %31, align 8
  %32 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %29, align 8
  %33 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %32, i64 0, i32 6, i32 0, i64 0
  store i32 %2, i32* %33, align 4
  %34 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %29, align 8
  %35 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %34, i64 0, i32 0
  %36 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %35, align 8
  %37 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %36(%struct.jpeg_common_struct* %37) #3
  br label %38

38:                                               ; preds = %28, %20
  %39 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %3, align 8
  %40 = icmp eq %struct.d_derived_tbl* %39, null
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  %42 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  br label %52

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %45 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %44, align 8
  %46 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %45, i64 0, i32 0
  %47 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %46, align 8
  %48 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %49 = tail call i8* %47(%struct.jpeg_common_struct* %48, i32 1, i64 1320) #3
  %50 = bitcast %struct.d_derived_tbl** %3 to i8**
  store i8* %49, i8** %50, align 8
  %51 = bitcast i8* %49 to %struct.d_derived_tbl*
  br label %52

52:                                               ; preds = %41, %43
  %53 = phi %struct.jpeg_common_struct* [ %42, %41 ], [ %48, %43 ]
  %54 = phi %struct.d_derived_tbl* [ %39, %41 ], [ %51, %43 ]
  %55 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 2
  store %struct.JHUFF_TBL* %26, %struct.JHUFF_TBL** %55, align 8
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  br label %57

57:                                               ; preds = %134, %52
  %58 = phi i64 [ 1, %52 ], [ %136, %134 ]
  %59 = phi i32 [ 1, %52 ], [ %137, %134 ]
  %60 = phi i32 [ 0, %52 ], [ %135, %134 ]
  %61 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %26, i64 0, i32 0, i64 %58
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = add nsw i32 %60, %63
  %65 = icmp sgt i32 %64, 256
  br i1 %65, label %66, label %72

66:                                               ; preds = %57
  %67 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %68 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %67, i64 0, i32 5
  store i32 8, i32* %68, align 8
  %69 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %70 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %69, i64 0, i32 0
  %71 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %70, align 8
  tail call void %71(%struct.jpeg_common_struct* %53) #3
  br label %72

72:                                               ; preds = %66, %57
  %73 = icmp eq i8 %62, 0
  br i1 %73, label %134, label %74

74:                                               ; preds = %72
  %75 = trunc i32 %59 to i8
  %76 = sext i32 %60 to i64
  %77 = getelementptr [257 x i8], [257 x i8]* %5, i64 0, i64 %76
  %78 = zext i8 %62 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 %75, i64 %78, i1 false)
  %79 = zext i8 %62 to i32
  %80 = icmp ult i8 %62, 4
  br i1 %80, label %122, label %81

81:                                               ; preds = %74
  %82 = and i32 %79, 252
  %83 = sub nsw i32 %63, %82
  %84 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %76, i32 0
  %85 = add nsw i32 %82, -4
  %86 = lshr exact i32 %85, 2
  %87 = add nuw nsw i32 %86, 1
  %88 = and i32 %87, 7
  %89 = icmp ult i32 %85, 28
  br i1 %89, label %100, label %90

90:                                               ; preds = %81
  %91 = sub nsw i32 %87, %88
  br label %92

92:                                               ; preds = %92, %90
  %93 = phi <2 x i64> [ %84, %90 ], [ %96, %92 ]
  %94 = phi <2 x i64> [ zeroinitializer, %90 ], [ %97, %92 ]
  %95 = phi i32 [ %91, %90 ], [ %98, %92 ]
  %96 = add nsw <2 x i64> %93, <i64 8, i64 8>
  %97 = add nuw nsw <2 x i64> %94, <i64 8, i64 8>
  %98 = add i32 %95, -8
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %92, !llvm.loop !2

100:                                              ; preds = %92, %81
  %101 = phi <2 x i64> [ undef, %81 ], [ %96, %92 ]
  %102 = phi <2 x i64> [ undef, %81 ], [ %97, %92 ]
  %103 = phi <2 x i64> [ %84, %81 ], [ %96, %92 ]
  %104 = phi <2 x i64> [ zeroinitializer, %81 ], [ %97, %92 ]
  %105 = icmp eq i32 %88, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %100, %106
  %107 = phi <2 x i64> [ %110, %106 ], [ %103, %100 ]
  %108 = phi <2 x i64> [ %111, %106 ], [ %104, %100 ]
  %109 = phi i32 [ %112, %106 ], [ %88, %100 ]
  %110 = add nsw <2 x i64> %107, <i64 1, i64 1>
  %111 = add nuw nsw <2 x i64> %108, <i64 1, i64 1>
  %112 = add i32 %109, -1
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %106, !llvm.loop !4

114:                                              ; preds = %106, %100
  %115 = phi <2 x i64> [ %101, %100 ], [ %110, %106 ]
  %116 = phi <2 x i64> [ %102, %100 ], [ %111, %106 ]
  %117 = add <2 x i64> %116, %115
  %118 = shufflevector <2 x i64> %117, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %119 = add <2 x i64> %117, %118
  %120 = extractelement <2 x i64> %119, i32 0
  %121 = icmp eq i32 %82, %79
  br i1 %121, label %131, label %122

122:                                              ; preds = %114, %74
  %123 = phi i64 [ %76, %74 ], [ %120, %114 ]
  %124 = phi i32 [ %63, %74 ], [ %83, %114 ]
  br label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %129, %125 ], [ %123, %122 ]
  %127 = phi i32 [ %128, %125 ], [ %124, %122 ]
  %128 = add nsw i32 %127, -1
  %129 = add nsw i64 %126, 1
  %130 = icmp eq i32 %128, 0
  br i1 %130, label %131, label %125, !llvm.loop !6

131:                                              ; preds = %125, %114
  %132 = phi i64 [ %120, %114 ], [ %129, %125 ]
  %133 = trunc i64 %132 to i32
  br label %134

134:                                              ; preds = %131, %72
  %135 = phi i32 [ %60, %72 ], [ %133, %131 ]
  %136 = add nuw nsw i64 %58, 1
  %137 = add nuw nsw i32 %59, 1
  %138 = icmp eq i64 %136, 17
  br i1 %138, label %139, label %57

139:                                              ; preds = %134
  %140 = sext i32 %135 to i64
  %141 = getelementptr inbounds [257 x i8], [257 x i8]* %5, i64 0, i64 %140
  store i8 0, i8* %141, align 1
  %142 = load i8, i8* %7, align 16
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %187, label %144

144:                                              ; preds = %139
  %145 = sext i8 %142 to i32
  br label %146

146:                                              ; preds = %144, %180
  %147 = phi i8 [ %142, %144 ], [ %185, %180 ]
  %148 = phi i32 [ 0, %144 ], [ %181, %180 ]
  %149 = phi i32 [ %145, %144 ], [ %182, %180 ]
  %150 = phi i32 [ 0, %144 ], [ %168, %180 ]
  %151 = sext i8 %147 to i32
  %152 = icmp eq i32 %149, %151
  br i1 %152, label %153, label %167

153:                                              ; preds = %146
  %154 = sext i32 %150 to i64
  br label %155

155:                                              ; preds = %153, %155
  %156 = phi i64 [ %154, %153 ], [ %158, %155 ]
  %157 = phi i32 [ %148, %153 ], [ %160, %155 ]
  %158 = add nsw i64 %156, 1
  %159 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %156
  store i32 %157, i32* %159, align 4
  %160 = add i32 %157, 1
  %161 = getelementptr inbounds [257 x i8], [257 x i8]* %5, i64 0, i64 %158
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = icmp eq i32 %149, %163
  br i1 %164, label %155, label %165

165:                                              ; preds = %155
  %166 = trunc i64 %158 to i32
  br label %167

167:                                              ; preds = %165, %146
  %168 = phi i32 [ %150, %146 ], [ %166, %165 ]
  %169 = phi i32 [ %148, %146 ], [ %160, %165 ]
  %170 = zext i32 %169 to i64
  %171 = zext i32 %149 to i64
  %172 = shl i64 1, %171
  %173 = icmp sgt i64 %172, %170
  br i1 %173, label %180, label %174

174:                                              ; preds = %167
  %175 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %176 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %175, i64 0, i32 5
  store i32 8, i32* %176, align 8
  %177 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %178 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %177, i64 0, i32 0
  %179 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %178, align 8
  tail call void %179(%struct.jpeg_common_struct* %53) #3
  br label %180

180:                                              ; preds = %167, %174
  %181 = shl i32 %169, 1
  %182 = add nsw i32 %149, 1
  %183 = sext i32 %168 to i64
  %184 = getelementptr inbounds [257 x i8], [257 x i8]* %5, i64 0, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %187, label %146

187:                                              ; preds = %180, %139
  br label %188

188:                                              ; preds = %187, %209
  %189 = phi i64 [ %213, %209 ], [ 1, %187 ]
  %190 = phi i32 [ %211, %209 ], [ 0, %187 ]
  %191 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %26, i64 0, i32 0, i64 %189
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %209, label %194

194:                                              ; preds = %188
  %195 = sext i32 %190 to i64
  %196 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  %199 = sub nsw i64 %195, %198
  %200 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 1, i64 %189
  store i64 %199, i64* %200, align 8
  %201 = load i8, i8* %191, align 1
  %202 = zext i8 %201 to i32
  %203 = add nsw i32 %190, %202
  %204 = add nsw i32 %203, -1
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = zext i32 %207 to i64
  br label %209

209:                                              ; preds = %188, %194
  %210 = phi i64 [ %208, %194 ], [ -1, %188 ]
  %211 = phi i32 [ %203, %194 ], [ %190, %188 ]
  %212 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 0, i64 %189
  store i64 %210, i64* %212, align 8
  %213 = add nuw nsw i64 %189, 1
  %214 = icmp eq i64 %213, 17
  br i1 %214, label %215, label %188

215:                                              ; preds = %209
  %216 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 1, i64 17
  store i64 0, i64* %216, align 8
  %217 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 0, i64 17
  store i64 1048575, i64* %217, align 8
  %218 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 0
  %219 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %219, align 4
  %220 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 4
  %221 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %221, align 4
  %222 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 8
  %223 = bitcast i32* %222 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %223, align 4
  %224 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 12
  %225 = bitcast i32* %224 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %225, align 4
  %226 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 16
  %227 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %227, align 4
  %228 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 20
  %229 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %229, align 4
  %230 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 24
  %231 = bitcast i32* %230 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %231, align 4
  %232 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 28
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %233, align 4
  %234 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 32
  %235 = bitcast i32* %234 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %235, align 4
  %236 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 36
  %237 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %237, align 4
  %238 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 40
  %239 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %239, align 4
  %240 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 44
  %241 = bitcast i32* %240 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %241, align 4
  %242 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 48
  %243 = bitcast i32* %242 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %243, align 4
  %244 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 52
  %245 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %245, align 4
  %246 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 56
  %247 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %247, align 4
  %248 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 60
  %249 = bitcast i32* %248 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %249, align 4
  %250 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 64
  %251 = bitcast i32* %250 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %251, align 4
  %252 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 68
  %253 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %253, align 4
  %254 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 72
  %255 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %255, align 4
  %256 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 76
  %257 = bitcast i32* %256 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %257, align 4
  %258 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 80
  %259 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %259, align 4
  %260 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 84
  %261 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %261, align 4
  %262 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 88
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %263, align 4
  %264 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 92
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %265, align 4
  %266 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 96
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %267, align 4
  %268 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 100
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %269, align 4
  %270 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 104
  %271 = bitcast i32* %270 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %271, align 4
  %272 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 108
  %273 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %273, align 4
  %274 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 112
  %275 = bitcast i32* %274 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %275, align 4
  %276 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 116
  %277 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %277, align 4
  %278 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 120
  %279 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %279, align 4
  %280 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 124
  %281 = bitcast i32* %280 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %281, align 4
  %282 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 128
  %283 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %283, align 4
  %284 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 132
  %285 = bitcast i32* %284 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %285, align 4
  %286 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 136
  %287 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %287, align 4
  %288 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 140
  %289 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %289, align 4
  %290 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 144
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %291, align 4
  %292 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 148
  %293 = bitcast i32* %292 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %293, align 4
  %294 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 152
  %295 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %295, align 4
  %296 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 156
  %297 = bitcast i32* %296 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %297, align 4
  %298 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 160
  %299 = bitcast i32* %298 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %299, align 4
  %300 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 164
  %301 = bitcast i32* %300 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %301, align 4
  %302 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 168
  %303 = bitcast i32* %302 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %303, align 4
  %304 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 172
  %305 = bitcast i32* %304 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %305, align 4
  %306 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 176
  %307 = bitcast i32* %306 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %307, align 4
  %308 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 180
  %309 = bitcast i32* %308 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %309, align 4
  %310 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 184
  %311 = bitcast i32* %310 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %311, align 4
  %312 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 188
  %313 = bitcast i32* %312 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %313, align 4
  %314 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 192
  %315 = bitcast i32* %314 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %315, align 4
  %316 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 196
  %317 = bitcast i32* %316 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %317, align 4
  %318 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 200
  %319 = bitcast i32* %318 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %319, align 4
  %320 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 204
  %321 = bitcast i32* %320 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %321, align 4
  %322 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 208
  %323 = bitcast i32* %322 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %323, align 4
  %324 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 212
  %325 = bitcast i32* %324 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %325, align 4
  %326 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 216
  %327 = bitcast i32* %326 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %327, align 4
  %328 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 220
  %329 = bitcast i32* %328 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %329, align 4
  %330 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 224
  %331 = bitcast i32* %330 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %331, align 4
  %332 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 228
  %333 = bitcast i32* %332 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %333, align 4
  %334 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 232
  %335 = bitcast i32* %334 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %335, align 4
  %336 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 236
  %337 = bitcast i32* %336 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %337, align 4
  %338 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 240
  %339 = bitcast i32* %338 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %339, align 4
  %340 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 244
  %341 = bitcast i32* %340 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %341, align 4
  %342 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 248
  %343 = bitcast i32* %342 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %343, align 4
  %344 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 252
  %345 = bitcast i32* %344 to <4 x i32>*
  store <4 x i32> <i32 2304, i32 2304, i32 2304, i32 2304>, <4 x i32>* %345, align 4
  %346 = getelementptr %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 1
  br label %347

347:                                              ; preds = %215, %485
  %348 = phi i64 [ %487, %485 ], [ 1, %215 ]
  %349 = phi i32 [ %486, %485 ], [ 0, %215 ]
  %350 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %26, i64 0, i32 0, i64 %348
  %351 = load i8, i8* %350, align 1
  %352 = icmp eq i8 %351, 0
  br i1 %352, label %485, label %353

353:                                              ; preds = %347
  %354 = trunc i64 %348 to i32
  %355 = sub i32 8, %354
  %356 = shl i32 1, %355
  %357 = sext i32 %349 to i64
  %358 = trunc i64 %348 to i32
  %359 = shl i32 %358, 8
  %360 = icmp slt i32 %356, 1
  %361 = select i1 %360, i32 %356, i32 1
  %362 = sub i32 %356, %361
  %363 = zext i32 %362 to i64
  %364 = add nuw nsw i64 %363, 1
  %365 = icmp slt i32 %356, 1
  %366 = select i1 %365, i32 %356, i32 1
  %367 = sub i32 %356, %366
  %368 = zext i32 %367 to i64
  %369 = getelementptr i32, i32* %346, i64 %368
  %370 = add nsw i64 %357, 1
  %371 = and i64 %364, 8589934584
  %372 = add nsw i64 %371, -8
  %373 = lshr exact i64 %372, 3
  %374 = add nuw nsw i64 %373, 1
  %375 = icmp ult i64 %364, 8
  %376 = and i64 %364, 8589934584
  %377 = trunc i64 %376 to i32
  %378 = sub i32 %356, %377
  %379 = insertelement <4 x i32> undef, i32 %359, i32 0
  %380 = shufflevector <4 x i32> %379, <4 x i32> undef, <4 x i32> zeroinitializer
  %381 = insertelement <4 x i32> undef, i32 %359, i32 0
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> zeroinitializer
  %383 = and i64 %374, 1
  %384 = icmp eq i64 %372, 0
  %385 = sub nuw nsw i64 %374, %383
  %386 = icmp eq i64 %383, 0
  %387 = icmp eq i64 %364, %376
  br label %388

388:                                              ; preds = %353, %476
  %389 = phi i64 [ 0, %353 ], [ %482, %476 ]
  %390 = phi i64 [ %357, %353 ], [ %479, %476 ]
  %391 = phi i32 [ 1, %353 ], [ %478, %476 ]
  %392 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %390
  %393 = load i32, i32* %392, align 4
  %394 = shl i32 %393, %355
  %395 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %26, i64 0, i32 1, i64 %390
  %396 = sext i32 %394 to i64
  br i1 %375, label %463, label %397

397:                                              ; preds = %388
  %398 = add i64 %370, %389
  %399 = getelementptr %struct.JHUFF_TBL, %struct.JHUFF_TBL* %26, i64 0, i32 1, i64 %398
  %400 = getelementptr %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 %396
  %401 = bitcast i32* %400 to i8*
  %402 = getelementptr i32, i32* %369, i64 %396
  %403 = bitcast i32* %402 to i8*
  %404 = icmp ugt i8* %399, %401
  %405 = icmp ult i8* %395, %403
  %406 = and i1 %404, %405
  br i1 %406, label %463, label %407

407:                                              ; preds = %397
  %408 = add nsw i64 %376, %396
  br i1 %384, label %445, label %409

409:                                              ; preds = %407
  %410 = load i8, i8* %395, align 1, !alias.scope !8
  %411 = insertelement <4 x i8> undef, i8 %410, i32 0
  %412 = shufflevector <4 x i8> %411, <4 x i8> undef, <4 x i32> zeroinitializer
  %413 = insertelement <4 x i8> undef, i8 %410, i32 0
  %414 = shufflevector <4 x i8> %413, <4 x i8> undef, <4 x i32> zeroinitializer
  %415 = zext <4 x i8> %412 to <4 x i32>
  %416 = zext <4 x i8> %414 to <4 x i32>
  %417 = or <4 x i32> %380, %415
  %418 = or <4 x i32> %382, %416
  %419 = load i8, i8* %395, align 1, !alias.scope !8
  %420 = insertelement <4 x i8> undef, i8 %419, i32 0
  %421 = shufflevector <4 x i8> %420, <4 x i8> undef, <4 x i32> zeroinitializer
  %422 = insertelement <4 x i8> undef, i8 %419, i32 0
  %423 = shufflevector <4 x i8> %422, <4 x i8> undef, <4 x i32> zeroinitializer
  %424 = zext <4 x i8> %421 to <4 x i32>
  %425 = zext <4 x i8> %423 to <4 x i32>
  %426 = or <4 x i32> %380, %424
  %427 = or <4 x i32> %382, %425
  br label %428

428:                                              ; preds = %428, %409
  %429 = phi i64 [ 0, %409 ], [ %442, %428 ]
  %430 = phi i64 [ %385, %409 ], [ %443, %428 ]
  %431 = add i64 %429, %396
  %432 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 %431
  %433 = bitcast i32* %432 to <4 x i32>*
  store <4 x i32> %417, <4 x i32>* %433, align 4, !alias.scope !11, !noalias !8
  %434 = getelementptr inbounds i32, i32* %432, i64 4
  %435 = bitcast i32* %434 to <4 x i32>*
  store <4 x i32> %418, <4 x i32>* %435, align 4, !alias.scope !11, !noalias !8
  %436 = or i64 %429, 8
  %437 = add i64 %436, %396
  %438 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 %437
  %439 = bitcast i32* %438 to <4 x i32>*
  store <4 x i32> %426, <4 x i32>* %439, align 4, !alias.scope !11, !noalias !8
  %440 = getelementptr inbounds i32, i32* %438, i64 4
  %441 = bitcast i32* %440 to <4 x i32>*
  store <4 x i32> %427, <4 x i32>* %441, align 4, !alias.scope !11, !noalias !8
  %442 = add i64 %429, 16
  %443 = add i64 %430, -2
  %444 = icmp eq i64 %443, 0
  br i1 %444, label %445, label %428, !llvm.loop !13

445:                                              ; preds = %428, %407
  %446 = phi i64 [ 0, %407 ], [ %442, %428 ]
  br i1 %386, label %462, label %447

447:                                              ; preds = %445
  %448 = add i64 %446, %396
  %449 = load i8, i8* %395, align 1, !alias.scope !8
  %450 = insertelement <4 x i8> undef, i8 %449, i32 0
  %451 = shufflevector <4 x i8> %450, <4 x i8> undef, <4 x i32> zeroinitializer
  %452 = insertelement <4 x i8> undef, i8 %449, i32 0
  %453 = shufflevector <4 x i8> %452, <4 x i8> undef, <4 x i32> zeroinitializer
  %454 = zext <4 x i8> %451 to <4 x i32>
  %455 = zext <4 x i8> %453 to <4 x i32>
  %456 = or <4 x i32> %380, %454
  %457 = or <4 x i32> %382, %455
  %458 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 %448
  %459 = bitcast i32* %458 to <4 x i32>*
  store <4 x i32> %456, <4 x i32>* %459, align 4, !alias.scope !11, !noalias !8
  %460 = getelementptr inbounds i32, i32* %458, i64 4
  %461 = bitcast i32* %460 to <4 x i32>*
  store <4 x i32> %457, <4 x i32>* %461, align 4, !alias.scope !11, !noalias !8
  br label %462

462:                                              ; preds = %445, %447
  br i1 %387, label %476, label %463

463:                                              ; preds = %462, %397, %388
  %464 = phi i64 [ %396, %397 ], [ %396, %388 ], [ %408, %462 ]
  %465 = phi i32 [ %356, %397 ], [ %356, %388 ], [ %378, %462 ]
  br label %466

466:                                              ; preds = %463, %466
  %467 = phi i64 [ %473, %466 ], [ %464, %463 ]
  %468 = phi i32 [ %474, %466 ], [ %465, %463 ]
  %469 = load i8, i8* %395, align 1
  %470 = zext i8 %469 to i32
  %471 = or i32 %359, %470
  %472 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %54, i64 0, i32 3, i64 %467
  store i32 %471, i32* %472, align 4
  %473 = add nsw i64 %467, 1
  %474 = add nsw i32 %468, -1
  %475 = icmp sgt i32 %474, 0
  br i1 %475, label %466, label %476, !llvm.loop !14

476:                                              ; preds = %466, %462
  %477 = load i8, i8* %350, align 1
  %478 = add nuw nsw i32 %391, 1
  %479 = add nsw i64 %390, 1
  %480 = zext i8 %477 to i32
  %481 = icmp ult i32 %391, %480
  %482 = add i64 %389, 1
  br i1 %481, label %388, label %483

483:                                              ; preds = %476
  %484 = trunc i64 %479 to i32
  br label %485

485:                                              ; preds = %483, %347
  %486 = phi i32 [ %349, %347 ], [ %484, %483 ]
  %487 = add nuw nsw i64 %348, 1
  %488 = icmp eq i64 %487, 9
  br i1 %488, label %489, label %347

489:                                              ; preds = %485
  %490 = icmp sgt i32 %135, 0
  %491 = and i1 %21, %490
  br i1 %491, label %492, label %508

492:                                              ; preds = %489
  %493 = zext i32 %135 to i64
  br label %494

494:                                              ; preds = %505, %492
  %495 = phi i64 [ 0, %492 ], [ %506, %505 ]
  %496 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %26, i64 0, i32 1, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = icmp ugt i8 %497, 15
  br i1 %498, label %499, label %505

499:                                              ; preds = %494
  %500 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %501 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %500, i64 0, i32 5
  store i32 8, i32* %501, align 8
  %502 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %503 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %502, i64 0, i32 0
  %504 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %503, align 8
  tail call void %504(%struct.jpeg_common_struct* %53) #3
  br label %505

505:                                              ; preds = %494, %499
  %506 = add nuw nsw i64 %495, 1
  %507 = icmp eq i64 %506, %493
  br i1 %507, label %508, label %494

508:                                              ; preds = %505, %489
  call void @llvm.lifetime.end.p0i8(i64 1028, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 257, i8* nonnull %7) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nocapture, i64, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 4
  %10 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %10, i64 0, i32 76
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %76

14:                                               ; preds = %4
  %15 = icmp slt i32 %2, 57
  br i1 %15, label %16, label %102

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %10, i64 0, i32 6
  br label %18

18:                                               ; preds = %16, %68
  %19 = phi i64 [ %8, %16 ], [ %70, %68 ]
  %20 = phi i8* [ %6, %16 ], [ %69, %68 ]
  %21 = phi i32 [ %2, %16 ], [ %74, %68 ]
  %22 = phi i64 [ %1, %16 ], [ %73, %68 ]
  %23 = icmp eq i64 %19, 0
  br i1 %23, label %24, label %36

24:                                               ; preds = %18
  %25 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %17, align 8
  %26 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %25, i64 0, i32 3
  %27 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %26, align 8
  %28 = tail call i32 %27(%struct.jpeg_decompress_struct* %10) #3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %109, label %30

30:                                               ; preds = %24
  %31 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %17, align 8
  %32 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %31, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %31, i64 0, i32 1
  %35 = load i64, i64* %34, align 8
  br label %36

36:                                               ; preds = %30, %18
  %37 = phi i8* [ %33, %30 ], [ %20, %18 ]
  %38 = phi i64 [ %35, %30 ], [ %19, %18 ]
  %39 = add i64 %38, -1
  %40 = getelementptr inbounds i8, i8* %37, i64 1
  %41 = load i8, i8* %37, align 1
  %42 = zext i8 %41 to i64
  %43 = icmp eq i8 %41, -1
  br i1 %43, label %44, label %68

44:                                               ; preds = %36, %60
  %45 = phi i8* [ %64, %60 ], [ %40, %36 ]
  %46 = phi i64 [ %63, %60 ], [ %39, %36 ]
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %60

48:                                               ; preds = %44
  %49 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %17, align 8
  %50 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %49, i64 0, i32 3
  %51 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %50, align 8
  %52 = tail call i32 %51(%struct.jpeg_decompress_struct* %10) #3
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %109, label %54

54:                                               ; preds = %48
  %55 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %17, align 8
  %56 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %55, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %55, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  br label %60

60:                                               ; preds = %54, %44
  %61 = phi i8* [ %57, %54 ], [ %45, %44 ]
  %62 = phi i64 [ %59, %54 ], [ %46, %44 ]
  %63 = add i64 %62, -1
  %64 = getelementptr inbounds i8, i8* %61, i64 1
  %65 = load i8, i8* %61, align 1
  switch i8 %65, label %66 [
    i8 -1, label %44
    i8 0, label %68
  ]

66:                                               ; preds = %60
  %67 = zext i8 %65 to i32
  store i32 %67, i32* %11, align 4
  br label %76

68:                                               ; preds = %60, %36
  %69 = phi i8* [ %40, %36 ], [ %64, %60 ]
  %70 = phi i64 [ %39, %36 ], [ %63, %60 ]
  %71 = phi i64 [ %42, %36 ], [ 255, %60 ]
  %72 = shl i64 %22, 8
  %73 = or i64 %71, %72
  %74 = add nsw i32 %21, 8
  %75 = icmp slt i32 %74, 57
  br i1 %75, label %18, label %102

76:                                               ; preds = %66, %4
  %77 = phi i64 [ %1, %4 ], [ %22, %66 ]
  %78 = phi i32 [ %2, %4 ], [ %21, %66 ]
  %79 = phi i8* [ %6, %4 ], [ %64, %66 ]
  %80 = phi i64 [ %8, %4 ], [ %63, %66 ]
  %81 = icmp slt i32 %78, %3
  br i1 %81, label %82, label %102

82:                                               ; preds = %76
  %83 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %10, i64 0, i32 83
  %84 = load %struct.jpeg_entropy_decoder*, %struct.jpeg_entropy_decoder** %83, align 8
  %85 = getelementptr inbounds %struct.jpeg_entropy_decoder, %struct.jpeg_entropy_decoder* %84, i64 0, i32 2
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %98

88:                                               ; preds = %82
  %89 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %10, i64 0, i32 0
  %90 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %89, align 8
  %91 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %90, i64 0, i32 5
  store i32 117, i32* %91, align 8
  %92 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %89, align 8
  %93 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %92, i64 0, i32 1
  %94 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %93, align 8
  %95 = bitcast %struct.jpeg_decompress_struct* %10 to %struct.jpeg_common_struct*
  tail call void %94(%struct.jpeg_common_struct* %95, i32 -1) #3
  %96 = load %struct.jpeg_entropy_decoder*, %struct.jpeg_entropy_decoder** %83, align 8
  %97 = getelementptr inbounds %struct.jpeg_entropy_decoder, %struct.jpeg_entropy_decoder* %96, i64 0, i32 2
  store i32 1, i32* %97, align 8
  br label %98

98:                                               ; preds = %82, %88
  %99 = sub nsw i32 57, %78
  %100 = zext i32 %99 to i64
  %101 = shl i64 %77, %100
  br label %102

102:                                              ; preds = %68, %14, %76, %98
  %103 = phi i64 [ %101, %98 ], [ %77, %76 ], [ %1, %14 ], [ %73, %68 ]
  %104 = phi i32 [ 57, %98 ], [ %78, %76 ], [ %2, %14 ], [ %74, %68 ]
  %105 = phi i8* [ %79, %98 ], [ %79, %76 ], [ %6, %14 ], [ %69, %68 ]
  %106 = phi i64 [ %80, %98 ], [ %80, %76 ], [ %8, %14 ], [ %70, %68 ]
  store i8* %105, i8** %5, align 8
  store i64 %106, i64* %7, align 8
  %107 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 2
  store i64 %103, i64* %107, align 8
  %108 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 3
  store i32 %104, i32* %108, align 8
  br label %109

109:                                              ; preds = %24, %48, %102
  %110 = phi i32 [ 1, %102 ], [ 0, %48 ], [ 0, %24 ]
  ret i32 %110
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @jpeg_huff_decode(%struct.bitread_working_state* nocapture, i64, i32, %struct.d_derived_tbl* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = icmp slt i32 %2, %4
  br i1 %6, label %7, label %15

7:                                                ; preds = %5
  %8 = tail call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* %0, i64 %1, i32 %2, i32 %4)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %92, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  br label %15

15:                                               ; preds = %10, %5
  %16 = phi i32 [ %14, %10 ], [ %2, %5 ]
  %17 = phi i64 [ %12, %10 ], [ %1, %5 ]
  %18 = sub nsw i32 %16, %4
  %19 = zext i32 %18 to i64
  %20 = lshr i64 %17, %19
  %21 = trunc i64 %20 to i32
  %22 = shl nsw i32 -1, %4
  %23 = xor i32 %22, -1
  %24 = and i32 %21, %23
  %25 = sext i32 %24 to i64
  %26 = sext i32 %4 to i64
  %27 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %3, i64 0, i32 0, i64 %26
  %28 = load i64, i64* %27, align 8
  %29 = icmp slt i64 %28, %25
  br i1 %29, label %30, label %60

30:                                               ; preds = %15
  %31 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 2
  %32 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 3
  br label %33

33:                                               ; preds = %30, %46
  %34 = phi i64 [ %26, %30 ], [ %54, %46 ]
  %35 = phi i64 [ %25, %30 ], [ %53, %46 ]
  %36 = phi i64 [ %17, %30 ], [ %48, %46 ]
  %37 = phi i32 [ %18, %30 ], [ %49, %46 ]
  %38 = shl i64 %35, 1
  %39 = icmp slt i32 %37, 1
  br i1 %39, label %40, label %46

40:                                               ; preds = %33
  %41 = tail call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* %0, i64 %36, i32 %37, i32 1)
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %92, label %43

43:                                               ; preds = %40
  %44 = load i64, i64* %31, align 8
  %45 = load i32, i32* %32, align 8
  br label %46

46:                                               ; preds = %43, %33
  %47 = phi i32 [ %45, %43 ], [ %37, %33 ]
  %48 = phi i64 [ %44, %43 ], [ %36, %33 ]
  %49 = add nsw i32 %47, -1
  %50 = zext i32 %49 to i64
  %51 = lshr i64 %48, %50
  %52 = and i64 %51, 1
  %53 = or i64 %52, %38
  %54 = add i64 %34, 1
  %55 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %3, i64 0, i32 0, i64 %54
  %56 = load i64, i64* %55, align 8
  %57 = icmp sgt i64 %53, %56
  br i1 %57, label %33, label %58

58:                                               ; preds = %46
  %59 = trunc i64 %54 to i32
  br label %60

60:                                               ; preds = %58, %15
  %61 = phi i32 [ %18, %15 ], [ %49, %58 ]
  %62 = phi i64 [ %17, %15 ], [ %48, %58 ]
  %63 = phi i32 [ %4, %15 ], [ %59, %58 ]
  %64 = phi i64 [ %25, %15 ], [ %53, %58 ]
  %65 = phi i64 [ %26, %15 ], [ %54, %58 ]
  %66 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 2
  store i64 %62, i64* %66, align 8
  %67 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 3
  store i32 %61, i32* %67, align 8
  %68 = icmp sgt i32 %63, 16
  br i1 %68, label %69, label %81

69:                                               ; preds = %60
  %70 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %0, i64 0, i32 4
  %71 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %70, align 8
  %72 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %71, i64 0, i32 0
  %73 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %72, align 8
  %74 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %73, i64 0, i32 5
  store i32 118, i32* %74, align 8
  %75 = load %struct.jpeg_decompress_struct*, %struct.jpeg_decompress_struct** %70, align 8
  %76 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %75, i64 0, i32 0
  %77 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %76, align 8
  %78 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %77, i64 0, i32 1
  %79 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %78, align 8
  %80 = bitcast %struct.jpeg_decompress_struct* %75 to %struct.jpeg_common_struct*
  tail call void %79(%struct.jpeg_common_struct* %80, i32 -1) #3
  br label %92

81:                                               ; preds = %60
  %82 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %3, i64 0, i32 2
  %83 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %82, align 8
  %84 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %3, i64 0, i32 1, i64 %65
  %85 = load i64, i64* %84, align 8
  %86 = add nsw i64 %85, %64
  %87 = shl i64 %86, 32
  %88 = ashr exact i64 %87, 32
  %89 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %83, i64 0, i32 1, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  br label %92

92:                                               ; preds = %40, %7, %81, %69
  %93 = phi i32 [ 0, %69 ], [ %91, %81 ], [ -1, %7 ], [ -1, %40 ]
  ret i32 %93
}

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_huff_decoder(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 41, i64 0
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 42, i64 0
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 25
  %9 = bitcast i32* %8 to %struct.JHUFF_TBL**
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  %11 = bitcast i8*** %10 to %struct.JHUFF_TBL**
  %12 = select i1 %5, %struct.JHUFF_TBL** %9, %struct.JHUFF_TBL** %6
  %13 = select i1 %5, %struct.JHUFF_TBL** %11, %struct.JHUFF_TBL** %7
  tail call fastcc void @add_huff_table(%struct.jpeg_common_struct* %2, %struct.JHUFF_TBL** %12, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @std_huff_tables.bits_dc_luminance, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @std_huff_tables.val_dc_luminance, i64 0, i64 0)) #3
  tail call fastcc void @add_huff_table(%struct.jpeg_common_struct* %2, %struct.JHUFF_TBL** %13, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @std_huff_tables.bits_ac_luminance, i64 0, i64 0), i8* getelementptr inbounds ([162 x i8], [162 x i8]* @std_huff_tables.val_ac_luminance, i64 0, i64 0)) #3
  %14 = getelementptr inbounds %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %12, i64 1
  tail call fastcc void @add_huff_table(%struct.jpeg_common_struct* %2, %struct.JHUFF_TBL** %14, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @std_huff_tables.bits_dc_chrominance, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @std_huff_tables.val_dc_chrominance, i64 0, i64 0)) #3
  %15 = getelementptr inbounds %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %13, i64 1
  tail call fastcc void @add_huff_table(%struct.jpeg_common_struct* %2, %struct.JHUFF_TBL** %15, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @std_huff_tables.bits_ac_chrominance, i64 0, i64 0), i8* getelementptr inbounds ([162 x i8], [162 x i8]* @std_huff_tables.val_ac_chrominance, i64 0, i64 0)) #3
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %17 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8
  %18 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %17, i64 0, i32 0
  %19 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %18, align 8
  %20 = tail call i8* %19(%struct.jpeg_common_struct* %2, i32 1, i64 368) #3
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %22 = bitcast %struct.jpeg_entropy_decoder** %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = bitcast i8* %20 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @start_pass_huff_decoder, void (%struct.jpeg_decompress_struct*)** %23, align 8
  %24 = getelementptr inbounds i8, i8* %20, i64 8
  %25 = bitcast i8* %24 to i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)**
  store i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)* @decode_mcu, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)** %25, align 8
  %26 = getelementptr inbounds i8, i8* %20, i64 64
  %27 = getelementptr inbounds i8, i8* %20, i64 104
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 40, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_huff_decoder(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %3 = bitcast %struct.jpeg_entropy_decoder** %2 to %struct.huff_entropy_decoder**
  %4 = load %struct.huff_entropy_decoder*, %struct.huff_entropy_decoder** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 72
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %20

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 73
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 63
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 74
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 75
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %16, %12, %8, %1
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %22 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %22, i64 0, i32 5
  store i32 122, i32* %23, align 8
  %24 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %21, align 8
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 1
  %26 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %25, align 8
  %27 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %26(%struct.jpeg_common_struct* %27, i32 -1) #3
  br label %28

28:                                               ; preds = %16, %20
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %30 = load i32, i32* %29, align 8
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %36, %28
  %33 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 70
  %34 = load i32, i32* %33, align 8
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %53, label %93

36:                                               ; preds = %28, %36
  %37 = phi i64 [ %49, %36 ], [ 0, %28 ]
  %38 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %37
  %39 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %38, align 8
  %40 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 5
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %39, i64 0, i32 6
  %43 = load i32, i32* %42, align 8
  %44 = sext i32 %41 to i64
  %45 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 4, i64 %44
  tail call void @jpeg_make_d_derived_tbl(%struct.jpeg_decompress_struct* %0, i32 1, i32 %41, %struct.d_derived_tbl** %45)
  %46 = sext i32 %43 to i64
  %47 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 5, i64 %46
  tail call void @jpeg_make_d_derived_tbl(%struct.jpeg_decompress_struct* %0, i32 0, i32 %43, %struct.d_derived_tbl** %47)
  %48 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 2, i32 0, i64 %37
  store i32 0, i32* %48, align 4
  %49 = add nuw nsw i64 %37, 1
  %50 = load i32, i32* %29, align 8
  %51 = sext i32 %50 to i64
  %52 = icmp slt i64 %49, %51
  br i1 %52, label %36, label %32

53:                                               ; preds = %32, %86
  %54 = phi i64 [ %89, %86 ], [ 0, %32 ]
  %55 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %57
  %59 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %58, align 8
  %60 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %59, i64 0, i32 5
  %61 = load i32, i32* %60, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 4, i64 %62
  %64 = bitcast %struct.d_derived_tbl** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 6, i64 %54
  %67 = bitcast %struct.d_derived_tbl** %66 to i64*
  store i64 %65, i64* %67, align 8
  %68 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %59, i64 0, i32 6
  %69 = load i32, i32* %68, align 8
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 5, i64 %70
  %72 = bitcast %struct.d_derived_tbl** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 7, i64 %54
  %75 = bitcast %struct.d_derived_tbl** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %59, i64 0, i32 12
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 0
  %79 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 8, i64 %54
  br i1 %78, label %85, label %80

80:                                               ; preds = %53
  store i32 1, i32* %79, align 4
  %81 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %59, i64 0, i32 9
  %82 = load i32, i32* %81, align 4
  %83 = icmp sgt i32 %82, 1
  %84 = zext i1 %83 to i32
  br label %86

85:                                               ; preds = %53
  store i32 0, i32* %79, align 4
  br label %86

86:                                               ; preds = %80, %85
  %87 = phi i32 [ %84, %80 ], [ 0, %85 ]
  %88 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 9, i64 %54
  store i32 %87, i32* %88, align 4
  %89 = add nuw nsw i64 %54, 1
  %90 = load i32, i32* %33, align 8
  %91 = sext i32 %90 to i64
  %92 = icmp slt i64 %89, %91
  br i1 %92, label %53, label %93

93:                                               ; preds = %86, %32
  %94 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 1, i32 1
  store i32 0, i32* %94, align 8
  %95 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 1, i32 0
  store i64 0, i64* %95, align 8
  %96 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 0, i32 2
  store i32 0, i32* %96, align 8
  %97 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 50
  %98 = load i32, i32* %97, align 8
  %99 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %4, i64 0, i32 3
  store i32 %98, i32* %99, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decode_mcu(%struct.jpeg_decompress_struct*, [64 x i16]** readonly) #0 {
  %3 = alloca %struct.bitread_working_state, align 8
  %4 = alloca %struct.savable_state, align 4
  %5 = alloca %struct.savable_state, align 4
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %7 = bitcast %struct.jpeg_entropy_decoder** %6 to %struct.huff_entropy_decoder**
  %8 = load %struct.huff_entropy_decoder*, %struct.huff_entropy_decoder** %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 50
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %48, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %8, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %48

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %8, i64 0, i32 1, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = sdiv i32 %18, 8
  %20 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 82
  %21 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %20, align 8
  %22 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %21, i64 0, i32 6
  %23 = load i32, i32* %22, align 4
  %24 = add i32 %23, %19
  store i32 %24, i32* %22, align 4
  store i32 0, i32* %17, align 8
  %25 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %20, align 8
  %26 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %25, i64 0, i32 2
  %27 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %26, align 8
  %28 = tail call i32 %27(%struct.jpeg_decompress_struct* %0) #3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %1279, label %30

30:                                               ; preds = %16
  %31 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %41

34:                                               ; preds = %30, %34
  %35 = phi i64 [ %37, %34 ], [ 0, %30 ]
  %36 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %8, i64 0, i32 2, i32 0, i64 %35
  store i32 0, i32* %36, align 4
  %37 = add nuw nsw i64 %35, 1
  %38 = load i32, i32* %31, align 8
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %37, %39
  br i1 %40, label %34, label %41

41:                                               ; preds = %34, %30
  %42 = load i32, i32* %9, align 8
  store i32 %42, i32* %13, align 8
  %43 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 76
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %8, i64 0, i32 0, i32 2
  store i32 0, i32* %47, align 8
  br label %48

48:                                               ; preds = %41, %46, %12, %2
  %49 = phi i32 [ 1, %2 ], [ 0, %12 ], [ 0, %46 ], [ 0, %41 ]
  %50 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 6
  %51 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %50, align 8
  %52 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %51, i64 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 70
  %55 = load i32, i32* %54, align 8
  %56 = sext i32 %55 to i64
  %57 = shl nsw i64 %56, 9
  %58 = icmp ult i64 %53, %57
  %59 = bitcast %struct.jpeg_source_mgr* %51 to i64*
  br i1 %58, label %64, label %60

60:                                               ; preds = %48
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 76
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %65, label %64

64:                                               ; preds = %60, %48
  br label %65

65:                                               ; preds = %60, %64
  %66 = phi i32 [ 0, %64 ], [ %49, %60 ]
  %67 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %8, i64 0, i32 0, i32 2
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %1272

70:                                               ; preds = %65
  %71 = icmp eq i32 %66, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %70
  %73 = bitcast %struct.jpeg_source_mgr** %50 to i64**
  br label %982

74:                                               ; preds = %70
  %75 = load %struct.huff_entropy_decoder*, %struct.huff_entropy_decoder** %7, align 8
  %76 = bitcast %struct.savable_state* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %76, i8 -86, i64 16, i1 false) #3
  %77 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %51, i64 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %75, i64 0, i32 1, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %75, i64 0, i32 1, i32 1
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %75, i64 0, i32 2
  %84 = bitcast %struct.savable_state* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %76, i8* align 8 %84, i64 16, i1 false) #3
  %85 = icmp sgt i32 %55, 0
  br i1 %85, label %86, label %962

86:                                               ; preds = %74
  %87 = icmp eq [64 x i16]** %1, null
  %88 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 76
  br label %89

89:                                               ; preds = %954, %86
  %90 = phi i64 [ 0, %86 ], [ %958, %954 ]
  %91 = phi i64 [ %80, %86 ], [ %957, %954 ]
  %92 = phi i32 [ %82, %86 ], [ %956, %954 ]
  %93 = phi i8* [ %78, %86 ], [ %955, %954 ]
  br i1 %87, label %97, label %94

94:                                               ; preds = %89
  %95 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %90
  %96 = load [64 x i16]*, [64 x i16]** %95, align 8
  br label %97

97:                                               ; preds = %94, %89
  %98 = phi [64 x i16]* [ %96, %94 ], [ null, %89 ]
  %99 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %75, i64 0, i32 6, i64 %90
  %100 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %99, align 8
  %101 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %75, i64 0, i32 7, i64 %90
  %102 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %101, align 8
  %103 = icmp slt i32 %92, 17
  br i1 %103, label %104, label %193

104:                                              ; preds = %97
  %105 = getelementptr inbounds i8, i8* %93, i64 1
  %106 = load i8, i8* %93, align 1
  %107 = load i8, i8* %105, align 1
  %108 = zext i8 %107 to i32
  %109 = shl i64 %91, 8
  %110 = zext i8 %106 to i64
  %111 = or i64 %109, %110
  %112 = icmp eq i8 %106, -1
  br i1 %112, label %113, label %117

113:                                              ; preds = %104
  %114 = getelementptr inbounds i8, i8* %93, i64 2
  %115 = icmp eq i8 %107, 0
  br i1 %115, label %117, label %116

116:                                              ; preds = %113
  store i32 %108, i32* %88, align 4
  br label %117

117:                                              ; preds = %116, %113, %104
  %118 = phi i8* [ %93, %116 ], [ %114, %113 ], [ %105, %104 ]
  %119 = phi i64 [ %109, %116 ], [ %111, %113 ], [ %111, %104 ]
  %120 = getelementptr inbounds i8, i8* %118, i64 1
  %121 = load i8, i8* %118, align 1
  %122 = load i8, i8* %120, align 1
  %123 = zext i8 %122 to i32
  %124 = shl i64 %119, 8
  %125 = zext i8 %121 to i64
  %126 = or i64 %124, %125
  %127 = icmp eq i8 %121, -1
  br i1 %127, label %128, label %132

128:                                              ; preds = %117
  %129 = getelementptr inbounds i8, i8* %118, i64 2
  %130 = icmp eq i8 %122, 0
  br i1 %130, label %132, label %131

131:                                              ; preds = %128
  store i32 %123, i32* %88, align 4
  br label %132

132:                                              ; preds = %131, %128, %117
  %133 = phi i8* [ %118, %131 ], [ %129, %128 ], [ %120, %117 ]
  %134 = phi i64 [ %124, %131 ], [ %126, %128 ], [ %126, %117 ]
  %135 = getelementptr inbounds i8, i8* %133, i64 1
  %136 = load i8, i8* %133, align 1
  %137 = load i8, i8* %135, align 1
  %138 = zext i8 %137 to i32
  %139 = shl i64 %134, 8
  %140 = zext i8 %136 to i64
  %141 = or i64 %139, %140
  %142 = icmp eq i8 %136, -1
  br i1 %142, label %143, label %147

143:                                              ; preds = %132
  %144 = getelementptr inbounds i8, i8* %133, i64 2
  %145 = icmp eq i8 %137, 0
  br i1 %145, label %147, label %146

146:                                              ; preds = %143
  store i32 %138, i32* %88, align 4
  br label %147

147:                                              ; preds = %146, %143, %132
  %148 = phi i8* [ %133, %146 ], [ %144, %143 ], [ %135, %132 ]
  %149 = phi i64 [ %139, %146 ], [ %141, %143 ], [ %141, %132 ]
  %150 = getelementptr inbounds i8, i8* %148, i64 1
  %151 = load i8, i8* %148, align 1
  %152 = load i8, i8* %150, align 1
  %153 = zext i8 %152 to i32
  %154 = shl i64 %149, 8
  %155 = zext i8 %151 to i64
  %156 = or i64 %154, %155
  %157 = icmp eq i8 %151, -1
  br i1 %157, label %158, label %162

158:                                              ; preds = %147
  %159 = getelementptr inbounds i8, i8* %148, i64 2
  %160 = icmp eq i8 %152, 0
  br i1 %160, label %162, label %161

161:                                              ; preds = %158
  store i32 %153, i32* %88, align 4
  br label %162

162:                                              ; preds = %161, %158, %147
  %163 = phi i8* [ %148, %161 ], [ %159, %158 ], [ %150, %147 ]
  %164 = phi i64 [ %154, %161 ], [ %156, %158 ], [ %156, %147 ]
  %165 = getelementptr inbounds i8, i8* %163, i64 1
  %166 = load i8, i8* %163, align 1
  %167 = load i8, i8* %165, align 1
  %168 = zext i8 %167 to i32
  %169 = shl i64 %164, 8
  %170 = zext i8 %166 to i64
  %171 = or i64 %169, %170
  %172 = icmp eq i8 %166, -1
  br i1 %172, label %173, label %177

173:                                              ; preds = %162
  %174 = getelementptr inbounds i8, i8* %163, i64 2
  %175 = icmp eq i8 %167, 0
  br i1 %175, label %177, label %176

176:                                              ; preds = %173
  store i32 %168, i32* %88, align 4
  br label %177

177:                                              ; preds = %176, %173, %162
  %178 = phi i8* [ %163, %176 ], [ %174, %173 ], [ %165, %162 ]
  %179 = phi i64 [ %169, %176 ], [ %171, %173 ], [ %171, %162 ]
  %180 = getelementptr inbounds i8, i8* %178, i64 1
  %181 = load i8, i8* %178, align 1
  %182 = load i8, i8* %180, align 1
  %183 = zext i8 %182 to i32
  %184 = shl i64 %179, 8
  %185 = zext i8 %181 to i64
  %186 = or i64 %184, %185
  %187 = add nsw i32 %92, 48
  %188 = icmp eq i8 %181, -1
  br i1 %188, label %189, label %193

189:                                              ; preds = %177
  %190 = getelementptr inbounds i8, i8* %178, i64 2
  %191 = icmp eq i8 %182, 0
  br i1 %191, label %193, label %192

192:                                              ; preds = %189
  store i32 %183, i32* %88, align 4
  br label %193

193:                                              ; preds = %192, %189, %177, %97
  %194 = phi i8* [ %93, %97 ], [ %178, %192 ], [ %190, %189 ], [ %180, %177 ]
  %195 = phi i32 [ %92, %97 ], [ %187, %192 ], [ %187, %189 ], [ %187, %177 ]
  %196 = phi i64 [ %91, %97 ], [ %184, %192 ], [ %186, %189 ], [ %186, %177 ]
  %197 = add nsw i32 %195, -8
  %198 = zext i32 %197 to i64
  %199 = lshr i64 %196, %198
  %200 = and i64 %199, 255
  %201 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %100, i64 0, i32 3, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = ashr i32 %202, 8
  %204 = sub nsw i32 %195, %203
  %205 = and i32 %202, 255
  %206 = icmp sgt i32 %202, 2303
  br i1 %206, label %207, label %255

207:                                              ; preds = %193
  %208 = zext i32 %204 to i64
  %209 = lshr i64 %196, %208
  %210 = shl nsw i32 -1, %203
  %211 = xor i32 %210, -1
  %212 = trunc i64 %209 to i32
  %213 = and i32 %212, %211
  %214 = sext i32 %213 to i64
  %215 = sext i32 %203 to i64
  %216 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %100, i64 0, i32 0, i64 %215
  %217 = load i64, i64* %216, align 8
  %218 = icmp slt i64 %217, %214
  br i1 %218, label %219, label %237

219:                                              ; preds = %207, %219
  %220 = phi i64 [ %230, %219 ], [ %215, %207 ]
  %221 = phi i32 [ %224, %219 ], [ %204, %207 ]
  %222 = phi i32 [ %229, %219 ], [ %213, %207 ]
  %223 = shl i32 %222, 1
  %224 = add nsw i32 %221, -1
  %225 = zext i32 %224 to i64
  %226 = lshr i64 %196, %225
  %227 = trunc i64 %226 to i32
  %228 = and i32 %227, 1
  %229 = or i32 %228, %223
  %230 = add nsw i64 %220, 1
  %231 = sext i32 %229 to i64
  %232 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %100, i64 0, i32 0, i64 %230
  %233 = load i64, i64* %232, align 8
  %234 = icmp slt i64 %233, %231
  br i1 %234, label %219, label %235

235:                                              ; preds = %219
  %236 = trunc i64 %230 to i32
  br label %237

237:                                              ; preds = %235, %207
  %238 = phi i32 [ %203, %207 ], [ %236, %235 ]
  %239 = phi i32 [ %213, %207 ], [ %229, %235 ]
  %240 = phi i32 [ %204, %207 ], [ %224, %235 ]
  %241 = phi i64 [ %215, %207 ], [ %230, %235 ]
  %242 = icmp sgt i32 %238, 16
  br i1 %242, label %368, label %243

243:                                              ; preds = %237
  %244 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %100, i64 0, i32 2
  %245 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %244, align 8
  %246 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %100, i64 0, i32 1, i64 %241
  %247 = load i64, i64* %246, align 8
  %248 = trunc i64 %247 to i32
  %249 = add i32 %239, %248
  %250 = and i32 %249, 255
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %245, i64 0, i32 1, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i32
  br label %255

255:                                              ; preds = %243, %193
  %256 = phi i32 [ %254, %243 ], [ %205, %193 ]
  %257 = phi i32 [ %240, %243 ], [ %204, %193 ]
  %258 = icmp eq i32 %256, 0
  br i1 %258, label %368, label %259

259:                                              ; preds = %255
  %260 = icmp slt i32 %257, 17
  br i1 %260, label %261, label %350

261:                                              ; preds = %259
  %262 = getelementptr inbounds i8, i8* %194, i64 1
  %263 = load i8, i8* %194, align 1
  %264 = load i8, i8* %262, align 1
  %265 = zext i8 %264 to i32
  %266 = shl i64 %196, 8
  %267 = zext i8 %263 to i64
  %268 = or i64 %266, %267
  %269 = icmp eq i8 %263, -1
  br i1 %269, label %270, label %274

270:                                              ; preds = %261
  %271 = getelementptr inbounds i8, i8* %194, i64 2
  %272 = icmp eq i8 %264, 0
  br i1 %272, label %274, label %273

273:                                              ; preds = %270
  store i32 %265, i32* %88, align 4
  br label %274

274:                                              ; preds = %273, %270, %261
  %275 = phi i8* [ %194, %273 ], [ %271, %270 ], [ %262, %261 ]
  %276 = phi i64 [ %266, %273 ], [ %268, %270 ], [ %268, %261 ]
  %277 = getelementptr inbounds i8, i8* %275, i64 1
  %278 = load i8, i8* %275, align 1
  %279 = load i8, i8* %277, align 1
  %280 = zext i8 %279 to i32
  %281 = shl i64 %276, 8
  %282 = zext i8 %278 to i64
  %283 = or i64 %281, %282
  %284 = icmp eq i8 %278, -1
  br i1 %284, label %285, label %289

285:                                              ; preds = %274
  %286 = getelementptr inbounds i8, i8* %275, i64 2
  %287 = icmp eq i8 %279, 0
  br i1 %287, label %289, label %288

288:                                              ; preds = %285
  store i32 %280, i32* %88, align 4
  br label %289

289:                                              ; preds = %288, %285, %274
  %290 = phi i8* [ %275, %288 ], [ %286, %285 ], [ %277, %274 ]
  %291 = phi i64 [ %281, %288 ], [ %283, %285 ], [ %283, %274 ]
  %292 = getelementptr inbounds i8, i8* %290, i64 1
  %293 = load i8, i8* %290, align 1
  %294 = load i8, i8* %292, align 1
  %295 = zext i8 %294 to i32
  %296 = shl i64 %291, 8
  %297 = zext i8 %293 to i64
  %298 = or i64 %296, %297
  %299 = icmp eq i8 %293, -1
  br i1 %299, label %300, label %304

300:                                              ; preds = %289
  %301 = getelementptr inbounds i8, i8* %290, i64 2
  %302 = icmp eq i8 %294, 0
  br i1 %302, label %304, label %303

303:                                              ; preds = %300
  store i32 %295, i32* %88, align 4
  br label %304

304:                                              ; preds = %303, %300, %289
  %305 = phi i8* [ %290, %303 ], [ %301, %300 ], [ %292, %289 ]
  %306 = phi i64 [ %296, %303 ], [ %298, %300 ], [ %298, %289 ]
  %307 = getelementptr inbounds i8, i8* %305, i64 1
  %308 = load i8, i8* %305, align 1
  %309 = load i8, i8* %307, align 1
  %310 = zext i8 %309 to i32
  %311 = shl i64 %306, 8
  %312 = zext i8 %308 to i64
  %313 = or i64 %311, %312
  %314 = icmp eq i8 %308, -1
  br i1 %314, label %315, label %319

315:                                              ; preds = %304
  %316 = getelementptr inbounds i8, i8* %305, i64 2
  %317 = icmp eq i8 %309, 0
  br i1 %317, label %319, label %318

318:                                              ; preds = %315
  store i32 %310, i32* %88, align 4
  br label %319

319:                                              ; preds = %318, %315, %304
  %320 = phi i8* [ %305, %318 ], [ %316, %315 ], [ %307, %304 ]
  %321 = phi i64 [ %311, %318 ], [ %313, %315 ], [ %313, %304 ]
  %322 = getelementptr inbounds i8, i8* %320, i64 1
  %323 = load i8, i8* %320, align 1
  %324 = load i8, i8* %322, align 1
  %325 = zext i8 %324 to i32
  %326 = shl i64 %321, 8
  %327 = zext i8 %323 to i64
  %328 = or i64 %326, %327
  %329 = icmp eq i8 %323, -1
  br i1 %329, label %330, label %334

330:                                              ; preds = %319
  %331 = getelementptr inbounds i8, i8* %320, i64 2
  %332 = icmp eq i8 %324, 0
  br i1 %332, label %334, label %333

333:                                              ; preds = %330
  store i32 %325, i32* %88, align 4
  br label %334

334:                                              ; preds = %333, %330, %319
  %335 = phi i8* [ %320, %333 ], [ %331, %330 ], [ %322, %319 ]
  %336 = phi i64 [ %326, %333 ], [ %328, %330 ], [ %328, %319 ]
  %337 = getelementptr inbounds i8, i8* %335, i64 1
  %338 = load i8, i8* %335, align 1
  %339 = load i8, i8* %337, align 1
  %340 = zext i8 %339 to i32
  %341 = shl i64 %336, 8
  %342 = zext i8 %338 to i64
  %343 = or i64 %341, %342
  %344 = add nsw i32 %257, 48
  %345 = icmp eq i8 %338, -1
  br i1 %345, label %346, label %350

346:                                              ; preds = %334
  %347 = getelementptr inbounds i8, i8* %335, i64 2
  %348 = icmp eq i8 %339, 0
  br i1 %348, label %350, label %349

349:                                              ; preds = %346
  store i32 %340, i32* %88, align 4
  br label %350

350:                                              ; preds = %349, %346, %334, %259
  %351 = phi i8* [ %194, %259 ], [ %335, %349 ], [ %347, %346 ], [ %337, %334 ]
  %352 = phi i32 [ %257, %259 ], [ %344, %349 ], [ %344, %346 ], [ %344, %334 ]
  %353 = phi i64 [ %196, %259 ], [ %341, %349 ], [ %343, %346 ], [ %343, %334 ]
  %354 = sub nsw i32 %352, %256
  %355 = zext i32 %354 to i64
  %356 = lshr i64 %353, %355
  %357 = trunc i64 %356 to i32
  %358 = shl i32 -1, %256
  %359 = xor i32 %358, -1
  %360 = and i32 %357, %359
  %361 = add nsw i32 %256, -1
  %362 = shl i32 1, %361
  %363 = sub nsw i32 %360, %362
  %364 = ashr i32 %363, 31
  %365 = add i32 %358, 1
  %366 = and i32 %364, %365
  %367 = add i32 %366, %360
  br label %368

368:                                              ; preds = %350, %255, %237
  %369 = phi i32 [ %367, %350 ], [ 0, %255 ], [ 0, %237 ]
  %370 = phi i8* [ %351, %350 ], [ %194, %255 ], [ %194, %237 ]
  %371 = phi i32 [ %354, %350 ], [ %257, %255 ], [ %240, %237 ]
  %372 = phi i64 [ %353, %350 ], [ %196, %255 ], [ %196, %237 ]
  %373 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %75, i64 0, i32 8, i64 %90
  %374 = load i32, i32* %373, align 4
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %389, label %376

376:                                              ; preds = %368
  %377 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 %90
  %378 = load i32, i32* %377, align 4
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds %struct.savable_state, %struct.savable_state* %5, i64 0, i32 0, i64 %379
  %381 = load i32, i32* %380, align 4
  %382 = add nsw i32 %381, %369
  store i32 %382, i32* %380, align 4
  %383 = icmp eq [64 x i16]* %98, null
  br i1 %383, label %384, label %386

384:                                              ; preds = %376
  %385 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 2
  br label %396

386:                                              ; preds = %376
  %387 = trunc i32 %382 to i16
  %388 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 0, i64 0
  store i16 %387, i16* %388, align 2
  br label %389

389:                                              ; preds = %386, %368
  %390 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %75, i64 0, i32 9, i64 %90
  %391 = load i32, i32* %390, align 4
  %392 = icmp ne i32 %391, 0
  %393 = icmp ne [64 x i16]* %98, null
  %394 = and i1 %393, %392
  %395 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 2
  br i1 %394, label %398, label %396

396:                                              ; preds = %389, %384
  %397 = phi %struct.JHUFF_TBL** [ %385, %384 ], [ %395, %389 ]
  br label %687

398:                                              ; preds = %389, %680
  %399 = phi i64 [ %684, %680 ], [ %372, %389 ]
  %400 = phi i32 [ %683, %680 ], [ %371, %389 ]
  %401 = phi i8* [ %682, %680 ], [ %370, %389 ]
  %402 = phi i32 [ %685, %680 ], [ 1, %389 ]
  %403 = icmp slt i32 %400, 17
  br i1 %403, label %404, label %493

404:                                              ; preds = %398
  %405 = getelementptr inbounds i8, i8* %401, i64 1
  %406 = load i8, i8* %401, align 1
  %407 = load i8, i8* %405, align 1
  %408 = zext i8 %407 to i32
  %409 = shl i64 %399, 8
  %410 = zext i8 %406 to i64
  %411 = or i64 %409, %410
  %412 = icmp eq i8 %406, -1
  br i1 %412, label %413, label %417

413:                                              ; preds = %404
  %414 = getelementptr inbounds i8, i8* %401, i64 2
  %415 = icmp eq i8 %407, 0
  br i1 %415, label %417, label %416

416:                                              ; preds = %413
  store i32 %408, i32* %88, align 4
  br label %417

417:                                              ; preds = %416, %413, %404
  %418 = phi i8* [ %401, %416 ], [ %414, %413 ], [ %405, %404 ]
  %419 = phi i64 [ %409, %416 ], [ %411, %413 ], [ %411, %404 ]
  %420 = getelementptr inbounds i8, i8* %418, i64 1
  %421 = load i8, i8* %418, align 1
  %422 = load i8, i8* %420, align 1
  %423 = zext i8 %422 to i32
  %424 = shl i64 %419, 8
  %425 = zext i8 %421 to i64
  %426 = or i64 %424, %425
  %427 = icmp eq i8 %421, -1
  br i1 %427, label %428, label %432

428:                                              ; preds = %417
  %429 = getelementptr inbounds i8, i8* %418, i64 2
  %430 = icmp eq i8 %422, 0
  br i1 %430, label %432, label %431

431:                                              ; preds = %428
  store i32 %423, i32* %88, align 4
  br label %432

432:                                              ; preds = %431, %428, %417
  %433 = phi i8* [ %418, %431 ], [ %429, %428 ], [ %420, %417 ]
  %434 = phi i64 [ %424, %431 ], [ %426, %428 ], [ %426, %417 ]
  %435 = getelementptr inbounds i8, i8* %433, i64 1
  %436 = load i8, i8* %433, align 1
  %437 = load i8, i8* %435, align 1
  %438 = zext i8 %437 to i32
  %439 = shl i64 %434, 8
  %440 = zext i8 %436 to i64
  %441 = or i64 %439, %440
  %442 = icmp eq i8 %436, -1
  br i1 %442, label %443, label %447

443:                                              ; preds = %432
  %444 = getelementptr inbounds i8, i8* %433, i64 2
  %445 = icmp eq i8 %437, 0
  br i1 %445, label %447, label %446

446:                                              ; preds = %443
  store i32 %438, i32* %88, align 4
  br label %447

447:                                              ; preds = %446, %443, %432
  %448 = phi i8* [ %433, %446 ], [ %444, %443 ], [ %435, %432 ]
  %449 = phi i64 [ %439, %446 ], [ %441, %443 ], [ %441, %432 ]
  %450 = getelementptr inbounds i8, i8* %448, i64 1
  %451 = load i8, i8* %448, align 1
  %452 = load i8, i8* %450, align 1
  %453 = zext i8 %452 to i32
  %454 = shl i64 %449, 8
  %455 = zext i8 %451 to i64
  %456 = or i64 %454, %455
  %457 = icmp eq i8 %451, -1
  br i1 %457, label %458, label %462

458:                                              ; preds = %447
  %459 = getelementptr inbounds i8, i8* %448, i64 2
  %460 = icmp eq i8 %452, 0
  br i1 %460, label %462, label %461

461:                                              ; preds = %458
  store i32 %453, i32* %88, align 4
  br label %462

462:                                              ; preds = %461, %458, %447
  %463 = phi i8* [ %448, %461 ], [ %459, %458 ], [ %450, %447 ]
  %464 = phi i64 [ %454, %461 ], [ %456, %458 ], [ %456, %447 ]
  %465 = getelementptr inbounds i8, i8* %463, i64 1
  %466 = load i8, i8* %463, align 1
  %467 = load i8, i8* %465, align 1
  %468 = zext i8 %467 to i32
  %469 = shl i64 %464, 8
  %470 = zext i8 %466 to i64
  %471 = or i64 %469, %470
  %472 = icmp eq i8 %466, -1
  br i1 %472, label %473, label %477

473:                                              ; preds = %462
  %474 = getelementptr inbounds i8, i8* %463, i64 2
  %475 = icmp eq i8 %467, 0
  br i1 %475, label %477, label %476

476:                                              ; preds = %473
  store i32 %468, i32* %88, align 4
  br label %477

477:                                              ; preds = %476, %473, %462
  %478 = phi i8* [ %463, %476 ], [ %474, %473 ], [ %465, %462 ]
  %479 = phi i64 [ %469, %476 ], [ %471, %473 ], [ %471, %462 ]
  %480 = getelementptr inbounds i8, i8* %478, i64 1
  %481 = load i8, i8* %478, align 1
  %482 = load i8, i8* %480, align 1
  %483 = zext i8 %482 to i32
  %484 = shl i64 %479, 8
  %485 = zext i8 %481 to i64
  %486 = or i64 %484, %485
  %487 = add nsw i32 %400, 48
  %488 = icmp eq i8 %481, -1
  br i1 %488, label %489, label %493

489:                                              ; preds = %477
  %490 = getelementptr inbounds i8, i8* %478, i64 2
  %491 = icmp eq i8 %482, 0
  br i1 %491, label %493, label %492

492:                                              ; preds = %489
  store i32 %483, i32* %88, align 4
  br label %493

493:                                              ; preds = %492, %489, %477, %398
  %494 = phi i8* [ %401, %398 ], [ %478, %492 ], [ %490, %489 ], [ %480, %477 ]
  %495 = phi i32 [ %400, %398 ], [ %487, %492 ], [ %487, %489 ], [ %487, %477 ]
  %496 = phi i64 [ %399, %398 ], [ %484, %492 ], [ %486, %489 ], [ %486, %477 ]
  %497 = add nsw i32 %495, -8
  %498 = zext i32 %497 to i64
  %499 = lshr i64 %496, %498
  %500 = and i64 %499, 255
  %501 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 3, i64 %500
  %502 = load i32, i32* %501, align 4
  %503 = ashr i32 %502, 8
  %504 = sub nsw i32 %495, %503
  %505 = and i32 %502, 255
  %506 = icmp sgt i32 %502, 2303
  br i1 %506, label %507, label %554

507:                                              ; preds = %493
  %508 = zext i32 %504 to i64
  %509 = lshr i64 %496, %508
  %510 = shl nsw i32 -1, %503
  %511 = xor i32 %510, -1
  %512 = trunc i64 %509 to i32
  %513 = and i32 %512, %511
  %514 = sext i32 %513 to i64
  %515 = sext i32 %503 to i64
  %516 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 0, i64 %515
  %517 = load i64, i64* %516, align 8
  %518 = icmp slt i64 %517, %514
  br i1 %518, label %519, label %537

519:                                              ; preds = %507, %519
  %520 = phi i64 [ %530, %519 ], [ %515, %507 ]
  %521 = phi i32 [ %524, %519 ], [ %504, %507 ]
  %522 = phi i32 [ %529, %519 ], [ %513, %507 ]
  %523 = shl i32 %522, 1
  %524 = add nsw i32 %521, -1
  %525 = zext i32 %524 to i64
  %526 = lshr i64 %496, %525
  %527 = trunc i64 %526 to i32
  %528 = and i32 %527, 1
  %529 = or i32 %528, %523
  %530 = add nsw i64 %520, 1
  %531 = sext i32 %529 to i64
  %532 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 0, i64 %530
  %533 = load i64, i64* %532, align 8
  %534 = icmp slt i64 %533, %531
  br i1 %534, label %519, label %535

535:                                              ; preds = %519
  %536 = trunc i64 %530 to i32
  br label %537

537:                                              ; preds = %535, %507
  %538 = phi i32 [ %503, %507 ], [ %536, %535 ]
  %539 = phi i32 [ %513, %507 ], [ %529, %535 ]
  %540 = phi i32 [ %504, %507 ], [ %524, %535 ]
  %541 = phi i64 [ %515, %507 ], [ %530, %535 ]
  %542 = icmp sgt i32 %538, 16
  br i1 %542, label %954, label %543

543:                                              ; preds = %537
  %544 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %395, align 8
  %545 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 1, i64 %541
  %546 = load i64, i64* %545, align 8
  %547 = trunc i64 %546 to i32
  %548 = add i32 %539, %547
  %549 = and i32 %548, 255
  %550 = zext i32 %549 to i64
  %551 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %544, i64 0, i32 1, i64 %550
  %552 = load i8, i8* %551, align 1
  %553 = zext i8 %552 to i32
  br label %554

554:                                              ; preds = %543, %493
  %555 = phi i32 [ %553, %543 ], [ %505, %493 ]
  %556 = phi i32 [ %540, %543 ], [ %504, %493 ]
  %557 = lshr i32 %555, 4
  %558 = and i32 %555, 15
  %559 = icmp eq i32 %558, 0
  br i1 %559, label %676, label %560

560:                                              ; preds = %554
  %561 = add nsw i32 %557, %402
  %562 = icmp slt i32 %556, 17
  br i1 %562, label %563, label %652

563:                                              ; preds = %560
  %564 = getelementptr inbounds i8, i8* %494, i64 1
  %565 = load i8, i8* %494, align 1
  %566 = load i8, i8* %564, align 1
  %567 = zext i8 %566 to i32
  %568 = shl i64 %496, 8
  %569 = zext i8 %565 to i64
  %570 = or i64 %568, %569
  %571 = icmp eq i8 %565, -1
  br i1 %571, label %572, label %576

572:                                              ; preds = %563
  %573 = getelementptr inbounds i8, i8* %494, i64 2
  %574 = icmp eq i8 %566, 0
  br i1 %574, label %576, label %575

575:                                              ; preds = %572
  store i32 %567, i32* %88, align 4
  br label %576

576:                                              ; preds = %575, %572, %563
  %577 = phi i8* [ %494, %575 ], [ %573, %572 ], [ %564, %563 ]
  %578 = phi i64 [ %568, %575 ], [ %570, %572 ], [ %570, %563 ]
  %579 = getelementptr inbounds i8, i8* %577, i64 1
  %580 = load i8, i8* %577, align 1
  %581 = load i8, i8* %579, align 1
  %582 = zext i8 %581 to i32
  %583 = shl i64 %578, 8
  %584 = zext i8 %580 to i64
  %585 = or i64 %583, %584
  %586 = icmp eq i8 %580, -1
  br i1 %586, label %587, label %591

587:                                              ; preds = %576
  %588 = getelementptr inbounds i8, i8* %577, i64 2
  %589 = icmp eq i8 %581, 0
  br i1 %589, label %591, label %590

590:                                              ; preds = %587
  store i32 %582, i32* %88, align 4
  br label %591

591:                                              ; preds = %590, %587, %576
  %592 = phi i8* [ %577, %590 ], [ %588, %587 ], [ %579, %576 ]
  %593 = phi i64 [ %583, %590 ], [ %585, %587 ], [ %585, %576 ]
  %594 = getelementptr inbounds i8, i8* %592, i64 1
  %595 = load i8, i8* %592, align 1
  %596 = load i8, i8* %594, align 1
  %597 = zext i8 %596 to i32
  %598 = shl i64 %593, 8
  %599 = zext i8 %595 to i64
  %600 = or i64 %598, %599
  %601 = icmp eq i8 %595, -1
  br i1 %601, label %602, label %606

602:                                              ; preds = %591
  %603 = getelementptr inbounds i8, i8* %592, i64 2
  %604 = icmp eq i8 %596, 0
  br i1 %604, label %606, label %605

605:                                              ; preds = %602
  store i32 %597, i32* %88, align 4
  br label %606

606:                                              ; preds = %605, %602, %591
  %607 = phi i8* [ %592, %605 ], [ %603, %602 ], [ %594, %591 ]
  %608 = phi i64 [ %598, %605 ], [ %600, %602 ], [ %600, %591 ]
  %609 = getelementptr inbounds i8, i8* %607, i64 1
  %610 = load i8, i8* %607, align 1
  %611 = load i8, i8* %609, align 1
  %612 = zext i8 %611 to i32
  %613 = shl i64 %608, 8
  %614 = zext i8 %610 to i64
  %615 = or i64 %613, %614
  %616 = icmp eq i8 %610, -1
  br i1 %616, label %617, label %621

617:                                              ; preds = %606
  %618 = getelementptr inbounds i8, i8* %607, i64 2
  %619 = icmp eq i8 %611, 0
  br i1 %619, label %621, label %620

620:                                              ; preds = %617
  store i32 %612, i32* %88, align 4
  br label %621

621:                                              ; preds = %620, %617, %606
  %622 = phi i8* [ %607, %620 ], [ %618, %617 ], [ %609, %606 ]
  %623 = phi i64 [ %613, %620 ], [ %615, %617 ], [ %615, %606 ]
  %624 = getelementptr inbounds i8, i8* %622, i64 1
  %625 = load i8, i8* %622, align 1
  %626 = load i8, i8* %624, align 1
  %627 = zext i8 %626 to i32
  %628 = shl i64 %623, 8
  %629 = zext i8 %625 to i64
  %630 = or i64 %628, %629
  %631 = icmp eq i8 %625, -1
  br i1 %631, label %632, label %636

632:                                              ; preds = %621
  %633 = getelementptr inbounds i8, i8* %622, i64 2
  %634 = icmp eq i8 %626, 0
  br i1 %634, label %636, label %635

635:                                              ; preds = %632
  store i32 %627, i32* %88, align 4
  br label %636

636:                                              ; preds = %635, %632, %621
  %637 = phi i8* [ %622, %635 ], [ %633, %632 ], [ %624, %621 ]
  %638 = phi i64 [ %628, %635 ], [ %630, %632 ], [ %630, %621 ]
  %639 = getelementptr inbounds i8, i8* %637, i64 1
  %640 = load i8, i8* %637, align 1
  %641 = load i8, i8* %639, align 1
  %642 = zext i8 %641 to i32
  %643 = shl i64 %638, 8
  %644 = zext i8 %640 to i64
  %645 = or i64 %643, %644
  %646 = add nsw i32 %556, 48
  %647 = icmp eq i8 %640, -1
  br i1 %647, label %648, label %652

648:                                              ; preds = %636
  %649 = getelementptr inbounds i8, i8* %637, i64 2
  %650 = icmp eq i8 %641, 0
  br i1 %650, label %652, label %651

651:                                              ; preds = %648
  store i32 %642, i32* %88, align 4
  br label %652

652:                                              ; preds = %651, %648, %636, %560
  %653 = phi i8* [ %494, %560 ], [ %637, %651 ], [ %649, %648 ], [ %639, %636 ]
  %654 = phi i32 [ %556, %560 ], [ %646, %651 ], [ %646, %648 ], [ %646, %636 ]
  %655 = phi i64 [ %496, %560 ], [ %643, %651 ], [ %645, %648 ], [ %645, %636 ]
  %656 = sub nsw i32 %654, %558
  %657 = zext i32 %656 to i64
  %658 = lshr i64 %655, %657
  %659 = trunc i64 %658 to i32
  %660 = shl i32 -1, %558
  %661 = xor i32 %660, -1
  %662 = and i32 %659, %661
  %663 = add nsw i32 %558, -1
  %664 = shl i32 1, %663
  %665 = sub nsw i32 %662, %664
  %666 = ashr i32 %665, 31
  %667 = add nsw i32 %660, 1
  %668 = and i32 %666, %667
  %669 = add nsw i32 %668, %662
  %670 = trunc i32 %669 to i16
  %671 = sext i32 %561 to i64
  %672 = getelementptr inbounds [0 x i32], [0 x i32]* @jpeg_natural_order, i64 0, i64 %671
  %673 = load i32, i32* %672, align 4
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 0, i64 %674
  store i16 %670, i16* %675, align 2
  br label %680

676:                                              ; preds = %554
  %677 = icmp eq i32 %557, 15
  br i1 %677, label %678, label %954

678:                                              ; preds = %676
  %679 = add nsw i32 %402, 15
  br label %680

680:                                              ; preds = %678, %652
  %681 = phi i32 [ %561, %652 ], [ %679, %678 ]
  %682 = phi i8* [ %653, %652 ], [ %494, %678 ]
  %683 = phi i32 [ %656, %652 ], [ %556, %678 ]
  %684 = phi i64 [ %655, %652 ], [ %496, %678 ]
  %685 = add nsw i32 %681, 1
  %686 = icmp slt i32 %685, 64
  br i1 %686, label %398, label %954

687:                                              ; preds = %947, %396
  %688 = phi i64 [ %950, %947 ], [ %372, %396 ]
  %689 = phi i32 [ %949, %947 ], [ %371, %396 ]
  %690 = phi i8* [ %948, %947 ], [ %370, %396 ]
  %691 = phi i32 [ %952, %947 ], [ 1, %396 ]
  %692 = icmp slt i32 %689, 17
  br i1 %692, label %693, label %782

693:                                              ; preds = %687
  %694 = getelementptr inbounds i8, i8* %690, i64 1
  %695 = load i8, i8* %690, align 1
  %696 = load i8, i8* %694, align 1
  %697 = zext i8 %696 to i32
  %698 = shl i64 %688, 8
  %699 = zext i8 %695 to i64
  %700 = or i64 %698, %699
  %701 = icmp eq i8 %695, -1
  br i1 %701, label %702, label %706

702:                                              ; preds = %693
  %703 = getelementptr inbounds i8, i8* %690, i64 2
  %704 = icmp eq i8 %696, 0
  br i1 %704, label %706, label %705

705:                                              ; preds = %702
  store i32 %697, i32* %88, align 4
  br label %706

706:                                              ; preds = %705, %702, %693
  %707 = phi i8* [ %690, %705 ], [ %703, %702 ], [ %694, %693 ]
  %708 = phi i64 [ %698, %705 ], [ %700, %702 ], [ %700, %693 ]
  %709 = getelementptr inbounds i8, i8* %707, i64 1
  %710 = load i8, i8* %707, align 1
  %711 = load i8, i8* %709, align 1
  %712 = zext i8 %711 to i32
  %713 = shl i64 %708, 8
  %714 = zext i8 %710 to i64
  %715 = or i64 %713, %714
  %716 = icmp eq i8 %710, -1
  br i1 %716, label %717, label %721

717:                                              ; preds = %706
  %718 = getelementptr inbounds i8, i8* %707, i64 2
  %719 = icmp eq i8 %711, 0
  br i1 %719, label %721, label %720

720:                                              ; preds = %717
  store i32 %712, i32* %88, align 4
  br label %721

721:                                              ; preds = %720, %717, %706
  %722 = phi i8* [ %707, %720 ], [ %718, %717 ], [ %709, %706 ]
  %723 = phi i64 [ %713, %720 ], [ %715, %717 ], [ %715, %706 ]
  %724 = getelementptr inbounds i8, i8* %722, i64 1
  %725 = load i8, i8* %722, align 1
  %726 = load i8, i8* %724, align 1
  %727 = zext i8 %726 to i32
  %728 = shl i64 %723, 8
  %729 = zext i8 %725 to i64
  %730 = or i64 %728, %729
  %731 = icmp eq i8 %725, -1
  br i1 %731, label %732, label %736

732:                                              ; preds = %721
  %733 = getelementptr inbounds i8, i8* %722, i64 2
  %734 = icmp eq i8 %726, 0
  br i1 %734, label %736, label %735

735:                                              ; preds = %732
  store i32 %727, i32* %88, align 4
  br label %736

736:                                              ; preds = %735, %732, %721
  %737 = phi i8* [ %722, %735 ], [ %733, %732 ], [ %724, %721 ]
  %738 = phi i64 [ %728, %735 ], [ %730, %732 ], [ %730, %721 ]
  %739 = getelementptr inbounds i8, i8* %737, i64 1
  %740 = load i8, i8* %737, align 1
  %741 = load i8, i8* %739, align 1
  %742 = zext i8 %741 to i32
  %743 = shl i64 %738, 8
  %744 = zext i8 %740 to i64
  %745 = or i64 %743, %744
  %746 = icmp eq i8 %740, -1
  br i1 %746, label %747, label %751

747:                                              ; preds = %736
  %748 = getelementptr inbounds i8, i8* %737, i64 2
  %749 = icmp eq i8 %741, 0
  br i1 %749, label %751, label %750

750:                                              ; preds = %747
  store i32 %742, i32* %88, align 4
  br label %751

751:                                              ; preds = %750, %747, %736
  %752 = phi i8* [ %737, %750 ], [ %748, %747 ], [ %739, %736 ]
  %753 = phi i64 [ %743, %750 ], [ %745, %747 ], [ %745, %736 ]
  %754 = getelementptr inbounds i8, i8* %752, i64 1
  %755 = load i8, i8* %752, align 1
  %756 = load i8, i8* %754, align 1
  %757 = zext i8 %756 to i32
  %758 = shl i64 %753, 8
  %759 = zext i8 %755 to i64
  %760 = or i64 %758, %759
  %761 = icmp eq i8 %755, -1
  br i1 %761, label %762, label %766

762:                                              ; preds = %751
  %763 = getelementptr inbounds i8, i8* %752, i64 2
  %764 = icmp eq i8 %756, 0
  br i1 %764, label %766, label %765

765:                                              ; preds = %762
  store i32 %757, i32* %88, align 4
  br label %766

766:                                              ; preds = %765, %762, %751
  %767 = phi i8* [ %752, %765 ], [ %763, %762 ], [ %754, %751 ]
  %768 = phi i64 [ %758, %765 ], [ %760, %762 ], [ %760, %751 ]
  %769 = getelementptr inbounds i8, i8* %767, i64 1
  %770 = load i8, i8* %767, align 1
  %771 = load i8, i8* %769, align 1
  %772 = zext i8 %771 to i32
  %773 = shl i64 %768, 8
  %774 = zext i8 %770 to i64
  %775 = or i64 %773, %774
  %776 = add nsw i32 %689, 48
  %777 = icmp eq i8 %770, -1
  br i1 %777, label %778, label %782

778:                                              ; preds = %766
  %779 = getelementptr inbounds i8, i8* %767, i64 2
  %780 = icmp eq i8 %771, 0
  br i1 %780, label %782, label %781

781:                                              ; preds = %778
  store i32 %772, i32* %88, align 4
  br label %782

782:                                              ; preds = %781, %778, %766, %687
  %783 = phi i8* [ %690, %687 ], [ %767, %781 ], [ %779, %778 ], [ %769, %766 ]
  %784 = phi i32 [ %689, %687 ], [ %776, %781 ], [ %776, %778 ], [ %776, %766 ]
  %785 = phi i64 [ %688, %687 ], [ %773, %781 ], [ %775, %778 ], [ %775, %766 ]
  %786 = add nsw i32 %784, -8
  %787 = zext i32 %786 to i64
  %788 = lshr i64 %785, %787
  %789 = and i64 %788, 255
  %790 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 3, i64 %789
  %791 = load i32, i32* %790, align 4
  %792 = ashr i32 %791, 8
  %793 = sub nsw i32 %784, %792
  %794 = and i32 %791, 255
  %795 = icmp sgt i32 %791, 2303
  br i1 %795, label %796, label %843

796:                                              ; preds = %782
  %797 = zext i32 %793 to i64
  %798 = lshr i64 %785, %797
  %799 = shl nsw i32 -1, %792
  %800 = xor i32 %799, -1
  %801 = trunc i64 %798 to i32
  %802 = and i32 %801, %800
  %803 = sext i32 %802 to i64
  %804 = sext i32 %792 to i64
  %805 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 0, i64 %804
  %806 = load i64, i64* %805, align 8
  %807 = icmp slt i64 %806, %803
  br i1 %807, label %808, label %826

808:                                              ; preds = %796, %808
  %809 = phi i64 [ %819, %808 ], [ %804, %796 ]
  %810 = phi i32 [ %813, %808 ], [ %793, %796 ]
  %811 = phi i32 [ %818, %808 ], [ %802, %796 ]
  %812 = shl i32 %811, 1
  %813 = add nsw i32 %810, -1
  %814 = zext i32 %813 to i64
  %815 = lshr i64 %785, %814
  %816 = trunc i64 %815 to i32
  %817 = and i32 %816, 1
  %818 = or i32 %817, %812
  %819 = add nsw i64 %809, 1
  %820 = sext i32 %818 to i64
  %821 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 0, i64 %819
  %822 = load i64, i64* %821, align 8
  %823 = icmp slt i64 %822, %820
  br i1 %823, label %808, label %824

824:                                              ; preds = %808
  %825 = trunc i64 %819 to i32
  br label %826

826:                                              ; preds = %824, %796
  %827 = phi i32 [ %792, %796 ], [ %825, %824 ]
  %828 = phi i32 [ %802, %796 ], [ %818, %824 ]
  %829 = phi i32 [ %793, %796 ], [ %813, %824 ]
  %830 = phi i64 [ %804, %796 ], [ %819, %824 ]
  %831 = icmp sgt i32 %827, 16
  br i1 %831, label %954, label %832

832:                                              ; preds = %826
  %833 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %397, align 8
  %834 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %102, i64 0, i32 1, i64 %830
  %835 = load i64, i64* %834, align 8
  %836 = trunc i64 %835 to i32
  %837 = add i32 %828, %836
  %838 = and i32 %837, 255
  %839 = zext i32 %838 to i64
  %840 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %833, i64 0, i32 1, i64 %839
  %841 = load i8, i8* %840, align 1
  %842 = zext i8 %841 to i32
  br label %843

843:                                              ; preds = %832, %782
  %844 = phi i32 [ %842, %832 ], [ %794, %782 ]
  %845 = phi i32 [ %829, %832 ], [ %793, %782 ]
  %846 = lshr i32 %844, 4
  %847 = and i32 %844, 15
  %848 = icmp eq i32 %847, 0
  br i1 %848, label %945, label %849

849:                                              ; preds = %843
  %850 = icmp slt i32 %845, 17
  br i1 %850, label %851, label %940

851:                                              ; preds = %849
  %852 = getelementptr inbounds i8, i8* %783, i64 1
  %853 = load i8, i8* %783, align 1
  %854 = load i8, i8* %852, align 1
  %855 = zext i8 %854 to i32
  %856 = shl i64 %785, 8
  %857 = zext i8 %853 to i64
  %858 = or i64 %856, %857
  %859 = icmp eq i8 %853, -1
  br i1 %859, label %860, label %864

860:                                              ; preds = %851
  %861 = getelementptr inbounds i8, i8* %783, i64 2
  %862 = icmp eq i8 %854, 0
  br i1 %862, label %864, label %863

863:                                              ; preds = %860
  store i32 %855, i32* %88, align 4
  br label %864

864:                                              ; preds = %863, %860, %851
  %865 = phi i8* [ %783, %863 ], [ %861, %860 ], [ %852, %851 ]
  %866 = phi i64 [ %856, %863 ], [ %858, %860 ], [ %858, %851 ]
  %867 = getelementptr inbounds i8, i8* %865, i64 1
  %868 = load i8, i8* %865, align 1
  %869 = load i8, i8* %867, align 1
  %870 = zext i8 %869 to i32
  %871 = shl i64 %866, 8
  %872 = zext i8 %868 to i64
  %873 = or i64 %871, %872
  %874 = icmp eq i8 %868, -1
  br i1 %874, label %875, label %879

875:                                              ; preds = %864
  %876 = getelementptr inbounds i8, i8* %865, i64 2
  %877 = icmp eq i8 %869, 0
  br i1 %877, label %879, label %878

878:                                              ; preds = %875
  store i32 %870, i32* %88, align 4
  br label %879

879:                                              ; preds = %878, %875, %864
  %880 = phi i8* [ %865, %878 ], [ %876, %875 ], [ %867, %864 ]
  %881 = phi i64 [ %871, %878 ], [ %873, %875 ], [ %873, %864 ]
  %882 = getelementptr inbounds i8, i8* %880, i64 1
  %883 = load i8, i8* %880, align 1
  %884 = load i8, i8* %882, align 1
  %885 = zext i8 %884 to i32
  %886 = shl i64 %881, 8
  %887 = zext i8 %883 to i64
  %888 = or i64 %886, %887
  %889 = icmp eq i8 %883, -1
  br i1 %889, label %890, label %894

890:                                              ; preds = %879
  %891 = getelementptr inbounds i8, i8* %880, i64 2
  %892 = icmp eq i8 %884, 0
  br i1 %892, label %894, label %893

893:                                              ; preds = %890
  store i32 %885, i32* %88, align 4
  br label %894

894:                                              ; preds = %893, %890, %879
  %895 = phi i8* [ %880, %893 ], [ %891, %890 ], [ %882, %879 ]
  %896 = phi i64 [ %886, %893 ], [ %888, %890 ], [ %888, %879 ]
  %897 = getelementptr inbounds i8, i8* %895, i64 1
  %898 = load i8, i8* %895, align 1
  %899 = load i8, i8* %897, align 1
  %900 = zext i8 %899 to i32
  %901 = shl i64 %896, 8
  %902 = zext i8 %898 to i64
  %903 = or i64 %901, %902
  %904 = icmp eq i8 %898, -1
  br i1 %904, label %905, label %909

905:                                              ; preds = %894
  %906 = getelementptr inbounds i8, i8* %895, i64 2
  %907 = icmp eq i8 %899, 0
  br i1 %907, label %909, label %908

908:                                              ; preds = %905
  store i32 %900, i32* %88, align 4
  br label %909

909:                                              ; preds = %908, %905, %894
  %910 = phi i8* [ %895, %908 ], [ %906, %905 ], [ %897, %894 ]
  %911 = phi i64 [ %901, %908 ], [ %903, %905 ], [ %903, %894 ]
  %912 = getelementptr inbounds i8, i8* %910, i64 1
  %913 = load i8, i8* %910, align 1
  %914 = load i8, i8* %912, align 1
  %915 = zext i8 %914 to i32
  %916 = shl i64 %911, 8
  %917 = zext i8 %913 to i64
  %918 = or i64 %916, %917
  %919 = icmp eq i8 %913, -1
  br i1 %919, label %920, label %924

920:                                              ; preds = %909
  %921 = getelementptr inbounds i8, i8* %910, i64 2
  %922 = icmp eq i8 %914, 0
  br i1 %922, label %924, label %923

923:                                              ; preds = %920
  store i32 %915, i32* %88, align 4
  br label %924

924:                                              ; preds = %923, %920, %909
  %925 = phi i8* [ %910, %923 ], [ %921, %920 ], [ %912, %909 ]
  %926 = phi i64 [ %916, %923 ], [ %918, %920 ], [ %918, %909 ]
  %927 = getelementptr inbounds i8, i8* %925, i64 1
  %928 = load i8, i8* %925, align 1
  %929 = load i8, i8* %927, align 1
  %930 = zext i8 %929 to i32
  %931 = shl i64 %926, 8
  %932 = zext i8 %928 to i64
  %933 = or i64 %931, %932
  %934 = add nsw i32 %845, 48
  %935 = icmp eq i8 %928, -1
  br i1 %935, label %936, label %940

936:                                              ; preds = %924
  %937 = getelementptr inbounds i8, i8* %925, i64 2
  %938 = icmp eq i8 %929, 0
  br i1 %938, label %940, label %939

939:                                              ; preds = %936
  store i32 %930, i32* %88, align 4
  br label %940

940:                                              ; preds = %939, %936, %924, %849
  %941 = phi i8* [ %783, %849 ], [ %925, %939 ], [ %937, %936 ], [ %927, %924 ]
  %942 = phi i32 [ %845, %849 ], [ %934, %939 ], [ %934, %936 ], [ %934, %924 ]
  %943 = phi i64 [ %785, %849 ], [ %931, %939 ], [ %933, %936 ], [ %933, %924 ]
  %944 = sub nsw i32 %942, %847
  br label %947

945:                                              ; preds = %843
  %946 = icmp eq i32 %846, 15
  br i1 %946, label %947, label %954

947:                                              ; preds = %945, %940
  %948 = phi i8* [ %941, %940 ], [ %783, %945 ]
  %949 = phi i32 [ %944, %940 ], [ %845, %945 ]
  %950 = phi i64 [ %943, %940 ], [ %785, %945 ]
  %951 = add i32 %691, 1
  %952 = add i32 %951, %846
  %953 = icmp slt i32 %952, 64
  br i1 %953, label %687, label %954

954:                                              ; preds = %947, %945, %826, %680, %676, %537
  %955 = phi i8* [ %494, %676 ], [ %682, %680 ], [ %494, %537 ], [ %783, %945 ], [ %948, %947 ], [ %783, %826 ]
  %956 = phi i32 [ %556, %676 ], [ %683, %680 ], [ %540, %537 ], [ %845, %945 ], [ %949, %947 ], [ %829, %826 ]
  %957 = phi i64 [ %496, %676 ], [ %684, %680 ], [ %496, %537 ], [ %785, %945 ], [ %950, %947 ], [ %785, %826 ]
  %958 = add nuw nsw i64 %90, 1
  %959 = load i32, i32* %54, align 8
  %960 = sext i32 %959 to i64
  %961 = icmp slt i64 %958, %960
  br i1 %961, label %89, label %962

962:                                              ; preds = %954, %74
  %963 = phi i32 [ %55, %74 ], [ %959, %954 ]
  %964 = phi i8* [ %78, %74 ], [ %955, %954 ]
  %965 = phi i32 [ %82, %74 ], [ %956, %954 ]
  %966 = phi i64 [ %80, %74 ], [ %957, %954 ]
  %967 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 76
  %968 = load i32, i32* %967, align 4
  %969 = icmp eq i32 %968, 0
  br i1 %969, label %973, label %970

970:                                              ; preds = %962
  store i32 0, i32* %967, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #3
  %971 = bitcast %struct.jpeg_source_mgr** %50 to i64**
  %972 = load i64*, i64** %971, align 8
  br label %982

973:                                              ; preds = %962
  %974 = ptrtoint i8* %964 to i64
  %975 = ptrtoint i8* %78 to i64
  %976 = add i64 %53, %975
  %977 = sub i64 %976, %974
  %978 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %50, align 8
  %979 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %978, i64 0, i32 0
  store i8* %964, i8** %979, align 8
  %980 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %50, align 8
  %981 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %980, i64 0, i32 1
  store i64 %977, i64* %981, align 8
  store i64 %966, i64* %79, align 8
  store i32 %965, i32* %81, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* nonnull align 4 %76, i64 16, i1 false) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #3
  br label %1272

982:                                              ; preds = %72, %970
  %983 = phi i64** [ %73, %72 ], [ %971, %970 ]
  %984 = phi i32 [ %55, %72 ], [ %963, %970 ]
  %985 = phi i64* [ %59, %72 ], [ %972, %970 ]
  %986 = load %struct.huff_entropy_decoder*, %struct.huff_entropy_decoder** %7, align 8
  %987 = bitcast %struct.bitread_working_state* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %987) #3
  %988 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 2
  %989 = bitcast i64* %988 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %989, i8 -86, i64 16, i1 false) #3
  %990 = bitcast %struct.savable_state* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %990) #3
  %991 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %990, i8 -86, i64 16, i1 false) #3
  store %struct.jpeg_decompress_struct* %0, %struct.jpeg_decompress_struct** %991, align 8
  %992 = load i64, i64* %985, align 8
  %993 = bitcast %struct.bitread_working_state* %3 to i64*
  store i64 %992, i64* %993, align 8
  %994 = getelementptr inbounds i64, i64* %985, i64 1
  %995 = load i64, i64* %994, align 8
  %996 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 1
  store i64 %995, i64* %996, align 8
  %997 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %986, i64 0, i32 1, i32 0
  %998 = load i64, i64* %997, align 8
  %999 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %986, i64 0, i32 1, i32 1
  %1000 = load i32, i32* %999, align 8
  %1001 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %986, i64 0, i32 2
  %1002 = bitcast %struct.savable_state* %1001 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %990, i8* align 8 %1002, i64 16, i1 false) #3
  %1003 = icmp sgt i32 %984, 0
  br i1 %1003, label %1004, label %1264

1004:                                             ; preds = %982
  %1005 = icmp eq [64 x i16]** %1, null
  %1006 = getelementptr inbounds %struct.bitread_working_state, %struct.bitread_working_state* %3, i64 0, i32 3
  br label %1007

1007:                                             ; preds = %1252, %1004
  %1008 = phi i64 [ 0, %1004 ], [ %1255, %1252 ]
  %1009 = phi i32 [ %1000, %1004 ], [ %1254, %1252 ]
  %1010 = phi i64 [ %998, %1004 ], [ %1253, %1252 ]
  br i1 %1005, label %1014, label %1011

1011:                                             ; preds = %1007
  %1012 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %1008
  %1013 = load [64 x i16]*, [64 x i16]** %1012, align 8
  br label %1014

1014:                                             ; preds = %1011, %1007
  %1015 = phi [64 x i16]* [ %1013, %1011 ], [ null, %1007 ]
  %1016 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %986, i64 0, i32 6, i64 %1008
  %1017 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %1016, align 8
  %1018 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %986, i64 0, i32 7, i64 %1008
  %1019 = load %struct.d_derived_tbl*, %struct.d_derived_tbl** %1018, align 8
  %1020 = icmp slt i32 %1009, 8
  br i1 %1020, label %1021, label %1028

1021:                                             ; preds = %1014
  %1022 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %1010, i32 %1009, i32 0) #3
  %1023 = icmp eq i32 %1022, 0
  br i1 %1023, label %1263, label %1024

1024:                                             ; preds = %1021
  %1025 = load i64, i64* %988, align 8
  %1026 = load i32, i32* %1006, align 8
  %1027 = icmp slt i32 %1026, 8
  br i1 %1027, label %1042, label %1028

1028:                                             ; preds = %1024, %1014
  %1029 = phi i64 [ %1025, %1024 ], [ %1010, %1014 ]
  %1030 = phi i32 [ %1026, %1024 ], [ %1009, %1014 ]
  %1031 = add nsw i32 %1030, -8
  %1032 = zext i32 %1031 to i64
  %1033 = lshr i64 %1029, %1032
  %1034 = and i64 %1033, 255
  %1035 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %1017, i64 0, i32 3, i64 %1034
  %1036 = load i32, i32* %1035, align 4
  %1037 = ashr i32 %1036, 8
  %1038 = icmp slt i32 %1036, 2304
  br i1 %1038, label %1039, label %1042

1039:                                             ; preds = %1028
  %1040 = sub nsw i32 %1030, %1037
  %1041 = and i32 %1036, 255
  br label %1051

1042:                                             ; preds = %1028, %1024
  %1043 = phi i64 [ %1029, %1028 ], [ %1025, %1024 ]
  %1044 = phi i32 [ %1030, %1028 ], [ %1026, %1024 ]
  %1045 = phi i32 [ %1037, %1028 ], [ 1, %1024 ]
  %1046 = call i32 @jpeg_huff_decode(%struct.bitread_working_state* nonnull %3, i64 %1043, i32 %1044, %struct.d_derived_tbl* %1017, i32 %1045) #3
  %1047 = icmp slt i32 %1046, 0
  br i1 %1047, label %1263, label %1048

1048:                                             ; preds = %1042
  %1049 = load i64, i64* %988, align 8
  %1050 = load i32, i32* %1006, align 8
  br label %1051

1051:                                             ; preds = %1048, %1039
  %1052 = phi i64 [ %1029, %1039 ], [ %1049, %1048 ]
  %1053 = phi i32 [ %1040, %1039 ], [ %1050, %1048 ]
  %1054 = phi i32 [ %1041, %1039 ], [ %1046, %1048 ]
  %1055 = icmp eq i32 %1054, 0
  br i1 %1055, label %1081, label %1056

1056:                                             ; preds = %1051
  %1057 = icmp slt i32 %1053, %1054
  br i1 %1057, label %1058, label %1064

1058:                                             ; preds = %1056
  %1059 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %1052, i32 %1053, i32 %1054) #3
  %1060 = icmp eq i32 %1059, 0
  br i1 %1060, label %1263, label %1061

1061:                                             ; preds = %1058
  %1062 = load i64, i64* %988, align 8
  %1063 = load i32, i32* %1006, align 8
  br label %1064

1064:                                             ; preds = %1061, %1056
  %1065 = phi i64 [ %1062, %1061 ], [ %1052, %1056 ]
  %1066 = phi i32 [ %1063, %1061 ], [ %1053, %1056 ]
  %1067 = sub nsw i32 %1066, %1054
  %1068 = zext i32 %1067 to i64
  %1069 = lshr i64 %1065, %1068
  %1070 = trunc i64 %1069 to i32
  %1071 = shl i32 -1, %1054
  %1072 = xor i32 %1071, -1
  %1073 = and i32 %1070, %1072
  %1074 = add nsw i32 %1054, -1
  %1075 = shl i32 1, %1074
  %1076 = sub nsw i32 %1073, %1075
  %1077 = ashr i32 %1076, 31
  %1078 = add i32 %1071, 1
  %1079 = and i32 %1077, %1078
  %1080 = add i32 %1079, %1073
  br label %1081

1081:                                             ; preds = %1064, %1051
  %1082 = phi i64 [ %1065, %1064 ], [ %1052, %1051 ]
  %1083 = phi i32 [ %1067, %1064 ], [ %1053, %1051 ]
  %1084 = phi i32 [ %1080, %1064 ], [ 0, %1051 ]
  %1085 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %986, i64 0, i32 8, i64 %1008
  %1086 = load i32, i32* %1085, align 4
  %1087 = icmp eq i32 %1086, 0
  br i1 %1087, label %1100, label %1088

1088:                                             ; preds = %1081
  %1089 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 %1008
  %1090 = load i32, i32* %1089, align 4
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds %struct.savable_state, %struct.savable_state* %4, i64 0, i32 0, i64 %1091
  %1093 = load i32, i32* %1092, align 4
  %1094 = add nsw i32 %1093, %1084
  store i32 %1094, i32* %1092, align 4
  %1095 = icmp eq [64 x i16]* %1015, null
  br i1 %1095, label %1096, label %1097

1096:                                             ; preds = %1100, %1088
  br label %1190

1097:                                             ; preds = %1088
  %1098 = trunc i32 %1094 to i16
  %1099 = getelementptr inbounds [64 x i16], [64 x i16]* %1015, i64 0, i64 0
  store i16 %1098, i16* %1099, align 2
  br label %1100

1100:                                             ; preds = %1097, %1081
  %1101 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %986, i64 0, i32 9, i64 %1008
  %1102 = load i32, i32* %1101, align 4
  %1103 = icmp ne i32 %1102, 0
  %1104 = icmp ne [64 x i16]* %1015, null
  %1105 = and i1 %1104, %1103
  br i1 %1105, label %1106, label %1096

1106:                                             ; preds = %1100, %1184
  %1107 = phi i32 [ %1188, %1184 ], [ 1, %1100 ]
  %1108 = phi i32 [ %1186, %1184 ], [ %1083, %1100 ]
  %1109 = phi i64 [ %1185, %1184 ], [ %1082, %1100 ]
  %1110 = icmp slt i32 %1108, 8
  br i1 %1110, label %1111, label %1118

1111:                                             ; preds = %1106
  %1112 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %1109, i32 %1108, i32 0) #3
  %1113 = icmp eq i32 %1112, 0
  br i1 %1113, label %1263, label %1114

1114:                                             ; preds = %1111
  %1115 = load i64, i64* %988, align 8
  %1116 = load i32, i32* %1006, align 8
  %1117 = icmp slt i32 %1116, 8
  br i1 %1117, label %1132, label %1118

1118:                                             ; preds = %1114, %1106
  %1119 = phi i64 [ %1115, %1114 ], [ %1109, %1106 ]
  %1120 = phi i32 [ %1116, %1114 ], [ %1108, %1106 ]
  %1121 = add nsw i32 %1120, -8
  %1122 = zext i32 %1121 to i64
  %1123 = lshr i64 %1119, %1122
  %1124 = and i64 %1123, 255
  %1125 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %1019, i64 0, i32 3, i64 %1124
  %1126 = load i32, i32* %1125, align 4
  %1127 = ashr i32 %1126, 8
  %1128 = icmp slt i32 %1126, 2304
  br i1 %1128, label %1129, label %1132

1129:                                             ; preds = %1118
  %1130 = sub nsw i32 %1120, %1127
  %1131 = and i32 %1126, 255
  br label %1141

1132:                                             ; preds = %1118, %1114
  %1133 = phi i64 [ %1119, %1118 ], [ %1115, %1114 ]
  %1134 = phi i32 [ %1120, %1118 ], [ %1116, %1114 ]
  %1135 = phi i32 [ %1127, %1118 ], [ 1, %1114 ]
  %1136 = call i32 @jpeg_huff_decode(%struct.bitread_working_state* nonnull %3, i64 %1133, i32 %1134, %struct.d_derived_tbl* %1019, i32 %1135) #3
  %1137 = icmp slt i32 %1136, 0
  br i1 %1137, label %1263, label %1138

1138:                                             ; preds = %1132
  %1139 = load i64, i64* %988, align 8
  %1140 = load i32, i32* %1006, align 8
  br label %1141

1141:                                             ; preds = %1138, %1129
  %1142 = phi i64 [ %1119, %1129 ], [ %1139, %1138 ]
  %1143 = phi i32 [ %1130, %1129 ], [ %1140, %1138 ]
  %1144 = phi i32 [ %1131, %1129 ], [ %1136, %1138 ]
  %1145 = lshr i32 %1144, 4
  %1146 = and i32 %1144, 15
  %1147 = icmp eq i32 %1146, 0
  br i1 %1147, label %1180, label %1148

1148:                                             ; preds = %1141
  %1149 = add nsw i32 %1145, %1107
  %1150 = icmp slt i32 %1143, %1146
  br i1 %1150, label %1151, label %1157

1151:                                             ; preds = %1148
  %1152 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %1142, i32 %1143, i32 %1146) #3
  %1153 = icmp eq i32 %1152, 0
  br i1 %1153, label %1263, label %1154

1154:                                             ; preds = %1151
  %1155 = load i64, i64* %988, align 8
  %1156 = load i32, i32* %1006, align 8
  br label %1157

1157:                                             ; preds = %1154, %1148
  %1158 = phi i64 [ %1155, %1154 ], [ %1142, %1148 ]
  %1159 = phi i32 [ %1156, %1154 ], [ %1143, %1148 ]
  %1160 = sub nsw i32 %1159, %1146
  %1161 = zext i32 %1160 to i64
  %1162 = lshr i64 %1158, %1161
  %1163 = trunc i64 %1162 to i32
  %1164 = shl i32 -1, %1146
  %1165 = xor i32 %1164, -1
  %1166 = and i32 %1163, %1165
  %1167 = add nsw i32 %1146, -1
  %1168 = shl i32 1, %1167
  %1169 = sub nsw i32 %1166, %1168
  %1170 = ashr i32 %1169, 31
  %1171 = add nsw i32 %1164, 1
  %1172 = and i32 %1170, %1171
  %1173 = add nsw i32 %1172, %1166
  %1174 = trunc i32 %1173 to i16
  %1175 = sext i32 %1149 to i64
  %1176 = getelementptr inbounds [0 x i32], [0 x i32]* @jpeg_natural_order, i64 0, i64 %1175
  %1177 = load i32, i32* %1176, align 4
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds [64 x i16], [64 x i16]* %1015, i64 0, i64 %1178
  store i16 %1174, i16* %1179, align 2
  br label %1184

1180:                                             ; preds = %1141
  %1181 = icmp eq i32 %1145, 15
  br i1 %1181, label %1182, label %1252

1182:                                             ; preds = %1180
  %1183 = add nsw i32 %1107, 15
  br label %1184

1184:                                             ; preds = %1182, %1157
  %1185 = phi i64 [ %1158, %1157 ], [ %1142, %1182 ]
  %1186 = phi i32 [ %1160, %1157 ], [ %1143, %1182 ]
  %1187 = phi i32 [ %1149, %1157 ], [ %1183, %1182 ]
  %1188 = add nsw i32 %1187, 1
  %1189 = icmp slt i32 %1188, 64
  br i1 %1189, label %1106, label %1252

1190:                                             ; preds = %1096, %1246
  %1191 = phi i32 [ %1250, %1246 ], [ 1, %1096 ]
  %1192 = phi i32 [ %1248, %1246 ], [ %1083, %1096 ]
  %1193 = phi i64 [ %1247, %1246 ], [ %1082, %1096 ]
  %1194 = icmp slt i32 %1192, 8
  br i1 %1194, label %1195, label %1202

1195:                                             ; preds = %1190
  %1196 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %1193, i32 %1192, i32 0) #3
  %1197 = icmp eq i32 %1196, 0
  br i1 %1197, label %1263, label %1198

1198:                                             ; preds = %1195
  %1199 = load i64, i64* %988, align 8
  %1200 = load i32, i32* %1006, align 8
  %1201 = icmp slt i32 %1200, 8
  br i1 %1201, label %1216, label %1202

1202:                                             ; preds = %1198, %1190
  %1203 = phi i64 [ %1199, %1198 ], [ %1193, %1190 ]
  %1204 = phi i32 [ %1200, %1198 ], [ %1192, %1190 ]
  %1205 = add nsw i32 %1204, -8
  %1206 = zext i32 %1205 to i64
  %1207 = lshr i64 %1203, %1206
  %1208 = and i64 %1207, 255
  %1209 = getelementptr inbounds %struct.d_derived_tbl, %struct.d_derived_tbl* %1019, i64 0, i32 3, i64 %1208
  %1210 = load i32, i32* %1209, align 4
  %1211 = ashr i32 %1210, 8
  %1212 = icmp slt i32 %1210, 2304
  br i1 %1212, label %1213, label %1216

1213:                                             ; preds = %1202
  %1214 = sub nsw i32 %1204, %1211
  %1215 = and i32 %1210, 255
  br label %1225

1216:                                             ; preds = %1202, %1198
  %1217 = phi i64 [ %1203, %1202 ], [ %1199, %1198 ]
  %1218 = phi i32 [ %1204, %1202 ], [ %1200, %1198 ]
  %1219 = phi i32 [ %1211, %1202 ], [ 1, %1198 ]
  %1220 = call i32 @jpeg_huff_decode(%struct.bitread_working_state* nonnull %3, i64 %1217, i32 %1218, %struct.d_derived_tbl* %1019, i32 %1219) #3
  %1221 = icmp slt i32 %1220, 0
  br i1 %1221, label %1263, label %1222

1222:                                             ; preds = %1216
  %1223 = load i64, i64* %988, align 8
  %1224 = load i32, i32* %1006, align 8
  br label %1225

1225:                                             ; preds = %1222, %1213
  %1226 = phi i64 [ %1203, %1213 ], [ %1223, %1222 ]
  %1227 = phi i32 [ %1214, %1213 ], [ %1224, %1222 ]
  %1228 = phi i32 [ %1215, %1213 ], [ %1220, %1222 ]
  %1229 = lshr i32 %1228, 4
  %1230 = and i32 %1228, 15
  %1231 = icmp eq i32 %1230, 0
  br i1 %1231, label %1244, label %1232

1232:                                             ; preds = %1225
  %1233 = icmp slt i32 %1227, %1230
  br i1 %1233, label %1234, label %1240

1234:                                             ; preds = %1232
  %1235 = call i32 @jpeg_fill_bit_buffer(%struct.bitread_working_state* nonnull %3, i64 %1226, i32 %1227, i32 %1230) #3
  %1236 = icmp eq i32 %1235, 0
  br i1 %1236, label %1263, label %1237

1237:                                             ; preds = %1234
  %1238 = load i64, i64* %988, align 8
  %1239 = load i32, i32* %1006, align 8
  br label %1240

1240:                                             ; preds = %1237, %1232
  %1241 = phi i64 [ %1238, %1237 ], [ %1226, %1232 ]
  %1242 = phi i32 [ %1239, %1237 ], [ %1227, %1232 ]
  %1243 = sub nsw i32 %1242, %1230
  br label %1246

1244:                                             ; preds = %1225
  %1245 = icmp eq i32 %1229, 15
  br i1 %1245, label %1246, label %1252

1246:                                             ; preds = %1244, %1240
  %1247 = phi i64 [ %1241, %1240 ], [ %1226, %1244 ]
  %1248 = phi i32 [ %1243, %1240 ], [ %1227, %1244 ]
  %1249 = add nsw i32 %1191, 1
  %1250 = add nsw i32 %1249, %1229
  %1251 = icmp slt i32 %1250, 64
  br i1 %1251, label %1190, label %1252

1252:                                             ; preds = %1246, %1244, %1184, %1180
  %1253 = phi i64 [ %1142, %1180 ], [ %1185, %1184 ], [ %1226, %1244 ], [ %1247, %1246 ]
  %1254 = phi i32 [ %1143, %1180 ], [ %1186, %1184 ], [ %1227, %1244 ], [ %1248, %1246 ]
  %1255 = add nuw nsw i64 %1008, 1
  %1256 = load i32, i32* %54, align 8
  %1257 = sext i32 %1256 to i64
  %1258 = icmp slt i64 %1255, %1257
  br i1 %1258, label %1007, label %1259

1259:                                             ; preds = %1252
  %1260 = load i64, i64* %993, align 8
  %1261 = load i64*, i64** %983, align 8
  %1262 = load i64, i64* %996, align 8
  br label %1264

1263:                                             ; preds = %1058, %1021, %1042, %1234, %1195, %1216, %1151, %1111, %1132
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %990) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %987) #3
  br label %1279

1264:                                             ; preds = %982, %1259
  %1265 = phi i64 [ %995, %982 ], [ %1262, %1259 ]
  %1266 = phi i64* [ %985, %982 ], [ %1261, %1259 ]
  %1267 = phi i64 [ %992, %982 ], [ %1260, %1259 ]
  %1268 = phi i64 [ %998, %982 ], [ %1253, %1259 ]
  %1269 = phi i32 [ %1000, %982 ], [ %1254, %1259 ]
  store i64 %1267, i64* %1266, align 8
  %1270 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %50, align 8
  %1271 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %1270, i64 0, i32 1
  store i64 %1265, i64* %1271, align 8
  store i64 %1268, i64* %997, align 8
  store i32 %1269, i32* %999, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1002, i8* nonnull align 4 %990, i64 16, i1 false) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %990) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %987) #3
  br label %1272

1272:                                             ; preds = %1264, %973, %65
  %1273 = load i32, i32* %9, align 8
  %1274 = icmp eq i32 %1273, 0
  br i1 %1274, label %1279, label %1275

1275:                                             ; preds = %1272
  %1276 = getelementptr inbounds %struct.huff_entropy_decoder, %struct.huff_entropy_decoder* %8, i64 0, i32 3
  %1277 = load i32, i32* %1276, align 8
  %1278 = add i32 %1277, -1
  store i32 %1278, i32* %1276, align 8
  br label %1279

1279:                                             ; preds = %1263, %16, %1275, %1272
  %1280 = phi i32 [ 1, %1272 ], [ 1, %1275 ], [ 0, %16 ], [ 0, %1263 ]
  ret i32 %1280
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @add_huff_table(%struct.jpeg_common_struct*, %struct.JHUFF_TBL** nocapture, i8* nocapture readonly, i8* nocapture readonly) unnamed_addr #0 {
  %5 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %1, align 8
  %6 = icmp eq %struct.JHUFF_TBL* %5, null
  br i1 %6, label %7, label %42

7:                                                ; preds = %4
  %8 = tail call %struct.JHUFF_TBL* @jpeg_alloc_huff_table(%struct.jpeg_common_struct* %0) #3
  store %struct.JHUFF_TBL* %8, %struct.JHUFF_TBL** %1, align 8
  %9 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %8, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 1 %2, i64 17, i1 false)
  %10 = getelementptr inbounds i8, i8* %2, i64 1
  %11 = bitcast i8* %10 to <16 x i8>*
  %12 = load <16 x i8>, <16 x i8>* %11, align 1
  %13 = zext <16 x i8> %12 to <16 x i32>
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %14, %13
  %16 = shufflevector <16 x i32> %15, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nuw nsw <16 x i32> %15, %16
  %18 = shufflevector <16 x i32> %17, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = add nuw nsw <16 x i32> %17, %18
  %20 = shufflevector <16 x i32> %19, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %21 = add nuw nsw <16 x i32> %19, %20
  %22 = extractelement <16 x i32> %21, i32 0
  %23 = add nsw i32 %22, -1
  %24 = icmp ugt i32 %23, 255
  br i1 %24, label %25, label %32

25:                                               ; preds = %7
  %26 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %27 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %26, align 8
  %28 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %27, i64 0, i32 5
  store i32 8, i32* %28, align 8
  %29 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %26, align 8
  %30 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %29, i64 0, i32 0
  %31 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %30, align 8
  tail call void %31(%struct.jpeg_common_struct* %0) #3
  br label %32

32:                                               ; preds = %7, %25
  %33 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %1, align 8
  %34 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %33, i64 0, i32 1, i64 0
  %35 = zext i32 %22 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %3, i64 %35, i1 false)
  %36 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %1, align 8
  %37 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %36, i64 0, i32 1, i64 %35
  %38 = sub nsw i32 256, %22
  %39 = sext i32 %38 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 0, i64 %39, i1 false)
  %40 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %1, align 8
  %41 = getelementptr inbounds %struct.JHUFF_TBL, %struct.JHUFF_TBL* %40, i64 0, i32 2
  store i32 0, i32* %41, align 4
  br label %42

42:                                               ; preds = %4, %32
  ret void
}

declare %struct.JHUFF_TBL* @jpeg_alloc_huff_table(%struct.jpeg_common_struct*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
