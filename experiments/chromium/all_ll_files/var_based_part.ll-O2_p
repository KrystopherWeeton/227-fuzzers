; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/var_based_part.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/var_based_part.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.mv = type { i16, i16 }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.BUFFER_SET = type { [3 x i8*], [3 x i32] }

@.str = private unnamed_addr constant [22 x i8] c"Failed to allocate vt\00", align 1
@AV1_VAR_OFFS = external constant [0 x i8], align 1
@setup_planes.dummy_mv = internal constant %struct.mv zeroinitializer, align 2
@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@mi_size_high = internal unnamed_addr constant [22 x i8] c"\01\02\01\02\04\02\04\08\04\08\10\08\10 \10 \04\01\08\02\10\04", align 16
@subsize_lookup = internal unnamed_addr constant [10 x [6 x i8]] [[6 x i8] c"\00\03\06\09\0C\0F", [6 x i8] c"\FF\02\05\08\0B\0E", [6 x i8] c"\FF\01\04\07\0A\0D", [6 x i8] c"\FF\00\03\06\09\0C", [6 x i8] c"\FF\FF\05\08\0B\0E", [6 x i8] c"\FF\FF\05\08\0B\0E", [6 x i8] c"\FF\FF\04\07\0A\0D", [6 x i8] c"\FF\FF\04\07\0A\0D", [6 x i8] c"\FF\FF\11\13\15\FF", [6 x i8] c"\FF\FF\10\12\14\FF"], align 16
@ss_size_lookup = internal unnamed_addr constant [22 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\FF\00"], [2 x [2 x i8]] [[2 x i8] c"\02\FF", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\04\03", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\05\FF", [2 x i8] c"\03\02"], [2 x [2 x i8]] [[2 x i8] c"\06\05", [2 x i8] c"\04\03"], [2 x [2 x i8]] [[2 x i8] c"\07\06", [2 x i8] c"\FF\04"], [2 x [2 x i8]] [[2 x i8] c"\08\FF", [2 x i8] c"\06\05"], [2 x [2 x i8]] [[2 x i8] c"\09\08", [2 x i8] c"\07\06"], [2 x [2 x i8]] [[2 x i8] c"\0A\09", [2 x i8] c"\FF\07"], [2 x [2 x i8]] [[2 x i8] c"\0B\FF", [2 x i8] c"\09\08"], [2 x [2 x i8]] [[2 x i8] c"\0C\0B", [2 x i8] c"\0A\09"], [2 x [2 x i8]] [[2 x i8] c"\0D\0C", [2 x i8] c"\FF\0A"], [2 x [2 x i8]] [[2 x i8] c"\0E\FF", [2 x i8] c"\0C\0B"], [2 x [2 x i8]] [[2 x i8] c"\0F\0E", [2 x i8] c"\0D\0C"], [2 x [2 x i8]] [[2 x i8] c"\10\01", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\11\FF", [2 x i8] c"\02\02"], [2 x [2 x i8]] [[2 x i8] c"\12\04", [2 x i8] c"\FF\10"], [2 x [2 x i8]] [[2 x i8] c"\13\FF", [2 x i8] c"\05\11"], [2 x [2 x i8]] [[2 x i8] c"\14\07", [2 x i8] c"\FF\12"], [2 x [2 x i8]] [[2 x i8] c"\15\FF", [2 x i8] c"\08\13"]], align 16
@set_low_temp_var_flag_128x128.idx64 = internal unnamed_addr constant [4 x [2 x i32]] [[2 x i32] zeroinitializer, [2 x i32] [i32 0, i32 16], [2 x i32] [i32 16, i32 0], [2 x i32] [i32 16, i32 16]], align 16
@set_low_temp_var_flag_128x128.idx32 = internal unnamed_addr constant [4 x [2 x i32]] [[2 x i32] zeroinitializer, [2 x i32] [i32 0, i32 8], [2 x i32] [i32 8, i32 0], [2 x i32] [i32 8, i32 8]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_set_variance_partition_thresholds(%struct.AV1_COMP*, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 4, i32 0
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 2
  br i1 %6, label %7, label %13

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 59, i32 0, i64 0
  tail call fastcc void @set_vbp_thresholds(%struct.AV1_COMP* %0, i64* %8, i32 %1, i32 %2, i32 0, i32 0)
  %9 = ashr i32 %1, 3
  %10 = add nsw i32 %9, 15
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 59, i32 1
  store i64 %11, i64* %12, align 8
  br label %13

13:                                               ; preds = %3, %7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @set_vbp_thresholds(%struct.AV1_COMP*, i64*, i32, i32, i32, i32) unnamed_addr #2 {
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %8 = load i8, i8* %7, align 16
  %9 = and i8 %8, -3
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 120, i64 1
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 1, i32 0, i64 %12, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = sext i16 %14 to i64
  %16 = mul nsw i64 %11, %15
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 0
  %18 = load i32, i32* %17, align 16
  br i1 %10, label %19, label %39

19:                                               ; preds = %6
  store i64 %16, i64* %1, align 8
  %20 = getelementptr inbounds i64, i64* %1, i64 1
  store i64 %16, i64* %20, align 8
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %22 = load i32, i32* %21, align 16
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = mul nsw i32 %24, %22
  %26 = icmp slt i32 %25, 921600
  br i1 %26, label %27, label %30

27:                                               ; preds = %19
  %28 = sdiv i64 %16, 3
  %29 = ashr i64 %16, 1
  br label %32

30:                                               ; preds = %19
  %31 = ashr i64 %16, 2
  br label %32

32:                                               ; preds = %30, %27
  %33 = phi i64 [ %31, %30 ], [ %28, %27 ]
  %34 = phi i64 [ %31, %30 ], [ %29, %27 ]
  %35 = getelementptr inbounds i64, i64* %1, i64 2
  store i64 %33, i64* %35, align 8
  %36 = getelementptr inbounds i64, i64* %1, i64 3
  store i64 %34, i64* %36, align 8
  %37 = shl nsw i64 %16, 2
  %38 = getelementptr inbounds i64, i64* %1, i64 4
  store i64 %37, i64* %38, align 8
  br label %268

39:                                               ; preds = %6
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82
  %41 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %40, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp ne i32 %42, 0
  %44 = icmp ne i32 %3, 0
  %45 = and i1 %44, %43
  br i1 %45, label %46, label %69

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %48 = load i32, i32* %47, align 16
  %49 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = mul nsw i32 %50, %48
  %52 = icmp sgt i32 %51, 307200
  br i1 %52, label %53, label %69

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 4
  %55 = load i32, i32* %54, align 4
  %56 = icmp ugt i32 %55, 60
  br i1 %56, label %57, label %69

57:                                               ; preds = %53
  %58 = tail call i32 @av1_noise_estimate_extract_level(%struct.noise_estimate* %40) #4
  switch i32 %58, label %69 [
    i32 3, label %59
    i32 2, label %62
  ]

59:                                               ; preds = %57
  %60 = mul nsw i64 %16, 5
  %61 = ashr i64 %60, 1
  br label %69

62:                                               ; preds = %57
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 23
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %62
  %67 = mul nsw i64 %16, 5
  %68 = ashr i64 %67, 2
  br label %69

69:                                               ; preds = %59, %66, %62, %57, %53, %46, %39
  %70 = phi i64 [ %16, %53 ], [ %16, %46 ], [ %16, %39 ], [ %61, %59 ], [ %16, %62 ], [ %68, %66 ], [ %16, %57 ]
  %71 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 30
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 5
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 0
  %78 = mul nsw i64 %70, 3
  %79 = ashr i64 %78, 1
  %80 = select i1 %77, i64 %70, i64 %79
  %81 = icmp sgt i32 %72, 7
  %82 = mul nsw i64 %80, 5
  %83 = ashr i64 %82, 2
  %84 = select i1 %81, i64 %83, i64 %80
  %85 = ashr i64 %84, 1
  store i64 %85, i64* %1, align 8
  %86 = getelementptr inbounds i64, i64* %1, i64 1
  store i64 %84, i64* %86, align 8
  %87 = load i32, i32* %71, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 %84, %88
  %90 = getelementptr inbounds i64, i64* %1, i64 3
  store i64 %89, i64* %90, align 8
  %91 = load i32, i32* %73, align 16
  %92 = icmp sgt i32 %91, 1279
  br i1 %92, label %93, label %99

93:                                               ; preds = %69
  %94 = load i32, i32* %74, align 4
  %95 = icmp sgt i32 %94, 719
  br i1 %95, label %96, label %103

96:                                               ; preds = %93
  %97 = shl i64 %89, 1
  store i64 %97, i64* %90, align 8
  %98 = load i32, i32* %73, align 16
  br label %99

99:                                               ; preds = %69, %96
  %100 = phi i64 [ %89, %69 ], [ %97, %96 ]
  %101 = phi i32 [ %91, %69 ], [ %98, %96 ]
  %102 = load i32, i32* %74, align 4
  br label %103

103:                                              ; preds = %99, %93
  %104 = phi i64 [ %100, %99 ], [ %89, %93 ]
  %105 = phi i32 [ %102, %99 ], [ %94, %93 ]
  %106 = phi i32 [ %101, %99 ], [ %91, %93 ]
  %107 = mul nsw i32 %106, %105
  %108 = icmp slt i32 %107, 101377
  br i1 %108, label %109, label %147

109:                                              ; preds = %103
  %110 = icmp sgt i32 %18, 219
  br i1 %110, label %111, label %118

111:                                              ; preds = %109
  %112 = mul nsw i64 %84, 5
  %113 = ashr i64 %112, 1
  %114 = ashr i64 %112, 4
  store i64 %114, i64* %86, align 8
  %115 = shl i64 %113, 2
  %116 = getelementptr inbounds i64, i64* %1, i64 2
  store i64 %115, i64* %116, align 8
  %117 = shl i64 %113, 5
  store i64 %117, i64* %90, align 8
  br label %166

118:                                              ; preds = %109
  %119 = icmp slt i32 %18, 200
  br i1 %119, label %120, label %124

120:                                              ; preds = %118
  %121 = ashr i64 %84, 3
  store i64 %121, i64* %86, align 8
  %122 = getelementptr inbounds i64, i64* %1, i64 2
  store i64 %85, i64* %122, align 8
  %123 = shl i64 %84, 3
  store i64 %123, i64* %90, align 8
  br label %166

124:                                              ; preds = %118
  %125 = add nsw i32 %18, -200
  %126 = sext i32 %125 to i64
  %127 = sub nuw nsw i32 220, %18
  %128 = sext i32 %127 to i64
  %129 = mul nsw i64 %84, 5
  %130 = ashr i64 %129, 1
  %131 = mul nsw i64 %130, %126
  %132 = mul nsw i64 %84, %128
  %133 = add nsw i64 %131, %132
  %134 = sdiv i64 %133, 20
  %135 = ashr i64 %134, 3
  store i64 %135, i64* %86, align 8
  %136 = mul nsw i64 %134, %126
  %137 = ashr i64 %134, 1
  %138 = mul nsw i64 %137, %128
  %139 = add nsw i64 %138, %136
  %140 = sdiv i64 %139, 20
  %141 = getelementptr inbounds i64, i64* %1, i64 2
  store i64 %140, i64* %141, align 8
  %142 = shl nsw i64 %126, 5
  %143 = shl nsw i64 %128, 3
  %144 = add nuw nsw i64 %142, %143
  %145 = mul i64 %144, %134
  %146 = sdiv i64 %145, 20
  store i64 %146, i64* %90, align 8
  br label %166

147:                                              ; preds = %103
  %148 = icmp slt i32 %106, 1280
  %149 = icmp slt i32 %105, 720
  %150 = and i1 %149, %148
  br i1 %150, label %151, label %155

151:                                              ; preds = %147
  %152 = mul nsw i64 %84, 5
  %153 = ashr i64 %152, 2
  %154 = getelementptr inbounds i64, i64* %1, i64 2
  store i64 %153, i64* %154, align 8
  br label %166

155:                                              ; preds = %147
  %156 = icmp slt i32 %106, 1920
  %157 = icmp slt i32 %105, 1080
  %158 = and i1 %157, %156
  br i1 %158, label %159, label %162

159:                                              ; preds = %155
  %160 = shl i64 %84, 1
  %161 = getelementptr inbounds i64, i64* %1, i64 2
  store i64 %160, i64* %161, align 8
  br label %166

162:                                              ; preds = %155
  %163 = mul nsw i64 %84, 5
  %164 = ashr i64 %163, 1
  %165 = getelementptr inbounds i64, i64* %1, i64 2
  store i64 %164, i64* %165, align 8
  br label %166

166:                                              ; preds = %151, %162, %159, %111, %124, %120
  %167 = phi i64 [ %104, %151 ], [ %104, %162 ], [ %104, %159 ], [ %117, %111 ], [ %146, %124 ], [ %123, %120 ]
  %168 = phi i64 [ %153, %151 ], [ %164, %162 ], [ %160, %159 ], [ %115, %111 ], [ %140, %124 ], [ %85, %120 ]
  %169 = phi i64 [ %84, %151 ], [ %84, %162 ], [ %84, %159 ], [ %114, %111 ], [ %135, %124 ], [ %121, %120 ]
  %170 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 23
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %268, label %173

173:                                              ; preds = %166
  %174 = icmp slt i32 %18, 80
  br i1 %174, label %182, label %175

175:                                              ; preds = %173
  %176 = icmp sgt i32 %18, 120
  br i1 %176, label %182, label %177

177:                                              ; preds = %175
  %178 = add nsw i32 %18, -80
  %179 = sdiv i32 %178, 40
  %180 = sitofp i32 %179 to double
  %181 = fsub double 1.000000e+00, %180
  br label %182

182:                                              ; preds = %175, %173, %177
  %183 = phi double [ %181, %177 ], [ 1.000000e+00, %173 ], [ 0.000000e+00, %175 ]
  %184 = load i32, i32* %73, align 16
  %185 = load i32, i32* %74, align 4
  %186 = mul nsw i32 %185, %184
  %187 = icmp sgt i32 %186, 307200
  br i1 %187, label %188, label %197

188:                                              ; preds = %182
  %189 = and i64 %84, -2
  store i64 %189, i64* %1, align 8
  %190 = shl i64 %169, 1
  store i64 %190, i64* %86, align 8
  %191 = getelementptr inbounds i64, i64* %1, i64 2
  %192 = shl i64 %168, 1
  store i64 %192, i64* %191, align 8
  %193 = shl i64 %167, 1
  store i64 %193, i64* %90, align 8
  %194 = load i32, i32* %73, align 16
  %195 = load i32, i32* %74, align 4
  %196 = mul nsw i32 %195, %194
  br label %197

197:                                              ; preds = %188, %182
  %198 = phi i32 [ %196, %188 ], [ %186, %182 ]
  %199 = phi i64 [ %189, %188 ], [ %85, %182 ]
  %200 = phi i64 [ %192, %188 ], [ %168, %182 ]
  %201 = phi i64 [ %190, %188 ], [ %169, %182 ]
  %202 = icmp slt i32 %198, 101377
  br i1 %202, label %203, label %207

203:                                              ; preds = %197
  %204 = shl i64 %201, 2
  store i64 %204, i64* %86, align 8
  %205 = getelementptr inbounds i64, i64* %1, i64 2
  %206 = shl i64 %200, 5
  store i64 %206, i64* %205, align 8
  store i64 2147483647, i64* %90, align 8
  br label %268

207:                                              ; preds = %197
  %208 = icmp sgt i32 %198, 307200
  %209 = icmp eq i32 %5, 0
  %210 = and i1 %209, %208
  br i1 %210, label %211, label %240

211:                                              ; preds = %207
  %212 = icmp eq i32 %4, 3
  br i1 %212, label %213, label %217

213:                                              ; preds = %211
  %214 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 19
  %215 = load i64, i64* %214, align 8
  %216 = icmp ugt i64 %215, 50000
  br i1 %216, label %217, label %240

217:                                              ; preds = %211, %213
  %218 = mul nsw i64 %199, 3
  %219 = ashr i64 %218, 1
  store i64 %219, i64* %1, align 8
  store i64 2147483647, i64* %90, align 8
  %220 = icmp sgt i32 %18, 100
  br i1 %220, label %221, label %268

221:                                              ; preds = %217
  %222 = fsub double 1.000000e+00, %183
  %223 = shl i64 %201, 1
  %224 = sitofp i64 %223 to double
  %225 = fmul double %222, %224
  %226 = sitofp i64 %201 to double
  %227 = fmul double %183, %226
  %228 = fadd double %227, %225
  %229 = fptosi double %228 to i32
  %230 = sext i32 %229 to i64
  store i64 %230, i64* %86, align 8
  %231 = getelementptr inbounds i64, i64* %1, i64 2
  %232 = shl i64 %200, 1
  %233 = sitofp i64 %232 to double
  %234 = fmul double %222, %233
  %235 = sitofp i64 %200 to double
  %236 = fmul double %183, %235
  %237 = fadd double %236, %234
  %238 = fptosi double %237 to i32
  %239 = sext i32 %238 to i64
  store i64 %239, i64* %231, align 8
  br label %268

240:                                              ; preds = %213, %207
  %241 = icmp sgt i32 %18, 100
  %242 = and i1 %209, %241
  br i1 %242, label %243, label %268

243:                                              ; preds = %240
  %244 = icmp eq i32 %4, 3
  br i1 %244, label %245, label %249

245:                                              ; preds = %243
  %246 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 19
  %247 = load i64, i64* %246, align 8
  %248 = icmp ugt i64 %247, 50000
  br i1 %248, label %249, label %268

249:                                              ; preds = %243, %245
  %250 = fsub double 1.000000e+00, %183
  %251 = shl i64 %201, 2
  %252 = sitofp i64 %251 to double
  %253 = fmul double %250, %252
  %254 = sitofp i64 %201 to double
  %255 = fmul double %183, %254
  %256 = fadd double %255, %253
  %257 = fptosi double %256 to i32
  %258 = sext i32 %257 to i64
  store i64 %258, i64* %86, align 8
  %259 = getelementptr inbounds i64, i64* %1, i64 2
  %260 = shl i64 %200, 4
  %261 = sitofp i64 %260 to double
  %262 = fmul double %250, %261
  %263 = sitofp i64 %200 to double
  %264 = fmul double %183, %263
  %265 = fadd double %264, %262
  %266 = fptosi double %265 to i32
  %267 = sext i32 %266 to i64
  store i64 %267, i64* %259, align 8
  store i64 2147483647, i64* %90, align 8
  br label %268

268:                                              ; preds = %203, %240, %245, %249, %217, %221, %166, %32
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_choose_var_based_partitioning(%struct.AV1_COMP*, %struct.TileInfo* nocapture readonly, %struct.ThreadData* nocapture readonly, %struct.macroblock*, i32, i32) local_unnamed_addr #0 {
  %7 = alloca [85 x i8], align 16
  %8 = alloca [4 x [4 x i32]], align 16
  %9 = alloca [4 x [4 x i32]], align 16
  %10 = alloca [4 x [4 x i32]], align 16
  %11 = alloca [5 x i64], align 16
  %12 = alloca [64 x i32], align 16
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 59, i32 0, i64 0
  %16 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 85, i8* nonnull %16) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 85, i1 false)
  %17 = bitcast [4 x [4 x i32]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %17) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 64, i1 false)
  %18 = bitcast [4 x [4 x i32]]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 64, i1 false)
  %19 = bitcast [4 x [4 x i32]]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %19) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 64, i1 false)
  %20 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %13, i64 0, i32 0, i32 0
  %21 = load i8, i8* %20, align 16
  %22 = and i8 %21, -3
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %6
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %26 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %25, align 16
  %27 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %26, i64 0, i32 16
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %37, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %33, i32 21
  %35 = load i32, i32* %34, align 8
  %36 = icmp ne i32 %35, 0
  br label %37

37:                                               ; preds = %6, %24, %30
  %38 = phi i1 [ true, %6 ], [ false, %24 ], [ %36, %30 ]
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %40 = load %struct.SequenceHeader*, %struct.SequenceHeader** %39, align 16
  %41 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %40, i64 0, i32 7
  %42 = load i8, i8* %41, align 4
  %43 = icmp eq i8 %42, 12
  %44 = select i1 %43, i64 12, i64 15
  %45 = tail call i8* @aom_malloc(i64 88) #4
  %46 = icmp ne i8* %45, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %37
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %49 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %48, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %49, i32 2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0)) #4
  br label %50

50:                                               ; preds = %47, %37
  %51 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %2, i64 0, i32 19
  %52 = bitcast %struct.VP64x64** %51 to i64*
  %53 = load i64, i64* %52, align 16
  %54 = getelementptr inbounds i8, i8* %45, i64 80
  %55 = bitcast i8* %54 to %struct.VP64x64**
  %56 = bitcast i8* %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = bitcast [5 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %57) #4
  %58 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 0
  %59 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 1
  %60 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 2
  %61 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 3
  %62 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 4
  %63 = bitcast i64* %15 to <2 x i64>*
  %64 = load <2 x i64>, <2 x i64>* %63, align 8
  %65 = bitcast [5 x i64]* %11 to <2 x i64>*
  store <2 x i64> %64, <2 x i64>* %65, align 16
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 59, i32 0, i64 2
  %67 = bitcast i64* %66 to <2 x i64>*
  %68 = load <2 x i64>, <2 x i64>* %67, align 8
  %69 = bitcast i64* %60 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %69, align 16
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 59, i32 0, i64 4
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %62, align 16
  %72 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %73 = bitcast [64 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %73) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %73, i8 -86, i64 256, i1 false)
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 6
  %75 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %74, align 8
  %76 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %75, align 8
  %77 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %76, i64 0, i32 28
  %78 = load i16, i16* %77, align 1
  %79 = and i16 %78, 7
  %80 = zext i16 %79 to i32
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 5
  %82 = load i8, i8* %81, align 8
  %83 = icmp eq i8 %82, 3
  br i1 %83, label %84, label %104

84:                                               ; preds = %50
  %85 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23
  %86 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %85, i64 0, i32 0
  %87 = load i8, i8* %86, align 8
  %88 = icmp eq i8 %87, 0
  %89 = add nsw i32 %80, -1
  %90 = icmp ugt i32 %89, 1
  %91 = or i1 %90, %88
  br i1 %91, label %104, label %92

92:                                               ; preds = %84
  %93 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 7
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %104, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 0
  %98 = load i32, i32* %97, align 16
  %99 = tail call i32 @av1_get_qindex(%struct.segmentation* %85, i32 %80, i32 %98) #4
  %100 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 31, i32 2
  %101 = load i32, i32* %100, align 8
  %102 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 31, i32 0
  %103 = load i32, i32* %102, align 8
  call fastcc void @set_vbp_thresholds(%struct.AV1_COMP* %0, i64* nonnull %58, i32 %99, i32 %101, i32 %103, i32 1)
  br label %111

104:                                              ; preds = %92, %84, %50
  %105 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 0
  %106 = load i32, i32* %105, align 16
  %107 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 31, i32 2
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 31, i32 0
  %110 = load i32, i32* %109, align 8
  call fastcc void @set_vbp_thresholds(%struct.AV1_COMP* %0, i64* nonnull %58, i32 %106, i32 %108, i32 %110, i32 0)
  br label %111

111:                                              ; preds = %104, %96
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 0, i64 0, i32 6, i32 0
  %113 = load i8*, i8** %112, align 16
  %114 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 0, i64 0, i32 6, i32 4
  %115 = load i32, i32* %114, align 8
  store i8 0, i8* %16, align 16
  %116 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %116, i8 0, i64 105, i1 false)
  %117 = load i8, i8* %20, align 16
  %118 = and i8 %117, -3
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %144, label %120

120:                                              ; preds = %111
  %121 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, -1
  br i1 %123, label %320, label %124

124:                                              ; preds = %120
  %125 = sext i32 %122 to i64
  %126 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %125
  %127 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %126, align 8
  %128 = icmp eq %struct.RefCntBuffer* %127, null
  %129 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %127, i64 0, i32 17
  %130 = icmp eq %struct.yv12_buffer_config* %129, null
  %131 = or i1 %128, %130
  br i1 %131, label %320, label %132

132:                                              ; preds = %124
  %133 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %127, i64 0, i32 17, i32 3, i32 0, i32 0
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %134, %136
  br i1 %137, label %138, label %320

138:                                              ; preds = %132
  %139 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %127, i64 0, i32 17, i32 2, i32 0, i32 0
  %140 = load i32, i32* %139, align 8
  %141 = load i32, i32* %72, align 16
  %142 = icmp ne i32 %140, %141
  %143 = or i1 %38, %142
  br i1 %143, label %320, label %148

144:                                              ; preds = %111
  br i1 %38, label %320, label %145

145:                                              ; preds = %144
  %146 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %147 = load i32, i32* %146, align 4
  br label %148

148:                                              ; preds = %145, %138
  %149 = phi i32 [ %147, %145 ], [ %122, %138 ]
  %150 = load %struct.SequenceHeader*, %struct.SequenceHeader** %39, align 16
  %151 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %150, i64 0, i32 27
  %152 = load i8, i8* %151, align 1
  %153 = icmp eq i8 %152, 0
  %154 = select i1 %153, i32 3, i32 1
  %155 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %150, i64 0, i32 7
  %156 = load i8, i8* %155, align 4
  %157 = icmp eq i8 %156, 12
  %158 = select i1 %157, i8 12, i8 15
  %159 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %74, align 8
  %160 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %159, align 8
  %161 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %162 = icmp eq i32 %149, -1
  br i1 %162, label %167, label %163

163:                                              ; preds = %148
  %164 = sext i32 %149 to i64
  %165 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %164
  %166 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %165, align 8
  br label %167

167:                                              ; preds = %163, %148
  %168 = phi %struct.RefCntBuffer* [ %166, %163 ], [ null, %148 ]
  %169 = icmp eq %struct.RefCntBuffer* %168, null
  %170 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %168, i64 0, i32 17
  %171 = select i1 %169, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %170
  %172 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %173 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %172, align 16
  %174 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %173, i64 0, i32 16
  %175 = load i32, i32* %174, align 8
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %213

177:                                              ; preds = %167
  %178 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 38
  %179 = load i32, i32* %178, align 8
  %180 = and i32 %179, 8
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %213, label %182

182:                                              ; preds = %177
  %183 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 7
  %184 = load i32, i32* %183, align 4
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %213, label %186

186:                                              ; preds = %182
  %187 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 3
  %188 = load i32, i32* %187, align 4
  %189 = icmp eq i32 %188, -1
  br i1 %189, label %213, label %190

190:                                              ; preds = %186
  %191 = sext i32 %188 to i64
  %192 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %191
  %193 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %192, align 8
  %194 = icmp eq %struct.RefCntBuffer* %193, null
  %195 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %193, i64 0, i32 17
  %196 = select i1 %194, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %195
  br i1 %194, label %213, label %197

197:                                              ; preds = %190
  %198 = icmp eq %struct.yv12_buffer_config* %196, %171
  br i1 %198, label %213, label %199

199:                                              ; preds = %197
  %200 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %191
  call void @av1_setup_pre_planes(%struct.macroblockd* %14, i32 0, %struct.yv12_buffer_config* nonnull %196, i32 %4, i32 %5, %struct.scale_factors* %200, i32 %154) #4
  %201 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %172, align 16
  %202 = zext i8 %158 to i64
  %203 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %201, i64 0, i32 21, i64 %202, i32 0
  %204 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %203, align 8
  %205 = load i8*, i8** %112, align 16
  %206 = load i32, i32* %114, align 8
  %207 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 0, i32 4, i64 0, i32 0
  %208 = load i8*, i8** %207, align 16
  %209 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 0, i32 4, i64 0, i32 4
  %210 = load i32, i32* %209, align 8
  %211 = call i32 %204(i8* %205, i32 %206, i8* %208, i32 %210) #4
  %212 = load i32, i32* %161, align 4
  br label %213

213:                                              ; preds = %186, %199, %197, %190, %182, %177, %167
  %214 = phi i32 [ -1, %177 ], [ -1, %182 ], [ -1, %190 ], [ -1, %197 ], [ %211, %199 ], [ -1, %167 ], [ -1, %186 ]
  %215 = phi i32 [ %149, %177 ], [ %149, %182 ], [ %149, %190 ], [ %149, %197 ], [ %212, %199 ], [ %149, %167 ], [ %149, %186 ]
  %216 = phi %struct.yv12_buffer_config* [ null, %177 ], [ null, %182 ], [ null, %190 ], [ %171, %197 ], [ %195, %199 ], [ null, %167 ], [ null, %186 ]
  %217 = icmp eq i32 %215, -1
  %218 = sext i32 %215 to i64
  %219 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %218
  %220 = select i1 %217, %struct.scale_factors* null, %struct.scale_factors* %219
  call void @av1_setup_pre_planes(%struct.macroblockd* %14, i32 0, %struct.yv12_buffer_config* %171, i32 %4, i32 %5, %struct.scale_factors* %220, i32 %154) #4
  %221 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %160, i64 0, i32 6, i64 0
  store i8 1, i8* %221, align 8
  %222 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %160, i64 0, i32 6, i64 1
  store i8 -1, i8* %222, align 1
  %223 = load %struct.SequenceHeader*, %struct.SequenceHeader** %39, align 16
  %224 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %223, i64 0, i32 7
  %225 = load i8, i8* %224, align 4
  %226 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %160, i64 0, i32 0
  store i8 %225, i8* %226, align 8
  %227 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %160, i64 0, i32 5, i64 0, i32 0
  store i32 0, i32* %227, align 8
  %228 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %160, i64 0, i32 8, i32 0
  store i32 196611, i32* %228, align 4
  %229 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 2
  %230 = load i32, i32* %229, align 8
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %246, label %232

232:                                              ; preds = %213
  %233 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 18
  %234 = load i32, i32* %233, align 8
  %235 = icmp sgt i32 %234, -1
  br i1 %235, label %236, label %246

236:                                              ; preds = %232
  %237 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 20
  %238 = load i32, i32* %237, align 16
  %239 = icmp sgt i32 %238, -1
  br i1 %239, label %240, label %246

240:                                              ; preds = %236
  %241 = load %struct.SequenceHeader*, %struct.SequenceHeader** %39, align 16
  %242 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %241, i64 0, i32 7
  %243 = load i8, i8* %242, align 4
  %244 = call i32 @av1_int_pro_motion_estimation(%struct.AV1_COMP* %0, %struct.macroblock* %3, i8 zeroext %243, i32 %4, i32 %5, %struct.mv* nonnull @setup_planes.dummy_mv) #4
  %245 = icmp eq i32 %244, -1
  br i1 %245, label %246, label %258

246:                                              ; preds = %213, %232, %236, %240
  %247 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %172, align 16
  %248 = zext i8 %158 to i64
  %249 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %247, i64 0, i32 21, i64 %248, i32 0
  %250 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %249, align 8
  %251 = load i8*, i8** %112, align 16
  %252 = load i32, i32* %114, align 8
  %253 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 0, i32 4, i64 0, i32 0
  %254 = load i8*, i8** %253, align 16
  %255 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 0, i32 4, i64 0, i32 4
  %256 = load i32, i32* %255, align 8
  %257 = call i32 %250(i8* %251, i32 %252, i8* %254, i32 %256) #4
  br label %258

258:                                              ; preds = %246, %240
  %259 = phi i32 [ %257, %246 ], [ %244, %240 ]
  %260 = uitofp i32 %214 to double
  %261 = uitofp i32 %259 to double
  %262 = fmul double %261, 9.000000e-01
  %263 = fcmp ogt double %262, %260
  br i1 %263, label %264, label %271

264:                                              ; preds = %258
  %265 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 3
  %266 = load i32, i32* %265, align 4
  %267 = icmp eq i32 %266, -1
  %268 = sext i32 %266 to i64
  %269 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %268
  %270 = select i1 %267, %struct.scale_factors* null, %struct.scale_factors* %269
  call void @av1_setup_pre_planes(%struct.macroblockd* %14, i32 0, %struct.yv12_buffer_config* %216, i32 %4, i32 %5, %struct.scale_factors* %270, i32 %154) #4
  store i8 4, i8* %221, align 8
  store i32 0, i32* %227, align 8
  br label %274

271:                                              ; preds = %258
  %272 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 6
  %273 = load i32, i32* %272, align 8
  br label %274

274:                                              ; preds = %271, %264
  %275 = phi i32 [ %214, %264 ], [ %259, %271 ]
  %276 = phi i8 [ 4, %264 ], [ 1, %271 ]
  %277 = phi i32 [ 0, %264 ], [ %273, %271 ]
  %278 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 37
  store i32 %277, i32* %278, align 16
  %279 = load i8, i8* %221, align 8
  %280 = load i8, i8* %222, align 1
  %281 = icmp sgt i8 %279, 1
  %282 = select i1 %281, i8 %279, i8 1
  %283 = add nsw i8 %282, -1
  %284 = icmp ult i8 %283, 8
  br i1 %284, label %285, label %293

285:                                              ; preds = %274
  %286 = zext i8 %282 to i64
  %287 = add nsw i64 %286, -1
  %288 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %287
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, -1
  %291 = sext i32 %289 to i64
  %292 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %291
  br i1 %290, label %293, label %294

293:                                              ; preds = %285, %274
  br label %294

294:                                              ; preds = %293, %285
  %295 = phi %struct.scale_factors* [ null, %293 ], [ %292, %285 ]
  %296 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 21, i64 0
  store %struct.scale_factors* %295, %struct.scale_factors** %296, align 8
  %297 = icmp sgt i8 %280, 1
  %298 = select i1 %297, i8 %280, i8 1
  %299 = add nsw i8 %298, -1
  %300 = icmp ult i8 %299, 8
  br i1 %300, label %301, label %309

301:                                              ; preds = %294
  %302 = zext i8 %298 to i64
  %303 = add nsw i64 %302, -1
  %304 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %303
  %305 = load i32, i32* %304, align 4
  %306 = icmp eq i32 %305, -1
  %307 = sext i32 %305 to i64
  %308 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %307
  br i1 %306, label %309, label %310

309:                                              ; preds = %301, %294
  br label %310

310:                                              ; preds = %301, %309
  %311 = phi %struct.scale_factors* [ null, %309 ], [ %308, %301 ]
  %312 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 21, i64 1
  store %struct.scale_factors* %311, %struct.scale_factors** %312, align 8
  %313 = load %struct.SequenceHeader*, %struct.SequenceHeader** %39, align 16
  %314 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %313, i64 0, i32 7
  %315 = load i8, i8* %314, align 4
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %13, %struct.macroblockd* %14, i32 %4, i32 %5, %struct.BUFFER_SET* null, i8 zeroext %315, i32 0, i32 0) #4
  %316 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 0, i32 3, i32 0
  %317 = load i8*, i8** %316, align 16
  %318 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  %319 = load i32, i32* %318, align 8
  br label %320

320:                                              ; preds = %120, %138, %132, %124, %144, %310
  %321 = phi i1 [ true, %144 ], [ false, %310 ], [ true, %124 ], [ true, %132 ], [ true, %138 ], [ true, %120 ]
  %322 = phi i32 [ 1, %144 ], [ 0, %310 ], [ 1, %124 ], [ 1, %132 ], [ 1, %138 ], [ 1, %120 ]
  %323 = phi i32 [ -1, %144 ], [ %275, %310 ], [ -1, %124 ], [ -1, %132 ], [ -1, %138 ], [ -1, %120 ]
  %324 = phi i8 [ 1, %144 ], [ %276, %310 ], [ 1, %124 ], [ 1, %132 ], [ 1, %138 ], [ 1, %120 ]
  %325 = phi i8* [ getelementptr inbounds ([0 x i8], [0 x i8]* @AV1_VAR_OFFS, i64 0, i64 0), %144 ], [ %317, %310 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @AV1_VAR_OFFS, i64 0, i64 0), %124 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @AV1_VAR_OFFS, i64 0, i64 0), %132 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @AV1_VAR_OFFS, i64 0, i64 0), %138 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @AV1_VAR_OFFS, i64 0, i64 0), %120 ]
  %326 = phi i32 [ 0, %144 ], [ %319, %310 ], [ 0, %124 ], [ 0, %132 ], [ 0, %138 ], [ 0, %120 ]
  %327 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82
  %328 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %327, i64 0, i32 0
  %329 = load i32, i32* %328, align 8
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %333, label %331

331:                                              ; preds = %320
  %332 = call i32 @av1_noise_estimate_extract_level(%struct.noise_estimate* %327) #4
  br label %333

333:                                              ; preds = %331, %320
  %334 = phi i32 [ %332, %331 ], [ 1, %320 ]
  %335 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %336 = load i8, i8* %335, align 16
  %337 = and i8 %336, -3
  %338 = icmp eq i8 %337, 0
  %339 = load %struct.SequenceHeader*, %struct.SequenceHeader** %39, align 16
  %340 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %339, i64 0, i32 7
  %341 = load i8, i8* %340, align 4
  %342 = icmp eq i8 %341, 12
  %343 = select i1 %342, i32 64, i32 128
  %344 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 18
  %345 = load i32, i32* %344, align 8
  %346 = icmp slt i32 %345, 0
  %347 = ashr i32 %345, 3
  %348 = select i1 %346, i32 %347, i32 0
  %349 = add nsw i32 %348, %343
  %350 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 20
  %351 = load i32, i32* %350, align 16
  %352 = icmp slt i32 %351, 0
  %353 = ashr i32 %351, 3
  %354 = select i1 %352, i32 %353, i32 0
  %355 = add nsw i32 %354, %343
  %356 = select i1 %342, i64 1, i64 4
  br label %367

357:                                              ; preds = %393
  %358 = icmp ult i64 %375, %356
  br i1 %358, label %367, label %359

359:                                              ; preds = %357
  %360 = xor i1 %321, true
  %361 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %362 = icmp ugt i32 %334, 1
  %363 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %364 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 23
  %365 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 7
  %366 = select i1 %43, i64 1, i64 4
  br label %676

367:                                              ; preds = %357, %333
  %368 = phi i64 [ 0, %333 ], [ %375, %357 ]
  %369 = trunc i64 %368 to i32
  %370 = shl i32 %369, 6
  %371 = and i32 %370, 64
  %372 = lshr i32 %369, 1
  %373 = shl i32 %372, 6
  %374 = shl i64 %368, 2
  %375 = add nuw nsw i64 %368, 1
  %376 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 %375
  store i8 0, i8* %376, align 1
  br label %377

377:                                              ; preds = %393, %367
  %378 = phi i64 [ 0, %367 ], [ %394, %393 ]
  %379 = trunc i64 %378 to i32
  %380 = shl i32 %379, 5
  %381 = and i32 %380, 32
  %382 = or i32 %381, %371
  %383 = lshr i32 %379, 1
  %384 = shl i32 %383, 5
  %385 = add nsw i32 %384, %373
  %386 = add nuw nsw i64 %378, %374
  %387 = shl i64 %386, 2
  %388 = add nuw nsw i64 %386, 5
  %389 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 %388
  store i8 0, i8* %389, align 1
  %390 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %8, i64 0, i64 %368, i64 %378
  store i32 0, i32* %390, align 4
  %391 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %9, i64 0, i64 %368, i64 %378
  store i32 0, i32* %391, align 4
  %392 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %10, i64 0, i64 %368, i64 %378
  store i32 2147483647, i32* %392, align 4
  br label %396

393:                                              ; preds = %670
  %394 = add nuw nsw i64 %378, 1
  %395 = icmp eq i64 %394, 4
  br i1 %395, label %357, label %377

396:                                              ; preds = %670, %377
  %397 = phi i32 [ 0, %377 ], [ %671, %670 ]
  %398 = phi i32 [ 2147483647, %377 ], [ %672, %670 ]
  %399 = phi i32 [ 0, %377 ], [ %673, %670 ]
  %400 = phi i64 [ 0, %377 ], [ %674, %670 ]
  %401 = trunc i64 %400 to i32
  %402 = shl i32 %401, 4
  %403 = and i32 %402, 16
  %404 = or i32 %382, %403
  %405 = lshr i32 %401, 1
  %406 = shl i32 %405, 4
  %407 = add nsw i32 %385, %406
  %408 = add nuw nsw i64 %400, %387
  %409 = add nuw nsw i64 %408, 21
  %410 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %411 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 %409
  store i8 0, i8* %411, align 1
  %412 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 %408
  store i32 0, i32* %412, align 4
  br i1 %338, label %588, label %413

413:                                              ; preds = %396
  %414 = icmp slt i32 %404, %349
  %415 = icmp slt i32 %407, %355
  %416 = and i1 %414, %415
  br i1 %416, label %417, label %431

417:                                              ; preds = %413
  %418 = mul nsw i32 %407, %115
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %113, i64 %419
  %421 = zext i32 %404 to i64
  %422 = getelementptr inbounds i8, i8* %420, i64 %421
  %423 = call i32 @aom_avg_8x8_sse2(i8* %422, i32 %115) #4
  %424 = mul nsw i32 %407, %326
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i8, i8* %325, i64 %425
  %427 = getelementptr inbounds i8, i8* %426, i64 %421
  %428 = call i32 @aom_avg_8x8_sse2(i8* %427, i32 %326) #4
  %429 = sub nsw i32 %423, %428
  %430 = mul nsw i32 %429, %429
  br label %431

431:                                              ; preds = %417, %413
  %432 = phi i32 [ %430, %417 ], [ 0, %413 ]
  %433 = phi i32 [ %429, %417 ], [ 0, %413 ]
  %434 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 0, i32 0, i32 0, i32 0
  store i32 %432, i32* %434, align 4
  %435 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 0, i32 0, i32 0, i32 1
  store i32 %433, i32* %435, align 4
  %436 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %436, align 4
  %437 = or i32 %404, 8
  %438 = icmp slt i32 %437, %349
  %439 = and i1 %415, %438
  br i1 %439, label %440, label %454

440:                                              ; preds = %431
  %441 = mul nsw i32 %407, %115
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds i8, i8* %113, i64 %442
  %444 = zext i32 %437 to i64
  %445 = getelementptr inbounds i8, i8* %443, i64 %444
  %446 = call i32 @aom_avg_8x8_sse2(i8* %445, i32 %115) #4
  %447 = mul nsw i32 %407, %326
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds i8, i8* %325, i64 %448
  %450 = getelementptr inbounds i8, i8* %449, i64 %444
  %451 = call i32 @aom_avg_8x8_sse2(i8* %450, i32 %326) #4
  %452 = sub nsw i32 %446, %451
  %453 = mul nsw i32 %452, %452
  br label %454

454:                                              ; preds = %440, %431
  %455 = phi i32 [ %453, %440 ], [ 0, %431 ]
  %456 = phi i32 [ %452, %440 ], [ 0, %431 ]
  %457 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 1, i32 0, i32 0, i32 0
  store i32 %455, i32* %457, align 4
  %458 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 1, i32 0, i32 0, i32 1
  store i32 %456, i32* %458, align 4
  %459 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 1, i32 0, i32 0, i32 2
  store i32 0, i32* %459, align 4
  %460 = or i32 %407, 8
  %461 = icmp slt i32 %460, %355
  %462 = and i1 %414, %461
  br i1 %462, label %463, label %477

463:                                              ; preds = %454
  %464 = mul nsw i32 %460, %115
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds i8, i8* %113, i64 %465
  %467 = zext i32 %404 to i64
  %468 = getelementptr inbounds i8, i8* %466, i64 %467
  %469 = call i32 @aom_avg_8x8_sse2(i8* %468, i32 %115) #4
  %470 = mul nsw i32 %460, %326
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i8, i8* %325, i64 %471
  %473 = getelementptr inbounds i8, i8* %472, i64 %467
  %474 = call i32 @aom_avg_8x8_sse2(i8* %473, i32 %326) #4
  %475 = sub nsw i32 %469, %474
  %476 = mul nsw i32 %475, %475
  br label %477

477:                                              ; preds = %463, %454
  %478 = phi i32 [ %476, %463 ], [ 0, %454 ]
  %479 = phi i32 [ %475, %463 ], [ 0, %454 ]
  %480 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 2, i32 0, i32 0, i32 0
  store i32 %478, i32* %480, align 4
  %481 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 2, i32 0, i32 0, i32 1
  store i32 %479, i32* %481, align 4
  %482 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 2, i32 0, i32 0, i32 2
  store i32 0, i32* %482, align 4
  %483 = and i1 %438, %461
  br i1 %483, label %484, label %498

484:                                              ; preds = %477
  %485 = mul nsw i32 %460, %115
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds i8, i8* %113, i64 %486
  %488 = zext i32 %437 to i64
  %489 = getelementptr inbounds i8, i8* %487, i64 %488
  %490 = call i32 @aom_avg_8x8_sse2(i8* %489, i32 %115) #4
  %491 = mul nsw i32 %460, %326
  %492 = sext i32 %491 to i64
  %493 = getelementptr inbounds i8, i8* %325, i64 %492
  %494 = getelementptr inbounds i8, i8* %493, i64 %488
  %495 = call i32 @aom_avg_8x8_sse2(i8* %494, i32 %326) #4
  %496 = sub nsw i32 %490, %495
  %497 = mul nsw i32 %496, %496
  br label %498

498:                                              ; preds = %484, %477
  %499 = phi i32 [ %497, %484 ], [ 0, %477 ]
  %500 = phi i32 [ %496, %484 ], [ 0, %477 ]
  %501 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 3, i32 0, i32 0, i32 0
  store i32 %499, i32* %501, align 4
  %502 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 3, i32 0, i32 0, i32 1
  store i32 %500, i32* %502, align 4
  %503 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 3, i32 0, i32 0, i32 2
  store i32 0, i32* %503, align 4
  %504 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %505 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 0, i32 0, i32 0, i32 0
  %506 = load i32, i32* %505, align 4
  %507 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 1, i32 0, i32 0, i32 0
  %508 = load i32, i32* %507, align 4
  %509 = add i32 %508, %506
  %510 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 0, i32 0, i32 0, i32 1
  %511 = load i32, i32* %510, align 4
  %512 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 1, i32 0, i32 0, i32 1
  %513 = load i32, i32* %512, align 4
  %514 = add nsw i32 %513, %511
  %515 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 0, i32 0, i32 0, i32 2
  %516 = load i32, i32* %515, align 4
  %517 = add nsw i32 %516, 1
  %518 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 1, i64 0, i32 0
  store i32 %509, i32* %518, align 4
  %519 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 1, i64 0, i32 1
  store i32 %514, i32* %519, align 4
  %520 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 1, i64 0, i32 2
  store i32 %517, i32* %520, align 4
  %521 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 2, i32 0, i32 0, i32 0
  %522 = load i32, i32* %521, align 4
  %523 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 3, i32 0, i32 0, i32 0
  %524 = load i32, i32* %523, align 4
  %525 = add i32 %524, %522
  %526 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 2, i32 0, i32 0, i32 1
  %527 = load i32, i32* %526, align 4
  %528 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 3, i32 0, i32 0, i32 1
  %529 = load i32, i32* %528, align 4
  %530 = add nsw i32 %529, %527
  %531 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 2, i32 0, i32 0, i32 2
  %532 = load i32, i32* %531, align 4
  %533 = add nsw i32 %532, 1
  %534 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 1, i64 1, i32 0
  store i32 %525, i32* %534, align 4
  %535 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 1, i64 1, i32 1
  store i32 %530, i32* %535, align 4
  %536 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 1, i64 1, i32 2
  store i32 %533, i32* %536, align 4
  %537 = add i32 %522, %506
  %538 = add nsw i32 %527, %511
  %539 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 2, i64 0, i32 0
  store i32 %537, i32* %539, align 4
  %540 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 2, i64 0, i32 1
  store i32 %538, i32* %540, align 4
  %541 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 2, i64 0, i32 2
  store i32 %517, i32* %541, align 4
  %542 = add i32 %524, %508
  %543 = add nsw i32 %529, %513
  %544 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 1, i32 0, i32 0, i32 2
  %545 = load i32, i32* %544, align 4
  %546 = add nsw i32 %545, 1
  %547 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 2, i64 1, i32 0
  store i32 %542, i32* %547, align 4
  %548 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 2, i64 1, i32 1
  store i32 %543, i32* %548, align 4
  %549 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 2, i64 1, i32 2
  store i32 %546, i32* %549, align 4
  %550 = add i32 %542, %537
  %551 = add nsw i32 %543, %538
  %552 = add nsw i32 %516, 2
  %553 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 0, i32 0
  store i32 %550, i32* %553, align 4
  %554 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 0, i32 1
  store i32 %551, i32* %554, align 4
  %555 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %504, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 0, i32 2
  store i32 %552, i32* %555, align 4
  %556 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %557 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %556, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 0, i32 0
  %558 = load i32, i32* %557, align 4
  %559 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %556, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 0, i32 1
  %560 = load i32, i32* %559, align 4
  %561 = sext i32 %560 to i64
  %562 = mul nsw i64 %561, %561
  %563 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %556, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 0, i32 2
  %564 = load i32, i32* %563, align 4
  %565 = zext i32 %564 to i64
  %566 = lshr i64 %562, %565
  %567 = trunc i64 %566 to i32
  %568 = sub i32 %558, %567
  %569 = shl i32 %568, 8
  %570 = lshr i32 %569, %564
  %571 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %556, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 0, i32 3
  store i32 %570, i32* %571, align 4
  %572 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %573 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %572, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 0, i32 0, i32 3
  %574 = load i32, i32* %573, align 4
  %575 = add nsw i32 %399, %574
  store i32 %575, i32* %390, align 4
  %576 = icmp slt i32 %574, %398
  br i1 %576, label %577, label %578

577:                                              ; preds = %498
  store i32 %574, i32* %392, align 4
  br label %578

578:                                              ; preds = %577, %498
  %579 = phi i32 [ %574, %577 ], [ %398, %498 ]
  %580 = icmp sgt i32 %574, %397
  br i1 %580, label %581, label %582

581:                                              ; preds = %578
  store i32 %574, i32* %391, align 4
  br label %582

582:                                              ; preds = %581, %578
  %583 = phi i32 [ %574, %581 ], [ %397, %578 ]
  %584 = sext i32 %574 to i64
  %585 = load i64, i64* %61, align 8
  %586 = icmp slt i64 %585, %584
  br i1 %586, label %587, label %670

587:                                              ; preds = %582
  store i8 1, i8* %411, align 1
  store i8 1, i8* %389, align 1
  store i8 1, i8* %376, align 1
  store i8 1, i8* %16, align 16
  br label %670

588:                                              ; preds = %396
  store i8 0, i8* %411, align 1
  store i32 1, i32* %412, align 4
  br label %589

589:                                              ; preds = %662, %588
  %590 = phi i64 [ 0, %588 ], [ %668, %662 ]
  %591 = trunc i64 %590 to i32
  %592 = shl i32 %591, 3
  %593 = and i32 %592, 8
  %594 = or i32 %593, %404
  %595 = lshr i32 %591, 1
  %596 = shl i32 %595, 3
  %597 = add nsw i32 %596, %407
  %598 = icmp slt i32 %594, %349
  %599 = icmp slt i32 %597, %355
  %600 = and i1 %598, %599
  br i1 %600, label %601, label %610

601:                                              ; preds = %589
  %602 = mul nsw i32 %597, %115
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds i8, i8* %113, i64 %603
  %605 = zext i32 %594 to i64
  %606 = getelementptr inbounds i8, i8* %604, i64 %605
  %607 = call i32 @aom_avg_4x4_sse2(i8* %606, i32 %115) #4
  %608 = add nsw i32 %607, -128
  %609 = mul nsw i32 %608, %608
  br label %610

610:                                              ; preds = %601, %589
  %611 = phi i32 [ %609, %601 ], [ 0, %589 ]
  %612 = phi i32 [ %608, %601 ], [ 0, %589 ]
  %613 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 0, i32 0, i32 0, i32 0
  store i32 %611, i32* %613, align 4
  %614 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 0, i32 0, i32 0, i32 1
  store i32 %612, i32* %614, align 4
  %615 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %615, align 4
  %616 = or i32 %594, 4
  %617 = icmp slt i32 %616, %349
  %618 = and i1 %599, %617
  br i1 %618, label %619, label %628

619:                                              ; preds = %610
  %620 = mul nsw i32 %597, %115
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds i8, i8* %113, i64 %621
  %623 = zext i32 %616 to i64
  %624 = getelementptr inbounds i8, i8* %622, i64 %623
  %625 = call i32 @aom_avg_4x4_sse2(i8* %624, i32 %115) #4
  %626 = add nsw i32 %625, -128
  %627 = mul nsw i32 %626, %626
  br label %628

628:                                              ; preds = %619, %610
  %629 = phi i32 [ %627, %619 ], [ 0, %610 ]
  %630 = phi i32 [ %626, %619 ], [ 0, %610 ]
  %631 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 1, i32 0, i32 0, i32 0
  store i32 %629, i32* %631, align 4
  %632 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 1, i32 0, i32 0, i32 1
  store i32 %630, i32* %632, align 4
  %633 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 1, i32 0, i32 0, i32 2
  store i32 0, i32* %633, align 4
  %634 = or i32 %597, 4
  %635 = icmp slt i32 %634, %355
  %636 = and i1 %598, %635
  br i1 %636, label %637, label %646

637:                                              ; preds = %628
  %638 = mul nsw i32 %634, %115
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds i8, i8* %113, i64 %639
  %641 = zext i32 %594 to i64
  %642 = getelementptr inbounds i8, i8* %640, i64 %641
  %643 = call i32 @aom_avg_4x4_sse2(i8* %642, i32 %115) #4
  %644 = add nsw i32 %643, -128
  %645 = mul nsw i32 %644, %644
  br label %646

646:                                              ; preds = %637, %628
  %647 = phi i32 [ %645, %637 ], [ 0, %628 ]
  %648 = phi i32 [ %644, %637 ], [ 0, %628 ]
  %649 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 2, i32 0, i32 0, i32 0
  store i32 %647, i32* %649, align 4
  %650 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 2, i32 0, i32 0, i32 1
  store i32 %648, i32* %650, align 4
  %651 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 2, i32 0, i32 0, i32 2
  store i32 0, i32* %651, align 4
  %652 = and i1 %617, %635
  br i1 %652, label %653, label %662

653:                                              ; preds = %646
  %654 = mul nsw i32 %634, %115
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds i8, i8* %113, i64 %655
  %657 = zext i32 %616 to i64
  %658 = getelementptr inbounds i8, i8* %656, i64 %657
  %659 = call i32 @aom_avg_4x4_sse2(i8* %658, i32 %115) #4
  %660 = add nsw i32 %659, -128
  %661 = mul nsw i32 %660, %660
  br label %662

662:                                              ; preds = %653, %646
  %663 = phi i32 [ %661, %653 ], [ 0, %646 ]
  %664 = phi i32 [ %660, %653 ], [ 0, %646 ]
  %665 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 3, i32 0, i32 0, i32 0
  store i32 %663, i32* %665, align 4
  %666 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 3, i32 0, i32 0, i32 1
  store i32 %664, i32* %666, align 4
  %667 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %410, i64 %368, i32 1, i64 %378, i32 1, i64 %400, i32 1, i64 %590, i32 1, i64 3, i32 0, i32 0, i32 2
  store i32 0, i32* %667, align 4
  %668 = add nuw nsw i64 %590, 1
  %669 = icmp eq i64 %668, 4
  br i1 %669, label %670, label %589

670:                                              ; preds = %662, %587, %582
  %671 = phi i32 [ %583, %587 ], [ %583, %582 ], [ %397, %662 ]
  %672 = phi i32 [ %579, %587 ], [ %579, %582 ], [ %398, %662 ]
  %673 = phi i32 [ %575, %587 ], [ %575, %582 ], [ %399, %662 ]
  %674 = add nuw nsw i64 %400, 1
  %675 = icmp eq i64 %674, 4
  br i1 %675, label %393, label %396

676:                                              ; preds = %359, %1054
  %677 = phi i64 [ 0, %359 ], [ %682, %1054 ]
  %678 = phi i32 [ 0, %359 ], [ %1052, %1054 ]
  %679 = phi i32 [ 2147483647, %359 ], [ %1051, %1054 ]
  %680 = phi i32 [ 0, %359 ], [ %1050, %1054 ]
  %681 = shl i64 %677, 2
  %682 = add nuw nsw i64 %677, 1
  %683 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 %682
  br label %684

684:                                              ; preds = %939, %676
  %685 = phi i32 [ 2147483647, %676 ], [ %940, %939 ]
  %686 = phi i32 [ 0, %676 ], [ %941, %939 ]
  %687 = phi i64 [ 0, %676 ], [ %942, %939 ]
  %688 = add nuw nsw i64 %687, %681
  %689 = shl i64 %688, 2
  %690 = add nuw nsw i64 %688, 5
  %691 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 %690
  br label %692

692:                                              ; preds = %828, %684
  %693 = phi i64 [ 0, %684 ], [ %829, %828 ]
  %694 = add nuw nsw i64 %693, %689
  %695 = add nuw nsw i64 %694, 21
  %696 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 %694
  %697 = load i32, i32* %696, align 4
  %698 = icmp eq i32 %697, 1
  br i1 %698, label %699, label %828

699:                                              ; preds = %692
  br i1 %321, label %702, label %700

700:                                              ; preds = %699
  %701 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* null, i64 %694
  br label %705

702:                                              ; preds = %699
  %703 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %704 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %703, i64 %677, i32 1, i64 %687, i32 1, i64 %693
  br label %705

705:                                              ; preds = %702, %700
  %706 = phi %struct.VP16x16* [ %701, %700 ], [ %704, %702 ]
  br label %707

707:                                              ; preds = %707, %705
  %708 = phi i64 [ 0, %705 ], [ %760, %707 ]
  %709 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 0, i32 0, i32 0, i32 0
  %710 = load i32, i32* %709, align 4
  %711 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 1, i32 0, i32 0, i32 0
  %712 = load i32, i32* %711, align 4
  %713 = add i32 %712, %710
  %714 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 0, i32 0, i32 0, i32 1
  %715 = load i32, i32* %714, align 4
  %716 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 1, i32 0, i32 0, i32 1
  %717 = load i32, i32* %716, align 4
  %718 = add nsw i32 %717, %715
  %719 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 0, i32 0, i32 0, i32 2
  %720 = load i32, i32* %719, align 4
  %721 = add nsw i32 %720, 1
  %722 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 1, i64 0, i32 0
  store i32 %713, i32* %722, align 4
  %723 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 1, i64 0, i32 1
  store i32 %718, i32* %723, align 4
  %724 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 1, i64 0, i32 2
  store i32 %721, i32* %724, align 4
  %725 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 2, i32 0, i32 0, i32 0
  %726 = load i32, i32* %725, align 4
  %727 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 3, i32 0, i32 0, i32 0
  %728 = load i32, i32* %727, align 4
  %729 = add i32 %728, %726
  %730 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 2, i32 0, i32 0, i32 1
  %731 = load i32, i32* %730, align 4
  %732 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 3, i32 0, i32 0, i32 1
  %733 = load i32, i32* %732, align 4
  %734 = add nsw i32 %733, %731
  %735 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 2, i32 0, i32 0, i32 2
  %736 = load i32, i32* %735, align 4
  %737 = add nsw i32 %736, 1
  %738 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 1, i64 1, i32 0
  store i32 %729, i32* %738, align 4
  %739 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 1, i64 1, i32 1
  store i32 %734, i32* %739, align 4
  %740 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 1, i64 1, i32 2
  store i32 %737, i32* %740, align 4
  %741 = add i32 %726, %710
  %742 = add nsw i32 %731, %715
  %743 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 2, i64 0, i32 0
  store i32 %741, i32* %743, align 4
  %744 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 2, i64 0, i32 1
  store i32 %742, i32* %744, align 4
  %745 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 2, i64 0, i32 2
  store i32 %721, i32* %745, align 4
  %746 = add i32 %728, %712
  %747 = add nsw i32 %733, %717
  %748 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 1, i64 1, i32 0, i32 0, i32 2
  %749 = load i32, i32* %748, align 4
  %750 = add nsw i32 %749, 1
  %751 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 2, i64 1, i32 0
  store i32 %746, i32* %751, align 4
  %752 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 2, i64 1, i32 1
  store i32 %747, i32* %752, align 4
  %753 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 2, i64 1, i32 2
  store i32 %750, i32* %753, align 4
  %754 = add i32 %746, %741
  %755 = add nsw i32 %747, %742
  %756 = add nsw i32 %720, 2
  %757 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 0, i32 0
  store i32 %754, i32* %757, align 4
  %758 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 0, i32 1
  store i32 %755, i32* %758, align 4
  %759 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 %708, i32 0, i32 0, i32 2
  store i32 %756, i32* %759, align 4
  %760 = add nuw nsw i64 %708, 1
  %761 = icmp eq i64 %760, 4
  br i1 %761, label %762, label %707

762:                                              ; preds = %707
  %763 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0
  %764 = load i32, i32* %763, align 4
  %765 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0
  %766 = load i32, i32* %765, align 4
  %767 = add i32 %766, %764
  %768 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 0, i32 0, i32 0, i32 1
  %769 = load i32, i32* %768, align 4
  %770 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 1, i32 0, i32 0, i32 1
  %771 = load i32, i32* %770, align 4
  %772 = add nsw i32 %771, %769
  %773 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 0, i32 0, i32 0, i32 2
  %774 = load i32, i32* %773, align 4
  %775 = add nsw i32 %774, 1
  %776 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 1, i64 0, i32 0
  store i32 %767, i32* %776, align 4
  %777 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 1, i64 0, i32 1
  store i32 %772, i32* %777, align 4
  %778 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 1, i64 0, i32 2
  store i32 %775, i32* %778, align 4
  %779 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0
  %780 = load i32, i32* %779, align 4
  %781 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0
  %782 = load i32, i32* %781, align 4
  %783 = add i32 %782, %780
  %784 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 2, i32 0, i32 0, i32 1
  %785 = load i32, i32* %784, align 4
  %786 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 3, i32 0, i32 0, i32 1
  %787 = load i32, i32* %786, align 4
  %788 = add nsw i32 %787, %785
  %789 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 2, i32 0, i32 0, i32 2
  %790 = load i32, i32* %789, align 4
  %791 = add nsw i32 %790, 1
  %792 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 1, i64 1, i32 0
  store i32 %783, i32* %792, align 4
  %793 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 1, i64 1, i32 1
  store i32 %788, i32* %793, align 4
  %794 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 1, i64 1, i32 2
  store i32 %791, i32* %794, align 4
  %795 = add i32 %780, %764
  %796 = add nsw i32 %785, %769
  %797 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 2, i64 0, i32 0
  store i32 %795, i32* %797, align 4
  %798 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 2, i64 0, i32 1
  store i32 %796, i32* %798, align 4
  %799 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 2, i64 0, i32 2
  store i32 %775, i32* %799, align 4
  %800 = add i32 %782, %766
  %801 = add nsw i32 %787, %771
  %802 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 1, i64 1, i32 0, i32 0, i32 2
  %803 = load i32, i32* %802, align 4
  %804 = add nsw i32 %803, 1
  %805 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 2, i64 1, i32 0
  store i32 %800, i32* %805, align 4
  %806 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 2, i64 1, i32 1
  store i32 %801, i32* %806, align 4
  %807 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 2, i64 1, i32 2
  store i32 %804, i32* %807, align 4
  %808 = add i32 %800, %795
  %809 = add nsw i32 %801, %796
  %810 = add nsw i32 %774, 2
  %811 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 0, i32 0
  store i32 %808, i32* %811, align 4
  %812 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 0, i32 1
  store i32 %809, i32* %812, align 4
  %813 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 0, i32 2
  store i32 %810, i32* %813, align 4
  %814 = sext i32 %809 to i64
  %815 = mul nsw i64 %814, %814
  %816 = zext i32 %810 to i64
  %817 = lshr i64 %815, %816
  %818 = trunc i64 %817 to i32
  %819 = sub i32 %808, %818
  %820 = shl i32 %819, 8
  %821 = lshr i32 %820, %810
  %822 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* %706, i64 0, i32 0, i32 0, i32 3
  store i32 %821, i32* %822, align 4
  %823 = sext i32 %821 to i64
  %824 = load i64, i64* %61, align 8
  %825 = icmp slt i64 %824, %823
  br i1 %825, label %826, label %828

826:                                              ; preds = %762
  %827 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 %695
  store i8 1, i8* %827, align 1
  store i8 1, i8* %691, align 1
  store i8 1, i8* %683, align 1
  store i8 1, i8* %16, align 16
  br label %828

828:                                              ; preds = %762, %826, %692
  %829 = add nuw nsw i64 %693, 1
  %830 = icmp eq i64 %829, 4
  br i1 %830, label %831, label %692

831:                                              ; preds = %828
  %832 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %833 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 0, i32 0, i32 0, i32 0
  %834 = load i32, i32* %833, align 4
  %835 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 1, i32 0, i32 0, i32 0
  %836 = load i32, i32* %835, align 4
  %837 = add i32 %836, %834
  %838 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 0, i32 0, i32 0, i32 1
  %839 = load i32, i32* %838, align 4
  %840 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 1, i32 0, i32 0, i32 1
  %841 = load i32, i32* %840, align 4
  %842 = add nsw i32 %841, %839
  %843 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 0, i32 0, i32 0, i32 2
  %844 = load i32, i32* %843, align 4
  %845 = add nsw i32 %844, 1
  %846 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 1, i64 0, i32 0
  store i32 %837, i32* %846, align 4
  %847 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 1, i64 0, i32 1
  store i32 %842, i32* %847, align 4
  %848 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 1, i64 0, i32 2
  store i32 %845, i32* %848, align 4
  %849 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 2, i32 0, i32 0, i32 0
  %850 = load i32, i32* %849, align 4
  %851 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 3, i32 0, i32 0, i32 0
  %852 = load i32, i32* %851, align 4
  %853 = add i32 %852, %850
  %854 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 2, i32 0, i32 0, i32 1
  %855 = load i32, i32* %854, align 4
  %856 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 3, i32 0, i32 0, i32 1
  %857 = load i32, i32* %856, align 4
  %858 = add nsw i32 %857, %855
  %859 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 2, i32 0, i32 0, i32 2
  %860 = load i32, i32* %859, align 4
  %861 = add nsw i32 %860, 1
  %862 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 1, i64 1, i32 0
  store i32 %853, i32* %862, align 4
  %863 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 1, i64 1, i32 1
  store i32 %858, i32* %863, align 4
  %864 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 1, i64 1, i32 2
  store i32 %861, i32* %864, align 4
  %865 = add i32 %850, %834
  %866 = add nsw i32 %855, %839
  %867 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 2, i64 0, i32 0
  store i32 %865, i32* %867, align 4
  %868 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 2, i64 0, i32 1
  store i32 %866, i32* %868, align 4
  %869 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 2, i64 0, i32 2
  store i32 %845, i32* %869, align 4
  %870 = add i32 %852, %836
  %871 = add nsw i32 %857, %841
  %872 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 1, i64 1, i32 0, i32 0, i32 2
  %873 = load i32, i32* %872, align 4
  %874 = add nsw i32 %873, 1
  %875 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 2, i64 1, i32 0
  store i32 %870, i32* %875, align 4
  %876 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 2, i64 1, i32 1
  store i32 %871, i32* %876, align 4
  %877 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 2, i64 1, i32 2
  store i32 %874, i32* %877, align 4
  %878 = add i32 %870, %865
  %879 = add nsw i32 %871, %866
  %880 = add nsw i32 %844, 2
  %881 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 0, i32 0
  store i32 %878, i32* %881, align 4
  %882 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 0, i32 1
  store i32 %879, i32* %882, align 4
  %883 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %832, i64 %677, i32 1, i64 %687, i32 0, i32 0, i32 2
  store i32 %880, i32* %883, align 4
  %884 = load i8, i8* %691, align 1
  %885 = icmp eq i8 %884, 0
  br i1 %885, label %886, label %939

886:                                              ; preds = %831
  %887 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %888 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %887, i64 %677, i32 1, i64 %687, i32 0, i32 0, i32 0
  %889 = load i32, i32* %888, align 4
  %890 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %887, i64 %677, i32 1, i64 %687, i32 0, i32 0, i32 1
  %891 = load i32, i32* %890, align 4
  %892 = sext i32 %891 to i64
  %893 = mul nsw i64 %892, %892
  %894 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %887, i64 %677, i32 1, i64 %687, i32 0, i32 0, i32 2
  %895 = load i32, i32* %894, align 4
  %896 = zext i32 %895 to i64
  %897 = lshr i64 %893, %896
  %898 = trunc i64 %897 to i32
  %899 = sub i32 %889, %898
  %900 = shl i32 %899, 8
  %901 = lshr i32 %900, %895
  %902 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %887, i64 %677, i32 1, i64 %687, i32 0, i32 0, i32 3
  store i32 %901, i32* %902, align 4
  %903 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %904 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %903, i64 %677, i32 1, i64 %687, i32 0, i32 0, i32 3
  %905 = load i32, i32* %904, align 4
  %906 = icmp sgt i32 %905, %686
  %907 = select i1 %906, i32 %905, i32 %686
  %908 = icmp slt i32 %905, %685
  %909 = select i1 %908, i32 %905, i32 %685
  %910 = sext i32 %905 to i64
  %911 = load i64, i64* %60, align 16
  %912 = icmp slt i64 %911, %910
  br i1 %912, label %922, label %913

913:                                              ; preds = %886
  %914 = ashr i64 %911, 1
  %915 = icmp slt i64 %914, %910
  %916 = and i1 %915, %360
  br i1 %916, label %917, label %923

917:                                              ; preds = %913
  %918 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %8, i64 0, i64 %677, i64 %687
  %919 = load i32, i32* %918, align 4
  %920 = ashr i32 %919, 1
  %921 = icmp sgt i32 %905, %920
  br i1 %921, label %922, label %923

922:                                              ; preds = %917, %886
  store i8 1, i8* %691, align 1
  store i8 1, i8* %683, align 1
  store i8 1, i8* %16, align 16
  br label %939

923:                                              ; preds = %913, %917
  br i1 %321, label %939, label %924

924:                                              ; preds = %923
  %925 = load i32, i32* %361, align 4
  %926 = icmp slt i32 %925, 361
  br i1 %926, label %927, label %939

927:                                              ; preds = %924
  %928 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %9, i64 0, i64 %677, i64 %687
  %929 = load i32, i32* %928, align 4
  %930 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %10, i64 0, i64 %677, i64 %687
  %931 = load i32, i32* %930, align 4
  %932 = sub nsw i32 %929, %931
  %933 = sext i32 %932 to i64
  %934 = icmp slt i64 %914, %933
  %935 = sext i32 %929 to i64
  %936 = icmp slt i64 %911, %935
  %937 = and i1 %936, %934
  br i1 %937, label %938, label %939

938:                                              ; preds = %927
  store i8 1, i8* %691, align 1
  store i8 1, i8* %683, align 1
  store i8 1, i8* %16, align 16
  br label %939

939:                                              ; preds = %922, %938, %927, %924, %923, %831
  %940 = phi i32 [ %685, %831 ], [ %909, %923 ], [ %909, %924 ], [ %909, %927 ], [ %909, %938 ], [ %909, %922 ]
  %941 = phi i32 [ %686, %831 ], [ %907, %923 ], [ %907, %924 ], [ %907, %927 ], [ %907, %938 ], [ %907, %922 ]
  %942 = add nuw nsw i64 %687, 1
  %943 = icmp eq i64 %942, 4
  br i1 %943, label %944, label %684

944:                                              ; preds = %939
  %945 = load i8, i8* %683, align 1
  %946 = icmp eq i8 %945, 0
  br i1 %946, label %947, label %1049

947:                                              ; preds = %944
  %948 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %949 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 0, i32 0, i32 0, i32 0
  %950 = load i32, i32* %949, align 4
  %951 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 1, i32 0, i32 0, i32 0
  %952 = load i32, i32* %951, align 4
  %953 = add i32 %952, %950
  %954 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 0, i32 0, i32 0, i32 1
  %955 = load i32, i32* %954, align 4
  %956 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 1, i32 0, i32 0, i32 1
  %957 = load i32, i32* %956, align 4
  %958 = add nsw i32 %957, %955
  %959 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 0, i32 0, i32 0, i32 2
  %960 = load i32, i32* %959, align 4
  %961 = add nsw i32 %960, 1
  %962 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 1, i64 0, i32 0
  store i32 %953, i32* %962, align 4
  %963 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 1, i64 0, i32 1
  store i32 %958, i32* %963, align 4
  %964 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 1, i64 0, i32 2
  store i32 %961, i32* %964, align 4
  %965 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 2, i32 0, i32 0, i32 0
  %966 = load i32, i32* %965, align 4
  %967 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 3, i32 0, i32 0, i32 0
  %968 = load i32, i32* %967, align 4
  %969 = add i32 %968, %966
  %970 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 2, i32 0, i32 0, i32 1
  %971 = load i32, i32* %970, align 4
  %972 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 3, i32 0, i32 0, i32 1
  %973 = load i32, i32* %972, align 4
  %974 = add nsw i32 %973, %971
  %975 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 2, i32 0, i32 0, i32 2
  %976 = load i32, i32* %975, align 4
  %977 = add nsw i32 %976, 1
  %978 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 1, i64 1, i32 0
  store i32 %969, i32* %978, align 4
  %979 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 1, i64 1, i32 1
  store i32 %974, i32* %979, align 4
  %980 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 1, i64 1, i32 2
  store i32 %977, i32* %980, align 4
  %981 = add i32 %966, %950
  %982 = add nsw i32 %971, %955
  %983 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 2, i64 0, i32 0
  store i32 %981, i32* %983, align 4
  %984 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 2, i64 0, i32 1
  store i32 %982, i32* %984, align 4
  %985 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 2, i64 0, i32 2
  store i32 %961, i32* %985, align 4
  %986 = add i32 %968, %952
  %987 = add nsw i32 %973, %957
  %988 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 1, i64 1, i32 0, i32 0, i32 2
  %989 = load i32, i32* %988, align 4
  %990 = add nsw i32 %989, 1
  %991 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 2, i64 1, i32 0
  store i32 %986, i32* %991, align 4
  %992 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 2, i64 1, i32 1
  store i32 %987, i32* %992, align 4
  %993 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 2, i64 1, i32 2
  store i32 %990, i32* %993, align 4
  %994 = add i32 %986, %981
  %995 = add nsw i32 %987, %982
  %996 = add nsw i32 %960, 2
  %997 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 0, i32 0
  store i32 %994, i32* %997, align 4
  %998 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 0, i32 1
  store i32 %995, i32* %998, align 4
  %999 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %948, i64 %677, i32 0, i32 0, i32 2
  store i32 %996, i32* %999, align 4
  %1000 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1001 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1000, i64 %677, i32 0, i32 0, i32 0
  %1002 = load i32, i32* %1001, align 4
  %1003 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1000, i64 %677, i32 0, i32 0, i32 1
  %1004 = load i32, i32* %1003, align 4
  %1005 = sext i32 %1004 to i64
  %1006 = mul nsw i64 %1005, %1005
  %1007 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1000, i64 %677, i32 0, i32 0, i32 2
  %1008 = load i32, i32* %1007, align 4
  %1009 = zext i32 %1008 to i64
  %1010 = lshr i64 %1006, %1009
  %1011 = trunc i64 %1010 to i32
  %1012 = sub i32 %1002, %1011
  %1013 = shl i32 %1012, 8
  %1014 = lshr i32 %1013, %1008
  %1015 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1000, i64 %677, i32 0, i32 0, i32 3
  store i32 %1014, i32* %1015, align 4
  %1016 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1017 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1016, i64 %677, i32 0, i32 0, i32 3
  %1018 = load i32, i32* %1017, align 4
  %1019 = icmp sgt i32 %1018, %678
  %1020 = select i1 %1019, i32 %1018, i32 %678
  %1021 = icmp slt i32 %1018, %679
  %1022 = select i1 %1021, i32 %1018, i32 %679
  br i1 %321, label %1047, label %1023

1023:                                             ; preds = %947
  %1024 = sub nsw i32 %941, %940
  %1025 = sext i32 %1024 to i64
  %1026 = load i64, i64* %59, align 8
  %1027 = ashr i64 %1026, 3
  %1028 = mul nsw i64 %1027, 3
  %1029 = icmp slt i64 %1028, %1025
  br i1 %1029, label %1030, label %1047

1030:                                             ; preds = %1023
  %1031 = sext i32 %941 to i64
  %1032 = ashr i64 %1026, 1
  %1033 = icmp slt i64 %1032, %1031
  br i1 %1033, label %1034, label %1047

1034:                                             ; preds = %1030
  br i1 %362, label %1046, label %1035

1035:                                             ; preds = %1034
  %1036 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %363, align 16
  %1037 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %1036, i64 0, i32 16
  %1038 = load i32, i32* %1037, align 8
  %1039 = icmp eq i32 %1038, 0
  br i1 %1039, label %1040, label %1046

1040:                                             ; preds = %1035
  %1041 = load i32, i32* %364, align 4
  %1042 = icmp eq i32 %1041, 0
  br i1 %1042, label %1043, label %1046

1043:                                             ; preds = %1040
  %1044 = load i32, i32* %365, align 4
  %1045 = icmp eq i32 %1044, 0
  br i1 %1045, label %1046, label %1047

1046:                                             ; preds = %1043, %1040, %1035, %1034
  store i8 1, i8* %683, align 1
  store i8 1, i8* %16, align 16
  br label %1047

1047:                                             ; preds = %1043, %1046, %1030, %1023, %947
  %1048 = add nsw i32 %1018, %680
  br label %1049

1049:                                             ; preds = %944, %1047
  %1050 = phi i32 [ %680, %944 ], [ %1048, %1047 ]
  %1051 = phi i32 [ %679, %944 ], [ %1022, %1047 ]
  %1052 = phi i32 [ %678, %944 ], [ %1020, %1047 ]
  br i1 %43, label %1053, label %1054

1053:                                             ; preds = %1049
  store i8 1, i8* %16, align 16
  br label %1054

1054:                                             ; preds = %1053, %1049
  %1055 = icmp ult i64 %682, %366
  br i1 %1055, label %676, label %1056

1056:                                             ; preds = %1054
  %1057 = load i8, i8* %16, align 16
  %1058 = icmp eq i8 %1057, 0
  br i1 %1058, label %1059, label %1163

1059:                                             ; preds = %1056
  %1060 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1061 = getelementptr inbounds i8, i8* %45, i64 16
  %1062 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 0, i32 0, i32 0, i32 0
  %1063 = load i32, i32* %1062, align 4
  %1064 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 1, i32 0, i32 0, i32 0
  %1065 = load i32, i32* %1064, align 4
  %1066 = add i32 %1065, %1063
  %1067 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 0, i32 0, i32 0, i32 1
  %1068 = load i32, i32* %1067, align 4
  %1069 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 1, i32 0, i32 0, i32 1
  %1070 = load i32, i32* %1069, align 4
  %1071 = add nsw i32 %1070, %1068
  %1072 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 0, i32 0, i32 0, i32 2
  %1073 = load i32, i32* %1072, align 4
  %1074 = add nsw i32 %1073, 1
  %1075 = bitcast i8* %1061 to i32*
  store i32 %1066, i32* %1075, align 4
  %1076 = getelementptr inbounds i8, i8* %45, i64 20
  %1077 = bitcast i8* %1076 to i32*
  store i32 %1071, i32* %1077, align 4
  %1078 = getelementptr inbounds i8, i8* %45, i64 24
  %1079 = bitcast i8* %1078 to i32*
  store i32 %1074, i32* %1079, align 4
  %1080 = getelementptr inbounds i8, i8* %45, i64 32
  %1081 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 2, i32 0, i32 0, i32 0
  %1082 = load i32, i32* %1081, align 4
  %1083 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 3, i32 0, i32 0, i32 0
  %1084 = load i32, i32* %1083, align 4
  %1085 = add i32 %1084, %1082
  %1086 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 2, i32 0, i32 0, i32 1
  %1087 = load i32, i32* %1086, align 4
  %1088 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 3, i32 0, i32 0, i32 1
  %1089 = load i32, i32* %1088, align 4
  %1090 = add nsw i32 %1089, %1087
  %1091 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 2, i32 0, i32 0, i32 2
  %1092 = load i32, i32* %1091, align 4
  %1093 = add nsw i32 %1092, 1
  %1094 = bitcast i8* %1080 to i32*
  store i32 %1085, i32* %1094, align 4
  %1095 = getelementptr inbounds i8, i8* %45, i64 36
  %1096 = bitcast i8* %1095 to i32*
  store i32 %1090, i32* %1096, align 4
  %1097 = getelementptr inbounds i8, i8* %45, i64 40
  %1098 = bitcast i8* %1097 to i32*
  store i32 %1093, i32* %1098, align 4
  %1099 = getelementptr inbounds i8, i8* %45, i64 48
  %1100 = load i32, i32* %1062, align 4
  %1101 = load i32, i32* %1081, align 4
  %1102 = add i32 %1101, %1100
  %1103 = load i32, i32* %1067, align 4
  %1104 = load i32, i32* %1086, align 4
  %1105 = add nsw i32 %1104, %1103
  %1106 = load i32, i32* %1072, align 4
  %1107 = add nsw i32 %1106, 1
  %1108 = bitcast i8* %1099 to i32*
  store i32 %1102, i32* %1108, align 4
  %1109 = getelementptr inbounds i8, i8* %45, i64 52
  %1110 = bitcast i8* %1109 to i32*
  store i32 %1105, i32* %1110, align 4
  %1111 = getelementptr inbounds i8, i8* %45, i64 56
  %1112 = bitcast i8* %1111 to i32*
  store i32 %1107, i32* %1112, align 4
  %1113 = getelementptr inbounds i8, i8* %45, i64 64
  %1114 = load i32, i32* %1064, align 4
  %1115 = load i32, i32* %1083, align 4
  %1116 = add i32 %1115, %1114
  %1117 = load i32, i32* %1069, align 4
  %1118 = load i32, i32* %1088, align 4
  %1119 = add nsw i32 %1118, %1117
  %1120 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1060, i64 1, i32 0, i32 0, i32 2
  %1121 = load i32, i32* %1120, align 4
  %1122 = add nsw i32 %1121, 1
  %1123 = bitcast i8* %1113 to i32*
  store i32 %1116, i32* %1123, align 4
  %1124 = getelementptr inbounds i8, i8* %45, i64 68
  %1125 = bitcast i8* %1124 to i32*
  store i32 %1119, i32* %1125, align 4
  %1126 = getelementptr inbounds i8, i8* %45, i64 72
  %1127 = bitcast i8* %1126 to i32*
  store i32 %1122, i32* %1127, align 4
  %1128 = add i32 %1116, %1102
  %1129 = add nsw i32 %1119, %1105
  %1130 = add nsw i32 %1106, 2
  %1131 = bitcast i8* %45 to i32*
  store i32 %1128, i32* %1131, align 4
  %1132 = getelementptr inbounds i8, i8* %45, i64 4
  %1133 = bitcast i8* %1132 to i32*
  store i32 %1129, i32* %1133, align 4
  %1134 = getelementptr inbounds i8, i8* %45, i64 8
  %1135 = bitcast i8* %1134 to i32*
  store i32 %1130, i32* %1135, align 4
  %1136 = sext i32 %1129 to i64
  %1137 = mul nsw i64 %1136, %1136
  %1138 = zext i32 %1130 to i64
  %1139 = lshr i64 %1137, %1138
  %1140 = trunc i64 %1139 to i32
  %1141 = sub i32 %1128, %1140
  %1142 = shl i32 %1141, 8
  %1143 = lshr i32 %1142, %1130
  %1144 = getelementptr inbounds i8, i8* %45, i64 12
  %1145 = bitcast i8* %1144 to i32*
  store i32 %1143, i32* %1145, align 4
  br i1 %321, label %1163, label %1146

1146:                                             ; preds = %1059
  %1147 = mul nsw i32 %1050, 9
  %1148 = ashr i32 %1147, 5
  %1149 = icmp sgt i32 %1143, %1148
  br i1 %1149, label %1150, label %1151

1150:                                             ; preds = %1146
  store i8 1, i8* %16, align 16
  br label %1151

1151:                                             ; preds = %1146, %1150
  %1152 = sub nsw i32 %1052, %1051
  %1153 = sext i32 %1152 to i64
  %1154 = load i64, i64* %58, align 16
  %1155 = ashr i64 %1154, 3
  %1156 = mul nsw i64 %1155, 3
  %1157 = icmp slt i64 %1156, %1153
  br i1 %1157, label %1158, label %1163

1158:                                             ; preds = %1151
  %1159 = sext i32 %1052 to i64
  %1160 = ashr i64 %1154, 1
  %1161 = icmp slt i64 %1160, %1159
  br i1 %1161, label %1162, label %1163

1162:                                             ; preds = %1158
  store i8 1, i8* %16, align 16
  br label %1163

1163:                                             ; preds = %1059, %1056, %1151, %1158, %1162
  %1164 = add nsw i32 %5, 32
  %1165 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %1, i64 0, i32 3
  %1166 = load i32, i32* %1165, align 4
  %1167 = icmp sgt i32 %1164, %1166
  br i1 %1167, label %1179, label %1168

1168:                                             ; preds = %1163
  %1169 = add nsw i32 %4, 32
  %1170 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %1, i64 0, i32 1
  %1171 = load i32, i32* %1170, align 4
  %1172 = icmp sgt i32 %1169, %1171
  br i1 %1172, label %1179, label %1173

1173:                                             ; preds = %1168
  %1174 = load i64, i64* %58, align 16
  %1175 = load i8, i8* %16, align 16
  %1176 = zext i8 %1175 to i32
  %1177 = call fastcc i32 @set_vt_partitioning(%struct.AV1_COMP* %0, %struct.macroblock* %3, %struct.macroblockd* %14, %struct.TileInfo* %1, i8* %45, i8 zeroext 15, i32 %4, i32 %5, i64 %1174, i8 zeroext 6, i32 %1176)
  %1178 = icmp eq i32 %1177, 0
  br i1 %1178, label %1179, label %1329

1179:                                             ; preds = %1173, %1168, %1163
  %1180 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %1181 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %1182 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %1183 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 8
  %1184 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 7
  %1185 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 5
  %1186 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %1187 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 12
  %1188 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 15
  %1189 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 16
  %1190 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 2
  %1191 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 0
  %1192 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 4
  br label %1193

1193:                                             ; preds = %1179, %1327
  %1194 = phi i64 [ 0, %1179 ], [ %1208, %1327 ]
  %1195 = trunc i64 %1194 to i32
  %1196 = shl i32 %1195, 4
  %1197 = and i32 %1196, 16
  %1198 = trunc i64 %1194 to i32
  %1199 = lshr i32 %1198, 1
  %1200 = shl i32 %1199, 4
  %1201 = shl i64 %1194, 2
  %1202 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1203 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1202, i64 %1194
  %1204 = bitcast %struct.VP64x64* %1203 to i8*
  %1205 = add nsw i32 %1200, %4
  %1206 = add nsw i32 %1197, %5
  %1207 = load i64, i64* %59, align 8
  %1208 = add nuw nsw i64 %1194, 1
  %1209 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 %1208
  %1210 = load i8, i8* %1209, align 1
  %1211 = zext i8 %1210 to i32
  %1212 = call fastcc i32 @set_vt_partitioning(%struct.AV1_COMP* %0, %struct.macroblock* %3, %struct.macroblockd* %14, %struct.TileInfo* %1, i8* %1204, i8 zeroext 12, i32 %1205, i32 %1206, i64 %1207, i8 zeroext 6, i32 %1211)
  %1213 = icmp eq i32 %1212, 0
  br i1 %1213, label %1214, label %1327

1214:                                             ; preds = %1193, %1324
  %1215 = phi i64 [ %1325, %1324 ], [ 0, %1193 ]
  %1216 = trunc i64 %1215 to i32
  %1217 = shl i32 %1216, 3
  %1218 = and i32 %1217, 8
  %1219 = trunc i64 %1215 to i32
  %1220 = lshr i32 %1219, 1
  %1221 = shl i32 %1220, 3
  %1222 = add nuw nsw i64 %1215, %1201
  %1223 = shl i64 %1222, 2
  %1224 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1225 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1224, i64 %1194, i32 1, i64 %1215
  %1226 = bitcast %struct.VP32x32* %1225 to i8*
  %1227 = add nsw i32 %1221, %1205
  %1228 = add nsw i32 %1218, %1206
  %1229 = load i64, i64* %60, align 16
  %1230 = add nuw nsw i64 %1222, 5
  %1231 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 %1230
  %1232 = load i8, i8* %1231, align 1
  %1233 = zext i8 %1232 to i32
  %1234 = call fastcc i32 @set_vt_partitioning(%struct.AV1_COMP* %0, %struct.macroblock* %3, %struct.macroblockd* %14, %struct.TileInfo* %1, i8* %1226, i8 zeroext 9, i32 %1227, i32 %1228, i64 %1229, i8 zeroext 6, i32 %1233)
  %1235 = icmp eq i32 %1234, 0
  br i1 %1235, label %1236, label %1324

1236:                                             ; preds = %1214, %1321
  %1237 = phi i64 [ %1322, %1321 ], [ 0, %1214 ]
  %1238 = trunc i64 %1237 to i32
  %1239 = shl i32 %1238, 2
  %1240 = and i32 %1239, 4
  %1241 = trunc i64 %1237 to i32
  %1242 = lshr i32 %1241, 1
  %1243 = shl nuw i32 %1242, 2
  %1244 = add nuw nsw i64 %1237, %1223
  %1245 = add nuw nsw i64 %1244, 21
  br i1 %321, label %1252, label %1246

1246:                                             ; preds = %1236
  %1247 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 %1244
  %1248 = load i32, i32* %1247, align 4
  %1249 = icmp eq i32 %1248, 1
  br i1 %1249, label %1250, label %1252

1250:                                             ; preds = %1246
  %1251 = getelementptr inbounds %struct.VP16x16, %struct.VP16x16* null, i64 %1244
  br label %1255

1252:                                             ; preds = %1246, %1236
  %1253 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1254 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1253, i64 %1194, i32 1, i64 %1215, i32 1, i64 %1237
  br label %1255

1255:                                             ; preds = %1252, %1250
  %1256 = phi %struct.VP16x16* [ %1251, %1250 ], [ %1254, %1252 ]
  %1257 = bitcast %struct.VP16x16* %1256 to i8*
  %1258 = add nsw i32 %1243, %1227
  %1259 = add nsw i32 %1240, %1228
  %1260 = load i64, i64* %61, align 8
  %1261 = getelementptr inbounds [85 x i8], [85 x i8]* %7, i64 0, i64 %1245
  %1262 = load i8, i8* %1261, align 1
  %1263 = zext i8 %1262 to i32
  %1264 = call fastcc i32 @set_vt_partitioning(%struct.AV1_COMP* %0, %struct.macroblock* %3, %struct.macroblockd* %14, %struct.TileInfo* %1, i8* %1257, i8 zeroext 6, i32 %1258, i32 %1259, i64 %1260, i8 zeroext 3, i32 %1263)
  %1265 = icmp eq i32 %1264, 0
  br i1 %1265, label %1266, label %1321

1266:                                             ; preds = %1255, %1318
  %1267 = phi i32 [ %1319, %1318 ], [ 0, %1255 ]
  %1268 = shl nuw i32 %1267, 1
  %1269 = and i32 %1268, 2
  %1270 = and i32 %1267, 2147483646
  %1271 = add nsw i32 %1270, %1258
  %1272 = add nsw i32 %1269, %1259
  %1273 = load i32, i32* %1180, align 16
  %1274 = icmp sgt i32 %1273, %1272
  br i1 %1274, label %1275, label %1318

1275:                                             ; preds = %1266
  %1276 = load i32, i32* %1181, align 4
  %1277 = icmp sgt i32 %1276, %1271
  br i1 %1277, label %1278, label %1318

1278:                                             ; preds = %1275
  %1279 = load i32, i32* %1182, align 4
  %1280 = mul nsw i32 %1279, %1271
  %1281 = add nsw i32 %1280, %1272
  %1282 = load i8, i8* %1183, align 8
  %1283 = zext i8 %1282 to i64
  %1284 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %1283
  %1285 = load i8, i8* %1284, align 1
  %1286 = zext i8 %1285 to i32
  %1287 = sdiv i32 %1271, %1286
  %1288 = sdiv i32 %1272, %1286
  %1289 = load i32, i32* %1184, align 4
  %1290 = mul nsw i32 %1289, %1287
  %1291 = add nsw i32 %1290, %1288
  %1292 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1185, align 8
  %1293 = sext i32 %1291 to i64
  %1294 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1292, i64 %1293
  %1295 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %1186, align 8
  %1296 = sext i32 %1281 to i64
  %1297 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1295, i64 %1296
  store %struct.MB_MODE_INFO* %1294, %struct.MB_MODE_INFO** %1297, align 8
  %1298 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %1186, align 8
  %1299 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1298, i64 %1296
  store %struct.MB_MODE_INFO** %1299, %struct.MB_MODE_INFO*** %74, align 8
  %1300 = load i8*, i8** %1187, align 8
  %1301 = getelementptr inbounds i8, i8* %1300, i64 %1296
  store i8* %1301, i8** %1188, align 8
  %1302 = load i32, i32* %1182, align 4
  store i32 %1302, i32* %1189, align 16
  %1303 = load i8, i8* %1183, align 8
  %1304 = load i32, i32* %1190, align 4
  %1305 = zext i8 %1303 to i64
  %1306 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %1305
  %1307 = load i8, i8* %1306, align 1
  %1308 = zext i8 %1307 to i32
  %1309 = sdiv i32 %1271, %1308
  %1310 = sdiv i32 %1272, %1308
  %1311 = mul nsw i32 %1309, %1304
  %1312 = add nsw i32 %1311, %1310
  %1313 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %1191, align 8
  %1314 = sext i32 %1312 to i64
  %1315 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %1313, i64 %1314
  store %struct.MB_MODE_INFO_EXT_FRAME* %1315, %struct.MB_MODE_INFO_EXT_FRAME** %1192, align 8
  %1316 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1299, align 8
  %1317 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1316, i64 0, i32 0
  store i8 3, i8* %1317, align 8
  br label %1318

1318:                                             ; preds = %1266, %1275, %1278
  %1319 = add nuw nsw i32 %1267, 1
  %1320 = icmp eq i32 %1319, 4
  br i1 %1320, label %1321, label %1266

1321:                                             ; preds = %1318, %1255
  %1322 = add nuw nsw i64 %1237, 1
  %1323 = icmp eq i64 %1322, 4
  br i1 %1323, label %1324, label %1236

1324:                                             ; preds = %1321, %1214
  %1325 = add nuw nsw i64 %1215, 1
  %1326 = icmp eq i64 %1325, 4
  br i1 %1326, label %1327, label %1214

1327:                                             ; preds = %1324, %1193
  %1328 = icmp ult i64 %1208, %366
  br i1 %1328, label %1193, label %1329

1329:                                             ; preds = %1327, %1173
  %1330 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 11
  %1331 = load i32, i32* %1330, align 4
  %1332 = icmp eq i32 %1331, 0
  br i1 %1332, label %1721, label %1333

1333:                                             ; preds = %1329
  %1334 = load i32, i32* %72, align 16
  %1335 = icmp sgt i32 %1334, 640
  %1336 = select i1 %1335, i32 8, i32 4
  %1337 = icmp eq i8 %324, 1
  br i1 %1337, label %1338, label %1721

1338:                                             ; preds = %1333
  %1339 = icmp eq i32 %1331, 1
  br i1 %1339, label %1363, label %1340

1340:                                             ; preds = %1338
  %1341 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 2
  %1342 = load i32, i32* %1341, align 8
  %1343 = icmp eq i32 %1342, 0
  br i1 %1343, label %1721, label %1344

1344:                                             ; preds = %1340
  %1345 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %74, align 8
  %1346 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1345, align 8
  %1347 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1346, i64 0, i32 5, i64 0
  %1348 = bitcast %union.int_mv* %1347 to %struct.mv*
  %1349 = getelementptr inbounds %struct.mv, %struct.mv* %1348, i64 0, i32 1
  %1350 = load i16, i16* %1349, align 2
  %1351 = sext i16 %1350 to i32
  %1352 = icmp sgt i32 %1336, %1351
  br i1 %1352, label %1353, label %1721

1353:                                             ; preds = %1344
  %1354 = sub nsw i32 0, %1336
  %1355 = icmp sgt i32 %1351, %1354
  br i1 %1355, label %1356, label %1721

1356:                                             ; preds = %1353
  %1357 = bitcast %union.int_mv* %1347 to i16*
  %1358 = load i16, i16* %1357, align 8
  %1359 = sext i16 %1358 to i32
  %1360 = icmp sgt i32 %1336, %1359
  %1361 = icmp sgt i32 %1359, %1354
  %1362 = and i1 %1360, %1361
  br i1 %1362, label %1363, label %1721

1363:                                             ; preds = %1356, %1338
  %1364 = load %struct.SequenceHeader*, %struct.SequenceHeader** %39, align 16
  %1365 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %1364, i64 0, i32 7
  %1366 = load i8, i8* %1365, align 4
  %1367 = icmp eq i8 %1366, 12
  br i1 %1367, label %1368, label %1493

1368:                                             ; preds = %1363
  %1369 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1370 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %74, align 8
  %1371 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1370, align 8
  %1372 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1371, i64 0, i32 0
  %1373 = load i8, i8* %1372, align 8
  switch i8 %1373, label %1388 [
    i8 12, label %1393
    i8 11, label %1381
    i8 10, label %1374
  ]

1374:                                             ; preds = %1368
  %1375 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 0, i32 2, i64 0, i32 3
  %1376 = load i32, i32* %1375, align 4
  %1377 = sext i32 %1376 to i64
  %1378 = load i64, i64* %58, align 16
  %1379 = ashr i64 %1378, 2
  %1380 = icmp sgt i64 %1379, %1377
  br i1 %1380, label %1408, label %1410

1381:                                             ; preds = %1368
  %1382 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 0, i32 1, i64 0, i32 3
  %1383 = load i32, i32* %1382, align 4
  %1384 = sext i32 %1383 to i64
  %1385 = load i64, i64* %58, align 16
  %1386 = ashr i64 %1385, 2
  %1387 = icmp sgt i64 %1386, %1384
  br i1 %1387, label %1401, label %1403

1388:                                             ; preds = %1368
  %1389 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %1390 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %1391 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %1392 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  br label %1415

1393:                                             ; preds = %1368
  %1394 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 0, i32 0, i32 3
  %1395 = load i32, i32* %1394, align 4
  %1396 = sext i32 %1395 to i64
  %1397 = load i64, i64* %58, align 16
  %1398 = ashr i64 %1397, 1
  %1399 = icmp sgt i64 %1398, %1396
  br i1 %1399, label %1400, label %1721

1400:                                             ; preds = %1393
  store i8 1, i8* %116, align 1
  br label %1721

1401:                                             ; preds = %1381
  %1402 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 1
  store i8 1, i8* %1402, align 1
  br label %1403

1403:                                             ; preds = %1401, %1381
  %1404 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 0, i32 1, i64 1, i32 3
  %1405 = load i32, i32* %1404, align 4
  %1406 = sext i32 %1405 to i64
  %1407 = icmp sgt i64 %1386, %1406
  br i1 %1407, label %1489, label %1721

1408:                                             ; preds = %1374
  %1409 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 3
  store i8 1, i8* %1409, align 1
  br label %1410

1410:                                             ; preds = %1408, %1374
  %1411 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 0, i32 2, i64 1, i32 3
  %1412 = load i32, i32* %1411, align 4
  %1413 = sext i32 %1412 to i64
  %1414 = icmp sgt i64 %1379, %1413
  br i1 %1414, label %1491, label %1721

1415:                                             ; preds = %1467, %1388
  %1416 = phi i64 [ 0, %1388 ], [ %1468, %1467 ]
  %1417 = load i32, i32* %1389, align 4
  %1418 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @set_low_temp_var_flag_128x128.idx32, i64 0, i64 %1416, i64 0
  %1419 = load i32, i32* %1418, align 8
  %1420 = add nsw i32 %1419, %4
  %1421 = mul nsw i32 %1420, %1417
  %1422 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @set_low_temp_var_flag_128x128.idx32, i64 0, i64 %1416, i64 1
  %1423 = load i32, i32* %1422, align 4
  %1424 = add i32 %1423, %5
  %1425 = add i32 %1424, %1421
  %1426 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %1390, align 8
  %1427 = sext i32 %1425 to i64
  %1428 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1426, i64 %1427
  %1429 = load i32, i32* %1391, align 8
  %1430 = icmp sgt i32 %1429, %1424
  br i1 %1430, label %1431, label %1467

1431:                                             ; preds = %1415
  %1432 = load i32, i32* %1392, align 4
  %1433 = icmp sgt i32 %1432, %1420
  br i1 %1433, label %1434, label %1467

1434:                                             ; preds = %1431
  %1435 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1428, align 8
  %1436 = icmp eq %struct.MB_MODE_INFO* %1435, null
  br i1 %1436, label %1467, label %1437

1437:                                             ; preds = %1434
  %1438 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1435, i64 0, i32 0
  %1439 = load i8, i8* %1438, align 8
  switch i8 %1439, label %1467 [
    i8 9, label %1440
    i8 6, label %1451
    i8 8, label %1451
    i8 7, label %1451
  ]

1440:                                             ; preds = %1437
  %1441 = load i64, i64* %59, align 8
  %1442 = mul nsw i64 %1441, 5
  %1443 = ashr i64 %1442, 3
  %1444 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 1, i64 %1416, i32 0, i32 0, i32 3
  %1445 = load i32, i32* %1444, align 4
  %1446 = sext i32 %1445 to i64
  %1447 = icmp sgt i64 %1443, %1446
  br i1 %1447, label %1448, label %1467

1448:                                             ; preds = %1440
  %1449 = add nuw nsw i64 %1416, 5
  %1450 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1449
  store i8 1, i8* %1450, align 1
  br label %1467

1451:                                             ; preds = %1437, %1437, %1437
  %1452 = shl i64 %1416, 2
  %1453 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 1, i64 %1416, i32 1, i64 0, i32 0, i32 0, i32 3
  %1454 = load i32, i32* %1453, align 4
  %1455 = sext i32 %1454 to i64
  %1456 = load i64, i64* %60, align 16
  %1457 = ashr i64 %1456, 8
  %1458 = icmp sgt i64 %1457, %1455
  br i1 %1458, label %1459, label %1462

1459:                                             ; preds = %1451
  %1460 = add nuw nsw i64 %1452, 9
  %1461 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1460
  store i8 1, i8* %1461, align 1
  br label %1462

1462:                                             ; preds = %1459, %1451
  %1463 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 1, i64 %1416, i32 1, i64 1, i32 0, i32 0, i32 3
  %1464 = load i32, i32* %1463, align 4
  %1465 = sext i32 %1464 to i64
  %1466 = icmp sgt i64 %1457, %1465
  br i1 %1466, label %1470, label %1473

1467:                                             ; preds = %1486, %1481, %1448, %1440, %1437, %1434, %1431, %1415
  %1468 = add nuw nsw i64 %1416, 1
  %1469 = icmp eq i64 %1468, 4
  br i1 %1469, label %1721, label %1415

1470:                                             ; preds = %1462
  %1471 = add nuw nsw i64 %1452, 10
  %1472 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1471
  store i8 1, i8* %1472, align 1
  br label %1473

1473:                                             ; preds = %1470, %1462
  %1474 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 1, i64 %1416, i32 1, i64 2, i32 0, i32 0, i32 3
  %1475 = load i32, i32* %1474, align 4
  %1476 = sext i32 %1475 to i64
  %1477 = icmp sgt i64 %1457, %1476
  br i1 %1477, label %1478, label %1481

1478:                                             ; preds = %1473
  %1479 = add nuw nsw i64 %1452, 11
  %1480 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1479
  store i8 1, i8* %1480, align 1
  br label %1481

1481:                                             ; preds = %1478, %1473
  %1482 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1369, i64 0, i32 1, i64 %1416, i32 1, i64 3, i32 0, i32 0, i32 3
  %1483 = load i32, i32* %1482, align 4
  %1484 = sext i32 %1483 to i64
  %1485 = icmp sgt i64 %1457, %1484
  br i1 %1485, label %1486, label %1467

1486:                                             ; preds = %1481
  %1487 = add nuw nsw i64 %1452, 12
  %1488 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1487
  store i8 1, i8* %1488, align 1
  br label %1467

1489:                                             ; preds = %1403
  %1490 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 2
  store i8 1, i8* %1490, align 1
  br label %1721

1491:                                             ; preds = %1410
  %1492 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 4
  store i8 1, i8* %1492, align 1
  br label %1721

1493:                                             ; preds = %1363
  %1494 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %74, align 8
  %1495 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1494, align 8
  %1496 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1495, i64 0, i32 0
  %1497 = load i8, i8* %1496, align 8
  switch i8 %1497, label %1514 [
    i8 15, label %1519
    i8 14, label %1506
    i8 13, label %1498
  ]

1498:                                             ; preds = %1493
  %1499 = getelementptr inbounds i8, i8* %45, i64 60
  %1500 = bitcast i8* %1499 to i32*
  %1501 = load i32, i32* %1500, align 4
  %1502 = sext i32 %1501 to i64
  %1503 = load i64, i64* %58, align 16
  %1504 = ashr i64 %1503, 2
  %1505 = icmp sgt i64 %1504, %1502
  br i1 %1505, label %1536, label %1538

1506:                                             ; preds = %1493
  %1507 = getelementptr inbounds i8, i8* %45, i64 28
  %1508 = bitcast i8* %1507 to i32*
  %1509 = load i32, i32* %1508, align 4
  %1510 = sext i32 %1509 to i64
  %1511 = load i64, i64* %58, align 16
  %1512 = ashr i64 %1511, 2
  %1513 = icmp sgt i64 %1512, %1510
  br i1 %1513, label %1528, label %1530

1514:                                             ; preds = %1493
  %1515 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %1516 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %1517 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %1518 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  br label %1544

1519:                                             ; preds = %1493
  %1520 = getelementptr inbounds i8, i8* %45, i64 12
  %1521 = bitcast i8* %1520 to i32*
  %1522 = load i32, i32* %1521, align 4
  %1523 = sext i32 %1522 to i64
  %1524 = load i64, i64* %58, align 16
  %1525 = ashr i64 %1524, 1
  %1526 = icmp sgt i64 %1525, %1523
  br i1 %1526, label %1527, label %1721

1527:                                             ; preds = %1519
  store i8 1, i8* %116, align 1
  br label %1721

1528:                                             ; preds = %1506
  %1529 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 1
  store i8 1, i8* %1529, align 1
  br label %1530

1530:                                             ; preds = %1528, %1506
  %1531 = getelementptr inbounds i8, i8* %45, i64 44
  %1532 = bitcast i8* %1531 to i32*
  %1533 = load i32, i32* %1532, align 4
  %1534 = sext i32 %1533 to i64
  %1535 = icmp sgt i64 %1512, %1534
  br i1 %1535, label %1717, label %1721

1536:                                             ; preds = %1498
  %1537 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 3
  store i8 1, i8* %1537, align 1
  br label %1538

1538:                                             ; preds = %1536, %1498
  %1539 = getelementptr inbounds i8, i8* %45, i64 76
  %1540 = bitcast i8* %1539 to i32*
  %1541 = load i32, i32* %1540, align 4
  %1542 = sext i32 %1541 to i64
  %1543 = icmp sgt i64 %1504, %1542
  br i1 %1543, label %1719, label %1721

1544:                                             ; preds = %1685, %1514
  %1545 = phi i64 [ 0, %1514 ], [ %1686, %1685 ]
  %1546 = load i32, i32* %1515, align 4
  %1547 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @set_low_temp_var_flag_128x128.idx64, i64 0, i64 %1545, i64 0
  %1548 = load i32, i32* %1547, align 8
  %1549 = add nsw i32 %1548, %4
  %1550 = mul nsw i32 %1549, %1546
  %1551 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @set_low_temp_var_flag_128x128.idx64, i64 0, i64 %1545, i64 1
  %1552 = load i32, i32* %1551, align 4
  %1553 = add i32 %1552, %5
  %1554 = add i32 %1553, %1550
  %1555 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %1516, align 8
  %1556 = sext i32 %1554 to i64
  %1557 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1555, i64 %1556
  %1558 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1557, align 8
  %1559 = icmp eq %struct.MB_MODE_INFO* %1558, null
  br i1 %1559, label %1685, label %1560

1560:                                             ; preds = %1544
  %1561 = load i32, i32* %1517, align 8
  %1562 = icmp sgt i32 %1561, %1553
  br i1 %1562, label %1563, label %1685

1563:                                             ; preds = %1560
  %1564 = load i32, i32* %1518, align 4
  %1565 = icmp sgt i32 %1564, %1549
  br i1 %1565, label %1566, label %1685

1566:                                             ; preds = %1563
  %1567 = load i64, i64* %59, align 8
  %1568 = mul nsw i64 %1567, 5
  %1569 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1558, i64 0, i32 0
  %1570 = load i8, i8* %1569, align 8
  switch i8 %1570, label %1587 [
    i8 12, label %1592
    i8 11, label %1579
    i8 10, label %1571
  ]

1571:                                             ; preds = %1566
  %1572 = ashr i64 %1568, 4
  %1573 = shl nuw i64 %1545, 1
  %1574 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1575 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1574, i64 %1545, i32 0, i32 2, i64 0, i32 3
  %1576 = load i32, i32* %1575, align 4
  %1577 = sext i32 %1576 to i64
  %1578 = icmp sgt i64 %1572, %1577
  br i1 %1578, label %1612, label %1616

1579:                                             ; preds = %1566
  %1580 = ashr i64 %1568, 4
  %1581 = shl nuw i64 %1545, 1
  %1582 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1583 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1582, i64 %1545, i32 0, i32 1, i64 0, i32 3
  %1584 = load i32, i32* %1583, align 4
  %1585 = sext i32 %1584 to i64
  %1586 = icmp sgt i64 %1580, %1585
  br i1 %1586, label %1602, label %1606

1587:                                             ; preds = %1566
  %1588 = shl i64 %1545, 4
  %1589 = add nuw nsw i64 %1588, 41
  %1590 = shl i64 %1545, 2
  %1591 = add nuw nsw i64 %1590, 25
  br label %1622

1592:                                             ; preds = %1566
  %1593 = ashr i64 %1568, 3
  %1594 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1595 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1594, i64 %1545, i32 0, i32 0, i32 3
  %1596 = load i32, i32* %1595, align 4
  %1597 = sext i32 %1596 to i64
  %1598 = icmp sgt i64 %1593, %1597
  br i1 %1598, label %1599, label %1685

1599:                                             ; preds = %1592
  %1600 = add nuw nsw i64 %1545, 5
  %1601 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1600
  store i8 1, i8* %1601, align 1
  br label %1685

1602:                                             ; preds = %1579
  %1603 = add nuw nsw i64 %1581, 9
  %1604 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1603
  store i8 1, i8* %1604, align 1
  %1605 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  br label %1606

1606:                                             ; preds = %1602, %1579
  %1607 = phi %struct.VP64x64* [ %1582, %1579 ], [ %1605, %1602 ]
  %1608 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1607, i64 %1545, i32 0, i32 1, i64 1, i32 3
  %1609 = load i32, i32* %1608, align 4
  %1610 = sext i32 %1609 to i64
  %1611 = icmp sgt i64 %1580, %1610
  br i1 %1611, label %1691, label %1685

1612:                                             ; preds = %1571
  %1613 = add nuw nsw i64 %1573, 17
  %1614 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1613
  store i8 1, i8* %1614, align 1
  %1615 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  br label %1616

1616:                                             ; preds = %1612, %1571
  %1617 = phi %struct.VP64x64* [ %1574, %1571 ], [ %1615, %1612 ]
  %1618 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1617, i64 %1545, i32 0, i32 2, i64 1, i32 3
  %1619 = load i32, i32* %1618, align 4
  %1620 = sext i32 %1619 to i64
  %1621 = icmp sgt i64 %1572, %1620
  br i1 %1621, label %1688, label %1685

1622:                                             ; preds = %1682, %1587
  %1623 = phi %struct.MB_MODE_INFO** [ %1555, %1587 ], [ %1684, %1682 ]
  %1624 = phi i32 [ %1546, %1587 ], [ %1683, %1682 ]
  %1625 = phi i64 [ 0, %1587 ], [ %1680, %1682 ]
  %1626 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @set_low_temp_var_flag_128x128.idx32, i64 0, i64 %1625, i64 0
  %1627 = load i32, i32* %1626, align 8
  %1628 = mul nsw i32 %1627, %1624
  %1629 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @set_low_temp_var_flag_128x128.idx32, i64 0, i64 %1625, i64 1
  %1630 = load i32, i32* %1629, align 4
  %1631 = add nsw i32 %1628, %1630
  %1632 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1623, i64 %1556
  %1633 = sext i32 %1631 to i64
  %1634 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1632, i64 %1633
  %1635 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1634, align 8
  %1636 = icmp eq %struct.MB_MODE_INFO* %1635, null
  br i1 %1636, label %1679, label %1637

1637:                                             ; preds = %1622
  %1638 = load i32, i32* %1517, align 8
  %1639 = add nsw i32 %1630, %1553
  %1640 = icmp sgt i32 %1638, %1639
  br i1 %1640, label %1641, label %1679

1641:                                             ; preds = %1637
  %1642 = load i32, i32* %1518, align 4
  %1643 = add nsw i32 %1627, %1549
  %1644 = icmp sgt i32 %1642, %1643
  br i1 %1644, label %1645, label %1679

1645:                                             ; preds = %1641
  %1646 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1635, i64 0, i32 0
  %1647 = load i8, i8* %1646, align 8
  switch i8 %1647, label %1679 [
    i8 9, label %1648
    i8 6, label %1660
    i8 8, label %1660
    i8 7, label %1660
  ]

1648:                                             ; preds = %1645
  %1649 = load i64, i64* %60, align 16
  %1650 = mul nsw i64 %1649, 5
  %1651 = ashr i64 %1650, 3
  %1652 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1653 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1652, i64 %1545, i32 1, i64 %1625, i32 0, i32 0, i32 3
  %1654 = load i32, i32* %1653, align 4
  %1655 = sext i32 %1654 to i64
  %1656 = icmp sgt i64 %1651, %1655
  br i1 %1656, label %1657, label %1679

1657:                                             ; preds = %1648
  %1658 = add nuw nsw i64 %1591, %1625
  %1659 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1658
  store i8 1, i8* %1659, align 1
  br label %1679

1660:                                             ; preds = %1645, %1645, %1645
  %1661 = shl i64 %1625, 2
  %1662 = add nuw nsw i64 %1589, %1661
  %1663 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  %1664 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1663, i64 %1545, i32 1, i64 %1625, i32 1, i64 0, i32 0, i32 0, i32 3
  %1665 = load i32, i32* %1664, align 4
  %1666 = sext i32 %1665 to i64
  %1667 = load i64, i64* %61, align 8
  %1668 = ashr i64 %1667, 8
  %1669 = icmp sgt i64 %1668, %1666
  br i1 %1669, label %1670, label %1673

1670:                                             ; preds = %1660
  %1671 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1662
  store i8 1, i8* %1671, align 1
  %1672 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  br label %1673

1673:                                             ; preds = %1670, %1660
  %1674 = phi %struct.VP64x64* [ %1663, %1660 ], [ %1672, %1670 ]
  %1675 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1674, i64 %1545, i32 1, i64 %1625, i32 1, i64 1, i32 0, i32 0, i32 3
  %1676 = load i32, i32* %1675, align 4
  %1677 = sext i32 %1676 to i64
  %1678 = icmp sgt i64 %1668, %1677
  br i1 %1678, label %1694, label %1698

1679:                                             ; preds = %1714, %1708, %1657, %1648, %1645, %1641, %1637, %1622
  %1680 = add nuw nsw i64 %1625, 1
  %1681 = icmp eq i64 %1680, 4
  br i1 %1681, label %1685, label %1682

1682:                                             ; preds = %1679
  %1683 = load i32, i32* %1515, align 4
  %1684 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %1516, align 8
  br label %1622

1685:                                             ; preds = %1679, %1691, %1688, %1616, %1606, %1599, %1592, %1563, %1560, %1544
  %1686 = add nuw nsw i64 %1545, 1
  %1687 = icmp eq i64 %1686, 4
  br i1 %1687, label %1721, label %1544

1688:                                             ; preds = %1616
  %1689 = add nuw nsw i64 %1573, 18
  %1690 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1689
  store i8 1, i8* %1690, align 1
  br label %1685

1691:                                             ; preds = %1606
  %1692 = add nuw nsw i64 %1581, 10
  %1693 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1692
  store i8 1, i8* %1693, align 1
  br label %1685

1694:                                             ; preds = %1673
  %1695 = add nuw nsw i64 %1662, 1
  %1696 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1695
  store i8 1, i8* %1696, align 1
  %1697 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  br label %1698

1698:                                             ; preds = %1694, %1673
  %1699 = phi %struct.VP64x64* [ %1697, %1694 ], [ %1674, %1673 ]
  %1700 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1699, i64 %1545, i32 1, i64 %1625, i32 1, i64 2, i32 0, i32 0, i32 3
  %1701 = load i32, i32* %1700, align 4
  %1702 = sext i32 %1701 to i64
  %1703 = icmp sgt i64 %1668, %1702
  br i1 %1703, label %1704, label %1708

1704:                                             ; preds = %1698
  %1705 = or i64 %1662, 2
  %1706 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1705
  store i8 1, i8* %1706, align 1
  %1707 = load %struct.VP64x64*, %struct.VP64x64** %55, align 8
  br label %1708

1708:                                             ; preds = %1704, %1698
  %1709 = phi %struct.VP64x64* [ %1707, %1704 ], [ %1699, %1698 ]
  %1710 = getelementptr inbounds %struct.VP64x64, %struct.VP64x64* %1709, i64 %1545, i32 1, i64 %1625, i32 1, i64 3, i32 0, i32 0, i32 3
  %1711 = load i32, i32* %1710, align 4
  %1712 = sext i32 %1711 to i64
  %1713 = icmp sgt i64 %1668, %1712
  br i1 %1713, label %1714, label %1679

1714:                                             ; preds = %1708
  %1715 = add nuw nsw i64 %1662, 3
  %1716 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 %1715
  store i8 1, i8* %1716, align 1
  br label %1679

1717:                                             ; preds = %1530
  %1718 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 2
  store i8 1, i8* %1718, align 1
  br label %1721

1719:                                             ; preds = %1538
  %1720 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 38, i32 0, i64 4
  store i8 1, i8* %1720, align 1
  br label %1721

1721:                                             ; preds = %1685, %1467, %1719, %1717, %1538, %1530, %1527, %1519, %1491, %1489, %1410, %1403, %1400, %1393, %1356, %1353, %1344, %1340, %1333, %1329
  %1722 = icmp eq i32 %322, 0
  br i1 %1722, label %1723, label %1785

1723:                                             ; preds = %1721
  %1724 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 8
  %1725 = load i8, i8* %1724, align 2, !range !2
  %1726 = icmp eq i8 %1725, 0
  br i1 %1726, label %1727, label %1785

1727:                                             ; preds = %1723
  %1728 = lshr i32 %323, 2
  %1729 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 1, i32 1
  %1730 = load i32, i32* %1729, align 4
  %1731 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 1, i32 2
  %1732 = load i32, i32* %1731, align 8
  %1733 = sext i32 %1730 to i64
  %1734 = sext i32 %1732 to i64
  %1735 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %44, i64 %1733, i64 %1734
  %1736 = load i8, i8* %1735, align 1
  %1737 = icmp eq i8 %1736, -1
  br i1 %1737, label %1752, label %1738

1738:                                             ; preds = %1727
  %1739 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %363, align 16
  %1740 = zext i8 %1736 to i64
  %1741 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %1739, i64 0, i32 21, i64 %1740, i32 0
  %1742 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %1741, align 8
  %1743 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 0, i64 1, i32 6, i32 0
  %1744 = load i8*, i8** %1743, align 8
  %1745 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 0, i64 1, i32 6, i32 4
  %1746 = load i32, i32* %1745, align 8
  %1747 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 1, i32 3, i32 0
  %1748 = load i8*, i8** %1747, align 8
  %1749 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 1, i32 3, i32 4
  %1750 = load i32, i32* %1749, align 8
  %1751 = call i32 %1742(i8* %1744, i32 %1746, i8* %1748, i32 %1750) #4
  br label %1752

1752:                                             ; preds = %1738, %1727
  %1753 = phi i32 [ %1751, %1738 ], [ -1, %1727 ]
  %1754 = icmp ugt i32 %1753, %1728
  %1755 = zext i1 %1754 to i8
  %1756 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 59, i64 0
  store i8 %1755, i8* %1756, align 1
  %1757 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 2, i32 1
  %1758 = load i32, i32* %1757, align 4
  %1759 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 2, i32 2
  %1760 = load i32, i32* %1759, align 8
  %1761 = sext i32 %1758 to i64
  %1762 = sext i32 %1760 to i64
  %1763 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %44, i64 %1761, i64 %1762
  %1764 = load i8, i8* %1763, align 1
  %1765 = icmp eq i8 %1764, -1
  br i1 %1765, label %1780, label %1766

1766:                                             ; preds = %1752
  %1767 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %363, align 16
  %1768 = zext i8 %1764 to i64
  %1769 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %1767, i64 0, i32 21, i64 %1768, i32 0
  %1770 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %1769, align 8
  %1771 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 0, i64 2, i32 6, i32 0
  %1772 = load i8*, i8** %1771, align 8
  %1773 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 0, i64 2, i32 6, i32 4
  %1774 = load i32, i32* %1773, align 8
  %1775 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 2, i32 3, i32 0
  %1776 = load i8*, i8** %1775, align 8
  %1777 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i32 4, i64 2, i32 3, i32 4
  %1778 = load i32, i32* %1777, align 8
  %1779 = call i32 %1770(i8* %1772, i32 %1774, i8* %1776, i32 %1778) #4
  br label %1780

1780:                                             ; preds = %1766, %1752
  %1781 = phi i32 [ %1779, %1766 ], [ -1, %1752 ]
  %1782 = icmp ugt i32 %1781, %1728
  %1783 = zext i1 %1782 to i8
  %1784 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 59, i64 1
  store i8 %1783, i8* %1784, align 1
  br label %1785

1785:                                             ; preds = %1721, %1723, %1780
  br i1 %46, label %1786, label %1787

1786:                                             ; preds = %1785
  call void @aom_free(i8* nonnull %45) #4
  br label %1787

1787:                                             ; preds = %1786, %1785
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %73) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %57) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 85, i8* nonnull %16) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @aom_malloc(i64) local_unnamed_addr #3

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #3

declare i32 @av1_get_qindex(%struct.segmentation*, i32, i32) local_unnamed_addr #3

declare i32 @av1_noise_estimate_extract_level(%struct.noise_estimate*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @set_vt_partitioning(%struct.AV1_COMP* readonly, %struct.macroblock* nocapture, %struct.macroblockd*, %struct.TileInfo* nocapture readonly, i8*, i8 zeroext, i32, i32, i64, i8 zeroext, i32) unnamed_addr #0 {
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %13 = zext i8 %5 to i64
  %14 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %13
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = icmp eq i32 %10, 1
  br i1 %20, label %636, label %21

21:                                               ; preds = %11
  %22 = icmp eq i8 %5, %9
  br i1 %22, label %23, label %124

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %12, i64 0, i32 0, i32 0
  %25 = load i8, i8* %24, align 16
  %26 = and i8 %25, -3
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %47

28:                                               ; preds = %23
  %29 = bitcast i8* %4 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i8, i8* %4, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = mul nsw i64 %34, %34
  %36 = getelementptr inbounds i8, i8* %4, i64 8
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = lshr i64 %35, %39
  %41 = trunc i64 %40 to i32
  %42 = sub i32 %30, %41
  %43 = shl i32 %42, 8
  %44 = lshr i32 %43, %38
  %45 = getelementptr inbounds i8, i8* %4, i64 12
  %46 = bitcast i8* %45 to i32*
  store i32 %44, i32* %46, align 4
  br label %47

47:                                               ; preds = %23, %28
  %48 = add nsw i32 %16, %7
  %49 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %3, i64 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = icmp sgt i32 %48, %50
  br i1 %51, label %636, label %52

52:                                               ; preds = %47
  %53 = add nsw i32 %19, %6
  %54 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %3, i64 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp sgt i32 %53, %55
  br i1 %56, label %636, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds i8, i8* %4, i64 12
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = sext i32 %60 to i64
  %62 = icmp slt i64 %61, %8
  br i1 %62, label %63, label %636

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %65 = load i32, i32* %64, align 16
  %66 = icmp sgt i32 %65, %7
  br i1 %66, label %67, label %636

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, %6
  br i1 %70, label %71, label %636

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %73 = load i32, i32* %72, align 4
  %74 = mul nsw i32 %73, %6
  %75 = add nsw i32 %74, %7
  %76 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 8
  %77 = load i8, i8* %76, align 8
  %78 = zext i8 %77 to i64
  %79 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = sdiv i32 %6, %81
  %83 = sdiv i32 %7, %81
  %84 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 7
  %85 = load i32, i32* %84, align 4
  %86 = mul nsw i32 %85, %82
  %87 = add nsw i32 %86, %83
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 5
  %89 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %88, align 8
  %90 = sext i32 %87 to i64
  %91 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %89, i64 %90
  %92 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %93 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %92, align 8
  %94 = sext i32 %75 to i64
  %95 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %93, i64 %94
  store %struct.MB_MODE_INFO* %91, %struct.MB_MODE_INFO** %95, align 8
  %96 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %92, align 8
  %97 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %96, i64 %94
  %98 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MB_MODE_INFO** %97, %struct.MB_MODE_INFO*** %98, align 8
  %99 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 12
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 %94
  %102 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 15
  store i8* %101, i8** %102, align 8
  %103 = load i32, i32* %72, align 4
  %104 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 16
  store i32 %103, i32* %104, align 16
  %105 = load i8, i8* %76, align 8
  %106 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = zext i8 %105 to i64
  %109 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = sdiv i32 %6, %111
  %113 = sdiv i32 %7, %111
  %114 = mul nsw i32 %112, %107
  %115 = add nsw i32 %114, %113
  %116 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 0
  %117 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %116, align 8
  %118 = sext i32 %115 to i64
  %119 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %117, i64 %118
  %120 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4
  store %struct.MB_MODE_INFO_EXT_FRAME* %119, %struct.MB_MODE_INFO_EXT_FRAME** %120, align 8
  %121 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %98, align 8
  %122 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %121, align 8
  %123 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %122, i64 0, i32 0
  store i8 %5, i8* %123, align 8
  br label %636

124:                                              ; preds = %21
  %125 = icmp ugt i8 %5, %9
  br i1 %125, label %126, label %636

126:                                              ; preds = %124
  %127 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %12, i64 0, i32 0, i32 0
  %128 = load i8, i8* %127, align 16
  %129 = and i8 %128, -3
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %131, label %151

131:                                              ; preds = %126
  %132 = bitcast i8* %4 to i32*
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds i8, i8* %4, i64 4
  %135 = bitcast i8* %134 to i32*
  %136 = load i32, i32* %135, align 4
  %137 = sext i32 %136 to i64
  %138 = mul nsw i64 %137, %137
  %139 = getelementptr inbounds i8, i8* %4, i64 8
  %140 = bitcast i8* %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = zext i32 %141 to i64
  %143 = lshr i64 %138, %142
  %144 = trunc i64 %143 to i32
  %145 = sub i32 %133, %144
  %146 = shl i32 %145, 8
  %147 = lshr i32 %146, %141
  %148 = getelementptr inbounds i8, i8* %4, i64 12
  %149 = bitcast i8* %148 to i32*
  store i32 %147, i32* %149, align 4
  %150 = load i8, i8* %127, align 16
  br label %151

151:                                              ; preds = %126, %131
  %152 = phi i8 [ %128, %126 ], [ %150, %131 ]
  %153 = and i8 %152, -3
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %155, label %164

155:                                              ; preds = %151
  %156 = icmp ugt i8 %5, 9
  br i1 %156, label %636, label %157

157:                                              ; preds = %155
  %158 = getelementptr inbounds i8, i8* %4, i64 12
  %159 = bitcast i8* %158 to i32*
  %160 = load i32, i32* %159, align 4
  %161 = sext i32 %160 to i64
  %162 = shl i64 %8, 4
  %163 = icmp slt i64 %162, %161
  br i1 %163, label %636, label %164

164:                                              ; preds = %151, %157
  %165 = add nsw i32 %16, %7
  %166 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %3, i64 0, i32 3
  %167 = load i32, i32* %166, align 4
  %168 = icmp sgt i32 %165, %167
  br i1 %168, label %169, label %173

169:                                              ; preds = %164
  %170 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %3, i64 0, i32 1
  %171 = load i32, i32* %170, align 4
  %172 = add nsw i32 %19, %6
  br label %245

173:                                              ; preds = %164
  %174 = add nsw i32 %19, %6
  %175 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %3, i64 0, i32 1
  %176 = load i32, i32* %175, align 4
  %177 = icmp sgt i32 %174, %176
  br i1 %177, label %245, label %178

178:                                              ; preds = %173
  %179 = getelementptr inbounds i8, i8* %4, i64 12
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %181 to i64
  %183 = icmp slt i64 %182, %8
  br i1 %183, label %184, label %245

184:                                              ; preds = %178
  %185 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %186 = load i32, i32* %185, align 16
  %187 = icmp sgt i32 %186, %7
  br i1 %187, label %188, label %636

188:                                              ; preds = %184
  %189 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %190 = load i32, i32* %189, align 4
  %191 = icmp sgt i32 %190, %6
  br i1 %191, label %192, label %636

192:                                              ; preds = %188
  %193 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %194 = load i32, i32* %193, align 4
  %195 = mul nsw i32 %194, %6
  %196 = add nsw i32 %195, %7
  %197 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 8
  %198 = load i8, i8* %197, align 8
  %199 = zext i8 %198 to i64
  %200 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %199
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = sdiv i32 %6, %202
  %204 = sdiv i32 %7, %202
  %205 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 7
  %206 = load i32, i32* %205, align 4
  %207 = mul nsw i32 %206, %203
  %208 = add nsw i32 %207, %204
  %209 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 5
  %210 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %209, align 8
  %211 = sext i32 %208 to i64
  %212 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %210, i64 %211
  %213 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %214 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %213, align 8
  %215 = sext i32 %196 to i64
  %216 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %214, i64 %215
  store %struct.MB_MODE_INFO* %212, %struct.MB_MODE_INFO** %216, align 8
  %217 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %213, align 8
  %218 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %217, i64 %215
  %219 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MB_MODE_INFO** %218, %struct.MB_MODE_INFO*** %219, align 8
  %220 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 12
  %221 = load i8*, i8** %220, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 %215
  %223 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 15
  store i8* %222, i8** %223, align 8
  %224 = load i32, i32* %193, align 4
  %225 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 16
  store i32 %224, i32* %225, align 16
  %226 = load i8, i8* %197, align 8
  %227 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 2
  %228 = load i32, i32* %227, align 4
  %229 = zext i8 %226 to i64
  %230 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %229
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i32
  %233 = sdiv i32 %6, %232
  %234 = sdiv i32 %7, %232
  %235 = mul nsw i32 %233, %228
  %236 = add nsw i32 %235, %234
  %237 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 0
  %238 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %237, align 8
  %239 = sext i32 %236 to i64
  %240 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %238, i64 %239
  %241 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4
  store %struct.MB_MODE_INFO_EXT_FRAME* %240, %struct.MB_MODE_INFO_EXT_FRAME** %241, align 8
  %242 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %219, align 8
  %243 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %242, align 8
  %244 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %243, i64 0, i32 0
  store i8 %5, i8* %244, align 8
  br label %636

245:                                              ; preds = %169, %173, %178
  %246 = phi i32 [ %172, %169 ], [ %174, %173 ], [ %174, %178 ]
  %247 = phi i32 [ %171, %169 ], [ %176, %173 ], [ %176, %178 ]
  %248 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %3, i64 0, i32 1
  %249 = icmp sgt i32 %246, %247
  br i1 %249, label %441, label %250

250:                                              ; preds = %245
  %251 = lshr i32 %16, 1
  %252 = add nsw i32 %251, %7
  %253 = icmp sgt i32 %252, %167
  br i1 %253, label %441, label %254

254:                                              ; preds = %250
  switch i8 %5, label %263 [
    i8 15, label %258
    i8 3, label %259
    i8 6, label %255
    i8 9, label %256
    i8 12, label %257
  ]

255:                                              ; preds = %254
  br label %259

256:                                              ; preds = %254
  br label %259

257:                                              ; preds = %254
  br label %259

258:                                              ; preds = %254
  br label %259

259:                                              ; preds = %254, %258, %257, %256, %255
  %260 = phi i64 [ 2, %255 ], [ 3, %256 ], [ 4, %257 ], [ 5, %258 ], [ 1, %254 ]
  %261 = getelementptr inbounds [10 x [6 x i8]], [10 x [6 x i8]]* @subsize_lookup, i64 0, i64 2, i64 %260
  %262 = load i8, i8* %261, align 1
  br label %263

263:                                              ; preds = %254, %259
  %264 = phi i8 [ %262, %259 ], [ -1, %254 ]
  %265 = getelementptr inbounds i8, i8* %4, i64 48
  %266 = bitcast i8* %265 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = getelementptr inbounds i8, i8* %4, i64 52
  %269 = bitcast i8* %268 to i32*
  %270 = load i32, i32* %269, align 4
  %271 = sext i32 %270 to i64
  %272 = mul nsw i64 %271, %271
  %273 = getelementptr inbounds i8, i8* %4, i64 56
  %274 = bitcast i8* %273 to i32*
  %275 = load i32, i32* %274, align 4
  %276 = zext i32 %275 to i64
  %277 = lshr i64 %272, %276
  %278 = trunc i64 %277 to i32
  %279 = sub i32 %267, %278
  %280 = shl i32 %279, 8
  %281 = lshr i32 %280, %275
  %282 = getelementptr inbounds i8, i8* %4, i64 60
  %283 = bitcast i8* %282 to i32*
  store i32 %281, i32* %283, align 4
  %284 = getelementptr inbounds i8, i8* %4, i64 64
  %285 = bitcast i8* %284 to i32*
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr inbounds i8, i8* %4, i64 68
  %288 = bitcast i8* %287 to i32*
  %289 = load i32, i32* %288, align 4
  %290 = sext i32 %289 to i64
  %291 = mul nsw i64 %290, %290
  %292 = getelementptr inbounds i8, i8* %4, i64 72
  %293 = bitcast i8* %292 to i32*
  %294 = load i32, i32* %293, align 4
  %295 = zext i32 %294 to i64
  %296 = lshr i64 %291, %295
  %297 = trunc i64 %296 to i32
  %298 = sub i32 %286, %297
  %299 = shl i32 %298, 8
  %300 = lshr i32 %299, %294
  %301 = getelementptr inbounds i8, i8* %4, i64 76
  %302 = bitcast i8* %301 to i32*
  store i32 %300, i32* %302, align 4
  %303 = sext i32 %281 to i64
  %304 = icmp slt i64 %303, %8
  %305 = sext i32 %300 to i64
  %306 = icmp slt i64 %305, %8
  %307 = and i1 %304, %306
  br i1 %307, label %308, label %441

308:                                              ; preds = %263
  %309 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 1, i32 1
  %310 = load i32, i32* %309, align 4
  %311 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 1, i32 2
  %312 = load i32, i32* %311, align 8
  %313 = zext i8 %264 to i64
  %314 = sext i32 %310 to i64
  %315 = sext i32 %312 to i64
  %316 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %313, i64 %314, i64 %315
  %317 = load i8, i8* %316, align 1
  %318 = icmp eq i8 %317, -1
  br i1 %318, label %441, label %319

319:                                              ; preds = %308
  %320 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %321 = load i32, i32* %320, align 16
  %322 = icmp sgt i32 %321, %7
  br i1 %322, label %323, label %381

323:                                              ; preds = %319
  %324 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %325 = load i32, i32* %324, align 4
  %326 = icmp sgt i32 %325, %6
  br i1 %326, label %327, label %381

327:                                              ; preds = %323
  %328 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %329 = load i32, i32* %328, align 4
  %330 = mul nsw i32 %329, %6
  %331 = add nsw i32 %330, %7
  %332 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 8
  %333 = load i8, i8* %332, align 8
  %334 = zext i8 %333 to i64
  %335 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %334
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  %338 = sdiv i32 %6, %337
  %339 = sdiv i32 %7, %337
  %340 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 7
  %341 = load i32, i32* %340, align 4
  %342 = mul nsw i32 %341, %338
  %343 = add nsw i32 %342, %339
  %344 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 5
  %345 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %344, align 8
  %346 = sext i32 %343 to i64
  %347 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %345, i64 %346
  %348 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %349 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %348, align 8
  %350 = sext i32 %331 to i64
  %351 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %349, i64 %350
  store %struct.MB_MODE_INFO* %347, %struct.MB_MODE_INFO** %351, align 8
  %352 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %348, align 8
  %353 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %352, i64 %350
  %354 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MB_MODE_INFO** %353, %struct.MB_MODE_INFO*** %354, align 8
  %355 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 12
  %356 = load i8*, i8** %355, align 8
  %357 = getelementptr inbounds i8, i8* %356, i64 %350
  %358 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 15
  store i8* %357, i8** %358, align 8
  %359 = load i32, i32* %328, align 4
  %360 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 16
  store i32 %359, i32* %360, align 16
  %361 = load i8, i8* %332, align 8
  %362 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 2
  %363 = load i32, i32* %362, align 4
  %364 = zext i8 %361 to i64
  %365 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %364
  %366 = load i8, i8* %365, align 1
  %367 = zext i8 %366 to i32
  %368 = sdiv i32 %6, %367
  %369 = sdiv i32 %7, %367
  %370 = mul nsw i32 %368, %363
  %371 = add nsw i32 %370, %369
  %372 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 0
  %373 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %372, align 8
  %374 = sext i32 %371 to i64
  %375 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %373, i64 %374
  %376 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4
  store %struct.MB_MODE_INFO_EXT_FRAME* %375, %struct.MB_MODE_INFO_EXT_FRAME** %376, align 8
  %377 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %354, align 8
  %378 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %377, align 8
  %379 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %378, i64 0, i32 0
  store i8 %264, i8* %379, align 8
  %380 = load i32, i32* %320, align 16
  br label %381

381:                                              ; preds = %319, %323, %327
  %382 = phi i32 [ %321, %319 ], [ %321, %323 ], [ %380, %327 ]
  %383 = icmp sgt i32 %382, %252
  br i1 %383, label %384, label %636

384:                                              ; preds = %381
  %385 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %386 = load i32, i32* %385, align 4
  %387 = icmp sgt i32 %386, %6
  br i1 %387, label %388, label %636

388:                                              ; preds = %384
  %389 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %390 = load i32, i32* %389, align 4
  %391 = mul nsw i32 %390, %6
  %392 = add nsw i32 %391, %252
  %393 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 8
  %394 = load i8, i8* %393, align 8
  %395 = zext i8 %394 to i64
  %396 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %395
  %397 = load i8, i8* %396, align 1
  %398 = zext i8 %397 to i32
  %399 = sdiv i32 %6, %398
  %400 = sdiv i32 %252, %398
  %401 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 7
  %402 = load i32, i32* %401, align 4
  %403 = mul nsw i32 %402, %399
  %404 = add nsw i32 %403, %400
  %405 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 5
  %406 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %405, align 8
  %407 = sext i32 %404 to i64
  %408 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %406, i64 %407
  %409 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %410 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %409, align 8
  %411 = sext i32 %392 to i64
  %412 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %410, i64 %411
  store %struct.MB_MODE_INFO* %408, %struct.MB_MODE_INFO** %412, align 8
  %413 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %409, align 8
  %414 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %413, i64 %411
  %415 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MB_MODE_INFO** %414, %struct.MB_MODE_INFO*** %415, align 8
  %416 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 12
  %417 = load i8*, i8** %416, align 8
  %418 = getelementptr inbounds i8, i8* %417, i64 %411
  %419 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 15
  store i8* %418, i8** %419, align 8
  %420 = load i32, i32* %389, align 4
  %421 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 16
  store i32 %420, i32* %421, align 16
  %422 = load i8, i8* %393, align 8
  %423 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 2
  %424 = load i32, i32* %423, align 4
  %425 = zext i8 %422 to i64
  %426 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %425
  %427 = load i8, i8* %426, align 1
  %428 = zext i8 %427 to i32
  %429 = sdiv i32 %6, %428
  %430 = sdiv i32 %252, %428
  %431 = mul nsw i32 %429, %424
  %432 = add nsw i32 %431, %430
  %433 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 0
  %434 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %433, align 8
  %435 = sext i32 %432 to i64
  %436 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %434, i64 %435
  %437 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4
  store %struct.MB_MODE_INFO_EXT_FRAME* %436, %struct.MB_MODE_INFO_EXT_FRAME** %437, align 8
  %438 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %415, align 8
  %439 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %438, align 8
  %440 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %439, i64 0, i32 0
  store i8 %264, i8* %440, align 8
  br label %636

441:                                              ; preds = %308, %263, %250, %245
  %442 = load i32, i32* %166, align 4
  %443 = icmp sgt i32 %165, %442
  br i1 %443, label %636, label %444

444:                                              ; preds = %441
  %445 = lshr i32 %19, 1
  %446 = add nsw i32 %445, %6
  %447 = load i32, i32* %248, align 4
  %448 = icmp sgt i32 %446, %447
  br i1 %448, label %636, label %449

449:                                              ; preds = %444
  switch i8 %5, label %458 [
    i8 15, label %453
    i8 3, label %454
    i8 6, label %450
    i8 9, label %451
    i8 12, label %452
  ]

450:                                              ; preds = %449
  br label %454

451:                                              ; preds = %449
  br label %454

452:                                              ; preds = %449
  br label %454

453:                                              ; preds = %449
  br label %454

454:                                              ; preds = %449, %453, %452, %451, %450
  %455 = phi i64 [ 2, %450 ], [ 3, %451 ], [ 4, %452 ], [ 5, %453 ], [ 1, %449 ]
  %456 = getelementptr inbounds [10 x [6 x i8]], [10 x [6 x i8]]* @subsize_lookup, i64 0, i64 1, i64 %455
  %457 = load i8, i8* %456, align 1
  br label %458

458:                                              ; preds = %449, %454
  %459 = phi i8 [ %457, %454 ], [ -1, %449 ]
  %460 = getelementptr inbounds i8, i8* %4, i64 16
  %461 = bitcast i8* %460 to i32*
  %462 = load i32, i32* %461, align 4
  %463 = getelementptr inbounds i8, i8* %4, i64 20
  %464 = bitcast i8* %463 to i32*
  %465 = load i32, i32* %464, align 4
  %466 = sext i32 %465 to i64
  %467 = mul nsw i64 %466, %466
  %468 = getelementptr inbounds i8, i8* %4, i64 24
  %469 = bitcast i8* %468 to i32*
  %470 = load i32, i32* %469, align 4
  %471 = zext i32 %470 to i64
  %472 = lshr i64 %467, %471
  %473 = trunc i64 %472 to i32
  %474 = sub i32 %462, %473
  %475 = shl i32 %474, 8
  %476 = lshr i32 %475, %470
  %477 = getelementptr inbounds i8, i8* %4, i64 28
  %478 = bitcast i8* %477 to i32*
  store i32 %476, i32* %478, align 4
  %479 = getelementptr inbounds i8, i8* %4, i64 32
  %480 = bitcast i8* %479 to i32*
  %481 = load i32, i32* %480, align 4
  %482 = getelementptr inbounds i8, i8* %4, i64 36
  %483 = bitcast i8* %482 to i32*
  %484 = load i32, i32* %483, align 4
  %485 = sext i32 %484 to i64
  %486 = mul nsw i64 %485, %485
  %487 = getelementptr inbounds i8, i8* %4, i64 40
  %488 = bitcast i8* %487 to i32*
  %489 = load i32, i32* %488, align 4
  %490 = zext i32 %489 to i64
  %491 = lshr i64 %486, %490
  %492 = trunc i64 %491 to i32
  %493 = sub i32 %481, %492
  %494 = shl i32 %493, 8
  %495 = lshr i32 %494, %489
  %496 = getelementptr inbounds i8, i8* %4, i64 44
  %497 = bitcast i8* %496 to i32*
  store i32 %495, i32* %497, align 4
  %498 = sext i32 %476 to i64
  %499 = icmp slt i64 %498, %8
  %500 = sext i32 %495 to i64
  %501 = icmp slt i64 %500, %8
  %502 = and i1 %499, %501
  br i1 %502, label %503, label %636

503:                                              ; preds = %458
  %504 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 1, i32 1
  %505 = load i32, i32* %504, align 4
  %506 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 1, i32 2
  %507 = load i32, i32* %506, align 8
  %508 = zext i8 %459 to i64
  %509 = sext i32 %505 to i64
  %510 = sext i32 %507 to i64
  %511 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %508, i64 %509, i64 %510
  %512 = load i8, i8* %511, align 1
  %513 = icmp eq i8 %512, -1
  br i1 %513, label %636, label %514

514:                                              ; preds = %503
  %515 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %516 = load i32, i32* %515, align 16
  %517 = icmp sgt i32 %516, %7
  br i1 %517, label %518, label %576

518:                                              ; preds = %514
  %519 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %520 = load i32, i32* %519, align 4
  %521 = icmp sgt i32 %520, %6
  br i1 %521, label %522, label %576

522:                                              ; preds = %518
  %523 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %524 = load i32, i32* %523, align 4
  %525 = mul nsw i32 %524, %6
  %526 = add nsw i32 %525, %7
  %527 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 8
  %528 = load i8, i8* %527, align 8
  %529 = zext i8 %528 to i64
  %530 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %529
  %531 = load i8, i8* %530, align 1
  %532 = zext i8 %531 to i32
  %533 = sdiv i32 %6, %532
  %534 = sdiv i32 %7, %532
  %535 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 7
  %536 = load i32, i32* %535, align 4
  %537 = mul nsw i32 %536, %533
  %538 = add nsw i32 %537, %534
  %539 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 5
  %540 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %539, align 8
  %541 = sext i32 %538 to i64
  %542 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %540, i64 %541
  %543 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %544 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %543, align 8
  %545 = sext i32 %526 to i64
  %546 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %544, i64 %545
  store %struct.MB_MODE_INFO* %542, %struct.MB_MODE_INFO** %546, align 8
  %547 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %543, align 8
  %548 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %547, i64 %545
  %549 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MB_MODE_INFO** %548, %struct.MB_MODE_INFO*** %549, align 8
  %550 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 12
  %551 = load i8*, i8** %550, align 8
  %552 = getelementptr inbounds i8, i8* %551, i64 %545
  %553 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 15
  store i8* %552, i8** %553, align 8
  %554 = load i32, i32* %523, align 4
  %555 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 16
  store i32 %554, i32* %555, align 16
  %556 = load i8, i8* %527, align 8
  %557 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 2
  %558 = load i32, i32* %557, align 4
  %559 = zext i8 %556 to i64
  %560 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %559
  %561 = load i8, i8* %560, align 1
  %562 = zext i8 %561 to i32
  %563 = sdiv i32 %6, %562
  %564 = sdiv i32 %7, %562
  %565 = mul nsw i32 %563, %558
  %566 = add nsw i32 %565, %564
  %567 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 0
  %568 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %567, align 8
  %569 = sext i32 %566 to i64
  %570 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %568, i64 %569
  %571 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4
  store %struct.MB_MODE_INFO_EXT_FRAME* %570, %struct.MB_MODE_INFO_EXT_FRAME** %571, align 8
  %572 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %549, align 8
  %573 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %572, align 8
  %574 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %573, i64 0, i32 0
  store i8 %459, i8* %574, align 8
  %575 = load i32, i32* %515, align 16
  br label %576

576:                                              ; preds = %514, %518, %522
  %577 = phi i32 [ %516, %514 ], [ %516, %518 ], [ %575, %522 ]
  %578 = icmp sgt i32 %577, %7
  br i1 %578, label %579, label %636

579:                                              ; preds = %576
  %580 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %581 = load i32, i32* %580, align 4
  %582 = icmp sgt i32 %581, %446
  br i1 %582, label %583, label %636

583:                                              ; preds = %579
  %584 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %585 = load i32, i32* %584, align 4
  %586 = mul nsw i32 %585, %446
  %587 = add nsw i32 %586, %7
  %588 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 8
  %589 = load i8, i8* %588, align 8
  %590 = zext i8 %589 to i64
  %591 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %590
  %592 = load i8, i8* %591, align 1
  %593 = zext i8 %592 to i32
  %594 = sdiv i32 %446, %593
  %595 = sdiv i32 %7, %593
  %596 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 7
  %597 = load i32, i32* %596, align 4
  %598 = mul nsw i32 %597, %594
  %599 = add nsw i32 %598, %595
  %600 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 5
  %601 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %600, align 8
  %602 = sext i32 %599 to i64
  %603 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %601, i64 %602
  %604 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %605 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %604, align 8
  %606 = sext i32 %587 to i64
  %607 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %605, i64 %606
  store %struct.MB_MODE_INFO* %603, %struct.MB_MODE_INFO** %607, align 8
  %608 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %604, align 8
  %609 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %608, i64 %606
  %610 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  store %struct.MB_MODE_INFO** %609, %struct.MB_MODE_INFO*** %610, align 8
  %611 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 12
  %612 = load i8*, i8** %611, align 8
  %613 = getelementptr inbounds i8, i8* %612, i64 %606
  %614 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 15
  store i8* %613, i8** %614, align 8
  %615 = load i32, i32* %584, align 4
  %616 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 16
  store i32 %615, i32* %616, align 16
  %617 = load i8, i8* %588, align 8
  %618 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 2
  %619 = load i32, i32* %618, align 4
  %620 = zext i8 %617 to i64
  %621 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %620
  %622 = load i8, i8* %621, align 1
  %623 = zext i8 %622 to i32
  %624 = sdiv i32 %446, %623
  %625 = sdiv i32 %7, %623
  %626 = mul nsw i32 %624, %619
  %627 = add nsw i32 %626, %625
  %628 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 0
  %629 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %628, align 8
  %630 = sext i32 %627 to i64
  %631 = getelementptr inbounds %struct.MB_MODE_INFO_EXT_FRAME, %struct.MB_MODE_INFO_EXT_FRAME* %629, i64 %630
  %632 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4
  store %struct.MB_MODE_INFO_EXT_FRAME* %631, %struct.MB_MODE_INFO_EXT_FRAME** %632, align 8
  %633 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %610, align 8
  %634 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %633, align 8
  %635 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %634, i64 0, i32 0
  store i8 %459, i8* %635, align 8
  br label %636

636:                                              ; preds = %583, %579, %576, %388, %384, %381, %192, %188, %184, %71, %67, %63, %124, %441, %444, %458, %503, %155, %157, %57, %47, %52, %11
  %637 = phi i32 [ 0, %11 ], [ 0, %52 ], [ 0, %47 ], [ 0, %57 ], [ 0, %157 ], [ 0, %155 ], [ 0, %503 ], [ 0, %458 ], [ 0, %444 ], [ 0, %441 ], [ 0, %124 ], [ 1, %63 ], [ 1, %67 ], [ 1, %71 ], [ 1, %184 ], [ 1, %188 ], [ 1, %192 ], [ 1, %381 ], [ 1, %384 ], [ 1, %388 ], [ 1, %576 ], [ 1, %579 ], [ 1, %583 ]
  ret i32 %637
}

declare void @aom_free(i8*) local_unnamed_addr #3

declare void @av1_setup_pre_planes(%struct.macroblockd*, i32, %struct.yv12_buffer_config*, i32, i32, %struct.scale_factors*, i32) local_unnamed_addr #3

declare i32 @av1_int_pro_motion_estimation(%struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, i32, i32, %struct.mv*) local_unnamed_addr #3

declare void @av1_enc_build_inter_predictor(%struct.AV1Common*, %struct.macroblockd*, i32, i32, %struct.BUFFER_SET*, i8 zeroext, i32, i32) local_unnamed_addr #3

declare i32 @aom_avg_8x8_sse2(i8*, i32) local_unnamed_addr #3

declare i32 @aom_avg_4x4_sse2(i8*, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
