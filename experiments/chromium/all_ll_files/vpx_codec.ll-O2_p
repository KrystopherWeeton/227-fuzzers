; ModuleID = '../../third_party/libvpx/source/libvpx/vpx/src/vpx_codec.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx/src/vpx_codec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_codec_iface = type { i8*, i32, i64, i32 (%struct.vpx_codec_ctx*, %struct.vpx_codec_priv_enc_mr_cfg*)*, i32 (%struct.vpx_codec_alg_priv*)*, %struct.vpx_codec_ctrl_fn_map*, %struct.vpx_codec_dec_iface, %struct.vpx_codec_enc_iface }
%struct.vpx_codec_ctx = type { i8*, %struct.vpx_codec_iface*, i32, i8*, i64, %union.anon, %struct.vpx_codec_priv* }
%union.anon = type { %struct.vpx_codec_dec_cfg* }
%struct.vpx_codec_dec_cfg = type { i32, i32, i32 }
%struct.vpx_codec_priv = type { i8*, i64, %struct.anon, %struct.anon.1 }
%struct.anon = type { %struct.vpx_codec_priv_cb_pair, %struct.vpx_codec_priv_cb_pair }
%struct.vpx_codec_priv_cb_pair = type { %union.anon.0, i8* }
%union.anon.0 = type { void (i8*, %struct.vpx_image*)* }
%struct.vpx_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8*], [4 x i32], i32, i8*, i8*, i32, i32, i8* }
%struct.anon.1 = type { %struct.vpx_fixed_buf, i32, i32, %struct.vpx_codec_cx_pkt, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.2 }
%union.anon.2 = type { %struct.anon.3, [40 x i8] }
%struct.anon.3 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.vpx_codec_priv_enc_mr_cfg = type { i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_codec_alg_priv = type opaque
%struct.vpx_codec_ctrl_fn_map = type { i32, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.vpx_codec_dec_iface = type { i32 (i8*, i32, %struct.vpx_codec_stream_info*)*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_stream_info*)*, i32 (%struct.vpx_codec_alg_priv*, i8*, i32, i8*, i64)*, %struct.vpx_image* (%struct.vpx_codec_alg_priv*, i8**)*, i32 (%struct.vpx_codec_alg_priv*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, i8*)* }
%struct.vpx_codec_stream_info = type { i32, i32, i32, i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.vpx_codec_enc_iface = type { i32, %struct.vpx_codec_enc_cfg_map*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_image*, i64, i64, i64, i64)*, %struct.vpx_codec_cx_pkt* (%struct.vpx_codec_alg_priv*, i8**)*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg*)*, %struct.vpx_fixed_buf* (%struct.vpx_codec_alg_priv*)*, %struct.vpx_image* (%struct.vpx_codec_alg_priv*)*, i32 (%struct.vpx_codec_enc_cfg*, i8**)* }
%struct.vpx_codec_enc_cfg_map = type { i32, %struct.vpx_codec_enc_cfg }
%struct.vpx_codec_enc_cfg = type { i32, i32, i32, i32, i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i32], [5 x i32], i32, [5 x i32], [5 x i32], i32, [16 x i32], [12 x i32], i32 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }

@.str = private unnamed_addr constant [22 x i8] c"v1.9.0-147-g61edec1ef\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"147-g61edec1ef\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"<invalid interface>\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"Success\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"Unspecified internal error\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"Memory allocation error\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"ABI version mismatch\00", align 1
@.str.7 = private unnamed_addr constant [46 x i8] c"Codec does not implement requested capability\00", align 1
@.str.8 = private unnamed_addr constant [40 x i8] c"Bitstream not supported by this decoder\00", align 1
@.str.9 = private unnamed_addr constant [57 x i8] c"Bitstream required feature not supported by this decoder\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"Corrupt frame detected\00", align 1
@.str.11 = private unnamed_addr constant [18 x i8] c"Invalid parameter\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"End of iterated list\00", align 1
@.str.13 = private unnamed_addr constant [24 x i8] c"Unrecognized error code\00", align 1
@switch.table.vpx_codec_error = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0)], align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @vpx_codec_version() local_unnamed_addr #0 {
  ret i32 67840
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @vpx_codec_version_str() local_unnamed_addr #0 {
  ret i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @vpx_codec_version_extra_str() local_unnamed_addr #0 {
  ret i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @vpx_codec_iface_name(%struct.vpx_codec_iface* readonly) local_unnamed_addr #1 {
  %2 = icmp eq %struct.vpx_codec_iface* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vpx_codec_iface, %struct.vpx_codec_iface* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i8* [ %5, %3 ], [ getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), %1 ]
  ret i8* %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @vpx_codec_err_to_string(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 10
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [10 x i8*], [10 x i8*]* @switch.table.vpx_codec_error, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  ret i8* %6

7:                                                ; preds = %1
  ret i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @vpx_codec_error(%struct.vpx_codec_ctx* readonly) local_unnamed_addr #1 {
  %2 = icmp eq %struct.vpx_codec_ctx* %0, null
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 10
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds [10 x i8*], [10 x i8*]* @switch.table.vpx_codec_error, i64 0, i64 %8
  %10 = load i8*, i8** %9, align 8
  ret i8* %10

11:                                               ; preds = %3, %1
  %12 = phi i8* [ getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), %1 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), %3 ]
  ret i8* %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @vpx_codec_error_detail(%struct.vpx_codec_ctx* readonly) local_unnamed_addr #1 {
  %2 = icmp eq %struct.vpx_codec_ctx* %0, null
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 6
  %9 = load %struct.vpx_codec_priv*, %struct.vpx_codec_priv** %8, align 8
  %10 = icmp eq %struct.vpx_codec_priv* %9, null
  %11 = getelementptr inbounds %struct.vpx_codec_priv, %struct.vpx_codec_priv* %9, i64 0, i32 0
  %12 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 3
  %13 = select i1 %10, i8** %12, i8** %11
  %14 = load i8*, i8** %13, align 8
  br label %15

15:                                               ; preds = %1, %3, %7
  %16 = phi i8* [ %14, %7 ], [ null, %3 ], [ null, %1 ]
  ret i8* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_codec_destroy(%struct.vpx_codec_ctx*) local_unnamed_addr #2 {
  %2 = icmp eq %struct.vpx_codec_ctx* %0, null
  br i1 %2, label %20, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 1
  %5 = load %struct.vpx_codec_iface*, %struct.vpx_codec_iface** %4, align 8
  %6 = icmp eq %struct.vpx_codec_iface* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 6
  %9 = load %struct.vpx_codec_priv*, %struct.vpx_codec_priv** %8, align 8
  %10 = icmp eq %struct.vpx_codec_priv* %9, null
  br i1 %10, label %17, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.vpx_codec_iface, %struct.vpx_codec_iface* %5, i64 0, i32 4
  %13 = load i32 (%struct.vpx_codec_alg_priv*)*, i32 (%struct.vpx_codec_alg_priv*)** %12, align 8
  %14 = bitcast %struct.vpx_codec_priv* %9 to %struct.vpx_codec_alg_priv*
  %15 = tail call i32 %13(%struct.vpx_codec_alg_priv* nonnull %14) #4
  store %struct.vpx_codec_priv* null, %struct.vpx_codec_priv** %8, align 8
  %16 = bitcast %struct.vpx_codec_ctx* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 16, i1 false)
  br label %17

17:                                               ; preds = %3, %7, %11
  %18 = phi i32 [ 1, %3 ], [ 1, %7 ], [ 0, %11 ]
  %19 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 2
  store i32 %18, i32* %19, align 8
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %18, %17 ], [ 8, %1 ]
  ret i32 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @vpx_codec_get_caps(%struct.vpx_codec_iface* readonly) local_unnamed_addr #1 {
  %2 = icmp eq %struct.vpx_codec_iface* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vpx_codec_iface, %struct.vpx_codec_iface* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i64 [ %5, %3 ], [ 0, %1 ]
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_codec_control_(%struct.vpx_codec_ctx*, i32, ...) local_unnamed_addr #2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = icmp ne %struct.vpx_codec_ctx* %0, null
  %5 = icmp ne i32 %1, 0
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %52

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 1
  %9 = load %struct.vpx_codec_iface*, %struct.vpx_codec_iface** %8, align 8
  %10 = icmp eq %struct.vpx_codec_iface* %9, null
  br i1 %10, label %52, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 6
  %13 = load %struct.vpx_codec_priv*, %struct.vpx_codec_priv** %12, align 8
  %14 = icmp eq %struct.vpx_codec_priv* %13, null
  br i1 %14, label %52, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.vpx_codec_iface, %struct.vpx_codec_iface* %9, i64 0, i32 5
  %17 = load %struct.vpx_codec_ctrl_fn_map*, %struct.vpx_codec_ctrl_fn_map** %16, align 8
  %18 = icmp eq %struct.vpx_codec_ctrl_fn_map* %17, null
  br i1 %18, label %52, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.vpx_codec_ctrl_fn_map, %struct.vpx_codec_ctrl_fn_map* %17, i64 0, i32 1
  %21 = load i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)*, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)** %20, align 8
  %22 = icmp eq i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* %21, null
  br i1 %22, label %52, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.vpx_codec_ctrl_fn_map, %struct.vpx_codec_ctrl_fn_map* %17, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 0
  %27 = icmp eq i32 %25, %1
  %28 = or i1 %26, %27
  br i1 %28, label %43, label %29

29:                                               ; preds = %23, %35
  %30 = phi %struct.vpx_codec_ctrl_fn_map* [ %31, %35 ], [ %17, %23 ]
  %31 = getelementptr inbounds %struct.vpx_codec_ctrl_fn_map, %struct.vpx_codec_ctrl_fn_map* %30, i64 1
  %32 = getelementptr inbounds %struct.vpx_codec_ctrl_fn_map, %struct.vpx_codec_ctrl_fn_map* %30, i64 1, i32 1
  %33 = load i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)*, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)** %32, align 8
  %34 = icmp eq i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* %33, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.vpx_codec_ctrl_fn_map, %struct.vpx_codec_ctrl_fn_map* %31, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 0
  %39 = icmp eq i32 %37, %1
  %40 = or i1 %38, %39
  br i1 %40, label %41, label %29

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.vpx_codec_ctrl_fn_map, %struct.vpx_codec_ctrl_fn_map* %30, i64 1, i32 1
  br label %43

43:                                               ; preds = %41, %23
  %44 = phi i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)** [ %20, %23 ], [ %42, %41 ]
  %45 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #4
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %47 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %45)
  %48 = load i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)*, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)** %44, align 8
  %49 = bitcast %struct.vpx_codec_priv** %12 to %struct.vpx_codec_alg_priv**
  %50 = load %struct.vpx_codec_alg_priv*, %struct.vpx_codec_alg_priv** %49, align 8
  %51 = call i32 %48(%struct.vpx_codec_alg_priv* %50, %struct.__va_list_tag* nonnull %46) #4
  call void @llvm.va_end(i8* nonnull %45)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #4
  br label %52

52:                                               ; preds = %29, %19, %43, %7, %11, %15, %2
  %53 = phi i32 [ 8, %2 ], [ 1, %15 ], [ 1, %11 ], [ 1, %7 ], [ %51, %43 ], [ 4, %19 ], [ 4, %29 ]
  br i1 %4, label %54, label %56

54:                                               ; preds = %52
  %55 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 2
  store i32 %53, i32* %55, align 8
  br label %56

56:                                               ; preds = %52, %54
  ret i32 %53
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8* readonly, ...) local_unnamed_addr #2 {
  %4 = alloca [1 x %struct.__va_list_tag], align 16
  %5 = bitcast [1 x %struct.__va_list_tag]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #4
  %6 = getelementptr inbounds %struct.vpx_internal_error_info, %struct.vpx_internal_error_info* %0, i64 0, i32 0
  %7 = bitcast [1 x %struct.__va_list_tag]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 24, i1 false)
  store i32 %1, i32* %6, align 8
  %8 = getelementptr inbounds %struct.vpx_internal_error_info, %struct.vpx_internal_error_info* %0, i64 0, i32 1
  store i32 0, i32* %8, align 4
  %9 = icmp eq i8* %2, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %4, i64 0, i64 0
  store i32 1, i32* %8, align 4
  call void @llvm.va_start(i8* nonnull %5)
  %12 = getelementptr inbounds %struct.vpx_internal_error_info, %struct.vpx_internal_error_info* %0, i64 0, i32 2, i64 0
  %13 = call i32 @vsnprintf(i8* %12, i64 79, i8* nonnull %2, %struct.__va_list_tag* nonnull %11) #4
  call void @llvm.va_end(i8* nonnull %5)
  %14 = getelementptr inbounds %struct.vpx_internal_error_info, %struct.vpx_internal_error_info* %0, i64 0, i32 2, i64 79
  store i8 0, i8* %14, align 1
  br label %15

15:                                               ; preds = %3, %10
  %16 = getelementptr inbounds %struct.vpx_internal_error_info, %struct.vpx_internal_error_info* %0, i64 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.vpx_internal_error_info, %struct.vpx_internal_error_info* %0, i64 0, i32 4, i64 0
  %21 = load i32, i32* %6, align 8
  call void @longjmp(%struct.__jmp_buf_tag* %20, i32 %21) #7
  unreachable

22:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #4
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @vsnprintf(i8* nocapture, i64, i8* nocapture readonly, %struct.__va_list_tag*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @longjmp(%struct.__jmp_buf_tag*, i32) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
