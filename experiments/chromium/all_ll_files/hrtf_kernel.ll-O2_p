; ModuleID = '../../third_party/blink/renderer/platform/audio/hrtf_kernel.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/hrtf_kernel.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::HRTFKernel" = type { %"class.std::__1::unique_ptr", float, float }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::FFTFrame"* }
%"class.blink::FFTFrame" = type { i32, i32, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.blink::AudioChannel" = type <{ i64, float*, %"class.std::__1::unique_ptr.1", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.blink::AudioArray"* }

@_ZN5blink10HRTFKernelC1EPNS_12AudioChannelEmf = hidden unnamed_addr alias void (%"class.blink::HRTFKernel"*, %"class.blink::AudioChannel"*, i64, float), void (%"class.blink::HRTFKernel"*, %"class.blink::AudioChannel"*, i64, float)* @_ZN5blink10HRTFKernelC2EPNS_12AudioChannelEmf

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10HRTFKernelC2EPNS_12AudioChannelEmf(%"class.blink::HRTFKernel"* nocapture, %"class.blink::AudioChannel"* nocapture, i64, float) unnamed_addr #0 align 2 {
  %5 = alloca %"class.blink::FFTFrame", align 8
  %6 = bitcast %"class.blink::HRTFKernel"* %0 to i64*
  store i64 0, i64* %6, align 8
  %7 = getelementptr inbounds %"class.blink::HRTFKernel", %"class.blink::HRTFKernel"* %0, i64 0, i32 1
  store float 0.000000e+00, float* %7, align 8
  %8 = getelementptr inbounds %"class.blink::HRTFKernel", %"class.blink::HRTFKernel"* %0, i64 0, i32 2
  store float %3, float* %8, align 4
  %9 = lshr i64 %2, 1
  %10 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 3
  store i8 0, i8* %10, align 8
  %11 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 1
  %12 = load float*, float** %11, align 8
  %13 = icmp eq float* %12, null
  br i1 %13, label %14, label %19

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %16, i64 0, i32 1
  %18 = load float*, float** %17, align 8
  br label %19

19:                                               ; preds = %14, %4
  %20 = phi float* [ %18, %14 ], [ %12, %4 ]
  %21 = bitcast %"class.blink::FFTFrame"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %21) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 104, i1 false) #5
  %22 = trunc i64 %9 to i32
  call void @_ZN5blink8FFTFrameC1Ej(%"class.blink::FFTFrame"* nonnull %5, i32 %22) #5
  call void @_ZN5blink8FFTFrame5DoFFTEPKf(%"class.blink::FFTFrame"* nonnull %5, float* %20) #5
  %23 = call double @_ZN5blink8FFTFrame24ExtractAverageGroupDelayEv(%"class.blink::FFTFrame"* nonnull %5) #5
  %24 = fcmp ult double %23, 0x47EFFFFFE0000000
  br i1 %24, label %25, label %29

25:                                               ; preds = %19
  %26 = fcmp ole double %23, 0xC7EFFFFFE0000000
  %27 = select i1 %26, double 0xC7EFFFFFE0000000, double %23
  %28 = fptrunc double %27 to float
  br label %29

29:                                               ; preds = %19, %25
  %30 = phi float [ %28, %25 ], [ 0x47EFFFFFE0000000, %19 ]
  call void @_ZN5blink8FFTFrame12DoInverseFFTEPf(%"class.blink::FFTFrame"* nonnull %5, float* %20) #5
  call void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %21) #5
  store float %30, float* %7, align 8
  store i8 0, i8* %10, align 8
  %31 = load float*, float** %11, align 8
  %32 = icmp eq float* %31, null
  br i1 %32, label %33, label %38

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %35 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %35, i64 0, i32 1
  %37 = load float*, float** %36, align 8
  br label %38

38:                                               ; preds = %29, %33
  %39 = phi float* [ %37, %33 ], [ %31, %29 ]
  %40 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 %9, %41
  %43 = select i1 %42, i64 %9, i64 %41
  %44 = fdiv float %3, 4.410000e+03
  %45 = fptoui float %44 to i32
  %46 = zext i32 %45 to i64
  %47 = sub nsw i64 %43, %46
  %48 = and i64 %47, 4294967295
  %49 = icmp ugt i64 %43, %48
  br i1 %49, label %50, label %150

50:                                               ; preds = %38
  %51 = trunc i64 %47 to i32
  %52 = uitofp i32 %45 to float
  %53 = trunc i64 %43 to i32
  %54 = add i32 %53, 1
  %55 = sub i32 %54, %45
  %56 = zext i32 %55 to i64
  %57 = icmp ugt i64 %43, %56
  %58 = select i1 %57, i64 %43, i64 %56
  %59 = add nuw i64 %58, 1
  %60 = sub i64 %59, %56
  %61 = icmp ult i64 %60, 4
  br i1 %61, label %62, label %65

62:                                               ; preds = %148, %65, %50
  %63 = phi i64 [ %48, %65 ], [ %48, %50 ], [ %86, %148 ]
  %64 = phi i32 [ %51, %65 ], [ %51, %50 ], [ %88, %148 ]
  br label %164

65:                                               ; preds = %50
  %66 = trunc i64 %43 to i32
  %67 = add i32 %66, 1
  %68 = sub i32 %67, %45
  %69 = zext i32 %68 to i64
  %70 = icmp ugt i64 %43, %69
  %71 = select i1 %70, i64 %43, i64 %69
  %72 = sub nsw i64 %71, %69
  %73 = trunc i64 %72 to i32
  %74 = xor i32 %51, -1
  %75 = icmp ult i32 %74, %73
  %76 = icmp ugt i64 %72, 4294967295
  %77 = or i1 %75, %76
  %78 = trunc i64 %72 to i32
  %79 = xor i32 %68, -1
  %80 = icmp ult i32 %79, %78
  %81 = icmp ugt i64 %72, 4294967295
  %82 = or i1 %80, %81
  %83 = or i1 %77, %82
  br i1 %83, label %62, label %84

84:                                               ; preds = %65
  %85 = and i64 %60, -4
  %86 = add i64 %48, %85
  %87 = trunc i64 %85 to i32
  %88 = add i32 %51, %87
  %89 = insertelement <4 x i64> undef, i64 %48, i32 0
  %90 = shufflevector <4 x i64> %89, <4 x i64> undef, <4 x i32> zeroinitializer
  %91 = add <4 x i64> %90, <i64 0, i64 1, i64 2, i64 3>
  %92 = insertelement <4 x i64> undef, i64 %47, i32 0
  %93 = shufflevector <4 x i64> %92, <4 x i64> undef, <4 x i32> zeroinitializer
  %94 = insertelement <4 x float> undef, float %52, i32 0
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <4 x i32> zeroinitializer
  %96 = add i64 %85, -4
  %97 = lshr exact i64 %96, 2
  %98 = add nuw nsw i64 %97, 1
  %99 = and i64 %98, 1
  %100 = icmp eq i64 %96, 0
  br i1 %100, label %133, label %101

101:                                              ; preds = %84
  %102 = sub nuw nsw i64 %98, %99
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i64 [ 0, %101 ], [ %129, %103 ]
  %105 = phi <4 x i64> [ %91, %101 ], [ %130, %103 ]
  %106 = phi i64 [ %102, %101 ], [ %131, %103 ]
  %107 = add i64 %48, %104
  %108 = sub <4 x i64> %105, %93
  %109 = uitofp <4 x i64> %108 to <4 x float>
  %110 = fdiv <4 x float> %109, %95
  %111 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %110
  %112 = getelementptr inbounds float, float* %39, i64 %107
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 4
  %115 = fmul <4 x float> %111, %114
  %116 = bitcast float* %112 to <4 x float>*
  store <4 x float> %115, <4 x float>* %116, align 4
  %117 = or i64 %104, 4
  %118 = add <4 x i64> %105, <i64 4, i64 4, i64 4, i64 4>
  %119 = add i64 %48, %117
  %120 = sub <4 x i64> %118, %93
  %121 = uitofp <4 x i64> %120 to <4 x float>
  %122 = fdiv <4 x float> %121, %95
  %123 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %122
  %124 = getelementptr inbounds float, float* %39, i64 %119
  %125 = bitcast float* %124 to <4 x float>*
  %126 = load <4 x float>, <4 x float>* %125, align 4
  %127 = fmul <4 x float> %123, %126
  %128 = bitcast float* %124 to <4 x float>*
  store <4 x float> %127, <4 x float>* %128, align 4
  %129 = add i64 %104, 8
  %130 = add <4 x i64> %105, <i64 8, i64 8, i64 8, i64 8>
  %131 = add i64 %106, -2
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %103, !llvm.loop !2

133:                                              ; preds = %103, %84
  %134 = phi i64 [ 0, %84 ], [ %129, %103 ]
  %135 = phi <4 x i64> [ %91, %84 ], [ %130, %103 ]
  %136 = icmp eq i64 %99, 0
  br i1 %136, label %148, label %137

137:                                              ; preds = %133
  %138 = add i64 %48, %134
  %139 = sub <4 x i64> %135, %93
  %140 = uitofp <4 x i64> %139 to <4 x float>
  %141 = fdiv <4 x float> %140, %95
  %142 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %141
  %143 = getelementptr inbounds float, float* %39, i64 %138
  %144 = bitcast float* %143 to <4 x float>*
  %145 = load <4 x float>, <4 x float>* %144, align 4
  %146 = fmul <4 x float> %142, %145
  %147 = bitcast float* %143 to <4 x float>*
  store <4 x float> %146, <4 x float>* %147, align 4
  br label %148

148:                                              ; preds = %133, %137
  %149 = icmp eq i64 %60, %85
  br i1 %149, label %150, label %62

150:                                              ; preds = %164, %148, %38
  %151 = call noalias i8* @malloc(i64 104) #5
  %152 = bitcast i8* %151 to %"class.blink::FFTFrame"*
  %153 = trunc i64 %2 to i32
  call void @_ZN5blink8FFTFrameC1Ej(%"class.blink::FFTFrame"* %152, i32 %153) #5
  %154 = ptrtoint i8* %151 to i64
  %155 = getelementptr inbounds %"class.blink::HRTFKernel", %"class.blink::HRTFKernel"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %156 = load %"class.blink::FFTFrame"*, %"class.blink::FFTFrame"** %155, align 8
  store i64 %154, i64* %6, align 8
  %157 = icmp eq %"class.blink::FFTFrame"* %156, null
  %158 = bitcast i8* %151 to %"class.blink::FFTFrame"*
  br i1 %157, label %162, label %159

159:                                              ; preds = %150
  call void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"* nonnull %156) #5
  %160 = bitcast %"class.blink::FFTFrame"* %156 to i8*
  call void @free(i8* %160) #5
  %161 = load %"class.blink::FFTFrame"*, %"class.blink::FFTFrame"** %155, align 8
  br label %162

162:                                              ; preds = %159, %150
  %163 = phi %"class.blink::FFTFrame"* [ %161, %159 ], [ %158, %150 ]
  call void @_ZN5blink8FFTFrame11DoPaddedFFTEPKfm(%"class.blink::FFTFrame"* %163, float* %39, i64 %43) #5
  ret void

164:                                              ; preds = %62, %164
  %165 = phi i64 [ %175, %164 ], [ %63, %62 ]
  %166 = phi i32 [ %174, %164 ], [ %64, %62 ]
  %167 = sub i64 %165, %47
  %168 = uitofp i64 %167 to float
  %169 = fdiv float %168, %52
  %170 = fsub float 1.000000e+00, %169
  %171 = getelementptr inbounds float, float* %39, i64 %165
  %172 = load float, float* %171, align 4
  %173 = fmul float %170, %172
  store float %173, float* %171, align 4
  %174 = add i32 %166, 1
  %175 = zext i32 %174 to i64
  %176 = icmp ugt i64 %43, %175
  br i1 %176, label %164, label %150, !llvm.loop !4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink8FFTFrame11DoPaddedFFTEPKfm(%"class.blink::FFTFrame"*, float*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden noalias %"class.blink::HRTFKernel"* @_ZN5blink10HRTFKernel24CreateInterpolatedKernelEPS0_S1_f(%"class.blink::HRTFKernel"* nocapture readonly, %"class.blink::HRTFKernel"* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %4 = fcmp ult float %2, 1.000000e+00
  %5 = fcmp ole float %2, 0.000000e+00
  %6 = select i1 %5, float 0.000000e+00, float %2
  %7 = select i1 %4, float %6, float 1.000000e+00
  %8 = getelementptr inbounds %"class.blink::HRTFKernel", %"class.blink::HRTFKernel"* %0, i64 0, i32 2
  %9 = bitcast float* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = fsub float 1.000000e+00, %7
  %12 = getelementptr inbounds %"class.blink::HRTFKernel", %"class.blink::HRTFKernel"* %0, i64 0, i32 1
  %13 = load float, float* %12, align 8
  %14 = fmul float %11, %13
  %15 = getelementptr inbounds %"class.blink::HRTFKernel", %"class.blink::HRTFKernel"* %1, i64 0, i32 1
  %16 = load float, float* %15, align 8
  %17 = fmul float %7, %16
  %18 = fadd float %14, %17
  %19 = getelementptr inbounds %"class.blink::HRTFKernel", %"class.blink::HRTFKernel"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %"class.blink::FFTFrame"*, %"class.blink::FFTFrame"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::HRTFKernel", %"class.blink::HRTFKernel"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %"class.blink::FFTFrame"*, %"class.blink::FFTFrame"** %21, align 8
  %23 = fpext float %7 to double
  %24 = tail call %"class.blink::FFTFrame"* @_ZN5blink8FFTFrame23CreateInterpolatedFrameERKS0_S2_d(%"class.blink::FFTFrame"* dereferenceable(104) %20, %"class.blink::FFTFrame"* dereferenceable(104) %22, double %23) #5
  %25 = ptrtoint %"class.blink::FFTFrame"* %24 to i64
  %26 = tail call noalias i8* @malloc(i64 16) #5
  %27 = bitcast i8* %26 to %"class.blink::HRTFKernel"*
  %28 = bitcast i8* %26 to i64*
  store i64 %25, i64* %28, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 8
  %30 = bitcast i8* %29 to float*
  store float %18, float* %30, align 8
  %31 = getelementptr inbounds i8, i8* %26, i64 12
  %32 = bitcast i8* %31 to i32*
  store i32 %10, i32* %32, align 4
  ret %"class.blink::HRTFKernel"* %27
}

declare %"class.blink::FFTFrame"* @_ZN5blink8FFTFrame23CreateInterpolatedFrameERKS0_S2_d(%"class.blink::FFTFrame"* dereferenceable(104), %"class.blink::FFTFrame"* dereferenceable(104), double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN5blink8FFTFrameC1Ej(%"class.blink::FFTFrame"*, i32) unnamed_addr #2

declare void @_ZN5blink8FFTFrame5DoFFTEPKf(%"class.blink::FFTFrame"*, float*) local_unnamed_addr #2

declare double @_ZN5blink8FFTFrame24ExtractAverageGroupDelayEv(%"class.blink::FFTFrame"*) local_unnamed_addr #2

declare void @_ZN5blink8FFTFrame12DoInverseFFTEPf(%"class.blink::FFTFrame"*, float*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
