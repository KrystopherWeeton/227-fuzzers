; ModuleID = '../../third_party/vulkan-deps/spirv-tools/src/source/opt/eliminate_dead_functions_util.cpp'
source_filename = "../../third_party/vulkan-deps/spirv-tools/src/source/opt/eliminate_dead_functions_util.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.829" }
%"class.std::__1::__compressed_pair.829" = type { %"struct.std::__1::__compressed_pair_elem.830" }
%"struct.std::__1::__compressed_pair_elem.830" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.spvtools::opt::Function"* }
%"class.spvtools::opt::Function" = type { %"class.std::__1::unique_ptr.0", %"class.std::__1::vector.4", %"class.spvtools::opt::InstructionList", %"class.std::__1::vector.813", %"class.std::__1::unique_ptr.0", %"class.std::__1::vector.4" }
%"class.spvtools::opt::InstructionList" = type { %"class.spvtools::utils::IntrusiveList" }
%"class.spvtools::utils::IntrusiveList" = type { i32 (...)**, %"class.spvtools::opt::Instruction" }
%"class.spvtools::opt::Instruction" = type { %"class.spvtools::utils::IntrusiveNodeBase.base", %"class.spvtools::opt::IRContext"*, i32, i8, i8, i32, %"class.std::__1::vector.795", %"class.std::__1::vector.807", %"class.spvtools::opt::DebugScope" }
%"class.spvtools::utils::IntrusiveNodeBase.base" = type <{ i32 (...)**, %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, i8 }>
%"class.std::__1::vector.795" = type { %"class.std::__1::__vector_base.796" }
%"class.std::__1::__vector_base.796" = type { %"struct.spvtools::opt::Operand"*, %"struct.spvtools::opt::Operand"*, %"class.std::__1::__compressed_pair.802" }
%"struct.spvtools::opt::Operand" = type { i32, %"class.spvtools::utils::SmallVector" }
%"class.spvtools::utils::SmallVector" = type { i32 (...)**, i64, i32*, [2 x %"struct.std::__1::aligned_storage<4, 4>::type"], %"class.std::__1::unique_ptr.797" }
%"struct.std::__1::aligned_storage<4, 4>::type" = type { [4 x i8] }
%"class.std::__1::unique_ptr.797" = type { %"class.std::__1::__compressed_pair.798" }
%"class.std::__1::__compressed_pair.798" = type { %"struct.std::__1::__compressed_pair_elem.350" }
%"struct.std::__1::__compressed_pair_elem.350" = type { %"class.std::__1::vector.342"* }
%"class.std::__1::vector.342" = type { %"class.std::__1::__vector_base.343" }
%"class.std::__1::__vector_base.343" = type { i32*, i32*, %"class.std::__1::__compressed_pair.344" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.345" }
%"struct.std::__1::__compressed_pair_elem.345" = type { i32* }
%"class.std::__1::__compressed_pair.802" = type { %"struct.std::__1::__compressed_pair_elem.803" }
%"struct.std::__1::__compressed_pair_elem.803" = type { %"struct.spvtools::opt::Operand"* }
%"class.std::__1::vector.807" = type { %"class.std::__1::__vector_base.808" }
%"class.std::__1::__vector_base.808" = type { %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, %"class.std::__1::__compressed_pair.809" }
%"class.std::__1::__compressed_pair.809" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.spvtools::opt::Instruction"* }
%"class.spvtools::opt::DebugScope" = type { i32, i32 }
%"class.std::__1::vector.813" = type { %"class.std::__1::__vector_base.814" }
%"class.std::__1::__vector_base.814" = type { %"class.std::__1::unique_ptr.815"*, %"class.std::__1::unique_ptr.815"*, %"class.std::__1::__compressed_pair.821" }
%"class.std::__1::unique_ptr.815" = type { %"class.std::__1::__compressed_pair.816" }
%"class.std::__1::__compressed_pair.816" = type { %"struct.std::__1::__compressed_pair_elem.817" }
%"struct.std::__1::__compressed_pair_elem.817" = type { %"class.spvtools::opt::BasicBlock"* }
%"class.spvtools::opt::BasicBlock" = type { %"class.spvtools::opt::Function"*, %"class.std::__1::unique_ptr.0", %"class.spvtools::opt::InstructionList" }
%"class.std::__1::__compressed_pair.821" = type { %"struct.std::__1::__compressed_pair_elem.822" }
%"struct.std::__1::__compressed_pair_elem.822" = type { %"class.std::__1::unique_ptr.815"* }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::unique_ptr.0"* }
%"class.spvtools::opt::IRContext" = type <{ %struct.spv_context_t*, %"class.spvtools::AssemblyGrammar", i32, [4 x i8], %"class.std::__1::unique_ptr.9", %"class.std::__1::function", %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.105", %"class.std::__1::unordered_map.126", %"class.std::__1::unordered_map.154", i32, [4 x i8], %"class.std::__1::unordered_map.178", %"class.std::__1::unordered_map.202", %"class.std::__1::unique_ptr.226", %"class.std::__1::map", %"class.std::__1::map.241", %"class.std::__1::unordered_map.250", %"class.std::__1::unique_ptr.277", %"class.std::__1::unique_ptr.365", %"class.std::__1::unique_ptr.478", %"class.std::__1::unique_ptr.508", %"class.std::__1::unique_ptr.523", %"class.std::__1::unique_ptr.579", %"class.std::__1::unique_ptr.609", %"class.std::__1::unique_ptr.639", %"class.std::__1::unique_ptr.758", i32, i8, i8, [2 x i8] }>
%struct.spv_context_t = type { i32, %struct.spv_opcode_table_t*, %struct.spv_operand_table_t*, %struct.spv_ext_inst_table_t*, %"class.std::__1::function" }
%struct.spv_opcode_table_t = type { i32, %struct.spv_opcode_desc_t* }
%struct.spv_opcode_desc_t = type { i8*, i32, i32, i32*, i16, [16 x i32], i8, i8, i32, i32*, i32, i32 }
%struct.spv_operand_table_t = type { i32, %struct.spv_operand_desc_group_t* }
%struct.spv_operand_desc_group_t = type { i32, i32, %struct.spv_operand_desc_t* }
%struct.spv_operand_desc_t = type { i8*, i32, i32, i32*, i32, i32*, [16 x i32], i32, i32 }
%struct.spv_ext_inst_table_t = type { i32, %struct.spv_ext_inst_group_t* }
%struct.spv_ext_inst_group_t = type { i32, i32, %struct.spv_ext_inst_desc_t* }
%struct.spv_ext_inst_desc_t = type { i8*, i32, i32, i32*, [16 x i32] }
%"class.spvtools::AssemblyGrammar" = type { i32, %struct.spv_operand_table_t*, %struct.spv_opcode_table_t*, %struct.spv_ext_inst_table_t* }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.spvtools::opt::Module"* }
%"class.spvtools::opt::Module" = type <{ %"struct.spvtools::opt::ModuleHeader", [4 x i8], %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.std::__1::unique_ptr.0", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.std::__1::vector", %"class.std::__1::vector.807", i8, [7 x i8] }>
%"struct.spvtools::opt::ModuleHeader" = type { i32, i32, i32, i32, i32 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, i32, i8*, %struct.spv_position_t*, i8*)* }
%struct.spv_position_t = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.spvtools::opt::analysis::DefUseManager"* }
%"class.spvtools::opt::analysis::DefUseManager" = type { %"class.std::__1::unordered_map", %"class.std::__1::set", %"class.std::__1::unordered_map.44" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.18", %"class.std::__1::__compressed_pair.27", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.34", [4 x i8] }>
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20", %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i64 }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { float }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::unordered_map.44" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.66", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.spvtools::opt::analysis::DecorationManager"* }
%"class.spvtools::opt::analysis::DecorationManager" = type { %"class.std::__1::unordered_map.78", %"class.spvtools::opt::Module"* }
%"class.std::__1::unordered_map.78" = type { %"class.std::__1::__hash_table.79" }
%"class.std::__1::__hash_table.79" = type <{ %"class.std::__1::unique_ptr.80", %"class.std::__1::__compressed_pair.90", %"class.std::__1::__compressed_pair.95", %"class.std::__1::__compressed_pair.98", [4 x i8] }>
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82", %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"struct.std::__1::__hash_node_base.83"** }
%"struct.std::__1::__hash_node_base.83" = type { %"struct.std::__1::__hash_node_base.83"* }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.std::__1::__bucket_list_deallocator.85" }
%"class.std::__1::__bucket_list_deallocator.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"struct.std::__1::__hash_node_base.83" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.spvtools::opt::FeatureManager"* }
%"class.spvtools::opt::FeatureManager" = type { %"class.spvtools::AssemblyGrammar"*, %"class.spvtools::EnumSet", %"class.spvtools::EnumSet.122", i32, i32 }
%"class.spvtools::EnumSet" = type { i64, %"class.std::__1::unique_ptr.108" }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.std::__1::set.111"* }
%"class.std::__1::set.111" = type { %"class.std::__1::__tree.112" }
%"class.std::__1::__tree.112" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.113", %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.spvtools::EnumSet.122" = type { i64, %"class.std::__1::unique_ptr.108" }
%"class.std::__1::unordered_map.126" = type { %"class.std::__1::__hash_table.127" }
%"class.std::__1::__hash_table.127" = type <{ %"class.std::__1::unique_ptr.128", %"class.std::__1::__compressed_pair.138", %"class.std::__1::__compressed_pair.143", %"class.std::__1::__compressed_pair.148", [4 x i8] }>
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130", %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"struct.std::__1::__hash_node_base.131"** }
%"struct.std::__1::__hash_node_base.131" = type { %"struct.std::__1::__hash_node_base.131"* }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.std::__1::__bucket_list_deallocator.133" }
%"class.std::__1::__bucket_list_deallocator.133" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"struct.std::__1::__hash_node_base.131" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unordered_map.154" = type { %"class.std::__1::__hash_table.155" }
%"class.std::__1::__hash_table.155" = type <{ %"class.std::__1::unique_ptr.156", %"class.std::__1::__compressed_pair.166", %"class.std::__1::__compressed_pair.171", %"class.std::__1::__compressed_pair.174", [4 x i8] }>
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158", %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"struct.std::__1::__hash_node_base.159"** }
%"struct.std::__1::__hash_node_base.159" = type { %"struct.std::__1::__hash_node_base.159"* }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.std::__1::__bucket_list_deallocator.161" }
%"class.std::__1::__bucket_list_deallocator.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"struct.std::__1::__hash_node_base.159" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unordered_map.178" = type { %"class.std::__1::__hash_table.179" }
%"class.std::__1::__hash_table.179" = type <{ %"class.std::__1::unique_ptr.180", %"class.std::__1::__compressed_pair.190", %"class.std::__1::__compressed_pair.195", %"class.std::__1::__compressed_pair.198", [4 x i8] }>
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182", %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"struct.std::__1::__hash_node_base.183"** }
%"struct.std::__1::__hash_node_base.183" = type { %"struct.std::__1::__hash_node_base.183"* }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"class.std::__1::__bucket_list_deallocator.185" }
%"class.std::__1::__bucket_list_deallocator.185" = type { %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"struct.std::__1::__hash_node_base.183" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unordered_map.202" = type { %"class.std::__1::__hash_table.203" }
%"class.std::__1::__hash_table.203" = type <{ %"class.std::__1::unique_ptr.204", %"class.std::__1::__compressed_pair.214", %"class.std::__1::__compressed_pair.219", %"class.std::__1::__compressed_pair.222", [4 x i8] }>
%"class.std::__1::unique_ptr.204" = type { %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206", %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"struct.std::__1::__hash_node_base.207"** }
%"struct.std::__1::__hash_node_base.207" = type { %"struct.std::__1::__hash_node_base.207"* }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"class.std::__1::__bucket_list_deallocator.209" }
%"class.std::__1::__bucket_list_deallocator.209" = type { %"class.std::__1::__compressed_pair.210" }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"struct.std::__1::__hash_node_base.207" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.spvtools::opt::CFG"* }
%"class.spvtools::opt::CFG" = type { %"class.spvtools::opt::Module"*, %"class.std::__1::unordered_map.834", %"class.spvtools::opt::BasicBlock", %"class.spvtools::opt::BasicBlock", %"class.std::__1::unordered_map.862", %"class.std::__1::unordered_map.886" }
%"class.std::__1::unordered_map.834" = type { %"class.std::__1::__hash_table.835" }
%"class.std::__1::__hash_table.835" = type <{ %"class.std::__1::unique_ptr.836", %"class.std::__1::__compressed_pair.846", %"class.std::__1::__compressed_pair.851", %"class.std::__1::__compressed_pair.856", [4 x i8] }>
%"class.std::__1::unique_ptr.836" = type { %"class.std::__1::__compressed_pair.837" }
%"class.std::__1::__compressed_pair.837" = type { %"struct.std::__1::__compressed_pair_elem.838", %"struct.std::__1::__compressed_pair_elem.840" }
%"struct.std::__1::__compressed_pair_elem.838" = type { %"struct.std::__1::__hash_node_base.839"** }
%"struct.std::__1::__hash_node_base.839" = type { %"struct.std::__1::__hash_node_base.839"* }
%"struct.std::__1::__compressed_pair_elem.840" = type { %"class.std::__1::__bucket_list_deallocator.841" }
%"class.std::__1::__bucket_list_deallocator.841" = type { %"class.std::__1::__compressed_pair.842" }
%"class.std::__1::__compressed_pair.842" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.846" = type { %"struct.std::__1::__compressed_pair_elem.847" }
%"struct.std::__1::__compressed_pair_elem.847" = type { %"struct.std::__1::__hash_node_base.839" }
%"class.std::__1::__compressed_pair.851" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.856" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unordered_map.862" = type { %"class.std::__1::__hash_table.863" }
%"class.std::__1::__hash_table.863" = type <{ %"class.std::__1::unique_ptr.864", %"class.std::__1::__compressed_pair.874", %"class.std::__1::__compressed_pair.879", %"class.std::__1::__compressed_pair.882", [4 x i8] }>
%"class.std::__1::unique_ptr.864" = type { %"class.std::__1::__compressed_pair.865" }
%"class.std::__1::__compressed_pair.865" = type { %"struct.std::__1::__compressed_pair_elem.866", %"struct.std::__1::__compressed_pair_elem.868" }
%"struct.std::__1::__compressed_pair_elem.866" = type { %"struct.std::__1::__hash_node_base.867"** }
%"struct.std::__1::__hash_node_base.867" = type { %"struct.std::__1::__hash_node_base.867"* }
%"struct.std::__1::__compressed_pair_elem.868" = type { %"class.std::__1::__bucket_list_deallocator.869" }
%"class.std::__1::__bucket_list_deallocator.869" = type { %"class.std::__1::__compressed_pair.870" }
%"class.std::__1::__compressed_pair.870" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.874" = type { %"struct.std::__1::__compressed_pair_elem.875" }
%"struct.std::__1::__compressed_pair_elem.875" = type { %"struct.std::__1::__hash_node_base.867" }
%"class.std::__1::__compressed_pair.879" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.882" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unordered_map.886" = type { %"class.std::__1::__hash_table.887" }
%"class.std::__1::__hash_table.887" = type <{ %"class.std::__1::unique_ptr.888", %"class.std::__1::__compressed_pair.898", %"class.std::__1::__compressed_pair.903", %"class.std::__1::__compressed_pair.906", [4 x i8] }>
%"class.std::__1::unique_ptr.888" = type { %"class.std::__1::__compressed_pair.889" }
%"class.std::__1::__compressed_pair.889" = type { %"struct.std::__1::__compressed_pair_elem.890", %"struct.std::__1::__compressed_pair_elem.892" }
%"struct.std::__1::__compressed_pair_elem.890" = type { %"struct.std::__1::__hash_node_base.891"** }
%"struct.std::__1::__hash_node_base.891" = type { %"struct.std::__1::__hash_node_base.891"* }
%"struct.std::__1::__compressed_pair_elem.892" = type { %"class.std::__1::__bucket_list_deallocator.893" }
%"class.std::__1::__bucket_list_deallocator.893" = type { %"class.std::__1::__compressed_pair.894" }
%"class.std::__1::__compressed_pair.894" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"struct.std::__1::__hash_node_base.891" }
%"class.std::__1::__compressed_pair.903" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.906" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.232" }
%"class.std::__1::__tree.232" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.233", %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::map.241" = type { %"class.std::__1::__tree.242" }
%"class.std::__1::__tree.242" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.243", %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::unordered_map.250" = type { %"class.std::__1::__hash_table.251" }
%"class.std::__1::__hash_table.251" = type <{ %"class.std::__1::unique_ptr.252", %"class.std::__1::__compressed_pair.262", %"class.std::__1::__compressed_pair.267", %"class.std::__1::__compressed_pair.272", [4 x i8] }>
%"class.std::__1::unique_ptr.252" = type { %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254", %"struct.std::__1::__compressed_pair_elem.256" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"struct.std::__1::__hash_node_base.255"** }
%"struct.std::__1::__hash_node_base.255" = type { %"struct.std::__1::__hash_node_base.255"* }
%"struct.std::__1::__compressed_pair_elem.256" = type { %"class.std::__1::__bucket_list_deallocator.257" }
%"class.std::__1::__bucket_list_deallocator.257" = type { %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"struct.std::__1::__hash_node_base.255" }
%"class.std::__1::__compressed_pair.267" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unique_ptr.277" = type { %"class.std::__1::__compressed_pair.278" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"struct.std::__1::__compressed_pair_elem.279" = type { %"class.spvtools::opt::analysis::ConstantManager"* }
%"class.spvtools::opt::analysis::ConstantManager" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map.280", %"class.std::__1::multimap", %"class.std::__1::unordered_set", %"class.std::__1::vector.335" }
%"class.std::__1::unordered_map.280" = type { %"class.std::__1::__hash_table.281" }
%"class.std::__1::__hash_table.281" = type <{ %"class.std::__1::unique_ptr.282", %"class.std::__1::__compressed_pair.292", %"class.std::__1::__compressed_pair.297", %"class.std::__1::__compressed_pair.300", [4 x i8] }>
%"class.std::__1::unique_ptr.282" = type { %"class.std::__1::__compressed_pair.283" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.284", %"struct.std::__1::__compressed_pair_elem.286" }
%"struct.std::__1::__compressed_pair_elem.284" = type { %"struct.std::__1::__hash_node_base.285"** }
%"struct.std::__1::__hash_node_base.285" = type { %"struct.std::__1::__hash_node_base.285"* }
%"struct.std::__1::__compressed_pair_elem.286" = type { %"class.std::__1::__bucket_list_deallocator.287" }
%"class.std::__1::__bucket_list_deallocator.287" = type { %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"struct.std::__1::__hash_node_base.285" }
%"class.std::__1::__compressed_pair.297" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree.304" }
%"class.std::__1::__tree.304" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.305", %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.314" }
%"class.std::__1::__hash_table.314" = type <{ %"class.std::__1::unique_ptr.315", %"class.std::__1::__compressed_pair.325", %"class.std::__1::__compressed_pair.330", %"class.std::__1::__compressed_pair.332", [4 x i8] }>
%"class.std::__1::unique_ptr.315" = type { %"class.std::__1::__compressed_pair.316" }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317", %"struct.std::__1::__compressed_pair_elem.319" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"struct.std::__1::__hash_node_base.318"** }
%"struct.std::__1::__hash_node_base.318" = type { %"struct.std::__1::__hash_node_base.318"* }
%"struct.std::__1::__compressed_pair_elem.319" = type { %"class.std::__1::__bucket_list_deallocator.320" }
%"class.std::__1::__bucket_list_deallocator.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"struct.std::__1::__hash_node_base.318" }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.332" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::vector.335" = type { %"class.std::__1::__vector_base.336" }
%"class.std::__1::__vector_base.336" = type { %"class.std::__1::unique_ptr.337"*, %"class.std::__1::unique_ptr.337"*, %"class.std::__1::__compressed_pair.357" }
%"class.std::__1::unique_ptr.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.339" }
%"struct.std::__1::__compressed_pair_elem.339" = type { %"class.spvtools::opt::analysis::Constant"* }
%"class.spvtools::opt::analysis::Constant" = type { i32 (...)**, %"class.spvtools::opt::analysis::Type"* }
%"class.spvtools::opt::analysis::Type" = type <{ i32 (...)**, %"class.std::__1::vector.340", i32, [4 x i8] }>
%"class.std::__1::vector.340" = type { %"class.std::__1::__vector_base.341" }
%"class.std::__1::__vector_base.341" = type { %"class.std::__1::vector.342"*, %"class.std::__1::vector.342"*, %"class.std::__1::__compressed_pair.349" }
%"class.std::__1::__compressed_pair.349" = type { %"struct.std::__1::__compressed_pair_elem.350" }
%"class.std::__1::__compressed_pair.357" = type { %"struct.std::__1::__compressed_pair_elem.358" }
%"struct.std::__1::__compressed_pair_elem.358" = type { %"class.std::__1::unique_ptr.337"* }
%"class.std::__1::unique_ptr.365" = type { %"class.std::__1::__compressed_pair.366" }
%"class.std::__1::__compressed_pair.366" = type { %"struct.std::__1::__compressed_pair_elem.367" }
%"struct.std::__1::__compressed_pair_elem.367" = type { %"class.spvtools::opt::analysis::TypeManager"* }
%"class.spvtools::opt::analysis::TypeManager" = type { %"class.std::__1::function"*, %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map.368", %"class.std::__1::unordered_map.392", %"class.std::__1::unordered_set.416", %"class.std::__1::vector.438", %"class.std::__1::unordered_map.368", %"class.std::__1::unordered_map.451" }
%"class.std::__1::unordered_map.392" = type { %"class.std::__1::__hash_table.393" }
%"class.std::__1::__hash_table.393" = type <{ %"class.std::__1::unique_ptr.394", %"class.std::__1::__compressed_pair.404", %"class.std::__1::__compressed_pair.409", %"class.std::__1::__compressed_pair.412", [4 x i8] }>
%"class.std::__1::unique_ptr.394" = type { %"class.std::__1::__compressed_pair.395" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.396", %"struct.std::__1::__compressed_pair_elem.398" }
%"struct.std::__1::__compressed_pair_elem.396" = type { %"struct.std::__1::__hash_node_base.397"** }
%"struct.std::__1::__hash_node_base.397" = type { %"struct.std::__1::__hash_node_base.397"* }
%"struct.std::__1::__compressed_pair_elem.398" = type { %"class.std::__1::__bucket_list_deallocator.399" }
%"class.std::__1::__bucket_list_deallocator.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.397" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.412" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unordered_set.416" = type { %"class.std::__1::__hash_table.417" }
%"class.std::__1::__hash_table.417" = type <{ %"class.std::__1::unique_ptr.418", %"class.std::__1::__compressed_pair.428", %"class.std::__1::__compressed_pair.433", %"class.std::__1::__compressed_pair.435", [4 x i8] }>
%"class.std::__1::unique_ptr.418" = type { %"class.std::__1::__compressed_pair.419" }
%"class.std::__1::__compressed_pair.419" = type { %"struct.std::__1::__compressed_pair_elem.420", %"struct.std::__1::__compressed_pair_elem.422" }
%"struct.std::__1::__compressed_pair_elem.420" = type { %"struct.std::__1::__hash_node_base.421"** }
%"struct.std::__1::__hash_node_base.421" = type { %"struct.std::__1::__hash_node_base.421"* }
%"struct.std::__1::__compressed_pair_elem.422" = type { %"class.std::__1::__bucket_list_deallocator.423" }
%"class.std::__1::__bucket_list_deallocator.423" = type { %"class.std::__1::__compressed_pair.424" }
%"class.std::__1::__compressed_pair.424" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.428" = type { %"struct.std::__1::__compressed_pair_elem.429" }
%"struct.std::__1::__compressed_pair_elem.429" = type { %"struct.std::__1::__hash_node_base.421" }
%"class.std::__1::__compressed_pair.433" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::vector.438" = type { %"class.std::__1::__vector_base.439" }
%"class.std::__1::__vector_base.439" = type { %"class.spvtools::opt::analysis::TypeManager::UnresolvedType"*, %"class.spvtools::opt::analysis::TypeManager::UnresolvedType"*, %"class.std::__1::__compressed_pair.446" }
%"class.spvtools::opt::analysis::TypeManager::UnresolvedType" = type { i32, %"class.std::__1::unique_ptr.440" }
%"class.std::__1::unique_ptr.440" = type { %"class.std::__1::__compressed_pair.441" }
%"class.std::__1::__compressed_pair.441" = type { %"struct.std::__1::__compressed_pair_elem.442" }
%"struct.std::__1::__compressed_pair_elem.442" = type { %"class.spvtools::opt::analysis::Type"* }
%"class.std::__1::__compressed_pair.446" = type { %"struct.std::__1::__compressed_pair_elem.447" }
%"struct.std::__1::__compressed_pair_elem.447" = type { %"class.spvtools::opt::analysis::TypeManager::UnresolvedType"* }
%"class.std::__1::unordered_map.368" = type { %"class.std::__1::__hash_table.369" }
%"class.std::__1::__hash_table.369" = type <{ %"class.std::__1::unique_ptr.370", %"class.std::__1::__compressed_pair.380", %"class.std::__1::__compressed_pair.385", %"class.std::__1::__compressed_pair.388", [4 x i8] }>
%"class.std::__1::unique_ptr.370" = type { %"class.std::__1::__compressed_pair.371" }
%"class.std::__1::__compressed_pair.371" = type { %"struct.std::__1::__compressed_pair_elem.372", %"struct.std::__1::__compressed_pair_elem.374" }
%"struct.std::__1::__compressed_pair_elem.372" = type { %"struct.std::__1::__hash_node_base.373"** }
%"struct.std::__1::__hash_node_base.373" = type { %"struct.std::__1::__hash_node_base.373"* }
%"struct.std::__1::__compressed_pair_elem.374" = type { %"class.std::__1::__bucket_list_deallocator.375" }
%"class.std::__1::__bucket_list_deallocator.375" = type { %"class.std::__1::__compressed_pair.376" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.381" }
%"struct.std::__1::__compressed_pair_elem.381" = type { %"struct.std::__1::__hash_node_base.373" }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unordered_map.451" = type { %"class.std::__1::__hash_table.452" }
%"class.std::__1::__hash_table.452" = type <{ %"class.std::__1::unique_ptr.453", %"class.std::__1::__compressed_pair.463", %"class.std::__1::__compressed_pair.468", %"class.std::__1::__compressed_pair.471", [4 x i8] }>
%"class.std::__1::unique_ptr.453" = type { %"class.std::__1::__compressed_pair.454" }
%"class.std::__1::__compressed_pair.454" = type { %"struct.std::__1::__compressed_pair_elem.455", %"struct.std::__1::__compressed_pair_elem.457" }
%"struct.std::__1::__compressed_pair_elem.455" = type { %"struct.std::__1::__hash_node_base.456"** }
%"struct.std::__1::__hash_node_base.456" = type { %"struct.std::__1::__hash_node_base.456"* }
%"struct.std::__1::__compressed_pair_elem.457" = type { %"class.std::__1::__bucket_list_deallocator.458" }
%"class.std::__1::__bucket_list_deallocator.458" = type { %"class.std::__1::__compressed_pair.459" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"struct.std::__1::__hash_node_base.456" }
%"class.std::__1::__compressed_pair.468" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.471" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unique_ptr.478" = type { %"class.std::__1::__compressed_pair.479" }
%"class.std::__1::__compressed_pair.479" = type { %"struct.std::__1::__compressed_pair_elem.480" }
%"struct.std::__1::__compressed_pair_elem.480" = type { %"class.spvtools::opt::analysis::DebugInfoManager"* }
%"class.spvtools::opt::analysis::DebugInfoManager" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map", %"class.std::__1::unordered_map", %"class.std::__1::unordered_map.481", %"class.std::__1::unordered_map.481", %"class.std::__1::unordered_map.481", %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"* }
%"class.std::__1::unordered_map.481" = type { %"class.std::__1::__hash_table.482" }
%"class.std::__1::__hash_table.482" = type <{ %"class.std::__1::unique_ptr.483", %"class.std::__1::__compressed_pair.493", %"class.std::__1::__compressed_pair.498", %"class.std::__1::__compressed_pair.501", [4 x i8] }>
%"class.std::__1::unique_ptr.483" = type { %"class.std::__1::__compressed_pair.484" }
%"class.std::__1::__compressed_pair.484" = type { %"struct.std::__1::__compressed_pair_elem.485", %"struct.std::__1::__compressed_pair_elem.487" }
%"struct.std::__1::__compressed_pair_elem.485" = type { %"struct.std::__1::__hash_node_base.486"** }
%"struct.std::__1::__hash_node_base.486" = type { %"struct.std::__1::__hash_node_base.486"* }
%"struct.std::__1::__compressed_pair_elem.487" = type { %"class.std::__1::__bucket_list_deallocator.488" }
%"class.std::__1::__bucket_list_deallocator.488" = type { %"class.std::__1::__compressed_pair.489" }
%"class.std::__1::__compressed_pair.489" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.493" = type { %"struct.std::__1::__compressed_pair_elem.494" }
%"struct.std::__1::__compressed_pair_elem.494" = type { %"struct.std::__1::__hash_node_base.486" }
%"class.std::__1::__compressed_pair.498" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.501" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unique_ptr.508" = type { %"class.std::__1::__compressed_pair.509" }
%"class.std::__1::__compressed_pair.509" = type { %"struct.std::__1::__compressed_pair_elem.510" }
%"struct.std::__1::__compressed_pair_elem.510" = type { %"class.std::__1::multimap.511"* }
%"class.std::__1::multimap.511" = type { %"class.std::__1::__tree.512" }
%"class.std::__1::__tree.512" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.513", %"class.std::__1::__compressed_pair.517" }
%"class.std::__1::__compressed_pair.513" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.517" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::unique_ptr.523" = type { %"class.std::__1::__compressed_pair.524" }
%"class.std::__1::__compressed_pair.524" = type { %"struct.std::__1::__compressed_pair_elem.525" }
%"struct.std::__1::__compressed_pair_elem.525" = type { %"class.spvtools::opt::ScalarEvolutionAnalysis"* }
%"class.spvtools::opt::ScalarEvolutionAnalysis" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::map.526", %"class.spvtools::opt::SENode"*, %"class.std::__1::unordered_set.543", %"class.std::__1::map.565" }
%"class.std::__1::map.526" = type { %"class.std::__1::__tree.527" }
%"class.std::__1::__tree.527" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.528", %"class.std::__1::__compressed_pair.532" }
%"class.std::__1::__compressed_pair.528" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.532" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.spvtools::opt::SENode" = type <{ i32 (...)**, %"class.std::__1::vector.536", %"class.spvtools::opt::ScalarEvolutionAnalysis"*, i32, [4 x i8] }>
%"class.std::__1::vector.536" = type { %"class.std::__1::__vector_base.537" }
%"class.std::__1::__vector_base.537" = type { %"class.spvtools::opt::SENode"**, %"class.spvtools::opt::SENode"**, %"class.std::__1::__compressed_pair.538" }
%"class.std::__1::__compressed_pair.538" = type { %"struct.std::__1::__compressed_pair_elem.539" }
%"struct.std::__1::__compressed_pair_elem.539" = type { %"class.spvtools::opt::SENode"** }
%"class.std::__1::unordered_set.543" = type { %"class.std::__1::__hash_table.544" }
%"class.std::__1::__hash_table.544" = type <{ %"class.std::__1::unique_ptr.545", %"class.std::__1::__compressed_pair.555", %"class.std::__1::__compressed_pair.560", %"class.std::__1::__compressed_pair.562", [4 x i8] }>
%"class.std::__1::unique_ptr.545" = type { %"class.std::__1::__compressed_pair.546" }
%"class.std::__1::__compressed_pair.546" = type { %"struct.std::__1::__compressed_pair_elem.547", %"struct.std::__1::__compressed_pair_elem.549" }
%"struct.std::__1::__compressed_pair_elem.547" = type { %"struct.std::__1::__hash_node_base.548"** }
%"struct.std::__1::__hash_node_base.548" = type { %"struct.std::__1::__hash_node_base.548"* }
%"struct.std::__1::__compressed_pair_elem.549" = type { %"class.std::__1::__bucket_list_deallocator.550" }
%"class.std::__1::__bucket_list_deallocator.550" = type { %"class.std::__1::__compressed_pair.551" }
%"class.std::__1::__compressed_pair.551" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.555" = type { %"struct.std::__1::__compressed_pair_elem.556" }
%"struct.std::__1::__compressed_pair_elem.556" = type { %"struct.std::__1::__hash_node_base.548" }
%"class.std::__1::__compressed_pair.560" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::map.565" = type { %"class.std::__1::__tree.566" }
%"class.std::__1::__tree.566" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.567", %"class.std::__1::__compressed_pair.571" }
%"class.std::__1::__compressed_pair.567" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::unique_ptr.579" = type { %"class.std::__1::__compressed_pair.580" }
%"class.std::__1::__compressed_pair.580" = type { %"struct.std::__1::__compressed_pair_elem.581" }
%"struct.std::__1::__compressed_pair_elem.581" = type { %"class.spvtools::opt::LivenessAnalysis"* }
%"class.spvtools::opt::LivenessAnalysis" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map.582" }
%"class.std::__1::unordered_map.582" = type { %"class.std::__1::__hash_table.583" }
%"class.std::__1::__hash_table.583" = type <{ %"class.std::__1::unique_ptr.584", %"class.std::__1::__compressed_pair.594", %"class.std::__1::__compressed_pair.599", %"class.std::__1::__compressed_pair.602", [4 x i8] }>
%"class.std::__1::unique_ptr.584" = type { %"class.std::__1::__compressed_pair.585" }
%"class.std::__1::__compressed_pair.585" = type { %"struct.std::__1::__compressed_pair_elem.586", %"struct.std::__1::__compressed_pair_elem.588" }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"struct.std::__1::__hash_node_base.587"** }
%"struct.std::__1::__hash_node_base.587" = type { %"struct.std::__1::__hash_node_base.587"* }
%"struct.std::__1::__compressed_pair_elem.588" = type { %"class.std::__1::__bucket_list_deallocator.589" }
%"class.std::__1::__bucket_list_deallocator.589" = type { %"class.std::__1::__compressed_pair.590" }
%"class.std::__1::__compressed_pair.590" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.594" = type { %"struct.std::__1::__compressed_pair_elem.595" }
%"struct.std::__1::__compressed_pair_elem.595" = type { %"struct.std::__1::__hash_node_base.587" }
%"class.std::__1::__compressed_pair.599" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.602" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unique_ptr.609" = type { %"class.std::__1::__compressed_pair.610" }
%"class.std::__1::__compressed_pair.610" = type { %"struct.std::__1::__compressed_pair_elem.611" }
%"struct.std::__1::__compressed_pair_elem.611" = type { %"class.spvtools::opt::ValueNumberTable"* }
%"class.spvtools::opt::ValueNumberTable" = type <{ %"class.std::__1::unordered_map.612", %"class.std::__1::unordered_map.202", %"class.spvtools::opt::IRContext"*, i32, [4 x i8] }>
%"class.std::__1::unordered_map.612" = type { %"class.std::__1::__hash_table.613" }
%"class.std::__1::__hash_table.613" = type <{ %"class.std::__1::unique_ptr.614", %"class.std::__1::__compressed_pair.624", %"class.std::__1::__compressed_pair.629", %"class.std::__1::__compressed_pair.632", [4 x i8] }>
%"class.std::__1::unique_ptr.614" = type { %"class.std::__1::__compressed_pair.615" }
%"class.std::__1::__compressed_pair.615" = type { %"struct.std::__1::__compressed_pair_elem.616", %"struct.std::__1::__compressed_pair_elem.618" }
%"struct.std::__1::__compressed_pair_elem.616" = type { %"struct.std::__1::__hash_node_base.617"** }
%"struct.std::__1::__hash_node_base.617" = type { %"struct.std::__1::__hash_node_base.617"* }
%"struct.std::__1::__compressed_pair_elem.618" = type { %"class.std::__1::__bucket_list_deallocator.619" }
%"class.std::__1::__bucket_list_deallocator.619" = type { %"class.std::__1::__compressed_pair.620" }
%"class.std::__1::__compressed_pair.620" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.624" = type { %"struct.std::__1::__compressed_pair_elem.625" }
%"struct.std::__1::__compressed_pair_elem.625" = type { %"struct.std::__1::__hash_node_base.617" }
%"class.std::__1::__compressed_pair.629" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.632" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.spvtools::opt::InstructionFolder"* }
%"class.spvtools::opt::InstructionFolder" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unique_ptr.642", %"class.std::__1::unique_ptr.702" }
%"class.std::__1::unique_ptr.642" = type { %"class.std::__1::__compressed_pair.643" }
%"class.std::__1::__compressed_pair.643" = type { %"struct.std::__1::__compressed_pair_elem.644" }
%"struct.std::__1::__compressed_pair_elem.644" = type { %"class.spvtools::opt::ConstantFoldingRules"* }
%"class.spvtools::opt::ConstantFoldingRules" = type { i32 (...)**, %"class.std::__1::unordered_map.645", %"class.std::__1::map.669", %"class.spvtools::opt::IRContext"*, %"class.std::__1::vector.680" }
%"class.std::__1::unordered_map.645" = type { %"class.std::__1::__hash_table.646" }
%"class.std::__1::__hash_table.646" = type <{ %"class.std::__1::unique_ptr.647", %"class.std::__1::__compressed_pair.657", %"class.std::__1::__compressed_pair.662", %"class.std::__1::__compressed_pair.665", [4 x i8] }>
%"class.std::__1::unique_ptr.647" = type { %"class.std::__1::__compressed_pair.648" }
%"class.std::__1::__compressed_pair.648" = type { %"struct.std::__1::__compressed_pair_elem.649", %"struct.std::__1::__compressed_pair_elem.651" }
%"struct.std::__1::__compressed_pair_elem.649" = type { %"struct.std::__1::__hash_node_base.650"** }
%"struct.std::__1::__hash_node_base.650" = type { %"struct.std::__1::__hash_node_base.650"* }
%"struct.std::__1::__compressed_pair_elem.651" = type { %"class.std::__1::__bucket_list_deallocator.652" }
%"class.std::__1::__bucket_list_deallocator.652" = type { %"class.std::__1::__compressed_pair.653" }
%"class.std::__1::__compressed_pair.653" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.657" = type { %"struct.std::__1::__compressed_pair_elem.658" }
%"struct.std::__1::__compressed_pair_elem.658" = type { %"struct.std::__1::__hash_node_base.650" }
%"class.std::__1::__compressed_pair.662" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.665" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::map.669" = type { %"class.std::__1::__tree.670" }
%"class.std::__1::__tree.670" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.671", %"class.std::__1::__compressed_pair.675" }
%"class.std::__1::__compressed_pair.671" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.675" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::vector.680" = type { %"class.std::__1::__vector_base.681" }
%"class.std::__1::__vector_base.681" = type { %"class.std::__1::function.682"*, %"class.std::__1::function.682"*, %"class.std::__1::__compressed_pair.694" }
%"class.std::__1::function.682" = type { %"class.std::__1::__function::__policy_func.685" }
%"class.std::__1::__function::__policy_func.685" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.686", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.686" = type { %"class.spvtools::opt::analysis::Constant"* (%"union.std::__1::__function::__policy_storage"*, %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::Instruction"*, %"class.std::__1::vector.687"*)* }
%"class.std::__1::vector.687" = type { %"class.std::__1::__vector_base.688" }
%"class.std::__1::__vector_base.688" = type { %"class.spvtools::opt::analysis::Constant"**, %"class.spvtools::opt::analysis::Constant"**, %"class.std::__1::__compressed_pair.689" }
%"class.std::__1::__compressed_pair.689" = type { %"struct.std::__1::__compressed_pair_elem.690" }
%"struct.std::__1::__compressed_pair_elem.690" = type { %"class.spvtools::opt::analysis::Constant"** }
%"class.std::__1::__compressed_pair.694" = type { %"struct.std::__1::__compressed_pair_elem.695" }
%"struct.std::__1::__compressed_pair_elem.695" = type { %"class.std::__1::function.682"* }
%"class.std::__1::unique_ptr.702" = type { %"class.std::__1::__compressed_pair.703" }
%"class.std::__1::__compressed_pair.703" = type { %"struct.std::__1::__compressed_pair_elem.704" }
%"struct.std::__1::__compressed_pair_elem.704" = type { %"class.spvtools::opt::FoldingRules"* }
%"class.spvtools::opt::FoldingRules" = type { i32 (...)**, %"class.std::__1::unordered_map.705", %"class.std::__1::map.729", %"class.spvtools::opt::IRContext"*, %"class.std::__1::vector.740" }
%"class.std::__1::unordered_map.705" = type { %"class.std::__1::__hash_table.706" }
%"class.std::__1::__hash_table.706" = type <{ %"class.std::__1::unique_ptr.707", %"class.std::__1::__compressed_pair.717", %"class.std::__1::__compressed_pair.722", %"class.std::__1::__compressed_pair.725", [4 x i8] }>
%"class.std::__1::unique_ptr.707" = type { %"class.std::__1::__compressed_pair.708" }
%"class.std::__1::__compressed_pair.708" = type { %"struct.std::__1::__compressed_pair_elem.709", %"struct.std::__1::__compressed_pair_elem.711" }
%"struct.std::__1::__compressed_pair_elem.709" = type { %"struct.std::__1::__hash_node_base.710"** }
%"struct.std::__1::__hash_node_base.710" = type { %"struct.std::__1::__hash_node_base.710"* }
%"struct.std::__1::__compressed_pair_elem.711" = type { %"class.std::__1::__bucket_list_deallocator.712" }
%"class.std::__1::__bucket_list_deallocator.712" = type { %"class.std::__1::__compressed_pair.713" }
%"class.std::__1::__compressed_pair.713" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"struct.std::__1::__hash_node_base.710" }
%"class.std::__1::__compressed_pair.722" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.725" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::map.729" = type { %"class.std::__1::__tree.730" }
%"class.std::__1::__tree.730" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.731", %"class.std::__1::__compressed_pair.735" }
%"class.std::__1::__compressed_pair.731" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.735" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::vector.740" = type { %"class.std::__1::__vector_base.741" }
%"class.std::__1::__vector_base.741" = type { %"class.std::__1::function.742"*, %"class.std::__1::function.742"*, %"class.std::__1::__compressed_pair.747" }
%"class.std::__1::function.742" = type { %"class.std::__1::__function::__policy_func.745" }
%"class.std::__1::__function::__policy_func.745" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.746", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.746" = type { i1 (%"union.std::__1::__function::__policy_storage"*, %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::Instruction"*, %"class.std::__1::vector.687"*)* }
%"class.std::__1::__compressed_pair.747" = type { %"struct.std::__1::__compressed_pair_elem.748" }
%"struct.std::__1::__compressed_pair_elem.748" = type { %"class.std::__1::function.742"* }
%"class.std::__1::unique_ptr.758" = type { %"class.std::__1::__compressed_pair.759" }
%"class.std::__1::__compressed_pair.759" = type { %"struct.std::__1::__compressed_pair_elem.760" }
%"struct.std::__1::__compressed_pair_elem.760" = type { %"class.spvtools::opt::StructuredCFGAnalysis"* }
%"class.spvtools::opt::StructuredCFGAnalysis" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map.761", %"class.spvtools::utils::BitVector" }
%"class.std::__1::unordered_map.761" = type { %"class.std::__1::__hash_table.762" }
%"class.std::__1::__hash_table.762" = type <{ %"class.std::__1::unique_ptr.763", %"class.std::__1::__compressed_pair.773", %"class.std::__1::__compressed_pair.778", %"class.std::__1::__compressed_pair.781", [4 x i8] }>
%"class.std::__1::unique_ptr.763" = type { %"class.std::__1::__compressed_pair.764" }
%"class.std::__1::__compressed_pair.764" = type { %"struct.std::__1::__compressed_pair_elem.765", %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.765" = type { %"struct.std::__1::__hash_node_base.766"** }
%"struct.std::__1::__hash_node_base.766" = type { %"struct.std::__1::__hash_node_base.766"* }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.std::__1::__bucket_list_deallocator.768" }
%"class.std::__1::__bucket_list_deallocator.768" = type { %"class.std::__1::__compressed_pair.769" }
%"class.std::__1::__compressed_pair.769" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.773" = type { %"struct.std::__1::__compressed_pair_elem.774" }
%"struct.std::__1::__compressed_pair_elem.774" = type { %"struct.std::__1::__hash_node_base.766" }
%"class.std::__1::__compressed_pair.778" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.781" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.spvtools::utils::BitVector" = type { %"class.std::__1::vector.785" }
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { i64*, i64*, %"class.std::__1::__compressed_pair.787" }
%"class.std::__1::__compressed_pair.787" = type { %"struct.std::__1::__compressed_pair_elem.788" }
%"struct.std::__1::__compressed_pair_elem.788" = type { i64* }
%"class.spvtools::opt::UptrVectorIterator" = type { %"class.std::__1::vector"*, %"class.std::__1::__wrap_iter" }
%"class.std::__1::__wrap_iter" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::unordered_set.910" = type { %"class.std::__1::__hash_table.911" }
%"class.std::__1::__hash_table.911" = type <{ %"class.std::__1::unique_ptr.912", %"class.std::__1::__compressed_pair.922", %"class.std::__1::__compressed_pair.927", %"class.std::__1::__compressed_pair.929", [4 x i8] }>
%"class.std::__1::unique_ptr.912" = type { %"class.std::__1::__compressed_pair.913" }
%"class.std::__1::__compressed_pair.913" = type { %"struct.std::__1::__compressed_pair_elem.914", %"struct.std::__1::__compressed_pair_elem.916" }
%"struct.std::__1::__compressed_pair_elem.914" = type { %"struct.std::__1::__hash_node_base.915"** }
%"struct.std::__1::__hash_node_base.915" = type { %"struct.std::__1::__hash_node_base.915"* }
%"struct.std::__1::__compressed_pair_elem.916" = type { %"class.std::__1::__bucket_list_deallocator.917" }
%"class.std::__1::__bucket_list_deallocator.917" = type { %"class.std::__1::__compressed_pair.918" }
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.922" = type { %"struct.std::__1::__compressed_pair_elem.923" }
%"struct.std::__1::__compressed_pair_elem.923" = type { %"struct.std::__1::__hash_node_base.915" }
%"class.std::__1::__compressed_pair.927" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.929" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"class.std::__1::function.932" = type { %"class.std::__1::__function::__policy_func.936" }
%"class.std::__1::__function::__policy_func.936" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.937", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.937" = type { void (%"union.std::__1::__function::__policy_storage"*, %"class.spvtools::opt::Instruction"*)* }
%"struct.std::__1::__hash_node" = type { %"struct.std::__1::__hash_node_base.915", i64, %"class.spvtools::opt::Instruction"* }
%"class.std::__1::__function::__default_alloc_func" = type { %class.anon }
%class.anon = type { %"class.spvtools::opt::IRContext"*, i8, %"class.spvtools::opt::UptrVectorIterator"*, i8*, %"class.std::__1::unordered_set.910"* }
%"class.spvtools::utils::IntrusiveNodeBase" = type <{ i32 (...)**, %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::default_delete.819" = type { i8 }

$_ZNSt3__16vectorINS_10unique_ptrIN8spvtools3opt11InstructionENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE24__emplace_back_slow_pathIJS7_EEEvDpOT_ = comdat any

$_ZN8spvtools5utils11SmallVectorIjLm2EED2Ev = comdat any

$_ZN8spvtools5utils11SmallVectorIjLm2EED0Ev = comdat any

$_ZN8spvtools3opt8FunctionD2Ev = comdat any

$_ZN8spvtools3opt15InstructionListD2Ev = comdat any

$_ZNKSt3__114default_deleteIN8spvtools3opt10BasicBlockEEclEPS3_ = comdat any

$_ZN8spvtools3opt15InstructionListD0Ev = comdat any

$_ZN8spvtools3opt11InstructionD2Ev = comdat any

$_ZN8spvtools5utils13IntrusiveListINS_3opt11InstructionEED2Ev = comdat any

$_ZN8spvtools5utils13IntrusiveListINS_3opt11InstructionEED0Ev = comdat any

$_ZN8spvtools3opt11InstructionD0Ev = comdat any

$_ZN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEED2Ev = comdat any

$_ZN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEED0Ev = comdat any

$_ZTVN8spvtools5utils11SmallVectorIjLm2EEE = comdat any

$_ZTVN8spvtools3opt15InstructionListE = comdat any

$_ZTVN8spvtools5utils13IntrusiveListINS_3opt11InstructionEEE = comdat any

$_ZTVN8spvtools3opt11InstructionE = comdat any

$_ZTVN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEEE = comdat any

@_ZTVN8spvtools5utils11SmallVectorIjLm2EEE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.spvtools::utils::SmallVector"*)* @_ZN8spvtools5utils11SmallVectorIjLm2EED2Ev to i8*), i8* bitcast (void (%"class.spvtools::utils::SmallVector"*)* @_ZN8spvtools5utils11SmallVectorIjLm2EED0Ev to i8*)] }, comdat, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEEPKS1_NS_17integral_constantIbLb0EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" { i8* (i8*)* @"_ZNSt3__110__function8__policy13__large_cloneINS0_20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEEPvPKv", void (i8*)* @"_ZNSt3__110__function8__policy15__large_destroyINS0_20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEEvPv", i8 0, %"class.std::type_info"* null }, align 8
@_ZTVN8spvtools3opt15InstructionListE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.spvtools::opt::InstructionList"*)* @_ZN8spvtools3opt15InstructionListD2Ev to i8*), i8* bitcast (void (%"class.spvtools::opt::InstructionList"*)* @_ZN8spvtools3opt15InstructionListD0Ev to i8*)] }, comdat, align 8
@_ZTVN8spvtools5utils13IntrusiveListINS_3opt11InstructionEEE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.spvtools::utils::IntrusiveList"*)* @_ZN8spvtools5utils13IntrusiveListINS_3opt11InstructionEED2Ev to i8*), i8* bitcast (void (%"class.spvtools::utils::IntrusiveList"*)* @_ZN8spvtools5utils13IntrusiveListINS_3opt11InstructionEED0Ev to i8*)] }, comdat, align 8
@_ZTVN8spvtools3opt11InstructionE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.spvtools::opt::Instruction"*)* @_ZN8spvtools3opt11InstructionD2Ev to i8*), i8* bitcast (void (%"class.spvtools::opt::Instruction"*)* @_ZN8spvtools3opt11InstructionD0Ev to i8*)] }, comdat, align 8
@_ZTVN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEEE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.spvtools::utils::IntrusiveNodeBase"*)* @_ZN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEED2Ev to i8*), i8* bitcast (void (%"class.spvtools::utils::IntrusiveNodeBase"*)* @_ZN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEED0Ev to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.std::__1::vector"*, %"class.std::__1::unique_ptr"* } @_ZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS0_9IRContextEPNS0_18UptrVectorIteratorINS0_8FunctionELb0EEE(%"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::UptrVectorIterator"*) local_unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = alloca %"class.std::__1::unordered_set.910", align 8
  %5 = alloca %"class.std::__1::function.932", align 8
  %6 = alloca [7 x i8], align 1
  %7 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %8 = load %"class.spvtools::opt::Module"*, %"class.spvtools::opt::Module"** %7, align 8
  %9 = getelementptr inbounds %"class.spvtools::opt::Module", %"class.spvtools::opt::Module"* %8, i64 0, i32 15
  %10 = getelementptr inbounds %"class.spvtools::opt::UptrVectorIterator", %"class.spvtools::opt::UptrVectorIterator"* %1, i64 0, i32 0
  %11 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %10, align 8
  %12 = icmp eq %"class.std::__1::vector"* %11, %9
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.spvtools::opt::UptrVectorIterator", %"class.spvtools::opt::UptrVectorIterator"* %1, i64 0, i32 1, i32 0
  %15 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %14, align 8
  br label %23

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %18 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %17, align 8
  %19 = getelementptr inbounds %"class.spvtools::opt::UptrVectorIterator", %"class.spvtools::opt::UptrVectorIterator"* %1, i64 0, i32 1, i32 0
  %20 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %19, align 8
  %21 = icmp eq %"class.std::__1::unique_ptr"* %20, %18
  %22 = zext i1 %21 to i8
  br label %23

23:                                               ; preds = %13, %16
  %24 = phi %"class.std::__1::unique_ptr"* [ %15, %13 ], [ %20, %16 ]
  %25 = phi i8 [ 0, %13 ], [ %22, %16 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #9
  store i8 0, i8* %3, align 1
  %26 = bitcast %"class.std::__1::unordered_set.910"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %26) #9
  %27 = getelementptr inbounds %"class.std::__1::unordered_set.910", %"class.std::__1::unordered_set.910"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.std::__1::unordered_set.910", %"class.std::__1::unordered_set.910"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.std::__1::unordered_set.910", %"class.std::__1::unordered_set.910"* %4, i64 0, i32 0, i32 4, i64 0
  %30 = getelementptr inbounds %"class.std::__1::unordered_set.910", %"class.std::__1::unordered_set.910"* %4, i64 0, i32 0, i32 3
  %31 = bitcast %"class.std::__1::__compressed_pair.929"* %30 to i32*
  %32 = bitcast i8* %29 to i32*
  store i32 -1431655766, i32* %32, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 32, i1 false) #9
  store i32 1065353216, i32* %31, align 8
  %33 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %24, i64 0, i32 0, i32 0, i32 0
  %34 = load %"class.spvtools::opt::Function"*, %"class.spvtools::opt::Function"** %33, align 8
  %35 = bitcast %"class.std::__1::function.932"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #9
  %36 = getelementptr inbounds [7 x i8], [7 x i8]* %6, i64 0, i64 0
  %37 = getelementptr inbounds %"class.std::__1::function.932", %"class.std::__1::function.932"* %5, i64 0, i32 0, i32 1, i32 0
  %38 = getelementptr inbounds %"class.std::__1::function.932", %"class.std::__1::function.932"* %5, i64 0, i32 0, i32 2
  store void (%"union.std::__1::__function::__policy_storage"*, %"class.spvtools::opt::Instruction"*)* @"_ZNSt3__110__function16__policy_invokerIFvPN8spvtools3opt11InstructionEEE11__call_implINS0_20__default_alloc_funcIZNS3_26eliminatedeadfunctionsutil17EliminateFunctionEPNS3_9IRContextEPNS3_18UptrVectorIteratorINS3_8FunctionELb0EEEE3$_0S6_EEEEvPKNS0_16__policy_storageES5_", void (%"union.std::__1::__function::__policy_storage"*, %"class.spvtools::opt::Instruction"*)** %37, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEEPKS1_NS_17integral_constantIbLb0EEEE9__policy_", %"struct.std::__1::__function::__policy"** %38, align 8
  %39 = tail call i8* @_Znwm(i64 40) #10, !noalias !2
  %40 = bitcast i8* %39 to %"class.spvtools::opt::IRContext"**
  store %"class.spvtools::opt::IRContext"* %0, %"class.spvtools::opt::IRContext"** %40, align 8
  %41 = getelementptr inbounds i8, i8* %39, i64 8
  store i8 %25, i8* %41, align 8
  %42 = getelementptr inbounds i8, i8* %39, i64 9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* nonnull align 1 %36, i64 7, i1 false)
  %43 = getelementptr inbounds i8, i8* %39, i64 16
  %44 = bitcast i8* %43 to %"class.spvtools::opt::UptrVectorIterator"**
  store %"class.spvtools::opt::UptrVectorIterator"* %1, %"class.spvtools::opt::UptrVectorIterator"** %44, align 8
  %45 = getelementptr inbounds i8, i8* %39, i64 24
  %46 = bitcast i8* %45 to i8**
  store i8* %3, i8** %46, align 8
  %47 = getelementptr inbounds i8, i8* %39, i64 32
  %48 = bitcast i8* %47 to %"class.std::__1::unordered_set.910"**
  store %"class.std::__1::unordered_set.910"* %4, %"class.std::__1::unordered_set.910"** %48, align 8
  %49 = getelementptr inbounds %"class.std::__1::function.932", %"class.std::__1::function.932"* %5, i64 0, i32 0, i32 0, i32 0
  store i8* %39, i8** %49, align 8
  call void @_ZN8spvtools3opt8Function11ForEachInstERKNSt3__18functionIFvPNS0_11InstructionEEEEbb(%"class.spvtools::opt::Function"* %34, %"class.std::__1::function.932"* nonnull dereferenceable(32) %5, i1 zeroext true, i1 zeroext true) #9
  %50 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %38, align 8
  %51 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %50, i64 0, i32 1
  %52 = load void (i8*)*, void (i8*)** %51, align 8
  %53 = icmp eq void (i8*)* %52, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %23
  %55 = load i8*, i8** %49, align 8
  call void %52(i8* %55) #9
  br label %56

56:                                               ; preds = %23, %54
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #9
  %57 = bitcast %"struct.std::__1::__hash_node_base.915"** %28 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %128

60:                                               ; preds = %128, %56
  %61 = getelementptr inbounds %"class.spvtools::opt::UptrVectorIterator", %"class.spvtools::opt::UptrVectorIterator"* %1, i64 0, i32 1
  %62 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %10, align 8
  %63 = bitcast %"class.std::__1::vector"* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = bitcast %"class.std::__1::__wrap_iter"* %61 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %66, %64
  %68 = ashr exact i64 %67, 3
  %69 = inttoptr i64 %66 to %"class.std::__1::unique_ptr"*
  %70 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %69, i64 1
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %62, i64 0, i32 0, i32 1
  %72 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %71, align 8
  %73 = icmp eq %"class.std::__1::unique_ptr"* %70, %72
  br i1 %73, label %93, label %74

74:                                               ; preds = %60, %86
  %75 = phi %"class.std::__1::unique_ptr"* [ %88, %86 ], [ %69, %60 ]
  %76 = phi %"class.std::__1::unique_ptr"* [ %87, %86 ], [ %70, %60 ]
  %77 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = bitcast %"class.std::__1::unique_ptr"* %76 to i64*
  %79 = load i64, i64* %78, align 8
  store %"class.spvtools::opt::Function"* null, %"class.spvtools::opt::Function"** %77, align 8
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %75, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.spvtools::opt::Function"*, %"class.spvtools::opt::Function"** %80, align 8
  %82 = bitcast %"class.std::__1::unique_ptr"* %75 to i64*
  store i64 %79, i64* %82, align 8
  %83 = icmp eq %"class.spvtools::opt::Function"* %81, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %74
  call void @_ZN8spvtools3opt8FunctionD2Ev(%"class.spvtools::opt::Function"* nonnull %81) #9
  %85 = bitcast %"class.spvtools::opt::Function"* %81 to i8*
  call void @_ZdlPv(i8* %85) #10
  br label %86

86:                                               ; preds = %84, %74
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %76, i64 1
  %88 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %75, i64 1
  %89 = icmp eq %"class.std::__1::unique_ptr"* %87, %72
  br i1 %89, label %90, label %74

90:                                               ; preds = %86
  %91 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %71, align 8
  %92 = icmp eq %"class.std::__1::unique_ptr"* %91, %88
  br i1 %92, label %106, label %93

93:                                               ; preds = %90, %60
  %94 = phi %"class.std::__1::unique_ptr"* [ %88, %90 ], [ %69, %60 ]
  %95 = phi %"class.std::__1::unique_ptr"* [ %91, %90 ], [ %70, %60 ]
  br label %96

96:                                               ; preds = %104, %93
  %97 = phi %"class.std::__1::unique_ptr"* [ %98, %104 ], [ %95, %93 ]
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %97, i64 -1
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = load %"class.spvtools::opt::Function"*, %"class.spvtools::opt::Function"** %99, align 8
  store %"class.spvtools::opt::Function"* null, %"class.spvtools::opt::Function"** %99, align 8
  %101 = icmp eq %"class.spvtools::opt::Function"* %100, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %96
  call void @_ZN8spvtools3opt8FunctionD2Ev(%"class.spvtools::opt::Function"* nonnull %100) #9
  %103 = bitcast %"class.spvtools::opt::Function"* %100 to i8*
  call void @_ZdlPv(i8* %103) #10
  br label %104

104:                                              ; preds = %102, %96
  %105 = icmp eq %"class.std::__1::unique_ptr"* %98, %94
  br i1 %105, label %106, label %96

106:                                              ; preds = %104, %90
  %107 = phi %"class.std::__1::unique_ptr"* [ %88, %90 ], [ %94, %104 ]
  store %"class.std::__1::unique_ptr"* %107, %"class.std::__1::unique_ptr"** %71, align 8
  %108 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %10, align 8
  %109 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %108, i64 0, i32 0, i32 0
  %110 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %109, align 8
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %110, i64 %68
  %112 = insertvalue { %"class.std::__1::vector"*, %"class.std::__1::unique_ptr"* } undef, %"class.std::__1::vector"* %108, 0
  %113 = insertvalue { %"class.std::__1::vector"*, %"class.std::__1::unique_ptr"* } %112, %"class.std::__1::unique_ptr"* %111, 1
  %114 = load %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %28, align 8
  %115 = icmp eq %"struct.std::__1::__hash_node_base.915"* %114, null
  br i1 %115, label %122, label %116

116:                                              ; preds = %106, %116
  %117 = phi %"struct.std::__1::__hash_node_base.915"* [ %119, %116 ], [ %114, %106 ]
  %118 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915", %"struct.std::__1::__hash_node_base.915"* %117, i64 0, i32 0
  %119 = load %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %118, align 8
  %120 = bitcast %"struct.std::__1::__hash_node_base.915"* %117 to i8*
  call void @_ZdlPv(i8* %120) #10
  %121 = icmp eq %"struct.std::__1::__hash_node_base.915"* %119, null
  br i1 %121, label %122, label %116

122:                                              ; preds = %116, %106
  %123 = load %"struct.std::__1::__hash_node_base.915"**, %"struct.std::__1::__hash_node_base.915"*** %27, align 8
  store %"struct.std::__1::__hash_node_base.915"** null, %"struct.std::__1::__hash_node_base.915"*** %27, align 8
  %124 = icmp eq %"struct.std::__1::__hash_node_base.915"** %123, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %122
  %126 = bitcast %"struct.std::__1::__hash_node_base.915"** %123 to i8*
  call void @_ZdlPv(i8* %126) #10
  br label %127

127:                                              ; preds = %122, %125
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %26) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #9
  ret { %"class.std::__1::vector"*, %"class.std::__1::unique_ptr"* } %113

128:                                              ; preds = %56, %128
  %129 = phi i64 [ %135, %128 ], [ %58, %56 ]
  %130 = inttoptr i64 %129 to %"struct.std::__1::__hash_node"*
  %131 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %130, i64 0, i32 2
  %132 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %131, align 8
  %133 = call %"class.spvtools::opt::Instruction"* @_ZN8spvtools3opt9IRContext8KillInstEPNS0_11InstructionE(%"class.spvtools::opt::IRContext"* %0, %"class.spvtools::opt::Instruction"* %132) #9
  %134 = inttoptr i64 %129 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %60, label %128
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN8spvtools3opt8Function11ForEachInstERKNSt3__18functionIFvPNS0_11InstructionEEEEbb(%"class.spvtools::opt::Function"*, %"class.std::__1::function.932"* dereferenceable(32), i1 zeroext, i1 zeroext) local_unnamed_addr #2

declare %"class.spvtools::opt::Instruction"* @_ZN8spvtools3opt9IRContext8KillInstEPNS0_11InstructionE(%"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::Instruction"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZNSt3__110__function16__policy_invokerIFvPN8spvtools3opt11InstructionEEE11__call_implINS0_20__default_alloc_funcIZNS3_26eliminatedeadfunctionsutil17EliminateFunctionEPNS3_9IRContextEPNS3_18UptrVectorIteratorINS3_8FunctionELb0EEEE3$_0S6_EEEEvPKNS0_16__policy_storageES5_"(%"union.std::__1::__function::__policy_storage"* nocapture readonly, %"class.spvtools::opt::Instruction"*) #0 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr.0", align 8
  %4 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to %"class.std::__1::__function::__default_alloc_func"**
  %5 = load %"class.std::__1::__function::__default_alloc_func"*, %"class.std::__1::__function::__default_alloc_func"** %4, align 8
  %6 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %1, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 56
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 3
  %11 = load i8*, i8** %10, align 8
  store i8 1, i8* %11, align 1
  br label %12

12:                                               ; preds = %9, %2
  %13 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 3
  %14 = load i8*, i8** %13, align 8
  %15 = load i8, i8* %14, align 1, !range !7
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %205, label %17

17:                                               ; preds = %12
  %18 = load i32, i32* %6, align 8
  %19 = icmp eq i32 %18, 12
  br i1 %19, label %20, label %205

20:                                               ; preds = %17
  %21 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 4
  %22 = load %"class.std::__1::unordered_set.910"*, %"class.std::__1::unordered_set.910"** %21, align 8
  %23 = ptrtoint %"class.spvtools::opt::Instruction"* %1 to i64
  %24 = lshr i64 %23, 32
  %25 = shl i64 %23, 3
  %26 = and i64 %25, 4294967288
  %27 = add nuw nsw i64 %26, 8
  %28 = xor i64 %27, %24
  %29 = mul i64 %28, -7070675565921424023
  %30 = lshr i64 %29, 47
  %31 = xor i64 %29, %24
  %32 = xor i64 %31, %30
  %33 = mul i64 %32, -7070675565921424023
  %34 = lshr i64 %33, 47
  %35 = xor i64 %34, %33
  %36 = mul i64 %35, -7070675565921424023
  %37 = getelementptr inbounds %"class.std::__1::unordered_set.910", %"class.std::__1::unordered_set.910"* %22, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %88, label %40

40:                                               ; preds = %20
  %41 = tail call i64 @llvm.ctpop.i64(i64 %38) #9, !range !8
  %42 = icmp ugt i64 %41, 1
  br i1 %42, label %46, label %43

43:                                               ; preds = %40
  %44 = add i64 %38, -1
  %45 = and i64 %44, %36
  br label %50

46:                                               ; preds = %40
  %47 = icmp ult i64 %36, %38
  br i1 %47, label %50, label %48

48:                                               ; preds = %46
  %49 = urem i64 %36, %38
  br label %50

50:                                               ; preds = %48, %46, %43
  %51 = phi i64 [ %45, %43 ], [ %49, %48 ], [ %36, %46 ]
  %52 = getelementptr inbounds %"class.std::__1::unordered_set.910", %"class.std::__1::unordered_set.910"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load %"struct.std::__1::__hash_node_base.915"**, %"struct.std::__1::__hash_node_base.915"*** %52, align 8
  %54 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %53, i64 %51
  %55 = load %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %54, align 8
  %56 = icmp eq %"struct.std::__1::__hash_node_base.915"* %55, null
  br i1 %56, label %88, label %57

57:                                               ; preds = %50
  %58 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915", %"struct.std::__1::__hash_node_base.915"* %55, i64 0, i32 0
  %59 = load %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %58, align 8
  %60 = icmp eq %"struct.std::__1::__hash_node_base.915"* %59, null
  br i1 %60, label %88, label %61

61:                                               ; preds = %57
  %62 = add i64 %38, -1
  br label %63

63:                                               ; preds = %84, %61
  %64 = phi %"struct.std::__1::__hash_node_base.915"* [ %59, %61 ], [ %86, %84 ]
  %65 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915", %"struct.std::__1::__hash_node_base.915"* %64, i64 1
  %66 = bitcast %"struct.std::__1::__hash_node_base.915"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, %36
  br i1 %68, label %79, label %69

69:                                               ; preds = %63
  br i1 %42, label %72, label %70

70:                                               ; preds = %69
  %71 = and i64 %67, %62
  br label %76

72:                                               ; preds = %69
  %73 = icmp ult i64 %67, %38
  br i1 %73, label %76, label %74

74:                                               ; preds = %72
  %75 = urem i64 %67, %38
  br label %76

76:                                               ; preds = %74, %72, %70
  %77 = phi i64 [ %71, %70 ], [ %75, %74 ], [ %67, %72 ]
  %78 = icmp eq i64 %77, %51
  br i1 %78, label %84, label %88

79:                                               ; preds = %63
  %80 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915", %"struct.std::__1::__hash_node_base.915"* %64, i64 2
  %81 = bitcast %"struct.std::__1::__hash_node_base.915"* %80 to %"class.spvtools::opt::Instruction"**
  %82 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %81, align 8
  %83 = icmp eq %"class.spvtools::opt::Instruction"* %82, %1
  br i1 %83, label %278, label %84

84:                                               ; preds = %79, %76
  %85 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915", %"struct.std::__1::__hash_node_base.915"* %64, i64 0, i32 0
  %86 = load %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %85, align 8
  %87 = icmp eq %"struct.std::__1::__hash_node_base.915"* %86, null
  br i1 %87, label %88, label %63

88:                                               ; preds = %84, %76, %57, %50, %20
  %89 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 0
  %90 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %89, align 8
  %91 = tail call %"class.spvtools::opt::Instruction"* @_ZNK8spvtools3opt11Instruction5CloneEPNS0_9IRContextE(%"class.spvtools::opt::Instruction"* %1, %"class.spvtools::opt::IRContext"* %90) #9
  %92 = ptrtoint %"class.spvtools::opt::Instruction"* %91 to i64
  %93 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %89, align 8
  tail call void @_ZN8spvtools3opt9IRContext10ForgetUsesEPNS0_11InstructionE(%"class.spvtools::opt::IRContext"* %93, %"class.spvtools::opt::Instruction"* %1) #9
  %94 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %89, align 8
  %95 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %94, i64 0, i32 11
  %96 = load i32, i32* %95, align 8
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %102, label %99

99:                                               ; preds = %88
  %100 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %94, i64 0, i32 6, i32 0, i32 0, i32 0
  %101 = load %"class.spvtools::opt::analysis::DefUseManager"*, %"class.spvtools::opt::analysis::DefUseManager"** %100, align 8
  tail call void @_ZN8spvtools3opt8analysis13DefUseManager17AnalyzeInstDefUseEPNS0_11InstructionE(%"class.spvtools::opt::analysis::DefUseManager"* %101, %"class.spvtools::opt::Instruction"* %91) #9
  br label %102

102:                                              ; preds = %99, %88
  %103 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 1
  %104 = load i8, i8* %103, align 8, !range !7
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %144, label %106

106:                                              ; preds = %102
  %107 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %89, align 8
  %108 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %107, i64 0, i32 11
  %109 = load i32, i32* %108, align 8
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %115, label %112

112:                                              ; preds = %106
  %113 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %107, i64 0, i32 6, i32 0, i32 0, i32 0
  %114 = load %"class.spvtools::opt::analysis::DefUseManager"*, %"class.spvtools::opt::analysis::DefUseManager"** %113, align 8
  tail call void @_ZN8spvtools3opt8analysis13DefUseManager17AnalyzeInstDefUseEPNS0_11InstructionE(%"class.spvtools::opt::analysis::DefUseManager"* %114, %"class.spvtools::opt::Instruction"* %91) #9
  br label %115

115:                                              ; preds = %112, %106
  %116 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %107, i64 0, i32 4, i32 0, i32 0, i32 0
  %117 = load %"class.spvtools::opt::Module"*, %"class.spvtools::opt::Module"** %116, align 8
  %118 = getelementptr inbounds %"class.spvtools::opt::Module", %"class.spvtools::opt::Module"* %117, i64 0, i32 14, i32 0, i32 1
  %119 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %91, i64 0, i32 0, i32 1
  %120 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %119, align 8
  %121 = icmp eq %"class.spvtools::opt::Instruction"* %120, null
  br i1 %121, label %135, label %122

122:                                              ; preds = %115
  %123 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %91, i64 0, i32 0, i32 2
  %124 = bitcast %"class.spvtools::opt::Instruction"** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %120, i64 0, i32 0, i32 2
  %127 = bitcast %"class.spvtools::opt::Instruction"** %126 to i64*
  store i64 %125, i64* %127, align 8
  %128 = bitcast %"class.spvtools::opt::Instruction"** %119 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.spvtools::opt::Instruction"** %123 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %131 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %130, align 8
  %132 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %131, i64 0, i32 1
  %133 = bitcast %"class.spvtools::opt::Instruction"** %132 to i64*
  store i64 %129, i64* %133, align 8
  %134 = bitcast %"class.spvtools::opt::Instruction"** %119 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %134, i8 0, i64 16, i1 false) #9
  br label %135

135:                                              ; preds = %115, %122
  store %"class.spvtools::opt::Instruction"* %118, %"class.spvtools::opt::Instruction"** %119, align 8
  %136 = getelementptr inbounds %"class.spvtools::opt::Module", %"class.spvtools::opt::Module"* %117, i64 0, i32 14, i32 0, i32 1, i32 0, i32 2
  %137 = bitcast %"class.spvtools::opt::Instruction"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %91, i64 0, i32 0, i32 2
  %140 = bitcast %"class.spvtools::opt::Instruction"** %139 to i64*
  store i64 %138, i64* %140, align 8
  store %"class.spvtools::opt::Instruction"* %91, %"class.spvtools::opt::Instruction"** %136, align 8
  %141 = bitcast %"class.spvtools::opt::Instruction"** %139 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %142 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %141, align 8
  %143 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %142, i64 0, i32 1
  store %"class.spvtools::opt::Instruction"* %91, %"class.spvtools::opt::Instruction"** %143, align 8
  br label %176

144:                                              ; preds = %102
  %145 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 2
  %146 = bitcast %"class.spvtools::opt::UptrVectorIterator"** %145 to i8**
  %147 = load i8*, i8** %146, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 8
  %149 = bitcast i8* %148 to %"class.std::__1::unique_ptr"**
  %150 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %149, align 8
  %151 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %150, i64 -1, i32 0, i32 0, i32 0
  %152 = load %"class.spvtools::opt::Function"*, %"class.spvtools::opt::Function"** %151, align 8
  %153 = bitcast %"class.std::__1::unique_ptr.0"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %153) #9
  %154 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.spvtools::opt::Instruction"* %91, %"class.spvtools::opt::Instruction"** %154, align 8
  %155 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %152, i64 0, i32 5, i32 0, i32 1
  %156 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %155, align 8
  %157 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %152, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %158 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %157, align 8
  %159 = icmp ult %"class.std::__1::unique_ptr.0"* %156, %158
  br i1 %159, label %160, label %165

160:                                              ; preds = %144
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %154, align 8
  %161 = bitcast %"class.std::__1::unique_ptr.0"* %156 to i64*
  store i64 %92, i64* %161, align 8
  %162 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %156, i64 1
  %163 = ptrtoint %"class.std::__1::unique_ptr.0"* %162 to i64
  %164 = bitcast %"class.std::__1::unique_ptr.0"** %155 to i64*
  store i64 %163, i64* %164, align 8
  br label %167

165:                                              ; preds = %144
  %166 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %152, i64 0, i32 5
  call void @_ZNSt3__16vectorINS_10unique_ptrIN8spvtools3opt11InstructionENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE24__emplace_back_slow_pathIJS7_EEEvDpOT_(%"class.std::__1::vector.4"* %166, %"class.std::__1::unique_ptr.0"* nonnull dereferenceable(8) %3) #9
  br label %167

167:                                              ; preds = %165, %160
  %168 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %154, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %154, align 8
  %169 = icmp eq %"class.spvtools::opt::Instruction"* %168, null
  br i1 %169, label %175, label %170

170:                                              ; preds = %167
  %171 = bitcast %"class.spvtools::opt::Instruction"* %168 to void (%"class.spvtools::opt::Instruction"*)***
  %172 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %171, align 8
  %173 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %172, i64 1
  %174 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %173, align 8
  call void %174(%"class.spvtools::opt::Instruction"* nonnull %168) #9
  br label %175

175:                                              ; preds = %170, %167
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %153) #9
  br label %176

176:                                              ; preds = %175, %135
  store i32 0, i32* %6, align 8
  %177 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %1, i64 0, i32 3
  store i8 0, i8* %177, align 4
  %178 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %1, i64 0, i32 4
  store i8 0, i8* %178, align 1
  %179 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %1, i64 0, i32 6, i32 0, i32 0
  %180 = load %"struct.spvtools::opt::Operand"*, %"struct.spvtools::opt::Operand"** %179, align 8
  %181 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %1, i64 0, i32 6, i32 0, i32 1
  %182 = load %"struct.spvtools::opt::Operand"*, %"struct.spvtools::opt::Operand"** %181, align 8
  %183 = icmp eq %"struct.spvtools::opt::Operand"* %182, %180
  br i1 %183, label %204, label %184

184:                                              ; preds = %176, %202
  %185 = phi %"struct.spvtools::opt::Operand"* [ %186, %202 ], [ %182, %176 ]
  %186 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %185, i64 -1
  %187 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %185, i64 -1, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils11SmallVectorIjLm2EEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %187, align 8
  %188 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %185, i64 -1, i32 1, i32 4, i32 0, i32 0, i32 0
  %189 = load %"class.std::__1::vector.342"*, %"class.std::__1::vector.342"** %188, align 8
  store %"class.std::__1::vector.342"* null, %"class.std::__1::vector.342"** %188, align 8
  %190 = icmp eq %"class.std::__1::vector.342"* %189, null
  br i1 %190, label %202, label %191

191:                                              ; preds = %184
  %192 = getelementptr inbounds %"class.std::__1::vector.342", %"class.std::__1::vector.342"* %189, i64 0, i32 0, i32 0
  %193 = load i32*, i32** %192, align 8
  %194 = icmp eq i32* %193, null
  br i1 %194, label %200, label %195

195:                                              ; preds = %191
  %196 = ptrtoint i32* %193 to i64
  %197 = getelementptr inbounds %"class.std::__1::vector.342", %"class.std::__1::vector.342"* %189, i64 0, i32 0, i32 1
  %198 = bitcast i32** %197 to i64*
  store i64 %196, i64* %198, align 8
  %199 = bitcast i32* %193 to i8*
  call void @_ZdlPv(i8* %199) #10
  br label %200

200:                                              ; preds = %195, %191
  %201 = bitcast %"class.std::__1::vector.342"* %189 to i8*
  call void @_ZdlPv(i8* %201) #10
  br label %202

202:                                              ; preds = %200, %184
  %203 = icmp eq %"struct.spvtools::opt::Operand"* %186, %180
  br i1 %203, label %204, label %184

204:                                              ; preds = %202, %176
  store %"struct.spvtools::opt::Operand"* %180, %"struct.spvtools::opt::Operand"** %181, align 8
  br label %278

205:                                              ; preds = %17, %12
  %206 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 4
  %207 = load %"class.std::__1::unordered_set.910"*, %"class.std::__1::unordered_set.910"** %206, align 8
  %208 = ptrtoint %"class.spvtools::opt::Instruction"* %1 to i64
  %209 = lshr i64 %208, 32
  %210 = shl i64 %208, 3
  %211 = and i64 %210, 4294967288
  %212 = add nuw nsw i64 %211, 8
  %213 = xor i64 %212, %209
  %214 = mul i64 %213, -7070675565921424023
  %215 = lshr i64 %214, 47
  %216 = xor i64 %214, %209
  %217 = xor i64 %216, %215
  %218 = mul i64 %217, -7070675565921424023
  %219 = lshr i64 %218, 47
  %220 = xor i64 %219, %218
  %221 = mul i64 %220, -7070675565921424023
  %222 = getelementptr inbounds %"class.std::__1::unordered_set.910", %"class.std::__1::unordered_set.910"* %207, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %223 = load i64, i64* %222, align 8
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %273, label %225

225:                                              ; preds = %205
  %226 = tail call i64 @llvm.ctpop.i64(i64 %223) #9, !range !8
  %227 = icmp ugt i64 %226, 1
  br i1 %227, label %231, label %228

228:                                              ; preds = %225
  %229 = add i64 %223, -1
  %230 = and i64 %229, %221
  br label %235

231:                                              ; preds = %225
  %232 = icmp ult i64 %221, %223
  br i1 %232, label %235, label %233

233:                                              ; preds = %231
  %234 = urem i64 %221, %223
  br label %235

235:                                              ; preds = %233, %231, %228
  %236 = phi i64 [ %230, %228 ], [ %234, %233 ], [ %221, %231 ]
  %237 = getelementptr inbounds %"class.std::__1::unordered_set.910", %"class.std::__1::unordered_set.910"* %207, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %238 = load %"struct.std::__1::__hash_node_base.915"**, %"struct.std::__1::__hash_node_base.915"*** %237, align 8
  %239 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %238, i64 %236
  %240 = load %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %239, align 8
  %241 = icmp eq %"struct.std::__1::__hash_node_base.915"* %240, null
  br i1 %241, label %273, label %242

242:                                              ; preds = %235
  %243 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915", %"struct.std::__1::__hash_node_base.915"* %240, i64 0, i32 0
  %244 = load %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %243, align 8
  %245 = icmp eq %"struct.std::__1::__hash_node_base.915"* %244, null
  br i1 %245, label %273, label %246

246:                                              ; preds = %242
  %247 = add i64 %223, -1
  br label %248

248:                                              ; preds = %269, %246
  %249 = phi %"struct.std::__1::__hash_node_base.915"* [ %244, %246 ], [ %271, %269 ]
  %250 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915", %"struct.std::__1::__hash_node_base.915"* %249, i64 1
  %251 = bitcast %"struct.std::__1::__hash_node_base.915"* %250 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = icmp eq i64 %252, %221
  br i1 %253, label %264, label %254

254:                                              ; preds = %248
  br i1 %227, label %257, label %255

255:                                              ; preds = %254
  %256 = and i64 %252, %247
  br label %261

257:                                              ; preds = %254
  %258 = icmp ult i64 %252, %223
  br i1 %258, label %261, label %259

259:                                              ; preds = %257
  %260 = urem i64 %252, %223
  br label %261

261:                                              ; preds = %259, %257, %255
  %262 = phi i64 [ %256, %255 ], [ %260, %259 ], [ %252, %257 ]
  %263 = icmp eq i64 %262, %236
  br i1 %263, label %269, label %273

264:                                              ; preds = %248
  %265 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915", %"struct.std::__1::__hash_node_base.915"* %249, i64 2
  %266 = bitcast %"struct.std::__1::__hash_node_base.915"* %265 to %"class.spvtools::opt::Instruction"**
  %267 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %266, align 8
  %268 = icmp eq %"class.spvtools::opt::Instruction"* %267, %1
  br i1 %268, label %278, label %269

269:                                              ; preds = %264, %261
  %270 = getelementptr inbounds %"struct.std::__1::__hash_node_base.915", %"struct.std::__1::__hash_node_base.915"* %249, i64 0, i32 0
  %271 = load %"struct.std::__1::__hash_node_base.915"*, %"struct.std::__1::__hash_node_base.915"** %270, align 8
  %272 = icmp eq %"struct.std::__1::__hash_node_base.915"* %271, null
  br i1 %272, label %273, label %248

273:                                              ; preds = %269, %261, %242, %235, %205
  %274 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 0
  %275 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %274, align 8
  tail call void @_ZN8spvtools3opt9IRContext22CollectNonSemanticTreeEPNS0_11InstructionEPNSt3__113unordered_setIS3_NS4_4hashIS3_EENS4_8equal_toIS3_EENS4_9allocatorIS3_EEEE(%"class.spvtools::opt::IRContext"* %275, %"class.spvtools::opt::Instruction"* %1, %"class.std::__1::unordered_set.910"* %207) #9
  %276 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %274, align 8
  %277 = tail call %"class.spvtools::opt::Instruction"* @_ZN8spvtools3opt9IRContext8KillInstEPNS0_11InstructionE(%"class.spvtools::opt::IRContext"* %276, %"class.spvtools::opt::Instruction"* %1) #9
  br label %278

278:                                              ; preds = %79, %264, %204, %273
  ret void
}

declare %"class.spvtools::opt::Instruction"* @_ZNK8spvtools3opt11Instruction5CloneEPNS0_9IRContextE(%"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::IRContext"*) local_unnamed_addr #2

declare void @_ZN8spvtools3opt9IRContext10ForgetUsesEPNS0_11InstructionE(%"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::Instruction"*) local_unnamed_addr #2

declare void @_ZN8spvtools3opt9IRContext22CollectNonSemanticTreeEPNS0_11InstructionEPNSt3__113unordered_setIS3_NS4_4hashIS3_EENS4_8equal_toIS3_EENS4_9allocatorIS3_EEEE(%"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::Instruction"*, %"class.std::__1::unordered_set.910"*) local_unnamed_addr #2

declare void @_ZN8spvtools3opt8analysis13DefUseManager17AnalyzeInstDefUseEPNS0_11InstructionE(%"class.spvtools::opt::analysis::DefUseManager"*, %"class.spvtools::opt::Instruction"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN8spvtools3opt11InstructionENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE24__emplace_back_slow_pathIJS7_EEEvDpOT_(%"class.std::__1::vector.4"*, %"class.std::__1::unique_ptr.0"* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.0"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.0"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.0"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.0"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.0"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.0"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.0"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.0"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.0"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.0"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.spvtools::opt::Instruction"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.0"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.0"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.0"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.0"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !9

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.0"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.0"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.0"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.0"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.0"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.0"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.0"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.0"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.0"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.0"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.0"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.0"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.0"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.0"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.0"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.0"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.0"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.0"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.0"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.0"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.0"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.0"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.0"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.0"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.0"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.0"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.0"*
  %138 = icmp eq %"class.std::__1::unique_ptr.0"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr.0"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %142, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %142, align 8
  %144 = icmp eq %"class.spvtools::opt::Instruction"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.spvtools::opt::Instruction"* %143 to void (%"class.spvtools::opt::Instruction"*)***
  %147 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %147, i64 1
  %149 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %148, align 8
  tail call void %149(%"class.spvtools::opt::Instruction"* nonnull %143) #9
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr.0"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #10
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools5utils11SmallVectorIjLm2EED2Ev(%"class.spvtools::utils::SmallVector"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::utils::SmallVector", %"class.spvtools::utils::SmallVector"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils11SmallVectorIjLm2EEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spvtools::utils::SmallVector", %"class.spvtools::utils::SmallVector"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector.342"*, %"class.std::__1::vector.342"** %3, align 8
  store %"class.std::__1::vector.342"* null, %"class.std::__1::vector.342"** %3, align 8
  %5 = icmp eq %"class.std::__1::vector.342"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.std::__1::vector.342", %"class.std::__1::vector.342"* %4, i64 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = icmp eq i32* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = ptrtoint i32* %8 to i64
  %12 = getelementptr inbounds %"class.std::__1::vector.342", %"class.std::__1::vector.342"* %4, i64 0, i32 0, i32 1
  %13 = bitcast i32** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast i32* %8 to i8*
  tail call void @_ZdlPv(i8* %14) #10
  br label %15

15:                                               ; preds = %10, %6
  %16 = bitcast %"class.std::__1::vector.342"* %4 to i8*
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %1, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools5utils11SmallVectorIjLm2EED0Ev(%"class.spvtools::utils::SmallVector"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::utils::SmallVector", %"class.spvtools::utils::SmallVector"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils11SmallVectorIjLm2EEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spvtools::utils::SmallVector", %"class.spvtools::utils::SmallVector"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector.342"*, %"class.std::__1::vector.342"** %3, align 8
  store %"class.std::__1::vector.342"* null, %"class.std::__1::vector.342"** %3, align 8
  %5 = icmp eq %"class.std::__1::vector.342"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.std::__1::vector.342", %"class.std::__1::vector.342"* %4, i64 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = icmp eq i32* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = ptrtoint i32* %8 to i64
  %12 = getelementptr inbounds %"class.std::__1::vector.342", %"class.std::__1::vector.342"* %4, i64 0, i32 0, i32 1
  %13 = bitcast i32** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast i32* %8 to i8*
  tail call void @_ZdlPv(i8* %14) #10
  br label %15

15:                                               ; preds = %10, %6
  %16 = bitcast %"class.std::__1::vector.342"* %4 to i8*
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %1, %15
  %18 = bitcast %"class.spvtools::utils::SmallVector"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal noalias nonnull i8* @"_ZNSt3__110__function8__policy13__large_cloneINS0_20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEEPvPKv"(i8* nocapture readonly) #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 40) #10, !noalias !11
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* align 8 %0, i64 40, i1 false) #9
  ret i8* %2
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZNSt3__110__function8__policy15__large_destroyINS0_20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEEvPv"(i8*) #0 align 2 {
  tail call void @_ZdlPv(i8* %0) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools3opt8FunctionD2Ev(%"class.spvtools::opt::Function"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 5
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %3, align 8
  %5 = icmp eq %"class.std::__1::unique_ptr.0"* %4, null
  br i1 %5, label %29, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.std::__1::unique_ptr.0"* %4 to i8*
  %8 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 5, i32 0, i32 1
  %9 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %8, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr.0"* %9, %4
  br i1 %10, label %27, label %11

11:                                               ; preds = %6, %22
  %12 = phi %"class.std::__1::unique_ptr.0"* [ %13, %22 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %12, i64 -1
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %14, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %14, align 8
  %16 = icmp eq %"class.spvtools::opt::Instruction"* %15, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.spvtools::opt::Instruction"* %15 to void (%"class.spvtools::opt::Instruction"*)***
  %19 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %19, i64 1
  %21 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %20, align 8
  tail call void %21(%"class.spvtools::opt::Instruction"* nonnull %15) #9
  br label %22

22:                                               ; preds = %17, %11
  %23 = icmp eq %"class.std::__1::unique_ptr.0"* %13, %4
  br i1 %23, label %24, label %11

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::vector.4"* %2 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %24, %6
  %28 = phi i8* [ %26, %24 ], [ %7, %6 ]
  store %"class.std::__1::unique_ptr.0"* %4, %"class.std::__1::unique_ptr.0"** %8, align 8
  tail call void @_ZdlPv(i8* %28) #10
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %31 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %30, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %30, align 8
  %32 = icmp eq %"class.spvtools::opt::Instruction"* %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = bitcast %"class.spvtools::opt::Instruction"* %31 to void (%"class.spvtools::opt::Instruction"*)***
  %35 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %35, i64 1
  %37 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %36, align 8
  tail call void %37(%"class.spvtools::opt::Instruction"* nonnull %31) #9
  br label %38

38:                                               ; preds = %29, %33
  %39 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 3
  %40 = getelementptr inbounds %"class.std::__1::vector.813", %"class.std::__1::vector.813"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.std::__1::unique_ptr.815"*, %"class.std::__1::unique_ptr.815"** %40, align 8
  %42 = icmp eq %"class.std::__1::unique_ptr.815"* %41, null
  br i1 %42, label %63, label %43

43:                                               ; preds = %38
  %44 = bitcast %"class.std::__1::unique_ptr.815"* %41 to i8*
  %45 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 3, i32 0, i32 1
  %46 = load %"class.std::__1::unique_ptr.815"*, %"class.std::__1::unique_ptr.815"** %45, align 8
  %47 = icmp eq %"class.std::__1::unique_ptr.815"* %46, %41
  br i1 %47, label %61, label %48

48:                                               ; preds = %43, %56
  %49 = phi %"class.std::__1::unique_ptr.815"* [ %50, %56 ], [ %46, %43 ]
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr.815", %"class.std::__1::unique_ptr.815"* %49, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::unique_ptr.815", %"class.std::__1::unique_ptr.815"* %50, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.spvtools::opt::BasicBlock"*, %"class.spvtools::opt::BasicBlock"** %51, align 8
  store %"class.spvtools::opt::BasicBlock"* null, %"class.spvtools::opt::BasicBlock"** %51, align 8
  %53 = icmp eq %"class.spvtools::opt::BasicBlock"* %52, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %48
  %55 = bitcast %"class.std::__1::unique_ptr.815"* %50 to %"struct.std::__1::default_delete.819"*
  tail call void @_ZNKSt3__114default_deleteIN8spvtools3opt10BasicBlockEEclEPS3_(%"struct.std::__1::default_delete.819"* %55, %"class.spvtools::opt::BasicBlock"* nonnull %52) #9
  br label %56

56:                                               ; preds = %54, %48
  %57 = icmp eq %"class.std::__1::unique_ptr.815"* %50, %41
  br i1 %57, label %58, label %48

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::vector.813"* %39 to i8**
  %60 = load i8*, i8** %59, align 8
  br label %61

61:                                               ; preds = %58, %43
  %62 = phi i8* [ %60, %58 ], [ %44, %43 ]
  store %"class.std::__1::unique_ptr.815"* %41, %"class.std::__1::unique_ptr.815"** %45, align 8
  tail call void @_ZdlPv(i8* %62) #10
  br label %63

63:                                               ; preds = %38, %61
  %64 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools3opt15InstructionListE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %64, align 8
  %65 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 1
  %66 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %65, align 8
  %67 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %66, i64 0, i32 0, i32 3
  %68 = load i8, i8* %67, align 8, !range !7
  %69 = icmp ne i8 %68, 0
  %70 = icmp eq %"class.spvtools::opt::Instruction"* %66, null
  %71 = or i1 %70, %69
  br i1 %71, label %99, label %72

72:                                               ; preds = %63, %72
  %73 = phi %"class.spvtools::opt::Instruction"* [ %93, %72 ], [ %66, %63 ]
  %74 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %73, i64 0, i32 0, i32 2
  %75 = bitcast %"class.spvtools::opt::Instruction"** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %73, i64 0, i32 0, i32 1
  %78 = bitcast %"class.spvtools::opt::Instruction"** %77 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %79 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %78, align 8
  %80 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %79, i64 0, i32 2
  %81 = bitcast %"class.spvtools::opt::Instruction"** %80 to i64*
  store i64 %76, i64* %81, align 8
  %82 = bitcast %"class.spvtools::opt::Instruction"** %77 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.spvtools::opt::Instruction"** %74 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %85 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %84, align 8
  %86 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %85, i64 0, i32 1
  %87 = bitcast %"class.spvtools::opt::Instruction"** %86 to i64*
  store i64 %83, i64* %87, align 8
  %88 = bitcast %"class.spvtools::opt::Instruction"** %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 16, i1 false) #9
  %89 = bitcast %"class.spvtools::opt::Instruction"* %73 to void (%"class.spvtools::opt::Instruction"*)***
  %90 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %89, align 8
  %91 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %90, i64 1
  %92 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %91, align 8
  tail call void %92(%"class.spvtools::opt::Instruction"* nonnull %73) #9
  %93 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %65, align 8
  %94 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %93, i64 0, i32 0, i32 3
  %95 = load i8, i8* %94, align 8, !range !7
  %96 = icmp ne i8 %95, 0
  %97 = icmp eq %"class.spvtools::opt::Instruction"* %93, null
  %98 = or i1 %97, %96
  br i1 %98, label %99, label %72

99:                                               ; preds = %72, %63
  %100 = phi %"class.spvtools::opt::Instruction"* [ %66, %63 ], [ %93, %72 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils13IntrusiveListINS_3opt11InstructionEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %64, align 8
  %101 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %100, i64 0, i32 0, i32 3
  %102 = load i8, i8* %101, align 8, !range !7
  %103 = icmp ne i8 %102, 0
  %104 = icmp eq %"class.spvtools::opt::Instruction"* %100, null
  %105 = or i1 %104, %103
  br i1 %105, label %129, label %106

106:                                              ; preds = %99, %106
  %107 = phi %"class.spvtools::opt::Instruction"* [ %123, %106 ], [ %100, %99 ]
  %108 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %107, i64 0, i32 0, i32 2
  %109 = bitcast %"class.spvtools::opt::Instruction"** %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %107, i64 0, i32 0, i32 1
  %112 = bitcast %"class.spvtools::opt::Instruction"** %111 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %113 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %112, align 8
  %114 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %113, i64 0, i32 2
  %115 = bitcast %"class.spvtools::opt::Instruction"** %114 to i64*
  store i64 %110, i64* %115, align 8
  %116 = bitcast %"class.spvtools::opt::Instruction"** %111 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %"class.spvtools::opt::Instruction"** %108 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %119 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %118, align 8
  %120 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %119, i64 0, i32 1
  %121 = bitcast %"class.spvtools::opt::Instruction"** %120 to i64*
  store i64 %117, i64* %121, align 8
  %122 = bitcast %"class.spvtools::opt::Instruction"** %111 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 16, i1 false) #9
  %123 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %65, align 8
  %124 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %123, i64 0, i32 0, i32 3
  %125 = load i8, i8* %124, align 8, !range !7
  %126 = icmp ne i8 %125, 0
  %127 = icmp eq %"class.spvtools::opt::Instruction"* %123, null
  %128 = or i1 %127, %126
  br i1 %128, label %129, label %106

129:                                              ; preds = %106, %99
  %130 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 2, i32 0, i32 1
  tail call void @_ZN8spvtools3opt11InstructionD2Ev(%"class.spvtools::opt::Instruction"* %130) #9
  %131 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 1
  %132 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %131, i64 0, i32 0, i32 0
  %133 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %132, align 8
  %134 = icmp eq %"class.std::__1::unique_ptr.0"* %133, null
  br i1 %134, label %158, label %135

135:                                              ; preds = %129
  %136 = bitcast %"class.std::__1::unique_ptr.0"* %133 to i8*
  %137 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 1, i32 0, i32 1
  %138 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %137, align 8
  %139 = icmp eq %"class.std::__1::unique_ptr.0"* %138, %133
  br i1 %139, label %156, label %140

140:                                              ; preds = %135, %151
  %141 = phi %"class.std::__1::unique_ptr.0"* [ %142, %151 ], [ %138, %135 ]
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %141, i64 -1
  %143 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %142, i64 0, i32 0, i32 0, i32 0
  %144 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %143, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %143, align 8
  %145 = icmp eq %"class.spvtools::opt::Instruction"* %144, null
  br i1 %145, label %151, label %146

146:                                              ; preds = %140
  %147 = bitcast %"class.spvtools::opt::Instruction"* %144 to void (%"class.spvtools::opt::Instruction"*)***
  %148 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %147, align 8
  %149 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %148, i64 1
  %150 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %149, align 8
  tail call void %150(%"class.spvtools::opt::Instruction"* nonnull %144) #9
  br label %151

151:                                              ; preds = %146, %140
  %152 = icmp eq %"class.std::__1::unique_ptr.0"* %142, %133
  br i1 %152, label %153, label %140

153:                                              ; preds = %151
  %154 = bitcast %"class.std::__1::vector.4"* %131 to i8**
  %155 = load i8*, i8** %154, align 8
  br label %156

156:                                              ; preds = %153, %135
  %157 = phi i8* [ %155, %153 ], [ %136, %135 ]
  store %"class.std::__1::unique_ptr.0"* %133, %"class.std::__1::unique_ptr.0"** %137, align 8
  tail call void @_ZdlPv(i8* %157) #10
  br label %158

158:                                              ; preds = %129, %156
  %159 = getelementptr inbounds %"class.spvtools::opt::Function", %"class.spvtools::opt::Function"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %160 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %159, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %159, align 8
  %161 = icmp eq %"class.spvtools::opt::Instruction"* %160, null
  br i1 %161, label %167, label %162

162:                                              ; preds = %158
  %163 = bitcast %"class.spvtools::opt::Instruction"* %160 to void (%"class.spvtools::opt::Instruction"*)***
  %164 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %163, align 8
  %165 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %164, i64 1
  %166 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %165, align 8
  tail call void %166(%"class.spvtools::opt::Instruction"* nonnull %160) #9
  br label %167

167:                                              ; preds = %158, %162
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools3opt15InstructionListD2Ev(%"class.spvtools::opt::InstructionList"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools3opt15InstructionListE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %4 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %5 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %4, i64 0, i32 0, i32 3
  %6 = load i8, i8* %5, align 8, !range !7
  %7 = icmp ne i8 %6, 0
  %8 = icmp eq %"class.spvtools::opt::Instruction"* %4, null
  %9 = or i1 %8, %7
  br i1 %9, label %37, label %10

10:                                               ; preds = %1, %10
  %11 = phi %"class.spvtools::opt::Instruction"* [ %31, %10 ], [ %4, %1 ]
  %12 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %11, i64 0, i32 0, i32 2
  %13 = bitcast %"class.spvtools::opt::Instruction"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %11, i64 0, i32 0, i32 1
  %16 = bitcast %"class.spvtools::opt::Instruction"** %15 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %17 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %16, align 8
  %18 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %17, i64 0, i32 2
  %19 = bitcast %"class.spvtools::opt::Instruction"** %18 to i64*
  store i64 %14, i64* %19, align 8
  %20 = bitcast %"class.spvtools::opt::Instruction"** %15 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.spvtools::opt::Instruction"** %12 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %23 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %22, align 8
  %24 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %23, i64 0, i32 1
  %25 = bitcast %"class.spvtools::opt::Instruction"** %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = bitcast %"class.spvtools::opt::Instruction"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 16, i1 false) #9
  %27 = bitcast %"class.spvtools::opt::Instruction"* %11 to void (%"class.spvtools::opt::Instruction"*)***
  %28 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %28, i64 1
  %30 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %29, align 8
  tail call void %30(%"class.spvtools::opt::Instruction"* nonnull %11) #9
  %31 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %32 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %31, i64 0, i32 0, i32 3
  %33 = load i8, i8* %32, align 8, !range !7
  %34 = icmp ne i8 %33, 0
  %35 = icmp eq %"class.spvtools::opt::Instruction"* %31, null
  %36 = or i1 %35, %34
  br i1 %36, label %37, label %10

37:                                               ; preds = %10, %1
  %38 = phi %"class.spvtools::opt::Instruction"* [ %4, %1 ], [ %31, %10 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils13IntrusiveListINS_3opt11InstructionEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %39 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %38, i64 0, i32 0, i32 3
  %40 = load i8, i8* %39, align 8, !range !7
  %41 = icmp ne i8 %40, 0
  %42 = icmp eq %"class.spvtools::opt::Instruction"* %38, null
  %43 = or i1 %42, %41
  br i1 %43, label %67, label %44

44:                                               ; preds = %37, %44
  %45 = phi %"class.spvtools::opt::Instruction"* [ %61, %44 ], [ %38, %37 ]
  %46 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %45, i64 0, i32 0, i32 2
  %47 = bitcast %"class.spvtools::opt::Instruction"** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %45, i64 0, i32 0, i32 1
  %50 = bitcast %"class.spvtools::opt::Instruction"** %49 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %51 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %50, align 8
  %52 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %51, i64 0, i32 2
  %53 = bitcast %"class.spvtools::opt::Instruction"** %52 to i64*
  store i64 %48, i64* %53, align 8
  %54 = bitcast %"class.spvtools::opt::Instruction"** %49 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"class.spvtools::opt::Instruction"** %46 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %57 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %56, align 8
  %58 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %57, i64 0, i32 1
  %59 = bitcast %"class.spvtools::opt::Instruction"** %58 to i64*
  store i64 %55, i64* %59, align 8
  %60 = bitcast %"class.spvtools::opt::Instruction"** %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 16, i1 false) #9
  %61 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %62 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %61, i64 0, i32 0, i32 3
  %63 = load i8, i8* %62, align 8, !range !7
  %64 = icmp ne i8 %63, 0
  %65 = icmp eq %"class.spvtools::opt::Instruction"* %61, null
  %66 = or i1 %65, %64
  br i1 %66, label %67, label %44

67:                                               ; preds = %44, %37
  %68 = getelementptr inbounds %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN8spvtools3opt11InstructionD2Ev(%"class.spvtools::opt::Instruction"* %68) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNKSt3__114default_deleteIN8spvtools3opt10BasicBlockEEclEPS3_(%"struct.std::__1::default_delete.819"*, %"class.spvtools::opt::BasicBlock"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.spvtools::opt::BasicBlock"* %1, null
  br i1 %3, label %82, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.spvtools::opt::BasicBlock", %"class.spvtools::opt::BasicBlock"* %1, i64 0, i32 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools3opt15InstructionListE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.spvtools::opt::BasicBlock", %"class.spvtools::opt::BasicBlock"* %1, i64 0, i32 2, i32 0, i32 1, i32 0, i32 1
  %7 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %6, align 8
  %8 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %7, i64 0, i32 0, i32 3
  %9 = load i8, i8* %8, align 8, !range !7
  %10 = icmp ne i8 %9, 0
  %11 = icmp eq %"class.spvtools::opt::Instruction"* %7, null
  %12 = or i1 %11, %10
  br i1 %12, label %40, label %13

13:                                               ; preds = %4, %13
  %14 = phi %"class.spvtools::opt::Instruction"* [ %34, %13 ], [ %7, %4 ]
  %15 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %14, i64 0, i32 0, i32 2
  %16 = bitcast %"class.spvtools::opt::Instruction"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %14, i64 0, i32 0, i32 1
  %19 = bitcast %"class.spvtools::opt::Instruction"** %18 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %20 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %19, align 8
  %21 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %20, i64 0, i32 2
  %22 = bitcast %"class.spvtools::opt::Instruction"** %21 to i64*
  store i64 %17, i64* %22, align 8
  %23 = bitcast %"class.spvtools::opt::Instruction"** %18 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.spvtools::opt::Instruction"** %15 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %26 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %25, align 8
  %27 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %26, i64 0, i32 1
  %28 = bitcast %"class.spvtools::opt::Instruction"** %27 to i64*
  store i64 %24, i64* %28, align 8
  %29 = bitcast %"class.spvtools::opt::Instruction"** %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #9
  %30 = bitcast %"class.spvtools::opt::Instruction"* %14 to void (%"class.spvtools::opt::Instruction"*)***
  %31 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %31, i64 1
  %33 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %32, align 8
  tail call void %33(%"class.spvtools::opt::Instruction"* nonnull %14) #9
  %34 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %6, align 8
  %35 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %34, i64 0, i32 0, i32 3
  %36 = load i8, i8* %35, align 8, !range !7
  %37 = icmp ne i8 %36, 0
  %38 = icmp eq %"class.spvtools::opt::Instruction"* %34, null
  %39 = or i1 %38, %37
  br i1 %39, label %40, label %13

40:                                               ; preds = %13, %4
  %41 = phi %"class.spvtools::opt::Instruction"* [ %7, %4 ], [ %34, %13 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils13IntrusiveListINS_3opt11InstructionEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %42 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %41, i64 0, i32 0, i32 3
  %43 = load i8, i8* %42, align 8, !range !7
  %44 = icmp ne i8 %43, 0
  %45 = icmp eq %"class.spvtools::opt::Instruction"* %41, null
  %46 = or i1 %45, %44
  br i1 %46, label %70, label %47

47:                                               ; preds = %40, %47
  %48 = phi %"class.spvtools::opt::Instruction"* [ %64, %47 ], [ %41, %40 ]
  %49 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 0, i32 2
  %50 = bitcast %"class.spvtools::opt::Instruction"** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 0, i32 1
  %53 = bitcast %"class.spvtools::opt::Instruction"** %52 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %54 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %53, align 8
  %55 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %54, i64 0, i32 2
  %56 = bitcast %"class.spvtools::opt::Instruction"** %55 to i64*
  store i64 %51, i64* %56, align 8
  %57 = bitcast %"class.spvtools::opt::Instruction"** %52 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.spvtools::opt::Instruction"** %49 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %60 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %59, align 8
  %61 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %60, i64 0, i32 1
  %62 = bitcast %"class.spvtools::opt::Instruction"** %61 to i64*
  store i64 %58, i64* %62, align 8
  %63 = bitcast %"class.spvtools::opt::Instruction"** %52 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 16, i1 false) #9
  %64 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %6, align 8
  %65 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %64, i64 0, i32 0, i32 3
  %66 = load i8, i8* %65, align 8, !range !7
  %67 = icmp ne i8 %66, 0
  %68 = icmp eq %"class.spvtools::opt::Instruction"* %64, null
  %69 = or i1 %68, %67
  br i1 %69, label %70, label %47

70:                                               ; preds = %47, %40
  %71 = getelementptr inbounds %"class.spvtools::opt::BasicBlock", %"class.spvtools::opt::BasicBlock"* %1, i64 0, i32 2, i32 0, i32 1
  tail call void @_ZN8spvtools3opt11InstructionD2Ev(%"class.spvtools::opt::Instruction"* %71) #9
  %72 = getelementptr inbounds %"class.spvtools::opt::BasicBlock", %"class.spvtools::opt::BasicBlock"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %73 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %72, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %72, align 8
  %74 = icmp eq %"class.spvtools::opt::Instruction"* %73, null
  br i1 %74, label %80, label %75

75:                                               ; preds = %70
  %76 = bitcast %"class.spvtools::opt::Instruction"* %73 to void (%"class.spvtools::opt::Instruction"*)***
  %77 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %76, align 8
  %78 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %77, i64 1
  %79 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %78, align 8
  tail call void %79(%"class.spvtools::opt::Instruction"* nonnull %73) #9
  br label %80

80:                                               ; preds = %70, %75
  %81 = bitcast %"class.spvtools::opt::BasicBlock"* %1 to i8*
  tail call void @_ZdlPv(i8* %81) #10
  br label %82

82:                                               ; preds = %80, %2
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools3opt15InstructionListD0Ev(%"class.spvtools::opt::InstructionList"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools3opt15InstructionListE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %4 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %5 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %4, i64 0, i32 0, i32 3
  %6 = load i8, i8* %5, align 8, !range !7
  %7 = icmp ne i8 %6, 0
  %8 = icmp eq %"class.spvtools::opt::Instruction"* %4, null
  %9 = or i1 %8, %7
  br i1 %9, label %37, label %10

10:                                               ; preds = %1, %10
  %11 = phi %"class.spvtools::opt::Instruction"* [ %31, %10 ], [ %4, %1 ]
  %12 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %11, i64 0, i32 0, i32 2
  %13 = bitcast %"class.spvtools::opt::Instruction"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %11, i64 0, i32 0, i32 1
  %16 = bitcast %"class.spvtools::opt::Instruction"** %15 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %17 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %16, align 8
  %18 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %17, i64 0, i32 2
  %19 = bitcast %"class.spvtools::opt::Instruction"** %18 to i64*
  store i64 %14, i64* %19, align 8
  %20 = bitcast %"class.spvtools::opt::Instruction"** %15 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.spvtools::opt::Instruction"** %12 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %23 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %22, align 8
  %24 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %23, i64 0, i32 1
  %25 = bitcast %"class.spvtools::opt::Instruction"** %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = bitcast %"class.spvtools::opt::Instruction"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 16, i1 false) #9
  %27 = bitcast %"class.spvtools::opt::Instruction"* %11 to void (%"class.spvtools::opt::Instruction"*)***
  %28 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %28, i64 1
  %30 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %29, align 8
  tail call void %30(%"class.spvtools::opt::Instruction"* nonnull %11) #9
  %31 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %32 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %31, i64 0, i32 0, i32 3
  %33 = load i8, i8* %32, align 8, !range !7
  %34 = icmp ne i8 %33, 0
  %35 = icmp eq %"class.spvtools::opt::Instruction"* %31, null
  %36 = or i1 %35, %34
  br i1 %36, label %37, label %10

37:                                               ; preds = %10, %1
  %38 = phi %"class.spvtools::opt::Instruction"* [ %4, %1 ], [ %31, %10 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils13IntrusiveListINS_3opt11InstructionEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %39 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %38, i64 0, i32 0, i32 3
  %40 = load i8, i8* %39, align 8, !range !7
  %41 = icmp ne i8 %40, 0
  %42 = icmp eq %"class.spvtools::opt::Instruction"* %38, null
  %43 = or i1 %42, %41
  br i1 %43, label %67, label %44

44:                                               ; preds = %37, %44
  %45 = phi %"class.spvtools::opt::Instruction"* [ %61, %44 ], [ %38, %37 ]
  %46 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %45, i64 0, i32 0, i32 2
  %47 = bitcast %"class.spvtools::opt::Instruction"** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %45, i64 0, i32 0, i32 1
  %50 = bitcast %"class.spvtools::opt::Instruction"** %49 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %51 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %50, align 8
  %52 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %51, i64 0, i32 2
  %53 = bitcast %"class.spvtools::opt::Instruction"** %52 to i64*
  store i64 %48, i64* %53, align 8
  %54 = bitcast %"class.spvtools::opt::Instruction"** %49 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"class.spvtools::opt::Instruction"** %46 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %57 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %56, align 8
  %58 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %57, i64 0, i32 1
  %59 = bitcast %"class.spvtools::opt::Instruction"** %58 to i64*
  store i64 %55, i64* %59, align 8
  %60 = bitcast %"class.spvtools::opt::Instruction"** %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 16, i1 false) #9
  %61 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %62 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %61, i64 0, i32 0, i32 3
  %63 = load i8, i8* %62, align 8, !range !7
  %64 = icmp ne i8 %63, 0
  %65 = icmp eq %"class.spvtools::opt::Instruction"* %61, null
  %66 = or i1 %65, %64
  br i1 %66, label %67, label %44

67:                                               ; preds = %44, %37
  %68 = getelementptr inbounds %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN8spvtools3opt11InstructionD2Ev(%"class.spvtools::opt::Instruction"* %68) #9
  %69 = bitcast %"class.spvtools::opt::InstructionList"* %0 to i8*
  tail call void @_ZdlPv(i8* %69) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools3opt11InstructionD2Ev(%"class.spvtools::opt::Instruction"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools3opt11InstructionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::vector.807", %"class.std::__1::vector.807"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %4, align 8
  %6 = icmp eq %"class.spvtools::opt::Instruction"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.spvtools::opt::Instruction"* %5 to i8*
  %9 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %0, i64 0, i32 7, i32 0, i32 1
  %10 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %9, align 8
  %11 = icmp eq %"class.spvtools::opt::Instruction"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"class.spvtools::opt::Instruction"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %13, i64 -1
  %15 = bitcast %"class.spvtools::opt::Instruction"* %14 to void (%"class.spvtools::opt::Instruction"*)***
  %16 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %15, align 8
  %17 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %16, align 8
  tail call void %17(%"class.spvtools::opt::Instruction"* %14) #9
  %18 = icmp eq %"class.spvtools::opt::Instruction"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.807"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"class.spvtools::opt::Instruction"* %5, %"class.spvtools::opt::Instruction"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %1, %22
  %25 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %0, i64 0, i32 6
  %26 = getelementptr inbounds %"class.std::__1::vector.795", %"class.std::__1::vector.795"* %25, i64 0, i32 0, i32 0
  %27 = load %"struct.spvtools::opt::Operand"*, %"struct.spvtools::opt::Operand"** %26, align 8
  %28 = icmp eq %"struct.spvtools::opt::Operand"* %27, null
  br i1 %28, label %59, label %29

29:                                               ; preds = %24
  %30 = bitcast %"struct.spvtools::opt::Operand"* %27 to i8*
  %31 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %0, i64 0, i32 6, i32 0, i32 1
  %32 = load %"struct.spvtools::opt::Operand"*, %"struct.spvtools::opt::Operand"** %31, align 8
  %33 = icmp eq %"struct.spvtools::opt::Operand"* %32, %27
  br i1 %33, label %57, label %34

34:                                               ; preds = %29, %52
  %35 = phi %"struct.spvtools::opt::Operand"* [ %36, %52 ], [ %32, %29 ]
  %36 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %35, i64 -1
  %37 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %35, i64 -1, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils11SmallVectorIjLm2EEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %37, align 8
  %38 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %35, i64 -1, i32 1, i32 4, i32 0, i32 0, i32 0
  %39 = load %"class.std::__1::vector.342"*, %"class.std::__1::vector.342"** %38, align 8
  store %"class.std::__1::vector.342"* null, %"class.std::__1::vector.342"** %38, align 8
  %40 = icmp eq %"class.std::__1::vector.342"* %39, null
  br i1 %40, label %52, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds %"class.std::__1::vector.342", %"class.std::__1::vector.342"* %39, i64 0, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8
  %44 = icmp eq i32* %43, null
  br i1 %44, label %50, label %45

45:                                               ; preds = %41
  %46 = ptrtoint i32* %43 to i64
  %47 = getelementptr inbounds %"class.std::__1::vector.342", %"class.std::__1::vector.342"* %39, i64 0, i32 0, i32 1
  %48 = bitcast i32** %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = bitcast i32* %43 to i8*
  tail call void @_ZdlPv(i8* %49) #10
  br label %50

50:                                               ; preds = %45, %41
  %51 = bitcast %"class.std::__1::vector.342"* %39 to i8*
  tail call void @_ZdlPv(i8* %51) #10
  br label %52

52:                                               ; preds = %50, %34
  %53 = icmp eq %"struct.spvtools::opt::Operand"* %36, %27
  br i1 %53, label %54, label %34

54:                                               ; preds = %52
  %55 = bitcast %"class.std::__1::vector.795"* %25 to i8**
  %56 = load i8*, i8** %55, align 8
  br label %57

57:                                               ; preds = %54, %29
  %58 = phi i8* [ %56, %54 ], [ %30, %29 ]
  store %"struct.spvtools::opt::Operand"* %27, %"struct.spvtools::opt::Operand"** %31, align 8
  tail call void @_ZdlPv(i8* %58) #10
  br label %59

59:                                               ; preds = %24, %57
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools5utils13IntrusiveListINS_3opt11InstructionEED2Ev(%"class.spvtools::utils::IntrusiveList"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::utils::IntrusiveList", %"class.spvtools::utils::IntrusiveList"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils13IntrusiveListINS_3opt11InstructionEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spvtools::utils::IntrusiveList", %"class.spvtools::utils::IntrusiveList"* %0, i64 0, i32 1, i32 0, i32 1
  %4 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %5 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %4, i64 0, i32 0, i32 3
  %6 = load i8, i8* %5, align 8, !range !7
  %7 = icmp ne i8 %6, 0
  %8 = icmp eq %"class.spvtools::opt::Instruction"* %4, null
  %9 = or i1 %8, %7
  br i1 %9, label %33, label %10

10:                                               ; preds = %1, %10
  %11 = phi %"class.spvtools::opt::Instruction"* [ %27, %10 ], [ %4, %1 ]
  %12 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %11, i64 0, i32 0, i32 2
  %13 = bitcast %"class.spvtools::opt::Instruction"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %11, i64 0, i32 0, i32 1
  %16 = bitcast %"class.spvtools::opt::Instruction"** %15 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %17 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %16, align 8
  %18 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %17, i64 0, i32 2
  %19 = bitcast %"class.spvtools::opt::Instruction"** %18 to i64*
  store i64 %14, i64* %19, align 8
  %20 = bitcast %"class.spvtools::opt::Instruction"** %15 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.spvtools::opt::Instruction"** %12 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %23 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %22, align 8
  %24 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %23, i64 0, i32 1
  %25 = bitcast %"class.spvtools::opt::Instruction"** %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = bitcast %"class.spvtools::opt::Instruction"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 16, i1 false) #9
  %27 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %28 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %27, i64 0, i32 0, i32 3
  %29 = load i8, i8* %28, align 8, !range !7
  %30 = icmp ne i8 %29, 0
  %31 = icmp eq %"class.spvtools::opt::Instruction"* %27, null
  %32 = or i1 %31, %30
  br i1 %32, label %33, label %10

33:                                               ; preds = %10, %1
  %34 = getelementptr inbounds %"class.spvtools::utils::IntrusiveList", %"class.spvtools::utils::IntrusiveList"* %0, i64 0, i32 1
  tail call void @_ZN8spvtools3opt11InstructionD2Ev(%"class.spvtools::opt::Instruction"* %34) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools5utils13IntrusiveListINS_3opt11InstructionEED0Ev(%"class.spvtools::utils::IntrusiveList"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::utils::IntrusiveList", %"class.spvtools::utils::IntrusiveList"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils13IntrusiveListINS_3opt11InstructionEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spvtools::utils::IntrusiveList", %"class.spvtools::utils::IntrusiveList"* %0, i64 0, i32 1, i32 0, i32 1
  %4 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %5 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %4, i64 0, i32 0, i32 3
  %6 = load i8, i8* %5, align 8, !range !7
  %7 = icmp ne i8 %6, 0
  %8 = icmp eq %"class.spvtools::opt::Instruction"* %4, null
  %9 = or i1 %8, %7
  br i1 %9, label %33, label %10

10:                                               ; preds = %1, %10
  %11 = phi %"class.spvtools::opt::Instruction"* [ %27, %10 ], [ %4, %1 ]
  %12 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %11, i64 0, i32 0, i32 2
  %13 = bitcast %"class.spvtools::opt::Instruction"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %11, i64 0, i32 0, i32 1
  %16 = bitcast %"class.spvtools::opt::Instruction"** %15 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %17 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %16, align 8
  %18 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %17, i64 0, i32 2
  %19 = bitcast %"class.spvtools::opt::Instruction"** %18 to i64*
  store i64 %14, i64* %19, align 8
  %20 = bitcast %"class.spvtools::opt::Instruction"** %15 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.spvtools::opt::Instruction"** %12 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %23 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %22, align 8
  %24 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %23, i64 0, i32 1
  %25 = bitcast %"class.spvtools::opt::Instruction"** %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = bitcast %"class.spvtools::opt::Instruction"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 16, i1 false) #9
  %27 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %3, align 8
  %28 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %27, i64 0, i32 0, i32 3
  %29 = load i8, i8* %28, align 8, !range !7
  %30 = icmp ne i8 %29, 0
  %31 = icmp eq %"class.spvtools::opt::Instruction"* %27, null
  %32 = or i1 %31, %30
  br i1 %32, label %33, label %10

33:                                               ; preds = %10, %1
  %34 = getelementptr inbounds %"class.spvtools::utils::IntrusiveList", %"class.spvtools::utils::IntrusiveList"* %0, i64 0, i32 1
  tail call void @_ZN8spvtools3opt11InstructionD2Ev(%"class.spvtools::opt::Instruction"* %34) #9
  %35 = bitcast %"class.spvtools::utils::IntrusiveList"* %0 to i8*
  tail call void @_ZdlPv(i8* %35) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools3opt11InstructionD0Ev(%"class.spvtools::opt::Instruction"*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN8spvtools3opt11InstructionD2Ev(%"class.spvtools::opt::Instruction"* %0) #9
  %2 = bitcast %"class.spvtools::opt::Instruction"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEED2Ev(%"class.spvtools::utils::IntrusiveNodeBase"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools5utils17IntrusiveNodeBaseINS_3opt11InstructionEED0Ev(%"class.spvtools::utils::IntrusiveNodeBase"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.spvtools::utils::IntrusiveNodeBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZNSt3__123__builtin_new_allocator16__allocate_bytesEmm: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__123__builtin_new_allocator16__allocate_bytesEmm"}
!5 = distinct !{!5, !6, !"_ZNSt3__123__builtin_new_allocator15__allocate_typeINS_10__function20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEENS_10unique_ptrIvNS0_21__builtin_new_deleterEEEm: argument 0"}
!6 = distinct !{!6, !"_ZNSt3__123__builtin_new_allocator15__allocate_typeINS_10__function20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEENS_10unique_ptrIvNS0_21__builtin_new_deleterEEEm"}
!7 = !{i8 0, i8 2}
!8 = !{i64 0, i64 65}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = !{!12, !14}
!12 = distinct !{!12, !13, !"_ZNSt3__123__builtin_new_allocator16__allocate_bytesEmm: argument 0"}
!13 = distinct !{!13, !"_ZNSt3__123__builtin_new_allocator16__allocate_bytesEmm"}
!14 = distinct !{!14, !15, !"_ZNSt3__123__builtin_new_allocator15__allocate_typeINS_10__function20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEENS_10unique_ptrIvNS0_21__builtin_new_deleterEEEm: argument 0"}
!15 = distinct !{!15, !"_ZNSt3__123__builtin_new_allocator15__allocate_typeINS_10__function20__default_alloc_funcIZN8spvtools3opt26eliminatedeadfunctionsutil17EliminateFunctionEPNS5_9IRContextEPNS5_18UptrVectorIteratorINS5_8FunctionELb0EEEE3$_0FvPNS5_11InstructionEEEEEENS_10unique_ptrIvNS0_21__builtin_new_deleterEEEm"}
