; ModuleID = '../../media/midi/message_util.cc'
source_filename = "../../media/midi/message_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.2", [4 x i8] }>
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i32 }

@.str = private unnamed_addr constant [35 x i8] c"Media.Midi.SysExMessageSizeUpTo1MB\00", align 1
@_ZZN4midi18IsValidWebMIDIDataERKNSt3__16vectorIhNS0_9allocatorIhEEEEE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@switch.table._ZN4midi16GetMessageLengthEh = private unnamed_addr constant [15 x i64] [i64 2, i64 3, i64 2, i64 0, i64 0, i64 1, i64 0, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1], align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4midi16GetMessageLengthEh(i8 zeroext) local_unnamed_addr #0 {
  %2 = icmp sgt i8 %0, -1
  br i1 %2, label %16, label %3

3:                                                ; preds = %1
  %4 = icmp ult i8 %0, -64
  br i1 %4, label %16, label %5

5:                                                ; preds = %3
  %6 = icmp ult i8 %0, -32
  br i1 %6, label %16, label %7

7:                                                ; preds = %5
  %8 = icmp ult i8 %0, -16
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = add i8 %0, 15
  %11 = icmp ult i8 %10, 15
  br i1 %11, label %12, label %16

12:                                               ; preds = %9
  %13 = sext i8 %10 to i64
  %14 = getelementptr inbounds [15 x i64], [15 x i64]* @switch.table._ZN4midi16GetMessageLengthEh, i64 0, i64 %13
  %15 = load i64, i64* %14, align 8
  ret i64 %15

16:                                               ; preds = %9, %7, %5, %3, %1
  %17 = phi i64 [ 0, %1 ], [ 3, %3 ], [ 2, %5 ], [ 3, %7 ], [ 0, %9 ]
  ret i64 %17
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4midi10IsDataByteEh(i8 zeroext) local_unnamed_addr #0 {
  %2 = icmp sgt i8 %0, -1
  ret i1 %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4midi23IsSystemRealTimeMessageEh(i8 zeroext) local_unnamed_addr #0 {
  %2 = icmp ugt i8 %0, -9
  ret i1 %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4midi15IsSystemMessageEh(i8 zeroext) local_unnamed_addr #0 {
  %2 = icmp ugt i8 %0, -17
  ret i1 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4midi18IsValidWebMIDIDataERKNSt3__16vectorIhNS0_9allocatorIhEEEE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %3 = bitcast i8** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.std::__1::vector"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %71, label %8

8:                                                ; preds = %1, %62
  %9 = phi i64 [ %63, %62 ], [ %6, %1 ]
  %10 = phi i64 [ %64, %62 ], [ %4, %1 ]
  %11 = phi i64 [ %68, %62 ], [ 0, %1 ]
  %12 = phi i64 [ %67, %62 ], [ 0, %1 ]
  %13 = phi i64 [ %66, %62 ], [ 0, %1 ]
  %14 = phi i8 [ %65, %62 ], [ 0, %1 ]
  %15 = inttoptr i64 %9 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %11
  %17 = load i8, i8* %16, align 1
  %18 = icmp ugt i8 %17, -9
  br i1 %18, label %62, label %19

19:                                               ; preds = %8
  %20 = icmp eq i64 %12, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = icmp sgt i8 %17, -1
  %23 = add i64 %12, -1
  br i1 %22, label %62, label %78

24:                                               ; preds = %19
  %25 = and i8 %14, 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %49, label %27

27:                                               ; preds = %24
  %28 = icmp eq i8 %17, -9
  br i1 %28, label %29, label %47

29:                                               ; preds = %27
  %30 = load atomic i64, i64* @_ZZN4midi18IsValidWebMIDIDataERKNSt3__16vectorIhNS0_9allocatorIhEEEEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %31 = inttoptr i64 %30 to %"class.base::HistogramBase"*
  %32 = icmp eq i64 %30, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %29
  %34 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 1, i32 1000000, i32 50, i32 1) #3
  %35 = ptrtoint %"class.base::HistogramBase"* %34 to i64
  store atomic i64 %35, i64* @_ZZN4midi18IsValidWebMIDIDataERKNSt3__16vectorIhNS0_9allocatorIhEEEEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %36

36:                                               ; preds = %29, %33
  %37 = phi %"class.base::HistogramBase"* [ %31, %29 ], [ %34, %33 ]
  %38 = sub i64 %11, %13
  %39 = trunc i64 %38 to i32
  %40 = add i32 %39, 1
  %41 = bitcast %"class.base::HistogramBase"* %37 to void (%"class.base::HistogramBase"*, i32)***
  %42 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %42, i64 6
  %44 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %43, align 8
  tail call void %44(%"class.base::HistogramBase"* %37, i32 %40) #3
  %45 = load i64, i64* %3, align 8
  %46 = load i64, i64* %5, align 8
  br label %62

47:                                               ; preds = %27
  %48 = icmp sgt i8 %17, -1
  br i1 %48, label %62, label %78

49:                                               ; preds = %24
  %50 = icmp eq i8 %17, -16
  br i1 %50, label %62, label %51

51:                                               ; preds = %49
  %52 = icmp sgt i8 %17, -1
  br i1 %52, label %78, label %53

53:                                               ; preds = %51
  %54 = icmp ult i8 %17, -64
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = icmp ult i8 %17, -32
  br i1 %56, label %62, label %57

57:                                               ; preds = %55
  %58 = icmp ult i8 %17, -16
  br i1 %58, label %62, label %59

59:                                               ; preds = %57
  switch i8 %17, label %78 [
    i8 -10, label %61
    i8 -15, label %62
    i8 -14, label %60
    i8 -13, label %62
  ]

60:                                               ; preds = %59
  br label %62

61:                                               ; preds = %59
  br label %62

62:                                               ; preds = %59, %59, %57, %55, %53, %60, %61, %21, %36, %47, %8, %49
  %63 = phi i64 [ %9, %49 ], [ %9, %8 ], [ %46, %36 ], [ %9, %47 ], [ %9, %21 ], [ %9, %61 ], [ %9, %60 ], [ %9, %53 ], [ %9, %55 ], [ %9, %57 ], [ %9, %59 ], [ %9, %59 ]
  %64 = phi i64 [ %10, %49 ], [ %10, %8 ], [ %45, %36 ], [ %10, %47 ], [ %10, %21 ], [ %10, %61 ], [ %10, %60 ], [ %10, %53 ], [ %10, %55 ], [ %10, %57 ], [ %10, %59 ], [ %10, %59 ]
  %65 = phi i8 [ 1, %49 ], [ %14, %8 ], [ 0, %36 ], [ %14, %47 ], [ %14, %21 ], [ %14, %61 ], [ %14, %60 ], [ %14, %53 ], [ %14, %55 ], [ %14, %57 ], [ %14, %59 ], [ %14, %59 ]
  %66 = phi i64 [ %11, %49 ], [ %13, %8 ], [ %13, %36 ], [ %13, %47 ], [ %13, %21 ], [ %13, %61 ], [ %13, %60 ], [ %13, %53 ], [ %13, %55 ], [ %13, %57 ], [ %13, %59 ], [ %13, %59 ]
  %67 = phi i64 [ 0, %49 ], [ %12, %8 ], [ 0, %36 ], [ 0, %47 ], [ %23, %21 ], [ 0, %61 ], [ 2, %60 ], [ 2, %53 ], [ 1, %55 ], [ 2, %57 ], [ 1, %59 ], [ 1, %59 ]
  %68 = add nuw i64 %11, 1
  %69 = sub i64 %64, %63
  %70 = icmp ult i64 %68, %69
  br i1 %70, label %8, label %71

71:                                               ; preds = %62, %1
  %72 = phi i8 [ 0, %1 ], [ %65, %62 ]
  %73 = phi i64 [ 0, %1 ], [ %67, %62 ]
  %74 = icmp eq i64 %73, 0
  %75 = and i8 %72, 1
  %76 = icmp eq i8 %75, 0
  %77 = and i1 %76, %74
  br label %78

78:                                               ; preds = %51, %59, %47, %21, %71
  %79 = phi i1 [ %77, %71 ], [ false, %21 ], [ false, %47 ], [ false, %59 ], [ false, %51 ]
  ret i1 %79
}

declare %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
