; ModuleID = '../../third_party/opus/src/silk/interpolate.c'
source_filename = "../../third_party/opus/src/silk/interpolate.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [32 x i8] c"assertion failed: ifact_Q2 >= 0\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"../../third_party/opus/src/silk/interpolate.c\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"assertion failed: ifact_Q2 <= 4\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_interpolate(i16* nocapture, i16* nocapture readonly, i16* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %3, -1
  br i1 %6, label %8, label %7

7:                                                ; preds = %5
  tail call void @celt_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i32 45) #2
  unreachable

8:                                                ; preds = %5
  %9 = icmp slt i32 %3, 5
  br i1 %9, label %10, label %116

10:                                               ; preds = %8
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %144

12:                                               ; preds = %10
  %13 = shl i32 %3, 16
  %14 = ashr exact i32 %13, 16
  %15 = zext i32 %4 to i64
  %16 = icmp ult i32 %4, 8
  br i1 %16, label %17, label %39

17:                                               ; preds = %114, %39, %12
  %18 = phi i64 [ 0, %39 ], [ 0, %12 ], [ %51, %114 ]
  %19 = xor i64 %18, -1
  %20 = and i64 %15, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds i16, i16* %1, i64 %18
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds i16, i16* %2, i64 %18
  %26 = load i16, i16* %25, align 2
  %27 = sub i16 %26, %24
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %14, %28
  %30 = lshr i32 %29, 2
  %31 = trunc i32 %30 to i16
  %32 = add i16 %24, %31
  %33 = getelementptr inbounds i16, i16* %0, i64 %18
  store i16 %32, i16* %33, align 2
  %34 = or i64 %18, 1
  br label %35

35:                                               ; preds = %17, %22
  %36 = phi i64 [ %18, %17 ], [ %34, %22 ]
  %37 = sub nsw i64 0, %15
  %38 = icmp eq i64 %19, %37
  br i1 %38, label %144, label %117

39:                                               ; preds = %12
  %40 = getelementptr i16, i16* %0, i64 %15
  %41 = getelementptr i16, i16* %1, i64 %15
  %42 = getelementptr i16, i16* %2, i64 %15
  %43 = icmp ugt i16* %41, %0
  %44 = icmp ugt i16* %40, %1
  %45 = and i1 %43, %44
  %46 = icmp ugt i16* %42, %0
  %47 = icmp ugt i16* %40, %2
  %48 = and i1 %46, %47
  %49 = or i1 %45, %48
  br i1 %49, label %17, label %50

50:                                               ; preds = %39
  %51 = and i64 %15, 4294967288
  %52 = insertelement <8 x i32> undef, i32 %14, i32 0
  %53 = shufflevector <8 x i32> %52, <8 x i32> undef, <8 x i32> zeroinitializer
  %54 = add nsw i64 %51, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 1
  %58 = icmp eq i64 %54, 0
  br i1 %58, label %96, label %59

59:                                               ; preds = %50
  %60 = sub nuw nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %93, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %94, %61 ]
  %64 = getelementptr inbounds i16, i16* %1, i64 %62
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2, !alias.scope !2
  %67 = getelementptr inbounds i16, i16* %2, i64 %62
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !5
  %70 = sub <8 x i16> %69, %66
  %71 = sext <8 x i16> %70 to <8 x i32>
  %72 = mul nsw <8 x i32> %53, %71
  %73 = lshr <8 x i32> %72, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = add <8 x i16> %66, %74
  %76 = getelementptr inbounds i16, i16* %0, i64 %62
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %77, align 2, !alias.scope !7, !noalias !9
  %78 = or i64 %62, 8
  %79 = getelementptr inbounds i16, i16* %1, i64 %78
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !2
  %82 = getelementptr inbounds i16, i16* %2, i64 %78
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !5
  %85 = sub <8 x i16> %84, %81
  %86 = sext <8 x i16> %85 to <8 x i32>
  %87 = mul nsw <8 x i32> %53, %86
  %88 = lshr <8 x i32> %87, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = add <8 x i16> %81, %89
  %91 = getelementptr inbounds i16, i16* %0, i64 %78
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !7, !noalias !9
  %93 = add i64 %62, 16
  %94 = add i64 %63, -2
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %61, !llvm.loop !10

96:                                               ; preds = %61, %50
  %97 = phi i64 [ 0, %50 ], [ %93, %61 ]
  %98 = icmp eq i64 %57, 0
  br i1 %98, label %114, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds i16, i16* %1, i64 %97
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !2
  %103 = getelementptr inbounds i16, i16* %2, i64 %97
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !5
  %106 = sub <8 x i16> %105, %102
  %107 = sext <8 x i16> %106 to <8 x i32>
  %108 = mul nsw <8 x i32> %53, %107
  %109 = lshr <8 x i32> %108, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %110 = trunc <8 x i32> %109 to <8 x i16>
  %111 = add <8 x i16> %102, %110
  %112 = getelementptr inbounds i16, i16* %0, i64 %97
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %113, align 2, !alias.scope !7, !noalias !9
  br label %114

114:                                              ; preds = %96, %99
  %115 = icmp eq i64 %51, %15
  br i1 %115, label %144, label %17

116:                                              ; preds = %8
  tail call void @celt_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i32 46) #2
  unreachable

117:                                              ; preds = %35, %117
  %118 = phi i64 [ %142, %117 ], [ %36, %35 ]
  %119 = getelementptr inbounds i16, i16* %1, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = getelementptr inbounds i16, i16* %2, i64 %118
  %122 = load i16, i16* %121, align 2
  %123 = sub i16 %122, %120
  %124 = sext i16 %123 to i32
  %125 = mul nsw i32 %14, %124
  %126 = lshr i32 %125, 2
  %127 = trunc i32 %126 to i16
  %128 = add i16 %120, %127
  %129 = getelementptr inbounds i16, i16* %0, i64 %118
  store i16 %128, i16* %129, align 2
  %130 = add nuw nsw i64 %118, 1
  %131 = getelementptr inbounds i16, i16* %1, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = getelementptr inbounds i16, i16* %2, i64 %130
  %134 = load i16, i16* %133, align 2
  %135 = sub i16 %134, %132
  %136 = sext i16 %135 to i32
  %137 = mul nsw i32 %14, %136
  %138 = lshr i32 %137, 2
  %139 = trunc i32 %138 to i16
  %140 = add i16 %132, %139
  %141 = getelementptr inbounds i16, i16* %0, i64 %130
  store i16 %140, i16* %141, align 2
  %142 = add nuw nsw i64 %118, 2
  %143 = icmp eq i64 %142, %15
  br i1 %143, label %144, label %117, !llvm.loop !12

144:                                              ; preds = %35, %117, %114, %10
  ret void
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
