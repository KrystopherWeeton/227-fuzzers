; ModuleID = '../../extensions/renderer/bindings/binding_access_checker.cc'
source_filename = "../../extensions/renderer/bindings/binding_access_checker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::BindingAccessChecker" = type { %"class.base::RepeatingCallback", %"class.base::RepeatingCallback.1" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback.1" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.v8::Context" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.v8::Local" = type { %"class.v8::Context"* }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.v8::Isolate" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.v8::String" = type { i8 }

@.str = private unnamed_addr constant [39 x i8] c"'%s' is not available in this context.\00", align 1

@_ZN10extensions20BindingAccessCheckerC1EN4base17RepeatingCallbackIFbN2v85LocalINS3_7ContextEEERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS2_IFbS6_EEE = hidden unnamed_addr alias void (%"class.extensions::BindingAccessChecker"*, %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback.1"*), void (%"class.extensions::BindingAccessChecker"*, %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback.1"*)* @_ZN10extensions20BindingAccessCheckerC2EN4base17RepeatingCallbackIFbN2v85LocalINS3_7ContextEEERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS2_IFbS6_EEE
@_ZN10extensions20BindingAccessCheckerD1Ev = hidden unnamed_addr alias void (%"class.extensions::BindingAccessChecker"*), void (%"class.extensions::BindingAccessChecker"*)* @_ZN10extensions20BindingAccessCheckerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10extensions20BindingAccessCheckerC2EN4base17RepeatingCallbackIFbN2v85LocalINS3_7ContextEEERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS2_IFbS6_EEE(%"class.extensions::BindingAccessChecker"* nocapture, %"class.base::RepeatingCallback"* nocapture, %"class.base::RepeatingCallback.1"* nocapture) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = bitcast %"class.base::RepeatingCallback"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.extensions::BindingAccessChecker"* %0 to i64*
  store i64 %6, i64* %7, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %4, align 8
  %8 = getelementptr inbounds %"class.extensions::BindingAccessChecker", %"class.extensions::BindingAccessChecker"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.base::RepeatingCallback.1", %"class.base::RepeatingCallback.1"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.base::RepeatingCallback.1"* %2 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.base::RepeatingCallback.1"* %8 to i64*
  store i64 %11, i64* %12, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions20BindingAccessCheckerD2Ev(%"class.extensions::BindingAccessChecker"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.extensions::BindingAccessChecker", %"class.extensions::BindingAccessChecker"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %2) #6
  %3 = getelementptr inbounds %"class.extensions::BindingAccessChecker", %"class.extensions::BindingAccessChecker"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10extensions20BindingAccessChecker9HasAccessEN2v85LocalINS1_7ContextEEERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.extensions::BindingAccessChecker"* nocapture readonly, %"class.v8::Context"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::Local", align 8
  %5 = bitcast %"class.v8::Local"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5)
  %6 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %4, i64 0, i32 0
  store %"class.v8::Context"* %1, %"class.v8::Context"** %6, align 8
  %7 = getelementptr inbounds %"class.extensions::BindingAccessChecker", %"class.extensions::BindingAccessChecker"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  %9 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 1
  %10 = bitcast void ()** %9 to i1 (%"class.base::internal::BindStateBase"*, %"class.v8::Local"*, %"class.std::__1::basic_string"*)**
  %11 = load i1 (%"class.base::internal::BindStateBase"*, %"class.v8::Local"*, %"class.std::__1::basic_string"*)*, i1 (%"class.base::internal::BindStateBase"*, %"class.v8::Local"*, %"class.std::__1::basic_string"*)** %10, align 8
  %12 = call zeroext i1 %11(%"class.base::internal::BindStateBase"* %8, %"class.v8::Local"* nonnull dereferenceable(8) %4, %"class.std::__1::basic_string"* dereferenceable(24) %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5)
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10extensions20BindingAccessChecker21HasAccessOrThrowErrorEN2v85LocalINS1_7ContextEEERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.extensions::BindingAccessChecker"* nocapture readonly, %"class.v8::Context"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.v8::Local", align 8
  %5 = alloca %"class.base::BasicStringPiece", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = bitcast %"class.v8::Local"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6
  %8 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %4, i64 0, i32 0
  store %"class.v8::Context"* %1, %"class.v8::Context"** %8, align 8
  %9 = getelementptr inbounds %"class.extensions::BindingAccessChecker", %"class.extensions::BindingAccessChecker"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %10, i64 0, i32 1
  %12 = bitcast void ()** %11 to i1 (%"class.base::internal::BindStateBase"*, %"class.v8::Local"*, %"class.std::__1::basic_string"*)**
  %13 = load i1 (%"class.base::internal::BindStateBase"*, %"class.v8::Local"*, %"class.std::__1::basic_string"*)*, i1 (%"class.base::internal::BindStateBase"*, %"class.v8::Local"*, %"class.std::__1::basic_string"*)** %12, align 8
  %14 = call zeroext i1 %13(%"class.base::internal::BindStateBase"* %10, %"class.v8::Local"* nonnull dereferenceable(8) %4, %"class.std::__1::basic_string"* dereferenceable(24) %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  br i1 %14, label %50, label %15

15:                                               ; preds = %3
  %16 = call %"class.v8::Isolate"* @_ZN2v87Context10GetIsolateEv(%"class.v8::Context"* %1) #6
  %17 = call %"class.v8::Isolate"* @_ZN2v87Context10GetIsolateEv(%"class.v8::Context"* %1) #6
  %18 = bitcast %"class.base::BasicStringPiece"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #6
  %19 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #6
  %20 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %27 = select i1 %23, i8* %25, i8* %26
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %6, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i8* %27) #6
  %28 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %29 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = select i1 %32, i8* %34, i8* %19
  store i8* %35, i8** %28, align 8
  %36 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = zext i8 %31 to i64
  %40 = select i1 %32, i64 %38, i64 %39
  store i64 %40, i64* %36, align 8
  %41 = call %"class.v8::Value"* @_ZN3gin9ConverterIN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEvE4ToV8EPN2v87IsolateERKS6_(%"class.v8::Isolate"* %17, %"class.base::BasicStringPiece"* nonnull dereferenceable(16) %5) #6
  %42 = bitcast %"class.v8::Value"* %41 to %"class.v8::String"*
  %43 = call %"class.v8::Value"* @_ZN2v89Exception5ErrorENS_5LocalINS_6StringEEE(%"class.v8::String"* %42) #6
  %44 = call %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"* %16, %"class.v8::Value"* %43) #6
  %45 = load i8, i8* %30, align 1
  %46 = icmp slt i8 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %15
  %48 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %48) #7
  br label %49

49:                                               ; preds = %15, %47
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #6
  br label %50

50:                                               ; preds = %3, %49
  %51 = phi i1 [ false, %49 ], [ true, %3 ]
  ret i1 %51
}

declare %"class.v8::Isolate"* @_ZN2v87Context10GetIsolateEv(%"class.v8::Context"*) local_unnamed_addr #3

declare %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"*, %"class.v8::Value"*) local_unnamed_addr #3

declare %"class.v8::Value"* @_ZN2v89Exception5ErrorENS_5LocalINS_6StringEEE(%"class.v8::String"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10extensions20BindingAccessChecker16HasPromiseAccessEN2v85LocalINS1_7ContextEEE(%"class.extensions::BindingAccessChecker"* nocapture readonly, %"class.v8::Context"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.v8::Local", align 8
  %4 = bitcast %"class.v8::Local"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4)
  %5 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %3, i64 0, i32 0
  store %"class.v8::Context"* %1, %"class.v8::Context"** %5, align 8
  %6 = getelementptr inbounds %"class.extensions::BindingAccessChecker", %"class.extensions::BindingAccessChecker"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %7, i64 0, i32 1
  %9 = bitcast void ()** %8 to i1 (%"class.base::internal::BindStateBase"*, %"class.v8::Local"*)**
  %10 = load i1 (%"class.base::internal::BindStateBase"*, %"class.v8::Local"*)*, i1 (%"class.base::internal::BindStateBase"*, %"class.v8::Local"*)** %9, align 8
  %11 = call zeroext i1 %10(%"class.base::internal::BindStateBase"* %7, %"class.v8::Local"* nonnull dereferenceable(8) %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4)
  ret i1 %11
}

declare %"class.v8::Value"* @_ZN3gin9ConverterIN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEvE4ToV8EPN2v87IsolateERKS6_(%"class.v8::Isolate"*, %"class.base::BasicStringPiece"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
