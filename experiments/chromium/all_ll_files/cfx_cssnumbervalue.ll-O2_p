; ModuleID = '../../third_party/pdfium/core/fxcrt/css/cfx_cssnumbervalue.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/css/cfx_cssnumbervalue.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_CSSNumberValue = type { %class.CFX_CSSValue.base, i32, float, [4 x i8] }
%class.CFX_CSSValue.base = type <{ %"class.fxcrt::Retainable", i8 }>
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%class.CFX_CSSValue = type <{ %"class.fxcrt::Retainable", i8, [7 x i8] }>

@_ZTV18CFX_CSSNumberValue = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_CSSNumberValue*)* @_ZN18CFX_CSSNumberValueD2Ev to i8*), i8* bitcast (void (%class.CFX_CSSNumberValue*)* @_ZN18CFX_CSSNumberValueD0Ev to i8*)] }, align 8

@_ZN18CFX_CSSNumberValueC1ENS_4UnitEf = hidden unnamed_addr alias void (%class.CFX_CSSNumberValue*, i32, float), void (%class.CFX_CSSNumberValue*, i32, float)* @_ZN18CFX_CSSNumberValueC2ENS_4UnitEf
@_ZN18CFX_CSSNumberValueD1Ev = hidden unnamed_addr alias void (%class.CFX_CSSNumberValue*), void (%class.CFX_CSSNumberValue*)* @_ZN18CFX_CSSNumberValueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_CSSNumberValueC2ENS_4UnitEf(%class.CFX_CSSNumberValue*, i32, float) unnamed_addr #0 align 2 {
  %4 = bitcast %class.CFX_CSSNumberValue* %0 to %class.CFX_CSSValue*
  tail call void @_ZN12CFX_CSSValueC2ENS_13PrimitiveTypeE(%class.CFX_CSSValue* %4, i8 zeroext 1) #6
  %5 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV18CFX_CSSNumberValue, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 1
  store i32 %1, i32* %6, align 4
  %7 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %8 = icmp eq i32 %1, 0
  %9 = tail call float @llvm.fabs.f32(float %2) #6
  %10 = fcmp olt float %9, 0x3F50624DE0000000
  %11 = and i1 %8, %10
  %12 = select i1 %11, float 0.000000e+00, float %2
  store float %12, float* %7, align 8
  ret void
}

declare void @_ZN12CFX_CSSValueC2ENS_13PrimitiveTypeE(%class.CFX_CSSValue*, i8 zeroext) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN12CFX_CSSValueD2Ev(%class.CFX_CSSValue*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_CSSNumberValueD2Ev(%class.CFX_CSSNumberValue*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CFX_CSSNumberValue* %0 to %class.CFX_CSSValue*
  tail call void @_ZN12CFX_CSSValueD2Ev(%class.CFX_CSSValue* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_CSSNumberValueD0Ev(%class.CFX_CSSNumberValue*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CFX_CSSNumberValue* %0 to %class.CFX_CSSValue*
  tail call void @_ZN12CFX_CSSValueD2Ev(%class.CFX_CSSValue* %2) #6
  %3 = bitcast %class.CFX_CSSNumberValue* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK18CFX_CSSNumberValue5ApplyEf(%class.CFX_CSSNumberValue* nocapture readonly, float) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %38 [
    i32 4, label %5
    i32 0, label %5
    i32 2, label %10
    i32 3, label %10
    i32 1, label %14
    i32 5, label %19
    i32 6, label %23
    i32 7, label %27
    i32 9, label %31
    i32 8, label %35
  ]

5:                                                ; preds = %2, %2
  %6 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %7 = load float, float* %6, align 8
  %8 = fmul float %7, 7.200000e+01
  %9 = fdiv float %8, 9.600000e+01
  br label %41

10:                                               ; preds = %2, %2
  %11 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %12 = load float, float* %11, align 8
  %13 = fmul float %12, %1
  br label %41

14:                                               ; preds = %2
  %15 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %16 = load float, float* %15, align 8
  %17 = fmul float %16, %1
  %18 = fdiv float %17, 1.000000e+02
  br label %41

19:                                               ; preds = %2
  %20 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %21 = load float, float* %20, align 8
  %22 = fmul float %21, 0x403C58ADA0000000
  br label %41

23:                                               ; preds = %2
  %24 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %25 = load float, float* %24, align 8
  %26 = fmul float %25, 0x4006AD42C0000000
  br label %41

27:                                               ; preds = %2
  %28 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %29 = load float, float* %28, align 8
  %30 = fmul float %29, 7.200000e+01
  br label %41

31:                                               ; preds = %2
  %32 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %33 = load float, float* %32, align 8
  %34 = fdiv float %33, 1.200000e+01
  br label %41

35:                                               ; preds = %2
  %36 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %37 = load float, float* %36, align 8
  br label %41

38:                                               ; preds = %2
  %39 = getelementptr inbounds %class.CFX_CSSNumberValue, %class.CFX_CSSNumberValue* %0, i64 0, i32 2
  %40 = load float, float* %39, align 8
  br label %41

41:                                               ; preds = %38, %35, %31, %27, %23, %19, %14, %10, %5
  %42 = phi float [ %40, %38 ], [ %37, %35 ], [ %34, %31 ], [ %30, %27 ], [ %26, %23 ], [ %22, %19 ], [ %18, %14 ], [ %13, %10 ], [ %9, %5 ]
  ret float %42
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
