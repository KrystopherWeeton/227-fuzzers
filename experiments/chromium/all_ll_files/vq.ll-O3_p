; ModuleID = '../../third_party/opus/src/celt/vq.c'
source_filename = "../../third_party/opus/src/celt/vq.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.ec_ctx = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@exp_rotation.SPREAD_FACTOR = internal unnamed_addr constant [3 x i32] [i32 15, i32 10, i32 5], align 4
@.str = private unnamed_addr constant [59 x i8] c"assertion failed: K>0\0Aalg_quant() needs at least one pulse\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"../../third_party/opus/src/celt/vq.c\00", align 1
@.str.2 = private unnamed_addr constant [64 x i8] c"assertion failed: N>1\0Aalg_quant() needs at least two dimensions\00", align 1
@.str.3 = private unnamed_addr constant [61 x i8] c"assertion failed: K>0\0Aalg_unquant() needs at least one pulse\00", align 1
@.str.4 = private unnamed_addr constant [66 x i8] c"assertion failed: N>1\0Aalg_unquant() needs at least two dimensions\00", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @exp_rotation(float* nocapture, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = shl nsw i32 %4, 1
  %8 = icmp sge i32 %7, %1
  %9 = icmp eq i32 %5, 0
  %10 = or i1 %8, %9
  br i1 %10, label %712, label %11

11:                                               ; preds = %6
  %12 = add nsw i32 %5, -1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* @exp_rotation.SPREAD_FACTOR, i64 0, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %1 to float
  %17 = mul nsw i32 %15, %4
  %18 = add nsw i32 %17, %1
  %19 = sitofp i32 %18 to float
  %20 = fdiv float %16, %19
  %21 = fmul float %20, %20
  %22 = fmul float %21, 5.000000e-01
  %23 = fmul float %22, 0x3FF921FB60000000
  %24 = fpext float %23 to double
  %25 = tail call double @cos(double %24) #7
  %26 = fptrunc double %25 to float
  %27 = fsub float 1.000000e+00, %22
  %28 = fmul float %27, 0x3FF921FB60000000
  %29 = fpext float %28 to double
  %30 = tail call double @cos(double %29) #7
  %31 = fptrunc double %30 to float
  %32 = shl nsw i32 %3, 3
  %33 = icmp sgt i32 %32, %1
  br i1 %33, label %44, label %34

34:                                               ; preds = %11
  %35 = ashr i32 %3, 2
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i32 [ %43, %36 ], [ 1, %34 ]
  %38 = mul nsw i32 %37, %37
  %39 = add nuw nsw i32 %38, %37
  %40 = mul nsw i32 %39, %3
  %41 = add nsw i32 %40, %35
  %42 = icmp slt i32 %41, %1
  %43 = add nuw nsw i32 %37, 1
  br i1 %42, label %36, label %44

44:                                               ; preds = %36, %11
  %45 = phi i32 [ 0, %11 ], [ %37, %36 ]
  %46 = udiv i32 %1, %3
  %47 = icmp sgt i32 %3, 0
  br i1 %47, label %48, label %712

48:                                               ; preds = %44
  %49 = icmp slt i32 %2, 0
  %50 = fsub float -0.000000e+00, %31
  %51 = add i32 %46, -1
  %52 = icmp sgt i32 %51, 0
  %53 = add i32 %46, -3
  %54 = icmp sgt i32 %53, -1
  %55 = sext i32 %53 to i64
  %56 = icmp eq i32 %45, 0
  %57 = fsub float -0.000000e+00, %26
  %58 = sub i32 %46, %45
  %59 = icmp sgt i32 %58, 0
  %60 = zext i32 %45 to i64
  %61 = shl nuw nsw i32 %45, 1
  %62 = xor i32 %61, -1
  %63 = add i32 %46, %62
  %64 = icmp sgt i32 %63, -1
  %65 = sext i32 %63 to i64
  %66 = sext i32 %46 to i64
  %67 = zext i32 %3 to i64
  %68 = shl nuw i32 %45, 1
  %69 = shl nuw i32 %45, 1
  %70 = add nsw i64 %65, %60
  %71 = add nsw i64 %65, %60
  %72 = shl nuw i32 %45, 1
  %73 = add nsw i64 %65, %60
  %74 = add nsw i64 %73, 1
  %75 = add nsw i64 %65, 1
  %76 = xor i32 %45, -1
  %77 = add i32 %46, %76
  %78 = xor i32 %45, -1
  %79 = add i32 %46, %78
  %80 = shl nuw i32 %45, 1
  %81 = shl nuw i32 %45, 1
  %82 = add nsw i64 %65, %60
  %83 = add nsw i64 %65, %60
  %84 = shl nuw i32 %45, 1
  %85 = add nsw i64 %65, %60
  %86 = add nsw i64 %85, 1
  %87 = add nsw i64 %65, 1
  %88 = xor i32 %45, -1
  %89 = add i32 %46, %88
  %90 = xor i32 %45, -1
  %91 = add i32 %46, %90
  %92 = add i32 %46, -2
  %93 = sub i32 %46, %45
  %94 = xor i32 %45, -1
  %95 = add i32 %46, %94
  %96 = sub i32 %46, %45
  %97 = xor i32 %45, -1
  %98 = add i32 %46, %97
  %99 = and i32 %51, 1
  %100 = icmp eq i32 %92, 0
  %101 = sub i32 %51, %99
  %102 = icmp eq i32 %99, 0
  %103 = zext i32 %89 to i64
  %104 = add nuw nsw i64 %103, 1
  %105 = icmp ult i64 %104, 4
  %106 = zext i32 %91 to i64
  %107 = add nuw nsw i64 %60, %106
  %108 = add nuw nsw i64 %107, 1
  %109 = add nuw nsw i64 %106, 1
  %110 = and i64 %104, 8589934588
  %111 = trunc i64 %110 to i32
  %112 = insertelement <4 x float> undef, float %31, i32 0
  %113 = shufflevector <4 x float> %112, <4 x float> undef, <4 x i32> zeroinitializer
  %114 = insertelement <4 x float> undef, float %57, i32 0
  %115 = shufflevector <4 x float> %114, <4 x float> undef, <4 x i32> zeroinitializer
  %116 = insertelement <4 x float> undef, float %26, i32 0
  %117 = shufflevector <4 x float> %116, <4 x float> undef, <4 x i32> zeroinitializer
  %118 = add nsw i64 %110, -4
  %119 = lshr exact i64 %118, 2
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 1
  %122 = icmp eq i64 %118, 0
  %123 = sub nuw nsw i64 %120, %121
  %124 = icmp eq i64 %121, 0
  %125 = icmp eq i64 %104, %110
  %126 = xor i32 %80, -1
  %127 = add i32 %46, %126
  %128 = zext i32 %127 to i64
  %129 = add nuw nsw i64 %128, 1
  %130 = icmp ult i64 %129, 4
  %131 = icmp slt i32 %63, 0
  %132 = select i1 %131, i32 %63, i32 0
  %133 = xor i32 %132, -1
  %134 = add i32 %46, %133
  %135 = sub i32 %134, %81
  %136 = zext i32 %135 to i64
  %137 = shl nuw nsw i64 %136, 2
  %138 = zext i32 %135 to i64
  %139 = shl nuw nsw i64 %138, 2
  %140 = icmp slt i32 %63, 0
  %141 = select i1 %140, i32 %63, i32 0
  %142 = xor i32 %141, -1
  %143 = add i32 %46, %142
  %144 = sub i32 %143, %84
  %145 = zext i32 %144 to i64
  %146 = sub nsw i64 %83, %145
  %147 = sub nsw i64 %65, %145
  %148 = and i64 %129, 8589934588
  %149 = trunc i64 %148 to i32
  %150 = sub i32 %63, %149
  %151 = sub nsw i64 0, %148
  %152 = insertelement <4 x float> undef, float %31, i32 0
  %153 = shufflevector <4 x float> %152, <4 x float> undef, <4 x i32> zeroinitializer
  %154 = insertelement <4 x float> undef, float %57, i32 0
  %155 = shufflevector <4 x float> %154, <4 x float> undef, <4 x i32> zeroinitializer
  %156 = insertelement <4 x float> undef, float %26, i32 0
  %157 = shufflevector <4 x float> %156, <4 x float> undef, <4 x i32> zeroinitializer
  %158 = icmp eq i64 %129, %148
  %159 = zext i32 %77 to i64
  %160 = add nuw nsw i64 %159, 1
  %161 = icmp ult i64 %160, 4
  %162 = zext i32 %79 to i64
  %163 = add nuw nsw i64 %60, %162
  %164 = add nuw nsw i64 %163, 1
  %165 = add nuw nsw i64 %162, 1
  %166 = and i64 %160, 8589934588
  %167 = trunc i64 %166 to i32
  %168 = insertelement <4 x float> undef, float %31, i32 0
  %169 = shufflevector <4 x float> %168, <4 x float> undef, <4 x i32> zeroinitializer
  %170 = insertelement <4 x float> undef, float %26, i32 0
  %171 = shufflevector <4 x float> %170, <4 x float> undef, <4 x i32> zeroinitializer
  %172 = insertelement <4 x float> undef, float %57, i32 0
  %173 = shufflevector <4 x float> %172, <4 x float> undef, <4 x i32> zeroinitializer
  %174 = add nsw i64 %166, -4
  %175 = lshr exact i64 %174, 2
  %176 = add nuw nsw i64 %175, 1
  %177 = and i64 %176, 1
  %178 = icmp eq i64 %174, 0
  %179 = sub nuw nsw i64 %176, %177
  %180 = icmp eq i64 %177, 0
  %181 = icmp eq i64 %160, %166
  %182 = xor i32 %68, -1
  %183 = add i32 %46, %182
  %184 = zext i32 %183 to i64
  %185 = add nuw nsw i64 %184, 1
  %186 = icmp ult i64 %185, 4
  %187 = icmp slt i32 %63, 0
  %188 = select i1 %187, i32 %63, i32 0
  %189 = xor i32 %188, -1
  %190 = add i32 %46, %189
  %191 = sub i32 %190, %69
  %192 = zext i32 %191 to i64
  %193 = shl nuw nsw i64 %192, 2
  %194 = zext i32 %191 to i64
  %195 = shl nuw nsw i64 %194, 2
  %196 = icmp slt i32 %63, 0
  %197 = select i1 %196, i32 %63, i32 0
  %198 = xor i32 %197, -1
  %199 = add i32 %46, %198
  %200 = sub i32 %199, %72
  %201 = zext i32 %200 to i64
  %202 = sub nsw i64 %71, %201
  %203 = sub nsw i64 %65, %201
  %204 = and i64 %185, 8589934588
  %205 = trunc i64 %204 to i32
  %206 = sub i32 %63, %205
  %207 = sub nsw i64 0, %204
  %208 = insertelement <4 x float> undef, float %31, i32 0
  %209 = shufflevector <4 x float> %208, <4 x float> undef, <4 x i32> zeroinitializer
  %210 = insertelement <4 x float> undef, float %26, i32 0
  %211 = shufflevector <4 x float> %210, <4 x float> undef, <4 x i32> zeroinitializer
  %212 = insertelement <4 x float> undef, float %57, i32 0
  %213 = shufflevector <4 x float> %212, <4 x float> undef, <4 x i32> zeroinitializer
  %214 = icmp eq i64 %185, %204
  %215 = and i32 %51, 1
  %216 = icmp eq i32 %92, 0
  %217 = sub i32 %51, %215
  %218 = icmp eq i32 %215, 0
  br label %219

219:                                              ; preds = %709, %48
  %220 = phi i64 [ 0, %48 ], [ %710, %709 ]
  %221 = mul nsw i64 %220, %66
  br i1 %49, label %222, label %466

222:                                              ; preds = %219
  br i1 %56, label %410, label %223

223:                                              ; preds = %222
  %224 = getelementptr inbounds float, float* %0, i64 %221
  br i1 %59, label %225, label %339

225:                                              ; preds = %223
  br i1 %161, label %292, label %226

226:                                              ; preds = %225
  %227 = mul i64 %220, %66
  %228 = add i64 %227, %60
  %229 = getelementptr float, float* %0, i64 %228
  %230 = add i64 %227, %164
  %231 = getelementptr float, float* %0, i64 %230
  %232 = add i64 %227, %165
  %233 = getelementptr float, float* %0, i64 %232
  %234 = icmp ult float* %229, %233
  %235 = icmp ult float* %224, %231
  %236 = and i1 %234, %235
  br i1 %236, label %292, label %237

237:                                              ; preds = %226
  %238 = getelementptr float, float* %224, i64 %166
  br i1 %178, label %274, label %239

239:                                              ; preds = %237, %239
  %240 = phi i64 [ %271, %239 ], [ 0, %237 ]
  %241 = phi i64 [ %272, %239 ], [ %179, %237 ]
  %242 = getelementptr float, float* %224, i64 %240
  %243 = bitcast float* %242 to <4 x float>*
  %244 = load <4 x float>, <4 x float>* %243, align 4, !alias.scope !2
  %245 = getelementptr inbounds float, float* %242, i64 %60
  %246 = bitcast float* %245 to <4 x float>*
  %247 = load <4 x float>, <4 x float>* %246, align 4, !alias.scope !5, !noalias !2
  %248 = fmul <4 x float> %247, %169
  %249 = fmul <4 x float> %244, %171
  %250 = fadd <4 x float> %249, %248
  %251 = bitcast float* %245 to <4 x float>*
  store <4 x float> %250, <4 x float>* %251, align 4, !alias.scope !5, !noalias !2
  %252 = fmul <4 x float> %244, %169
  %253 = fmul <4 x float> %247, %173
  %254 = fadd <4 x float> %252, %253
  %255 = bitcast float* %242 to <4 x float>*
  store <4 x float> %254, <4 x float>* %255, align 4, !alias.scope !2
  %256 = or i64 %240, 4
  %257 = getelementptr float, float* %224, i64 %256
  %258 = bitcast float* %257 to <4 x float>*
  %259 = load <4 x float>, <4 x float>* %258, align 4, !alias.scope !2
  %260 = getelementptr inbounds float, float* %257, i64 %60
  %261 = bitcast float* %260 to <4 x float>*
  %262 = load <4 x float>, <4 x float>* %261, align 4, !alias.scope !5, !noalias !2
  %263 = fmul <4 x float> %262, %169
  %264 = fmul <4 x float> %259, %171
  %265 = fadd <4 x float> %264, %263
  %266 = bitcast float* %260 to <4 x float>*
  store <4 x float> %265, <4 x float>* %266, align 4, !alias.scope !5, !noalias !2
  %267 = fmul <4 x float> %259, %169
  %268 = fmul <4 x float> %262, %173
  %269 = fadd <4 x float> %267, %268
  %270 = bitcast float* %257 to <4 x float>*
  store <4 x float> %269, <4 x float>* %270, align 4, !alias.scope !2
  %271 = add i64 %240, 8
  %272 = add i64 %241, -2
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %239, !llvm.loop !7

274:                                              ; preds = %239, %237
  %275 = phi i64 [ 0, %237 ], [ %271, %239 ]
  br i1 %180, label %291, label %276

276:                                              ; preds = %274
  %277 = getelementptr float, float* %224, i64 %275
  %278 = bitcast float* %277 to <4 x float>*
  %279 = load <4 x float>, <4 x float>* %278, align 4, !alias.scope !2
  %280 = getelementptr inbounds float, float* %277, i64 %60
  %281 = bitcast float* %280 to <4 x float>*
  %282 = load <4 x float>, <4 x float>* %281, align 4, !alias.scope !5, !noalias !2
  %283 = fmul <4 x float> %282, %169
  %284 = fmul <4 x float> %279, %171
  %285 = fadd <4 x float> %284, %283
  %286 = bitcast float* %280 to <4 x float>*
  store <4 x float> %285, <4 x float>* %286, align 4, !alias.scope !5, !noalias !2
  %287 = fmul <4 x float> %279, %169
  %288 = fmul <4 x float> %282, %173
  %289 = fadd <4 x float> %287, %288
  %290 = bitcast float* %277 to <4 x float>*
  store <4 x float> %289, <4 x float>* %290, align 4, !alias.scope !2
  br label %291

291:                                              ; preds = %274, %276
  br i1 %181, label %339, label %292

292:                                              ; preds = %291, %226, %225
  %293 = phi i32 [ 0, %226 ], [ 0, %225 ], [ %167, %291 ]
  %294 = phi float* [ %224, %226 ], [ %224, %225 ], [ %238, %291 ]
  %295 = sub i32 %96, %293
  %296 = and i32 %295, 1
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %310, label %298

298:                                              ; preds = %292
  %299 = load float, float* %294, align 4
  %300 = getelementptr inbounds float, float* %294, i64 %60
  %301 = load float, float* %300, align 4
  %302 = fmul float %301, %31
  %303 = fmul float %299, %26
  %304 = fadd float %303, %302
  store float %304, float* %300, align 4
  %305 = fmul float %299, %31
  %306 = fmul float %301, %57
  %307 = fadd float %305, %306
  %308 = getelementptr inbounds float, float* %294, i64 1
  store float %307, float* %294, align 4
  %309 = add nuw nsw i32 %293, 1
  br label %310

310:                                              ; preds = %298, %292
  %311 = phi i32 [ %309, %298 ], [ %293, %292 ]
  %312 = phi float* [ %308, %298 ], [ %294, %292 ]
  %313 = icmp eq i32 %98, %293
  br i1 %313, label %339, label %314

314:                                              ; preds = %310, %314
  %315 = phi i32 [ %337, %314 ], [ %311, %310 ]
  %316 = phi float* [ %336, %314 ], [ %312, %310 ]
  %317 = load float, float* %316, align 4
  %318 = getelementptr inbounds float, float* %316, i64 %60
  %319 = load float, float* %318, align 4
  %320 = fmul float %319, %31
  %321 = fmul float %317, %26
  %322 = fadd float %321, %320
  store float %322, float* %318, align 4
  %323 = fmul float %317, %31
  %324 = fmul float %319, %57
  %325 = fadd float %323, %324
  %326 = getelementptr inbounds float, float* %316, i64 1
  store float %325, float* %316, align 4
  %327 = load float, float* %326, align 4
  %328 = getelementptr inbounds float, float* %326, i64 %60
  %329 = load float, float* %328, align 4
  %330 = fmul float %329, %31
  %331 = fmul float %327, %26
  %332 = fadd float %331, %330
  store float %332, float* %328, align 4
  %333 = fmul float %327, %31
  %334 = fmul float %329, %57
  %335 = fadd float %333, %334
  %336 = getelementptr inbounds float, float* %316, i64 2
  store float %335, float* %326, align 4
  %337 = add nuw nsw i32 %315, 2
  %338 = icmp eq i32 %337, %58
  br i1 %338, label %339, label %314, !llvm.loop !9

339:                                              ; preds = %310, %314, %291, %223
  br i1 %64, label %340, label %410

340:                                              ; preds = %339
  %341 = getelementptr inbounds float, float* %224, i64 %65
  br i1 %186, label %392, label %342

342:                                              ; preds = %340
  %343 = ptrtoint float* %341 to i64
  %344 = mul i64 %220, %66
  %345 = add i64 %70, %344
  %346 = getelementptr float, float* %0, i64 %345
  %347 = ptrtoint float* %346 to i64
  %348 = icmp ugt i64 %193, %347
  %349 = icmp ugt i64 %195, %343
  %350 = or i1 %348, %349
  br i1 %350, label %392, label %351

351:                                              ; preds = %342
  %352 = mul i64 %220, %66
  %353 = add i64 %352, %202
  %354 = getelementptr float, float* %0, i64 %353
  %355 = add i64 %74, %352
  %356 = getelementptr float, float* %0, i64 %355
  %357 = add i64 %352, %203
  %358 = getelementptr float, float* %0, i64 %357
  %359 = add i64 %75, %352
  %360 = getelementptr float, float* %0, i64 %359
  %361 = icmp ult float* %354, %360
  %362 = icmp ult float* %358, %356
  %363 = and i1 %361, %362
  br i1 %363, label %392, label %364

364:                                              ; preds = %351
  %365 = getelementptr float, float* %341, i64 %207
  br label %366

366:                                              ; preds = %366, %364
  %367 = phi i64 [ 0, %364 ], [ %389, %366 ]
  %368 = sub i64 0, %367
  %369 = getelementptr float, float* %341, i64 %368
  %370 = getelementptr float, float* %369, i64 -3
  %371 = bitcast float* %370 to <4 x float>*
  %372 = load <4 x float>, <4 x float>* %371, align 4, !alias.scope !10
  %373 = shufflevector <4 x float> %372, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %374 = getelementptr inbounds float, float* %369, i64 %60
  %375 = getelementptr inbounds float, float* %374, i64 -3
  %376 = bitcast float* %375 to <4 x float>*
  %377 = load <4 x float>, <4 x float>* %376, align 4, !alias.scope !13, !noalias !10
  %378 = shufflevector <4 x float> %377, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %379 = fmul <4 x float> %378, %209
  %380 = fmul <4 x float> %373, %211
  %381 = fadd <4 x float> %380, %379
  %382 = shufflevector <4 x float> %381, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %383 = bitcast float* %375 to <4 x float>*
  store <4 x float> %382, <4 x float>* %383, align 4, !alias.scope !13, !noalias !10
  %384 = fmul <4 x float> %373, %209
  %385 = fmul <4 x float> %378, %213
  %386 = fadd <4 x float> %384, %385
  %387 = shufflevector <4 x float> %386, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %388 = bitcast float* %370 to <4 x float>*
  store <4 x float> %387, <4 x float>* %388, align 4, !alias.scope !10
  %389 = add i64 %367, 4
  %390 = icmp eq i64 %389, %204
  br i1 %390, label %391, label %366, !llvm.loop !15

391:                                              ; preds = %366
  br i1 %214, label %410, label %392

392:                                              ; preds = %391, %351, %342, %340
  %393 = phi i32 [ %63, %351 ], [ %63, %342 ], [ %63, %340 ], [ %206, %391 ]
  %394 = phi float* [ %341, %351 ], [ %341, %342 ], [ %341, %340 ], [ %365, %391 ]
  br label %395

395:                                              ; preds = %392, %395
  %396 = phi i32 [ %408, %395 ], [ %393, %392 ]
  %397 = phi float* [ %407, %395 ], [ %394, %392 ]
  %398 = load float, float* %397, align 4
  %399 = getelementptr inbounds float, float* %397, i64 %60
  %400 = load float, float* %399, align 4
  %401 = fmul float %400, %31
  %402 = fmul float %398, %26
  %403 = fadd float %402, %401
  store float %403, float* %399, align 4
  %404 = fmul float %398, %31
  %405 = fmul float %400, %57
  %406 = fadd float %404, %405
  %407 = getelementptr inbounds float, float* %397, i64 -1
  store float %406, float* %397, align 4
  %408 = add nsw i32 %396, -1
  %409 = icmp sgt i32 %396, 0
  br i1 %409, label %395, label %410, !llvm.loop !16

410:                                              ; preds = %395, %391, %222, %339
  %411 = getelementptr inbounds float, float* %0, i64 %221
  br i1 %52, label %412, label %448

412:                                              ; preds = %410
  %413 = load float, float* %411, align 4
  br i1 %216, label %436, label %414

414:                                              ; preds = %412, %414
  %415 = phi float [ %430, %414 ], [ %413, %412 ]
  %416 = phi float* [ %426, %414 ], [ %411, %412 ]
  %417 = phi i32 [ %434, %414 ], [ %217, %412 ]
  %418 = getelementptr inbounds float, float* %416, i64 1
  %419 = load float, float* %418, align 4
  %420 = fmul float %419, %26
  %421 = fmul float %415, %31
  %422 = fadd float %421, %420
  store float %422, float* %418, align 4
  %423 = fmul float %415, %26
  %424 = fmul float %419, %50
  %425 = fadd float %423, %424
  store float %425, float* %416, align 4
  %426 = getelementptr inbounds float, float* %416, i64 2
  %427 = load float, float* %426, align 4
  %428 = fmul float %427, %26
  %429 = fmul float %422, %31
  %430 = fadd float %429, %428
  store float %430, float* %426, align 4
  %431 = fmul float %422, %26
  %432 = fmul float %427, %50
  %433 = fadd float %431, %432
  store float %433, float* %418, align 4
  %434 = add i32 %417, -2
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %436, label %414

436:                                              ; preds = %414, %412
  %437 = phi float [ %413, %412 ], [ %430, %414 ]
  %438 = phi float* [ %411, %412 ], [ %426, %414 ]
  br i1 %218, label %448, label %439

439:                                              ; preds = %436
  %440 = getelementptr inbounds float, float* %438, i64 1
  %441 = load float, float* %440, align 4
  %442 = fmul float %441, %26
  %443 = fmul float %437, %31
  %444 = fadd float %443, %442
  store float %444, float* %440, align 4
  %445 = fmul float %437, %26
  %446 = fmul float %441, %50
  %447 = fadd float %445, %446
  store float %447, float* %438, align 4
  br label %448

448:                                              ; preds = %439, %436, %410
  br i1 %54, label %449, label %709

449:                                              ; preds = %448
  %450 = getelementptr inbounds float, float* %411, i64 %55
  br label %451

451:                                              ; preds = %451, %449
  %452 = phi i32 [ %53, %449 ], [ %464, %451 ]
  %453 = phi float* [ %450, %449 ], [ %463, %451 ]
  %454 = load float, float* %453, align 4
  %455 = getelementptr inbounds float, float* %453, i64 1
  %456 = load float, float* %455, align 4
  %457 = fmul float %456, %26
  %458 = fmul float %454, %31
  %459 = fadd float %458, %457
  store float %459, float* %455, align 4
  %460 = fmul float %454, %26
  %461 = fmul float %456, %50
  %462 = fadd float %460, %461
  %463 = getelementptr inbounds float, float* %453, i64 -1
  store float %462, float* %453, align 4
  %464 = add nsw i32 %452, -1
  %465 = icmp sgt i32 %452, 0
  br i1 %465, label %451, label %709

466:                                              ; preds = %219
  %467 = getelementptr inbounds float, float* %0, i64 %221
  br i1 %52, label %468, label %504

468:                                              ; preds = %466
  %469 = load float, float* %467, align 4
  br i1 %100, label %492, label %470

470:                                              ; preds = %468, %470
  %471 = phi float [ %486, %470 ], [ %469, %468 ]
  %472 = phi float* [ %482, %470 ], [ %467, %468 ]
  %473 = phi i32 [ %490, %470 ], [ %101, %468 ]
  %474 = getelementptr inbounds float, float* %472, i64 1
  %475 = load float, float* %474, align 4
  %476 = fmul float %475, %26
  %477 = fmul float %471, %50
  %478 = fadd float %477, %476
  store float %478, float* %474, align 4
  %479 = fmul float %471, %26
  %480 = fmul float %475, %31
  %481 = fadd float %479, %480
  store float %481, float* %472, align 4
  %482 = getelementptr inbounds float, float* %472, i64 2
  %483 = load float, float* %482, align 4
  %484 = fmul float %483, %26
  %485 = fmul float %478, %50
  %486 = fadd float %485, %484
  store float %486, float* %482, align 4
  %487 = fmul float %478, %26
  %488 = fmul float %483, %31
  %489 = fadd float %487, %488
  store float %489, float* %474, align 4
  %490 = add i32 %473, -2
  %491 = icmp eq i32 %490, 0
  br i1 %491, label %492, label %470

492:                                              ; preds = %470, %468
  %493 = phi float [ %469, %468 ], [ %486, %470 ]
  %494 = phi float* [ %467, %468 ], [ %482, %470 ]
  br i1 %102, label %504, label %495

495:                                              ; preds = %492
  %496 = getelementptr inbounds float, float* %494, i64 1
  %497 = load float, float* %496, align 4
  %498 = fmul float %497, %26
  %499 = fmul float %493, %50
  %500 = fadd float %499, %498
  store float %500, float* %496, align 4
  %501 = fmul float %493, %26
  %502 = fmul float %497, %31
  %503 = fadd float %501, %502
  store float %503, float* %494, align 4
  br label %504

504:                                              ; preds = %495, %492, %466
  br i1 %54, label %505, label %522

505:                                              ; preds = %504
  %506 = getelementptr inbounds float, float* %467, i64 %55
  br label %507

507:                                              ; preds = %507, %505
  %508 = phi i32 [ %53, %505 ], [ %520, %507 ]
  %509 = phi float* [ %506, %505 ], [ %519, %507 ]
  %510 = load float, float* %509, align 4
  %511 = getelementptr inbounds float, float* %509, i64 1
  %512 = load float, float* %511, align 4
  %513 = fmul float %512, %26
  %514 = fmul float %510, %50
  %515 = fadd float %514, %513
  store float %515, float* %511, align 4
  %516 = fmul float %510, %26
  %517 = fmul float %512, %31
  %518 = fadd float %516, %517
  %519 = getelementptr inbounds float, float* %509, i64 -1
  store float %518, float* %509, align 4
  %520 = add nsw i32 %508, -1
  %521 = icmp sgt i32 %508, 0
  br i1 %521, label %507, label %522

522:                                              ; preds = %507, %504
  br i1 %56, label %709, label %523

523:                                              ; preds = %522
  br i1 %59, label %524, label %638

524:                                              ; preds = %523
  br i1 %105, label %591, label %525

525:                                              ; preds = %524
  %526 = mul i64 %220, %66
  %527 = add i64 %526, %60
  %528 = getelementptr float, float* %0, i64 %527
  %529 = add i64 %526, %108
  %530 = getelementptr float, float* %0, i64 %529
  %531 = add i64 %526, %109
  %532 = getelementptr float, float* %0, i64 %531
  %533 = icmp ult float* %528, %532
  %534 = icmp ult float* %467, %530
  %535 = and i1 %533, %534
  br i1 %535, label %591, label %536

536:                                              ; preds = %525
  %537 = getelementptr float, float* %467, i64 %110
  br i1 %122, label %573, label %538

538:                                              ; preds = %536, %538
  %539 = phi i64 [ %570, %538 ], [ 0, %536 ]
  %540 = phi i64 [ %571, %538 ], [ %123, %536 ]
  %541 = getelementptr float, float* %467, i64 %539
  %542 = bitcast float* %541 to <4 x float>*
  %543 = load <4 x float>, <4 x float>* %542, align 4, !alias.scope !17
  %544 = getelementptr inbounds float, float* %541, i64 %60
  %545 = bitcast float* %544 to <4 x float>*
  %546 = load <4 x float>, <4 x float>* %545, align 4, !alias.scope !20, !noalias !17
  %547 = fmul <4 x float> %546, %113
  %548 = fmul <4 x float> %543, %115
  %549 = fadd <4 x float> %548, %547
  %550 = bitcast float* %544 to <4 x float>*
  store <4 x float> %549, <4 x float>* %550, align 4, !alias.scope !20, !noalias !17
  %551 = fmul <4 x float> %543, %113
  %552 = fmul <4 x float> %546, %117
  %553 = fadd <4 x float> %551, %552
  %554 = bitcast float* %541 to <4 x float>*
  store <4 x float> %553, <4 x float>* %554, align 4, !alias.scope !17
  %555 = or i64 %539, 4
  %556 = getelementptr float, float* %467, i64 %555
  %557 = bitcast float* %556 to <4 x float>*
  %558 = load <4 x float>, <4 x float>* %557, align 4, !alias.scope !17
  %559 = getelementptr inbounds float, float* %556, i64 %60
  %560 = bitcast float* %559 to <4 x float>*
  %561 = load <4 x float>, <4 x float>* %560, align 4, !alias.scope !20, !noalias !17
  %562 = fmul <4 x float> %561, %113
  %563 = fmul <4 x float> %558, %115
  %564 = fadd <4 x float> %563, %562
  %565 = bitcast float* %559 to <4 x float>*
  store <4 x float> %564, <4 x float>* %565, align 4, !alias.scope !20, !noalias !17
  %566 = fmul <4 x float> %558, %113
  %567 = fmul <4 x float> %561, %117
  %568 = fadd <4 x float> %566, %567
  %569 = bitcast float* %556 to <4 x float>*
  store <4 x float> %568, <4 x float>* %569, align 4, !alias.scope !17
  %570 = add i64 %539, 8
  %571 = add i64 %540, -2
  %572 = icmp eq i64 %571, 0
  br i1 %572, label %573, label %538, !llvm.loop !22

573:                                              ; preds = %538, %536
  %574 = phi i64 [ 0, %536 ], [ %570, %538 ]
  br i1 %124, label %590, label %575

575:                                              ; preds = %573
  %576 = getelementptr float, float* %467, i64 %574
  %577 = bitcast float* %576 to <4 x float>*
  %578 = load <4 x float>, <4 x float>* %577, align 4, !alias.scope !17
  %579 = getelementptr inbounds float, float* %576, i64 %60
  %580 = bitcast float* %579 to <4 x float>*
  %581 = load <4 x float>, <4 x float>* %580, align 4, !alias.scope !20, !noalias !17
  %582 = fmul <4 x float> %581, %113
  %583 = fmul <4 x float> %578, %115
  %584 = fadd <4 x float> %583, %582
  %585 = bitcast float* %579 to <4 x float>*
  store <4 x float> %584, <4 x float>* %585, align 4, !alias.scope !20, !noalias !17
  %586 = fmul <4 x float> %578, %113
  %587 = fmul <4 x float> %581, %117
  %588 = fadd <4 x float> %586, %587
  %589 = bitcast float* %576 to <4 x float>*
  store <4 x float> %588, <4 x float>* %589, align 4, !alias.scope !17
  br label %590

590:                                              ; preds = %573, %575
  br i1 %125, label %638, label %591

591:                                              ; preds = %590, %525, %524
  %592 = phi i32 [ 0, %525 ], [ 0, %524 ], [ %111, %590 ]
  %593 = phi float* [ %467, %525 ], [ %467, %524 ], [ %537, %590 ]
  %594 = sub i32 %93, %592
  %595 = and i32 %594, 1
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %609, label %597

597:                                              ; preds = %591
  %598 = load float, float* %593, align 4
  %599 = getelementptr inbounds float, float* %593, i64 %60
  %600 = load float, float* %599, align 4
  %601 = fmul float %600, %31
  %602 = fmul float %598, %57
  %603 = fadd float %602, %601
  store float %603, float* %599, align 4
  %604 = fmul float %598, %31
  %605 = fmul float %600, %26
  %606 = fadd float %604, %605
  %607 = getelementptr inbounds float, float* %593, i64 1
  store float %606, float* %593, align 4
  %608 = add nuw nsw i32 %592, 1
  br label %609

609:                                              ; preds = %597, %591
  %610 = phi i32 [ %608, %597 ], [ %592, %591 ]
  %611 = phi float* [ %607, %597 ], [ %593, %591 ]
  %612 = icmp eq i32 %95, %592
  br i1 %612, label %638, label %613

613:                                              ; preds = %609, %613
  %614 = phi i32 [ %636, %613 ], [ %610, %609 ]
  %615 = phi float* [ %635, %613 ], [ %611, %609 ]
  %616 = load float, float* %615, align 4
  %617 = getelementptr inbounds float, float* %615, i64 %60
  %618 = load float, float* %617, align 4
  %619 = fmul float %618, %31
  %620 = fmul float %616, %57
  %621 = fadd float %620, %619
  store float %621, float* %617, align 4
  %622 = fmul float %616, %31
  %623 = fmul float %618, %26
  %624 = fadd float %622, %623
  %625 = getelementptr inbounds float, float* %615, i64 1
  store float %624, float* %615, align 4
  %626 = load float, float* %625, align 4
  %627 = getelementptr inbounds float, float* %625, i64 %60
  %628 = load float, float* %627, align 4
  %629 = fmul float %628, %31
  %630 = fmul float %626, %57
  %631 = fadd float %630, %629
  store float %631, float* %627, align 4
  %632 = fmul float %626, %31
  %633 = fmul float %628, %26
  %634 = fadd float %632, %633
  %635 = getelementptr inbounds float, float* %615, i64 2
  store float %634, float* %625, align 4
  %636 = add nuw nsw i32 %614, 2
  %637 = icmp eq i32 %636, %58
  br i1 %637, label %638, label %613, !llvm.loop !23

638:                                              ; preds = %609, %613, %590, %523
  br i1 %64, label %639, label %709

639:                                              ; preds = %638
  %640 = getelementptr inbounds float, float* %467, i64 %65
  br i1 %130, label %691, label %641

641:                                              ; preds = %639
  %642 = ptrtoint float* %640 to i64
  %643 = mul i64 %220, %66
  %644 = add i64 %82, %643
  %645 = getelementptr float, float* %0, i64 %644
  %646 = ptrtoint float* %645 to i64
  %647 = icmp ugt i64 %137, %646
  %648 = icmp ugt i64 %139, %642
  %649 = or i1 %647, %648
  br i1 %649, label %691, label %650

650:                                              ; preds = %641
  %651 = mul i64 %220, %66
  %652 = add i64 %651, %146
  %653 = getelementptr float, float* %0, i64 %652
  %654 = add i64 %86, %651
  %655 = getelementptr float, float* %0, i64 %654
  %656 = add i64 %651, %147
  %657 = getelementptr float, float* %0, i64 %656
  %658 = add i64 %87, %651
  %659 = getelementptr float, float* %0, i64 %658
  %660 = icmp ult float* %653, %659
  %661 = icmp ult float* %657, %655
  %662 = and i1 %660, %661
  br i1 %662, label %691, label %663

663:                                              ; preds = %650
  %664 = getelementptr float, float* %640, i64 %151
  br label %665

665:                                              ; preds = %665, %663
  %666 = phi i64 [ 0, %663 ], [ %688, %665 ]
  %667 = sub i64 0, %666
  %668 = getelementptr float, float* %640, i64 %667
  %669 = getelementptr float, float* %668, i64 -3
  %670 = bitcast float* %669 to <4 x float>*
  %671 = load <4 x float>, <4 x float>* %670, align 4, !alias.scope !24
  %672 = shufflevector <4 x float> %671, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %673 = getelementptr inbounds float, float* %668, i64 %60
  %674 = getelementptr inbounds float, float* %673, i64 -3
  %675 = bitcast float* %674 to <4 x float>*
  %676 = load <4 x float>, <4 x float>* %675, align 4, !alias.scope !27, !noalias !24
  %677 = shufflevector <4 x float> %676, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %678 = fmul <4 x float> %677, %153
  %679 = fmul <4 x float> %672, %155
  %680 = fadd <4 x float> %679, %678
  %681 = shufflevector <4 x float> %680, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %682 = bitcast float* %674 to <4 x float>*
  store <4 x float> %681, <4 x float>* %682, align 4, !alias.scope !27, !noalias !24
  %683 = fmul <4 x float> %672, %153
  %684 = fmul <4 x float> %677, %157
  %685 = fadd <4 x float> %683, %684
  %686 = shufflevector <4 x float> %685, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %687 = bitcast float* %669 to <4 x float>*
  store <4 x float> %686, <4 x float>* %687, align 4, !alias.scope !24
  %688 = add i64 %666, 4
  %689 = icmp eq i64 %688, %148
  br i1 %689, label %690, label %665, !llvm.loop !29

690:                                              ; preds = %665
  br i1 %158, label %709, label %691

691:                                              ; preds = %690, %650, %641, %639
  %692 = phi i32 [ %63, %650 ], [ %63, %641 ], [ %63, %639 ], [ %150, %690 ]
  %693 = phi float* [ %640, %650 ], [ %640, %641 ], [ %640, %639 ], [ %664, %690 ]
  br label %694

694:                                              ; preds = %691, %694
  %695 = phi i32 [ %707, %694 ], [ %692, %691 ]
  %696 = phi float* [ %706, %694 ], [ %693, %691 ]
  %697 = load float, float* %696, align 4
  %698 = getelementptr inbounds float, float* %696, i64 %60
  %699 = load float, float* %698, align 4
  %700 = fmul float %699, %31
  %701 = fmul float %697, %57
  %702 = fadd float %701, %700
  store float %702, float* %698, align 4
  %703 = fmul float %697, %31
  %704 = fmul float %699, %26
  %705 = fadd float %703, %704
  %706 = getelementptr inbounds float, float* %696, i64 -1
  store float %705, float* %696, align 4
  %707 = add nsw i32 %695, -1
  %708 = icmp sgt i32 %695, 0
  br i1 %708, label %694, label %709, !llvm.loop !30

709:                                              ; preds = %694, %451, %690, %638, %448, %522
  %710 = add nuw nsw i64 %220, 1
  %711 = icmp eq i64 %710, %67
  br i1 %711, label %712, label %219

712:                                              ; preds = %709, %44, %6
  ret void
}

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden float @op_pvq_search_c(float* nocapture, i32* nocapture, i32, i32, i32) local_unnamed_addr #2 {
  %6 = sext i32 %3 to i64
  %7 = shl nsw i64 %6, 2
  %8 = alloca float, i64 %6, align 16
  %9 = bitcast float* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 %7, i1 false)
  %10 = alloca i32, i64 %6, align 16
  %11 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 %7, i1 false)
  %12 = icmp sgt i32 %3, 1
  %13 = select i1 %12, i32 %3, i32 1
  %14 = zext i32 %13 to i64
  %15 = shl nuw nsw i64 %14, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 0, i64 %15, i1 false)
  %16 = icmp sgt i64 %6, 1
  %17 = select i1 %16, i64 %6, i64 1
  %18 = icmp ult i64 %17, 8
  br i1 %18, label %59, label %19

19:                                               ; preds = %5
  %20 = icmp sgt i64 %6, 1
  %21 = select i1 %20, i64 %6, i64 1
  %22 = getelementptr float, float* %0, i64 %21
  %23 = getelementptr i32, i32* %1, i64 %21
  %24 = bitcast i32* %23 to float*
  %25 = icmp ugt float* %24, %0
  %26 = bitcast float* %22 to i32*
  %27 = icmp ugt i32* %26, %1
  %28 = and i1 %25, %27
  br i1 %28, label %59, label %29

29:                                               ; preds = %19
  %30 = and i64 %17, 9223372036854775800
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %55, %31 ]
  %33 = getelementptr inbounds float, float* %0, i64 %32
  %34 = bitcast float* %33 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !alias.scope !31, !noalias !34
  %36 = getelementptr inbounds float, float* %33, i64 4
  %37 = bitcast float* %36 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 4, !alias.scope !31, !noalias !34
  %39 = fcmp olt <4 x float> %35, zeroinitializer
  %40 = fcmp olt <4 x float> %38, zeroinitializer
  %41 = zext <4 x i1> %39 to <4 x i32>
  %42 = zext <4 x i1> %40 to <4 x i32>
  %43 = getelementptr inbounds i32, i32* %10, i64 %32
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %44, align 16, !alias.scope !36
  %45 = getelementptr inbounds i32, i32* %43, i64 4
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> %42, <4 x i32>* %46, align 16, !alias.scope !36
  %47 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %35)
  %48 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %38)
  %49 = bitcast float* %33 to <4 x float>*
  store <4 x float> %47, <4 x float>* %49, align 4, !alias.scope !31, !noalias !34
  %50 = bitcast float* %36 to <4 x float>*
  store <4 x float> %48, <4 x float>* %50, align 4, !alias.scope !31, !noalias !34
  %51 = getelementptr inbounds i32, i32* %1, i64 %32
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %52, align 4, !alias.scope !34
  %53 = getelementptr inbounds i32, i32* %51, i64 4
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %54, align 4, !alias.scope !34
  %55 = add i64 %32, 8
  %56 = icmp eq i64 %55, %30
  br i1 %56, label %57, label %31, !llvm.loop !38

57:                                               ; preds = %31
  %58 = icmp eq i64 %17, %30
  br i1 %58, label %72, label %59

59:                                               ; preds = %57, %19, %5
  %60 = phi i64 [ 0, %19 ], [ 0, %5 ], [ %30, %57 ]
  br label %61

61:                                               ; preds = %59, %61
  %62 = phi i64 [ %70, %61 ], [ %60, %59 ]
  %63 = getelementptr inbounds float, float* %0, i64 %62
  %64 = load float, float* %63, align 4
  %65 = fcmp olt float %64, 0.000000e+00
  %66 = zext i1 %65 to i32
  %67 = getelementptr inbounds i32, i32* %10, i64 %62
  store i32 %66, i32* %67, align 4
  %68 = tail call float @llvm.fabs.f32(float %64)
  store float %68, float* %63, align 4
  %69 = getelementptr inbounds i32, i32* %1, i64 %62
  store i32 0, i32* %69, align 4
  %70 = add nuw nsw i64 %62, 1
  %71 = icmp slt i64 %70, %6
  br i1 %71, label %61, label %72, !llvm.loop !39

72:                                               ; preds = %61, %57
  %73 = ashr i32 %3, 1
  %74 = icmp slt i32 %73, %2
  br i1 %74, label %75, label %123

75:                                               ; preds = %72, %75
  %76 = phi i64 [ %81, %75 ], [ 0, %72 ]
  %77 = phi float [ %80, %75 ], [ 0.000000e+00, %72 ]
  %78 = getelementptr inbounds float, float* %0, i64 %76
  %79 = load float, float* %78, align 4
  %80 = fadd float %77, %79
  %81 = add nuw nsw i64 %76, 1
  %82 = icmp slt i64 %81, %6
  br i1 %82, label %75, label %83

83:                                               ; preds = %75
  %84 = fcmp ogt float %80, 0x3CD203AFA0000000
  %85 = fcmp olt float %80, 6.400000e+01
  %86 = and i1 %84, %85
  br i1 %86, label %95, label %87

87:                                               ; preds = %83
  store float 1.000000e+00, float* %0, align 4
  %88 = getelementptr float, float* %0, i64 1
  %89 = bitcast float* %88 to i8*
  %90 = icmp sgt i32 %3, 2
  %91 = select i1 %90, i32 %3, i32 2
  %92 = add nsw i32 %91, -1
  %93 = zext i32 %92 to i64
  %94 = shl nuw nsw i64 %93, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %89, i8 0, i64 %94, i1 false)
  br label %95

95:                                               ; preds = %87, %83
  %96 = phi float [ %80, %83 ], [ 1.000000e+00, %87 ]
  %97 = sitofp i32 %2 to float
  %98 = fadd float %97, 0x3FE99999A0000000
  %99 = fdiv float 1.000000e+00, %96
  %100 = fmul float %98, %99
  br label %101

101:                                              ; preds = %101, %95
  %102 = phi i64 [ %121, %101 ], [ 0, %95 ]
  %103 = phi i32 [ %120, %101 ], [ %2, %95 ]
  %104 = phi <2 x float> [ %118, %101 ], [ zeroinitializer, %95 ]
  %105 = getelementptr inbounds float, float* %0, i64 %102
  %106 = load float, float* %105, align 4
  %107 = fmul float %100, %106
  %108 = tail call float @llvm.floor.f32(float %107)
  %109 = fptosi float %108 to i32
  %110 = getelementptr inbounds i32, i32* %1, i64 %102
  store i32 %109, i32* %110, align 4
  %111 = sitofp i32 %109 to float
  %112 = getelementptr inbounds float, float* %8, i64 %102
  %113 = load float, float* %105, align 4
  %114 = insertelement <2 x float> undef, float %111, i32 0
  %115 = shufflevector <2 x float> %114, <2 x float> undef, <2 x i32> zeroinitializer
  %116 = insertelement <2 x float> %114, float %113, i32 1
  %117 = fmul <2 x float> %115, %116
  %118 = fadd <2 x float> %104, %117
  %119 = fmul float %111, 2.000000e+00
  store float %119, float* %112, align 4
  %120 = sub nsw i32 %103, %109
  %121 = add nuw nsw i64 %102, 1
  %122 = icmp slt i64 %121, %6
  br i1 %122, label %101, label %123

123:                                              ; preds = %101, %72
  %124 = phi i32 [ %2, %72 ], [ %120, %101 ]
  %125 = phi <2 x float> [ zeroinitializer, %72 ], [ %118, %101 ]
  %126 = add nsw i32 %3, 3
  %127 = icmp sgt i32 %124, %126
  br i1 %127, label %128, label %138

128:                                              ; preds = %123
  %129 = sitofp i32 %124 to float
  %130 = fmul float %129, %129
  %131 = extractelement <2 x float> %125, i32 0
  %132 = fadd float %131, %130
  %133 = load float, float* %8, align 16
  %134 = fmul float %133, %129
  %135 = fadd float %132, %134
  %136 = load i32, i32* %1, align 4
  %137 = add nsw i32 %136, %124
  store i32 %137, i32* %1, align 4
  br label %143

138:                                              ; preds = %123
  %139 = icmp sgt i32 %124, 0
  %140 = extractelement <2 x float> %125, i32 0
  br i1 %139, label %232, label %143

141:                                              ; preds = %264
  %142 = extractelement <2 x float> %273, i32 0
  br label %143

143:                                              ; preds = %141, %128, %138
  %144 = phi float [ %140, %138 ], [ %135, %128 ], [ %142, %141 ]
  %145 = icmp sgt i64 %6, 1
  %146 = select i1 %145, i64 %6, i64 1
  %147 = icmp ult i64 %146, 8
  br i1 %147, label %148, label %150

148:                                              ; preds = %230, %143
  %149 = phi i64 [ 0, %143 ], [ %151, %230 ]
  br label %280

150:                                              ; preds = %143
  %151 = and i64 %146, 9223372036854775800
  %152 = add nsw i64 %151, -8
  %153 = lshr exact i64 %152, 3
  %154 = add nuw nsw i64 %153, 1
  %155 = and i64 %154, 1
  %156 = icmp eq i64 %152, 0
  br i1 %156, label %206, label %157

157:                                              ; preds = %150
  %158 = sub nuw nsw i64 %154, %155
  br label %159

159:                                              ; preds = %159, %157
  %160 = phi i64 [ 0, %157 ], [ %203, %159 ]
  %161 = phi i64 [ %158, %157 ], [ %204, %159 ]
  %162 = getelementptr inbounds i32, i32* %1, i64 %160
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = getelementptr inbounds i32, i32* %162, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds i32, i32* %10, i64 %160
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 16
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 16
  %174 = sub nsw <4 x i32> zeroinitializer, %170
  %175 = sub nsw <4 x i32> zeroinitializer, %173
  %176 = xor <4 x i32> %164, %174
  %177 = xor <4 x i32> %167, %175
  %178 = add nsw <4 x i32> %176, %170
  %179 = add nsw <4 x i32> %177, %173
  %180 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %180, align 4
  %181 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %181, align 4
  %182 = or i64 %160, 8
  %183 = getelementptr inbounds i32, i32* %1, i64 %182
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = getelementptr inbounds i32, i32* %183, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = getelementptr inbounds i32, i32* %10, i64 %182
  %190 = bitcast i32* %189 to <4 x i32>*
  %191 = load <4 x i32>, <4 x i32>* %190, align 16
  %192 = getelementptr inbounds i32, i32* %189, i64 4
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 16
  %195 = sub nsw <4 x i32> zeroinitializer, %191
  %196 = sub nsw <4 x i32> zeroinitializer, %194
  %197 = xor <4 x i32> %185, %195
  %198 = xor <4 x i32> %188, %196
  %199 = add nsw <4 x i32> %197, %191
  %200 = add nsw <4 x i32> %198, %194
  %201 = bitcast i32* %183 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %201, align 4
  %202 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> %200, <4 x i32>* %202, align 4
  %203 = add i64 %160, 16
  %204 = add i64 %161, -2
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %159, !llvm.loop !40

206:                                              ; preds = %159, %150
  %207 = phi i64 [ 0, %150 ], [ %203, %159 ]
  %208 = icmp eq i64 %155, 0
  br i1 %208, label %230, label %209

209:                                              ; preds = %206
  %210 = getelementptr inbounds i32, i32* %1, i64 %207
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4
  %213 = getelementptr inbounds i32, i32* %210, i64 4
  %214 = bitcast i32* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 4
  %216 = getelementptr inbounds i32, i32* %10, i64 %207
  %217 = bitcast i32* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 16
  %219 = getelementptr inbounds i32, i32* %216, i64 4
  %220 = bitcast i32* %219 to <4 x i32>*
  %221 = load <4 x i32>, <4 x i32>* %220, align 16
  %222 = sub nsw <4 x i32> zeroinitializer, %218
  %223 = sub nsw <4 x i32> zeroinitializer, %221
  %224 = xor <4 x i32> %212, %222
  %225 = xor <4 x i32> %215, %223
  %226 = add nsw <4 x i32> %224, %218
  %227 = add nsw <4 x i32> %225, %221
  %228 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %226, <4 x i32>* %228, align 4
  %229 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %229, align 4
  br label %230

230:                                              ; preds = %206, %209
  %231 = icmp eq i64 %146, %151
  br i1 %231, label %291, label %148

232:                                              ; preds = %138, %264
  %233 = phi i32 [ %278, %264 ], [ 0, %138 ]
  %234 = phi <2 x float> [ %273, %264 ], [ %125, %138 ]
  %235 = extractelement <2 x float> %234, i32 0
  %236 = fadd float %235, 1.000000e+00
  %237 = load float, float* %0, align 4
  %238 = extractelement <2 x float> %234, i32 1
  %239 = fadd float %238, %237
  %240 = load float, float* %8, align 16
  %241 = fadd float %236, %240
  %242 = fmul float %239, %239
  br label %243

243:                                              ; preds = %243, %232
  %244 = phi i64 [ %262, %243 ], [ 1, %232 ]
  %245 = phi i32 [ %259, %243 ], [ 0, %232 ]
  %246 = phi float [ %260, %243 ], [ %242, %232 ]
  %247 = phi float [ %261, %243 ], [ %241, %232 ]
  %248 = getelementptr inbounds float, float* %0, i64 %244
  %249 = load float, float* %248, align 4
  %250 = fadd float %238, %249
  %251 = getelementptr inbounds float, float* %8, i64 %244
  %252 = load float, float* %251, align 4
  %253 = fadd float %236, %252
  %254 = fmul float %250, %250
  %255 = fmul float %247, %254
  %256 = fmul float %246, %253
  %257 = fcmp ogt float %255, %256
  %258 = trunc i64 %244 to i32
  %259 = select i1 %257, i32 %258, i32 %245, !prof !41
  %260 = select i1 %257, float %254, float %246, !prof !41
  %261 = select i1 %257, float %253, float %247, !prof !41
  %262 = add nuw nsw i64 %244, 1
  %263 = icmp slt i64 %262, %6
  br i1 %263, label %243, label %264

264:                                              ; preds = %243
  %265 = sext i32 %259 to i64
  %266 = getelementptr inbounds float, float* %0, i64 %265
  %267 = load float, float* %266, align 4
  %268 = getelementptr inbounds float, float* %8, i64 %265
  %269 = load float, float* %268, align 4
  %270 = insertelement <2 x float> %234, float %236, i32 0
  %271 = insertelement <2 x float> undef, float %269, i32 0
  %272 = insertelement <2 x float> %271, float %267, i32 1
  %273 = fadd <2 x float> %270, %272
  %274 = fadd float %269, 2.000000e+00
  store float %274, float* %268, align 4
  %275 = getelementptr inbounds i32, i32* %1, i64 %265
  %276 = load i32, i32* %275, align 4
  %277 = add nsw i32 %276, 1
  store i32 %277, i32* %275, align 4
  %278 = add nuw nsw i32 %233, 1
  %279 = icmp eq i32 %278, %124
  br i1 %279, label %141, label %232

280:                                              ; preds = %148, %280
  %281 = phi i64 [ %289, %280 ], [ %149, %148 ]
  %282 = getelementptr inbounds i32, i32* %1, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = getelementptr inbounds i32, i32* %10, i64 %281
  %285 = load i32, i32* %284, align 4
  %286 = sub nsw i32 0, %285
  %287 = xor i32 %283, %286
  %288 = add nsw i32 %287, %285
  store i32 %288, i32* %282, align 4
  %289 = add nuw nsw i64 %281, 1
  %290 = icmp slt i64 %289, %6
  br i1 %290, label %280, label %291, !llvm.loop !42

291:                                              ; preds = %280, %230
  ret float %144
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @alg_quant(float*, i32, i32, i32, i32, %struct.ec_ctx*, float, i32, i32) local_unnamed_addr #2 {
  %10 = icmp sgt i32 %2, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %9
  tail call void @celt_fatal(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i32 338) #8
  unreachable

12:                                               ; preds = %9
  %13 = icmp sgt i32 %1, 1
  br i1 %13, label %15, label %14

14:                                               ; preds = %12
  tail call void @celt_fatal(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i32 339) #8
  unreachable

15:                                               ; preds = %12
  %16 = add nuw nsw i32 %1, 3
  %17 = sext i32 %16 to i64
  %18 = shl nsw i64 %17, 2
  %19 = alloca i32, i64 %17, align 16
  %20 = bitcast i32* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 %18, i1 false)
  tail call void @exp_rotation(float* %0, i32 %1, i32 1, i32 %4, i32 %2, i32 %3)
  %21 = call float @op_pvq_search_sse2(float* %0, i32* nonnull %19, i32 %2, i32 %1, i32 %8) #7
  call void @encode_pulses(i32* nonnull %19, i32 %1, i32 %2, %struct.ec_ctx* %5) #7
  %22 = icmp eq i32 %7, 0
  br i1 %22, label %109, label %23

23:                                               ; preds = %15
  %24 = call float @sqrtf(float %21) #1, !noalias !44
  %25 = fdiv float 1.000000e+00, %24
  %26 = fmul float %25, %6
  %27 = sext i32 %1 to i64
  %28 = icmp ult i32 %1, 8
  br i1 %28, label %97, label %29

29:                                               ; preds = %23
  %30 = and i64 %27, -8
  %31 = insertelement <4 x float> undef, float %26, i32 0
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <4 x i32> zeroinitializer
  %33 = insertelement <4 x float> undef, float %26, i32 0
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> zeroinitializer
  %35 = add nsw i64 %30, -8
  %36 = lshr exact i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %35, 0
  br i1 %39, label %77, label %40

40:                                               ; preds = %29
  %41 = sub nuw nsw i64 %37, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %74, %42 ]
  %44 = phi i64 [ %41, %40 ], [ %75, %42 ]
  %45 = getelementptr inbounds i32, i32* %19, i64 %43
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 16, !alias.scope !48, !noalias !49
  %48 = getelementptr inbounds i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 16, !alias.scope !48, !noalias !49
  %51 = sitofp <4 x i32> %47 to <4 x float>
  %52 = sitofp <4 x i32> %50 to <4 x float>
  %53 = fmul <4 x float> %32, %51
  %54 = fmul <4 x float> %34, %52
  %55 = getelementptr inbounds float, float* %0, i64 %43
  %56 = bitcast float* %55 to <4 x float>*
  store <4 x float> %53, <4 x float>* %56, align 4, !alias.scope !49, !noalias !48
  %57 = getelementptr inbounds float, float* %55, i64 4
  %58 = bitcast float* %57 to <4 x float>*
  store <4 x float> %54, <4 x float>* %58, align 4, !alias.scope !49, !noalias !48
  %59 = or i64 %43, 8
  %60 = getelementptr inbounds i32, i32* %19, i64 %59
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 16, !alias.scope !48, !noalias !49
  %63 = getelementptr inbounds i32, i32* %60, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 16, !alias.scope !48, !noalias !49
  %66 = sitofp <4 x i32> %62 to <4 x float>
  %67 = sitofp <4 x i32> %65 to <4 x float>
  %68 = fmul <4 x float> %32, %66
  %69 = fmul <4 x float> %34, %67
  %70 = getelementptr inbounds float, float* %0, i64 %59
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %68, <4 x float>* %71, align 4, !alias.scope !49, !noalias !48
  %72 = getelementptr inbounds float, float* %70, i64 4
  %73 = bitcast float* %72 to <4 x float>*
  store <4 x float> %69, <4 x float>* %73, align 4, !alias.scope !49, !noalias !48
  %74 = add i64 %43, 16
  %75 = add i64 %44, -2
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %42, !llvm.loop !50

77:                                               ; preds = %42, %29
  %78 = phi i64 [ 0, %29 ], [ %74, %42 ]
  %79 = icmp eq i64 %38, 0
  br i1 %79, label %95, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds i32, i32* %19, i64 %78
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 16, !alias.scope !48, !noalias !49
  %84 = getelementptr inbounds i32, i32* %81, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 16, !alias.scope !48, !noalias !49
  %87 = sitofp <4 x i32> %83 to <4 x float>
  %88 = sitofp <4 x i32> %86 to <4 x float>
  %89 = fmul <4 x float> %32, %87
  %90 = fmul <4 x float> %34, %88
  %91 = getelementptr inbounds float, float* %0, i64 %78
  %92 = bitcast float* %91 to <4 x float>*
  store <4 x float> %89, <4 x float>* %92, align 4, !alias.scope !49, !noalias !48
  %93 = getelementptr inbounds float, float* %91, i64 4
  %94 = bitcast float* %93 to <4 x float>*
  store <4 x float> %90, <4 x float>* %94, align 4, !alias.scope !49, !noalias !48
  br label %95

95:                                               ; preds = %77, %80
  %96 = icmp eq i64 %30, %27
  br i1 %96, label %108, label %97

97:                                               ; preds = %95, %23
  %98 = phi i64 [ 0, %23 ], [ %30, %95 ]
  br label %99

99:                                               ; preds = %97, %99
  %100 = phi i64 [ %106, %99 ], [ %98, %97 ]
  %101 = getelementptr inbounds i32, i32* %19, i64 %100
  %102 = load i32, i32* %101, align 4, !alias.scope !48, !noalias !49
  %103 = sitofp i32 %102 to float
  %104 = fmul float %26, %103
  %105 = getelementptr inbounds float, float* %0, i64 %100
  store float %104, float* %105, align 4, !alias.scope !49, !noalias !48
  %106 = add nuw nsw i64 %100, 1
  %107 = icmp eq i64 %106, %27
  br i1 %107, label %108, label %99, !llvm.loop !51

108:                                              ; preds = %99, %95
  call void @exp_rotation(float* %0, i32 %1, i32 -1, i32 %4, i32 %2, i32 %3)
  br label %109

109:                                              ; preds = %15, %108
  %110 = icmp slt i32 %4, 2
  br i1 %110, label %232, label %111

111:                                              ; preds = %109
  %112 = udiv i32 %1, %4
  %113 = sext i32 %112 to i64
  %114 = zext i32 %4 to i64
  %115 = icmp sgt i64 %113, 1
  %116 = select i1 %115, i64 %113, i64 1
  %117 = icmp ult i64 %116, 8
  %118 = and i64 %116, 9223372036854775800
  %119 = add nsw i64 %118, -8
  %120 = lshr exact i64 %119, 3
  %121 = add nuw nsw i64 %120, 1
  %122 = and i64 %121, 3
  %123 = icmp ult i64 %119, 24
  %124 = sub nsw i64 %121, %122
  %125 = icmp eq i64 %122, 0
  %126 = icmp eq i64 %116, %118
  br label %127

127:                                              ; preds = %223, %111
  %128 = phi i64 [ %230, %223 ], [ 0, %111 ]
  %129 = phi i32 [ %229, %223 ], [ 0, %111 ]
  %130 = mul nsw i64 %128, %113
  br i1 %117, label %211, label %131

131:                                              ; preds = %127
  br i1 %123, label %179, label %132

132:                                              ; preds = %131, %132
  %133 = phi i64 [ %176, %132 ], [ 0, %131 ]
  %134 = phi <4 x i32> [ %174, %132 ], [ zeroinitializer, %131 ]
  %135 = phi <4 x i32> [ %175, %132 ], [ zeroinitializer, %131 ]
  %136 = phi i64 [ %177, %132 ], [ %124, %131 ]
  %137 = add nsw i64 %133, %130
  %138 = getelementptr inbounds i32, i32* %19, i64 %137
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = getelementptr inbounds i32, i32* %138, i64 4
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4
  %144 = or <4 x i32> %140, %134
  %145 = or <4 x i32> %143, %135
  %146 = or i64 %133, 8
  %147 = add nsw i64 %146, %130
  %148 = getelementptr inbounds i32, i32* %19, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = or <4 x i32> %150, %144
  %155 = or <4 x i32> %153, %145
  %156 = or i64 %133, 16
  %157 = add nsw i64 %156, %130
  %158 = getelementptr inbounds i32, i32* %19, i64 %157
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4
  %161 = getelementptr inbounds i32, i32* %158, i64 4
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 4
  %164 = or <4 x i32> %160, %154
  %165 = or <4 x i32> %163, %155
  %166 = or i64 %133, 24
  %167 = add nsw i64 %166, %130
  %168 = getelementptr inbounds i32, i32* %19, i64 %167
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = or <4 x i32> %170, %164
  %175 = or <4 x i32> %173, %165
  %176 = add i64 %133, 32
  %177 = add i64 %136, -4
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %132, !llvm.loop !52

179:                                              ; preds = %132, %131
  %180 = phi <4 x i32> [ undef, %131 ], [ %174, %132 ]
  %181 = phi <4 x i32> [ undef, %131 ], [ %175, %132 ]
  %182 = phi i64 [ 0, %131 ], [ %176, %132 ]
  %183 = phi <4 x i32> [ zeroinitializer, %131 ], [ %174, %132 ]
  %184 = phi <4 x i32> [ zeroinitializer, %131 ], [ %175, %132 ]
  br i1 %125, label %202, label %185

185:                                              ; preds = %179, %185
  %186 = phi i64 [ %199, %185 ], [ %182, %179 ]
  %187 = phi <4 x i32> [ %197, %185 ], [ %183, %179 ]
  %188 = phi <4 x i32> [ %198, %185 ], [ %184, %179 ]
  %189 = phi i64 [ %200, %185 ], [ %122, %179 ]
  %190 = add nsw i64 %186, %130
  %191 = getelementptr inbounds i32, i32* %19, i64 %190
  %192 = bitcast i32* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 4
  %194 = getelementptr inbounds i32, i32* %191, i64 4
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4
  %197 = or <4 x i32> %193, %187
  %198 = or <4 x i32> %196, %188
  %199 = add i64 %186, 8
  %200 = add i64 %189, -1
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %185, !llvm.loop !53

202:                                              ; preds = %185, %179
  %203 = phi <4 x i32> [ %180, %179 ], [ %197, %185 ]
  %204 = phi <4 x i32> [ %181, %179 ], [ %198, %185 ]
  %205 = or <4 x i32> %204, %203
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %207 = or <4 x i32> %205, %206
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %209 = or <4 x i32> %207, %208
  %210 = extractelement <4 x i32> %209, i32 0
  br i1 %126, label %223, label %211

211:                                              ; preds = %202, %127
  %212 = phi i64 [ 0, %127 ], [ %118, %202 ]
  %213 = phi i32 [ 0, %127 ], [ %210, %202 ]
  br label %214

214:                                              ; preds = %211, %214
  %215 = phi i64 [ %221, %214 ], [ %212, %211 ]
  %216 = phi i32 [ %220, %214 ], [ %213, %211 ]
  %217 = add nsw i64 %215, %130
  %218 = getelementptr inbounds i32, i32* %19, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = or i32 %219, %216
  %221 = add nuw nsw i64 %215, 1
  %222 = icmp slt i64 %221, %113
  br i1 %222, label %214, label %223, !llvm.loop !55

223:                                              ; preds = %214, %202
  %224 = phi i32 [ %210, %202 ], [ %220, %214 ]
  %225 = icmp ne i32 %224, 0
  %226 = zext i1 %225 to i32
  %227 = trunc i64 %128 to i32
  %228 = shl i32 %226, %227
  %229 = or i32 %228, %129
  %230 = add nuw nsw i64 %128, 1
  %231 = icmp eq i64 %230, %114
  br i1 %231, label %232, label %127

232:                                              ; preds = %223, %109
  %233 = phi i32 [ 1, %109 ], [ %229, %223 ]
  ret i32 %233
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #4

declare float @op_pvq_search_sse2(float*, i32*, i32, i32, i32) local_unnamed_addr #5

declare void @encode_pulses(i32*, i32, i32, %struct.ec_ctx*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @alg_unquant(float* nocapture, i32, i32, i32, i32, %struct.ec_ctx*, float) local_unnamed_addr #2 {
  %8 = icmp sgt i32 %2, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i32 371) #8
  unreachable

10:                                               ; preds = %7
  %11 = icmp sgt i32 %1, 1
  br i1 %11, label %13, label %12

12:                                               ; preds = %10
  tail call void @celt_fatal(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i32 372) #8
  unreachable

13:                                               ; preds = %10
  %14 = sext i32 %1 to i64
  %15 = shl nsw i64 %14, 2
  %16 = alloca i32, i64 %14, align 16
  %17 = bitcast i32* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 %15, i1 false)
  %18 = call float @decode_pulses(i32* nonnull %16, i32 %1, i32 %2, %struct.ec_ctx* %5) #7
  %19 = call float @sqrtf(float %18) #1, !noalias !56
  %20 = fdiv float 1.000000e+00, %19
  %21 = fmul float %20, %6
  %22 = icmp ult i32 %1, 8
  br i1 %22, label %91, label %23

23:                                               ; preds = %13
  %24 = and i64 %14, -8
  %25 = insertelement <4 x float> undef, float %21, i32 0
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> zeroinitializer
  %27 = insertelement <4 x float> undef, float %21, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = add nsw i64 %24, -8
  %30 = lshr exact i64 %29, 3
  %31 = add nuw nsw i64 %30, 1
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %29, 0
  br i1 %33, label %71, label %34

34:                                               ; preds = %23
  %35 = sub nuw nsw i64 %31, %32
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %68, %36 ]
  %38 = phi i64 [ %35, %34 ], [ %69, %36 ]
  %39 = getelementptr inbounds i32, i32* %16, i64 %37
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 16, !alias.scope !60, !noalias !61
  %42 = getelementptr inbounds i32, i32* %39, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 16, !alias.scope !60, !noalias !61
  %45 = sitofp <4 x i32> %41 to <4 x float>
  %46 = sitofp <4 x i32> %44 to <4 x float>
  %47 = fmul <4 x float> %26, %45
  %48 = fmul <4 x float> %28, %46
  %49 = getelementptr inbounds float, float* %0, i64 %37
  %50 = bitcast float* %49 to <4 x float>*
  store <4 x float> %47, <4 x float>* %50, align 4, !alias.scope !61, !noalias !60
  %51 = getelementptr inbounds float, float* %49, i64 4
  %52 = bitcast float* %51 to <4 x float>*
  store <4 x float> %48, <4 x float>* %52, align 4, !alias.scope !61, !noalias !60
  %53 = or i64 %37, 8
  %54 = getelementptr inbounds i32, i32* %16, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 16, !alias.scope !60, !noalias !61
  %57 = getelementptr inbounds i32, i32* %54, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 16, !alias.scope !60, !noalias !61
  %60 = sitofp <4 x i32> %56 to <4 x float>
  %61 = sitofp <4 x i32> %59 to <4 x float>
  %62 = fmul <4 x float> %26, %60
  %63 = fmul <4 x float> %28, %61
  %64 = getelementptr inbounds float, float* %0, i64 %53
  %65 = bitcast float* %64 to <4 x float>*
  store <4 x float> %62, <4 x float>* %65, align 4, !alias.scope !61, !noalias !60
  %66 = getelementptr inbounds float, float* %64, i64 4
  %67 = bitcast float* %66 to <4 x float>*
  store <4 x float> %63, <4 x float>* %67, align 4, !alias.scope !61, !noalias !60
  %68 = add i64 %37, 16
  %69 = add i64 %38, -2
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %36, !llvm.loop !62

71:                                               ; preds = %36, %23
  %72 = phi i64 [ 0, %23 ], [ %68, %36 ]
  %73 = icmp eq i64 %32, 0
  br i1 %73, label %89, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds i32, i32* %16, i64 %72
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 16, !alias.scope !60, !noalias !61
  %78 = getelementptr inbounds i32, i32* %75, i64 4
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 16, !alias.scope !60, !noalias !61
  %81 = sitofp <4 x i32> %77 to <4 x float>
  %82 = sitofp <4 x i32> %80 to <4 x float>
  %83 = fmul <4 x float> %26, %81
  %84 = fmul <4 x float> %28, %82
  %85 = getelementptr inbounds float, float* %0, i64 %72
  %86 = bitcast float* %85 to <4 x float>*
  store <4 x float> %83, <4 x float>* %86, align 4, !alias.scope !61, !noalias !60
  %87 = getelementptr inbounds float, float* %85, i64 4
  %88 = bitcast float* %87 to <4 x float>*
  store <4 x float> %84, <4 x float>* %88, align 4, !alias.scope !61, !noalias !60
  br label %89

89:                                               ; preds = %71, %74
  %90 = icmp eq i64 %24, %14
  br i1 %90, label %102, label %91

91:                                               ; preds = %89, %13
  %92 = phi i64 [ 0, %13 ], [ %24, %89 ]
  br label %93

93:                                               ; preds = %91, %93
  %94 = phi i64 [ %100, %93 ], [ %92, %91 ]
  %95 = getelementptr inbounds i32, i32* %16, i64 %94
  %96 = load i32, i32* %95, align 4, !alias.scope !60, !noalias !61
  %97 = sitofp i32 %96 to float
  %98 = fmul float %21, %97
  %99 = getelementptr inbounds float, float* %0, i64 %94
  store float %98, float* %99, align 4, !alias.scope !61, !noalias !60
  %100 = add nuw nsw i64 %94, 1
  %101 = icmp eq i64 %100, %14
  br i1 %101, label %102, label %93, !llvm.loop !63

102:                                              ; preds = %93, %89
  call void @exp_rotation(float* %0, i32 %1, i32 -1, i32 %4, i32 %2, i32 %3)
  %103 = icmp slt i32 %4, 2
  br i1 %103, label %225, label %104

104:                                              ; preds = %102
  %105 = udiv i32 %1, %4
  %106 = sext i32 %105 to i64
  %107 = zext i32 %4 to i64
  %108 = icmp sgt i64 %106, 1
  %109 = select i1 %108, i64 %106, i64 1
  %110 = icmp ult i64 %109, 8
  %111 = and i64 %109, 9223372036854775800
  %112 = add nsw i64 %111, -8
  %113 = lshr exact i64 %112, 3
  %114 = add nuw nsw i64 %113, 1
  %115 = and i64 %114, 3
  %116 = icmp ult i64 %112, 24
  %117 = sub nsw i64 %114, %115
  %118 = icmp eq i64 %115, 0
  %119 = icmp eq i64 %109, %111
  br label %120

120:                                              ; preds = %216, %104
  %121 = phi i64 [ %223, %216 ], [ 0, %104 ]
  %122 = phi i32 [ %222, %216 ], [ 0, %104 ]
  %123 = mul nsw i64 %121, %106
  br i1 %110, label %204, label %124

124:                                              ; preds = %120
  br i1 %116, label %172, label %125

125:                                              ; preds = %124, %125
  %126 = phi i64 [ %169, %125 ], [ 0, %124 ]
  %127 = phi <4 x i32> [ %167, %125 ], [ zeroinitializer, %124 ]
  %128 = phi <4 x i32> [ %168, %125 ], [ zeroinitializer, %124 ]
  %129 = phi i64 [ %170, %125 ], [ %117, %124 ]
  %130 = add nsw i64 %126, %123
  %131 = getelementptr inbounds i32, i32* %16, i64 %130
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4
  %134 = getelementptr inbounds i32, i32* %131, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4
  %137 = or <4 x i32> %133, %127
  %138 = or <4 x i32> %136, %128
  %139 = or i64 %126, 8
  %140 = add nsw i64 %139, %123
  %141 = getelementptr inbounds i32, i32* %16, i64 %140
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4
  %144 = getelementptr inbounds i32, i32* %141, i64 4
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = or <4 x i32> %143, %137
  %148 = or <4 x i32> %146, %138
  %149 = or i64 %126, 16
  %150 = add nsw i64 %149, %123
  %151 = getelementptr inbounds i32, i32* %16, i64 %150
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = getelementptr inbounds i32, i32* %151, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4
  %157 = or <4 x i32> %153, %147
  %158 = or <4 x i32> %156, %148
  %159 = or i64 %126, 24
  %160 = add nsw i64 %159, %123
  %161 = getelementptr inbounds i32, i32* %16, i64 %160
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 4
  %164 = getelementptr inbounds i32, i32* %161, i64 4
  %165 = bitcast i32* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 4
  %167 = or <4 x i32> %163, %157
  %168 = or <4 x i32> %166, %158
  %169 = add i64 %126, 32
  %170 = add i64 %129, -4
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %125, !llvm.loop !64

172:                                              ; preds = %125, %124
  %173 = phi <4 x i32> [ undef, %124 ], [ %167, %125 ]
  %174 = phi <4 x i32> [ undef, %124 ], [ %168, %125 ]
  %175 = phi i64 [ 0, %124 ], [ %169, %125 ]
  %176 = phi <4 x i32> [ zeroinitializer, %124 ], [ %167, %125 ]
  %177 = phi <4 x i32> [ zeroinitializer, %124 ], [ %168, %125 ]
  br i1 %118, label %195, label %178

178:                                              ; preds = %172, %178
  %179 = phi i64 [ %192, %178 ], [ %175, %172 ]
  %180 = phi <4 x i32> [ %190, %178 ], [ %176, %172 ]
  %181 = phi <4 x i32> [ %191, %178 ], [ %177, %172 ]
  %182 = phi i64 [ %193, %178 ], [ %115, %172 ]
  %183 = add nsw i64 %179, %123
  %184 = getelementptr inbounds i32, i32* %16, i64 %183
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4
  %187 = getelementptr inbounds i32, i32* %184, i64 4
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 4
  %190 = or <4 x i32> %186, %180
  %191 = or <4 x i32> %189, %181
  %192 = add i64 %179, 8
  %193 = add i64 %182, -1
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %178, !llvm.loop !65

195:                                              ; preds = %178, %172
  %196 = phi <4 x i32> [ %173, %172 ], [ %190, %178 ]
  %197 = phi <4 x i32> [ %174, %172 ], [ %191, %178 ]
  %198 = or <4 x i32> %197, %196
  %199 = shufflevector <4 x i32> %198, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %200 = or <4 x i32> %198, %199
  %201 = shufflevector <4 x i32> %200, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %202 = or <4 x i32> %200, %201
  %203 = extractelement <4 x i32> %202, i32 0
  br i1 %119, label %216, label %204

204:                                              ; preds = %195, %120
  %205 = phi i64 [ 0, %120 ], [ %111, %195 ]
  %206 = phi i32 [ 0, %120 ], [ %203, %195 ]
  br label %207

207:                                              ; preds = %204, %207
  %208 = phi i64 [ %214, %207 ], [ %205, %204 ]
  %209 = phi i32 [ %213, %207 ], [ %206, %204 ]
  %210 = add nsw i64 %208, %123
  %211 = getelementptr inbounds i32, i32* %16, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = or i32 %212, %209
  %214 = add nuw nsw i64 %208, 1
  %215 = icmp slt i64 %214, %106
  br i1 %215, label %207, label %216, !llvm.loop !66

216:                                              ; preds = %207, %195
  %217 = phi i32 [ %203, %195 ], [ %213, %207 ]
  %218 = icmp ne i32 %217, 0
  %219 = zext i1 %218 to i32
  %220 = trunc i64 %121 to i32
  %221 = shl i32 %219, %220
  %222 = or i32 %221, %122
  %223 = add nuw nsw i64 %121, 1
  %224 = icmp eq i64 %223, %107
  br i1 %224, label %225, label %120

225:                                              ; preds = %216, %102
  %226 = phi i32 [ 1, %102 ], [ %222, %216 ]
  ret i32 %226
}

declare float @decode_pulses(i32*, i32, i32, %struct.ec_ctx*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @renormalise_vector(float*, i32, float, i32) local_unnamed_addr #2 {
  %5 = tail call float @celt_inner_prod_sse(float* %0, float* %0, i32 %1) #7
  %6 = fadd float %5, 0x3CD203AFA0000000
  %7 = tail call float @sqrtf(float %6) #1
  %8 = fdiv float 1.000000e+00, %7
  %9 = fmul float %8, %2
  %10 = icmp sgt i32 %1, 0
  br i1 %10, label %11, label %85

11:                                               ; preds = %4
  %12 = add i32 %1, -1
  %13 = zext i32 %12 to i64
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 8
  br i1 %15, label %74, label %16

16:                                               ; preds = %11
  %17 = and i64 %14, 8589934584
  %18 = getelementptr float, float* %0, i64 %17
  %19 = trunc i64 %17 to i32
  %20 = insertelement <4 x float> undef, float %9, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = insertelement <4 x float> undef, float %9, i32 0
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> zeroinitializer
  %24 = add nsw i64 %17, -8
  %25 = lshr exact i64 %24, 3
  %26 = add nuw nsw i64 %25, 1
  %27 = and i64 %26, 1
  %28 = icmp eq i64 %24, 0
  br i1 %28, label %58, label %29

29:                                               ; preds = %16
  %30 = sub nuw nsw i64 %26, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %55, %31 ]
  %33 = phi i64 [ %30, %29 ], [ %56, %31 ]
  %34 = getelementptr float, float* %0, i64 %32
  %35 = bitcast float* %34 to <4 x float>*
  %36 = load <4 x float>, <4 x float>* %35, align 4
  %37 = getelementptr float, float* %34, i64 4
  %38 = bitcast float* %37 to <4 x float>*
  %39 = load <4 x float>, <4 x float>* %38, align 4
  %40 = fmul <4 x float> %21, %36
  %41 = fmul <4 x float> %23, %39
  %42 = bitcast float* %34 to <4 x float>*
  store <4 x float> %40, <4 x float>* %42, align 4
  %43 = bitcast float* %37 to <4 x float>*
  store <4 x float> %41, <4 x float>* %43, align 4
  %44 = or i64 %32, 8
  %45 = getelementptr float, float* %0, i64 %44
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 4
  %48 = getelementptr float, float* %45, i64 4
  %49 = bitcast float* %48 to <4 x float>*
  %50 = load <4 x float>, <4 x float>* %49, align 4
  %51 = fmul <4 x float> %21, %47
  %52 = fmul <4 x float> %23, %50
  %53 = bitcast float* %45 to <4 x float>*
  store <4 x float> %51, <4 x float>* %53, align 4
  %54 = bitcast float* %48 to <4 x float>*
  store <4 x float> %52, <4 x float>* %54, align 4
  %55 = add i64 %32, 16
  %56 = add i64 %33, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %31, !llvm.loop !67

58:                                               ; preds = %31, %16
  %59 = phi i64 [ 0, %16 ], [ %55, %31 ]
  %60 = icmp eq i64 %27, 0
  br i1 %60, label %72, label %61

61:                                               ; preds = %58
  %62 = getelementptr float, float* %0, i64 %59
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 4
  %65 = getelementptr float, float* %62, i64 4
  %66 = bitcast float* %65 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 4
  %68 = fmul <4 x float> %21, %64
  %69 = fmul <4 x float> %23, %67
  %70 = bitcast float* %62 to <4 x float>*
  store <4 x float> %68, <4 x float>* %70, align 4
  %71 = bitcast float* %65 to <4 x float>*
  store <4 x float> %69, <4 x float>* %71, align 4
  br label %72

72:                                               ; preds = %58, %61
  %73 = icmp eq i64 %14, %17
  br i1 %73, label %85, label %74

74:                                               ; preds = %72, %11
  %75 = phi float* [ %0, %11 ], [ %18, %72 ]
  %76 = phi i32 [ 0, %11 ], [ %19, %72 ]
  br label %77

77:                                               ; preds = %74, %77
  %78 = phi float* [ %82, %77 ], [ %75, %74 ]
  %79 = phi i32 [ %83, %77 ], [ %76, %74 ]
  %80 = load float, float* %78, align 4
  %81 = fmul float %9, %80
  store float %81, float* %78, align 4
  %82 = getelementptr inbounds float, float* %78, i64 1
  %83 = add nuw nsw i32 %79, 1
  %84 = icmp eq i32 %83, %1
  br i1 %84, label %85, label %77, !llvm.loop !68

85:                                               ; preds = %77, %72, %4
  ret void
}

declare float @celt_inner_prod_sse(float*, float*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @stereo_itheta(float*, float*, i32, i32, i32) local_unnamed_addr #2 {
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %44, label %7

7:                                                ; preds = %5
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %67

9:                                                ; preds = %7
  %10 = zext i32 %3 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i32 %3, 1
  br i1 %12, label %49, label %13

13:                                               ; preds = %9
  %14 = sub nsw i64 %10, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i64 [ 0, %13 ], [ %41, %15 ]
  %17 = phi float [ 0x3CD203AFA0000000, %13 ], [ %40, %15 ]
  %18 = phi float [ 0x3CD203AFA0000000, %13 ], [ %38, %15 ]
  %19 = phi i64 [ %14, %13 ], [ %42, %15 ]
  %20 = getelementptr inbounds float, float* %0, i64 %16
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds float, float* %1, i64 %16
  %23 = load float, float* %22, align 4
  %24 = fadd float %21, %23
  %25 = fsub float %21, %23
  %26 = fmul float %24, %24
  %27 = fadd float %18, %26
  %28 = fmul float %25, %25
  %29 = fadd float %17, %28
  %30 = or i64 %16, 1
  %31 = getelementptr inbounds float, float* %0, i64 %30
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds float, float* %1, i64 %30
  %34 = load float, float* %33, align 4
  %35 = fadd float %32, %34
  %36 = fsub float %32, %34
  %37 = fmul float %35, %35
  %38 = fadd float %27, %37
  %39 = fmul float %36, %36
  %40 = fadd float %29, %39
  %41 = add nuw nsw i64 %16, 2
  %42 = add i64 %19, -2
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %49, label %15

44:                                               ; preds = %5
  %45 = tail call float @celt_inner_prod_sse(float* %0, float* %0, i32 %3) #7
  %46 = fadd float %45, 0x3CD203AFA0000000
  %47 = tail call float @celt_inner_prod_sse(float* %1, float* %1, i32 %3) #7
  %48 = fadd float %47, 0x3CD203AFA0000000
  br label %67

49:                                               ; preds = %15, %9
  %50 = phi float [ undef, %9 ], [ %38, %15 ]
  %51 = phi float [ undef, %9 ], [ %40, %15 ]
  %52 = phi i64 [ 0, %9 ], [ %41, %15 ]
  %53 = phi float [ 0x3CD203AFA0000000, %9 ], [ %40, %15 ]
  %54 = phi float [ 0x3CD203AFA0000000, %9 ], [ %38, %15 ]
  %55 = icmp eq i64 %11, 0
  br i1 %55, label %67, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds float, float* %0, i64 %52
  %58 = load float, float* %57, align 4
  %59 = getelementptr inbounds float, float* %1, i64 %52
  %60 = load float, float* %59, align 4
  %61 = fadd float %58, %60
  %62 = fsub float %58, %60
  %63 = fmul float %62, %62
  %64 = fadd float %53, %63
  %65 = fmul float %61, %61
  %66 = fadd float %54, %65
  br label %67

67:                                               ; preds = %56, %49, %7, %44
  %68 = phi float [ %46, %44 ], [ 0x3CD203AFA0000000, %7 ], [ %50, %49 ], [ %66, %56 ]
  %69 = phi float [ %48, %44 ], [ 0x3CD203AFA0000000, %7 ], [ %51, %49 ], [ %64, %56 ]
  %70 = tail call float @sqrtf(float %68) #1
  %71 = tail call float @sqrtf(float %69) #1
  %72 = fmul float %70, %70
  %73 = fmul float %71, %71
  %74 = fadd float %72, %73
  %75 = fcmp olt float %74, 0x3C32725DE0000000
  br i1 %75, label %110, label %76

76:                                               ; preds = %67
  %77 = fcmp olt float %72, %73
  br i1 %77, label %78, label %93

78:                                               ; preds = %76
  %79 = fmul float %72, 0x3FE5B62420000000
  %80 = fadd float %73, %79
  %81 = fmul float %72, 0x3FB6012CA0000000
  %82 = fadd float %73, %81
  %83 = fmul float %80, %82
  %84 = fmul float %70, %71
  %85 = fmul float %72, 0x3FDB9F00A0000000
  %86 = fadd float %73, %85
  %87 = fmul float %84, %86
  %88 = fsub float -0.000000e+00, %87
  %89 = fdiv float %88, %83
  %90 = fcmp olt float %71, 0.000000e+00
  %91 = select i1 %90, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  %92 = fadd float %91, %89
  br label %110

93:                                               ; preds = %76
  %94 = fmul float %73, 0x3FE5B62420000000
  %95 = fadd float %72, %94
  %96 = fmul float %73, 0x3FB6012CA0000000
  %97 = fadd float %72, %96
  %98 = fmul float %95, %97
  %99 = fmul float %70, %71
  %100 = fmul float %73, 0x3FDB9F00A0000000
  %101 = fadd float %72, %100
  %102 = fmul float %99, %101
  %103 = fdiv float %102, %98
  %104 = fcmp olt float %71, 0.000000e+00
  %105 = select i1 %104, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  %106 = fadd float %105, %103
  %107 = fcmp olt float %99, 0.000000e+00
  %108 = select i1 %107, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  %109 = fsub float %106, %108
  br label %110

110:                                              ; preds = %67, %78, %93
  %111 = phi float [ %92, %78 ], [ %109, %93 ], [ 0.000000e+00, %67 ]
  %112 = fmul float %111, 0x40C45F30E0000000
  %113 = fadd float %112, 5.000000e-01
  %114 = tail call float @llvm.floor.f32(float %113)
  %115 = fptosi float %114 to i32
  ret i32 %115
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #6

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !8}
!23 = distinct !{!23, !8}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !8}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = !{!37}
!37 = distinct !{!37, !33}
!38 = distinct !{!38, !8}
!39 = distinct !{!39, !8}
!40 = distinct !{!40, !8}
!41 = !{!"branch_weights", i32 1, i32 2000}
!42 = distinct !{!42, !43, !8}
!43 = !{!"llvm.loop.unroll.runtime.disable"}
!44 = !{!45, !47}
!45 = distinct !{!45, !46, !"normalise_residual: argument 0"}
!46 = distinct !{!46, !"normalise_residual"}
!47 = distinct !{!47, !46, !"normalise_residual: argument 1"}
!48 = !{!45}
!49 = !{!47}
!50 = distinct !{!50, !8}
!51 = distinct !{!51, !43, !8}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !54}
!54 = !{!"llvm.loop.unroll.disable"}
!55 = distinct !{!55, !43, !8}
!56 = !{!57, !59}
!57 = distinct !{!57, !58, !"normalise_residual: argument 0"}
!58 = distinct !{!58, !"normalise_residual"}
!59 = distinct !{!59, !58, !"normalise_residual: argument 1"}
!60 = !{!57}
!61 = !{!59}
!62 = distinct !{!62, !8}
!63 = distinct !{!63, !43, !8}
!64 = distinct !{!64, !8}
!65 = distinct !{!65, !54}
!66 = distinct !{!66, !43, !8}
!67 = distinct !{!67, !8}
!68 = distinct !{!68, !43, !8}
