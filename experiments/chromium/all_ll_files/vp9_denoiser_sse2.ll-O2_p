; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_denoiser_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_denoiser_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@b_width_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@b_height_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_pels_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_denoiser_filter_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture, i32, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %10 = alloca [8 x [16 x i8]], align 16
  %11 = alloca [8 x [16 x i8]], align 16
  %12 = alloca [8 x [16 x i8]], align 16
  %13 = alloca [4 x [4 x <2 x i64>]], align 16
  switch i8 %7, label %548 [
    i8 6, label %14
    i8 9, label %14
    i8 12, label %14
    i8 7, label %14
    i8 5, label %14
    i8 8, label %14
    i8 10, label %14
    i8 11, label %14
    i8 3, label %323
    i8 4, label %323
  ]

14:                                               ; preds = %9, %9, %9, %9, %9, %9, %9, %9
  %15 = icmp ne i32 %6, 0
  %16 = icmp slt i32 %8, 25
  %17 = and i1 %15, %16
  %18 = bitcast [4 x [4 x <2 x i64>]]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 256, i1 false) #4
  %19 = select i1 %17, i8 5, i8 4
  %20 = insertelement <16 x i8> undef, i8 %19, i32 0
  %21 = select i1 %17, i8 8, i8 7
  %22 = select i1 %16, i8 %21, i8 6
  %23 = insertelement <16 x i8> undef, i8 %22, i32 0
  %24 = zext i8 %7 to i64
  %25 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = shl i32 4, %27
  %29 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %24
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = ashr i32 %28, 4
  %33 = icmp sgt i32 %28, 15
  %34 = sext i32 %32 to i64
  br i1 %33, label %43, label %316

35:                                               ; preds = %316
  %36 = icmp eq i8 %7, 5
  %37 = icmp slt i32 %28, 16
  %38 = sext i32 %28 to i64
  %39 = sub nsw i64 0, %38
  %40 = sext i32 %1 to i64
  %41 = sext i32 %3 to i64
  %42 = sext i32 %5 to i64
  br label %48

43:                                               ; preds = %14, %43
  %44 = phi i64 [ %46, %43 ], [ 0, %14 ]
  %45 = getelementptr inbounds [4 x [4 x <2 x i64>]], [4 x [4 x <2 x i64>]]* %13, i64 0, i64 %44, i64 0
  store <2 x i64> zeroinitializer, <2 x i64>* %45, align 16
  %46 = add nuw nsw i64 %44, 1
  %47 = icmp slt i64 %46, %34
  br i1 %47, label %43, label %301

48:                                               ; preds = %147, %35
  %49 = phi i32 [ 0, %35 ], [ %148, %147 ]
  %50 = phi i32 [ 0, %35 ], [ %155, %147 ]
  %51 = phi i8* [ %0, %35 ], [ %150, %147 ]
  %52 = phi i8* [ %2, %35 ], [ %152, %147 ]
  %53 = phi i8* [ %4, %35 ], [ %154, %147 ]
  br i1 %33, label %54, label %107

54:                                               ; preds = %48
  %55 = lshr i32 %50, 4
  %56 = zext i32 %55 to i64
  br label %57

57:                                               ; preds = %57, %54
  %58 = phi i64 [ 0, %54 ], [ %105, %57 ]
  %59 = phi i8* [ %51, %54 ], [ %102, %57 ]
  %60 = phi i8* [ %52, %54 ], [ %103, %57 ]
  %61 = phi i8* [ %53, %54 ], [ %104, %57 ]
  %62 = getelementptr inbounds [4 x [4 x <2 x i64>]], [4 x [4 x <2 x i64>]]* %13, i64 0, i64 %58, i64 %56
  %63 = bitcast <2 x i64>* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 16
  %65 = bitcast i8* %59 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1
  %67 = bitcast i8* %60 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %68, <16 x i8> %66) #4
  %70 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %66, <16 x i8> %68) #4
  %71 = icmp eq <16 x i8> %69, zeroinitializer
  %72 = sext <16 x i1> %71 to <16 x i8>
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  %74 = or <16 x i8> %70, %69
  %75 = icmp ult <16 x i8> %74, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %76 = select <16 x i1> %75, <16 x i8> %74, <16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %77 = icmp slt <16 x i8> %76, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %78 = icmp slt <16 x i8> %76, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %79 = icmp sgt <16 x i8> %317, %76
  %80 = sext <16 x i1> %79 to <16 x i8>
  %81 = bitcast <16 x i8> %80 to <2 x i64>
  %82 = and <16 x i8> %76, %80
  %83 = bitcast <16 x i8> %82 to <2 x i64>
  %84 = select <16 x i1> %77, <16 x i8> <i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2>, <16 x i8> zeroinitializer
  %85 = zext <16 x i1> %78 to <16 x i8>
  %86 = sub <16 x i8> %318, %85
  %87 = add <16 x i8> %86, %84
  %88 = bitcast <16 x i8> %87 to <2 x i64>
  %89 = xor <2 x i64> %81, <i64 -1, i64 -1>
  %90 = and <2 x i64> %88, %89
  %91 = or <2 x i64> %90, %83
  %92 = xor <2 x i64> %73, <i64 -1, i64 -1>
  %93 = and <2 x i64> %91, %92
  %94 = and <2 x i64> %91, %73
  %95 = bitcast <2 x i64> %93 to <16 x i8>
  %96 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %66, <16 x i8> %95) #4
  %97 = bitcast <2 x i64> %94 to <16 x i8>
  %98 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %96, <16 x i8> %97) #4
  %99 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %98, <16 x i8>* %99, align 1
  %100 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %64, <16 x i8> %95) #4
  %101 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %100, <16 x i8> %97) #4
  store <16 x i8> %101, <16 x i8>* %63, align 16
  %102 = getelementptr inbounds i8, i8* %59, i64 16
  %103 = getelementptr inbounds i8, i8* %60, i64 16
  %104 = getelementptr inbounds i8, i8* %61, i64 16
  %105 = add nuw nsw i64 %58, 1
  %106 = icmp slt i64 %105, %34
  br i1 %106, label %57, label %107

107:                                              ; preds = %57, %48
  %108 = phi i8* [ %53, %48 ], [ %104, %57 ]
  %109 = phi i8* [ %52, %48 ], [ %103, %57 ]
  %110 = phi i8* [ %51, %48 ], [ %102, %57 ]
  %111 = and i32 %50, 15
  %112 = icmp eq i32 %111, 15
  %113 = icmp eq i32 %50, 7
  %114 = and i1 %36, %113
  %115 = or i1 %112, %114
  %116 = xor i1 %115, true
  %117 = or i1 %37, %116
  br i1 %117, label %147, label %118

118:                                              ; preds = %107
  %119 = lshr i32 %50, 4
  %120 = zext i32 %119 to i64
  br label %121

121:                                              ; preds = %121, %118
  %122 = phi i64 [ 0, %118 ], [ %145, %121 ]
  %123 = phi i32 [ %49, %118 ], [ %144, %121 ]
  %124 = getelementptr inbounds [4 x [4 x <2 x i64>]], [4 x [4 x <2 x i64>]]* %13, i64 0, i64 %122, i64 %120
  %125 = bitcast <2 x i64>* %124 to <16 x i8>*
  %126 = load <16 x i8>, <16 x i8>* %125, align 16
  %127 = shufflevector <16 x i8> %126, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %128 = bitcast <16 x i8> %127 to <8 x i16>
  %129 = ashr <8 x i16> %128, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %130 = shufflevector <16 x i8> %126, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %131 = bitcast <16 x i8> %130 to <8 x i16>
  %132 = ashr <8 x i16> %131, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %133 = add nsw <8 x i16> %132, %129
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %135 = bitcast <4 x i32> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = add <4 x i32> %134, %137
  %139 = bitcast <4 x i32> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = bitcast <16 x i8> %140 to <4 x i32>
  %142 = add <4 x i32> %138, %141
  %143 = extractelement <4 x i32> %142, i32 0
  %144 = add nsw i32 %143, %123
  %145 = add nuw nsw i64 %122, 1
  %146 = icmp slt i64 %145, %34
  br i1 %146, label %121, label %147

147:                                              ; preds = %121, %107
  %148 = phi i32 [ %49, %107 ], [ %144, %121 ]
  %149 = getelementptr inbounds i8, i8* %110, i64 %39
  %150 = getelementptr inbounds i8, i8* %149, i64 %40
  %151 = getelementptr inbounds i8, i8* %109, i64 %39
  %152 = getelementptr inbounds i8, i8* %151, i64 %41
  %153 = getelementptr inbounds i8, i8* %108, i64 %39
  %154 = getelementptr inbounds i8, i8* %153, i64 %42
  %155 = add nuw nsw i32 %50, 1
  %156 = icmp eq i32 %155, %319
  br i1 %156, label %157, label %48

157:                                              ; preds = %147, %316
  %158 = phi i8* [ %4, %316 ], [ %154, %147 ]
  %159 = phi i8* [ %2, %316 ], [ %152, %147 ]
  %160 = phi i8* [ %0, %316 ], [ %150, %147 ]
  %161 = phi i32 [ 0, %316 ], [ %148, %147 ]
  %162 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %24
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = icmp eq i32 %6, 0
  %166 = select i1 %165, i32 2, i32 3
  %167 = shl i32 %166, %164
  %168 = icmp slt i32 %161, 0
  %169 = sub nsw i32 0, %161
  %170 = select i1 %168, i32 %169, i32 %161
  %171 = icmp sgt i32 %170, %167
  br i1 %171, label %172, label %300

172:                                              ; preds = %157
  %173 = sub nsw i32 %170, %167
  %174 = ashr i32 %173, %164
  %175 = add nsw i32 %174, 1
  %176 = icmp slt i32 %175, 4
  br i1 %176, label %177, label %321

177:                                              ; preds = %172
  %178 = trunc i32 %175 to i8
  %179 = insertelement <16 x i8> undef, i8 %178, i32 0
  %180 = shufflevector <16 x i8> %179, <16 x i8> undef, <16 x i32> zeroinitializer
  br i1 %320, label %181, label %297

181:                                              ; preds = %177
  %182 = mul nsw i32 %319, %5
  %183 = sext i32 %182 to i64
  %184 = sub nsw i64 0, %183
  %185 = getelementptr inbounds i8, i8* %158, i64 %184
  %186 = mul nsw i32 %319, %3
  %187 = sext i32 %186 to i64
  %188 = sub nsw i64 0, %187
  %189 = getelementptr inbounds i8, i8* %159, i64 %188
  %190 = mul nsw i32 %319, %1
  %191 = sext i32 %190 to i64
  %192 = sub nsw i64 0, %191
  %193 = getelementptr inbounds i8, i8* %160, i64 %192
  %194 = icmp eq i8 %7, 5
  %195 = icmp slt i32 %28, 16
  %196 = sext i32 %28 to i64
  %197 = sub nsw i64 0, %196
  %198 = sext i32 %1 to i64
  %199 = sext i32 %3 to i64
  %200 = sext i32 %5 to i64
  br label %201

201:                                              ; preds = %283, %181
  %202 = phi i32 [ 0, %181 ], [ %284, %283 ]
  %203 = phi i32 [ 0, %181 ], [ %291, %283 ]
  %204 = phi i8* [ %193, %181 ], [ %286, %283 ]
  %205 = phi i8* [ %189, %181 ], [ %288, %283 ]
  %206 = phi i8* [ %185, %181 ], [ %290, %283 ]
  br i1 %33, label %207, label %243

207:                                              ; preds = %201
  %208 = lshr i32 %203, 4
  %209 = zext i32 %208 to i64
  br label %210

210:                                              ; preds = %210, %207
  %211 = phi i64 [ 0, %207 ], [ %241, %210 ]
  %212 = phi i8* [ %204, %207 ], [ %238, %210 ]
  %213 = phi i8* [ %205, %207 ], [ %239, %210 ]
  %214 = phi i8* [ %206, %207 ], [ %240, %210 ]
  %215 = getelementptr inbounds [4 x [4 x <2 x i64>]], [4 x [4 x <2 x i64>]]* %13, i64 0, i64 %211, i64 %209
  %216 = bitcast <2 x i64>* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 16
  %218 = bitcast i8* %214 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = bitcast i8* %212 to <16 x i8>*
  %221 = load <16 x i8>, <16 x i8>* %220, align 1
  %222 = bitcast i8* %213 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1
  %224 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %223, <16 x i8> %221) #4
  %225 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %221, <16 x i8> %223) #4
  %226 = icmp eq <16 x i8> %224, zeroinitializer
  %227 = sext <16 x i1> %226 to <16 x i8>
  %228 = or <16 x i8> %225, %224
  %229 = icmp ult <16 x i8> %228, %180
  %230 = select <16 x i1> %229, <16 x i8> %228, <16 x i8> %180
  %231 = and <16 x i8> %230, %227
  %232 = xor <16 x i8> %227, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %233 = and <16 x i8> %230, %232
  %234 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %219, <16 x i8> %233) #4
  %235 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %234, <16 x i8> %231) #4
  store <16 x i8> %235, <16 x i8>* %218, align 1
  %236 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %217, <16 x i8> %233) #4
  %237 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %236, <16 x i8> %231) #4
  store <16 x i8> %237, <16 x i8>* %216, align 16
  %238 = getelementptr inbounds i8, i8* %212, i64 16
  %239 = getelementptr inbounds i8, i8* %213, i64 16
  %240 = getelementptr inbounds i8, i8* %214, i64 16
  %241 = add nuw nsw i64 %211, 1
  %242 = icmp slt i64 %241, %34
  br i1 %242, label %210, label %243

243:                                              ; preds = %210, %201
  %244 = phi i8* [ %206, %201 ], [ %240, %210 ]
  %245 = phi i8* [ %205, %201 ], [ %239, %210 ]
  %246 = phi i8* [ %204, %201 ], [ %238, %210 ]
  %247 = and i32 %203, 15
  %248 = icmp eq i32 %247, 15
  %249 = icmp eq i32 %203, 7
  %250 = and i1 %194, %249
  %251 = or i1 %248, %250
  %252 = xor i1 %251, true
  %253 = or i1 %195, %252
  br i1 %253, label %283, label %254

254:                                              ; preds = %243
  %255 = lshr i32 %203, 4
  %256 = zext i32 %255 to i64
  br label %257

257:                                              ; preds = %257, %254
  %258 = phi i64 [ 0, %254 ], [ %281, %257 ]
  %259 = phi i32 [ %202, %254 ], [ %280, %257 ]
  %260 = getelementptr inbounds [4 x [4 x <2 x i64>]], [4 x [4 x <2 x i64>]]* %13, i64 0, i64 %258, i64 %256
  %261 = bitcast <2 x i64>* %260 to <16 x i8>*
  %262 = load <16 x i8>, <16 x i8>* %261, align 16
  %263 = shufflevector <16 x i8> %262, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %264 = bitcast <16 x i8> %263 to <8 x i16>
  %265 = ashr <8 x i16> %264, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %266 = shufflevector <16 x i8> %262, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %267 = bitcast <16 x i8> %266 to <8 x i16>
  %268 = ashr <8 x i16> %267, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %269 = add nsw <8 x i16> %268, %265
  %270 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %269, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %271 = bitcast <4 x i32> %270 to <16 x i8>
  %272 = shufflevector <16 x i8> %271, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %273 = bitcast <16 x i8> %272 to <4 x i32>
  %274 = add <4 x i32> %270, %273
  %275 = bitcast <4 x i32> %274 to <16 x i8>
  %276 = shufflevector <16 x i8> %275, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %277 = bitcast <16 x i8> %276 to <4 x i32>
  %278 = add <4 x i32> %274, %277
  %279 = extractelement <4 x i32> %278, i32 0
  %280 = add nsw i32 %279, %259
  %281 = add nuw nsw i64 %258, 1
  %282 = icmp slt i64 %281, %34
  br i1 %282, label %257, label %283

283:                                              ; preds = %257, %243
  %284 = phi i32 [ %202, %243 ], [ %280, %257 ]
  %285 = getelementptr inbounds i8, i8* %246, i64 %197
  %286 = getelementptr inbounds i8, i8* %285, i64 %198
  %287 = getelementptr inbounds i8, i8* %245, i64 %197
  %288 = getelementptr inbounds i8, i8* %287, i64 %199
  %289 = getelementptr inbounds i8, i8* %244, i64 %197
  %290 = getelementptr inbounds i8, i8* %289, i64 %200
  %291 = add nuw nsw i32 %203, 1
  %292 = icmp eq i32 %291, %319
  br i1 %292, label %293, label %201

293:                                              ; preds = %283
  %294 = icmp slt i32 %284, 0
  %295 = sub nsw i32 0, %284
  %296 = select i1 %294, i32 %295, i32 %284
  br label %297

297:                                              ; preds = %293, %177
  %298 = phi i32 [ 0, %177 ], [ %296, %293 ]
  %299 = icmp sgt i32 %298, %167
  br i1 %299, label %321, label %300

300:                                              ; preds = %297, %157
  br label %321

301:                                              ; preds = %43, %301
  %302 = phi i64 [ %304, %301 ], [ 0, %43 ]
  %303 = getelementptr inbounds [4 x [4 x <2 x i64>]], [4 x [4 x <2 x i64>]]* %13, i64 0, i64 %302, i64 1
  store <2 x i64> zeroinitializer, <2 x i64>* %303, align 16
  %304 = add nuw nsw i64 %302, 1
  %305 = icmp slt i64 %304, %34
  br i1 %305, label %301, label %306

306:                                              ; preds = %301, %306
  %307 = phi i64 [ %309, %306 ], [ 0, %301 ]
  %308 = getelementptr inbounds [4 x [4 x <2 x i64>]], [4 x [4 x <2 x i64>]]* %13, i64 0, i64 %307, i64 2
  store <2 x i64> zeroinitializer, <2 x i64>* %308, align 16
  %309 = add nuw nsw i64 %307, 1
  %310 = icmp slt i64 %309, %34
  br i1 %310, label %306, label %311

311:                                              ; preds = %306, %311
  %312 = phi i64 [ %314, %311 ], [ 0, %306 ]
  %313 = getelementptr inbounds [4 x [4 x <2 x i64>]], [4 x [4 x <2 x i64>]]* %13, i64 0, i64 %312, i64 3
  store <2 x i64> zeroinitializer, <2 x i64>* %313, align 16
  %314 = add nuw nsw i64 %312, 1
  %315 = icmp slt i64 %314, %34
  br i1 %315, label %311, label %316

316:                                              ; preds = %311, %14
  %317 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> zeroinitializer
  %318 = shufflevector <16 x i8> %23, <16 x i8> undef, <16 x i32> zeroinitializer
  %319 = shl i32 4, %31
  %320 = icmp sgt i32 %319, 0
  br i1 %320, label %35, label %157

321:                                              ; preds = %172, %297, %300
  %322 = phi i32 [ 1, %300 ], [ 0, %297 ], [ 0, %172 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %18) #4
  br label %548

323:                                              ; preds = %9, %9
  %324 = icmp ne i32 %6, 0
  %325 = icmp slt i32 %8, 25
  %326 = and i1 %324, %325
  %327 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %10, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %327) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %327, i8 -86, i64 128, i1 false) #4
  %328 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %11, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %328) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %328, i8 -86, i64 128, i1 false) #4
  %329 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %329) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %329, i8 -86, i64 128, i1 false) #4
  %330 = select i1 %326, i8 5, i8 4
  %331 = insertelement <16 x i8> undef, i8 %330, i32 0
  %332 = shufflevector <16 x i8> %331, <16 x i8> undef, <16 x i32> zeroinitializer
  %333 = select i1 %326, i8 8, i8 7
  %334 = select i1 %325, i8 %333, i8 6
  %335 = insertelement <16 x i8> undef, i8 %334, i32 0
  %336 = shufflevector <16 x i8> %335, <16 x i8> undef, <16 x i32> zeroinitializer
  %337 = zext i8 %7 to i64
  %338 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %337
  %339 = load i8, i8* %338, align 1
  %340 = zext i8 %339 to i32
  %341 = shl i32 4, %340
  %342 = ashr i32 %341, 1
  %343 = icmp sgt i32 %341, 1
  br i1 %343, label %344, label %433

344:                                              ; preds = %323
  %345 = sext i32 %1 to i64
  %346 = sext i32 %3 to i64
  %347 = sext i32 %5 to i64
  %348 = shl i32 %1, 1
  %349 = sext i32 %348 to i64
  %350 = shl i32 %3, 1
  %351 = sext i32 %350 to i64
  %352 = shl i32 %5, 1
  %353 = sext i32 %352 to i64
  %354 = sext i32 %342 to i64
  br label %355

355:                                              ; preds = %355, %344
  %356 = phi i64 [ 0, %344 ], [ %431, %355 ]
  %357 = phi <16 x i8> [ zeroinitializer, %344 ], [ %424, %355 ]
  %358 = phi i8* [ %0, %344 ], [ %428, %355 ]
  %359 = phi i8* [ %2, %344 ], [ %429, %355 ]
  %360 = phi i8* [ %4, %344 ], [ %430, %355 ]
  %361 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %10, i64 0, i64 %356, i64 0
  %362 = bitcast i8* %358 to i64*
  %363 = bitcast i8* %361 to i64*
  %364 = load i64, i64* %362, align 1
  store i64 %364, i64* %363, align 16
  %365 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %10, i64 0, i64 %356, i64 8
  %366 = getelementptr inbounds i8, i8* %358, i64 %345
  %367 = bitcast i8* %366 to i64*
  %368 = bitcast i8* %365 to i64*
  %369 = load i64, i64* %367, align 1
  store i64 %369, i64* %368, align 8
  %370 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %11, i64 0, i64 %356, i64 0
  %371 = bitcast i8* %359 to i64*
  %372 = bitcast i8* %370 to i64*
  %373 = load i64, i64* %371, align 1
  store i64 %373, i64* %372, align 16
  %374 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %11, i64 0, i64 %356, i64 8
  %375 = getelementptr inbounds i8, i8* %359, i64 %346
  %376 = bitcast i8* %375 to i64*
  %377 = bitcast i8* %374 to i64*
  %378 = load i64, i64* %376, align 1
  store i64 %378, i64* %377, align 8
  %379 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 %356, i64 0
  %380 = bitcast i8* %360 to i64*
  %381 = bitcast i8* %379 to i64*
  %382 = load i64, i64* %380, align 1
  store i64 %382, i64* %381, align 16
  %383 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 %356, i64 8
  %384 = getelementptr inbounds i8, i8* %360, i64 %347
  %385 = bitcast i8* %384 to i64*
  %386 = bitcast i8* %383 to i64*
  %387 = load i64, i64* %385, align 1
  store i64 %387, i64* %386, align 8
  %388 = bitcast i8* %361 to <16 x i8>*
  %389 = load <16 x i8>, <16 x i8>* %388, align 16
  %390 = bitcast i8* %370 to <16 x i8>*
  %391 = load <16 x i8>, <16 x i8>* %390, align 16
  %392 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %391, <16 x i8> %389) #4
  %393 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %389, <16 x i8> %391) #4
  %394 = icmp eq <16 x i8> %392, zeroinitializer
  %395 = sext <16 x i1> %394 to <16 x i8>
  %396 = bitcast <16 x i8> %395 to <2 x i64>
  %397 = or <16 x i8> %393, %392
  %398 = icmp ult <16 x i8> %397, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %399 = select <16 x i1> %398, <16 x i8> %397, <16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %400 = icmp slt <16 x i8> %399, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %401 = icmp slt <16 x i8> %399, <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>
  %402 = icmp sgt <16 x i8> %332, %399
  %403 = sext <16 x i1> %402 to <16 x i8>
  %404 = bitcast <16 x i8> %403 to <2 x i64>
  %405 = and <16 x i8> %399, %403
  %406 = bitcast <16 x i8> %405 to <2 x i64>
  %407 = select <16 x i1> %400, <16 x i8> <i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2>, <16 x i8> zeroinitializer
  %408 = zext <16 x i1> %401 to <16 x i8>
  %409 = sub <16 x i8> %336, %408
  %410 = add <16 x i8> %409, %407
  %411 = bitcast <16 x i8> %410 to <2 x i64>
  %412 = xor <2 x i64> %404, <i64 -1, i64 -1>
  %413 = and <2 x i64> %411, %412
  %414 = or <2 x i64> %413, %406
  %415 = xor <2 x i64> %396, <i64 -1, i64 -1>
  %416 = and <2 x i64> %414, %415
  %417 = and <2 x i64> %414, %396
  %418 = bitcast <2 x i64> %416 to <16 x i8>
  %419 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %389, <16 x i8> %418) #4
  %420 = bitcast <2 x i64> %417 to <16 x i8>
  %421 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %419, <16 x i8> %420) #4
  %422 = bitcast i8* %379 to <16 x i8>*
  store <16 x i8> %421, <16 x i8>* %422, align 16
  %423 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %357, <16 x i8> %418) #4
  %424 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %423, <16 x i8> %420) #4
  %425 = bitcast <16 x i8> %421 to <2 x i64>
  %426 = extractelement <2 x i64> %425, i32 0
  store i64 %426, i64* %380, align 1
  %427 = load i64, i64* %386, align 8
  store i64 %427, i64* %385, align 1
  %428 = getelementptr inbounds i8, i8* %358, i64 %349
  %429 = getelementptr inbounds i8, i8* %359, i64 %351
  %430 = getelementptr inbounds i8, i8* %360, i64 %353
  %431 = add nuw nsw i64 %356, 1
  %432 = icmp slt i64 %431, %354
  br i1 %432, label %355, label %433

433:                                              ; preds = %355, %323
  %434 = phi i8* [ %4, %323 ], [ %430, %355 ]
  %435 = phi <16 x i8> [ zeroinitializer, %323 ], [ %424, %355 ]
  %436 = shufflevector <16 x i8> %435, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %437 = bitcast <16 x i8> %436 to <8 x i16>
  %438 = ashr <8 x i16> %437, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %439 = shufflevector <16 x i8> %435, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %440 = bitcast <16 x i8> %439 to <8 x i16>
  %441 = ashr <8 x i16> %440, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %442 = add nsw <8 x i16> %441, %438
  %443 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %442, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %444 = bitcast <4 x i32> %443 to <16 x i8>
  %445 = shufflevector <16 x i8> %444, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %446 = bitcast <16 x i8> %445 to <4 x i32>
  %447 = add <4 x i32> %443, %446
  %448 = bitcast <4 x i32> %447 to <16 x i8>
  %449 = shufflevector <16 x i8> %448, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %450 = bitcast <16 x i8> %449 to <4 x i32>
  %451 = add <4 x i32> %447, %450
  %452 = extractelement <4 x i32> %451, i32 0
  %453 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %337
  %454 = load i8, i8* %453, align 1
  %455 = zext i8 %454 to i32
  %456 = icmp eq i32 %6, 0
  %457 = select i1 %456, i32 2, i32 3
  %458 = shl i32 %457, %455
  %459 = icmp slt i32 %452, 0
  %460 = sub nsw i32 0, %452
  %461 = select i1 %459, i32 %460, i32 %452
  %462 = icmp sgt i32 %461, %458
  br i1 %462, label %463, label %545

463:                                              ; preds = %433
  %464 = sub nsw i32 %461, %458
  %465 = ashr i32 %464, %455
  %466 = add nsw i32 %465, 1
  %467 = icmp slt i32 %466, 4
  br i1 %467, label %468, label %546

468:                                              ; preds = %463
  %469 = trunc i32 %466 to i8
  %470 = insertelement <16 x i8> undef, i8 %469, i32 0
  %471 = shufflevector <16 x i8> %470, <16 x i8> undef, <16 x i32> zeroinitializer
  br i1 %343, label %472, label %539

472:                                              ; preds = %468
  %473 = and i32 %341, -2
  %474 = mul nsw i32 %473, %5
  %475 = sext i32 %474 to i64
  %476 = sub nsw i64 0, %475
  %477 = getelementptr inbounds i8, i8* %434, i64 %476
  %478 = sext i32 %5 to i64
  %479 = shl i32 %5, 1
  %480 = sext i32 %479 to i64
  %481 = sext i32 %342 to i64
  br label %482

482:                                              ; preds = %482, %472
  %483 = phi i64 [ 0, %472 ], [ %518, %482 ]
  %484 = phi <16 x i8> [ %435, %472 ], [ %508, %482 ]
  %485 = phi i8* [ %477, %472 ], [ %517, %482 ]
  %486 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %10, i64 0, i64 %483, i64 0
  %487 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %11, i64 0, i64 %483, i64 0
  %488 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 %483, i64 0
  %489 = bitcast i8* %488 to <16 x i8>*
  %490 = load <16 x i8>, <16 x i8>* %489, align 16
  %491 = bitcast i8* %486 to <16 x i8>*
  %492 = load <16 x i8>, <16 x i8>* %491, align 16
  %493 = bitcast i8* %487 to <16 x i8>*
  %494 = load <16 x i8>, <16 x i8>* %493, align 16
  %495 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %494, <16 x i8> %492) #4
  %496 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %492, <16 x i8> %494) #4
  %497 = icmp eq <16 x i8> %495, zeroinitializer
  %498 = sext <16 x i1> %497 to <16 x i8>
  %499 = or <16 x i8> %496, %495
  %500 = icmp ult <16 x i8> %499, %471
  %501 = select <16 x i1> %500, <16 x i8> %499, <16 x i8> %471
  %502 = and <16 x i8> %501, %498
  %503 = xor <16 x i8> %498, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %504 = and <16 x i8> %501, %503
  %505 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %490, <16 x i8> %504) #4
  %506 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %505, <16 x i8> %502) #4
  store <16 x i8> %506, <16 x i8>* %489, align 16
  %507 = tail call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %484, <16 x i8> %504) #4
  %508 = tail call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %507, <16 x i8> %502) #4
  %509 = bitcast i8* %485 to i64*
  %510 = bitcast <16 x i8> %506 to <2 x i64>
  %511 = extractelement <2 x i64> %510, i32 0
  store i64 %511, i64* %509, align 1
  %512 = getelementptr inbounds i8, i8* %485, i64 %478
  %513 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* %12, i64 0, i64 %483, i64 8
  %514 = bitcast i8* %513 to i64*
  %515 = bitcast i8* %512 to i64*
  %516 = load i64, i64* %514, align 8
  store i64 %516, i64* %515, align 1
  %517 = getelementptr inbounds i8, i8* %485, i64 %480
  %518 = add nuw nsw i64 %483, 1
  %519 = icmp slt i64 %518, %481
  br i1 %519, label %482, label %520

520:                                              ; preds = %482
  %521 = shufflevector <16 x i8> %508, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %522 = bitcast <16 x i8> %521 to <8 x i16>
  %523 = ashr <8 x i16> %522, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %524 = shufflevector <16 x i8> %508, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %525 = bitcast <16 x i8> %524 to <8 x i16>
  %526 = ashr <8 x i16> %525, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %527 = add nsw <8 x i16> %526, %523
  %528 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %527, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %529 = bitcast <4 x i32> %528 to <16 x i8>
  %530 = shufflevector <16 x i8> %529, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %531 = bitcast <16 x i8> %530 to <4 x i32>
  %532 = add <4 x i32> %528, %531
  %533 = bitcast <4 x i32> %532 to <16 x i8>
  %534 = shufflevector <16 x i8> %533, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %535 = bitcast <16 x i8> %534 to <4 x i32>
  %536 = add <4 x i32> %532, %535
  %537 = extractelement <4 x i32> %536, i32 0
  %538 = sub nsw i32 0, %537
  br label %539

539:                                              ; preds = %520, %468
  %540 = phi i32 [ %538, %520 ], [ %460, %468 ]
  %541 = phi i32 [ %537, %520 ], [ %452, %468 ]
  %542 = icmp slt i32 %541, 0
  %543 = select i1 %542, i32 %540, i32 %541
  %544 = icmp sgt i32 %543, %458
  br i1 %544, label %546, label %545

545:                                              ; preds = %539, %433
  br label %546

546:                                              ; preds = %463, %539, %545
  %547 = phi i32 [ 1, %545 ], [ 0, %539 ], [ 0, %463 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %329) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %328) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %327) #4
  br label %548

548:                                              ; preds = %9, %546, %321
  %549 = phi i32 [ %322, %321 ], [ %547, %546 ], [ 0, %9 ]
  ret i32 %549
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.usub.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
