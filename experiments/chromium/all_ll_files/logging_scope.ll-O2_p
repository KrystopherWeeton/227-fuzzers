; ModuleID = '../../components/autofill/core/common/autofill_internals/logging_scope.cc'
source_filename = "../../components/autofill/core/common/autofill_internals/logging_scope.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.autofill::LogBuffer" = type <{ %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::Value"*, %"class.base::Value"*, %"class.std::__1::__compressed_pair" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::Value"* }
%"struct.autofill::Tag" = type { %"class.std::__1::basic_string" }
%"struct.autofill::Attrib" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

@.str = private unnamed_addr constant [8 x i8] c"Context\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Parsing\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"AbortParsing\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"Filling\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"Submission\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"AutofillServer\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"Metrics\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"AddressProfileFormImport\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"CreditCardUploadStatus\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"CardUploadDecision\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"div\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"scope\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"log-entry\00", align 1
@switch.table._ZN8autofilllsERNS_9LogBufferENS_12LoggingScopeE = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)], align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN8autofill20LoggingScopeToStringENS_12LoggingScopeE(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 11
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [11 x i8*], [11 x i8*]* @switch.table._ZN8autofilllsERNS_9LogBufferENS_12LoggingScopeE, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  ret i8* %6

7:                                                ; preds = %1
  ret i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.autofill::LogBuffer"* @_ZN8autofilllsERNS_9LogBufferENS_12LoggingScopeE(%"class.autofill::LogBuffer"* dereferenceable(32), i32) local_unnamed_addr #1 {
  %3 = alloca %"struct.autofill::Tag", align 8
  %4 = alloca %"struct.autofill::Attrib", align 8
  %5 = alloca %"struct.autofill::Attrib", align 8
  %6 = getelementptr inbounds %"class.autofill::LogBuffer", %"class.autofill::LogBuffer"* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %95, label %9

9:                                                ; preds = %2
  %10 = bitcast %"struct.autofill::Tag"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #8
  %11 = bitcast %"struct.autofill::Tag"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  store i8 3, i8* %12, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i64 3, i1 false) #8
  %13 = getelementptr inbounds i8, i8* %10, i64 3
  store i8 0, i8* %13, align 1
  %14 = call dereferenceable(32) %"class.autofill::LogBuffer"* @_ZN8autofilllsERNS_9LogBufferEONS_3TagE(%"class.autofill::LogBuffer"* dereferenceable(32) %0, %"struct.autofill::Tag"* nonnull dereferenceable(24) %3) #8
  %15 = bitcast %"struct.autofill::Attrib"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %15) #8
  %16 = bitcast %"struct.autofill::Attrib"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  store i8 5, i8* %17, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %15, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i64 5, i1 false) #8
  %18 = getelementptr inbounds i8, i8* %15, i64 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %"struct.autofill::Attrib", %"struct.autofill::Attrib"* %4, i64 0, i32 1
  %20 = icmp ult i32 %1, 11
  br i1 %20, label %21, label %25

21:                                               ; preds = %9
  %22 = sext i32 %1 to i64
  %23 = getelementptr inbounds [11 x i8*], [11 x i8*]* @switch.table._ZN8autofilllsERNS_9LogBufferENS_12LoggingScopeE, i64 0, i64 %22
  %24 = load i8*, i8** %23, align 8
  br label %25

25:                                               ; preds = %9, %21
  %26 = phi i8* [ %24, %21 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), %9 ]
  %27 = call i64 @strlen(i8* nonnull %26) #8
  %28 = icmp ugt i64 %27, -17
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = bitcast %"class.std::__1::basic_string"* %19 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %30) #9
  unreachable

31:                                               ; preds = %25
  %32 = icmp ult i64 %27, 23
  br i1 %32, label %41, label %33

33:                                               ; preds = %31
  %34 = add nuw i64 %27, 16
  %35 = and i64 %34, -16
  %36 = call i8* @_Znwm(i64 %35) #10
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %36, i8** %37, align 8
  %38 = or i64 %35, -9223372036854775808
  %39 = getelementptr inbounds %"struct.autofill::Attrib", %"struct.autofill::Attrib"* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"struct.autofill::Attrib", %"struct.autofill::Attrib"* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %27, i64* %40, align 8
  br label %47

41:                                               ; preds = %31
  %42 = trunc i64 %27 to i8
  %43 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  store i8 %42, i8* %44, align 1
  %45 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  %46 = icmp eq i64 %27, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %41, %33
  %48 = phi i8* [ %36, %33 ], [ %45, %41 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %26, i64 %27, i1 false) #8
  br label %49

49:                                               ; preds = %41, %47
  %50 = phi i8* [ %45, %41 ], [ %48, %47 ]
  %51 = getelementptr inbounds i8, i8* %50, i64 %27
  store i8 0, i8* %51, align 1
  %52 = call dereferenceable(32) %"class.autofill::LogBuffer"* @_ZN8autofilllsERNS_9LogBufferEONS_6AttribE(%"class.autofill::LogBuffer"* dereferenceable(32) %14, %"struct.autofill::Attrib"* nonnull dereferenceable(48) %4) #8
  %53 = bitcast %"struct.autofill::Attrib"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %53) #8
  %54 = bitcast %"struct.autofill::Attrib"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %55 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %54, i64 0, i32 1, i32 0
  store i8 5, i8* %55, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %53, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i64 5, i1 false) #8
  %56 = getelementptr inbounds i8, i8* %53, i64 5
  store i8 0, i8* %56, align 1
  %57 = getelementptr inbounds %"struct.autofill::Attrib", %"struct.autofill::Attrib"* %5, i64 0, i32 1
  %58 = bitcast %"class.std::__1::basic_string"* %57 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %58, i64 0, i32 1, i32 0
  store i8 9, i8* %59, align 1
  %60 = bitcast %"class.std::__1::basic_string"* %57 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i64 9, i1 false) #8
  %61 = getelementptr inbounds i8, i8* %60, i64 9
  store i8 0, i8* %61, align 1
  %62 = call dereferenceable(32) %"class.autofill::LogBuffer"* @_ZN8autofilllsERNS_9LogBufferEONS_6AttribE(%"class.autofill::LogBuffer"* dereferenceable(32) %52, %"struct.autofill::Attrib"* nonnull dereferenceable(48) %5) #8
  %63 = load i8, i8* %59, align 1
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %49
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %57, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  call void @_ZdlPv(i8* %67) #10
  br label %68

68:                                               ; preds = %65, %49
  %69 = load i8, i8* %55, align 1
  %70 = icmp slt i8 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %68
  %72 = getelementptr inbounds %"struct.autofill::Attrib", %"struct.autofill::Attrib"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  call void @_ZdlPv(i8* %73) #10
  br label %74

74:                                               ; preds = %68, %71
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %53) #8
  %75 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %76 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %75, i64 0, i32 1, i32 0
  %77 = load i8, i8* %76, align 1
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  call void @_ZdlPv(i8* %81) #10
  br label %82

82:                                               ; preds = %79, %74
  %83 = load i8, i8* %17, align 1
  %84 = icmp slt i8 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"struct.autofill::Attrib", %"struct.autofill::Attrib"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  call void @_ZdlPv(i8* %87) #10
  br label %88

88:                                               ; preds = %82, %85
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %15) #8
  %89 = load i8, i8* %12, align 1
  %90 = icmp slt i8 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %88
  %92 = getelementptr inbounds %"struct.autofill::Tag", %"struct.autofill::Tag"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  call void @_ZdlPv(i8* %93) #10
  br label %94

94:                                               ; preds = %88, %91
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #8
  br label %95

95:                                               ; preds = %2, %94
  %96 = phi %"class.autofill::LogBuffer"* [ %62, %94 ], [ %0, %2 ]
  ret %"class.autofill::LogBuffer"* %96
}

declare dereferenceable(32) %"class.autofill::LogBuffer"* @_ZN8autofilllsERNS_9LogBufferEONS_6AttribE(%"class.autofill::LogBuffer"* dereferenceable(32), %"struct.autofill::Attrib"* dereferenceable(48)) local_unnamed_addr #2

declare dereferenceable(32) %"class.autofill::LogBuffer"* @_ZN8autofilllsERNS_9LogBufferEONS_3TagE(%"class.autofill::LogBuffer"* dereferenceable(32), %"struct.autofill::Tag"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
