; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/pickinter.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/pickinter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }
%struct.LOWER_RES_FRAME_INFO = type { i32, i32, i32, double, [4 x i32], i32, i32, i32, %struct.LOWER_RES_MB_INFO* }
%struct.LOWER_RES_MB_INFO = type { i32, i32, %union.int_mv, i32 }

@__const.vp8_pick_inter_mode.near_sadidx = private unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7], align 16
@vp8_ref_frame_order = external local_unnamed_addr constant [20 x i32], align 16
@vp8_mode_order = external local_unnamed_addr constant [20 x i32], align 16
@vpx_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vp8_skip_fractional_mv_step(%struct.macroblock* nocapture readnone, %struct.block* nocapture readnone, %struct.blockd* nocapture readnone, %union.int_mv* nocapture, %union.int_mv* nocapture readnone, i32, %struct.variance_vtable* nocapture readnone, i32** nocapture readnone, i32* nocapture readnone, i32* nocapture readnone) local_unnamed_addr #0 {
  %11 = bitcast %union.int_mv* %3 to %struct.MV*
  %12 = bitcast %union.int_mv* %3 to i16*
  %13 = load i16, i16* %12, align 4
  %14 = shl i16 %13, 3
  store i16 %14, i16* %12, align 4
  %15 = getelementptr inbounds %struct.MV, %struct.MV* %11, i64 0, i32 1
  %16 = load i16, i16* %15, align 2
  %17 = shl i16 %16, 3
  store i16 %17, i16* %15, align 2
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_get_inter_mbpred_error(%struct.macroblock* nocapture readonly, %struct.variance_vtable* nocapture readonly, i32*, i32) local_unnamed_addr #1 {
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 9
  %6 = load i8**, i8*** %5, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 10
  %9 = load i32, i32* %8, align 8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 11
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 11, i32 4
  %15 = load i32, i32* %14, align 16
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 11, i32 13
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = lshr i32 %3, 16
  %23 = and i32 %22, 7
  %24 = shl i32 %3, 16
  %25 = and i32 %3, 7
  %26 = ashr i32 %24, 19
  %27 = mul nsw i32 %15, %26
  %28 = ashr i32 %3, 19
  %29 = add nsw i32 %27, %28
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %21, i64 %30
  %32 = or i32 %23, %25
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %4
  %35 = getelementptr inbounds %struct.variance_vtable, %struct.variance_vtable* %1, i64 0, i32 2
  %36 = load i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %35, align 8
  %37 = tail call i32 %36(i8* %31, i32 %15, i32 %23, i32 %25, i8* %11, i32 %13, i32* %2) #4
  br label %42

38:                                               ; preds = %4
  %39 = getelementptr inbounds %struct.variance_vtable, %struct.variance_vtable* %1, i64 0, i32 1
  %40 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %39, align 8
  %41 = tail call i32 %40(i8* %11, i32 %13, i8* %31, i32 %15, i32* %2) #4
  br label %42

42:                                               ; preds = %38, %34
  %43 = phi i32 [ %37, %34 ], [ %41, %38 ]
  ret i32 %43
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_pick_inter_mode(%struct.VP8_COMP*, %struct.macroblock*, i32, i32, i32* nocapture, i32* nocapture, i32* nocapture, i32, i32) local_unnamed_addr #1 {
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to [2 x %union.int_mv]*
  %12 = alloca [2 x [10 x %union.int_mv]], align 16
  %13 = alloca %union.int_mv, align 4
  %14 = alloca i32, align 4
  %15 = alloca [4 x i32], align 16
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %union.int_mv, align 4
  %20 = alloca [8 x i32], align 16
  %21 = alloca i32, align 4
  %22 = alloca [4 x [3 x i8*]], align 16
  %23 = alloca [4 x i32], align 16
  %24 = alloca %union.int_mv, align 4
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 0
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 0
  %28 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #4
  store i64 0, i64* %10, align 8
  %29 = bitcast [2 x [10 x %union.int_mv]]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %29) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -86, i64 80, i1 false)
  %30 = bitcast %union.int_mv* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #4
  %31 = getelementptr inbounds %union.int_mv, %union.int_mv* %13, i64 0, i32 0
  store i32 -1431655766, i32* %31, align 4
  %32 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #4
  store i32 -1431655766, i32* %14, align 4
  %33 = bitcast [4 x i32]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #4
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 0
  %35 = bitcast i32* %16 to i8*
  %36 = bitcast [4 x i32]* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #4
  store i32 -1431655766, i32* %16, align 4
  %37 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #4
  store i32 -1431655766, i32* %17, align 4
  %38 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %38) #4
  store i32 -1, i32* %18, align 4
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 15
  %40 = load i32, i32* %39, align 8
  %41 = bitcast %union.int_mv* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #4
  %42 = getelementptr inbounds %union.int_mv, %union.int_mv* %19, i64 0, i32 0
  store i32 -1431655766, i32* %42, align 4
  %43 = bitcast [8 x i32]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %43, i8* align 16 bitcast ([8 x i32]* @__const.vp8_pick_inter_mode.near_sadidx to i8*), i64 32, i1 false)
  %44 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #4
  store i32 0, i32* %21, align 4
  %45 = bitcast [4 x [3 x i8*]]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %45) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 0, i64 96, i1 false)
  %46 = bitcast [4 x i32]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #4
  %47 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 0
  %48 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 1
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 2
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 3
  %51 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 129
  %52 = bitcast [4 x i32]* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %52, i8 -86, i64 16, i1 false)
  %53 = load i32, i32* %51, align 4
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %74, label %56

56:                                               ; preds = %9
  %57 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 1, i64 0
  %61 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %59, i32 13
  %62 = load i8*, i8** %61, align 8
  %63 = zext i32 %2 to i64
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  store i8* %64, i8** %60, align 8
  %65 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %59, i32 14
  %66 = load i8*, i8** %65, align 8
  %67 = zext i32 %3 to i64
  %68 = getelementptr inbounds i8, i8* %66, i64 %67
  %69 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 1, i64 1
  store i8* %68, i8** %69, align 8
  %70 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %59, i32 15
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 %67
  %73 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 1, i64 2
  store i8* %72, i8** %73, align 8
  br label %74

74:                                               ; preds = %56, %9
  %75 = phi i8* [ %72, %56 ], [ null, %9 ]
  %76 = phi i8* [ %68, %56 ], [ null, %9 ]
  %77 = phi i8* [ %64, %56 ], [ null, %9 ]
  %78 = and i32 %53, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %98, label %80

80:                                               ; preds = %74
  %81 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  %82 = load i32, i32* %81, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 2, i64 0
  %85 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %83, i32 13
  %86 = load i8*, i8** %85, align 8
  %87 = zext i32 %2 to i64
  %88 = getelementptr inbounds i8, i8* %86, i64 %87
  store i8* %88, i8** %84, align 16
  %89 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %83, i32 14
  %90 = load i8*, i8** %89, align 8
  %91 = zext i32 %3 to i64
  %92 = getelementptr inbounds i8, i8* %90, i64 %91
  %93 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 2, i64 1
  store i8* %92, i8** %93, align 8
  %94 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %83, i32 15
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 %91
  %97 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 2, i64 2
  store i8* %96, i8** %97, align 16
  br label %98

98:                                               ; preds = %80, %74
  %99 = and i32 %53, 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %119, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 16
  %103 = load i32, i32* %102, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 3, i64 0
  %106 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %104, i32 13
  %107 = load i8*, i8** %106, align 8
  %108 = zext i32 %2 to i64
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  store i8* %109, i8** %105, align 8
  %110 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %104, i32 14
  %111 = load i8*, i8** %110, align 8
  %112 = zext i32 %3 to i64
  %113 = getelementptr inbounds i8, i8* %111, i64 %112
  %114 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 3, i64 1
  store i8* %113, i8** %114, align 8
  %115 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %104, i32 15
  %116 = load i8*, i8** %115, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %112
  %118 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 3, i64 2
  store i8* %117, i8** %118, align 8
  br label %119

119:                                              ; preds = %98, %101
  br i1 %55, label %175, label %120

120:                                              ; preds = %119
  %121 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 5, i32 13
  %122 = load i8*, i8** %121, align 8
  %123 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 10
  %124 = load i32, i32* %123, align 8
  %125 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 9
  %126 = load i8**, i8*** %125, align 8
  %127 = load i8*, i8** %126, align 8
  %128 = sext i32 %124 to i64
  %129 = getelementptr inbounds i8, i8* %127, i64 %128
  %130 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 10
  %131 = load i32, i32* %130, align 8
  %132 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 20, i32 9
  %133 = load i8**, i8*** %132, align 8
  %134 = load i8*, i8** %133, align 8
  %135 = sext i32 %131 to i64
  %136 = getelementptr inbounds i8, i8* %134, i64 %135
  %137 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 5, i32 4
  %138 = load i32, i32* %137, align 16
  %139 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 16, i32 11
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 5
  %142 = load i32, i32* %141, align 8
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %162, label %144

144:                                              ; preds = %120
  %145 = icmp sgt i32 %142, 1
  %146 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 1, i32 13
  %147 = load i8*, i8** %146, align 8
  %148 = sext i32 %2 to i64
  %149 = getelementptr inbounds i8, i8* %147, i64 %148
  %150 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 1, i32 4
  %151 = load i32, i32* %150, align 8
  br i1 %145, label %152, label %162

152:                                              ; preds = %144
  %153 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 1, i32 14
  %154 = load i8*, i8** %153, align 8
  %155 = sext i32 %3 to i64
  %156 = getelementptr inbounds i8, i8* %154, i64 %155
  %157 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 1, i32 15
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds i8, i8* %158, i64 %155
  %160 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 1, i32 9
  %161 = load i32, i32* %160, align 4
  br label %162

162:                                              ; preds = %144, %152, %120
  %163 = phi i8* [ %122, %120 ], [ %149, %152 ], [ %149, %144 ]
  %164 = phi i8* [ %129, %120 ], [ %156, %152 ], [ %129, %144 ]
  %165 = phi i8* [ %136, %120 ], [ %159, %152 ], [ %136, %144 ]
  %166 = phi i32 [ %138, %120 ], [ %151, %152 ], [ %151, %144 ]
  %167 = phi i32 [ %140, %120 ], [ %161, %152 ], [ %140, %144 ]
  %168 = tail call fastcc i32 @check_dot_artifact_candidate(%struct.VP8_COMP* %0, %struct.macroblock* %1, i8* %163, i32 %166, i8* %77, i32 %7, i32 %8, i32 0)
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %175

170:                                              ; preds = %162
  %171 = tail call fastcc i32 @check_dot_artifact_candidate(%struct.VP8_COMP* %0, %struct.macroblock* %1, i8* %164, i32 %167, i8* %76, i32 %7, i32 %8, i32 1)
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %175

173:                                              ; preds = %170
  %174 = tail call fastcc i32 @check_dot_artifact_candidate(%struct.VP8_COMP* %0, %struct.macroblock* %1, i8* %165, i32 %167, i8* %75, i32 %7, i32 %8, i32 2)
  br label %175

175:                                              ; preds = %173, %162, %170, %119
  %176 = phi i32 [ 0, %119 ], [ %168, %162 ], [ %171, %170 ], [ %174, %173 ]
  %177 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 58
  %178 = load i32, i32* %177, align 8
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %274, label %180

180:                                              ; preds = %175
  %181 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 216
  %182 = load i8, i8* %181, align 4
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %274, label %184

184:                                              ; preds = %180
  %185 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 60
  %186 = bitcast i8** %185 to %struct.LOWER_RES_FRAME_INFO**
  %187 = load %struct.LOWER_RES_FRAME_INFO*, %struct.LOWER_RES_FRAME_INFO** %186, align 8
  %188 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %187, i64 0, i32 8
  %189 = load %struct.LOWER_RES_MB_INFO*, %struct.LOWER_RES_MB_INFO** %188, align 8
  %190 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 59, i32 1
  %191 = load i32, i32* %190, align 4
  %192 = mul nsw i32 %191, %7
  %193 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 59, i32 0
  %194 = load i32, i32* %193, align 4
  %195 = sdiv i32 %192, %194
  %196 = mul nsw i32 %191, %8
  %197 = sdiv i32 %196, %194
  %198 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 215
  %199 = load i32, i32* %198, align 8
  %200 = mul nsw i32 %199, %195
  %201 = add nsw i32 %200, %197
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds %struct.LOWER_RES_MB_INFO, %struct.LOWER_RES_MB_INFO* %189, i64 %202, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds %struct.LOWER_RES_MB_INFO, %struct.LOWER_RES_MB_INFO* %189, i64 %202, i32 0
  %206 = load i32, i32* %205, align 4
  %207 = getelementptr inbounds %struct.LOWER_RES_MB_INFO, %struct.LOWER_RES_MB_INFO* %189, i64 %202, i32 3
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 57
  %210 = load i32, i32* %209, align 4
  %211 = add i32 %210, -1
  %212 = icmp eq i32 %178, %211
  %213 = zext i1 %212 to i32
  %214 = ashr i32 %208, %213
  %215 = icmp eq i32 %204, 0
  br i1 %215, label %265, label %216

216:                                              ; preds = %184
  %217 = getelementptr inbounds %struct.LOWER_RES_MB_INFO, %struct.LOWER_RES_MB_INFO* %189, i64 %202, i32 2
  %218 = bitcast %union.int_mv* %217 to %struct.MV*
  %219 = bitcast %union.int_mv* %217 to i16*
  %220 = load i16, i16* %219, align 4
  %221 = sext i16 %220 to i32
  %222 = mul nsw i32 %194, %221
  %223 = sdiv i32 %222, %191
  %224 = getelementptr inbounds %struct.MV, %struct.MV* %218, i64 0, i32 1
  %225 = load i16, i16* %224, align 2
  %226 = sext i16 %225 to i32
  %227 = mul nsw i32 %194, %226
  %228 = sdiv i32 %227, %191
  %229 = shl i32 %228, 16
  %230 = ashr exact i32 %229, 16
  %231 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 35
  %232 = load i32, i32* %231, align 4
  %233 = add nsw i32 %232, -128
  %234 = icmp sgt i32 %233, %230
  br i1 %234, label %241, label %235

235:                                              ; preds = %216
  %236 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 36
  %237 = load i32, i32* %236, align 8
  %238 = add nsw i32 %237, 128
  %239 = icmp slt i32 %238, %230
  %240 = select i1 %239, i32 %238, i32 %228
  br label %241

241:                                              ; preds = %216, %235
  %242 = phi i32 [ %240, %235 ], [ %233, %216 ]
  %243 = trunc i32 %242 to i16
  %244 = shl i32 %223, 16
  %245 = ashr exact i32 %244, 16
  %246 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 37
  %247 = load i32, i32* %246, align 4
  %248 = add nsw i32 %247, -128
  %249 = icmp sgt i32 %248, %245
  br i1 %249, label %256, label %250

250:                                              ; preds = %241
  %251 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 38
  %252 = load i32, i32* %251, align 16
  %253 = add nsw i32 %252, 128
  %254 = icmp slt i32 %253, %245
  %255 = select i1 %254, i32 %253, i32 %223
  br label %256

256:                                              ; preds = %241, %250
  %257 = phi i32 [ %255, %250 ], [ %248, %241 ]
  %258 = trunc i32 %257 to i16
  switch i32 %204, label %265 [
    i32 1, label %259
    i32 2, label %262
  ]

259:                                              ; preds = %256
  %260 = load i32, i32* %51, align 4
  %261 = and i32 %260, 1
  br label %265

262:                                              ; preds = %256
  %263 = load i32, i32* %51, align 4
  %264 = and i32 %263, 2
  br label %265

265:                                              ; preds = %184, %256, %262, %259
  %266 = phi i16 [ %258, %259 ], [ %258, %262 ], [ %258, %256 ], [ -21846, %184 ]
  %267 = phi i16 [ %243, %259 ], [ %243, %262 ], [ %243, %256 ], [ -21846, %184 ]
  %268 = phi i32 [ %261, %259 ], [ %264, %262 ], [ 0, %256 ], [ 0, %184 ]
  %269 = icmp ne i32 %268, 0
  %270 = or i1 %215, %269
  %271 = icmp eq i32 %176, 0
  %272 = and i1 %271, %270
  %273 = zext i1 %272 to i32
  br label %274

274:                                              ; preds = %180, %175, %265
  %275 = phi i32 [ %214, %265 ], [ 2147483647, %180 ], [ 2147483647, %175 ]
  %276 = phi i32 [ %204, %265 ], [ 0, %180 ], [ 0, %175 ]
  %277 = phi i16 [ %267, %265 ], [ -21846, %180 ], [ -21846, %175 ]
  %278 = phi i16 [ %266, %265 ], [ -21846, %180 ], [ -21846, %175 ]
  %279 = phi i32 [ %206, %265 ], [ 0, %180 ], [ 0, %175 ]
  %280 = phi i32 [ %273, %265 ], [ 0, %180 ], [ 0, %175 ]
  %281 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 41
  store i32 0, i32* %281, align 8
  %282 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %283 = load i32, i32* %282, align 4
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %285, label %296

285:                                              ; preds = %274
  %286 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %287 = load i32, i32* %286, align 8
  %288 = mul nsw i32 %287, %7
  %289 = add nsw i32 %288, %8
  %290 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 133
  %291 = load i8*, i8** %290, align 8
  %292 = sext i32 %289 to i64
  %293 = getelementptr inbounds i8, i8* %291, i64 %292
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i32
  store i32 %295, i32* %281, align 8
  br label %296

296:                                              ; preds = %274, %285
  %297 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 5
  %298 = getelementptr inbounds [2 x [10 x %union.int_mv]], [2 x [10 x %union.int_mv]]* %12, i64 0, i64 0
  %299 = getelementptr inbounds [2 x [10 x %union.int_mv]], [2 x [10 x %union.int_mv]]* %12, i64 0, i64 0, i64 0
  store i32 0, i32* %31, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 0, i64 80, i1 false)
  %300 = icmp ne i32 %280, 0
  %301 = icmp ne i32 %276, 0
  %302 = and i1 %301, %300
  %303 = icmp slt i32 %275, 8
  %304 = and i1 %303, %302
  br i1 %304, label %305, label %306

305:                                              ; preds = %296
  store i32 -1, i32* %47, align 16
  store i32 %276, i32* %48, align 4
  store i32 -1, i32* %49, align 8
  store i32 -1, i32* %50, align 4
  br label %339

306:                                              ; preds = %296
  store i32 0, i32* %47, align 16
  %307 = load i32, i32* %51, align 4
  %308 = and i32 %307, 1
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %311, label %310

310:                                              ; preds = %306
  store i32 1, i32* %48, align 4
  br label %311

311:                                              ; preds = %310, %306
  %312 = phi i32 [ 2, %310 ], [ 1, %306 ]
  %313 = and i32 %307, 2
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %319, label %315

315:                                              ; preds = %311
  %316 = add nuw nsw i32 %312, 1
  %317 = zext i32 %312 to i64
  %318 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 %317
  store i32 2, i32* %318, align 4
  br label %319

319:                                              ; preds = %315, %311
  %320 = phi i32 [ %316, %315 ], [ %312, %311 ]
  %321 = and i32 %307, 4
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %328, label %323

323:                                              ; preds = %319
  %324 = add nuw nsw i32 %320, 1
  %325 = sext i32 %320 to i64
  %326 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 %325
  store i32 3, i32* %326, align 4
  %327 = icmp slt i32 %324, 4
  br i1 %327, label %328, label %337

328:                                              ; preds = %323, %319
  %329 = phi i32 [ %324, %323 ], [ %320, %319 ]
  %330 = zext i32 %329 to i64
  %331 = getelementptr [4 x i32], [4 x i32]* %23, i64 0, i64 %330
  %332 = bitcast i32* %331 to i8*
  %333 = sub nuw nsw i32 3, %329
  %334 = zext i32 %333 to i64
  %335 = shl nuw nsw i64 %334, 2
  %336 = add nuw nsw i64 %335, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %332, i8 -1, i64 %336, i1 false) #4
  br label %337

337:                                              ; preds = %323, %328
  %338 = load i32, i32* %48, align 4
  br label %339

339:                                              ; preds = %337, %305
  %340 = phi i32 [ %338, %337 ], [ %276, %305 ]
  %341 = icmp sgt i32 %340, 0
  br i1 %341, label %342, label %352

342:                                              ; preds = %339
  %343 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %344 = load %struct.modeinfo*, %struct.modeinfo** %343, align 32
  %345 = bitcast i64* %10 to %union.int_mv*
  %346 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 0
  %347 = call i32 @vp8_find_near_mvs_bias(%struct.macroblockd* %26, %struct.modeinfo* %344, [10 x %union.int_mv]* nonnull %298, %union.int_mv* nonnull %345, i32* nonnull %34, i32 %340, i32* %346) #4
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds [2 x [10 x %union.int_mv]], [2 x [10 x %union.int_mv]]* %12, i64 0, i64 %348, i64 0
  %350 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %11, i64 0, i64 %348, i32 0
  %351 = load i32, i32* %350, align 4
  store i32 %351, i32* %31, align 4
  br label %352

352:                                              ; preds = %342, %339
  %353 = phi %union.int_mv* [ %349, %342 ], [ %299, %339 ]
  %354 = phi i32 [ %347, %342 ], [ 0, %339 ]
  %355 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 59
  %356 = load i32, i32* %355, align 8
  %357 = add i32 %356, 1
  store i32 %357, i32* %355, align 8
  store i32 2147483647, i32* %6, align 4
  %358 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 34
  store i32 0, i32* %358, align 32
  %359 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %360 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %361 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %360, i64 0, i32 0, i32 2
  store i8 0, i8* %361, align 2
  %362 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 113
  %363 = load i32, i32* %362, align 16
  %364 = icmp slt i32 %363, 12
  br i1 %364, label %365, label %471

365:                                              ; preds = %352
  %366 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 132
  %367 = load i32, i32* %366, align 32
  %368 = icmp sgt i32 %367, 40
  br i1 %368, label %369, label %471

369:                                              ; preds = %365
  %370 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %371 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %370, i64 -1
  %372 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %370, i64 -1, i32 0, i32 4
  %373 = bitcast %union.int_mv* %372 to i8*
  %374 = getelementptr inbounds i8, i8* %373, i64 2
  %375 = bitcast i8* %374 to i16*
  %376 = load i16, i16* %375, align 2
  %377 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %370, i64 -1, i32 0, i32 2
  %378 = load i8, i8* %377, align 2
  %379 = icmp eq i8 %378, 0
  br i1 %379, label %395, label %380

380:                                              ; preds = %369
  %381 = bitcast %union.int_mv* %372 to i16*
  %382 = load i16, i16* %381, align 4
  %383 = sext i16 %382 to i32
  %384 = icmp slt i32 %383, 0
  %385 = sub nsw i32 0, %383
  %386 = select i1 %384, i32 %385, i32 %383
  %387 = icmp slt i32 %386, 8
  br i1 %387, label %388, label %395

388:                                              ; preds = %380
  %389 = sext i16 %376 to i32
  %390 = icmp slt i32 %389, 0
  %391 = sub nsw i32 0, %389
  %392 = select i1 %390, i32 %391, i32 %389
  %393 = icmp slt i32 %392, 8
  %394 = zext i1 %393 to i32
  br label %395

395:                                              ; preds = %388, %380, %369
  %396 = phi i32 [ 0, %380 ], [ 0, %369 ], [ %394, %388 ]
  %397 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 14
  %398 = load i32, i32* %397, align 8
  %399 = sext i32 %398 to i64
  %400 = sub nsw i64 0, %399
  %401 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %371, i64 %400
  %402 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %401, i64 0, i32 0, i32 4
  %403 = bitcast %union.int_mv* %402 to i8*
  %404 = getelementptr inbounds i8, i8* %403, i64 2
  %405 = bitcast i8* %404 to i16*
  %406 = load i16, i16* %405, align 2
  %407 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %401, i64 0, i32 0, i32 2
  %408 = load i8, i8* %407, align 2
  %409 = icmp eq i8 %408, 0
  br i1 %409, label %426, label %410

410:                                              ; preds = %395
  %411 = bitcast %union.int_mv* %402 to i16*
  %412 = load i16, i16* %411, align 4
  %413 = sext i16 %412 to i32
  %414 = icmp slt i32 %413, 0
  %415 = sub nsw i32 0, %413
  %416 = select i1 %414, i32 %415, i32 %413
  %417 = icmp slt i32 %416, 8
  br i1 %417, label %418, label %426

418:                                              ; preds = %410
  %419 = sext i16 %406 to i32
  %420 = icmp slt i32 %419, 0
  %421 = sub nsw i32 0, %419
  %422 = select i1 %420, i32 %421, i32 %419
  %423 = icmp slt i32 %422, 8
  %424 = zext i1 %423 to i32
  %425 = add nuw nsw i32 %396, %424
  br label %426

426:                                              ; preds = %418, %410, %395
  %427 = phi i32 [ %396, %410 ], [ %396, %395 ], [ %425, %418 ]
  %428 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %401, i64 1
  %429 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %428, i64 0, i32 0, i32 4
  %430 = bitcast %union.int_mv* %429 to i8*
  %431 = getelementptr inbounds i8, i8* %430, i64 2
  %432 = bitcast i8* %431 to i16*
  %433 = load i16, i16* %432, align 2
  %434 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %428, i64 0, i32 0, i32 2
  %435 = load i8, i8* %434, align 2
  %436 = icmp eq i8 %435, 0
  br i1 %436, label %453, label %437

437:                                              ; preds = %426
  %438 = bitcast %union.int_mv* %429 to i16*
  %439 = load i16, i16* %438, align 4
  %440 = sext i16 %439 to i32
  %441 = icmp slt i32 %440, 0
  %442 = sub nsw i32 0, %440
  %443 = select i1 %441, i32 %442, i32 %440
  %444 = icmp slt i32 %443, 8
  br i1 %444, label %445, label %453

445:                                              ; preds = %437
  %446 = sext i16 %433 to i32
  %447 = icmp slt i32 %446, 0
  %448 = sub nsw i32 0, %446
  %449 = select i1 %447, i32 %448, i32 %446
  %450 = icmp slt i32 %449, 8
  %451 = zext i1 %450 to i32
  %452 = add nuw nsw i32 %427, %451
  br label %453

453:                                              ; preds = %445, %437, %426
  %454 = phi i32 [ %427, %437 ], [ %427, %426 ], [ %452, %445 ]
  %455 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 37
  %456 = load i32, i32* %455, align 4
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %466, label %458

458:                                              ; preds = %453
  %459 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 35
  %460 = load i32, i32* %459, align 4
  %461 = icmp eq i32 %460, 0
  %462 = icmp sgt i32 %454, 0
  %463 = and i1 %462, %461
  %464 = icmp sgt i32 %454, 2
  %465 = or i1 %464, %463
  br i1 %465, label %468, label %469

466:                                              ; preds = %453
  %467 = icmp sgt i32 %454, 0
  br i1 %467, label %468, label %471

468:                                              ; preds = %466, %458
  br label %471

469:                                              ; preds = %458
  %470 = select i1 %462, i32 90, i32 100
  br label %471

471:                                              ; preds = %469, %468, %466, %365, %352
  %472 = phi i32 [ 100, %352 ], [ 80, %468 ], [ 100, %466 ], [ 100, %365 ], [ %470, %469 ]
  %473 = load i32, i32* %297, align 8
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %480, label %475

475:                                              ; preds = %471
  %476 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 13, i32 4
  %477 = load i32, i32* %476, align 4
  %478 = mul i32 %477, %472
  %479 = udiv i32 %478, 100
  br label %480

480:                                              ; preds = %471, %475
  %481 = phi i32 [ %472, %471 ], [ %479, %475 ]
  %482 = icmp eq i32 %176, 0
  %483 = select i1 %482, i32 %481, i32 150
  %484 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 11, i32 13
  %485 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 11, i32 15
  %486 = bitcast i8** %485 to i64*
  %487 = icmp eq i32 %279, 7
  %488 = icmp eq i32 %275, 0
  %489 = zext i16 %277 to i32
  %490 = shl nuw i32 %489, 16
  %491 = zext i16 %278 to i32
  %492 = or i32 %490, %491
  %493 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 33
  %494 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 46
  %495 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %496 = bitcast %union.int_mv* %24 to i8*
  %497 = getelementptr inbounds %union.int_mv, %union.int_mv* %24, i64 0, i32 0
  %498 = bitcast %union.int_mv* %13 to %struct.MV*
  %499 = getelementptr inbounds %struct.MV, %struct.MV* %498, i64 0, i32 1
  %500 = bitcast %union.int_mv* %13 to i16*
  %501 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 30
  %502 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 31
  %503 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 32
  %504 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 33
  %505 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 11
  %506 = getelementptr inbounds [8 x i32], [8 x i32]* %20, i64 0, i64 0
  %507 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 0
  %508 = bitcast %union.int_mv* %19 to %struct.MV*
  %509 = getelementptr inbounds %struct.MV, %struct.MV* %508, i64 0, i32 1
  %510 = bitcast %union.int_mv* %24 to %struct.MV*
  %511 = getelementptr inbounds %struct.MV, %struct.MV* %510, i64 0, i32 1
  %512 = bitcast %union.int_mv* %19 to i16*
  %513 = bitcast %union.int_mv* %24 to i16*
  %514 = ashr i16 %277, 3
  %515 = ashr i16 %278, 3
  %516 = icmp slt i32 %275, 33
  %517 = icmp slt i32 %275, 129
  %518 = icmp slt i32 %275, 3
  %519 = sext i16 %278 to i32
  %520 = sext i16 %277 to i32
  %521 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 10
  %522 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 1
  %523 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 176
  %524 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 0, i32 6
  %525 = bitcast %union.b_mode_info* %524 to %union.int_mv*
  %526 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 177, i64 4
  %527 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i64 0
  %528 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %524, i64 0, i32 0
  %529 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 24, i64 0
  %530 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 173
  %531 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %532 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 23, i64 0
  %533 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 0, i32 6, i32 0
  %534 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 35
  %535 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 36
  %536 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 37
  %537 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 38
  %538 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 13
  %539 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 4
  %540 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %26, i64 0, i32 0, i64 0
  %541 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 0, i32 9
  %542 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 0, i32 11
  %543 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25
  %544 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 15
  %545 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 18
  %546 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %547 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 60
  %548 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47
  %549 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  %550 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 45, i32 0
  %551 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 48
  %552 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 46
  %553 = bitcast i8** %484 to <2 x i64>*
  %554 = bitcast i32* %501 to <4 x i32>*
  %555 = bitcast i32* %501 to <4 x i32>*
  br label %556

556:                                              ; preds = %1065, %480
  %557 = phi i64 [ 0, %480 ], [ %1085, %1065 ]
  %558 = phi i8 [ 0, %480 ], [ %1066, %1065 ]
  %559 = phi i8 [ 0, %480 ], [ %1067, %1065 ]
  %560 = phi i32 [ %354, %480 ], [ %1068, %1065 ]
  %561 = phi i32 [ 0, %480 ], [ %1069, %1065 ]
  %562 = phi i32 [ %40, %480 ], [ %1070, %1065 ]
  %563 = phi i32 [ -1, %480 ], [ %1071, %1065 ]
  %564 = phi i32 [ -1, %480 ], [ %1072, %1065 ]
  %565 = phi i32 [ -1, %480 ], [ %1073, %1065 ]
  %566 = phi i32 [ 0, %480 ], [ %1074, %1065 ]
  %567 = phi i32 [ 2147483647, %480 ], [ %1075, %1065 ]
  %568 = phi i32 [ 2147483647, %480 ], [ %1076, %1065 ]
  %569 = phi %union.int_mv* [ %353, %480 ], [ %1077, %1065 ]
  %570 = phi i8 [ 0, %480 ], [ %1078, %1065 ]
  %571 = phi i8 [ 0, %480 ], [ %1079, %1065 ]
  %572 = phi i8 [ 0, %480 ], [ %1080, %1065 ]
  %573 = phi i8 [ 0, %480 ], [ %1081, %1065 ]
  %574 = phi i32 [ 0, %480 ], [ %1082, %1065 ]
  %575 = phi i8 [ 0, %480 ], [ %1083, %1065 ]
  %576 = phi i8 [ 0, %480 ], [ %1084, %1065 ]
  %577 = getelementptr inbounds [20 x i32], [20 x i32]* @vp8_ref_frame_order, i64 0, i64 %557
  %578 = load i32, i32* %577, align 4
  %579 = sext i32 %578 to i64
  %580 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 %579
  %581 = load i32, i32* %580, align 4
  %582 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 %557
  %583 = load i32, i32* %582, align 4
  %584 = icmp sle i32 %568, %583
  %585 = icmp slt i32 %581, 0
  %586 = or i1 %585, %584
  br i1 %586, label %1065, label %587

587:                                              ; preds = %556
  %588 = trunc i32 %581 to i8
  %589 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %590 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %589, i64 0, i32 0, i32 2
  store i8 %588, i8* %590, align 2
  %591 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %592 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %591, i64 0, i32 0, i32 2
  %593 = load i8, i8* %592, align 2
  %594 = icmp eq i8 %593, 0
  br i1 %594, label %635, label %595

595:                                              ; preds = %587
  %596 = sext i32 %581 to i64
  %597 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 %596
  %598 = bitcast [3 x i8*]* %597 to <2 x i64>*
  %599 = load <2 x i64>, <2 x i64>* %598, align 8
  store <2 x i64> %599, <2 x i64>* %553, align 8
  %600 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 %596, i64 2
  %601 = bitcast i8** %600 to i64*
  %602 = load i64, i64* %601, align 8
  store i64 %602, i64* %486, align 8
  %603 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %596
  %604 = load i32, i32* %603, align 4
  %605 = icmp eq i32 %560, %604
  br i1 %605, label %611, label %606

606:                                              ; preds = %595
  %607 = sext i32 %604 to i64
  %608 = getelementptr inbounds [2 x [10 x %union.int_mv]], [2 x [10 x %union.int_mv]]* %12, i64 0, i64 %607, i64 0
  %609 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %11, i64 0, i64 %607, i32 0
  %610 = load i32, i32* %609, align 4
  store i32 %610, i32* %31, align 4
  br label %611

611:                                              ; preds = %595, %606
  %612 = phi %union.int_mv* [ %608, %606 ], [ %569, %595 ]
  %613 = phi i32 [ %604, %606 ], [ %560, %595 ]
  br i1 %300, label %614, label %635

614:                                              ; preds = %611
  %615 = getelementptr inbounds [20 x i32], [20 x i32]* @vp8_mode_order, i64 0, i64 %557
  %616 = load i32, i32* %615, align 4
  switch i32 %616, label %625 [
    i32 5, label %617
    i32 6, label %621
  ]

617:                                              ; preds = %614
  %618 = getelementptr inbounds %union.int_mv, %union.int_mv* %612, i64 5, i32 0
  %619 = load i32, i32* %618, align 4
  %620 = icmp eq i32 %619, 0
  br i1 %620, label %1065, label %635

621:                                              ; preds = %614
  %622 = getelementptr inbounds %union.int_mv, %union.int_mv* %612, i64 6, i32 0
  %623 = load i32, i32* %622, align 4
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %1065, label %635

625:                                              ; preds = %614
  %626 = icmp eq i32 %616, 8
  %627 = and i1 %487, %626
  %628 = load i32, i32* %31, align 4
  %629 = icmp eq i32 %628, 0
  %630 = and i1 %627, %629
  br i1 %630, label %1065, label %631

631:                                              ; preds = %625
  %632 = and i1 %488, %626
  %633 = icmp eq i32 %628, %492
  %634 = and i1 %632, %633
  br i1 %634, label %1065, label %635

635:                                              ; preds = %621, %617, %587, %611, %631
  %636 = phi %union.int_mv* [ %612, %631 ], [ %612, %611 ], [ %569, %587 ], [ %612, %617 ], [ %612, %621 ]
  %637 = phi i32 [ %613, %631 ], [ %613, %611 ], [ %560, %587 ], [ %613, %617 ], [ %613, %621 ]
  %638 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 60, i64 %557
  %639 = load i32, i32* %638, align 4
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %659, label %641

641:                                              ; preds = %635
  %642 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 %557
  %643 = load i32, i32* %642, align 4
  %644 = icmp ugt i32 %643, 1
  br i1 %644, label %645, label %659

645:                                              ; preds = %641
  %646 = load i32, i32* %355, align 8
  %647 = mul i32 %643, %639
  %648 = icmp ugt i32 %646, %647
  br i1 %648, label %659, label %649

649:                                              ; preds = %645
  %650 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i64 %557
  %651 = load i32, i32* %650, align 4
  %652 = icmp slt i32 %651, 508
  %653 = select i1 %652, i32 %651, i32 508
  %654 = add nsw i32 %653, 4
  store i32 %654, i32* %650, align 4
  %655 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %557
  %656 = load i32, i32* %655, align 4
  %657 = ashr i32 %656, 7
  %658 = mul nsw i32 %657, %654
  store i32 %658, i32* %582, align 4
  br label %1065

659:                                              ; preds = %645, %635, %641
  %660 = add i32 %639, 1
  store i32 %660, i32* %638, align 4
  store i32 0, i32* %17, align 4
  %661 = getelementptr inbounds [20 x i32], [20 x i32]* @vp8_mode_order, i64 0, i64 %557
  %662 = load i32, i32* %661, align 4
  %663 = trunc i32 %662 to i8
  %664 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %591, i64 0, i32 0, i32 0
  store i8 %663, i8* %664, align 4
  %665 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %666 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %665, i64 0, i32 0, i32 1
  store i8 0, i8* %666, align 1
  %667 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %668 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %667, i64 0, i32 0, i32 2
  %669 = load i8, i8* %668, align 2
  %670 = zext i8 %669 to i64
  %671 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 10, i64 %670
  %672 = load i32, i32* %671, align 4
  %673 = load i32, i32* %493, align 4
  %674 = icmp eq i32 %673, 0
  br i1 %674, label %682, label %675

675:                                              ; preds = %659
  %676 = load i32, i32* %494, align 4
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %678, label %682

678:                                              ; preds = %675
  %679 = icmp eq i32 %662, 7
  %680 = icmp eq i8 %669, 3
  %681 = and i1 %679, %680
  br i1 %681, label %933, label %1065

682:                                              ; preds = %659, %675
  switch i32 %662, label %967 [
    i32 4, label %683
    i32 7, label %933
    i32 0, label %704
    i32 1, label %704
    i32 2, label %704
    i32 3, label %704
    i32 8, label %735
    i32 5, label %925
    i32 6, label %925
  ]

683:                                              ; preds = %682
  store i32 %565, i32* %17, align 4
  %684 = call fastcc i32 @pick_intra4x4mby_modes(%struct.macroblock* %1, i32* nonnull %16, i32* nonnull %17)
  %685 = load i32, i32* %17, align 4
  %686 = icmp eq i32 %685, 2147483647
  br i1 %686, label %967, label %687

687:                                              ; preds = %683
  %688 = load i32, i32* %16, align 4
  %689 = add nsw i32 %688, %672
  %690 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16, align 8
  %691 = load i8**, i8*** %541, align 8
  %692 = load i8*, i8** %691, align 8
  %693 = load i32, i32* %542, align 4
  %694 = call i32 %690(i8* %692, i32 %693, i8* %540, i32 16, i32* nonnull %18) #4
  store i32 %694, i32* %17, align 4
  %695 = load i32, i32* %545, align 8
  %696 = mul nsw i32 %695, %689
  %697 = add nsw i32 %696, 128
  %698 = ashr i32 %697, 8
  %699 = load i32, i32* %546, align 4
  %700 = mul nsw i32 %699, %694
  %701 = add nsw i32 %698, %700
  %702 = icmp slt i32 %701, %567
  br i1 %702, label %703, label %967

703:                                              ; preds = %687
  store i32 %694, i32* %6, align 4
  br label %967

704:                                              ; preds = %682, %682, %682, %682
  %705 = load i8*, i8** %538, align 8
  %706 = load i32, i32* %539, align 16
  %707 = sext i32 %706 to i64
  %708 = sub nsw i64 0, %707
  %709 = getelementptr inbounds i8, i8* %705, i64 %708
  %710 = getelementptr inbounds i8, i8* %705, i64 -1
  call void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* %26, i8* %709, i8* %710, i32 %706, i8* %540, i32 16) #4
  %711 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16, align 8
  %712 = load i8**, i8*** %541, align 8
  %713 = load i8*, i8** %712, align 8
  %714 = load i32, i32* %542, align 4
  %715 = call i32 %711(i8* %713, i32 %714, i8* %540, i32 16, i32* nonnull %18) #4
  store i32 %715, i32* %17, align 4
  %716 = load [10 x i32]*, [10 x i32]** %543, align 8
  %717 = load i32, i32* %544, align 4
  %718 = zext i32 %717 to i64
  %719 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %720 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %719, i64 0, i32 0, i32 0
  %721 = load i8, i8* %720, align 4
  %722 = zext i8 %721 to i64
  %723 = getelementptr inbounds [10 x i32], [10 x i32]* %716, i64 %718, i64 %722
  %724 = load i32, i32* %723, align 4
  %725 = add nsw i32 %724, %672
  %726 = load i32, i32* %545, align 8
  %727 = mul nsw i32 %725, %726
  %728 = add nsw i32 %727, 128
  %729 = ashr i32 %728, 8
  %730 = load i32, i32* %546, align 4
  %731 = mul nsw i32 %730, %715
  %732 = add nsw i32 %729, %731
  %733 = icmp slt i32 %732, %567
  br i1 %733, label %734, label %967

734:                                              ; preds = %704
  store i32 %715, i32* %6, align 4
  br label %967

735:                                              ; preds = %682
  %736 = load i32, i32* %495, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %496) #4
  store i32 -1431655766, i32* %497, align 4
  %737 = load i16, i16* %499, align 2
  %738 = sext i16 %737 to i32
  %739 = add nsw i32 %738, 7
  %740 = ashr i32 %739, 3
  %741 = add nsw i32 %740, -255
  %742 = load i16, i16* %500, align 4
  %743 = sext i16 %742 to i32
  %744 = add nsw i32 %743, 7
  %745 = ashr i32 %744, 3
  %746 = add nsw i32 %745, -255
  %747 = ashr i32 %738, 3
  %748 = add nsw i32 %747, 255
  %749 = ashr i32 %743, 3
  %750 = add nsw i32 %749, 255
  %751 = load <4 x i32>, <4 x i32>* %554, align 16
  %752 = load i32, i32* %362, align 16
  %753 = icmp sgt i32 %752, 5
  %754 = icmp sgt i32 %752, 7
  %755 = select i1 %754, i32 3, i32 2
  %756 = select i1 %753, i32 %755, i32 1
  %757 = load i32, i32* %505, align 8
  %758 = add nsw i32 %756, %757
  %759 = load i32, i32* %177, align 8
  %760 = icmp eq i32 %759, 0
  %761 = select i1 %760, i32 %562, i32 0
  %762 = icmp eq i32 %276, %581
  %763 = and i1 %300, %762
  br i1 %763, label %764, label %772

764:                                              ; preds = %735
  store i32 %492, i32* %42, align 4
  store i16 %514, i16* %511, align 2
  store i16 %515, i16* %513, align 4
  br i1 %516, label %765, label %767

765:                                              ; preds = %764
  %766 = add nsw i32 %758, 3
  br label %796

767:                                              ; preds = %764
  br i1 %517, label %768, label %770

768:                                              ; preds = %767
  %769 = add nsw i32 %758, 2
  br label %796

770:                                              ; preds = %767
  %771 = add nsw i32 %758, 1
  br label %796

772:                                              ; preds = %735
  %773 = icmp eq i32 %761, 0
  br i1 %773, label %792, label %774

774:                                              ; preds = %772
  %775 = icmp eq i32 %561, 0
  br i1 %775, label %776, label %778

776:                                              ; preds = %774
  call void @vp8_cal_sad(%struct.VP8_COMP* %0, %struct.macroblockd* %26, %struct.macroblock* %1, i32 %2, i32* nonnull %506) #4
  %777 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  br label %778

778:                                              ; preds = %774, %776
  %779 = phi %struct.modeinfo* [ %667, %774 ], [ %777, %776 ]
  %780 = phi i32 [ %561, %774 ], [ 1, %776 ]
  %781 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %779, i64 0, i32 0, i32 2
  %782 = load i8, i8* %781, align 2
  %783 = zext i8 %782 to i32
  call void @vp8_mv_pred(%struct.VP8_COMP* %0, %struct.macroblockd* %26, %struct.modeinfo* %779, %union.int_mv* nonnull %19, i32 %783, i32* %507, i32* nonnull %21, i32* nonnull %506) #4
  %784 = load i32, i32* %21, align 4
  %785 = add nsw i32 %784, %756
  store i32 %785, i32* %21, align 4
  %786 = icmp sgt i32 %785, %758
  %787 = select i1 %786, i32 %785, i32 %758
  %788 = load i16, i16* %509, align 2
  %789 = ashr i16 %788, 3
  store i16 %789, i16* %511, align 2
  %790 = load i16, i16* %512, align 4
  %791 = ashr i16 %790, 3
  store i16 %791, i16* %513, align 4
  br label %796

792:                                              ; preds = %772
  %793 = load i32, i32* %31, align 4
  store i32 %793, i32* %42, align 4
  %794 = ashr i16 %737, 3
  store i16 %794, i16* %511, align 2
  %795 = ashr i16 %742, 3
  store i16 %795, i16* %513, align 4
  br label %796

796:                                              ; preds = %778, %792, %765, %770, %768
  %797 = phi i32 [ %561, %765 ], [ %561, %768 ], [ %561, %770 ], [ %780, %778 ], [ %561, %792 ]
  %798 = phi i32 [ %766, %765 ], [ %769, %768 ], [ %771, %770 ], [ %787, %778 ], [ %758, %792 ]
  %799 = and i1 %518, %762
  %800 = and i1 %300, %799
  br i1 %800, label %801, label %823

801:                                              ; preds = %796
  %802 = load i16, i16* %500, align 4
  %803 = sext i16 %802 to i32
  %804 = sub nsw i32 %803, %519
  %805 = icmp slt i32 %804, 0
  %806 = sub nsw i32 0, %804
  %807 = select i1 %805, i32 %806, i32 %804
  %808 = load i16, i16* %499, align 2
  %809 = sext i16 %808 to i32
  %810 = sub nsw i32 %809, %520
  %811 = icmp slt i32 %810, 0
  %812 = sub nsw i32 0, %810
  %813 = select i1 %811, i32 %812, i32 %810
  %814 = icmp sgt i32 %807, %813
  %815 = select i1 %814, i32 %807, i32 %813
  %816 = icmp ult i32 %815, 5
  br i1 %816, label %817, label %823

817:                                              ; preds = %801
  %818 = load i32, i32* %497, align 4
  store i32 %818, i32* %528, align 8
  %819 = getelementptr inbounds %union.int_mv, %union.int_mv* %636, i64 8, i32 0
  store i32 %818, i32* %819, align 4
  %820 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)** %530, align 8
  %821 = load i32, i32* %531, align 8
  %822 = call i32 %820(%struct.macroblock* %1, %struct.block* %25, %struct.blockd* %27, %union.int_mv* %525, %union.int_mv* nonnull %13, i32 %821, %struct.variance_vtable* %526, i32** %532, i32* nonnull %17, i32* nonnull %18) #4
  br label %891

823:                                              ; preds = %801, %796
  %824 = load i32, i32* %501, align 16
  %825 = icmp slt i32 %824, %741
  br i1 %825, label %826, label %827

826:                                              ; preds = %823
  store i32 %741, i32* %501, align 16
  br label %827

827:                                              ; preds = %826, %823
  %828 = load i32, i32* %502, align 4
  %829 = icmp sgt i32 %828, %748
  br i1 %829, label %830, label %831

830:                                              ; preds = %827
  store i32 %748, i32* %502, align 4
  br label %831

831:                                              ; preds = %830, %827
  %832 = load i32, i32* %503, align 8
  %833 = icmp slt i32 %832, %746
  br i1 %833, label %834, label %835

834:                                              ; preds = %831
  store i32 %746, i32* %503, align 8
  br label %835

835:                                              ; preds = %834, %831
  %836 = load i32, i32* %504, align 4
  %837 = icmp sgt i32 %836, %750
  br i1 %837, label %838, label %839

838:                                              ; preds = %835
  store i32 %750, i32* %504, align 4
  br label %839

839:                                              ; preds = %838, %835
  %840 = load i32, i32* %362, align 16
  %841 = icmp sgt i32 %840, 7
  br i1 %841, label %846, label %842

842:                                              ; preds = %839
  %843 = load i32, i32* %521, align 4
  %844 = xor i32 %798, -1
  %845 = add i32 %843, %844
  br label %846

846:                                              ; preds = %839, %842
  %847 = phi i32 [ %845, %842 ], [ 0, %839 ]
  %848 = load i32, i32* %522, align 4
  %849 = icmp eq i32 %848, 2
  br i1 %849, label %850, label %855

850:                                              ; preds = %846
  %851 = select i1 %763, i32 %798, i32 0
  %852 = call i32 @vp8_hex_search(%struct.macroblock* %1, %struct.block* %25, %struct.blockd* %27, %union.int_mv* nonnull %24, %union.int_mv* %525, i32 %851, i32 %736, %struct.variance_vtable* %526, i32** %529, %union.int_mv* nonnull %13) #4
  %853 = load i32, i32* %528, align 8
  %854 = getelementptr inbounds %union.int_mv, %union.int_mv* %636, i64 8, i32 0
  store i32 %853, i32* %854, align 4
  br label %884

855:                                              ; preds = %846
  %856 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)** %523, align 32
  %857 = call i32 %856(%struct.macroblock* %1, %struct.block* %25, %struct.blockd* %27, %union.int_mv* nonnull %24, %union.int_mv* %525, i32 %798, i32 %736, i32* nonnull %14, %struct.variance_vtable* %526, i32** %527, %union.int_mv* nonnull %13) #4
  %858 = load i32, i32* %528, align 8
  %859 = getelementptr inbounds %union.int_mv, %union.int_mv* %636, i64 8, i32 0
  store i32 %858, i32* %859, align 4
  %860 = load i32, i32* %14, align 4
  store i32 0, i32* %14, align 4
  %861 = icmp slt i32 %860, %847
  br i1 %861, label %862, label %884

862:                                              ; preds = %855, %882
  %863 = phi i32 [ %883, %882 ], [ 0, %855 ]
  %864 = phi i32 [ %866, %882 ], [ %860, %855 ]
  %865 = phi i32 [ %880, %882 ], [ %857, %855 ]
  %866 = add i32 %864, 1
  %867 = icmp eq i32 %863, 0
  br i1 %867, label %870, label %868

868:                                              ; preds = %862
  %869 = add nsw i32 %863, -1
  store i32 %869, i32* %14, align 4
  br label %879

870:                                              ; preds = %862
  %871 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)** %523, align 32
  %872 = add nsw i32 %866, %798
  %873 = call i32 %871(%struct.macroblock* %1, %struct.block* %25, %struct.blockd* %27, %union.int_mv* nonnull %24, %union.int_mv* %525, i32 %872, i32 %736, i32* nonnull %14, %struct.variance_vtable* %526, i32** %527, %union.int_mv* nonnull %13) #4
  %874 = icmp slt i32 %873, %865
  br i1 %874, label %875, label %877

875:                                              ; preds = %870
  %876 = load i32, i32* %528, align 8
  store i32 %876, i32* %859, align 4
  br label %879

877:                                              ; preds = %870
  %878 = load i32, i32* %859, align 4
  store i32 %878, i32* %528, align 8
  br label %879

879:                                              ; preds = %875, %877, %868
  %880 = phi i32 [ %865, %868 ], [ %873, %875 ], [ %865, %877 ]
  %881 = icmp eq i32 %866, %847
  br i1 %881, label %884, label %882

882:                                              ; preds = %879
  %883 = load i32, i32* %14, align 4
  br label %862

884:                                              ; preds = %879, %855, %850
  %885 = phi i32 [ %852, %850 ], [ %857, %855 ], [ %880, %879 ]
  store <4 x i32> %751, <4 x i32>* %555, align 16
  %886 = icmp eq i32 %885, 2147483647
  br i1 %886, label %891, label %887

887:                                              ; preds = %884
  %888 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)** %530, align 8
  %889 = load i32, i32* %531, align 8
  %890 = call i32 %888(%struct.macroblock* %1, %struct.block* %25, %struct.blockd* %27, %union.int_mv* %525, %union.int_mv* nonnull %13, i32 %889, %struct.variance_vtable* %526, i32** %532, i32* nonnull %17, i32* nonnull %18) #4
  br label %891

891:                                              ; preds = %884, %887, %817
  %892 = load i32, i32* %533, align 8
  %893 = getelementptr inbounds %union.int_mv, %union.int_mv* %636, i64 8
  %894 = getelementptr inbounds %union.int_mv, %union.int_mv* %893, i64 0, i32 0
  store i32 %892, i32* %894, align 4
  %895 = bitcast %union.int_mv* %893 to %struct.MV*
  %896 = getelementptr inbounds %struct.MV, %struct.MV* %895, i64 0, i32 1
  %897 = ashr i32 %892, 16
  %898 = load i32, i32* %534, align 4
  %899 = add nsw i32 %898, -128
  %900 = icmp sgt i32 %899, %897
  br i1 %900, label %905, label %901

901:                                              ; preds = %891
  %902 = load i32, i32* %535, align 8
  %903 = add nsw i32 %902, 128
  %904 = icmp slt i32 %903, %897
  br i1 %904, label %905, label %908

905:                                              ; preds = %901, %891
  %906 = phi i32 [ %899, %891 ], [ %903, %901 ]
  %907 = trunc i32 %906 to i16
  store i16 %907, i16* %896, align 2
  br label %908

908:                                              ; preds = %905, %901
  %909 = bitcast %union.int_mv* %893 to i16*
  %910 = shl i32 %892, 16
  %911 = ashr exact i32 %910, 16
  %912 = load i32, i32* %536, align 4
  %913 = add nsw i32 %912, -128
  %914 = icmp sgt i32 %913, %911
  br i1 %914, label %919, label %915

915:                                              ; preds = %908
  %916 = load i32, i32* %537, align 16
  %917 = add nsw i32 %916, 128
  %918 = icmp slt i32 %917, %911
  br i1 %918, label %919, label %922

919:                                              ; preds = %915, %908
  %920 = phi i32 [ %913, %908 ], [ %917, %915 ]
  %921 = trunc i32 %920 to i16
  store i16 %921, i16* %909, align 4
  br label %922

922:                                              ; preds = %919, %915
  %923 = call i32 @vp8_mv_bit_cost(%union.int_mv* %893, %union.int_mv* nonnull %13, i32** %532, i32 128) #4
  %924 = add nsw i32 %923, %672
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %496) #4
  br label %925

925:                                              ; preds = %682, %682, %922
  %926 = phi i32 [ %672, %682 ], [ %672, %682 ], [ %924, %922 ]
  %927 = phi i32 [ %562, %682 ], [ %562, %682 ], [ %761, %922 ]
  %928 = phi i32 [ %561, %682 ], [ %561, %682 ], [ %797, %922 ]
  %929 = zext i32 %662 to i64
  %930 = getelementptr inbounds %union.int_mv, %union.int_mv* %636, i64 %929, i32 0
  %931 = load i32, i32* %930, align 4
  %932 = icmp eq i32 %931, 0
  br i1 %932, label %1065, label %933

933:                                              ; preds = %678, %682, %925
  %934 = phi i32 [ %926, %925 ], [ %672, %682 ], [ %672, %678 ]
  %935 = phi i32 [ %927, %925 ], [ %562, %682 ], [ %562, %678 ]
  %936 = phi i32 [ %928, %925 ], [ %561, %682 ], [ %561, %678 ]
  %937 = zext i32 %662 to i64
  %938 = getelementptr inbounds %union.int_mv, %union.int_mv* %636, i64 %937
  %939 = bitcast %union.int_mv* %938 to %struct.MV*
  %940 = bitcast %union.int_mv* %938 to i16*
  %941 = load i16, i16* %940, align 4
  %942 = ashr i16 %941, 3
  %943 = sext i16 %942 to i32
  %944 = load i32, i32* %503, align 8
  %945 = icmp sgt i32 %944, %943
  br i1 %945, label %1065, label %946

946:                                              ; preds = %933
  %947 = load i32, i32* %504, align 4
  %948 = icmp slt i32 %947, %943
  br i1 %948, label %1065, label %949

949:                                              ; preds = %946
  %950 = getelementptr inbounds %struct.MV, %struct.MV* %939, i64 0, i32 1
  %951 = load i16, i16* %950, align 2
  %952 = ashr i16 %951, 3
  %953 = sext i16 %952 to i32
  %954 = load i32, i32* %501, align 16
  %955 = icmp sgt i32 %954, %953
  br i1 %955, label %1065, label %956

956:                                              ; preds = %949
  %957 = load i32, i32* %502, align 4
  %958 = icmp slt i32 %957, %953
  br i1 %958, label %1065, label %959

959:                                              ; preds = %956
  %960 = call i32 @vp8_cost_mv_ref(i32 %662, i32* nonnull %34) #4
  %961 = add nsw i32 %960, %934
  %962 = getelementptr inbounds %union.int_mv, %union.int_mv* %938, i64 0, i32 0
  %963 = load i32, i32* %962, align 4
  %964 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %965 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %964, i64 0, i32 0, i32 4, i32 0
  store i32 %963, i32* %965, align 4
  %966 = call fastcc i32 @evaluate_inter_mode(i32* nonnull %18, i32 %961, i32* nonnull %17, %struct.VP8_COMP* %0, %struct.macroblock* %1, i32 %483)
  br label %967

967:                                              ; preds = %683, %682, %704, %734, %703, %687, %959
  %968 = phi i32 [ %567, %682 ], [ %567, %959 ], [ %732, %734 ], [ %567, %704 ], [ %701, %703 ], [ %567, %687 ], [ %567, %683 ]
  %969 = phi i32 [ %672, %682 ], [ %961, %959 ], [ %725, %734 ], [ %725, %704 ], [ %689, %703 ], [ %689, %687 ], [ %672, %683 ]
  %970 = phi i32 [ %562, %682 ], [ %935, %959 ], [ %562, %734 ], [ %562, %704 ], [ %562, %703 ], [ %562, %687 ], [ %562, %683 ]
  %971 = phi i32 [ %561, %682 ], [ %936, %959 ], [ %561, %734 ], [ %561, %704 ], [ %561, %703 ], [ %561, %687 ], [ %561, %683 ]
  %972 = phi i32 [ 2147483647, %682 ], [ %966, %959 ], [ %732, %734 ], [ %732, %704 ], [ %701, %703 ], [ %701, %687 ], [ 2147483647, %683 ]
  %973 = load i32, i32* %297, align 8
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1014, label %975

975:                                              ; preds = %967
  %976 = icmp eq i32 %581, 1
  br i1 %976, label %984, label %977

977:                                              ; preds = %975
  %978 = load i32, i32* %547, align 4
  %979 = sext i32 %581 to i64
  %980 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 %979
  %981 = load i32, i32* %980, align 4
  %982 = sub i32 %978, %981
  %983 = icmp ugt i32 %982, 8
  br label %984

984:                                              ; preds = %975, %977
  %985 = phi i1 [ false, %975 ], [ %983, %977 ]
  %986 = icmp eq i32 %662, 7
  br i1 %986, label %987, label %996

987:                                              ; preds = %984
  %988 = load i32, i32* %18, align 4
  %989 = icmp uge i32 %988, %564
  %990 = or i1 %985, %989
  br i1 %990, label %996, label %991

991:                                              ; preds = %987
  %992 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %993 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %992, i64 0, i32 0, i32 2
  %994 = load i8, i8* %993, align 2
  %995 = zext i8 %994 to i32
  store i32 %995, i32* %548, align 32
  br label %996

996:                                              ; preds = %987, %991, %984
  %997 = phi i32 [ %564, %987 ], [ %988, %991 ], [ %564, %984 ]
  %998 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %999 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %998, i64 0, i32 0, i32 0
  %1000 = load i8, i8* %999, align 4
  %1001 = icmp eq i8 %1000, 8
  br i1 %1001, label %1002, label %1014

1002:                                             ; preds = %996
  %1003 = load i32, i32* %18, align 4
  %1004 = icmp uge i32 %1003, %563
  %1005 = or i1 %985, %1004
  br i1 %1005, label %1014, label %1006

1006:                                             ; preds = %1002
  store i32 8, i32* %549, align 4
  %1007 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %998, i64 0, i32 0, i32 4, i32 0
  %1008 = load i32, i32* %1007, align 4
  store i32 %1008, i32* %550, align 8
  %1009 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %998, i64 0, i32 0, i32 7
  %1010 = load i8, i8* %1009, align 2
  store i8 %1010, i8* %551, align 4
  %1011 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %998, i64 0, i32 0, i32 2
  %1012 = load i8, i8* %1011, align 2
  %1013 = zext i8 %1012 to i32
  store i32 %1013, i32* %552, align 4
  br label %1014

1014:                                             ; preds = %996, %1006, %1002, %967
  %1015 = phi i32 [ %564, %967 ], [ %997, %1002 ], [ %997, %1006 ], [ %997, %996 ]
  %1016 = phi i32 [ %563, %967 ], [ %563, %1002 ], [ %1003, %1006 ], [ %563, %996 ]
  %1017 = icmp slt i32 %972, %568
  br i1 %1017, label %1031, label %1018

1018:                                             ; preds = %1014
  %1019 = load i32, i32* %358, align 32
  %1020 = icmp eq i32 %1019, 0
  br i1 %1020, label %1021, label %1031

1021:                                             ; preds = %1018
  %1022 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i64 %557
  %1023 = load i32, i32* %1022, align 4
  %1024 = icmp slt i32 %1023, 508
  %1025 = select i1 %1024, i32 %1023, i32 508
  %1026 = add nsw i32 %1025, 4
  store i32 %1026, i32* %1022, align 4
  %1027 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %557
  %1028 = load i32, i32* %1027, align 4
  %1029 = ashr i32 %1028, 7
  %1030 = mul nsw i32 %1029, %1026
  store i32 %1030, i32* %582, align 4
  br label %1065

1031:                                             ; preds = %1014, %1018
  store i32 %969, i32* %4, align 4
  %1032 = load i32, i32* %17, align 4
  store i32 %1032, i32* %5, align 4
  %1033 = load i32, i32* %18, align 4
  %1034 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1035 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1034, i64 0, i32 0, i32 0
  %1036 = load i8, i8* %1035, align 4
  %1037 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1034, i64 0, i32 0, i32 1
  %1038 = load i8, i8* %1037, align 1
  %1039 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1034, i64 0, i32 0, i32 2
  %1040 = load i8, i8* %1039, align 2
  %1041 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1034, i64 0, i32 0, i32 3
  %1042 = load i8, i8* %1041, align 1
  %1043 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1034, i64 0, i32 0, i32 4, i32 0
  %1044 = load i32, i32* %1043, align 4
  %1045 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1034, i64 0, i32 0, i32 5
  %1046 = load i8, i8* %1045, align 4
  %1047 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1034, i64 0, i32 0, i32 6
  %1048 = load i8, i8* %1047, align 1
  %1049 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1034, i64 0, i32 0, i32 7
  %1050 = load i8, i8* %1049, align 2
  %1051 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1034, i64 0, i32 0, i32 8
  %1052 = load i8, i8* %1051, align 1
  %1053 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i64 %557
  %1054 = load i32, i32* %1053, align 4
  %1055 = icmp sgt i32 %1054, 33
  %1056 = add nsw i32 %1054, -2
  %1057 = select i1 %1055, i32 %1056, i32 32
  store i32 %1057, i32* %1053, align 4
  %1058 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %557
  %1059 = load i32, i32* %1058, align 4
  %1060 = ashr i32 %1059, 7
  %1061 = mul nsw i32 %1060, %1057
  %1062 = trunc i64 %557 to i32
  %1063 = load i32, i32* %358, align 32
  store i32 %1061, i32* %582, align 4
  %1064 = icmp eq i32 %1063, 0
  br i1 %1064, label %1065, label %1087

1065:                                             ; preds = %1021, %631, %1031, %933, %946, %949, %956, %925, %678, %625, %621, %617, %556, %649
  %1066 = phi i8 [ %1036, %1031 ], [ %558, %649 ], [ %558, %556 ], [ %558, %617 ], [ %558, %621 ], [ %558, %625 ], [ %558, %678 ], [ %558, %925 ], [ %558, %956 ], [ %558, %949 ], [ %558, %946 ], [ %558, %933 ], [ %558, %631 ], [ %558, %1021 ]
  %1067 = phi i8 [ %1038, %1031 ], [ %559, %649 ], [ %559, %556 ], [ %559, %617 ], [ %559, %621 ], [ %559, %625 ], [ %559, %678 ], [ %559, %925 ], [ %559, %956 ], [ %559, %949 ], [ %559, %946 ], [ %559, %933 ], [ %559, %631 ], [ %559, %1021 ]
  %1068 = phi i32 [ %637, %1031 ], [ %637, %649 ], [ %560, %556 ], [ %613, %617 ], [ %613, %621 ], [ %613, %625 ], [ %637, %678 ], [ %637, %925 ], [ %637, %956 ], [ %637, %949 ], [ %637, %946 ], [ %637, %933 ], [ %613, %631 ], [ %637, %1021 ]
  %1069 = phi i32 [ %971, %1031 ], [ %561, %649 ], [ %561, %556 ], [ %561, %617 ], [ %561, %621 ], [ %561, %625 ], [ %561, %678 ], [ %928, %925 ], [ %936, %956 ], [ %936, %949 ], [ %936, %946 ], [ %936, %933 ], [ %561, %631 ], [ %971, %1021 ]
  %1070 = phi i32 [ %970, %1031 ], [ %562, %649 ], [ %562, %556 ], [ %562, %617 ], [ %562, %621 ], [ %562, %625 ], [ %562, %678 ], [ %927, %925 ], [ %935, %956 ], [ %935, %949 ], [ %935, %946 ], [ %935, %933 ], [ %562, %631 ], [ %970, %1021 ]
  %1071 = phi i32 [ %1016, %1031 ], [ %563, %649 ], [ %563, %556 ], [ %563, %617 ], [ %563, %621 ], [ %563, %625 ], [ %563, %678 ], [ %563, %925 ], [ %563, %956 ], [ %563, %949 ], [ %563, %946 ], [ %563, %933 ], [ %563, %631 ], [ %1016, %1021 ]
  %1072 = phi i32 [ %1015, %1031 ], [ %564, %649 ], [ %564, %556 ], [ %564, %617 ], [ %564, %621 ], [ %564, %625 ], [ %564, %678 ], [ %564, %925 ], [ %564, %956 ], [ %564, %949 ], [ %564, %946 ], [ %564, %933 ], [ %564, %631 ], [ %1015, %1021 ]
  %1073 = phi i32 [ %1033, %1031 ], [ %565, %649 ], [ %565, %556 ], [ %565, %617 ], [ %565, %621 ], [ %565, %625 ], [ %565, %678 ], [ %565, %925 ], [ %565, %956 ], [ %565, %949 ], [ %565, %946 ], [ %565, %933 ], [ %565, %631 ], [ %565, %1021 ]
  %1074 = phi i32 [ %1062, %1031 ], [ %566, %649 ], [ %566, %556 ], [ %566, %617 ], [ %566, %621 ], [ %566, %625 ], [ %566, %678 ], [ %566, %925 ], [ %566, %956 ], [ %566, %949 ], [ %566, %946 ], [ %566, %933 ], [ %566, %631 ], [ %566, %1021 ]
  %1075 = phi i32 [ %968, %1031 ], [ %567, %649 ], [ %567, %556 ], [ %567, %617 ], [ %567, %621 ], [ %567, %625 ], [ %567, %678 ], [ %567, %925 ], [ %567, %956 ], [ %567, %949 ], [ %567, %946 ], [ %567, %933 ], [ %567, %631 ], [ %968, %1021 ]
  %1076 = phi i32 [ %972, %1031 ], [ %568, %649 ], [ %568, %556 ], [ %568, %617 ], [ %568, %621 ], [ %568, %625 ], [ %568, %678 ], [ %568, %925 ], [ %568, %956 ], [ %568, %949 ], [ %568, %946 ], [ %568, %933 ], [ %568, %631 ], [ %568, %1021 ]
  %1077 = phi %union.int_mv* [ %636, %1031 ], [ %636, %649 ], [ %569, %556 ], [ %612, %617 ], [ %612, %621 ], [ %612, %625 ], [ %636, %678 ], [ %636, %925 ], [ %636, %956 ], [ %636, %949 ], [ %636, %946 ], [ %636, %933 ], [ %612, %631 ], [ %636, %1021 ]
  %1078 = phi i8 [ %1052, %1031 ], [ %570, %649 ], [ %570, %556 ], [ %570, %617 ], [ %570, %621 ], [ %570, %625 ], [ %570, %678 ], [ %570, %925 ], [ %570, %956 ], [ %570, %949 ], [ %570, %946 ], [ %570, %933 ], [ %570, %631 ], [ %570, %1021 ]
  %1079 = phi i8 [ %1050, %1031 ], [ %571, %649 ], [ %571, %556 ], [ %571, %617 ], [ %571, %621 ], [ %571, %625 ], [ %571, %678 ], [ %571, %925 ], [ %571, %956 ], [ %571, %949 ], [ %571, %946 ], [ %571, %933 ], [ %571, %631 ], [ %571, %1021 ]
  %1080 = phi i8 [ %1048, %1031 ], [ %572, %649 ], [ %572, %556 ], [ %572, %617 ], [ %572, %621 ], [ %572, %625 ], [ %572, %678 ], [ %572, %925 ], [ %572, %956 ], [ %572, %949 ], [ %572, %946 ], [ %572, %933 ], [ %572, %631 ], [ %572, %1021 ]
  %1081 = phi i8 [ %1046, %1031 ], [ %573, %649 ], [ %573, %556 ], [ %573, %617 ], [ %573, %621 ], [ %573, %625 ], [ %573, %678 ], [ %573, %925 ], [ %573, %956 ], [ %573, %949 ], [ %573, %946 ], [ %573, %933 ], [ %573, %631 ], [ %573, %1021 ]
  %1082 = phi i32 [ %1044, %1031 ], [ %574, %649 ], [ %574, %556 ], [ %574, %617 ], [ %574, %621 ], [ %574, %625 ], [ %574, %678 ], [ %574, %925 ], [ %574, %956 ], [ %574, %949 ], [ %574, %946 ], [ %574, %933 ], [ %574, %631 ], [ %574, %1021 ]
  %1083 = phi i8 [ %1042, %1031 ], [ %575, %649 ], [ %575, %556 ], [ %575, %617 ], [ %575, %621 ], [ %575, %625 ], [ %575, %678 ], [ %575, %925 ], [ %575, %956 ], [ %575, %949 ], [ %575, %946 ], [ %575, %933 ], [ %575, %631 ], [ %575, %1021 ]
  %1084 = phi i8 [ %1040, %1031 ], [ %576, %649 ], [ %576, %556 ], [ %576, %617 ], [ %576, %621 ], [ %576, %625 ], [ %576, %678 ], [ %576, %925 ], [ %576, %956 ], [ %576, %949 ], [ %576, %946 ], [ %576, %933 ], [ %576, %631 ], [ %576, %1021 ]
  %1085 = add nuw nsw i64 %557, 1
  %1086 = icmp eq i64 %1085, 20
  br i1 %1086, label %1089, label %556

1087:                                             ; preds = %1031
  %1088 = trunc i64 %557 to i32
  br label %1089

1089:                                             ; preds = %1065, %1087
  %1090 = phi i8 [ %1040, %1087 ], [ %1084, %1065 ]
  %1091 = phi i8 [ %1042, %1087 ], [ %1083, %1065 ]
  %1092 = phi i32 [ %1044, %1087 ], [ %1082, %1065 ]
  %1093 = phi i8 [ %1046, %1087 ], [ %1081, %1065 ]
  %1094 = phi i8 [ %1048, %1087 ], [ %1080, %1065 ]
  %1095 = phi i8 [ %1050, %1087 ], [ %1079, %1065 ]
  %1096 = phi i8 [ %1052, %1087 ], [ %1078, %1065 ]
  %1097 = phi i32 [ %972, %1087 ], [ %1076, %1065 ]
  %1098 = phi i32 [ %1088, %1087 ], [ %1074, %1065 ]
  %1099 = phi i32 [ %1033, %1087 ], [ %1073, %1065 ]
  %1100 = phi i32 [ %1015, %1087 ], [ %1072, %1065 ]
  %1101 = phi i32 [ %1016, %1087 ], [ %1071, %1065 ]
  %1102 = phi i32 [ %637, %1087 ], [ %1068, %1065 ]
  %1103 = phi i8 [ %1038, %1087 ], [ %1067, %1065 ]
  %1104 = phi i8 [ %1036, %1087 ], [ %1066, %1065 ]
  %1105 = sext i32 %1098 to i64
  %1106 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %1105
  %1107 = load i32, i32* %1106, align 4
  %1108 = add i32 %1107, -1
  %1109 = icmp ult i32 %1108, 536870910
  br i1 %1109, label %1110, label %1122

1110:                                             ; preds = %1089
  %1111 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i64 %1105
  %1112 = load i32, i32* %1111, align 4
  %1113 = ashr i32 %1112, 3
  %1114 = add nsw i32 %1113, 32
  %1115 = icmp slt i32 %1112, %1114
  %1116 = sub nsw i32 %1112, %1113
  %1117 = select i1 %1115, i32 32, i32 %1116
  store i32 %1117, i32* %1111, align 4
  %1118 = load i32, i32* %1106, align 4
  %1119 = ashr i32 %1118, 7
  %1120 = mul nsw i32 %1117, %1119
  %1121 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 %1105
  store i32 %1120, i32* %1121, align 4
  br label %1122

1122:                                             ; preds = %1110, %1089
  %1123 = load i32, i32* %5, align 4
  %1124 = ashr i32 %1123, 7
  %1125 = icmp slt i32 %1124, 1023
  %1126 = select i1 %1125, i32 %1124, i32 1023
  %1127 = sext i32 %1126 to i64
  %1128 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 66, i64 %1127
  %1129 = load i32, i32* %1128, align 4
  %1130 = add nsw i32 %1129, 1
  store i32 %1130, i32* %1128, align 4
  %1131 = load i32, i32* %297, align 8
  %1132 = icmp eq i32 %1131, 0
  br i1 %1132, label %1254, label %1133

1133:                                             ; preds = %1122
  %1134 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %1135 = load i32, i32* %1134, align 8
  %1136 = mul nsw i32 %1135, %7
  %1137 = add nsw i32 %1136, %8
  %1138 = load i32, i32* %549, align 4
  %1139 = icmp eq i32 %1138, 0
  br i1 %1139, label %1140, label %1144

1140:                                             ; preds = %1133
  %1141 = zext i8 %1104 to i32
  store i32 %1141, i32* %549, align 4
  store i32 %1092, i32* %550, align 8
  store i8 %1095, i8* %551, align 4
  %1142 = zext i8 %1090 to i32
  store i32 %1142, i32* %552, align 4
  %1143 = load i32, i32* %297, align 8
  br label %1144

1144:                                             ; preds = %1140, %1133
  %1145 = phi i32 [ %1141, %1140 ], [ %1138, %1133 ]
  %1146 = phi i32 [ %1143, %1140 ], [ %1131, %1133 ]
  %1147 = phi i32 [ %1099, %1140 ], [ %1101, %1133 ]
  %1148 = icmp eq i32 %1146, 4
  br i1 %1148, label %1149, label %1157

1149:                                             ; preds = %1144
  %1150 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 7
  %1151 = load i32, i32* %1150, align 4
  %1152 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 6
  %1153 = load i32, i32* %1152, align 8
  %1154 = mul nsw i32 %1153, 70
  %1155 = sdiv i32 %1154, 100
  %1156 = icmp sgt i32 %1151, %1155
  br label %1161

1157:                                             ; preds = %1144
  %1158 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 148
  %1159 = load i32, i32* %1158, align 16
  %1160 = icmp sgt i32 %1159, 1000
  br label %1161

1161:                                             ; preds = %1157, %1149
  %1162 = phi i1 [ %1156, %1149 ], [ %1160, %1157 ]
  %1163 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 43
  store i32 0, i32* %1163, align 16
  %1164 = load i32, i32* %281, align 8
  %1165 = icmp eq i32 %1164, 0
  %1166 = icmp eq i32 %1145, 7
  %1167 = and i1 %1165, %1166
  br i1 %1167, label %1168, label %1184

1168:                                             ; preds = %1161
  %1169 = load i32, i32* %552, align 4
  %1170 = icmp eq i32 %1169, 1
  br i1 %1170, label %1175, label %1171

1171:                                             ; preds = %1168
  %1172 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 218
  %1173 = load i32, i32* %1172, align 16
  %1174 = icmp eq i32 %1169, %1173
  br i1 %1174, label %1175, label %1184

1175:                                             ; preds = %1171, %1168
  %1176 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 144
  %1177 = load i8*, i8** %1176, align 8
  %1178 = sext i32 %1137 to i64
  %1179 = getelementptr inbounds i8, i8* %1177, i64 %1178
  %1180 = load i8, i8* %1179, align 1
  %1181 = icmp ugt i8 %1180, 19
  %1182 = and i1 %1162, %1181
  br i1 %1182, label %1183, label %1184

1183:                                             ; preds = %1175
  store i32 1, i32* %1163, align 16
  br label %1184

1184:                                             ; preds = %1161, %1183, %1175, %1171
  %1185 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 42
  store i32 0, i32* %1185, align 4
  %1186 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200
  %1187 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 45
  %1188 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 145
  %1189 = load i8*, i8** %1188, align 32
  %1190 = sext i32 %1137 to i64
  %1191 = getelementptr inbounds i8, i8* %1189, i64 %1190
  %1192 = load i8, i8* %1191, align 1
  %1193 = zext i8 %1192 to i32
  call void @vp8_denoiser_denoise_mb(%struct.vp8_denoiser* %1186, %struct.macroblock* %1, i32 %1147, i32 %1100, i32 %2, i32 %3, %struct.loop_filter_info_n* %1187, i32 %7, i32 %8, i32 %1137, i32 %1193) #4
  %1194 = icmp eq i8 %1090, 0
  br i1 %1194, label %1204, label %1195

1195:                                             ; preds = %1184
  %1196 = icmp eq i8 %1104, 7
  br i1 %1196, label %1254, label %1197

1197:                                             ; preds = %1195
  %1198 = load i32, i32* %1185, align 4
  %1199 = icmp eq i32 %1198, 0
  br i1 %1199, label %1254, label %1200

1200:                                             ; preds = %1197
  %1201 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 148
  %1202 = load i32, i32* %1201, align 16
  %1203 = icmp sgt i32 %1202, 2000
  br label %1204

1204:                                             ; preds = %1200, %1184
  %1205 = phi i1 [ true, %1184 ], [ %1203, %1200 ]
  %1206 = and i1 %482, %1205
  br i1 %1206, label %1207, label %1254

1207:                                             ; preds = %1204
  %1208 = load i32, i32* %548, align 32
  %1209 = icmp eq i32 %1208, 0
  br i1 %1209, label %1254, label %1210

1210:                                             ; preds = %1207
  %1211 = sext i32 %1208 to i64
  %1212 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 10, i64 %1211
  %1213 = load i32, i32* %1212, align 4
  %1214 = call i32 @vp8_cost_mv_ref(i32 7, i32* nonnull %34) #4
  %1215 = add nsw i32 %1214, %1213
  store i32 0, i32* %17, align 4
  %1216 = trunc i32 %1208 to i8
  %1217 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1218 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1217, i64 0, i32 0, i32 2
  store i8 %1216, i8* %1218, align 2
  %1219 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 %1211
  %1220 = bitcast [3 x i8*]* %1219 to <2 x i64>*
  %1221 = load <2 x i64>, <2 x i64>* %1220, align 8
  %1222 = bitcast i8** %484 to <2 x i64>*
  store <2 x i64> %1221, <2 x i64>* %1222, align 8
  %1223 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %22, i64 0, i64 %1211, i64 2
  %1224 = bitcast i8** %1223 to i64*
  %1225 = load i64, i64* %1224, align 8
  store i64 %1225, i64* %486, align 8
  %1226 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1227 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1226, i64 0, i32 0, i32 0
  store i8 7, i8* %1227, align 4
  %1228 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1229 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1228, i64 0, i32 0, i32 1
  store i8 0, i8* %1229, align 1
  %1230 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1231 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1230, i64 0, i32 0, i32 4, i32 0
  store i32 0, i32* %1231, align 4
  %1232 = call fastcc i32 @evaluate_inter_mode(i32* nonnull %18, i32 %1215, i32* nonnull %17, %struct.VP8_COMP* %0, %struct.macroblock* %1, i32 100)
  %1233 = icmp slt i32 %1232, %1097
  br i1 %1233, label %1234, label %1254

1234:                                             ; preds = %1210
  %1235 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1236 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1235, i64 0, i32 0, i32 0
  %1237 = load i8, i8* %1236, align 4
  %1238 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1235, i64 0, i32 0, i32 1
  %1239 = load i8, i8* %1238, align 1
  %1240 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1235, i64 0, i32 0, i32 2
  %1241 = load i8, i8* %1240, align 2
  %1242 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1235, i64 0, i32 0, i32 3
  %1243 = load i8, i8* %1242, align 1
  %1244 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1235, i64 0, i32 0, i32 4, i32 0
  %1245 = load i32, i32* %1244, align 4
  %1246 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1235, i64 0, i32 0, i32 5
  %1247 = load i8, i8* %1246, align 4
  %1248 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1235, i64 0, i32 0, i32 6
  %1249 = load i8, i8* %1248, align 1
  %1250 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1235, i64 0, i32 0, i32 7
  %1251 = load i8, i8* %1250, align 2
  %1252 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1235, i64 0, i32 0, i32 8
  %1253 = load i8, i8* %1252, align 1
  br label %1254

1254:                                             ; preds = %1195, %1197, %1204, %1207, %1234, %1210, %1122
  %1255 = phi i8 [ %1090, %1122 ], [ %1090, %1207 ], [ %1090, %1204 ], [ %1241, %1234 ], [ %1090, %1210 ], [ %1090, %1197 ], [ %1090, %1195 ]
  %1256 = phi i8 [ %1091, %1122 ], [ %1091, %1207 ], [ %1091, %1204 ], [ %1243, %1234 ], [ %1091, %1210 ], [ %1091, %1197 ], [ %1091, %1195 ]
  %1257 = phi i32 [ %1092, %1122 ], [ %1092, %1207 ], [ %1092, %1204 ], [ %1245, %1234 ], [ %1092, %1210 ], [ %1092, %1197 ], [ %1092, %1195 ]
  %1258 = phi i8 [ %1093, %1122 ], [ %1093, %1207 ], [ %1093, %1204 ], [ %1247, %1234 ], [ %1093, %1210 ], [ %1093, %1197 ], [ %1093, %1195 ]
  %1259 = phi i8 [ %1094, %1122 ], [ %1094, %1207 ], [ %1094, %1204 ], [ %1249, %1234 ], [ %1094, %1210 ], [ %1094, %1197 ], [ %1094, %1195 ]
  %1260 = phi i8 [ %1095, %1122 ], [ %1095, %1207 ], [ %1095, %1204 ], [ %1251, %1234 ], [ %1095, %1210 ], [ %1095, %1197 ], [ %1095, %1195 ]
  %1261 = phi i8 [ %1096, %1122 ], [ %1096, %1207 ], [ %1096, %1204 ], [ %1253, %1234 ], [ %1096, %1210 ], [ %1096, %1197 ], [ %1096, %1195 ]
  %1262 = phi i8 [ %1103, %1122 ], [ %1103, %1207 ], [ %1103, %1204 ], [ %1239, %1234 ], [ %1103, %1210 ], [ %1103, %1197 ], [ %1103, %1195 ]
  %1263 = phi i8 [ %1104, %1122 ], [ %1104, %1207 ], [ %1104, %1204 ], [ %1237, %1234 ], [ %1104, %1210 ], [ %1104, %1197 ], [ 7, %1195 ]
  %1264 = load i32, i32* %493, align 4
  %1265 = icmp eq i32 %1264, 0
  br i1 %1265, label %1286, label %1266

1266:                                             ; preds = %1254
  %1267 = icmp eq i8 %1263, 7
  %1268 = icmp eq i8 %1255, 3
  %1269 = and i1 %1268, %1267
  br i1 %1269, label %1286, label %1270

1270:                                             ; preds = %1266
  %1271 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1272 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1271, i64 0, i32 0, i32 0
  store i8 7, i8* %1272, align 4
  %1273 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1274 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1273, i64 0, i32 0, i32 2
  store i8 3, i8* %1274, align 2
  %1275 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1276 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1275, i64 0, i32 0, i32 4, i32 0
  store i32 0, i32* %1276, align 4
  %1277 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1278 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1277, i64 0, i32 0, i32 1
  store i8 0, i8* %1278, align 1
  %1279 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 30
  %1280 = load i32, i32* %1279, align 32
  %1281 = trunc i32 %1280 to i8
  %1282 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1283 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1282, i64 0, i32 0, i32 6
  store i8 %1281, i8* %1283, align 1
  %1284 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1285 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1284, i64 0, i32 0, i32 5
  store i8 0, i8* %1285, align 4
  br label %1349

1286:                                             ; preds = %1266, %1254
  %1287 = load i32, i32* %358, align 32
  %1288 = icmp eq i32 %1287, 0
  br i1 %1288, label %1289, label %1300

1289:                                             ; preds = %1286
  %1290 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1291 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1290, i64 0, i32 0, i32 0
  store i8 %1263, i8* %1291, align 4
  %1292 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1290, i64 0, i32 0, i32 1
  store i8 %1262, i8* %1292, align 1
  %1293 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1290, i64 0, i32 0, i32 2
  store i8 %1255, i8* %1293, align 2
  %1294 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1290, i64 0, i32 0, i32 3
  store i8 %1256, i8* %1294, align 1
  %1295 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1290, i64 0, i32 0, i32 4, i32 0
  store i32 %1257, i32* %1295, align 4
  %1296 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1290, i64 0, i32 0, i32 5
  store i8 %1258, i8* %1296, align 4
  %1297 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1290, i64 0, i32 0, i32 6
  store i8 %1259, i8* %1297, align 1
  %1298 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1290, i64 0, i32 0, i32 7
  store i8 %1260, i8* %1298, align 2
  %1299 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1290, i64 0, i32 0, i32 8
  store i8 %1261, i8* %1299, align 1
  br label %1300

1300:                                             ; preds = %1286, %1289
  %1301 = icmp ult i8 %1263, 5
  br i1 %1301, label %1302, label %1303

1302:                                             ; preds = %1300
  call fastcc void @pick_intra_mbuv_mode(%struct.macroblock* %1)
  br label %1303

1303:                                             ; preds = %1302, %1300
  %1304 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1305 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1304, i64 0, i32 0, i32 2
  %1306 = load i8, i8* %1305, align 2
  %1307 = zext i8 %1306 to i64
  %1308 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %1307
  %1309 = load i32, i32* %1308, align 4
  %1310 = icmp eq i32 %1102, %1309
  br i1 %1310, label %1316, label %1311

1311:                                             ; preds = %1303
  %1312 = icmp eq i32 %1102, 0
  %1313 = zext i1 %1312 to i64
  %1314 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %11, i64 0, i64 %1313, i32 0
  %1315 = load i32, i32* %1314, align 4
  store i32 %1315, i32* %31, align 4
  br label %1316

1316:                                             ; preds = %1303, %1311
  %1317 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1304, i64 0, i32 0, i32 0
  %1318 = load i8, i8* %1317, align 4
  %1319 = icmp eq i8 %1318, 8
  br i1 %1319, label %1320, label %1349

1320:                                             ; preds = %1316
  %1321 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1304, i64 0, i32 0, i32 4
  %1322 = bitcast %union.int_mv* %1321 to i16*
  %1323 = load i16, i16* %1322, align 4
  %1324 = sext i16 %1323 to i32
  %1325 = load i16, i16* %500, align 4
  %1326 = sext i16 %1325 to i32
  %1327 = sub nsw i32 %1324, %1326
  %1328 = ashr i32 %1327, 1
  %1329 = add nsw i32 %1328, 1023
  %1330 = sext i32 %1329 to i64
  %1331 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 51, i64 0, i64 %1330
  %1332 = load i32, i32* %1331, align 4
  %1333 = add i32 %1332, 1
  store i32 %1333, i32* %1331, align 4
  %1334 = load %struct.modeinfo*, %struct.modeinfo** %359, align 32
  %1335 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1334, i64 0, i32 0, i32 4
  %1336 = bitcast %union.int_mv* %1335 to %struct.MV*
  %1337 = getelementptr inbounds %struct.MV, %struct.MV* %1336, i64 0, i32 1
  %1338 = load i16, i16* %1337, align 2
  %1339 = sext i16 %1338 to i32
  %1340 = load i16, i16* %499, align 2
  %1341 = sext i16 %1340 to i32
  %1342 = sub nsw i32 %1339, %1341
  %1343 = ashr i32 %1342, 1
  %1344 = add nsw i32 %1343, 1023
  %1345 = sext i32 %1344 to i64
  %1346 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 51, i64 1, i64 %1345
  %1347 = load i32, i32* %1346, align 4
  %1348 = add i32 %1347, 1
  store i32 %1348, i32* %1346, align 4
  br label %1349

1349:                                             ; preds = %1320, %1316, %1270
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #4
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %45) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %38) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %29) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @check_dot_artifact_candidate(%struct.VP8_COMP* nocapture readonly, %struct.macroblock* nocapture, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %10 = load i32, i32* %9, align 16
  %11 = sdiv i32 %10, 10
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %13 = load i32, i32* %12, align 8
  %14 = icmp sgt i32 %7, 0
  %15 = select i1 %14, i32 7, i32 15
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 72
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %314

22:                                               ; preds = %8
  %23 = icmp ugt i32 %17, 1
  %24 = select i1 %23, i32 20, i32 30
  %25 = mul nsw i32 %13, %5
  %26 = add nsw i32 %25, %6
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 145
  %28 = load i8*, i8** %27, align 32
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = icmp ult i32 %24, %32
  br i1 %33, label %34, label %314

34:                                               ; preds = %22
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 71
  %36 = load i32, i32* %35, align 16
  %37 = icmp ult i32 %36, %11
  br i1 %37, label %38, label %314

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %314

42:                                               ; preds = %38
  store i32 1, i32* %18, align 4
  %43 = load i8, i8* %4, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %4, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sext i32 %3 to i64
  %49 = getelementptr inbounds i8, i8* %4, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = add nsw i32 %3, 1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %4, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = sub nsw i32 %44, %47
  %58 = icmp slt i32 %57, 0
  %59 = sub nsw i32 0, %57
  %60 = select i1 %58, i32 %59, i32 %57
  %61 = sub nsw i32 %44, %51
  %62 = icmp slt i32 %61, 0
  %63 = sub nsw i32 0, %61
  %64 = select i1 %62, i32 %63, i32 %61
  %65 = icmp sgt i32 %60, %64
  %66 = select i1 %65, i32 %60, i32 %64
  %67 = sub nsw i32 %44, %56
  %68 = icmp slt i32 %67, 0
  %69 = sub nsw i32 0, %67
  %70 = select i1 %68, i32 %69, i32 %67
  %71 = icmp sgt i32 %66, %70
  %72 = select i1 %71, i32 %66, i32 %70
  %73 = load i8, i8* %2, align 1
  %74 = zext i8 %73 to i32
  %75 = getelementptr inbounds i8, i8* %2, i64 1
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds i8, i8* %2, i64 %48
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = getelementptr inbounds i8, i8* %2, i64 %53
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = sub nsw i32 %74, %77
  %85 = icmp slt i32 %84, 0
  %86 = sub nsw i32 0, %84
  %87 = select i1 %85, i32 %86, i32 %84
  %88 = sub nsw i32 %74, %80
  %89 = icmp slt i32 %88, 0
  %90 = sub nsw i32 0, %88
  %91 = select i1 %89, i32 %90, i32 %88
  %92 = icmp sgt i32 %87, %91
  %93 = select i1 %92, i32 %87, i32 %91
  %94 = sub nsw i32 %74, %83
  %95 = icmp slt i32 %94, 0
  %96 = sub nsw i32 0, %94
  %97 = select i1 %95, i32 %96, i32 %94
  %98 = icmp sgt i32 %93, %97
  %99 = select i1 %98, i32 %93, i32 %97
  %100 = icmp sgt i32 %72, 5
  %101 = icmp slt i32 %99, 4
  %102 = and i1 %100, %101
  br i1 %102, label %103, label %105

103:                                              ; preds = %42
  %104 = add nuw i32 %36, 1
  store i32 %104, i32* %35, align 16
  br label %314

105:                                              ; preds = %42
  %106 = zext i32 %15 to i64
  %107 = getelementptr inbounds i8, i8* %4, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = add nsw i32 %15, -1
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %4, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nsw i32 %15, %3
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %4, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = add nsw i32 %115, -1
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %4, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = sub nsw i32 %109, %114
  %126 = icmp slt i32 %125, 0
  %127 = sub nsw i32 0, %125
  %128 = select i1 %126, i32 %127, i32 %125
  %129 = sub nsw i32 %109, %119
  %130 = icmp slt i32 %129, 0
  %131 = sub nsw i32 0, %129
  %132 = select i1 %130, i32 %131, i32 %129
  %133 = icmp sgt i32 %128, %132
  %134 = select i1 %133, i32 %128, i32 %132
  %135 = sub nsw i32 %109, %124
  %136 = icmp slt i32 %135, 0
  %137 = sub nsw i32 0, %135
  %138 = select i1 %136, i32 %137, i32 %135
  %139 = icmp sgt i32 %134, %138
  %140 = select i1 %139, i32 %134, i32 %138
  %141 = getelementptr inbounds i8, i8* %2, i64 %106
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = getelementptr inbounds i8, i8* %2, i64 %111
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = getelementptr inbounds i8, i8* %2, i64 %116
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = getelementptr inbounds i8, i8* %2, i64 %121
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = sub nsw i32 %143, %146
  %154 = icmp slt i32 %153, 0
  %155 = sub nsw i32 0, %153
  %156 = select i1 %154, i32 %155, i32 %153
  %157 = sub nsw i32 %143, %149
  %158 = icmp slt i32 %157, 0
  %159 = sub nsw i32 0, %157
  %160 = select i1 %158, i32 %159, i32 %157
  %161 = icmp sgt i32 %156, %160
  %162 = select i1 %161, i32 %156, i32 %160
  %163 = sub nsw i32 %143, %152
  %164 = icmp slt i32 %163, 0
  %165 = sub nsw i32 0, %163
  %166 = select i1 %164, i32 %165, i32 %163
  %167 = icmp sgt i32 %162, %166
  %168 = select i1 %167, i32 %162, i32 %166
  %169 = icmp sgt i32 %140, 5
  %170 = icmp slt i32 %168, 4
  %171 = and i1 %169, %170
  br i1 %171, label %172, label %174

172:                                              ; preds = %105
  %173 = add nuw i32 %36, 1
  store i32 %173, i32* %35, align 16
  br label %314

174:                                              ; preds = %105
  %175 = mul nsw i32 %15, %3
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %4, i64 %176
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = add nsw i32 %175, 1
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %4, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = mul nsw i32 %110, %3
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %4, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = or i32 %185, 1
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %4, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = sub nsw i32 %179, %184
  %196 = icmp slt i32 %195, 0
  %197 = sub nsw i32 0, %195
  %198 = select i1 %196, i32 %197, i32 %195
  %199 = sub nsw i32 %179, %189
  %200 = icmp slt i32 %199, 0
  %201 = sub nsw i32 0, %199
  %202 = select i1 %200, i32 %201, i32 %199
  %203 = icmp sgt i32 %198, %202
  %204 = select i1 %203, i32 %198, i32 %202
  %205 = sub nsw i32 %179, %194
  %206 = icmp slt i32 %205, 0
  %207 = sub nsw i32 0, %205
  %208 = select i1 %206, i32 %207, i32 %205
  %209 = icmp sgt i32 %204, %208
  %210 = select i1 %209, i32 %204, i32 %208
  %211 = getelementptr inbounds i8, i8* %2, i64 %176
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = getelementptr inbounds i8, i8* %2, i64 %181
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = getelementptr inbounds i8, i8* %2, i64 %186
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = getelementptr inbounds i8, i8* %2, i64 %191
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = sub nsw i32 %213, %216
  %224 = icmp slt i32 %223, 0
  %225 = sub nsw i32 0, %223
  %226 = select i1 %224, i32 %225, i32 %223
  %227 = sub nsw i32 %213, %219
  %228 = icmp slt i32 %227, 0
  %229 = sub nsw i32 0, %227
  %230 = select i1 %228, i32 %229, i32 %227
  %231 = icmp sgt i32 %226, %230
  %232 = select i1 %231, i32 %226, i32 %230
  %233 = sub nsw i32 %213, %222
  %234 = icmp slt i32 %233, 0
  %235 = sub nsw i32 0, %233
  %236 = select i1 %234, i32 %235, i32 %233
  %237 = icmp sgt i32 %232, %236
  %238 = select i1 %237, i32 %232, i32 %236
  %239 = icmp sgt i32 %210, 5
  %240 = icmp slt i32 %238, 4
  %241 = and i1 %239, %240
  br i1 %241, label %242, label %244

242:                                              ; preds = %174
  %243 = add nuw i32 %36, 1
  store i32 %243, i32* %35, align 16
  br label %314

244:                                              ; preds = %174
  %245 = add nsw i32 %175, %15
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i8, i8* %4, i64 %246
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i32
  %250 = add nsw i32 %245, -1
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i8, i8* %4, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i32
  %255 = add nsw i32 %185, %15
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds i8, i8* %4, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = add nsw i32 %255, -1
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %4, i64 %261
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = sub nsw i32 %249, %254
  %266 = icmp slt i32 %265, 0
  %267 = sub nsw i32 0, %265
  %268 = select i1 %266, i32 %267, i32 %265
  %269 = sub nsw i32 %249, %259
  %270 = icmp slt i32 %269, 0
  %271 = sub nsw i32 0, %269
  %272 = select i1 %270, i32 %271, i32 %269
  %273 = icmp sgt i32 %268, %272
  %274 = select i1 %273, i32 %268, i32 %272
  %275 = sub nsw i32 %249, %264
  %276 = icmp slt i32 %275, 0
  %277 = sub nsw i32 0, %275
  %278 = select i1 %276, i32 %277, i32 %275
  %279 = icmp sgt i32 %274, %278
  %280 = select i1 %279, i32 %274, i32 %278
  %281 = getelementptr inbounds i8, i8* %2, i64 %246
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i32
  %284 = getelementptr inbounds i8, i8* %2, i64 %251
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i32
  %287 = getelementptr inbounds i8, i8* %2, i64 %256
  %288 = load i8, i8* %287, align 1
  %289 = zext i8 %288 to i32
  %290 = getelementptr inbounds i8, i8* %2, i64 %261
  %291 = load i8, i8* %290, align 1
  %292 = zext i8 %291 to i32
  %293 = sub nsw i32 %283, %286
  %294 = icmp slt i32 %293, 0
  %295 = sub nsw i32 0, %293
  %296 = select i1 %294, i32 %295, i32 %293
  %297 = sub nsw i32 %283, %289
  %298 = icmp slt i32 %297, 0
  %299 = sub nsw i32 0, %297
  %300 = select i1 %298, i32 %299, i32 %297
  %301 = icmp sgt i32 %296, %300
  %302 = select i1 %301, i32 %296, i32 %300
  %303 = sub nsw i32 %283, %292
  %304 = icmp slt i32 %303, 0
  %305 = sub nsw i32 0, %303
  %306 = select i1 %304, i32 %305, i32 %303
  %307 = icmp sgt i32 %302, %306
  %308 = select i1 %307, i32 %302, i32 %306
  %309 = icmp sgt i32 %280, 5
  %310 = icmp slt i32 %308, 4
  %311 = and i1 %309, %310
  br i1 %311, label %312, label %314

312:                                              ; preds = %244
  %313 = add nuw i32 %36, 1
  store i32 %313, i32* %35, align 16
  br label %314

314:                                              ; preds = %8, %22, %34, %38, %244, %312, %242, %172, %103
  %315 = phi i32 [ 1, %103 ], [ 1, %172 ], [ 1, %242 ], [ 1, %312 ], [ 0, %244 ], [ 0, %38 ], [ 0, %34 ], [ 0, %22 ], [ 0, %8 ]
  ret i32 %315
}

declare i32 @vp8_find_near_mvs_bias(%struct.macroblockd*, %struct.modeinfo*, [10 x %union.int_mv]*, %union.int_mv*, i32*, i32, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @pick_intra4x4mby_modes(%struct.macroblock*, i32* nocapture, i32* nocapture) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 25
  %5 = load [10 x i32]*, [10 x i32]** %4, align 8
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [10 x i32], [10 x i32]* %5, i64 %8, i64 4
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 13
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 4
  %14 = load i32, i32* %13, align 16
  %15 = sext i32 %14 to i64
  %16 = sub nsw i64 0, %15
  %17 = getelementptr inbounds i8, i8* %12, i64 %16
  %18 = getelementptr inbounds i8, i8* %17, i64 16
  %19 = bitcast i8* %18 to i32*
  %20 = shl nsw i32 %14, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %18, i64 %21
  %23 = bitcast i8* %22 to i32*
  %24 = shl nsw i32 %14, 3
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %18, i64 %25
  %27 = bitcast i8* %26 to i32*
  %28 = mul nsw i32 %14, 12
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %18, i64 %29
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %19, align 4
  store i32 %32, i32* %23, align 4
  %33 = load i32, i32* %19, align 4
  store i32 %33, i32* %27, align 4
  %34 = load i32, i32* %19, align 4
  store i32 %34, i32* %31, align 4
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 28
  %36 = load i32*, i32** %35, align 32
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 14
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 27
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 18
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 17
  br label %42

42:                                               ; preds = %210, %3
  %43 = phi i64 [ 0, %3 ], [ %211, %210 ]
  %44 = phi i32* [ %36, %3 ], [ %98, %210 ]
  %45 = phi i32 [ 0, %3 ], [ %206, %210 ]
  %46 = phi i32 [ %10, %3 ], [ %205, %210 ]
  %47 = load %struct.modeinfo*, %struct.modeinfo** %37, align 32
  %48 = load i32, i32* %38, align 8
  %49 = load i32, i32* %6, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %42
  %52 = trunc i64 %43 to i32
  br label %96

53:                                               ; preds = %42
  %54 = icmp ugt i64 %43, 3
  br i1 %54, label %67, label %55

55:                                               ; preds = %53
  %56 = sext i32 %48 to i64
  %57 = sub nsw i64 0, %56
  %58 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %47, i64 %57, i32 0, i32 0
  %59 = load i8, i8* %58, align 4
  switch i8 %59, label %71 [
    i8 4, label %60
    i8 3, label %66
    i8 1, label %64
    i8 2, label %65
  ]

60:                                               ; preds = %55
  %61 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %47, i64 %57, i32 1, i64 %43
  %62 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %61, i64 12, i32 0
  %63 = load i32, i32* %62, align 4
  br label %71

64:                                               ; preds = %55
  br label %71

65:                                               ; preds = %55
  br label %71

66:                                               ; preds = %55
  br label %71

67:                                               ; preds = %53
  %68 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %47, i64 0, i32 1, i64 %43
  %69 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %68, i64 -4, i32 0
  %70 = load i32, i32* %69, align 4
  br label %71

71:                                               ; preds = %55, %60, %64, %65, %66, %67
  %72 = phi i32 [ %70, %67 ], [ 1, %66 ], [ 3, %65 ], [ 2, %64 ], [ %63, %60 ], [ 0, %55 ]
  %73 = trunc i64 %43 to i32
  %74 = and i32 %73, 3
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %86

76:                                               ; preds = %71
  %77 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %47, i64 -1, i32 0, i32 0
  %78 = load i8, i8* %77, align 4
  switch i8 %78, label %90 [
    i8 4, label %79
    i8 3, label %85
    i8 1, label %83
    i8 2, label %84
  ]

79:                                               ; preds = %76
  %80 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %47, i64 -1, i32 1, i64 %43
  %81 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %80, i64 3, i32 0
  %82 = load i32, i32* %81, align 4
  br label %90

83:                                               ; preds = %76
  br label %90

84:                                               ; preds = %76
  br label %90

85:                                               ; preds = %76
  br label %90

86:                                               ; preds = %71
  %87 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %47, i64 0, i32 1, i64 %43
  %88 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %87, i64 -1, i32 0
  %89 = load i32, i32* %88, align 4
  br label %90

90:                                               ; preds = %76, %79, %83, %84, %85, %86
  %91 = phi i32 [ %89, %86 ], [ 1, %85 ], [ 3, %84 ], [ 2, %83 ], [ %82, %79 ], [ 0, %76 ]
  %92 = load [10 x [10 x i32]]*, [10 x [10 x i32]]** %39, align 8
  %93 = zext i32 %72 to i64
  %94 = zext i32 %91 to i64
  %95 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* %92, i64 %93, i64 %94, i64 0
  br label %96

96:                                               ; preds = %51, %90
  %97 = phi i32 [ %52, %51 ], [ %73, %90 ]
  %98 = phi i32* [ %44, %51 ], [ %95, %90 ]
  %99 = load i32, i32* %13, align 16
  %100 = load i8*, i8** %11, align 8
  %101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %43, i32 4
  %102 = load i32, i32* %101, align 8
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %100, i64 %103
  %105 = sext i32 %99 to i64
  %106 = sub nsw i64 0, %105
  %107 = getelementptr inbounds i8, i8* %104, i64 %106
  %108 = getelementptr inbounds i8, i8* %104, i64 -1
  %109 = getelementptr inbounds i8, i8* %107, i64 -1
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %43, i32 2
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 %43, i32 9
  %113 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 %43, i32 10
  %114 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 %43, i32 11
  %115 = load i32, i32* %98, align 4
  %116 = load i8*, i8** %111, align 8
  tail call void @vp8_intra4x4_predict(i8* %107, i8* %108, i32 %99, i32 0, i8* %116, i32 16, i8 zeroext %110) #4
  %117 = load i8**, i8*** %112, align 8
  %118 = load i8*, i8** %117, align 8
  %119 = load i32, i32* %113, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %118, i64 %120
  %122 = load i8*, i8** %111, align 8
  %123 = load i32, i32* %114, align 4
  %124 = tail call i32 @vpx_get4x4sse_cs_c(i8* %121, i32 %123, i8* %122, i32 16) #4
  %125 = load i32, i32* %40, align 8
  %126 = mul nsw i32 %125, %115
  %127 = add nsw i32 %126, 128
  %128 = ashr i32 %127, 8
  %129 = load i32, i32* %41, align 4
  %130 = mul nsw i32 %129, %124
  %131 = add nsw i32 %128, %130
  %132 = icmp eq i32 %131, 2147483647
  %133 = select i1 %132, i32 14, i32 0
  %134 = select i1 %132, i32 0, i32 %115
  %135 = select i1 %132, i32 0, i32 %124
  %136 = getelementptr inbounds i32, i32* %98, i64 1
  %137 = load i32, i32* %136, align 4
  %138 = load i8*, i8** %111, align 8
  tail call void @vp8_intra4x4_predict(i8* %107, i8* %108, i32 %99, i32 1, i8* %138, i32 16, i8 zeroext %110) #4
  %139 = load i8**, i8*** %112, align 8
  %140 = load i8*, i8** %139, align 8
  %141 = load i32, i32* %113, align 8
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i8, i8* %140, i64 %142
  %144 = load i8*, i8** %111, align 8
  %145 = load i32, i32* %114, align 4
  %146 = tail call i32 @vpx_get4x4sse_cs_c(i8* %143, i32 %145, i8* %144, i32 16) #4
  %147 = load i32, i32* %40, align 8
  %148 = mul nsw i32 %147, %137
  %149 = add nsw i32 %148, 128
  %150 = ashr i32 %149, 8
  %151 = load i32, i32* %41, align 4
  %152 = mul nsw i32 %151, %146
  %153 = add nsw i32 %150, %152
  %154 = icmp slt i32 %153, %131
  %155 = select i1 %154, i32 1, i32 %133
  %156 = select i1 %154, i32 %137, i32 %134
  %157 = select i1 %154, i32 %146, i32 %135
  %158 = select i1 %154, i32 %153, i32 %131
  %159 = getelementptr inbounds i32, i32* %98, i64 2
  %160 = load i32, i32* %159, align 4
  %161 = load i8*, i8** %111, align 8
  tail call void @vp8_intra4x4_predict(i8* %107, i8* %108, i32 %99, i32 2, i8* %161, i32 16, i8 zeroext %110) #4
  %162 = load i8**, i8*** %112, align 8
  %163 = load i8*, i8** %162, align 8
  %164 = load i32, i32* %113, align 8
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %163, i64 %165
  %167 = load i8*, i8** %111, align 8
  %168 = load i32, i32* %114, align 4
  %169 = tail call i32 @vpx_get4x4sse_cs_c(i8* %166, i32 %168, i8* %167, i32 16) #4
  %170 = load i32, i32* %40, align 8
  %171 = mul nsw i32 %170, %160
  %172 = add nsw i32 %171, 128
  %173 = ashr i32 %172, 8
  %174 = load i32, i32* %41, align 4
  %175 = mul nsw i32 %174, %169
  %176 = add nsw i32 %173, %175
  %177 = icmp slt i32 %176, %158
  %178 = select i1 %177, i32 2, i32 %155
  %179 = select i1 %177, i32 %160, i32 %156
  %180 = select i1 %177, i32 %169, i32 %157
  %181 = select i1 %177, i32 %176, i32 %158
  %182 = getelementptr inbounds i32, i32* %98, i64 3
  %183 = load i32, i32* %182, align 4
  %184 = load i8*, i8** %111, align 8
  tail call void @vp8_intra4x4_predict(i8* %107, i8* %108, i32 %99, i32 3, i8* %184, i32 16, i8 zeroext %110) #4
  %185 = load i8**, i8*** %112, align 8
  %186 = load i8*, i8** %185, align 8
  %187 = load i32, i32* %113, align 8
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i8, i8* %186, i64 %188
  %190 = load i8*, i8** %111, align 8
  %191 = load i32, i32* %114, align 4
  %192 = tail call i32 @vpx_get4x4sse_cs_c(i8* %189, i32 %191, i8* %190, i32 16) #4
  %193 = load i32, i32* %40, align 8
  %194 = mul nsw i32 %193, %183
  %195 = add nsw i32 %194, 128
  %196 = ashr i32 %195, 8
  %197 = load i32, i32* %41, align 4
  %198 = mul nsw i32 %197, %192
  %199 = add nsw i32 %196, %198
  %200 = icmp slt i32 %199, %181
  %201 = select i1 %200, i32 3, i32 %178
  %202 = select i1 %200, i32 %183, i32 %179
  %203 = select i1 %200, i32 %192, i32 %180
  %204 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %43, i32 6, i32 0
  store i32 %201, i32* %204, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 %97) #4
  %205 = add nsw i32 %202, %46
  %206 = add nsw i32 %203, %45
  %207 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %47, i64 0, i32 1, i64 %43, i32 0
  store i32 %201, i32* %207, align 4
  %208 = load i32, i32* %2, align 4
  %209 = icmp sgt i32 %206, %208
  br i1 %209, label %221, label %210

210:                                              ; preds = %96
  %211 = add nuw nsw i64 %43, 1
  %212 = icmp eq i64 %211, 16
  br i1 %212, label %213, label %42

213:                                              ; preds = %210
  store i32 %205, i32* %1, align 4
  store i32 %206, i32* %2, align 4
  %214 = load i32, i32* %40, align 8
  %215 = mul nsw i32 %214, %205
  %216 = add nsw i32 %215, 128
  %217 = ashr i32 %216, 8
  %218 = load i32, i32* %41, align 4
  %219 = mul nsw i32 %218, %206
  %220 = add nsw i32 %217, %219
  br label %222

221:                                              ; preds = %96
  store i32 %205, i32* %1, align 4
  store i32 2147483647, i32* %2, align 4
  br label %222

222:                                              ; preds = %221, %213
  %223 = phi i32 [ %220, %213 ], [ 2147483647, %221 ]
  ret i32 %223
}

declare void @vp8_build_intra_predictors_mby_s(%struct.macroblockd*, i8*, i8*, i32, i8*, i32) local_unnamed_addr #3

declare void @vp8_cal_sad(%struct.VP8_COMP*, %struct.macroblockd*, %struct.macroblock*, i32, i32*) local_unnamed_addr #3

declare void @vp8_mv_pred(%struct.VP8_COMP*, %struct.macroblockd*, %struct.modeinfo*, %union.int_mv*, i32, i32*, i32*, i32*) local_unnamed_addr #3

declare i32 @vp8_hex_search(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*) local_unnamed_addr #3

declare i32 @vp8_mv_bit_cost(%union.int_mv*, %union.int_mv*, i32**, i32) local_unnamed_addr #3

declare i32 @vp8_cost_mv_ref(i32, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @evaluate_inter_mode(i32*, i32, i32* nocapture, %struct.VP8_COMP* nocapture readonly, %struct.macroblock*, i32) unnamed_addr #1 {
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 13
  %8 = load %struct.modeinfo*, %struct.modeinfo** %7, align 32
  %9 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %8, i64 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 4
  %11 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %8, i64 0, i32 0, i32 4, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 138
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 37
  %18 = load i8*, i8** %17, align 16
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  store i32 0, i32* %0, align 4
  store i32 0, i32* %2, align 4
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 34
  store i32 1, i32* %22, align 32
  br label %144

23:                                               ; preds = %6, %16
  %24 = icmp eq i8 %10, 8
  br i1 %24, label %25, label %35

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 130, i32 7
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 19, i32 33
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  %34 = load i32, i32* %2, align 4
  br label %75

35:                                               ; preds = %25, %23, %29
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 4, i64 0, i32 9
  %37 = load i8**, i8*** %36, align 8
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 4, i64 0, i32 10
  %40 = load i32, i32* %39, align 8
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %38, i64 %41
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 4, i64 0, i32 11
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 11, i32 4
  %46 = load i32, i32* %45, align 16
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 11, i32 13
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 9, i64 0, i32 4
  %50 = load i32, i32* %49, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %48, i64 %51
  %53 = lshr i32 %12, 16
  %54 = and i32 %53, 7
  %55 = shl i32 %12, 16
  %56 = and i32 %12, 7
  %57 = ashr i32 %55, 19
  %58 = mul nsw i32 %46, %57
  %59 = ashr i32 %12, 19
  %60 = add nsw i32 %58, %59
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %52, i64 %61
  %63 = or i32 %54, %56
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %35
  %66 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 177, i64 4, i32 2
  %67 = load i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %66, align 8
  %68 = tail call i32 %67(i8* %62, i32 %46, i32 %54, i32 %56, i8* %42, i32 %44, i32* %0) #4
  br label %73

69:                                               ; preds = %35
  %70 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 177, i64 4, i32 1
  %71 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %70, align 8
  %72 = tail call i32 %71(i8* %42, i32 %44, i8* %62, i32 %46, i32* %0) #4
  br label %73

73:                                               ; preds = %65, %69
  %74 = phi i32 [ %68, %65 ], [ %72, %69 ]
  store i32 %74, i32* %2, align 4
  br label %75

75:                                               ; preds = %33, %73
  %76 = phi i32 [ %34, %33 ], [ %74, %73 ]
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 18
  %78 = load i32, i32* %77, align 8
  %79 = mul nsw i32 %78, %1
  %80 = add nsw i32 %79, 128
  %81 = ashr i32 %80, 8
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 17
  %83 = load i32, i32* %82, align 4
  %84 = mul nsw i32 %76, %83
  %85 = add nsw i32 %81, %84
  %86 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 21, i32 5
  %87 = load i32, i32* %86, align 8
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %89, label %94

89:                                               ; preds = %75
  %90 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 200, i32 5
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 3
  %93 = zext i1 %92 to i32
  br label %94

94:                                               ; preds = %89, %75
  %95 = phi i32 [ %93, %89 ], [ 0, %75 ]
  %96 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 21, i32 10
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 0
  %99 = icmp eq i8 %10, 7
  %100 = and i1 %99, %98
  br i1 %100, label %101, label %122

101:                                              ; preds = %94
  %102 = load %struct.modeinfo*, %struct.modeinfo** %7, align 32
  %103 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %102, i64 0, i32 0, i32 2
  %104 = load i8, i8* %103, align 2
  %105 = icmp eq i8 %104, 1
  br i1 %105, label %106, label %122

106:                                              ; preds = %101
  %107 = icmp eq i32 %95, 0
  br i1 %107, label %108, label %112

108:                                              ; preds = %106
  %109 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 218
  %110 = load i32, i32* %109, align 16
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %112, label %122

112:                                              ; preds = %106, %108
  %113 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 41
  %114 = load i32, i32* %113, align 8
  %115 = icmp eq i32 %114, 0
  %116 = select i1 %115, i32 %5, i32 100
  %117 = sext i32 %85 to i64
  %118 = sext i32 %116 to i64
  %119 = mul nsw i64 %118, %117
  %120 = sdiv i64 %119, 100
  %121 = trunc i64 %120 to i32
  br label %122

122:                                              ; preds = %94, %112, %108, %101
  %123 = phi i32 [ %121, %112 ], [ %85, %108 ], [ %85, %101 ], [ %85, %94 ]
  %124 = load i32, i32* %0, align 4
  %125 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 9, i64 0, i32 3
  %126 = load i16*, i16** %125, align 8
  %127 = getelementptr inbounds i16, i16* %126, i64 1
  %128 = load i16, i16* %127, align 2
  %129 = sext i16 %128 to i32
  %130 = mul nsw i32 %129, %129
  %131 = lshr i32 %130, 4
  %132 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 35
  %133 = load i32, i32* %132, align 4
  %134 = icmp ult i32 %131, %133
  %135 = select i1 %134, i32 %133, i32 %131
  %136 = icmp ugt i32 %135, %124
  br i1 %136, label %137, label %144

137:                                              ; preds = %122
  %138 = tail call i32 @VP8_UVSSE(%struct.macroblock* %4) #4
  %139 = shl i32 %138, 1
  %140 = load i32, i32* %132, align 4
  %141 = icmp ult i32 %139, %140
  %142 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 34
  %143 = zext i1 %141 to i32
  store i32 %143, i32* %142, align 32
  br label %144

144:                                              ; preds = %137, %122, %21
  %145 = phi i32 [ 2147483647, %21 ], [ %123, %122 ], [ %123, %137 ]
  ret i32 %145
}

declare void @vp8_denoiser_denoise_mb(%struct.vp8_denoiser*, %struct.macroblock*, i32, i32, i32, i32, %struct.loop_filter_info_n*, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @pick_intra_mbuv_mode(%struct.macroblock* nocapture readonly) unnamed_addr #1 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to [8 x i8]*
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to [8 x i8]*
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 14
  %7 = load i8*, i8** %6, align 32
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 9
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = sub nsw i64 0, %10
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 15
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 10
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 9
  %19 = load i8**, i8*** %18, align 8
  %20 = load i8*, i8** %19, align 8
  %21 = sext i32 %17 to i64
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 10
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 9
  %25 = load i8**, i8*** %24, align 8
  %26 = load i8*, i8** %25, align 8
  %27 = sext i32 %23 to i64
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 11
  %29 = load i32, i32* %28, align 4
  %30 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %38 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #4
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 4
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 5
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 6
  %45 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 7
  %46 = getelementptr inbounds i8, i8* %12, i64 -1
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %15, i64 -1
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds i8, i8* %7, i64 -1
  %51 = load i8, i8* %50, align 1
  store i8 %51, i8* %30, align 8
  %52 = getelementptr inbounds i8, i8* %14, i64 -1
  %53 = load i8, i8* %52, align 1
  store i8 %53, i8* %38, align 8
  %54 = add nsw i64 %10, -1
  %55 = getelementptr inbounds i8, i8* %7, i64 %54
  %56 = load i8, i8* %55, align 1
  store i8 %56, i8* %31, align 1
  %57 = getelementptr inbounds i8, i8* %14, i64 %54
  %58 = load i8, i8* %57, align 1
  store i8 %58, i8* %39, align 1
  %59 = shl nsw i64 %10, 1
  %60 = add nsw i64 %59, -1
  %61 = getelementptr inbounds i8, i8* %7, i64 %60
  %62 = load i8, i8* %61, align 1
  store i8 %62, i8* %32, align 2
  %63 = getelementptr inbounds i8, i8* %14, i64 %60
  %64 = load i8, i8* %63, align 1
  store i8 %64, i8* %40, align 2
  %65 = mul nsw i64 %10, 3
  %66 = add nsw i64 %65, -1
  %67 = getelementptr inbounds i8, i8* %7, i64 %66
  %68 = load i8, i8* %67, align 1
  store i8 %68, i8* %33, align 1
  %69 = getelementptr inbounds i8, i8* %14, i64 %66
  %70 = load i8, i8* %69, align 1
  store i8 %70, i8* %41, align 1
  %71 = shl nsw i64 %10, 2
  %72 = add nsw i64 %71, -1
  %73 = getelementptr inbounds i8, i8* %7, i64 %72
  %74 = load i8, i8* %73, align 1
  store i8 %74, i8* %34, align 4
  %75 = getelementptr inbounds i8, i8* %14, i64 %72
  %76 = load i8, i8* %75, align 1
  store i8 %76, i8* %42, align 4
  %77 = mul nsw i64 %10, 5
  %78 = add nsw i64 %77, -1
  %79 = getelementptr inbounds i8, i8* %7, i64 %78
  %80 = load i8, i8* %79, align 1
  store i8 %80, i8* %35, align 1
  %81 = getelementptr inbounds i8, i8* %14, i64 %78
  %82 = load i8, i8* %81, align 1
  store i8 %82, i8* %43, align 1
  %83 = mul nsw i64 %10, 6
  %84 = add nsw i64 %83, -1
  %85 = getelementptr inbounds i8, i8* %7, i64 %84
  %86 = load i8, i8* %85, align 1
  store i8 %86, i8* %36, align 2
  %87 = getelementptr inbounds i8, i8* %14, i64 %84
  %88 = load i8, i8* %87, align 1
  store i8 %88, i8* %44, align 2
  %89 = mul nsw i64 %10, 7
  %90 = add nsw i64 %89, -1
  %91 = getelementptr inbounds i8, i8* %7, i64 %90
  %92 = load i8, i8* %91, align 1
  store i8 %92, i8* %37, align 1
  %93 = getelementptr inbounds i8, i8* %14, i64 %90
  %94 = load i8, i8* %93, align 1
  store i8 %94, i8* %45, align 1
  %95 = getelementptr inbounds i8, i8* %20, i64 %21
  %96 = getelementptr inbounds i8, i8* %26, i64 %27
  %97 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 16
  %98 = load i32, i32* %97, align 16
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %104

100:                                              ; preds = %1
  %101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 17
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %214, label %168

104:                                              ; preds = %1
  %105 = load i8, i8* %12, align 1
  %106 = zext i8 %105 to i32
  %107 = load i8, i8* %15, align 1
  %108 = zext i8 %107 to i32
  %109 = getelementptr inbounds i8, i8* %12, i64 1
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add nuw nsw i32 %106, %111
  %113 = getelementptr inbounds i8, i8* %15, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = add nuw nsw i32 %108, %115
  %117 = getelementptr inbounds i8, i8* %12, i64 2
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = add nuw nsw i32 %112, %119
  %121 = getelementptr inbounds i8, i8* %15, i64 2
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %116, %123
  %125 = getelementptr inbounds i8, i8* %12, i64 3
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = add nuw nsw i32 %120, %127
  %129 = getelementptr inbounds i8, i8* %15, i64 3
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = add nuw nsw i32 %124, %131
  %133 = getelementptr inbounds i8, i8* %12, i64 4
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = add nuw nsw i32 %128, %135
  %137 = getelementptr inbounds i8, i8* %15, i64 4
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = add nuw nsw i32 %132, %139
  %141 = getelementptr inbounds i8, i8* %12, i64 5
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = add nuw nsw i32 %136, %143
  %145 = getelementptr inbounds i8, i8* %15, i64 5
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = add nuw nsw i32 %140, %147
  %149 = getelementptr inbounds i8, i8* %12, i64 6
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = add nuw nsw i32 %144, %151
  %153 = getelementptr inbounds i8, i8* %15, i64 6
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = add nuw nsw i32 %148, %155
  %157 = getelementptr inbounds i8, i8* %12, i64 7
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = add nuw nsw i32 %152, %159
  %161 = getelementptr inbounds i8, i8* %15, i64 7
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = add nuw nsw i32 %156, %163
  %165 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 17
  %166 = load i32, i32* %165, align 4
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %204, label %168

168:                                              ; preds = %100, %104
  %169 = phi i32 [ %164, %104 ], [ 0, %100 ]
  %170 = phi i32 [ %160, %104 ], [ 0, %100 ]
  %171 = phi i32 [ 4, %104 ], [ 3, %100 ]
  %172 = zext i8 %51 to i32
  %173 = add nuw nsw i32 %170, %172
  %174 = zext i8 %53 to i32
  %175 = add nuw nsw i32 %169, %174
  %176 = zext i8 %56 to i32
  %177 = add nuw nsw i32 %173, %176
  %178 = zext i8 %58 to i32
  %179 = add nuw nsw i32 %175, %178
  %180 = zext i8 %62 to i32
  %181 = add nuw nsw i32 %177, %180
  %182 = zext i8 %64 to i32
  %183 = add nuw nsw i32 %179, %182
  %184 = zext i8 %68 to i32
  %185 = add nuw nsw i32 %181, %184
  %186 = zext i8 %70 to i32
  %187 = add nuw nsw i32 %183, %186
  %188 = zext i8 %74 to i32
  %189 = add nuw nsw i32 %185, %188
  %190 = zext i8 %76 to i32
  %191 = add nuw nsw i32 %187, %190
  %192 = zext i8 %80 to i32
  %193 = add nuw nsw i32 %189, %192
  %194 = zext i8 %82 to i32
  %195 = add nuw nsw i32 %191, %194
  %196 = zext i8 %86 to i32
  %197 = add nuw nsw i32 %193, %196
  %198 = zext i8 %88 to i32
  %199 = add nuw nsw i32 %195, %198
  %200 = zext i8 %92 to i32
  %201 = add nuw nsw i32 %197, %200
  %202 = zext i8 %94 to i32
  %203 = add nuw nsw i32 %199, %202
  br label %204

204:                                              ; preds = %104, %168
  %205 = phi i32 [ %171, %168 ], [ 3, %104 ]
  %206 = phi i32 [ %201, %168 ], [ %160, %104 ]
  %207 = phi i32 [ %203, %168 ], [ %164, %104 ]
  %208 = add nsw i32 %205, -1
  %209 = shl i32 1, %208
  %210 = add nuw nsw i32 %209, %206
  %211 = ashr i32 %210, %205
  %212 = add nuw nsw i32 %207, %209
  %213 = ashr i32 %212, %205
  br label %214

214:                                              ; preds = %100, %204
  %215 = phi i32 [ %211, %204 ], [ 128, %100 ]
  %216 = phi i32 [ %213, %204 ], [ 128, %100 ]
  %217 = zext i8 %47 to i32
  %218 = zext i8 %49 to i32
  %219 = sext i32 %29 to i64
  %220 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 18, i32 10
  %221 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 18, i32 9
  %222 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 22, i32 10
  %223 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 22, i32 9
  %224 = insertelement <4 x i32> undef, i32 %215, i32 0
  %225 = shufflevector <4 x i32> %224, <4 x i32> undef, <4 x i32> zeroinitializer
  %226 = insertelement <4 x i32> undef, i32 %216, i32 0
  %227 = shufflevector <4 x i32> %226, <4 x i32> undef, <4 x i32> zeroinitializer
  %228 = bitcast i8* %12 to <4 x i8>*
  %229 = load <4 x i8>, <4 x i8>* %228, align 1
  %230 = zext <4 x i8> %229 to <4 x i32>
  %231 = bitcast i8* %15 to <4 x i8>*
  %232 = load <4 x i8>, <4 x i8>* %231, align 1
  %233 = zext <4 x i8> %232 to <4 x i32>
  %234 = getelementptr inbounds i8, i8* %12, i64 4
  %235 = bitcast i8* %234 to <4 x i8>*
  %236 = load <4 x i8>, <4 x i8>* %235, align 1
  %237 = zext <4 x i8> %236 to <4 x i32>
  %238 = getelementptr inbounds i8, i8* %15, i64 4
  %239 = bitcast i8* %238 to <4 x i8>*
  %240 = load <4 x i8>, <4 x i8>* %239, align 1
  %241 = zext <4 x i8> %240 to <4 x i32>
  br label %242

242:                                              ; preds = %387, %214
  %243 = phi i8 [ %53, %214 ], [ %394, %387 ]
  %244 = phi i8 [ %51, %214 ], [ %392, %387 ]
  %245 = phi i32 [ 0, %214 ], [ %369, %387 ]
  %246 = phi i32 [ 0, %214 ], [ %364, %387 ]
  %247 = phi i32 [ 0, %214 ], [ %359, %387 ]
  %248 = phi i32 [ 0, %214 ], [ %354, %387 ]
  %249 = phi i64 [ 0, %214 ], [ %388, %387 ]
  %250 = phi i8* [ %96, %214 ], [ %389, %387 ]
  %251 = phi i8* [ %95, %214 ], [ %390, %387 ]
  %252 = zext i8 %244 to i32
  %253 = zext i8 %243 to i32
  %254 = sub nsw i32 %253, %218
  %255 = sub nsw i32 %252, %217
  %256 = insertelement <4 x i32> undef, i32 %255, i32 0
  %257 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> zeroinitializer
  %258 = insertelement <4 x i32> undef, i32 %254, i32 0
  %259 = shufflevector <4 x i32> %258, <4 x i32> undef, <4 x i32> zeroinitializer
  %260 = insertelement <4 x i32> undef, i32 %252, i32 0
  %261 = shufflevector <4 x i32> %260, <4 x i32> undef, <4 x i32> zeroinitializer
  %262 = insertelement <4 x i32> undef, i32 %253, i32 0
  %263 = shufflevector <4 x i32> %262, <4 x i32> undef, <4 x i32> zeroinitializer
  %264 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %248, i32 0
  %265 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %247, i32 0
  %266 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %246, i32 0
  %267 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %245, i32 0
  %268 = add nsw <4 x i32> %257, %230
  %269 = add nsw <4 x i32> %259, %233
  %270 = bitcast i8* %251 to <4 x i8>*
  %271 = load <4 x i8>, <4 x i8>* %270, align 1
  %272 = zext <4 x i8> %271 to <4 x i32>
  %273 = bitcast i8* %250 to <4 x i8>*
  %274 = load <4 x i8>, <4 x i8>* %273, align 1
  %275 = zext <4 x i8> %274 to <4 x i32>
  %276 = icmp sgt <4 x i32> %268, zeroinitializer
  %277 = select <4 x i1> %276, <4 x i32> %268, <4 x i32> zeroinitializer
  %278 = icmp slt <4 x i32> %277, <i32 255, i32 255, i32 255, i32 255>
  %279 = select <4 x i1> %278, <4 x i32> %277, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %280 = icmp sgt <4 x i32> %269, zeroinitializer
  %281 = select <4 x i1> %280, <4 x i32> %269, <4 x i32> zeroinitializer
  %282 = icmp slt <4 x i32> %281, <i32 255, i32 255, i32 255, i32 255>
  %283 = select <4 x i1> %282, <4 x i32> %281, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %284 = sub nsw <4 x i32> %272, %225
  %285 = mul nsw <4 x i32> %284, %284
  %286 = add nsw <4 x i32> %285, %264
  %287 = sub nsw <4 x i32> %275, %227
  %288 = mul nsw <4 x i32> %287, %287
  %289 = add nsw <4 x i32> %286, %288
  %290 = sub nsw <4 x i32> %272, %230
  %291 = mul nsw <4 x i32> %290, %290
  %292 = add nsw <4 x i32> %265, %291
  %293 = sub nsw <4 x i32> %275, %233
  %294 = mul nsw <4 x i32> %293, %293
  %295 = add nsw <4 x i32> %292, %294
  %296 = sub nsw <4 x i32> %272, %261
  %297 = mul nsw <4 x i32> %296, %296
  %298 = sub nsw <4 x i32> %275, %263
  %299 = mul nsw <4 x i32> %298, %298
  %300 = add nuw nsw <4 x i32> %299, %297
  %301 = add <4 x i32> %300, %266
  %302 = sub nsw <4 x i32> %272, %279
  %303 = mul nsw <4 x i32> %302, %302
  %304 = sub nsw <4 x i32> %275, %283
  %305 = mul nsw <4 x i32> %304, %304
  %306 = add nuw nsw <4 x i32> %305, %303
  %307 = add <4 x i32> %306, %267
  %308 = add nsw <4 x i32> %257, %237
  %309 = add nsw <4 x i32> %259, %241
  %310 = getelementptr inbounds i8, i8* %251, i64 4
  %311 = bitcast i8* %310 to <4 x i8>*
  %312 = load <4 x i8>, <4 x i8>* %311, align 1
  %313 = zext <4 x i8> %312 to <4 x i32>
  %314 = getelementptr inbounds i8, i8* %250, i64 4
  %315 = bitcast i8* %314 to <4 x i8>*
  %316 = load <4 x i8>, <4 x i8>* %315, align 1
  %317 = zext <4 x i8> %316 to <4 x i32>
  %318 = icmp sgt <4 x i32> %308, zeroinitializer
  %319 = select <4 x i1> %318, <4 x i32> %308, <4 x i32> zeroinitializer
  %320 = icmp slt <4 x i32> %319, <i32 255, i32 255, i32 255, i32 255>
  %321 = select <4 x i1> %320, <4 x i32> %319, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %322 = icmp sgt <4 x i32> %309, zeroinitializer
  %323 = select <4 x i1> %322, <4 x i32> %309, <4 x i32> zeroinitializer
  %324 = icmp slt <4 x i32> %323, <i32 255, i32 255, i32 255, i32 255>
  %325 = select <4 x i1> %324, <4 x i32> %323, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %326 = sub nsw <4 x i32> %313, %225
  %327 = mul nsw <4 x i32> %326, %326
  %328 = add nsw <4 x i32> %327, %289
  %329 = sub nsw <4 x i32> %317, %227
  %330 = mul nsw <4 x i32> %329, %329
  %331 = add nsw <4 x i32> %328, %330
  %332 = sub nsw <4 x i32> %313, %237
  %333 = mul nsw <4 x i32> %332, %332
  %334 = add nsw <4 x i32> %295, %333
  %335 = sub nsw <4 x i32> %317, %241
  %336 = mul nsw <4 x i32> %335, %335
  %337 = add nsw <4 x i32> %334, %336
  %338 = sub nsw <4 x i32> %313, %261
  %339 = mul nsw <4 x i32> %338, %338
  %340 = sub nsw <4 x i32> %317, %263
  %341 = mul nsw <4 x i32> %340, %340
  %342 = add nuw nsw <4 x i32> %341, %339
  %343 = add <4 x i32> %342, %301
  %344 = sub nsw <4 x i32> %313, %321
  %345 = mul nsw <4 x i32> %344, %344
  %346 = sub nsw <4 x i32> %317, %325
  %347 = mul nsw <4 x i32> %346, %346
  %348 = add nuw nsw <4 x i32> %347, %345
  %349 = add <4 x i32> %348, %307
  %350 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %351 = add <4 x i32> %331, %350
  %352 = shufflevector <4 x i32> %351, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %353 = add <4 x i32> %351, %352
  %354 = extractelement <4 x i32> %353, i32 0
  %355 = shufflevector <4 x i32> %337, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %356 = add <4 x i32> %337, %355
  %357 = shufflevector <4 x i32> %356, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %358 = add <4 x i32> %356, %357
  %359 = extractelement <4 x i32> %358, i32 0
  %360 = shufflevector <4 x i32> %343, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %361 = add <4 x i32> %343, %360
  %362 = shufflevector <4 x i32> %361, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %363 = add <4 x i32> %361, %362
  %364 = extractelement <4 x i32> %363, i32 0
  %365 = shufflevector <4 x i32> %349, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %366 = add <4 x i32> %349, %365
  %367 = shufflevector <4 x i32> %366, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %368 = add <4 x i32> %366, %367
  %369 = extractelement <4 x i32> %368, i32 0
  %370 = icmp eq i64 %249, 3
  br i1 %370, label %371, label %382

371:                                              ; preds = %242
  %372 = load i32, i32* %220, align 8
  %373 = load i8**, i8*** %221, align 8
  %374 = load i8*, i8** %373, align 8
  %375 = sext i32 %372 to i64
  %376 = getelementptr inbounds i8, i8* %374, i64 %375
  %377 = load i32, i32* %222, align 8
  %378 = load i8**, i8*** %223, align 8
  %379 = load i8*, i8** %378, align 8
  %380 = sext i32 %377 to i64
  %381 = getelementptr inbounds i8, i8* %379, i64 %380
  br label %387

382:                                              ; preds = %242
  %383 = getelementptr inbounds i8, i8* %250, i64 %219
  %384 = getelementptr inbounds i8, i8* %251, i64 %219
  %385 = add nuw nsw i64 %249, 1
  %386 = icmp eq i64 %385, 8
  br i1 %386, label %395, label %387

387:                                              ; preds = %371, %382
  %388 = phi i64 [ 4, %371 ], [ %385, %382 ]
  %389 = phi i8* [ %381, %371 ], [ %383, %382 ]
  %390 = phi i8* [ %376, %371 ], [ %384, %382 ]
  %391 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 %388
  %392 = load i8, i8* %391, align 1
  %393 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 %388
  %394 = load i8, i8* %393, align 1
  br label %242

395:                                              ; preds = %382
  %396 = icmp eq i32 %354, 2147483647
  %397 = select i1 %396, i8 10, i8 0
  %398 = icmp sgt i32 %354, %359
  %399 = select i1 %398, i32 %359, i32 %354
  %400 = select i1 %398, i8 1, i8 %397
  %401 = icmp sgt i32 %399, %364
  %402 = select i1 %401, i32 %364, i32 %399
  %403 = select i1 %401, i8 2, i8 %400
  %404 = icmp sgt i32 %402, %369
  %405 = select i1 %404, i8 3, i8 %403
  %406 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %407 = load %struct.modeinfo*, %struct.modeinfo** %406, align 32
  %408 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %407, i64 0, i32 0, i32 1
  store i8 %405, i8* %408, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_pick_intra_mode(%struct.macroblock*, i32* nocapture) local_unnamed_addr #1 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #4
  store i32 -1431655766, i32* %3, align 4
  %7 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #4
  store i32 -1431655766, i32* %4, align 4
  %8 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #4
  store i32 -1431655766, i32* %5, align 4
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %11 = load %struct.modeinfo*, %struct.modeinfo** %10, align 32
  %12 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %11, i64 0, i32 0, i32 2
  store i8 0, i8* %12, align 2
  tail call fastcc void @pick_intra_mbuv_mode(%struct.macroblock* %0)
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 13
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 4
  %15 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %9, i64 0, i32 0, i64 0
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 9
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 11
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 25
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 15
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 18
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 17
  br label %22

22:                                               ; preds = %22, %2
  %23 = phi i64 [ 0, %2 ], [ %62, %22 ]
  %24 = phi i32 [ -1431655766, %2 ], [ %57, %22 ]
  %25 = phi i32 [ 0, %2 ], [ %61, %22 ]
  %26 = phi i32 [ 0, %2 ], [ %63, %22 ]
  %27 = phi i32 [ 0, %2 ], [ %59, %22 ]
  %28 = phi i32 [ 2147483647, %2 ], [ %58, %22 ]
  %29 = trunc i32 %26 to i8
  %30 = load %struct.modeinfo*, %struct.modeinfo** %10, align 32
  %31 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %30, i64 0, i32 0, i32 0
  store i8 %29, i8* %31, align 4
  %32 = load i8*, i8** %13, align 8
  %33 = load i32, i32* %14, align 16
  %34 = sext i32 %33 to i64
  %35 = sub nsw i64 0, %34
  %36 = getelementptr inbounds i8, i8* %32, i64 %35
  %37 = getelementptr inbounds i8, i8* %32, i64 -1
  call void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* %9, i8* %36, i8* %37, i32 %33, i8* %15, i32 16) #4
  %38 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16, align 8
  %39 = load i8**, i8*** %16, align 8
  %40 = load i8*, i8** %39, align 8
  %41 = load i32, i32* %17, align 4
  %42 = call i32 %38(i8* %40, i32 %41, i8* %15, i32 16, i32* nonnull %5) #4
  %43 = load [10 x i32]*, [10 x i32]** %18, align 8
  %44 = load i32, i32* %19, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [10 x i32], [10 x i32]* %43, i64 %45, i64 %23
  %47 = load i32, i32* %46, align 4
  %48 = load i32, i32* %20, align 8
  %49 = mul nsw i32 %48, %47
  %50 = add nsw i32 %49, 128
  %51 = ashr i32 %50, 8
  %52 = load i32, i32* %21, align 4
  %53 = mul nsw i32 %52, %42
  %54 = add nsw i32 %51, %53
  %55 = icmp sgt i32 %28, %54
  %56 = load i32, i32* %5, align 4
  %57 = select i1 %55, i32 %56, i32 %24
  %58 = select i1 %55, i32 %54, i32 %28
  %59 = select i1 %55, i32 %47, i32 %27
  %60 = trunc i64 %23 to i32
  %61 = select i1 %55, i32 %60, i32 %25
  %62 = add nuw nsw i64 %23, 1
  %63 = add nuw nsw i32 %26, 1
  %64 = icmp eq i64 %62, 4
  br i1 %64, label %65, label %22

65:                                               ; preds = %22
  store i32 %47, i32* %3, align 4
  store i32 %57, i32* %4, align 4
  %66 = trunc i32 %61 to i8
  %67 = load %struct.modeinfo*, %struct.modeinfo** %10, align 32
  %68 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %67, i64 0, i32 0, i32 0
  store i8 %66, i8* %68, align 4
  %69 = call fastcc i32 @pick_intra4x4mby_modes(%struct.macroblock* %0, i32* nonnull %3, i32* nonnull %4)
  %70 = icmp slt i32 %69, %58
  br i1 %70, label %71, label %75

71:                                               ; preds = %65
  %72 = load %struct.modeinfo*, %struct.modeinfo** %10, align 32
  %73 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %72, i64 0, i32 0, i32 0
  store i8 4, i8* %73, align 4
  %74 = load i32, i32* %3, align 4
  br label %75

75:                                               ; preds = %71, %65
  %76 = phi i32 [ %74, %71 ], [ %59, %65 ]
  store i32 %76, i32* %1, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #4
  ret void
}

declare void @vp8_intra4x4_predict(i8*, i8*, i32, i32, i8*, i32, i8 zeroext) local_unnamed_addr #3

declare void @vp8_encode_intra4x4block(%struct.macroblock*, i32) local_unnamed_addr #3

declare i32 @vpx_get4x4sse_cs_c(i8*, i32, i8*, i32) local_unnamed_addr #3

declare i32 @VP8_UVSSE(%struct.macroblock*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
