; ModuleID = '../../third_party/skia/src/core/SkStrikeForGPU.cpp'
source_filename = "../../third_party/skia/src/core/SkStrikeForGPU.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkPackedGlyphID = type { i32 }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN14SkStrikeForGPU13CanDrawAsMaskERK7SkGlyph(%class.SkGlyph* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 1
  %4 = load i16, i16* %2, align 2
  %5 = load i16, i16* %3, align 2
  %6 = icmp ult i16 %4, %5
  %7 = select i1 %6, i16 %5, i16 %4
  %8 = icmp ult i16 %7, 257
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN14SkStrikeForGPU11FitsInAtlasERK7SkGlyph(%class.SkGlyph* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 1
  %4 = load i16, i16* %2, align 2
  %5 = load i16, i16* %3, align 2
  %6 = icmp ult i16 %4, %5
  %7 = select i1 %6, i16 %5, i16 %4
  %8 = icmp ult i16 %7, 257
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN14SkStrikeForGPU13CanDrawAsSDFTERK7SkGlyph(%class.SkGlyph* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 1
  %4 = load i16, i16* %2, align 2
  %5 = load i16, i16* %3, align 2
  %6 = icmp ult i16 %4, %5
  %7 = select i1 %6, i16 %5, i16 %4
  %8 = icmp ult i16 %7, 257
  %9 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 8
  %10 = load i8, i8* %9, align 8
  %11 = icmp eq i8 %10, 5
  %12 = and i1 %11, %8
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14SkStrikeForGPU13CanDrawAsPathERK7SkGlyph(%class.SkGlyph* dereferenceable(40)) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 8
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, 3
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call %class.SkPath* @_ZNK7SkGlyph4pathEv(%class.SkGlyph* %0) #3
  %7 = icmp ne %class.SkPath* %6, null
  br label %8

8:                                                ; preds = %5, %1
  %9 = phi i1 [ false, %1 ], [ %7, %5 ]
  ret i1 %9
}

declare %class.SkPath* @_ZNK7SkGlyph4pathEv(%class.SkGlyph*) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
