; ModuleID = '../../third_party/lzma_sdk/BraIA64.c'
source_filename = "../../third_party/lzma_sdk/BraIA64.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@kBranchTable = internal unnamed_addr constant [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\04\06\06\00\00\07\07\04\04\00\00\04\04\00\00", align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @IA64_Convert(i8* nocapture, i64, i32, i32) local_unnamed_addr #0 {
  %5 = icmp ult i64 %1, 16
  br i1 %5, label %114, label %6

6:                                                ; preds = %4
  %7 = add i64 %1, -16
  %8 = icmp eq i32 %3, 0
  br label %9

9:                                                ; preds = %6, %111
  %10 = phi i64 [ 0, %6 ], [ %112, %111 ]
  %11 = getelementptr inbounds i8, i8* %0, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = and i8 %12, 31
  %14 = zext i8 %13 to i64
  %15 = getelementptr inbounds [32 x i8], [32 x i8]* @kBranchTable, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = trunc i64 %10 to i32
  %19 = add i32 %18, %2
  %20 = sub i32 0, %19
  %21 = select i1 %8, i32 %20, i32 %19
  br label %22

22:                                               ; preds = %107, %9
  %23 = phi i64 [ 5, %9 ], [ %109, %107 ]
  %24 = phi i32 [ 0, %9 ], [ %108, %107 ]
  %25 = shl i32 1, %24
  %26 = and i32 %25, %17
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %107, label %28

28:                                               ; preds = %22
  %29 = lshr i64 %23, 3
  %30 = and i64 %29, 536870911
  %31 = add i64 %10, %30
  %32 = getelementptr inbounds i8, i8* %0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = add i64 %31, 1
  %36 = getelementptr inbounds i8, i8* %0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = shl nuw nsw i64 %38, 8
  %40 = or i64 %39, %34
  %41 = add i64 %31, 2
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = shl nuw nsw i64 %44, 16
  %46 = or i64 %45, %40
  %47 = add i64 %31, 3
  %48 = getelementptr inbounds i8, i8* %0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = shl nuw nsw i64 %50, 24
  %52 = or i64 %51, %46
  %53 = add i64 %31, 4
  %54 = getelementptr inbounds i8, i8* %0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = shl nuw nsw i64 %56, 32
  %58 = or i64 %57, %52
  %59 = add i64 %31, 5
  %60 = getelementptr inbounds i8, i8* %0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i64
  %63 = shl nuw nsw i64 %62, 40
  %64 = or i64 %63, %58
  %65 = and i64 %23, 7
  %66 = lshr i64 %64, %65
  %67 = and i64 %66, 2061584305664
  %68 = icmp eq i64 %67, 687194767360
  br i1 %68, label %69, label %107

69:                                               ; preds = %28
  %70 = lshr i64 %66, 13
  %71 = trunc i64 %70 to i32
  %72 = and i32 %71, 1048575
  %73 = lshr i64 %66, 16
  %74 = trunc i64 %73 to i32
  %75 = and i32 %74, 1048576
  %76 = or i32 %72, %75
  %77 = shl nuw nsw i32 %76, 4
  %78 = add i32 %77, %21
  %79 = lshr i32 %78, 4
  %80 = and i64 %66, -77309403137
  %81 = and i32 %79, 1048575
  %82 = zext i32 %81 to i64
  %83 = shl nuw nsw i64 %82, 13
  %84 = or i64 %83, %80
  %85 = and i32 %79, 1048576
  %86 = zext i32 %85 to i64
  %87 = shl nuw nsw i64 %86, 16
  %88 = or i64 %84, %87
  %89 = trunc i64 %65 to i32
  %90 = shl nsw i32 -1, %89
  %91 = xor i32 %90, -1
  %92 = zext i32 %91 to i64
  %93 = and i64 %52, %92
  %94 = shl i64 %88, %65
  %95 = or i64 %94, %93
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %32, align 1
  %97 = lshr i64 %95, 8
  %98 = trunc i64 %97 to i8
  store i8 %98, i8* %36, align 1
  %99 = lshr i64 %95, 16
  %100 = trunc i64 %99 to i8
  store i8 %100, i8* %42, align 1
  %101 = lshr i64 %95, 24
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %48, align 1
  %103 = lshr i64 %94, 32
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %54, align 1
  %105 = lshr i64 %94, 40
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %60, align 1
  br label %107

107:                                              ; preds = %69, %28, %22
  %108 = add nuw nsw i32 %24, 1
  %109 = add nuw nsw i64 %23, 41
  %110 = icmp eq i32 %108, 3
  br i1 %110, label %111, label %22

111:                                              ; preds = %107
  %112 = add i64 %10, 16
  %113 = icmp ugt i64 %112, %7
  br i1 %113, label %114, label %9

114:                                              ; preds = %111, %4
  %115 = phi i64 [ 0, %4 ], [ %112, %111 ]
  ret i64 %115
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
