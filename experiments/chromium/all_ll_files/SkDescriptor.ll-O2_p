; ModuleID = '../../third_party/skia/src/core/SkDescriptor.cpp'
source_filename = "../../third_party/skia/src/core/SkDescriptor.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkAutoDescriptor = type { %class.SkDescriptor*, [120 x i8] }
%class.SkDescriptor = type { i32, i32, i32 }
%"struct.SkDescriptor::Entry" = type { i32, i32 }
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkScalerContextRec = type { i32, float, float, float, [2 x [2 x float]], float, float, i32, i8, i8, i8, i8, i8, i8, i16 }

$_ZNK18SkScalerContextRec4dumpEv = comdat any

@.str = private unnamed_addr constant [49 x i8] c"../../third_party/skia/src/core/SkDescriptor.cpp\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"Descriptors are created with placement new.\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"    Checksum: %x\0A\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"    Rec\0A\00", align 1
@.str.4 = private unnamed_addr constant [61 x i8] c"      textsize %a prescale %a preskew %a post [%a %a %a %a]\0A\00", align 1
@.str.5 = private unnamed_addr constant [61 x i8] c"      frame %g miter %g format %d join %d cap %d flags %#hx\0A\00", align 1
@.str.6 = private unnamed_addr constant [64 x i8] c"      lum bits %x, device gamma %d, paint gamma %d contrast %d\0A\00", align 1
@_ZN6SkOpts7hash_fnE = external local_unnamed_addr global i32 (i8*, i64, i32)*, align 8

@_ZN16SkAutoDescriptorC1Ev = hidden unnamed_addr alias void (%class.SkAutoDescriptor*), void (%class.SkAutoDescriptor*)* @_ZN16SkAutoDescriptorC2Ev
@_ZN16SkAutoDescriptorC1Em = hidden unnamed_addr alias void (%class.SkAutoDescriptor*, i64), void (%class.SkAutoDescriptor*, i64)* @_ZN16SkAutoDescriptorC2Em
@_ZN16SkAutoDescriptorC1ERK12SkDescriptor = hidden unnamed_addr alias void (%class.SkAutoDescriptor*, %class.SkDescriptor*), void (%class.SkAutoDescriptor*, %class.SkDescriptor*)* @_ZN16SkAutoDescriptorC2ERK12SkDescriptor
@_ZN16SkAutoDescriptorC1ERKS_ = hidden unnamed_addr alias void (%class.SkAutoDescriptor*, %class.SkAutoDescriptor*), void (%class.SkAutoDescriptor*, %class.SkAutoDescriptor*)* @_ZN16SkAutoDescriptorC2ERKS_
@_ZN16SkAutoDescriptorC1EOS_ = hidden unnamed_addr alias void (%class.SkAutoDescriptor*, %class.SkAutoDescriptor*), void (%class.SkAutoDescriptor*, %class.SkAutoDescriptor*)* @_ZN16SkAutoDescriptorC2EOS_
@_ZN16SkAutoDescriptorD1Ev = hidden unnamed_addr alias void (%class.SkAutoDescriptor*), void (%class.SkAutoDescriptor*)* @_ZN16SkAutoDescriptorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkDescriptor* @_ZN12SkDescriptor5AllocEm(i64) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 %0) #11
  %3 = bitcast i8* %2 to %class.SkDescriptor*
  %4 = getelementptr inbounds i8, i8* %2, i64 4
  %5 = bitcast i8* %4 to i32*
  %6 = bitcast i8* %2 to i32*
  store i32 0, i32* %6, align 4
  store i32 12, i32* %5, align 4
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i32*
  store i32 0, i32* %8, align 4
  ret %class.SkDescriptor* %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkDescriptordlEPv(i8*) local_unnamed_addr #0 align 2 {
  tail call void @_ZdlPv(i8* %0) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN12SkDescriptornwEm(i64) local_unnamed_addr #4 align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i32 24, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN12SkDescriptor8addEntryEjmPKv(%class.SkDescriptor*, i32, i64, i8* readonly) local_unnamed_addr #0 align 2 {
  %5 = bitcast %class.SkDescriptor* %0 to i8*
  %6 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %5, i64 %8
  %10 = bitcast i8* %9 to i32*
  store i32 %1, i32* %10, align 4
  %11 = trunc i64 %2 to i32
  %12 = getelementptr inbounds i8, i8* %9, i64 4
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = icmp eq i8* %3, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds i8, i8* %9, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %16, i8* nonnull align 1 %3, i64 %2, i1 false)
  br label %17

17:                                               ; preds = %4, %15
  %18 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %18, align 4
  %21 = load i32, i32* %6, align 4
  %22 = add i32 %11, 8
  %23 = add i32 %21, %22
  store i32 %23, i32* %6, align 4
  %24 = getelementptr inbounds i8, i8* %9, i64 8
  ret i8* %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkDescriptor15computeChecksumEv(%class.SkDescriptor*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 0
  %3 = getelementptr inbounds i32, i32* %2, i64 1
  %4 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = add nsw i64 %6, -4
  %8 = bitcast i32* %3 to i8*
  %9 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %10 = tail call i32 %9(i8* %8, i64 %7, i32 0) #11
  store i32 %10, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN12SkDescriptor15ComputeChecksumEPKS_(%class.SkDescriptor*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 0
  %3 = getelementptr inbounds i32, i32* %2, i64 1
  %4 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = add nsw i64 %6, -4
  %8 = bitcast i32* %3 to i8*
  %9 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %10 = tail call i32 %9(i8* %8, i64 %7, i32 0) #11
  ret i32 %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @_ZNK12SkDescriptor9findEntryEjPj(%class.SkDescriptor* readonly, i32, i32*) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %34

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 1
  %9 = bitcast %class.SkDescriptor* %8 to %"struct.SkDescriptor::Entry"*
  br label %10

10:                                               ; preds = %7, %25
  %11 = phi i32 [ %13, %25 ], [ %5, %7 ]
  %12 = phi %"struct.SkDescriptor::Entry"* [ %32, %25 ], [ %9, %7 ]
  %13 = add nsw i32 %11, -1
  %14 = getelementptr inbounds %"struct.SkDescriptor::Entry", %"struct.SkDescriptor::Entry"* %12, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, %1
  br i1 %16, label %17, label %25

17:                                               ; preds = %10
  %18 = icmp eq i32* %2, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds %"struct.SkDescriptor::Entry", %"struct.SkDescriptor::Entry"* %12, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %2, align 4
  br label %22

22:                                               ; preds = %17, %19
  %23 = getelementptr inbounds %"struct.SkDescriptor::Entry", %"struct.SkDescriptor::Entry"* %12, i64 1
  %24 = bitcast %"struct.SkDescriptor::Entry"* %23 to i8*
  br label %34

25:                                               ; preds = %10
  %26 = getelementptr inbounds %"struct.SkDescriptor::Entry", %"struct.SkDescriptor::Entry"* %12, i64 1
  %27 = bitcast %"struct.SkDescriptor::Entry"* %26 to i8*
  %28 = getelementptr inbounds %"struct.SkDescriptor::Entry", %"struct.SkDescriptor::Entry"* %12, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %27, i64 %30
  %32 = bitcast i8* %31 to %"struct.SkDescriptor::Entry"*
  %33 = icmp sgt i32 %13, 0
  br i1 %33, label %10, label %34

34:                                               ; preds = %25, %3, %22
  %35 = phi i8* [ %24, %22 ], [ null, %3 ], [ null, %25 ]
  ret i8* %35
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkDescriptor* @_ZNK12SkDescriptor4copyEv(%class.SkDescriptor* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = tail call i8* @_Znwm(i64 %4) #11
  %6 = bitcast i8* %5 to %class.SkDescriptor*
  %7 = getelementptr inbounds i8, i8* %5, i64 4
  %8 = bitcast i8* %7 to i32*
  %9 = bitcast i8* %5 to i32*
  store i32 0, i32* %9, align 4
  store i32 12, i32* %8, align 4
  %10 = getelementptr inbounds i8, i8* %5, i64 8
  %11 = bitcast i8* %10 to i32*
  store i32 0, i32* %11, align 4
  %12 = bitcast %class.SkDescriptor* %0 to i8*
  %13 = load i32, i32* %2, align 4
  %14 = zext i32 %13 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %5, i8* align 4 %12, i64 %14, i1 false)
  ret %class.SkDescriptor* %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK12SkDescriptoreqERKS_(%class.SkDescriptor* readonly, %class.SkDescriptor* nocapture readonly dereferenceable(12)) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %1, i64 0, i32 0
  %5 = bitcast %class.SkDescriptor* %0 to i8*
  %6 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %5, i64 %8
  %10 = bitcast i8* %9 to i32*
  br label %11

11:                                               ; preds = %18, %2
  %12 = phi i32* [ %3, %2 ], [ %14, %18 ]
  %13 = phi i32* [ %4, %2 ], [ %19, %18 ]
  %14 = getelementptr inbounds i32, i32* %12, i64 1
  %15 = load i32, i32* %12, align 4
  %16 = load i32, i32* %13, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %18, label %21

18:                                               ; preds = %11
  %19 = getelementptr inbounds i32, i32* %13, i64 1
  %20 = icmp ult i32* %14, %10
  br i1 %20, label %11, label %21

21:                                               ; preds = %18, %11
  %22 = phi i1 [ false, %11 ], [ true, %18 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12SkDescriptor7dumpRecEv(%class.SkString* noalias sret, %class.SkDescriptor*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkString, align 8
  %4 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %1, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %28

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %1, i64 1
  %9 = bitcast %class.SkDescriptor* %8 to %"struct.SkDescriptor::Entry"*
  br label %10

10:                                               ; preds = %19, %7
  %11 = phi i32 [ %13, %19 ], [ %5, %7 ]
  %12 = phi %"struct.SkDescriptor::Entry"* [ %24, %19 ], [ %9, %7 ]
  %13 = add nsw i32 %11, -1
  %14 = getelementptr inbounds %"struct.SkDescriptor::Entry", %"struct.SkDescriptor::Entry"* %12, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1936876899
  %17 = getelementptr inbounds %"struct.SkDescriptor::Entry", %"struct.SkDescriptor::Entry"* %12, i64 1
  %18 = bitcast %"struct.SkDescriptor::Entry"* %17 to i8*
  br i1 %16, label %26, label %19

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.SkDescriptor::Entry", %"struct.SkDescriptor::Entry"* %12, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %18, i64 %22
  %24 = bitcast i8* %23 to %"struct.SkDescriptor::Entry"*
  %25 = icmp sgt i32 %13, 0
  br i1 %25, label %10, label %28

26:                                               ; preds = %10
  %27 = bitcast %"struct.SkDescriptor::Entry"* %17 to i8*
  br label %28

28:                                               ; preds = %26, %19, %2
  %29 = phi i8* [ null, %2 ], [ %27, %26 ], [ null, %19 ]
  %30 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %30, align 8
  tail call void @_ZN8SkStringC1Ev(%class.SkString* %0) #11
  %31 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %1, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 %32) #11
  %33 = icmp eq i8* %29, null
  br i1 %33, label %43, label %34

34:                                               ; preds = %28
  %35 = bitcast i8* %29 to %struct.SkScalerContextRec*
  %36 = bitcast %class.SkString* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #11
  call void @_ZNK18SkScalerContextRec4dumpEv(%class.SkString* nonnull sret %3, %struct.SkScalerContextRec* nonnull %35)
  %37 = getelementptr inbounds %class.SkString, %class.SkString* %3, i64 0, i32 0, i32 0
  %38 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %37, align 8
  %39 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %38, i64 0, i32 2
  %40 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %38, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  call void @_ZN8SkString6insertEmPKcm(%class.SkString* %0, i64 -1, i8* %39, i64 %42) #11
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #11
  br label %43

43:                                               ; preds = %34, %28
  ret void
}

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #8

declare void @_ZN8SkString7appendfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK18SkScalerContextRec4dumpEv(%class.SkString* noalias sret, %struct.SkScalerContextRec*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %3, align 8
  tail call void @_ZN8SkStringC1Ev(%class.SkString* %0) #11
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0)) #11
  %4 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  %7 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  %10 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 3
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  %13 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 4, i64 0, i64 0
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 4, i64 0, i64 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 4, i64 1, i64 0
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  %22 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 4, i64 1, i64 1
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.4, i64 0, i64 0), double %6, double %9, double %12, double %15, double %18, double %21, double %24) #11
  %25 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 5
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  %28 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 6
  %29 = load float, float* %28, align 4
  %30 = fpext float %29 to double
  %31 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 12
  %32 = load i8, i8* %31, align 4
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 13
  %35 = load i8, i8* %34, align 1
  %36 = and i8 %35, 15
  %37 = zext i8 %36 to i32
  %38 = lshr i8 %35, 4
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 14
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.5, i64 0, i64 0), double %27, double %30, i32 %33, i32 %37, i32 %39, i32 %42) #11
  %43 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 7
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 8
  %46 = load i8, i8* %45, align 4
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 9
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 10
  %52 = load i8, i8* %51, align 2
  %53 = zext i8 %52 to i32
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.6, i64 0, i64 0), i32 %44, i32 %47, i32 %50, i32 %53) #11
  ret void
}

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #9

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK12SkDescriptor7isValidEv(%class.SkDescriptor* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 12
  br i1 %4, label %48, label %5

5:                                                ; preds = %1
  %6 = zext i32 %3 to i64
  %7 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i64 %6, -12
  %10 = icmp ne i64 %9, 0
  %11 = icmp ne i32 %8, 0
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %42

13:                                               ; preds = %5
  %14 = bitcast %class.SkDescriptor* %0 to i8*
  br label %15

15:                                               ; preds = %13, %34
  %16 = phi i64 [ 12, %13 ], [ %37, %34 ]
  %17 = phi i64 [ %9, %13 ], [ %35, %34 ]
  %18 = phi i32 [ %8, %13 ], [ %38, %34 ]
  %19 = icmp ult i64 %17, 8
  br i1 %19, label %48, label %20

20:                                               ; preds = %15
  %21 = add i64 %17, -8
  %22 = getelementptr inbounds i8, i8* %14, i64 %16
  %23 = getelementptr inbounds i8, i8* %22, i64 4
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = icmp ult i64 %21, %26
  br i1 %27, label %48, label %28

28:                                               ; preds = %20
  %29 = bitcast i8* %22 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = icmp ne i32 %30, 1936876899
  %32 = icmp eq i32 %25, 52
  %33 = or i1 %32, %31
  br i1 %33, label %34, label %48

34:                                               ; preds = %28
  %35 = sub i64 %21, %26
  %36 = add i64 %16, 8
  %37 = add i64 %36, %26
  %38 = add i32 %18, -1
  %39 = icmp ne i64 %35, 0
  %40 = icmp ne i32 %38, 0
  %41 = and i1 %40, %39
  br i1 %41, label %15, label %42

42:                                               ; preds = %34, %5
  %43 = phi i32 [ %8, %5 ], [ %38, %34 ]
  %44 = phi i64 [ %9, %5 ], [ %35, %34 ]
  %45 = icmp eq i64 %44, 0
  %46 = icmp eq i32 %43, 0
  %47 = and i1 %46, %45
  br label %48

48:                                               ; preds = %28, %20, %15, %42, %1
  %49 = phi i1 [ false, %1 ], [ %47, %42 ], [ false, %15 ], [ false, %20 ], [ false, %28 ]
  ret i1 %49
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN16SkAutoDescriptorC2Ev(%class.SkAutoDescriptor* nocapture) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  store %class.SkDescriptor* null, %class.SkDescriptor** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkAutoDescriptorC2Em(%class.SkAutoDescriptor*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  store %class.SkDescriptor* null, %class.SkDescriptor** %3, align 8
  %4 = icmp ult i64 %1, 121
  br i1 %4, label %5, label %11

5:                                                ; preds = %2
  %6 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 0
  %7 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 4
  %8 = bitcast i8* %7 to i32*
  %9 = bitcast i8* %6 to i32*
  store i32 0, i32* %9, align 4
  store i32 12, i32* %8, align 4
  %10 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 8
  br label %17

11:                                               ; preds = %2
  %12 = tail call i8* @_Znwm(i64 %1) #11
  %13 = getelementptr inbounds i8, i8* %12, i64 4
  %14 = bitcast i8* %13 to i32*
  %15 = bitcast i8* %12 to i32*
  store i32 0, i32* %15, align 4
  store i32 12, i32* %14, align 4
  %16 = getelementptr inbounds i8, i8* %12, i64 8
  br label %17

17:                                               ; preds = %5, %11
  %18 = phi i8* [ %10, %5 ], [ %16, %11 ]
  %19 = phi i8* [ %6, %5 ], [ %12, %11 ]
  %20 = bitcast i8* %18 to i32*
  store i32 0, i32* %20, align 4
  %21 = bitcast %class.SkAutoDescriptor* %0 to i8**
  store i8* %19, i8** %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkAutoDescriptor5resetEm(%class.SkAutoDescriptor*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  %4 = load %class.SkDescriptor*, %class.SkDescriptor** %3, align 8
  %5 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1
  %6 = bitcast [120 x i8]* %5 to %class.SkDescriptor*
  %7 = icmp eq %class.SkDescriptor* %4, %6
  %8 = icmp eq %class.SkDescriptor* %4, null
  %9 = or i1 %7, %8
  br i1 %9, label %12, label %10

10:                                               ; preds = %2
  %11 = bitcast %class.SkDescriptor* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #11
  br label %12

12:                                               ; preds = %2, %10
  %13 = icmp ult i64 %1, 121
  br i1 %13, label %14, label %20

14:                                               ; preds = %12
  %15 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 0
  %16 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = bitcast i8* %15 to i32*
  store i32 0, i32* %18, align 4
  store i32 12, i32* %17, align 4
  %19 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 8
  br label %26

20:                                               ; preds = %12
  %21 = tail call i8* @_Znwm(i64 %1) #11
  %22 = getelementptr inbounds i8, i8* %21, i64 4
  %23 = bitcast i8* %22 to i32*
  %24 = bitcast i8* %21 to i32*
  store i32 0, i32* %24, align 4
  store i32 12, i32* %23, align 4
  %25 = getelementptr inbounds i8, i8* %21, i64 8
  br label %26

26:                                               ; preds = %20, %14
  %27 = phi i8* [ %25, %20 ], [ %19, %14 ]
  %28 = phi i8* [ %21, %20 ], [ %15, %14 ]
  %29 = bitcast i8* %27 to i32*
  store i32 0, i32* %29, align 4
  %30 = bitcast %class.SkAutoDescriptor* %0 to i8**
  store i8* %28, i8** %30, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkAutoDescriptorC2ERK12SkDescriptor(%class.SkAutoDescriptor*, %class.SkDescriptor* nocapture readonly dereferenceable(12)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  store %class.SkDescriptor* null, %class.SkDescriptor** %3, align 8
  %4 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = icmp ult i32 %5, 121
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 0
  %10 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 4
  %11 = bitcast i8* %10 to i32*
  %12 = bitcast i8* %9 to i32*
  store i32 0, i32* %12, align 4
  store i32 12, i32* %11, align 4
  %13 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 8
  br label %20

14:                                               ; preds = %2
  %15 = tail call i8* @_Znwm(i64 %6) #11
  %16 = getelementptr inbounds i8, i8* %15, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = bitcast i8* %15 to i32*
  store i32 0, i32* %18, align 4
  store i32 12, i32* %17, align 4
  %19 = getelementptr inbounds i8, i8* %15, i64 8
  br label %20

20:                                               ; preds = %8, %14
  %21 = phi i8* [ %13, %8 ], [ %19, %14 ]
  %22 = phi i8* [ %9, %8 ], [ %15, %14 ]
  %23 = bitcast i8* %21 to i32*
  store i32 0, i32* %23, align 4
  %24 = bitcast %class.SkAutoDescriptor* %0 to i8**
  store i8* %22, i8** %24, align 8
  %25 = bitcast %class.SkDescriptor* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* align 4 %25, i64 %6, i1 false) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkAutoDescriptor5resetERK12SkDescriptor(%class.SkAutoDescriptor*, %class.SkDescriptor* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  %7 = load %class.SkDescriptor*, %class.SkDescriptor** %6, align 8
  %8 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1
  %9 = bitcast [120 x i8]* %8 to %class.SkDescriptor*
  %10 = icmp eq %class.SkDescriptor* %7, %9
  %11 = icmp eq %class.SkDescriptor* %7, null
  %12 = or i1 %10, %11
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = bitcast %class.SkDescriptor* %7 to i8*
  tail call void @_ZdlPv(i8* %14) #11
  br label %15

15:                                               ; preds = %13, %2
  %16 = icmp ult i32 %4, 121
  br i1 %16, label %17, label %23

17:                                               ; preds = %15
  %18 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 0
  %19 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 4
  %20 = bitcast i8* %19 to i32*
  %21 = bitcast i8* %18 to i32*
  store i32 0, i32* %21, align 4
  store i32 12, i32* %20, align 4
  %22 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 8
  br label %29

23:                                               ; preds = %15
  %24 = tail call i8* @_Znwm(i64 %5) #11
  %25 = getelementptr inbounds i8, i8* %24, i64 4
  %26 = bitcast i8* %25 to i32*
  %27 = bitcast i8* %24 to i32*
  store i32 0, i32* %27, align 4
  store i32 12, i32* %26, align 4
  %28 = getelementptr inbounds i8, i8* %24, i64 8
  br label %29

29:                                               ; preds = %17, %23
  %30 = phi i8* [ %22, %17 ], [ %28, %23 ]
  %31 = phi i8* [ %18, %17 ], [ %24, %23 ]
  %32 = bitcast i8* %30 to i32*
  store i32 0, i32* %32, align 4
  %33 = bitcast %class.SkAutoDescriptor* %0 to i8**
  store i8* %31, i8** %33, align 8
  %34 = bitcast %class.SkDescriptor* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %34, i64 %5, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkAutoDescriptorC2ERKS_(%class.SkAutoDescriptor*, %class.SkAutoDescriptor* nocapture readonly dereferenceable(128)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  store %class.SkDescriptor* null, %class.SkDescriptor** %3, align 8
  %4 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %1, i64 0, i32 0
  %5 = load %class.SkDescriptor*, %class.SkDescriptor** %4, align 8
  %6 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %5, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = icmp ult i32 %7, 121
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 4
  %13 = bitcast i8* %12 to i32*
  %14 = bitcast i8* %11 to i32*
  store i32 0, i32* %14, align 4
  store i32 12, i32* %13, align 4
  %15 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 8
  br label %22

16:                                               ; preds = %2
  %17 = tail call i8* @_Znwm(i64 %8) #11
  %18 = getelementptr inbounds i8, i8* %17, i64 4
  %19 = bitcast i8* %18 to i32*
  %20 = bitcast i8* %17 to i32*
  store i32 0, i32* %20, align 4
  store i32 12, i32* %19, align 4
  %21 = getelementptr inbounds i8, i8* %17, i64 8
  br label %22

22:                                               ; preds = %10, %16
  %23 = phi i8* [ %15, %10 ], [ %21, %16 ]
  %24 = phi i8* [ %11, %10 ], [ %17, %16 ]
  %25 = bitcast i8* %23 to i32*
  store i32 0, i32* %25, align 4
  %26 = bitcast %class.SkAutoDescriptor* %0 to i8**
  store i8* %24, i8** %26, align 8
  %27 = bitcast %class.SkDescriptor* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* align 4 %27, i64 %8, i1 false) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(128) %class.SkAutoDescriptor* @_ZN16SkAutoDescriptoraSERKS_(%class.SkAutoDescriptor* returned, %class.SkAutoDescriptor* nocapture readonly dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %1, i64 0, i32 0
  %4 = load %class.SkDescriptor*, %class.SkDescriptor** %3, align 8
  %5 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %4, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  %9 = load %class.SkDescriptor*, %class.SkDescriptor** %8, align 8
  %10 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1
  %11 = bitcast [120 x i8]* %10 to %class.SkDescriptor*
  %12 = icmp eq %class.SkDescriptor* %9, %11
  %13 = icmp eq %class.SkDescriptor* %9, null
  %14 = or i1 %12, %13
  br i1 %14, label %17, label %15

15:                                               ; preds = %2
  %16 = bitcast %class.SkDescriptor* %9 to i8*
  tail call void @_ZdlPv(i8* %16) #11
  br label %17

17:                                               ; preds = %15, %2
  %18 = icmp ult i32 %6, 121
  br i1 %18, label %19, label %25

19:                                               ; preds = %17
  %20 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 4
  %22 = bitcast i8* %21 to i32*
  %23 = bitcast i8* %20 to i32*
  store i32 0, i32* %23, align 4
  store i32 12, i32* %22, align 4
  %24 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 8
  br label %31

25:                                               ; preds = %17
  %26 = tail call i8* @_Znwm(i64 %7) #11
  %27 = getelementptr inbounds i8, i8* %26, i64 4
  %28 = bitcast i8* %27 to i32*
  %29 = bitcast i8* %26 to i32*
  store i32 0, i32* %29, align 4
  store i32 12, i32* %28, align 4
  %30 = getelementptr inbounds i8, i8* %26, i64 8
  br label %31

31:                                               ; preds = %19, %25
  %32 = phi i8* [ %24, %19 ], [ %30, %25 ]
  %33 = phi i8* [ %20, %19 ], [ %26, %25 ]
  %34 = bitcast i8* %32 to i32*
  store i32 0, i32* %34, align 4
  %35 = bitcast %class.SkAutoDescriptor* %0 to i8**
  store i8* %33, i8** %35, align 8
  %36 = bitcast %class.SkDescriptor* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %36, i64 %7, i1 false) #11
  ret %class.SkAutoDescriptor* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkAutoDescriptorC2EOS_(%class.SkAutoDescriptor*, %class.SkAutoDescriptor* dereferenceable(128)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  store %class.SkDescriptor* null, %class.SkDescriptor** %3, align 8
  %4 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %1, i64 0, i32 0
  %5 = load %class.SkDescriptor*, %class.SkDescriptor** %4, align 8
  %6 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %1, i64 0, i32 1
  %7 = bitcast [120 x i8]* %6 to %class.SkDescriptor*
  %8 = icmp eq %class.SkDescriptor* %5, %7
  br i1 %8, label %9, label %32

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %5, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = icmp ult i32 %11, 121
  br i1 %13, label %14, label %20

14:                                               ; preds = %9
  %15 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 0
  %16 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = bitcast i8* %15 to i32*
  store i32 0, i32* %18, align 4
  store i32 12, i32* %17, align 4
  %19 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 8
  br label %26

20:                                               ; preds = %9
  %21 = tail call i8* @_Znwm(i64 %12) #11
  %22 = getelementptr inbounds i8, i8* %21, i64 4
  %23 = bitcast i8* %22 to i32*
  %24 = bitcast i8* %21 to i32*
  store i32 0, i32* %24, align 4
  store i32 12, i32* %23, align 4
  %25 = getelementptr inbounds i8, i8* %21, i64 8
  br label %26

26:                                               ; preds = %14, %20
  %27 = phi i8* [ %19, %14 ], [ %25, %20 ]
  %28 = phi i8* [ %15, %14 ], [ %21, %20 ]
  %29 = bitcast i8* %27 to i32*
  store i32 0, i32* %29, align 4
  %30 = bitcast %class.SkAutoDescriptor* %0 to i8**
  store i8* %28, i8** %30, align 8
  %31 = bitcast %class.SkDescriptor* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %31, i64 %12, i1 false) #11
  br label %33

32:                                               ; preds = %2
  store %class.SkDescriptor* %5, %class.SkDescriptor** %3, align 8
  store %class.SkDescriptor* null, %class.SkDescriptor** %4, align 8
  br label %33

33:                                               ; preds = %32, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(128) %class.SkAutoDescriptor* @_ZN16SkAutoDescriptoraSEOS_(%class.SkAutoDescriptor* returned, %class.SkAutoDescriptor* dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %1, i64 0, i32 0
  %4 = load %class.SkDescriptor*, %class.SkDescriptor** %3, align 8
  %5 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %1, i64 0, i32 1
  %6 = bitcast [120 x i8]* %5 to %class.SkDescriptor*
  %7 = icmp eq %class.SkDescriptor* %4, %6
  br i1 %7, label %8, label %41

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.SkDescriptor, %class.SkDescriptor* %4, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  %13 = load %class.SkDescriptor*, %class.SkDescriptor** %12, align 8
  %14 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1
  %15 = bitcast [120 x i8]* %14 to %class.SkDescriptor*
  %16 = icmp eq %class.SkDescriptor* %13, %15
  %17 = icmp eq %class.SkDescriptor* %13, null
  %18 = or i1 %16, %17
  br i1 %18, label %21, label %19

19:                                               ; preds = %8
  %20 = bitcast %class.SkDescriptor* %13 to i8*
  tail call void @_ZdlPv(i8* %20) #11
  br label %21

21:                                               ; preds = %19, %8
  %22 = icmp ult i32 %10, 121
  br i1 %22, label %23, label %29

23:                                               ; preds = %21
  %24 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 0
  %25 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 4
  %26 = bitcast i8* %25 to i32*
  %27 = bitcast i8* %24 to i32*
  store i32 0, i32* %27, align 4
  store i32 12, i32* %26, align 4
  %28 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1, i64 8
  br label %35

29:                                               ; preds = %21
  %30 = tail call i8* @_Znwm(i64 %11) #11
  %31 = getelementptr inbounds i8, i8* %30, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = bitcast i8* %30 to i32*
  store i32 0, i32* %33, align 4
  store i32 12, i32* %32, align 4
  %34 = getelementptr inbounds i8, i8* %30, i64 8
  br label %35

35:                                               ; preds = %23, %29
  %36 = phi i8* [ %28, %23 ], [ %34, %29 ]
  %37 = phi i8* [ %24, %23 ], [ %30, %29 ]
  %38 = bitcast i8* %36 to i32*
  store i32 0, i32* %38, align 4
  %39 = bitcast %class.SkAutoDescriptor* %0 to i8**
  store i8* %37, i8** %39, align 8
  %40 = bitcast %class.SkDescriptor* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %40, i64 %11, i1 false) #11
  br label %57

41:                                               ; preds = %2
  %42 = ptrtoint %class.SkDescriptor* %4 to i64
  %43 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  %44 = load %class.SkDescriptor*, %class.SkDescriptor** %43, align 8
  %45 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1
  %46 = bitcast [120 x i8]* %45 to %class.SkDescriptor*
  %47 = icmp eq %class.SkDescriptor* %44, %46
  %48 = icmp eq %class.SkDescriptor* %44, null
  %49 = or i1 %47, %48
  br i1 %49, label %54, label %50

50:                                               ; preds = %41
  %51 = bitcast %class.SkDescriptor* %44 to i8*
  tail call void @_ZdlPv(i8* %51) #11
  %52 = bitcast %class.SkAutoDescriptor* %1 to i64*
  %53 = load i64, i64* %52, align 8
  br label %54

54:                                               ; preds = %41, %50
  %55 = phi i64 [ %53, %50 ], [ %42, %41 ]
  %56 = bitcast %class.SkAutoDescriptor* %0 to i64*
  store i64 %55, i64* %56, align 8
  store %class.SkDescriptor* null, %class.SkDescriptor** %3, align 8
  br label %57

57:                                               ; preds = %54, %35
  ret %class.SkAutoDescriptor* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkAutoDescriptor4freeEv(%class.SkAutoDescriptor* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  %3 = load %class.SkDescriptor*, %class.SkDescriptor** %2, align 8
  %4 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1
  %5 = bitcast [120 x i8]* %4 to %class.SkDescriptor*
  %6 = icmp eq %class.SkDescriptor* %3, %5
  %7 = icmp eq %class.SkDescriptor* %3, null
  %8 = or i1 %6, %7
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = bitcast %class.SkDescriptor* %3 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %9, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkAutoDescriptorD2Ev(%class.SkAutoDescriptor* readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 0
  %3 = load %class.SkDescriptor*, %class.SkDescriptor** %2, align 8
  %4 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %0, i64 0, i32 1
  %5 = bitcast [120 x i8]* %4 to %class.SkDescriptor*
  %6 = icmp eq %class.SkDescriptor* %3, %5
  %7 = icmp eq %class.SkDescriptor* %3, null
  %8 = or i1 %6, %7
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = bitcast %class.SkDescriptor* %3 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %9
  ret void
}

declare void @_ZN8SkString6insertEmPKcm(%class.SkString*, i64, i8*, i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
