; ModuleID = '../../net/spdy/spdy_write_queue.cc'
source_filename = "../../net/spdy/spdy_write_queue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.net::SpdyWriteQueue::PendingWrite" = type <{ i8, [7 x i8], %"class.std::__1::unique_ptr", %"class.base::WeakPtr", %"struct.net::MutableNetworkTrafficAnnotationTag", i8, [3 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.net::SpdyBufferProducer"* }
%"class.net::SpdyBufferProducer" = type { i32 (...)** }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%"struct.net::MutableNetworkTrafficAnnotationTag" = type { i32 }
%"class.net::SpdyWriteQueue" = type { i8, i32, [6 x %"class.base::circular_deque"] }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"struct.net::SpdyWriteQueue::PendingWrite"*, i64 }
%"class.net::SpdyStream" = type { i32, i32, %class.GURL, i32, i8, i32, i32, i32, i32, %"class.base::WeakPtr.16", %"class.net::SpdyStream::Delegate"*, i8, %"class.spdy::Http2HeaderBlock", %class.scoped_refptr.39, i32, %"class.std::__1::vector.42", %"class.base::Time", %"class.spdy::Http2HeaderBlock", i32, %"class.base::Time", i32, %"class.net::NetLogWithSource", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", i64, i64, i32, i8, %"struct.net::NetworkTrafficAnnotationTag", %"class.base::WeakPtrFactory" }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.10" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %class.GURL* }
%"class.base::WeakPtr.16" = type { %"class.base::internal::WeakPtrBase" }
%"class.net::SpdyStream::Delegate" = type { i32 (...)** }
%class.scoped_refptr.39 = type { %"class.net::DrainableIOBuffer"* }
%"class.net::DrainableIOBuffer" = type { %"class.net::IOBuffer", %class.scoped_refptr.41, i32, i32 }
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe.40", i8* }
%"class.base::RefCountedThreadSafe.40" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.41 = type { %"class.net::IOBuffer"* }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { %"class.std::__1::unique_ptr.44"*, %"class.std::__1::unique_ptr.44"*, %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.net::SpdyBuffer"* }
%"class.net::SpdyBuffer" = type { %class.scoped_refptr.47, %"class.std::__1::vector.48", i64 }
%class.scoped_refptr.47 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type opaque
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"*, %"class.std::__1::__compressed_pair.50" }
%"class.base::RepeatingCallback" = type opaque
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.base::RepeatingCallback"* }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.std::__1::unique_ptr.44"* }
%"class.spdy::Http2HeaderBlock" = type { %"class.quiche::QuicheLinkedHashMap", %"class.spdy::SpdyHeaderStorage", i64, i64 }
%"class.quiche::QuicheLinkedHashMap" = type { %"class.absl::node_hash_map", %"class.std::__1::list" }
%"class.absl::node_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"struct.std::__1::pair"**, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"struct.std::__1::pair" = type { %"class.absl::string_view", %"class.std::__1::__list_iterator" }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::__list_iterator" = type { %"struct.std::__1::__list_node_base"* }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i64 }
%"class.spdy::SpdyHeaderStorage" = type { %"class.spdy::SpdySimpleArena" }
%"class.spdy::SpdySimpleArena" = type { i64, %"class.std::__1::vector", %"class.spdy::SpdySimpleArena::Status" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.spdy::SpdySimpleArena::Block"*, %"struct.spdy::SpdySimpleArena::Block"*, %"class.std::__1::__compressed_pair.34" }
%"struct.spdy::SpdySimpleArena::Block" = type { %"class.std::__1::unique_ptr.28", i64, i64 }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { i8* }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.spdy::SpdySimpleArena::Block"* }
%"class.spdy::SpdySimpleArena::Status" = type { i64 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.net::NetLogWithSource" = type { %"struct.net::NetLogSource", %"class.net::NetLog"* }
%"struct.net::NetLogSource" = type { i32, i32, %"class.base::TimeTicks" }
%"class.net::NetLog" = type { i32 (...)**, %"class.base::Lock", i32, i32, %"class.std::__1::vector.64", %"class.std::__1::vector.71" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::vector.64" = type { %"class.std::__1::__vector_base.65" }
%"class.std::__1::__vector_base.65" = type { %"class.net::NetLog::ThreadSafeObserver"**, %"class.net::NetLog::ThreadSafeObserver"**, %"class.std::__1::__compressed_pair.66" }
%"class.net::NetLog::ThreadSafeObserver" = type { i32 (...)**, i32, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.net::NetLog::ThreadSafeObserver"** }
%"class.std::__1::vector.71" = type { %"class.std::__1::__vector_base.72" }
%"class.std::__1::__vector_base.72" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.std::__1::__compressed_pair.73" }
%"class.net::NetLog::ThreadSafeCaptureModeObserver" = type { i32 (...)**, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"** }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase.63" }
%"class.base::time_internal::TimeBase.63" = type { i64 }
%"struct.net::NetworkTrafficAnnotationTag" = type { i32 }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.78 }
%class.scoped_refptr.78 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::vector.79" = type { %"class.std::__1::__vector_base.80" }
%"class.std::__1::__vector_base.80" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.std::__1::unique_ptr"* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_ = comdat any

$_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeEmm = comdat any

$_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeIS4_Li0EEEvPS4_S7_ = comdat any

$_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm = comdat any

$_ZZN7logging15CheckOpValueStrIPN3net14SpdyWriteQueue12PendingWriteEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS5_14remove_pointerIS7_E4typeEEE5valueEPcE4typeES9_ENUlRNS5_13basic_ostreamIcNS5_11char_traitsIcEEEEPKvE_8__invokeESK_SM_ = comdat any

$_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE25ExpandCapacityIfNecessaryEm = comdat any

$_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE10MoveBufferERNS_8internal12VectorBufferIS3_EEmmPS7_PmSA_ = comdat any

$_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE9MoveRangeIS4_Li0EEEvPS4_S7_S7_ = comdat any

$_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE25ShrinkCapacityIfNecessaryEv = comdat any

$_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN3net18SpdyBufferProducerENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

$_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE5eraseENS_8internal29circular_deque_const_iteratorIS3_EES7_ = comdat any

@.str = private unnamed_addr constant [35 x i8] c"../../net/spdy/spdy_write_queue.cc\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"!removing_writes_\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"priority >= MINIMUM_PRIORITY\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"priority <= MAXIMUM_PRIORITY\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"begin <= end\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"../../base/containers/vector_buffer.h\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"i <= capacity_\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"../../base/memory/weak_ptr.h\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"ref_.IsValid()\00", align 1
@.str.9 = private unnamed_addr constant [41 x i8] c"!RangesOverlap(from_begin, from_end, to)\00", align 1

@_ZN3net14SpdyWriteQueue12PendingWriteC1Ev = hidden unnamed_addr alias void (%"struct.net::SpdyWriteQueue::PendingWrite"*), void (%"struct.net::SpdyWriteQueue::PendingWrite"*)* @_ZN3net14SpdyWriteQueue12PendingWriteC2Ev
@_ZN3net14SpdyWriteQueue12PendingWriteC1EN4spdy13SpdyFrameTypeENSt3__110unique_ptrINS_18SpdyBufferProducerENS4_14default_deleteIS6_EEEERKN4base7WeakPtrINS_10SpdyStreamEEERKNS_34MutableNetworkTrafficAnnotationTagE = hidden unnamed_addr alias void (%"struct.net::SpdyWriteQueue::PendingWrite"*, i8, %"class.net::SpdyBufferProducer"*, %"class.base::WeakPtr"*, %"struct.net::MutableNetworkTrafficAnnotationTag"*), void (%"struct.net::SpdyWriteQueue::PendingWrite"*, i8, %"class.net::SpdyBufferProducer"*, %"class.base::WeakPtr"*, %"struct.net::MutableNetworkTrafficAnnotationTag"*)* @_ZN3net14SpdyWriteQueue12PendingWriteC2EN4spdy13SpdyFrameTypeENSt3__110unique_ptrINS_18SpdyBufferProducerENS4_14default_deleteIS6_EEEERKN4base7WeakPtrINS_10SpdyStreamEEERKNS_34MutableNetworkTrafficAnnotationTagE
@_ZN3net14SpdyWriteQueue12PendingWriteD1Ev = hidden unnamed_addr alias void (%"struct.net::SpdyWriteQueue::PendingWrite"*), void (%"struct.net::SpdyWriteQueue::PendingWrite"*)* @_ZN3net14SpdyWriteQueue12PendingWriteD2Ev
@_ZN3net14SpdyWriteQueue12PendingWriteC1EOS1_ = hidden unnamed_addr alias void (%"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"*), void (%"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"*)* @_ZN3net14SpdyWriteQueue12PendingWriteC2EOS1_
@_ZN3net14SpdyWriteQueueC1Ev = hidden unnamed_addr alias void (%"class.net::SpdyWriteQueue"*), void (%"class.net::SpdyWriteQueue"*)* @_ZN3net14SpdyWriteQueueC2Ev
@_ZN3net14SpdyWriteQueueD1Ev = hidden unnamed_addr alias void (%"class.net::SpdyWriteQueue"*), void (%"class.net::SpdyWriteQueue"*)* @_ZN3net14SpdyWriteQueueD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN3net26IsSpdyFrameTypeWriteCappedEN4spdy13SpdyFrameTypeE(i8 zeroext) local_unnamed_addr #0 {
  %2 = add i8 %0, -3
  %3 = icmp ult i8 %2, 6
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = trunc i8 %2 to i6
  %6 = lshr i6 -5, %5
  %7 = and i6 %6, 1
  %8 = icmp ne i6 %7, 0
  ret i1 %8

9:                                                ; preds = %1
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueue12PendingWriteC2Ev(%"struct.net::SpdyWriteQueue::PendingWrite"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 2
  %3 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 3, i32 0
  tail call void @_ZN4base8internal11WeakPtrBaseC2Ev(%"class.base::internal::WeakPtrBase"* %4) #14
  %5 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 4, i32 0
  store i32 -1, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueue12PendingWriteC2EN4spdy13SpdyFrameTypeENSt3__110unique_ptrINS_18SpdyBufferProducerENS4_14default_deleteIS6_EEEERKN4base7WeakPtrINS_10SpdyStreamEEERKNS_34MutableNetworkTrafficAnnotationTagE(%"struct.net::SpdyWriteQueue::PendingWrite"*, i8 zeroext, %"class.net::SpdyBufferProducer"*, %"class.base::WeakPtr"* dereferenceable(16), %"struct.net::MutableNetworkTrafficAnnotationTag"* nocapture readonly dereferenceable(4)) unnamed_addr #1 align 2 {
  %6 = ptrtoint %"class.net::SpdyBufferProducer"* %2 to i64
  %7 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 0
  store i8 %1, i8* %7, align 8
  %8 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 2
  %9 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  store i64 %6, i64* %9, align 8
  %10 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 3, i32 0, i32 0
  %11 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %3, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal13WeakReferenceC1ERKS1_(%"class.base::internal::WeakReference"* %10, %"class.base::internal::WeakReference"* dereferenceable(8) %11) #14
  %12 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 3, i32 0, i32 1
  %13 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %3, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %12, align 8
  %15 = getelementptr inbounds %"struct.net::MutableNetworkTrafficAnnotationTag", %"struct.net::MutableNetworkTrafficAnnotationTag"* %4, i64 0, i32 0
  %16 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 4, i32 0
  %17 = load i32, i32* %15, align 4
  store i32 %17, i32* %16, align 8
  %18 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 5
  %19 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %11) #14
  %20 = bitcast i64* %13 to %"class.net::SpdyStream"**
  %21 = load %"class.net::SpdyStream"*, %"class.net::SpdyStream"** %20, align 8
  %22 = icmp ne %"class.net::SpdyStream"* %21, null
  %23 = and i1 %19, %22
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %18, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueue12PendingWriteD2Ev(%"struct.net::SpdyWriteQueue::PendingWrite"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 3, i32 0
  tail call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %2) #14
  %3 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %3, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %3, align 8
  %5 = icmp eq %"class.net::SpdyBufferProducer"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.net::SpdyBufferProducer"* %4 to void (%"class.net::SpdyBufferProducer"*)***
  %8 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %8, i64 2
  %10 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %9, align 8
  tail call void %10(%"class.net::SpdyBufferProducer"* nonnull %4) #14
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueue12PendingWriteC2EOS1_(%"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"* dereferenceable(40)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 0
  %5 = load i8, i8* %4, align 8
  store i8 %5, i8* %3, align 8
  %6 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 2
  %8 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  %10 = load i64, i64* %9, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %8, align 8
  %11 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 3, i32 0, i32 0
  tail call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %12, %"class.base::internal::WeakReference"* dereferenceable(8) %13) #14
  %14 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 3, i32 0, i32 1
  %15 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 3, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %14, align 8
  %17 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 4
  %18 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 4
  %19 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %17 to i8*
  %20 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 5, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN3net14SpdyWriteQueue12PendingWriteaSEOS1_(%"struct.net::SpdyWriteQueue::PendingWrite"* returned, %"struct.net::SpdyWriteQueue::PendingWrite"* nocapture dereferenceable(40)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 8
  %5 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 0
  store i8 %4, i8* %5, align 8
  %6 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 2
  %8 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  %10 = load i64, i64* %9, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %8, align 8
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %6, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %11, align 8
  %13 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 %10, i64* %13, align 8
  %14 = icmp eq %"class.net::SpdyBufferProducer"* %12, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = bitcast %"class.net::SpdyBufferProducer"* %12 to void (%"class.net::SpdyBufferProducer"*)***
  %17 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %17, i64 2
  %19 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %18, align 8
  tail call void %19(%"class.net::SpdyBufferProducer"* nonnull %12) #14
  br label %20

20:                                               ; preds = %2, %15
  %21 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 3
  %22 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 3
  %23 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %22, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = bitcast %"class.base::WeakPtr"* %22 to i64*
  %25 = load i64, i64* %24, align 8
  store %"class.base::internal::WeakReference::Flag"* null, %"class.base::internal::WeakReference::Flag"** %23, align 8
  %26 = bitcast %"class.base::WeakPtr"* %21 to i64*
  %27 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %21, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %27, align 8
  store i64 %25, i64* %26, align 8
  %29 = icmp eq %"class.base::internal::WeakReference::Flag"* %28, null
  br i1 %29, label %36, label %30

30:                                               ; preds = %20
  %31 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw sub i32* %31, i32 1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  tail call void @_ZN4base8internal13WeakReference4FlagD1Ev(%"class.base::internal::WeakReference::Flag"* nonnull %28) #14
  %35 = bitcast %"class.base::internal::WeakReference::Flag"* %28 to i8*
  tail call void @_ZdlPv(i8* %35) #15
  br label %36

36:                                               ; preds = %20, %30, %34
  %37 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 3, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 3, i32 0, i32 1
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %0, i64 0, i32 4
  %41 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %1, i64 0, i32 4
  %42 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %40 to i8*
  %43 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 5, i1 false)
  ret %"struct.net::SpdyWriteQueue::PendingWrite"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueueC2Ev(%"class.net::SpdyWriteQueue"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 0
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 1
  %4 = bitcast i32* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 196, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueueD2Ev(%"class.net::SpdyWriteQueue"*) unnamed_addr #1 align 2 {
  tail call void @_ZN3net14SpdyWriteQueue5ClearEv(%"class.net::SpdyWriteQueue"* %0)
  %2 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 5
  %3 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 5, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 5, i32 2
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeEmm(%"class.base::circular_deque"* %2, i64 %4, i64 %6) #14
  %7 = bitcast %"class.base::circular_deque"* %2 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @free(i8* %8) #14
  %9 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 4
  %10 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 4, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 4, i32 2
  %13 = load i64, i64* %12, align 8
  tail call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeEmm(%"class.base::circular_deque"* %9, i64 %11, i64 %13) #14
  %14 = bitcast %"class.base::circular_deque"* %9 to i8**
  %15 = load i8*, i8** %14, align 8
  tail call void @free(i8* %15) #14
  %16 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 3
  %17 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 3, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 3, i32 2
  %20 = load i64, i64* %19, align 8
  tail call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeEmm(%"class.base::circular_deque"* %16, i64 %18, i64 %20) #14
  %21 = bitcast %"class.base::circular_deque"* %16 to i8**
  %22 = load i8*, i8** %21, align 8
  tail call void @free(i8* %22) #14
  %23 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 2
  %24 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 2, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 2, i32 2
  %27 = load i64, i64* %26, align 8
  tail call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeEmm(%"class.base::circular_deque"* %23, i64 %25, i64 %27) #14
  %28 = bitcast %"class.base::circular_deque"* %23 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @free(i8* %29) #14
  %30 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 1
  %31 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 1, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 1, i32 2
  %34 = load i64, i64* %33, align 8
  tail call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeEmm(%"class.base::circular_deque"* %30, i64 %32, i64 %34) #14
  %35 = bitcast %"class.base::circular_deque"* %30 to i8**
  %36 = load i8*, i8** %35, align 8
  tail call void @free(i8* %36) #14
  %37 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 0
  %38 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  tail call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeEmm(%"class.base::circular_deque"* %37, i64 %39, i64 %41) #14
  %42 = bitcast %"class.base::circular_deque"* %37 to i8**
  %43 = load i8*, i8** %42, align 8
  tail call void @free(i8* %43) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueue5ClearEv(%"class.net::SpdyWriteQueue"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = alloca %"class.std::__1::vector.79", align 8
  %4 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 209, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #14
  %9 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #14
  br label %10

10:                                               ; preds = %1, %7
  store i8 1, i8* %4, align 8
  %11 = bitcast %"class.std::__1::vector.79"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #14
  %12 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %3, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %3, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #14
  %15 = bitcast %"class.std::__1::unique_ptr"** %13 to i64*
  br label %43

16:                                               ; preds = %56
  store i8 0, i8* %4, align 8
  %17 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 1
  store i32 0, i32* %17, align 4
  %18 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %12, align 8
  %19 = icmp eq %"class.std::__1::unique_ptr"* %18, null
  br i1 %19, label %42, label %20

20:                                               ; preds = %16
  %21 = bitcast %"class.std::__1::unique_ptr"* %18 to i8*
  %22 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %13, align 8
  %23 = icmp eq %"class.std::__1::unique_ptr"* %22, %18
  br i1 %23, label %40, label %24

24:                                               ; preds = %20, %35
  %25 = phi %"class.std::__1::unique_ptr"* [ %26, %35 ], [ %22, %20 ]
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 -1
  %27 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %26, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %27, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %27, align 8
  %29 = icmp eq %"class.net::SpdyBufferProducer"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.net::SpdyBufferProducer"* %28 to void (%"class.net::SpdyBufferProducer"*)***
  %32 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %32, i64 2
  %34 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %33, align 8
  call void %34(%"class.net::SpdyBufferProducer"* nonnull %28) #14
  br label %35

35:                                               ; preds = %30, %24
  %36 = icmp eq %"class.std::__1::unique_ptr"* %26, %18
  br i1 %36, label %37, label %24

37:                                               ; preds = %35
  %38 = bitcast %"class.std::__1::vector.79"* %3 to i8**
  %39 = load i8*, i8** %38, align 8
  br label %40

40:                                               ; preds = %37, %20
  %41 = phi i8* [ %39, %37 ], [ %21, %20 ]
  store %"class.std::__1::unique_ptr"* %18, %"class.std::__1::unique_ptr"** %13, align 8
  call void @_ZdlPv(i8* %41) #15
  br label %42

42:                                               ; preds = %16, %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #14
  ret void

43:                                               ; preds = %56, %10
  %44 = phi i64 [ 0, %10 ], [ %63, %56 ]
  %45 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %44
  %46 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %44, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %44, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %47, %49
  br i1 %50, label %56, label %51

51:                                               ; preds = %43
  %52 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %45, i64 0, i32 0
  %53 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %44, i32 0, i32 1
  br label %65

54:                                               ; preds = %80
  %55 = load i64, i64* %46, align 8
  br label %56

56:                                               ; preds = %54, %43
  %57 = phi i64 [ %47, %43 ], [ %55, %54 ]
  %58 = phi i64 [ %47, %43 ], [ %84, %54 ]
  call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeEmm(%"class.base::circular_deque"* %45, i64 %57, i64 %58) #14
  %59 = bitcast i64* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 16, i1 false) #14
  %60 = bitcast %"class.base::circular_deque"* %45 to i8**
  %61 = load i8*, i8** %60, align 8
  call void @free(i8* %61) #14
  %62 = bitcast %"class.base::circular_deque"* %45 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false) #14
  %63 = add nuw nsw i64 %44, 1
  %64 = icmp eq i64 %63, 6
  br i1 %64, label %16, label %43

65:                                               ; preds = %51, %80
  %66 = phi i64 [ %47, %51 ], [ %84, %80 ]
  %67 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %52, i64 %66) #14
  %68 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %67, i64 0, i32 2
  %69 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %13, align 8
  %70 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %14, align 8
  %71 = icmp ult %"class.std::__1::unique_ptr"* %69, %70
  br i1 %71, label %72, label %79

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %68, i64 0, i32 0, i32 0, i32 0
  %74 = bitcast %"class.std::__1::unique_ptr"* %68 to i64*
  %75 = load i64, i64* %74, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %73, align 8
  %76 = bitcast %"class.std::__1::unique_ptr"* %69 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %69, i64 1
  %78 = ptrtoint %"class.std::__1::unique_ptr"* %77 to i64
  store i64 %78, i64* %15, align 8
  br label %80

79:                                               ; preds = %65
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3net18SpdyBufferProducerENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.79"* nonnull %3, %"class.std::__1::unique_ptr"* dereferenceable(8) %68) #14
  br label %80

80:                                               ; preds = %72, %79
  %81 = add i64 %66, 1
  %82 = load i64, i64* %53, align 8
  %83 = icmp eq i64 %81, %82
  %84 = select i1 %83, i64 0, i64 %81
  %85 = load i64, i64* %48, align 8
  %86 = icmp eq i64 %84, %85
  br i1 %86, label %54, label %65
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net14SpdyWriteQueue7IsEmptyEv(%"class.net::SpdyWriteQueue"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %3, %5
  br i1 %6, label %7, label %13

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 1, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %9, %11
  br i1 %12, label %14, label %13

13:                                               ; preds = %26, %20, %14, %7, %1
  ret i1 false

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 2, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 2, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %16, %18
  br i1 %19, label %20, label %13

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 3, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 3, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %22, %24
  br i1 %25, label %26, label %13

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 4, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 4, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %28, %30
  br i1 %31, label %32, label %13

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 5, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 5, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = icmp eq i64 %34, %36
  ret i1 %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueue7EnqueueENS_15RequestPriorityEN4spdy13SpdyFrameTypeENSt3__110unique_ptrINS_18SpdyBufferProducerENS4_14default_deleteIS6_EEEERKN4base7WeakPtrINS_10SpdyStreamEEERKNS_27NetworkTrafficAnnotationTagE(%"class.net::SpdyWriteQueue"*, i32, i8 zeroext, %"class.net::SpdyBufferProducer"*, %"class.base::WeakPtr"* dereferenceable(16), %"struct.net::NetworkTrafficAnnotationTag"* nocapture readonly dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca i32, align 4
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.logging::CheckOpResult", align 8
  %12 = alloca i32, align 4
  %13 = alloca %"class.logging::CheckError", align 8
  %14 = alloca %"class.logging::CheckOpResult", align 8
  %15 = alloca i32, align 4
  %16 = alloca %"class.logging::CheckError", align 8
  %17 = alloca %"struct.net::SpdyWriteQueue::PendingWrite", align 8
  %18 = ptrtoint %"class.net::SpdyBufferProducer"* %3 to i64
  store i32 %1, i32* %9, align 4
  %19 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 0
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %6
  %23 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 68, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #14
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #14
  %25 = load i32, i32* %9, align 4
  br label %26

26:                                               ; preds = %6, %22
  %27 = phi i32 [ %1, %6 ], [ %25, %22 ]
  %28 = bitcast %"class.logging::CheckOpResult"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #14
  %29 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %11, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %29, align 8
  %30 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #14
  store i32 0, i32* %12, align 4
  %31 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31)
  %32 = icmp slt i32 %27, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31)
  store i8* null, i8** %29, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #14
  br label %44

34:                                               ; preds = %26
  %35 = bitcast i32* %9 to i8*
  %36 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %35, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #14
  %37 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %30, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %8, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i8* %36, i8* %37) #14
  %38 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31)
  store i8* %39, i8** %29, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #14
  %40 = icmp eq i8* %39, null
  br i1 %40, label %44, label %41

41:                                               ; preds = %34
  %42 = bitcast %"class.logging::CheckError"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %13, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 69, %"class.logging::CheckOpResult"* nonnull %11) #14
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %13) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %13) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #14
  br label %44

44:                                               ; preds = %33, %34, %41
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #14
  %45 = bitcast %"class.logging::CheckOpResult"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #14
  %46 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %14, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %46, align 8
  %47 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #14
  store i32 5, i32* %15, align 4
  %48 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48)
  %49 = load i32, i32* %9, align 4
  %50 = icmp sgt i32 %49, 5
  br i1 %50, label %52, label %51

51:                                               ; preds = %44
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  store i8* null, i8** %46, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #14
  br label %62

52:                                               ; preds = %44
  %53 = bitcast i32* %9 to i8*
  %54 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %53, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #14
  %55 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %47, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* %54, i8* %55) #14
  %56 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  store i8* %57, i8** %46, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #14
  %58 = icmp eq i8* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %52
  %60 = bitcast %"class.logging::CheckError"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 70, %"class.logging::CheckOpResult"* nonnull %14) #14
  %61 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %16) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %16) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #14
  br label %62

62:                                               ; preds = %51, %52, %59
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #14
  %63 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %4, i64 0, i32 0, i32 0
  %64 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %63) #14
  %65 = load i32, i32* %9, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %66
  %68 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %17, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %68) #14
  %69 = getelementptr inbounds %"struct.net::NetworkTrafficAnnotationTag", %"struct.net::NetworkTrafficAnnotationTag"* %5, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  store i8 %2, i8* %68, align 8
  %71 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %17, i64 0, i32 2
  %72 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  store i64 %18, i64* %72, align 8
  %73 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %17, i64 0, i32 3, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1ERKS1_(%"class.base::internal::WeakReference"* %73, %"class.base::internal::WeakReference"* dereferenceable(8) %63) #14
  %74 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %17, i64 0, i32 3, i32 0, i32 1
  %75 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %4, i64 0, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %74, align 8
  %77 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %17, i64 0, i32 4, i32 0
  store i32 %70, i32* %77, align 8
  %78 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %17, i64 0, i32 5
  %79 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %63) #14
  %80 = bitcast i64* %75 to %"class.net::SpdyStream"**
  %81 = load %"class.net::SpdyStream"*, %"class.net::SpdyStream"** %80, align 8
  %82 = icmp ne %"class.net::SpdyStream"* %81, null
  %83 = and i1 %79, %82
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %78, align 4
  call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %67, i64 1) #14
  %85 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %67, i64 0, i32 0
  %86 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %66, i32 2
  %87 = load i64, i64* %86, align 8
  %88 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %85, i64 %87) #14
  %89 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %88, i64 0, i32 0
  %90 = load i8, i8* %68, align 8
  store i8 %90, i8* %89, align 8
  %91 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %88, i64 0, i32 2
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %71, i64 0, i32 0, i32 0, i32 0
  %93 = load i64, i64* %72, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %92, align 8
  %94 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %88, i64 0, i32 3, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %95, %"class.base::internal::WeakReference"* dereferenceable(8) %73) #14
  %96 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %88, i64 0, i32 3, i32 0, i32 1
  %97 = load i64, i64* %74, align 8
  store i64 %97, i64* %96, align 8
  %98 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %88, i64 0, i32 4
  %99 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %17, i64 0, i32 4
  %100 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %98 to i8*
  %101 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 5, i1 false) #14
  %102 = load i64, i64* %86, align 8
  %103 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %66, i32 0, i32 1
  %104 = load i64, i64* %103, align 8
  %105 = add i64 %104, -1
  %106 = icmp eq i64 %102, %105
  br i1 %106, label %107, label %108

107:                                              ; preds = %62
  store i64 0, i64* %86, align 8
  br label %111

108:                                              ; preds = %62
  %109 = add i64 %102, 1
  store i64 %109, i64* %86, align 8
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %108, %107
  br label %112

112:                                              ; preds = %108, %111
  %113 = phi i64 [ %105, %111 ], [ %102, %108 ]
  %114 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %85, i64 %113) #14
  %115 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %17, i64 0, i32 3, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %115) #14
  %116 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %17, i64 0, i32 2, i32 0, i32 0, i32 0
  %117 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %116, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %116, align 8
  %118 = icmp eq %"class.net::SpdyBufferProducer"* %117, null
  br i1 %118, label %124, label %119

119:                                              ; preds = %112
  %120 = bitcast %"class.net::SpdyBufferProducer"* %117 to void (%"class.net::SpdyBufferProducer"*)***
  %121 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %120, align 8
  %122 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %121, i64 2
  %123 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %122, align 8
  call void %123(%"class.net::SpdyBufferProducer"* nonnull %117) #14
  br label %124

124:                                              ; preds = %112, %119
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %68) #14
  switch i8 %2, label %129 [
    i8 8, label %125
    i8 6, label %125
    i8 4, label %125
    i8 3, label %125
    i8 7, label %125
  ]

125:                                              ; preds = %124, %124, %124, %124, %124
  %126 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %126, align 4
  br label %129

129:                                              ; preds = %125, %124
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net14SpdyWriteQueue7DequeueEPN4spdy13SpdyFrameTypeEPNSt3__110unique_ptrINS_18SpdyBufferProducerENS4_14default_deleteIS6_EEEEPN4base7WeakPtrINS_10SpdyStreamEEEPNS_34MutableNetworkTrafficAnnotationTagE(%"class.net::SpdyWriteQueue"*, i8* nocapture, %"class.std::__1::unique_ptr"* nocapture, %"class.base::WeakPtr"* nocapture, %"struct.net::MutableNetworkTrafficAnnotationTag"* nocapture) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"struct.net::SpdyWriteQueue::PendingWrite", align 8
  %8 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %5
  %12 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 87, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #14
  %13 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #14
  br label %14

14:                                               ; preds = %5, %11
  %15 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 5, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 5, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %16, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 4, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 4, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %22, %24
  br i1 %25, label %117, label %26

26:                                               ; preds = %135, %129, %123, %117, %20, %14
  %27 = phi i64 [ 5, %14 ], [ 4, %20 ], [ 3, %117 ], [ 2, %123 ], [ 1, %129 ], [ 0, %135 ]
  %28 = phi i64* [ %15, %14 ], [ %21, %20 ], [ %118, %117 ], [ %124, %123 ], [ %130, %129 ], [ %136, %135 ]
  %29 = phi i64 [ %16, %14 ], [ %22, %20 ], [ %119, %117 ], [ %125, %123 ], [ %131, %129 ], [ %137, %135 ]
  %30 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %27
  %31 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %31) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 40, i1 false)
  %32 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %30, i64 0, i32 0
  %33 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %32, i64 %29) #14
  %34 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %33, i64 0, i32 0
  %35 = load i8, i8* %34, align 8
  store i8 %35, i8* %31, align 8
  %36 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %7, i64 0, i32 2
  %37 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %33, i64 0, i32 2
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 0, i32 0, i32 0, i32 0
  %39 = bitcast %"class.std::__1::unique_ptr"* %37 to i64*
  %40 = load i64, i64* %39, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %38, align 8
  %41 = bitcast %"class.std::__1::unique_ptr"* %36 to i64*
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %7, i64 0, i32 3, i32 0, i32 0
  %43 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %33, i64 0, i32 3, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %42, %"class.base::internal::WeakReference"* dereferenceable(8) %43) #14
  %44 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %7, i64 0, i32 3, i32 0, i32 1
  %45 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %33, i64 0, i32 3, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %44, align 8
  %47 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %7, i64 0, i32 4
  %48 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %33, i64 0, i32 4
  %49 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %47 to i8*
  %50 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 5, i1 false) #14
  %51 = load i64, i64* %28, align 8
  %52 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %32, i64 %51) #14
  %53 = load i64, i64* %28, align 8
  %54 = add i64 %53, 1
  %55 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %32, i64 %54) #14
  call void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeIS4_Li0EEEvPS4_S7_(%"class.base::internal::VectorBuffer"* %32, %"struct.net::SpdyWriteQueue::PendingWrite"* %52, %"struct.net::SpdyWriteQueue::PendingWrite"* %55) #14
  %56 = load i64, i64* %28, align 8
  %57 = add i64 %56, 1
  %58 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %27, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %57, %59
  %61 = select i1 %60, i64 0, i64 %57
  store i64 %61, i64* %28, align 8
  call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE25ShrinkCapacityIfNecessaryEv(%"class.base::circular_deque"* %30) #14
  %62 = load i8, i8* %31, align 8
  store i8 %62, i8* %1, align 1
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 0, i32 0, i32 0, i32 0
  %64 = load i64, i64* %41, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %63, align 8
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %2, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %65, align 8
  %67 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  store i64 %64, i64* %67, align 8
  %68 = icmp eq %"class.net::SpdyBufferProducer"* %66, null
  br i1 %68, label %74, label %69

69:                                               ; preds = %26
  %70 = bitcast %"class.net::SpdyBufferProducer"* %66 to void (%"class.net::SpdyBufferProducer"*)***
  %71 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %71, i64 2
  %73 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %72, align 8
  call void %73(%"class.net::SpdyBufferProducer"* nonnull %66) #14
  br label %74

74:                                               ; preds = %26, %69
  %75 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %7, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %76 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %75, align 8
  %77 = icmp eq %"class.base::internal::WeakReference::Flag"* %76, null
  br i1 %77, label %81, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %76, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = atomicrmw add i32* %79, i32 1 monotonic
  br label %81

81:                                               ; preds = %78, %74
  %82 = ptrtoint %"class.base::internal::WeakReference::Flag"* %76 to i64
  %83 = bitcast %"class.base::WeakPtr"* %3 to i64*
  %84 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %85 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %84, align 8
  store i64 %82, i64* %83, align 8
  %86 = icmp eq %"class.base::internal::WeakReference::Flag"* %85, null
  br i1 %86, label %93, label %87

87:                                               ; preds = %81
  %88 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %85, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = atomicrmw sub i32* %88, i32 1 acq_rel
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %93

91:                                               ; preds = %87
  call void @_ZN4base8internal13WeakReference4FlagD1Ev(%"class.base::internal::WeakReference::Flag"* nonnull %85) #14
  %92 = bitcast %"class.base::internal::WeakReference::Flag"* %85 to i8*
  call void @_ZdlPv(i8* %92) #15
  br label %93

93:                                               ; preds = %81, %87, %91
  %94 = load i64, i64* %44, align 8
  %95 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %3, i64 0, i32 0, i32 1
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %7, i64 0, i32 4, i32 0
  %97 = getelementptr inbounds %"struct.net::MutableNetworkTrafficAnnotationTag", %"struct.net::MutableNetworkTrafficAnnotationTag"* %4, i64 0, i32 0
  %98 = load i32, i32* %96, align 8
  store i32 %98, i32* %97, align 4
  %99 = load i8, i8* %1, align 1
  switch i8 %99, label %104 [
    i8 8, label %100
    i8 6, label %100
    i8 4, label %100
    i8 3, label %100
    i8 7, label %100
  ]

100:                                              ; preds = %93, %93, %93, %93, %93
  %101 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = add nsw i32 %102, -1
  store i32 %103, i32* %101, align 4
  br label %104

104:                                              ; preds = %93, %100
  %105 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %7, i64 0, i32 3, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %105) #14
  %106 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  %107 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %106, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %106, align 8
  %108 = icmp eq %"class.net::SpdyBufferProducer"* %107, null
  br i1 %108, label %114, label %109

109:                                              ; preds = %104
  %110 = bitcast %"class.net::SpdyBufferProducer"* %107 to void (%"class.net::SpdyBufferProducer"*)***
  %111 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %110, align 8
  %112 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %111, i64 2
  %113 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %112, align 8
  call void %113(%"class.net::SpdyBufferProducer"* nonnull %107) #14
  br label %114

114:                                              ; preds = %109, %104
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %31) #14
  br label %115

115:                                              ; preds = %135, %114
  %116 = phi i1 [ true, %114 ], [ false, %135 ]
  ret i1 %116

117:                                              ; preds = %20
  %118 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 3, i32 1
  %119 = load i64, i64* %118, align 8
  %120 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 3, i32 2
  %121 = load i64, i64* %120, align 8
  %122 = icmp eq i64 %119, %121
  br i1 %122, label %123, label %26

123:                                              ; preds = %117
  %124 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 2, i32 1
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 2, i32 2
  %127 = load i64, i64* %126, align 8
  %128 = icmp eq i64 %125, %127
  br i1 %128, label %129, label %26

129:                                              ; preds = %123
  %130 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 1, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 1, i32 2
  %133 = load i64, i64* %132, align 8
  %134 = icmp eq i64 %131, %133
  br i1 %134, label %135, label %26

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 0, i32 1
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 0, i32 2
  %139 = load i64, i64* %138, align 8
  %140 = icmp eq i64 %137, %139
  br i1 %140, label %115, label %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueue28RemovePendingWritesForStreamEPNS_10SpdyStreamE(%"class.net::SpdyWriteQueue"*, %"class.net::SpdyStream"* readonly) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca i32, align 4
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = alloca %"class.logging::CheckOpResult", align 8
  %11 = alloca i32, align 4
  %12 = alloca %"class.logging::CheckError", align 8
  %13 = alloca %"class.std::__1::vector.79", align 8
  %14 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 0
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 109, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #14
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #14
  br label %20

20:                                               ; preds = %2, %17
  store i8 1, i8* %14, align 8
  %21 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #14
  %22 = getelementptr inbounds %"class.net::SpdyStream", %"class.net::SpdyStream"* %1, i64 0, i32 3
  %23 = load i32, i32* %22, align 8
  store i32 %23, i32* %6, align 4
  %24 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #14
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #14
  store i32 0, i32* %8, align 4
  %27 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = icmp slt i32 %23, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* null, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #14
  br label %39

30:                                               ; preds = %20
  %31 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %21, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #14
  %32 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %26, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i8* %31, i8* %32) #14
  %33 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* %34, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #14
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 112, %"class.logging::CheckOpResult"* nonnull %7) #14
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #14
  br label %39

39:                                               ; preds = %29, %30, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #14
  %40 = bitcast %"class.logging::CheckOpResult"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #14
  %41 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %10, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %41, align 8
  %42 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42) #14
  store i32 5, i32* %11, align 4
  %43 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43)
  %44 = load i32, i32* %6, align 4
  %45 = icmp sgt i32 %44, 5
  br i1 %45, label %47, label %46

46:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43)
  store i8* null, i8** %41, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42) #14
  br label %56

47:                                               ; preds = %39
  %48 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %21, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #14
  %49 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %42, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* %48, i8* %49) #14
  %50 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43)
  store i8* %51, i8** %41, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42) #14
  %52 = icmp eq i8* %51, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %47
  %54 = bitcast %"class.logging::CheckError"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %12, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 113, %"class.logging::CheckOpResult"* nonnull %10) #14
  %55 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %12) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %12) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #14
  br label %56

56:                                               ; preds = %46, %47, %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #14
  %57 = bitcast %"class.std::__1::vector.79"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #14
  %58 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %13, i64 0, i32 0, i32 0
  %59 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %13, i64 0, i32 0, i32 1
  %60 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 0, i64 24, i1 false) #14
  %61 = load i32, i32* %6, align 4
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %62
  %64 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %62, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %62, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %65, %67
  br i1 %68, label %69, label %70

69:                                               ; preds = %56
  store i8 0, i8* %14, align 8
  br label %98

70:                                               ; preds = %56
  %71 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 1
  %72 = bitcast %"class.std::__1::unique_ptr"** %59 to i64*
  br label %99

73:                                               ; preds = %162
  %74 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %58, align 8
  store i8 0, i8* %14, align 8
  %75 = icmp eq %"class.std::__1::unique_ptr"* %74, null
  br i1 %75, label %98, label %76

76:                                               ; preds = %73
  %77 = bitcast %"class.std::__1::unique_ptr"* %74 to i8*
  %78 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %59, align 8
  %79 = icmp eq %"class.std::__1::unique_ptr"* %78, %74
  br i1 %79, label %96, label %80

80:                                               ; preds = %76, %91
  %81 = phi %"class.std::__1::unique_ptr"* [ %82, %91 ], [ %78, %76 ]
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 -1
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %82, i64 0, i32 0, i32 0, i32 0
  %84 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %83, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %83, align 8
  %85 = icmp eq %"class.net::SpdyBufferProducer"* %84, null
  br i1 %85, label %91, label %86

86:                                               ; preds = %80
  %87 = bitcast %"class.net::SpdyBufferProducer"* %84 to void (%"class.net::SpdyBufferProducer"*)***
  %88 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %87, align 8
  %89 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %88, i64 2
  %90 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %89, align 8
  call void %90(%"class.net::SpdyBufferProducer"* nonnull %84) #14
  br label %91

91:                                               ; preds = %86, %80
  %92 = icmp eq %"class.std::__1::unique_ptr"* %82, %74
  br i1 %92, label %93, label %80

93:                                               ; preds = %91
  %94 = bitcast %"class.std::__1::vector.79"* %13 to i8**
  %95 = load i8*, i8** %94, align 8
  br label %96

96:                                               ; preds = %93, %76
  %97 = phi i8* [ %95, %93 ], [ %77, %76 ]
  store %"class.std::__1::unique_ptr"* %74, %"class.std::__1::unique_ptr"** %59, align 8
  call void @_ZdlPv(i8* %97) #15
  br label %98

98:                                               ; preds = %69, %73, %96
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #14
  ret void

99:                                               ; preds = %70, %162
  %100 = phi i64 [ %65, %70 ], [ %164, %162 ]
  %101 = phi %"class.base::circular_deque"* [ %63, %70 ], [ %163, %162 ]
  %102 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %101, i64 0, i32 0
  %103 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %102, i64 %100) #14
  %104 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %103, i64 0, i32 3, i32 0, i32 0
  %105 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %104) #14
  br i1 %105, label %106, label %110

106:                                              ; preds = %99
  %107 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %103, i64 0, i32 3, i32 0, i32 1
  %108 = bitcast i64* %107 to %"class.net::SpdyStream"**
  %109 = load %"class.net::SpdyStream"*, %"class.net::SpdyStream"** %108, align 8
  br label %110

110:                                              ; preds = %99, %106
  %111 = phi %"class.net::SpdyStream"* [ %109, %106 ], [ null, %99 ]
  %112 = icmp eq %"class.net::SpdyStream"* %111, %1
  br i1 %112, label %113, label %156

113:                                              ; preds = %110
  %114 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %102, i64 %100) #14
  %115 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %114, i64 0, i32 0
  %116 = load i8, i8* %115, align 8
  switch i8 %116, label %120 [
    i8 8, label %117
    i8 6, label %117
    i8 4, label %117
    i8 3, label %117
    i8 7, label %117
  ]

117:                                              ; preds = %113, %113, %113, %113, %113
  %118 = load i32, i32* %71, align 4
  %119 = add nsw i32 %118, -1
  store i32 %119, i32* %71, align 4
  br label %120

120:                                              ; preds = %113, %117
  %121 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %102, i64 %100) #14
  %122 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %121, i64 0, i32 2
  %123 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %59, align 8
  %124 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %60, align 8
  %125 = icmp ult %"class.std::__1::unique_ptr"* %123, %124
  br i1 %125, label %126, label %133

126:                                              ; preds = %120
  %127 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 0, i32 0, i32 0, i32 0
  %128 = bitcast %"class.std::__1::unique_ptr"* %122 to i64*
  %129 = load i64, i64* %128, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %127, align 8
  %130 = bitcast %"class.std::__1::unique_ptr"* %123 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %123, i64 1
  %132 = ptrtoint %"class.std::__1::unique_ptr"* %131 to i64
  store i64 %132, i64* %72, align 8
  br label %134

133:                                              ; preds = %120
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3net18SpdyBufferProducerENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.79"* nonnull %13, %"class.std::__1::unique_ptr"* dereferenceable(8) %122) #14
  br label %134

134:                                              ; preds = %126, %133
  %135 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %101, i64 0, i32 1
  %136 = load i64, i64* %135, align 8
  %137 = icmp ult i64 %100, %136
  br i1 %137, label %142, label %138

138:                                              ; preds = %134
  %139 = sub i64 %100, %136
  %140 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %101, i64 0, i32 0, i32 1
  %141 = load i64, i64* %140, align 8
  br label %147

142:                                              ; preds = %134
  %143 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %101, i64 0, i32 0, i32 1
  %144 = load i64, i64* %143, align 8
  %145 = sub i64 %100, %136
  %146 = add i64 %145, %144
  br label %147

147:                                              ; preds = %138, %142
  %148 = phi i64 [ %141, %138 ], [ %144, %142 ]
  %149 = phi i64 [ %139, %138 ], [ %146, %142 ]
  %150 = add i64 %136, 1
  %151 = add i64 %150, %149
  %152 = urem i64 %151, %148
  %153 = call { %"class.base::circular_deque"*, i64 } @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE5eraseENS_8internal29circular_deque_const_iteratorIS3_EES7_(%"class.base::circular_deque"* %63, %"class.base::circular_deque"* %101, i64 %100, %"class.base::circular_deque"* %101, i64 %152) #14
  %154 = extractvalue { %"class.base::circular_deque"*, i64 } %153, 0
  %155 = extractvalue { %"class.base::circular_deque"*, i64 } %153, 1
  br label %162

156:                                              ; preds = %110
  %157 = add i64 %100, 1
  %158 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %101, i64 0, i32 0, i32 1
  %159 = load i64, i64* %158, align 8
  %160 = icmp eq i64 %157, %159
  %161 = select i1 %160, i64 0, i64 %157
  br label %162

162:                                              ; preds = %156, %147
  %163 = phi %"class.base::circular_deque"* [ %154, %147 ], [ %101, %156 ]
  %164 = phi i64 [ %155, %147 ], [ %161, %156 ]
  %165 = load i64, i64* %66, align 8
  %166 = icmp eq i64 %164, %165
  br i1 %166, label %73, label %99
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueue34RemovePendingWritesForStreamsAfterEj(%"class.net::SpdyWriteQueue"*, i32) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.std::__1::vector.79", align 8
  %7 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #14
  %12 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #14
  br label %13

13:                                               ; preds = %2, %10
  store i8 1, i8* %7, align 8
  %14 = bitcast %"class.std::__1::vector.79"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #14
  %15 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %6, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %6, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 24, i1 false) #14
  %18 = bitcast %"class.logging::CheckError"* %4 to i8*
  %19 = bitcast %"class.logging::CheckError"* %3 to i8*
  %20 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 1
  %21 = bitcast %"class.std::__1::unique_ptr"** %16 to i64*
  br label %48

22:                                               ; preds = %56
  store i8 0, i8* %7, align 8
  %23 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %15, align 8
  %24 = icmp eq %"class.std::__1::unique_ptr"* %23, null
  br i1 %24, label %47, label %25

25:                                               ; preds = %22
  %26 = bitcast %"class.std::__1::unique_ptr"* %23 to i8*
  %27 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %16, align 8
  %28 = icmp eq %"class.std::__1::unique_ptr"* %27, %23
  br i1 %28, label %45, label %29

29:                                               ; preds = %25, %40
  %30 = phi %"class.std::__1::unique_ptr"* [ %31, %40 ], [ %27, %25 ]
  %31 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %30, i64 -1
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %32, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %32, align 8
  %34 = icmp eq %"class.net::SpdyBufferProducer"* %33, null
  br i1 %34, label %40, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.net::SpdyBufferProducer"* %33 to void (%"class.net::SpdyBufferProducer"*)***
  %37 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %37, i64 2
  %39 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %38, align 8
  call void %39(%"class.net::SpdyBufferProducer"* nonnull %33) #14
  br label %40

40:                                               ; preds = %35, %29
  %41 = icmp eq %"class.std::__1::unique_ptr"* %31, %23
  br i1 %41, label %42, label %29

42:                                               ; preds = %40
  %43 = bitcast %"class.std::__1::vector.79"* %6 to i8**
  %44 = load i8*, i8** %43, align 8
  br label %45

45:                                               ; preds = %42, %25
  %46 = phi i8* [ %44, %42 ], [ %26, %25 ]
  store %"class.std::__1::unique_ptr"* %23, %"class.std::__1::unique_ptr"** %16, align 8
  call void @_ZdlPv(i8* %46) #15
  br label %47

47:                                               ; preds = %22, %45
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #14
  ret void

48:                                               ; preds = %56, %13
  %49 = phi i64 [ 0, %13 ], [ %57, %56 ]
  %50 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %49
  %51 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %49, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %49, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %52, %54
  br i1 %55, label %56, label %59

56:                                               ; preds = %154, %48
  %57 = add nuw nsw i64 %49, 1
  %58 = icmp eq i64 %57, 6
  br i1 %58, label %22, label %48

59:                                               ; preds = %48, %154
  %60 = phi i64 [ %156, %154 ], [ %52, %48 ]
  %61 = phi %"class.base::circular_deque"* [ %155, %154 ], [ %50, %48 ]
  %62 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %61, i64 0, i32 0
  %63 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %62, i64 %60) #14
  %64 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %63, i64 0, i32 3, i32 0, i32 0
  %65 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %64) #14
  br i1 %65, label %66, label %148

66:                                               ; preds = %59
  %67 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %63, i64 0, i32 3, i32 0, i32 1
  %68 = bitcast i64* %67 to %"class.net::SpdyStream"**
  %69 = load %"class.net::SpdyStream"*, %"class.net::SpdyStream"** %68, align 8
  %70 = icmp eq %"class.net::SpdyStream"* %69, null
  br i1 %70, label %148, label %71

71:                                               ; preds = %66
  %72 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %62, i64 %60) #14
  %73 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %72, i64 0, i32 3, i32 0, i32 0
  %74 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %73) #14
  br i1 %74, label %77, label %75

75:                                               ; preds = %71
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)) #14
  %76 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #14
  br label %77

77:                                               ; preds = %75, %71
  %78 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %73) #14
  br i1 %78, label %79, label %83

79:                                               ; preds = %77
  %80 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %72, i64 0, i32 3, i32 0, i32 1
  %81 = bitcast i64* %80 to %"class.net::SpdyStream"**
  %82 = load %"class.net::SpdyStream"*, %"class.net::SpdyStream"** %81, align 8
  br label %83

83:                                               ; preds = %77, %79
  %84 = phi %"class.net::SpdyStream"* [ %82, %79 ], [ null, %77 ]
  %85 = getelementptr inbounds %"class.net::SpdyStream", %"class.net::SpdyStream"* %84, i64 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = icmp ugt i32 %86, %1
  br i1 %87, label %105, label %88

88:                                               ; preds = %83
  %89 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %62, i64 %60) #14
  %90 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %89, i64 0, i32 3, i32 0, i32 0
  %91 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %90) #14
  br i1 %91, label %94, label %92

92:                                               ; preds = %88
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)) #14
  %93 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  br label %94

94:                                               ; preds = %92, %88
  %95 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %90) #14
  br i1 %95, label %96, label %100

96:                                               ; preds = %94
  %97 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %89, i64 0, i32 3, i32 0, i32 1
  %98 = bitcast i64* %97 to %"class.net::SpdyStream"**
  %99 = load %"class.net::SpdyStream"*, %"class.net::SpdyStream"** %98, align 8
  br label %100

100:                                              ; preds = %94, %96
  %101 = phi %"class.net::SpdyStream"* [ %99, %96 ], [ null, %94 ]
  %102 = getelementptr inbounds %"class.net::SpdyStream", %"class.net::SpdyStream"* %101, i64 0, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %148

105:                                              ; preds = %100, %83
  %106 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %62, i64 %60) #14
  %107 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %106, i64 0, i32 0
  %108 = load i8, i8* %107, align 8
  switch i8 %108, label %112 [
    i8 8, label %109
    i8 6, label %109
    i8 4, label %109
    i8 3, label %109
    i8 7, label %109
  ]

109:                                              ; preds = %105, %105, %105, %105, %105
  %110 = load i32, i32* %20, align 4
  %111 = add nsw i32 %110, -1
  store i32 %111, i32* %20, align 4
  br label %112

112:                                              ; preds = %105, %109
  %113 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %62, i64 %60) #14
  %114 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %113, i64 0, i32 2
  %115 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %16, align 8
  %116 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %17, align 8
  %117 = icmp ult %"class.std::__1::unique_ptr"* %115, %116
  br i1 %117, label %118, label %125

118:                                              ; preds = %112
  %119 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %114, i64 0, i32 0, i32 0, i32 0
  %120 = bitcast %"class.std::__1::unique_ptr"* %114 to i64*
  %121 = load i64, i64* %120, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %119, align 8
  %122 = bitcast %"class.std::__1::unique_ptr"* %115 to i64*
  store i64 %121, i64* %122, align 8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %115, i64 1
  %124 = ptrtoint %"class.std::__1::unique_ptr"* %123 to i64
  store i64 %124, i64* %21, align 8
  br label %126

125:                                              ; preds = %112
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3net18SpdyBufferProducerENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.79"* nonnull %6, %"class.std::__1::unique_ptr"* dereferenceable(8) %114) #14
  br label %126

126:                                              ; preds = %118, %125
  %127 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %61, i64 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = icmp ult i64 %60, %128
  br i1 %129, label %134, label %130

130:                                              ; preds = %126
  %131 = sub i64 %60, %128
  %132 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %61, i64 0, i32 0, i32 1
  %133 = load i64, i64* %132, align 8
  br label %139

134:                                              ; preds = %126
  %135 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %61, i64 0, i32 0, i32 1
  %136 = load i64, i64* %135, align 8
  %137 = sub i64 %60, %128
  %138 = add i64 %137, %136
  br label %139

139:                                              ; preds = %130, %134
  %140 = phi i64 [ %133, %130 ], [ %136, %134 ]
  %141 = phi i64 [ %131, %130 ], [ %138, %134 ]
  %142 = add i64 %128, 1
  %143 = add i64 %142, %141
  %144 = urem i64 %143, %140
  %145 = call { %"class.base::circular_deque"*, i64 } @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE5eraseENS_8internal29circular_deque_const_iteratorIS3_EES7_(%"class.base::circular_deque"* %50, %"class.base::circular_deque"* %61, i64 %60, %"class.base::circular_deque"* %61, i64 %144) #14
  %146 = extractvalue { %"class.base::circular_deque"*, i64 } %145, 0
  %147 = extractvalue { %"class.base::circular_deque"*, i64 } %145, 1
  br label %154

148:                                              ; preds = %59, %66, %100
  %149 = add i64 %60, 1
  %150 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %61, i64 0, i32 0, i32 1
  %151 = load i64, i64* %150, align 8
  %152 = icmp eq i64 %149, %151
  %153 = select i1 %152, i64 0, i64 %149
  br label %154

154:                                              ; preds = %148, %139
  %155 = phi %"class.base::circular_deque"* [ %61, %148 ], [ %146, %139 ]
  %156 = phi i64 [ %153, %148 ], [ %147, %139 ]
  %157 = load i64, i64* %53, align 8
  %158 = icmp eq i64 %156, %157
  br i1 %158, label %56, label %59
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14SpdyWriteQueue31ChangePriorityOfWritesForStreamEPNS_10SpdyStreamENS_15RequestPriorityES3_(%"class.net::SpdyWriteQueue"*, %"class.net::SpdyStream"* readnone, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 182, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #14
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #14
  br label %12

12:                                               ; preds = %4, %9
  %13 = zext i32 %2 to i64
  %14 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %13
  %15 = zext i32 %3 to i64
  %16 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %15
  %17 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %13, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %13, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %26, label %22

22:                                               ; preds = %12
  %23 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %16, i64 0, i32 0
  %24 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %15, i32 2
  %25 = getelementptr inbounds %"class.net::SpdyWriteQueue", %"class.net::SpdyWriteQueue"* %0, i64 0, i32 2, i64 %15, i32 0, i32 1
  br label %27

26:                                               ; preds = %102, %12
  ret void

27:                                               ; preds = %22, %102
  %28 = phi i64 [ %18, %22 ], [ %104, %102 ]
  %29 = phi %"class.base::circular_deque"* [ %14, %22 ], [ %103, %102 ]
  %30 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %29, i64 0, i32 0
  %31 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %30, i64 %28) #14
  %32 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %31, i64 0, i32 3, i32 0, i32 0
  %33 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %32) #14
  br i1 %33, label %34, label %38

34:                                               ; preds = %27
  %35 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %31, i64 0, i32 3, i32 0, i32 1
  %36 = bitcast i64* %35 to %"class.net::SpdyStream"**
  %37 = load %"class.net::SpdyStream"*, %"class.net::SpdyStream"** %36, align 8
  br label %38

38:                                               ; preds = %27, %34
  %39 = phi %"class.net::SpdyStream"* [ %37, %34 ], [ null, %27 ]
  %40 = icmp eq %"class.net::SpdyStream"* %39, %1
  br i1 %40, label %41, label %96

41:                                               ; preds = %38
  %42 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %30, i64 %28) #14
  call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %16, i64 1) #14
  %43 = load i64, i64* %24, align 8
  %44 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %23, i64 %43) #14
  %45 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %44, i64 0, i32 0
  %46 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %42, i64 0, i32 0
  %47 = load i8, i8* %46, align 8
  store i8 %47, i8* %45, align 8
  %48 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %44, i64 0, i32 2
  %49 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %42, i64 0, i32 2
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %50, align 8
  %53 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %44, i64 0, i32 3, i32 0, i32 0
  %55 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %42, i64 0, i32 3, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %54, %"class.base::internal::WeakReference"* dereferenceable(8) %55) #14
  %56 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %44, i64 0, i32 3, i32 0, i32 1
  %57 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %42, i64 0, i32 3, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %56, align 8
  %59 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %44, i64 0, i32 4
  %60 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %42, i64 0, i32 4
  %61 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %59 to i8*
  %62 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %60 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 5, i1 false) #14
  %63 = load i64, i64* %24, align 8
  %64 = load i64, i64* %25, align 8
  %65 = add i64 %64, -1
  %66 = icmp eq i64 %63, %65
  br i1 %66, label %67, label %68

67:                                               ; preds = %41
  store i64 0, i64* %24, align 8
  br label %71

68:                                               ; preds = %41
  %69 = add i64 %63, 1
  store i64 %69, i64* %24, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68, %67
  br label %72

72:                                               ; preds = %68, %71
  %73 = phi i64 [ %65, %71 ], [ %63, %68 ]
  %74 = call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %23, i64 %73) #14
  %75 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %29, i64 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = icmp ult i64 %28, %76
  br i1 %77, label %82, label %78

78:                                               ; preds = %72
  %79 = sub i64 %28, %76
  %80 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %29, i64 0, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  br label %87

82:                                               ; preds = %72
  %83 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %29, i64 0, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %28, %76
  %86 = add i64 %85, %84
  br label %87

87:                                               ; preds = %78, %82
  %88 = phi i64 [ %81, %78 ], [ %84, %82 ]
  %89 = phi i64 [ %79, %78 ], [ %86, %82 ]
  %90 = add i64 %76, 1
  %91 = add i64 %90, %89
  %92 = urem i64 %91, %88
  %93 = call { %"class.base::circular_deque"*, i64 } @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE5eraseENS_8internal29circular_deque_const_iteratorIS3_EES7_(%"class.base::circular_deque"* %14, %"class.base::circular_deque"* %29, i64 %28, %"class.base::circular_deque"* %29, i64 %92) #14
  %94 = extractvalue { %"class.base::circular_deque"*, i64 } %93, 0
  %95 = extractvalue { %"class.base::circular_deque"*, i64 } %93, 1
  br label %102

96:                                               ; preds = %38
  %97 = add i64 %28, 1
  %98 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %29, i64 0, i32 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = icmp eq i64 %97, %99
  %101 = select i1 %100, i64 0, i64 %97
  br label %102

102:                                              ; preds = %96, %87
  %103 = phi %"class.base::circular_deque"* [ %94, %87 ], [ %29, %96 ]
  %104 = phi i64 [ %95, %87 ], [ %101, %96 ]
  %105 = load i64, i64* %19, align 8
  %106 = icmp eq i64 %104, %105
  br i1 %106, label %26, label %27
}

declare void @_ZN4base8internal11WeakPtrBaseC2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #5

declare void @_ZN4base8internal13WeakReferenceC1ERKS1_(%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"* dereferenceable(8)) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReference4FlagD1Ev(%"class.base::internal::WeakReference::Flag"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

declare i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8*, void (%"class.std::__1::basic_ostream"*, i8*)*) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN7logging15CheckOpValueStrIN3net15RequestPriorityEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*) #7 comdat align 2 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(%"class.std::__1::basic_ostream"* %0, i32 %4) #14
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(%"class.std::__1::basic_ostream"*, i32) local_unnamed_addr #5

declare zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeEmm(%"class.base::circular_deque"*, i64, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = icmp eq i64 %2, %1
  br i1 %4, label %17, label %5

5:                                                ; preds = %3
  %6 = icmp ugt i64 %2, %1
  %7 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  %8 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %7, i64 %1)
  br i1 %6, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %7, i64 %11)
  tail call void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeIS4_Li0EEEvPS4_S7_(%"class.base::internal::VectorBuffer"* %7, %"struct.net::SpdyWriteQueue::PendingWrite"* %8, %"struct.net::SpdyWriteQueue::PendingWrite"* %12)
  %13 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %7, i64 0)
  br label %14

14:                                               ; preds = %5, %9
  %15 = phi %"struct.net::SpdyWriteQueue::PendingWrite"* [ %13, %9 ], [ %8, %5 ]
  %16 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %7, i64 %2)
  tail call void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeIS4_Li0EEEvPS4_S7_(%"class.base::internal::VectorBuffer"* %7, %"struct.net::SpdyWriteQueue::PendingWrite"* %15, %"struct.net::SpdyWriteQueue::PendingWrite"* %16)
  br label %17

17:                                               ; preds = %14, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeIS4_Li0EEEvPS4_S7_(%"class.base::internal::VectorBuffer"*, %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"*) local_unnamed_addr #1 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"struct.net::SpdyWriteQueue::PendingWrite"*, align 8
  %6 = alloca %"struct.net::SpdyWriteQueue::PendingWrite"*, align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  store %"struct.net::SpdyWriteQueue::PendingWrite"* %1, %"struct.net::SpdyWriteQueue::PendingWrite"** %5, align 8
  store %"struct.net::SpdyWriteQueue::PendingWrite"* %2, %"struct.net::SpdyWriteQueue::PendingWrite"** %6, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #14
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt %"struct.net::SpdyWriteQueue::PendingWrite"* %1, %2
  br i1 %12, label %14, label %13

13:                                               ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %25

14:                                               ; preds = %3
  %15 = bitcast %"struct.net::SpdyWriteQueue::PendingWrite"** %5 to i8*
  %16 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %15, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPN3net14SpdyWriteQueue12PendingWriteEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS5_14remove_pointerIS7_E4typeEEE5valueEPcE4typeES9_ENUlRNS5_13basic_ostreamIcNS5_11char_traitsIcEEEEPKvE_8__invokeESK_SM_) #14
  %17 = bitcast %"struct.net::SpdyWriteQueue::PendingWrite"** %6 to i8*
  %18 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %17, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPN3net14SpdyWriteQueue12PendingWriteEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS5_14remove_pointerIS7_E4typeEEE5valueEPcE4typeES9_ENUlRNS5_13basic_ostreamIcNS5_11char_traitsIcEEEEPKvE_8__invokeESK_SM_) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i8* %16, i8* %18) #14
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %20, i8** %10, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %14
  %23 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), i32 110, %"class.logging::CheckOpResult"* nonnull %7) #14
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #14
  br label %25

25:                                               ; preds = %13, %14, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #14
  %26 = load %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"** %5, align 8
  %27 = load %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"** %6, align 8
  %28 = icmp eq %"struct.net::SpdyWriteQueue::PendingWrite"* %26, %27
  br i1 %28, label %45, label %29

29:                                               ; preds = %25, %40
  %30 = phi %"struct.net::SpdyWriteQueue::PendingWrite"* [ %42, %40 ], [ %26, %25 ]
  %31 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %30, i64 0, i32 3, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %31) #14
  %32 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %30, i64 0, i32 2, i32 0, i32 0, i32 0
  %33 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %32, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %32, align 8
  %34 = icmp eq %"class.net::SpdyBufferProducer"* %33, null
  br i1 %34, label %40, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.net::SpdyBufferProducer"* %33 to void (%"class.net::SpdyBufferProducer"*)***
  %37 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %37, i64 2
  %39 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %38, align 8
  call void %39(%"class.net::SpdyBufferProducer"* nonnull %33) #14
  br label %40

40:                                               ; preds = %29, %35
  %41 = load %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"** %5, align 8
  %42 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %41, i64 1
  store %"struct.net::SpdyWriteQueue::PendingWrite"* %42, %"struct.net::SpdyWriteQueue::PendingWrite"** %5, align 8
  %43 = load %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"** %6, align 8
  %44 = icmp eq %"struct.net::SpdyWriteQueue::PendingWrite"* %42, %43
  br i1 %44, label %45, label %29

45:                                               ; preds = %40, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #14
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #14
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %4) #14
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #14
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %23 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 0
  %24 = load %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"** %23, align 8
  %25 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %24, i64 %1
  ret %"struct.net::SpdyWriteQueue::PendingWrite"* %25
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN7logging15CheckOpValueStrIPN3net14SpdyWriteQueue12PendingWriteEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS5_14remove_pointerIS7_E4typeEEE5valueEPcE4typeES9_ENUlRNS5_13basic_ostreamIcNS5_11char_traitsIcEEEEPKvE_8__invokeESK_SM_(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*) #7 comdat align 2 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"* %0, i8* %4) #14
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"*, i8*) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"class.base::internal::VectorBuffer"*
  %5 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %6
  br i1 %9, label %14, label %10

10:                                               ; preds = %2
  %11 = sub i64 %8, %6
  %12 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %19

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %8, %6
  %18 = add i64 %17, %16
  br label %19

19:                                               ; preds = %10, %14
  %20 = phi i64 [ %13, %10 ], [ %16, %14 ]
  %21 = phi i64 [ %11, %10 ], [ %18, %14 ]
  %22 = add i64 %21, %1
  %23 = icmp eq i64 %20, 0
  %24 = add i64 %20, -1
  %25 = select i1 %23, i64 0, i64 %24
  %26 = icmp ult i64 %25, %22
  br i1 %26, label %27, label %49

27:                                               ; preds = %19
  %28 = icmp ugt i64 %22, 3
  %29 = select i1 %28, i64 %22, i64 3
  %30 = lshr i64 %25, 2
  %31 = add i64 %30, %25
  %32 = icmp ult i64 %29, %31
  %33 = select i1 %32, i64 %31, i64 %29
  %34 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #14
  %35 = add i64 %33, 1
  %36 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %35, i64 40) #14
  %37 = extractvalue { i64, i1 } %36, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 16, i1 false) #14
  br i1 %37, label %38, label %39, !prof !3

38:                                               ; preds = %27
  tail call void @llvm.trap() #14
  unreachable

39:                                               ; preds = %27
  %40 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %4, i64 0, i32 1
  %41 = extractvalue { i64, i1 } %36, 0
  %42 = tail call noalias i8* @malloc(i64 %41) #14
  %43 = bitcast <2 x i64>* %3 to i8**
  store i8* %42, i8** %43, align 16
  store i64 %35, i64* %40, align 8
  %44 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE10MoveBufferERNS_8internal12VectorBufferIS3_EEmmPS7_PmSA_(%"class.base::internal::VectorBuffer"* dereferenceable(16) %44, i64 %6, i64 %8, %"class.base::internal::VectorBuffer"* nonnull %4, i64* %5, i64* %7) #14
  %45 = bitcast %"class.base::circular_deque"* %0 to i8**
  %46 = load i8*, i8** %45, align 8
  call void @free(i8* %46) #14
  %47 = load <2 x i64>, <2 x i64>* %3, align 16
  %48 = bitcast %"class.base::circular_deque"* %0 to <2 x i64>*
  store <2 x i64> %47, <2 x i64>* %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #14
  br label %49

49:                                               ; preds = %19, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE10MoveBufferERNS_8internal12VectorBufferIS3_EEmmPS7_PmSA_(%"class.base::internal::VectorBuffer"* dereferenceable(16), i64, i64, %"class.base::internal::VectorBuffer"*, i64*, i64*) local_unnamed_addr #1 comdat align 2 {
  %7 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  store i64 0, i64* %4, align 8
  %9 = icmp ugt i64 %2, %1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %1)
  %12 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %2)
  %13 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 0
  %14 = load %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"** %13, align 8
  tail call void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE9MoveRangeIS4_Li0EEEvPS4_S7_S7_(%"struct.net::SpdyWriteQueue::PendingWrite"* %11, %"struct.net::SpdyWriteQueue::PendingWrite"* %12, %"struct.net::SpdyWriteQueue::PendingWrite"* %14)
  %15 = sub i64 %2, %1
  br label %28

16:                                               ; preds = %6
  %17 = icmp ult i64 %2, %1
  br i1 %17, label %18, label %28

18:                                               ; preds = %16
  %19 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %1)
  %20 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %8)
  %21 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 0
  %22 = load %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"** %21, align 8
  tail call void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE9MoveRangeIS4_Li0EEEvPS4_S7_S7_(%"struct.net::SpdyWriteQueue::PendingWrite"* %19, %"struct.net::SpdyWriteQueue::PendingWrite"* %20, %"struct.net::SpdyWriteQueue::PendingWrite"* %22)
  %23 = sub i64 %8, %1
  %24 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 0)
  %25 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %2)
  %26 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %3, i64 %23)
  tail call void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE9MoveRangeIS4_Li0EEEvPS4_S7_S7_(%"struct.net::SpdyWriteQueue::PendingWrite"* %24, %"struct.net::SpdyWriteQueue::PendingWrite"* %25, %"struct.net::SpdyWriteQueue::PendingWrite"* %26)
  %27 = add i64 %23, %2
  br label %28

28:                                               ; preds = %16, %18, %10
  %29 = phi i64 [ %27, %18 ], [ %15, %10 ], [ 0, %16 ]
  store i64 %29, i64* %5, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #9

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE9MoveRangeIS4_Li0EEEvPS4_S7_S7_(%"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"*) local_unnamed_addr #1 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = ptrtoint %"struct.net::SpdyWriteQueue::PendingWrite"* %0 to i64
  %6 = icmp ult %"struct.net::SpdyWriteQueue::PendingWrite"* %2, %1
  br i1 %6, label %7, label %23

7:                                                ; preds = %3
  %8 = ptrtoint %"struct.net::SpdyWriteQueue::PendingWrite"* %2 to i64
  %9 = ptrtoint %"struct.net::SpdyWriteQueue::PendingWrite"* %1 to i64
  %10 = tail call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %9, i64 %5) #14
  %11 = extractvalue { i64, i1 } %10, 1
  %12 = extractvalue { i64, i1 } %10, 0
  %13 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %8, i64 %12) #14
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = or i1 %11, %14
  br i1 %15, label %16, label %17, !prof !3

16:                                               ; preds = %7
  tail call void @llvm.trap() #14
  unreachable

17:                                               ; preds = %7
  %18 = extractvalue { i64, i1 } %13, 0
  %19 = icmp ugt i64 %18, %5
  br i1 %19, label %20, label %23

20:                                               ; preds = %17
  %21 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.9, i64 0, i64 0)) #14
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #14
  br label %23

23:                                               ; preds = %3, %17, %20
  %24 = icmp eq %"struct.net::SpdyWriteQueue::PendingWrite"* %0, %1
  br i1 %24, label %59, label %25

25:                                               ; preds = %23, %55
  %26 = phi %"struct.net::SpdyWriteQueue::PendingWrite"* [ %57, %55 ], [ %2, %23 ]
  %27 = phi %"struct.net::SpdyWriteQueue::PendingWrite"* [ %56, %55 ], [ %0, %23 ]
  %28 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %26, i64 0, i32 0
  %29 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %27, i64 0, i32 0
  %30 = load i8, i8* %29, align 8
  store i8 %30, i8* %28, align 8
  %31 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %26, i64 0, i32 2
  %32 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %27, i64 0, i32 2
  %33 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  %35 = load i64, i64* %34, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %33, align 8
  %36 = bitcast %"class.std::__1::unique_ptr"* %31 to i64*
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %26, i64 0, i32 3, i32 0, i32 0
  %38 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %27, i64 0, i32 3, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %37, %"class.base::internal::WeakReference"* dereferenceable(8) %38) #14
  %39 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %26, i64 0, i32 3, i32 0, i32 1
  %40 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %27, i64 0, i32 3, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %39, align 8
  %42 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %26, i64 0, i32 4
  %43 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %27, i64 0, i32 4
  %44 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %42 to i8*
  %45 = bitcast %"struct.net::MutableNetworkTrafficAnnotationTag"* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 5, i1 false) #14
  %46 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %27, i64 0, i32 3, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %46) #14
  %47 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %27, i64 0, i32 2, i32 0, i32 0, i32 0
  %48 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %47, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %47, align 8
  %49 = icmp eq %"class.net::SpdyBufferProducer"* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %25
  %51 = bitcast %"class.net::SpdyBufferProducer"* %48 to void (%"class.net::SpdyBufferProducer"*)***
  %52 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %52, i64 2
  %54 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %53, align 8
  call void %54(%"class.net::SpdyBufferProducer"* nonnull %48) #14
  br label %55

55:                                               ; preds = %25, %50
  %56 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %27, i64 1
  %57 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %26, i64 1
  %58 = icmp eq %"struct.net::SpdyWriteQueue::PendingWrite"* %56, %1
  br i1 %58, label %59, label %25

59:                                               ; preds = %55, %23
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #9

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.usub.with.overflow.i64(i64, i64) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE25ShrinkCapacityIfNecessaryEv(%"class.base::circular_deque"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca <2 x i64>, align 16
  %3 = bitcast <2 x i64>* %2 to %"class.base::internal::VectorBuffer"*
  %4 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  %7 = add i64 %5, -1
  %8 = select i1 %6, i64 0, i64 %7
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %43, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, %12
  %16 = sub i64 %14, %12
  %17 = select i1 %15, i64 %5, i64 0
  %18 = add i64 %17, %16
  %19 = sub i64 %8, %18
  %20 = icmp ult i64 %19, %18
  br i1 %20, label %43, label %21

21:                                               ; preds = %10
  %22 = lshr i64 %18, 2
  %23 = add i64 %22, %18
  %24 = icmp ugt i64 %23, 3
  %25 = select i1 %24, i64 %23, i64 3
  %26 = icmp ult i64 %25, %8
  br i1 %26, label %27, label %43

27:                                               ; preds = %21
  %28 = bitcast <2 x i64>* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #14
  %29 = add nuw i64 %25, 1
  %30 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %29, i64 40) #14
  %31 = extractvalue { i64, i1 } %30, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 16, i1 false) #14
  br i1 %31, label %32, label %33, !prof !3

32:                                               ; preds = %27
  tail call void @llvm.trap() #14
  unreachable

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 1
  %35 = extractvalue { i64, i1 } %30, 0
  %36 = tail call noalias i8* @malloc(i64 %35) #14
  %37 = bitcast <2 x i64>* %2 to i8**
  store i8* %36, i8** %37, align 16
  store i64 %29, i64* %34, align 8
  %38 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  call void @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE10MoveBufferERNS_8internal12VectorBufferIS3_EEmmPS7_PmSA_(%"class.base::internal::VectorBuffer"* dereferenceable(16) %38, i64 %12, i64 %14, %"class.base::internal::VectorBuffer"* nonnull %3, i64* %11, i64* %13) #14
  %39 = bitcast %"class.base::circular_deque"* %0 to i8**
  %40 = load i8*, i8** %39, align 8
  call void @free(i8* %40) #14
  %41 = load <2 x i64>, <2 x i64>* %2, align 16
  %42 = bitcast %"class.base::circular_deque"* %0 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #14
  br label %43

43:                                               ; preds = %10, %33, %21, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZNK4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #14
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #14
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), i32 89, %"class.logging::CheckOpResult"* nonnull %4) #14
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #14
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %23 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 0
  %24 = load %"struct.net::SpdyWriteQueue::PendingWrite"*, %"struct.net::SpdyWriteQueue::PendingWrite"** %23, align 8
  %25 = getelementptr inbounds %"struct.net::SpdyWriteQueue::PendingWrite", %"struct.net::SpdyWriteQueue::PendingWrite"* %24, i64 %1
  ret %"struct.net::SpdyWriteQueue::PendingWrite"* %25
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN3net18SpdyBufferProducerENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.79"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.79"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.79"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #16
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #16
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.net::SpdyBufferProducer"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !4

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr"*
  %138 = icmp eq %"class.std::__1::unique_ptr"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.net::SpdyBufferProducer"*, %"class.net::SpdyBufferProducer"** %142, align 8
  store %"class.net::SpdyBufferProducer"* null, %"class.net::SpdyBufferProducer"** %142, align 8
  %144 = icmp eq %"class.net::SpdyBufferProducer"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.net::SpdyBufferProducer"* %143 to void (%"class.net::SpdyBufferProducer"*)***
  %147 = load void (%"class.net::SpdyBufferProducer"*)**, void (%"class.net::SpdyBufferProducer"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %147, i64 2
  %149 = load void (%"class.net::SpdyBufferProducer"*)*, void (%"class.net::SpdyBufferProducer"*)** %148, align 8
  tail call void %149(%"class.net::SpdyBufferProducer"* nonnull %143) #14
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #15
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.base::circular_deque"*, i64 } @_ZN4base14circular_dequeIN3net14SpdyWriteQueue12PendingWriteEE5eraseENS_8internal29circular_deque_const_iteratorIS3_EES7_(%"class.base::circular_deque"*, %"class.base::circular_deque"*, i64, %"class.base::circular_deque"*, i64) local_unnamed_addr #1 comdat align 2 {
  %6 = icmp eq i64 %2, %4
  br i1 %6, label %63, label %7

7:                                                ; preds = %5
  %8 = icmp ult i64 %2, %4
  %9 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  %10 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %2)
  br i1 %8, label %16, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %13)
  tail call void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeIS4_Li0EEEvPS4_S7_(%"class.base::internal::VectorBuffer"* %9, %"struct.net::SpdyWriteQueue::PendingWrite"* %10, %"struct.net::SpdyWriteQueue::PendingWrite"* %14)
  %15 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %9, i64 0)
  br label %16

16:                                               ; preds = %7, %11
  %17 = phi %"struct.net::SpdyWriteQueue::PendingWrite"* [ %15, %11 ], [ %10, %7 ]
  %18 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %4)
  tail call void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE13DestructRangeIS4_Li0EEEvPS4_S7_(%"class.base::internal::VectorBuffer"* %9, %"struct.net::SpdyWriteQueue::PendingWrite"* %17, %"struct.net::SpdyWriteQueue::PendingWrite"* %18)
  %19 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, %2
  br i1 %21, label %22, label %23

22:                                               ; preds = %16
  store i64 %4, i64* %19, align 8
  br label %63

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  br label %27

27:                                               ; preds = %50, %23
  %28 = phi i64 [ %20, %23 ], [ %61, %50 ]
  %29 = phi i64 [ %4, %23 ], [ %57, %50 ]
  %30 = phi i64 [ %2, %23 ], [ %60, %50 ]
  %31 = icmp ult i64 %29, %28
  br i1 %31, label %34, label %32

32:                                               ; preds = %27
  %33 = sub i64 %29, %28
  br label %38

34:                                               ; preds = %27
  %35 = load i64, i64* %26, align 8
  %36 = sub i64 %29, %28
  %37 = add i64 %36, %35
  br label %38

38:                                               ; preds = %34, %32
  %39 = phi i64 [ %33, %32 ], [ %37, %34 ]
  %40 = icmp ult i64 %25, %28
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  %42 = sub i64 %25, %28
  br label %47

43:                                               ; preds = %38
  %44 = load i64, i64* %26, align 8
  %45 = sub i64 %25, %28
  %46 = add i64 %45, %44
  br label %47

47:                                               ; preds = %41, %43
  %48 = phi i64 [ %42, %41 ], [ %46, %43 ]
  %49 = icmp ult i64 %39, %48
  br i1 %49, label %50, label %62

50:                                               ; preds = %47
  %51 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %29)
  %52 = add i64 %29, 1
  %53 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %52)
  %54 = tail call dereferenceable(40) %"struct.net::SpdyWriteQueue::PendingWrite"* @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEEixEm(%"class.base::internal::VectorBuffer"* %9, i64 %30)
  tail call void @_ZN4base8internal12VectorBufferIN3net14SpdyWriteQueue12PendingWriteEE9MoveRangeIS4_Li0EEEvPS4_S7_S7_(%"struct.net::SpdyWriteQueue::PendingWrite"* %51, %"struct.net::SpdyWriteQueue::PendingWrite"* %53, %"struct.net::SpdyWriteQueue::PendingWrite"* %54)
  %55 = load i64, i64* %26, align 8
  %56 = icmp eq i64 %52, %55
  %57 = select i1 %56, i64 0, i64 %52
  %58 = add i64 %30, 1
  %59 = icmp eq i64 %58, %55
  %60 = select i1 %59, i64 0, i64 %58
  %61 = load i64, i64* %19, align 8
  br label %27

62:                                               ; preds = %47
  store i64 %30, i64* %24, align 8
  br label %63

63:                                               ; preds = %5, %62, %22
  %64 = phi i64 [ %4, %22 ], [ %2, %62 ], [ %2, %5 ]
  %65 = insertvalue { %"class.base::circular_deque"*, i64 } undef, %"class.base::circular_deque"* %0, 0
  %66 = insertvalue { %"class.base::circular_deque"*, i64 } %65, i64 %64, 1
  ret { %"class.base::circular_deque"*, i64 } %66
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
