; ModuleID = '../../third_party/libsrtp/crypto/hash/null_auth.c'
source_filename = "../../third_party/libsrtp/crypto/hash/null_auth.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.srtp_auth_test_case_t = type { i32, i8*, i32, i8*, i32, i8*, %struct.srtp_auth_test_case_t* }
%struct.srtp_auth_t = type { %struct.srtp_auth_type_t*, i8*, i32, i32, i32 }
%struct.srtp_auth_type_t = type { {}*, i32 (%struct.srtp_auth_t*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32, i32, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i8*, %struct.srtp_auth_test_case_t*, i32 }
%struct.srtp_debug_module_t = type { i32, i8* }

@srtp_null_auth_description = internal constant [29 x i8] c"null authentication function\00", align 16
@srtp_null_auth_test_case_0 = internal constant %struct.srtp_auth_test_case_t zeroinitializer, align 8
@srtp_null_auth = hidden constant { i32 (%struct.srtp_auth_t**, i32, i32)*, i32 (%struct.srtp_auth_t*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32, i32, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i8*, %struct.srtp_auth_test_case_t*, i32 } { i32 (%struct.srtp_auth_t**, i32, i32)* @srtp_null_auth_alloc, i32 (%struct.srtp_auth_t*)* @srtp_null_auth_dealloc, i32 (i8*, i8*, i32)* @srtp_null_auth_init, i32 (i8*, i8*, i32, i32, i8*)* @srtp_null_auth_compute, i32 (i8*, i8*, i32)* @srtp_null_auth_update, i32 (i8*)* @srtp_null_auth_start, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @srtp_null_auth_description, i32 0, i32 0), %struct.srtp_auth_test_case_t* @srtp_null_auth_test_case_0, i32 0 }, align 8
@srtp_mod_auth = external local_unnamed_addr global %struct.srtp_debug_module_t, align 8
@.str = private unnamed_addr constant [45 x i8] c"%s: allocating auth func with key length %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"%s:                           tag length %d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_null_auth_alloc(%struct.srtp_auth_t** nocapture, i32, i32) #0 {
  %4 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_auth, i64 0, i32 0), align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %3
  %7 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_auth, i64 0, i32 1), align 8
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8* %7, i32 %1) #3
  %8 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_auth, i64 0, i32 0), align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_auth, i64 0, i32 1), align 8
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0), i8* %11, i32 %2) #3
  br label %12

12:                                               ; preds = %3, %6, %10
  %13 = tail call i8* @srtp_crypto_alloc(i64 33) #3
  %14 = icmp eq i8* %13, null
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = bitcast %struct.srtp_auth_t** %0 to i8**
  store i8* %13, i8** %16, align 8
  %17 = bitcast i8* %13 to %struct.srtp_auth_type_t**
  store %struct.srtp_auth_type_t* bitcast ({ i32 (%struct.srtp_auth_t**, i32, i32)*, i32 (%struct.srtp_auth_t*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32, i32, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i8*, %struct.srtp_auth_test_case_t*, i32 }* @srtp_null_auth to %struct.srtp_auth_type_t*), %struct.srtp_auth_type_t** %17, align 8
  %18 = getelementptr inbounds i8, i8* %13, i64 32
  %19 = load %struct.srtp_auth_t*, %struct.srtp_auth_t** %0, align 8
  %20 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %19, i64 0, i32 1
  store i8* %18, i8** %20, align 8
  %21 = load %struct.srtp_auth_t*, %struct.srtp_auth_t** %0, align 8
  %22 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %21, i64 0, i32 2
  store i32 %2, i32* %22, align 8
  %23 = load %struct.srtp_auth_t*, %struct.srtp_auth_t** %0, align 8
  %24 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %23, i64 0, i32 4
  store i32 %2, i32* %24, align 8
  %25 = load %struct.srtp_auth_t*, %struct.srtp_auth_t** %0, align 8
  %26 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %25, i64 0, i32 3
  store i32 %1, i32* %26, align 4
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i32 [ 0, %15 ], [ 3, %12 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_null_auth_dealloc(%struct.srtp_auth_t*) #0 {
  %2 = bitcast %struct.srtp_auth_t* %0 to i8*
  tail call void @octet_string_set_to_zero(i8* %2, i64 33) #3
  tail call void @srtp_crypto_free(i8* %2) #3
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @srtp_null_auth_init(i8* nocapture readnone, i8* nocapture readnone, i32) #1 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @srtp_null_auth_compute(i8* nocapture readnone, i8* nocapture readnone, i32, i32, i8* nocapture readnone) #1 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @srtp_null_auth_update(i8* nocapture readnone, i8* nocapture readnone, i32) #1 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @srtp_null_auth_start(i8* nocapture readnone) #1 {
  ret i32 0
}

declare void @srtp_err_report(i32, i8*, ...) local_unnamed_addr #2

declare i8* @srtp_crypto_alloc(i64) local_unnamed_addr #2

declare void @octet_string_set_to_zero(i8*, i64) local_unnamed_addr #2

declare void @srtp_crypto_free(i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
