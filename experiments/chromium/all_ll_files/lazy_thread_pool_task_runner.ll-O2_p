; ModuleID = '../../base/task/lazy_thread_pool_task_runner.cc'
source_filename = "../../base/task/lazy_thread_pool_task_runner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::ScopedLazyTaskRunnerListForTesting" = type { %"class.base::internal::CheckedLock", %"class.std::__1::vector" }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::OnceCallback"*, %"class.base::OnceCallback"*, %"class.std::__1::__compressed_pair" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.2", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::OnceCallback"* }
%"class.base::internal::LazyThreadPoolTaskRunner" = type { %"class.base::TaskTraits", i32, i64 }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"class.base::internal::LazyThreadPoolTaskRunner.4" = type { %"class.base::TaskTraits", i32, i64 }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE14CreateInternalERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE = comdat any

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE3GetEv = comdat any

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE9CreateRawEPv = comdat any

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEC5ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE = comdat any

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE5ResetEv = comdat any

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE14CreateInternalERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE = comdat any

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE3GetEv = comdat any

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE9CreateRawEPv = comdat any

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEC5ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE = comdat any

$_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE5ResetEv = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZNSt3__16vectorIN4base12OnceCallbackIFvvEEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_ = comdat any

@_ZN4base8internal12_GLOBAL__N_142g_scoped_lazy_task_runner_list_for_testingE = internal unnamed_addr global %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* null, align 8

@_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEC1ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE = weak_odr hidden unnamed_addr alias void (%"class.base::internal::LazyThreadPoolTaskRunner"*, %"class.base::TaskTraits"*, i32), void (%"class.base::internal::LazyThreadPoolTaskRunner"*, %"class.base::TaskTraits"*, i32)* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEC2ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE
@_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEC1ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE = weak_odr hidden unnamed_addr alias void (%"class.base::internal::LazyThreadPoolTaskRunner.4"*, %"class.base::TaskTraits"*, i32), void (%"class.base::internal::LazyThreadPoolTaskRunner.4"*, %"class.base::TaskTraits"*, i32)* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEC2ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE
@_ZN4base8internal34ScopedLazyTaskRunnerListForTestingC1Ev = hidden unnamed_addr alias void (%"class.base::internal::ScopedLazyTaskRunnerListForTesting"*), void (%"class.base::internal::ScopedLazyTaskRunnerListForTesting"*)* @_ZN4base8internal34ScopedLazyTaskRunnerListForTestingC2Ev
@_ZN4base8internal34ScopedLazyTaskRunnerListForTestingD1Ev = hidden unnamed_addr alias void (%"class.base::internal::ScopedLazyTaskRunnerListForTesting"*), void (%"class.base::internal::ScopedLazyTaskRunnerListForTesting"*)* @_ZN4base8internal34ScopedLazyTaskRunnerListForTestingD2Ev

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE14CreateInternalERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::internal::LazyThreadPoolTaskRunner"* noalias sret, %"class.base::TaskTraits"* dereferenceable(15), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 1 %5, i64 9, i1 false) #9
  %6 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 6, i1 false) #9
  %8 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 2
  store i64 0, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden %"class.base::SequencedTaskRunner"* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE3GetEv(%"class.base::internal::LazyThreadPoolTaskRunner"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load atomic i64, i64* %2 acquire, align 8
  %5 = icmp ugt i64 %4, 1
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = inttoptr i64 %4 to %"class.base::SequencedTaskRunner"*
  br label %19

8:                                                ; preds = %1
  %9 = tail call zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64* %2) #9
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = tail call %"class.base::SequencedTaskRunner"* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE9CreateRawEPv(i8* %3) #9
  %12 = ptrtoint %"class.base::SequencedTaskRunner"* %11 to i64
  tail call void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64* %2, i64 %12, void (i8*)* null, i8* null) #9
  br label %15

13:                                               ; preds = %8
  %14 = load atomic i64, i64* %2 acquire, align 8
  br label %15

15:                                               ; preds = %10, %13
  %16 = phi i64 [ %12, %10 ], [ %14, %13 ]
  %17 = inttoptr i64 %16 to %"class.base::SequencedTaskRunner"*
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %6, %15
  %20 = phi %"class.base::SequencedTaskRunner"* [ %7, %6 ], [ %17, %15 ]
  %21 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %20, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 1 monotonic
  br label %23

23:                                               ; preds = %15, %19
  %24 = phi %"class.base::SequencedTaskRunner"* [ %17, %15 ], [ %20, %19 ]
  ret %"class.base::SequencedTaskRunner"* %24
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden %"class.base::SequencedTaskRunner"* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE9CreateRawEPv(i8*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = bitcast i8* %0 to %"class.base::TaskTraits"*
  %4 = tail call %"class.base::SequencedTaskRunner"* @_ZN4base10ThreadPool25CreateSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15) %3) #9
  %5 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %4, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw add i32* %6, i32 1 monotonic
  %8 = load %"class.base::internal::ScopedLazyTaskRunnerListForTesting"*, %"class.base::internal::ScopedLazyTaskRunnerListForTesting"** @_ZN4base8internal12_GLOBAL__N_142g_scoped_lazy_task_runner_list_for_testingE, align 8
  %9 = icmp eq %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %8, null
  br i1 %9, label %42, label %10

10:                                               ; preds = %1
  %11 = ptrtoint i8* %0 to i64
  %12 = tail call i8* @_Znwm(i64 56) #10, !noalias !2
  %13 = bitcast i8* %12 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %13, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE) #9, !noalias !2
  %14 = getelementptr inbounds i8, i8* %12, i64 32
  %15 = bitcast i8* %14 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.base::internal::LazyThreadPoolTaskRunner"*)* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE5ResetEv to i64), i64 0>, <2 x i64>* %15, align 8, !noalias !2
  %16 = getelementptr inbounds i8, i8* %12, i64 48
  %17 = bitcast i8* %16 to i64*
  store i64 %11, i64* %17, align 8, !noalias !2
  %18 = bitcast %"class.base::OnceCallback"* %2 to i8**
  store i8* %12, i8** %18, align 8, !alias.scope !2
  %19 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %19) #9
  %21 = icmp eq i32 %20, 0
  %22 = ptrtoint i8* %12 to i64
  br i1 %21, label %25, label %23, !prof !7

23:                                               ; preds = %10
  %24 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %8, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %24) #9
  br label %25

25:                                               ; preds = %23, %10
  %26 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %8, i64 0, i32 1, i32 0, i32 1
  %27 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %26, align 8
  %28 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %8, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %29 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %28, align 8
  %30 = icmp ult %"class.base::OnceCallback"* %27, %29
  br i1 %30, label %31, label %37

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %33 = bitcast %"class.base::OnceCallback"* %27 to i64*
  store i64 %22, i64* %33, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %32, align 8
  %34 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %27, i64 1
  %35 = ptrtoint %"class.base::OnceCallback"* %34 to i64
  %36 = bitcast %"class.base::OnceCallback"** %26 to i64*
  store i64 %35, i64* %36, align 8
  br label %39

37:                                               ; preds = %25
  %38 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %8, i64 0, i32 1
  call void @_ZNSt3__16vectorIN4base12OnceCallbackIFvvEEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"* %38, %"class.base::OnceCallback"* nonnull dereferenceable(8) %2) #9
  br label %39

39:                                               ; preds = %31, %37
  %40 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %19) #9
  %41 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %41) #9
  br label %42

42:                                               ; preds = %1, %39
  %43 = icmp eq %"class.base::SequencedTaskRunner"* %4, null
  br i1 %43, label %50, label %44

44:                                               ; preds = %42
  %45 = atomicrmw sub i32* %6, i32 1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %50

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %5, i64 -2
  %49 = bitcast %"class.base::RefCountedThreadSafe"* %48 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %49) #9
  br label %50

50:                                               ; preds = %42, %44, %47
  ret %"class.base::SequencedTaskRunner"* %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEC2ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::internal::LazyThreadPoolTaskRunner"*, %"class.base::TaskTraits"* dereferenceable(15), i32) unnamed_addr #0 comdat($_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEC5ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE) align 2 {
  %4 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 9, i1 false) #9
  %6 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 6, i1 false) #9
  %8 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 2
  store i64 0, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE5ResetEv(%"class.base::internal::LazyThreadPoolTaskRunner"*) #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 2
  %3 = load atomic i64, i64* %2 acquire, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = inttoptr i64 %3 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i64 8
  %8 = bitcast i8* %7 to i32*
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = inttoptr i64 %3 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %12) #9
  br label %13

13:                                               ; preds = %5, %11
  store atomic volatile i64 0, i64* %2 monotonic, align 8
  br label %14

14:                                               ; preds = %1, %13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::SequencedTaskRunner"* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EE6CreateEv(%"class.base::internal::LazyThreadPoolTaskRunner"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner", %"class.base::internal::LazyThreadPoolTaskRunner"* %0, i64 0, i32 0
  %3 = tail call %"class.base::SequencedTaskRunner"* @_ZN4base10ThreadPool25CreateSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15) %2) #9
  ret %"class.base::SequencedTaskRunner"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal34ScopedLazyTaskRunnerListForTesting11AddCallbackENS_12OnceCallbackIFvvEEE(%"class.base::internal::ScopedLazyTaskRunnerListForTesting"*, %"class.base::OnceCallback"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !7

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #9
  br label %8

8:                                                ; preds = %2, %6
  %9 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %12 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %11, align 8
  %13 = icmp ult %"class.base::OnceCallback"* %10, %12
  br i1 %13, label %14, label %22

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.base::OnceCallback"* %10 to i64*
  store i64 %17, i64* %18, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %15, align 8
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %10, i64 1
  %20 = ptrtoint %"class.base::OnceCallback"* %19 to i64
  %21 = bitcast %"class.base::OnceCallback"** %9 to i64*
  store i64 %20, i64* %21, align 8
  br label %24

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 1
  tail call void @_ZNSt3__16vectorIN4base12OnceCallbackIFvvEEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"* %23, %"class.base::OnceCallback"* dereferenceable(8) %1) #9
  br label %24

24:                                               ; preds = %14, %22
  %25 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE14CreateInternalERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::internal::LazyThreadPoolTaskRunner.4"* noalias sret, %"class.base::TaskTraits"* dereferenceable(15), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 1 %5, i64 9, i1 false) #9
  %6 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 6, i1 false) #9
  %8 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 2
  store i64 0, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden %"class.base::SingleThreadTaskRunner"* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE3GetEv(%"class.base::internal::LazyThreadPoolTaskRunner.4"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load atomic i64, i64* %2 acquire, align 8
  %5 = icmp ugt i64 %4, 1
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = inttoptr i64 %4 to %"class.base::SingleThreadTaskRunner"*
  br label %19

8:                                                ; preds = %1
  %9 = tail call zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64* %2) #9
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = tail call %"class.base::SingleThreadTaskRunner"* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE9CreateRawEPv(i8* %3) #9
  %12 = ptrtoint %"class.base::SingleThreadTaskRunner"* %11 to i64
  tail call void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64* %2, i64 %12, void (i8*)* null, i8* null) #9
  br label %15

13:                                               ; preds = %8
  %14 = load atomic i64, i64* %2 acquire, align 8
  br label %15

15:                                               ; preds = %10, %13
  %16 = phi i64 [ %12, %10 ], [ %14, %13 ]
  %17 = inttoptr i64 %16 to %"class.base::SingleThreadTaskRunner"*
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %6, %15
  %20 = phi %"class.base::SingleThreadTaskRunner"* [ %7, %6 ], [ %17, %15 ]
  %21 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %20, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 1 monotonic
  br label %23

23:                                               ; preds = %15, %19
  %24 = phi %"class.base::SingleThreadTaskRunner"* [ %17, %15 ], [ %20, %19 ]
  ret %"class.base::SingleThreadTaskRunner"* %24
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden %"class.base::SingleThreadTaskRunner"* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE9CreateRawEPv(i8*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = bitcast i8* %0 to %"class.base::TaskTraits"*
  %4 = getelementptr inbounds i8, i8* %0, i64 16
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = tail call %"class.base::SingleThreadTaskRunner"* @_ZN4base10ThreadPool28CreateSingleThreadTaskRunnerERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::TaskTraits"* dereferenceable(15) %3, i32 %6) #9
  %8 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %7, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 1 monotonic
  %11 = load %"class.base::internal::ScopedLazyTaskRunnerListForTesting"*, %"class.base::internal::ScopedLazyTaskRunnerListForTesting"** @_ZN4base8internal12_GLOBAL__N_142g_scoped_lazy_task_runner_list_for_testingE, align 8
  %12 = icmp eq %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %11, null
  br i1 %12, label %45, label %13

13:                                               ; preds = %1
  %14 = ptrtoint i8* %0 to i64
  %15 = tail call i8* @_Znwm(i64 56) #10, !noalias !8
  %16 = bitcast i8* %15 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %16, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE) #9, !noalias !8
  %17 = getelementptr inbounds i8, i8* %15, i64 32
  %18 = bitcast i8* %17 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.base::internal::LazyThreadPoolTaskRunner.4"*)* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE5ResetEv to i64), i64 0>, <2 x i64>* %18, align 8, !noalias !8
  %19 = getelementptr inbounds i8, i8* %15, i64 48
  %20 = bitcast i8* %19 to i64*
  store i64 %14, i64* %20, align 8, !noalias !8
  %21 = bitcast %"class.base::OnceCallback"* %2 to i8**
  store i8* %15, i8** %21, align 8, !alias.scope !8
  %22 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %22) #9
  %24 = icmp eq i32 %23, 0
  %25 = ptrtoint i8* %15 to i64
  br i1 %24, label %28, label %26, !prof !7

26:                                               ; preds = %13
  %27 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %11, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %27) #9
  br label %28

28:                                               ; preds = %26, %13
  %29 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %11, i64 0, i32 1, i32 0, i32 1
  %30 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %29, align 8
  %31 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %11, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %32 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %31, align 8
  %33 = icmp ult %"class.base::OnceCallback"* %30, %32
  br i1 %33, label %34, label %40

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.base::OnceCallback"* %30 to i64*
  store i64 %25, i64* %36, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %35, align 8
  %37 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %30, i64 1
  %38 = ptrtoint %"class.base::OnceCallback"* %37 to i64
  %39 = bitcast %"class.base::OnceCallback"** %29 to i64*
  store i64 %38, i64* %39, align 8
  br label %42

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %11, i64 0, i32 1
  call void @_ZNSt3__16vectorIN4base12OnceCallbackIFvvEEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"* %41, %"class.base::OnceCallback"* nonnull dereferenceable(8) %2) #9
  br label %42

42:                                               ; preds = %34, %40
  %43 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %22) #9
  %44 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %44) #9
  br label %45

45:                                               ; preds = %1, %42
  %46 = icmp eq %"class.base::SingleThreadTaskRunner"* %7, null
  br i1 %46, label %53, label %47

47:                                               ; preds = %45
  %48 = atomicrmw sub i32* %9, i32 1 acq_rel
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %50, label %53

50:                                               ; preds = %47
  %51 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %8, i64 -2
  %52 = bitcast %"class.base::RefCountedThreadSafe"* %51 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %52) #9
  br label %53

53:                                               ; preds = %45, %47, %50
  ret %"class.base::SingleThreadTaskRunner"* %7
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEC2ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::internal::LazyThreadPoolTaskRunner.4"*, %"class.base::TaskTraits"* dereferenceable(15), i32) unnamed_addr #0 comdat($_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEC5ERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE) align 2 {
  %4 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 9, i1 false) #9
  %6 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 6, i1 false) #9
  %8 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 2
  store i64 0, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE5ResetEv(%"class.base::internal::LazyThreadPoolTaskRunner.4"*) #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 2
  %3 = load atomic i64, i64* %2 acquire, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = inttoptr i64 %3 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i64 8
  %8 = bitcast i8* %7 to i32*
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = inttoptr i64 %3 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %12) #9
  br label %13

13:                                               ; preds = %5, %11
  store atomic volatile i64 0, i64* %2 monotonic, align 8
  br label %14

14:                                               ; preds = %1, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::SingleThreadTaskRunner"* @_ZN4base8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EE6CreateEv(%"class.base::internal::LazyThreadPoolTaskRunner.4"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.base::internal::LazyThreadPoolTaskRunner.4", %"class.base::internal::LazyThreadPoolTaskRunner.4"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = tail call %"class.base::SingleThreadTaskRunner"* @_ZN4base10ThreadPool28CreateSingleThreadTaskRunnerERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::TaskTraits"* dereferenceable(15) %2, i32 %4) #9
  ret %"class.base::SingleThreadTaskRunner"* %5
}

declare %"class.base::SequencedTaskRunner"* @_ZN4base10ThreadPool25CreateSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15)) local_unnamed_addr #3

declare %"class.base::SingleThreadTaskRunner"* @_ZN4base10ThreadPool28CreateSingleThreadTaskRunnerERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::TaskTraits"* dereferenceable(15), i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal34ScopedLazyTaskRunnerListForTestingC2Ev(%"class.base::internal::ScopedLazyTaskRunnerListForTesting"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %2) #9
  %3 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #9
  store %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, %"class.base::internal::ScopedLazyTaskRunnerListForTesting"** @_ZN4base8internal12_GLOBAL__N_142g_scoped_lazy_task_runner_list_for_testingE, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal34ScopedLazyTaskRunnerListForTestingD2Ev(%"class.base::internal::ScopedLazyTaskRunnerListForTesting"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !7

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %11 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %10, align 8
  %12 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %12, align 8
  %14 = icmp eq %"class.base::OnceCallback"* %11, %13
  br i1 %14, label %19, label %15

15:                                               ; preds = %8
  %16 = bitcast %"class.base::OnceCallback"* %2 to i8*
  %17 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %18 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  br label %39

19:                                               ; preds = %39, %8
  store %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* null, %"class.base::internal::ScopedLazyTaskRunnerListForTesting"** @_ZN4base8internal12_GLOBAL__N_142g_scoped_lazy_task_runner_list_for_testingE, align 8
  %20 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #9
  %21 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %10, align 8
  %22 = icmp eq %"class.base::OnceCallback"* %21, null
  br i1 %22, label %37, label %23

23:                                               ; preds = %19
  %24 = bitcast %"class.base::OnceCallback"* %21 to i8*
  %25 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %12, align 8
  %26 = icmp eq %"class.base::OnceCallback"* %25, %21
  br i1 %26, label %35, label %27

27:                                               ; preds = %23, %27
  %28 = phi %"class.base::OnceCallback"* [ %29, %27 ], [ %25, %23 ]
  %29 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %28, i64 -1
  %30 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %29, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %30) #9
  %31 = icmp eq %"class.base::OnceCallback"* %29, %21
  br i1 %31, label %32, label %27

32:                                               ; preds = %27
  %33 = bitcast %"class.std::__1::vector"* %9 to i8**
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %32, %23
  %36 = phi i8* [ %34, %32 ], [ %24, %23 ]
  store %"class.base::OnceCallback"* %21, %"class.base::OnceCallback"** %12, align 8
  call void @_ZdlPv(i8* %36) #10
  br label %37

37:                                               ; preds = %19, %35
  %38 = getelementptr inbounds %"class.base::internal::ScopedLazyTaskRunnerListForTesting", %"class.base::internal::ScopedLazyTaskRunnerListForTesting"* %0, i64 0, i32 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %38) #9
  ret void

39:                                               ; preds = %15, %39
  %40 = phi %"class.base::OnceCallback"* [ %11, %15 ], [ %48, %39 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %41 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = bitcast %"class.base::OnceCallback"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %17, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %41, align 8
  %44 = inttoptr i64 %43 to %"class.base::internal::BindStateBase"*
  %45 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %44, i64 0, i32 1
  %46 = bitcast void ()** %45 to void (%"class.base::internal::BindStateBase"*)**
  %47 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %46, align 8
  call void %47(%"class.base::internal::BindStateBase"* %44) #9
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  %48 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %40, i64 1
  %49 = icmp eq %"class.base::OnceCallback"* %48, %13
  br i1 %49, label %19, label %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #2

declare zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64*) local_unnamed_addr #3

declare void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64*, i64, void (i8*)*, i8*) local_unnamed_addr #3

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %9 = bitcast void ()** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 %10
  %12 = bitcast i8* %11 to %"class.base::internal::LazyThreadPoolTaskRunner"*
  %13 = and i64 %7, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = bitcast i8* %11 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = add i64 %7, -1
  %19 = getelementptr i8, i8* %17, i64 %18
  %20 = bitcast i8* %19 to void (%"class.base::internal::LazyThreadPoolTaskRunner"*)**
  %21 = load void (%"class.base::internal::LazyThreadPoolTaskRunner"*)*, void (%"class.base::internal::LazyThreadPoolTaskRunner"*)** %20, align 8
  br label %24

22:                                               ; preds = %1
  %23 = inttoptr i64 %7 to void (%"class.base::internal::LazyThreadPoolTaskRunner"*)*
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi void (%"class.base::internal::LazyThreadPoolTaskRunner"*)* [ %21, %15 ], [ %23, %22 ]
  tail call void %25(%"class.base::internal::LazyThreadPoolTaskRunner"* %12) #9
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #10
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %9 = bitcast void ()** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 %10
  %12 = bitcast i8* %11 to %"class.base::internal::LazyThreadPoolTaskRunner.4"*
  %13 = and i64 %7, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = bitcast i8* %11 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = add i64 %7, -1
  %19 = getelementptr i8, i8* %17, i64 %18
  %20 = bitcast i8* %19 to void (%"class.base::internal::LazyThreadPoolTaskRunner.4"*)**
  %21 = load void (%"class.base::internal::LazyThreadPoolTaskRunner.4"*)*, void (%"class.base::internal::LazyThreadPoolTaskRunner.4"*)** %20, align 8
  br label %24

22:                                               ; preds = %1
  %23 = inttoptr i64 %7 to void (%"class.base::internal::LazyThreadPoolTaskRunner.4"*)*
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi void (%"class.base::internal::LazyThreadPoolTaskRunner.4"*)* [ %21, %15 ], [ %23, %22 ]
  tail call void %25(%"class.base::internal::LazyThreadPoolTaskRunner.4"* %12) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMNS0_24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS4_EEEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #10
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4base12OnceCallbackIFvvEEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"*, %"class.base::OnceCallback"* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.base::OnceCallback"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"class.base::OnceCallback"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.base::OnceCallback"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %36, i64 %9
  %38 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %36, i64 %35
  %39 = ptrtoint %"class.base::OnceCallback"* %38 to i64
  %40 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.base::OnceCallback"* %37 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %40, align 8
  %44 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %37, i64 1
  %45 = ptrtoint %"class.base::OnceCallback"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %46, align 8
  %48 = ptrtoint %"class.base::OnceCallback"* %47 to i64
  %49 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %3, align 8
  %50 = icmp eq %"class.base::OnceCallback"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.base::OnceCallback", %"class.base::OnceCallback"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.base::internal::BindStateBase"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.base::OnceCallback"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.base::OnceCallback"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %60, i64 -1
  %64 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %61, i64 -1
  %65 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.base::OnceCallback"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.base::OnceCallback"* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %65, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !13

71:                                               ; preds = %59, %51
  %72 = phi %"class.base::OnceCallback"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.base::OnceCallback"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.base::OnceCallback"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.base::OnceCallback"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.base::OnceCallback"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %77, i64 -1
  %80 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 -1
  %81 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.base::OnceCallback"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.base::OnceCallback"* %79 to i64*
  store i64 %83, i64* %84, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %81, align 8
  %85 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %77, i64 -2
  %86 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 -2
  %87 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.base::OnceCallback"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %"class.base::OnceCallback"* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %87, align 8
  %91 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %77, i64 -3
  %92 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 -3
  %93 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.base::OnceCallback"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.base::OnceCallback"* %91 to i64*
  store i64 %95, i64* %96, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %93, align 8
  %97 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %77, i64 -4
  %98 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 -4
  %99 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.base::OnceCallback"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"class.base::OnceCallback"* %97 to i64*
  store i64 %101, i64* %102, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %99, align 8
  %103 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %77, i64 -5
  %104 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 -5
  %105 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.base::OnceCallback"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.base::OnceCallback"* %103 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %105, align 8
  %109 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %77, i64 -6
  %110 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 -6
  %111 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.base::OnceCallback"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.base::OnceCallback"* %109 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %111, align 8
  %115 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %77, i64 -7
  %116 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 -7
  %117 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.base::OnceCallback"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.base::OnceCallback"* %115 to i64*
  store i64 %119, i64* %120, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %117, align 8
  %121 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %77, i64 -8
  %122 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 -8
  %123 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.base::OnceCallback"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %"class.base::OnceCallback"* %121 to i64*
  store i64 %125, i64* %126, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %123, align 8
  %127 = icmp eq %"class.base::OnceCallback"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.base::OnceCallback"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.base::OnceCallback"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.base::OnceCallback"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.base::OnceCallback"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.base::OnceCallback"*
  %138 = icmp eq %"class.base::OnceCallback"* %133, %137
  br i1 %138, label %144, label %139

139:                                              ; preds = %132, %139
  %140 = phi %"class.base::OnceCallback"* [ %141, %139 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %140, i64 -1
  %142 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %141, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %142) #9
  %143 = icmp eq %"class.base::OnceCallback"* %141, %137
  br i1 %143, label %144, label %139

144:                                              ; preds = %139, %132
  %145 = icmp eq i64 %135, 0
  br i1 %145, label %148, label %146

146:                                              ; preds = %144
  %147 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %147) #10
  br label %148

148:                                              ; preds = %144, %146
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS0_24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS0_24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base8BindOnceIMNS_8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS1_17UnretainedWrapperIS4_EEEEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8BindOnceIMNS_8internal24LazyThreadPoolTaskRunnerINS_19SequencedTaskRunnerELb0EEEFvvEJNS1_17UnretainedWrapperIS4_EEEEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!7 = !{!"branch_weights", i32 2000, i32 1}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS0_24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEDcOT0_DpOT1_: argument 0"}
!10 = distinct !{!10, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMNS0_24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS0_17UnretainedWrapperIS5_EEEEEDcOT0_DpOT1_"}
!11 = distinct !{!11, !12, !"_ZN4base8BindOnceIMNS_8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS1_17UnretainedWrapperIS4_EEEEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!12 = distinct !{!12, !"_ZN4base8BindOnceIMNS_8internal24LazyThreadPoolTaskRunnerINS_22SingleThreadTaskRunnerELb0EEEFvvEJNS1_17UnretainedWrapperIS4_EEEEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
