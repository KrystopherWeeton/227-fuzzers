; ModuleID = '../../third_party/libjxl/src/lib/jxl/butteraugli_wrapper.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/butteraugli_wrapper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.8" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%struct.JxlButteraugliApiStruct = type { float, float, float, i8, %struct.JxlMemoryManagerStruct, %"class.std::__1::unique_ptr" }
%struct.JxlMemoryManagerStruct = type { i8*, i8* (i8*, i64)*, void (i8*, i8*)* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.jxl::ThreadPool"* }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%struct.JxlButteraugliResultStruct = type { %struct.JxlMemoryManagerStruct, %"class.jxl::Plane", %"struct.jxl::ButteraugliParams" }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr.1" }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%struct.JxlPixelFormat = type { i32, i32, i32, i64 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.13", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.91", i64 }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.16", %"class.std::__1::vector.29", %"class.std::__1::vector.16", %"class.std::__1::vector.36", %"class.std::__1::vector.43", %"class.std::__1::vector.52", %"class.std::__1::vector.66", %"class.std::__1::vector.18", %"class.std::__1::vector.16", %"class.std::__1::vector.18", i32, i8, %"class.std::__1::vector.18" }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i32*, i32*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i32* }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.38" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.47" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.45", %"struct.std::__1::array.46", i32, i8, [3 x i8] }>
%"struct.std::__1::array.45" = type { [17 x i32] }
%"struct.std::__1::array.46" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.61" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.54" }
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { i16*, i16*, %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i16* }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.83" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.68", i32, %"class.std::__1::vector.69", %"class.std::__1::vector.76" }
%"struct.std::__1::array.68" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { i32*, i32*, %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { i32* }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.78" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.std::__1::vector.18"*, %"class.std::__1::vector.18"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::vector.18"* }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { i8*, i8*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.jxl::Plane"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN3jxl11ImageBundleD2Ev = comdat any

@__const.JxlButteraugliCompute.dist_metadata = private unnamed_addr constant <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }> <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"struct.jxl::BitDepth" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr.1" { %"class.std::__1::__compressed_pair.2" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::ToneMapping" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector" { %"class.std::__1::__vector_base" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"class.std::__1::__compressed_pair.8" { %"struct.std::__1::__compressed_pair_elem.9" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*) } } } }, %"struct.jxl::CustomTransformData" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"struct.jxl::OpsinInverseMatrix" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [15 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [55 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [210 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::AnimationHeader" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }>, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, align 8
@_ZTVN3jxl13ImageMetadataE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@switch.table.JxlButteraugliCompute.3 = private unnamed_addr constant [6 x i32] [i32 32, i32 2, i32 8, i32 16, i32 32, i32 16], align 4
@switch.table.JxlButteraugliCompute.4 = private unnamed_addr constant [6 x i32] [i32 8, i32 0, i32 0, i32 0, i32 0, i32 5], align 4
@switch.table.JxlButteraugliCompute.5 = private unnamed_addr constant [6 x i32] [i32 16, i32 2, i32 8, i32 16, i32 16, i32 16], align 4

; Function Attrs: nounwind ssp uwtable
define hidden %struct.JxlButteraugliApiStruct* @JxlButteraugliApiCreate(%struct.JxlMemoryManagerStruct* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct.JxlMemoryManagerStruct* %0, null
  br i1 %2, label %16, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.JxlMemoryManagerStruct, %struct.JxlMemoryManagerStruct* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.JxlMemoryManagerStruct, %struct.JxlMemoryManagerStruct* %0, i64 0, i32 1
  %7 = load i8* (i8*, i64)*, i8* (i8*, i64)** %6, align 8
  %8 = getelementptr inbounds %struct.JxlMemoryManagerStruct, %struct.JxlMemoryManagerStruct* %0, i64 0, i32 2
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %10 = icmp ne i8* (i8*, i64)* %7, null
  %11 = icmp eq void (i8*, i8*)* %9, null
  %12 = xor i1 %10, true
  %13 = xor i1 %11, %12
  br i1 %13, label %41, label %14

14:                                               ; preds = %3
  %15 = select i1 %10, i8* (i8*, i64)* %7, i8* (i8*, i64)* @_ZN3jxl25MemoryManagerDefaultAllocEPvm
  br i1 %11, label %16, label %19

16:                                               ; preds = %14, %1
  %17 = phi i8* (i8*, i64)* [ @_ZN3jxl25MemoryManagerDefaultAllocEPvm, %1 ], [ %15, %14 ]
  %18 = phi i8* [ null, %1 ], [ %5, %14 ]
  br label %19

19:                                               ; preds = %14, %16
  %20 = phi i8* (i8*, i64)* [ %17, %16 ], [ %15, %14 ]
  %21 = phi void (i8*, i8*)* [ @_ZN3jxl24MemoryManagerDefaultFreeEPvS0_, %16 ], [ %9, %14 ]
  %22 = phi i8* [ %18, %16 ], [ %5, %14 ]
  %23 = tail call i8* %20(i8* %22, i64 48) #7
  %24 = icmp eq i8* %23, null
  br i1 %24, label %41, label %25

25:                                               ; preds = %19
  %26 = bitcast i8* %23 to %struct.JxlButteraugliApiStruct*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 16, i1 false)
  %27 = bitcast i8* %23 to float*
  store float 1.000000e+00, float* %27, align 8
  %28 = getelementptr inbounds i8, i8* %23, i64 4
  %29 = bitcast i8* %28 to float*
  store float 1.000000e+00, float* %29, align 4
  %30 = getelementptr inbounds i8, i8* %23, i64 8
  %31 = bitcast i8* %30 to float*
  store float 2.550000e+02, float* %31, align 8
  %32 = getelementptr inbounds i8, i8* %23, i64 12
  store i8 0, i8* %32, align 4
  %33 = getelementptr inbounds i8, i8* %23, i64 40
  %34 = bitcast i8* %33 to i64*
  store i64 0, i64* %34, align 8
  %35 = getelementptr inbounds i8, i8* %23, i64 16
  %36 = bitcast i8* %35 to i8**
  store i8* %22, i8** %36, align 8
  %37 = getelementptr inbounds i8, i8* %23, i64 24
  %38 = bitcast i8* %37 to i8* (i8*, i64)**
  store i8* (i8*, i64)* %20, i8* (i8*, i64)** %38, align 8
  %39 = getelementptr inbounds i8, i8* %23, i64 32
  %40 = bitcast i8* %39 to void (i8*, i8*)**
  store void (i8*, i8*)* %21, void (i8*, i8*)** %40, align 8
  br label %41

41:                                               ; preds = %3, %25, %19
  %42 = phi %struct.JxlButteraugliApiStruct* [ %26, %25 ], [ null, %19 ], [ null, %3 ]
  ret %struct.JxlButteraugliApiStruct* %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @JxlButteraugliApiSetParallelRunner(%struct.JxlButteraugliApiStruct* nocapture, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8*) local_unnamed_addr #0 {
  %4 = tail call i8* @_Znwm(i64 16) #8
  %5 = bitcast i8* %4 to i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)**
  %6 = icmp ne i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* %1, null
  %7 = select i1 %6, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* %1, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* %7, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %5, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  %9 = bitcast i8* %8 to i8**
  %10 = select i1 %6, i8* %2, i8* %4
  store i8* %10, i8** %9, align 8
  %11 = ptrtoint i8* %4 to i64
  %12 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 5
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %13, align 8
  %15 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %11, i64* %15, align 8
  %16 = icmp eq %"class.jxl::ThreadPool"* %14, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %3
  %18 = bitcast %"class.jxl::ThreadPool"* %14 to i8*
  tail call void @_ZdlPv(i8* %18) #8
  br label %19

19:                                               ; preds = %17, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @JxlButteraugliApiSetHFAsymmetry(%struct.JxlButteraugliApiStruct* nocapture, float) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 0
  store float %1, float* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @JxlButteraugliApiSetIntensityTarget(%struct.JxlButteraugliApiStruct* nocapture, float) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 2
  store float %1, float* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @JxlButteraugliApiDestroy(%struct.JxlButteraugliApiStruct*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.JxlButteraugliApiStruct* %0, null
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %5 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %4, align 8
  store %"class.jxl::ThreadPool"* null, %"class.jxl::ThreadPool"** %4, align 8
  %6 = icmp eq %"class.jxl::ThreadPool"* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = bitcast %"class.jxl::ThreadPool"* %5 to i8*
  tail call void @_ZdlPv(i8* %8) #8
  br label %9

9:                                                ; preds = %3, %7
  %10 = bitcast %struct.JxlButteraugliApiStruct* %0 to i8*
  %11 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 4, i32 2
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %11, align 8
  %13 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 4, i32 0
  %14 = load i8*, i8** %13, align 8
  tail call void %12(i8* %14, i8* nonnull %10) #7
  br label %15

15:                                               ; preds = %1, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.JxlButteraugliResultStruct* @JxlButteraugliCompute(%struct.JxlButteraugliApiStruct* nocapture readonly, i32, i32, %struct.JxlPixelFormat*, i8*, i64, %struct.JxlPixelFormat*, i8*, i64) local_unnamed_addr #0 {
  %10 = alloca %"struct.jxl::ImageMetadata", align 8
  %11 = alloca %"class.jxl::ImageBundle", align 8
  %12 = alloca %"struct.jxl::ColorEncoding", align 8
  %13 = alloca %"struct.jxl::ImageMetadata", align 8
  %14 = alloca %"class.jxl::ImageBundle", align 8
  %15 = bitcast %"struct.jxl::ImageMetadata"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1600, i8* nonnull %15) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %15, i8* align 8 bitcast (<{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>* @__const.JxlButteraugliCompute.dist_metadata to i8*), i64 1600, i1 false)
  call void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"* nonnull %10) #7
  %16 = getelementptr inbounds %struct.JxlPixelFormat, %struct.JxlPixelFormat* %3, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %17, 6
  br i1 %18, label %19, label %36

19:                                               ; preds = %9
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.JxlButteraugliCompute.3, i64 0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = sext i32 %17 to i64
  %24 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.JxlButteraugliCompute.4, i64 0, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %17 to i48
  %27 = shl nuw nsw i48 %26, 3
  %28 = lshr i48 1099511627777, %27
  %29 = trunc i48 %28 to i8
  %30 = sext i32 %17 to i64
  %31 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.JxlButteraugliCompute.5, i64 0, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 3, i32 3
  store i32 %22, i32* %33, align 4
  %34 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 3, i32 4
  store i32 %25, i32* %34, align 8
  %35 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 3, i32 1
  store i8 %29, i8* %35, align 8
  br label %36

36:                                               ; preds = %9, %19
  %37 = phi i32 [ 0, %9 ], [ %32, %19 ]
  %38 = getelementptr inbounds %struct.JxlPixelFormat, %struct.JxlPixelFormat* %3, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  switch i32 %39, label %41 [
    i32 2, label %40
    i32 4, label %40
  ]

40:                                               ; preds = %36, %36
  call void @_ZN3jxl13ImageMetadata12SetAlphaBitsEjb(%"struct.jxl::ImageMetadata"* nonnull %10, i32 %37, i1 zeroext false) #7
  br label %41

41:                                               ; preds = %36, %40
  %42 = bitcast %"class.jxl::ImageBundle"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %42) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 -86, i64 368, i1 false)
  %43 = bitcast %"class.jxl::ImageBundle"* %11 to i64*
  store i64 0, i64* %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 0, i32 1
  store i32 1, i32* %44, align 8
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %45) #7
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 0, i32 4, i32 0
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 24, i1 false) #7
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 0, i32 9
  %50 = bitcast i32* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 14, i1 false) #7
  store %"struct.jxl::ImageMetadata"* %10, %"struct.jxl::ImageMetadata"** %49, align 8
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 0, i32 10
  %52 = bitcast %"class.jxl::Image3"* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 96, i1 false) #7
  %53 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %53) #7
  %54 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %11, i64 0, i32 12
  %55 = bitcast %"class.std::__1::vector.91"* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 32, i1 false) #7
  %56 = bitcast %"struct.jxl::ColorEncoding"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %56) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 -86, i64 152, i1 false)
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* nonnull %12) #7
  %57 = load i32, i32* %16, align 4
  %58 = icmp eq i32 %57, 0
  %59 = load i32, i32* %38, align 8
  %60 = icmp ult i32 %59, 3
  br i1 %58, label %61, label %89

61:                                               ; preds = %41
  %62 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %60) #7
  %63 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 1
  %64 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %62, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 12, i1 false) #7
  %65 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 4, i32 1
  %66 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %62, i64 0, i32 4, i32 1
  %67 = bitcast i32* %65 to i8*
  %68 = bitcast i32* %66 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #7
  %69 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 5
  %70 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %62, i64 0, i32 5
  %71 = bitcast i32* %69 to i8*
  %72 = bitcast i32* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 6, i1 false) #7
  %73 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8
  %74 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %62, i64 0, i32 8, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %77, %75
  br i1 %78, label %79, label %80

79:                                               ; preds = %61
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %73, i64 %75) #7
  br label %80

80:                                               ; preds = %79, %61
  %81 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = icmp eq i8* %82, null
  %84 = select i1 %83, i64 0, i64 %75
  %85 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %73, i64 0, i32 0
  store i64 %84, i64* %85, align 8
  br i1 %83, label %117, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %62, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %88 = load i8*, i8** %87, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %82, i8* align 1 %88, i64 %84, i1 false) #7
  br label %117

89:                                               ; preds = %41
  %90 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %60) #7
  %91 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 1
  %92 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %90, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 12, i1 false) #7
  %93 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 4, i32 1
  %94 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %90, i64 0, i32 4, i32 1
  %95 = bitcast i32* %93 to i8*
  %96 = bitcast i32* %94 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 16, i1 false) #7
  %97 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 5
  %98 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %90, i64 0, i32 5
  %99 = bitcast i32* %97 to i8*
  %100 = bitcast i32* %98 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 6, i1 false) #7
  %101 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8
  %102 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %90, i64 0, i32 8, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = icmp ult i64 %105, %103
  br i1 %106, label %107, label %108

107:                                              ; preds = %89
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %101, i64 %103) #7
  br label %108

108:                                              ; preds = %107, %89
  %109 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = icmp eq i8* %110, null
  %112 = select i1 %111, i64 0, i64 %103
  %113 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %101, i64 0, i32 0
  store i64 %112, i64* %113, align 8
  br i1 %111, label %117, label %114

114:                                              ; preds = %108
  %115 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %90, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %110, i8* align 1 %116, i64 %112, i1 false) #7
  br label %117

117:                                              ; preds = %114, %108, %86, %80
  %118 = phi %"struct.jxl::ColorEncoding"* [ %62, %80 ], [ %62, %86 ], [ %90, %108 ], [ %90, %114 ]
  %119 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %118, i64 0, i32 9
  %120 = load i32, i32* %119, align 8
  %121 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 9
  store i32 %120, i32* %121, align 8
  %122 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 10, i32 1
  %123 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %118, i64 0, i32 10, i32 1
  %124 = bitcast i32* %123 to i64*
  %125 = bitcast i32* %122 to i64*
  %126 = load i64, i64* %124, align 8
  store i64 %126, i64* %125, align 8
  %127 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 11, i32 1
  %128 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %118, i64 0, i32 11, i32 1
  %129 = bitcast i32* %128 to i64*
  %130 = bitcast i32* %127 to i64*
  %131 = load i64, i64* %129, align 8
  store i64 %131, i64* %130, align 8
  %132 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 12, i32 1
  %133 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %118, i64 0, i32 12, i32 1
  %134 = bitcast i32* %133 to i64*
  %135 = bitcast i32* %132 to i64*
  %136 = load i64, i64* %134, align 8
  store i64 %136, i64* %135, align 8
  %137 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 13, i32 1
  %138 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %118, i64 0, i32 13, i32 1
  %139 = bitcast i32* %138 to i64*
  %140 = bitcast i32* %137 to i64*
  %141 = load i64, i64* %139, align 8
  store i64 %141, i64* %140, align 8
  %142 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %143 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %142, align 8
  %144 = call i32 @_ZN3jxl19BufferToImageBundleERK14JxlPixelFormatjjPKvmPNS_10ThreadPoolERKNS_13ColorEncodingEPNS_11ImageBundleE(%struct.JxlPixelFormat* dereferenceable(24) %3, i32 %1, i32 %2, i8* %4, i64 %5, %"class.jxl::ThreadPool"* %143, %"struct.jxl::ColorEncoding"* nonnull dereferenceable(152) %12, %"class.jxl::ImageBundle"* nonnull %11) #7
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %343

146:                                              ; preds = %117
  %147 = bitcast %"struct.jxl::ImageMetadata"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1600, i8* nonnull %147) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %147, i8* align 8 bitcast (<{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>* @__const.JxlButteraugliCompute.dist_metadata to i8*), i64 1600, i1 false)
  call void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"* nonnull %13) #7
  %148 = getelementptr inbounds %struct.JxlPixelFormat, %struct.JxlPixelFormat* %6, i64 0, i32 1
  %149 = load i32, i32* %148, align 4
  %150 = icmp ult i32 %149, 6
  br i1 %150, label %151, label %168

151:                                              ; preds = %146
  %152 = sext i32 %149 to i64
  %153 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.JxlButteraugliCompute.3, i64 0, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = sext i32 %149 to i64
  %156 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.JxlButteraugliCompute.4, i64 0, i64 %155
  %157 = load i32, i32* %156, align 4
  %158 = zext i32 %149 to i48
  %159 = shl nuw nsw i48 %158, 3
  %160 = lshr i48 1099511627777, %159
  %161 = trunc i48 %160 to i8
  %162 = sext i32 %149 to i64
  %163 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.JxlButteraugliCompute.5, i64 0, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %13, i64 0, i32 3, i32 3
  store i32 %154, i32* %165, align 4
  %166 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %13, i64 0, i32 3, i32 4
  store i32 %157, i32* %166, align 8
  %167 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %13, i64 0, i32 3, i32 1
  store i8 %161, i8* %167, align 8
  br label %168

168:                                              ; preds = %146, %151
  %169 = phi i32 [ 0, %146 ], [ %164, %151 ]
  %170 = getelementptr inbounds %struct.JxlPixelFormat, %struct.JxlPixelFormat* %6, i64 0, i32 0
  %171 = load i32, i32* %170, align 8
  switch i32 %171, label %173 [
    i32 2, label %172
    i32 4, label %172
  ]

172:                                              ; preds = %168, %168
  call void @_ZN3jxl13ImageMetadata12SetAlphaBitsEjb(%"struct.jxl::ImageMetadata"* nonnull %13, i32 %169, i1 zeroext false) #7
  br label %173

173:                                              ; preds = %168, %172
  %174 = bitcast %"class.jxl::ImageBundle"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %174) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %174, i8 -86, i64 368, i1 false)
  %175 = bitcast %"class.jxl::ImageBundle"* %14 to i64*
  store i64 0, i64* %175, align 8
  %176 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %14, i64 0, i32 1
  store i32 1, i32* %176, align 8
  %177 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %14, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %177) #7
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %14, i64 0, i32 4, i32 0
  %179 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %14, i64 0, i32 8
  %180 = bitcast %"class.std::__1::basic_string"* %179 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %180, i8 0, i64 24, i1 false) #7
  %181 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %14, i64 0, i32 9
  %182 = bitcast i32* %178 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %182, i8 0, i64 14, i1 false) #7
  store %"struct.jxl::ImageMetadata"* %13, %"struct.jxl::ImageMetadata"** %181, align 8
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %14, i64 0, i32 10
  %184 = bitcast %"class.jxl::Image3"* %183 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 96, i1 false) #7
  %185 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %14, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %185) #7
  %186 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %14, i64 0, i32 12
  %187 = bitcast %"class.std::__1::vector.91"* %186 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %187, i8 0, i64 32, i1 false) #7
  %188 = load i32, i32* %148, align 4
  %189 = icmp eq i32 %188, 0
  %190 = load i32, i32* %170, align 8
  %191 = icmp ult i32 %190, 3
  br i1 %189, label %192, label %220

192:                                              ; preds = %173
  %193 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %191) #7
  %194 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 1
  %195 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %193, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %194, i8* align 8 %195, i64 12, i1 false) #7
  %196 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 4, i32 1
  %197 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %193, i64 0, i32 4, i32 1
  %198 = bitcast i32* %196 to i8*
  %199 = bitcast i32* %197 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %198, i8* align 8 %199, i64 16, i1 false) #7
  %200 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 5
  %201 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %193, i64 0, i32 5
  %202 = bitcast i32* %200 to i8*
  %203 = bitcast i32* %201 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %202, i8* align 8 %203, i64 6, i1 false) #7
  %204 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8
  %205 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %193, i64 0, i32 8, i32 0
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8, i32 1
  %208 = load i64, i64* %207, align 8
  %209 = icmp ult i64 %208, %206
  br i1 %209, label %210, label %211

210:                                              ; preds = %192
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %204, i64 %206) #7
  br label %211

211:                                              ; preds = %210, %192
  %212 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %213 = load i8*, i8** %212, align 8
  %214 = icmp eq i8* %213, null
  %215 = select i1 %214, i64 0, i64 %206
  %216 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %204, i64 0, i32 0
  store i64 %215, i64* %216, align 8
  br i1 %214, label %248, label %217

217:                                              ; preds = %211
  %218 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %193, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %219 = load i8*, i8** %218, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %213, i8* align 1 %219, i64 %215, i1 false) #7
  br label %248

220:                                              ; preds = %173
  %221 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %191) #7
  %222 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 1
  %223 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %221, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %222, i8* align 8 %223, i64 12, i1 false) #7
  %224 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 4, i32 1
  %225 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %221, i64 0, i32 4, i32 1
  %226 = bitcast i32* %224 to i8*
  %227 = bitcast i32* %225 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 8 %227, i64 16, i1 false) #7
  %228 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 5
  %229 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %221, i64 0, i32 5
  %230 = bitcast i32* %228 to i8*
  %231 = bitcast i32* %229 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %230, i8* align 8 %231, i64 6, i1 false) #7
  %232 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8
  %233 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %221, i64 0, i32 8, i32 0
  %234 = load i64, i64* %233, align 8
  %235 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8, i32 1
  %236 = load i64, i64* %235, align 8
  %237 = icmp ult i64 %236, %234
  br i1 %237, label %238, label %239

238:                                              ; preds = %220
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %232, i64 %234) #7
  br label %239

239:                                              ; preds = %238, %220
  %240 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %241 = load i8*, i8** %240, align 8
  %242 = icmp eq i8* %241, null
  %243 = select i1 %242, i64 0, i64 %234
  %244 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %232, i64 0, i32 0
  store i64 %243, i64* %244, align 8
  br i1 %242, label %248, label %245

245:                                              ; preds = %239
  %246 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %221, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %241, i8* align 1 %247, i64 %243, i1 false) #7
  br label %248

248:                                              ; preds = %245, %239, %217, %211
  %249 = phi %"struct.jxl::ColorEncoding"* [ %193, %211 ], [ %193, %217 ], [ %221, %239 ], [ %221, %245 ]
  %250 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %249, i64 0, i32 9
  %251 = load i32, i32* %250, align 8
  %252 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 9
  store i32 %251, i32* %252, align 8
  %253 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 10, i32 1
  %254 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %249, i64 0, i32 10, i32 1
  %255 = bitcast i32* %254 to i64*
  %256 = bitcast i32* %253 to i64*
  %257 = load i64, i64* %255, align 8
  store i64 %257, i64* %256, align 8
  %258 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 11, i32 1
  %259 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %249, i64 0, i32 11, i32 1
  %260 = bitcast i32* %259 to i64*
  %261 = bitcast i32* %258 to i64*
  %262 = load i64, i64* %260, align 8
  store i64 %262, i64* %261, align 8
  %263 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 12, i32 1
  %264 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %249, i64 0, i32 12, i32 1
  %265 = bitcast i32* %264 to i64*
  %266 = bitcast i32* %263 to i64*
  %267 = load i64, i64* %265, align 8
  store i64 %267, i64* %266, align 8
  %268 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 13, i32 1
  %269 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %249, i64 0, i32 13, i32 1
  %270 = bitcast i32* %269 to i64*
  %271 = bitcast i32* %268 to i64*
  %272 = load i64, i64* %270, align 8
  store i64 %272, i64* %271, align 8
  %273 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %142, align 8
  %274 = call i32 @_ZN3jxl19BufferToImageBundleERK14JxlPixelFormatjjPKvmPNS_10ThreadPoolERKNS_13ColorEncodingEPNS_11ImageBundleE(%struct.JxlPixelFormat* dereferenceable(24) %6, i32 %1, i32 %2, i8* %7, i64 %8, %"class.jxl::ThreadPool"* %273, %"struct.jxl::ColorEncoding"* nonnull dereferenceable(152) %12, %"class.jxl::ImageBundle"* nonnull %14) #7
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %312

276:                                              ; preds = %248
  %277 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 4
  %278 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 4, i32 1
  %279 = load i8* (i8*, i64)*, i8* (i8*, i64)** %278, align 8
  %280 = getelementptr inbounds %struct.JxlMemoryManagerStruct, %struct.JxlMemoryManagerStruct* %277, i64 0, i32 0
  %281 = load i8*, i8** %280, align 8
  %282 = call i8* %279(i8* %281, i64 72) #7
  %283 = icmp eq i8* %282, null
  br i1 %283, label %312, label %284

284:                                              ; preds = %276
  %285 = bitcast i8* %282 to %struct.JxlButteraugliResultStruct*
  %286 = getelementptr inbounds i8, i8* %282, i64 24
  %287 = getelementptr inbounds i8, i8* %282, i64 56
  %288 = bitcast i8* %287 to float*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %282, i8 0, i64 72, i1 false)
  store float 1.000000e+00, float* %288, align 4
  %289 = getelementptr inbounds i8, i8* %282, i64 60
  %290 = bitcast i8* %289 to float*
  store float 1.000000e+00, float* %290, align 4
  %291 = getelementptr inbounds i8, i8* %282, i64 64
  %292 = bitcast i8* %291 to float*
  store float 8.000000e+01, float* %292, align 4
  %293 = getelementptr inbounds i8, i8* %282, i64 68
  store i8 0, i8* %293, align 4
  %294 = bitcast %struct.JxlMemoryManagerStruct* %277 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %282, i8* align 8 %294, i64 24, i1 false)
  %295 = bitcast %struct.JxlButteraugliApiStruct* %0 to i32*
  %296 = load i32, i32* %295, align 8
  %297 = bitcast i8* %287 to %"struct.jxl::ButteraugliParams"*
  %298 = bitcast i8* %287 to i32*
  store i32 %296, i32* %298, align 8
  %299 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 1
  %300 = bitcast float* %299 to i32*
  %301 = load i32, i32* %300, align 4
  %302 = bitcast i8* %289 to i32*
  store i32 %301, i32* %302, align 4
  %303 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 2
  %304 = bitcast float* %303 to i32*
  %305 = load i32, i32* %304, align 8
  %306 = bitcast i8* %291 to i32*
  store i32 %305, i32* %306, align 8
  %307 = getelementptr inbounds %struct.JxlButteraugliApiStruct, %struct.JxlButteraugliApiStruct* %0, i64 0, i32 3
  %308 = load i8, i8* %307, align 4, !range !2
  store i8 %308, i8* %293, align 4
  %309 = bitcast i8* %286 to %"class.jxl::Plane"*
  %310 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %142, align 8
  %311 = call float @_ZN3jxl19ButteraugliDistanceERKNS_11ImageBundleES2_RKNS_17ButteraugliParamsEPNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* nonnull dereferenceable(368) %11, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %14, %"struct.jxl::ButteraugliParams"* dereferenceable(16) %297, %"class.jxl::Plane"* %309, %"class.jxl::ThreadPool"* %310) #7
  br label %312

312:                                              ; preds = %284, %276, %248
  %313 = phi %struct.JxlButteraugliResultStruct* [ null, %248 ], [ %285, %284 ], [ null, %276 ]
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %174) #7
  %314 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %13, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %314, align 8
  %315 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %13, i64 0, i32 17
  %316 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %315, i64 0, i32 0, i32 0
  %317 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %316, align 8
  %318 = icmp eq %"struct.jxl::ExtraChannelInfo"* %317, null
  br i1 %318, label %336, label %319

319:                                              ; preds = %312
  %320 = bitcast %"struct.jxl::ExtraChannelInfo"* %317 to i8*
  %321 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %13, i64 0, i32 17, i32 0, i32 1
  %322 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %321, align 8
  %323 = icmp eq %"struct.jxl::ExtraChannelInfo"* %322, %317
  br i1 %323, label %334, label %324

324:                                              ; preds = %319, %324
  %325 = phi %"struct.jxl::ExtraChannelInfo"* [ %326, %324 ], [ %322, %319 ]
  %326 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %325, i64 -1
  %327 = bitcast %"struct.jxl::ExtraChannelInfo"* %326 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %328 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %327, align 8
  %329 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %328, align 8
  call void %329(%"struct.jxl::ExtraChannelInfo"* %326) #7
  %330 = icmp eq %"struct.jxl::ExtraChannelInfo"* %326, %317
  br i1 %330, label %331, label %324

331:                                              ; preds = %324
  %332 = bitcast %"class.std::__1::vector"* %315 to i8**
  %333 = load i8*, i8** %332, align 8
  br label %334

334:                                              ; preds = %331, %319
  %335 = phi i8* [ %333, %331 ], [ %320, %319 ]
  store %"struct.jxl::ExtraChannelInfo"* %317, %"struct.jxl::ExtraChannelInfo"** %321, align 8
  call void @_ZdlPv(i8* %335) #8
  br label %336

336:                                              ; preds = %334, %312
  %337 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %13, i64 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %337, align 8
  %338 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %13, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %339 = load i8*, i8** %338, align 8
  store i8* null, i8** %338, align 8
  %340 = icmp eq i8* %339, null
  br i1 %340, label %342, label %341

341:                                              ; preds = %336
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %339) #7
  br label %342

342:                                              ; preds = %336, %341
  call void @llvm.lifetime.end.p0i8(i64 1600, i8* nonnull %147) #7
  br label %343

343:                                              ; preds = %117, %342
  %344 = phi %struct.JxlButteraugliResultStruct* [ %313, %342 ], [ null, %117 ]
  %345 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %345, align 8
  %346 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %12, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %347 = load i8*, i8** %346, align 8
  store i8* null, i8** %346, align 8
  %348 = icmp eq i8* %347, null
  br i1 %348, label %350, label %349

349:                                              ; preds = %343
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %347) #7
  br label %350

350:                                              ; preds = %343, %349
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %56) #7
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %42) #7
  %351 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %351, align 8
  %352 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 17
  %353 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %352, i64 0, i32 0, i32 0
  %354 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %353, align 8
  %355 = icmp eq %"struct.jxl::ExtraChannelInfo"* %354, null
  br i1 %355, label %373, label %356

356:                                              ; preds = %350
  %357 = bitcast %"struct.jxl::ExtraChannelInfo"* %354 to i8*
  %358 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 17, i32 0, i32 1
  %359 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %358, align 8
  %360 = icmp eq %"struct.jxl::ExtraChannelInfo"* %359, %354
  br i1 %360, label %371, label %361

361:                                              ; preds = %356, %361
  %362 = phi %"struct.jxl::ExtraChannelInfo"* [ %363, %361 ], [ %359, %356 ]
  %363 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %362, i64 -1
  %364 = bitcast %"struct.jxl::ExtraChannelInfo"* %363 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %365 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %364, align 8
  %366 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %365, align 8
  call void %366(%"struct.jxl::ExtraChannelInfo"* %363) #7
  %367 = icmp eq %"struct.jxl::ExtraChannelInfo"* %363, %354
  br i1 %367, label %368, label %361

368:                                              ; preds = %361
  %369 = bitcast %"class.std::__1::vector"* %352 to i8**
  %370 = load i8*, i8** %369, align 8
  br label %371

371:                                              ; preds = %368, %356
  %372 = phi i8* [ %370, %368 ], [ %357, %356 ]
  store %"struct.jxl::ExtraChannelInfo"* %354, %"struct.jxl::ExtraChannelInfo"** %358, align 8
  call void @_ZdlPv(i8* %372) #8
  br label %373

373:                                              ; preds = %371, %350
  %374 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %374, align 8
  %375 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %10, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %376 = load i8*, i8** %375, align 8
  store i8* null, i8** %375, align 8
  %377 = icmp eq i8* %376, null
  br i1 %377, label %379, label %378

378:                                              ; preds = %373
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %376) #7
  br label %379

379:                                              ; preds = %373, %378
  call void @llvm.lifetime.end.p0i8(i64 1600, i8* nonnull %15) #7
  ret %struct.JxlButteraugliResultStruct* %344
}

declare void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #3

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #3

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext) local_unnamed_addr #3

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext) local_unnamed_addr #3

declare i32 @_ZN3jxl19BufferToImageBundleERK14JxlPixelFormatjjPKvmPNS_10ThreadPoolERKNS_13ColorEncodingEPNS_11ImageBundleE(%struct.JxlPixelFormat* dereferenceable(24), i32, i32, i8*, i64, %"class.jxl::ThreadPool"*, %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::ImageBundle"*) local_unnamed_addr #3

declare float @_ZN3jxl19ButteraugliDistanceERKNS_11ImageBundleES2_RKNS_17ButteraugliParamsEPNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ImageBundle"* dereferenceable(368), %"struct.jxl::ButteraugliParams"* dereferenceable(16), %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.91", %"class.std::__1::vector.91"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #7
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.91"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #8
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #7
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #7
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #7
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #7
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #8
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #7
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @JxlButteraugliResultGetDistance(%struct.JxlButteraugliResultStruct*, float) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 2
  %5 = fpext float %1 to double
  %6 = tail call double @_ZN3jxl16ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd(%"class.jxl::Plane"* dereferenceable(32) %3, %"struct.jxl::ButteraugliParams"* dereferenceable(16) %4, double %5) #7
  %7 = fptrunc double %6 to float
  ret float %7
}

declare double @_ZN3jxl16ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd(%"class.jxl::Plane"* dereferenceable(32), %"struct.jxl::ButteraugliParams"* dereferenceable(16), double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @JxlButteraugliResultGetDistmap(%struct.JxlButteraugliResultStruct* nocapture readonly, float** nocapture, i32* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 1, i32 0, i32 4
  %7 = ptrtoint i8* %5 to i64
  %8 = and i64 %7, 63
  %9 = icmp eq i64 %8, 0
  tail call void @llvm.assume(i1 %9) #7
  %10 = bitcast float** %1 to i8**
  store i8* %5, i8** %10, align 8
  %11 = load i64, i64* %6, align 8
  %12 = lshr i64 %11, 2
  %13 = trunc i64 %12 to i32
  store i32 %13, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @JxlButteraugliResultGetMaxDistance(%struct.JxlButteraugliResultStruct* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 1, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %30, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 1, i32 0, i32 4
  %11 = zext i32 %3 to i64
  %12 = zext i32 %7 to i64
  %13 = add nsw i64 %12, -1
  %14 = and i64 %12, 3
  %15 = icmp ult i64 %13, 3
  %16 = sub nsw i64 %12, %14
  %17 = icmp eq i64 %14, 0
  br label %18

18:                                               ; preds = %5, %47
  %19 = phi i64 [ 0, %5 ], [ %49, %47 ]
  %20 = phi float [ 0.000000e+00, %5 ], [ %48, %47 ]
  br i1 %8, label %47, label %21

21:                                               ; preds = %18
  %22 = load i8*, i8** %9, align 8
  %23 = load i64, i64* %10, align 8
  %24 = mul i64 %23, %19
  %25 = getelementptr inbounds i8, i8* %22, i64 %24
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #7
  %29 = bitcast i8* %25 to float*
  br i1 %15, label %32, label %51

30:                                               ; preds = %47, %1
  %31 = phi float [ 0.000000e+00, %1 ], [ %48, %47 ]
  ret float %31

32:                                               ; preds = %51, %21
  %33 = phi float [ undef, %21 ], [ %73, %51 ]
  %34 = phi i64 [ 0, %21 ], [ %74, %51 ]
  %35 = phi float [ %20, %21 ], [ %73, %51 ]
  br i1 %17, label %47, label %36

36:                                               ; preds = %32, %36
  %37 = phi i64 [ %44, %36 ], [ %34, %32 ]
  %38 = phi float [ %43, %36 ], [ %35, %32 ]
  %39 = phi i64 [ %45, %36 ], [ %14, %32 ]
  %40 = getelementptr inbounds float, float* %29, i64 %37
  %41 = load float, float* %40, align 4
  %42 = fcmp ogt float %41, %38
  %43 = select i1 %42, float %41, float %38
  %44 = add nuw nsw i64 %37, 1
  %45 = add i64 %39, -1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %36, !llvm.loop !3

47:                                               ; preds = %32, %36, %18
  %48 = phi float [ %20, %18 ], [ %33, %32 ], [ %43, %36 ]
  %49 = add nuw nsw i64 %19, 1
  %50 = icmp ult i64 %49, %11
  br i1 %50, label %18, label %30

51:                                               ; preds = %21, %51
  %52 = phi i64 [ %74, %51 ], [ 0, %21 ]
  %53 = phi float [ %73, %51 ], [ %20, %21 ]
  %54 = phi i64 [ %75, %51 ], [ %16, %21 ]
  %55 = getelementptr inbounds float, float* %29, i64 %52
  %56 = load float, float* %55, align 16
  %57 = fcmp ogt float %56, %53
  %58 = select i1 %57, float %56, float %53
  %59 = or i64 %52, 1
  %60 = getelementptr inbounds float, float* %29, i64 %59
  %61 = load float, float* %60, align 4
  %62 = fcmp ogt float %61, %58
  %63 = select i1 %62, float %61, float %58
  %64 = or i64 %52, 2
  %65 = getelementptr inbounds float, float* %29, i64 %64
  %66 = load float, float* %65, align 8
  %67 = fcmp ogt float %66, %63
  %68 = select i1 %67, float %66, float %63
  %69 = or i64 %52, 3
  %70 = getelementptr inbounds float, float* %29, i64 %69
  %71 = load float, float* %70, align 4
  %72 = fcmp ogt float %71, %68
  %73 = select i1 %72, float %71, float %68
  %74 = add nuw nsw i64 %52, 4
  %75 = add i64 %54, -4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %32, label %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @JxlButteraugliResultDestroy(%struct.JxlButteraugliResultStruct*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.JxlButteraugliResultStruct* %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  store i8* null, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %5) #7
  br label %8

8:                                                ; preds = %3, %7
  %9 = bitcast %struct.JxlButteraugliResultStruct* %0 to i8*
  %10 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 0, i32 2
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = getelementptr inbounds %struct.JxlButteraugliResultStruct, %struct.JxlButteraugliResultStruct* %0, i64 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  tail call void %11(i8* %13, i8* nonnull %9) #7
  br label %14

14:                                               ; preds = %1, %8
  ret void
}

declare i8* @_ZN3jxl25MemoryManagerDefaultAllocEPvm(i8*, i64) #3

declare void @_ZN3jxl24MemoryManagerDefaultFreeEPvS0_(i8*, i8*) #3

declare void @_ZN3jxl13ImageMetadata12SetAlphaBitsEjb(%"struct.jxl::ImageMetadata"*, i32, i1 zeroext) local_unnamed_addr #3

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #3

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
