; ModuleID = '../../third_party/libyuv/source/scale_argb.cc'
source_filename = "../../third_party/libyuv/source/scale_argb.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@cpu_info_ = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBScaleClip(i8*, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %14 = icmp eq i8* %0, null
  %15 = icmp eq i32 %2, 0
  %16 = or i1 %14, %15
  %17 = icmp eq i32 %3, 0
  %18 = or i1 %16, %17
  %19 = icmp eq i8* %4, null
  %20 = or i1 %18, %19
  %21 = icmp slt i32 %6, 1
  %22 = or i1 %20, %21
  %23 = icmp slt i32 %7, 1
  %24 = or i1 %22, %23
  %25 = or i32 %9, %8
  %26 = icmp slt i32 %25, 0
  %27 = or i1 %24, %26
  %28 = icmp sgt i32 %10, 32768
  %29 = or i1 %28, %27
  %30 = icmp sgt i32 %11, 32768
  %31 = or i1 %30, %29
  %32 = add nsw i32 %10, %8
  %33 = icmp sgt i32 %32, %6
  %34 = or i1 %33, %31
  %35 = add nsw i32 %11, %9
  %36 = icmp sgt i32 %35, %7
  %37 = or i1 %36, %34
  br i1 %37, label %39, label %38

38:                                               ; preds = %13
  tail call fastcc void @_ZN6libyuvL9ScaleARGBEPKhiiiPhiiiiiiiNS_10FilterModeE(i8* nonnull %0, i32 %1, i32 %2, i32 %3, i8* nonnull %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12)
  br label %39

39:                                               ; preds = %13, %38
  %40 = phi i32 [ 0, %38 ], [ -1, %13 ]
  ret i32 %40
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6libyuvL9ScaleARGBEPKhiiiPhiiiiiiiNS_10FilterModeE(i8*, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #5
  store i32 0, i32* %14, align 4
  %19 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #5
  store i32 0, i32* %15, align 4
  %20 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #5
  store i32 0, i32* %16, align 4
  %21 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #5
  store i32 0, i32* %17, align 4
  %22 = tail call i32 @ScaleFilterReduce(i32 %2, i32 %3, i32 %6, i32 %7, i32 %12) #5
  %23 = icmp slt i32 %3, 0
  br i1 %23, label %24, label %31

24:                                               ; preds = %13
  %25 = sub nsw i32 0, %3
  %26 = xor i32 %3, -1
  %27 = mul nsw i32 %26, %1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %0, i64 %28
  %30 = sub nsw i32 0, %1
  br label %31

31:                                               ; preds = %24, %13
  %32 = phi i32 [ %25, %24 ], [ %3, %13 ]
  %33 = phi i32 [ %30, %24 ], [ %1, %13 ]
  %34 = phi i8* [ %29, %24 ], [ %0, %13 ]
  call void @ScaleSlope(i32 %2, i32 %32, i32 %6, i32 %7, i32 %22, i32* nonnull %14, i32* nonnull %15, i32* nonnull %16, i32* nonnull %17) #5
  %35 = icmp slt i32 %2, 0
  %36 = sub nsw i32 0, %2
  %37 = select i1 %35, i32 %36, i32 %2
  %38 = icmp eq i32 %8, 0
  br i1 %38, label %54, label %39

39:                                               ; preds = %31
  %40 = sext i32 %8 to i64
  %41 = load i32, i32* %16, align 4
  %42 = sext i32 %41 to i64
  %43 = mul nsw i64 %42, %40
  %44 = load i32, i32* %14, align 4
  %45 = trunc i64 %43 to i32
  %46 = and i32 %45, 65535
  %47 = add i32 %46, %44
  store i32 %47, i32* %14, align 4
  %48 = ashr i64 %43, 16
  %49 = shl nsw i64 %48, 2
  %50 = getelementptr inbounds i8, i8* %34, i64 %49
  %51 = shl nsw i32 %8, 2
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %4, i64 %52
  br label %54

54:                                               ; preds = %31, %39
  %55 = phi i8* [ %53, %39 ], [ %4, %31 ]
  %56 = phi i8* [ %50, %39 ], [ %34, %31 ]
  %57 = icmp eq i32 %9, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = load i32, i32* %17, align 4
  br label %76

60:                                               ; preds = %54
  %61 = sext i32 %9 to i64
  %62 = load i32, i32* %17, align 4
  %63 = sext i32 %62 to i64
  %64 = mul nsw i64 %63, %61
  %65 = load i32, i32* %15, align 4
  %66 = trunc i64 %64 to i32
  %67 = and i32 %66, 65535
  %68 = add i32 %67, %65
  store i32 %68, i32* %15, align 4
  %69 = ashr i64 %64, 16
  %70 = sext i32 %33 to i64
  %71 = mul nsw i64 %69, %70
  %72 = getelementptr inbounds i8, i8* %56, i64 %71
  %73 = mul nsw i32 %9, %5
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %55, i64 %74
  br label %76

76:                                               ; preds = %58, %60
  %77 = phi i32 [ %62, %60 ], [ %59, %58 ]
  %78 = phi i8* [ %75, %60 ], [ %55, %58 ]
  %79 = phi i8* [ %72, %60 ], [ %56, %58 ]
  %80 = load i32, i32* %16, align 4
  %81 = or i32 %77, %80
  %82 = and i32 %81, 65535
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %269

84:                                               ; preds = %76
  %85 = icmp ne i32 %80, 0
  %86 = icmp ne i32 %77, 0
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %269

88:                                               ; preds = %84
  %89 = and i32 %81, 65536
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %249

91:                                               ; preds = %88
  %92 = icmp eq i32 %80, 131072
  br i1 %92, label %93, label %144

93:                                               ; preds = %91
  %94 = load i32, i32* %14, align 4
  %95 = load i32, i32* %15, align 4
  %96 = ashr i32 %77, 16
  %97 = mul nsw i32 %96, %33
  %98 = icmp eq i32 %22, 0
  %99 = icmp eq i32 %22, 1
  %100 = select i1 %99, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Linear_C, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Box_C
  %101 = select i1 %98, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2_C, void (i8*, i64, i8*, i32)* %100
  %102 = icmp eq i32 %22, 2
  %103 = ashr i32 %95, 16
  %104 = mul nsw i32 %103, %33
  %105 = ashr i32 %94, 16
  %106 = shl nsw i32 %105, 2
  %107 = add nsw i32 %106, -4
  %108 = select i1 %102, i32 %106, i32 %107
  %109 = add nsw i32 %108, %104
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %79, i64 %110
  %112 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %116

114:                                              ; preds = %93
  %115 = call i32 @InitCpuFlags() #5
  br label %116

116:                                              ; preds = %114, %93
  %117 = phi i32 [ %115, %114 ], [ %112, %93 ]
  %118 = and i32 %117, 32
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %128, label %120

120:                                              ; preds = %116
  %121 = select i1 %99, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Linear_Any_SSE2, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Box_Any_SSE2
  %122 = select i1 %98, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2_Any_SSE2, void (i8*, i64, i8*, i32)* %121
  %123 = and i32 %10, 3
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %128

125:                                              ; preds = %120
  %126 = select i1 %99, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Linear_SSE2, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Box_SSE2
  %127 = select i1 %98, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2_SSE2, void (i8*, i64, i8*, i32)* %126
  br label %128

128:                                              ; preds = %125, %120, %116
  %129 = phi void (i8*, i64, i8*, i32)* [ %122, %120 ], [ %101, %116 ], [ %127, %125 ]
  %130 = icmp sgt i32 %11, 0
  br i1 %130, label %131, label %549

131:                                              ; preds = %128
  %132 = select i1 %99, i32 0, i32 %33
  %133 = sext i32 %132 to i64
  %134 = sext i32 %97 to i64
  %135 = sext i32 %5 to i64
  br label %136

136:                                              ; preds = %136, %131
  %137 = phi i32 [ 0, %131 ], [ %142, %136 ]
  %138 = phi i8* [ %111, %131 ], [ %140, %136 ]
  %139 = phi i8* [ %78, %131 ], [ %141, %136 ]
  call void %129(i8* %138, i64 %133, i8* %139, i32 %10) #5
  %140 = getelementptr inbounds i8, i8* %138, i64 %134
  %141 = getelementptr inbounds i8, i8* %139, i64 %135
  %142 = add nuw nsw i32 %137, 1
  %143 = icmp eq i32 %142, %11
  br i1 %143, label %549, label %136

144:                                              ; preds = %91
  %145 = icmp eq i32 %80, 262144
  %146 = icmp eq i32 %22, 3
  %147 = and i1 %146, %145
  %148 = load i32, i32* %14, align 4
  %149 = load i32, i32* %15, align 4
  br i1 %147, label %150, label %205

150:                                              ; preds = %144
  %151 = shl nsw i32 %10, 1
  %152 = shl nsw i32 %10, 3
  %153 = add nsw i32 %152, 31
  %154 = and i32 %153, -32
  %155 = shl nsw i32 %153, 1
  %156 = or i32 %155, 63
  %157 = sext i32 %156 to i64
  %158 = call noalias i8* @malloc(i64 %157) #5
  %159 = ptrtoint i8* %158 to i64
  %160 = add nsw i64 %159, 63
  %161 = and i64 %160, -64
  %162 = inttoptr i64 %161 to i8*
  %163 = ashr i32 %77, 16
  %164 = mul nsw i32 %163, %33
  %165 = ashr i32 %149, 16
  %166 = mul nsw i32 %165, %33
  %167 = ashr i32 %148, 16
  %168 = shl nsw i32 %167, 2
  %169 = add nsw i32 %166, %168
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %79, i64 %170
  %172 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %150
  %175 = call i32 @InitCpuFlags() #5
  br label %176

176:                                              ; preds = %174, %150
  %177 = phi i32 [ %175, %174 ], [ %172, %150 ]
  %178 = and i32 %177, 32
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %184, label %180

180:                                              ; preds = %176
  %181 = and i32 %10, 3
  %182 = icmp eq i32 %181, 0
  %183 = select i1 %182, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Box_SSE2, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Box_Any_SSE2
  br label %184

184:                                              ; preds = %180, %176
  %185 = phi void (i8*, i64, i8*, i32)* [ %183, %180 ], [ @ScaleARGBRowDown2Box_C, %176 ]
  %186 = icmp sgt i32 %11, 0
  br i1 %186, label %187, label %204

187:                                              ; preds = %184
  %188 = sext i32 %33 to i64
  %189 = shl nsw i32 %33, 1
  %190 = sext i32 %189 to i64
  %191 = sext i32 %154 to i64
  %192 = getelementptr inbounds i8, i8* %162, i64 %191
  %193 = sext i32 %164 to i64
  %194 = sext i32 %5 to i64
  br label %195

195:                                              ; preds = %195, %187
  %196 = phi i32 [ 0, %187 ], [ %202, %195 ]
  %197 = phi i8* [ %171, %187 ], [ %200, %195 ]
  %198 = phi i8* [ %78, %187 ], [ %201, %195 ]
  call void %185(i8* %197, i64 %188, i8* %162, i32 %151) #5, !callees !2
  %199 = getelementptr inbounds i8, i8* %197, i64 %190
  call void %185(i8* %199, i64 %188, i8* %192, i32 %151) #5, !callees !2
  call void %185(i8* %162, i64 %191, i8* %198, i32 %10) #5, !callees !2
  %200 = getelementptr inbounds i8, i8* %197, i64 %193
  %201 = getelementptr inbounds i8, i8* %198, i64 %194
  %202 = add nuw nsw i32 %196, 1
  %203 = icmp eq i32 %202, %11
  br i1 %203, label %204, label %195

204:                                              ; preds = %195, %184
  call void @free(i8* %158) #5
  br label %549

205:                                              ; preds = %144
  %206 = ashr i32 %80, 16
  %207 = ashr i32 %77, 16
  %208 = mul nsw i32 %207, %33
  %209 = icmp ne i32 %22, 0
  %210 = select i1 %209, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEvenBox_C, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_C
  %211 = ashr i32 %149, 16
  %212 = mul nsw i32 %211, %33
  %213 = ashr i32 %148, 16
  %214 = shl nsw i32 %213, 2
  %215 = add nsw i32 %212, %214
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i8, i8* %79, i64 %216
  %218 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %222

220:                                              ; preds = %205
  %221 = call i32 @InitCpuFlags() #5
  br label %222

222:                                              ; preds = %220, %205
  %223 = phi i32 [ %221, %220 ], [ %218, %205 ]
  %224 = and i32 %223, 32
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %232, label %226

226:                                              ; preds = %222
  %227 = select i1 %209, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEvenBox_Any_SSE2, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_Any_SSE2
  %228 = and i32 %10, 3
  %229 = icmp eq i32 %228, 0
  %230 = select i1 %209, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEvenBox_SSE2, void (i8*, i64, i32, i8*, i32)* @ScaleARGBRowDownEven_SSE2
  %231 = select i1 %229, void (i8*, i64, i32, i8*, i32)* %230, void (i8*, i64, i32, i8*, i32)* %227
  br label %232

232:                                              ; preds = %226, %222
  %233 = phi void (i8*, i64, i32, i8*, i32)* [ %210, %222 ], [ %231, %226 ]
  %234 = icmp sgt i32 %11, 0
  br i1 %234, label %235, label %549

235:                                              ; preds = %232
  %236 = icmp eq i32 %22, 1
  %237 = select i1 %236, i32 0, i32 %33
  %238 = sext i32 %237 to i64
  %239 = sext i32 %208 to i64
  %240 = sext i32 %5 to i64
  br label %241

241:                                              ; preds = %241, %235
  %242 = phi i32 [ 0, %235 ], [ %247, %241 ]
  %243 = phi i8* [ %217, %235 ], [ %245, %241 ]
  %244 = phi i8* [ %78, %235 ], [ %246, %241 ]
  call void %233(i8* %243, i64 %238, i32 %206, i8* %244, i32 %10) #5
  %245 = getelementptr inbounds i8, i8* %243, i64 %239
  %246 = getelementptr inbounds i8, i8* %244, i64 %240
  %247 = add nuw nsw i32 %242, 1
  %248 = icmp eq i32 %247, %11
  br i1 %248, label %549, label %241

249:                                              ; preds = %88
  %250 = and i32 %80, 65536
  %251 = and i32 %250, %77
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %269, label %253

253:                                              ; preds = %249
  %254 = icmp eq i32 %80, 65536
  %255 = icmp eq i32 %77, 65536
  %256 = and i1 %254, %255
  br i1 %256, label %257, label %269

257:                                              ; preds = %253
  %258 = load i32, i32* %15, align 4
  %259 = ashr i32 %258, 16
  %260 = mul nsw i32 %259, %33
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %79, i64 %261
  %263 = load i32, i32* %14, align 4
  %264 = ashr i32 %263, 16
  %265 = shl nsw i32 %264, 2
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i8, i8* %262, i64 %266
  %268 = call i32 @ARGBCopy(i8* %267, i32 %33, i8* %78, i32 %5, i32 %10, i32 %11) #5
  br label %549

269:                                              ; preds = %249, %84, %253, %76
  %270 = phi i32 [ 0, %253 ], [ %22, %249 ], [ %22, %76 ], [ 0, %84 ]
  %271 = icmp eq i32 %80, 65536
  %272 = load i32, i32* %14, align 4
  %273 = and i32 %272, 65535
  %274 = icmp eq i32 %273, 0
  %275 = and i1 %271, %274
  br i1 %275, label %276, label %278

276:                                              ; preds = %269
  %277 = load i32, i32* %15, align 4
  call void @ScalePlaneVertical(i32 %32, i32 %10, i32 %11, i32 %33, i32 %5, i8* %79, i8* %78, i32 %272, i32 %277, i32 %77, i32 4, i32 %270) #5
  br label %549

278:                                              ; preds = %269
  %279 = icmp ne i32 %270, 0
  %280 = icmp slt i32 %77, 65536
  %281 = and i1 %280, %279
  %282 = load i32, i32* %15, align 4
  br i1 %281, label %283, label %397

283:                                              ; preds = %278
  %284 = shl i32 %32, 16
  %285 = add i32 %284, -65536
  %286 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %290

288:                                              ; preds = %283
  %289 = call i32 @InitCpuFlags() #5
  br label %290

290:                                              ; preds = %288, %283
  %291 = phi i32 [ %289, %288 ], [ %286, %283 ]
  %292 = and i32 %291, 64
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %298, label %294

294:                                              ; preds = %290
  %295 = and i32 %10, 3
  %296 = icmp eq i32 %295, 0
  %297 = select i1 %296, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_SSSE3, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_SSSE3
  br label %298

298:                                              ; preds = %294, %290
  %299 = phi void (i8*, i8*, i64, i32, i32)* [ %297, %294 ], [ @InterpolateRow_C, %290 ]
  %300 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %302, label %304

302:                                              ; preds = %298
  %303 = call i32 @InitCpuFlags() #5
  br label %304

304:                                              ; preds = %302, %298
  %305 = phi i32 [ %303, %302 ], [ %300, %298 ]
  %306 = and i32 %305, 1024
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %312, label %308

308:                                              ; preds = %304
  %309 = and i32 %10, 7
  %310 = icmp eq i32 %309, 0
  %311 = select i1 %310, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_AVX2, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_AVX2
  br label %312

312:                                              ; preds = %304, %308
  %313 = phi void (i8*, i8*, i64, i32, i32)* [ %311, %308 ], [ %299, %304 ]
  %314 = icmp sgt i32 %37, 32767
  %315 = select i1 %314, void (i8*, i8*, i32, i32, i32)* @ScaleARGBFilterCols64_C, void (i8*, i8*, i32, i32, i32)* @ScaleARGBFilterCols_C
  %316 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %320

318:                                              ; preds = %312
  %319 = call i32 @InitCpuFlags() #5
  br label %320

320:                                              ; preds = %312, %318
  %321 = phi i32 [ %319, %318 ], [ %316, %312 ]
  %322 = and i32 %321, 64
  %323 = icmp ne i32 %322, 0
  %324 = icmp slt i32 %37, 32768
  %325 = and i1 %324, %323
  %326 = select i1 %325, void (i8*, i8*, i32, i32, i32)* @ScaleARGBFilterCols_SSSE3, void (i8*, i8*, i32, i32, i32)* %315
  %327 = icmp slt i32 %285, %282
  %328 = select i1 %327, i32 %285, i32 %282
  %329 = ashr i32 %328, 16
  %330 = mul nsw i32 %329, %33
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i8, i8* %79, i64 %331
  %333 = shl nsw i32 %10, 2
  %334 = add nsw i32 %333, 31
  %335 = and i32 %334, -32
  %336 = shl nsw i32 %334, 1
  %337 = or i32 %336, 63
  %338 = sext i32 %337 to i64
  %339 = call noalias i8* @malloc(i64 %338) #5
  %340 = ptrtoint i8* %339 to i64
  %341 = add nsw i64 %340, 63
  %342 = and i64 %341, -64
  %343 = inttoptr i64 %342 to i8*
  call void %326(i8* %343, i8* %332, i32 %10, i32 %272, i32 %80) #5
  %344 = icmp sgt i32 %32, 1
  %345 = sext i32 %33 to i64
  %346 = getelementptr inbounds i8, i8* %332, i64 %345
  %347 = select i1 %344, i8* %346, i8* %332
  %348 = sext i32 %335 to i64
  %349 = getelementptr inbounds i8, i8* %343, i64 %348
  call void %326(i8* %349, i8* %347, i32 %10, i32 %272, i32 %80) #5
  %350 = icmp sgt i32 %11, 0
  br i1 %350, label %351, label %396

351:                                              ; preds = %320
  %352 = getelementptr inbounds i8, i8* %347, i64 %345
  %353 = ashr exact i32 %285, 16
  %354 = mul nsw i32 %353, %33
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds i8, i8* %79, i64 %355
  %357 = icmp eq i32 %270, 1
  %358 = sext i32 %5 to i64
  br label %359

359:                                              ; preds = %391, %351
  %360 = phi i8* [ %78, %351 ], [ %392, %391 ]
  %361 = phi i32 [ %329, %351 ], [ %385, %391 ]
  %362 = phi i32 [ %335, %351 ], [ %384, %391 ]
  %363 = phi i8* [ %343, %351 ], [ %383, %391 ]
  %364 = phi i32 [ %328, %351 ], [ %393, %391 ]
  %365 = phi i8* [ %352, %351 ], [ %381, %391 ]
  %366 = phi i32 [ 0, %351 ], [ %394, %391 ]
  %367 = ashr i32 %364, 16
  %368 = icmp eq i32 %367, %361
  br i1 %368, label %380, label %369

369:                                              ; preds = %359
  %370 = icmp sgt i32 %364, %285
  %371 = select i1 %370, i32 %353, i32 %367
  %372 = select i1 %370, i8* %356, i8* %365
  %373 = select i1 %370, i32 %285, i32 %364
  %374 = icmp eq i32 %371, %361
  br i1 %374, label %380, label %375

375:                                              ; preds = %369
  call void %326(i8* %363, i8* %372, i32 %10, i32 %272, i32 %80) #5
  %376 = sext i32 %362 to i64
  %377 = getelementptr inbounds i8, i8* %363, i64 %376
  %378 = sub nsw i32 0, %362
  %379 = getelementptr inbounds i8, i8* %372, i64 %345
  br label %380

380:                                              ; preds = %375, %369, %359
  %381 = phi i8* [ %379, %375 ], [ %372, %369 ], [ %365, %359 ]
  %382 = phi i32 [ %373, %375 ], [ %373, %369 ], [ %364, %359 ]
  %383 = phi i8* [ %377, %375 ], [ %363, %369 ], [ %363, %359 ]
  %384 = phi i32 [ %378, %375 ], [ %362, %369 ], [ %362, %359 ]
  %385 = phi i32 [ %371, %375 ], [ %361, %369 ], [ %361, %359 ]
  br i1 %357, label %386, label %387

386:                                              ; preds = %380
  call void %313(i8* %360, i8* %383, i64 0, i32 %333, i32 0) #5
  br label %391

387:                                              ; preds = %380
  %388 = lshr i32 %382, 8
  %389 = and i32 %388, 255
  %390 = sext i32 %384 to i64
  call void %313(i8* %360, i8* %383, i64 %390, i32 %333, i32 %389) #5
  br label %391

391:                                              ; preds = %387, %386
  %392 = getelementptr inbounds i8, i8* %360, i64 %358
  %393 = add nsw i32 %382, %77
  %394 = add nuw nsw i32 %366, 1
  %395 = icmp eq i32 %394, %11
  br i1 %395, label %396, label %359

396:                                              ; preds = %391, %320
  call void @free(i8* %339) #5
  br label %549

397:                                              ; preds = %278
  %398 = icmp sgt i32 %37, 32767
  br i1 %279, label %399, label %502

399:                                              ; preds = %397
  %400 = select i1 %398, void (i8*, i8*, i32, i32, i32)* @ScaleARGBFilterCols64_C, void (i8*, i8*, i32, i32, i32)* @ScaleARGBFilterCols_C
  %401 = sext i32 %272 to i64
  %402 = add nsw i32 %10, -1
  %403 = sext i32 %402 to i64
  %404 = sext i32 %80 to i64
  %405 = mul nsw i64 %404, %403
  %406 = add nsw i64 %405, %401
  %407 = icmp sgt i32 %80, -1
  %408 = select i1 %407, i64 %401, i64 %406
  %409 = select i1 %407, i64 %406, i64 %401
  %410 = ashr i64 %408, 16
  %411 = and i64 %410, -4
  %412 = ashr i64 %409, 16
  %413 = add nsw i64 %412, 5
  %414 = and i64 %413, -4
  %415 = zext i32 %37 to i64
  %416 = icmp sgt i64 %414, %415
  %417 = select i1 %416, i64 %415, i64 %414
  %418 = sub nsw i64 %417, %411
  %419 = trunc i64 %418 to i32
  %420 = shl nsw i32 %419, 2
  %421 = shl nsw i64 %411, 2
  %422 = getelementptr inbounds i8, i8* %79, i64 %421
  %423 = trunc i64 %411 to i32
  %424 = shl i32 %423, 16
  %425 = sub nsw i32 %272, %424
  %426 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %430

428:                                              ; preds = %399
  %429 = call i32 @InitCpuFlags() #5
  br label %430

430:                                              ; preds = %428, %399
  %431 = phi i32 [ %429, %428 ], [ %426, %399 ]
  %432 = and i32 %431, 64
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %438, label %434

434:                                              ; preds = %430
  %435 = and i32 %419, 3
  %436 = icmp eq i32 %435, 0
  %437 = select i1 %436, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_SSSE3, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_SSSE3
  br label %438

438:                                              ; preds = %434, %430
  %439 = phi void (i8*, i8*, i64, i32, i32)* [ %437, %434 ], [ @InterpolateRow_C, %430 ]
  %440 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %442, label %444

442:                                              ; preds = %438
  %443 = call i32 @InitCpuFlags() #5
  br label %444

444:                                              ; preds = %442, %438
  %445 = phi i32 [ %443, %442 ], [ %440, %438 ]
  %446 = and i32 %445, 1024
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %452, label %448

448:                                              ; preds = %444
  %449 = and i32 %419, 7
  %450 = icmp eq i32 %449, 0
  %451 = select i1 %450, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_AVX2, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_AVX2
  br label %452

452:                                              ; preds = %448, %444
  %453 = phi void (i8*, i8*, i64, i32, i32)* [ %451, %448 ], [ %439, %444 ]
  %454 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %456, label %458

456:                                              ; preds = %452
  %457 = call i32 @InitCpuFlags() #5
  br label %458

458:                                              ; preds = %456, %452
  %459 = phi i32 [ %457, %456 ], [ %454, %452 ]
  %460 = and i32 %459, 64
  %461 = icmp ne i32 %460, 0
  %462 = icmp slt i32 %37, 32768
  %463 = and i1 %462, %461
  %464 = select i1 %463, void (i8*, i8*, i32, i32, i32)* @ScaleARGBFilterCols_SSSE3, void (i8*, i8*, i32, i32, i32)* %400
  %465 = shl i32 %419, 4
  %466 = add nsw i32 %465, 63
  %467 = sext i32 %466 to i64
  %468 = call noalias i8* @malloc(i64 %467) #5
  %469 = ptrtoint i8* %468 to i64
  %470 = add nsw i64 %469, 63
  %471 = and i64 %470, -64
  %472 = inttoptr i64 %471 to i8*
  %473 = shl i32 %32, 16
  %474 = add i32 %473, -65536
  %475 = icmp sgt i32 %11, 0
  br i1 %475, label %476, label %501

476:                                              ; preds = %458
  %477 = icmp slt i32 %474, %282
  %478 = select i1 %477, i32 %474, i32 %282
  %479 = icmp eq i32 %270, 1
  %480 = sext i32 %33 to i64
  %481 = sext i32 %5 to i64
  br label %482

482:                                              ; preds = %493, %476
  %483 = phi i8* [ %78, %476 ], [ %495, %493 ]
  %484 = phi i32 [ 0, %476 ], [ %499, %493 ]
  %485 = phi i32 [ %478, %476 ], [ %498, %493 ]
  %486 = ashr i32 %485, 16
  %487 = mul nsw i32 %486, %33
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i8, i8* %422, i64 %488
  br i1 %479, label %493, label %490

490:                                              ; preds = %482
  %491 = lshr i32 %485, 8
  %492 = and i32 %491, 255
  call void %453(i8* %472, i8* %489, i64 %480, i32 %420, i32 %492) #5
  br label %493

493:                                              ; preds = %482, %490
  %494 = phi i8* [ %472, %490 ], [ %489, %482 ]
  call void %464(i8* %483, i8* %494, i32 %10, i32 %425, i32 %80) #5
  %495 = getelementptr inbounds i8, i8* %483, i64 %481
  %496 = add nsw i32 %485, %77
  %497 = icmp sgt i32 %496, %474
  %498 = select i1 %497, i32 %474, i32 %496
  %499 = add nuw nsw i32 %484, 1
  %500 = icmp eq i32 %499, %11
  br i1 %500, label %501, label %482

501:                                              ; preds = %493, %458
  call void @free(i8* %468) #5
  br label %549

502:                                              ; preds = %397
  %503 = select i1 %398, void (i8*, i8*, i32, i32, i32)* @ScaleARGBCols64_C, void (i8*, i8*, i32, i32, i32)* @ScaleARGBCols_C
  %504 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %506, label %508

506:                                              ; preds = %502
  %507 = call i32 @InitCpuFlags() #5
  br label %508

508:                                              ; preds = %506, %502
  %509 = phi i32 [ %507, %506 ], [ %504, %502 ]
  %510 = and i32 %509, 32
  %511 = icmp ne i32 %510, 0
  %512 = icmp slt i32 %37, 32768
  %513 = and i1 %512, %511
  %514 = select i1 %513, void (i8*, i8*, i32, i32, i32)* @ScaleARGBCols_SSE2, void (i8*, i8*, i32, i32, i32)* %503
  %515 = shl nuw nsw i32 %37, 1
  %516 = icmp eq i32 %515, %10
  %517 = icmp slt i32 %272, 32768
  %518 = and i1 %516, %517
  br i1 %518, label %519, label %532

519:                                              ; preds = %508
  %520 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %522, label %524

522:                                              ; preds = %519
  %523 = call i32 @InitCpuFlags() #5
  br label %524

524:                                              ; preds = %522, %519
  %525 = phi i32 [ %523, %522 ], [ %520, %519 ]
  %526 = and i32 %525, 32
  %527 = icmp ne i32 %526, 0
  %528 = and i32 %10, 7
  %529 = icmp eq i32 %528, 0
  %530 = and i1 %529, %527
  %531 = select i1 %530, void (i8*, i8*, i32, i32, i32)* @ScaleARGBColsUp2_SSE2, void (i8*, i8*, i32, i32, i32)* @ScaleARGBColsUp2_C
  br label %532

532:                                              ; preds = %524, %508
  %533 = phi void (i8*, i8*, i32, i32, i32)* [ %514, %508 ], [ %531, %524 ]
  %534 = icmp sgt i32 %11, 0
  br i1 %534, label %535, label %549

535:                                              ; preds = %532
  %536 = sext i32 %5 to i64
  br label %537

537:                                              ; preds = %537, %535
  %538 = phi i32 [ 0, %535 ], [ %547, %537 ]
  %539 = phi i8* [ %78, %535 ], [ %545, %537 ]
  %540 = phi i32 [ %282, %535 ], [ %546, %537 ]
  %541 = ashr i32 %540, 16
  %542 = mul nsw i32 %541, %33
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds i8, i8* %79, i64 %543
  call void %533(i8* %539, i8* %544, i32 %10, i32 %272, i32 %80) #5
  %545 = getelementptr inbounds i8, i8* %539, i64 %536
  %546 = add nsw i32 %540, %77
  %547 = add nuw nsw i32 %538, 1
  %548 = icmp eq i32 %547, %11
  br i1 %548, label %549, label %537

549:                                              ; preds = %537, %241, %136, %532, %232, %128, %501, %396, %276, %257, %204
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBScale(i8*, i32, i32, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = icmp eq i8* %0, null
  %11 = icmp eq i32 %2, 0
  %12 = or i1 %10, %11
  %13 = icmp eq i32 %3, 0
  %14 = or i1 %12, %13
  %15 = icmp sgt i32 %2, 32768
  %16 = or i1 %15, %14
  %17 = icmp sgt i32 %3, 32768
  %18 = or i1 %17, %16
  %19 = icmp eq i8* %4, null
  %20 = or i1 %19, %18
  %21 = icmp slt i32 %6, 1
  %22 = or i1 %21, %20
  %23 = icmp slt i32 %7, 1
  %24 = or i1 %23, %22
  br i1 %24, label %26, label %25

25:                                               ; preds = %9
  tail call fastcc void @_ZN6libyuvL9ScaleARGBEPKhiiiPhiiiiiiiNS_10FilterModeE(i8* nonnull %0, i32 %1, i32 %2, i32 %3, i8* nonnull %4, i32 %5, i32 %6, i32 %7, i32 0, i32 0, i32 %6, i32 %7, i32 %8)
  br label %26

26:                                               ; preds = %9, %25
  %27 = phi i32 [ 0, %25 ], [ -1, %9 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @YUVToARGBScaleClip(i8*, i32, i8*, i32, i8*, i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %20 = shl i32 %7, 2
  %21 = mul i32 %20, %8
  %22 = sext i32 %21 to i64
  %23 = tail call noalias i8* @malloc(i64 %22) #5
  %24 = tail call i32 @I420ToARGB(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 %5, i8* %23, i32 %20, i32 %7, i32 %8) #5
  %25 = icmp eq i8* %23, null
  %26 = icmp eq i32 %7, 0
  %27 = or i1 %26, %25
  %28 = icmp eq i32 %8, 0
  %29 = or i1 %28, %27
  %30 = icmp eq i8* %9, null
  %31 = or i1 %30, %29
  %32 = icmp slt i32 %12, 1
  %33 = or i1 %32, %31
  %34 = icmp slt i32 %13, 1
  %35 = or i1 %34, %33
  %36 = or i32 %15, %14
  %37 = icmp slt i32 %36, 0
  %38 = or i1 %37, %35
  %39 = icmp sgt i32 %16, 32768
  %40 = or i1 %39, %38
  %41 = icmp sgt i32 %17, 32768
  %42 = or i1 %41, %40
  %43 = add nsw i32 %16, %14
  %44 = icmp sgt i32 %43, %12
  %45 = or i1 %44, %42
  %46 = add nsw i32 %17, %15
  %47 = icmp sgt i32 %46, %13
  %48 = or i1 %47, %45
  br i1 %48, label %50, label %49

49:                                               ; preds = %19
  tail call fastcc void @_ZN6libyuvL9ScaleARGBEPKhiiiPhiiiiiiiNS_10FilterModeE(i8* nonnull %23, i32 %20, i32 %7, i32 %8, i8* nonnull %9, i32 %10, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18) #5
  br label %50

50:                                               ; preds = %19, %49
  %51 = phi i32 [ 0, %49 ], [ -1, %19 ]
  tail call void @free(i8* %23) #5
  ret i32 %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare i32 @I420ToARGB(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @ScaleFilterReduce(i32, i32, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleSlope(i32, i32, i32, i32, i32, i32*, i32*, i32*, i32*) local_unnamed_addr #3

declare i32 @ARGBCopy(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScalePlaneVertical(i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDown2_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDown2Linear_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDown2Box_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDown2_Any_SSE2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDown2Linear_Any_SSE2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDown2Box_Any_SSE2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDown2_SSE2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDown2Linear_SSE2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDown2Box_SSE2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare i32 @InitCpuFlags() local_unnamed_addr #3

declare void @ScaleARGBRowDownEvenBox_C(i8*, i64, i32, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDownEven_C(i8*, i64, i32, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDownEvenBox_Any_SSE2(i8*, i64, i32, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDownEven_Any_SSE2(i8*, i64, i32, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDownEvenBox_SSE2(i8*, i64, i32, i8*, i32) local_unnamed_addr #3

declare void @ScaleARGBRowDownEven_SSE2(i8*, i64, i32, i8*, i32) local_unnamed_addr #3

declare void @InterpolateRow_C(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @ScaleARGBFilterCols_C(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleARGBCols_C(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @InterpolateRow_Any_SSSE3(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @InterpolateRow_SSSE3(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @InterpolateRow_Any_AVX2(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @InterpolateRow_AVX2(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @ScaleARGBFilterCols64_C(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleARGBCols64_C(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleARGBFilterCols_SSSE3(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleARGBCols_SSE2(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleARGBColsUp2_C(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleARGBColsUp2_SSE2(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Box_Any_SSE2, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Box_C, void (i8*, i64, i8*, i32)* @ScaleARGBRowDown2Box_SSE2}
