; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/sad4d_avx2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/sad4d_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_sad32x32x4d_avx2(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #0 {
  %6 = load i8*, i8** %2, align 8
  %7 = getelementptr inbounds i8*, i8** %2, i64 1
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8*, i8** %2, i64 2
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8*, i8** %2, i64 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  br label %15

15:                                               ; preds = %15, %5
  %16 = phi i8* [ %0, %5 ], [ %48, %15 ]
  %17 = phi i8* [ %6, %5 ], [ %49, %15 ]
  %18 = phi i8* [ %8, %5 ], [ %50, %15 ]
  %19 = phi i8* [ %10, %5 ], [ %51, %15 ]
  %20 = phi i8* [ %12, %5 ], [ %52, %15 ]
  %21 = phi i32 [ 0, %5 ], [ %53, %15 ]
  %22 = phi <8 x i32> [ zeroinitializer, %5 ], [ %41, %15 ]
  %23 = phi <8 x i32> [ zeroinitializer, %5 ], [ %43, %15 ]
  %24 = phi <8 x i32> [ zeroinitializer, %5 ], [ %45, %15 ]
  %25 = phi <8 x i32> [ zeroinitializer, %5 ], [ %47, %15 ]
  %26 = bitcast i8* %16 to <32 x i8>*
  %27 = load <32 x i8>, <32 x i8>* %26, align 32
  %28 = bitcast i8* %17 to <32 x i8>*
  %29 = load <32 x i8>, <32 x i8>* %28, align 1
  %30 = bitcast i8* %18 to <32 x i8>*
  %31 = load <32 x i8>, <32 x i8>* %30, align 1
  %32 = bitcast i8* %19 to <32 x i8>*
  %33 = load <32 x i8>, <32 x i8>* %32, align 1
  %34 = bitcast i8* %20 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %29, <32 x i8> %27) #2
  %37 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %31, <32 x i8> %27) #2
  %38 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %33, <32 x i8> %27) #2
  %39 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %35, <32 x i8> %27) #2
  %40 = bitcast <4 x i64> %36 to <8 x i32>
  %41 = add <8 x i32> %22, %40
  %42 = bitcast <4 x i64> %37 to <8 x i32>
  %43 = add <8 x i32> %23, %42
  %44 = bitcast <4 x i64> %38 to <8 x i32>
  %45 = add <8 x i32> %24, %44
  %46 = bitcast <4 x i64> %39 to <8 x i32>
  %47 = add <8 x i32> %25, %46
  %48 = getelementptr inbounds i8, i8* %16, i64 %13
  %49 = getelementptr inbounds i8, i8* %17, i64 %14
  %50 = getelementptr inbounds i8, i8* %18, i64 %14
  %51 = getelementptr inbounds i8, i8* %19, i64 %14
  %52 = getelementptr inbounds i8, i8* %20, i64 %14
  %53 = add nuw nsw i32 %21, 1
  %54 = icmp eq i32 %53, 32
  br i1 %54, label %55, label %15

55:                                               ; preds = %15
  %56 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %41, <8 x i32> %43) #2
  %57 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %45, <8 x i32> %47) #2
  %58 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %56, <8 x i32> %57) #2
  %59 = bitcast <8 x i32> %58 to <4 x i64>
  %60 = shufflevector <4 x i64> %59, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %61 = shufflevector <8 x i32> %58, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %62 = bitcast <2 x i64> %60 to <4 x i32>
  %63 = add <4 x i32> %61, %62
  %64 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %63, <4 x i32>* %64, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_sad32x32x8_avx2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i8* [ %0, %5 ], [ %69, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %71, %8 ]
  %11 = phi i8* [ %2, %5 ], [ %70, %8 ]
  %12 = phi <8 x i32> [ zeroinitializer, %5 ], [ %54, %8 ]
  %13 = phi <8 x i32> [ zeroinitializer, %5 ], [ %56, %8 ]
  %14 = phi <8 x i32> [ zeroinitializer, %5 ], [ %58, %8 ]
  %15 = phi <8 x i32> [ zeroinitializer, %5 ], [ %60, %8 ]
  %16 = phi <8 x i32> [ zeroinitializer, %5 ], [ %62, %8 ]
  %17 = phi <8 x i32> [ zeroinitializer, %5 ], [ %64, %8 ]
  %18 = phi <8 x i32> [ zeroinitializer, %5 ], [ %66, %8 ]
  %19 = phi <8 x i32> [ zeroinitializer, %5 ], [ %68, %8 ]
  %20 = bitcast i8* %9 to <32 x i8>*
  %21 = load <32 x i8>, <32 x i8>* %20, align 32
  %22 = bitcast i8* %11 to <32 x i8>*
  %23 = load <32 x i8>, <32 x i8>* %22, align 1
  %24 = getelementptr inbounds i8, i8* %11, i64 1
  %25 = bitcast i8* %24 to <32 x i8>*
  %26 = load <32 x i8>, <32 x i8>* %25, align 1
  %27 = getelementptr inbounds i8, i8* %11, i64 2
  %28 = bitcast i8* %27 to <32 x i8>*
  %29 = load <32 x i8>, <32 x i8>* %28, align 1
  %30 = getelementptr inbounds i8, i8* %11, i64 3
  %31 = bitcast i8* %30 to <32 x i8>*
  %32 = load <32 x i8>, <32 x i8>* %31, align 1
  %33 = getelementptr inbounds i8, i8* %11, i64 4
  %34 = bitcast i8* %33 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = getelementptr inbounds i8, i8* %11, i64 5
  %37 = bitcast i8* %36 to <32 x i8>*
  %38 = load <32 x i8>, <32 x i8>* %37, align 1
  %39 = getelementptr inbounds i8, i8* %11, i64 6
  %40 = bitcast i8* %39 to <32 x i8>*
  %41 = load <32 x i8>, <32 x i8>* %40, align 1
  %42 = getelementptr inbounds i8, i8* %11, i64 7
  %43 = bitcast i8* %42 to <32 x i8>*
  %44 = load <32 x i8>, <32 x i8>* %43, align 1
  %45 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %23, <32 x i8> %21) #2
  %46 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %26, <32 x i8> %21) #2
  %47 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %29, <32 x i8> %21) #2
  %48 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %32, <32 x i8> %21) #2
  %49 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %35, <32 x i8> %21) #2
  %50 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %38, <32 x i8> %21) #2
  %51 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %41, <32 x i8> %21) #2
  %52 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %44, <32 x i8> %21) #2
  %53 = bitcast <4 x i64> %45 to <8 x i32>
  %54 = add <8 x i32> %12, %53
  %55 = bitcast <4 x i64> %46 to <8 x i32>
  %56 = add <8 x i32> %13, %55
  %57 = bitcast <4 x i64> %47 to <8 x i32>
  %58 = add <8 x i32> %14, %57
  %59 = bitcast <4 x i64> %48 to <8 x i32>
  %60 = add <8 x i32> %15, %59
  %61 = bitcast <4 x i64> %49 to <8 x i32>
  %62 = add <8 x i32> %16, %61
  %63 = bitcast <4 x i64> %50 to <8 x i32>
  %64 = add <8 x i32> %17, %63
  %65 = bitcast <4 x i64> %51 to <8 x i32>
  %66 = add <8 x i32> %18, %65
  %67 = bitcast <4 x i64> %52 to <8 x i32>
  %68 = add <8 x i32> %19, %67
  %69 = getelementptr inbounds i8, i8* %9, i64 %6
  %70 = getelementptr inbounds i8, i8* %11, i64 %7
  %71 = add nuw nsw i32 %10, 1
  %72 = icmp eq i32 %71, 32
  br i1 %72, label %73, label %8

73:                                               ; preds = %8
  %74 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %54, <8 x i32> %56) #2
  %75 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %58, <8 x i32> %60) #2
  %76 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %74, <8 x i32> %75) #2
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = shufflevector <4 x i64> %77, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %79 = shufflevector <8 x i32> %76, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %80 = bitcast <2 x i64> %78 to <4 x i32>
  %81 = add <4 x i32> %79, %80
  %82 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %82, align 1
  %83 = getelementptr inbounds i32, i32* %4, i64 4
  %84 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %62, <8 x i32> %64) #2
  %85 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %66, <8 x i32> %68) #2
  %86 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %84, <8 x i32> %85) #2
  %87 = bitcast <8 x i32> %86 to <4 x i64>
  %88 = shufflevector <4 x i64> %87, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %89 = shufflevector <8 x i32> %86, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %90 = bitcast <2 x i64> %88 to <4 x i32>
  %91 = add <4 x i32> %89, %90
  %92 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %92, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_sad64x64x4d_avx2(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #0 {
  %6 = load i8*, i8** %2, align 8
  %7 = getelementptr inbounds i8*, i8** %2, i64 1
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8*, i8** %2, i64 2
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8*, i8** %2, i64 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  br label %15

15:                                               ; preds = %15, %5
  %16 = phi i8* [ %0, %5 ], [ %75, %15 ]
  %17 = phi i32 [ 0, %5 ], [ %80, %15 ]
  %18 = phi i8* [ %6, %5 ], [ %76, %15 ]
  %19 = phi i8* [ %8, %5 ], [ %77, %15 ]
  %20 = phi i8* [ %10, %5 ], [ %78, %15 ]
  %21 = phi i8* [ %12, %5 ], [ %79, %15 ]
  %22 = phi <8 x i32> [ zeroinitializer, %5 ], [ %68, %15 ]
  %23 = phi <8 x i32> [ zeroinitializer, %5 ], [ %70, %15 ]
  %24 = phi <8 x i32> [ zeroinitializer, %5 ], [ %72, %15 ]
  %25 = phi <8 x i32> [ zeroinitializer, %5 ], [ %74, %15 ]
  %26 = bitcast i8* %16 to <32 x i8>*
  %27 = load <32 x i8>, <32 x i8>* %26, align 32
  %28 = getelementptr inbounds i8, i8* %16, i64 32
  %29 = bitcast i8* %28 to <32 x i8>*
  %30 = load <32 x i8>, <32 x i8>* %29, align 32
  %31 = bitcast i8* %18 to <32 x i8>*
  %32 = load <32 x i8>, <32 x i8>* %31, align 1
  %33 = getelementptr inbounds i8, i8* %18, i64 32
  %34 = bitcast i8* %33 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = bitcast i8* %19 to <32 x i8>*
  %37 = load <32 x i8>, <32 x i8>* %36, align 1
  %38 = getelementptr inbounds i8, i8* %19, i64 32
  %39 = bitcast i8* %38 to <32 x i8>*
  %40 = load <32 x i8>, <32 x i8>* %39, align 1
  %41 = bitcast i8* %20 to <32 x i8>*
  %42 = load <32 x i8>, <32 x i8>* %41, align 1
  %43 = getelementptr inbounds i8, i8* %20, i64 32
  %44 = bitcast i8* %43 to <32 x i8>*
  %45 = load <32 x i8>, <32 x i8>* %44, align 1
  %46 = bitcast i8* %21 to <32 x i8>*
  %47 = load <32 x i8>, <32 x i8>* %46, align 1
  %48 = getelementptr inbounds i8, i8* %21, i64 32
  %49 = bitcast i8* %48 to <32 x i8>*
  %50 = load <32 x i8>, <32 x i8>* %49, align 1
  %51 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %32, <32 x i8> %27) #2
  %52 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %37, <32 x i8> %27) #2
  %53 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %42, <32 x i8> %27) #2
  %54 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %47, <32 x i8> %27) #2
  %55 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %35, <32 x i8> %30) #2
  %56 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %40, <32 x i8> %30) #2
  %57 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %45, <32 x i8> %30) #2
  %58 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %50, <32 x i8> %30) #2
  %59 = bitcast <4 x i64> %51 to <8 x i32>
  %60 = add <8 x i32> %22, %59
  %61 = bitcast <4 x i64> %52 to <8 x i32>
  %62 = add <8 x i32> %23, %61
  %63 = bitcast <4 x i64> %53 to <8 x i32>
  %64 = add <8 x i32> %24, %63
  %65 = bitcast <4 x i64> %54 to <8 x i32>
  %66 = add <8 x i32> %25, %65
  %67 = bitcast <4 x i64> %55 to <8 x i32>
  %68 = add <8 x i32> %60, %67
  %69 = bitcast <4 x i64> %56 to <8 x i32>
  %70 = add <8 x i32> %62, %69
  %71 = bitcast <4 x i64> %57 to <8 x i32>
  %72 = add <8 x i32> %64, %71
  %73 = bitcast <4 x i64> %58 to <8 x i32>
  %74 = add <8 x i32> %66, %73
  %75 = getelementptr inbounds i8, i8* %16, i64 %13
  %76 = getelementptr inbounds i8, i8* %18, i64 %14
  %77 = getelementptr inbounds i8, i8* %19, i64 %14
  %78 = getelementptr inbounds i8, i8* %20, i64 %14
  %79 = getelementptr inbounds i8, i8* %21, i64 %14
  %80 = add nuw nsw i32 %17, 1
  %81 = icmp eq i32 %80, 64
  br i1 %81, label %82, label %15

82:                                               ; preds = %15
  %83 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %68, <8 x i32> %70) #2
  %84 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %72, <8 x i32> %74) #2
  %85 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %83, <8 x i32> %84) #2
  %86 = bitcast <8 x i32> %85 to <4 x i64>
  %87 = shufflevector <4 x i64> %86, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %88 = shufflevector <8 x i32> %85, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %89 = bitcast <2 x i64> %87 to <4 x i32>
  %90 = add <4 x i32> %88, %89
  %91 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %91, align 1
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8>, <32 x i8>) #1

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32>, <8 x i32>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
