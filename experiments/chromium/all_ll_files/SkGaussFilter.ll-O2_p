; ModuleID = '../../third_party/skia/src/core/SkGaussFilter.cpp'
source_filename = "../../third_party/skia/src/core/SkGaussFilter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkGaussFilter = type <{ [6 x double], i32, [4 x i8] }>

@_ZN13SkGaussFilterC1Ed = hidden unnamed_addr alias void (%class.SkGaussFilter*, double), void (%class.SkGaussFilter*, double)* @_ZN13SkGaussFilterC2Ed

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkGaussFilterC2Ed(%class.SkGaussFilter* nocapture, double) unnamed_addr #0 align 2 {
  %3 = alloca [6 x double], align 16
  %4 = fmul double %1, %1
  %5 = tail call double @exp(double %4) #3
  %6 = bitcast [6 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #3
  %7 = getelementptr inbounds [6 x double], [6 x double]* %3, i64 0, i64 1
  %8 = fmul double %4, %4
  %9 = fmul double %8, 2.500000e-01
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 48, i1 false) #3
  br label %10

10:                                               ; preds = %10, %2
  %11 = phi i32 [ 1, %2 ], [ %19, %10 ]
  %12 = phi double [ 1.000000e+00, %2 ], [ %17, %10 ]
  %13 = phi double [ 1.000000e+00, %2 ], [ %18, %10 ]
  %14 = mul nsw i32 %11, %11
  %15 = sitofp i32 %14 to double
  %16 = fdiv double %9, %15
  %17 = fmul double %12, %16
  %18 = fadd double %13, %17
  %19 = add nuw nsw i32 %11, 1
  %20 = fcmp ogt double %17, 0x3EB0C6F7A0B5ED8D
  br i1 %20, label %10, label %21

21:                                               ; preds = %10
  %22 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 0
  %23 = getelementptr inbounds [6 x double], [6 x double]* %3, i64 0, i64 0
  %24 = getelementptr inbounds [6 x double], [6 x double]* %3, i64 0, i64 2
  store double %18, double* %23, align 16
  %25 = fmul double %4, 5.000000e-01
  %26 = fcmp ogt double %25, 0x3EB0C6F7A0B5ED8D
  br i1 %26, label %27, label %38

27:                                               ; preds = %21, %27
  %28 = phi i32 [ %31, %27 ], [ 1, %21 ]
  %29 = phi double [ %35, %27 ], [ %25, %21 ]
  %30 = phi double [ %36, %27 ], [ %25, %21 ]
  %31 = add nuw nsw i32 %28, 1
  %32 = mul nsw i32 %31, %28
  %33 = sitofp i32 %32 to double
  %34 = fdiv double %9, %33
  %35 = fmul double %29, %34
  %36 = fadd double %30, %35
  %37 = fcmp ogt double %35, 0x3EB0C6F7A0B5ED8D
  br i1 %37, label %27, label %38

38:                                               ; preds = %27, %21
  %39 = phi double [ %25, %21 ], [ %36, %27 ]
  store double %39, double* %7, align 8
  %40 = bitcast double* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %40, i8 0, i64 32, i1 false) #3
  %41 = insertelement <2 x double> undef, double %18, i32 0
  %42 = insertelement <2 x double> %41, double %39, i32 1
  %43 = insertelement <2 x double> undef, double %5, i32 0
  %44 = shufflevector <2 x double> %43, <2 x double> undef, <2 x i32> zeroinitializer
  %45 = fdiv <2 x double> %42, %44
  %46 = bitcast %class.SkGaussFilter* %0 to <2 x double>*
  store <2 x double> %45, <2 x double>* %46, align 8
  %47 = extractelement <2 x double> %45, i32 1
  %48 = fcmp ogt double %47, 1.000000e-02
  br i1 %48, label %53, label %49

49:                                               ; preds = %38
  %50 = extractelement <2 x double> %45, i32 0
  %51 = fadd double %50, 0.000000e+00
  %52 = fdiv double %50, %51
  store double %52, double* %22, align 8
  br label %199

53:                                               ; preds = %38, %71
  %54 = phi double [ %75, %71 ], [ %18, %38 ]
  %55 = phi double [ %74, %71 ], [ %39, %38 ]
  %56 = phi i64 [ %63, %71 ], [ 1, %38 ]
  %57 = trunc i64 %56 to i32
  %58 = shl i32 %57, 1
  %59 = sitofp i32 %58 to double
  %60 = fdiv double %59, %4
  %61 = fmul double %55, %60
  %62 = fsub double %54, %61
  %63 = add nuw i64 %56, 1
  %64 = and i64 %63, 4294967295
  %65 = getelementptr inbounds [6 x double], [6 x double]* %3, i64 0, i64 %64
  store double %62, double* %65, align 8
  %66 = fdiv double %62, %5
  %67 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %64
  store double %66, double* %67, align 8
  %68 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %63
  %69 = load double, double* %68, align 8
  %70 = fcmp ogt double %69, 1.000000e-02
  br i1 %70, label %71, label %76

71:                                               ; preds = %53
  %72 = getelementptr inbounds [6 x double], [6 x double]* %3, i64 0, i64 %56
  %73 = getelementptr inbounds [6 x double], [6 x double]* %3, i64 0, i64 %63
  %74 = load double, double* %73, align 8
  %75 = load double, double* %72, align 8
  br label %53

76:                                               ; preds = %53
  %77 = trunc i64 %63 to i32
  %78 = add nsw i32 %77, -1
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %80, label %101

80:                                               ; preds = %76
  %81 = sext i32 %78 to i64
  %82 = add nsw i64 %81, -1
  %83 = and i64 %81, 3
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %96, label %85

85:                                               ; preds = %80, %85
  %86 = phi i64 [ %93, %85 ], [ %81, %80 ]
  %87 = phi double [ %92, %85 ], [ 0.000000e+00, %80 ]
  %88 = phi i64 [ %94, %85 ], [ %83, %80 ]
  %89 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %86
  %90 = load double, double* %89, align 8
  %91 = fmul double %90, 2.000000e+00
  %92 = fadd double %87, %91
  %93 = add nsw i64 %86, -1
  %94 = add i64 %88, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %85, !llvm.loop !2

96:                                               ; preds = %85, %80
  %97 = phi i64 [ %81, %80 ], [ %93, %85 ]
  %98 = phi double [ 0.000000e+00, %80 ], [ %92, %85 ]
  %99 = phi double [ undef, %80 ], [ %92, %85 ]
  %100 = icmp ult i64 %82, 3
  br i1 %100, label %101, label %156

101:                                              ; preds = %96, %156, %76
  %102 = phi i1 [ false, %76 ], [ true, %156 ], [ true, %96 ]
  %103 = phi double [ 0.000000e+00, %76 ], [ %99, %96 ], [ %177, %156 ]
  %104 = extractelement <2 x double> %45, i32 0
  %105 = fadd double %104, %103
  %106 = fdiv double %104, %105
  store double %106, double* %22, align 8
  %107 = icmp eq i64 %64, 1
  br i1 %107, label %180, label %108

108:                                              ; preds = %101
  %109 = add nsw i64 %64, -1
  %110 = icmp ult i64 %109, 2
  br i1 %110, label %111, label %113

111:                                              ; preds = %154, %108
  %112 = phi i64 [ 1, %108 ], [ %115, %154 ]
  br label %183

113:                                              ; preds = %108
  %114 = and i64 %109, -2
  %115 = or i64 %109, 1
  %116 = insertelement <2 x double> undef, double %105, i32 0
  %117 = shufflevector <2 x double> %116, <2 x double> undef, <2 x i32> zeroinitializer
  %118 = add nsw i64 %114, -2
  %119 = lshr exact i64 %118, 1
  %120 = add nuw i64 %119, 1
  %121 = and i64 %120, 1
  %122 = icmp eq i64 %118, 0
  br i1 %122, label %145, label %123

123:                                              ; preds = %113
  %124 = sub nuw i64 %120, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %140, %125 ]
  %127 = phi i64 [ %124, %123 ], [ %141, %125 ]
  %128 = or i64 %126, 1
  %129 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %128
  %130 = bitcast double* %129 to <2 x double>*
  %131 = load <2 x double>, <2 x double>* %130, align 8
  %132 = fdiv <2 x double> %131, %117
  %133 = bitcast double* %129 to <2 x double>*
  store <2 x double> %132, <2 x double>* %133, align 8
  %134 = or i64 %126, 3
  %135 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %134
  %136 = bitcast double* %135 to <2 x double>*
  %137 = load <2 x double>, <2 x double>* %136, align 8
  %138 = fdiv <2 x double> %137, %117
  %139 = bitcast double* %135 to <2 x double>*
  store <2 x double> %138, <2 x double>* %139, align 8
  %140 = add i64 %126, 4
  %141 = add i64 %127, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %125, !llvm.loop !4

143:                                              ; preds = %125
  %144 = or i64 %140, 1
  br label %145

145:                                              ; preds = %143, %113
  %146 = phi i64 [ 1, %113 ], [ %144, %143 ]
  %147 = icmp eq i64 %121, 0
  br i1 %147, label %154, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %146
  %150 = bitcast double* %149 to <2 x double>*
  %151 = load <2 x double>, <2 x double>* %150, align 8
  %152 = fdiv <2 x double> %151, %117
  %153 = bitcast double* %149 to <2 x double>*
  store <2 x double> %152, <2 x double>* %153, align 8
  br label %154

154:                                              ; preds = %145, %148
  %155 = icmp eq i64 %109, %114
  br i1 %155, label %180, label %111

156:                                              ; preds = %96, %156
  %157 = phi i64 [ %178, %156 ], [ %97, %96 ]
  %158 = phi double [ %177, %156 ], [ %98, %96 ]
  %159 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %157
  %160 = load double, double* %159, align 8
  %161 = fmul double %160, 2.000000e+00
  %162 = fadd double %158, %161
  %163 = add nsw i64 %157, -1
  %164 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %163
  %165 = load double, double* %164, align 8
  %166 = fmul double %165, 2.000000e+00
  %167 = fadd double %162, %166
  %168 = add nsw i64 %157, -2
  %169 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %168
  %170 = load double, double* %169, align 8
  %171 = fmul double %170, 2.000000e+00
  %172 = fadd double %167, %171
  %173 = add nsw i64 %157, -3
  %174 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %173
  %175 = load double, double* %174, align 8
  %176 = fmul double %175, 2.000000e+00
  %177 = fadd double %172, %176
  %178 = add nsw i64 %157, -4
  %179 = icmp sgt i64 %178, 0
  br i1 %179, label %156, label %101

180:                                              ; preds = %183, %154, %101
  br i1 %102, label %181, label %199

181:                                              ; preds = %180
  %182 = sext i32 %78 to i64
  br label %190

183:                                              ; preds = %111, %183
  %184 = phi i64 [ %188, %183 ], [ %112, %111 ]
  %185 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %184
  %186 = load double, double* %185, align 8
  %187 = fdiv double %186, %105
  store double %187, double* %185, align 8
  %188 = add nuw nsw i64 %184, 1
  %189 = icmp eq i64 %188, %64
  br i1 %189, label %180, label %183, !llvm.loop !6

190:                                              ; preds = %190, %181
  %191 = phi i64 [ %182, %181 ], [ %197, %190 ]
  %192 = phi double [ 0.000000e+00, %181 ], [ %196, %190 ]
  %193 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 0, i64 %191
  %194 = load double, double* %193, align 8
  %195 = fmul double %194, 2.000000e+00
  %196 = fadd double %192, %195
  %197 = add nsw i64 %191, -1
  %198 = icmp sgt i64 %197, 0
  br i1 %198, label %190, label %199

199:                                              ; preds = %190, %49, %180
  %200 = phi i32 [ %77, %180 ], [ 1, %49 ], [ %77, %190 ]
  %201 = phi double [ 0.000000e+00, %180 ], [ 0.000000e+00, %49 ], [ %196, %190 ]
  %202 = fsub double 1.000000e+00, %201
  store double %202, double* %22, align 8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #3
  %203 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %0, i64 0, i32 1
  store i32 %200, i32* %203, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !7, !5}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
