; ModuleID = '../../net/reporting/reporting_browsing_data_remover.cc'
source_filename = "../../net/reporting/reporting_browsing_data_remover.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::ReportingCache" = type { i32 (...)** }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"**, %"class.std::__1::__compressed_pair.46" }
%"struct.net::ReportingReport" = type <{ %"class.net::NetworkIsolationKey", %class.GURL, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.11", i32, [4 x i8], %"class.base::TimeTicks", i32, i32, i32, [4 x i8] }>
%"class.net::NetworkIsolationKey" = type { i8, %"class.absl::optional", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.net::SchemefulSite" }
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.3" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.3" = type { %"class.absl::optional_internal::optional_data.4" }
%"class.absl::optional_internal::optional_data.4" = type { %"class.absl::optional_internal::optional_data_base.5" }
%"class.absl::optional_internal::optional_data_base.5" = type { %"class.absl::optional_internal::optional_data_dtor_base.6" }
%"class.absl::optional_internal::optional_data_dtor_base.6" = type { i8, %union.anon.7 }
%union.anon.7 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %class.GURL* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1 }
%union.anon.1 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.base::Value"* }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.14" }
%"union.absl::variant_internal::DestructibleUnionImpl.14" = type { %"union.absl::variant_internal::DestructibleUnionImpl.15" }
%"union.absl::variant_internal::DestructibleUnionImpl.15" = type { %"union.absl::variant_internal::DestructibleUnionImpl.16" }
%"union.absl::variant_internal::DestructibleUnionImpl.16" = type { %"union.absl::variant_internal::DestructibleUnionImpl.17" }
%"union.absl::variant_internal::DestructibleUnionImpl.17" = type { %"class.std::__1::basic_string" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.net::ReportingReport"** }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.url::Origin" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>

$_ZNSt3__16__treeIN3url6OriginENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net28ReportingBrowsingDataRemover18RemoveBrowsingDataEPNS_14ReportingCacheEmRKN4base17RepeatingCallbackIFbRK4GURLEEE(%"class.net::ReportingCache"*, i64, %"class.base::RepeatingCallback"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::set", align 8
  %7 = alloca %class.GURL, align 8
  %8 = and i64 %1, 1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %115, label %10

10:                                               ; preds = %3
  %11 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #8
  %14 = bitcast %"class.net::ReportingCache"* %0 to void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*)***
  %15 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*)**, void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*)** %15, i64 3
  %17 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*)** %16, align 8
  call void %17(%"class.net::ReportingCache"* %0, %"class.std::__1::vector"* nonnull %4) #8
  %18 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #8
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #8
  %22 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %12, align 8
  %23 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %13, align 8
  %24 = icmp eq %"struct.net::ReportingReport"** %22, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %10
  %26 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %27 = bitcast %"struct.net::ReportingReport"*** %20 to i64*
  %28 = bitcast %"class.std::__1::vector"* %5 to i64*
  %29 = bitcast %"struct.net::ReportingReport"*** %21 to i64*
  br label %49

30:                                               ; preds = %112, %10
  %31 = bitcast %"class.net::ReportingCache"* %0 to void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*, i32)***
  %32 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*, i32)**, void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*, i32)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*, i32)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*, i32)** %32, i64 9
  %34 = load void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*, i32)*, void (%"class.net::ReportingCache"*, %"class.std::__1::vector"*, i32)** %33, align 8
  call void %34(%"class.net::ReportingCache"* %0, %"class.std::__1::vector"* nonnull dereferenceable(24) %5, i32 7) #8
  %35 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %19, align 8
  %36 = icmp eq %"struct.net::ReportingReport"** %35, null
  br i1 %36, label %41, label %37

37:                                               ; preds = %30
  %38 = ptrtoint %"struct.net::ReportingReport"** %35 to i64
  %39 = bitcast %"struct.net::ReportingReport"*** %20 to i64*
  store i64 %38, i64* %39, align 8
  %40 = bitcast %"struct.net::ReportingReport"** %35 to i8*
  call void @_ZdlPv(i8* %40) #9
  br label %41

41:                                               ; preds = %30, %37
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #8
  %42 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %12, align 8
  %43 = icmp eq %"struct.net::ReportingReport"** %42, null
  br i1 %43, label %48, label %44

44:                                               ; preds = %41
  %45 = ptrtoint %"struct.net::ReportingReport"** %42 to i64
  %46 = bitcast %"struct.net::ReportingReport"*** %13 to i64*
  store i64 %45, i64* %46, align 8
  %47 = bitcast %"struct.net::ReportingReport"** %42 to i8*
  call void @_ZdlPv(i8* %47) #9
  br label %48

48:                                               ; preds = %41, %44
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  br label %115

49:                                               ; preds = %25, %112
  %50 = phi %"struct.net::ReportingReport"** [ %22, %25 ], [ %113, %112 ]
  %51 = load %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %50, align 8
  %52 = ptrtoint %"struct.net::ReportingReport"* %51 to i64
  %53 = getelementptr inbounds %"struct.net::ReportingReport", %"struct.net::ReportingReport"* %51, i64 0, i32 1
  %54 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %26, align 8
  %55 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %54, i64 0, i32 1
  %56 = bitcast void ()** %55 to i1 (%"class.base::internal::BindStateBase"*, %class.GURL*)**
  %57 = load i1 (%"class.base::internal::BindStateBase"*, %class.GURL*)*, i1 (%"class.base::internal::BindStateBase"*, %class.GURL*)** %56, align 8
  %58 = call zeroext i1 %57(%"class.base::internal::BindStateBase"* %54, %class.GURL* dereferenceable(120) %53) #8
  br i1 %58, label %59, label %112

59:                                               ; preds = %49
  %60 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %20, align 8
  %61 = load %"struct.net::ReportingReport"**, %"struct.net::ReportingReport"*** %21, align 8
  %62 = icmp eq %"struct.net::ReportingReport"** %60, %61
  %63 = ptrtoint %"struct.net::ReportingReport"** %61 to i64
  br i1 %62, label %68, label %64

64:                                               ; preds = %59
  %65 = bitcast %"struct.net::ReportingReport"** %60 to i64*
  store i64 %52, i64* %65, align 8
  %66 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %60, i64 1
  %67 = ptrtoint %"struct.net::ReportingReport"** %66 to i64
  store i64 %67, i64* %27, align 8
  br label %112

68:                                               ; preds = %59
  %69 = ptrtoint %"struct.net::ReportingReport"** %60 to i64
  %70 = load i64, i64* %28, align 8
  %71 = sub i64 %69, %70
  %72 = ashr exact i64 %71, 3
  %73 = add nsw i64 %72, 1
  %74 = icmp ugt i64 %73, 2305843009213693951
  br i1 %74, label %75, label %77

75:                                               ; preds = %68
  %76 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %76) #10
  unreachable

77:                                               ; preds = %68
  %78 = sub i64 %63, %70
  %79 = ashr exact i64 %78, 3
  %80 = icmp ult i64 %79, 1152921504606846975
  br i1 %80, label %81, label %89

81:                                               ; preds = %77
  %82 = ashr exact i64 %78, 2
  %83 = icmp ult i64 %82, %73
  %84 = select i1 %83, i64 %73, i64 %82
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %94, label %86

86:                                               ; preds = %81
  %87 = icmp ugt i64 %84, 2305843009213693951
  br i1 %87, label %88, label %89

88:                                               ; preds = %86
  call void @abort() #10
  unreachable

89:                                               ; preds = %86, %77
  %90 = phi i64 [ %84, %86 ], [ 2305843009213693951, %77 ]
  %91 = shl i64 %90, 3
  %92 = call i8* @_Znwm(i64 %91) #9
  %93 = bitcast i8* %92 to %"struct.net::ReportingReport"**
  br label %94

94:                                               ; preds = %89, %81
  %95 = phi i64 [ %90, %89 ], [ 0, %81 ]
  %96 = phi i8* [ %92, %89 ], [ null, %81 ]
  %97 = phi %"struct.net::ReportingReport"** [ %93, %89 ], [ null, %81 ]
  %98 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %97, i64 %72
  %99 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %97, i64 %95
  %100 = ptrtoint %"struct.net::ReportingReport"** %99 to i64
  %101 = bitcast %"struct.net::ReportingReport"** %98 to i64*
  store i64 %52, i64* %101, align 8
  %102 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %98, i64 1
  %103 = ptrtoint %"struct.net::ReportingReport"** %102 to i64
  %104 = ptrtoint %"struct.net::ReportingReport"** %97 to i64
  %105 = icmp sgt i64 %71, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %94
  %107 = inttoptr i64 %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %107, i64 %71, i1 false) #8
  br label %108

108:                                              ; preds = %106, %94
  store i64 %104, i64* %28, align 8
  store i64 %103, i64* %27, align 8
  store i64 %100, i64* %29, align 8
  %109 = icmp eq i64 %70, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %108
  %111 = inttoptr i64 %70 to i8*
  call void @_ZdlPv(i8* %111) #9
  br label %112

112:                                              ; preds = %110, %108, %64, %49
  %113 = getelementptr inbounds %"struct.net::ReportingReport"*, %"struct.net::ReportingReport"** %50, i64 1
  %114 = icmp eq %"struct.net::ReportingReport"** %113, %23
  br i1 %114, label %30, label %49

115:                                              ; preds = %3, %48
  %116 = and i64 %1, 2
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %180, label %118

118:                                              ; preds = %115
  %119 = bitcast %"class.std::__1::set"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %119) #8
  %120 = bitcast %"class.net::ReportingCache"* %0 to void (%"class.std::__1::set"*, %"class.net::ReportingCache"*)***
  %121 = load void (%"class.std::__1::set"*, %"class.net::ReportingCache"*)**, void (%"class.std::__1::set"*, %"class.net::ReportingCache"*)*** %120, align 8
  %122 = getelementptr inbounds void (%"class.std::__1::set"*, %"class.net::ReportingCache"*)*, void (%"class.std::__1::set"*, %"class.net::ReportingCache"*)** %121, i64 15
  %123 = load void (%"class.std::__1::set"*, %"class.net::ReportingCache"*)*, void (%"class.std::__1::set"*, %"class.net::ReportingCache"*)** %122, align 8
  call void %123(%"class.std::__1::set"* nonnull sret %6, %"class.net::ReportingCache"* %0) #8
  %124 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %6, i64 0, i32 0, i32 0
  %125 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %124, align 8
  %126 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %6, i64 0, i32 0, i32 1, i32 0, i32 0
  %127 = icmp eq %"class.std::__1::__tree_end_node"* %125, %126
  br i1 %127, label %132, label %128

128:                                              ; preds = %118
  %129 = bitcast %class.GURL* %7 to i8*
  %130 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %131 = bitcast %"class.net::ReportingCache"* %0 to void (%"class.net::ReportingCache"*, %"class.url::Origin"*)***
  br label %136

132:                                              ; preds = %177, %118
  %133 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %6, i64 0, i32 0
  %134 = bitcast %"class.std::__1::__tree_end_node"* %126 to %"class.std::__1::__tree_node"**
  %135 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %134, align 8
  call void @_ZNSt3__16__treeIN3url6OriginENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* nonnull %133, %"class.std::__1::__tree_node"* %135) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %119) #8
  br label %180

136:                                              ; preds = %128, %177
  %137 = phi %"class.std::__1::__tree_end_node"* [ %125, %128 ], [ %178, %177 ]
  %138 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %137, i64 4
  %139 = bitcast %"class.std::__1::__tree_end_node"* %138 to %"class.url::Origin"*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %129) #8
  call void @_ZNK3url6Origin6GetURLEv(%class.GURL* nonnull sret %7, %"class.url::Origin"* %139) #8
  %140 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %130, align 8
  %141 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %140, i64 0, i32 1
  %142 = bitcast void ()** %141 to i1 (%"class.base::internal::BindStateBase"*, %class.GURL*)**
  %143 = load i1 (%"class.base::internal::BindStateBase"*, %class.GURL*)*, i1 (%"class.base::internal::BindStateBase"*, %class.GURL*)** %142, align 8
  %144 = call zeroext i1 %143(%"class.base::internal::BindStateBase"* %140, %class.GURL* nonnull dereferenceable(120) %7) #8
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %129) #8
  br i1 %144, label %145, label %149

145:                                              ; preds = %136
  %146 = load void (%"class.net::ReportingCache"*, %"class.url::Origin"*)**, void (%"class.net::ReportingCache"*, %"class.url::Origin"*)*** %131, align 8
  %147 = getelementptr inbounds void (%"class.net::ReportingCache"*, %"class.url::Origin"*)*, void (%"class.net::ReportingCache"*, %"class.url::Origin"*)** %146, i64 17
  %148 = load void (%"class.net::ReportingCache"*, %"class.url::Origin"*)*, void (%"class.net::ReportingCache"*, %"class.url::Origin"*)** %147, align 8
  call void %148(%"class.net::ReportingCache"* %0, %"class.url::Origin"* dereferenceable(80) %139) #8
  br label %149

149:                                              ; preds = %145, %136
  %150 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %137, i64 1, i32 0
  %151 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %150, align 8
  %152 = icmp eq %"class.std::__1::__tree_node_base"* %151, null
  br i1 %152, label %153, label %161

153:                                              ; preds = %149
  %154 = bitcast %"class.std::__1::__tree_end_node"* %137 to %"class.std::__1::__tree_node_base"*
  %155 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %137, i64 2
  %156 = bitcast %"class.std::__1::__tree_end_node"* %155 to %"class.std::__1::__tree_end_node"**
  %157 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %156, align 8
  %158 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %157, i64 0, i32 0
  %159 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %158, align 8
  %160 = icmp eq %"class.std::__1::__tree_node_base"* %159, %154
  br i1 %160, label %177, label %168

161:                                              ; preds = %149, %161
  %162 = phi %"class.std::__1::__tree_node_base"* [ %164, %161 ], [ %151, %149 ]
  %163 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %162, i64 0, i32 0, i32 0
  %164 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %163, align 8
  %165 = icmp eq %"class.std::__1::__tree_node_base"* %164, null
  br i1 %165, label %166, label %161

166:                                              ; preds = %161
  %167 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %162, i64 0, i32 0
  br label %177

168:                                              ; preds = %153, %168
  %169 = phi %"class.std::__1::__tree_end_node"** [ %172, %168 ], [ %156, %153 ]
  %170 = bitcast %"class.std::__1::__tree_end_node"** %169 to %"class.std::__1::__tree_node_base"**
  %171 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %170, align 8
  %172 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %171, i64 0, i32 2
  %173 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %172, align 8
  %174 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %173, i64 0, i32 0
  %175 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %174, align 8
  %176 = icmp eq %"class.std::__1::__tree_node_base"* %175, %171
  br i1 %176, label %177, label %168

177:                                              ; preds = %168, %153, %166
  %178 = phi %"class.std::__1::__tree_end_node"* [ %167, %166 ], [ %157, %153 ], [ %173, %168 ]
  %179 = icmp eq %"class.std::__1::__tree_end_node"* %178, %126
  br i1 %179, label %132, label %136

180:                                              ; preds = %115, %132
  %181 = bitcast %"class.net::ReportingCache"* %0 to void (%"class.net::ReportingCache"*)***
  %182 = load void (%"class.net::ReportingCache"*)**, void (%"class.net::ReportingCache"*)*** %181, align 8
  %183 = getelementptr inbounds void (%"class.net::ReportingCache"*)*, void (%"class.net::ReportingCache"*)** %182, i64 25
  %184 = load void (%"class.net::ReportingCache"*)*, void (%"class.net::ReportingCache"*)** %183, align 8
  call void %184(%"class.net::ReportingCache"* %0) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK3url6Origin6GetURLEv(%class.GURL* sret, %"class.url::Origin"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net28ReportingBrowsingDataRemover21RemoveAllBrowsingDataEPNS_14ReportingCacheEm(%"class.net::ReportingCache"*, i64) local_unnamed_addr #0 align 2 {
  %3 = and i64 %1, 1
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.net::ReportingCache"* %0 to void (%"class.net::ReportingCache"*, i32)***
  %7 = load void (%"class.net::ReportingCache"*, i32)**, void (%"class.net::ReportingCache"*, i32)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.net::ReportingCache"*, i32)*, void (%"class.net::ReportingCache"*, i32)** %7, i64 10
  %9 = load void (%"class.net::ReportingCache"*, i32)*, void (%"class.net::ReportingCache"*, i32)** %8, align 8
  tail call void %9(%"class.net::ReportingCache"* %0, i32 7) #8
  br label %10

10:                                               ; preds = %2, %5
  %11 = and i64 %1, 2
  %12 = icmp eq i64 %11, 0
  %13 = bitcast %"class.net::ReportingCache"* %0 to void (%"class.net::ReportingCache"*)***
  br i1 %12, label %18, label %14

14:                                               ; preds = %10
  %15 = load void (%"class.net::ReportingCache"*)**, void (%"class.net::ReportingCache"*)*** %13, align 8
  %16 = getelementptr inbounds void (%"class.net::ReportingCache"*)*, void (%"class.net::ReportingCache"*)** %15, i64 18
  %17 = load void (%"class.net::ReportingCache"*)*, void (%"class.net::ReportingCache"*)** %16, align 8
  tail call void %17(%"class.net::ReportingCache"* %0) #8
  br label %18

18:                                               ; preds = %10, %14
  %19 = load void (%"class.net::ReportingCache"*)**, void (%"class.net::ReportingCache"*)*** %13, align 8
  %20 = getelementptr inbounds void (%"class.net::ReportingCache"*)*, void (%"class.net::ReportingCache"*)** %19, i64 25
  %21 = load void (%"class.net::ReportingCache"*)*, void (%"class.net::ReportingCache"*)** %20, align 8
  tail call void %21(%"class.net::ReportingCache"* %0) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIN3url6OriginENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIN3url6OriginENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #8
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIN3url6OriginENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #8
  %10 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1
  tail call void @_ZN3url6OriginD1Ev(%"class.url::Origin"* %10) #8
  %11 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %11) #9
  ret void

12:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3url6OriginD1Ev(%"class.url::Origin"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
