; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsQuad.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsQuad.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDPoint = type { double, double }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkDConic = type { %struct.SkDQuad, float }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%struct.SkDQuadPair = type { [5 x %struct.SkDPoint] }
%class.SkTQuad = type { %class.SkTCurve, %struct.SkDQuad }
%class.SkTCurve = type { i32 (...)** }
%struct.SkDRect = type { double, double, double, double }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }

$_ZN8SkTCurveD2Ev = comdat any

$_ZN7SkTQuadD0Ev = comdat any

$_ZNK7SkTQuadixEi = comdat any

$_ZN7SkTQuadixEi = comdat any

$_ZNK7SkTQuad9collapsedEv = comdat any

$_ZNK7SkTQuad14controlsInsideEv = comdat any

$_ZN7SkTQuad9debugInitEv = comdat any

$_ZNK7SkTQuad7dxdyAtTEd = comdat any

$_ZNK7SkTQuad14hullIntersectsERK7SkDQuadPb = comdat any

$_ZNK7SkTQuad14hullIntersectsERK8SkTCurvePb = comdat any

$_ZNK7SkTQuad7IsConicEv = comdat any

$_ZNK7SkTQuad4makeER12SkArenaAlloc = comdat any

$_ZNK7SkTQuad16maxIntersectionsEv = comdat any

$_ZNK7SkTQuad8otherPtsEiPPK8SkDPoint = comdat any

$_ZNK7SkTQuad10pointCountEv = comdat any

$_ZNK7SkTQuad9pointLastEv = comdat any

$_ZNK7SkTQuad5ptAtTEd = comdat any

$_ZNK7SkTQuad9subDivideEddP8SkTCurve = comdat any

$_ZNK8SkDPoint18approximatelyEqualERKS_ = comdat any

$_ZZN12SkArenaAlloc4makeIZNS_4makeI7SkTQuadJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS3_ENUlPcE_8__invokeESC_ = comdat any

@.str = private unnamed_addr constant [53 x i8] c"../../third_party/skia/src/pathops/SkPathOpsQuad.cpp\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"!q\00", align 1
@__const._ZNK7SkDQuad9subDivideERK8SkDPointS2_dd.i = private unnamed_addr constant %class.SkIntersections <{ [13 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x [13 x double]] [[13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF]], [2 x i16] [i16 -21846, i16 -21846], [2 x i8] c"\AA\AA", i8 -86, i8 -86, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA" }>, align 8
@_ZTV7SkTQuad = hidden unnamed_addr constant { [24 x i8*] } { [24 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkTCurve*)* @_ZN8SkTCurveD2Ev to i8*), i8* bitcast (void (%class.SkTQuad*)* @_ZN7SkTQuadD0Ev to i8*), i8* bitcast (%struct.SkDPoint* (%class.SkTQuad*, i32)* @_ZNK7SkTQuadixEi to i8*), i8* bitcast (%struct.SkDPoint* (%class.SkTQuad*, i32)* @_ZN7SkTQuadixEi to i8*), i8* bitcast (i1 (%class.SkTQuad*)* @_ZNK7SkTQuad9collapsedEv to i8*), i8* bitcast (i1 (%class.SkTQuad*)* @_ZNK7SkTQuad14controlsInsideEv to i8*), i8* bitcast (void (%class.SkTQuad*)* @_ZN7SkTQuad9debugInitEv to i8*), i8* bitcast ({ double, double } (%class.SkTQuad*, double)* @_ZNK7SkTQuad7dxdyAtTEd to i8*), i8* bitcast (i1 (%class.SkTQuad*, %struct.SkDQuad*, i8*)* @_ZNK7SkTQuad14hullIntersectsERK7SkDQuadPb to i8*), i8* bitcast (i1 (%class.SkTQuad*, %struct.SkDConic*, i8*)* @_ZNK7SkTQuad14hullIntersectsERK8SkDConicPb to i8*), i8* bitcast (i1 (%class.SkTQuad*, %struct.SkDCubic*, i8*)* @_ZNK7SkTQuad14hullIntersectsERK8SkDCubicPb to i8*), i8* bitcast (i1 (%class.SkTQuad*, %class.SkTCurve*, i8*)* @_ZNK7SkTQuad14hullIntersectsERK8SkTCurvePb to i8*), i8* bitcast (i32 (%class.SkTQuad*, %class.SkIntersections*, %struct.SkDLine*)* @_ZNK7SkTQuad12intersectRayEP15SkIntersectionsRK7SkDLine to i8*), i8* bitcast (i1 (%class.SkTQuad*)* @_ZNK7SkTQuad7IsConicEv to i8*), i8* bitcast (%class.SkTCurve* (%class.SkTQuad*, %class.SkArenaAlloc*)* @_ZNK7SkTQuad4makeER12SkArenaAlloc to i8*), i8* bitcast (i32 (%class.SkTQuad*)* @_ZNK7SkTQuad16maxIntersectionsEv to i8*), i8* bitcast (void (%class.SkTQuad*, i32, %struct.SkDPoint**)* @_ZNK7SkTQuad8otherPtsEiPPK8SkDPoint to i8*), i8* bitcast (i32 (%class.SkTQuad*)* @_ZNK7SkTQuad10pointCountEv to i8*), i8* bitcast (i32 (%class.SkTQuad*)* @_ZNK7SkTQuad9pointLastEv to i8*), i8* bitcast ({ double, double } (%class.SkTQuad*, double)* @_ZNK7SkTQuad5ptAtTEd to i8*), i8* bitcast (void (%class.SkTQuad*, %struct.SkDRect*)* @_ZNK7SkTQuad9setBoundsEP7SkDRect to i8*), i8* bitcast (void (%class.SkTQuad*, double, double, %class.SkTCurve*)* @_ZNK7SkTQuad9subDivideEddP8SkTCurve to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkDQuad14hullIntersectsERKS_Pb(%struct.SkDQuad*, %struct.SkDQuad* nocapture readonly dereferenceable(48), i8* nocapture) local_unnamed_addr #0 align 2 {
  %4 = bitcast %struct.SkDQuad* %1 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 1, i32 0
  %7 = bitcast double* %6 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2, i32 0
  %10 = bitcast double* %9 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %13 = bitcast double* %12 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %16 = bitcast double* %15 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = fsub <2 x double> %17, %14
  %19 = bitcast %struct.SkDQuad* %0 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = fsub <2 x double> %20, %14
  %22 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %23 = fmul <2 x double> %22, %21
  %24 = extractelement <2 x double> %23, i32 0
  %25 = extractelement <2 x double> %23, i32 1
  %26 = fsub double %25, %24
  %27 = tail call double @llvm.fabs.f64(double %26) #11
  %28 = fcmp olt double %27, 0x3E80000000000000
  br i1 %28, label %53, label %29

29:                                               ; preds = %3
  %30 = fsub <2 x double> %5, %14
  %31 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %32 = fmul <2 x double> %31, %30
  %33 = extractelement <2 x double> %32, i32 0
  %34 = extractelement <2 x double> %32, i32 1
  %35 = fsub double %34, %33
  %36 = fmul double %26, %35
  %37 = fcmp ule double %36, 0.000000e+00
  %38 = tail call double @llvm.fabs.f64(double %35) #11
  %39 = fcmp olt double %38, 0x3CD0000000000000
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %53

41:                                               ; preds = %29
  %42 = fsub <2 x double> %8, %14
  %43 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %44 = fmul <2 x double> %43, %42
  %45 = extractelement <2 x double> %44, i32 0
  %46 = extractelement <2 x double> %44, i32 1
  %47 = fsub double %46, %45
  %48 = fmul double %26, %47
  %49 = fcmp ule double %48, 0.000000e+00
  %50 = tail call double @llvm.fabs.f64(double %47) #11
  %51 = fcmp olt double %50, 0x3CD0000000000000
  %52 = or i1 %49, %51
  br i1 %52, label %225, label %53

53:                                               ; preds = %29, %41, %225, %3
  %54 = phi i8 [ 1, %3 ], [ 0, %225 ], [ 0, %41 ], [ 0, %29 ]
  %55 = bitcast %struct.SkDQuad* %0 to <2 x double>*
  %56 = load <2 x double>, <2 x double>* %55, align 8
  %57 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %58 = bitcast double* %57 to <2 x double>*
  %59 = load <2 x double>, <2 x double>* %58, align 8
  %60 = fsub <2 x double> %59, %56
  %61 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %62 = bitcast double* %61 to <2 x double>*
  %63 = load <2 x double>, <2 x double>* %62, align 8
  %64 = fsub <2 x double> %63, %56
  %65 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %66 = fmul <2 x double> %65, %64
  %67 = extractelement <2 x double> %66, i32 0
  %68 = extractelement <2 x double> %66, i32 1
  %69 = fsub double %68, %67
  %70 = tail call double @llvm.fabs.f64(double %69) #11
  %71 = fcmp olt double %70, 0x3E80000000000000
  br i1 %71, label %273, label %237

72:                                               ; preds = %328
  %73 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 0
  %74 = load double, double* %73, align 8
  %75 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0, i32 0
  %76 = load double, double* %75, align 8
  %77 = fcmp oeq double %74, %76
  br i1 %77, label %78, label %84

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 1
  %80 = load double, double* %79, align 8
  %81 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0, i32 1
  %82 = load double, double* %81, align 8
  %83 = fcmp oeq double %80, %82
  br i1 %83, label %220, label %84

84:                                               ; preds = %78, %72
  %85 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %86 = load double, double* %85, align 8
  %87 = fcmp oeq double %86, %76
  br i1 %87, label %88, label %94

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 1
  %90 = load double, double* %89, align 8
  %91 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0, i32 1
  %92 = load double, double* %91, align 8
  %93 = fcmp oeq double %90, %92
  br i1 %93, label %220, label %94

94:                                               ; preds = %84, %88
  %95 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2, i32 0
  %96 = load double, double* %95, align 8
  %97 = fcmp oeq double %74, %96
  br i1 %97, label %98, label %104

98:                                               ; preds = %94
  %99 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 1
  %100 = load double, double* %99, align 8
  %101 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2, i32 1
  %102 = load double, double* %101, align 8
  %103 = fcmp oeq double %100, %102
  br i1 %103, label %220, label %104

104:                                              ; preds = %98, %94
  %105 = fcmp oeq double %86, %96
  %106 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 1
  %107 = load double, double* %106, align 8
  br i1 %105, label %108, label %112

108:                                              ; preds = %104
  %109 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2, i32 1
  %110 = load double, double* %109, align 8
  %111 = fcmp oeq double %107, %110
  br i1 %111, label %220, label %112

112:                                              ; preds = %104, %108
  %113 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 1
  %114 = load double, double* %113, align 8
  %115 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %116 = load double, double* %115, align 8
  %117 = insertelement <2 x double> undef, double %116, i32 0
  %118 = insertelement <2 x double> %117, double %86, i32 1
  %119 = insertelement <2 x double> undef, double %74, i32 0
  %120 = shufflevector <2 x double> %119, <2 x double> undef, <2 x i32> zeroinitializer
  %121 = fsub <2 x double> %118, %120
  %122 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 1
  %123 = load double, double* %122, align 8
  %124 = insertelement <2 x double> undef, double %123, i32 0
  %125 = insertelement <2 x double> %124, double %107, i32 1
  %126 = insertelement <2 x double> undef, double %114, i32 0
  %127 = shufflevector <2 x double> %126, <2 x double> undef, <2 x i32> zeroinitializer
  %128 = fsub <2 x double> %125, %127
  %129 = fsub double %76, %74
  %130 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0, i32 1
  %131 = load double, double* %130, align 8
  %132 = fsub double %131, %114
  %133 = shufflevector <2 x double> %121, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %134 = shufflevector <2 x double> %133, <2 x double> %128, <2 x i32> <i32 0, i32 3>
  %135 = shufflevector <2 x double> %121, <2 x double> %128, <2 x i32> <i32 0, i32 2>
  %136 = fmul <2 x double> %134, %135
  %137 = extractelement <2 x double> %136, i32 0
  %138 = extractelement <2 x double> %136, i32 1
  %139 = fadd double %137, %138
  %140 = fmul <2 x double> %121, %121
  %141 = fmul <2 x double> %128, %128
  %142 = fadd <2 x double> %140, %141
  %143 = insertelement <2 x double> undef, double %129, i32 0
  %144 = shufflevector <2 x double> %143, <2 x double> undef, <2 x i32> zeroinitializer
  %145 = fmul <2 x double> %144, %121
  %146 = insertelement <2 x double> undef, double %132, i32 0
  %147 = shufflevector <2 x double> %146, <2 x double> undef, <2 x i32> zeroinitializer
  %148 = fmul <2 x double> %128, %147
  %149 = fadd <2 x double> %145, %148
  %150 = extractelement <2 x double> %142, i32 0
  %151 = extractelement <2 x double> %142, i32 1
  %152 = fmul double %151, %150
  %153 = fmul double %139, %139
  %154 = fsub double %152, %153
  %155 = shufflevector <2 x double> %142, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %156 = fmul <2 x double> %155, %149
  %157 = insertelement <2 x double> undef, double %139, i32 0
  %158 = shufflevector <2 x double> %157, <2 x double> undef, <2 x i32> zeroinitializer
  %159 = shufflevector <2 x double> %149, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %160 = fmul <2 x double> %158, %159
  %161 = fsub <2 x double> %156, %160
  %162 = fcmp ult double %154, 0.000000e+00
  br i1 %162, label %172, label %163

163:                                              ; preds = %112
  %164 = extractelement <2 x double> %161, i32 1
  %165 = fcmp oge double %164, 0.000000e+00
  %166 = extractelement <2 x double> %161, i32 0
  %167 = fcmp oge double %166, 0.000000e+00
  %168 = and i1 %165, %167
  %169 = fadd double %164, %166
  %170 = fcmp olt double %169, %154
  %171 = and i1 %168, %170
  br i1 %171, label %219, label %182

172:                                              ; preds = %112
  %173 = fcmp ole <2 x double> %161, zeroinitializer
  %174 = extractelement <2 x i1> %173, i32 0
  %175 = extractelement <2 x i1> %173, i32 1
  %176 = and i1 %175, %174
  %177 = extractelement <2 x double> %161, i32 0
  %178 = extractelement <2 x double> %161, i32 1
  %179 = fadd double %178, %177
  %180 = fcmp ogt double %179, %154
  %181 = and i1 %176, %180
  br i1 %181, label %219, label %182

182:                                              ; preds = %172, %163
  %183 = fsub double %96, %74
  %184 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2, i32 1
  %185 = load double, double* %184, align 8
  %186 = fsub double %185, %114
  %187 = insertelement <2 x double> undef, double %183, i32 0
  %188 = shufflevector <2 x double> %187, <2 x double> undef, <2 x i32> zeroinitializer
  %189 = shufflevector <2 x double> %133, <2 x double> %121, <2 x i32> <i32 0, i32 2>
  %190 = fmul <2 x double> %188, %189
  %191 = shufflevector <2 x double> %128, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %192 = insertelement <2 x double> undef, double %186, i32 0
  %193 = shufflevector <2 x double> %192, <2 x double> undef, <2 x i32> zeroinitializer
  %194 = fmul <2 x double> %191, %193
  %195 = fadd <2 x double> %190, %194
  %196 = fmul <2 x double> %142, %195
  %197 = shufflevector <2 x double> %195, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %198 = fmul <2 x double> %158, %197
  %199 = fsub <2 x double> %196, %198
  br i1 %162, label %209, label %200

200:                                              ; preds = %182
  %201 = extractelement <2 x double> %199, i32 0
  %202 = fcmp oge double %201, 0.000000e+00
  %203 = extractelement <2 x double> %199, i32 1
  %204 = fcmp oge double %203, 0.000000e+00
  %205 = and i1 %202, %204
  %206 = fadd double %201, %203
  %207 = fcmp olt double %206, %154
  %208 = and i1 %205, %207
  br i1 %208, label %219, label %220

209:                                              ; preds = %182
  %210 = fcmp ole <2 x double> %199, zeroinitializer
  %211 = extractelement <2 x i1> %210, i32 0
  %212 = extractelement <2 x i1> %210, i32 1
  %213 = and i1 %211, %212
  %214 = extractelement <2 x double> %199, i32 0
  %215 = extractelement <2 x double> %199, i32 1
  %216 = fadd double %214, %215
  %217 = fcmp ogt double %216, %154
  %218 = and i1 %213, %217
  br i1 %218, label %219, label %220

219:                                              ; preds = %209, %200, %172, %163
  br label %220

220:                                              ; preds = %209, %200, %98, %78, %328, %219, %108, %88
  %221 = phi i8 [ %329, %88 ], [ %329, %108 ], [ 0, %219 ], [ %329, %328 ], [ %329, %78 ], [ %329, %98 ], [ %329, %200 ], [ %329, %209 ]
  %222 = and i8 %221, 1
  store i8 %222, i8* %2, align 1
  br label %223

223:                                              ; preds = %225, %261, %316, %220
  %224 = phi i1 [ true, %220 ], [ false, %316 ], [ false, %261 ], [ false, %225 ]
  ret i1 %224

225:                                              ; preds = %41
  %226 = fsub <2 x double> %11, %14
  %227 = shufflevector <2 x double> %226, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %228 = fmul <2 x double> %18, %227
  %229 = extractelement <2 x double> %228, i32 0
  %230 = extractelement <2 x double> %228, i32 1
  %231 = fsub double %229, %230
  %232 = fmul double %26, %231
  %233 = fcmp ule double %232, 0.000000e+00
  %234 = tail call double @llvm.fabs.f64(double %231) #11
  %235 = fcmp olt double %234, 0x3CD0000000000000
  %236 = or i1 %233, %235
  br i1 %236, label %223, label %53

237:                                              ; preds = %53
  %238 = fsub <2 x double> %5, %56
  %239 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %240 = fmul <2 x double> %239, %238
  %241 = extractelement <2 x double> %240, i32 0
  %242 = extractelement <2 x double> %240, i32 1
  %243 = fsub double %242, %241
  %244 = fmul double %69, %243
  %245 = fcmp ule double %244, 0.000000e+00
  %246 = tail call double @llvm.fabs.f64(double %243) #11
  %247 = fcmp olt double %246, 0x3CD0000000000000
  %248 = or i1 %245, %247
  br i1 %248, label %249, label %273

249:                                              ; preds = %237
  %250 = fsub <2 x double> %8, %56
  %251 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %252 = fmul <2 x double> %251, %250
  %253 = extractelement <2 x double> %252, i32 0
  %254 = extractelement <2 x double> %252, i32 1
  %255 = fsub double %254, %253
  %256 = fmul double %69, %255
  %257 = fcmp ule double %256, 0.000000e+00
  %258 = tail call double @llvm.fabs.f64(double %255) #11
  %259 = fcmp olt double %258, 0x3CD0000000000000
  %260 = or i1 %257, %259
  br i1 %260, label %261, label %273

261:                                              ; preds = %249
  %262 = fsub <2 x double> %11, %56
  %263 = shufflevector <2 x double> %262, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %264 = fmul <2 x double> %60, %263
  %265 = extractelement <2 x double> %264, i32 0
  %266 = extractelement <2 x double> %264, i32 1
  %267 = fsub double %265, %266
  %268 = fmul double %69, %267
  %269 = fcmp ule double %268, 0.000000e+00
  %270 = tail call double @llvm.fabs.f64(double %267) #11
  %271 = fcmp olt double %270, 0x3CD0000000000000
  %272 = or i1 %269, %271
  br i1 %272, label %223, label %273

273:                                              ; preds = %261, %249, %237, %53
  %274 = phi i8 [ %54, %53 ], [ 0, %261 ], [ 0, %249 ], [ 0, %237 ]
  %275 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %276 = bitcast double* %275 to <2 x double>*
  %277 = load <2 x double>, <2 x double>* %276, align 8
  %278 = bitcast %struct.SkDQuad* %0 to <2 x double>*
  %279 = load <2 x double>, <2 x double>* %278, align 8
  %280 = fsub <2 x double> %279, %277
  %281 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %282 = bitcast double* %281 to <2 x double>*
  %283 = load <2 x double>, <2 x double>* %282, align 8
  %284 = fsub <2 x double> %283, %277
  %285 = shufflevector <2 x double> %280, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %286 = fmul <2 x double> %285, %284
  %287 = extractelement <2 x double> %286, i32 0
  %288 = extractelement <2 x double> %286, i32 1
  %289 = fsub double %288, %287
  %290 = tail call double @llvm.fabs.f64(double %289) #11
  %291 = fcmp olt double %290, 0x3E80000000000000
  br i1 %291, label %328, label %292

292:                                              ; preds = %273
  %293 = fsub <2 x double> %5, %277
  %294 = shufflevector <2 x double> %280, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %295 = fmul <2 x double> %294, %293
  %296 = extractelement <2 x double> %295, i32 0
  %297 = extractelement <2 x double> %295, i32 1
  %298 = fsub double %297, %296
  %299 = fmul double %289, %298
  %300 = fcmp ule double %299, 0.000000e+00
  %301 = tail call double @llvm.fabs.f64(double %298) #11
  %302 = fcmp olt double %301, 0x3CD0000000000000
  %303 = or i1 %300, %302
  br i1 %303, label %304, label %328

304:                                              ; preds = %292
  %305 = fsub <2 x double> %8, %277
  %306 = shufflevector <2 x double> %280, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %307 = fmul <2 x double> %306, %305
  %308 = extractelement <2 x double> %307, i32 0
  %309 = extractelement <2 x double> %307, i32 1
  %310 = fsub double %309, %308
  %311 = fmul double %289, %310
  %312 = fcmp ule double %311, 0.000000e+00
  %313 = tail call double @llvm.fabs.f64(double %310) #11
  %314 = fcmp olt double %313, 0x3CD0000000000000
  %315 = or i1 %312, %314
  br i1 %315, label %316, label %328

316:                                              ; preds = %304
  %317 = fsub <2 x double> %11, %277
  %318 = shufflevector <2 x double> %317, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %319 = fmul <2 x double> %280, %318
  %320 = extractelement <2 x double> %319, i32 0
  %321 = extractelement <2 x double> %319, i32 1
  %322 = fsub double %320, %321
  %323 = fmul double %289, %322
  %324 = fcmp ule double %323, 0.000000e+00
  %325 = tail call double @llvm.fabs.f64(double %322) #11
  %326 = fcmp olt double %325, 0x3CD0000000000000
  %327 = or i1 %324, %326
  br i1 %327, label %223, label %328

328:                                              ; preds = %316, %304, %292, %273
  %329 = phi i8 [ %274, %273 ], [ 0, %316 ], [ 0, %304 ], [ 0, %292 ]
  %330 = and i8 %329, 1
  %331 = icmp eq i8 %330, 0
  br i1 %331, label %220, label %72
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZNK7SkDQuad8otherPtsEiPPK8SkDPoint(%struct.SkDQuad*, i32, %struct.SkDPoint** nocapture) local_unnamed_addr #2 align 2 {
  %4 = xor i32 %1, 1
  %5 = sub nsw i32 %4, %1
  %6 = ashr i32 %5, 2
  %7 = xor i32 %6, -1
  %8 = and i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 %9
  store %struct.SkDPoint* %10, %struct.SkDPoint** %2, align 8
  %11 = xor i32 %1, 2
  %12 = sub nsw i32 %11, %1
  %13 = ashr i32 %12, 2
  %14 = xor i32 %13, -1
  %15 = and i32 %12, %14
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 %16
  %18 = getelementptr inbounds %struct.SkDPoint*, %struct.SkDPoint** %2, i64 1
  store %struct.SkDPoint* %17, %struct.SkDPoint** %18, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkDQuad14hullIntersectsERK8SkDConicPb(%struct.SkDQuad* nocapture readonly, %struct.SkDConic* dereferenceable(56), i8* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZNK7SkDQuad14hullIntersectsERKS_Pb(%struct.SkDQuad* %4, %struct.SkDQuad* dereferenceable(48) %0, i8* %2) #11
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkDQuad14hullIntersectsERK8SkDCubicPb(%struct.SkDQuad*, %struct.SkDCubic* dereferenceable(64), i8*) local_unnamed_addr #0 align 2 {
  %4 = tail call zeroext i1 @_ZNK8SkDCubic14hullIntersectsERK7SkDQuadPb(%struct.SkDCubic* %1, %struct.SkDQuad* dereferenceable(48) %0, i8* %2) #11
  ret i1 %4
}

declare zeroext i1 @_ZNK8SkDCubic14hullIntersectsERK7SkDQuadPb(%struct.SkDCubic*, %struct.SkDQuad* dereferenceable(48), i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZN7SkDQuad10AddValidTsEPdiS0_(double* nocapture readonly, i32, double* nocapture) local_unnamed_addr #4 align 2 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = zext i32 %1 to i64
  br label %9

7:                                                ; preds = %39, %3
  %8 = phi i32 [ 0, %3 ], [ %40, %39 ]
  ret i32 %8

9:                                                ; preds = %39, %5
  %10 = phi i64 [ 0, %5 ], [ %41, %39 ]
  %11 = phi i32 [ 0, %5 ], [ %40, %39 ]
  %12 = getelementptr inbounds double, double* %0, i64 %10
  %13 = load double, double* %12, align 8
  %14 = fcmp ogt double %13, 0xBE80000000000000
  %15 = fcmp olt double %13, 0x3FF0000020000000
  %16 = and i1 %14, %15
  br i1 %16, label %17, label %39

17:                                               ; preds = %9
  %18 = fcmp olt double %13, 0x3E80000000000000
  %19 = fcmp ogt double %13, 0x3FEFFFFFC0000000
  %20 = select i1 %19, double 1.000000e+00, double %13
  %21 = select i1 %18, double 0.000000e+00, double %20
  %22 = icmp sgt i32 %11, 0
  br i1 %22, label %23, label %35

23:                                               ; preds = %17
  %24 = zext i32 %11 to i64
  br label %27

25:                                               ; preds = %27
  %26 = icmp eq i64 %34, %24
  br i1 %26, label %35, label %27

27:                                               ; preds = %25, %23
  %28 = phi i64 [ 0, %23 ], [ %34, %25 ]
  %29 = getelementptr inbounds double, double* %2, i64 %28
  %30 = load double, double* %29, align 8
  %31 = fsub double %30, %21
  %32 = tail call double @llvm.fabs.f64(double %31) #11
  %33 = fcmp olt double %32, 0x3E80000000000000
  %34 = add nuw nsw i64 %28, 1
  br i1 %33, label %39, label %25

35:                                               ; preds = %25, %17
  %36 = add nsw i32 %11, 1
  %37 = sext i32 %11 to i64
  %38 = getelementptr inbounds double, double* %2, i64 %37
  store double %21, double* %38, align 8
  br label %39

39:                                               ; preds = %27, %9, %35
  %40 = phi i32 [ %36, %35 ], [ %11, %9 ], [ %11, %27 ]
  %41 = add nuw nsw i64 %10, 1
  %42 = icmp eq i64 %41, %6
  br i1 %42, label %7, label %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7SkDQuad11RootsValidTEdddPd(double, double, double, double* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca [2 x double], align 16
  %6 = bitcast [2 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #11
  %7 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %8 = bitcast [2 x double]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 16, i1 false)
  %9 = call i32 @_ZN7SkDQuad9RootsRealEdddPd(double %0, double %1, double %2, double* nonnull %7)
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %47

11:                                               ; preds = %4
  %12 = zext i32 %9 to i64
  br label %13

13:                                               ; preds = %43, %11
  %14 = phi i64 [ 0, %11 ], [ %45, %43 ]
  %15 = phi i32 [ 0, %11 ], [ %44, %43 ]
  %16 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 %14
  %17 = load double, double* %16, align 8
  %18 = fcmp ogt double %17, 0xBE80000000000000
  %19 = fcmp olt double %17, 0x3FF0000020000000
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %43

21:                                               ; preds = %13
  %22 = fcmp olt double %17, 0x3E80000000000000
  %23 = fcmp ogt double %17, 0x3FEFFFFFC0000000
  %24 = select i1 %23, double 1.000000e+00, double %17
  %25 = select i1 %22, double 0.000000e+00, double %24
  %26 = icmp sgt i32 %15, 0
  br i1 %26, label %27, label %39

27:                                               ; preds = %21
  %28 = zext i32 %15 to i64
  br label %31

29:                                               ; preds = %31
  %30 = icmp eq i64 %38, %28
  br i1 %30, label %39, label %31

31:                                               ; preds = %29, %27
  %32 = phi i64 [ 0, %27 ], [ %38, %29 ]
  %33 = getelementptr inbounds double, double* %3, i64 %32
  %34 = load double, double* %33, align 8
  %35 = fsub double %34, %25
  %36 = tail call double @llvm.fabs.f64(double %35) #11
  %37 = fcmp olt double %36, 0x3E80000000000000
  %38 = add nuw nsw i64 %32, 1
  br i1 %37, label %43, label %29

39:                                               ; preds = %29, %21
  %40 = add nsw i32 %15, 1
  %41 = sext i32 %15 to i64
  %42 = getelementptr inbounds double, double* %3, i64 %41
  store double %25, double* %42, align 8
  br label %43

43:                                               ; preds = %31, %39, %13
  %44 = phi i32 [ %40, %39 ], [ %15, %13 ], [ %15, %31 ]
  %45 = add nuw nsw i64 %14, 1
  %46 = icmp eq i64 %45, %12
  br i1 %46, label %47, label %13

47:                                               ; preds = %43, %4
  %48 = phi i32 [ 0, %4 ], [ %44, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #11
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7SkDQuad9RootsRealEdddPd(double, double, double, double* nocapture) local_unnamed_addr #0 align 2 {
  %5 = fcmp une double %0, 0.000000e+00
  br i1 %5, label %15, label %6

6:                                                ; preds = %4
  %7 = tail call double @llvm.fabs.f64(double %1) #11
  %8 = fcmp olt double %7, 0x3E80000000000000
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  store double 0.000000e+00, double* %3, align 8
  %10 = fcmp oeq double %2, 0.000000e+00
  %11 = zext i1 %10 to i32
  br label %60

12:                                               ; preds = %6
  %13 = fsub double -0.000000e+00, %2
  %14 = fdiv double %13, %1
  store double %14, double* %3, align 8
  br label %60

15:                                               ; preds = %4
  %16 = fmul double %0, 2.000000e+00
  %17 = insertelement <2 x double> undef, double %1, i32 0
  %18 = insertelement <2 x double> %17, double %2, i32 1
  %19 = insertelement <2 x double> undef, double %16, i32 0
  %20 = insertelement <2 x double> %19, double %0, i32 1
  %21 = fdiv <2 x double> %18, %20
  %22 = tail call double @llvm.fabs.f64(double %0) #11
  %23 = fcmp olt double %22, 0x3E80000000000000
  br i1 %23, label %24, label %39

24:                                               ; preds = %15
  %25 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %21)
  %26 = fcmp ogt <2 x double> %25, <double 0x4160000000000000, double 0x4160000000000000>
  %27 = extractelement <2 x i1> %26, i32 0
  %28 = extractelement <2 x i1> %26, i32 1
  %29 = or i1 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %24
  %31 = tail call double @llvm.fabs.f64(double %1) #11
  %32 = fcmp olt double %31, 0x3E80000000000000
  br i1 %32, label %33, label %36

33:                                               ; preds = %30
  store double 0.000000e+00, double* %3, align 8
  %34 = fcmp oeq double %2, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %60

36:                                               ; preds = %30
  %37 = fsub double -0.000000e+00, %2
  %38 = fdiv double %37, %1
  store double %38, double* %3, align 8
  br label %60

39:                                               ; preds = %24, %15
  %40 = extractelement <2 x double> %21, i32 0
  %41 = fmul double %40, %40
  %42 = extractelement <2 x double> %21, i32 1
  %43 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %41, double %42) #11
  %44 = xor i1 %43, true
  %45 = fcmp olt double %41, %42
  %46 = and i1 %45, %44
  br i1 %46, label %60, label %47

47:                                               ; preds = %39
  %48 = fcmp ogt double %41, %42
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = fsub double %41, %42
  %51 = tail call double @sqrt(double %50) #11
  br label %52

52:                                               ; preds = %49, %47
  %53 = phi double [ %51, %49 ], [ 0.000000e+00, %47 ]
  %54 = fsub double %53, %40
  store double %54, double* %3, align 8
  %55 = fsub double -0.000000e+00, %53
  %56 = fsub double %55, %40
  %57 = getelementptr inbounds double, double* %3, i64 1
  store double %56, double* %57, align 8
  %58 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %54, double %56) #11
  %59 = select i1 %58, i32 1, i32 2
  br label %60

60:                                               ; preds = %36, %33, %12, %9, %39, %52
  %61 = phi i32 [ %59, %52 ], [ 0, %39 ], [ %11, %9 ], [ 1, %12 ], [ %35, %33 ], [ 1, %36 ]
  ret i32 %61
}

declare zeroext i1 @_Z16AlmostDequalUlpsdd(double, double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkDQuad8isLinearEii(%struct.SkDQuad* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 %4, i32 1
  %6 = load double, double* %5, align 8
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 %7, i32 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 %7, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 %4, i32 0
  %13 = load double, double* %12, align 8
  %14 = insertelement <2 x double> undef, double %6, i32 0
  %15 = insertelement <2 x double> %14, double %11, i32 1
  %16 = insertelement <2 x double> undef, double %9, i32 0
  %17 = insertelement <2 x double> %16, double %13, i32 1
  %18 = fsub <2 x double> %15, %17
  %19 = fmul <2 x double> %18, %18
  %20 = extractelement <2 x double> %19, i32 0
  %21 = extractelement <2 x double> %19, i32 1
  %22 = fadd double %20, %21
  %23 = tail call double @sqrt(double %22) #11
  %24 = tail call double @llvm.fabs.f64(double %23) #11
  %25 = fcmp olt double %24, 0x3E80000000000000
  br i1 %25, label %35, label %26

26:                                               ; preds = %3
  %27 = fmul double %9, %13
  %28 = fmul double %6, %11
  %29 = fsub double %27, %28
  %30 = fdiv double 1.000000e+00, %23
  %31 = insertelement <2 x double> undef, double %30, i32 0
  %32 = shufflevector <2 x double> %31, <2 x double> undef, <2 x i32> zeroinitializer
  %33 = fmul <2 x double> %18, %32
  %34 = fmul double %30, %29
  br label %35

35:                                               ; preds = %3, %26
  %36 = phi double [ %34, %26 ], [ 0.000000e+00, %3 ]
  %37 = phi <2 x double> [ %33, %26 ], [ zeroinitializer, %3 ]
  %38 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %39 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 1
  %40 = bitcast double* %38 to <2 x double>*
  %41 = load <2 x double>, <2 x double>* %40, align 8
  %42 = fmul <2 x double> %37, %41
  %43 = extractelement <2 x double> %42, i32 0
  %44 = extractelement <2 x double> %42, i32 1
  %45 = fadd double %43, %44
  %46 = fadd double %36, %45
  %47 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 0
  %48 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 1
  %49 = load double, double* %48, align 8
  %50 = load double, double* %47, align 8
  %51 = fcmp olt double %49, %50
  %52 = select i1 %51, double %49, double %50
  %53 = extractelement <2 x double> %41, i32 0
  %54 = fcmp olt double %53, %52
  %55 = select i1 %54, double %53, double %52
  %56 = extractelement <2 x double> %41, i32 1
  %57 = fcmp olt double %56, %55
  %58 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %59 = load double, double* %58, align 8
  %60 = select i1 %57, double %56, double %55
  %61 = fcmp olt double %59, %60
  %62 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 1
  %63 = load double, double* %62, align 8
  %64 = select i1 %61, double %59, double %60
  %65 = fcmp olt double %63, %64
  %66 = select i1 %65, double %63, double %64
  %67 = fcmp olt double %50, %49
  %68 = select i1 %67, double* %48, double* %47
  %69 = load double, double* %68, align 8
  %70 = fcmp olt double %69, %53
  %71 = select i1 %70, double* %38, double* %68
  %72 = load double, double* %71, align 8
  %73 = fcmp olt double %72, %56
  %74 = select i1 %73, double* %39, double* %71
  %75 = load double, double* %74, align 8
  %76 = fcmp olt double %75, %59
  %77 = select i1 %76, double* %58, double* %74
  %78 = fsub double -0.000000e+00, %66
  %79 = fcmp oeq double %46, 0.000000e+00
  br i1 %79, label %91, label %80

80:                                               ; preds = %35
  %81 = load double, double* %77, align 8
  %82 = fcmp olt double %81, %63
  %83 = select i1 %82, double* %62, double* %77
  %84 = load double, double* %83, align 8
  %85 = fcmp olt double %84, %78
  %86 = select i1 %85, double %78, double %84
  %87 = tail call double @llvm.fabs.f64(double %46) #11
  %88 = fmul double %86, 0x3E80000000000000
  %89 = tail call double @llvm.fabs.f64(double %88) #11
  %90 = fcmp olt double %87, %89
  br label %91

91:                                               ; preds = %35, %80
  %92 = phi i1 [ true, %35 ], [ %90, %80 ]
  ret i1 %92
}

; Function Attrs: nounwind ssp uwtable
define hidden { double, double } @_ZNK7SkDQuad7dxdyAtTEd(%struct.SkDQuad* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %3 = fadd double %1, -1.000000e+00
  %4 = fmul double %1, 2.000000e+00
  %5 = fsub double 1.000000e+00, %4
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkDQuad* %0 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = insertelement <2 x double> undef, double %3, i32 0
  %11 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> zeroinitializer
  %12 = fmul <2 x double> %11, %9
  %13 = bitcast double* %6 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = insertelement <2 x double> undef, double %5, i32 0
  %16 = shufflevector <2 x double> %15, <2 x double> undef, <2 x i32> zeroinitializer
  %17 = fmul <2 x double> %16, %14
  %18 = fadd <2 x double> %12, %17
  %19 = bitcast double* %7 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = insertelement <2 x double> undef, double %1, i32 0
  %22 = shufflevector <2 x double> %21, <2 x double> undef, <2 x i32> zeroinitializer
  %23 = fmul <2 x double> %20, %22
  %24 = fadd <2 x double> %18, %23
  %25 = extractelement <2 x double> %24, i32 0
  %26 = fcmp oeq double %25, 0.000000e+00
  %27 = extractelement <2 x double> %24, i32 1
  %28 = fcmp oeq double %27, 0.000000e+00
  %29 = and i1 %26, %28
  br i1 %29, label %30, label %37

30:                                               ; preds = %2
  %31 = fcmp oeq double %1, 0.000000e+00
  %32 = fcmp oeq double %1, 1.000000e+00
  %33 = or i1 %31, %32
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  %35 = fsub <2 x double> %20, %9
  br label %37

36:                                               ; preds = %30
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 210, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #11
  br label %37

37:                                               ; preds = %34, %36, %2
  %38 = phi <2 x double> [ %35, %34 ], [ %24, %36 ], [ %24, %2 ]
  %39 = extractelement <2 x double> %38, i32 0
  %40 = insertvalue { double, double } undef, double %39, 0
  %41 = extractelement <2 x double> %38, i32 1
  %42 = insertvalue { double, double } %40, double %41, 1
  ret { double, double } %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* nocapture readonly, double) local_unnamed_addr #6 align 2 {
  %3 = fcmp oeq double %1, 0.000000e+00
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = bitcast %struct.SkDQuad* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  br label %38

7:                                                ; preds = %2
  %8 = fcmp oeq double %1, 1.000000e+00
  br i1 %8, label %9, label %13

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  br label %38

13:                                               ; preds = %7
  %14 = fsub double 1.000000e+00, %1
  %15 = fmul double %14, %14
  %16 = fmul double %14, 2.000000e+00
  %17 = fmul double %16, %1
  %18 = fmul double %1, %1
  %19 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %20 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %21 = bitcast %struct.SkDQuad* %0 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 8
  %23 = insertelement <2 x double> undef, double %15, i32 0
  %24 = shufflevector <2 x double> %23, <2 x double> undef, <2 x i32> zeroinitializer
  %25 = fmul <2 x double> %24, %22
  %26 = bitcast double* %19 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 8
  %28 = insertelement <2 x double> undef, double %17, i32 0
  %29 = shufflevector <2 x double> %28, <2 x double> undef, <2 x i32> zeroinitializer
  %30 = fmul <2 x double> %29, %27
  %31 = fadd <2 x double> %25, %30
  %32 = bitcast double* %20 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 8
  %34 = insertelement <2 x double> undef, double %18, i32 0
  %35 = shufflevector <2 x double> %34, <2 x double> undef, <2 x i32> zeroinitializer
  %36 = fmul <2 x double> %35, %33
  %37 = fadd <2 x double> %31, %36
  br label %38

38:                                               ; preds = %13, %9, %4
  %39 = phi <2 x double> [ %6, %4 ], [ %12, %9 ], [ %37, %13 ]
  %40 = extractelement <2 x double> %39, i32 0
  %41 = insertvalue { double, double } undef, double %40, 0
  %42 = extractelement <2 x double> %39, i32 1
  %43 = insertvalue { double, double } %41, double %42, 1
  ret { double, double } %43
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7SkDQuad12monotonicInXEv(%struct.SkDQuad* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %7 = load double, double* %6, align 8
  %8 = fsub double %3, %5
  %9 = fsub double %7, %5
  %10 = fmul double %8, %9
  %11 = fcmp ole double %10, 0.000000e+00
  ret i1 %11
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7SkDQuad12monotonicInYEv(%struct.SkDQuad* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 1
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 1
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 1
  %7 = load double, double* %6, align 8
  %8 = fsub double %3, %5
  %9 = fsub double %7, %5
  %10 = fmul double %8, %9
  %11 = fcmp ole double %10, 0.000000e+00
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkDQuad9subDivideEdd(%struct.SkDQuad* noalias nocapture sret, %struct.SkDQuad* nocapture readonly, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp oeq double %2, 0.000000e+00
  %6 = fcmp oeq double %3, 1.000000e+00
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %4
  %9 = bitcast %struct.SkDQuad* %0 to i8*
  %10 = bitcast %struct.SkDQuad* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 48, i1 false)
  br label %127

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0, i32 0
  br i1 %5, label %15, label %13

13:                                               ; preds = %11
  %14 = fcmp oeq double %2, 1.000000e+00
  br i1 %14, label %18, label %22

15:                                               ; preds = %11
  %16 = bitcast %struct.SkDQuad* %1 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  br label %42

18:                                               ; preds = %13
  %19 = getelementptr inbounds double, double* %12, i64 4
  %20 = bitcast double* %19 to <2 x double>*
  %21 = load <2 x double>, <2 x double>* %20, align 8
  br label %42

22:                                               ; preds = %13
  %23 = getelementptr inbounds double, double* %12, i64 2
  %24 = getelementptr inbounds double, double* %12, i64 4
  %25 = bitcast %struct.SkDQuad* %1 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 8
  %27 = bitcast double* %23 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = fsub <2 x double> %28, %26
  %30 = insertelement <2 x double> undef, double %2, i32 0
  %31 = shufflevector <2 x double> %30, <2 x double> undef, <2 x i32> zeroinitializer
  %32 = fmul <2 x double> %29, %31
  %33 = fadd <2 x double> %26, %32
  %34 = bitcast double* %24 to <2 x double>*
  %35 = load <2 x double>, <2 x double>* %34, align 8
  %36 = fsub <2 x double> %35, %28
  %37 = fmul <2 x double> %36, %31
  %38 = fadd <2 x double> %28, %37
  %39 = fsub <2 x double> %38, %33
  %40 = fmul <2 x double> %39, %31
  %41 = fadd <2 x double> %33, %40
  br label %42

42:                                               ; preds = %15, %18, %22
  %43 = phi <2 x double> [ %17, %15 ], [ %21, %18 ], [ %41, %22 ]
  %44 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0, i32 1
  %45 = fadd double %2, %3
  %46 = fmul double %45, 5.000000e-01
  %47 = fcmp oeq double %46, 0.000000e+00
  br i1 %47, label %50, label %48

48:                                               ; preds = %42
  %49 = fcmp oeq double %46, 1.000000e+00
  br i1 %49, label %55, label %59

50:                                               ; preds = %42
  %51 = load double, double* %12, align 8
  %52 = load double, double* %44, align 8
  %53 = insertelement <2 x double> undef, double %51, i32 0
  %54 = insertelement <2 x double> %53, double %52, i32 1
  br label %81

55:                                               ; preds = %48
  %56 = getelementptr inbounds double, double* %12, i64 4
  %57 = bitcast double* %56 to <2 x double>*
  %58 = load <2 x double>, <2 x double>* %57, align 8
  br label %81

59:                                               ; preds = %48
  %60 = load double, double* %12, align 8
  %61 = getelementptr inbounds double, double* %12, i64 2
  %62 = getelementptr inbounds double, double* %12, i64 4
  %63 = load double, double* %44, align 8
  %64 = bitcast double* %61 to <2 x double>*
  %65 = load <2 x double>, <2 x double>* %64, align 8
  %66 = insertelement <2 x double> undef, double %60, i32 0
  %67 = insertelement <2 x double> %66, double %63, i32 1
  %68 = fsub <2 x double> %65, %67
  %69 = insertelement <2 x double> undef, double %46, i32 0
  %70 = shufflevector <2 x double> %69, <2 x double> undef, <2 x i32> zeroinitializer
  %71 = fmul <2 x double> %70, %68
  %72 = fadd <2 x double> %67, %71
  %73 = bitcast double* %62 to <2 x double>*
  %74 = load <2 x double>, <2 x double>* %73, align 8
  %75 = fsub <2 x double> %74, %65
  %76 = fmul <2 x double> %70, %75
  %77 = fadd <2 x double> %65, %76
  %78 = fsub <2 x double> %77, %72
  %79 = fmul <2 x double> %70, %78
  %80 = fadd <2 x double> %72, %79
  br label %81

81:                                               ; preds = %50, %55, %59
  %82 = phi <2 x double> [ %54, %50 ], [ %58, %55 ], [ %80, %59 ]
  %83 = fcmp oeq double %3, 0.000000e+00
  br i1 %83, label %85, label %84

84:                                               ; preds = %81
  br i1 %6, label %90, label %94

85:                                               ; preds = %81
  %86 = load double, double* %12, align 8
  %87 = load double, double* %44, align 8
  %88 = insertelement <2 x double> undef, double %86, i32 0
  %89 = insertelement <2 x double> %88, double %87, i32 1
  br label %116

90:                                               ; preds = %84
  %91 = getelementptr inbounds double, double* %12, i64 4
  %92 = bitcast double* %91 to <2 x double>*
  %93 = load <2 x double>, <2 x double>* %92, align 8
  br label %116

94:                                               ; preds = %84
  %95 = load double, double* %12, align 8
  %96 = getelementptr inbounds double, double* %12, i64 2
  %97 = getelementptr inbounds double, double* %12, i64 4
  %98 = load double, double* %44, align 8
  %99 = bitcast double* %96 to <2 x double>*
  %100 = load <2 x double>, <2 x double>* %99, align 8
  %101 = insertelement <2 x double> undef, double %95, i32 0
  %102 = insertelement <2 x double> %101, double %98, i32 1
  %103 = fsub <2 x double> %100, %102
  %104 = insertelement <2 x double> undef, double %3, i32 0
  %105 = shufflevector <2 x double> %104, <2 x double> undef, <2 x i32> zeroinitializer
  %106 = fmul <2 x double> %103, %105
  %107 = fadd <2 x double> %102, %106
  %108 = bitcast double* %97 to <2 x double>*
  %109 = load <2 x double>, <2 x double>* %108, align 8
  %110 = fsub <2 x double> %109, %100
  %111 = fmul <2 x double> %110, %105
  %112 = fadd <2 x double> %100, %111
  %113 = fsub <2 x double> %112, %107
  %114 = fmul <2 x double> %113, %105
  %115 = fadd <2 x double> %107, %114
  br label %116

116:                                              ; preds = %85, %90, %94
  %117 = phi <2 x double> [ %89, %85 ], [ %93, %90 ], [ %115, %94 ]
  %118 = fmul <2 x double> %82, <double 2.000000e+00, double 2.000000e+00>
  %119 = fadd <2 x double> %43, %117
  %120 = fmul <2 x double> %119, <double 5.000000e-01, double 5.000000e-01>
  %121 = fsub <2 x double> %118, %120
  %122 = bitcast %struct.SkDQuad* %0 to <2 x double>*
  store <2 x double> %43, <2 x double>* %122, align 8
  %123 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %124 = bitcast double* %123 to <2 x double>*
  store <2 x double> %121, <2 x double>* %124, align 8
  %125 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %126 = bitcast double* %125 to <2 x double>*
  store <2 x double> %117, <2 x double>* %126, align 8
  br label %127

127:                                              ; preds = %116, %8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK7SkDQuad5alignEiP8SkDPoint(%struct.SkDQuad* nocapture readonly, i32, %struct.SkDPoint* nocapture) local_unnamed_addr #7 align 2 {
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 %4, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %8 = load double, double* %7, align 8
  %9 = fcmp oeq double %6, %8
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  store double %6, double* %11, align 8
  br label %12

12:                                               ; preds = %10, %3
  %13 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 %4, i32 1
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 1
  %16 = load double, double* %15, align 8
  %17 = fcmp oeq double %14, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 1
  store double %14, double* %19, align 8
  br label %20

20:                                               ; preds = %18, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { double, double } @_ZNK7SkDQuad9subDivideERK8SkDPointS2_dd(%struct.SkDQuad* nocapture readonly, %struct.SkDPoint* nocapture readonly dereferenceable(16), %struct.SkDPoint* nocapture readonly dereferenceable(16), double, double) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.SkDQuad, align 16
  %7 = alloca %struct.SkDLine, align 8
  %8 = alloca %struct.SkDLine, align 8
  %9 = alloca %class.SkIntersections, align 8
  %10 = bitcast %struct.SkDQuad* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %10) #11
  %11 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %6, i64 0, i32 0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %6, i64 0, i32 0, i64 2, i32 0
  %13 = bitcast %struct.SkDQuad* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 48, i1 false)
  call void @_ZNK7SkDQuad9subDivideEdd(%struct.SkDQuad* nonnull sret %6, %struct.SkDQuad* %0, double %3, double %4)
  %14 = bitcast %struct.SkDLine* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #11
  %15 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 1, i32 0
  %16 = bitcast %struct.SkDPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* align 8 %16, i64 16, i1 false)
  %17 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %18 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %19 = bitcast %struct.SkDPoint* %1 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = bitcast %struct.SkDQuad* %6 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 16
  %23 = fsub <2 x double> %20, %22
  %24 = bitcast double* %11 to <2 x double>*
  %25 = load <2 x double>, <2 x double>* %24, align 16
  %26 = fadd <2 x double> %23, %25
  %27 = bitcast double* %15 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 8
  %28 = bitcast %struct.SkDLine* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %28) #11
  %29 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %8, i64 0, i32 0, i64 1, i32 0
  %30 = bitcast %struct.SkDPoint* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* align 8 %30, i64 16, i1 false)
  %31 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  %32 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 1
  %33 = bitcast %struct.SkDPoint* %2 to <2 x double>*
  %34 = load <2 x double>, <2 x double>* %33, align 8
  %35 = bitcast double* %12 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 16
  %37 = fsub <2 x double> %34, %36
  %38 = fadd <2 x double> %25, %37
  %39 = bitcast double* %29 to <2 x double>*
  store <2 x double> %38, <2 x double>* %39, align 8
  %40 = bitcast %class.SkIntersections* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %40) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %40, i8* align 8 bitcast (%class.SkIntersections* @__const._ZNK7SkDQuad9subDivideERK8SkDPointS2_dd.i to i8*), i64 464, i1 false)
  %41 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 8
  store i8 0, i8* %41, align 1
  %42 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 4, i64 0
  %43 = bitcast i8* %42 to i16*
  store i16 0, i16* %43, align 4
  %44 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 448, i1 false) #11
  store i8 1, i8* %44, align 8
  %45 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 5
  store i8 0, i8* %45, align 2
  %46 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 3, i64 0
  %47 = bitcast i16* %46 to i32*
  store i32 0, i32* %47, align 8
  %48 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 6
  store i8 0, i8* %48, align 1
  %49 = call i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections* nonnull %9, %struct.SkDLine* nonnull dereferenceable(32) %7, %struct.SkDLine* nonnull dereferenceable(32) %8) #11
  %50 = load i8, i8* %45, align 2
  %51 = icmp eq i8 %50, 1
  br i1 %51, label %52, label %69

52:                                               ; preds = %5
  %53 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 2, i64 0, i64 0
  %54 = load double, double* %53, align 8
  %55 = fcmp ult double %54, 0.000000e+00
  br i1 %55, label %69, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 2, i64 1, i64 0
  %58 = load double, double* %57, align 8
  %59 = fcmp ult double %58, 0.000000e+00
  br i1 %59, label %69, label %60

60:                                               ; preds = %56
  %61 = bitcast %class.SkIntersections* %9 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %9, i64 0, i32 0, i64 0, i32 1
  %64 = bitcast double* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = fcmp oeq double %3, 0.000000e+00
  %67 = fcmp oeq double %4, 0.000000e+00
  %68 = or i1 %66, %67
  br i1 %68, label %76, label %91

69:                                               ; preds = %5, %52, %56
  %70 = bitcast double* %15 to <2 x double>*
  %71 = load <2 x double>, <2 x double>* %70, align 8
  %72 = bitcast double* %29 to <2 x double>*
  %73 = load <2 x double>, <2 x double>* %72, align 8
  %74 = fadd <2 x double> %71, %73
  %75 = fmul <2 x double> %74, <double 5.000000e-01, double 5.000000e-01>
  br label %152

76:                                               ; preds = %60
  %77 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 0
  %78 = load double, double* %77, align 8
  %79 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %80 = load double, double* %79, align 8
  %81 = fcmp oeq double %78, %80
  %82 = bitcast double %78 to i64
  %83 = select i1 %81, i64 %82, i64 %62
  %84 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 1
  %85 = load double, double* %84, align 8
  %86 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 1
  %87 = load double, double* %86, align 8
  %88 = fcmp oeq double %85, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %76
  %90 = bitcast double %85 to i64
  br label %91

91:                                               ; preds = %89, %76, %60
  %92 = phi i64 [ %62, %60 ], [ %83, %76 ], [ %83, %89 ]
  %93 = phi i64 [ %65, %60 ], [ %65, %76 ], [ %90, %89 ]
  %94 = fcmp oeq double %3, 1.000000e+00
  %95 = fcmp oeq double %4, 1.000000e+00
  %96 = or i1 %94, %95
  br i1 %96, label %97, label %112

97:                                               ; preds = %91
  %98 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %99 = load double, double* %98, align 8
  %100 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %101 = load double, double* %100, align 8
  %102 = fcmp oeq double %99, %101
  %103 = bitcast double %99 to i64
  %104 = select i1 %102, i64 %103, i64 %92
  %105 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 1
  %106 = load double, double* %105, align 8
  %107 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 1
  %108 = load double, double* %107, align 8
  %109 = fcmp oeq double %106, %108
  br i1 %109, label %110, label %112

110:                                              ; preds = %97
  %111 = bitcast double %106 to i64
  br label %112

112:                                              ; preds = %110, %97, %91
  %113 = phi i64 [ %92, %91 ], [ %104, %97 ], [ %104, %110 ]
  %114 = phi i64 [ %93, %91 ], [ %93, %97 ], [ %111, %110 ]
  %115 = bitcast i64 %113 to double
  %116 = load double, double* %17, align 8
  %117 = fptrunc double %115 to float
  %118 = fptrunc double %116 to float
  %119 = call zeroext i1 @_Z16AlmostBequalUlpsff(float %117, float %118) #11
  br i1 %119, label %120, label %123

120:                                              ; preds = %112
  %121 = bitcast %struct.SkDPoint* %1 to i64*
  %122 = load i64, i64* %121, align 8
  br label %130

123:                                              ; preds = %112
  %124 = load double, double* %31, align 8
  %125 = fptrunc double %124 to float
  %126 = call zeroext i1 @_Z16AlmostBequalUlpsff(float %117, float %125) #11
  br i1 %126, label %127, label %130

127:                                              ; preds = %123
  %128 = bitcast %struct.SkDPoint* %2 to i64*
  %129 = load i64, i64* %128, align 8
  br label %130

130:                                              ; preds = %123, %127, %120
  %131 = phi i64 [ %122, %120 ], [ %129, %127 ], [ %113, %123 ]
  %132 = bitcast i64 %114 to double
  %133 = load double, double* %18, align 8
  %134 = fptrunc double %132 to float
  %135 = fptrunc double %133 to float
  %136 = call zeroext i1 @_Z16AlmostBequalUlpsff(float %134, float %135) #11
  br i1 %136, label %137, label %140

137:                                              ; preds = %130
  %138 = bitcast double* %18 to i64*
  %139 = load i64, i64* %138, align 8
  br label %147

140:                                              ; preds = %130
  %141 = load double, double* %32, align 8
  %142 = fptrunc double %141 to float
  %143 = call zeroext i1 @_Z16AlmostBequalUlpsff(float %134, float %142) #11
  br i1 %143, label %144, label %147

144:                                              ; preds = %140
  %145 = bitcast double* %32 to i64*
  %146 = load i64, i64* %145, align 8
  br label %147

147:                                              ; preds = %140, %144, %137
  %148 = phi i64 [ %139, %137 ], [ %146, %144 ], [ %114, %140 ]
  %149 = insertelement <2 x i64> undef, i64 %131, i32 0
  %150 = insertelement <2 x i64> %149, i64 %148, i32 1
  %151 = bitcast <2 x i64> %150 to <2 x double>
  br label %152

152:                                              ; preds = %147, %69
  %153 = phi <2 x double> [ %151, %147 ], [ %75, %69 ]
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %40) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %28) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %10) #11
  %154 = extractelement <2 x double> %153, i32 0
  %155 = insertvalue { double, double } undef, double %154, 0
  %156 = extractelement <2 x double> %153, i32 1
  %157 = insertvalue { double, double } %155, double %156, 1
  ret { double, double } %157
}

declare i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections*, %struct.SkDLine* dereferenceable(32), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkDQuad6chopAtEd(%struct.SkDQuadPair* noalias nocapture sret, %struct.SkDQuad* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.SkDQuadPair, %struct.SkDQuadPair* %0, i64 0, i32 0, i64 0, i32 0
  %6 = getelementptr inbounds double, double* %4, i64 2
  %7 = bitcast %struct.SkDQuad* %1 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = getelementptr inbounds double, double* %4, i64 4
  %10 = bitcast double* %6 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = getelementptr inbounds double, double* %5, i64 2
  %13 = fsub <2 x double> %11, %8
  %14 = insertelement <2 x double> undef, double %2, i32 0
  %15 = shufflevector <2 x double> %14, <2 x double> undef, <2 x i32> zeroinitializer
  %16 = fmul <2 x double> %13, %15
  %17 = fadd <2 x double> %8, %16
  %18 = getelementptr inbounds double, double* %5, i64 4
  %19 = getelementptr inbounds double, double* %5, i64 6
  %20 = bitcast double* %9 to <2 x double>*
  %21 = load <2 x double>, <2 x double>* %20, align 8
  %22 = fsub <2 x double> %21, %11
  %23 = fmul <2 x double> %22, %15
  %24 = fadd <2 x double> %11, %23
  %25 = getelementptr inbounds double, double* %5, i64 8
  %26 = bitcast %struct.SkDQuadPair* %0 to <2 x double>*
  store <2 x double> %8, <2 x double>* %26, align 8
  %27 = bitcast double* %12 to <2 x double>*
  store <2 x double> %17, <2 x double>* %27, align 8
  %28 = fsub <2 x double> %24, %17
  %29 = fmul <2 x double> %28, %15
  %30 = fadd <2 x double> %17, %29
  %31 = bitcast double* %18 to <2 x double>*
  store <2 x double> %30, <2 x double>* %31, align 8
  %32 = bitcast double* %19 to <2 x double>*
  store <2 x double> %24, <2 x double>* %32, align 8
  %33 = bitcast double* %25 to <2 x double>*
  store <2 x double> %21, <2 x double>* %33, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN7SkDQuad11FindExtremaEPKdPd(double* nocapture readonly, double* nocapture) local_unnamed_addr #7 align 2 {
  %3 = load double, double* %0, align 8
  %4 = getelementptr inbounds double, double* %0, i64 2
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds double, double* %0, i64 4
  %7 = load double, double* %6, align 8
  %8 = fsub double %3, %5
  %9 = fsub double %8, %5
  %10 = fadd double %7, %9
  %11 = fcmp olt double %8, 0.000000e+00
  %12 = fsub double -0.000000e+00, %8
  %13 = fsub double -0.000000e+00, %10
  %14 = select i1 %11, double %12, double %8
  %15 = select i1 %11, double %13, double %10
  %16 = fcmp une double %15, 0.000000e+00
  %17 = fcmp une double %14, 0.000000e+00
  %18 = and i1 %17, %16
  %19 = fcmp ult double %14, %15
  %20 = and i1 %19, %18
  br i1 %20, label %21, label %25

21:                                               ; preds = %2
  %22 = fdiv double %14, %15
  %23 = fcmp oeq double %22, 0.000000e+00
  br i1 %23, label %25, label %24

24:                                               ; preds = %21
  store double %22, double* %1, align 8
  br label %25

25:                                               ; preds = %2, %21, %24
  %26 = phi i32 [ 0, %2 ], [ 1, %24 ], [ 0, %21 ]
  ret i32 %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7SkDQuad6SetABCEPKdPdS2_S2_(double* nocapture readonly, double* nocapture, double* nocapture, double* nocapture) local_unnamed_addr #7 align 2 {
  %5 = bitcast double* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast double* %1 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds double, double* %0, i64 2
  %9 = load double, double* %8, align 8
  %10 = fmul double %9, 2.000000e+00
  store double %10, double* %2, align 8
  %11 = getelementptr inbounds double, double* %0, i64 4
  %12 = load double, double* %11, align 8
  store double %12, double* %3, align 8
  %13 = load double, double* %2, align 8
  %14 = fsub double %13, %12
  store double %14, double* %2, align 8
  %15 = load double, double* %1, align 8
  %16 = fsub double %15, %14
  store double %16, double* %1, align 8
  %17 = load double, double* %3, align 8
  %18 = load double, double* %2, align 8
  %19 = fsub double %18, %17
  store double %19, double* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK7SkTQuad12intersectRayEP15SkIntersectionsRK7SkDLine(%class.SkTQuad*, %class.SkIntersections*, %struct.SkDLine* dereferenceable(32)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections* %1, %struct.SkDQuad* dereferenceable(48) %4, %struct.SkDLine* dereferenceable(32) %2) #11
  ret i32 %5
}

declare i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections*, %struct.SkDQuad* dereferenceable(48), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkTQuad14hullIntersectsERK8SkDConicPb(%class.SkTQuad* nocapture readonly, %struct.SkDConic* dereferenceable(56), i8* nocapture) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0
  %6 = tail call zeroext i1 @_ZNK7SkDQuad14hullIntersectsERKS_Pb(%struct.SkDQuad* %5, %struct.SkDQuad* dereferenceable(48) %4, i8* %2) #11
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkTQuad14hullIntersectsERK8SkDCubicPb(%class.SkTQuad*, %struct.SkDCubic* dereferenceable(64), i8*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1
  %5 = tail call zeroext i1 @_ZNK8SkDCubic14hullIntersectsERK7SkDQuadPb(%struct.SkDCubic* %1, %struct.SkDQuad* dereferenceable(48) %4, i8* %2) #11
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkTQuad9setBoundsEP7SkDRect(%class.SkTQuad*, %struct.SkDRect*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1
  tail call void @_ZN7SkDRect9setBoundsERK7SkDQuadS2_dd(%struct.SkDRect* %1, %struct.SkDQuad* dereferenceable(48) %3, %struct.SkDQuad* dereferenceable(48) %3, double 0.000000e+00, double 1.000000e+00) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTCurveD2Ev(%class.SkTCurve*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7SkTQuadD0Ev(%class.SkTQuad*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.SkTQuad* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %struct.SkDPoint* @_ZNK7SkTQuadixEi(%class.SkTQuad*, i32) unnamed_addr #0 comdat align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 %3
  ret %struct.SkDPoint* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %struct.SkDPoint* @_ZN7SkTQuadixEi(%class.SkTQuad*, i32) unnamed_addr #0 comdat align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 %3
  ret %struct.SkDPoint* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK7SkTQuad9collapsedEv(%class.SkTQuad*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 0
  %3 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 1
  %4 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %2, %struct.SkDPoint* dereferenceable(16) %3) #11
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 2
  %7 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %2, %struct.SkDPoint* dereferenceable(16) %6) #11
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i1 [ false, %1 ], [ %7, %5 ]
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK7SkTQuad14controlsInsideEv(%class.SkTQuad*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 1, i32 0
  %4 = bitcast double* %2 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = bitcast double* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fsub <2 x double> %5, %7
  %9 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 2, i32 0
  %10 = bitcast double* %9 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = fsub <2 x double> %5, %11
  %13 = fmul <2 x double> %8, %12
  %14 = extractelement <2 x double> %13, i32 0
  %15 = extractelement <2 x double> %13, i32 1
  %16 = fadd double %14, %15
  %17 = fcmp ogt double %16, 0.000000e+00
  br i1 %17, label %18, label %25

18:                                               ; preds = %1
  %19 = fsub <2 x double> %7, %11
  %20 = fmul <2 x double> %12, %19
  %21 = extractelement <2 x double> %20, i32 0
  %22 = extractelement <2 x double> %20, i32 1
  %23 = fadd double %21, %22
  %24 = fcmp ogt double %23, 0.000000e+00
  br label %25

25:                                               ; preds = %1, %18
  %26 = phi i1 [ false, %1 ], [ %24, %18 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7SkTQuad9debugInitEv(%class.SkTQuad*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1
  %3 = bitcast %struct.SkDQuad* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 48, i1 false) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNK7SkTQuad7dxdyAtTEd(%class.SkTQuad*, double) unnamed_addr #0 comdat align 2 {
  %3 = fadd double %1, -1.000000e+00
  %4 = fmul double %1, 2.000000e+00
  %5 = fsub double 1.000000e+00, %4
  %6 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 0, i32 0
  %7 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 1, i32 0
  %8 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 2, i32 0
  %9 = bitcast double* %6 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = insertelement <2 x double> undef, double %3, i32 0
  %12 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> zeroinitializer
  %13 = fmul <2 x double> %12, %10
  %14 = bitcast double* %7 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = insertelement <2 x double> undef, double %5, i32 0
  %17 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> zeroinitializer
  %18 = fmul <2 x double> %17, %15
  %19 = fadd <2 x double> %13, %18
  %20 = bitcast double* %8 to <2 x double>*
  %21 = load <2 x double>, <2 x double>* %20, align 8
  %22 = insertelement <2 x double> undef, double %1, i32 0
  %23 = shufflevector <2 x double> %22, <2 x double> undef, <2 x i32> zeroinitializer
  %24 = fmul <2 x double> %21, %23
  %25 = fadd <2 x double> %19, %24
  %26 = extractelement <2 x double> %25, i32 0
  %27 = fcmp oeq double %26, 0.000000e+00
  %28 = extractelement <2 x double> %25, i32 1
  %29 = fcmp oeq double %28, 0.000000e+00
  %30 = and i1 %27, %29
  br i1 %30, label %31, label %38

31:                                               ; preds = %2
  %32 = fcmp oeq double %1, 0.000000e+00
  %33 = fcmp oeq double %1, 1.000000e+00
  %34 = or i1 %32, %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = fsub <2 x double> %21, %10
  br label %38

37:                                               ; preds = %31
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 210, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #11
  br label %38

38:                                               ; preds = %2, %35, %37
  %39 = phi <2 x double> [ %36, %35 ], [ %25, %37 ], [ %25, %2 ]
  %40 = extractelement <2 x double> %39, i32 0
  %41 = insertvalue { double, double } undef, double %40, 0
  %42 = extractelement <2 x double> %39, i32 1
  %43 = insertvalue { double, double } %41, double %42, 1
  ret { double, double } %43
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK7SkTQuad14hullIntersectsERK7SkDQuadPb(%class.SkTQuad*, %struct.SkDQuad* dereferenceable(48), i8*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1
  %5 = tail call zeroext i1 @_ZNK7SkDQuad14hullIntersectsERKS_Pb(%struct.SkDQuad* %1, %struct.SkDQuad* dereferenceable(48) %4, i8* %2)
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK7SkTQuad14hullIntersectsERK8SkTCurvePb(%class.SkTQuad*, %class.SkTCurve* dereferenceable(8), i8*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1
  %5 = bitcast %class.SkTCurve* %1 to i1 (%class.SkTCurve*, %struct.SkDQuad*, i8*)***
  %6 = load i1 (%class.SkTCurve*, %struct.SkDQuad*, i8*)**, i1 (%class.SkTCurve*, %struct.SkDQuad*, i8*)*** %5, align 8
  %7 = getelementptr inbounds i1 (%class.SkTCurve*, %struct.SkDQuad*, i8*)*, i1 (%class.SkTCurve*, %struct.SkDQuad*, i8*)** %6, i64 8
  %8 = load i1 (%class.SkTCurve*, %struct.SkDQuad*, i8*)*, i1 (%class.SkTCurve*, %struct.SkDQuad*, i8*)** %7, align 8
  %9 = tail call zeroext i1 %8(%class.SkTCurve* %1, %struct.SkDQuad* dereferenceable(48) %4, i8* %2) #11
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK7SkTQuad7IsConicEv(%class.SkTQuad*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkTCurve* @_ZNK7SkTQuad4makeER12SkArenaAlloc(%class.SkTQuad*, %class.SkArenaAlloc* dereferenceable(32)) unnamed_addr #0 comdat align 2 {
  %3 = tail call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %1, i32 65, i32 8) #11
  %4 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %1, i64 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = ptrtoint i8* %3 to i64
  %8 = sub i64 %7, %6
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds i8, i8* %3, i64 56
  store i8* %10, i8** %4, align 8
  tail call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %1, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeI7SkTQuadJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS3_ENUlPcE_8__invokeESC_, i32 %9) #11
  %11 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV7SkTQuad, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = bitcast i8* %3 to %class.SkTCurve*
  ret %class.SkTCurve* %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK7SkTQuad16maxIntersectionsEv(%class.SkTQuad*) unnamed_addr #0 comdat align 2 {
  ret i32 4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK7SkTQuad8otherPtsEiPPK8SkDPoint(%class.SkTQuad*, i32, %struct.SkDPoint**) unnamed_addr #0 comdat align 2 {
  %4 = xor i32 %1, 1
  %5 = sub nsw i32 %4, %1
  %6 = ashr i32 %5, 2
  %7 = xor i32 %6, -1
  %8 = and i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 %9
  store %struct.SkDPoint* %10, %struct.SkDPoint** %2, align 8
  %11 = xor i32 %1, 2
  %12 = sub nsw i32 %11, %1
  %13 = ashr i32 %12, 2
  %14 = xor i32 %13, -1
  %15 = and i32 %12, %14
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 %16
  %18 = getelementptr inbounds %struct.SkDPoint*, %struct.SkDPoint** %2, i64 1
  store %struct.SkDPoint* %17, %struct.SkDPoint** %18, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK7SkTQuad10pointCountEv(%class.SkTQuad*) unnamed_addr #0 comdat align 2 {
  ret i32 3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK7SkTQuad9pointLastEv(%class.SkTQuad*) unnamed_addr #0 comdat align 2 {
  ret i32 2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNK7SkTQuad5ptAtTEd(%class.SkTQuad*, double) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1
  %4 = fcmp oeq double %1, 0.000000e+00
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = bitcast %struct.SkDQuad* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  br label %39

8:                                                ; preds = %2
  %9 = fcmp oeq double %1, 1.000000e+00
  br i1 %9, label %10, label %14

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 2, i32 0
  %12 = bitcast double* %11 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  br label %39

14:                                               ; preds = %8
  %15 = fsub double 1.000000e+00, %1
  %16 = fmul double %15, %15
  %17 = fmul double %15, 2.000000e+00
  %18 = fmul double %17, %1
  %19 = fmul double %1, %1
  %20 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 1, i32 0
  %21 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1, i32 0, i64 2, i32 0
  %22 = bitcast %struct.SkDQuad* %3 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 8
  %24 = insertelement <2 x double> undef, double %16, i32 0
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x double> %25, %23
  %27 = bitcast double* %20 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = insertelement <2 x double> undef, double %18, i32 0
  %30 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> zeroinitializer
  %31 = fmul <2 x double> %30, %28
  %32 = fadd <2 x double> %26, %31
  %33 = bitcast double* %21 to <2 x double>*
  %34 = load <2 x double>, <2 x double>* %33, align 8
  %35 = insertelement <2 x double> undef, double %19, i32 0
  %36 = shufflevector <2 x double> %35, <2 x double> undef, <2 x i32> zeroinitializer
  %37 = fmul <2 x double> %36, %34
  %38 = fadd <2 x double> %32, %37
  br label %39

39:                                               ; preds = %5, %10, %14
  %40 = phi <2 x double> [ %7, %5 ], [ %13, %10 ], [ %38, %14 ]
  %41 = extractelement <2 x double> %40, i32 0
  %42 = insertvalue { double, double } undef, double %41, 0
  %43 = extractelement <2 x double> %40, i32 1
  %44 = insertvalue { double, double } %42, double %43, 1
  ret { double, double } %44
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK7SkTQuad9subDivideEddP8SkTCurve(%class.SkTQuad*, double, double, %class.SkTCurve*) unnamed_addr #0 comdat align 2 {
  %5 = alloca %struct.SkDQuad, align 8
  %6 = bitcast %struct.SkDQuad* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #11
  %7 = getelementptr inbounds %class.SkTQuad, %class.SkTQuad* %0, i64 0, i32 1
  call void @_ZNK7SkDQuad9subDivideEdd(%struct.SkDQuad* nonnull sret %5, %struct.SkDQuad* %7, double %1, double %2)
  %8 = getelementptr inbounds %class.SkTCurve, %class.SkTCurve* %3, i64 1
  %9 = bitcast %class.SkTCurve* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* nonnull align 8 %6, i64 48, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #8

declare zeroext i1 @_Z16AlmostBequalUlpsff(float, float) local_unnamed_addr #3

declare void @_ZN7SkDRect9setBoundsERK7SkDQuadS2_dd(%struct.SkDRect*, %struct.SkDQuad* dereferenceable(48), %struct.SkDQuad* dereferenceable(48), double, double) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = tail call double @llvm.fabs.f64(double %7) #11
  %9 = fcmp olt double %8, 0x3E80000000000000
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fsub double %12, %14
  %16 = tail call double @llvm.fabs.f64(double %15) #11
  %17 = fcmp olt double %16, 0x3E80000000000000
  br i1 %17, label %68, label %18

18:                                               ; preds = %10, %2
  %19 = fptrunc double %4 to float
  %20 = fptrunc double %6 to float
  %21 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %19, float %20) #11
  br i1 %21, label %22, label %68

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %24 to float
  %28 = fptrunc double %26 to float
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %27, float %28) #11
  br i1 %29, label %30, label %68

30:                                               ; preds = %22
  %31 = load double, double* %3, align 8
  %32 = load double, double* %5, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %23, align 8
  %35 = load double, double* %25, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %33
  %38 = fmul double %36, %36
  %39 = fadd double %37, %38
  %40 = tail call double @sqrt(double %39) #11
  %41 = load double, double* %5, align 8
  %42 = load double, double* %3, align 8
  %43 = fcmp olt double %41, %42
  %44 = load double, double* %23, align 8
  %45 = select i1 %43, double %41, double %42
  %46 = fcmp olt double %44, %45
  %47 = load double, double* %25, align 8
  %48 = select i1 %46, double %44, double %45
  %49 = fcmp olt double %47, %48
  %50 = select i1 %49, double %47, double %48
  %51 = fcmp olt double %42, %41
  %52 = load double, double* %5, align 8
  %53 = load double, double* %3, align 8
  %54 = select i1 %51, double %52, double %53
  %55 = fcmp olt double %54, %44
  %56 = load double, double* %23, align 8
  %57 = select i1 %55, double %56, double %54
  %58 = fcmp olt double %57, %47
  %59 = load double, double* %25, align 8
  %60 = select i1 %58, double %59, double %57
  %61 = fsub double -0.000000e+00, %50
  %62 = fcmp olt double %60, %61
  %63 = select i1 %62, double %61, double %60
  %64 = fadd double %40, %63
  %65 = fptrunc double %63 to float
  %66 = fptrunc double %64 to float
  %67 = tail call zeroext i1 @_Z16AlmostPequalUlpsff(float %65, float %66) #11
  br label %68

68:                                               ; preds = %18, %22, %10, %30
  %69 = phi i1 [ %67, %30 ], [ true, %10 ], [ false, %22 ], [ false, %18 ]
  ret i1 %69
}

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #3

declare zeroext i1 @_Z16AlmostPequalUlpsff(float, float) local_unnamed_addr #3

declare i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #3

declare void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc*, i8* (i8*)*, i32) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeI7SkTQuadJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS3_ENUlPcE_8__invokeESC_(i8*) #10 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -65
  %3 = bitcast i8* %2 to %class.SkTQuad*
  %4 = bitcast i8* %2 to void (%class.SkTQuad*)***
  %5 = load void (%class.SkTQuad*)**, void (%class.SkTQuad*)*** %4, align 8
  %6 = load void (%class.SkTQuad*)*, void (%class.SkTQuad*)** %5, align 8
  tail call void %6(%class.SkTQuad* %3) #11
  ret i8* %2
}

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
