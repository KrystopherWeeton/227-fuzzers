; ModuleID = '../../third_party/blink/renderer/core/html/parser/html_parser_idioms.cc'
source_filename = "../../third_party/blink/renderer/core/html/parser/html_parser_idioms.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.8 }
%class.scoped_refptr.8 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Decimal" = type { %"class.blink::Decimal::EncodedData" }
%"class.blink::Decimal::EncodedData" = type <{ i64, i16, [2 x i8], i32, i32, [4 x i8] }>
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { double*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::Vector.3" = type { %"class.WTF::VectorBuffer.4" }
%"class.WTF::VectorBuffer.4" = type { %"class.WTF::VectorBufferBase.5" }
%"class.WTF::VectorBufferBase.5" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { %"class.WTF::String", %"class.WTF::String" }
%"class.WTF::TextEncoding" = type { i8* }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i32, %"class.WTF::StringImpl"* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF22EqualIgnoringASCIICaseILm13EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN5blink18FindStringIfStaticIhEEPN3WTF10StringImplEPKT_j = comdat any

$_ZN5blink18FindStringIfStaticIDsEEPN3WTF10StringImplEPKT_j = comdat any

$_ZN3WTF6VectorIdLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIdEEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm = comdat any

@_ZN3WTF12g_empty_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [3 x i8] c"-0\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@_ZN5blinkL14kCharsetStringE = internal constant [8 x i8] c"charset\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN5blink10html_names14kHttpEquivAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.3 = private unnamed_addr constant [13 x i8] c"content-type\00", align 1
@_ZN5blink10html_names12kCharsetAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names12kContentAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.6 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.7 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIdEEPKcv = private unnamed_addr constant [54 x i8] c"const char *WTF::GetStringWithTypeName() [T = double]\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@_ZN3WTF10StringImpl29highest_static_string_length_E = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink33StripLeadingAndTrailingHTMLSpacesERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %205, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %31

9:                                                ; preds = %5
  %10 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %205, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %205

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i33
  %23 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %22, i33 1) #8
  %24 = extractvalue { i33, i1 } %23, 1
  %25 = extractvalue { i33, i1 } %23, 0
  %26 = icmp slt i33 %25, 0
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %29, !prof !2

28:                                               ; preds = %19
  tail call void @llvm.trap() #8
  unreachable

29:                                               ; preds = %19
  %30 = trunc i33 %25 to i32
  store i32 %30, i32* %20, align 4
  br label %205

31:                                               ; preds = %5
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 1
  br i1 %35, label %121, label %37

37:                                               ; preds = %31
  %38 = bitcast %"class.WTF::StringImpl"* %36 to i8*
  %39 = zext i32 %7 to i64
  br label %40

40:                                               ; preds = %47, %37
  %41 = phi i64 [ 0, %37 ], [ %48, %47 ]
  %42 = phi i32 [ 0, %37 ], [ %49, %47 ]
  %43 = getelementptr inbounds i8, i8* %38, i64 %41
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %44, 33
  br i1 %45, label %46, label %53

46:                                               ; preds = %40
  switch i8 %44, label %51 [
    i8 32, label %47
    i8 10, label %47
    i8 9, label %47
    i8 13, label %47
    i8 12, label %47
  ]

47:                                               ; preds = %46, %46, %46, %46, %46
  %48 = add nuw nsw i64 %41, 1
  %49 = add nuw i32 %42, 1
  %50 = icmp eq i64 %48, %39
  br i1 %50, label %55, label %40

51:                                               ; preds = %46
  %52 = trunc i64 %41 to i32
  br label %55

53:                                               ; preds = %40
  %54 = trunc i64 %41 to i32
  br label %55

55:                                               ; preds = %47, %53, %51
  %56 = phi i32 [ %52, %51 ], [ %54, %53 ], [ %49, %47 ]
  %57 = icmp eq i32 %7, %56
  br i1 %57, label %58, label %80

58:                                               ; preds = %55
  %59 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, null
  br i1 %62, label %205, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %205

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i33
  %72 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #8
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %68
  tail call void @llvm.trap() #8
  unreachable

78:                                               ; preds = %68
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %69, align 4
  br label %205

80:                                               ; preds = %55, %90
  %81 = phi i64 [ %91, %90 ], [ 0, %55 ]
  %82 = trunc i64 %81 to i32
  %83 = xor i32 %82, -1
  %84 = add i32 %7, %83
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %38, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = icmp ult i8 %87, 33
  br i1 %88, label %89, label %93

89:                                               ; preds = %80
  switch i8 %87, label %95 [
    i8 32, label %90
    i8 10, label %90
    i8 9, label %90
    i8 13, label %90
    i8 12, label %90
  ]

90:                                               ; preds = %89, %89, %89, %89, %89
  %91 = add nuw nsw i64 %81, 1
  %92 = icmp eq i64 %91, %39
  br i1 %92, label %97, label %80

93:                                               ; preds = %80
  %94 = trunc i64 %81 to i32
  br label %97

95:                                               ; preds = %89
  %96 = trunc i64 %81 to i32
  br label %97

97:                                               ; preds = %90, %95, %93
  %98 = phi i32 [ %94, %93 ], [ %96, %95 ], [ %7, %90 ]
  %99 = or i32 %98, %56
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %117

101:                                              ; preds = %97
  %102 = load atomic i32, i32* %32 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %205

105:                                              ; preds = %101
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i33
  %109 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %108, i33 1) #8
  %110 = extractvalue { i33, i1 } %109, 1
  %111 = extractvalue { i33, i1 } %109, 0
  %112 = icmp slt i33 %111, 0
  %113 = or i1 %110, %112
  br i1 %113, label %114, label %115, !prof !2

114:                                              ; preds = %105
  tail call void @llvm.trap() #8
  unreachable

115:                                              ; preds = %105
  %116 = trunc i33 %111 to i32
  store i32 %116, i32* %106, align 4
  br label %205

117:                                              ; preds = %97
  %118 = sub i32 %7, %56
  %119 = sub i32 %118, %98
  %120 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"* %0, i32 %56, i32 %119) #8
  br label %205

121:                                              ; preds = %31
  %122 = bitcast %"class.WTF::StringImpl"* %36 to i16*
  %123 = zext i32 %7 to i64
  br label %124

124:                                              ; preds = %131, %121
  %125 = phi i64 [ 0, %121 ], [ %132, %131 ]
  %126 = phi i32 [ 0, %121 ], [ %133, %131 ]
  %127 = getelementptr inbounds i16, i16* %122, i64 %125
  %128 = load i16, i16* %127, align 2
  %129 = icmp ult i16 %128, 33
  br i1 %129, label %130, label %137

130:                                              ; preds = %124
  switch i16 %128, label %135 [
    i16 32, label %131
    i16 10, label %131
    i16 9, label %131
    i16 13, label %131
    i16 12, label %131
  ]

131:                                              ; preds = %130, %130, %130, %130, %130
  %132 = add nuw nsw i64 %125, 1
  %133 = add nuw i32 %126, 1
  %134 = icmp eq i64 %132, %123
  br i1 %134, label %139, label %124

135:                                              ; preds = %130
  %136 = trunc i64 %125 to i32
  br label %139

137:                                              ; preds = %124
  %138 = trunc i64 %125 to i32
  br label %139

139:                                              ; preds = %131, %137, %135
  %140 = phi i32 [ %136, %135 ], [ %138, %137 ], [ %133, %131 ]
  %141 = icmp eq i32 %7, %140
  br i1 %141, label %142, label %164

142:                                              ; preds = %139
  %143 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %144 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %143, i64 0, i32 0, i32 0, i32 0
  %145 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %144, align 8
  %146 = icmp eq %"class.WTF::StringImpl"* %145, null
  br i1 %146, label %205, label %147

147:                                              ; preds = %142
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = and i32 %149, 2
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %205

152:                                              ; preds = %147
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 0
  %154 = load i32, i32* %153, align 4
  %155 = zext i32 %154 to i33
  %156 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %155, i33 1) #8
  %157 = extractvalue { i33, i1 } %156, 1
  %158 = extractvalue { i33, i1 } %156, 0
  %159 = icmp slt i33 %158, 0
  %160 = or i1 %157, %159
  br i1 %160, label %161, label %162, !prof !2

161:                                              ; preds = %152
  tail call void @llvm.trap() #8
  unreachable

162:                                              ; preds = %152
  %163 = trunc i33 %158 to i32
  store i32 %163, i32* %153, align 4
  br label %205

164:                                              ; preds = %139, %174
  %165 = phi i64 [ %175, %174 ], [ 0, %139 ]
  %166 = trunc i64 %165 to i32
  %167 = xor i32 %166, -1
  %168 = add i32 %7, %167
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds i16, i16* %122, i64 %169
  %171 = load i16, i16* %170, align 2
  %172 = icmp ult i16 %171, 33
  br i1 %172, label %173, label %177

173:                                              ; preds = %164
  switch i16 %171, label %179 [
    i16 32, label %174
    i16 10, label %174
    i16 9, label %174
    i16 13, label %174
    i16 12, label %174
  ]

174:                                              ; preds = %173, %173, %173, %173, %173
  %175 = add nuw nsw i64 %165, 1
  %176 = icmp eq i64 %175, %123
  br i1 %176, label %181, label %164

177:                                              ; preds = %164
  %178 = trunc i64 %165 to i32
  br label %181

179:                                              ; preds = %173
  %180 = trunc i64 %165 to i32
  br label %181

181:                                              ; preds = %174, %179, %177
  %182 = phi i32 [ %178, %177 ], [ %180, %179 ], [ %7, %174 ]
  %183 = or i32 %182, %140
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %201

185:                                              ; preds = %181
  %186 = load atomic i32, i32* %32 monotonic, align 4
  %187 = and i32 %186, 2
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %205

189:                                              ; preds = %185
  %190 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %191 = load i32, i32* %190, align 4
  %192 = zext i32 %191 to i33
  %193 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %192, i33 1) #8
  %194 = extractvalue { i33, i1 } %193, 1
  %195 = extractvalue { i33, i1 } %193, 0
  %196 = icmp slt i33 %195, 0
  %197 = or i1 %194, %196
  br i1 %197, label %198, label %199, !prof !2

198:                                              ; preds = %189
  tail call void @llvm.trap() #8
  unreachable

199:                                              ; preds = %189
  %200 = trunc i33 %195 to i32
  store i32 %200, i32* %190, align 4
  br label %205

201:                                              ; preds = %181
  %202 = sub i32 %7, %140
  %203 = sub i32 %202, %182
  %204 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"* %0, i32 %140, i32 %203) #8
  br label %205

205:                                              ; preds = %1, %201, %199, %185, %162, %147, %142, %117, %115, %101, %78, %63, %58, %29, %14, %9
  %206 = phi %"class.WTF::StringImpl"* [ null, %9 ], [ %12, %14 ], [ %12, %29 ], [ %120, %117 ], [ null, %58 ], [ %61, %63 ], [ %61, %78 ], [ %3, %101 ], [ %3, %115 ], [ %204, %201 ], [ null, %142 ], [ %145, %147 ], [ %145, %162 ], [ %3, %185 ], [ %3, %199 ], [ null, %1 ]
  ret %"class.WTF::StringImpl"* %206
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink22SerializeForNumberTypeERKNS_7DecimalE(%"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 3
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %0, i64 0, i32 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  %10 = select i1 %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)
  %11 = select i1 %9, i64 2, i64 1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* %10, i64 %11) #8
  %12 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  br label %17

14:                                               ; preds = %1
  %15 = tail call %"class.WTF::StringImpl"* @_ZNK5blink7Decimal8ToStringEv(%"class.blink::Decimal"* %0) #8
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"** %16, align 8
  br label %17

17:                                               ; preds = %14, %6
  %18 = phi %"class.WTF::StringImpl"* [ %15, %14 ], [ %13, %6 ]
  ret %"class.WTF::StringImpl"* %18
}

declare %"class.WTF::StringImpl"* @_ZNK5blink7Decimal8ToStringEv(%"class.blink::Decimal"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink22SerializeForNumberTypeEd(double) local_unnamed_addr #0 {
  %2 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String24NumberToStringECMAScriptEd(double %0) #8
  ret %"class.WTF::StringImpl"* %2
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String24NumberToStringECMAScriptEd(double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink27ParseToDecimalForNumberTypeERKN3WTF6StringERKNS_7DecimalE(%"class.blink::Decimal"* noalias sret, %"class.WTF::String"* dereferenceable(8), %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #0 {
  %4 = alloca %"class.blink::Decimal", align 8
  %5 = alloca %"class.blink::Decimal", align 8
  %6 = alloca %"class.blink::Decimal", align 8
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %34, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %34, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  br i1 %18, label %24, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  br label %27

24:                                               ; preds = %14
  %25 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %26 = load i16, i16* %25, align 2
  br label %27

27:                                               ; preds = %20, %24
  %28 = phi i16 [ %23, %20 ], [ %26, %24 ]
  %29 = add i16 %28, -45
  %30 = icmp ult i16 %29, 2
  %31 = add i16 %28, -48
  %32 = icmp ult i16 %31, 10
  %33 = or i1 %30, %32
  br i1 %33, label %35, label %34

34:                                               ; preds = %10, %27, %3
  tail call void @_ZN5blink7DecimalC1ERKS0_(%"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %2) #8
  br label %59

35:                                               ; preds = %27
  %36 = bitcast %"class.blink::Decimal"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #8
  %37 = getelementptr inbounds %"class.blink::Decimal", %"class.blink::Decimal"* %4, i64 0, i32 0, i32 3
  %38 = bitcast %"class.blink::Decimal"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 24, i1 false)
  call void @_ZN5blink7Decimal10FromStringERKN3WTF6StringE(%"class.blink::Decimal"* nonnull sret %4, %"class.WTF::String"* dereferenceable(8) %1) #8
  %39 = load i32, i32* %37, align 4
  %40 = and i32 %39, -3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %35
  call void @_ZN5blink7DecimalC1ERKS0_(%"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %2) #8
  br label %58

43:                                               ; preds = %35
  %44 = bitcast %"class.blink::Decimal"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #8
  %45 = bitcast %"class.blink::Decimal"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 -86, i64 24, i1 false)
  call void @_ZN5blink7Decimal10FromDoubleEd(%"class.blink::Decimal"* nonnull sret %5, double 0x7FEFFFFFFFFFFFFF) #8
  %46 = bitcast %"class.blink::Decimal"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #8
  call void @_ZNK5blink7DecimalngEv(%"class.blink::Decimal"* nonnull sret %6, %"class.blink::Decimal"* nonnull %5) #8
  %47 = call zeroext i1 @_ZNK5blink7DecimalltERKS0_(%"class.blink::Decimal"* nonnull %4, %"class.blink::Decimal"* nonnull dereferenceable(24) %6) #8
  br i1 %47, label %50, label %48

48:                                               ; preds = %43
  %49 = call zeroext i1 @_ZNK5blink7DecimalgtERKS0_(%"class.blink::Decimal"* nonnull %4, %"class.blink::Decimal"* nonnull dereferenceable(24) %5) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #8
  br i1 %49, label %51, label %52

50:                                               ; preds = %43
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #8
  br label %51

51:                                               ; preds = %50, %48
  call void @_ZN5blink7DecimalC1ERKS0_(%"class.blink::Decimal"* %0, %"class.blink::Decimal"* dereferenceable(24) %2) #8
  br label %57

52:                                               ; preds = %48
  %53 = load i32, i32* %37, align 4
  %54 = icmp eq i32 %53, 3
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  call void @_ZN5blink7DecimalC1Ei(%"class.blink::Decimal"* %0, i32 0) #8
  br label %57

56:                                               ; preds = %52
  call void @_ZN5blink7DecimalC1ERKS0_(%"class.blink::Decimal"* %0, %"class.blink::Decimal"* nonnull dereferenceable(24) %4) #8
  br label %57

57:                                               ; preds = %55, %56, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #8
  br label %58

58:                                               ; preds = %57, %42
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #8
  br label %59

59:                                               ; preds = %58, %34
  ret void
}

declare void @_ZN5blink7DecimalC1ERKS0_(%"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) unnamed_addr #2

declare void @_ZN5blink7Decimal10FromStringERKN3WTF6StringE(%"class.blink::Decimal"* sret, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5blink7Decimal10FromDoubleEd(%"class.blink::Decimal"* sret, double) local_unnamed_addr #2

declare zeroext i1 @_ZNK5blink7DecimalltERKS0_(%"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK5blink7DecimalngEv(%"class.blink::Decimal"* sret, %"class.blink::Decimal"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK5blink7DecimalgtERKS0_(%"class.blink::Decimal"*, %"class.blink::Decimal"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN5blink7DecimalC1Ei(%"class.blink::Decimal"*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN5blink26ParseToDoubleForNumberTypeERKN3WTF6StringEd(%"class.WTF::String"* dereferenceable(8), double) local_unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %47, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 1
  br i1 %15, label %21, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  br label %24

21:                                               ; preds = %11
  %22 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %23 = load i16, i16* %22, align 2
  br label %24

24:                                               ; preds = %17, %21
  %25 = phi i16 [ %20, %17 ], [ %23, %21 ]
  %26 = add i16 %25, -45
  %27 = icmp ult i16 %26, 2
  %28 = add i16 %25, -48
  %29 = icmp ult i16 %28, 10
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %47

31:                                               ; preds = %24
  %32 = tail call zeroext i1 @_ZNK3WTF10StringImpl8EndsWithEDs(%"class.WTF::StringImpl"* nonnull %5, i16 zeroext 46) #8
  br i1 %32, label %47, label %33

33:                                               ; preds = %31
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #8
  store i8 0, i8* %3, align 1
  %34 = call double @_ZNK3WTF6String8ToDoubleEPb(%"class.WTF::String"* %0, i8* nonnull %3) #8
  %35 = load i8, i8* %3, align 1, !range !3
  %36 = icmp eq i8 %35, 0
  %37 = call double @llvm.fabs.f64(double %34) #9
  %38 = fcmp ueq double %37, 0x7FF0000000000000
  %39 = or i1 %36, %38
  %40 = fcmp olt double %34, 0xFFEFFFFFFFFFFFFF
  %41 = or i1 %40, %39
  %42 = fcmp ogt double %34, 0x7FEFFFFFFFFFFFFF
  %43 = or i1 %42, %41
  %44 = fcmp oeq double %34, 0.000000e+00
  %45 = select i1 %44, double 0.000000e+00, double %34
  %46 = select i1 %43, double %1, double %45
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #8
  br label %47

47:                                               ; preds = %7, %24, %2, %31, %33
  %48 = phi double [ %46, %33 ], [ %1, %31 ], [ %1, %2 ], [ %1, %7 ], [ %1, %24 ]
  ret double %48
}

declare double @_ZNK3WTF6String8ToDoubleEPb(%"class.WTF::String"*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink16ParseHTMLIntegerERKN3WTF6StringERi(%"class.WTF::String"* nocapture readonly dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %68, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %68, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  br i1 %16, label %42, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.WTF::StringImpl"* %17 to i8*
  %20 = zext i32 %10 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  br label %22

22:                                               ; preds = %18, %27
  %23 = phi i8* [ %28, %27 ], [ %19, %18 ]
  %24 = load i8, i8* %23, align 1
  %25 = icmp ult i8 %24, 33
  br i1 %25, label %26, label %30

26:                                               ; preds = %22
  switch i8 %24, label %30 [
    i8 32, label %27
    i8 10, label %27
    i8 9, label %27
    i8 13, label %27
    i8 12, label %27
  ]

27:                                               ; preds = %26, %26, %26, %26, %26
  %28 = getelementptr inbounds i8, i8* %23, i64 1
  %29 = icmp eq i8* %28, %21
  br i1 %29, label %68, label %22

30:                                               ; preds = %26, %22
  %31 = icmp eq i8* %23, %21
  br i1 %31, label %68, label %32

32:                                               ; preds = %30
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #8
  store i8 -86, i8* %3, align 1
  %33 = ptrtoint i8* %21 to i64
  %34 = ptrtoint i8* %23 to i64
  %35 = sub i64 %33, %34
  %36 = call i32 @_ZN3WTF15CharactersToIntEPKhmNS_20NumberParsingOptionsEPb(i8* %23, i64 %35, i32 3, i8* nonnull %3) #8
  %37 = load i8, i8* %3, align 1, !range !3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %40, label %39

39:                                               ; preds = %32
  store i32 %36, i32* %1, align 4
  br label %40

40:                                               ; preds = %39, %32
  %41 = icmp ne i8 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #8
  br label %68

42:                                               ; preds = %12
  %43 = bitcast %"class.WTF::StringImpl"* %17 to i16*
  %44 = zext i32 %10 to i64
  %45 = getelementptr inbounds i16, i16* %43, i64 %44
  br label %46

46:                                               ; preds = %42, %51
  %47 = phi i16* [ %52, %51 ], [ %43, %42 ]
  %48 = load i16, i16* %47, align 2
  %49 = icmp ult i16 %48, 33
  br i1 %49, label %50, label %54

50:                                               ; preds = %46
  switch i16 %48, label %54 [
    i16 32, label %51
    i16 10, label %51
    i16 9, label %51
    i16 13, label %51
    i16 12, label %51
  ]

51:                                               ; preds = %50, %50, %50, %50, %50
  %52 = getelementptr inbounds i16, i16* %47, i64 1
  %53 = icmp ult i16* %52, %45
  br i1 %53, label %46, label %54

54:                                               ; preds = %51, %50, %46
  %55 = phi i16* [ %47, %50 ], [ %52, %51 ], [ %47, %46 ]
  %56 = icmp eq i16* %55, %45
  br i1 %56, label %68, label %57

57:                                               ; preds = %54
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #8
  store i8 -86, i8* %4, align 1
  %58 = ptrtoint i16* %45 to i64
  %59 = ptrtoint i16* %55 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 1
  %62 = call i32 @_ZN3WTF15CharactersToIntEPKDsmNS_20NumberParsingOptionsEPb(i16* %55, i64 %61, i32 3, i8* nonnull %4) #8
  %63 = load i8, i8* %4, align 1, !range !3
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %66, label %65

65:                                               ; preds = %57
  store i32 %62, i32* %1, align 4
  br label %66

66:                                               ; preds = %65, %57
  %67 = icmp ne i8 %63, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #8
  br label %68

68:                                               ; preds = %27, %2, %66, %54, %40, %30, %8
  %69 = phi i1 [ false, %8 ], [ %41, %40 ], [ false, %30 ], [ %67, %66 ], [ false, %54 ], [ false, %2 ], [ false, %27 ]
  ret i1 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink27ParseHTMLNonNegativeIntegerERKN3WTF6StringERj(%"class.WTF::String"* nocapture readonly dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_ZN5blinkL35ParseHTMLNonNegativeIntegerInternalERKN3WTF6StringERj(%"class.WTF::String"* dereferenceable(8) %0, i32* dereferenceable(4) %1)
  %4 = icmp eq i32 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN5blinkL35ParseHTMLNonNegativeIntegerInternalERKN3WTF6StringERj(%"class.WTF::String"* nocapture readonly dereferenceable(8), i32* dereferenceable(4)) unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %68, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %68, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  br i1 %16, label %42, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.WTF::StringImpl"* %17 to i8*
  %20 = zext i32 %10 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  br label %22

22:                                               ; preds = %18, %27
  %23 = phi i8* [ %28, %27 ], [ %19, %18 ]
  %24 = load i8, i8* %23, align 1
  %25 = icmp ult i8 %24, 33
  br i1 %25, label %26, label %30

26:                                               ; preds = %22
  switch i8 %24, label %30 [
    i8 32, label %27
    i8 10, label %27
    i8 9, label %27
    i8 13, label %27
    i8 12, label %27
  ]

27:                                               ; preds = %26, %26, %26, %26, %26
  %28 = getelementptr inbounds i8, i8* %23, i64 1
  %29 = icmp eq i8* %28, %21
  br i1 %29, label %68, label %22

30:                                               ; preds = %26, %22
  %31 = icmp eq i8* %23, %21
  br i1 %31, label %68, label %32

32:                                               ; preds = %30
  %33 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #8
  store i32 -1431655766, i32* %3, align 4
  %34 = ptrtoint i8* %21 to i64
  %35 = ptrtoint i8* %23 to i64
  %36 = sub i64 %34, %35
  %37 = call i32 @_ZN3WTF16CharactersToUIntEPKhmNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i8* %23, i64 %36, i32 11, i32* nonnull %3) #8
  %38 = load i32, i32* %3, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %32
  store i32 %37, i32* %1, align 4
  br label %41

41:                                               ; preds = %40, %32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #8
  br label %68

42:                                               ; preds = %12
  %43 = bitcast %"class.WTF::StringImpl"* %17 to i16*
  %44 = zext i32 %10 to i64
  %45 = getelementptr inbounds i16, i16* %43, i64 %44
  br label %46

46:                                               ; preds = %42, %51
  %47 = phi i16* [ %52, %51 ], [ %43, %42 ]
  %48 = load i16, i16* %47, align 2
  %49 = icmp ult i16 %48, 33
  br i1 %49, label %50, label %54

50:                                               ; preds = %46
  switch i16 %48, label %54 [
    i16 32, label %51
    i16 10, label %51
    i16 9, label %51
    i16 13, label %51
    i16 12, label %51
  ]

51:                                               ; preds = %50, %50, %50, %50, %50
  %52 = getelementptr inbounds i16, i16* %47, i64 1
  %53 = icmp ult i16* %52, %45
  br i1 %53, label %46, label %54

54:                                               ; preds = %51, %50, %46
  %55 = phi i16* [ %47, %50 ], [ %52, %51 ], [ %47, %46 ]
  %56 = icmp eq i16* %55, %45
  br i1 %56, label %68, label %57

57:                                               ; preds = %54
  %58 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %58) #8
  store i32 -1431655766, i32* %4, align 4
  %59 = ptrtoint i16* %45 to i64
  %60 = ptrtoint i16* %55 to i64
  %61 = sub i64 %59, %60
  %62 = ashr exact i64 %61, 1
  %63 = call i32 @_ZN3WTF16CharactersToUIntEPKDsmNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i16* %55, i64 %62, i32 11, i32* nonnull %4) #8
  %64 = load i32, i32* %4, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %57
  store i32 %63, i32* %1, align 4
  br label %67

67:                                               ; preds = %66, %57
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %58) #8
  br label %68

68:                                               ; preds = %27, %2, %67, %54, %41, %30, %8
  %69 = phi i32 [ 1, %8 ], [ %38, %41 ], [ 1, %30 ], [ %64, %67 ], [ 1, %54 ], [ 1, %2 ], [ 1, %27 ]
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink34ParseHTMLClampedNonNegativeIntegerERKN3WTF6StringEjjRj(%"class.WTF::String"* nocapture readonly dereferenceable(8), i32, i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #8
  store i32 -1431655766, i32* %5, align 4
  %7 = call fastcc i32 @_ZN5blinkL35ParseHTMLNonNegativeIntegerInternalERKN3WTF6StringERj(%"class.WTF::String"* dereferenceable(8) %0, i32* nonnull dereferenceable(4) %5)
  switch i32 %7, label %16 [
    i32 0, label %8
    i32 3, label %14
  ]

8:                                                ; preds = %4
  %9 = load i32, i32* %5, align 4
  %10 = icmp ugt i32 %9, %2
  %11 = select i1 %10, i32 %2, i32 %9
  %12 = icmp ugt i32 %11, %1
  %13 = select i1 %12, i32 %11, i32 %1
  br label %14

14:                                               ; preds = %4, %8
  %15 = phi i32 [ %13, %8 ], [ %2, %4 ]
  store i32 %15, i32* %3, align 4
  br label %16

16:                                               ; preds = %14, %4
  %17 = phi i1 [ false, %4 ], [ true, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #8
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink35ParseHTMLListOfFloatingPointNumbersERKN3WTF6StringE(%"class.WTF::Vector"* noalias sret, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca i64, align 8
  %6 = alloca double, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %10 = bitcast %"class.WTF::Vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #8
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %243, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %243, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  br i1 %22, label %132, label %24

24:                                               ; preds = %18
  %25 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  %26 = zext i32 %16 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  %28 = ptrtoint %"class.WTF::StringImpl"* %23 to i64
  br label %29

29:                                               ; preds = %24, %36
  %30 = phi i64 [ %38, %36 ], [ %28, %24 ]
  %31 = phi i8* [ %37, %36 ], [ %25, %24 ]
  %32 = load i8, i8* %31, align 1
  %33 = icmp ult i8 %32, 33
  br i1 %33, label %34, label %35

34:                                               ; preds = %29
  switch i8 %32, label %42 [
    i8 32, label %36
    i8 10, label %36
    i8 9, label %36
    i8 13, label %36
    i8 12, label %36
  ]

35:                                               ; preds = %29
  switch i8 %32, label %42 [
    i8 59, label %36
    i8 44, label %36
  ]

36:                                               ; preds = %35, %35, %34, %34, %34, %34, %34
  %37 = getelementptr inbounds i8, i8* %31, i64 1
  %38 = ptrtoint i8* %37 to i64
  %39 = icmp eq i8* %37, %27
  br i1 %39, label %40, label %29

40:                                               ; preds = %36
  %41 = ptrtoint i8* %27 to i64
  br label %42

42:                                               ; preds = %35, %34, %40
  %43 = phi i64 [ %41, %40 ], [ %30, %34 ], [ %30, %35 ]
  %44 = inttoptr i64 %43 to i8*
  %45 = icmp ugt i8* %27, %44
  br i1 %45, label %46, label %243

46:                                               ; preds = %42
  %47 = bitcast i64* %3 to i8*
  %48 = bitcast double* %4 to i8*
  %49 = ptrtoint i8* %27 to i64
  br label %50

50:                                               ; preds = %67, %46
  %51 = phi i64 [ %43, %46 ], [ %68, %67 ]
  %52 = phi i8* [ %44, %46 ], [ %69, %67 ]
  %53 = load i8, i8* %52, align 1
  %54 = icmp ult i8 %53, 33
  br i1 %54, label %55, label %56

55:                                               ; preds = %50
  switch i8 %53, label %57 [
    i8 32, label %70
    i8 10, label %70
    i8 9, label %70
    i8 13, label %70
    i8 12, label %70
  ]

56:                                               ; preds = %50
  switch i8 %53, label %57 [
    i8 59, label %70
    i8 44, label %70
  ]

57:                                               ; preds = %56, %55
  %58 = add i8 %53, -48
  %59 = icmp ugt i8 %58, 9
  %60 = add i8 %53, -45
  %61 = icmp ugt i8 %60, 1
  %62 = and i1 %61, %59
  br i1 %62, label %63, label %70

63:                                               ; preds = %57
  %64 = getelementptr inbounds i8, i8* %52, i64 1
  %65 = ptrtoint i8* %64 to i64
  %66 = icmp eq i8* %64, %27
  br i1 %66, label %70, label %67

67:                                               ; preds = %63, %128
  %68 = phi i64 [ %65, %63 ], [ %130, %128 ]
  %69 = phi i8* [ %64, %63 ], [ %129, %128 ]
  br label %50

70:                                               ; preds = %63, %57, %56, %56, %55, %55, %55, %55, %55
  %71 = phi i64 [ %49, %63 ], [ %51, %55 ], [ %51, %55 ], [ %51, %55 ], [ %51, %55 ], [ %51, %55 ], [ %51, %56 ], [ %51, %56 ], [ %51, %57 ]
  %72 = inttoptr i64 %71 to i8*
  %73 = icmp ugt i8* %27, %72
  br i1 %73, label %74, label %85

74:                                               ; preds = %70, %81
  %75 = phi i64 [ %83, %81 ], [ %71, %70 ]
  %76 = phi i8* [ %82, %81 ], [ %72, %70 ]
  %77 = load i8, i8* %76, align 1
  %78 = icmp ult i8 %77, 33
  br i1 %78, label %79, label %80

79:                                               ; preds = %74
  switch i8 %77, label %81 [
    i8 32, label %85
    i8 10, label %85
    i8 9, label %85
    i8 13, label %85
    i8 12, label %85
  ]

80:                                               ; preds = %74
  switch i8 %77, label %81 [
    i8 59, label %85
    i8 44, label %85
  ]

81:                                               ; preds = %80, %79
  %82 = getelementptr inbounds i8, i8* %76, i64 1
  %83 = ptrtoint i8* %82 to i64
  %84 = icmp eq i8* %82, %27
  br i1 %84, label %85, label %74

85:                                               ; preds = %81, %80, %80, %79, %79, %79, %79, %79, %70
  %86 = phi i64 [ %71, %70 ], [ %49, %81 ], [ %75, %79 ], [ %75, %79 ], [ %75, %79 ], [ %75, %79 ], [ %75, %79 ], [ %75, %80 ], [ %75, %80 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #8
  store i64 0, i64* %3, align 8
  %87 = sub i64 %86, %71
  %88 = call double @_ZN3WTF18CharactersToDoubleEPKhmRm(i8* %72, i64 %87, i64* nonnull dereferenceable(8) %3) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #8
  %89 = load i64, i64* %3, align 8
  %90 = icmp eq i64 %89, 0
  %91 = call double @llvm.fabs.f64(double %88) #9
  %92 = fcmp ueq double %91, 0x7FF0000000000000
  %93 = or i1 %92, %90
  %94 = fcmp olt double %88, 0xFFEFFFFFFFFFFFFF
  %95 = or i1 %94, %93
  %96 = fcmp ogt double %88, 0x7FEFFFFFFFFFFFFF
  %97 = or i1 %96, %95
  %98 = fcmp oeq double %88, 0.000000e+00
  %99 = or i1 %98, %97
  %100 = select i1 %99, double 0.000000e+00, double %88
  store double %100, double* %4, align 8
  %101 = load i32, i32* %9, align 4
  %102 = load i32, i32* %8, align 8
  %103 = icmp eq i32 %101, %102
  br i1 %103, label %110, label %104, !prof !2

104:                                              ; preds = %85
  %105 = load double*, double** %7, align 8
  %106 = zext i32 %101 to i64
  %107 = getelementptr inbounds double, double* %105, i64 %106
  store double %100, double* %107, align 8
  %108 = load i32, i32* %9, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %9, align 4
  br label %111

110:                                              ; preds = %85
  call void @_ZN3WTF6VectorIdLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIdEEvOT_(%"class.WTF::Vector"* %0, double* nonnull dereferenceable(8) %4) #8
  br label %111

111:                                              ; preds = %110, %104
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #8
  %112 = inttoptr i64 %86 to i8*
  %113 = icmp ugt i8* %27, %112
  br i1 %113, label %114, label %128

114:                                              ; preds = %111, %121
  %115 = phi i64 [ %123, %121 ], [ %86, %111 ]
  %116 = phi i8* [ %122, %121 ], [ %112, %111 ]
  %117 = load i8, i8* %116, align 1
  %118 = icmp ult i8 %117, 33
  br i1 %118, label %119, label %120

119:                                              ; preds = %114
  switch i8 %117, label %125 [
    i8 32, label %121
    i8 10, label %121
    i8 9, label %121
    i8 13, label %121
    i8 12, label %121
  ]

120:                                              ; preds = %114
  switch i8 %117, label %125 [
    i8 59, label %121
    i8 44, label %121
  ]

121:                                              ; preds = %120, %120, %119, %119, %119, %119, %119
  %122 = getelementptr inbounds i8, i8* %116, i64 1
  %123 = ptrtoint i8* %122 to i64
  %124 = icmp eq i8* %122, %27
  br i1 %124, label %125, label %114

125:                                              ; preds = %121, %120, %119
  %126 = phi i64 [ %49, %121 ], [ %115, %119 ], [ %115, %120 ]
  %127 = inttoptr i64 %126 to i8*
  br label %128

128:                                              ; preds = %125, %111
  %129 = phi i8* [ %127, %125 ], [ %112, %111 ]
  %130 = phi i64 [ %126, %125 ], [ %86, %111 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #8
  %131 = icmp ugt i8* %27, %129
  br i1 %131, label %67, label %243

132:                                              ; preds = %18
  %133 = bitcast %"class.WTF::StringImpl"* %23 to i16*
  %134 = zext i32 %16 to i64
  %135 = getelementptr inbounds i16, i16* %133, i64 %134
  %136 = ptrtoint %"class.WTF::StringImpl"* %23 to i64
  br label %137

137:                                              ; preds = %132, %144
  %138 = phi i64 [ %146, %144 ], [ %136, %132 ]
  %139 = phi i16* [ %145, %144 ], [ %133, %132 ]
  %140 = load i16, i16* %139, align 2
  %141 = icmp ult i16 %140, 33
  br i1 %141, label %142, label %143

142:                                              ; preds = %137
  switch i16 %140, label %150 [
    i16 32, label %144
    i16 10, label %144
    i16 9, label %144
    i16 13, label %144
    i16 12, label %144
  ]

143:                                              ; preds = %137
  switch i16 %140, label %150 [
    i16 59, label %144
    i16 44, label %144
  ]

144:                                              ; preds = %143, %143, %142, %142, %142, %142, %142
  %145 = getelementptr inbounds i16, i16* %139, i64 1
  %146 = ptrtoint i16* %145 to i64
  %147 = icmp ult i16* %145, %135
  br i1 %147, label %137, label %148

148:                                              ; preds = %144
  %149 = ptrtoint i16* %145 to i64
  br label %150

150:                                              ; preds = %143, %142, %148
  %151 = phi i64 [ %149, %148 ], [ %138, %142 ], [ %138, %143 ]
  %152 = inttoptr i64 %151 to i16*
  %153 = icmp ugt i16* %135, %152
  br i1 %153, label %154, label %243

154:                                              ; preds = %150
  %155 = bitcast i64* %5 to i8*
  %156 = bitcast double* %6 to i8*
  br label %157

157:                                              ; preds = %174, %154
  %158 = phi i64 [ %151, %154 ], [ %175, %174 ]
  %159 = phi i16* [ %152, %154 ], [ %176, %174 ]
  %160 = load i16, i16* %159, align 2
  %161 = icmp ult i16 %160, 33
  br i1 %161, label %162, label %163

162:                                              ; preds = %157
  switch i16 %160, label %164 [
    i16 32, label %179
    i16 10, label %179
    i16 9, label %179
    i16 13, label %179
    i16 12, label %179
  ]

163:                                              ; preds = %157
  switch i16 %160, label %164 [
    i16 59, label %179
    i16 44, label %179
  ]

164:                                              ; preds = %163, %162
  %165 = add i16 %160, -48
  %166 = icmp ugt i16 %165, 9
  %167 = add i16 %160, -45
  %168 = icmp ugt i16 %167, 1
  %169 = and i1 %168, %166
  br i1 %169, label %170, label %179

170:                                              ; preds = %164
  %171 = getelementptr inbounds i16, i16* %159, i64 1
  %172 = ptrtoint i16* %171 to i64
  %173 = icmp ult i16* %171, %135
  br i1 %173, label %174, label %177

174:                                              ; preds = %170, %239
  %175 = phi i64 [ %172, %170 ], [ %240, %239 ]
  %176 = phi i16* [ %171, %170 ], [ %241, %239 ]
  br label %157

177:                                              ; preds = %170
  %178 = ptrtoint i16* %171 to i64
  br label %179

179:                                              ; preds = %164, %163, %163, %162, %162, %162, %162, %162, %177
  %180 = phi i64 [ %178, %177 ], [ %158, %162 ], [ %158, %162 ], [ %158, %162 ], [ %158, %162 ], [ %158, %162 ], [ %158, %163 ], [ %158, %163 ], [ %158, %164 ]
  %181 = inttoptr i64 %180 to i16*
  %182 = icmp ugt i16* %135, %181
  br i1 %182, label %183, label %196

183:                                              ; preds = %179, %190
  %184 = phi i64 [ %192, %190 ], [ %180, %179 ]
  %185 = phi i16* [ %191, %190 ], [ %181, %179 ]
  %186 = load i16, i16* %185, align 2
  %187 = icmp ult i16 %186, 33
  br i1 %187, label %188, label %189

188:                                              ; preds = %183
  switch i16 %186, label %190 [
    i16 32, label %196
    i16 10, label %196
    i16 9, label %196
    i16 13, label %196
    i16 12, label %196
  ]

189:                                              ; preds = %183
  switch i16 %186, label %190 [
    i16 59, label %196
    i16 44, label %196
  ]

190:                                              ; preds = %189, %188
  %191 = getelementptr inbounds i16, i16* %185, i64 1
  %192 = ptrtoint i16* %191 to i64
  %193 = icmp ult i16* %191, %135
  br i1 %193, label %183, label %194

194:                                              ; preds = %190
  %195 = ptrtoint i16* %191 to i64
  br label %196

196:                                              ; preds = %189, %189, %188, %188, %188, %188, %188, %194, %179
  %197 = phi i64 [ %180, %179 ], [ %195, %194 ], [ %184, %188 ], [ %184, %188 ], [ %184, %188 ], [ %184, %188 ], [ %184, %188 ], [ %184, %189 ], [ %184, %189 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %155) #8
  store i64 0, i64* %5, align 8
  %198 = sub i64 %197, %180
  %199 = ashr exact i64 %198, 1
  %200 = call double @_ZN3WTF18CharactersToDoubleEPKDsmRm(i16* %181, i64 %199, i64* nonnull dereferenceable(8) %5) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %156) #8
  %201 = load i64, i64* %5, align 8
  %202 = icmp eq i64 %201, 0
  %203 = call double @llvm.fabs.f64(double %200) #9
  %204 = fcmp ueq double %203, 0x7FF0000000000000
  %205 = or i1 %204, %202
  %206 = fcmp olt double %200, 0xFFEFFFFFFFFFFFFF
  %207 = or i1 %206, %205
  %208 = fcmp ogt double %200, 0x7FEFFFFFFFFFFFFF
  %209 = or i1 %208, %207
  %210 = fcmp oeq double %200, 0.000000e+00
  %211 = or i1 %210, %209
  %212 = select i1 %211, double 0.000000e+00, double %200
  store double %212, double* %6, align 8
  %213 = load i32, i32* %9, align 4
  %214 = load i32, i32* %8, align 8
  %215 = icmp eq i32 %213, %214
  br i1 %215, label %222, label %216, !prof !2

216:                                              ; preds = %196
  %217 = load double*, double** %7, align 8
  %218 = zext i32 %213 to i64
  %219 = getelementptr inbounds double, double* %217, i64 %218
  store double %212, double* %219, align 8
  %220 = load i32, i32* %9, align 4
  %221 = add i32 %220, 1
  store i32 %221, i32* %9, align 4
  br label %223

222:                                              ; preds = %196
  call void @_ZN3WTF6VectorIdLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIdEEvOT_(%"class.WTF::Vector"* %0, double* nonnull dereferenceable(8) %6) #8
  br label %223

223:                                              ; preds = %222, %216
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %156) #8
  %224 = inttoptr i64 %197 to i16*
  %225 = icmp ugt i16* %135, %224
  br i1 %225, label %226, label %239

226:                                              ; preds = %223, %233
  %227 = phi i64 [ %235, %233 ], [ %197, %223 ]
  %228 = phi i16* [ %234, %233 ], [ %224, %223 ]
  %229 = load i16, i16* %228, align 2
  %230 = icmp ult i16 %229, 33
  br i1 %230, label %231, label %232

231:                                              ; preds = %226
  switch i16 %229, label %239 [
    i16 32, label %233
    i16 10, label %233
    i16 9, label %233
    i16 13, label %233
    i16 12, label %233
  ]

232:                                              ; preds = %226
  switch i16 %229, label %239 [
    i16 59, label %233
    i16 44, label %233
  ]

233:                                              ; preds = %232, %232, %231, %231, %231, %231, %231
  %234 = getelementptr inbounds i16, i16* %228, i64 1
  %235 = ptrtoint i16* %234 to i64
  %236 = icmp ult i16* %234, %135
  br i1 %236, label %226, label %237

237:                                              ; preds = %233
  %238 = ptrtoint i16* %234 to i64
  br label %239

239:                                              ; preds = %232, %231, %237, %223
  %240 = phi i64 [ %197, %223 ], [ %238, %237 ], [ %227, %231 ], [ %227, %232 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %155) #8
  %241 = inttoptr i64 %240 to i16*
  %242 = icmp ugt i16* %135, %241
  br i1 %242, label %174, label %243

243:                                              ; preds = %128, %239, %2, %150, %42, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink14ExtractCharsetERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %1, %7
  %11 = phi i32 [ %9, %7 ], [ 0, %1 ]
  %12 = bitcast %"class.WTF::StringView"* %3 to i8*
  %13 = bitcast %"class.WTF::StringView"* %3 to i64*
  %14 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  br label %16

16:                                               ; preds = %92, %10
  %17 = phi %"class.WTF::StringImpl"* [ %5, %10 ], [ %95, %92 ]
  %18 = phi i32 [ 0, %10 ], [ %94, %92 ]
  %19 = icmp ult i32 %18, %11
  br i1 %19, label %20, label %291

20:                                               ; preds = %16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #8
  %21 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %21, i64* %13, align 8
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZN5blinkL14kCharsetStringE, i64 0, i64 0), i8** %14, align 8
  store i32 7, i32* %15, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #8
  br label %291

24:                                               ; preds = %20
  %25 = call i32 @_ZN3WTF10StringImpl21FindIgnoringASCIICaseERKNS_10StringViewEj(%"class.WTF::StringImpl"* nonnull %17, %"class.WTF::StringView"* nonnull dereferenceable(24) %3, i32 %18) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #8
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %291, label %27

27:                                               ; preds = %24
  %28 = add i32 %25, 7
  %29 = icmp ult i32 %28, %11
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  br i1 %29, label %31, label %67

31:                                               ; preds = %27
  %32 = icmp eq %"class.WTF::StringImpl"* %30, null
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 1
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 1
  %36 = bitcast %"class.WTF::StringImpl"* %35 to i8*
  %37 = bitcast %"class.WTF::StringImpl"* %35 to i16*
  %38 = zext i32 %28 to i64
  br label %39

39:                                               ; preds = %62, %31
  %40 = phi i64 [ %38, %31 ], [ %63, %62 ]
  %41 = phi i32 [ %28, %31 ], [ %64, %62 ]
  br i1 %32, label %62, label %42

42:                                               ; preds = %39
  %43 = load i32, i32* %33, align 4
  %44 = zext i32 %43 to i64
  %45 = icmp ult i64 %40, %44
  br i1 %45, label %46, label %62

46:                                               ; preds = %42
  %47 = load atomic i32, i32* %34 monotonic, align 4
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds i8, i8* %36, i64 %40
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  br label %57

54:                                               ; preds = %46
  %55 = getelementptr inbounds i16, i16* %37, i64 %40
  %56 = load i16, i16* %55, align 2
  br label %57

57:                                               ; preds = %50, %54
  %58 = phi i16 [ %53, %50 ], [ %56, %54 ]
  %59 = icmp ult i16 %58, 33
  br i1 %59, label %62, label %60

60:                                               ; preds = %57
  %61 = trunc i64 %40 to i32
  br label %70

62:                                               ; preds = %39, %42, %57
  %63 = add nuw nsw i64 %40, 1
  %64 = add nuw i32 %41, 1
  %65 = trunc i64 %63 to i32
  %66 = icmp eq i32 %11, %65
  br i1 %66, label %67, label %39

67:                                               ; preds = %62, %27
  %68 = phi i32 [ %28, %27 ], [ %64, %62 ]
  %69 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %69, label %92, label %70

70:                                               ; preds = %60, %67
  %71 = phi i32 [ %61, %60 ], [ %68, %67 ]
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = icmp ugt i32 %73, %71
  br i1 %74, label %75, label %92

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 1
  br i1 %79, label %87, label %81

81:                                               ; preds = %75
  %82 = bitcast %"class.WTF::StringImpl"* %80 to i8*
  %83 = zext i32 %71 to i64
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  br label %92

87:                                               ; preds = %75
  %88 = bitcast %"class.WTF::StringImpl"* %80 to i16*
  %89 = zext i32 %71 to i64
  %90 = getelementptr inbounds i16, i16* %88, i64 %89
  %91 = load i16, i16* %90, align 2
  br label %92

92:                                               ; preds = %67, %70, %81, %87
  %93 = phi i1 [ false, %70 ], [ true, %67 ], [ false, %81 ], [ false, %87 ]
  %94 = phi i32 [ %71, %70 ], [ %68, %67 ], [ %71, %81 ], [ %71, %87 ]
  %95 = phi %"class.WTF::StringImpl"* [ %30, %70 ], [ null, %67 ], [ %30, %81 ], [ %30, %87 ]
  %96 = phi i16 [ 0, %70 ], [ 0, %67 ], [ %86, %81 ], [ %91, %87 ]
  %97 = icmp eq i16 %96, 61
  br i1 %97, label %98, label %16

98:                                               ; preds = %92
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 1
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 1
  %102 = bitcast %"class.WTF::StringImpl"* %101 to i8*
  %103 = bitcast %"class.WTF::StringImpl"* %101 to i16*
  br label %104

104:                                              ; preds = %98, %124
  %105 = phi i32 [ %106, %124 ], [ %94, %98 ]
  %106 = add i32 %105, 1
  %107 = icmp ult i32 %106, %11
  br i1 %107, label %108, label %177

108:                                              ; preds = %104
  br i1 %93, label %124, label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %99, align 4
  %111 = icmp ugt i32 %110, %106
  br i1 %111, label %112, label %124

112:                                              ; preds = %109
  %113 = load atomic i32, i32* %100 monotonic, align 4
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  %116 = zext i32 %106 to i64
  br i1 %115, label %121, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds i8, i8* %102, i64 %116
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i16
  br label %124

121:                                              ; preds = %112
  %122 = getelementptr inbounds i16, i16* %103, i64 %116
  %123 = load i16, i16* %122, align 2
  br label %124

124:                                              ; preds = %108, %109, %117, %121
  %125 = phi i16 [ 0, %109 ], [ 0, %108 ], [ %120, %117 ], [ %123, %121 ]
  %126 = icmp ult i16 %125, 33
  br i1 %126, label %104, label %127

127:                                              ; preds = %124
  br i1 %93, label %177, label %128

128:                                              ; preds = %127
  %129 = load i32, i32* %99, align 4
  %130 = icmp ugt i32 %129, %106
  br i1 %130, label %131, label %177

131:                                              ; preds = %128
  %132 = load atomic i32, i32* %100 monotonic, align 4
  %133 = and i32 %132, 1
  %134 = icmp eq i32 %133, 0
  %135 = zext i32 %106 to i64
  br i1 %134, label %140, label %136

136:                                              ; preds = %131
  %137 = getelementptr inbounds i8, i8* %102, i64 %135
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i16
  br label %143

140:                                              ; preds = %131
  %141 = getelementptr inbounds i16, i16* %103, i64 %135
  %142 = load i16, i16* %141, align 2
  br label %143

143:                                              ; preds = %136, %140
  %144 = phi i16 [ %139, %136 ], [ %142, %140 ]
  %145 = icmp eq i16 %144, 34
  br i1 %145, label %161, label %146

146:                                              ; preds = %143
  %147 = load atomic i32, i32* %100 monotonic, align 4
  %148 = and i32 %147, 1
  %149 = icmp eq i32 %148, 0
  %150 = zext i32 %106 to i64
  br i1 %149, label %155, label %151

151:                                              ; preds = %146
  %152 = getelementptr inbounds i8, i8* %102, i64 %150
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i16
  br label %158

155:                                              ; preds = %146
  %156 = getelementptr inbounds i16, i16* %103, i64 %150
  %157 = load i16, i16* %156, align 2
  br label %158

158:                                              ; preds = %151, %155
  %159 = phi i16 [ %154, %151 ], [ %157, %155 ]
  %160 = icmp eq i16 %159, 39
  br i1 %160, label %161, label %177

161:                                              ; preds = %158, %143
  %162 = add i32 %105, 2
  %163 = load atomic i32, i32* %100 monotonic, align 4
  %164 = and i32 %163, 1
  %165 = icmp eq i32 %164, 0
  %166 = zext i32 %106 to i64
  br i1 %165, label %171, label %167

167:                                              ; preds = %161
  %168 = getelementptr inbounds i8, i8* %102, i64 %166
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i16
  br label %174

171:                                              ; preds = %161
  %172 = getelementptr inbounds i16, i16* %103, i64 %166
  %173 = load i16, i16* %172, align 2
  br label %174

174:                                              ; preds = %167, %171
  %175 = phi i16 [ %170, %167 ], [ %173, %171 ]
  %176 = trunc i16 %175 to i8
  br label %177

177:                                              ; preds = %104, %128, %127, %174, %158
  %178 = phi i1 [ false, %174 ], [ false, %158 ], [ true, %127 ], [ false, %128 ], [ %93, %104 ]
  %179 = phi i32 [ %162, %174 ], [ %106, %158 ], [ %106, %127 ], [ %106, %128 ], [ %106, %104 ]
  %180 = phi i8 [ %176, %174 ], [ 0, %158 ], [ 0, %127 ], [ 0, %128 ], [ 0, %104 ]
  %181 = icmp eq i32 %179, %11
  br i1 %181, label %291, label %182

182:                                              ; preds = %177
  %183 = icmp ult i32 %179, %11
  br i1 %183, label %184, label %279

184:                                              ; preds = %182
  %185 = icmp eq i8 %180, 0
  %186 = sext i8 %180 to i32
  %187 = zext i32 %179 to i64
  br label %188

188:                                              ; preds = %272, %184
  %189 = phi i64 [ %187, %184 ], [ %273, %272 ]
  %190 = phi i32 [ %179, %184 ], [ %274, %272 ]
  br i1 %185, label %211, label %191

191:                                              ; preds = %188
  br i1 %178, label %207, label %192

192:                                              ; preds = %191
  %193 = load i32, i32* %99, align 4
  %194 = zext i32 %193 to i64
  %195 = icmp ult i64 %189, %194
  br i1 %195, label %196, label %207

196:                                              ; preds = %192
  %197 = load atomic i32, i32* %100 monotonic, align 4
  %198 = and i32 %197, 1
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %204, label %200

200:                                              ; preds = %196
  %201 = getelementptr inbounds i8, i8* %102, i64 %189
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i16
  br label %207

204:                                              ; preds = %196
  %205 = getelementptr inbounds i16, i16* %103, i64 %189
  %206 = load i16, i16* %205, align 2
  br label %207

207:                                              ; preds = %191, %192, %200, %204
  %208 = phi i16 [ 0, %192 ], [ 0, %191 ], [ %203, %200 ], [ %206, %204 ]
  %209 = zext i16 %208 to i32
  %210 = icmp eq i32 %209, %186
  br i1 %210, label %277, label %272

211:                                              ; preds = %188
  br i1 %178, label %284, label %212

212:                                              ; preds = %211
  %213 = load i32, i32* %99, align 4
  %214 = zext i32 %213 to i64
  %215 = icmp ult i64 %189, %214
  br i1 %215, label %216, label %284

216:                                              ; preds = %212
  %217 = load atomic i32, i32* %100 monotonic, align 4
  %218 = and i32 %217, 1
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %224, label %220

220:                                              ; preds = %216
  %221 = getelementptr inbounds i8, i8* %102, i64 %189
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i16
  br label %227

224:                                              ; preds = %216
  %225 = getelementptr inbounds i16, i16* %103, i64 %189
  %226 = load i16, i16* %225, align 2
  br label %227

227:                                              ; preds = %220, %224
  %228 = phi i16 [ %223, %220 ], [ %226, %224 ]
  %229 = icmp ugt i16 %228, 32
  br i1 %229, label %230, label %284

230:                                              ; preds = %227
  %231 = load atomic i32, i32* %100 monotonic, align 4
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %238, label %234

234:                                              ; preds = %230
  %235 = getelementptr inbounds i8, i8* %102, i64 %189
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i16
  br label %241

238:                                              ; preds = %230
  %239 = getelementptr inbounds i16, i16* %103, i64 %189
  %240 = load i16, i16* %239, align 2
  br label %241

241:                                              ; preds = %234, %238
  %242 = phi i16 [ %237, %234 ], [ %240, %238 ]
  %243 = icmp eq i16 %242, 34
  br i1 %243, label %284, label %244

244:                                              ; preds = %241
  %245 = load atomic i32, i32* %100 monotonic, align 4
  %246 = and i32 %245, 1
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %252, label %248

248:                                              ; preds = %244
  %249 = getelementptr inbounds i8, i8* %102, i64 %189
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i16
  br label %255

252:                                              ; preds = %244
  %253 = getelementptr inbounds i16, i16* %103, i64 %189
  %254 = load i16, i16* %253, align 2
  br label %255

255:                                              ; preds = %248, %252
  %256 = phi i16 [ %251, %248 ], [ %254, %252 ]
  %257 = icmp eq i16 %256, 39
  br i1 %257, label %284, label %258

258:                                              ; preds = %255
  %259 = load atomic i32, i32* %100 monotonic, align 4
  %260 = and i32 %259, 1
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %266, label %262

262:                                              ; preds = %258
  %263 = getelementptr inbounds i8, i8* %102, i64 %189
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i16
  br label %269

266:                                              ; preds = %258
  %267 = getelementptr inbounds i16, i16* %103, i64 %189
  %268 = load i16, i16* %267, align 2
  br label %269

269:                                              ; preds = %262, %266
  %270 = phi i16 [ %265, %262 ], [ %268, %266 ]
  %271 = icmp eq i16 %270, 59
  br i1 %271, label %284, label %272

272:                                              ; preds = %207, %269
  %273 = add nuw nsw i64 %189, 1
  %274 = add nuw i32 %190, 1
  %275 = trunc i64 %273 to i32
  %276 = icmp eq i32 %11, %275
  br i1 %276, label %279, label %188

277:                                              ; preds = %207
  %278 = trunc i64 %189 to i32
  br label %279

279:                                              ; preds = %272, %277, %182
  %280 = phi i32 [ %179, %182 ], [ %278, %277 ], [ %274, %272 ]
  %281 = icmp ne i8 %180, 0
  %282 = icmp eq i32 %280, %11
  %283 = and i1 %281, %282
  br i1 %283, label %291, label %286

284:                                              ; preds = %269, %255, %241, %227, %212, %211
  %285 = trunc i64 %189 to i32
  br label %286

286:                                              ; preds = %284, %279
  %287 = phi i32 [ %280, %279 ], [ %285, %284 ]
  %288 = sub i32 %287, %179
  %289 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"* %0, i32 %179, i32 %288) #8
  %290 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %289, %"class.WTF::StringImpl"** %290, align 8
  br label %294

291:                                              ; preds = %24, %16, %279, %177, %23
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i64 0) #8
  %292 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %293 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %292, align 8
  br label %294

294:                                              ; preds = %286, %291
  %295 = phi %"class.WTF::StringImpl"* [ %289, %286 ], [ %293, %291 ]
  ret %"class.WTF::StringImpl"* %295
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN5blink26EncodingFromMetaAttributesERKN3WTF6VectorINSt3__14pairINS0_6StringES4_EELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector.3"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::TextEncoding", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %8, align 8
  %9 = getelementptr inbounds %"class.WTF::Vector.3", %"class.WTF::Vector.3"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::Vector.3", %"class.WTF::Vector.3"* %0, i64 0, i32 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %10, i64 %13
  %15 = icmp eq i32 %12, 0
  br i1 %15, label %275, label %16

16:                                               ; preds = %1
  %17 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  %18 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  %19 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names14kHttpEquivAttrE, align 8
  %20 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %19, i64 0, i32 0, i32 0
  %21 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names12kCharsetAttrE, align 8
  %22 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %21, i64 0, i32 0, i32 0
  %23 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names12kContentAttrE, align 8
  %24 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %23, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0
  %26 = bitcast %"class.WTF::String"* %3 to i64*
  %27 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  %28 = bitcast %"class.WTF::StringView"* %5 to i8*
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  %30 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %31 = bitcast i8** %30 to %"class.WTF::StringImpl"**
  %32 = bitcast %"class.WTF::StringView"* %5 to i64*
  %33 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  br label %35

34:                                               ; preds = %249
  switch i32 %231, label %275 [
    i32 1, label %255
    i32 2, label %252
  ]

35:                                               ; preds = %16, %249
  %36 = phi i8 [ 0, %16 ], [ %233, %249 ]
  %37 = phi %"struct.std::__1::pair"* [ %10, %16 ], [ %250, %249 ]
  %38 = phi i8 [ 0, %16 ], [ %232, %249 ]
  %39 = phi i32 [ 0, %16 ], [ %231, %249 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  %40 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 0, i32 1, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %42, label %66, label %43

43:                                               ; preds = %35
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 acquire, align 4
  %46 = and i32 %45, 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %43
  %49 = load atomic i32, i32* %44 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %66

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i33
  %56 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %55, i33 1) #8
  %57 = extractvalue { i33, i1 } %56, 1
  %58 = extractvalue { i33, i1 } %56, 0
  %59 = icmp slt i33 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %62, !prof !2

61:                                               ; preds = %52
  call void @llvm.trap() #8
  unreachable

62:                                               ; preds = %52
  %63 = trunc i33 %58 to i32
  store i32 %63, i32* %53, align 4
  br label %66

64:                                               ; preds = %43
  %65 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %41) #8
  br label %66

66:                                               ; preds = %35, %48, %62, %64
  %67 = phi %"class.WTF::StringImpl"* [ %65, %64 ], [ %41, %48 ], [ %41, %62 ], [ null, %35 ]
  %68 = ptrtoint %"class.WTF::StringImpl"* %67 to i64
  store i64 %68, i64* %18, align 8
  %69 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %20, align 8
  %72 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %71, i64 0, i32 3, i32 0, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %70, %73
  br i1 %74, label %97, label %75

75:                                               ; preds = %66
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = lshr i32 %77, 8
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %75
  %81 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %70) #8
  br label %82

82:                                               ; preds = %80, %75
  %83 = phi i32 [ %81, %80 ], [ %78, %75 ]
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = lshr i32 %85, 8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %82
  %89 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %73) #8
  br label %90

90:                                               ; preds = %88, %82
  %91 = phi i32 [ %89, %88 ], [ %86, %82 ]
  %92 = icmp eq i32 %83, %91
  br i1 %92, label %93, label %110

93:                                               ; preds = %90
  %94 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %70, %"class.WTF::StringImpl"* %73) #8
  br i1 %94, label %95, label %110

95:                                               ; preds = %93
  %96 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  br label %97

97:                                               ; preds = %95, %66
  %98 = phi %"class.WTF::StringImpl"* [ %96, %95 ], [ %67, %66 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %100, label %102

100:                                              ; preds = %97
  store i8* null, i8** %30, align 8
  %101 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %101, i64* %32, align 8
  br label %106

102:                                              ; preds = %97
  store %"class.WTF::StringImpl"* %98, %"class.WTF::StringImpl"** %29, align 8
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 1
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 1
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %31, align 8
  br label %106

106:                                              ; preds = %100, %102
  %107 = phi i32 [ %104, %102 ], [ 0, %100 ]
  store i32 %107, i32* %33, align 8
  %108 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm13EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %5, [13 x i8]* nonnull dereferenceable(13) @.str.3)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #8
  %109 = select i1 %108, i8 1, i8 %36
  br label %230

110:                                              ; preds = %90, %93
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %112 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %22, align 8
  %113 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %112, i64 0, i32 3, i32 0, i32 0, i32 0
  %114 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %113, align 8
  %115 = icmp eq %"class.WTF::StringImpl"* %111, %114
  br i1 %115, label %136, label %116

116:                                              ; preds = %110
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = load atomic i32, i32* %117 monotonic, align 4
  %119 = lshr i32 %118, 8
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %123

121:                                              ; preds = %116
  %122 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %111) #8
  br label %123

123:                                              ; preds = %121, %116
  %124 = phi i32 [ %122, %121 ], [ %119, %116 ]
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load atomic i32, i32* %125 monotonic, align 4
  %127 = lshr i32 %126, 8
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %131

129:                                              ; preds = %123
  %130 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %114) #8
  br label %131

131:                                              ; preds = %129, %123
  %132 = phi i32 [ %130, %129 ], [ %127, %123 ]
  %133 = icmp eq i32 %124, %132
  br i1 %133, label %134, label %173

134:                                              ; preds = %131
  %135 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %111, %"class.WTF::StringImpl"* %114) #8
  br i1 %135, label %136, label %173

136:                                              ; preds = %110, %134
  %137 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %138 = icmp eq %"class.WTF::StringImpl"* %137, null
  br i1 %138, label %156, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = load atomic i32, i32* %140 monotonic, align 4
  %142 = and i32 %141, 2
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %156

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 0
  %146 = load i32, i32* %145, align 4
  %147 = zext i32 %146 to i33
  %148 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %147, i33 1) #8
  %149 = extractvalue { i33, i1 } %148, 1
  %150 = extractvalue { i33, i1 } %148, 0
  %151 = icmp slt i33 %150, 0
  %152 = or i1 %149, %151
  br i1 %152, label %153, label %154, !prof !2

153:                                              ; preds = %144
  call void @llvm.trap() #8
  unreachable

154:                                              ; preds = %144
  %155 = trunc i33 %150 to i32
  store i32 %155, i32* %145, align 4
  br label %156

156:                                              ; preds = %154, %139, %136
  %157 = ptrtoint %"class.WTF::StringImpl"* %137 to i64
  %158 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  store i64 %157, i64* %26, align 8
  %159 = icmp eq %"class.WTF::StringImpl"* %158, null
  br i1 %159, label %230, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %162 = load atomic i32, i32* %161 monotonic, align 4
  %163 = and i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 0, i32 0
  %166 = load i32, i32* %165, align 4
  br i1 %164, label %167, label %169

167:                                              ; preds = %160
  %168 = add i32 %166, -1
  store i32 %168, i32* %165, align 4
  br label %169

169:                                              ; preds = %167, %160
  %170 = phi i32 [ %168, %167 ], [ %166, %160 ]
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %230

172:                                              ; preds = %169
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %158) #8
  br label %230

173:                                              ; preds = %131, %134
  %174 = and i8 %38, 1
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %176, label %230

176:                                              ; preds = %173
  %177 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %178 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %24, align 8
  %179 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %178, i64 0, i32 3, i32 0, i32 0, i32 0
  %180 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %179, align 8
  %181 = icmp eq %"class.WTF::StringImpl"* %177, %180
  br i1 %181, label %202, label %182

182:                                              ; preds = %176
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %184 = load atomic i32, i32* %183 monotonic, align 4
  %185 = lshr i32 %184, 8
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %189

187:                                              ; preds = %182
  %188 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %177) #8
  br label %189

189:                                              ; preds = %187, %182
  %190 = phi i32 [ %188, %187 ], [ %185, %182 ]
  %191 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %180, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %192 = load atomic i32, i32* %191 monotonic, align 4
  %193 = lshr i32 %192, 8
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %197

195:                                              ; preds = %189
  %196 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %180) #8
  br label %197

197:                                              ; preds = %195, %189
  %198 = phi i32 [ %196, %195 ], [ %193, %189 ]
  %199 = icmp eq i32 %190, %198
  br i1 %199, label %200, label %230

200:                                              ; preds = %197
  %201 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %177, %"class.WTF::StringImpl"* %180) #8
  br i1 %201, label %202, label %230

202:                                              ; preds = %176, %200
  %203 = call %"class.WTF::StringImpl"* @_ZN5blink14ExtractCharsetERKN3WTF6StringE(%"class.WTF::String"* nonnull dereferenceable(8) %25)
  %204 = ptrtoint %"class.WTF::StringImpl"* %203 to i64
  %205 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  store i64 %204, i64* %26, align 8
  %206 = icmp eq %"class.WTF::StringImpl"* %205, null
  br i1 %206, label %222, label %207

207:                                              ; preds = %202
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %205, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %209 = load atomic i32, i32* %208 monotonic, align 4
  %210 = and i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %205, i64 0, i32 0
  %213 = load i32, i32* %212, align 4
  br i1 %211, label %214, label %216

214:                                              ; preds = %207
  %215 = add i32 %213, -1
  store i32 %215, i32* %212, align 4
  br label %216

216:                                              ; preds = %214, %207
  %217 = phi i32 [ %215, %214 ], [ %213, %207 ]
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %220

219:                                              ; preds = %216
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %205) #8
  br label %220

220:                                              ; preds = %216, %219
  %221 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  br label %222

222:                                              ; preds = %220, %202
  %223 = phi %"class.WTF::StringImpl"* [ %221, %220 ], [ %203, %202 ]
  %224 = icmp eq %"class.WTF::StringImpl"* %223, null
  br i1 %224, label %229, label %225

225:                                              ; preds = %222
  %226 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %223, i64 0, i32 1
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %230

229:                                              ; preds = %222, %225
  br label %230

230:                                              ; preds = %197, %229, %225, %172, %169, %156, %106, %173, %200
  %231 = phi i32 [ %39, %173 ], [ %39, %200 ], [ %39, %106 ], [ 1, %156 ], [ 1, %169 ], [ 1, %172 ], [ %39, %229 ], [ 2, %225 ], [ %39, %197 ]
  %232 = phi i8 [ %38, %173 ], [ %38, %200 ], [ %38, %106 ], [ 1, %156 ], [ 1, %169 ], [ 1, %172 ], [ %38, %229 ], [ %38, %225 ], [ %38, %197 ]
  %233 = phi i8 [ %36, %173 ], [ %36, %200 ], [ %109, %106 ], [ %36, %156 ], [ %36, %169 ], [ %36, %172 ], [ %36, %229 ], [ %36, %225 ], [ %36, %197 ]
  %234 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %235 = icmp eq %"class.WTF::StringImpl"* %234, null
  br i1 %235, label %249, label %236

236:                                              ; preds = %230
  %237 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %234, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %238 = load atomic i32, i32* %237 monotonic, align 4
  %239 = and i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %234, i64 0, i32 0
  %242 = load i32, i32* %241, align 4
  br i1 %240, label %243, label %245

243:                                              ; preds = %236
  %244 = add i32 %242, -1
  store i32 %244, i32* %241, align 4
  br label %245

245:                                              ; preds = %243, %236
  %246 = phi i32 [ %244, %243 ], [ %242, %236 ]
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %249

248:                                              ; preds = %245
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %234) #8
  br label %249

249:                                              ; preds = %230, %245, %248
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  %250 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 1
  %251 = icmp eq %"struct.std::__1::pair"* %250, %14
  br i1 %251, label %34, label %35

252:                                              ; preds = %34
  %253 = and i8 %233, 1
  %254 = icmp eq i8 %253, 0
  br i1 %254, label %275, label %255

255:                                              ; preds = %34, %252
  %256 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %256) #8
  %257 = call %"class.WTF::StringImpl"* @_ZN5blink33StripLeadingAndTrailingHTMLSpacesERKN3WTF6StringE(%"class.WTF::String"* nonnull dereferenceable(8) %3)
  %258 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %257, %"class.WTF::StringImpl"** %258, align 8
  call void @_ZN3WTF12TextEncodingC1ERKNS_6StringE(%"class.WTF::TextEncoding"* nonnull %2, %"class.WTF::String"* nonnull dereferenceable(8) %6) #8
  %259 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %258, align 8
  %260 = icmp eq %"class.WTF::StringImpl"* %259, null
  br i1 %260, label %274, label %261

261:                                              ; preds = %255
  %262 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %259, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %263 = load atomic i32, i32* %262 monotonic, align 4
  %264 = and i32 %263, 2
  %265 = icmp eq i32 %264, 0
  %266 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %259, i64 0, i32 0
  %267 = load i32, i32* %266, align 4
  br i1 %265, label %268, label %270

268:                                              ; preds = %261
  %269 = add i32 %267, -1
  store i32 %269, i32* %266, align 4
  br label %270

270:                                              ; preds = %268, %261
  %271 = phi i32 [ %269, %268 ], [ %267, %261 ]
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %274

273:                                              ; preds = %270
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %259) #8
  br label %274

274:                                              ; preds = %255, %270, %273
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %256) #8
  br label %277

275:                                              ; preds = %1, %34, %252
  %276 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %2, i64 0, i32 0
  store i8* null, i8** %276, align 8
  br label %277

277:                                              ; preds = %275, %274
  %278 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %279 = icmp eq %"class.WTF::StringImpl"* %278, null
  br i1 %279, label %293, label %280

280:                                              ; preds = %277
  %281 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %278, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %282 = load atomic i32, i32* %281 monotonic, align 4
  %283 = and i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %278, i64 0, i32 0
  %286 = load i32, i32* %285, align 4
  br i1 %284, label %287, label %289

287:                                              ; preds = %280
  %288 = add i32 %286, -1
  store i32 %288, i32* %285, align 4
  br label %289

289:                                              ; preds = %287, %280
  %290 = phi i32 [ %288, %287 ], [ %286, %280 ]
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %293

292:                                              ; preds = %289
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %278) #8
  br label %293

293:                                              ; preds = %277, %289, %292
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  %294 = getelementptr inbounds %"class.WTF::TextEncoding", %"class.WTF::TextEncoding"* %2, i64 0, i32 0
  %295 = load i8*, i8** %294, align 8
  ret i8* %295
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.blink::QualifiedName"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %6, i64 0, i32 3, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %4, %8
  br i1 %9, label %30, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %4) #8
  br label %17

17:                                               ; preds = %15, %10
  %18 = phi i32 [ %16, %15 ], [ %13, %10 ]
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = lshr i32 %20, 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %8) #8
  br label %25

25:                                               ; preds = %23, %17
  %26 = phi i32 [ %24, %23 ], [ %21, %17 ]
  %27 = icmp eq i32 %18, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %25
  %29 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %4, %"class.WTF::StringImpl"* %8) #8
  br label %30

30:                                               ; preds = %2, %25, %28
  %31 = phi i1 [ %29, %28 ], [ true, %2 ], [ false, %25 ]
  ret i1 %31
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm13EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [13 x i8]* dereferenceable(13)) local_unnamed_addr #3 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 12
  br i1 %5, label %6, label %80

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %80

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %82, label %80

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  br label %62

45:                                               ; preds = %62
  %46 = getelementptr inbounds i16, i16* %44, i64 %79
  %47 = load i16, i16* %46, align 2
  %48 = add i16 %47, -65
  %49 = icmp ult i16 %48, 26
  %50 = zext i1 %49 to i16
  %51 = shl nuw nsw i16 %50, 5
  %52 = or i16 %51, %47
  %53 = zext i16 %52 to i32
  %54 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 %79
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp eq i32 %53, %59
  %61 = add nuw nsw i64 %63, 2
  br i1 %60, label %222, label %80

62:                                               ; preds = %222, %42
  %63 = phi i64 [ 0, %42 ], [ %61, %222 ]
  %64 = getelementptr inbounds i16, i16* %44, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = add i16 %65, -65
  %67 = icmp ult i16 %66, 26
  %68 = zext i1 %67 to i16
  %69 = shl nuw nsw i16 %68, 5
  %70 = or i16 %69, %65
  %71 = zext i16 %70 to i32
  %72 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 %63
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i64
  %75 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp eq i32 %71, %77
  %79 = or i64 %63, 1
  br i1 %78, label %45, label %80

80:                                               ; preds = %62, %45, %222, %14, %28, %82, %96, %110, %124, %138, %152, %166, %180, %194, %2
  %81 = phi i1 [ false, %2 ], [ false, %14 ], [ false, %28 ], [ false, %82 ], [ false, %96 ], [ false, %110 ], [ false, %124 ], [ false, %138 ], [ false, %152 ], [ false, %166 ], [ false, %180 ], [ false, %194 ], [ false, %62 ], [ false, %45 ], [ true, %222 ]
  ret i1 %81

82:                                               ; preds = %28
  %83 = getelementptr inbounds i8, i8* %15, i64 2
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 2
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i64
  %92 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp eq i32 %88, %94
  br i1 %95, label %96, label %80

96:                                               ; preds = %82
  %97 = getelementptr inbounds i8, i8* %15, i64 3
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i64
  %100 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 3
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = sext i8 %107 to i32
  %109 = icmp eq i32 %102, %108
  br i1 %109, label %110, label %80

110:                                              ; preds = %96
  %111 = getelementptr inbounds i8, i8* %15, i64 4
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i64
  %114 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 4
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i64
  %120 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = icmp eq i32 %116, %122
  br i1 %123, label %124, label %80

124:                                              ; preds = %110
  %125 = getelementptr inbounds i8, i8* %15, i64 5
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 5
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i64
  %134 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = sext i8 %135 to i32
  %137 = icmp eq i32 %130, %136
  br i1 %137, label %138, label %80

138:                                              ; preds = %124
  %139 = getelementptr inbounds i8, i8* %15, i64 6
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i64
  %142 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 6
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i64
  %148 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = sext i8 %149 to i32
  %151 = icmp eq i32 %144, %150
  br i1 %151, label %152, label %80

152:                                              ; preds = %138
  %153 = getelementptr inbounds i8, i8* %15, i64 7
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 7
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i64
  %162 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = sext i8 %163 to i32
  %165 = icmp eq i32 %158, %164
  br i1 %165, label %166, label %80

166:                                              ; preds = %152
  %167 = getelementptr inbounds i8, i8* %15, i64 8
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i64
  %170 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 8
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i64
  %176 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = sext i8 %177 to i32
  %179 = icmp eq i32 %172, %178
  br i1 %179, label %180, label %80

180:                                              ; preds = %166
  %181 = getelementptr inbounds i8, i8* %15, i64 9
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i64
  %184 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 9
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i64
  %190 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %189
  %191 = load i8, i8* %190, align 1
  %192 = sext i8 %191 to i32
  %193 = icmp eq i32 %186, %192
  br i1 %193, label %194, label %80

194:                                              ; preds = %180
  %195 = getelementptr inbounds i8, i8* %15, i64 10
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i64
  %198 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 10
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i64
  %204 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = sext i8 %205 to i32
  %207 = icmp eq i32 %200, %206
  br i1 %207, label %208, label %80

208:                                              ; preds = %194
  %209 = getelementptr inbounds i8, i8* %15, i64 11
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i64
  %212 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %211
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 11
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i64
  %218 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = sext i8 %219 to i32
  %221 = icmp eq i32 %214, %220
  ret i1 %221

222:                                              ; preds = %45
  %223 = icmp eq i64 %61, 12
  br i1 %223, label %80, label %62
}

declare void @_ZN3WTF12TextEncodingC1ERKNS_6StringE(%"class.WTF::TextEncoding"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15ThreadSafeMatchERKNS_13QualifiedNameES2_(%"class.blink::QualifiedName"* nocapture readonly dereferenceable(8), %"class.blink::QualifiedName"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %4, i64 0, i32 3, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %8, i64 0, i32 3, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %6, %10
  br i1 %11, label %32, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  %18 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %6) #8
  br label %19

19:                                               ; preds = %17, %12
  %20 = phi i32 [ %18, %17 ], [ %15, %12 ]
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = lshr i32 %22, 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #8
  br label %27

27:                                               ; preds = %25, %19
  %28 = phi i32 [ %26, %25 ], [ %23, %19 ]
  %29 = icmp eq i32 %20, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %27
  %31 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"* %10) #8
  br label %32

32:                                               ; preds = %2, %27, %30
  %33 = phi i1 [ %31, %30 ], [ true, %2 ], [ false, %27 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKhj(i8*, i32) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = tail call %"class.WTF::StringImpl"* @_ZN5blink18FindStringIfStaticIhEEPN3WTF10StringImplEPKT_j(i8* %0, i32 %1)
  %5 = ptrtoint %"class.WTF::StringImpl"* %4 to i64
  %6 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %6, label %26, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #8
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #8
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %22, %7
  %25 = bitcast %"class.WTF::String"* %3 to i64*
  store i64 %5, i64* %25, align 8
  br label %29

26:                                               ; preds = %2
  call void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"* nonnull %3, i8* %0, i32 %1) #8
  %27 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  br label %29

29:                                               ; preds = %26, %24
  %30 = phi %"class.WTF::StringImpl"* [ %28, %26 ], [ %4, %24 ]
  ret %"class.WTF::StringImpl"* %30
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN5blink18FindStringIfStaticIhEEPN3WTF10StringImplEPKT_j(i8*, i32) local_unnamed_addr #3 comdat {
  %3 = load i32, i32* @_ZN3WTF10StringImpl29highest_static_string_length_E, align 4
  %4 = icmp ult i32 %3, %1
  br i1 %4, label %160, label %5

5:                                                ; preds = %2
  %6 = and i32 %1, 1
  %7 = icmp eq i32 %6, 0
  %8 = lshr i32 %1, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %72, label %10

10:                                               ; preds = %5
  %11 = add nsw i32 %8, -1
  %12 = zext i32 %11 to i64
  %13 = and i32 %8, 1
  %14 = icmp eq i32 %8, 1
  br i1 %14, label %49, label %15

15:                                               ; preds = %10
  %16 = sub nsw i32 %8, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i32 [ -1640531527, %15 ], [ %45, %17 ]
  %19 = phi i8* [ %0, %15 ], [ %46, %17 ]
  %20 = phi i32 [ %16, %15 ], [ %47, %17 ]
  %21 = load i8, i8* %19, align 1
  %22 = getelementptr inbounds i8, i8* %19, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %21 to i32
  %25 = add i32 %18, %24
  %26 = shl i32 %25, 16
  %27 = zext i8 %23 to i32
  %28 = shl nuw nsw i32 %27, 11
  %29 = xor i32 %28, %25
  %30 = xor i32 %29, %26
  %31 = lshr i32 %30, 11
  %32 = add i32 %31, %30
  %33 = getelementptr inbounds i8, i8* %19, i64 2
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %19, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %34 to i32
  %38 = add i32 %32, %37
  %39 = shl i32 %38, 16
  %40 = zext i8 %36 to i32
  %41 = shl nuw nsw i32 %40, 11
  %42 = xor i32 %41, %38
  %43 = xor i32 %42, %39
  %44 = lshr i32 %43, 11
  %45 = add i32 %44, %43
  %46 = getelementptr inbounds i8, i8* %19, i64 4
  %47 = add i32 %20, -2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %17

49:                                               ; preds = %17, %10
  %50 = phi i32 [ undef, %10 ], [ %45, %17 ]
  %51 = phi i32 [ -1640531527, %10 ], [ %45, %17 ]
  %52 = phi i8* [ %0, %10 ], [ %46, %17 ]
  %53 = icmp eq i32 %13, 0
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = load i8, i8* %52, align 1
  %56 = getelementptr inbounds i8, i8* %52, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %55 to i32
  %59 = add i32 %51, %58
  %60 = shl i32 %59, 16
  %61 = zext i8 %57 to i32
  %62 = shl nuw nsw i32 %61, 11
  %63 = xor i32 %62, %59
  %64 = xor i32 %63, %60
  %65 = lshr i32 %64, 11
  %66 = add i32 %65, %64
  br label %67

67:                                               ; preds = %49, %54
  %68 = phi i32 [ %50, %49 ], [ %66, %54 ]
  %69 = shl nuw nsw i64 %12, 1
  %70 = add nuw nsw i64 %69, 2
  %71 = getelementptr i8, i8* %0, i64 %70
  br label %72

72:                                               ; preds = %67, %5
  %73 = phi i32 [ -1640531527, %5 ], [ %68, %67 ]
  %74 = phi i8* [ %0, %5 ], [ %71, %67 ]
  br i1 %7, label %83, label %75

75:                                               ; preds = %72
  %76 = load i8, i8* %74, align 1
  %77 = zext i8 %76 to i32
  %78 = add i32 %73, %77
  %79 = shl i32 %78, 11
  %80 = xor i32 %79, %78
  %81 = lshr i32 %80, 17
  %82 = add i32 %81, %80
  br label %83

83:                                               ; preds = %72, %75
  %84 = phi i32 [ %82, %75 ], [ %73, %72 ]
  %85 = shl i32 %84, 3
  %86 = xor i32 %85, %84
  %87 = lshr i32 %86, 5
  %88 = add i32 %87, %86
  %89 = shl i32 %88, 2
  %90 = xor i32 %89, %88
  %91 = lshr i32 %90, 15
  %92 = add i32 %91, %90
  %93 = shl i32 %92, 10
  %94 = xor i32 %93, %92
  %95 = and i32 %94, 16777215
  %96 = icmp eq i32 %95, 0
  %97 = select i1 %96, i32 8388608, i32 %95
  %98 = tail call dereferenceable(24) %"class.WTF::HashMap"* @_ZN3WTF10StringImpl16AllStaticStringsEv() #8
  %99 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %98, i64 0, i32 0, i32 0
  %100 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %99, align 8
  %101 = icmp eq %"struct.WTF::KeyValuePair"* %100, null
  %102 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %98, i64 0, i32 0, i32 1
  %103 = load i32, i32* %102, align 8
  br i1 %101, label %146, label %104

104:                                              ; preds = %83
  %105 = add i32 %103, -1
  %106 = zext i32 %105 to i64
  %107 = and i32 %97, %105
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %100, i64 %108
  %110 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %109, i64 0, i32 0
  %111 = load i32, i32* %110, align 4
  %112 = icmp eq i32 %111, %97
  br i1 %112, label %141, label %113

113:                                              ; preds = %104
  %114 = xor i32 %97, -1
  %115 = lshr i32 %97, 23
  %116 = add nsw i32 %115, %114
  %117 = shl i32 %116, 12
  %118 = xor i32 %117, %116
  %119 = lshr i32 %118, 7
  %120 = xor i32 %119, %118
  %121 = shl i32 %120, 2
  %122 = xor i32 %121, %120
  %123 = lshr i32 %122, 20
  %124 = xor i32 %123, %122
  %125 = or i32 %124, 1
  %126 = zext i32 %125 to i64
  br label %127

127:                                              ; preds = %132, %113
  %128 = phi i32 [ %111, %113 ], [ %139, %132 ]
  %129 = phi i64 [ %108, %113 ], [ %136, %132 ]
  %130 = phi i64 [ 0, %113 ], [ %134, %132 ]
  %131 = icmp eq i32 %128, 0
  br i1 %131, label %146, label %132

132:                                              ; preds = %127
  %133 = icmp eq i64 %130, 0
  %134 = select i1 %133, i64 %126, i64 %130
  %135 = add i64 %134, %129
  %136 = and i64 %135, %106
  %137 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %100, i64 %136
  %138 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %137, i64 0, i32 0
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, %97
  br i1 %140, label %141, label %127

141:                                              ; preds = %132, %104
  %142 = phi %"struct.WTF::KeyValuePair"* [ %109, %104 ], [ %137, %132 ]
  %143 = icmp eq %"struct.WTF::KeyValuePair"* %142, null
  br i1 %143, label %146, label %144

144:                                              ; preds = %141
  %145 = zext i32 %103 to i64
  br label %149

146:                                              ; preds = %127, %141, %83
  %147 = zext i32 %103 to i64
  %148 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %100, i64 %147
  br label %149

149:                                              ; preds = %144, %146
  %150 = phi i64 [ %145, %144 ], [ %147, %146 ]
  %151 = phi %"struct.WTF::KeyValuePair"* [ %142, %144 ], [ %148, %146 ]
  %152 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %100, i64 %150
  %153 = icmp eq %"struct.WTF::KeyValuePair"* %151, %152
  br i1 %153, label %160, label %154

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %151, i64 0, i32 1
  %156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %155, align 8
  %157 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKhj(%"class.WTF::StringImpl"* %156, i8* %0, i32 %1) #8
  br i1 %157, label %158, label %160

158:                                              ; preds = %154
  %159 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %155, align 8
  br label %160

160:                                              ; preds = %158, %149, %154, %2
  %161 = phi %"class.WTF::StringImpl"* [ null, %2 ], [ %159, %158 ], [ null, %149 ], [ null, %154 ]
  ret %"class.WTF::StringImpl"* %161
}

declare void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"*, i8*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16*, i32, i32) local_unnamed_addr #0 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = tail call %"class.WTF::StringImpl"* @_ZN5blink18FindStringIfStaticIDsEEPN3WTF10StringImplEPKT_j(i16* %0, i32 %1)
  %6 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %7 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %36

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #8
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #8
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %36

25:                                               ; preds = %3
  switch i32 %2, label %32 [
    i32 0, label %26
    i32 1, label %29
  ]

26:                                               ; preds = %25
  %27 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* %0, i32 %1) #8
  %28 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  br label %36

29:                                               ; preds = %25
  %30 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String23Make8BitFrom16BitSourceEPKDsj(i16* %0, i32 %1) #8
  %31 = ptrtoint %"class.WTF::StringImpl"* %30 to i64
  br label %36

32:                                               ; preds = %25
  %33 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #8
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %4, i16* %0, i32 %1) #8
  %34 = bitcast %"class.WTF::String"* %4 to i64*
  %35 = load i64, i64* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #8
  br label %36

36:                                               ; preds = %23, %8, %29, %32, %26
  %37 = phi i64 [ %35, %32 ], [ %31, %29 ], [ %28, %26 ], [ %6, %8 ], [ %6, %23 ]
  %38 = inttoptr i64 %37 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %38
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN5blink18FindStringIfStaticIDsEEPN3WTF10StringImplEPKT_j(i16*, i32) local_unnamed_addr #3 comdat {
  %3 = load i32, i32* @_ZN3WTF10StringImpl29highest_static_string_length_E, align 4
  %4 = icmp ult i32 %3, %1
  br i1 %4, label %160, label %5

5:                                                ; preds = %2
  %6 = and i32 %1, 1
  %7 = icmp eq i32 %6, 0
  %8 = lshr i32 %1, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %72, label %10

10:                                               ; preds = %5
  %11 = add nsw i32 %8, -1
  %12 = zext i32 %11 to i64
  %13 = and i32 %8, 1
  %14 = icmp eq i32 %8, 1
  br i1 %14, label %49, label %15

15:                                               ; preds = %10
  %16 = sub nsw i32 %8, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i32 [ -1640531527, %15 ], [ %45, %17 ]
  %19 = phi i16* [ %0, %15 ], [ %46, %17 ]
  %20 = phi i32 [ %16, %15 ], [ %47, %17 ]
  %21 = load i16, i16* %19, align 2
  %22 = getelementptr inbounds i16, i16* %19, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %21 to i32
  %25 = add i32 %18, %24
  %26 = shl i32 %25, 16
  %27 = zext i16 %23 to i32
  %28 = shl nuw nsw i32 %27, 11
  %29 = xor i32 %28, %25
  %30 = xor i32 %29, %26
  %31 = lshr i32 %30, 11
  %32 = add i32 %31, %30
  %33 = getelementptr inbounds i16, i16* %19, i64 2
  %34 = load i16, i16* %33, align 2
  %35 = getelementptr inbounds i16, i16* %19, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %34 to i32
  %38 = add i32 %32, %37
  %39 = shl i32 %38, 16
  %40 = zext i16 %36 to i32
  %41 = shl nuw nsw i32 %40, 11
  %42 = xor i32 %41, %38
  %43 = xor i32 %42, %39
  %44 = lshr i32 %43, 11
  %45 = add i32 %44, %43
  %46 = getelementptr inbounds i16, i16* %19, i64 4
  %47 = add i32 %20, -2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %17

49:                                               ; preds = %17, %10
  %50 = phi i32 [ undef, %10 ], [ %45, %17 ]
  %51 = phi i32 [ -1640531527, %10 ], [ %45, %17 ]
  %52 = phi i16* [ %0, %10 ], [ %46, %17 ]
  %53 = icmp eq i32 %13, 0
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = load i16, i16* %52, align 2
  %56 = getelementptr inbounds i16, i16* %52, i64 1
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %55 to i32
  %59 = add i32 %51, %58
  %60 = shl i32 %59, 16
  %61 = zext i16 %57 to i32
  %62 = shl nuw nsw i32 %61, 11
  %63 = xor i32 %62, %59
  %64 = xor i32 %63, %60
  %65 = lshr i32 %64, 11
  %66 = add i32 %65, %64
  br label %67

67:                                               ; preds = %49, %54
  %68 = phi i32 [ %50, %49 ], [ %66, %54 ]
  %69 = shl nuw nsw i64 %12, 1
  %70 = add nuw nsw i64 %69, 2
  %71 = getelementptr i16, i16* %0, i64 %70
  br label %72

72:                                               ; preds = %67, %5
  %73 = phi i32 [ -1640531527, %5 ], [ %68, %67 ]
  %74 = phi i16* [ %0, %5 ], [ %71, %67 ]
  br i1 %7, label %83, label %75

75:                                               ; preds = %72
  %76 = load i16, i16* %74, align 2
  %77 = zext i16 %76 to i32
  %78 = add i32 %73, %77
  %79 = shl i32 %78, 11
  %80 = xor i32 %79, %78
  %81 = lshr i32 %80, 17
  %82 = add i32 %81, %80
  br label %83

83:                                               ; preds = %72, %75
  %84 = phi i32 [ %82, %75 ], [ %73, %72 ]
  %85 = shl i32 %84, 3
  %86 = xor i32 %85, %84
  %87 = lshr i32 %86, 5
  %88 = add i32 %87, %86
  %89 = shl i32 %88, 2
  %90 = xor i32 %89, %88
  %91 = lshr i32 %90, 15
  %92 = add i32 %91, %90
  %93 = shl i32 %92, 10
  %94 = xor i32 %93, %92
  %95 = and i32 %94, 16777215
  %96 = icmp eq i32 %95, 0
  %97 = select i1 %96, i32 8388608, i32 %95
  %98 = tail call dereferenceable(24) %"class.WTF::HashMap"* @_ZN3WTF10StringImpl16AllStaticStringsEv() #8
  %99 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %98, i64 0, i32 0, i32 0
  %100 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %99, align 8
  %101 = icmp eq %"struct.WTF::KeyValuePair"* %100, null
  %102 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %98, i64 0, i32 0, i32 1
  %103 = load i32, i32* %102, align 8
  br i1 %101, label %146, label %104

104:                                              ; preds = %83
  %105 = add i32 %103, -1
  %106 = zext i32 %105 to i64
  %107 = and i32 %97, %105
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %100, i64 %108
  %110 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %109, i64 0, i32 0
  %111 = load i32, i32* %110, align 4
  %112 = icmp eq i32 %111, %97
  br i1 %112, label %141, label %113

113:                                              ; preds = %104
  %114 = xor i32 %97, -1
  %115 = lshr i32 %97, 23
  %116 = add nsw i32 %115, %114
  %117 = shl i32 %116, 12
  %118 = xor i32 %117, %116
  %119 = lshr i32 %118, 7
  %120 = xor i32 %119, %118
  %121 = shl i32 %120, 2
  %122 = xor i32 %121, %120
  %123 = lshr i32 %122, 20
  %124 = xor i32 %123, %122
  %125 = or i32 %124, 1
  %126 = zext i32 %125 to i64
  br label %127

127:                                              ; preds = %132, %113
  %128 = phi i32 [ %111, %113 ], [ %139, %132 ]
  %129 = phi i64 [ %108, %113 ], [ %136, %132 ]
  %130 = phi i64 [ 0, %113 ], [ %134, %132 ]
  %131 = icmp eq i32 %128, 0
  br i1 %131, label %146, label %132

132:                                              ; preds = %127
  %133 = icmp eq i64 %130, 0
  %134 = select i1 %133, i64 %126, i64 %130
  %135 = add i64 %134, %129
  %136 = and i64 %135, %106
  %137 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %100, i64 %136
  %138 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %137, i64 0, i32 0
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, %97
  br i1 %140, label %141, label %127

141:                                              ; preds = %132, %104
  %142 = phi %"struct.WTF::KeyValuePair"* [ %109, %104 ], [ %137, %132 ]
  %143 = icmp eq %"struct.WTF::KeyValuePair"* %142, null
  br i1 %143, label %146, label %144

144:                                              ; preds = %141
  %145 = zext i32 %103 to i64
  br label %149

146:                                              ; preds = %127, %141, %83
  %147 = zext i32 %103 to i64
  %148 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %100, i64 %147
  br label %149

149:                                              ; preds = %144, %146
  %150 = phi i64 [ %145, %144 ], [ %147, %146 ]
  %151 = phi %"struct.WTF::KeyValuePair"* [ %142, %144 ], [ %148, %146 ]
  %152 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %100, i64 %150
  %153 = icmp eq %"struct.WTF::KeyValuePair"* %151, %152
  br i1 %153, label %160, label %154

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %151, i64 0, i32 1
  %156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %155, align 8
  %157 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKDsj(%"class.WTF::StringImpl"* %156, i16* %0, i32 %1) #8
  br i1 %157, label %158, label %160

158:                                              ; preds = %154
  %159 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %155, align 8
  br label %160

160:                                              ; preds = %158, %149, %154, %2
  %161 = phi %"class.WTF::StringImpl"* [ null, %2 ], [ %159, %158 ], [ null, %149 ], [ null, %154 ]
  ret %"class.WTF::StringImpl"* %161
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16*, i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF6String23Make8BitFrom16BitSourceEPKDsj(i16*, i32) local_unnamed_addr #2

declare void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"*, i16*, i32) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare zeroext i1 @_ZNK3WTF10StringImpl8EndsWithEDs(%"class.WTF::StringImpl"*, i16 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

declare i32 @_ZN3WTF15CharactersToIntEPKhmNS_20NumberParsingOptionsEPb(i8*, i64, i32, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZN3WTF15CharactersToIntEPKDsmNS_20NumberParsingOptionsEPb(i16*, i64, i32, i8*) local_unnamed_addr #2

declare i32 @_ZN3WTF16CharactersToUIntEPKhmNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i8*, i64, i32, i32*) local_unnamed_addr #2

declare i32 @_ZN3WTF16CharactersToUIntEPKDsmNS_20NumberParsingOptionsEPNS_19NumberParsingResultE(i16*, i64, i32, i32*) local_unnamed_addr #2

declare double @_ZN3WTF18CharactersToDoubleEPKhmRm(i8*, i64, i64* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIdLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIdEEvOT_(%"class.WTF::Vector"*, double* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load double*, double** %6, align 8
  %8 = icmp ugt double* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds double, double* %7, i64 %10
  %12 = icmp ugt double* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq double* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm(i64 %26) #8
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIdEEPKcv, i64 0, i64 0)) #8
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to double*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load double*, double** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne double* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast double* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #8
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #8
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to double*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint double* %1 to i64
  %56 = ptrtoint double* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq double* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm(i64 %71) #8
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIdEEPKcv, i64 0, i64 0)) #8
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load double*, double** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne double* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast double* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #8
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #8
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to double*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi double* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds double, double* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi double* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi double* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds double, double* %100, i64 %103
  %105 = bitcast double* %101 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = bitcast double* %104 to i64*
  store i64 %106, i64* %107, align 8
  %108 = load i32, i32* %3, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIdEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.7, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare double @_ZN3WTF18CharactersToDoubleEPKDsmRm(i16*, i64, i64* dereferenceable(8)) local_unnamed_addr #2

declare i32 @_ZN3WTF10StringImpl21FindIgnoringASCIICaseERKNS_10StringViewEj(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* dereferenceable(24), i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare dereferenceable(24) %"class.WTF::HashMap"* @_ZN3WTF10StringImpl16AllStaticStringsEv() local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKhj(%"class.WTF::StringImpl"*, i8*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKDsj(%"class.WTF::StringImpl"*, i16*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
