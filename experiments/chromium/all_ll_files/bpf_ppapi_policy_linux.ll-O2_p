; ModuleID = '../../sandbox/policy/linux/bpf_ppapi_policy_linux.cc'
source_filename = "../../sandbox/policy/linux/bpf_ppapi_policy_linux.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%"class.sandbox::policy::PpapiProcessPolicy" = type { %"class.sandbox::policy::BPFBasePolicy" }
%"class.sandbox::policy::BPFBasePolicy" = type { %"class.sandbox::bpf_dsl::Policy", %"class.std::__1::unique_ptr" }
%"class.sandbox::bpf_dsl::Policy" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sandbox::BaselinePolicy"* }
%"class.sandbox::BaselinePolicy" = type { %"class.sandbox::bpf_dsl::Policy", i32, i32 }
%"class.sandbox::bpf_dsl::internal::ResultExprImpl" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }

@_ZTVN7sandbox6policy18PpapiProcessPolicyE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sandbox::policy::PpapiProcessPolicy"*)* @_ZN7sandbox6policy18PpapiProcessPolicyD2Ev to i8*), i8* bitcast (void (%"class.sandbox::policy::PpapiProcessPolicy"*)* @_ZN7sandbox6policy18PpapiProcessPolicyD0Ev to i8*), i8* bitcast ({ %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::policy::PpapiProcessPolicy"*, i32)* @_ZNK7sandbox6policy18PpapiProcessPolicy15EvaluateSyscallEi to i8*), i8* bitcast ({ %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::policy::BPFBasePolicy"*)* @_ZNK7sandbox6policy13BPFBasePolicy14InvalidSyscallEv to i8*)] }, align 8

@_ZN7sandbox6policy18PpapiProcessPolicyC1Ev = hidden unnamed_addr alias void (%"class.sandbox::policy::PpapiProcessPolicy"*), void (%"class.sandbox::policy::PpapiProcessPolicy"*)* @_ZN7sandbox6policy18PpapiProcessPolicyC2Ev
@_ZN7sandbox6policy18PpapiProcessPolicyD1Ev = hidden unnamed_addr alias void (%"class.sandbox::policy::PpapiProcessPolicy"*), void (%"class.sandbox::policy::PpapiProcessPolicy"*)* @_ZN7sandbox6policy18PpapiProcessPolicyD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7sandbox6policy18PpapiProcessPolicyC2Ev(%"class.sandbox::policy::PpapiProcessPolicy"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::PpapiProcessPolicy", %"class.sandbox::policy::PpapiProcessPolicy"* %0, i64 0, i32 0
  tail call void @_ZN7sandbox6policy13BPFBasePolicyC2Ev(%"class.sandbox::policy::BPFBasePolicy"* %2) #4
  %3 = getelementptr inbounds %"class.sandbox::policy::PpapiProcessPolicy", %"class.sandbox::policy::PpapiProcessPolicy"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7sandbox6policy18PpapiProcessPolicyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN7sandbox6policy13BPFBasePolicyC2Ev(%"class.sandbox::policy::BPFBasePolicy"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7sandbox6policy13BPFBasePolicyD2Ev(%"class.sandbox::policy::BPFBasePolicy"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7sandbox6policy18PpapiProcessPolicyD2Ev(%"class.sandbox::policy::PpapiProcessPolicy"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::PpapiProcessPolicy", %"class.sandbox::policy::PpapiProcessPolicy"* %0, i64 0, i32 0
  tail call void @_ZN7sandbox6policy13BPFBasePolicyD2Ev(%"class.sandbox::policy::BPFBasePolicy"* %2) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7sandbox6policy18PpapiProcessPolicyD0Ev(%"class.sandbox::policy::PpapiProcessPolicy"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::PpapiProcessPolicy", %"class.sandbox::policy::PpapiProcessPolicy"* %0, i64 0, i32 0
  tail call void @_ZN7sandbox6policy13BPFBasePolicyD2Ev(%"class.sandbox::policy::BPFBasePolicy"* %2) #4
  %3 = bitcast %"class.sandbox::policy::PpapiProcessPolicy"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy18PpapiProcessPolicy15EvaluateSyscallEi(%"class.sandbox::policy::PpapiProcessPolicy"*, i32) unnamed_addr #0 align 2 {
  switch i32 %1, label %13 [
    i32 157, label %3
    i32 18, label %3
    i32 146, label %3
    i32 147, label %3
    i32 99, label %3
    i32 100, label %3
    i32 204, label %5
    i32 143, label %5
    i32 145, label %5
    i32 144, label %5
    i32 16, label %11
  ]

3:                                                ; preds = %2, %2, %2, %2, %2, %2
  %4 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox7bpf_dsl5AllowEv() #4
  br label %16

5:                                                ; preds = %2, %2, %2, %2
  %6 = getelementptr inbounds %"class.sandbox::policy::PpapiProcessPolicy", %"class.sandbox::policy::PpapiProcessPolicy"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"class.sandbox::BaselinePolicy"*, %"class.sandbox::BaselinePolicy"** %6, align 8
  %8 = getelementptr inbounds %"class.sandbox::BaselinePolicy", %"class.sandbox::BaselinePolicy"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox19RestrictSchedTargetEii(i32 %9, i32 %1) #4
  br label %16

11:                                               ; preds = %2
  %12 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox7bpf_dsl5ErrorEi(i32 25) #4
  br label %16

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.sandbox::policy::PpapiProcessPolicy", %"class.sandbox::policy::PpapiProcessPolicy"* %0, i64 0, i32 0
  %15 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy13BPFBasePolicy15EvaluateSyscallEi(%"class.sandbox::policy::BPFBasePolicy"* %14, i32 %1) #4
  br label %16

16:                                               ; preds = %13, %11, %5, %3
  %17 = phi { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } [ %15, %13 ], [ %12, %11 ], [ %10, %5 ], [ %4, %3 ]
  ret { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } %17
}

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox7bpf_dsl5AllowEv() local_unnamed_addr #1

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox19RestrictSchedTargetEii(i32, i32) local_unnamed_addr #1

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox7bpf_dsl5ErrorEi(i32) local_unnamed_addr #1

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy13BPFBasePolicy15EvaluateSyscallEi(%"class.sandbox::policy::BPFBasePolicy"*, i32) unnamed_addr #1

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy13BPFBasePolicy14InvalidSyscallEv(%"class.sandbox::policy::BPFBasePolicy"*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
