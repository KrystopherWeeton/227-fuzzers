; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_cache.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_cache.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector.9", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { i32*, i32*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i32* }
%"struct.std::__1::pair.203" = type { float, float }
%"struct.jxl::PassDefinition" = type { i64, i64, i8, i64 }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.jxl::PassesEncoderState" = type { %"struct.jxl::PassesSharedState", %"class.jxl::Plane", %"class.jxl::Plane", %"class.std::__1::vector.177", %"class.std::__1::vector.190", %"class.jxl::ProgressiveSplitter", %"struct.jxl::CompressParams", %"class.std::__1::vector.204", %"class.std::__1::vector.98", %"class.std::__1::vector.9", float, float, %"class.std::__1::unique_ptr.234" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.54", %"class.jxl::Plane.23", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.9", %"class.jxl::Plane.23", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.104], i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.4" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.9", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.16", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane.23", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.24", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.28" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26", %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.26" = type { float* }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.49" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.31, %"struct.jxl::DctQuantWeightParams", %union.anon.48 }>
%union.anon.31 = type { %"struct.std::__1::array.38", [4 x i8] }
%"struct.std::__1::array.38" = type { [3 x %"struct.std::__1::array.39"] }
%"struct.std::__1::array.39" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.30"] }
%"struct.std::__1::array.30" = type { [17 x float] }
%union.anon.48 = type { i8 }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.54" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.55", %"class.jxl::Plane.55", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.55" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.56", %"class.std::__1::vector.70", %"class.std::__1::vector.70" }
%"class.std::__1::vector.56" = type { %"class.std::__1::__vector_base.57" }
%"class.std::__1::__vector_base.57" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.65" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.58", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.60" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { i64*, i64*, %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.77", %"class.std::__1::vector.91" }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.86" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.79", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.79" = type { %"class.std::__1::__vector_base.80" }
%"class.std::__1::__vector_base.80" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.81" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.93" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"struct.jxl::Spline::Point"* }
%"class.jxl::Plane.23" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.41"], %"class.std::__1::vector.9", %"class.std::__1::vector.98", i64, i64 }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base.42" }
%"class.std::__1::__vector_base.42" = type { i32*, i32*, %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { i32* }
%struct.anon.104 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.105", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.169", i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.108", %"class.std::__1::vector.115", %"class.std::__1::vector.108", %"class.std::__1::vector.122", %"class.std::__1::vector.130", %"class.std::__1::vector.139", %"class.std::__1::vector.153", %"class.std::__1::vector.98", %"class.std::__1::vector.108", %"class.std::__1::vector.98", i32, i8, %"class.std::__1::vector.98" }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { i32*, i32*, %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { i32* }
%"class.std::__1::vector.122" = type { %"class.std::__1::__vector_base.123" }
%"class.std::__1::__vector_base.123" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.125" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.124", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.124" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.134" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.132", %"struct.std::__1::array.133", i32, i8, [3 x i8] }>
%"struct.std::__1::array.132" = type { [17 x i32] }
%"struct.std::__1::array.133" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.148" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.141" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { i16*, i16*, %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { i16* }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.153" = type { %"class.std::__1::__vector_base.154" }
%"class.std::__1::__vector_base.154" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.163" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.155", i32, %"class.std::__1::vector.9", %"class.std::__1::vector.156" }
%"struct.std::__1::array.155" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.158" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"*, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.std::__1::vector.98"* }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.177" = type { %"class.std::__1::__vector_base.178" }
%"class.std::__1::__vector_base.178" = type { %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"*, %"class.std::__1::__compressed_pair.185" }
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"class.std::__1::unique_ptr.179"* }
%"class.std::__1::vector.190" = type { %"class.std::__1::__vector_base.191" }
%"class.std::__1::__vector_base.191" = type { %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"*, %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::unique_ptr.192" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"struct.jxl::BitWriter"* }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.std::__1::unique_ptr.192"* }
%"class.jxl::ProgressiveSplitter" = type <{ %"struct.jxl::ProgressiveMode", %"class.jxl::Plane"*, float, [4 x i8] }>
%"struct.jxl::ProgressiveMode" = type { i64, [11 x %"struct.jxl::PassDefinition"] }
%"struct.jxl::CompressParams" = type { float, i64, float, float, float, i8, [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i64, float, %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair.203", i32, float, float, i32, i32, i8, i8, i64, i64 }
%"class.std::__1::vector.204" = type { %"class.std::__1::__vector_base.205" }
%"class.std::__1::__vector_base.205" = type { %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"*, %"class.std::__1::__compressed_pair.229" }
%"struct.jxl::PassesEncoderState::PassData" = type { %"class.std::__1::vector.206", %"class.std::__1::vector.98", %"struct.jxl::EntropyEncodingData" }
%"class.std::__1::vector.206" = type { %"class.std::__1::__vector_base.207" }
%"class.std::__1::__vector_base.207" = type { %"class.std::__1::vector.208"*, %"class.std::__1::vector.208"*, %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::vector.208" = type { %"class.std::__1::__vector_base.409" }
%"class.std::__1::__vector_base.409" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.410" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.411" }
%"struct.std::__1::__compressed_pair_elem.411" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.std::__1::vector.208"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.214", i8, %"class.std::__1::vector.222", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.214" = type { %"class.std::__1::__vector_base.215" }
%"class.std::__1::__vector_base.215" = type { %"class.std::__1::vector.216"*, %"class.std::__1::vector.216"*, %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::vector.216" = type { %"class.std::__1::__vector_base.415" }
%"class.std::__1::__vector_base.415" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.423" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.416", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.416" = type { %"class.std::__1::__vector_base.417" }
%"class.std::__1::__vector_base.417" = type { i16*, i16*, %"class.std::__1::__compressed_pair.418" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.419" }
%"struct.std::__1::__compressed_pair_elem.419" = type { i16* }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.424" }
%"struct.std::__1::__compressed_pair_elem.424" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"class.std::__1::vector.216"* }
%"class.std::__1::vector.222" = type { %"class.std::__1::__vector_base.223" }
%"class.std::__1::__vector_base.223" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.224" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"struct.jxl::PassesEncoderState::PassData"* }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { i8*, i8*, %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::unique_ptr.234" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.jxl::EncoderHeuristics"* }
%"class.jxl::EncoderHeuristics" = type { i32 (...)** }
%"class.jxl::ModularFrameEncoder" = type { %"class.std::__1::vector.70", %"class.std::__1::vector.98", %"class.std::__1::vector.240", %"class.std::__1::vector.268", %"class.std::__1::vector.275", %"class.std::__1::vector.206", %"class.std::__1::vector.282", %"class.std::__1::vector.206", %"struct.jxl::EntropyEncodingData", %"class.std::__1::vector.98", %"struct.jxl::FrameDimensions", %"struct.jxl::CompressParams", float, float, %"class.std::__1::vector.70", %"class.std::__1::vector.289", %"class.std::__1::vector.298", %"class.std::__1::vector.70" }
%"class.std::__1::vector.240" = type { %"class.std::__1::__vector_base.241" }
%"class.std::__1::__vector_base.241" = type { %"class.jxl::Image"*, %"class.jxl::Image"*, %"class.std::__1::__compressed_pair.263" }
%"class.jxl::Image" = type <{ %"class.std::__1::vector.242", %"class.std::__1::vector.249", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.242" = type { %"class.std::__1::__vector_base.243" }
%"class.std::__1::__vector_base.243" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.244" }
%"class.jxl::Channel" = type { %"class.jxl::Plane.54", i64, i64, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.249" = type { %"class.std::__1::__vector_base.250" }
%"class.std::__1::__vector_base.250" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.258" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.251", i32, i32, i8, i8, [6 x i8] }>
%"class.std::__1::vector.251" = type { %"class.std::__1::__vector_base.252" }
%"class.std::__1::__vector_base.252" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.253" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.jxl::Transform"* }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.jxl::Image"* }
%"class.std::__1::vector.268" = type { %"class.std::__1::__vector_base.269" }
%"class.std::__1::__vector_base.269" = type { %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"*, %"class.std::__1::__compressed_pair.270" }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"struct.jxl::ModularOptions"* }
%"class.std::__1::vector.275" = type { %"class.std::__1::__vector_base.276" }
%"class.std::__1::__vector_base.276" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.277" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.278" = type { %"struct.jxl::PropertyDecisionNode"* }
%"class.std::__1::vector.282" = type { %"class.std::__1::__vector_base.283" }
%"class.std::__1::__vector_base.283" = type { %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"*, %"class.std::__1::__compressed_pair.284" }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.249" }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"struct.jxl::GroupHeader"* }
%"class.std::__1::vector.289" = type { %"class.std::__1::__vector_base.290" }
%"class.std::__1::__vector_base.290" = type { %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*, %"class.std::__1::__compressed_pair.293" }
%"struct.jxl::ModularMultiplierInfo" = type { %"struct.std::__1::array.291", i32 }
%"struct.std::__1::array.291" = type { [2 x %"struct.std::__1::array.292"] }
%"struct.std::__1::array.292" = type { [2 x i32] }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.294" }
%"struct.std::__1::__compressed_pair_elem.294" = type { %"struct.jxl::ModularMultiplierInfo"* }
%"class.std::__1::vector.298" = type { %"class.std::__1::__vector_base.299" }
%"class.std::__1::__vector_base.299" = type { %"class.std::__1::vector.9"*, %"class.std::__1::vector.9"*, %"class.std::__1::__compressed_pair.300" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"class.std::__1::vector.9"* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.305", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.306", %"struct.std::__1::array.306", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.307" }
%"struct.std::__1::array.305" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.306" = type { [8 x i32] }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.std::__1::function.307" = type { %"class.std::__1::__function::__policy_func.311" }
%"class.std::__1::__function::__policy_func.311" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.312", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.312" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.320", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.313" }
%"class.std::__1::vector.313" = type { %"class.std::__1::__vector_base.314" }
%"class.std::__1::__vector_base.314" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.315" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.std::__1::vector.320" = type { %"class.std::__1::__vector_base.321" }
%"class.std::__1::__vector_base.321" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.322" }
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.323" }
%"struct.std::__1::__compressed_pair_elem.323" = type { %"class.jxl::ImageBundle"* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"class.jxl::ThreadPool::RunCallState.454" = type { i32 (i64)*, %class.anon.407* }
%class.anon.407 = type { %"class.jxl::ModularFrameEncoder"**, %"class.jxl::Image3"*, %"struct.jxl::PassesEncoderState"** }
%"class.jxl::ThreadPool::RunCallState.455" = type { i32 (i64)*, %class.anon.408* }
%class.anon.408 = type { %"class.jxl::ModularFrameEncoder"**, %"struct.jxl::PassesEncoderState"** }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon* }
%class.anon = type { %"struct.jxl::PassesEncoderState"**, %"class.jxl::Image3"*, %"class.jxl::Image3"* }
%"class.std::__1::unique_ptr.327" = type { %"class.std::__1::__compressed_pair.328" }
%"class.std::__1::__compressed_pair.328" = type { %"struct.std::__1::__compressed_pair_elem.329" }
%"struct.std::__1::__compressed_pair_elem.329" = type { %"class.jxl::ACImageT"* }
%"class.jxl::ACImageT" = type { %"class.jxl::ACImage", %"class.jxl::Image3.330" }
%"class.jxl::Image3.330" = type { [3 x %"class.jxl::Plane.54"] }
%"struct.jxl::FrameInfo" = type { i8, i8, i32, i64, i8, i8, i64 }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.jxl::PassesDecoderState" = type { %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.169", %"class.std::__1::vector.343", %"class.std::__1::vector.108", float, float, %"class.jxl::Image3", %"class.std::__1::vector.169", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, %"class.std::__1::function.364", %"class.std::__1::vector.369", %"class.std::__1::vector.375", i64, %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.179", %"class.std::__1::vector.383", %"struct.jxl::FilterWeights", %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.397", %"class.std::__1::vector.397", %"class.std::__1::vector.397", [4 x %"class.std::__1::vector.397"], %"class.std::__1::vector.169", %"class.std::__1::vector.397", %"struct.jxl::OutputEncodingInfo" }
%"struct.jxl::Upsampler" = type { i64, [4 x [4 x [5 x [5 x float]]]] }
%"class.std::__1::vector.343" = type { %"class.std::__1::__vector_base.344" }
%"class.std::__1::__vector_base.344" = type { %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"*, %"class.std::__1::__compressed_pair.359" }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.345", %"class.std::__1::vector.222", %"class.std::__1::vector.41", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.345" = type { %"class.std::__1::__vector_base.346" }
%"class.std::__1::__vector_base.346" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.354" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.347" }
%"class.std::__1::vector.347" = type { %"class.std::__1::__vector_base.348" }
%"class.std::__1::__vector_base.348" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.349" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.349" = type { %"struct.std::__1::__compressed_pair_elem.350" }
%"struct.std::__1::__compressed_pair_elem.350" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.354" = type { %"struct.std::__1::__compressed_pair_elem.355" }
%"struct.std::__1::__compressed_pair_elem.355" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::__compressed_pair.359" = type { %"struct.std::__1::__compressed_pair_elem.360" }
%"struct.std::__1::__compressed_pair_elem.360" = type { %"struct.jxl::ANSCode"* }
%"class.std::__1::function.364" = type { %"class.std::__1::__function::__policy_func.367" }
%"class.std::__1::__function::__policy_func.367" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.368", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.368" = type { void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* }
%"class.std::__1::vector.369" = type { %"class.std::__1::__vector_base.370" }
%"class.std::__1::__vector_base.370" = type { float*, float*, %"class.std::__1::__compressed_pair.371" }
%"class.std::__1::__compressed_pair.371" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::vector.375" = type { %"class.std::__1::__vector_base.376" }
%"class.std::__1::__vector_base.376" = type { %"class.std::__1::vector.369"*, %"class.std::__1::vector.369"*, %"class.std::__1::__compressed_pair.377" }
%"class.std::__1::__compressed_pair.377" = type { %"struct.std::__1::__compressed_pair_elem.378" }
%"struct.std::__1::__compressed_pair_elem.378" = type { %"class.std::__1::vector.369"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.382" }
%"struct.std::__1::__atomic_base.382" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector.383" = type { %"class.std::__1::__vector_base.384" }
%"class.std::__1::__vector_base.384" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.385" }
%"class.jxl::FilterPipeline" = type { %"class.jxl::Image3", i64, [4 x %"struct.jxl::FilterPipeline::FilterStep"], i64, i8, i64 }
%"struct.jxl::FilterPipeline::FilterStep" = type { %"class.jxl::Image3"*, i64, %"class.jxl::Image3"*, i64, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::Rect", i64, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, %"struct.jxl::FilterDefinition", i64 }
%"struct.jxl::FilterRows" = type <{ [3 x float*], [7 x i64], [3 x float*], float*, i32, [4 x i8] }>
%"struct.jxl::FilterDefinition" = type { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)*, i64 }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.386" }
%"struct.std::__1::__compressed_pair_elem.386" = type { %"class.jxl::FilterPipeline"* }
%"struct.jxl::FilterWeights" = type { [9 x float], %"class.jxl::Plane" }
%"class.jxl::GroupBorderAssigner" = type { %"struct.jxl::FrameDimensions", %"class.std::__1::unique_ptr.390" }
%"class.std::__1::unique_ptr.390" = type { %"class.std::__1::__compressed_pair.391" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.392" }
%"struct.std::__1::__compressed_pair_elem.392" = type { %"struct.std::__1::atomic.393"* }
%"struct.std::__1::atomic.393" = type { %"struct.std::__1::__atomic_base.428" }
%"struct.std::__1::__atomic_base.428" = type { %"struct.std::__1::__atomic_base.429" }
%"struct.std::__1::__atomic_base.429" = type { %"struct.std::__1::__cxx_atomic_impl.430" }
%"struct.std::__1::__cxx_atomic_impl.430" = type { %"struct.std::__1::__cxx_atomic_base_impl.431" }
%"struct.std::__1::__cxx_atomic_base_impl.431" = type { i8 }
%"class.std::__1::vector.397" = type { %"class.std::__1::__vector_base.398" }
%"class.std::__1::__vector_base.398" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.jxl::Image3"* }
%"struct.jxl::OutputEncodingInfo" = type <{ %"struct.jxl::ColorEncoding", float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }>
%"struct.jxl::OpsinParams" = type { [36 x float], [4 x float], [4 x float], [4 x float] }
%"struct.jxl::DecompressParams" = type <{ i8, i8, i8, i8, i32, i32, [4 x i8], i64, i8, i8, [6 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.jxl::EncCache" = type { %"class.jxl::Image3.330" }
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.std::__1::allocator.362" = type { i8 }

$_ZNSt3__16vectorINS_10unique_ptrIN3jxl7ACImageENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE7reserveEm = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZN3jxl8ACImageTIiEC2Emm = comdat any

$_ZN3jxl8ACImageTIiED2Ev = comdat any

$_ZN3jxl8ACImageTIiED0Ev = comdat any

$_ZNK3jxl8ACImageTIiE4TypeEv = comdat any

$_ZN3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE12PixelsPerRowEv = comdat any

$_ZN3jxl8ACImageTIiE8ZeroFillEv = comdat any

$_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm = comdat any

$_ZNK3jxl8ACImageTIiE7IsEmptyEv = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN3jxl7ACImageENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJNS1_INS2_8ACImageTIiEENS4_ISC_EEEEEEEvDpOT_ = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_ = comdat any

$_ZN3jxl17PassesSharedStateC2Ev = comdat any

$_ZN3jxl15DequantMatricesC2Ev = comdat any

$_ZN3jxl13QuantEncodingaSERKS0_ = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZN3jxl18PassesEncoderStateD2Ev = comdat any

$_ZN3jxl17PassesSharedStateD2Ev = comdat any

$_ZN3jxl18PassesEncoderState8PassDataD2Ev = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN3jxl9BitWriterENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_ = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm = comdat any

$_ZNSt3__125__throw_bad_function_callEv = comdat any

$_ZN3jxl18PassesDecoderStateD2Ev = comdat any

$_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_ = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

$_ZTVN3jxl8ACImageTIiEE = comdat any

$_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = comdat any

@.str = private unnamed_addr constant [15 x i8] c"Compute coeffs\00", align 1
@__const._ZN3jxl23InitializePassesEncoderERKNS_6Image3IfEEPNS_10ThreadPoolEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutE.cparams = private unnamed_addr constant { float, [4 x i8], i64, float, float, float, i8, [3 x i8], [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, [7 x i8], i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, [1 x i8], i32, i8, [3 x i8], i64, float, [4 x i8], %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair.203", i32, float, float, i32, i32, i8, i8, [6 x i8], i64, i64 } { float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, i8 -86, [1 x i8] c"\AA", i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"struct.jxl::ButteraugliParams" <{ float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA" }>, i8 -86, [3 x i8] c"\AA\AA\AA", %"struct.jxl::ModularOptions" <{ i64 -6148914691236517206, float 0xFFFFFFFFE0000000, i32 -1431655766, %"class.std::__1::vector.9" { %"class.std::__1::__vector_base.10" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.11" { %"struct.std::__1::__compressed_pair_elem.12" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, i32 -1431655766, %"struct.std::__1::pair.203" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206 }, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [50 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_cache.cc\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"cparams.progressive_dc > 0\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [106 x i8] c"EncodeFrame(cparams, dc_frame_info, shared.metadata, ib, state.get(), pool, special_frame.get(), nullptr)\00", align 1
@.str.6 = private unnamed_addr constant [56 x i8] c"dec_state->output_encoding_info.Set(shared.metadata->m)\00", align 1
@.ref.tmp = private constant { i8, i8, i8, i32, i32, i64, i8, i8 } { i8 1, i8 0, i8 1, i32 -1, i32 -1, i64 1, i8 0, i8 0 }, align 8
@.str.7 = private unnamed_addr constant [81 x i8] c"DecodeFrame({}, dec_state.get(), pool, &br, &decoded, *shared.metadata, nullptr)\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"br.Close()\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"Compute DC coeffs\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"Compute AC Metadata\00", align 1
@.str.11 = private unnamed_addr constant [48 x i8] c"compressed_image:InitializeFrameEncCache:dc_dec\00", align 1
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.12 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@.str.14 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_bit_writer.h\00", align 1
@.str.15 = private unnamed_addr constant [34 x i8] c"bits_written_ % kBitsPerByte == 0\00", align 1
@.str.17 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_bit_reader.h\00", align 1
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.18 = private unnamed_addr constant [30 x i8] c"close_called_ || !first_byte_\00", align 1
@.str.19 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.20 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@_ZTVN3jxl8ACImageTIiEE = linkonce_odr hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiED2Ev to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiED0Ev to i8*), i8* bitcast (i32 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE4TypeEv to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i64 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiE8ZeroFillEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*, i64)* @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm to i8*), i8* bitcast (i1 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE7IsEmptyEv to i8*)] }, comdat, align 8
@_ZN3jxl15DequantMatrices14required_size_E.const = private unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 4, i64 16, i64 2, i64 4, i64 8, i64 1, i64 1, i64 64, i64 32, i64 256, i64 128, i64 1024, i64 512], align 16
@_ZN3jxl15DequantMatrices11kQuantTableE.const = private unnamed_addr constant [27 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16], align 16
@.str.23 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/quant_weights.h\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"Compute()\00", align 1
@_ZN3jxl11BlockCtxMap14kDefaultCtxMapE = external local_unnamed_addr constant [39 x i8], align 16
@constinit = private unnamed_addr constant <{ %"struct.jxl::PassDefinition", [10 x %"struct.jxl::PassDefinition"] }> <{ %"struct.jxl::PassDefinition" { i64 8, i64 0, i8 0, i64 1 }, [10 x %"struct.jxl::PassDefinition"] zeroinitializer }>, align 8
@.ref.tmp.26 = private unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 15, i32 9, i32 10, i32 11, i32 12, i32 13], align 4
@_ZTVN3jxl24DefaultEncoderHeuristicsE = external unnamed_addr constant { [7 x i8*] }, align 8
@_ZTVN3jxl11FrameHeaderE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" { i8* (i8*)* null, void (i8*)* null, i8 1, %"class.std::type_info"* null }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl23InitializePassesEncoderERKNS_6Image3IfEEPNS_10ThreadPoolEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::ThreadPool"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::ModularFrameEncoder"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = alloca %"class.jxl::Rect", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.454", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.454", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %"class.jxl::ThreadPool::RunCallState.455", align 8
  %13 = alloca %"class.jxl::ThreadPool::RunCallState.455", align 8
  %14 = alloca double, align 8
  %15 = alloca %"class.jxl::ThreadPool", align 8
  %16 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %17 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %18 = alloca double, align 8
  %19 = alloca %"class.jxl::ThreadPool", align 8
  %20 = alloca %"struct.jxl::PassesEncoderState"*, align 8
  %21 = alloca %"class.jxl::ModularFrameEncoder"*, align 8
  %22 = alloca %"class.std::__1::unique_ptr.327", align 8
  %23 = alloca %"class.jxl::Image3", align 8
  %24 = alloca %class.anon, align 8
  %25 = alloca %"struct.jxl::CompressParams", align 8
  %26 = alloca %"class.jxl::ImageBundle", align 8
  %27 = alloca %"class.std::__1::vector.169", align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca %"class.std::__1::unique_ptr.192", align 8
  %31 = alloca %"struct.jxl::FrameInfo", align 8
  %32 = alloca %"class.jxl::BitReader", align 8
  %33 = alloca %"class.jxl::ImageBundle", align 8
  %34 = alloca %"class.jxl::Image3", align 8
  %35 = alloca %class.anon.407, align 8
  %36 = alloca %class.anon.408, align 8
  store %"struct.jxl::PassesEncoderState"* %2, %"struct.jxl::PassesEncoderState"** %20, align 8
  store %"class.jxl::ModularFrameEncoder"* %3, %"class.jxl::ModularFrameEncoder"** %21, align 8
  %37 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 8
  %38 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 2, i32 14
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 8, i32 0, i32 1
  %41 = bitcast i8** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.98"* %37 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = icmp ugt i64 %39, %45
  %47 = inttoptr i64 %44 to i8*
  br i1 %46, label %48, label %50

48:                                               ; preds = %5
  %49 = sub i64 %39, %45
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.98"* %37, i64 %49) #9
  br label %54

50:                                               ; preds = %5
  %51 = icmp ult i64 %39, %45
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = getelementptr inbounds i8, i8* %47, i64 %39
  store i8* %53, i8** %40, align 8
  br label %54

54:                                               ; preds = %48, %50, %52
  %55 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 1, i32 9
  %56 = load i32, i32* %55, align 4
  %57 = uitofp i32 %56 to float
  %58 = fadd float %57, -2.000000e+00
  %59 = tail call float @powf(float 1.250000e+00, float %58) #9
  %60 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 10
  store float %59, float* %60, align 8
  %61 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 1, i32 10
  %62 = load i32, i32* %61, align 8
  %63 = uitofp i32 %62 to float
  %64 = fadd float %63, -2.000000e+00
  %65 = tail call float @powf(float 1.250000e+00, float %64) #9
  %66 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 11
  store float %65, float* %66, align 4
  %67 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 3
  %68 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 3, i32 0, i32 1
  %69 = bitcast %"class.std::__1::unique_ptr.179"** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = bitcast %"class.std::__1::vector.177"* %67 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %70, %72
  %74 = ashr exact i64 %73, 3
  %75 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 1, i32 12, i32 1
  %76 = load i32, i32* %75, align 8
  %77 = zext i32 %76 to i64
  %78 = icmp ult i64 %74, %77
  br i1 %78, label %79, label %136

79:                                               ; preds = %54
  tail call void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl7ACImageENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE7reserveEm(%"class.std::__1::vector.177"* %67, i64 %77)
  %80 = load i64, i64* %69, align 8
  %81 = load i64, i64* %71, align 8
  %82 = sub i64 %80, %81
  %83 = ashr exact i64 %82, 3
  %84 = load i32, i32* %75, align 8
  %85 = zext i32 %84 to i64
  %86 = icmp ult i64 %83, %85
  br i1 %86, label %87, label %136

87:                                               ; preds = %79
  %88 = bitcast %"class.std::__1::unique_ptr.327"* %22 to i8*
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr.327", %"class.std::__1::unique_ptr.327"* %22, i64 0, i32 0, i32 0, i32 0
  %90 = bitcast %"class.std::__1::unique_ptr.327"* %22 to i8**
  br label %91

91:                                               ; preds = %123, %87
  %92 = phi %"struct.jxl::PassesEncoderState"* [ %2, %87 ], [ %124, %123 ]
  %93 = phi i64 [ %83, %87 ], [ %119, %123 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #9
  %94 = call i8* @_Znwm(i64 104) #12
  %95 = bitcast i8* %94 to %"class.jxl::ACImageT"*
  %96 = load i64, i64* %38, align 8
  call void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"* nonnull %95, i64 65536, i64 %96) #9
  store i8* %94, i8** %90, align 8
  %97 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %92, i64 0, i32 3, i32 0, i32 1
  %98 = load %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"** %97, align 8
  %99 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %92, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %100 = load %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"** %99, align 8
  %101 = icmp ult %"class.std::__1::unique_ptr.179"* %98, %100
  br i1 %101, label %102, label %108

102:                                              ; preds = %91
  %103 = ptrtoint i8* %94 to i64
  store %"class.jxl::ACImageT"* null, %"class.jxl::ACImageT"** %89, align 8
  %104 = bitcast %"class.std::__1::unique_ptr.179"* %98 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %98, i64 1
  %106 = ptrtoint %"class.std::__1::unique_ptr.179"* %105 to i64
  %107 = bitcast %"class.std::__1::unique_ptr.179"** %97 to i64*
  store i64 %106, i64* %107, align 8
  br label %110

108:                                              ; preds = %91
  %109 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %92, i64 0, i32 3
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl7ACImageENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJNS1_INS2_8ACImageTIiEENS4_ISC_EEEEEEEvDpOT_(%"class.std::__1::vector.177"* %109, %"class.std::__1::unique_ptr.327"* nonnull dereferenceable(8) %22) #9
  br label %110

110:                                              ; preds = %102, %108
  %111 = load %"class.jxl::ACImageT"*, %"class.jxl::ACImageT"** %89, align 8
  store %"class.jxl::ACImageT"* null, %"class.jxl::ACImageT"** %89, align 8
  %112 = icmp eq %"class.jxl::ACImageT"* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %110
  %114 = bitcast %"class.jxl::ACImageT"* %111 to void (%"class.jxl::ACImageT"*)***
  %115 = load void (%"class.jxl::ACImageT"*)**, void (%"class.jxl::ACImageT"*)*** %114, align 8
  %116 = getelementptr inbounds void (%"class.jxl::ACImageT"*)*, void (%"class.jxl::ACImageT"*)** %115, i64 1
  %117 = load void (%"class.jxl::ACImageT"*)*, void (%"class.jxl::ACImageT"*)** %116, align 8
  call void %117(%"class.jxl::ACImageT"* nonnull %111) #9
  br label %118

118:                                              ; preds = %110, %113
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #9
  %119 = add nuw nsw i64 %93, 1
  %120 = load i32, i32* %75, align 8
  %121 = zext i32 %120 to i64
  %122 = icmp ult i64 %119, %121
  br i1 %122, label %123, label %125

123:                                              ; preds = %118
  %124 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %20, align 8
  br label %91

125:                                              ; preds = %118
  %126 = zext i32 %120 to i64
  %127 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %20, align 8
  %128 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %127, i64 0, i32 3, i32 0, i32 1
  %129 = bitcast %"class.std::__1::unique_ptr.179"** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %127, i64 0, i32 3
  %132 = bitcast %"class.std::__1::vector.177"* %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = sub i64 %130, %133
  %135 = ashr exact i64 %134, 3
  br label %136

136:                                              ; preds = %125, %79, %54
  %137 = phi i64 [ %126, %125 ], [ %85, %79 ], [ %77, %54 ]
  %138 = phi i64 [ %135, %125 ], [ %83, %79 ], [ %74, %54 ]
  %139 = phi i64 [ %130, %125 ], [ %80, %79 ], [ %70, %54 ]
  %140 = phi %"struct.jxl::PassesEncoderState"* [ %127, %125 ], [ %2, %79 ], [ %2, %54 ]
  %141 = icmp ugt i64 %138, %137
  br i1 %141, label %142, label %170

142:                                              ; preds = %136
  %143 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %140, i64 0, i32 3, i32 0, i32 1
  br label %144

144:                                              ; preds = %142, %157
  %145 = phi i64 [ %162, %157 ], [ %139, %142 ]
  %146 = phi %"class.std::__1::unique_ptr.179"** [ %160, %157 ], [ %143, %142 ]
  %147 = inttoptr i64 %145 to %"class.std::__1::unique_ptr.179"*
  %148 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %147, i64 -1
  %149 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %148, i64 0, i32 0, i32 0, i32 0
  %150 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %149, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %149, align 8
  %151 = icmp eq %"class.jxl::ACImage"* %150, null
  br i1 %151, label %157, label %152

152:                                              ; preds = %144
  %153 = bitcast %"class.jxl::ACImage"* %150 to void (%"class.jxl::ACImage"*)***
  %154 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %153, align 8
  %155 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %154, i64 1
  %156 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %155, align 8
  call void %156(%"class.jxl::ACImage"* nonnull %150) #9
  br label %157

157:                                              ; preds = %144, %152
  store %"class.std::__1::unique_ptr.179"* %148, %"class.std::__1::unique_ptr.179"** %146, align 8
  %158 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %20, align 8
  %159 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %158, i64 0, i32 3
  %160 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %158, i64 0, i32 3, i32 0, i32 1
  %161 = bitcast %"class.std::__1::unique_ptr.179"** %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = bitcast %"class.std::__1::vector.177"* %159 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sub i64 %162, %164
  %166 = ashr exact i64 %165, 3
  %167 = load i32, i32* %75, align 8
  %168 = zext i32 %167 to i64
  %169 = icmp ugt i64 %166, %168
  br i1 %169, label %144, label %170

170:                                              ; preds = %157, %136
  %171 = bitcast %"class.jxl::Image3"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %171) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 -86, i64 96, i1 false)
  %172 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 2, i32 8
  %173 = load i64, i64* %172, align 8
  %174 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 2, i32 9
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %23, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %176, i64 %173, i64 %175, i64 4) #9
  %177 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %23, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %177, i64 %173, i64 %175, i64 4) #9
  %178 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %23, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %178, i64 %173, i64 %175, i64 4) #9
  %179 = load i64, i64* %38, align 8
  %180 = trunc i64 %179 to i32
  %181 = bitcast %class.anon* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %181) #9
  %182 = getelementptr inbounds %class.anon, %class.anon* %24, i64 0, i32 0
  store %"struct.jxl::PassesEncoderState"** %20, %"struct.jxl::PassesEncoderState"*** %182, align 8
  %183 = getelementptr inbounds %class.anon, %class.anon* %24, i64 0, i32 1
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %183, align 8
  %184 = getelementptr inbounds %class.anon, %class.anon* %24, i64 0, i32 2
  store %"class.jxl::Image3"* %23, %"class.jxl::Image3"** %184, align 8
  %185 = bitcast double* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #9
  store double 0xFFFFFFFFFFFFFFFF, double* %18, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), double* nonnull %18) #9
  %186 = icmp eq %"class.jxl::ThreadPool"* %1, null
  br i1 %186, label %187, label %198

187:                                              ; preds = %170
  %188 = bitcast %"class.jxl::ThreadPool"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %188) #9
  %189 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %19, i64 0, i32 0
  %190 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %19, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %189, align 8
  %191 = bitcast i8** %190 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %19, %"class.jxl::ThreadPool"** %191, align 8
  %192 = icmp eq i32 %180, 0
  br i1 %192, label %209, label %193

193:                                              ; preds = %187
  %194 = bitcast %"class.jxl::ThreadPool::RunCallState"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %194) #9
  %195 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %16, i64 0, i32 0
  %196 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %16, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %195, align 8
  store %class.anon* %24, %class.anon** %196, align 8
  %197 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %188, i8* nonnull %194, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %180) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %194) #9
  br label %209

198:                                              ; preds = %170
  %199 = icmp eq i32 %180, 0
  br i1 %199, label %211, label %200

200:                                              ; preds = %198
  %201 = bitcast %"class.jxl::ThreadPool::RunCallState"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %201) #9
  %202 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %17, i64 0, i32 0
  %203 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %17, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %202, align 8
  store %class.anon* %24, %class.anon** %203, align 8
  %204 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 0
  %205 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %204, align 8
  %206 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 1
  %207 = load i8*, i8** %206, align 8
  %208 = call i32 %205(i8* %207, i8* nonnull %201, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %180) #9
  br label %209

209:                                              ; preds = %187, %193, %200
  %210 = phi i8* [ %201, %200 ], [ %188, %193 ], [ %188, %187 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %210) #9
  br label %211

211:                                              ; preds = %209, %198
  %212 = load double, double* %18, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), double %212) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %181) #9
  %213 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 1, i32 4
  %214 = load i64, i64* %213, align 8
  %215 = and i64 %214, 32
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %904, label %217

217:                                              ; preds = %211
  %218 = bitcast %"struct.jxl::CompressParams"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 360, i8* nonnull %218) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %218, i8* align 8 bitcast ({ float, [4 x i8], i64, float, float, float, i8, [3 x i8], [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, [7 x i8], i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, [1 x i8], i32, i8, [3 x i8], i64, float, [4 x i8], %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair.203", i32, float, float, i32, i32, i8, i8, [6 x i8], i64, i64 }* @__const._ZN3jxl23InitializePassesEncoderERKNS_6Image3IfEEPNS_10ThreadPoolEPNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutE.cparams to i8*), i64 360, i1 false)
  %219 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %20, align 8
  %220 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %219, i64 0, i32 6
  %221 = bitcast %"struct.jxl::CompressParams"* %220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %218, i8* align 8 %221, i64 68, i1 false) #9
  %222 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %222, align 8
  %223 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 13, i32 1
  %224 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %219, i64 0, i32 6, i32 13, i32 1
  %225 = bitcast [3 x i32]* %223 to i8*
  %226 = bitcast [3 x i32]* %224 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %225, i8* align 8 %226, i64 14, i1 false) #9
  %227 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 14
  %228 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %219, i64 0, i32 6, i32 14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %227, i8* align 8 %228, i64 117, i1 false) #9
  %229 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 39
  %230 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %219, i64 0, i32 6, i32 39
  %231 = bitcast %"struct.jxl::ModularOptions"* %229 to i8*
  %232 = bitcast %"struct.jxl::ModularOptions"* %230 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %231, i8* align 8 %232, i64 16, i1 false) #9
  %233 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 39, i32 3
  %234 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %219, i64 0, i32 6, i32 39, i32 3
  %235 = bitcast %"class.std::__1::vector.9"* %233 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %235, i8 0, i64 24, i1 false) #9
  %236 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %219, i64 0, i32 6, i32 39, i32 3, i32 0, i32 1
  %237 = bitcast i32** %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast %"class.std::__1::vector.9"* %234 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = sub i64 %238, %240
  %242 = ashr exact i64 %241, 2
  %243 = icmp eq i64 %241, 0
  br i1 %243, label %271, label %244

244:                                              ; preds = %217
  %245 = icmp ugt i64 %242, 4611686018427387903
  br i1 %245, label %246, label %248

246:                                              ; preds = %244
  %247 = bitcast %"class.std::__1::vector.9"* %233 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %247) #13
  unreachable

248:                                              ; preds = %244
  %249 = call i8* @_Znwm(i64 %241) #12
  %250 = bitcast i8* %249 to i32*
  %251 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 39, i32 3, i32 0, i32 1
  %252 = bitcast i32** %251 to i8**
  store i8* %249, i8** %252, align 8
  %253 = bitcast %"class.std::__1::vector.9"* %233 to i8**
  store i8* %249, i8** %253, align 8
  %254 = getelementptr inbounds i32, i32* %250, i64 %242
  %255 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 39, i32 3, i32 0, i32 2, i32 0, i32 0
  store i32* %254, i32** %255, align 8
  %256 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %234, i64 0, i32 0, i32 0
  %257 = load i32*, i32** %256, align 8
  %258 = load i64, i64* %237, align 8
  %259 = bitcast i32** %251 to i64*
  %260 = ptrtoint i8* %249 to i64
  %261 = ptrtoint i32* %257 to i64
  %262 = sub i64 %258, %261
  %263 = icmp sgt i64 %262, 0
  br i1 %263, label %264, label %269

264:                                              ; preds = %248
  %265 = lshr exact i64 %262, 2
  %266 = bitcast i32* %257 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %249, i8* align 4 %266, i64 %262, i1 false) #9
  %267 = getelementptr inbounds i32, i32* %250, i64 %265
  %268 = ptrtoint i32* %267 to i64
  br label %269

269:                                              ; preds = %264, %248
  %270 = phi i64 [ %268, %264 ], [ %260, %248 ]
  store i64 %270, i64* %259, align 8
  br label %271

271:                                              ; preds = %217, %269
  %272 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 39, i32 4
  %273 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %219, i64 0, i32 6, i32 39, i32 4
  %274 = bitcast float* %272 to i8*
  %275 = bitcast float* %273 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %274, i8* align 8 %275, i64 41, i1 false) #9
  %276 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 40
  %277 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %219, i64 0, i32 6, i32 40
  %278 = bitcast i32* %276 to i8*
  %279 = bitcast i32* %277 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %278, i8* align 8 %279, i64 40, i1 false) #9
  %280 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %219, i64 0, i32 6, i32 0
  %281 = load float, float* %280, align 8
  %282 = fmul float %281, 0x3FB99999A0000000
  %283 = fcmp ogt float %282, 0x3F847AE140000000
  %284 = bitcast float %282 to i32
  %285 = select i1 %283, i32 %284, i32 1008981770
  %286 = bitcast %"struct.jxl::CompressParams"* %25 to i32*
  store i32 %285, i32* %286, align 8
  %287 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 17
  %288 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 5
  %289 = bitcast i32* %287 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %289, i8 0, i64 20, i1 false)
  store i8 1, i8* %288, align 4
  %290 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 49
  %291 = bitcast i64* %290 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %291, align 8
  %292 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 6, i64 0
  %293 = bitcast float* %292 to i8*
  %294 = getelementptr %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 5, i32 0, i64 0
  %295 = bitcast float* %294 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %293, i8* align 4 %295, i64 12, i1 false)
  %296 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 26
  %297 = load i32, i32* %296, align 8
  %298 = icmp sgt i32 %297, 0
  br i1 %298, label %302, label %299

299:                                              ; preds = %271
  %300 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0), i32 99, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0)) #9
  %301 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

302:                                              ; preds = %271
  %303 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 21
  %304 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 20
  %305 = add nsw i32 %297, -1
  store i32 %305, i32* %296, align 8
  %306 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 27
  store i8 1, i8* %306, align 4
  store i32 0, i32* %303, align 4
  store i32 0, i32* %304, align 8
  %307 = icmp eq i32 %305, 0
  br i1 %307, label %308, label %313

308:                                              ; preds = %302
  store i8 1, i8* %227, align 8
  %309 = fmul float %281, 0x3FC99999A0000000
  %310 = fsub float 9.900000e+01, %309
  %311 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 41, i32 1
  store float %310, float* %311, align 4
  %312 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 41, i32 0
  store float %310, float* %312, align 4
  br label %313

313:                                              ; preds = %308, %302
  %314 = bitcast %"class.jxl::ImageBundle"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %314) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %314, i8 -86, i64 368, i1 false)
  %315 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 0
  %316 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %315, align 8
  %317 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %316, i64 0, i32 0
  %318 = bitcast %"class.jxl::ImageBundle"* %26 to i64*
  store i64 0, i64* %318, align 8
  %319 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 1
  store i32 1, i32* %319, align 8
  %320 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %320) #9
  %321 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 4, i32 0
  %322 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 8
  %323 = bitcast %"class.std::__1::basic_string"* %322 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %323, i8 0, i64 24, i1 false) #9
  %324 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 9
  %325 = bitcast i32* %321 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %325, i8 0, i64 14, i1 false) #9
  store %"struct.jxl::ImageMetadata"* %317, %"struct.jxl::ImageMetadata"** %324, align 8
  %326 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 10
  %327 = bitcast %"class.jxl::Image3"* %326 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %327, i8 0, i64 96, i1 false) #9
  %328 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %328) #9
  %329 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 12
  %330 = bitcast %"class.std::__1::vector.169"* %329 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %330, i8 0, i64 32, i1 false) #9
  %331 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %315, align 8
  %332 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %331, i64 0, i32 0, i32 7, i32 9
  %333 = load i32, i32* %332, align 8
  %334 = icmp eq i32 %333, 1
  %335 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %334) #9
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* nonnull %26, %"class.jxl::Image3"* nonnull dereferenceable(96) %23, %"struct.jxl::ColorEncoding"* dereferenceable(152) %335) #9
  %336 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %324, align 8
  %337 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %336, i64 0, i32 17, i32 0, i32 0
  %338 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %337, align 8
  %339 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %336, i64 0, i32 17, i32 0, i32 1
  %340 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %339, align 8
  %341 = icmp eq %"struct.jxl::ExtraChannelInfo"* %338, %340
  br i1 %341, label %485, label %342

342:                                              ; preds = %313
  %343 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %338 to i64
  %344 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %340 to i64
  %345 = bitcast %"class.std::__1::vector.169"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %345) #9
  %346 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %27, i64 0, i32 0, i32 0
  %347 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %27, i64 0, i32 0, i32 1
  %348 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %27, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %345, i8 0, i64 24, i1 false) #9
  %349 = sub i64 %344, %343
  %350 = sdiv exact i64 %349, 96
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.169"* nonnull %27, i64 %350)
  %351 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %324, align 8
  %352 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %351, i64 0, i32 17
  %353 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %351, i64 0, i32 17, i32 0, i32 1
  %354 = bitcast %"struct.jxl::ExtraChannelInfo"** %353 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = bitcast %"class.std::__1::vector"* %352 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = icmp eq i64 %355, %357
  br i1 %358, label %368, label %359

359:                                              ; preds = %342
  %360 = bitcast i64* %28 to i8*
  %361 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  %362 = bitcast i64* %29 to i8*
  %363 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %364 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 12, i32 0, i32 0
  %365 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 12, i32 0, i32 1
  %366 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %26, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %367 = bitcast %"class.jxl::Plane"** %347 to i64*
  br label %390

368:                                              ; preds = %473, %342
  call void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"* nonnull %26, %"class.std::__1::vector.169"* nonnull dereferenceable(24) %27) #9
  %369 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %346, align 8
  %370 = icmp eq %"class.jxl::Plane"* %369, null
  br i1 %370, label %389, label %371

371:                                              ; preds = %368
  %372 = bitcast %"class.jxl::Plane"* %369 to i8*
  %373 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %347, align 8
  %374 = icmp eq %"class.jxl::Plane"* %373, %369
  br i1 %374, label %387, label %375

375:                                              ; preds = %371, %382
  %376 = phi %"class.jxl::Plane"* [ %377, %382 ], [ %373, %371 ]
  %377 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %376, i64 -1
  %378 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %376, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %379 = load i8*, i8** %378, align 8
  store i8* null, i8** %378, align 8
  %380 = icmp eq i8* %379, null
  br i1 %380, label %382, label %381

381:                                              ; preds = %375
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %379) #9
  br label %382

382:                                              ; preds = %381, %375
  %383 = icmp eq %"class.jxl::Plane"* %377, %369
  br i1 %383, label %384, label %375

384:                                              ; preds = %382
  %385 = bitcast %"class.std::__1::vector.169"* %27 to i8**
  %386 = load i8*, i8** %385, align 8
  br label %387

387:                                              ; preds = %384, %371
  %388 = phi i8* [ %386, %384 ], [ %372, %371 ]
  store %"class.jxl::Plane"* %369, %"class.jxl::Plane"** %347, align 8
  call void @_ZdlPv(i8* %388) #12
  br label %389

389:                                              ; preds = %368, %387
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %345) #9
  br label %485

390:                                              ; preds = %359, %473
  %391 = phi i64 [ 0, %359 ], [ %474, %473 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %360) #9
  %392 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %361, align 8
  %393 = icmp eq %"struct.jxl::jpeg::JPEGData"* %392, null
  br i1 %393, label %394, label %404

394:                                              ; preds = %390
  %395 = load i32, i32* %363, align 8
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %397, label %411

397:                                              ; preds = %394
  %398 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %364, align 8
  %399 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %365, align 8
  %400 = icmp eq %"class.jxl::Plane"* %398, %399
  br i1 %400, label %411, label %401

401:                                              ; preds = %397
  %402 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %398, i64 0, i32 0, i32 0
  %403 = load i32, i32* %402, align 8
  br label %411

404:                                              ; preds = %390
  %405 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %392, i64 0, i32 1
  %406 = load i32, i32* %405, align 8
  %407 = sext i32 %406 to i64
  store i64 %407, i64* %28, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %362) #9
  %408 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %392, i64 0, i32 2
  %409 = load i32, i32* %408, align 4
  %410 = sext i32 %409 to i64
  br label %425

411:                                              ; preds = %394, %397, %401
  %412 = phi i32 [ %395, %394 ], [ 0, %397 ], [ %403, %401 ]
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %28, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %362) #9
  %414 = load i32, i32* %366, align 4
  %415 = zext i32 %414 to i64
  %416 = icmp eq i32 %414, 0
  br i1 %416, label %417, label %425

417:                                              ; preds = %411
  %418 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %364, align 8
  %419 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %365, align 8
  %420 = icmp eq %"class.jxl::Plane"* %418, %419
  br i1 %420, label %425, label %421

421:                                              ; preds = %417
  %422 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %418, i64 0, i32 0, i32 1
  %423 = load i32, i32* %422, align 4
  %424 = zext i32 %423 to i64
  br label %425

425:                                              ; preds = %404, %411, %417, %421
  %426 = phi i64 [ %407, %404 ], [ %413, %421 ], [ %413, %417 ], [ %413, %411 ]
  %427 = phi i64 [ %410, %404 ], [ %424, %421 ], [ 0, %417 ], [ %415, %411 ]
  store i64 %427, i64* %29, align 8
  %428 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %347, align 8
  %429 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %348, align 8
  %430 = icmp ult %"class.jxl::Plane"* %428, %429
  br i1 %430, label %431, label %435

431:                                              ; preds = %425
  %432 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %428, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %432, i64 %426, i64 %427, i64 4) #9
  %433 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %428, i64 1
  %434 = ptrtoint %"class.jxl::Plane"* %433 to i64
  store i64 %434, i64* %367, align 8
  br label %437

435:                                              ; preds = %425
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.169"* nonnull %27, i64* nonnull dereferenceable(8) %28, i64* nonnull dereferenceable(8) %29) #9
  %436 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %347, align 8
  br label %437

437:                                              ; preds = %431, %435
  %438 = phi %"class.jxl::Plane"* [ %433, %431 ], [ %436, %435 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %362) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %360) #9
  %439 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %438, i64 -1, i32 0, i32 0
  %440 = load i32, i32* %439, align 8
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %473, label %442

442:                                              ; preds = %437
  %443 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %438, i64 -1, i32 0, i32 1
  %444 = load i32, i32* %443, align 4
  %445 = icmp eq i32 %444, 0
  br i1 %445, label %473, label %446

446:                                              ; preds = %442
  %447 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %438, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %448 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %438, i64 -1, i32 0, i32 4
  %449 = load i8*, i8** %447, align 8
  %450 = ptrtoint i8* %449 to i64
  %451 = and i64 %450, 63
  %452 = icmp eq i64 %451, 0
  call void @llvm.assume(i1 %452) #9
  %453 = zext i32 %440 to i64
  %454 = shl nuw nsw i64 %453, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %449, i8 0, i64 %454, i1 false) #9
  %455 = load i32, i32* %443, align 4
  %456 = icmp ugt i32 %455, 1
  br i1 %456, label %457, label %473

457:                                              ; preds = %446, %457
  %458 = phi i64 [ %469, %457 ], [ 1, %446 ]
  %459 = load i32, i32* %439, align 8
  %460 = load i8*, i8** %447, align 8
  %461 = load i64, i64* %448, align 8
  %462 = mul i64 %461, %458
  %463 = getelementptr inbounds i8, i8* %460, i64 %462
  %464 = ptrtoint i8* %463 to i64
  %465 = and i64 %464, 63
  %466 = icmp eq i64 %465, 0
  call void @llvm.assume(i1 %466) #9
  %467 = zext i32 %459 to i64
  %468 = shl nuw nsw i64 %467, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %463, i8 0, i64 %468, i1 false) #9
  %469 = add nuw nsw i64 %458, 1
  %470 = load i32, i32* %443, align 4
  %471 = zext i32 %470 to i64
  %472 = icmp ult i64 %469, %471
  br i1 %472, label %457, label %473

473:                                              ; preds = %457, %446, %437, %442
  %474 = add nuw i64 %391, 1
  %475 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %324, align 8
  %476 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %475, i64 0, i32 17
  %477 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %475, i64 0, i32 17, i32 0, i32 1
  %478 = bitcast %"struct.jxl::ExtraChannelInfo"** %477 to i64*
  %479 = load i64, i64* %478, align 8
  %480 = bitcast %"class.std::__1::vector"* %476 to i64*
  %481 = load i64, i64* %480, align 8
  %482 = sub i64 %479, %481
  %483 = sdiv exact i64 %482, 96
  %484 = icmp ult i64 %474, %483
  br i1 %484, label %390, label %368

485:                                              ; preds = %389, %313
  %486 = call i8* @_Znwm(i64 5088) #12
  %487 = bitcast i8* %486 to %"struct.jxl::PassesEncoderState"*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %486, i8 0, i64 5088, i1 false) #9
  %488 = bitcast i8* %486 to %"struct.jxl::PassesSharedState"*
  call void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"* nonnull %488) #9
  %489 = getelementptr inbounds i8, i8* %486, i64 4152
  %490 = getelementptr inbounds i8, i8* %486, i64 4264
  %491 = bitcast i8* %490 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %489, i8 0, i64 112, i1 false) #9
  store i64 1, i64* %491, align 8
  %492 = getelementptr inbounds i8, i8* %486, i64 4272
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %492, i8* align 8 bitcast (<{ %"struct.jxl::PassDefinition", [10 x %"struct.jxl::PassDefinition"] }>* @constinit to i8*), i64 352, i1 false) #9
  %493 = getelementptr inbounds i8, i8* %486, i64 4624
  %494 = bitcast i8* %493 to %"class.jxl::Plane"**
  store %"class.jxl::Plane"* null, %"class.jxl::Plane"** %494, align 8
  %495 = getelementptr inbounds i8, i8* %486, i64 4632
  %496 = bitcast i8* %495 to float*
  store float 0.000000e+00, float* %496, align 8
  %497 = getelementptr inbounds i8, i8* %486, i64 4640
  %498 = bitcast i8* %497 to float*
  store float 1.000000e+00, float* %498, align 8
  %499 = getelementptr inbounds i8, i8* %486, i64 4648
  %500 = getelementptr inbounds i8, i8* %486, i64 4672
  %501 = bitcast i8* %500 to float*
  store float 0.000000e+00, float* %501, align 4
  %502 = getelementptr inbounds i8, i8* %486, i64 4676
  %503 = bitcast i8* %502 to float*
  store float 0.000000e+00, float* %503, align 4
  %504 = getelementptr inbounds i8, i8* %486, i64 4680
  %505 = bitcast i8* %504 to float*
  store float 0.000000e+00, float* %505, align 4
  %506 = getelementptr inbounds i8, i8* %486, i64 4684
  %507 = bitcast i8* %506 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 8 %499, i8 0, i64 21, i1 false) #9
  store i32 3, i32* %507, align 4
  %508 = getelementptr inbounds i8, i8* %486, i64 4688
  %509 = bitcast i8* %508 to i64*
  store i64 0, i64* %509, align 8
  %510 = getelementptr inbounds i8, i8* %486, i64 4696
  %511 = bitcast i8* %510 to i32*
  store i32 4, i32* %511, align 8
  %512 = getelementptr inbounds i8, i8* %486, i64 4700
  %513 = bitcast i8* %512 to i32*
  store i32 100, i32* %513, align 4
  %514 = getelementptr inbounds i8, i8* %486, i64 4704
  %515 = bitcast i8* %514 to i32*
  store i32 0, i32* %515, align 8
  %516 = getelementptr inbounds i8, i8* %486, i64 4712
  %517 = bitcast i8* %516 to %"struct.jxl::YCbCrChromaSubsampling"*
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %517) #9
  %518 = getelementptr inbounds i8, i8* %486, i64 4736
  store i8 0, i8* %518, align 8
  %519 = getelementptr inbounds i8, i8* %486, i64 4744
  %520 = bitcast i8* %519 to i64*
  store i64 1, i64* %520, align 8
  %521 = getelementptr inbounds i8, i8* %486, i64 4752
  %522 = getelementptr inbounds i8, i8* %486, i64 4776
  call void @llvm.memset.p0i8.i64(i8* align 8 %521, i8 -1, i64 24, i1 false) #9
  %523 = getelementptr inbounds i8, i8* %486, i64 4784
  %524 = bitcast i8* %523 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 8 %522, i8 0, i64 7, i1 false) #9
  store i32 -1, i32* %524, align 8
  %525 = getelementptr inbounds i8, i8* %486, i64 4788
  store i8 0, i8* %525, align 4
  %526 = getelementptr inbounds i8, i8* %486, i64 4792
  %527 = bitcast i8* %526 to i64*
  store i64 3, i64* %527, align 8
  %528 = getelementptr inbounds i8, i8* %486, i64 4800
  %529 = bitcast i8* %528 to float*
  store float 0.000000e+00, float* %529, align 8
  %530 = getelementptr inbounds i8, i8* %486, i64 4808
  %531 = getelementptr inbounds i8, i8* %486, i64 4836
  %532 = bitcast i8* %531 to float*
  call void @llvm.memset.p0i8.i64(i8* align 8 %530, i8 0, i64 26, i1 false) #9
  store float 1.000000e+00, float* %532, align 4
  %533 = getelementptr inbounds i8, i8* %486, i64 4840
  %534 = bitcast i8* %533 to float*
  store float 1.000000e+00, float* %534, align 4
  %535 = getelementptr inbounds i8, i8* %486, i64 4844
  %536 = bitcast i8* %535 to float*
  store float 8.000000e+01, float* %536, align 4
  %537 = getelementptr inbounds i8, i8* %486, i64 4848
  store i8 0, i8* %537, align 4
  %538 = getelementptr inbounds i8, i8* %486, i64 4852
  store i8 1, i8* %538, align 4
  %539 = getelementptr inbounds i8, i8* %486, i64 4856
  %540 = bitcast i8* %539 to i64*
  store i64 16777215, i64* %540, align 8
  %541 = getelementptr inbounds i8, i8* %486, i64 4864
  %542 = bitcast i8* %541 to float*
  store float 5.000000e-01, float* %542, align 8
  %543 = getelementptr inbounds i8, i8* %486, i64 4868
  %544 = bitcast i8* %543 to i32*
  %545 = getelementptr inbounds i8, i8* %486, i64 4872
  store i32 0, i32* %544, align 4
  %546 = call i8* @_Znwm(i64 32) #12
  %547 = getelementptr inbounds i8, i8* %486, i64 4880
  %548 = bitcast i8* %545 to i8**
  store i8* %546, i8** %548, align 8
  %549 = getelementptr inbounds i8, i8* %546, i64 32
  %550 = getelementptr inbounds i8, i8* %486, i64 4888
  %551 = bitcast i8* %550 to i8**
  store i8* %549, i8** %551, align 8
  %552 = bitcast i8* %547 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %546, i8* align 4 bitcast ([8 x i32]* @.ref.tmp.26 to i8*), i64 32, i1 false) #9
  %553 = ptrtoint i8* %549 to i64
  store i64 %553, i64* %552, align 8
  %554 = getelementptr inbounds i8, i8* %486, i64 4896
  %555 = bitcast i8* %554 to float*
  store float 9.600000e+01, float* %555, align 8
  %556 = getelementptr inbounds i8, i8* %486, i64 4904
  %557 = bitcast i8* %556 to i64*
  store i64 32, i64* %557, align 8
  %558 = getelementptr inbounds i8, i8* %486, i64 4912
  %559 = bitcast i8* %558 to i32*
  store i32 -1, i32* %559, align 8
  %560 = getelementptr inbounds i8, i8* %486, i64 4916
  %561 = bitcast i8* %560 to i32*
  store i32 0, i32* %561, align 4
  %562 = getelementptr inbounds i8, i8* %486, i64 4920
  %563 = bitcast i8* %562 to float*
  store float 0x3FF028F5C0000000, float* %563, align 8
  %564 = getelementptr inbounds i8, i8* %486, i64 4924
  %565 = bitcast i8* %564 to i32*
  store i32 2, i32* %565, align 4
  %566 = getelementptr inbounds i8, i8* %486, i64 4928
  store i8 0, i8* %566, align 8
  %567 = getelementptr inbounds i8, i8* %486, i64 4932
  %568 = bitcast i8* %567 to i32*
  store i32 0, i32* %568, align 4
  %569 = getelementptr inbounds i8, i8* %486, i64 4936
  store i8 0, i8* %569, align 8
  %570 = getelementptr inbounds i8, i8* %486, i64 4944
  %571 = bitcast i8* %570 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 1120403456, i32 1120403456, i32 -1>, <4 x i32>* %571, align 8
  %572 = getelementptr inbounds i8, i8* %486, i64 4960
  %573 = bitcast i8* %572 to float*
  store float 9.500000e+01, float* %573, align 8
  %574 = getelementptr inbounds i8, i8* %486, i64 4964
  %575 = bitcast i8* %574 to float*
  store float 8.000000e+01, float* %575, align 4
  %576 = getelementptr inbounds i8, i8* %486, i64 4968
  %577 = bitcast i8* %576 to i32*
  store i32 0, i32* %577, align 8
  %578 = getelementptr inbounds i8, i8* %486, i64 4972
  %579 = bitcast i8* %578 to i32*
  store i32 1024, i32* %579, align 4
  %580 = getelementptr inbounds i8, i8* %486, i64 4976
  store i8 0, i8* %580, align 8
  %581 = getelementptr inbounds i8, i8* %486, i64 4977
  store i8 0, i8* %581, align 1
  %582 = getelementptr inbounds i8, i8* %486, i64 4984
  %583 = bitcast i8* %582 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %583, align 8
  %584 = getelementptr inbounds i8, i8* %486, i64 5000
  %585 = getelementptr inbounds i8, i8* %486, i64 5072
  %586 = bitcast i8* %585 to float*
  call void @llvm.memset.p0i8.i64(i8* align 8 %584, i8 0, i64 72, i1 false) #9
  store float 1.000000e+00, float* %586, align 8
  %587 = getelementptr inbounds i8, i8* %486, i64 5076
  %588 = bitcast i8* %587 to float*
  store float 1.000000e+00, float* %588, align 4
  %589 = getelementptr inbounds i8, i8* %486, i64 5080
  %590 = call i8* @_Znwm(i64 8) #12
  %591 = bitcast i8* %590 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3jxl24DefaultEncoderHeuristicsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %591, align 8
  %592 = ptrtoint i8* %590 to i64
  %593 = bitcast i8* %589 to i64*
  store i64 %592, i64* %593, align 8
  %594 = bitcast %"class.std::__1::unique_ptr.192"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %594) #9
  %595 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %30, i64 0, i32 0, i32 0, i32 0
  %596 = call i8* @_Znwm(i64 40) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %596, i8 0, i64 40, i1 false) #9
  %597 = ptrtoint i8* %596 to i64
  %598 = bitcast %"class.std::__1::unique_ptr.192"* %30 to i64*
  store i64 %597, i64* %598, align 8
  %599 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %31, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %599) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %599, i8 -86, i64 24, i1 false)
  %600 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %31, i64 0, i32 1
  %601 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %31, i64 0, i32 2
  %602 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %31, i64 0, i32 3
  %603 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %31, i64 0, i32 4
  store i8 1, i8* %603, align 8
  %604 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %31, i64 0, i32 5
  store i8 0, i8* %604, align 1
  %605 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %31, i64 0, i32 6
  store i64 0, i64* %605, align 8
  store i32 1, i32* %601, align 4
  %606 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 1, i32 24
  %607 = load i32, i32* %606, align 4
  %608 = add i32 %607, 1
  %609 = zext i32 %608 to i64
  store i64 %609, i64* %602, align 8
  store i8 0, i8* %600, align 1
  store i8 1, i8* %599, align 8
  %610 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %315, align 8
  %611 = bitcast i8* %596 to %"struct.jxl::BitWriter"*
  %612 = call i32 @_ZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::CompressParams"* nonnull dereferenceable(360) %25, %"struct.jxl::FrameInfo"* nonnull dereferenceable(32) %31, %"struct.jxl::CodecMetadata"* %610, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %26, %"struct.jxl::PassesEncoderState"* nonnull %487, %"class.jxl::ThreadPool"* %1, %"struct.jxl::BitWriter"* nonnull %611, %"struct.jxl::AuxOut"* null) #9
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %617, label %614

614:                                              ; preds = %485
  %615 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0), i32 148, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str.5, i64 0, i64 0)) #9
  %616 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

617:                                              ; preds = %485
  %618 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %595, align 8
  %619 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %618, i64 0, i32 0
  %620 = load i64, i64* %619, align 8
  %621 = and i64 %620, 7
  %622 = icmp eq i64 %621, 0
  %623 = ptrtoint %"struct.jxl::BitWriter"* %618 to i64
  br i1 %622, label %627, label %624

624:                                              ; preds = %617
  %625 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.14, i64 0, i64 0), i32 58, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.15, i64 0, i64 0)) #9
  %626 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

627:                                              ; preds = %617
  %628 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %618, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %629 = load i8*, i8** %628, align 8
  %630 = lshr i64 %620, 3
  %631 = ptrtoint i8* %629 to i64
  %632 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %20, align 8
  %633 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %632, i64 0, i32 4, i32 0, i32 1
  %634 = load %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"** %633, align 8
  %635 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %632, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %636 = load %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"** %635, align 8
  %637 = icmp ult %"class.std::__1::unique_ptr.192"* %634, %636
  br i1 %637, label %638, label %643

638:                                              ; preds = %627
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %595, align 8
  %639 = bitcast %"class.std::__1::unique_ptr.192"* %634 to i64*
  store i64 %623, i64* %639, align 8
  %640 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %634, i64 1
  %641 = ptrtoint %"class.std::__1::unique_ptr.192"* %640 to i64
  %642 = bitcast %"class.std::__1::unique_ptr.192"** %633 to i64*
  store i64 %641, i64* %642, align 8
  br label %645

643:                                              ; preds = %627
  %644 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %632, i64 0, i32 4
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl9BitWriterENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.190"* %644, %"class.std::__1::unique_ptr.192"* nonnull dereferenceable(8) %30) #9
  br label %645

645:                                              ; preds = %638, %643
  %646 = bitcast %"class.jxl::BitReader"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %646) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %646, i8 -86, i64 56, i1 false)
  %647 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %32, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %646, i8 0, i64 16, i1 false) #9
  store i8* %629, i8** %647, align 8
  %648 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %32, i64 0, i32 3
  %649 = getelementptr inbounds i8, i8* %629, i64 -8
  %650 = getelementptr inbounds i8, i8* %649, i64 %630
  store i8* %650, i8** %648, align 8
  %651 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %32, i64 0, i32 4
  %652 = bitcast i8** %651 to i64*
  store i64 %631, i64* %652, align 8
  %653 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %32, i64 0, i32 5
  store i64 0, i64* %653, align 8
  %654 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %32, i64 0, i32 6
  store i8 0, i8* %654, align 8
  %655 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %32, i64 0, i32 7
  store i64 0, i64* %655, align 8
  %656 = icmp ugt i8* %629, %650
  br i1 %656, label %657, label %658, !prof !2

657:                                              ; preds = %645
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* nonnull %32) #9
  br label %664

658:                                              ; preds = %645
  %659 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %32, i64 0, i32 0
  %660 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %32, i64 0, i32 1
  %661 = bitcast i8* %629 to i64*
  %662 = load i64, i64* %661, align 1
  store i64 %662, i64* %659, align 8
  %663 = getelementptr inbounds i8, i8* %629, i64 7
  store i8* %663, i8** %647, align 8
  store i64 56, i64* %660, align 8
  br label %664

664:                                              ; preds = %657, %658
  %665 = bitcast %"class.jxl::ImageBundle"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %665) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %665, i8 -86, i64 368, i1 false)
  %666 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %315, align 8
  %667 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %666, i64 0, i32 0
  %668 = bitcast %"class.jxl::ImageBundle"* %33 to i64*
  store i64 0, i64* %668, align 8
  %669 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 0, i32 1
  store i32 1, i32* %669, align 8
  %670 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %670) #9
  %671 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 0, i32 4, i32 0
  %672 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 0, i32 8
  %673 = bitcast %"class.std::__1::basic_string"* %672 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %673, i8 0, i64 24, i1 false) #9
  %674 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 0, i32 9
  %675 = bitcast i32* %671 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %675, i8 0, i64 14, i1 false) #9
  store %"struct.jxl::ImageMetadata"* %667, %"struct.jxl::ImageMetadata"** %674, align 8
  %676 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 0, i32 10
  %677 = bitcast %"class.jxl::Image3"* %676 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %677, i8 0, i64 96, i1 false) #9
  %678 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %678) #9
  %679 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 0, i32 12
  %680 = bitcast %"class.std::__1::vector.169"* %679 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %680, i8 0, i64 32, i1 false) #9
  %681 = call i8* @_Znwm(i64 10512) #12
  %682 = bitcast i8* %681 to %"struct.jxl::PassesDecoderState"*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %681, i8 0, i64 10512, i1 false) #9
  %683 = bitcast i8* %681 to %"struct.jxl::PassesSharedState"*
  call void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"* nonnull %683) #9
  %684 = getelementptr inbounds i8, i8* %681, i64 4152
  %685 = bitcast i8* %684 to i8**
  store i8* %681, i8** %685, align 8
  %686 = getelementptr inbounds i8, i8* %681, i64 4160
  %687 = bitcast i8* %686 to i64*
  store i64 1, i64* %687, align 8
  %688 = getelementptr inbounds i8, i8* %681, i64 5768
  %689 = bitcast i8* %688 to i64*
  store i64 1, i64* %689, align 8
  %690 = getelementptr inbounds i8, i8* %681, i64 7376
  %691 = bitcast i8* %690 to i64*
  store i64 1, i64* %691, align 8
  %692 = getelementptr inbounds i8, i8* %681, i64 8984
  %693 = getelementptr inbounds i8, i8* %681, i64 9256
  %694 = getelementptr inbounds i8, i8* %681, i64 9576
  %695 = bitcast i8* %694 to i64*
  store i64 0, i64* %695, align 8
  %696 = getelementptr inbounds i8, i8* %681, i64 9608
  %697 = bitcast i8* %696 to void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)**
  call void @llvm.memset.p0i8.i64(i8* align 8 %692, i8 0, i64 264, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* align 8 %693, i8 0, i64 312, i1 false) #9
  store void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm, void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)** %697, align 8
  %698 = getelementptr inbounds i8, i8* %681, i64 9616
  %699 = bitcast i8* %698 to %"struct.std::__1::__function::__policy"**
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %699, align 8
  %700 = getelementptr inbounds i8, i8* %681, i64 9624
  %701 = getelementptr inbounds i8, i8* %681, i64 9688
  call void @llvm.memset.p0i8.i64(i8* align 8 %700, i8 0, i64 60, i1 false) #9
  %702 = call i8* @_Znwm(i64 104) #12
  %703 = bitcast i8* %702 to %"class.jxl::ACImageT"*
  call void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"* nonnull %703, i64 0, i64 0) #9
  %704 = ptrtoint i8* %702 to i64
  %705 = bitcast i8* %701 to i64*
  store i64 %704, i64* %705, align 8
  %706 = getelementptr inbounds i8, i8* %681, i64 9696
  call void @llvm.memset.p0i8.i64(i8* align 8 %706, i8 0, i64 24, i1 false) #9
  %707 = getelementptr inbounds i8, i8* %681, i64 9760
  call void @llvm.memset.p0i8.i64(i8* align 8 %707, i8 0, i64 32, i1 false) #9
  %708 = getelementptr inbounds i8, i8* %681, i64 9936
  %709 = getelementptr inbounds i8, i8* %681, i64 10160
  %710 = bitcast i8* %709 to %"struct.jxl::ColorEncoding"*
  call void @llvm.memset.p0i8.i64(i8* align 8 %708, i8 0, i64 224, i1 false) #9
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %710) #9
  %711 = getelementptr inbounds i8, i8* %681, i64 10508
  store i8 1, i8* %711, align 4
  %712 = getelementptr inbounds i8, i8* %681, i64 10509
  store i8 0, i8* %712, align 1
  %713 = bitcast i8* %709 to %"struct.jxl::OutputEncodingInfo"*
  %714 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %315, align 8
  %715 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %714, i64 0, i32 0
  %716 = call i32 @_ZN3jxl18OutputEncodingInfo3SetERKNS_13ImageMetadataE(%"struct.jxl::OutputEncodingInfo"* %713, %"struct.jxl::ImageMetadata"* dereferenceable(1600) %715) #9
  %717 = icmp eq i32 %716, 0
  br i1 %717, label %721, label %718

718:                                              ; preds = %664
  %719 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0), i32 156, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0)) #9
  %720 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

721:                                              ; preds = %664
  %722 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %315, align 8
  %723 = call i32 @_ZN3jxl11DecodeFrameERKNS_16DecompressParamsEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_9BitReaderEPNS_11ImageBundleERKNS_13CodecMetadataEPKNS_15SizeConstraintsEb(%"struct.jxl::DecompressParams"* dereferenceable(32) bitcast ({ i8, i8, i8, i32, i32, i64, i8, i8 }* @.ref.tmp to %"struct.jxl::DecompressParams"*), %"struct.jxl::PassesDecoderState"* nonnull %682, %"class.jxl::ThreadPool"* %1, %"class.jxl::BitReader"* nonnull %32, %"class.jxl::ImageBundle"* nonnull %33, %"struct.jxl::CodecMetadata"* dereferenceable(2856) %722, %"struct.jxl::SizeConstraints"* null, i1 zeroext false) #9
  %724 = icmp eq i32 %723, 0
  br i1 %724, label %728, label %725

725:                                              ; preds = %721
  %726 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0), i32 158, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.7, i64 0, i64 0)) #9
  %727 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

728:                                              ; preds = %721
  %729 = bitcast %"class.jxl::Image3"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %729) #9
  %730 = bitcast i8* %684 to %"struct.jxl::PassesSharedState"**
  %731 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %730, align 8
  %732 = load i32, i32* %606, align 4
  %733 = zext i32 %732 to i64
  %734 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %731, i64 0, i32 16, i64 %733
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %729, i8 -86, i64 96, i1 false) #9, !alias.scope !3
  %735 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %734, i64 0, i32 0, i64 0, i32 0, i32 0
  %736 = load i32, i32* %735, align 8, !noalias !3
  %737 = zext i32 %736 to i64
  %738 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %731, i64 0, i32 16, i64 %733, i32 0, i64 0, i32 0, i32 1
  %739 = load i32, i32* %738, align 4, !noalias !3
  %740 = zext i32 %739 to i64
  %741 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %741, i64 %737, i64 %740, i64 4) #9
  %742 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %742, i64 %737, i64 %740, i64 4) #9
  %743 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %743, i64 %737, i64 %740, i64 4) #9
  %744 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %744) #9, !noalias !6
  %745 = bitcast %"class.jxl::Image3"* %734 to <2 x i32>*
  %746 = load <2 x i32>, <2 x i32>* %745, align 8, !noalias !6
  %747 = zext <2 x i32> %746 to <2 x i64>
  %748 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %744, i8 0, i64 16, i1 false) #9, !noalias !6
  %749 = bitcast i64* %748 to <2 x i64>*
  store <2 x i64> %747, <2 x i64>* %749, align 8, !noalias !6
  %750 = bitcast %"class.jxl::Rect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %750) #9, !noalias !6
  %751 = bitcast %"class.jxl::Image3"* %34 to <2 x i32>*
  %752 = load <2 x i32>, <2 x i32>* %751, align 8, !alias.scope !6
  %753 = zext <2 x i32> %752 to <2 x i64>
  %754 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %7, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %750, i8 0, i64 16, i1 false) #9, !noalias !6
  %755 = bitcast i64* %754 to <2 x i64>*
  store <2 x i64> %753, <2 x i64>* %755, align 8, !noalias !6
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %6, %"class.jxl::Image3"* dereferenceable(96) %734, %"class.jxl::Rect"* nonnull dereferenceable(32) %7, %"class.jxl::Image3"* nonnull %34) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %750) #9, !noalias !6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %744) #9, !noalias !6
  %756 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 13
  %757 = bitcast %"class.jxl::Image3"* %756 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %757, i8* nonnull align 8 %729, i64 24, i1 false) #9
  %758 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 13, i32 0, i64 0, i32 0, i32 5
  %759 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 5
  %760 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %759, i64 0, i32 0, i32 0, i32 0
  %761 = bitcast %"class.std::__1::unique_ptr"* %759 to i64*
  %762 = load i64, i64* %761, align 8
  store i8* null, i8** %760, align 8
  %763 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %758, i64 0, i32 0, i32 0, i32 0
  %764 = load i8*, i8** %763, align 8
  %765 = bitcast %"class.std::__1::unique_ptr"* %758 to i64*
  store i64 %762, i64* %765, align 8
  %766 = icmp eq i8* %764, null
  br i1 %766, label %768, label %767

767:                                              ; preds = %728
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %764) #9
  br label %768

768:                                              ; preds = %767, %728
  %769 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1
  %770 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 13, i32 0, i64 1
  %771 = bitcast %"class.jxl::Plane"* %770 to i8*
  %772 = bitcast %"class.jxl::Plane"* %769 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %771, i8* align 8 %772, i64 24, i1 false) #9
  %773 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 13, i32 0, i64 1, i32 0, i32 5
  %774 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 5
  %775 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %774, i64 0, i32 0, i32 0, i32 0
  %776 = bitcast %"class.std::__1::unique_ptr"* %774 to i64*
  %777 = load i64, i64* %776, align 8
  store i8* null, i8** %775, align 8
  %778 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %773, i64 0, i32 0, i32 0, i32 0
  %779 = load i8*, i8** %778, align 8
  %780 = bitcast %"class.std::__1::unique_ptr"* %773 to i64*
  store i64 %777, i64* %780, align 8
  %781 = icmp eq i8* %779, null
  br i1 %781, label %783, label %782

782:                                              ; preds = %768
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %779) #9
  br label %783

783:                                              ; preds = %782, %768
  %784 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 2
  %785 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 13, i32 0, i64 2
  %786 = bitcast %"class.jxl::Plane"* %785 to i8*
  %787 = bitcast %"class.jxl::Plane"* %784 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %786, i8* align 8 %787, i64 24, i1 false) #9
  %788 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 13, i32 0, i64 2, i32 0, i32 5
  %789 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 2, i32 0, i32 5
  %790 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %789, i64 0, i32 0, i32 0, i32 0
  %791 = bitcast %"class.std::__1::unique_ptr"* %789 to i64*
  %792 = load i64, i64* %791, align 8
  store i8* null, i8** %790, align 8
  %793 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %788, i64 0, i32 0, i32 0, i32 0
  %794 = load i8*, i8** %793, align 8
  %795 = bitcast %"class.std::__1::unique_ptr"* %788 to i64*
  store i64 %792, i64* %795, align 8
  %796 = icmp eq i8* %794, null
  br i1 %796, label %797, label %799

797:                                              ; preds = %783
  %798 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %798, align 8
  br label %805

799:                                              ; preds = %783
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %794) #9
  %800 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %801 = load i8*, i8** %800, align 8
  %802 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %802, align 8
  %803 = icmp eq i8* %801, null
  br i1 %803, label %805, label %804

804:                                              ; preds = %799
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %801) #9
  br label %805

805:                                              ; preds = %797, %804, %799
  %806 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %807 = load i8*, i8** %806, align 8
  store i8* null, i8** %806, align 8
  %808 = icmp eq i8* %807, null
  br i1 %808, label %810, label %809

809:                                              ; preds = %805
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %807) #9
  br label %810

810:                                              ; preds = %809, %805
  %811 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %34, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %812 = load i8*, i8** %811, align 8
  store i8* null, i8** %811, align 8
  %813 = icmp eq i8* %812, null
  br i1 %813, label %815, label %814

814:                                              ; preds = %810
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %812) #9
  br label %815

815:                                              ; preds = %810, %814
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %729) #9
  %816 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 12, i32 0, i32 0
  %817 = load i32, i32* %816, align 8
  %818 = icmp eq i32 %817, 0
  br i1 %818, label %848, label %819

819:                                              ; preds = %815
  %820 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 12, i32 0, i32 1
  %821 = load i32, i32* %820, align 4
  %822 = icmp eq i32 %821, 0
  br i1 %822, label %848, label %823

823:                                              ; preds = %819
  %824 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 12, i32 0, i32 5, i32 0, i32 0, i32 0
  %825 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 12, i32 0, i32 4
  %826 = load i8*, i8** %824, align 8
  %827 = ptrtoint i8* %826 to i64
  %828 = and i64 %827, 63
  %829 = icmp eq i64 %828, 0
  call void @llvm.assume(i1 %829) #9
  %830 = zext i32 %817 to i64
  call void @llvm.memset.p0i8.i64(i8* align 64 %826, i8 0, i64 %830, i1 false) #9
  %831 = load i32, i32* %820, align 4
  %832 = icmp ugt i32 %831, 1
  br i1 %832, label %833, label %848

833:                                              ; preds = %823, %833
  %834 = phi i64 [ %844, %833 ], [ 1, %823 ]
  %835 = load i32, i32* %816, align 8
  %836 = load i8*, i8** %824, align 8
  %837 = load i64, i64* %825, align 8
  %838 = mul i64 %837, %834
  %839 = getelementptr inbounds i8, i8* %836, i64 %838
  %840 = ptrtoint i8* %839 to i64
  %841 = and i64 %840, 63
  %842 = icmp eq i64 %841, 0
  call void @llvm.assume(i1 %842) #9
  %843 = zext i32 %835 to i64
  call void @llvm.memset.p0i8.i64(i8* align 64 %839, i8 0, i64 %843, i1 false) #9
  %844 = add nuw nsw i64 %834, 1
  %845 = load i32, i32* %820, align 4
  %846 = zext i32 %845 to i64
  %847 = icmp ult i64 %844, %846
  br i1 %847, label %833, label %848

848:                                              ; preds = %833, %823, %815, %819
  %849 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 14
  store %"class.jxl::Image3"* %756, %"class.jxl::Image3"** %849, align 8
  store i8 1, i8* %654, align 8
  %850 = load i8*, i8** %651, align 8
  %851 = icmp eq i8* %850, null
  %852 = ptrtoint i8* %850 to i64
  br i1 %851, label %875, label %853

853:                                              ; preds = %848
  %854 = bitcast i8** %647 to i64*
  %855 = load i64, i64* %854, align 8
  %856 = sub i64 %855, %852
  %857 = load i64, i64* %653, align 8
  %858 = add i64 %856, %857
  %859 = shl i64 %858, 3
  %860 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %32, i64 0, i32 1
  %861 = load i64, i64* %860, align 8
  %862 = sub i64 %859, %861
  %863 = load i64, i64* %655, align 8
  %864 = icmp ugt i64 %862, %863
  br i1 %864, label %865, label %875

865:                                              ; preds = %853
  %866 = load i8*, i8** %648, align 8
  %867 = getelementptr inbounds i8, i8* %866, i64 8
  %868 = ptrtoint i8* %867 to i64
  %869 = sub i64 %868, %852
  %870 = shl i64 %869, 3
  %871 = icmp ugt i64 %862, %870
  br i1 %871, label %872, label %875

872:                                              ; preds = %865
  %873 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0), i32 168, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0)) #9
  %874 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

875:                                              ; preds = %853, %865, %848
  call void @_ZN3jxl18PassesDecoderStateD2Ev(%"struct.jxl::PassesDecoderState"* nonnull %682) #9
  call void @_ZdlPv(i8* nonnull %681) #12
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %33) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %665) #9
  %876 = load i8, i8* %654, align 8, !range !9
  %877 = icmp ne i8 %876, 0
  %878 = load i8*, i8** %651, align 8
  %879 = icmp eq i8* %878, null
  %880 = or i1 %877, %879
  br i1 %880, label %884, label %881

881:                                              ; preds = %875
  %882 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.17, i64 0, i64 0), i32 67, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i64 0, i64 0)) #9
  %883 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

884:                                              ; preds = %875
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %646) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %599) #9
  %885 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %595, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %595, align 8
  %886 = icmp eq %"struct.jxl::BitWriter"* %885, null
  br i1 %886, label %894, label %887

887:                                              ; preds = %884
  %888 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %885, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %889 = load i8*, i8** %888, align 8
  store i8* null, i8** %888, align 8
  %890 = icmp eq i8* %889, null
  br i1 %890, label %892, label %891

891:                                              ; preds = %887
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %889) #9
  br label %892

892:                                              ; preds = %891, %887
  %893 = bitcast %"struct.jxl::BitWriter"* %885 to i8*
  call void @_ZdlPv(i8* %893) #12
  br label %894

894:                                              ; preds = %884, %892
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %594) #9
  call void @_ZN3jxl18PassesEncoderStateD2Ev(%"struct.jxl::PassesEncoderState"* nonnull %487) #9
  call void @_ZdlPv(i8* nonnull %486) #12
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %26) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %314) #9
  %895 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 39, i32 3, i32 0, i32 0
  %896 = load i32*, i32** %895, align 8
  %897 = icmp eq i32* %896, null
  br i1 %897, label %903, label %898

898:                                              ; preds = %894
  %899 = ptrtoint i32* %896 to i64
  %900 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %25, i64 0, i32 39, i32 3, i32 0, i32 1
  %901 = bitcast i32** %900 to i64*
  store i64 %899, i64* %901, align 8
  %902 = bitcast i32* %896 to i8*
  call void @_ZdlPv(i8* %902) #12
  br label %903

903:                                              ; preds = %894, %898
  call void @llvm.lifetime.end.p0i8(i64 360, i8* nonnull %218) #9
  br label %946

904:                                              ; preds = %211
  %905 = bitcast %class.anon.407* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %905) #9
  %906 = getelementptr inbounds %class.anon.407, %class.anon.407* %35, i64 0, i32 0
  %907 = getelementptr inbounds %class.anon.407, %class.anon.407* %35, i64 0, i32 1
  %908 = getelementptr inbounds %class.anon.407, %class.anon.407* %35, i64 0, i32 2
  store %"class.jxl::ModularFrameEncoder"** %21, %"class.jxl::ModularFrameEncoder"*** %906, align 8
  store %"class.jxl::Image3"* %23, %"class.jxl::Image3"** %907, align 8
  store %"struct.jxl::PassesEncoderState"** %20, %"struct.jxl::PassesEncoderState"*** %908, align 8
  %909 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 2, i32 15
  %910 = load i64, i64* %909, align 8
  %911 = trunc i64 %910 to i32
  %912 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %912) #9
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double* nonnull %10) #9
  br i1 %186, label %913, label %924

913:                                              ; preds = %904
  %914 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %914) #9
  %915 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %916 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %915, align 8
  %917 = bitcast i8** %916 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %917, align 8
  %918 = icmp eq i32 %911, 0
  br i1 %918, label %935, label %919

919:                                              ; preds = %913
  %920 = bitcast %"class.jxl::ThreadPool::RunCallState.454"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %920) #9
  %921 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.454", %"class.jxl::ThreadPool::RunCallState.454"* %8, i64 0, i32 0
  %922 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.454", %"class.jxl::ThreadPool::RunCallState.454"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %921, align 8
  store %class.anon.407* %35, %class.anon.407** %922, align 8
  %923 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %914, i8* nonnull %920, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %911) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %920) #9
  br label %935

924:                                              ; preds = %904
  %925 = icmp eq i32 %911, 0
  br i1 %925, label %937, label %926

926:                                              ; preds = %924
  %927 = bitcast %"class.jxl::ThreadPool::RunCallState.454"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %927) #9
  %928 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.454", %"class.jxl::ThreadPool::RunCallState.454"* %9, i64 0, i32 0
  %929 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.454", %"class.jxl::ThreadPool::RunCallState.454"* %9, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %928, align 8
  store %class.anon.407* %35, %class.anon.407** %929, align 8
  %930 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 0
  %931 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %930, align 8
  %932 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 1
  %933 = load i8*, i8** %932, align 8
  %934 = call i32 %931(i8* %933, i8* nonnull %927, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_1E12CallDataFuncEPvjm", i32 0, i32 %911) #9
  br label %935

935:                                              ; preds = %913, %919, %926
  %936 = phi i8* [ %927, %926 ], [ %914, %919 ], [ %914, %913 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %936) #9
  br label %937

937:                                              ; preds = %935, %924
  %938 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), double %938) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %912) #9
  %939 = load i64, i64* %213, align 8
  %940 = trunc i64 %939 to i8
  %941 = icmp slt i8 %940, 0
  br i1 %941, label %945, label %942

942:                                              ; preds = %937
  %943 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 5, i32 0, i64 0
  %944 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 13
  call void @_ZN3jxl19AdaptiveDCSmoothingEPKfPNS_6Image3IfEEPNS_10ThreadPoolE(float* %943, %"class.jxl::Image3"* %944, %"class.jxl::ThreadPool"* %1) #9
  br label %945

945:                                              ; preds = %942, %937
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %905) #9
  br label %946

946:                                              ; preds = %945, %903
  %947 = bitcast %class.anon.408* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %947) #9
  %948 = getelementptr inbounds %class.anon.408, %class.anon.408* %36, i64 0, i32 0
  %949 = getelementptr inbounds %class.anon.408, %class.anon.408* %36, i64 0, i32 1
  store %"class.jxl::ModularFrameEncoder"** %21, %"class.jxl::ModularFrameEncoder"*** %948, align 8
  store %"struct.jxl::PassesEncoderState"** %20, %"struct.jxl::PassesEncoderState"*** %949, align 8
  %950 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 2, i32 15
  %951 = load i64, i64* %950, align 8
  %952 = trunc i64 %951 to i32
  %953 = bitcast double* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %953) #9
  store double 0xFFFFFFFFFFFFFFFF, double* %14, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0), double* nonnull %14) #9
  br i1 %186, label %954, label %965

954:                                              ; preds = %946
  %955 = bitcast %"class.jxl::ThreadPool"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %955) #9
  %956 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %15, i64 0, i32 0
  %957 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %15, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %956, align 8
  %958 = bitcast i8** %957 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %15, %"class.jxl::ThreadPool"** %958, align 8
  %959 = icmp eq i32 %952, 0
  br i1 %959, label %976, label %960

960:                                              ; preds = %954
  %961 = bitcast %"class.jxl::ThreadPool::RunCallState.455"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %961) #9
  %962 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.455", %"class.jxl::ThreadPool::RunCallState.455"* %12, i64 0, i32 0
  %963 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.455", %"class.jxl::ThreadPool::RunCallState.455"* %12, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %962, align 8
  store %class.anon.408* %36, %class.anon.408** %963, align 8
  %964 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %955, i8* nonnull %961, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %952) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %961) #9
  br label %976

965:                                              ; preds = %946
  %966 = icmp eq i32 %952, 0
  br i1 %966, label %978, label %967

967:                                              ; preds = %965
  %968 = bitcast %"class.jxl::ThreadPool::RunCallState.455"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %968) #9
  %969 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.455", %"class.jxl::ThreadPool::RunCallState.455"* %13, i64 0, i32 0
  %970 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.455", %"class.jxl::ThreadPool::RunCallState.455"* %13, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %969, align 8
  store %class.anon.408* %36, %class.anon.408** %970, align 8
  %971 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 0
  %972 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %971, align 8
  %973 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 1
  %974 = load i8*, i8** %973, align 8
  %975 = call i32 %972(i8* %974, i8* nonnull %968, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %952) #9
  br label %976

976:                                              ; preds = %954, %960, %967
  %977 = phi i8* [ %968, %967 ], [ %955, %960 ], [ %955, %954 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %977) #9
  br label %978

978:                                              ; preds = %976, %965
  %979 = load double, double* %14, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0), double %979) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %953) #9
  %980 = icmp eq %"struct.jxl::AuxOut"* %4, null
  br i1 %980, label %993, label %981

981:                                              ; preds = %978
  %982 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 17, i32 0, i32 2
  %983 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %982, align 8
  %984 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %983, i64 0, i32 2
  %985 = load i8, i8* %984, align 8, !range !9
  %986 = icmp eq i8 %985, 0
  br i1 %986, label %987, label %993

987:                                              ; preds = %981
  %988 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 13
  %989 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 17, i32 0, i32 1, i32 0
  %990 = load i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)*, i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)** %989, align 8
  %991 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 17, i32 0, i32 0
  %992 = call zeroext i1 %990(%"union.std::__1::__function::__policy_storage"* %991, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11, i64 0, i64 0), %"class.jxl::Image3"* dereferenceable(96) %988) #9
  br label %993

993:                                              ; preds = %987, %981, %978
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %947) #9
  %994 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %23, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %995 = load i8*, i8** %994, align 8
  store i8* null, i8** %994, align 8
  %996 = icmp eq i8* %995, null
  br i1 %996, label %998, label %997

997:                                              ; preds = %993
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %995) #9
  br label %998

998:                                              ; preds = %997, %993
  %999 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %23, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1000 = load i8*, i8** %999, align 8
  store i8* null, i8** %999, align 8
  %1001 = icmp eq i8* %1000, null
  br i1 %1001, label %1003, label %1002

1002:                                             ; preds = %998
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1000) #9
  br label %1003

1003:                                             ; preds = %1002, %998
  %1004 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %23, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1005 = load i8*, i8** %1004, align 8
  store i8* null, i8** %1004, align 8
  %1006 = icmp eq i8* %1005, null
  br i1 %1006, label %1008, label %1007

1007:                                             ; preds = %1003
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1005) #9
  br label %1008

1008:                                             ; preds = %1003, %1007
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %171) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl7ACImageENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE7reserveEm(%"class.std::__1::vector.177"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::unique_ptr.179"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.177"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.std::__1::unique_ptr.179"*
  br i1 %10, label %12, label %135

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.std::__1::unique_ptr.179"** %13 to i64*
  %15 = icmp ugt i64 %1, 2305843009213693951
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #13
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 3
  %21 = shl i64 %1, 3
  %22 = tail call i8* @_Znwm(i64 %21) #12
  %23 = bitcast i8* %22 to %"class.std::__1::unique_ptr.179"*
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %23, i64 %20
  %25 = ptrtoint %"class.std::__1::unique_ptr.179"* %24 to i64
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %23, i64 %1
  %27 = ptrtoint %"class.std::__1::unique_ptr.179"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.std::__1::unique_ptr.179"*
  %29 = icmp eq %"class.std::__1::unique_ptr.179"* %28, %11
  br i1 %29, label %57, label %30

30:                                               ; preds = %17
  %31 = getelementptr %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %28, i64 -1, i32 0, i32 0, i32 0
  %32 = bitcast %"class.jxl::ACImage"** %31 to i8*
  %33 = sub i64 0, %7
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 7
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %52, label %40

40:                                               ; preds = %30, %40
  %41 = phi %"class.std::__1::unique_ptr.179"* [ %44, %40 ], [ %24, %30 ]
  %42 = phi %"class.std::__1::unique_ptr.179"* [ %45, %40 ], [ %28, %30 ]
  %43 = phi i64 [ %50, %40 ], [ %38, %30 ]
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %41, i64 -1
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %42, i64 -1
  %46 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = bitcast %"class.std::__1::unique_ptr.179"* %45 to i64*
  %48 = load i64, i64* %47, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %46, align 8
  %49 = bitcast %"class.std::__1::unique_ptr.179"* %44 to i64*
  store i64 %48, i64* %49, align 8
  %50 = add i64 %43, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %40, !llvm.loop !10

52:                                               ; preds = %40, %30
  %53 = phi %"class.std::__1::unique_ptr.179"* [ undef, %30 ], [ %44, %40 ]
  %54 = phi %"class.std::__1::unique_ptr.179"* [ %24, %30 ], [ %44, %40 ]
  %55 = phi %"class.std::__1::unique_ptr.179"* [ %28, %30 ], [ %45, %40 ]
  %56 = icmp ult i8* %34, inttoptr (i64 56 to i8*)
  br i1 %56, label %110, label %58

57:                                               ; preds = %17
  store i64 %25, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  br label %130

58:                                               ; preds = %52, %58
  %59 = phi %"class.std::__1::unique_ptr.179"* [ %103, %58 ], [ %54, %52 ]
  %60 = phi %"class.std::__1::unique_ptr.179"* [ %104, %58 ], [ %55, %52 ]
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %59, i64 -1
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %60, i64 -1
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr.179"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %63, align 8
  %66 = bitcast %"class.std::__1::unique_ptr.179"* %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %59, i64 -2
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %60, i64 -2
  %69 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = bitcast %"class.std::__1::unique_ptr.179"* %68 to i64*
  %71 = load i64, i64* %70, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %69, align 8
  %72 = bitcast %"class.std::__1::unique_ptr.179"* %67 to i64*
  store i64 %71, i64* %72, align 8
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %59, i64 -3
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %60, i64 -3
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %74, i64 0, i32 0, i32 0, i32 0
  %76 = bitcast %"class.std::__1::unique_ptr.179"* %74 to i64*
  %77 = load i64, i64* %76, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %75, align 8
  %78 = bitcast %"class.std::__1::unique_ptr.179"* %73 to i64*
  store i64 %77, i64* %78, align 8
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %59, i64 -4
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %60, i64 -4
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.179"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.179"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %59, i64 -5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %60, i64 -5
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.179"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.179"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %59, i64 -6
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %60, i64 -6
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.179"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.179"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %59, i64 -7
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %60, i64 -7
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.179"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.179"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %59, i64 -8
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %60, i64 -8
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.179"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.179"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = icmp eq %"class.std::__1::unique_ptr.179"* %104, %11
  br i1 %109, label %110, label %58

110:                                              ; preds = %58, %52
  %111 = phi %"class.std::__1::unique_ptr.179"* [ %53, %52 ], [ %103, %58 ]
  %112 = ptrtoint %"class.std::__1::unique_ptr.179"* %111 to i64
  %113 = load i64, i64* %6, align 8
  %114 = load %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"** %13, align 8
  %115 = inttoptr i64 %113 to %"class.std::__1::unique_ptr.179"*
  store i64 %112, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %116 = icmp eq %"class.std::__1::unique_ptr.179"* %114, %115
  br i1 %116, label %130, label %117

117:                                              ; preds = %110, %128
  %118 = phi %"class.std::__1::unique_ptr.179"* [ %119, %128 ], [ %114, %110 ]
  %119 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %118, i64 -1
  %120 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %119, i64 0, i32 0, i32 0, i32 0
  %121 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %120, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %120, align 8
  %122 = icmp eq %"class.jxl::ACImage"* %121, null
  br i1 %122, label %128, label %123

123:                                              ; preds = %117
  %124 = bitcast %"class.jxl::ACImage"* %121 to void (%"class.jxl::ACImage"*)***
  %125 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %124, align 8
  %126 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %125, i64 1
  %127 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %126, align 8
  tail call void %127(%"class.jxl::ACImage"* nonnull %121) #9
  br label %128

128:                                              ; preds = %123, %117
  %129 = icmp eq %"class.std::__1::unique_ptr.179"* %119, %115
  br i1 %129, label %130, label %117

130:                                              ; preds = %128, %57, %110
  %131 = phi i64 [ %7, %57 ], [ %113, %110 ], [ %113, %128 ]
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %135, label %133

133:                                              ; preds = %130
  %134 = inttoptr i64 %131 to i8*
  tail call void @_ZdlPv(i8* %134) #12
  br label %135

135:                                              ; preds = %133, %130, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #2

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.169"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::Plane"*
  br i1 %10, label %12, label %103

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::Plane"** %13 to i64*
  %15 = icmp ugt i64 %1, 576460752303423487
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #13
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 5
  %21 = shl i64 %1, 5
  %22 = tail call i8* @_Znwm(i64 %21) #12
  %23 = bitcast i8* %22 to %"class.jxl::Plane"*
  %24 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::Plane"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::Plane"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::Plane"*
  %29 = icmp eq %"class.jxl::Plane"* %28, %11
  br i1 %29, label %84, label %30

30:                                               ; preds = %17
  %31 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 -1, i32 0, i32 0
  %32 = bitcast i32* %31 to i8*
  %33 = sub i64 0, %7
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 32
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %24, i64 -1
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 -1
  %41 = bitcast %"class.jxl::Plane"* %39 to i8*
  %42 = bitcast %"class.jxl::Plane"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false) #9
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %24, i64 -1, i32 0, i32 5
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 -1, i32 0, i32 5
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.std::__1::unique_ptr"* %44 to i64*
  %47 = load i64, i64* %46, align 8
  store i8* null, i8** %45, align 8
  %48 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %47, i64* %48, align 8
  br label %49

49:                                               ; preds = %38, %30
  %50 = phi %"class.jxl::Plane"* [ undef, %30 ], [ %39, %38 ]
  %51 = phi %"class.jxl::Plane"* [ %24, %30 ], [ %39, %38 ]
  %52 = phi %"class.jxl::Plane"* [ %28, %30 ], [ %40, %38 ]
  %53 = icmp ult i8* %34, inttoptr (i64 32 to i8*)
  br i1 %53, label %78, label %54

54:                                               ; preds = %49, %54
  %55 = phi %"class.jxl::Plane"* [ %67, %54 ], [ %51, %49 ]
  %56 = phi %"class.jxl::Plane"* [ %68, %54 ], [ %52, %49 ]
  %57 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -1
  %58 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -1
  %59 = bitcast %"class.jxl::Plane"* %57 to i8*
  %60 = bitcast %"class.jxl::Plane"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #9
  %61 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -1, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -2
  %68 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -2
  %69 = bitcast %"class.jxl::Plane"* %67 to i8*
  %70 = bitcast %"class.jxl::Plane"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false) #9
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -2, i32 0, i32 5
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -2, i32 0, i32 5
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %72, i64 0, i32 0, i32 0, i32 0
  %74 = bitcast %"class.std::__1::unique_ptr"* %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i8* null, i8** %73, align 8
  %76 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = icmp eq %"class.jxl::Plane"* %68, %11
  br i1 %77, label %78, label %54

78:                                               ; preds = %54, %49
  %79 = phi %"class.jxl::Plane"* [ %50, %49 ], [ %67, %54 ]
  %80 = ptrtoint %"class.jxl::Plane"* %79 to i64
  %81 = load i64, i64* %6, align 8
  %82 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %13, align 8
  %83 = inttoptr i64 %81 to %"class.jxl::Plane"*
  br label %84

84:                                               ; preds = %17, %78
  %85 = phi %"class.jxl::Plane"* [ %83, %78 ], [ %28, %17 ]
  %86 = phi %"class.jxl::Plane"* [ %82, %78 ], [ %11, %17 ]
  %87 = phi i64 [ %80, %78 ], [ %25, %17 ]
  %88 = phi i64 [ %81, %78 ], [ %18, %17 ]
  store i64 %87, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %89 = icmp eq %"class.jxl::Plane"* %86, %85
  br i1 %89, label %99, label %90

90:                                               ; preds = %84, %97
  %91 = phi %"class.jxl::Plane"* [ %92, %97 ], [ %86, %84 ]
  %92 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %91, i64 -1
  %93 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %91, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  store i8* null, i8** %93, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %94) #9
  br label %97

97:                                               ; preds = %96, %90
  %98 = icmp eq %"class.jxl::Plane"* %92, %85
  br i1 %98, label %99, label %90

99:                                               ; preds = %97, %84
  %100 = icmp eq i64 %88, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %99
  %102 = inttoptr i64 %88 to i8*
  tail call void @_ZdlPv(i8* %102) #12
  br label %103

103:                                              ; preds = %101, %99, %2
  ret void
}

declare void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"*, %"class.std::__1::vector.169"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare i32 @_ZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::CompressParams"* dereferenceable(360), %"struct.jxl::FrameInfo"* dereferenceable(32), %"struct.jxl::CodecMetadata"*, %"class.jxl::ImageBundle"* dereferenceable(368), %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*, %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare i32 @_ZN3jxl18OutputEncodingInfo3SetERKNS_13ImageMetadataE(%"struct.jxl::OutputEncodingInfo"*, %"struct.jxl::ImageMetadata"* dereferenceable(1600)) local_unnamed_addr #2

declare i32 @_ZN3jxl11DecodeFrameERKNS_16DecompressParamsEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_9BitReaderEPNS_11ImageBundleERKNS_13CodecMetadataEPKNS_15SizeConstraintsEb(%"struct.jxl::DecompressParams"* dereferenceable(32), %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, %"class.jxl::BitReader"*, %"class.jxl::ImageBundle"*, %"struct.jxl::CodecMetadata"* dereferenceable(2856), %"struct.jxl::SizeConstraints"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #9
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.169"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #12
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #9
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #9
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #9
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #9
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #9
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

declare void @_ZN3jxl19AdaptiveDCSmoothingEPKfPNS_6Image3IfEEPNS_10ThreadPoolE(float*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8EncCache8InitOnceEv(%"struct.jxl::EncCache"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.jxl::Image3.330", align 8
  %3 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %0, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %70

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Image3.330"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %8, i64 32, i64 32, i64 4) #9
  %9 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %9, i64 32, i64 32, i64 4) #9
  %10 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %10, i64 32, i64 32, i64 4) #9
  %11 = bitcast %"struct.jxl::EncCache"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* nonnull align 8 %7, i64 24, i1 false) #9
  %12 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %0, i64 0, i32 0, i32 0, i64 0, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %6
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #9
  br label %22

22:                                               ; preds = %21, %6
  %23 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 1
  %24 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %0, i64 0, i32 0, i32 0, i64 1
  %25 = bitcast %"class.jxl::Plane.54"* %24 to i8*
  %26 = bitcast %"class.jxl::Plane.54"* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false) #9
  %27 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %0, i64 0, i32 0, i32 0, i64 1, i32 0, i32 5
  %28 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 1, i32 0, i32 5
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  %31 = load i64, i64* %30, align 8
  store i8* null, i8** %29, align 8
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %22
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #9
  br label %37

37:                                               ; preds = %36, %22
  %38 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 2
  %39 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %0, i64 0, i32 0, i32 0, i64 2
  %40 = bitcast %"class.jxl::Plane.54"* %39 to i8*
  %41 = bitcast %"class.jxl::Plane.54"* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #9
  %42 = getelementptr inbounds %"struct.jxl::EncCache", %"struct.jxl::EncCache"* %0, i64 0, i32 0, i32 0, i64 2, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 2, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %49, align 8
  %50 = icmp eq i8* %48, null
  br i1 %50, label %51, label %53

51:                                               ; preds = %37
  %52 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %52, align 8
  br label %59

53:                                               ; preds = %37
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #9
  %54 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %56, align 8
  %57 = icmp eq i8* %55, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #9
  br label %59

59:                                               ; preds = %51, %58, %53
  %60 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #9
  br label %64

64:                                               ; preds = %63, %59
  %65 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #9
  br label %69

69:                                               ; preds = %64, %68
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %7) #9
  br label %70

70:                                               ; preds = %69, %1
  ret void
}

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #9
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #9
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #9
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #2

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* noalias) local_unnamed_addr #0 comdat {
  %5 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 0
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %21 = icmp eq i64 %6, 0
  %22 = icmp eq i64 %12, 0
  %23 = or i1 %21, %22
  br i1 %23, label %66, label %27

24:                                               ; preds = %4, %10
  %25 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.19, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.20, i64 0, i64 0)) #9
  %26 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8, !alias.scope !12
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8, !alias.scope !12
  br label %34

34:                                               ; preds = %34, %27
  %35 = phi i64 [ %6, %27 ], [ %65, %34 ]
  %36 = phi i64 [ 0, %27 ], [ %62, %34 ]
  %37 = load i64, i64* %17, align 8, !noalias !12
  %38 = add i64 %37, %36
  %39 = load i8*, i8** %28, align 8, !noalias !12
  %40 = load i64, i64* %29, align 8, !noalias !12
  %41 = mul i64 %40, %38
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #9, !noalias !12
  %46 = bitcast i8* %42 to float*
  %47 = load i64, i64* %18, align 8, !noalias !12
  %48 = getelementptr inbounds float, float* %46, i64 %47
  %49 = load i64, i64* %19, align 8, !noalias !12
  %50 = add i64 %49, %36
  %51 = mul i64 %50, %33
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #9, !noalias !12
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %20, align 8, !noalias !12
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = bitcast float* %58 to i8*
  %60 = bitcast float* %48 to i8*
  %61 = shl i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %61, i1 false) #9, !noalias !12
  %62 = add nuw i64 %36, 1
  %63 = load i64, i64* %11, align 8, !noalias !12
  %64 = icmp ult i64 %62, %63
  %65 = load i64, i64* %5, align 8
  br i1 %64, label %34, label %66

66:                                               ; preds = %34, %16
  %67 = phi i64 [ %12, %16 ], [ %63, %34 ]
  %68 = phi i64 [ %6, %16 ], [ %65, %34 ]
  %69 = icmp eq i64 %68, 0
  %70 = icmp eq i64 %67, 0
  %71 = or i1 %69, %70
  br i1 %71, label %111, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8, !alias.scope !12
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i64, i64* %77, align 8, !alias.scope !12
  br label %79

79:                                               ; preds = %79, %72
  %80 = phi i64 [ %68, %72 ], [ %110, %79 ]
  %81 = phi i64 [ 0, %72 ], [ %107, %79 ]
  %82 = load i64, i64* %17, align 8, !noalias !12
  %83 = add i64 %82, %81
  %84 = load i8*, i8** %73, align 8, !noalias !12
  %85 = load i64, i64* %74, align 8, !noalias !12
  %86 = mul i64 %85, %83
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #9, !noalias !12
  %91 = bitcast i8* %87 to float*
  %92 = load i64, i64* %18, align 8, !noalias !12
  %93 = getelementptr inbounds float, float* %91, i64 %92
  %94 = load i64, i64* %19, align 8, !noalias !12
  %95 = add i64 %94, %81
  %96 = mul i64 %95, %78
  %97 = getelementptr inbounds i8, i8* %76, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = and i64 %98, 63
  %100 = icmp eq i64 %99, 0
  tail call void @llvm.assume(i1 %100) #9, !noalias !12
  %101 = bitcast i8* %97 to float*
  %102 = load i64, i64* %20, align 8, !noalias !12
  %103 = getelementptr inbounds float, float* %101, i64 %102
  %104 = bitcast float* %103 to i8*
  %105 = bitcast float* %93 to i8*
  %106 = shl i64 %80, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %106, i1 false) #9, !noalias !12
  %107 = add nuw i64 %81, 1
  %108 = load i64, i64* %11, align 8, !noalias !12
  %109 = icmp ult i64 %107, %108
  %110 = load i64, i64* %5, align 8
  br i1 %109, label %79, label %111

111:                                              ; preds = %79, %66
  %112 = phi i64 [ %67, %66 ], [ %108, %79 ]
  %113 = phi i64 [ %68, %66 ], [ %110, %79 ]
  %114 = icmp eq i64 %113, 0
  %115 = icmp eq i64 %112, 0
  %116 = or i1 %114, %115
  br i1 %116, label %157, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8, !alias.scope !12
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 4
  %123 = load i64, i64* %122, align 8, !alias.scope !12
  br label %124

124:                                              ; preds = %155, %117
  %125 = phi i64 [ %113, %117 ], [ %156, %155 ]
  %126 = phi i64 [ 0, %117 ], [ %152, %155 ]
  %127 = load i64, i64* %17, align 8, !noalias !12
  %128 = add i64 %127, %126
  %129 = load i8*, i8** %118, align 8, !noalias !12
  %130 = load i64, i64* %119, align 8, !noalias !12
  %131 = mul i64 %130, %128
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #9, !noalias !12
  %136 = bitcast i8* %132 to float*
  %137 = load i64, i64* %18, align 8, !noalias !12
  %138 = getelementptr inbounds float, float* %136, i64 %137
  %139 = load i64, i64* %19, align 8, !noalias !12
  %140 = add i64 %139, %126
  %141 = mul i64 %140, %123
  %142 = getelementptr inbounds i8, i8* %121, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #9, !noalias !12
  %146 = bitcast i8* %142 to float*
  %147 = load i64, i64* %20, align 8, !noalias !12
  %148 = getelementptr inbounds float, float* %146, i64 %147
  %149 = bitcast float* %148 to i8*
  %150 = bitcast float* %138 to i8*
  %151 = shl i64 %125, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %150, i64 %151, i1 false) #9, !noalias !12
  %152 = add nuw i64 %126, 1
  %153 = load i64, i64* %11, align 8, !noalias !12
  %154 = icmp ult i64 %152, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %124
  %156 = load i64, i64* %5, align 8, !noalias !12
  br label %124

157:                                              ; preds = %124, %111
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.98"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.98"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.98"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #13
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #12
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #12
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"*, i64, i64) unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.jxl::Image3.330", align 8
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1
  %7 = bitcast %"class.jxl::Image3.330"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 96, i1 false) #9
  %8 = bitcast %"class.jxl::Image3.330"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #9
  %9 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 %1, i64 %2, i64 4) #9
  %10 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %10, i64 %1, i64 %2, i64 4) #9
  %11 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %11, i64 %1, i64 %2, i64 4) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* nonnull align 8 %8, i64 24, i1 false) #9
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %3
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #9
  br label %22

22:                                               ; preds = %21, %3
  %23 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 1
  %24 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1
  %25 = bitcast %"class.jxl::Plane.54"* %24 to i8*
  %26 = bitcast %"class.jxl::Plane.54"* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false) #9
  %27 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5
  %28 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 1, i32 0, i32 5
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  %31 = load i64, i64* %30, align 8
  store i8* null, i8** %29, align 8
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %22
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #9
  br label %37

37:                                               ; preds = %36, %22
  %38 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2
  %39 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2
  %40 = bitcast %"class.jxl::Plane.54"* %39 to i8*
  %41 = bitcast %"class.jxl::Plane.54"* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #9
  %42 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %49, align 8
  %50 = icmp eq i8* %48, null
  br i1 %50, label %51, label %53

51:                                               ; preds = %37
  %52 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %52, align 8
  br label %59

53:                                               ; preds = %37
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #9
  %54 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %56, align 8
  %57 = icmp eq i8* %55, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #9
  br label %59

59:                                               ; preds = %51, %58, %53
  %60 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #9
  br label %64

64:                                               ; preds = %63, %59
  %65 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #9
  br label %69

69:                                               ; preds = %64, %68
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED2Ev(%"class.jxl::ACImageT"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #9
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #9
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #9
  br label %17

17:                                               ; preds = %12, %16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED0Ev(%"class.jxl::ACImageT"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #9
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #9
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #9
  br label %17

17:                                               ; preds = %12, %16
  %18 = bitcast %"class.jxl::ACImageT"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl8ACImageTIiE4TypeEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #9
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #9
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #9
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #9
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 2
  ret i64 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE8ZeroFillEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %4 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %74, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %11

9:                                                ; preds = %11
  %10 = icmp eq i32 %27, 0
  br i1 %10, label %74, label %30

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %26, %11 ]
  %13 = load i64, i64* %3, align 8
  %14 = mul i64 %13, %12
  %15 = load i8*, i8** %8, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #9
  %19 = getelementptr inbounds i8, i8* %15, i64 %14
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #9
  %23 = load i32, i32* %4, align 8
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %19, i8 0, i64 %25, i1 false) #9
  %26 = add nuw nsw i64 %12, 1
  %27 = load i32, i32* %2, align 4
  %28 = zext i32 %27 to i64
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %11, label %9

30:                                               ; preds = %9
  %31 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %47, %32 ]
  %34 = load i64, i64* %3, align 8
  %35 = mul i64 %34, %33
  %36 = load i8*, i8** %31, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #9
  %40 = getelementptr inbounds i8, i8* %36, i64 %35
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #9
  %44 = load i32, i32* %4, align 8
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %40, i8 0, i64 %46, i1 false) #9
  %47 = add nuw nsw i64 %33, 1
  %48 = load i32, i32* %2, align 4
  %49 = zext i32 %48 to i64
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %32, label %51

51:                                               ; preds = %32
  %52 = icmp eq i32 %48, 0
  br i1 %52, label %74, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %70, %55 ]
  %57 = load i64, i64* %3, align 8
  %58 = mul i64 %57, %56
  %59 = load i8*, i8** %54, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #9
  %63 = getelementptr inbounds i8, i8* %59, i64 %58
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #9
  %67 = load i32, i32* %4, align 8
  %68 = zext i32 %67 to i64
  %69 = shl nuw nsw i64 %68, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %63, i8 0, i64 %69, i1 false) #9
  %70 = add nuw nsw i64 %56, 1
  %71 = load i32, i32* %2, align 4
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %70, %72
  br i1 %73, label %55, label %74

74:                                               ; preds = %55, %1, %9, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm(%"class.jxl::ACImageT"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 4
  %13 = load i8*, i8** %11, align 8
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #9
  %17 = zext i32 %4 to i64
  %18 = shl nuw nsw i64 %17, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %13, i8 0, i64 %18, i1 false) #9
  %19 = load i32, i32* %7, align 4
  %20 = icmp ugt i32 %19, 1
  br i1 %20, label %21, label %37

21:                                               ; preds = %10, %21
  %22 = phi i64 [ %33, %21 ], [ 1, %10 ]
  %23 = load i32, i32* %3, align 8
  %24 = load i8*, i8** %11, align 8
  %25 = load i64, i64* %12, align 8
  %26 = mul i64 %25, %22
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #9
  %31 = zext i32 %23 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %27, i8 0, i64 %32, i1 false) #9
  %33 = add nuw nsw i64 %22, 1
  %34 = load i32, i32* %7, align 4
  %35 = zext i32 %34 to i64
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %21, label %37

37:                                               ; preds = %21, %10, %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3jxl8ACImageTIiE7IsEmptyEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl7ACImageENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJNS1_INS2_8ACImageTIiEENS4_ISC_EEEEEEEvDpOT_(%"class.std::__1::vector.177"*, %"class.std::__1::unique_ptr.327"* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.179"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.177"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.177"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.179"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #12
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.179"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.179"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.179"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.327", %"class.std::__1::unique_ptr.327"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.327"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.jxl::ACImageT"* null, %"class.jxl::ACImageT"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.179"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.179"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.179"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.179"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.jxl::ACImage"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.179"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.179"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.179"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.179"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !15

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.179"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.179"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.179"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.179"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.179"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.179"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.179"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.179"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.179"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.179"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.179"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.179"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.179"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.179"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.179"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.179"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.179"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.179"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.179"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.179"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.179"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.179"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.179"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.179"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.179"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.179"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.179"*
  %138 = icmp eq %"class.std::__1::unique_ptr.179"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr.179"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %142, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %142, align 8
  %144 = icmp eq %"class.jxl::ACImage"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.jxl::ACImage"* %143 to void (%"class.jxl::ACImage"*)***
  %147 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %147, i64 1
  %149 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %148, align 8
  tail call void %149(%"class.jxl::ACImage"* nonnull %143) #9
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr.179"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #12
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #2

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #2

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_0E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #9
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_0E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon**
  %6 = load %class.anon*, %class.anon** %5, align 8
  %7 = zext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 0
  %9 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %8, align 8
  %10 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %9, align 8
  %11 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 1
  %12 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %11, align 8
  %13 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 2
  %14 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %13, align 8
  tail call void @_ZN3jxl19ComputeCoefficientsEmPNS_18PassesEncoderStateERKNS_6Image3IfEEPS3_(i64 %7, %"struct.jxl::PassesEncoderState"* %10, %"class.jxl::Image3"* dereferenceable(96) %12, %"class.jxl::Image3"* %14) #9
  ret void
}

declare void @_ZN3jxl19ComputeCoefficientsEmPNS_18PassesEncoderStateERKNS_6Image3IfEEPS3_(i64, %"struct.jxl::PassesEncoderState"*, %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.169"*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.jxl::Plane"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 5
  %11 = add nsw i64 %10, 1
  %12 = icmp ugt i64 %11, 576460752303423487
  br i1 %12, label %13, label %15

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::vector.169"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #13
  unreachable

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.jxl::Plane"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = ashr exact i64 %19, 5
  %21 = icmp ult i64 %20, 288230376151711743
  br i1 %21, label %22, label %30

22:                                               ; preds = %15
  %23 = ashr exact i64 %19, 4
  %24 = icmp ult i64 %23, %11
  %25 = select i1 %24, i64 %11, i64 %23
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %22
  %28 = icmp ugt i64 %25, 576460752303423487
  br i1 %28, label %29, label %30

29:                                               ; preds = %27
  tail call void @abort() #13
  unreachable

30:                                               ; preds = %15, %27
  %31 = phi i64 [ %25, %27 ], [ 576460752303423487, %15 ]
  %32 = shl i64 %31, 5
  %33 = tail call i8* @_Znwm(i64 %32) #12
  %34 = bitcast i8* %33 to %"class.jxl::Plane"*
  br label %35

35:                                               ; preds = %22, %30
  %36 = phi i64 [ %31, %30 ], [ 0, %22 ]
  %37 = phi %"class.jxl::Plane"* [ %34, %30 ], [ null, %22 ]
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 %10
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 %36
  %40 = ptrtoint %"class.jxl::Plane"* %39 to i64
  %41 = load i64, i64* %1, align 8
  %42 = load i64, i64* %2, align 8
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %43, i64 %41, i64 %42, i64 4) #9
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 1
  %45 = ptrtoint %"class.jxl::Plane"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %46, align 8
  %48 = ptrtoint %"class.jxl::Plane"* %47 to i64
  %49 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %4, align 8
  %50 = icmp eq %"class.jxl::Plane"* %49, %47
  br i1 %50, label %101, label %51

51:                                               ; preds = %35
  %52 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 -1, i32 0, i32 0
  %53 = ptrtoint i32* %52 to i64
  %54 = sub i64 %53, %48
  %55 = and i64 %54, 32
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %68

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 -1
  %59 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 -1
  %60 = bitcast %"class.jxl::Plane"* %58 to i8*
  %61 = bitcast %"class.jxl::Plane"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 24, i1 false) #9
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 -1, i32 0, i32 5
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  %66 = load i64, i64* %65, align 8
  store i8* null, i8** %64, align 8
  %67 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  store i64 %66, i64* %67, align 8
  br label %68

68:                                               ; preds = %57, %51
  %69 = phi %"class.jxl::Plane"* [ undef, %51 ], [ %58, %57 ]
  %70 = phi %"class.jxl::Plane"* [ %38, %51 ], [ %58, %57 ]
  %71 = phi %"class.jxl::Plane"* [ %49, %51 ], [ %59, %57 ]
  %72 = icmp ult i64 %54, 32
  br i1 %72, label %97, label %73

73:                                               ; preds = %68, %73
  %74 = phi %"class.jxl::Plane"* [ %86, %73 ], [ %70, %68 ]
  %75 = phi %"class.jxl::Plane"* [ %87, %73 ], [ %71, %68 ]
  %76 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 -1
  %77 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 -1
  %78 = bitcast %"class.jxl::Plane"* %76 to i8*
  %79 = bitcast %"class.jxl::Plane"* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false) #9
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 -1, i32 0, i32 5
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 -1, i32 0, i32 5
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 0, i32 0, i32 0, i32 0
  %83 = bitcast %"class.std::__1::unique_ptr"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i8* null, i8** %82, align 8
  %85 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 -2
  %87 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 -2
  %88 = bitcast %"class.jxl::Plane"* %86 to i8*
  %89 = bitcast %"class.jxl::Plane"* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 24, i1 false) #9
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 -2, i32 0, i32 5
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 -2, i32 0, i32 5
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %91, i64 0, i32 0, i32 0, i32 0
  %93 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i8* null, i8** %92, align 8
  %95 = bitcast %"class.std::__1::unique_ptr"* %90 to i64*
  store i64 %94, i64* %95, align 8
  %96 = icmp eq %"class.jxl::Plane"* %87, %47
  br i1 %96, label %97, label %73

97:                                               ; preds = %73, %68
  %98 = phi %"class.jxl::Plane"* [ %69, %68 ], [ %86, %73 ]
  %99 = load i64, i64* %7, align 8
  %100 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %4, align 8
  br label %101

101:                                              ; preds = %35, %97
  %102 = phi %"class.jxl::Plane"* [ %100, %97 ], [ %47, %35 ]
  %103 = phi %"class.jxl::Plane"* [ %98, %97 ], [ %38, %35 ]
  %104 = phi i64 [ %99, %97 ], [ %48, %35 ]
  %105 = ptrtoint %"class.jxl::Plane"* %103 to i64
  store i64 %105, i64* %7, align 8
  store i64 %45, i64* %5, align 8
  store i64 %40, i64* %17, align 8
  %106 = inttoptr i64 %104 to %"class.jxl::Plane"*
  %107 = icmp eq %"class.jxl::Plane"* %102, %106
  br i1 %107, label %117, label %108

108:                                              ; preds = %101, %115
  %109 = phi %"class.jxl::Plane"* [ %110, %115 ], [ %102, %101 ]
  %110 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %109, i64 -1
  %111 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %109, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  store i8* null, i8** %111, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %108
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %112) #9
  br label %115

115:                                              ; preds = %114, %108
  %116 = icmp eq %"class.jxl::Plane"* %110, %106
  br i1 %116, label %117, label %108

117:                                              ; preds = %115, %101
  %118 = icmp eq i64 %104, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %117
  %120 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %120) #12
  br label %121

121:                                              ; preds = %117, %119
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1
  tail call void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"* %2, %"struct.jxl::CodecMetadata"* null) #9
  %3 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 3
  %4 = bitcast %"class.jxl::AcStrategyImage"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false) #9
  %5 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4
  tail call void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"* %5)
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 5
  tail call void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesE(%"class.jxl::Quantizer"* %6, %"class.jxl::DequantMatrices"* %5) #9
  %7 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 3
  %9 = bitcast %"class.jxl::Plane.54"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 144, i1 false)
  store i32 84, i32* %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 4
  store float 0x3F88618620000000, float* %10, align 4
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 5
  store float 0.000000e+00, float* %11, align 8
  %12 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 6
  store float 1.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 7
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 8
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1
  %17 = bitcast %"class.std::__1::vector.56"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 76, i1 false) #9
  %18 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13
  %19 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 14
  %20 = bitcast %"class.std::__1::vector.77"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 208, i1 false)
  store %"class.jxl::Image3"* %18, %"class.jxl::Image3"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15
  %22 = bitcast %"struct.jxl::BlockCtxMap"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 96, i1 false) #9
  %23 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 2, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 0
  %25 = tail call i8* @_Znwm(i64 39) #12
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 1
  store i8* %25, i8** %24, align 8
  %27 = getelementptr inbounds i8, i8* %25, i64 39
  store i8* %27, i8** %23, align 8
  %28 = bitcast i8** %26 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %25, i8* align 16 getelementptr inbounds ([39 x i8], [39 x i8]* @_ZN3jxl11BlockCtxMap14kDefaultCtxMapE, i64 0, i64 0), i64 39, i1 false) #9
  %29 = ptrtoint i8* %27 to i64
  store i64 %29, i64* %28, align 8
  %30 = ptrtoint i8* %25 to i64
  br label %31

31:                                               ; preds = %31, %1
  %32 = phi i64 [ 1, %1 ], [ %49, %31 ]
  %33 = phi i64 [ %30, %1 ], [ %48, %31 ]
  %34 = getelementptr inbounds i8, i8* %25, i64 %32
  %35 = ptrtoint i8* %34 to i64
  %36 = inttoptr i64 %33 to i8*
  %37 = load i8, i8* %36, align 1
  %38 = load i8, i8* %34, align 1
  %39 = icmp ult i8 %37, %38
  %40 = select i1 %39, i64 %35, i64 %33
  %41 = add nuw nsw i64 %32, 1
  %42 = getelementptr inbounds i8, i8* %25, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = inttoptr i64 %40 to i8*
  %45 = load i8, i8* %44, align 1
  %46 = load i8, i8* %42, align 1
  %47 = icmp ult i8 %45, %46
  %48 = select i1 %47, i64 %43, i64 %40
  %49 = add nuw nsw i64 %32, 2
  %50 = icmp eq i64 %49, 39
  br i1 %50, label %51, label %31

51:                                               ; preds = %31
  %52 = inttoptr i64 %48 to i8*
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = add nuw nsw i64 %54, 1
  %56 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 3
  store i64 %55, i64* %56, align 8
  %57 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 4
  store i64 1, i64* %57, align 8
  %58 = getelementptr %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0
  %59 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0
  %60 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 1
  %61 = bitcast %"class.jxl::Image3"* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 392, i1 false)
  store i32 1, i32* %60, align 8
  %62 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %62) #9
  %63 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 4, i32 0
  %64 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 8
  %65 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 11
  %66 = bitcast i32* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 14, i1 false) #9
  %67 = bitcast %"class.std::__1::basic_string"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 128, i1 false) #9
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %65) #9
  %68 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 12
  %69 = bitcast %"class.std::__1::vector.169"* %68 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 32, i1 false) #9
  %70 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 1
  store %"class.jxl::ImageBundle"* %59, %"class.jxl::ImageBundle"** %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 2
  store i8 0, i8* %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1
  %73 = getelementptr inbounds %struct.anon.104, %struct.anon.104* %72, i64 0, i32 0
  %74 = bitcast %struct.anon.104* %72 to i64*
  store i64 0, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 1
  store i32 1, i32* %75, align 8
  %76 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %76) #9
  %77 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 4, i32 0
  %78 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 8
  %79 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 11
  %80 = bitcast i32* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %80, i8 0, i64 14, i1 false) #9
  %81 = bitcast %"class.std::__1::basic_string"* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 128, i1 false) #9
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %79) #9
  %82 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 12
  %83 = bitcast %"class.std::__1::vector.169"* %82 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 32, i1 false) #9
  %84 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 1
  store %"class.jxl::ImageBundle"* %73, %"class.jxl::ImageBundle"** %84, align 8
  %85 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 2
  store i8 0, i8* %85, align 8
  %86 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2
  %87 = getelementptr inbounds %struct.anon.104, %struct.anon.104* %86, i64 0, i32 0
  %88 = bitcast %struct.anon.104* %86 to i64*
  store i64 0, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 1
  store i32 1, i32* %89, align 8
  %90 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %90) #9
  %91 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 4, i32 0
  %92 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 8
  %93 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 11
  %94 = bitcast i32* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 14, i1 false) #9
  %95 = bitcast %"class.std::__1::basic_string"* %92 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 128, i1 false) #9
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %93) #9
  %96 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 12
  %97 = bitcast %"class.std::__1::vector.169"* %96 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 32, i1 false) #9
  %98 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 1
  store %"class.jxl::ImageBundle"* %87, %"class.jxl::ImageBundle"** %98, align 8
  %99 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 2
  store i8 0, i8* %99, align 8
  %100 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3
  %101 = getelementptr inbounds %struct.anon.104, %struct.anon.104* %100, i64 0, i32 0
  %102 = bitcast %struct.anon.104* %100 to i64*
  store i64 0, i64* %102, align 8
  %103 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 1
  store i32 1, i32* %103, align 8
  %104 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %104) #9
  %105 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 4, i32 0
  %106 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 8
  %107 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 11
  %108 = bitcast i32* %105 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 14, i1 false) #9
  %109 = bitcast %"class.std::__1::basic_string"* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 128, i1 false) #9
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %107) #9
  %110 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 12
  %111 = bitcast %"class.std::__1::vector.169"* %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 32, i1 false) #9
  %112 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 1
  store %"class.jxl::ImageBundle"* %101, %"class.jxl::ImageBundle"** %112, align 8
  %113 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 2
  store i8 0, i8* %113, align 8
  %114 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 18
  store i64 0, i64* %114, align 8
  ret void
}

declare void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"*, %"struct.jxl::CodecMetadata"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca [216 x i8], align 4
  %3 = alloca [112 x i8], align 4
  %4 = alloca [216 x i8], align 4
  %5 = alloca %"class.jxl::QuantEncoding", align 8
  %6 = alloca [51 x i64], align 16
  %7 = alloca %"class.jxl::QuantEncoding", align 8
  %8 = bitcast %"class.jxl::DequantMatrices"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 0
  %10 = bitcast float* %9 to <4 x float>*
  store <4 x float> <float 0x3F30000000000000, float 0x3F60000000000000, float 3.906250e-03, float 4.096000e+03>, <4 x float>* %10, align 4
  %11 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 1
  store float 5.120000e+02, float* %11, align 4
  %12 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 2
  store float 2.560000e+02, float* %12, align 4
  %13 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %14 = bitcast %"class.std::__1::vector.28"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #9
  %15 = bitcast %"class.jxl::QuantEncoding"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %15) #9
  %16 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  %17 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  %18 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  %19 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !16, !noalias !19
  %20 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !16, !noalias !19
  %21 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !16, !noalias !19
  %22 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 0
  store i32 0, i32* %22, align 8, !alias.scope !19
  %23 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* nonnull align 4 %16, i64 216, i1 false) #9
  %24 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 2, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* nonnull align 4 %17, i64 112, i1 false) #9
  %25 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* nonnull align 4 %18, i64 216, i1 false) #9
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %26, align 8, !alias.scope !19
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.28"* %13, i64 17, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %5) #9
  %27 = load i32, i32* %22, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %45

29:                                               ; preds = %1
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.31* %30 to %"class.std::__1::vector.41"**
  %32 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.41"* %32, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %32, i64 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp eq i32* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = ptrtoint i32* %36 to i64
  %40 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %32, i64 0, i32 0, i32 1
  %41 = bitcast i32** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = bitcast i32* %36 to i8*
  call void @_ZdlPv(i8* %42) #12
  br label %43

43:                                               ; preds = %38, %34
  %44 = bitcast %"class.std::__1::vector.41"* %32 to i8*
  call void @_ZdlPv(i8* %44) #12
  br label %45

45:                                               ; preds = %1, %29, %43
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %15) #9
  %46 = bitcast [51 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 408, i8* nonnull %46) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 408, i1 false)
  %47 = bitcast %"class.jxl::QuantEncoding"* %7 to i8*
  %48 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 2, i32 2, i64 0
  %51 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3, i32 1, i64 0
  %52 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 5, i32 0
  %53 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %13, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3
  %55 = bitcast %union.anon.31* %54 to %"class.std::__1::vector.41"**
  br label %56

56:                                               ; preds = %78, %45
  %57 = phi i64 [ 0, %45 ], [ %93, %78 ]
  %58 = phi i64 [ 0, %45 ], [ %92, %78 ]
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %47) #9
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !22, !noalias !25
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !22, !noalias !25
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !22, !noalias !25
  store i32 0, i32* %48, align 8, !alias.scope !25
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %16, i64 216, i1 false) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* nonnull align 4 %17, i64 112, i1 false) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* nonnull align 4 %18, i64 216, i1 false) #9
  store i8 0, i8* %52, align 8, !alias.scope !25
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  %59 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %53, align 8
  %60 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %59, i64 %57
  %61 = call dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"* %60, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %7)
  %62 = load i32, i32* %48, align 8
  %63 = icmp eq i32 %62, 7
  br i1 %63, label %64, label %78

64:                                               ; preds = %56
  %65 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %55, align 8
  %66 = icmp eq %"class.std::__1::vector.41"* %65, null
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %65, i64 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %65, i64 0, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  call void @_ZdlPv(i8* %75) #12
  br label %76

76:                                               ; preds = %71, %67
  %77 = bitcast %"class.std::__1::vector.41"* %65 to i8*
  call void @_ZdlPv(i8* %77) #12
  br label %78

78:                                               ; preds = %56, %64, %76
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %47) #9
  %79 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices14required_size_E.const, i64 0, i64 %57
  %80 = load i64, i64* %79, align 8
  %81 = shl i64 %80, 6
  %82 = mul nuw nsw i64 %57, 3
  %83 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %82
  store i64 %58, i64* %83, align 8
  %84 = add i64 %81, %58
  %85 = add nuw nsw i64 %82, 1
  %86 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %85
  store i64 %84, i64* %86, align 8
  %87 = shl i64 %80, 7
  %88 = add i64 %87, %58
  %89 = add nuw nsw i64 %82, 2
  %90 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %89
  store i64 %88, i64* %90, align 8
  %91 = mul i64 %80, 192
  %92 = add i64 %91, %58
  %93 = add nuw nsw i64 %57, 1
  %94 = icmp eq i64 %93, 17
  br i1 %94, label %95, label %56

95:                                               ; preds = %78, %114
  %96 = phi i64 [ %123, %114 ], [ 0, %78 ]
  %97 = mul nuw nsw i64 %96, 3
  %98 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %97
  %99 = bitcast i64* %98 to i8*
  %100 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %96
  %101 = load i64, i64* %100, align 16
  %102 = mul i64 %101, 3
  %103 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %102
  %104 = bitcast i64* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %104, i64 24, i1 false)
  %105 = or i64 %96, 1
  %106 = icmp eq i64 %105, 27
  br i1 %106, label %107, label %114

107:                                              ; preds = %95
  %108 = call i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"* %0) #9
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %107
  %111 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.23, i64 0, i64 0), i32 393, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i64 0, i64 0)) #9
  %112 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

113:                                              ; preds = %107
  call void @llvm.lifetime.end.p0i8(i64 408, i8* nonnull %46) #9
  ret void

114:                                              ; preds = %95
  %115 = mul nuw nsw i64 %105, 3
  %116 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %115
  %117 = bitcast i64* %116 to i8*
  %118 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %105
  %119 = load i64, i64* %118, align 8
  %120 = mul i64 %119, 3
  %121 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %120
  %122 = bitcast i64* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %122, i64 24, i1 false)
  %123 = add nuw nsw i64 %96, 2
  br label %95
}

declare void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesE(%"class.jxl::Quantizer"*, %"class.jxl::DequantMatrices"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %8 = bitcast %union.anon.31* %7 to %"class.std::__1::vector.41"**
  %9 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.41"* %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %9, i64 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %9, i64 0, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #12
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.std::__1::vector.41"* %9 to i8*
  tail call void @_ZdlPv(i8* %21) #12
  br label %22

22:                                               ; preds = %6, %20, %2
  %23 = bitcast %"class.jxl::QuantEncoding"* %1 to i8*
  %24 = bitcast %"class.jxl::QuantEncoding"* %0 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %23, i64 553, i1 false)
  %25 = load i32, i32* %3, align 8
  %26 = icmp eq i32 %25, 7
  br i1 %26, label %27, label %75

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %29 = bitcast %union.anon.31* %28 to %"class.std::__1::vector.41"**
  %30 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %29, align 8
  %31 = icmp eq %"class.std::__1::vector.41"* %30, null
  br i1 %31, label %75, label %32

32:                                               ; preds = %27
  %33 = tail call i8* @_Znwm(i64 24) #12
  %34 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1, i64 0, i32 0, i32 3
  %35 = bitcast %union.anon.31* %34 to %"class.std::__1::vector.41"**
  %36 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %35, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #9
  %37 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.41"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %32
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #13
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #12
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %33, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %33 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %33, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #9
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %32, %71
  %74 = bitcast %union.anon.31* %28 to i8**
  store i8* %33, i8** %74, align 8
  br label %75

75:                                               ; preds = %27, %73, %22
  ret %"class.jxl::QuantEncoding"* %0
}

declare i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.28"*, i64, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::QuantEncoding"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::QuantEncoding"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 560
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %80, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.jxl::QuantEncoding"*
  %15 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %78, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %19 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %20 = bitcast %union.anon.31* %19 to %"class.std::__1::vector.41"**
  br label %23

21:                                               ; preds = %75
  %22 = ptrtoint %"class.jxl::QuantEncoding"* %15 to i64
  br label %78

23:                                               ; preds = %75, %17
  %24 = phi %"class.jxl::QuantEncoding"* [ %14, %17 ], [ %76, %75 ]
  %25 = bitcast %"class.jxl::QuantEncoding"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %18, i64 553, i1 false) #9
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %75

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.31* %30 to %"class.std::__1::vector.41"**
  %32 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.41"* %32, null
  br i1 %33, label %75, label %34

34:                                               ; preds = %29
  %35 = tail call i8* @_Znwm(i64 24) #12
  %36 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %20, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #9
  %37 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.41"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #13
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #12
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %35, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %35 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %35, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #9
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %71, %34
  %74 = bitcast %union.anon.31* %30 to i8**
  store i8* %35, i8** %74, align 8
  br label %75

75:                                               ; preds = %73, %29, %23
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 1
  %77 = icmp eq %"class.jxl::QuantEncoding"* %76, %15
  br i1 %77, label %21, label %23

78:                                               ; preds = %13, %21
  %79 = phi i64 [ %22, %21 ], [ %9, %13 ]
  store i64 %79, i64* %8, align 8
  br label %229

80:                                               ; preds = %3
  %81 = bitcast %"class.std::__1::vector.28"* %0 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %9, %82
  %84 = sdiv exact i64 %83, 560
  %85 = add i64 %84, %1
  %86 = icmp ugt i64 %85, 32940614417338485
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector.28"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #13
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %6, %82
  %91 = sdiv exact i64 %90, 560
  %92 = icmp ult i64 %91, 16470307208669242
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = shl nsw i64 %91, 1
  %95 = icmp ult i64 %94, %85
  %96 = select i1 %95, i64 %85, i64 %94
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %103, label %98

98:                                               ; preds = %89, %93
  %99 = phi i64 [ %96, %93 ], [ 32940614417338485, %89 ]
  %100 = mul i64 %99, 560
  %101 = tail call i8* @_Znwm(i64 %100) #12
  %102 = bitcast i8* %101 to %"class.jxl::QuantEncoding"*
  br label %103

103:                                              ; preds = %98, %93
  %104 = phi i64 [ %99, %98 ], [ 0, %93 ]
  %105 = phi %"class.jxl::QuantEncoding"* [ %102, %98 ], [ null, %93 ]
  %106 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %84
  %107 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %104
  %108 = ptrtoint %"class.jxl::QuantEncoding"* %107 to i64
  %109 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %106, i64 %1
  %110 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %111 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %112 = bitcast %union.anon.31* %111 to %"class.std::__1::vector.41"**
  br label %113

113:                                              ; preds = %165, %103
  %114 = phi %"class.jxl::QuantEncoding"* [ %106, %103 ], [ %166, %165 ]
  %115 = bitcast %"class.jxl::QuantEncoding"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %110, i64 553, i1 false) #9
  %116 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 7
  br i1 %118, label %119, label %165

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 3
  %121 = bitcast %union.anon.31* %120 to %"class.std::__1::vector.41"**
  %122 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %121, align 8
  %123 = icmp eq %"class.std::__1::vector.41"* %122, null
  br i1 %123, label %165, label %124

124:                                              ; preds = %119
  %125 = tail call i8* @_Znwm(i64 24) #12
  %126 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %112, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 24, i1 false) #9
  %127 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %126, i64 0, i32 0, i32 1
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.std::__1::vector.41"* %126 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %129, %131
  %133 = ashr exact i64 %132, 2
  %134 = icmp eq i64 %132, 0
  br i1 %134, label %163, label %135

135:                                              ; preds = %124
  %136 = icmp ugt i64 %133, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = bitcast i8* %125 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %138) #13
  unreachable

139:                                              ; preds = %135
  %140 = tail call i8* @_Znwm(i64 %132) #12
  %141 = bitcast i8* %140 to i32*
  %142 = getelementptr inbounds i8, i8* %125, i64 8
  %143 = bitcast i8* %142 to i8**
  store i8* %140, i8** %143, align 8
  %144 = bitcast i8* %125 to i8**
  store i8* %140, i8** %144, align 8
  %145 = getelementptr inbounds i32, i32* %141, i64 %133
  %146 = getelementptr inbounds i8, i8* %125, i64 16
  %147 = bitcast i8* %146 to i32**
  store i32* %145, i32** %147, align 8
  %148 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %126, i64 0, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = load i64, i64* %128, align 8
  %151 = bitcast i8* %142 to i64*
  %152 = ptrtoint i8* %140 to i64
  %153 = ptrtoint i32* %149 to i64
  %154 = sub i64 %150, %153
  %155 = icmp sgt i64 %154, 0
  br i1 %155, label %156, label %161

156:                                              ; preds = %139
  %157 = lshr exact i64 %154, 2
  %158 = bitcast i32* %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %140, i8* align 4 %158, i64 %154, i1 false) #9
  %159 = getelementptr inbounds i32, i32* %141, i64 %157
  %160 = ptrtoint i32* %159 to i64
  br label %161

161:                                              ; preds = %156, %139
  %162 = phi i64 [ %160, %156 ], [ %152, %139 ]
  store i64 %162, i64* %151, align 8
  br label %163

163:                                              ; preds = %161, %124
  %164 = bitcast %union.anon.31* %120 to i8**
  store i8* %125, i8** %164, align 8
  br label %165

165:                                              ; preds = %113, %119, %163
  %166 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 1
  %167 = icmp eq %"class.jxl::QuantEncoding"* %109, %166
  br i1 %167, label %168, label %113

168:                                              ; preds = %165
  %169 = ptrtoint %"class.jxl::QuantEncoding"* %109 to i64
  %170 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %0, i64 0, i32 0, i32 0
  %171 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %170, align 8
  %172 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  %173 = icmp eq %"class.jxl::QuantEncoding"* %172, %171
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = ptrtoint %"class.jxl::QuantEncoding"* %171 to i64
  br label %194

176:                                              ; preds = %168, %189
  %177 = phi %"class.jxl::QuantEncoding"* [ %179, %189 ], [ %106, %168 ]
  %178 = phi %"class.jxl::QuantEncoding"* [ %180, %189 ], [ %172, %168 ]
  %179 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %177, i64 -1
  %180 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1
  %181 = bitcast %"class.jxl::QuantEncoding"* %179 to i8*
  %182 = bitcast %"class.jxl::QuantEncoding"* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 553, i1 false) #9
  %183 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %179, i64 0, i32 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = icmp eq i32 %184, 7
  br i1 %185, label %186, label %189

186:                                              ; preds = %176
  %187 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1, i32 0, i32 3
  %188 = bitcast %union.anon.31* %187 to %"class.std::__1::vector.41"**
  store %"class.std::__1::vector.41"* null, %"class.std::__1::vector.41"** %188, align 8
  br label %189

189:                                              ; preds = %186, %176
  %190 = icmp eq %"class.jxl::QuantEncoding"* %180, %171
  br i1 %190, label %191, label %176

191:                                              ; preds = %189
  %192 = load i64, i64* %81, align 8
  %193 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  br label %194

194:                                              ; preds = %174, %191
  %195 = phi %"class.jxl::QuantEncoding"* [ %171, %174 ], [ %193, %191 ]
  %196 = phi %"class.jxl::QuantEncoding"* [ %106, %174 ], [ %179, %191 ]
  %197 = phi i64 [ %175, %174 ], [ %192, %191 ]
  %198 = ptrtoint %"class.jxl::QuantEncoding"* %196 to i64
  store i64 %198, i64* %81, align 8
  store i64 %169, i64* %8, align 8
  store i64 %108, i64* %5, align 8
  %199 = inttoptr i64 %197 to %"class.jxl::QuantEncoding"*
  %200 = icmp eq %"class.jxl::QuantEncoding"* %195, %199
  br i1 %200, label %225, label %201

201:                                              ; preds = %194, %223
  %202 = phi %"class.jxl::QuantEncoding"* [ %203, %223 ], [ %195, %194 ]
  %203 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1
  %204 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %203, i64 0, i32 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = icmp eq i32 %205, 7
  br i1 %206, label %207, label %223

207:                                              ; preds = %201
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1, i32 0, i32 3
  %209 = bitcast %union.anon.31* %208 to %"class.std::__1::vector.41"**
  %210 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %209, align 8
  %211 = icmp eq %"class.std::__1::vector.41"* %210, null
  br i1 %211, label %223, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %210, i64 0, i32 0, i32 0
  %214 = load i32*, i32** %213, align 8
  %215 = icmp eq i32* %214, null
  br i1 %215, label %221, label %216

216:                                              ; preds = %212
  %217 = ptrtoint i32* %214 to i64
  %218 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %210, i64 0, i32 0, i32 1
  %219 = bitcast i32** %218 to i64*
  store i64 %217, i64* %219, align 8
  %220 = bitcast i32* %214 to i8*
  tail call void @_ZdlPv(i8* %220) #12
  br label %221

221:                                              ; preds = %216, %212
  %222 = bitcast %"class.std::__1::vector.41"* %210 to i8*
  tail call void @_ZdlPv(i8* %222) #12
  br label %223

223:                                              ; preds = %221, %207, %201
  %224 = icmp eq %"class.jxl::QuantEncoding"* %203, %199
  br i1 %224, label %225, label %201

225:                                              ; preds = %223, %194
  %226 = icmp eq i64 %197, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %225
  %228 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %228) #12
  br label %229

229:                                              ; preds = %227, %225, %78
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesEncoderStateD2Ev(%"struct.jxl::PassesEncoderState"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %3 = load %"class.jxl::EncoderHeuristics"*, %"class.jxl::EncoderHeuristics"** %2, align 8
  store %"class.jxl::EncoderHeuristics"* null, %"class.jxl::EncoderHeuristics"** %2, align 8
  %4 = icmp eq %"class.jxl::EncoderHeuristics"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.jxl::EncoderHeuristics"* %3 to void (%"class.jxl::EncoderHeuristics"*)***
  %7 = load void (%"class.jxl::EncoderHeuristics"*)**, void (%"class.jxl::EncoderHeuristics"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.jxl::EncoderHeuristics"*)*, void (%"class.jxl::EncoderHeuristics"*)** %7, i64 1
  %9 = load void (%"class.jxl::EncoderHeuristics"*)*, void (%"class.jxl::EncoderHeuristics"*)** %8, align 8
  tail call void %9(%"class.jxl::EncoderHeuristics"* nonnull %3) #9
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 9, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = icmp eq i32* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i32* %12 to i64
  %16 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 9, i32 0, i32 1
  %17 = bitcast i32** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast i32* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #12
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 8, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %19
  %24 = ptrtoint i8* %21 to i64
  %25 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 8, i32 0, i32 1
  %26 = bitcast i8** %25 to i64*
  store i64 %24, i64* %26, align 8
  tail call void @_ZdlPv(i8* nonnull %21) #12
  br label %27

27:                                               ; preds = %19, %23
  %28 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 7
  %29 = getelementptr inbounds %"class.std::__1::vector.204", %"class.std::__1::vector.204"* %28, i64 0, i32 0, i32 0
  %30 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %29, align 8
  %31 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %30, null
  br i1 %31, label %46, label %32

32:                                               ; preds = %27
  %33 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %30 to i8*
  %34 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 7, i32 0, i32 1
  %35 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %34, align 8
  %36 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %35, %30
  br i1 %36, label %44, label %37

37:                                               ; preds = %32, %37
  %38 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %39, %37 ], [ %35, %32 ]
  %39 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %38, i64 -1
  tail call void @_ZN3jxl18PassesEncoderState8PassDataD2Ev(%"struct.jxl::PassesEncoderState::PassData"* %39) #9
  %40 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %39, %30
  br i1 %40, label %41, label %37

41:                                               ; preds = %37
  %42 = bitcast %"class.std::__1::vector.204"* %28 to i8**
  %43 = load i8*, i8** %42, align 8
  br label %44

44:                                               ; preds = %41, %32
  %45 = phi i8* [ %43, %41 ], [ %33, %32 ]
  store %"struct.jxl::PassesEncoderState::PassData"* %30, %"struct.jxl::PassesEncoderState::PassData"** %34, align 8
  tail call void @_ZdlPv(i8* %45) #12
  br label %46

46:                                               ; preds = %27, %44
  %47 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 6, i32 39, i32 3, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = ptrtoint i32* %48 to i64
  %52 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 6, i32 39, i32 3, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast i32* %48 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %46, %50
  %56 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 4
  %57 = getelementptr inbounds %"class.std::__1::vector.190", %"class.std::__1::vector.190"* %56, i64 0, i32 0, i32 0
  %58 = load %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"** %57, align 8
  %59 = icmp eq %"class.std::__1::unique_ptr.192"* %58, null
  br i1 %59, label %85, label %60

60:                                               ; preds = %55
  %61 = bitcast %"class.std::__1::unique_ptr.192"* %58 to i8*
  %62 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 4, i32 0, i32 1
  %63 = load %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"** %62, align 8
  %64 = icmp eq %"class.std::__1::unique_ptr.192"* %63, %58
  br i1 %64, label %83, label %65

65:                                               ; preds = %60, %78
  %66 = phi %"class.std::__1::unique_ptr.192"* [ %67, %78 ], [ %63, %60 ]
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %66, i64 -1
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %68, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %68, align 8
  %70 = icmp eq %"struct.jxl::BitWriter"* %69, null
  br i1 %70, label %78, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %69, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  store i8* null, i8** %72, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %76, label %75

75:                                               ; preds = %71
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %73) #9
  br label %76

76:                                               ; preds = %75, %71
  %77 = bitcast %"struct.jxl::BitWriter"* %69 to i8*
  tail call void @_ZdlPv(i8* %77) #12
  br label %78

78:                                               ; preds = %76, %65
  %79 = icmp eq %"class.std::__1::unique_ptr.192"* %67, %58
  br i1 %79, label %80, label %65

80:                                               ; preds = %78
  %81 = bitcast %"class.std::__1::vector.190"* %56 to i8**
  %82 = load i8*, i8** %81, align 8
  br label %83

83:                                               ; preds = %80, %60
  %84 = phi i8* [ %82, %80 ], [ %61, %60 ]
  store %"class.std::__1::unique_ptr.192"* %58, %"class.std::__1::unique_ptr.192"** %62, align 8
  tail call void @_ZdlPv(i8* %84) #12
  br label %85

85:                                               ; preds = %55, %83
  %86 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 3
  %87 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %86, i64 0, i32 0, i32 0
  %88 = load %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"** %87, align 8
  %89 = icmp eq %"class.std::__1::unique_ptr.179"* %88, null
  br i1 %89, label %113, label %90

90:                                               ; preds = %85
  %91 = bitcast %"class.std::__1::unique_ptr.179"* %88 to i8*
  %92 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 3, i32 0, i32 1
  %93 = load %"class.std::__1::unique_ptr.179"*, %"class.std::__1::unique_ptr.179"** %92, align 8
  %94 = icmp eq %"class.std::__1::unique_ptr.179"* %93, %88
  br i1 %94, label %111, label %95

95:                                               ; preds = %90, %106
  %96 = phi %"class.std::__1::unique_ptr.179"* [ %97, %106 ], [ %93, %90 ]
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %96, i64 -1
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.179"* %97, i64 0, i32 0, i32 0, i32 0
  %99 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %98, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %98, align 8
  %100 = icmp eq %"class.jxl::ACImage"* %99, null
  br i1 %100, label %106, label %101

101:                                              ; preds = %95
  %102 = bitcast %"class.jxl::ACImage"* %99 to void (%"class.jxl::ACImage"*)***
  %103 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %102, align 8
  %104 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %103, i64 1
  %105 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %104, align 8
  tail call void %105(%"class.jxl::ACImage"* nonnull %99) #9
  br label %106

106:                                              ; preds = %101, %95
  %107 = icmp eq %"class.std::__1::unique_ptr.179"* %97, %88
  br i1 %107, label %108, label %95

108:                                              ; preds = %106
  %109 = bitcast %"class.std::__1::vector.177"* %86 to i8**
  %110 = load i8*, i8** %109, align 8
  br label %111

111:                                              ; preds = %108, %90
  %112 = phi i8* [ %110, %108 ], [ %91, %90 ]
  store %"class.std::__1::unique_ptr.179"* %88, %"class.std::__1::unique_ptr.179"** %92, align 8
  tail call void @_ZdlPv(i8* %112) #12
  br label %113

113:                                              ; preds = %85, %111
  %114 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  store i8* null, i8** %114, align 8
  %116 = icmp eq i8* %115, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %113
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %115) #9
  br label %118

118:                                              ; preds = %113, %117
  %119 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  store i8* null, i8** %119, align 8
  %121 = icmp eq i8* %120, null
  br i1 %121, label %123, label %122

122:                                              ; preds = %118
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %120) #9
  br label %123

123:                                              ; preds = %118, %122
  %124 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0
  tail call void @_ZN3jxl17PassesSharedStateD2Ev(%"struct.jxl::PassesSharedState"* %124) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17PassesSharedStateD2Ev(%"struct.jxl::PassesSharedState"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %2) #9
  %3 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %3) #9
  %4 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %4) #9
  %5 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %5) #9
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  store i8* null, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %7) #9
  br label %10

10:                                               ; preds = %9, %1
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  store i8* null, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %12) #9
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  store i8* null, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %17) #9
  br label %20

20:                                               ; preds = %15, %19
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  store i8* null, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %293, label %292

24:                                               ; preds = %333
  %25 = ptrtoint i8* %335 to i64
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %25, i64* %27, align 8
  tail call void @_ZdlPv(i8* nonnull %335) #12
  br label %28

28:                                               ; preds = %24, %333
  %29 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 1, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = icmp eq i32* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i32* %30 to i64
  %34 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 1, i32 0, i32 1
  %35 = bitcast i32** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = bitcast i32* %30 to i8*
  tail call void @_ZdlPv(i8* %36) #12
  br label %37

37:                                               ; preds = %32, %28
  %38 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 2, i32 0, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = icmp eq i32* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = ptrtoint i32* %39 to i64
  %43 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 2, i32 0, i32 1
  %44 = bitcast i32** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = bitcast i32* %39 to i8*
  tail call void @_ZdlPv(i8* %45) #12
  br label %46

46:                                               ; preds = %41, %37
  %47 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 1, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = ptrtoint i32* %48 to i64
  %52 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 1, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast i32* %48 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %50, %46
  %56 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  %58 = icmp eq i32* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = ptrtoint i32* %57 to i64
  %61 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 0, i32 0, i32 1
  %62 = bitcast i32** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast i32* %57 to i8*
  tail call void @_ZdlPv(i8* %63) #12
  br label %64

64:                                               ; preds = %55, %59
  %65 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #9
  br label %69

69:                                               ; preds = %68, %64
  %70 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  store i8* null, i8** %70, align 8
  %72 = icmp eq i8* %71, null
  br i1 %72, label %74, label %73

73:                                               ; preds = %69
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %71) #9
  br label %74

74:                                               ; preds = %73, %69
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  store i8* null, i8** %75, align 8
  %77 = icmp eq i8* %76, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %76) #9
  br label %79

79:                                               ; preds = %74, %78
  %80 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 12, i32 0, i32 5, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  store i8* null, i8** %80, align 8
  %82 = icmp eq i8* %81, null
  br i1 %82, label %84, label %83

83:                                               ; preds = %79
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %81) #9
  br label %84

84:                                               ; preds = %79, %83
  %85 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 11, i32 0, i32 0
  %86 = load i32*, i32** %85, align 8
  %87 = icmp eq i32* %86, null
  br i1 %87, label %93, label %88

88:                                               ; preds = %84
  %89 = ptrtoint i32* %86 to i64
  %90 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 11, i32 0, i32 1
  %91 = bitcast i32** %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = bitcast i32* %86 to i8*
  tail call void @_ZdlPv(i8* %92) #12
  br label %93

93:                                               ; preds = %84, %88
  %94 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 2, i32 0, i32 0
  %95 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %94, align 8
  %96 = icmp eq %"struct.jxl::Spline::Point"* %95, null
  br i1 %96, label %102, label %97

97:                                               ; preds = %93
  %98 = ptrtoint %"struct.jxl::Spline::Point"* %95 to i64
  %99 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 2, i32 0, i32 1
  %100 = bitcast %"struct.jxl::Spline::Point"** %99 to i64*
  store i64 %98, i64* %100, align 8
  %101 = bitcast %"struct.jxl::Spline::Point"* %95 to i8*
  tail call void @_ZdlPv(i8* %101) #12
  br label %102

102:                                              ; preds = %97, %93
  %103 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1
  %104 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %103, i64 0, i32 0, i32 0
  %105 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %104, align 8
  %106 = icmp eq %"class.jxl::QuantizedSpline"* %105, null
  br i1 %106, label %130, label %107

107:                                              ; preds = %102
  %108 = bitcast %"class.jxl::QuantizedSpline"* %105 to i8*
  %109 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1, i32 0, i32 1
  %110 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %109, align 8
  %111 = icmp eq %"class.jxl::QuantizedSpline"* %110, %105
  br i1 %111, label %128, label %112

112:                                              ; preds = %107, %123
  %113 = phi %"class.jxl::QuantizedSpline"* [ %114, %123 ], [ %110, %107 ]
  %114 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %114, i64 0, i32 0, i32 0, i32 0
  %116 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %115, align 8
  %117 = icmp eq %"struct.std::__1::pair"* %116, null
  br i1 %117, label %123, label %118

118:                                              ; preds = %112
  %119 = ptrtoint %"struct.std::__1::pair"* %116 to i64
  %120 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %113, i64 -1, i32 0, i32 0, i32 1
  %121 = bitcast %"struct.std::__1::pair"** %120 to i64*
  store i64 %119, i64* %121, align 8
  %122 = bitcast %"struct.std::__1::pair"* %116 to i8*
  tail call void @_ZdlPv(i8* %122) #12
  br label %123

123:                                              ; preds = %118, %112
  %124 = icmp eq %"class.jxl::QuantizedSpline"* %114, %105
  br i1 %124, label %125, label %112

125:                                              ; preds = %123
  %126 = bitcast %"class.std::__1::vector.77"* %103 to i8**
  %127 = load i8*, i8** %126, align 8
  br label %128

128:                                              ; preds = %125, %107
  %129 = phi i8* [ %127, %125 ], [ %108, %107 ]
  store %"class.jxl::QuantizedSpline"* %105, %"class.jxl::QuantizedSpline"** %109, align 8
  tail call void @_ZdlPv(i8* %129) #12
  br label %130

130:                                              ; preds = %102, %128
  %131 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 3, i32 0, i32 0
  %132 = load i64*, i64** %131, align 8
  %133 = icmp eq i64* %132, null
  br i1 %133, label %139, label %134

134:                                              ; preds = %130
  %135 = ptrtoint i64* %132 to i64
  %136 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 3, i32 0, i32 1
  %137 = bitcast i64** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = bitcast i64* %132 to i8*
  tail call void @_ZdlPv(i8* %138) #12
  br label %139

139:                                              ; preds = %134, %130
  %140 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 2, i32 0, i32 0
  %141 = load i64*, i64** %140, align 8
  %142 = icmp eq i64* %141, null
  br i1 %142, label %148, label %143

143:                                              ; preds = %139
  %144 = ptrtoint i64* %141 to i64
  %145 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 2, i32 0, i32 1
  %146 = bitcast i64** %145 to i64*
  store i64 %144, i64* %146, align 8
  %147 = bitcast i64* %141 to i8*
  tail call void @_ZdlPv(i8* %147) #12
  br label %148

148:                                              ; preds = %143, %139
  %149 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1
  %150 = getelementptr inbounds %"class.std::__1::vector.56", %"class.std::__1::vector.56"* %149, i64 0, i32 0, i32 0
  %151 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %150, align 8
  %152 = icmp eq %"struct.jxl::PatchPosition"* %151, null
  br i1 %152, label %176, label %153

153:                                              ; preds = %148
  %154 = bitcast %"struct.jxl::PatchPosition"* %151 to i8*
  %155 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1, i32 0, i32 1
  %156 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %155, align 8
  %157 = icmp eq %"struct.jxl::PatchPosition"* %156, %151
  br i1 %157, label %174, label %158

158:                                              ; preds = %153, %169
  %159 = phi %"struct.jxl::PatchPosition"* [ %160, %169 ], [ %156, %153 ]
  %160 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1
  %161 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1, i32 2, i32 0, i32 0
  %162 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %161, align 8
  %163 = icmp eq %"struct.jxl::PatchBlending"* %162, null
  br i1 %163, label %169, label %164

164:                                              ; preds = %158
  %165 = ptrtoint %"struct.jxl::PatchBlending"* %162 to i64
  %166 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1, i32 2, i32 0, i32 1
  %167 = bitcast %"struct.jxl::PatchBlending"** %166 to i64*
  store i64 %165, i64* %167, align 8
  %168 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %162, i64 0, i32 0
  tail call void @_ZdlPv(i8* %168) #12
  br label %169

169:                                              ; preds = %164, %158
  %170 = icmp eq %"struct.jxl::PatchPosition"* %160, %151
  br i1 %170, label %171, label %158

171:                                              ; preds = %169
  %172 = bitcast %"class.std::__1::vector.56"* %149 to i8**
  %173 = load i8*, i8** %172, align 8
  br label %174

174:                                              ; preds = %171, %153
  %175 = phi i8* [ %173, %171 ], [ %154, %153 ]
  store %"struct.jxl::PatchPosition"* %151, %"struct.jxl::PatchPosition"** %155, align 8
  tail call void @_ZdlPv(i8* %175) #12
  br label %176

176:                                              ; preds = %148, %174
  %177 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %178 = load i8*, i8** %177, align 8
  store i8* null, i8** %177, align 8
  %179 = icmp eq i8* %178, null
  br i1 %179, label %181, label %180

180:                                              ; preds = %176
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %178) #9
  br label %181

181:                                              ; preds = %180, %176
  %182 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  store i8* null, i8** %182, align 8
  %184 = icmp eq i8* %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %183) #9
  br label %186

186:                                              ; preds = %181, %185
  %187 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %188 = load i8*, i8** %187, align 8
  store i8* null, i8** %187, align 8
  %189 = icmp eq i8* %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %186
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %188) #9
  br label %191

191:                                              ; preds = %186, %190
  %192 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 6, i32 0, i32 5, i32 0, i32 0, i32 0
  %193 = load i8*, i8** %192, align 8
  store i8* null, i8** %192, align 8
  %194 = icmp eq i8* %193, null
  br i1 %194, label %196, label %195

195:                                              ; preds = %191
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %193) #9
  br label %196

196:                                              ; preds = %191, %195
  %197 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 6
  %198 = getelementptr inbounds %"class.std::__1::vector.28", %"class.std::__1::vector.28"* %197, i64 0, i32 0, i32 0
  %199 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %198, align 8
  %200 = icmp eq %"class.jxl::QuantEncoding"* %199, null
  br i1 %200, label %235, label %201

201:                                              ; preds = %196
  %202 = bitcast %"class.jxl::QuantEncoding"* %199 to i8*
  %203 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 6, i32 0, i32 1
  %204 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %203, align 8
  %205 = icmp eq %"class.jxl::QuantEncoding"* %204, %199
  br i1 %205, label %233, label %206

206:                                              ; preds = %201, %228
  %207 = phi %"class.jxl::QuantEncoding"* [ %208, %228 ], [ %204, %201 ]
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %207, i64 -1
  %209 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %208, i64 0, i32 0, i32 0
  %210 = load i32, i32* %209, align 8
  %211 = icmp eq i32 %210, 7
  br i1 %211, label %212, label %228

212:                                              ; preds = %206
  %213 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %207, i64 -1, i32 0, i32 3
  %214 = bitcast %union.anon.31* %213 to %"class.std::__1::vector.41"**
  %215 = load %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"** %214, align 8
  %216 = icmp eq %"class.std::__1::vector.41"* %215, null
  br i1 %216, label %228, label %217

217:                                              ; preds = %212
  %218 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %215, i64 0, i32 0, i32 0
  %219 = load i32*, i32** %218, align 8
  %220 = icmp eq i32* %219, null
  br i1 %220, label %226, label %221

221:                                              ; preds = %217
  %222 = ptrtoint i32* %219 to i64
  %223 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %215, i64 0, i32 0, i32 1
  %224 = bitcast i32** %223 to i64*
  store i64 %222, i64* %224, align 8
  %225 = bitcast i32* %219 to i8*
  tail call void @_ZdlPv(i8* %225) #12
  br label %226

226:                                              ; preds = %221, %217
  %227 = bitcast %"class.std::__1::vector.41"* %215 to i8*
  tail call void @_ZdlPv(i8* %227) #12
  br label %228

228:                                              ; preds = %226, %212, %206
  %229 = icmp eq %"class.jxl::QuantEncoding"* %208, %199
  br i1 %229, label %230, label %206

230:                                              ; preds = %228
  %231 = bitcast %"class.std::__1::vector.28"* %197 to i8**
  %232 = load i8*, i8** %231, align 8
  br label %233

233:                                              ; preds = %230, %201
  %234 = phi i8* [ %232, %230 ], [ %202, %201 ]
  store %"class.jxl::QuantEncoding"* %199, %"class.jxl::QuantEncoding"** %203, align 8
  tail call void @_ZdlPv(i8* %234) #12
  br label %235

235:                                              ; preds = %233, %196
  %236 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %237 = load float*, float** %236, align 8
  store float* null, float** %236, align 8
  %238 = icmp eq float* %237, null
  br i1 %238, label %245, label %239

239:                                              ; preds = %235
  %240 = bitcast float* %237 to i8*
  %241 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 0
  %242 = load void (i8*, i8*)*, void (i8*, i8*)** %241, align 8
  %243 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 1
  %244 = load i8*, i8** %243, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %240, void (i8*, i8*)* %242, i8* %244) #9
  br label %245

245:                                              ; preds = %235, %239
  %246 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  store i8* null, i8** %246, align 8
  %248 = icmp eq i8* %247, null
  br i1 %248, label %250, label %249

249:                                              ; preds = %245
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %247) #9
  br label %250

250:                                              ; preds = %245, %249
  %251 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11FrameHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %251, align 8
  %252 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 19
  %253 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %252, i64 0, i32 0, i32 0
  %254 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %253, align 8
  %255 = icmp eq %"struct.jxl::BlendingInfo"* %254, null
  br i1 %255, label %273, label %256

256:                                              ; preds = %250
  %257 = bitcast %"struct.jxl::BlendingInfo"* %254 to i8*
  %258 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 19, i32 0, i32 1
  %259 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %258, align 8
  %260 = icmp eq %"struct.jxl::BlendingInfo"* %259, %254
  br i1 %260, label %271, label %261

261:                                              ; preds = %256, %261
  %262 = phi %"struct.jxl::BlendingInfo"* [ %263, %261 ], [ %259, %256 ]
  %263 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %262, i64 -1
  %264 = bitcast %"struct.jxl::BlendingInfo"* %263 to void (%"struct.jxl::BlendingInfo"*)***
  %265 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %264, align 8
  %266 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %265, align 8
  tail call void %266(%"struct.jxl::BlendingInfo"* %263) #9
  %267 = icmp eq %"struct.jxl::BlendingInfo"* %263, %254
  br i1 %267, label %268, label %261

268:                                              ; preds = %261
  %269 = bitcast %"class.std::__1::vector.16"* %252 to i8**
  %270 = load i8*, i8** %269, align 8
  br label %271

271:                                              ; preds = %268, %256
  %272 = phi i8* [ %270, %268 ], [ %257, %256 ]
  store %"struct.jxl::BlendingInfo"* %254, %"struct.jxl::BlendingInfo"** %258, align 8
  tail call void @_ZdlPv(i8* %272) #12
  br label %273

273:                                              ; preds = %271, %250
  %274 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 16, i32 0, i32 0
  %275 = load i32*, i32** %274, align 8
  %276 = icmp eq i32* %275, null
  br i1 %276, label %282, label %277

277:                                              ; preds = %273
  %278 = ptrtoint i32* %275 to i64
  %279 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 16, i32 0, i32 1
  %280 = bitcast i32** %279 to i64*
  store i64 %278, i64* %280, align 8
  %281 = bitcast i32* %275 to i8*
  tail call void @_ZdlPv(i8* %281) #12
  br label %282

282:                                              ; preds = %277, %273
  %283 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 11
  %284 = bitcast %"class.std::__1::basic_string"* %283 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %285 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %284, i64 0, i32 1, i32 0
  %286 = load i8, i8* %285, align 1
  %287 = icmp slt i8 %286, 0
  br i1 %287, label %288, label %291

288:                                              ; preds = %282
  %289 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %283, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %290 = load i8*, i8** %289, align 8
  tail call void @_ZdlPv(i8* %290) #12
  br label %291

291:                                              ; preds = %282, %288
  ret void

292:                                              ; preds = %20
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %22) #9
  br label %293

293:                                              ; preds = %292, %20
  %294 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %295 = load i8*, i8** %294, align 8
  store i8* null, i8** %294, align 8
  %296 = icmp eq i8* %295, null
  br i1 %296, label %298, label %297

297:                                              ; preds = %293
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %295) #9
  br label %298

298:                                              ; preds = %297, %293
  %299 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  store i8* null, i8** %299, align 8
  %301 = icmp eq i8* %300, null
  br i1 %301, label %303, label %302

302:                                              ; preds = %298
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %300) #9
  br label %303

303:                                              ; preds = %302, %298
  %304 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %305 = load i8*, i8** %304, align 8
  store i8* null, i8** %304, align 8
  %306 = icmp eq i8* %305, null
  br i1 %306, label %308, label %307

307:                                              ; preds = %303
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %305) #9
  br label %308

308:                                              ; preds = %307, %303
  %309 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %310 = load i8*, i8** %309, align 8
  store i8* null, i8** %309, align 8
  %311 = icmp eq i8* %310, null
  br i1 %311, label %313, label %312

312:                                              ; preds = %308
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %310) #9
  br label %313

313:                                              ; preds = %312, %308
  %314 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %315 = load i8*, i8** %314, align 8
  store i8* null, i8** %314, align 8
  %316 = icmp eq i8* %315, null
  br i1 %316, label %318, label %317

317:                                              ; preds = %313
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %315) #9
  br label %318

318:                                              ; preds = %317, %313
  %319 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %320 = load i8*, i8** %319, align 8
  store i8* null, i8** %319, align 8
  %321 = icmp eq i8* %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %320) #9
  br label %323

323:                                              ; preds = %322, %318
  %324 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %325 = load i8*, i8** %324, align 8
  store i8* null, i8** %324, align 8
  %326 = icmp eq i8* %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %325) #9
  br label %328

328:                                              ; preds = %327, %323
  %329 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %330 = load i8*, i8** %329, align 8
  store i8* null, i8** %329, align 8
  %331 = icmp eq i8* %330, null
  br i1 %331, label %333, label %332

332:                                              ; preds = %328
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %330) #9
  br label %333

333:                                              ; preds = %332, %328
  %334 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 0
  %335 = load i8*, i8** %334, align 8
  %336 = icmp eq i8* %335, null
  br i1 %336, label %28, label %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesEncoderState8PassDataD2Ev(%"struct.jxl::PassesEncoderState::PassData"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2, i32 2, i32 0, i32 0
  %4 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %3, align 8
  %5 = icmp eq %"struct.jxl::HybridUintConfig"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.jxl::HybridUintConfig"* %4 to i64
  %8 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2, i32 2, i32 0, i32 1
  %9 = bitcast %"struct.jxl::HybridUintConfig"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.jxl::HybridUintConfig"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %2, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.std::__1::vector.216"*, %"class.std::__1::vector.216"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.216"* %13, null
  br i1 %14, label %56, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.std::__1::vector.216"* %13 to i8*
  %17 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %18 = load %"class.std::__1::vector.216"*, %"class.std::__1::vector.216"** %17, align 8
  %19 = icmp eq %"class.std::__1::vector.216"* %18, %13
  br i1 %19, label %54, label %20

20:                                               ; preds = %15, %49
  %21 = phi %"class.std::__1::vector.216"* [ %22, %49 ], [ %18, %15 ]
  %22 = getelementptr inbounds %"class.std::__1::vector.216", %"class.std::__1::vector.216"* %21, i64 -1
  %23 = getelementptr inbounds %"class.std::__1::vector.216", %"class.std::__1::vector.216"* %22, i64 0, i32 0, i32 0
  %24 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %23, align 8
  %25 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %24, null
  br i1 %25, label %49, label %26

26:                                               ; preds = %20
  %27 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %24 to i8*
  %28 = getelementptr inbounds %"class.std::__1::vector.216", %"class.std::__1::vector.216"* %21, i64 -1, i32 0, i32 1
  %29 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %28, align 8
  %30 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %29, %24
  br i1 %30, label %47, label %31

31:                                               ; preds = %26, %42
  %32 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %33, %42 ], [ %29, %26 ]
  %33 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %32, i64 -1
  %34 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %32, i64 -1, i32 2, i32 0, i32 0
  %35 = load i16*, i16** %34, align 8
  %36 = icmp eq i16* %35, null
  br i1 %36, label %42, label %37

37:                                               ; preds = %31
  %38 = ptrtoint i16* %35 to i64
  %39 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %32, i64 -1, i32 2, i32 0, i32 1
  %40 = bitcast i16** %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = bitcast i16* %35 to i8*
  tail call void @_ZdlPv(i8* %41) #12
  br label %42

42:                                               ; preds = %37, %31
  %43 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %33, %24
  br i1 %43, label %44, label %31

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::vector.216"* %22 to i8**
  %46 = load i8*, i8** %45, align 8
  br label %47

47:                                               ; preds = %44, %26
  %48 = phi i8* [ %46, %44 ], [ %27, %26 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %24, %"struct.jxl::ANSEncSymbolInfo"** %28, align 8
  tail call void @_ZdlPv(i8* %48) #12
  br label %49

49:                                               ; preds = %47, %20
  %50 = icmp eq %"class.std::__1::vector.216"* %22, %13
  br i1 %50, label %51, label %20

51:                                               ; preds = %49
  %52 = bitcast %"struct.jxl::EntropyEncodingData"* %2 to i8**
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %51, %15
  %55 = phi i8* [ %53, %51 ], [ %16, %15 ]
  store %"class.std::__1::vector.216"* %13, %"class.std::__1::vector.216"** %17, align 8
  tail call void @_ZdlPv(i8* %55) #12
  br label %56

56:                                               ; preds = %11, %54
  %57 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 1, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %64, label %60

60:                                               ; preds = %56
  %61 = ptrtoint i8* %58 to i64
  %62 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 1, i32 0, i32 1
  %63 = bitcast i8** %62 to i64*
  store i64 %61, i64* %63, align 8
  tail call void @_ZdlPv(i8* nonnull %58) #12
  br label %64

64:                                               ; preds = %56, %60
  %65 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.std::__1::vector.208"*, %"class.std::__1::vector.208"** %65, align 8
  %67 = icmp eq %"class.std::__1::vector.208"* %66, null
  br i1 %67, label %91, label %68

68:                                               ; preds = %64
  %69 = bitcast %"class.std::__1::vector.208"* %66 to i8*
  %70 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 0, i32 0, i32 1
  %71 = load %"class.std::__1::vector.208"*, %"class.std::__1::vector.208"** %70, align 8
  %72 = icmp eq %"class.std::__1::vector.208"* %71, %66
  br i1 %72, label %89, label %73

73:                                               ; preds = %68, %84
  %74 = phi %"class.std::__1::vector.208"* [ %75, %84 ], [ %71, %68 ]
  %75 = getelementptr inbounds %"class.std::__1::vector.208", %"class.std::__1::vector.208"* %74, i64 -1
  %76 = getelementptr inbounds %"class.std::__1::vector.208", %"class.std::__1::vector.208"* %75, i64 0, i32 0, i32 0
  %77 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %76, align 8
  %78 = icmp eq %"struct.jxl::Token"* %77, null
  br i1 %78, label %84, label %79

79:                                               ; preds = %73
  %80 = ptrtoint %"struct.jxl::Token"* %77 to i64
  %81 = getelementptr inbounds %"class.std::__1::vector.208", %"class.std::__1::vector.208"* %74, i64 -1, i32 0, i32 1
  %82 = bitcast %"struct.jxl::Token"** %81 to i64*
  store i64 %80, i64* %82, align 8
  %83 = bitcast %"struct.jxl::Token"* %77 to i8*
  tail call void @_ZdlPv(i8* %83) #12
  br label %84

84:                                               ; preds = %79, %73
  %85 = icmp eq %"class.std::__1::vector.208"* %75, %66
  br i1 %85, label %86, label %73

86:                                               ; preds = %84
  %87 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %86, %68
  %90 = phi i8* [ %88, %86 ], [ %69, %68 ]
  store %"class.std::__1::vector.208"* %66, %"class.std::__1::vector.208"** %70, align 8
  tail call void @_ZdlPv(i8* %90) #12
  br label %91

91:                                               ; preds = %64, %89
  ret void
}

declare void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl9BitWriterENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.190"*, %"class.std::__1::unique_ptr.192"* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.190", %"class.std::__1::vector.190"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.192"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.190"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.190"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.190", %"class.std::__1::vector.190"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.192"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #12
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.192"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.192"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.192"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.192"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.192"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.192"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.190", %"class.std::__1::vector.190"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.192"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.192"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"struct.jxl::BitWriter"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.192"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.192"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.192"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.192"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !28

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.192"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.192"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.192"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.192"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.192"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.192"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.192"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.192"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.192"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.192"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.192"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.192"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.192"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.192"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.192"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.192"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.192"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.192"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.192"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.192"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.192"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.192"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.192"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.192"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.192"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.192"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.192"*
  %138 = icmp eq %"class.std::__1::unique_ptr.192"* %133, %137
  br i1 %138, label %154, label %139

139:                                              ; preds = %132, %152
  %140 = phi %"class.std::__1::unique_ptr.192"* [ %141, %152 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %142, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %142, align 8
  %144 = icmp eq %"struct.jxl::BitWriter"* %143, null
  br i1 %144, label %152, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %143, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %148 = icmp eq i8* %147, null
  br i1 %148, label %150, label %149

149:                                              ; preds = %145
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %147) #9
  br label %150

150:                                              ; preds = %149, %145
  %151 = bitcast %"struct.jxl::BitWriter"* %143 to i8*
  tail call void @_ZdlPv(i8* %151) #12
  br label %152

152:                                              ; preds = %150, %139
  %153 = icmp eq %"class.std::__1::unique_ptr.192"* %141, %137
  br i1 %153, label %154, label %139

154:                                              ; preds = %152, %132
  %155 = icmp eq i64 %135, 0
  br i1 %155, label %158, label %156

156:                                              ; preds = %154
  %157 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %157) #12
  br label %158

158:                                              ; preds = %154, %156
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #10 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm(%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #14
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__125__throw_bad_function_callEv() local_unnamed_addr #11 comdat {
  tail call void @abort() #13
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderStateD2Ev(%"struct.jxl::PassesDecoderState"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 33, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 33, i32 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #9
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32
  %9 = getelementptr inbounds %"class.std::__1::vector.397", %"class.std::__1::vector.397"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %11 = icmp eq %"class.jxl::Image3"* %10, null
  br i1 %11, label %41, label %12

12:                                               ; preds = %7
  %13 = bitcast %"class.jxl::Image3"* %10 to i8*
  %14 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32, i32 0, i32 1
  %15 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %14, align 8
  %16 = icmp eq %"class.jxl::Image3"* %15, %10
  br i1 %16, label %39, label %17

17:                                               ; preds = %12, %34
  %18 = phi %"class.jxl::Image3"* [ %19, %34 ], [ %15, %12 ]
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  store i8* null, i8** %20, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %17
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %21) #9
  br label %24

24:                                               ; preds = %23, %17
  %25 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  store i8* null, i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %26) #9
  br label %29

29:                                               ; preds = %28, %24
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  store i8* null, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %31) #9
  br label %34

34:                                               ; preds = %33, %29
  %35 = icmp eq %"class.jxl::Image3"* %19, %10
  br i1 %35, label %36, label %17

36:                                               ; preds = %34
  %37 = bitcast %"class.std::__1::vector.397"* %8 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %12
  %40 = phi i8* [ %38, %36 ], [ %13, %12 ]
  store %"class.jxl::Image3"* %10, %"class.jxl::Image3"** %14, align 8
  tail call void @_ZdlPv(i8* %40) #12
  br label %41

41:                                               ; preds = %7, %39
  %42 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31
  %43 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %42, i64 0, i32 0, i32 0
  %44 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %43, align 8
  %45 = icmp eq %"class.jxl::Plane"* %44, null
  br i1 %45, label %65, label %46

46:                                               ; preds = %41
  %47 = bitcast %"class.jxl::Plane"* %44 to i8*
  %48 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31, i32 0, i32 1
  %49 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %48, align 8
  %50 = icmp eq %"class.jxl::Plane"* %49, %44
  br i1 %50, label %63, label %51

51:                                               ; preds = %46, %58
  %52 = phi %"class.jxl::Plane"* [ %53, %58 ], [ %49, %46 ]
  %53 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %52, i64 -1
  %54 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %52, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  store i8* null, i8** %54, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %51
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #9
  br label %58

58:                                               ; preds = %57, %51
  %59 = icmp eq %"class.jxl::Plane"* %53, %44
  br i1 %59, label %60, label %51

60:                                               ; preds = %58
  %61 = bitcast %"class.std::__1::vector.169"* %42 to i8**
  %62 = load i8*, i8** %61, align 8
  br label %63

63:                                               ; preds = %60, %46
  %64 = phi i8* [ %62, %60 ], [ %47, %46 ]
  store %"class.jxl::Plane"* %44, %"class.jxl::Plane"** %48, align 8
  tail call void @_ZdlPv(i8* %64) #12
  br label %65

65:                                               ; preds = %41, %63
  %66 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 3
  %67 = getelementptr inbounds %"class.std::__1::vector.397", %"class.std::__1::vector.397"* %66, i64 0, i32 0, i32 0
  %68 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %67, align 8
  %69 = icmp eq %"class.jxl::Image3"* %68, null
  br i1 %69, label %99, label %70

70:                                               ; preds = %65
  %71 = bitcast %"class.jxl::Image3"* %68 to i8*
  %72 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 3, i32 0, i32 1
  %73 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %72, align 8
  %74 = icmp eq %"class.jxl::Image3"* %73, %68
  br i1 %74, label %97, label %75

75:                                               ; preds = %70, %92
  %76 = phi %"class.jxl::Image3"* [ %77, %92 ], [ %73, %70 ]
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  store i8* null, i8** %78, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %75
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %79) #9
  br label %82

82:                                               ; preds = %81, %75
  %83 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  store i8* null, i8** %83, align 8
  %85 = icmp eq i8* %84, null
  br i1 %85, label %87, label %86

86:                                               ; preds = %82
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %84) #9
  br label %87

87:                                               ; preds = %86, %82
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  store i8* null, i8** %88, align 8
  %90 = icmp eq i8* %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %89) #9
  br label %92

92:                                               ; preds = %91, %87
  %93 = icmp eq %"class.jxl::Image3"* %77, %68
  br i1 %93, label %94, label %75

94:                                               ; preds = %92
  %95 = bitcast %"class.std::__1::vector.397"* %66 to i8**
  %96 = load i8*, i8** %95, align 8
  br label %97

97:                                               ; preds = %94, %70
  %98 = phi i8* [ %96, %94 ], [ %71, %70 ]
  store %"class.jxl::Image3"* %68, %"class.jxl::Image3"** %72, align 8
  tail call void @_ZdlPv(i8* %98) #12
  br label %99

99:                                               ; preds = %65, %97
  %100 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 2
  %101 = getelementptr inbounds %"class.std::__1::vector.397", %"class.std::__1::vector.397"* %100, i64 0, i32 0, i32 0
  %102 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %101, align 8
  %103 = icmp eq %"class.jxl::Image3"* %102, null
  br i1 %103, label %504, label %475

104:                                              ; preds = %572
  %105 = bitcast %"class.jxl::Image3"* %575 to i8*
  %106 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29, i32 0, i32 1
  %107 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %106, align 8
  %108 = icmp eq %"class.jxl::Image3"* %107, %575
  br i1 %108, label %131, label %109

109:                                              ; preds = %104, %126
  %110 = phi %"class.jxl::Image3"* [ %111, %126 ], [ %107, %104 ]
  %111 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  store i8* null, i8** %112, align 8
  %114 = icmp eq i8* %113, null
  br i1 %114, label %116, label %115

115:                                              ; preds = %109
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %113) #9
  br label %116

116:                                              ; preds = %115, %109
  %117 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  store i8* null, i8** %117, align 8
  %119 = icmp eq i8* %118, null
  br i1 %119, label %121, label %120

120:                                              ; preds = %116
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %118) #9
  br label %121

121:                                              ; preds = %120, %116
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  store i8* null, i8** %122, align 8
  %124 = icmp eq i8* %123, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %121
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %123) #9
  br label %126

126:                                              ; preds = %125, %121
  %127 = icmp eq %"class.jxl::Image3"* %111, %575
  br i1 %127, label %128, label %109

128:                                              ; preds = %126
  %129 = bitcast %"class.std::__1::vector.397"* %573 to i8**
  %130 = load i8*, i8** %129, align 8
  br label %131

131:                                              ; preds = %128, %104
  %132 = phi i8* [ %130, %128 ], [ %105, %104 ]
  store %"class.jxl::Image3"* %575, %"class.jxl::Image3"** %106, align 8
  tail call void @_ZdlPv(i8* %132) #12
  br label %133

133:                                              ; preds = %572, %131
  %134 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28
  %135 = getelementptr inbounds %"class.std::__1::vector.397", %"class.std::__1::vector.397"* %134, i64 0, i32 0, i32 0
  %136 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %135, align 8
  %137 = icmp eq %"class.jxl::Image3"* %136, null
  br i1 %137, label %167, label %138

138:                                              ; preds = %133
  %139 = bitcast %"class.jxl::Image3"* %136 to i8*
  %140 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28, i32 0, i32 1
  %141 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %140, align 8
  %142 = icmp eq %"class.jxl::Image3"* %141, %136
  br i1 %142, label %165, label %143

143:                                              ; preds = %138, %160
  %144 = phi %"class.jxl::Image3"* [ %145, %160 ], [ %141, %138 ]
  %145 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1
  %146 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %148 = icmp eq i8* %147, null
  br i1 %148, label %150, label %149

149:                                              ; preds = %143
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %147) #9
  br label %150

150:                                              ; preds = %149, %143
  %151 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  store i8* null, i8** %151, align 8
  %153 = icmp eq i8* %152, null
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %152) #9
  br label %155

155:                                              ; preds = %154, %150
  %156 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %157 = load i8*, i8** %156, align 8
  store i8* null, i8** %156, align 8
  %158 = icmp eq i8* %157, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %155
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %157) #9
  br label %160

160:                                              ; preds = %159, %155
  %161 = icmp eq %"class.jxl::Image3"* %145, %136
  br i1 %161, label %162, label %143

162:                                              ; preds = %160
  %163 = bitcast %"class.std::__1::vector.397"* %134 to i8**
  %164 = load i8*, i8** %163, align 8
  br label %165

165:                                              ; preds = %162, %138
  %166 = phi i8* [ %164, %162 ], [ %139, %138 ]
  store %"class.jxl::Image3"* %136, %"class.jxl::Image3"** %140, align 8
  tail call void @_ZdlPv(i8* %166) #12
  br label %167

167:                                              ; preds = %133, %165
  %168 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27
  %169 = getelementptr inbounds %"class.std::__1::vector.397", %"class.std::__1::vector.397"* %168, i64 0, i32 0, i32 0
  %170 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %169, align 8
  %171 = icmp eq %"class.jxl::Image3"* %170, null
  br i1 %171, label %201, label %172

172:                                              ; preds = %167
  %173 = bitcast %"class.jxl::Image3"* %170 to i8*
  %174 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27, i32 0, i32 1
  %175 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %174, align 8
  %176 = icmp eq %"class.jxl::Image3"* %175, %170
  br i1 %176, label %199, label %177

177:                                              ; preds = %172, %194
  %178 = phi %"class.jxl::Image3"* [ %179, %194 ], [ %175, %172 ]
  %179 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1
  %180 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  store i8* null, i8** %180, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %184, label %183

183:                                              ; preds = %177
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %181) #9
  br label %184

184:                                              ; preds = %183, %177
  %185 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %186 = load i8*, i8** %185, align 8
  store i8* null, i8** %185, align 8
  %187 = icmp eq i8* %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %184
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %186) #9
  br label %189

189:                                              ; preds = %188, %184
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %191 = load i8*, i8** %190, align 8
  store i8* null, i8** %190, align 8
  %192 = icmp eq i8* %191, null
  br i1 %192, label %194, label %193

193:                                              ; preds = %189
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %191) #9
  br label %194

194:                                              ; preds = %193, %189
  %195 = icmp eq %"class.jxl::Image3"* %179, %170
  br i1 %195, label %196, label %177

196:                                              ; preds = %194
  %197 = bitcast %"class.std::__1::vector.397"* %168 to i8**
  %198 = load i8*, i8** %197, align 8
  br label %199

199:                                              ; preds = %196, %172
  %200 = phi i8* [ %198, %196 ], [ %173, %172 ]
  store %"class.jxl::Image3"* %170, %"class.jxl::Image3"** %174, align 8
  tail call void @_ZdlPv(i8* %200) #12
  br label %201

201:                                              ; preds = %167, %199
  %202 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 26, i32 1, i32 0, i32 0, i32 0
  %203 = load %"struct.std::__1::atomic.393"*, %"struct.std::__1::atomic.393"** %202, align 8
  store %"struct.std::__1::atomic.393"* null, %"struct.std::__1::atomic.393"** %202, align 8
  %204 = icmp eq %"struct.std::__1::atomic.393"* %203, null
  br i1 %204, label %207, label %205

205:                                              ; preds = %201
  %206 = getelementptr inbounds %"struct.std::__1::atomic.393", %"struct.std::__1::atomic.393"* %203, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdaPv(i8* %206) #12
  br label %207

207:                                              ; preds = %201, %205
  %208 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 25, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %209 = load i8*, i8** %208, align 8
  store i8* null, i8** %208, align 8
  %210 = icmp eq i8* %209, null
  br i1 %210, label %212, label %211

211:                                              ; preds = %207
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %209) #9
  br label %212

212:                                              ; preds = %207, %211
  %213 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24
  %214 = getelementptr inbounds %"class.std::__1::vector.383", %"class.std::__1::vector.383"* %213, i64 0, i32 0, i32 0
  %215 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %214, align 8
  %216 = icmp eq %"class.jxl::FilterPipeline"* %215, null
  br i1 %216, label %246, label %217

217:                                              ; preds = %212
  %218 = bitcast %"class.jxl::FilterPipeline"* %215 to i8*
  %219 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 1
  %220 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %219, align 8
  %221 = icmp eq %"class.jxl::FilterPipeline"* %220, %215
  br i1 %221, label %244, label %222

222:                                              ; preds = %217, %239
  %223 = phi %"class.jxl::FilterPipeline"* [ %224, %239 ], [ %220, %217 ]
  %224 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1
  %225 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %226 = load i8*, i8** %225, align 8
  store i8* null, i8** %225, align 8
  %227 = icmp eq i8* %226, null
  br i1 %227, label %229, label %228

228:                                              ; preds = %222
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %226) #9
  br label %229

229:                                              ; preds = %228, %222
  %230 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %231 = load i8*, i8** %230, align 8
  store i8* null, i8** %230, align 8
  %232 = icmp eq i8* %231, null
  br i1 %232, label %234, label %233

233:                                              ; preds = %229
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %231) #9
  br label %234

234:                                              ; preds = %233, %229
  %235 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %236 = load i8*, i8** %235, align 8
  store i8* null, i8** %235, align 8
  %237 = icmp eq i8* %236, null
  br i1 %237, label %239, label %238

238:                                              ; preds = %234
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %236) #9
  br label %239

239:                                              ; preds = %238, %234
  %240 = icmp eq %"class.jxl::FilterPipeline"* %224, %215
  br i1 %240, label %241, label %222

241:                                              ; preds = %239
  %242 = bitcast %"class.std::__1::vector.383"* %213 to i8**
  %243 = load i8*, i8** %242, align 8
  br label %244

244:                                              ; preds = %241, %217
  %245 = phi i8* [ %243, %241 ], [ %218, %217 ]
  store %"class.jxl::FilterPipeline"* %215, %"class.jxl::FilterPipeline"** %219, align 8
  tail call void @_ZdlPv(i8* %245) #12
  br label %246

246:                                              ; preds = %212, %244
  %247 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 23, i32 0, i32 0, i32 0
  %248 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %247, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %247, align 8
  %249 = icmp eq %"class.jxl::ACImage"* %248, null
  br i1 %249, label %255, label %250

250:                                              ; preds = %246
  %251 = bitcast %"class.jxl::ACImage"* %248 to void (%"class.jxl::ACImage"*)***
  %252 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %251, align 8
  %253 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %252, i64 1
  %254 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %253, align 8
  tail call void %254(%"class.jxl::ACImage"* nonnull %248) #9
  br label %255

255:                                              ; preds = %246, %250
  %256 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20
  %257 = getelementptr inbounds %"class.std::__1::vector.375", %"class.std::__1::vector.375"* %256, i64 0, i32 0, i32 0
  %258 = load %"class.std::__1::vector.369"*, %"class.std::__1::vector.369"** %257, align 8
  %259 = icmp eq %"class.std::__1::vector.369"* %258, null
  br i1 %259, label %283, label %260

260:                                              ; preds = %255
  %261 = bitcast %"class.std::__1::vector.369"* %258 to i8*
  %262 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20, i32 0, i32 1
  %263 = load %"class.std::__1::vector.369"*, %"class.std::__1::vector.369"** %262, align 8
  %264 = icmp eq %"class.std::__1::vector.369"* %263, %258
  br i1 %264, label %281, label %265

265:                                              ; preds = %260, %276
  %266 = phi %"class.std::__1::vector.369"* [ %267, %276 ], [ %263, %260 ]
  %267 = getelementptr inbounds %"class.std::__1::vector.369", %"class.std::__1::vector.369"* %266, i64 -1
  %268 = getelementptr inbounds %"class.std::__1::vector.369", %"class.std::__1::vector.369"* %267, i64 0, i32 0, i32 0
  %269 = load float*, float** %268, align 8
  %270 = icmp eq float* %269, null
  br i1 %270, label %276, label %271

271:                                              ; preds = %265
  %272 = ptrtoint float* %269 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.369", %"class.std::__1::vector.369"* %266, i64 -1, i32 0, i32 1
  %274 = bitcast float** %273 to i64*
  store i64 %272, i64* %274, align 8
  %275 = bitcast float* %269 to i8*
  tail call void @_ZdlPv(i8* %275) #12
  br label %276

276:                                              ; preds = %271, %265
  %277 = icmp eq %"class.std::__1::vector.369"* %267, %258
  br i1 %277, label %278, label %265

278:                                              ; preds = %276
  %279 = bitcast %"class.std::__1::vector.375"* %256 to i8**
  %280 = load i8*, i8** %279, align 8
  br label %281

281:                                              ; preds = %278, %260
  %282 = phi i8* [ %280, %278 ], [ %261, %260 ]
  store %"class.std::__1::vector.369"* %258, %"class.std::__1::vector.369"** %262, align 8
  tail call void @_ZdlPv(i8* %282) #12
  br label %283

283:                                              ; preds = %255, %281
  %284 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19, i32 0, i32 0
  %285 = load float*, float** %284, align 8
  %286 = icmp eq float* %285, null
  br i1 %286, label %292, label %287

287:                                              ; preds = %283
  %288 = ptrtoint float* %285 to i64
  %289 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19, i32 0, i32 1
  %290 = bitcast float** %289 to i64*
  store i64 %288, i64* %290, align 8
  %291 = bitcast float* %285 to i8*
  tail call void @_ZdlPv(i8* %291) #12
  br label %292

292:                                              ; preds = %283, %287
  %293 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %294 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %293, align 8
  %295 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %294, i64 0, i32 1
  %296 = load void (i8*)*, void (i8*)** %295, align 8
  %297 = icmp eq void (i8*)* %296, null
  br i1 %297, label %301, label %298

298:                                              ; preds = %292
  %299 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  tail call void %296(i8* %300) #9
  br label %301

301:                                              ; preds = %292, %298
  %302 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %303 = load i8*, i8** %302, align 8
  store i8* null, i8** %302, align 8
  %304 = icmp eq i8* %303, null
  br i1 %304, label %306, label %305

305:                                              ; preds = %301
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %303) #9
  br label %306

306:                                              ; preds = %305, %301
  %307 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %308 = load i8*, i8** %307, align 8
  store i8* null, i8** %307, align 8
  %309 = icmp eq i8* %308, null
  br i1 %309, label %311, label %310

310:                                              ; preds = %306
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %308) #9
  br label %311

311:                                              ; preds = %310, %306
  %312 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %313 = load i8*, i8** %312, align 8
  store i8* null, i8** %312, align 8
  %314 = icmp eq i8* %313, null
  br i1 %314, label %316, label %315

315:                                              ; preds = %311
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %313) #9
  br label %316

316:                                              ; preds = %311, %315
  %317 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %318 = load i8*, i8** %317, align 8
  store i8* null, i8** %317, align 8
  %319 = icmp eq i8* %318, null
  br i1 %319, label %321, label %320

320:                                              ; preds = %316
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %318) #9
  br label %321

321:                                              ; preds = %320, %316
  %322 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %323 = load i8*, i8** %322, align 8
  store i8* null, i8** %322, align 8
  %324 = icmp eq i8* %323, null
  br i1 %324, label %326, label %325

325:                                              ; preds = %321
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %323) #9
  br label %326

326:                                              ; preds = %325, %321
  %327 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %328 = load i8*, i8** %327, align 8
  store i8* null, i8** %327, align 8
  %329 = icmp eq i8* %328, null
  br i1 %329, label %331, label %330

330:                                              ; preds = %326
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %328) #9
  br label %331

331:                                              ; preds = %326, %330
  %332 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 11
  %333 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %332, i64 0, i32 0, i32 0
  %334 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %333, align 8
  %335 = icmp eq %"class.jxl::Plane"* %334, null
  br i1 %335, label %355, label %336

336:                                              ; preds = %331
  %337 = bitcast %"class.jxl::Plane"* %334 to i8*
  %338 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 11, i32 0, i32 1
  %339 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %338, align 8
  %340 = icmp eq %"class.jxl::Plane"* %339, %334
  br i1 %340, label %353, label %341

341:                                              ; preds = %336, %348
  %342 = phi %"class.jxl::Plane"* [ %343, %348 ], [ %339, %336 ]
  %343 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %342, i64 -1
  %344 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %342, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %345 = load i8*, i8** %344, align 8
  store i8* null, i8** %344, align 8
  %346 = icmp eq i8* %345, null
  br i1 %346, label %348, label %347

347:                                              ; preds = %341
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %345) #9
  br label %348

348:                                              ; preds = %347, %341
  %349 = icmp eq %"class.jxl::Plane"* %343, %334
  br i1 %349, label %350, label %341

350:                                              ; preds = %348
  %351 = bitcast %"class.std::__1::vector.169"* %332 to i8**
  %352 = load i8*, i8** %351, align 8
  br label %353

353:                                              ; preds = %350, %336
  %354 = phi i8* [ %352, %350 ], [ %337, %336 ]
  store %"class.jxl::Plane"* %334, %"class.jxl::Plane"** %338, align 8
  tail call void @_ZdlPv(i8* %354) #12
  br label %355

355:                                              ; preds = %331, %353
  %356 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %357 = load i8*, i8** %356, align 8
  store i8* null, i8** %356, align 8
  %358 = icmp eq i8* %357, null
  br i1 %358, label %360, label %359

359:                                              ; preds = %355
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %357) #9
  br label %360

360:                                              ; preds = %359, %355
  %361 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %362 = load i8*, i8** %361, align 8
  store i8* null, i8** %361, align 8
  %363 = icmp eq i8* %362, null
  br i1 %363, label %365, label %364

364:                                              ; preds = %360
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %362) #9
  br label %365

365:                                              ; preds = %364, %360
  %366 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %367 = load i8*, i8** %366, align 8
  store i8* null, i8** %366, align 8
  %368 = icmp eq i8* %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %367) #9
  br label %370

370:                                              ; preds = %365, %369
  %371 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 7
  %372 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %371, i64 0, i32 0, i32 0
  %373 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %372, align 8
  %374 = icmp eq %"class.std::__1::vector.98"* %373, null
  br i1 %374, label %397, label %375

375:                                              ; preds = %370
  %376 = bitcast %"class.std::__1::vector.98"* %373 to i8*
  %377 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 7, i32 0, i32 1
  %378 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %377, align 8
  %379 = icmp eq %"class.std::__1::vector.98"* %378, %373
  br i1 %379, label %395, label %380

380:                                              ; preds = %375, %390
  %381 = phi %"class.std::__1::vector.98"* [ %382, %390 ], [ %378, %375 ]
  %382 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %381, i64 -1
  %383 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %382, i64 0, i32 0, i32 0
  %384 = load i8*, i8** %383, align 8
  %385 = icmp eq i8* %384, null
  br i1 %385, label %390, label %386

386:                                              ; preds = %380
  %387 = ptrtoint i8* %384 to i64
  %388 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %381, i64 -1, i32 0, i32 1
  %389 = bitcast i8** %388 to i64*
  store i64 %387, i64* %389, align 8
  tail call void @_ZdlPv(i8* nonnull %384) #12
  br label %390

390:                                              ; preds = %386, %380
  %391 = icmp eq %"class.std::__1::vector.98"* %382, %373
  br i1 %391, label %392, label %380

392:                                              ; preds = %390
  %393 = bitcast %"class.std::__1::vector.108"* %371 to i8**
  %394 = load i8*, i8** %393, align 8
  br label %395

395:                                              ; preds = %392, %375
  %396 = phi i8* [ %394, %392 ], [ %376, %375 ]
  store %"class.std::__1::vector.98"* %373, %"class.std::__1::vector.98"** %377, align 8
  tail call void @_ZdlPv(i8* %396) #12
  br label %397

397:                                              ; preds = %370, %395
  %398 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 6
  %399 = getelementptr inbounds %"class.std::__1::vector.343", %"class.std::__1::vector.343"* %398, i64 0, i32 0, i32 0
  %400 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %399, align 8
  %401 = icmp eq %"struct.jxl::ANSCode"* %400, null
  br i1 %401, label %419, label %402

402:                                              ; preds = %397
  %403 = bitcast %"struct.jxl::ANSCode"* %400 to i8*
  %404 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 6, i32 0, i32 1
  %405 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %404, align 8
  %406 = icmp eq %"struct.jxl::ANSCode"* %405, %400
  br i1 %406, label %417, label %407

407:                                              ; preds = %402
  %408 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 6, i32 0, i32 2
  %409 = bitcast %"class.std::__1::__compressed_pair.359"* %408 to %"class.std::__1::allocator.362"*
  br label %410

410:                                              ; preds = %410, %407
  %411 = phi %"struct.jxl::ANSCode"* [ %405, %407 ], [ %412, %410 ]
  %412 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %411, i64 -1
  tail call void @_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_(%"class.std::__1::allocator.362"* %409, %"struct.jxl::ANSCode"* %412) #9
  %413 = icmp eq %"struct.jxl::ANSCode"* %412, %400
  br i1 %413, label %414, label %410

414:                                              ; preds = %410
  %415 = bitcast %"class.std::__1::vector.343"* %398 to i8**
  %416 = load i8*, i8** %415, align 8
  br label %417

417:                                              ; preds = %414, %402
  %418 = phi i8* [ %416, %414 ], [ %403, %402 ]
  store %"struct.jxl::ANSCode"* %400, %"struct.jxl::ANSCode"** %404, align 8
  tail call void @_ZdlPv(i8* %418) #12
  br label %419

419:                                              ; preds = %397, %417
  %420 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 5
  %421 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %420, i64 0, i32 0, i32 0
  %422 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %421, align 8
  %423 = icmp eq %"class.jxl::Plane"* %422, null
  br i1 %423, label %443, label %424

424:                                              ; preds = %419
  %425 = bitcast %"class.jxl::Plane"* %422 to i8*
  %426 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 5, i32 0, i32 1
  %427 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %426, align 8
  %428 = icmp eq %"class.jxl::Plane"* %427, %422
  br i1 %428, label %441, label %429

429:                                              ; preds = %424, %436
  %430 = phi %"class.jxl::Plane"* [ %431, %436 ], [ %427, %424 ]
  %431 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %430, i64 -1
  %432 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %430, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %433 = load i8*, i8** %432, align 8
  store i8* null, i8** %432, align 8
  %434 = icmp eq i8* %433, null
  br i1 %434, label %436, label %435

435:                                              ; preds = %429
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %433) #9
  br label %436

436:                                              ; preds = %435, %429
  %437 = icmp eq %"class.jxl::Plane"* %431, %422
  br i1 %437, label %438, label %429

438:                                              ; preds = %436
  %439 = bitcast %"class.std::__1::vector.169"* %420 to i8**
  %440 = load i8*, i8** %439, align 8
  br label %441

441:                                              ; preds = %438, %424
  %442 = phi i8* [ %440, %438 ], [ %425, %424 ]
  store %"class.jxl::Plane"* %422, %"class.jxl::Plane"** %426, align 8
  tail call void @_ZdlPv(i8* %442) #12
  br label %443

443:                                              ; preds = %419, %441
  %444 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 4, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %445 = load i8*, i8** %444, align 8
  store i8* null, i8** %444, align 8
  %446 = icmp eq i8* %445, null
  br i1 %446, label %448, label %447

447:                                              ; preds = %443
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %445) #9
  br label %448

448:                                              ; preds = %447, %443
  %449 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 4, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %450 = load i8*, i8** %449, align 8
  store i8* null, i8** %449, align 8
  %451 = icmp eq i8* %450, null
  br i1 %451, label %453, label %452

452:                                              ; preds = %448
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %450) #9
  br label %453

453:                                              ; preds = %452, %448
  %454 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 4, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %455 = load i8*, i8** %454, align 8
  store i8* null, i8** %454, align 8
  %456 = icmp eq i8* %455, null
  br i1 %456, label %458, label %457

457:                                              ; preds = %453
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %455) #9
  br label %458

458:                                              ; preds = %453, %457
  %459 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %460 = load i8*, i8** %459, align 8
  store i8* null, i8** %459, align 8
  %461 = icmp eq i8* %460, null
  br i1 %461, label %463, label %462

462:                                              ; preds = %458
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %460) #9
  br label %463

463:                                              ; preds = %462, %458
  %464 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %465 = load i8*, i8** %464, align 8
  store i8* null, i8** %464, align 8
  %466 = icmp eq i8* %465, null
  br i1 %466, label %468, label %467

467:                                              ; preds = %463
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %465) #9
  br label %468

468:                                              ; preds = %467, %463
  %469 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %470 = load i8*, i8** %469, align 8
  store i8* null, i8** %469, align 8
  %471 = icmp eq i8* %470, null
  br i1 %471, label %473, label %472

472:                                              ; preds = %468
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %470) #9
  br label %473

473:                                              ; preds = %468, %472
  %474 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0
  tail call void @_ZN3jxl17PassesSharedStateD2Ev(%"struct.jxl::PassesSharedState"* %474) #9
  ret void

475:                                              ; preds = %99
  %476 = bitcast %"class.jxl::Image3"* %102 to i8*
  %477 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 2, i32 0, i32 1
  %478 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %477, align 8
  %479 = icmp eq %"class.jxl::Image3"* %478, %102
  br i1 %479, label %502, label %480

480:                                              ; preds = %475, %497
  %481 = phi %"class.jxl::Image3"* [ %482, %497 ], [ %478, %475 ]
  %482 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1
  %483 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %484 = load i8*, i8** %483, align 8
  store i8* null, i8** %483, align 8
  %485 = icmp eq i8* %484, null
  br i1 %485, label %487, label %486

486:                                              ; preds = %480
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %484) #9
  br label %487

487:                                              ; preds = %486, %480
  %488 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %489 = load i8*, i8** %488, align 8
  store i8* null, i8** %488, align 8
  %490 = icmp eq i8* %489, null
  br i1 %490, label %492, label %491

491:                                              ; preds = %487
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %489) #9
  br label %492

492:                                              ; preds = %491, %487
  %493 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %494 = load i8*, i8** %493, align 8
  store i8* null, i8** %493, align 8
  %495 = icmp eq i8* %494, null
  br i1 %495, label %497, label %496

496:                                              ; preds = %492
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %494) #9
  br label %497

497:                                              ; preds = %496, %492
  %498 = icmp eq %"class.jxl::Image3"* %482, %102
  br i1 %498, label %499, label %480

499:                                              ; preds = %497
  %500 = bitcast %"class.std::__1::vector.397"* %100 to i8**
  %501 = load i8*, i8** %500, align 8
  br label %502

502:                                              ; preds = %499, %475
  %503 = phi i8* [ %501, %499 ], [ %476, %475 ]
  store %"class.jxl::Image3"* %102, %"class.jxl::Image3"** %477, align 8
  tail call void @_ZdlPv(i8* %503) #12
  br label %504

504:                                              ; preds = %502, %99
  %505 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 1
  %506 = getelementptr inbounds %"class.std::__1::vector.397", %"class.std::__1::vector.397"* %505, i64 0, i32 0, i32 0
  %507 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %506, align 8
  %508 = icmp eq %"class.jxl::Image3"* %507, null
  br i1 %508, label %538, label %509

509:                                              ; preds = %504
  %510 = bitcast %"class.jxl::Image3"* %507 to i8*
  %511 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 1, i32 0, i32 1
  %512 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %511, align 8
  %513 = icmp eq %"class.jxl::Image3"* %512, %507
  br i1 %513, label %536, label %514

514:                                              ; preds = %509, %531
  %515 = phi %"class.jxl::Image3"* [ %516, %531 ], [ %512, %509 ]
  %516 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1
  %517 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %518 = load i8*, i8** %517, align 8
  store i8* null, i8** %517, align 8
  %519 = icmp eq i8* %518, null
  br i1 %519, label %521, label %520

520:                                              ; preds = %514
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %518) #9
  br label %521

521:                                              ; preds = %520, %514
  %522 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %523 = load i8*, i8** %522, align 8
  store i8* null, i8** %522, align 8
  %524 = icmp eq i8* %523, null
  br i1 %524, label %526, label %525

525:                                              ; preds = %521
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %523) #9
  br label %526

526:                                              ; preds = %525, %521
  %527 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %528 = load i8*, i8** %527, align 8
  store i8* null, i8** %527, align 8
  %529 = icmp eq i8* %528, null
  br i1 %529, label %531, label %530

530:                                              ; preds = %526
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %528) #9
  br label %531

531:                                              ; preds = %530, %526
  %532 = icmp eq %"class.jxl::Image3"* %516, %507
  br i1 %532, label %533, label %514

533:                                              ; preds = %531
  %534 = bitcast %"class.std::__1::vector.397"* %505 to i8**
  %535 = load i8*, i8** %534, align 8
  br label %536

536:                                              ; preds = %533, %509
  %537 = phi i8* [ %535, %533 ], [ %510, %509 ]
  store %"class.jxl::Image3"* %507, %"class.jxl::Image3"** %511, align 8
  tail call void @_ZdlPv(i8* %537) #12
  br label %538

538:                                              ; preds = %536, %504
  %539 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 0
  %540 = getelementptr inbounds %"class.std::__1::vector.397", %"class.std::__1::vector.397"* %539, i64 0, i32 0, i32 0
  %541 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %540, align 8
  %542 = icmp eq %"class.jxl::Image3"* %541, null
  br i1 %542, label %572, label %543

543:                                              ; preds = %538
  %544 = bitcast %"class.jxl::Image3"* %541 to i8*
  %545 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 0, i32 0, i32 1
  %546 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %545, align 8
  %547 = icmp eq %"class.jxl::Image3"* %546, %541
  br i1 %547, label %570, label %548

548:                                              ; preds = %543, %565
  %549 = phi %"class.jxl::Image3"* [ %550, %565 ], [ %546, %543 ]
  %550 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1
  %551 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %552 = load i8*, i8** %551, align 8
  store i8* null, i8** %551, align 8
  %553 = icmp eq i8* %552, null
  br i1 %553, label %555, label %554

554:                                              ; preds = %548
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %552) #9
  br label %555

555:                                              ; preds = %554, %548
  %556 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %557 = load i8*, i8** %556, align 8
  store i8* null, i8** %556, align 8
  %558 = icmp eq i8* %557, null
  br i1 %558, label %560, label %559

559:                                              ; preds = %555
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %557) #9
  br label %560

560:                                              ; preds = %559, %555
  %561 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %562 = load i8*, i8** %561, align 8
  store i8* null, i8** %561, align 8
  %563 = icmp eq i8* %562, null
  br i1 %563, label %565, label %564

564:                                              ; preds = %560
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %562) #9
  br label %565

565:                                              ; preds = %564, %560
  %566 = icmp eq %"class.jxl::Image3"* %550, %541
  br i1 %566, label %567, label %548

567:                                              ; preds = %565
  %568 = bitcast %"class.std::__1::vector.397"* %539 to i8**
  %569 = load i8*, i8** %568, align 8
  br label %570

570:                                              ; preds = %567, %543
  %571 = phi i8* [ %569, %567 ], [ %544, %543 ]
  store %"class.jxl::Image3"* %541, %"class.jxl::Image3"** %545, align 8
  tail call void @_ZdlPv(i8* %571) #12
  br label %572

572:                                              ; preds = %570, %538
  %573 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29
  %574 = getelementptr inbounds %"class.std::__1::vector.397", %"class.std::__1::vector.397"* %573, i64 0, i32 0, i32 0
  %575 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %574, align 8
  %576 = icmp eq %"class.jxl::Image3"* %575, null
  br i1 %576, label %133, label %104
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_(%"class.std::__1::allocator.362"*, %"struct.jxl::ANSCode"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %13 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %12, align 8
  %14 = icmp eq %"struct.jxl::HybridUintConfig"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint %"struct.jxl::HybridUintConfig"* %13 to i64
  %17 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 1
  %18 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast %"struct.jxl::HybridUintConfig"* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #12
  br label %20

20:                                               ; preds = %15, %11
  %21 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1
  %22 = getelementptr inbounds %"class.std::__1::vector.345", %"class.std::__1::vector.345"* %21, i64 0, i32 0, i32 0
  %23 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %22, align 8
  %24 = icmp eq %"struct.jxl::HuffmanDecodingData"* %23, null
  br i1 %24, label %48, label %25

25:                                               ; preds = %20
  %26 = bitcast %"struct.jxl::HuffmanDecodingData"* %23 to i8*
  %27 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 1
  %28 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %27, align 8
  %29 = icmp eq %"struct.jxl::HuffmanDecodingData"* %28, %23
  br i1 %29, label %46, label %30

30:                                               ; preds = %25, %41
  %31 = phi %"struct.jxl::HuffmanDecodingData"* [ %32, %41 ], [ %28, %25 ]
  %32 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %31, i64 -1
  %33 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %33, align 8
  %35 = icmp eq %"struct.jxl::HuffmanCode"* %34, null
  br i1 %35, label %41, label %36

36:                                               ; preds = %30
  %37 = ptrtoint %"struct.jxl::HuffmanCode"* %34 to i64
  %38 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %31, i64 -1, i32 0, i32 0, i32 1
  %39 = bitcast %"struct.jxl::HuffmanCode"** %38 to i64*
  store i64 %37, i64* %39, align 8
  %40 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %34, i64 0, i32 0
  tail call void @_ZdlPv(i8* %40) #12
  br label %41

41:                                               ; preds = %36, %30
  %42 = icmp eq %"struct.jxl::HuffmanDecodingData"* %32, %23
  br i1 %42, label %43, label %30

43:                                               ; preds = %41
  %44 = bitcast %"class.std::__1::vector.345"* %21 to i8**
  %45 = load i8*, i8** %44, align 8
  br label %46

46:                                               ; preds = %43, %25
  %47 = phi i8* [ %45, %43 ], [ %26, %25 ]
  store %"struct.jxl::HuffmanDecodingData"* %23, %"struct.jxl::HuffmanDecodingData"** %27, align 8
  tail call void @_ZdlPv(i8* %47) #12
  br label %48

48:                                               ; preds = %46, %20
  %49 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  store i8* null, i8** %49, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %48
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %50) #9
  br label %53

53:                                               ; preds = %48, %52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_1E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #9
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_1E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.407**
  %6 = load %class.anon.407*, %class.anon.407** %5, align 8
  %7 = getelementptr inbounds %class.anon.407, %class.anon.407* %6, i64 0, i32 0
  %8 = load %"class.jxl::ModularFrameEncoder"**, %"class.jxl::ModularFrameEncoder"*** %7, align 8
  %9 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %8, align 8
  %10 = getelementptr inbounds %class.anon.407, %class.anon.407* %6, i64 0, i32 1
  %11 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %10, align 8
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds %class.anon.407, %class.anon.407* %6, i64 0, i32 2
  %14 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %13, align 8
  %15 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %14, align 8
  %16 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %15, i64 0, i32 6, i32 0
  %17 = load float, float* %16, align 8
  %18 = fcmp ult float %17, 2.000000e+00
  br i1 %18, label %23, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %15, i64 0, i32 6, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %21, 7
  br label %23

23:                                               ; preds = %3, %19
  %24 = phi i1 [ false, %3 ], [ %22, %19 ]
  tail call void @_ZN3jxl19ModularFrameEncoder11AddVarDCTDCERKNS_6Image3IfEEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"* %9, %"class.jxl::Image3"* dereferenceable(96) %11, i64 %12, i1 zeroext %24, %"struct.jxl::PassesEncoderState"* %15) #9
  ret void
}

declare void @_ZN3jxl19ModularFrameEncoder11AddVarDCTDCERKNS_6Image3IfEEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"*, %"class.jxl::Image3"* dereferenceable(96), i64, i1 zeroext, %"struct.jxl::PassesEncoderState"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #9
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_23InitializePassesEncoderERKNS_6Image3IfEEPS0_PNS_18PassesEncoderStateEPNS_19ModularFrameEncoderEPNS_6AuxOutEE3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.408**
  %6 = load %class.anon.408*, %class.anon.408** %5, align 8
  %7 = getelementptr inbounds %class.anon.408, %class.anon.408* %6, i64 0, i32 0
  %8 = load %"class.jxl::ModularFrameEncoder"**, %"class.jxl::ModularFrameEncoder"*** %7, align 8
  %9 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %8, align 8
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds %class.anon.408, %class.anon.408* %6, i64 0, i32 1
  %12 = load %"struct.jxl::PassesEncoderState"**, %"struct.jxl::PassesEncoderState"*** %11, align 8
  %13 = load %"struct.jxl::PassesEncoderState"*, %"struct.jxl::PassesEncoderState"** %12, align 8
  tail call void @_ZN3jxl19ModularFrameEncoder13AddACMetadataEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"* %9, i64 %10, i1 zeroext false, %"struct.jxl::PassesEncoderState"* %13) #9
  ret void
}

declare void @_ZN3jxl19ModularFrameEncoder13AddACMetadataEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"*, i64, i1 zeroext, %"struct.jxl::PassesEncoderState"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_"}
!6 = !{!7, !4}
!7 = distinct !{!7, !8, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_"}
!9 = !{i8 0, i8 2}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!14 = distinct !{!14, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
!15 = distinct !{!15, !11}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!18 = distinct !{!18, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!21 = distinct !{!21, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!24 = distinct !{!24, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!27 = distinct !{!27, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!28 = distinct !{!28, !11}
