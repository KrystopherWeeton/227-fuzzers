; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct4x4_add_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct4x4_add_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct4x4_16_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [2 x <2 x i64>], align 16
  %6 = bitcast [2 x <2 x i64>]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #6
  %7 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %5, i64 0, i64 0
  %8 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %5, i64 0, i64 1
  %9 = bitcast i32* %0 to <4 x i32>*
  %10 = load <4 x i32>, <4 x i32>* %9, align 16
  %11 = getelementptr inbounds i32, i32* %0, i64 4
  %12 = bitcast i32* %11 to <4 x i32>*
  %13 = load <4 x i32>, <4 x i32>* %12, align 16
  %14 = getelementptr inbounds i32, i32* %0, i64 8
  %15 = bitcast i32* %14 to <4 x i32>*
  %16 = load <4 x i32>, <4 x i32>* %15, align 16
  %17 = getelementptr inbounds i32, i32* %0, i64 12
  %18 = bitcast i32* %17 to <4 x i32>*
  %19 = load <4 x i32>, <4 x i32>* %18, align 16
  %20 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %10, <4 x i32> %13) #6
  %21 = bitcast [2 x <2 x i64>]* %5 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %21, align 16
  %22 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %16, <4 x i32> %19) #6
  %23 = bitcast <2 x i64>* %8 to <8 x i16>*
  store <8 x i16> %22, <8 x i16>* %23, align 16
  %24 = icmp eq i32 %3, 8
  br i1 %24, label %65, label %25

25:                                               ; preds = %4
  %26 = icmp sgt <8 x i16> %20, %22
  %27 = select <8 x i1> %26, <8 x i16> %20, <8 x i16> %22
  %28 = icmp slt <8 x i16> %20, %22
  %29 = select <8 x i1> %28, <8 x i16> %20, <8 x i16> %22
  %30 = bitcast <8 x i16> %27 to <16 x i8>
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %32 = bitcast <16 x i8> %31 to <8 x i16>
  %33 = icmp sgt <8 x i16> %27, %32
  %34 = select <8 x i1> %33, <8 x i16> %27, <8 x i16> %32
  %35 = bitcast <8 x i16> %29 to <16 x i8>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %37 = bitcast <16 x i8> %36 to <8 x i16>
  %38 = icmp slt <8 x i16> %29, %37
  %39 = select <8 x i1> %38, <8 x i16> %29, <8 x i16> %37
  %40 = bitcast <8 x i16> %34 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %42 = bitcast <16 x i8> %41 to <8 x i16>
  %43 = icmp sgt <8 x i16> %34, %42
  %44 = select <8 x i1> %43, <8 x i16> %34, <8 x i16> %42
  %45 = bitcast <8 x i16> %39 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %47 = bitcast <16 x i8> %46 to <8 x i16>
  %48 = icmp slt <8 x i16> %39, %47
  %49 = select <8 x i1> %48, <8 x i16> %39, <8 x i16> %47
  %50 = bitcast <8 x i16> %44 to <16 x i8>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %52 = bitcast <16 x i8> %51 to <8 x i16>
  %53 = icmp sgt <8 x i16> %44, %52
  %54 = select <8 x i1> %53, <8 x i16> %44, <8 x i16> %52
  %55 = bitcast <8 x i16> %49 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %57 = bitcast <16 x i8> %56 to <8 x i16>
  %58 = icmp slt <8 x i16> %49, %57
  %59 = select <8 x i1> %58, <8 x i16> %49, <8 x i16> %57
  %60 = extractelement <8 x i16> %54, i64 0
  %61 = extractelement <8 x i16> %59, i64 0
  %62 = icmp slt i16 %60, 4096
  %63 = icmp sgt i16 %61, -4097
  %64 = and i1 %62, %63
  br i1 %64, label %65, label %72

65:                                               ; preds = %4, %25
  call void @idct4_sse2(<2 x i64>* nonnull %7) #6
  call void @idct4_sse2(<2 x i64>* nonnull %7) #6
  %66 = load <8 x i16>, <8 x i16>* %21, align 16
  %67 = add <8 x i16> %66, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  store <8 x i16> %67, <8 x i16>* %21, align 16
  %68 = load <8 x i16>, <8 x i16>* %23, align 16
  %69 = add <8 x i16> %68, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  store <8 x i16> %69, <8 x i16>* %23, align 16
  %70 = ashr <8 x i16> %67, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %71 = ashr <8 x i16> %69, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  br label %586

72:                                               ; preds = %25
  %73 = icmp ne i16 %60, 32767
  %74 = icmp ne i16 %61, -32768
  %75 = and i1 %73, %74
  %76 = shufflevector <4 x i32> %10, <4 x i32> %13, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = shufflevector <4 x i32> %16, <4 x i32> %19, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = shufflevector <4 x i32> %10, <4 x i32> %13, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = shufflevector <4 x i32> %16, <4 x i32> %19, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %83 = bitcast <4 x i32> %82 to <2 x i64>
  %84 = shufflevector <2 x i64> %77, <2 x i64> %79, <2 x i32> <i32 0, i32 2>
  %85 = shufflevector <2 x i64> %77, <2 x i64> %79, <2 x i32> <i32 1, i32 3>
  %86 = shufflevector <2 x i64> %81, <2 x i64> %83, <2 x i32> <i32 0, i32 2>
  %87 = shufflevector <2 x i64> %81, <2 x i64> %83, <2 x i32> <i32 1, i32 3>
  %88 = bitcast <2 x i64> %84 to <4 x i32>
  %89 = bitcast <2 x i64> %86 to <4 x i32>
  %90 = add <4 x i32> %89, %88
  br i1 %75, label %91, label %273

91:                                               ; preds = %72
  %92 = bitcast <4 x i32> %90 to <2 x i64>
  %93 = sub <4 x i32> %88, %89
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = bitcast <4 x i32> %90 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %97 = bitcast <16 x i8> %96 to <2 x i64>
  %98 = bitcast <4 x i32> %93 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %100 = bitcast <16 x i8> %99 to <2 x i64>
  %101 = and <2 x i64> %92, <i64 4294967295, i64 4294967295>
  %102 = mul nuw nsw <2 x i64> %101, <i64 11585, i64 11585>
  %103 = and <2 x i64> %97, <i64 4294967295, i64 4294967295>
  %104 = mul nuw nsw <2 x i64> %103, <i64 11585, i64 11585>
  %105 = and <2 x i64> %94, <i64 4294967295, i64 4294967295>
  %106 = mul nuw nsw <2 x i64> %105, <i64 11585, i64 11585>
  %107 = and <2 x i64> %100, <i64 4294967295, i64 4294967295>
  %108 = mul nuw nsw <2 x i64> %107, <i64 11585, i64 11585>
  %109 = bitcast <2 x i64> %102 to <4 x i32>
  %110 = bitcast <2 x i64> %104 to <4 x i32>
  %111 = shufflevector <4 x i32> %109, <4 x i32> %110, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = shufflevector <4 x i32> %109, <4 x i32> %110, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %114 = bitcast <4 x i32> %113 to <2 x i64>
  %115 = shufflevector <2 x i64> %112, <2 x i64> %114, <2 x i32> <i32 0, i32 2>
  %116 = bitcast <2 x i64> %115 to <4 x i32>
  %117 = add <4 x i32> %116, <i32 8192, i32 8192, i32 8192, i32 8192>
  %118 = ashr <4 x i32> %117, <i32 14, i32 14, i32 14, i32 14>
  %119 = bitcast <2 x i64> %106 to <4 x i32>
  %120 = bitcast <2 x i64> %108 to <4 x i32>
  %121 = shufflevector <4 x i32> %119, <4 x i32> %120, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %122 = bitcast <4 x i32> %121 to <2 x i64>
  %123 = shufflevector <4 x i32> %119, <4 x i32> %120, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %124 = bitcast <4 x i32> %123 to <2 x i64>
  %125 = shufflevector <2 x i64> %122, <2 x i64> %124, <2 x i32> <i32 0, i32 2>
  %126 = bitcast <2 x i64> %125 to <4 x i32>
  %127 = add <4 x i32> %126, <i32 8192, i32 8192, i32 8192, i32 8192>
  %128 = ashr <4 x i32> %127, <i32 14, i32 14, i32 14, i32 14>
  %129 = bitcast <2 x i64> %85 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %131 = bitcast <16 x i8> %130 to <2 x i64>
  %132 = bitcast <2 x i64> %87 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %134 = bitcast <16 x i8> %133 to <2 x i64>
  %135 = and <2 x i64> %85, <i64 4294967295, i64 4294967295>
  %136 = mul nuw nsw <2 x i64> %135, <i64 6270, i64 6270>
  %137 = and <2 x i64> %131, <i64 4294967295, i64 4294967295>
  %138 = mul nuw nsw <2 x i64> %137, <i64 6270, i64 6270>
  %139 = mul nuw nsw <2 x i64> %135, <i64 15137, i64 15137>
  %140 = mul nuw nsw <2 x i64> %137, <i64 15137, i64 15137>
  %141 = and <2 x i64> %87, <i64 4294967295, i64 4294967295>
  %142 = and <2 x i64> %134, <i64 4294967295, i64 4294967295>
  %143 = mul nuw nsw <2 x i64> %141, <i64 6270, i64 6270>
  %144 = mul nuw nsw <2 x i64> %142, <i64 6270, i64 6270>
  %145 = mul nsw <2 x i64> %141, <i64 -15137, i64 -15137>
  %146 = add nsw <2 x i64> %136, %145
  %147 = mul nsw <2 x i64> %142, <i64 -15137, i64 -15137>
  %148 = add nsw <2 x i64> %147, %138
  %149 = add nuw nsw <2 x i64> %143, %139
  %150 = add nuw nsw <2 x i64> %144, %140
  %151 = bitcast <2 x i64> %146 to <4 x i32>
  %152 = bitcast <2 x i64> %148 to <4 x i32>
  %153 = shufflevector <4 x i32> %151, <4 x i32> %152, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %154 = bitcast <4 x i32> %153 to <2 x i64>
  %155 = shufflevector <4 x i32> %151, <4 x i32> %152, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %156 = bitcast <4 x i32> %155 to <2 x i64>
  %157 = shufflevector <2 x i64> %154, <2 x i64> %156, <2 x i32> <i32 0, i32 2>
  %158 = bitcast <2 x i64> %157 to <4 x i32>
  %159 = add <4 x i32> %158, <i32 8192, i32 8192, i32 8192, i32 8192>
  %160 = ashr <4 x i32> %159, <i32 14, i32 14, i32 14, i32 14>
  %161 = bitcast <2 x i64> %149 to <4 x i32>
  %162 = bitcast <2 x i64> %150 to <4 x i32>
  %163 = shufflevector <4 x i32> %161, <4 x i32> %162, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %164 = bitcast <4 x i32> %163 to <2 x i64>
  %165 = shufflevector <4 x i32> %161, <4 x i32> %162, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %166 = bitcast <4 x i32> %165 to <2 x i64>
  %167 = shufflevector <2 x i64> %164, <2 x i64> %166, <2 x i32> <i32 0, i32 2>
  %168 = bitcast <2 x i64> %167 to <4 x i32>
  %169 = add <4 x i32> %168, <i32 8192, i32 8192, i32 8192, i32 8192>
  %170 = ashr <4 x i32> %169, <i32 14, i32 14, i32 14, i32 14>
  %171 = add nsw <4 x i32> %118, %170
  %172 = add nsw <4 x i32> %128, %160
  %173 = sub nsw <4 x i32> %128, %160
  %174 = sub nsw <4 x i32> %118, %170
  %175 = shufflevector <4 x i32> %171, <4 x i32> %172, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = shufflevector <4 x i32> %173, <4 x i32> %174, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = shufflevector <4 x i32> %171, <4 x i32> %172, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %180 = bitcast <4 x i32> %179 to <2 x i64>
  %181 = shufflevector <4 x i32> %173, <4 x i32> %174, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %182 = bitcast <4 x i32> %181 to <2 x i64>
  %183 = shufflevector <2 x i64> %176, <2 x i64> %178, <2 x i32> <i32 0, i32 2>
  %184 = shufflevector <2 x i64> %176, <2 x i64> %178, <2 x i32> <i32 1, i32 3>
  %185 = shufflevector <2 x i64> %180, <2 x i64> %182, <2 x i32> <i32 0, i32 2>
  %186 = shufflevector <2 x i64> %180, <2 x i64> %182, <2 x i32> <i32 1, i32 3>
  %187 = bitcast <2 x i64> %183 to <4 x i32>
  %188 = bitcast <2 x i64> %185 to <4 x i32>
  %189 = add <4 x i32> %188, %187
  %190 = bitcast <4 x i32> %189 to <2 x i64>
  %191 = sub <4 x i32> %187, %188
  %192 = bitcast <4 x i32> %191 to <2 x i64>
  %193 = bitcast <4 x i32> %189 to <16 x i8>
  %194 = shufflevector <16 x i8> %193, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %195 = bitcast <16 x i8> %194 to <2 x i64>
  %196 = bitcast <4 x i32> %191 to <16 x i8>
  %197 = shufflevector <16 x i8> %196, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %198 = bitcast <16 x i8> %197 to <2 x i64>
  %199 = and <2 x i64> %190, <i64 4294967295, i64 4294967295>
  %200 = mul nuw nsw <2 x i64> %199, <i64 11585, i64 11585>
  %201 = and <2 x i64> %195, <i64 4294967295, i64 4294967295>
  %202 = mul nuw nsw <2 x i64> %201, <i64 11585, i64 11585>
  %203 = and <2 x i64> %192, <i64 4294967295, i64 4294967295>
  %204 = mul nuw nsw <2 x i64> %203, <i64 11585, i64 11585>
  %205 = and <2 x i64> %198, <i64 4294967295, i64 4294967295>
  %206 = mul nuw nsw <2 x i64> %205, <i64 11585, i64 11585>
  %207 = bitcast <2 x i64> %200 to <4 x i32>
  %208 = bitcast <2 x i64> %202 to <4 x i32>
  %209 = shufflevector <4 x i32> %207, <4 x i32> %208, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %210 = bitcast <4 x i32> %209 to <2 x i64>
  %211 = shufflevector <4 x i32> %207, <4 x i32> %208, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %212 = bitcast <4 x i32> %211 to <2 x i64>
  %213 = shufflevector <2 x i64> %210, <2 x i64> %212, <2 x i32> <i32 0, i32 2>
  %214 = bitcast <2 x i64> %213 to <4 x i32>
  %215 = add <4 x i32> %214, <i32 8192, i32 8192, i32 8192, i32 8192>
  %216 = ashr <4 x i32> %215, <i32 14, i32 14, i32 14, i32 14>
  %217 = bitcast <2 x i64> %204 to <4 x i32>
  %218 = bitcast <2 x i64> %206 to <4 x i32>
  %219 = shufflevector <4 x i32> %217, <4 x i32> %218, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %220 = bitcast <4 x i32> %219 to <2 x i64>
  %221 = shufflevector <4 x i32> %217, <4 x i32> %218, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %222 = bitcast <4 x i32> %221 to <2 x i64>
  %223 = shufflevector <2 x i64> %220, <2 x i64> %222, <2 x i32> <i32 0, i32 2>
  %224 = bitcast <2 x i64> %223 to <4 x i32>
  %225 = add <4 x i32> %224, <i32 8192, i32 8192, i32 8192, i32 8192>
  %226 = ashr <4 x i32> %225, <i32 14, i32 14, i32 14, i32 14>
  %227 = bitcast <2 x i64> %184 to <16 x i8>
  %228 = shufflevector <16 x i8> %227, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %229 = bitcast <16 x i8> %228 to <2 x i64>
  %230 = bitcast <2 x i64> %186 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %232 = bitcast <16 x i8> %231 to <2 x i64>
  %233 = and <2 x i64> %184, <i64 4294967295, i64 4294967295>
  %234 = mul nuw nsw <2 x i64> %233, <i64 6270, i64 6270>
  %235 = and <2 x i64> %229, <i64 4294967295, i64 4294967295>
  %236 = mul nuw nsw <2 x i64> %235, <i64 6270, i64 6270>
  %237 = mul nuw nsw <2 x i64> %233, <i64 15137, i64 15137>
  %238 = mul nuw nsw <2 x i64> %235, <i64 15137, i64 15137>
  %239 = and <2 x i64> %186, <i64 4294967295, i64 4294967295>
  %240 = and <2 x i64> %232, <i64 4294967295, i64 4294967295>
  %241 = mul nuw nsw <2 x i64> %239, <i64 6270, i64 6270>
  %242 = mul nuw nsw <2 x i64> %240, <i64 6270, i64 6270>
  %243 = mul nsw <2 x i64> %239, <i64 -15137, i64 -15137>
  %244 = add nsw <2 x i64> %234, %243
  %245 = mul nsw <2 x i64> %240, <i64 -15137, i64 -15137>
  %246 = add nsw <2 x i64> %245, %236
  %247 = add nuw nsw <2 x i64> %241, %237
  %248 = add nuw nsw <2 x i64> %242, %238
  %249 = bitcast <2 x i64> %244 to <4 x i32>
  %250 = bitcast <2 x i64> %246 to <4 x i32>
  %251 = shufflevector <4 x i32> %249, <4 x i32> %250, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %252 = bitcast <4 x i32> %251 to <2 x i64>
  %253 = shufflevector <4 x i32> %249, <4 x i32> %250, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %254 = bitcast <4 x i32> %253 to <2 x i64>
  %255 = shufflevector <2 x i64> %252, <2 x i64> %254, <2 x i32> <i32 0, i32 2>
  %256 = bitcast <2 x i64> %255 to <4 x i32>
  %257 = add <4 x i32> %256, <i32 8192, i32 8192, i32 8192, i32 8192>
  %258 = ashr <4 x i32> %257, <i32 14, i32 14, i32 14, i32 14>
  %259 = bitcast <2 x i64> %247 to <4 x i32>
  %260 = bitcast <2 x i64> %248 to <4 x i32>
  %261 = shufflevector <4 x i32> %259, <4 x i32> %260, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %262 = bitcast <4 x i32> %261 to <2 x i64>
  %263 = shufflevector <4 x i32> %259, <4 x i32> %260, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %264 = bitcast <4 x i32> %263 to <2 x i64>
  %265 = shufflevector <2 x i64> %262, <2 x i64> %264, <2 x i32> <i32 0, i32 2>
  %266 = bitcast <2 x i64> %265 to <4 x i32>
  %267 = add <4 x i32> %266, <i32 8192, i32 8192, i32 8192, i32 8192>
  %268 = ashr <4 x i32> %267, <i32 14, i32 14, i32 14, i32 14>
  %269 = add nsw <4 x i32> %216, %268
  %270 = add nsw <4 x i32> %226, %258
  %271 = sub nsw <4 x i32> %226, %258
  %272 = sub nsw <4 x i32> %216, %268
  br label %571

273:                                              ; preds = %72
  %274 = ashr <4 x i32> %90, <i32 31, i32 31, i32 31, i32 31>
  %275 = xor <4 x i32> %274, %90
  %276 = sub <4 x i32> %275, %274
  %277 = shufflevector <4 x i32> %274, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %278 = bitcast <4 x i32> %277 to <2 x i64>
  %279 = shufflevector <4 x i32> %274, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %280 = bitcast <4 x i32> %279 to <2 x i64>
  %281 = shufflevector <4 x i32> %276, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %282 = bitcast <4 x i32> %281 to <2 x i64>
  %283 = shufflevector <4 x i32> %276, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %284 = bitcast <4 x i32> %283 to <2 x i64>
  %285 = and <2 x i64> %284, <i64 4294967295, i64 4294967295>
  %286 = mul nuw nsw <2 x i64> %285, <i64 46340, i64 46340>
  %287 = xor <2 x i64> %286, %280
  %288 = and <2 x i64> %282, <i64 4294967295, i64 4294967295>
  %289 = mul nuw nsw <2 x i64> %288, <i64 46340, i64 46340>
  %290 = xor <2 x i64> %289, %278
  %291 = sub <2 x i64> <i64 32768, i64 32768>, %280
  %292 = add <2 x i64> %291, %287
  %293 = bitcast <2 x i64> %292 to <16 x i8>
  %294 = shufflevector <16 x i8> %293, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %295 = sub <2 x i64> <i64 32768, i64 32768>, %278
  %296 = add <2 x i64> %295, %290
  %297 = bitcast <2 x i64> %296 to <16 x i8>
  %298 = shufflevector <16 x i8> %297, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %299 = bitcast <16 x i8> %294 to <4 x i32>
  %300 = bitcast <16 x i8> %298 to <4 x i32>
  %301 = shufflevector <4 x i32> %299, <4 x i32> %300, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %302 = shufflevector <4 x i32> %299, <4 x i32> %300, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %303 = shufflevector <4 x i32> %301, <4 x i32> %302, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %304 = sub <4 x i32> %88, %89
  %305 = ashr <4 x i32> %304, <i32 31, i32 31, i32 31, i32 31>
  %306 = xor <4 x i32> %305, %304
  %307 = sub <4 x i32> %306, %305
  %308 = shufflevector <4 x i32> %305, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %309 = bitcast <4 x i32> %308 to <2 x i64>
  %310 = shufflevector <4 x i32> %305, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %311 = bitcast <4 x i32> %310 to <2 x i64>
  %312 = shufflevector <4 x i32> %307, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %313 = bitcast <4 x i32> %312 to <2 x i64>
  %314 = shufflevector <4 x i32> %307, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %315 = bitcast <4 x i32> %314 to <2 x i64>
  %316 = and <2 x i64> %315, <i64 4294967295, i64 4294967295>
  %317 = mul nuw nsw <2 x i64> %316, <i64 46340, i64 46340>
  %318 = xor <2 x i64> %317, %311
  %319 = and <2 x i64> %313, <i64 4294967295, i64 4294967295>
  %320 = mul nuw nsw <2 x i64> %319, <i64 46340, i64 46340>
  %321 = xor <2 x i64> %320, %309
  %322 = sub <2 x i64> <i64 32768, i64 32768>, %311
  %323 = add <2 x i64> %322, %318
  %324 = bitcast <2 x i64> %323 to <16 x i8>
  %325 = shufflevector <16 x i8> %324, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %326 = sub <2 x i64> <i64 32768, i64 32768>, %309
  %327 = add <2 x i64> %326, %321
  %328 = bitcast <2 x i64> %327 to <16 x i8>
  %329 = shufflevector <16 x i8> %328, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %330 = bitcast <16 x i8> %325 to <4 x i32>
  %331 = bitcast <16 x i8> %329 to <4 x i32>
  %332 = shufflevector <4 x i32> %330, <4 x i32> %331, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %333 = shufflevector <4 x i32> %330, <4 x i32> %331, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %334 = shufflevector <4 x i32> %332, <4 x i32> %333, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %335 = bitcast <2 x i64> %85 to <4 x i32>
  %336 = ashr <4 x i32> %335, <i32 31, i32 31, i32 31, i32 31>
  %337 = xor <4 x i32> %336, %335
  %338 = sub <4 x i32> %337, %336
  %339 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %340 = bitcast <4 x i32> %339 to <2 x i64>
  %341 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %342 = bitcast <4 x i32> %341 to <2 x i64>
  %343 = shufflevector <4 x i32> %338, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %344 = bitcast <4 x i32> %343 to <2 x i64>
  %345 = shufflevector <4 x i32> %338, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %346 = bitcast <4 x i32> %345 to <2 x i64>
  %347 = bitcast <2 x i64> %87 to <4 x i32>
  %348 = ashr <4 x i32> %347, <i32 31, i32 31, i32 31, i32 31>
  %349 = xor <4 x i32> %348, %347
  %350 = sub <4 x i32> %349, %348
  %351 = shufflevector <4 x i32> %348, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %352 = bitcast <4 x i32> %351 to <2 x i64>
  %353 = shufflevector <4 x i32> %348, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  %355 = shufflevector <4 x i32> %350, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %356 = bitcast <4 x i32> %355 to <2 x i64>
  %357 = shufflevector <4 x i32> %350, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %358 = bitcast <4 x i32> %357 to <2 x i64>
  %359 = and <2 x i64> %346, <i64 4294967295, i64 4294967295>
  %360 = mul nuw nsw <2 x i64> %359, <i64 60548, i64 60548>
  %361 = xor <2 x i64> %360, %342
  %362 = and <2 x i64> %344, <i64 4294967295, i64 4294967295>
  %363 = mul nuw nsw <2 x i64> %362, <i64 60548, i64 60548>
  %364 = xor <2 x i64> %363, %340
  %365 = mul nuw nsw <2 x i64> %359, <i64 25080, i64 25080>
  %366 = xor <2 x i64> %365, %342
  %367 = mul nuw nsw <2 x i64> %362, <i64 25080, i64 25080>
  %368 = xor <2 x i64> %367, %340
  %369 = and <2 x i64> %358, <i64 4294967295, i64 4294967295>
  %370 = mul nuw nsw <2 x i64> %369, <i64 25080, i64 25080>
  %371 = xor <2 x i64> %370, %354
  %372 = and <2 x i64> %356, <i64 4294967295, i64 4294967295>
  %373 = mul nuw nsw <2 x i64> %372, <i64 25080, i64 25080>
  %374 = xor <2 x i64> %373, %352
  %375 = mul nuw nsw <2 x i64> %369, <i64 60548, i64 60548>
  %376 = xor <2 x i64> %375, %354
  %377 = mul nuw nsw <2 x i64> %372, <i64 60548, i64 60548>
  %378 = xor <2 x i64> %377, %352
  %379 = sub <2 x i64> <i64 32768, i64 32768>, %342
  %380 = add <2 x i64> %379, %354
  %381 = add <2 x i64> %380, %366
  %382 = sub <2 x i64> %381, %376
  %383 = bitcast <2 x i64> %382 to <16 x i8>
  %384 = shufflevector <16 x i8> %383, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %385 = sub <2 x i64> <i64 32768, i64 32768>, %340
  %386 = add <2 x i64> %385, %352
  %387 = add <2 x i64> %386, %368
  %388 = sub <2 x i64> %387, %378
  %389 = bitcast <2 x i64> %388 to <16 x i8>
  %390 = shufflevector <16 x i8> %389, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %391 = sub <2 x i64> %379, %354
  %392 = add <2 x i64> %391, %361
  %393 = add <2 x i64> %392, %371
  %394 = bitcast <2 x i64> %393 to <16 x i8>
  %395 = shufflevector <16 x i8> %394, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %396 = sub <2 x i64> %385, %352
  %397 = add <2 x i64> %396, %364
  %398 = add <2 x i64> %397, %374
  %399 = bitcast <2 x i64> %398 to <16 x i8>
  %400 = shufflevector <16 x i8> %399, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %401 = bitcast <16 x i8> %384 to <4 x i32>
  %402 = bitcast <16 x i8> %390 to <4 x i32>
  %403 = shufflevector <4 x i32> %401, <4 x i32> %402, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %404 = shufflevector <4 x i32> %401, <4 x i32> %402, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %405 = shufflevector <4 x i32> %403, <4 x i32> %404, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %406 = bitcast <16 x i8> %395 to <4 x i32>
  %407 = bitcast <16 x i8> %400 to <4 x i32>
  %408 = shufflevector <4 x i32> %406, <4 x i32> %407, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %409 = shufflevector <4 x i32> %406, <4 x i32> %407, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %410 = shufflevector <4 x i32> %408, <4 x i32> %409, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %411 = add <4 x i32> %410, %303
  %412 = add <4 x i32> %405, %334
  %413 = sub <4 x i32> %334, %405
  %414 = sub <4 x i32> %303, %410
  %415 = shufflevector <4 x i32> %411, <4 x i32> %412, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %416 = bitcast <4 x i32> %415 to <2 x i64>
  %417 = shufflevector <4 x i32> %413, <4 x i32> %414, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %418 = bitcast <4 x i32> %417 to <2 x i64>
  %419 = shufflevector <4 x i32> %411, <4 x i32> %412, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %420 = bitcast <4 x i32> %419 to <2 x i64>
  %421 = shufflevector <4 x i32> %413, <4 x i32> %414, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %422 = bitcast <4 x i32> %421 to <2 x i64>
  %423 = shufflevector <2 x i64> %416, <2 x i64> %418, <2 x i32> <i32 0, i32 2>
  %424 = shufflevector <2 x i64> %416, <2 x i64> %418, <2 x i32> <i32 1, i32 3>
  %425 = shufflevector <2 x i64> %420, <2 x i64> %422, <2 x i32> <i32 0, i32 2>
  %426 = shufflevector <2 x i64> %420, <2 x i64> %422, <2 x i32> <i32 1, i32 3>
  %427 = bitcast <2 x i64> %423 to <4 x i32>
  %428 = bitcast <2 x i64> %425 to <4 x i32>
  %429 = add <4 x i32> %428, %427
  %430 = ashr <4 x i32> %429, <i32 31, i32 31, i32 31, i32 31>
  %431 = xor <4 x i32> %430, %429
  %432 = sub <4 x i32> %431, %430
  %433 = shufflevector <4 x i32> %430, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %434 = bitcast <4 x i32> %433 to <2 x i64>
  %435 = shufflevector <4 x i32> %430, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %436 = bitcast <4 x i32> %435 to <2 x i64>
  %437 = shufflevector <4 x i32> %432, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %438 = bitcast <4 x i32> %437 to <2 x i64>
  %439 = shufflevector <4 x i32> %432, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %440 = bitcast <4 x i32> %439 to <2 x i64>
  %441 = and <2 x i64> %440, <i64 4294967295, i64 4294967295>
  %442 = mul nuw nsw <2 x i64> %441, <i64 46340, i64 46340>
  %443 = xor <2 x i64> %442, %436
  %444 = and <2 x i64> %438, <i64 4294967295, i64 4294967295>
  %445 = mul nuw nsw <2 x i64> %444, <i64 46340, i64 46340>
  %446 = xor <2 x i64> %445, %434
  %447 = sub <2 x i64> <i64 32768, i64 32768>, %436
  %448 = add <2 x i64> %447, %443
  %449 = bitcast <2 x i64> %448 to <16 x i8>
  %450 = shufflevector <16 x i8> %449, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %451 = sub <2 x i64> <i64 32768, i64 32768>, %434
  %452 = add <2 x i64> %451, %446
  %453 = bitcast <2 x i64> %452 to <16 x i8>
  %454 = shufflevector <16 x i8> %453, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %455 = bitcast <16 x i8> %450 to <4 x i32>
  %456 = bitcast <16 x i8> %454 to <4 x i32>
  %457 = shufflevector <4 x i32> %455, <4 x i32> %456, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %458 = shufflevector <4 x i32> %455, <4 x i32> %456, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %459 = shufflevector <4 x i32> %457, <4 x i32> %458, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %460 = sub <4 x i32> %427, %428
  %461 = ashr <4 x i32> %460, <i32 31, i32 31, i32 31, i32 31>
  %462 = xor <4 x i32> %461, %460
  %463 = sub <4 x i32> %462, %461
  %464 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %465 = bitcast <4 x i32> %464 to <2 x i64>
  %466 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %467 = bitcast <4 x i32> %466 to <2 x i64>
  %468 = shufflevector <4 x i32> %463, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %469 = bitcast <4 x i32> %468 to <2 x i64>
  %470 = shufflevector <4 x i32> %463, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %471 = bitcast <4 x i32> %470 to <2 x i64>
  %472 = and <2 x i64> %471, <i64 4294967295, i64 4294967295>
  %473 = mul nuw nsw <2 x i64> %472, <i64 46340, i64 46340>
  %474 = xor <2 x i64> %473, %467
  %475 = and <2 x i64> %469, <i64 4294967295, i64 4294967295>
  %476 = mul nuw nsw <2 x i64> %475, <i64 46340, i64 46340>
  %477 = xor <2 x i64> %476, %465
  %478 = sub <2 x i64> <i64 32768, i64 32768>, %467
  %479 = add <2 x i64> %478, %474
  %480 = bitcast <2 x i64> %479 to <16 x i8>
  %481 = shufflevector <16 x i8> %480, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %482 = sub <2 x i64> <i64 32768, i64 32768>, %465
  %483 = add <2 x i64> %482, %477
  %484 = bitcast <2 x i64> %483 to <16 x i8>
  %485 = shufflevector <16 x i8> %484, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %486 = bitcast <16 x i8> %481 to <4 x i32>
  %487 = bitcast <16 x i8> %485 to <4 x i32>
  %488 = shufflevector <4 x i32> %486, <4 x i32> %487, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %489 = shufflevector <4 x i32> %486, <4 x i32> %487, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %490 = shufflevector <4 x i32> %488, <4 x i32> %489, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %491 = bitcast <2 x i64> %424 to <4 x i32>
  %492 = ashr <4 x i32> %491, <i32 31, i32 31, i32 31, i32 31>
  %493 = xor <4 x i32> %492, %491
  %494 = sub <4 x i32> %493, %492
  %495 = shufflevector <4 x i32> %492, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %496 = bitcast <4 x i32> %495 to <2 x i64>
  %497 = shufflevector <4 x i32> %492, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %498 = bitcast <4 x i32> %497 to <2 x i64>
  %499 = shufflevector <4 x i32> %494, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %500 = bitcast <4 x i32> %499 to <2 x i64>
  %501 = shufflevector <4 x i32> %494, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %502 = bitcast <4 x i32> %501 to <2 x i64>
  %503 = bitcast <2 x i64> %426 to <4 x i32>
  %504 = ashr <4 x i32> %503, <i32 31, i32 31, i32 31, i32 31>
  %505 = xor <4 x i32> %504, %503
  %506 = sub <4 x i32> %505, %504
  %507 = shufflevector <4 x i32> %504, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %508 = bitcast <4 x i32> %507 to <2 x i64>
  %509 = shufflevector <4 x i32> %504, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %510 = bitcast <4 x i32> %509 to <2 x i64>
  %511 = shufflevector <4 x i32> %506, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %512 = bitcast <4 x i32> %511 to <2 x i64>
  %513 = shufflevector <4 x i32> %506, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %514 = bitcast <4 x i32> %513 to <2 x i64>
  %515 = and <2 x i64> %502, <i64 4294967295, i64 4294967295>
  %516 = mul nuw nsw <2 x i64> %515, <i64 60548, i64 60548>
  %517 = xor <2 x i64> %516, %498
  %518 = and <2 x i64> %500, <i64 4294967295, i64 4294967295>
  %519 = mul nuw nsw <2 x i64> %518, <i64 60548, i64 60548>
  %520 = xor <2 x i64> %519, %496
  %521 = mul nuw nsw <2 x i64> %515, <i64 25080, i64 25080>
  %522 = xor <2 x i64> %521, %498
  %523 = mul nuw nsw <2 x i64> %518, <i64 25080, i64 25080>
  %524 = xor <2 x i64> %523, %496
  %525 = and <2 x i64> %514, <i64 4294967295, i64 4294967295>
  %526 = mul nuw nsw <2 x i64> %525, <i64 25080, i64 25080>
  %527 = xor <2 x i64> %526, %510
  %528 = and <2 x i64> %512, <i64 4294967295, i64 4294967295>
  %529 = mul nuw nsw <2 x i64> %528, <i64 25080, i64 25080>
  %530 = xor <2 x i64> %529, %508
  %531 = mul nuw nsw <2 x i64> %525, <i64 60548, i64 60548>
  %532 = xor <2 x i64> %531, %510
  %533 = mul nuw nsw <2 x i64> %528, <i64 60548, i64 60548>
  %534 = xor <2 x i64> %533, %508
  %535 = sub <2 x i64> <i64 32768, i64 32768>, %498
  %536 = add <2 x i64> %535, %510
  %537 = add <2 x i64> %536, %522
  %538 = sub <2 x i64> %537, %532
  %539 = bitcast <2 x i64> %538 to <16 x i8>
  %540 = shufflevector <16 x i8> %539, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %541 = sub <2 x i64> <i64 32768, i64 32768>, %496
  %542 = add <2 x i64> %541, %508
  %543 = add <2 x i64> %542, %524
  %544 = sub <2 x i64> %543, %534
  %545 = bitcast <2 x i64> %544 to <16 x i8>
  %546 = shufflevector <16 x i8> %545, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %547 = sub <2 x i64> %535, %510
  %548 = add <2 x i64> %547, %517
  %549 = add <2 x i64> %548, %527
  %550 = bitcast <2 x i64> %549 to <16 x i8>
  %551 = shufflevector <16 x i8> %550, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %552 = sub <2 x i64> %541, %508
  %553 = add <2 x i64> %552, %520
  %554 = add <2 x i64> %553, %530
  %555 = bitcast <2 x i64> %554 to <16 x i8>
  %556 = shufflevector <16 x i8> %555, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %557 = bitcast <16 x i8> %540 to <4 x i32>
  %558 = bitcast <16 x i8> %546 to <4 x i32>
  %559 = shufflevector <4 x i32> %557, <4 x i32> %558, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %560 = shufflevector <4 x i32> %557, <4 x i32> %558, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %561 = shufflevector <4 x i32> %559, <4 x i32> %560, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %562 = bitcast <16 x i8> %551 to <4 x i32>
  %563 = bitcast <16 x i8> %556 to <4 x i32>
  %564 = shufflevector <4 x i32> %562, <4 x i32> %563, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %565 = shufflevector <4 x i32> %562, <4 x i32> %563, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %566 = shufflevector <4 x i32> %564, <4 x i32> %565, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %567 = add <4 x i32> %566, %459
  %568 = add <4 x i32> %561, %490
  %569 = sub <4 x i32> %490, %561
  %570 = sub <4 x i32> %459, %566
  br label %571

571:                                              ; preds = %273, %91
  %572 = phi <4 x i32> [ %272, %91 ], [ %570, %273 ]
  %573 = phi <4 x i32> [ %271, %91 ], [ %569, %273 ]
  %574 = phi <4 x i32> [ %270, %91 ], [ %568, %273 ]
  %575 = phi <4 x i32> [ %269, %91 ], [ %567, %273 ]
  %576 = add <4 x i32> %575, <i32 8, i32 8, i32 8, i32 8>
  %577 = add <4 x i32> %574, <i32 8, i32 8, i32 8, i32 8>
  %578 = ashr <4 x i32> %576, <i32 4, i32 4, i32 4, i32 4>
  %579 = ashr <4 x i32> %577, <i32 4, i32 4, i32 4, i32 4>
  %580 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %578, <4 x i32> %579) #6
  %581 = add <4 x i32> %573, <i32 8, i32 8, i32 8, i32 8>
  %582 = add <4 x i32> %572, <i32 8, i32 8, i32 8, i32 8>
  %583 = ashr <4 x i32> %581, <i32 4, i32 4, i32 4, i32 4>
  %584 = ashr <4 x i32> %582, <i32 4, i32 4, i32 4, i32 4>
  %585 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %583, <4 x i32> %584) #6
  br label %586

586:                                              ; preds = %571, %65
  %587 = phi <8 x i16> [ %70, %65 ], [ %580, %571 ]
  %588 = phi <8 x i16> [ %71, %65 ], [ %585, %571 ]
  %589 = bitcast i16* %1 to i64*
  %590 = load i64, i64* %589, align 1
  %591 = insertelement <2 x i64> undef, i64 %590, i32 0
  %592 = bitcast <2 x i64> %591 to <4 x float>
  %593 = sext i32 %2 to i64
  %594 = getelementptr inbounds i16, i16* %1, i64 %593
  %595 = bitcast i16* %594 to <2 x float>*
  %596 = load <2 x float>, <2 x float>* %595, align 1
  %597 = shufflevector <2 x float> %596, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %598 = shufflevector <4 x float> %592, <4 x float> %597, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %599 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #6
  %600 = add <8 x i16> %599, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %601 = bitcast <4 x float> %598 to <8 x i16>
  %602 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %601, <8 x i16> %587) #6
  %603 = icmp sgt <8 x i16> %602, zeroinitializer
  %604 = select <8 x i1> %603, <8 x i16> %602, <8 x i16> zeroinitializer
  %605 = icmp slt <8 x i16> %604, %600
  %606 = select <8 x i1> %605, <8 x i16> %604, <8 x i16> %600
  %607 = bitcast <8 x i16> %606 to <2 x i64>
  %608 = extractelement <2 x i64> %607, i32 0
  store i64 %608, i64* %589, align 1
  %609 = bitcast <8 x i16> %606 to <4 x float>
  %610 = shufflevector <4 x float> %609, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %610, <2 x float>* %595, align 1
  %611 = shl nsw i32 %2, 1
  %612 = sext i32 %611 to i64
  %613 = getelementptr inbounds i16, i16* %1, i64 %612
  %614 = bitcast i16* %613 to i64*
  %615 = load i64, i64* %614, align 1
  %616 = insertelement <2 x i64> undef, i64 %615, i32 0
  %617 = bitcast <2 x i64> %616 to <4 x float>
  %618 = getelementptr inbounds i16, i16* %613, i64 %593
  %619 = bitcast i16* %618 to <2 x float>*
  %620 = load <2 x float>, <2 x float>* %619, align 1
  %621 = shufflevector <2 x float> %620, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %622 = shufflevector <4 x float> %617, <4 x float> %621, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %623 = bitcast <4 x float> %622 to <8 x i16>
  %624 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %623, <8 x i16> %588) #6
  %625 = icmp sgt <8 x i16> %624, zeroinitializer
  %626 = select <8 x i1> %625, <8 x i16> %624, <8 x i16> zeroinitializer
  %627 = icmp slt <8 x i16> %626, %600
  %628 = select <8 x i1> %627, <8 x i16> %626, <8 x i16> %600
  %629 = bitcast <8 x i16> %628 to <2 x i64>
  %630 = extractelement <2 x i64> %629, i32 0
  store i64 %630, i64* %614, align 1
  %631 = bitcast <8 x i16> %628 to <4 x float>
  %632 = shufflevector <4 x float> %631, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %632, <2 x float>* %619, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @idct4_sse2(<2 x i64>*) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_idct4x4_1_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #3 {
  %5 = load i32, i32* %0, align 4
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 11585
  %8 = add nsw i64 %7, 8192
  %9 = lshr i64 %8, 14
  %10 = shl i64 %9, 32
  %11 = ashr exact i64 %10, 32
  %12 = mul nsw i64 %11, 11585
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 8
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #6
  %22 = add <8 x i16> %21, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %23 = sext i32 %2 to i64
  %24 = bitcast i16* %1 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %25, i32 0
  %27 = bitcast <2 x i64> %26 to <8 x i16>
  %28 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %27, <8 x i16> %20) #6
  %29 = icmp sgt <8 x i16> %28, zeroinitializer
  %30 = select <8 x i1> %29, <8 x i16> %28, <8 x i16> zeroinitializer
  %31 = icmp slt <8 x i16> %30, %22
  %32 = select <8 x i1> %31, <8 x i16> %30, <8 x i16> %22
  %33 = bitcast <8 x i16> %32 to <2 x i64>
  %34 = extractelement <2 x i64> %33, i32 0
  store i64 %34, i64* %24, align 1
  %35 = getelementptr inbounds i16, i16* %1, i64 %23
  %36 = bitcast i16* %35 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <8 x i16>
  %40 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %39, <8 x i16> %20) #6
  %41 = icmp sgt <8 x i16> %40, zeroinitializer
  %42 = select <8 x i1> %41, <8 x i16> %40, <8 x i16> zeroinitializer
  %43 = icmp slt <8 x i16> %42, %22
  %44 = select <8 x i1> %43, <8 x i16> %42, <8 x i16> %22
  %45 = bitcast <8 x i16> %44 to <2 x i64>
  %46 = extractelement <2 x i64> %45, i32 0
  store i64 %46, i64* %36, align 1
  %47 = getelementptr inbounds i16, i16* %35, i64 %23
  %48 = bitcast i16* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <8 x i16>
  %52 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %51, <8 x i16> %20) #6
  %53 = icmp sgt <8 x i16> %52, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> zeroinitializer
  %55 = icmp slt <8 x i16> %54, %22
  %56 = select <8 x i1> %55, <8 x i16> %54, <8 x i16> %22
  %57 = bitcast <8 x i16> %56 to <2 x i64>
  %58 = extractelement <2 x i64> %57, i32 0
  store i64 %58, i64* %48, align 1
  %59 = getelementptr inbounds i16, i16* %47, i64 %23
  %60 = bitcast i16* %59 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <8 x i16>
  %64 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %63, <8 x i16> %20) #6
  %65 = icmp sgt <8 x i16> %64, zeroinitializer
  %66 = select <8 x i1> %65, <8 x i16> %64, <8 x i16> zeroinitializer
  %67 = icmp slt <8 x i16> %66, %22
  %68 = select <8 x i1> %67, <8 x i16> %66, <8 x i16> %22
  %69 = bitcast <8 x i16> %68 to <2 x i64>
  %70 = extractelement <2 x i64> %69, i32 0
  store i64 %70, i64* %60, align 1
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16>, i32) #4

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
