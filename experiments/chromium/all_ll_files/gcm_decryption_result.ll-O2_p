; ModuleID = '../../components/gcm_driver/crypto/gcm_decryption_result.cc'
source_filename = "../../components/gcm_driver/crypto/gcm_decryption_result.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [26 x i8] c"Message was not encrypted\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"Message decrypted (draft 03)\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"Message decrypted (draft 08)\00", align 1
@.str.3 = private unnamed_addr constant [41 x i8] c"Invalid format for the Encryption header\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"Invalid format for the Crypto-Key header\00", align 1
@.str.5 = private unnamed_addr constant [51 x i8] c"There are no associated keys with the subscription\00", align 1
@.str.6 = private unnamed_addr constant [61 x i8] c"The shared secret cannot be derived from the keying material\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"AES-GCM decryption failed\00", align 1
@.str.8 = private unnamed_addr constant [75 x i8] c"The message payload is smaller than the smallest valid message (104 bytes)\00", align 1
@.str.9 = private unnamed_addr constant [113 x i8] c"The record size indicated in the binary message header is smaller than the smallest valid record size (18 bytes)\00", align 1
@.str.10 = private unnamed_addr constant [127 x i8] c"The public key included in the binary message header must be a valid P-256 ECDH uncompressed point that is 65 bytes in length.\00", align 1
@.str.11 = private unnamed_addr constant [129 x i8] c"The public key included in the binary message header must be a valid P-256 ECDH uncompressed poin that starts with an 0x04 byte.\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"(invalid result)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gcm34ToGCMDecryptionResultDetailsStringENS_19GCMDecryptionResultE(%"class.std::__1::basic_string"* noalias sret, i32) local_unnamed_addr #0 {
  switch i32 %1, label %75 [
    i32 0, label %3
    i32 1, label %9
    i32 8, label %15
    i32 2, label %21
    i32 3, label %27
    i32 4, label %33
    i32 5, label %39
    i32 6, label %45
    i32 9, label %51
    i32 10, label %57
    i32 11, label %63
    i32 12, label %69
  ]

3:                                                ; preds = %2
  %4 = tail call i8* @_Znwm(i64 32) #3
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %4, i8** %5, align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast i64* %6 to <2 x i64>*
  store <2 x i64> <i64 25, i64 -9223372036854775776>, <2 x i64>* %7, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %4, i8* align 1 getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i64 25, i1 false) #4
  %8 = getelementptr inbounds i8, i8* %4, i64 25
  store i8 0, i8* %8, align 1
  br label %81

9:                                                ; preds = %2
  %10 = tail call i8* @_Znwm(i64 32) #3
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %10, i8** %11, align 8
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast i64* %12 to <2 x i64>*
  store <2 x i64> <i64 28, i64 -9223372036854775776>, <2 x i64>* %13, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %10, i8* align 1 getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i64 28, i1 false) #4
  %14 = getelementptr inbounds i8, i8* %10, i64 28
  store i8 0, i8* %14, align 1
  br label %81

15:                                               ; preds = %2
  %16 = tail call i8* @_Znwm(i64 32) #3
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %16, i8** %17, align 8
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = bitcast i64* %18 to <2 x i64>*
  store <2 x i64> <i64 28, i64 -9223372036854775776>, <2 x i64>* %19, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %16, i8* align 1 getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i64 28, i1 false) #4
  %20 = getelementptr inbounds i8, i8* %16, i64 28
  store i8 0, i8* %20, align 1
  br label %81

21:                                               ; preds = %2
  %22 = tail call i8* @_Znwm(i64 48) #3
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %22, i8** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> <i64 40, i64 -9223372036854775760>, <2 x i64>* %25, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %22, i8* align 1 getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0), i64 40, i1 false) #4
  %26 = getelementptr inbounds i8, i8* %22, i64 40
  store i8 0, i8* %26, align 1
  br label %81

27:                                               ; preds = %2
  %28 = tail call i8* @_Znwm(i64 48) #3
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %28, i8** %29, align 8
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = bitcast i64* %30 to <2 x i64>*
  store <2 x i64> <i64 40, i64 -9223372036854775760>, <2 x i64>* %31, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* align 1 getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i64 0, i64 0), i64 40, i1 false) #4
  %32 = getelementptr inbounds i8, i8* %28, i64 40
  store i8 0, i8* %32, align 1
  br label %81

33:                                               ; preds = %2
  %34 = tail call i8* @_Znwm(i64 64) #3
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %34, i8** %35, align 8
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %37 = bitcast i64* %36 to <2 x i64>*
  store <2 x i64> <i64 50, i64 -9223372036854775744>, <2 x i64>* %37, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* align 1 getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5, i64 0, i64 0), i64 50, i1 false) #4
  %38 = getelementptr inbounds i8, i8* %34, i64 50
  store i8 0, i8* %38, align 1
  br label %81

39:                                               ; preds = %2
  %40 = tail call i8* @_Znwm(i64 64) #3
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %40, i8** %41, align 8
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %43 = bitcast i64* %42 to <2 x i64>*
  store <2 x i64> <i64 60, i64 -9223372036854775744>, <2 x i64>* %43, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %40, i8* align 1 getelementptr inbounds ([61 x i8], [61 x i8]* @.str.6, i64 0, i64 0), i64 60, i1 false) #4
  %44 = getelementptr inbounds i8, i8* %40, i64 60
  store i8 0, i8* %44, align 1
  br label %81

45:                                               ; preds = %2
  %46 = tail call i8* @_Znwm(i64 32) #3
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %46, i8** %47, align 8
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %49 = bitcast i64* %48 to <2 x i64>*
  store <2 x i64> <i64 25, i64 -9223372036854775776>, <2 x i64>* %49, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %46, i8* align 1 getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i64 25, i1 false) #4
  %50 = getelementptr inbounds i8, i8* %46, i64 25
  store i8 0, i8* %50, align 1
  br label %81

51:                                               ; preds = %2
  %52 = tail call i8* @_Znwm(i64 80) #3
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %52, i8** %53, align 8
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %55 = bitcast i64* %54 to <2 x i64>*
  store <2 x i64> <i64 74, i64 -9223372036854775728>, <2 x i64>* %55, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %52, i8* align 1 getelementptr inbounds ([75 x i8], [75 x i8]* @.str.8, i64 0, i64 0), i64 74, i1 false) #4
  %56 = getelementptr inbounds i8, i8* %52, i64 74
  store i8 0, i8* %56, align 1
  br label %81

57:                                               ; preds = %2
  %58 = tail call i8* @_Znwm(i64 128) #3
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %58, i8** %59, align 8
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %61 = bitcast i64* %60 to <2 x i64>*
  store <2 x i64> <i64 112, i64 -9223372036854775680>, <2 x i64>* %61, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %58, i8* align 1 getelementptr inbounds ([113 x i8], [113 x i8]* @.str.9, i64 0, i64 0), i64 112, i1 false) #4
  %62 = getelementptr inbounds i8, i8* %58, i64 112
  store i8 0, i8* %62, align 1
  br label %81

63:                                               ; preds = %2
  %64 = tail call i8* @_Znwm(i64 128) #3
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %64, i8** %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %67 = bitcast i64* %66 to <2 x i64>*
  store <2 x i64> <i64 126, i64 -9223372036854775680>, <2 x i64>* %67, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %64, i8* align 1 getelementptr inbounds ([127 x i8], [127 x i8]* @.str.10, i64 0, i64 0), i64 126, i1 false) #4
  %68 = getelementptr inbounds i8, i8* %64, i64 126
  store i8 0, i8* %68, align 1
  br label %81

69:                                               ; preds = %2
  %70 = tail call i8* @_Znwm(i64 144) #3
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %70, i8** %71, align 8
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %73 = bitcast i64* %72 to <2 x i64>*
  store <2 x i64> <i64 128, i64 -9223372036854775664>, <2 x i64>* %73, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %70, i8* align 1 getelementptr inbounds ([129 x i8], [129 x i8]* @.str.11, i64 0, i64 0), i64 128, i1 false) #4
  %74 = getelementptr inbounds i8, i8* %70, i64 128
  store i8 0, i8* %74, align 1
  br label %81

75:                                               ; preds = %2
  %76 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %76, i64 0, i32 1, i32 0
  store i8 16, i8* %77, align 1
  %78 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 1 getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i64 16, i1 false) #4
  %79 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %80 = bitcast i64* %79 to i8*
  store i8 0, i8* %80, align 8
  br label %81

81:                                               ; preds = %75, %69, %63, %57, %51, %45, %39, %33, %27, %21, %15, %9, %3
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { builtin nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
