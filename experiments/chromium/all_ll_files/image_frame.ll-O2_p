; ModuleID = '../../third_party/blink/renderer/platform/image-decoders/image_frame.cc'
source_filename = "../../third_party/blink/renderer/platform/image-decoders/image_frame.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::ImageFrame" = type { %class.SkBitmap, %"class.SkBitmap::Allocator"*, i8, i32, %"class.blink::IntRect", i32, %"class.base::TimeDelta", i32, i32, i8, i8, i64 }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.0, i32, i32 }
%class.sk_sp.0 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.SkBitmap::Allocator" = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.base::TimeDelta" = type { i64 }
%class.sk_sp.8 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.sk_sp.9 = type { %class.SkSurface* }
%class.SkSurface = type { %class.SkRefCnt.base, %class.SkSurfaceProps, i32, i32, i32 }
%class.SkSurfaceProps = type { i32, i32 }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.10, [384 x i64], %class.sk_sp.11, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.13" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.10 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.11 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkPaint = type <{ %class.sk_sp.19, %class.sk_sp.20, %class.sk_sp.21, %class.sk_sp.22, %class.sk_sp.23, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.19 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.sk_sp.20 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.21 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.22 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.23 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

@_ZN5blink10ImageFrameC1Ev = hidden unnamed_addr alias void (%"class.blink::ImageFrame"*), void (%"class.blink::ImageFrame"*)* @_ZN5blink10ImageFrameC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrameC2Ev(%"class.blink::ImageFrame"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  tail call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %2) #6
  %3 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 1
  store %"class.SkBitmap::Allocator"* null, %"class.SkBitmap::Allocator"** %3, align 8
  %4 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  store i8 1, i8* %4, align 8
  %5 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 6, i32 0
  %7 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 9
  %8 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 24, i1 false)
  %9 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false)
  store i8 1, i8* %7, align 8
  %10 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 10
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 11
  store i64 4294967295, i64* %11, align 8
  ret void
}

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(128) %"class.blink::ImageFrame"* @_ZN5blink10ImageFrameaSERKS0_(%"class.blink::ImageFrame"* returned, %"class.blink::ImageFrame"* dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.blink::ImageFrame"* %0, %1
  br i1 %3, label %72, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 0
  %6 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  %7 = tail call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap* %6, %class.SkBitmap* dereferenceable(56) %5) #6
  %8 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 10
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 10
  store i8 %9, i8* %10, align 1
  %11 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 1
  %12 = bitcast %"class.SkBitmap::Allocator"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 1
  %15 = bitcast %"class.SkBitmap::Allocator"** %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 4
  %17 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 4
  %18 = bitcast %"class.blink::IntRect"* %17 to i8*
  %19 = bitcast %"class.blink::IntRect"* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 4 %19, i64 16, i1 false) #6
  %20 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 5
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 5
  store i32 %21, i32* %22, align 8
  %23 = icmp eq i32 %21, 3
  br i1 %23, label %24, label %40

24:                                               ; preds = %4
  %25 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  %26 = load i8, i8* %25, align 8, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 9
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  %32 = select i1 %31, i32 3, i32 2
  br label %33

33:                                               ; preds = %28, %24
  %34 = phi i32 [ %32, %28 ], [ 1, %24 ]
  %35 = tail call zeroext i1 @_ZN8SkBitmap12setAlphaTypeE11SkAlphaType(%class.SkBitmap* %6, i32 %34) #6
  %36 = load i8, i8* %10, align 1, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %33
  tail call void @_ZNK8SkBitmap19notifyPixelsChangedEv(%class.SkBitmap* %6) #6
  br label %39

39:                                               ; preds = %38, %33
  store i8 0, i8* %10, align 1
  br label %40

40:                                               ; preds = %4, %39
  %41 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 6, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 6, i32 0
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 7
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 7
  store i32 %45, i32* %46, align 8
  %47 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 8
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 8
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 9
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 9
  store i8 %51, i8* %52, align 8
  %53 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 2
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = icmp eq i8 %54, 0
  %56 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  store i8 %54, i8* %56, align 8
  br i1 %55, label %57, label %60

57:                                               ; preds = %40
  %58 = load i32, i32* %22, align 8
  %59 = icmp eq i32 %58, 3
  br i1 %59, label %63, label %60

60:                                               ; preds = %40, %57
  %61 = icmp eq i8 %51, 0
  %62 = select i1 %61, i32 3, i32 2
  br label %63

63:                                               ; preds = %57, %60
  %64 = phi i32 [ %62, %60 ], [ 1, %57 ]
  %65 = tail call zeroext i1 @_ZN8SkBitmap12setAlphaTypeE11SkAlphaType(%class.SkBitmap* %6, i32 %64) #6
  %66 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 3
  store i32 %67, i32* %68, align 4
  %69 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 11
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 11
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %2, %63
  ret %"class.blink::ImageFrame"* %0
}

declare dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame9SetStatusENS0_6StatusE(%"class.blink::ImageFrame"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 5
  store i32 %1, i32* %3, align 8
  %4 = icmp eq i32 %1, 3
  br i1 %4, label %5, label %23

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 9
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i32 3, i32 2
  br label %15

15:                                               ; preds = %5, %10
  %16 = phi i32 [ %14, %10 ], [ 1, %5 ]
  %17 = tail call zeroext i1 @_ZN8SkBitmap12setAlphaTypeE11SkAlphaType(%class.SkBitmap* %6, i32 %16) #6
  %18 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 10
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %22, label %21

21:                                               ; preds = %15
  tail call void @_ZNK8SkBitmap19notifyPixelsChangedEv(%class.SkBitmap* %6) #6
  br label %22

22:                                               ; preds = %15, %21
  store i8 0, i8* %18, align 1
  br label %23

23:                                               ; preds = %22, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame11SetHasAlphaEb(%"class.blink::ImageFrame"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  store i8 %3, i8* %4, align 8
  %5 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  br i1 %1, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 3
  br i1 %9, label %15, label %10

10:                                               ; preds = %2, %6
  %11 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 9
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i32 3, i32 2
  br label %15

15:                                               ; preds = %6, %10
  %16 = phi i32 [ %14, %10 ], [ 1, %6 ]
  %17 = tail call zeroext i1 @_ZN8SkBitmap12setAlphaTypeE11SkAlphaType(%class.SkBitmap* %5, i32 %16) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame14ClearPixelDataEv(%"class.blink::ImageFrame"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  tail call void @_ZN8SkBitmap5resetEv(%class.SkBitmap* %2) #6
  %3 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 5
  store i32 0, i32* %3, align 8
  ret void
}

declare void @_ZN8SkBitmap5resetEv(%class.SkBitmap*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame17ZeroFillPixelDataEv(%"class.blink::ImageFrame"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  tail call void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap* %2, i32 0) #6
  %3 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  store i8 1, i8* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink10ImageFrame14CopyBitmapDataERKS0_(%"class.blink::ImageFrame"*, %"class.blink::ImageFrame"* dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.SkImageInfo, align 8
  %4 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 2
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  store i8 %5, i8* %6, align 8
  %7 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 3
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  tail call void @_ZN8SkBitmap5resetEv(%class.SkBitmap* %10) #6
  %11 = bitcast %struct.SkImageInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #6
  %12 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 0
  %15 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %16 = bitcast %struct.SkImageInfo* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 24, i1 false)
  %17 = load %class.SkColorSpace*, %class.SkColorSpace** %15, align 8
  %18 = icmp eq %class.SkColorSpace* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw add i32* %20, i32 1 monotonic
  br label %22

22:                                               ; preds = %2, %19
  store %class.SkColorSpace* %17, %class.SkColorSpace** %12, align 8
  %23 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 0, i32 1, i32 2, i32 0, i32 1
  %24 = bitcast i32* %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 8
  %26 = bitcast i32* %13 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %26, align 8
  %27 = extractelement <2 x i64> %25, i32 1
  %28 = shl i64 %27, 32
  %29 = ashr exact i64 %28, 32
  %30 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0
  %31 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %30) #6
  %32 = sext i32 %31 to i64
  %33 = mul nsw i64 %29, %32
  %34 = icmp ult i64 %33, 2147483648
  %35 = select i1 %34, i64 %33, i64 0
  %36 = call zeroext i1 @_ZN8SkBitmap14tryAllocPixelsERK11SkImageInfom(%class.SkBitmap* %10, %struct.SkImageInfo* nonnull dereferenceable(24) %3, i64 %35) #6
  br i1 %36, label %37, label %45

37:                                               ; preds = %22
  %38 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0, i32 1, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0, i32 1, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = call zeroext i1 @_ZNK8SkBitmap10readPixelsERK11SkImageInfoPvmii(%class.SkBitmap* %14, %struct.SkImageInfo* nonnull dereferenceable(24) %3, i8* %39, i64 %41, i32 0, i32 0) #6
  br i1 %42, label %43, label %45

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 5
  store i32 1, i32* %44, align 8
  br label %45

45:                                               ; preds = %37, %22, %43
  %46 = phi i1 [ true, %43 ], [ false, %22 ], [ false, %37 ]
  %47 = load %class.SkColorSpace*, %class.SkColorSpace** %12, align 8
  %48 = icmp eq %class.SkColorSpace* %47, null
  br i1 %48, label %55, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = atomicrmw add i32* %50, i32 -1 acq_rel
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = bitcast %class.SkColorSpace* %47 to i8*
  call void @_ZdlPv(i8* %54) #7
  br label %55

55:                                               ; preds = %45, %49, %53
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #6
  ret i1 %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZNK8SkBitmap10readPixelsERK11SkImageInfoPvmii(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i8*, i64, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink10ImageFrame24TakeBitmapDataIfWritableEPS0_(%"class.blink::ImageFrame"*, %"class.blink::ImageFrame"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 0
  %4 = tail call zeroext i1 @_ZNK8SkBitmap11isImmutableEv(%class.SkBitmap* %3) #6
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 2
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  store i8 %7, i8* %8, align 8
  %9 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 3
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  tail call void @_ZN8SkBitmap5resetEv(%class.SkBitmap* %12) #6
  tail call void @_ZN8SkBitmap4swapERS_(%class.SkBitmap* %12, %class.SkBitmap* dereferenceable(56) %3) #6
  %13 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 5
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 5
  store i32 1, i32* %14, align 8
  br label %15

15:                                               ; preds = %2, %5
  %16 = phi i1 [ true, %5 ], [ false, %2 ]
  ret i1 %16
}

declare zeroext i1 @_ZNK8SkBitmap11isImmutableEv(%class.SkBitmap*) local_unnamed_addr #1

declare void @_ZN8SkBitmap4swapERS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink10ImageFrame17AllocatePixelDataEii5sk_spI12SkColorSpaceE(%"class.blink::ImageFrame"*, i32, i32, %class.sk_sp.0* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.SkImageInfo, align 8
  %6 = bitcast %struct.SkImageInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #6
  %7 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 9
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %class.sk_sp.0, %class.sk_sp.0* %3, i64 0, i32 0
  %13 = bitcast %class.sk_sp.0* %3 to i64*
  %14 = load i64, i64* %13, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %12, align 8
  %15 = zext i32 %2 to i64
  %16 = shl nuw i64 %15, 32
  %17 = zext i32 %1 to i64
  %18 = or i64 %16, %17
  %19 = select i1 %11, i64 12884901894, i64 8589934598
  %20 = bitcast %struct.SkImageInfo* %5 to i64*
  store i64 %14, i64* %20, align 8, !alias.scope !3
  %21 = bitcast i32* %8 to i64*
  store i64 %19, i64* %21, align 8, !alias.scope !3
  %22 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 1
  %23 = bitcast %struct.SkISize* %22 to i64*
  store i64 %18, i64* %23, align 8, !alias.scope !3
  %24 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 1
  %27 = and i64 %19, 12884901888
  %28 = inttoptr i64 %14 to %class.SkColorSpace*
  br i1 %26, label %29, label %48

29:                                               ; preds = %4
  %30 = icmp eq i64 %14, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %29
  %32 = or i64 %27, 13
  store i64 0, i64* %20, align 8
  br label %46

33:                                               ; preds = %29
  %34 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic, !noalias !8
  %36 = load %class.SkColorSpace*, %class.SkColorSpace** %7, align 8
  %37 = and i64 %19, 12884901888
  %38 = or i64 %37, 13
  store i64 %14, i64* %20, align 8
  %39 = icmp eq %class.SkColorSpace* %36, null
  br i1 %39, label %46, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw add i32* %41, i32 -1 acq_rel
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %46

44:                                               ; preds = %40
  %45 = bitcast %class.SkColorSpace* %36 to i8*
  tail call void @_ZdlPv(i8* %45) #7
  br label %46

46:                                               ; preds = %44, %40, %33, %31
  %47 = phi i64 [ %32, %31 ], [ %38, %33 ], [ %38, %40 ], [ %38, %44 ]
  store i64 %47, i64* %21, align 8
  store i64 %18, i64* %23, align 8
  br label %48

48:                                               ; preds = %46, %4
  %49 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  %50 = call zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap* %49, %struct.SkImageInfo* nonnull dereferenceable(24) %5, i64 0) #6
  %51 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 1
  %52 = load %"class.SkBitmap::Allocator"*, %"class.SkBitmap::Allocator"** %51, align 8
  %53 = call zeroext i1 @_ZN8SkBitmap14tryAllocPixelsEPNS_9AllocatorE(%class.SkBitmap* %49, %"class.SkBitmap::Allocator"* %52) #6
  br i1 %53, label %54, label %56

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 5
  store i32 1, i32* %55, align 8
  br label %56

56:                                               ; preds = %54, %48
  %57 = load %class.SkColorSpace*, %class.SkColorSpace** %7, align 8
  %58 = icmp eq %class.SkColorSpace* %57, null
  br i1 %58, label %65, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %57, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = atomicrmw add i32* %60, i32 -1 acq_rel
  %62 = icmp eq i32 %61, 1
  br i1 %62, label %63, label %65

63:                                               ; preds = %59
  %64 = bitcast %class.SkColorSpace* %57 to i8*
  call void @_ZdlPv(i8* %64) #7
  br label %65

65:                                               ; preds = %56, %59, %63
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #6
  ret i1 %53
}

declare zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #1

declare zeroext i1 @_ZN8SkBitmap14tryAllocPixelsEPNS_9AllocatorE(%class.SkBitmap*, %"class.SkBitmap::Allocator"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame25FinalizePixelsAndGetImageEv(%class.sk_sp.8* noalias sret, %"class.blink::ImageFrame"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %1, i64 0, i32 0
  tail call void @_ZN8SkBitmap12setImmutableEv(%class.SkBitmap* %3) #6
  tail call void @_ZN7SkImage14MakeFromBitmapERK8SkBitmap(%class.sk_sp.8* sret %0, %class.SkBitmap* dereferenceable(56) %3) #6
  ret void
}

declare void @_ZN8SkBitmap12setImmutableEv(%class.SkBitmap*) local_unnamed_addr #1

declare void @_ZN7SkImage14MakeFromBitmapERK8SkBitmap(%class.sk_sp.8* sret, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #1

declare zeroext i1 @_ZN8SkBitmap12setAlphaTypeE11SkAlphaType(%class.SkBitmap*, i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink10ImageFrame16ComputeAlphaTypeEv(%"class.blink::ImageFrame"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 3
  br i1 %8, label %14, label %9

9:                                                ; preds = %1, %5
  %10 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 9
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  %13 = select i1 %12, i32 3, i32 2
  br label %14

14:                                               ; preds = %5, %9
  %15 = phi i32 [ %13, %9 ], [ 1, %5 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame17ZeroFillFrameRectERKNS_7IntRectE(%"class.blink::ImageFrame"*, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %37, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %37, label %11

11:                                               ; preds = %7
  %12 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %13 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 0
  %14 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #6
  %15 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %16, %5
  %20 = add nsw i32 %9, %18
  %21 = zext i32 %18 to i64
  %22 = shl nuw i64 %21, 32
  %23 = zext i32 %16 to i64
  %24 = or i64 %22, %23
  %25 = zext i32 %20 to i64
  %26 = shl nuw i64 %25, 32
  %27 = zext i32 %19 to i64
  %28 = or i64 %26, %27
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  store i64 %24, i64* %29, align 8
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  store i64 %28, i64* %30, align 8
  call void @_ZNK8SkBitmap5eraseEjRK7SkIRect(%class.SkBitmap* %13, i32 0, %struct.SkIRect* nonnull dereferenceable(16) %12) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #6
  %31 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 2
  store i8 1, i8* %31, align 8
  %32 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %0, i64 0, i32 9
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  %35 = select i1 %34, i32 3, i32 2
  %36 = call zeroext i1 @_ZN8SkBitmap12setAlphaTypeE11SkAlphaType(%class.SkBitmap* %13, i32 %35) #6
  br label %37

37:                                               ; preds = %2, %7, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame21BlendRGBARawF16BufferEPmS1_m(i64*, i64*, i64) local_unnamed_addr #0 align 2 {
  tail call fastcc void @_ZN5blinkL18BlendRGBAF16BufferEPmS0_m11SkAlphaType(i64* %0, i64* %1, i64 %2, i32 3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5blinkL18BlendRGBAF16BufferEPmS0_m11SkAlphaType(i64*, i64*, i64, i32) unnamed_addr #0 {
  %5 = alloca %struct.SkSamplingOptions, align 4
  %6 = alloca %struct.SkImageInfo, align 8
  %7 = alloca %class.sk_sp.0, align 8
  %8 = alloca %class.sk_sp.9, align 8
  %9 = alloca %class.SkPixmap, align 8
  %10 = alloca %class.sk_sp.8, align 8
  %11 = bitcast %struct.SkImageInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #6
  %12 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 1
  call void @_ZN12SkColorSpace14MakeSRGBLinearEv(%class.sk_sp.0* nonnull sret %7) #6
  %14 = getelementptr inbounds %class.sk_sp.0, %class.sk_sp.0* %7, i64 0, i32 0
  %15 = bitcast %class.sk_sp.0* %7 to i64*
  %16 = load i64, i64* %15, align 8, !noalias !15
  store %class.SkColorSpace* null, %class.SkColorSpace** %14, align 8, !noalias !15
  %17 = zext i32 %3 to i64
  %18 = shl nuw i64 %17, 32
  %19 = or i64 %18, 13
  %20 = and i64 %2, 4294967295
  %21 = or i64 %20, 4294967296
  %22 = bitcast %struct.SkImageInfo* %6 to i64*
  store i64 %16, i64* %22, align 8, !alias.scope !15
  %23 = bitcast i32* %13 to i64*
  store i64 %19, i64* %23, align 8, !alias.scope !15
  %24 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 1
  %25 = bitcast %struct.SkISize* %24 to i64*
  store i64 %21, i64* %25, align 8, !alias.scope !15
  %26 = bitcast %class.sk_sp.9* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #6
  %27 = getelementptr inbounds %class.sk_sp.9, %class.sk_sp.9* %8, i64 0, i32 0
  store %class.SkSurface* inttoptr (i64 -6148914691236517206 to %class.SkSurface*), %class.SkSurface** %27, align 8
  %28 = bitcast i64* %0 to i8*
  %29 = shl i64 %2, 32
  %30 = ashr exact i64 %29, 32
  %31 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0
  %32 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %31) #6
  %33 = sext i32 %32 to i64
  %34 = mul nsw i64 %30, %33
  %35 = icmp ult i64 %34, 2147483648
  %36 = select i1 %35, i64 %34, i64 0
  call void @_ZN9SkSurface16MakeRasterDirectERK11SkImageInfoPvmPK14SkSurfaceProps(%class.sk_sp.9* nonnull sret %8, %struct.SkImageInfo* nonnull dereferenceable(24) %6, i8* %28, i64 %36, %class.SkSurfaceProps* null) #6
  %37 = bitcast %class.SkPixmap* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 40, i1 false)
  %38 = load i64, i64* %25, align 8, !noalias !18
  %39 = load i32, i32* %13, align 8, !noalias !21
  %40 = load %class.SkColorSpace*, %class.SkColorSpace** %12, align 8, !noalias !24
  %41 = icmp eq %class.SkColorSpace* %40, null
  %42 = trunc i64 %38 to i32
  br i1 %41, label %48, label %43

43:                                               ; preds = %4
  %44 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 1, i32 0
  %45 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw add i32* %45, i32 1 monotonic, !noalias !24
  %47 = load i32, i32* %44, align 8
  br label %48

48:                                               ; preds = %4, %43
  %49 = phi i32 [ %42, %4 ], [ %47, %43 ]
  %50 = zext i32 %39 to i64
  %51 = or i64 %50, 12884901888
  %52 = sext i32 %49 to i64
  %53 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %31) #6
  %54 = sext i32 %53 to i64
  %55 = mul nsw i64 %54, %52
  %56 = icmp ult i64 %55, 2147483648
  %57 = select i1 %56, i64 %55, i64 0
  %58 = bitcast %class.SkPixmap* %9 to i64**
  store i64* %1, i64** %58, align 8
  %59 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %9, i64 0, i32 1
  store i64 %57, i64* %59, align 8
  %60 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %9, i64 0, i32 2, i32 0, i32 0, i32 0
  br i1 %41, label %61, label %66

61:                                               ; preds = %48
  store %class.SkColorSpace* null, %class.SkColorSpace** %60, align 8
  %62 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %9, i64 0, i32 2, i32 0, i32 1
  %63 = bitcast i32* %62 to i64*
  store i64 %51, i64* %63, align 8
  %64 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %9, i64 0, i32 2, i32 1
  %65 = bitcast %struct.SkISize* %64 to i64*
  store i64 %38, i64* %65, align 8
  br label %77

66:                                               ; preds = %48
  %67 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = atomicrmw add i32* %67, i32 1 monotonic
  store %class.SkColorSpace* %40, %class.SkColorSpace** %60, align 8
  %69 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %9, i64 0, i32 2, i32 0, i32 1
  %70 = bitcast i32* %69 to i64*
  store i64 %51, i64* %70, align 8
  %71 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %9, i64 0, i32 2, i32 1
  %72 = bitcast %struct.SkISize* %71 to i64*
  store i64 %38, i64* %72, align 8
  %73 = atomicrmw add i32* %67, i32 -1 acq_rel
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %75, label %77

75:                                               ; preds = %66
  %76 = bitcast %class.SkColorSpace* %40 to i8*
  call void @_ZdlPv(i8* %76) #7
  br label %77

77:                                               ; preds = %61, %66, %75
  %78 = bitcast %class.sk_sp.8* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #6
  %79 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %10, i64 0, i32 0
  store %class.SkImage* inttoptr (i64 -6148914691236517206 to %class.SkImage*), %class.SkImage** %79, align 8
  call void @_ZN7SkImage14MakeFromRasterERK8SkPixmapPFvPKvPvES5_(%class.sk_sp.8* nonnull sret %10, %class.SkPixmap* nonnull dereferenceable(40) %9, void (i8*, i8*)* null, i8* null) #6
  %80 = load %class.SkSurface*, %class.SkSurface** %27, align 8
  %81 = call %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface* %80) #6
  %82 = load %class.SkImage*, %class.SkImage** %79, align 8
  %83 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %83) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %83, i8 0, i64 20, i1 false) #6
  call void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas* %81, %class.SkImage* %82, float 0.000000e+00, float 0.000000e+00, %struct.SkSamplingOptions* nonnull dereferenceable(20) %5, %class.SkPaint* null) #6
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %83) #6
  %84 = load %class.SkSurface*, %class.SkSurface** %27, align 8
  call void @_ZN9SkSurface14flushAndSubmitEb(%class.SkSurface* %84, i1 zeroext false) #6
  %85 = load %class.SkImage*, %class.SkImage** %79, align 8
  %86 = icmp eq %class.SkImage* %85, null
  br i1 %86, label %97, label %87

87:                                               ; preds = %77
  %88 = getelementptr inbounds %class.SkImage, %class.SkImage* %85, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = atomicrmw add i32* %88, i32 -1 acq_rel
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %97

91:                                               ; preds = %87
  %92 = bitcast %class.SkImage* %85 to %class.SkRefCntBase*
  %93 = bitcast %class.SkImage* %85 to void (%class.SkRefCntBase*)***
  %94 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %93, align 8
  %95 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %94, i64 2
  %96 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %95, align 8
  call void %96(%class.SkRefCntBase* nonnull %92) #6
  br label %97

97:                                               ; preds = %77, %87, %91
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #6
  %98 = load %class.SkColorSpace*, %class.SkColorSpace** %60, align 8
  %99 = icmp eq %class.SkColorSpace* %98, null
  br i1 %99, label %106, label %100

100:                                              ; preds = %97
  %101 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = atomicrmw add i32* %101, i32 -1 acq_rel
  %103 = icmp eq i32 %102, 1
  br i1 %103, label %104, label %106

104:                                              ; preds = %100
  %105 = bitcast %class.SkColorSpace* %98 to i8*
  call void @_ZdlPv(i8* %105) #7
  br label %106

106:                                              ; preds = %97, %100, %104
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %37) #6
  %107 = load %class.SkSurface*, %class.SkSurface** %27, align 8
  %108 = icmp eq %class.SkSurface* %107, null
  br i1 %108, label %119, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %107, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = atomicrmw add i32* %110, i32 -1 acq_rel
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %113, label %119

113:                                              ; preds = %109
  %114 = bitcast %class.SkSurface* %107 to %class.SkRefCntBase*
  %115 = bitcast %class.SkSurface* %107 to void (%class.SkRefCntBase*)***
  %116 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %115, align 8
  %117 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %116, i64 2
  %118 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %117, align 8
  call void %118(%class.SkRefCntBase* nonnull %114) #6
  br label %119

119:                                              ; preds = %106, %109, %113
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #6
  %120 = load %class.SkColorSpace*, %class.SkColorSpace** %12, align 8
  %121 = icmp eq %class.SkColorSpace* %120, null
  br i1 %121, label %128, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = atomicrmw add i32* %123, i32 -1 acq_rel
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %128

126:                                              ; preds = %122
  %127 = bitcast %class.SkColorSpace* %120 to i8*
  call void @_ZdlPv(i8* %127) #7
  br label %128

128:                                              ; preds = %119, %122, %126
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame31BlendRGBAPremultipliedF16BufferEPmS1_m(i64*, i64*, i64) local_unnamed_addr #0 align 2 {
  tail call fastcc void @_ZN5blinkL18BlendRGBAF16BufferEPmS0_m11SkAlphaType(i64* %0, i64* %1, i64 %2, i32 2)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame12BlendRGBARawEPjjjjj(i32* nocapture, i32, i32, i32, i32) local_unnamed_addr #4 align 2 {
  %6 = shl i32 %4, 24
  %7 = shl i32 %1, 16
  %8 = shl i32 %2, 8
  %9 = or i32 %8, %7
  %10 = or i32 %9, %3
  %11 = or i32 %10, %6
  %12 = load i32, i32* %0, align 4
  %13 = lshr i32 %11, 24
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %55, label %15

15:                                               ; preds = %5
  %16 = lshr i32 %12, 24
  %17 = sub nuw nsw i32 256, %13
  %18 = mul nuw nsw i32 %16, %17
  %19 = lshr i32 %18, 8
  %20 = add nuw nsw i32 %19, %13
  %21 = and i32 %20, 255
  %22 = udiv i32 16777216, %21
  %23 = lshr i32 %10, 16
  %24 = lshr i32 %12, 16
  %25 = and i32 %23, 255
  %26 = mul nuw nsw i32 %25, %13
  %27 = and i32 %24, 255
  %28 = and i32 %19, 255
  %29 = mul nuw nsw i32 %28, %27
  %30 = add nuw nsw i32 %29, %26
  %31 = mul i32 %22, %30
  %32 = lshr i32 %31, 24
  %33 = lshr i32 %10, 8
  %34 = lshr i32 %12, 8
  %35 = and i32 %33, 255
  %36 = mul nuw nsw i32 %35, %13
  %37 = and i32 %34, 255
  %38 = mul nuw nsw i32 %28, %37
  %39 = add nuw nsw i32 %38, %36
  %40 = mul i32 %22, %39
  %41 = lshr i32 %40, 24
  %42 = and i32 %3, 255
  %43 = mul nuw nsw i32 %13, %42
  %44 = and i32 %12, 255
  %45 = mul nuw nsw i32 %28, %44
  %46 = add nuw nsw i32 %45, %43
  %47 = mul i32 %22, %46
  %48 = lshr i32 %47, 24
  %49 = shl i32 %20, 24
  %50 = shl nuw nsw i32 %32, 16
  %51 = shl nuw nsw i32 %41, 8
  %52 = or i32 %48, %49
  %53 = or i32 %52, %50
  %54 = or i32 %53, %51
  br label %55

55:                                               ; preds = %5, %15
  %56 = phi i32 [ %54, %15 ], [ %12, %5 ]
  store i32 %56, i32* %0, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink10ImageFrame18BlendSrcOverDstRawEPjj(i32* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = load i32, i32* %0, align 4
  %4 = lshr i32 %3, 24
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %46, label %6

6:                                                ; preds = %2
  %7 = lshr i32 %1, 24
  %8 = sub nuw nsw i32 256, %4
  %9 = mul nuw nsw i32 %8, %7
  %10 = lshr i32 %9, 8
  %11 = add nuw nsw i32 %10, %4
  %12 = and i32 %11, 255
  %13 = udiv i32 16777216, %12
  %14 = lshr i32 %3, 16
  %15 = lshr i32 %1, 16
  %16 = and i32 %14, 255
  %17 = mul nuw nsw i32 %16, %4
  %18 = and i32 %15, 255
  %19 = and i32 %10, 255
  %20 = mul nuw nsw i32 %19, %18
  %21 = add nuw nsw i32 %20, %17
  %22 = mul i32 %13, %21
  %23 = lshr i32 %22, 24
  %24 = lshr i32 %3, 8
  %25 = lshr i32 %1, 8
  %26 = and i32 %24, 255
  %27 = mul nuw nsw i32 %26, %4
  %28 = and i32 %25, 255
  %29 = mul nuw nsw i32 %19, %28
  %30 = add nuw nsw i32 %29, %27
  %31 = mul i32 %13, %30
  %32 = lshr i32 %31, 24
  %33 = and i32 %3, 255
  %34 = mul nuw nsw i32 %4, %33
  %35 = and i32 %1, 255
  %36 = mul nuw nsw i32 %19, %35
  %37 = add nuw nsw i32 %36, %34
  %38 = mul i32 %13, %37
  %39 = lshr i32 %38, 24
  %40 = shl i32 %11, 24
  %41 = shl nuw nsw i32 %23, 16
  %42 = shl nuw nsw i32 %32, 8
  %43 = or i32 %39, %40
  %44 = or i32 %43, %41
  %45 = or i32 %44, %42
  br label %46

46:                                               ; preds = %2, %6
  %47 = phi i32 [ %45, %6 ], [ %1, %2 ]
  store i32 %47, i32* %0, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN8SkBitmap14tryAllocPixelsERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #1

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZNK8SkBitmap19notifyPixelsChangedEv(%class.SkBitmap*) local_unnamed_addr #1

declare void @_ZNK8SkBitmap5eraseEjRK7SkIRect(%class.SkBitmap*, i32, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN12SkColorSpace14MakeSRGBLinearEv(%class.sk_sp.0* sret) local_unnamed_addr #1

declare void @_ZN9SkSurface16MakeRasterDirectERK11SkImageInfoPvmPK14SkSurfaceProps(%class.sk_sp.9* sret, %struct.SkImageInfo* dereferenceable(24), i8*, i64, %class.SkSurfaceProps*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN7SkImage14MakeFromRasterERK8SkPixmapPFvPKvPvES5_(%class.sk_sp.8* sret, %class.SkPixmap* dereferenceable(40), void (i8*, i8*)*, i8*) local_unnamed_addr #1

declare %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface*) local_unnamed_addr #1

declare void @_ZN9SkSurface14flushAndSubmitEb(%class.SkSurface*, i1 zeroext) local_unnamed_addr #1

declare void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas*, %class.SkImage*, float, float, %struct.SkSamplingOptions* dereferenceable(20), %class.SkPaint*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!5 = distinct !{!5, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!6 = distinct !{!6, !7, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!7 = distinct !{!7, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE"}
!8 = !{!9, !11, !13}
!9 = distinct !{!9, !10, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!10 = distinct !{!10, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!11 = distinct !{!11, !12, !"_ZNK11SkColorInfo13makeColorTypeE11SkColorType: argument 0"}
!12 = distinct !{!12, !"_ZNK11SkColorInfo13makeColorTypeE11SkColorType"}
!13 = distinct !{!13, !14, !"_ZNK11SkImageInfo13makeColorTypeE11SkColorType: argument 0"}
!14 = distinct !{!14, !"_ZNK11SkImageInfo13makeColorTypeE11SkColorType"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!17 = distinct !{!17, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!20 = distinct !{!20, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType"}
!21 = !{!22, !19}
!22 = distinct !{!22, !23, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!23 = distinct !{!23, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType"}
!24 = !{!25, !22, !19}
!25 = distinct !{!25, !26, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!26 = distinct !{!26, !"_ZNK11SkColorInfo13refColorSpaceEv"}
