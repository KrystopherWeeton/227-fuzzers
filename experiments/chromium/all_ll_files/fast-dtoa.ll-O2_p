; ModuleID = '../../base/third_party/double_conversion/double-conversion/fast-dtoa.cc'
source_filename = "../../base/third_party/double_conversion/double-conversion/fast-dtoa.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.double_conversion::DiyFp" = type <{ i64, i32, [4 x i8] }>

@_ZN17double_conversionL17kSmallPowersOfTenE = internal unnamed_addr constant [11 x i32] [i32 0, i32 1, i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000, i32 1000000000], align 16

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN17double_conversion8FastDtoaEdNS_12FastDtoaModeEiNS_6VectorIcEEPiS3_(double, i32, i32, i8*, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %8 = alloca %"class.double_conversion::DiyFp", align 8
  %9 = alloca i32, align 4
  %10 = alloca %"class.double_conversion::DiyFp", align 8
  %11 = alloca i32, align 4
  switch i32 %1, label %580 [
    i32 0, label %12
    i32 1, label %12
    i32 2, label %354
  ]

12:                                               ; preds = %7, %7
  %13 = bitcast double %0 to i64
  %14 = and i64 %13, 4503599627370495
  %15 = and i64 %13, 9218868437227405312
  %16 = icmp eq i64 %15, 0
  %17 = or i64 %14, 4503599627370496
  %18 = select i1 %16, i64 %14, i64 %17
  br i1 %16, label %24, label %19

19:                                               ; preds = %12
  %20 = lshr i64 %13, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = add nsw i32 %22, -1075
  br label %24

24:                                               ; preds = %19, %12
  %25 = phi i32 [ %23, %19 ], [ -1074, %12 ]
  %26 = and i64 %18, 4503599627370496
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %35

28:                                               ; preds = %24, %28
  %29 = phi i32 [ %32, %28 ], [ %25, %24 ]
  %30 = phi i64 [ %31, %28 ], [ %18, %24 ]
  %31 = shl i64 %30, 1
  %32 = add nsw i32 %29, -1
  %33 = and i64 %30, 2251799813685248
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %28, label %35

35:                                               ; preds = %28, %24
  %36 = phi i64 [ %18, %24 ], [ %31, %28 ]
  %37 = phi i32 [ %25, %24 ], [ %32, %28 ]
  %38 = shl i64 %36, 11
  %39 = icmp eq i32 %1, 0
  br i1 %39, label %40, label %76

40:                                               ; preds = %35
  br i1 %16, label %46, label %41

41:                                               ; preds = %40
  %42 = lshr i64 %13, 52
  %43 = trunc i64 %42 to i32
  %44 = and i32 %43, 2047
  %45 = add nsw i32 %44, -1075
  br label %46

46:                                               ; preds = %41, %40
  %47 = phi i32 [ %45, %41 ], [ -1074, %40 ]
  %48 = shl nuw nsw i64 %18, 1
  %49 = or i64 %48, 1
  %50 = add nsw i32 %47, -1
  br label %53

51:                                               ; preds = %53
  %52 = icmp sgt i64 %56, -1
  br i1 %52, label %59, label %65

53:                                               ; preds = %53, %46
  %54 = phi i64 [ %56, %53 ], [ %49, %46 ]
  %55 = phi i32 [ %57, %53 ], [ %50, %46 ]
  %56 = shl i64 %54, 10
  %57 = add nsw i32 %55, -10
  %58 = icmp ult i64 %56, 18014398509481984
  br i1 %58, label %53, label %51

59:                                               ; preds = %51, %59
  %60 = phi i64 [ %62, %59 ], [ %56, %51 ]
  %61 = phi i32 [ %63, %59 ], [ %57, %51 ]
  %62 = shl i64 %60, 1
  %63 = add nsw i32 %61, -1
  %64 = icmp sgt i64 %62, -1
  br i1 %64, label %59, label %65

65:                                               ; preds = %59, %51
  %66 = phi i32 [ %57, %51 ], [ %63, %59 ]
  %67 = phi i64 [ %56, %51 ], [ %62, %59 ]
  %68 = icmp eq i64 %14, 0
  %69 = and i64 %13, 9214364837600034816
  %70 = icmp ne i64 %69, 0
  %71 = and i1 %68, %70
  %72 = shl nuw nsw i64 %18, 2
  %73 = add nsw i32 %47, -2
  %74 = select i1 %71, i64 %72, i64 %48
  %75 = select i1 %71, i32 %73, i32 %50
  br label %120

76:                                               ; preds = %35
  %77 = fptrunc double %0 to float
  %78 = bitcast float %77 to i32
  %79 = and i32 %78, 8388607
  %80 = and i32 %78, 2139095040
  %81 = icmp eq i32 %80, 0
  %82 = or i32 %79, 8388608
  %83 = select i1 %81, i32 %79, i32 %82
  br i1 %81, label %88, label %84

84:                                               ; preds = %76
  %85 = lshr i32 %78, 23
  %86 = and i32 %85, 255
  %87 = add nsw i32 %86, -150
  br label %88

88:                                               ; preds = %84, %76
  %89 = phi i32 [ %87, %84 ], [ -149, %76 ]
  %90 = shl nuw nsw i32 %83, 1
  %91 = zext i32 %90 to i64
  %92 = or i64 %91, 1
  %93 = add nsw i32 %89, -1
  br label %96

94:                                               ; preds = %96
  %95 = icmp sgt i64 %99, -1
  br i1 %95, label %102, label %108

96:                                               ; preds = %96, %88
  %97 = phi i64 [ %99, %96 ], [ %92, %88 ]
  %98 = phi i32 [ %100, %96 ], [ %93, %88 ]
  %99 = shl i64 %97, 10
  %100 = add nsw i32 %98, -10
  %101 = icmp ult i64 %99, 18014398509481984
  br i1 %101, label %96, label %94

102:                                              ; preds = %94, %102
  %103 = phi i64 [ %105, %102 ], [ %99, %94 ]
  %104 = phi i32 [ %106, %102 ], [ %100, %94 ]
  %105 = shl i64 %103, 1
  %106 = add nsw i32 %104, -1
  %107 = icmp sgt i64 %105, -1
  br i1 %107, label %102, label %108

108:                                              ; preds = %102, %94
  %109 = phi i32 [ %100, %94 ], [ %106, %102 ]
  %110 = phi i64 [ %99, %94 ], [ %105, %102 ]
  %111 = icmp eq i32 %79, 0
  %112 = and i32 %78, 2130706432
  %113 = icmp ne i32 %112, 0
  %114 = and i1 %111, %113
  %115 = shl nuw nsw i32 %83, 2
  %116 = zext i32 %115 to i64
  %117 = add nsw i32 %89, -2
  %118 = select i1 %114, i64 %116, i64 %91
  %119 = select i1 %114, i32 %117, i32 %93
  br label %120

120:                                              ; preds = %108, %65
  %121 = phi i64 [ %118, %108 ], [ %74, %65 ]
  %122 = phi i32 [ %109, %108 ], [ %66, %65 ]
  %123 = phi i32 [ %119, %108 ], [ %75, %65 ]
  %124 = phi i64 [ %110, %108 ], [ %67, %65 ]
  %125 = add nsw i64 %121, -1
  %126 = sub nsw i32 %123, %122
  %127 = zext i32 %126 to i64
  %128 = shl i64 %125, %127
  %129 = bitcast %"class.double_conversion::DiyFp"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %129) #4
  %130 = getelementptr inbounds %"class.double_conversion::DiyFp", %"class.double_conversion::DiyFp"* %10, i64 0, i32 0
  %131 = getelementptr inbounds %"class.double_conversion::DiyFp", %"class.double_conversion::DiyFp"* %10, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %129, i8 -86, i64 16, i1 false) #4
  store i64 0, i64* %130, align 8
  store i32 0, i32* %131, align 8
  %132 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %132) #4
  store i32 -1431655766, i32* %11, align 4
  %133 = sub i32 -113, %37
  %134 = sub i32 -85, %37
  call void @_ZN17double_conversion16PowersOfTenCache36GetCachedPowerForBinaryExponentRangeEiiPNS_5DiyFpEPi(i32 %133, i32 %134, %"class.double_conversion::DiyFp"* nonnull %10, i32* nonnull %11) #4
  %135 = lshr i64 %36, 21
  %136 = and i64 %135, 4294967295
  %137 = and i64 %38, 4294965248
  %138 = load i64, i64* %130, align 8
  %139 = lshr i64 %138, 32
  %140 = and i64 %138, 4294967295
  %141 = mul nuw i64 %139, %136
  %142 = mul nuw i64 %139, %137
  %143 = mul nuw i64 %140, %136
  %144 = mul nuw i64 %140, %137
  %145 = lshr i64 %144, 32
  %146 = and i64 %143, 4294967295
  %147 = and i64 %142, 4294965248
  %148 = add nuw nsw i64 %146, 2147483648
  %149 = add nuw nsw i64 %148, %145
  %150 = add nuw nsw i64 %149, %147
  %151 = load i32, i32* %131, align 8
  %152 = add i32 %37, 53
  %153 = add i32 %152, %151
  %154 = lshr i64 %143, 32
  %155 = add nuw i64 %154, %141
  %156 = lshr i64 %142, 32
  %157 = add nuw i64 %155, %156
  %158 = lshr i64 %150, 32
  %159 = add nuw i64 %157, %158
  %160 = lshr i64 %128, 32
  %161 = and i64 %128, 4294967295
  %162 = mul nuw i64 %139, %160
  %163 = mul nuw i64 %139, %161
  %164 = mul nuw i64 %140, %160
  %165 = mul nuw i64 %140, %161
  %166 = lshr i64 %165, 32
  %167 = and i64 %164, 4294967295
  %168 = and i64 %163, 4294967295
  %169 = add nuw nsw i64 %167, 2147483648
  %170 = add nuw nsw i64 %169, %166
  %171 = add nuw nsw i64 %170, %168
  %172 = lshr i64 %164, 32
  %173 = lshr i64 %163, 32
  %174 = lshr i64 %171, 32
  %175 = lshr i64 %124, 32
  %176 = and i64 %124, 4294967295
  %177 = mul nuw i64 %139, %175
  %178 = mul nuw i64 %139, %176
  %179 = mul nuw i64 %140, %175
  %180 = mul nuw i64 %140, %176
  %181 = lshr i64 %180, 32
  %182 = and i64 %179, 4294967295
  %183 = and i64 %178, 4294967295
  %184 = add nuw nsw i64 %182, 2147483648
  %185 = add nuw nsw i64 %184, %181
  %186 = add nuw nsw i64 %185, %183
  %187 = lshr i64 %179, 32
  %188 = lshr i64 %178, 32
  %189 = lshr i64 %186, 32
  %190 = add nuw i64 %177, 1
  %191 = add nuw i64 %190, %187
  %192 = add nuw i64 %191, %188
  %193 = add i64 %192, %189
  %194 = sub i64 1, %162
  %195 = sub i64 %194, %172
  %196 = sub i64 %195, %173
  %197 = sub i64 %196, %174
  %198 = add i64 %197, %193
  %199 = sub nsw i32 0, %153
  %200 = zext i32 %199 to i64
  %201 = shl i64 1, %200
  %202 = lshr i64 %193, %200
  %203 = trunc i64 %202 to i32
  %204 = add i64 %201, -1
  %205 = and i64 %193, %204
  %206 = mul i32 %153, 1233
  %207 = add i32 %206, 80145
  %208 = ashr i32 %207, 12
  %209 = add nsw i32 %208, 1
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZN17double_conversionL17kSmallPowersOfTenE, i64 0, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = icmp ugt i32 %212, %203
  %214 = select i1 %213, i32 %208, i32 %209
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZN17double_conversionL17kSmallPowersOfTenE, i64 0, i64 %215
  %217 = load i32, i32* %216, align 4
  store i32 0, i32* %5, align 4
  %218 = icmp sgt i32 %214, 0
  br i1 %218, label %222, label %219

219:                                              ; preds = %289, %120
  %220 = phi i32 [ 0, %120 ], [ %233, %289 ]
  %221 = phi i32 [ %214, %120 ], [ %235, %289 ]
  br label %293

222:                                              ; preds = %120, %291
  %223 = phi i32 [ %235, %291 ], [ %214, %120 ]
  %224 = phi i32 [ %233, %291 ], [ 0, %120 ]
  %225 = phi i32 [ %234, %291 ], [ %203, %120 ]
  %226 = phi i32 [ %292, %291 ], [ %217, %120 ]
  %227 = udiv i32 %225, %226
  %228 = trunc i32 %227 to i8
  %229 = add i8 %228, 48
  %230 = sext i32 %224 to i64
  %231 = getelementptr inbounds i8, i8* %3, i64 %230
  store i8 %229, i8* %231, align 1
  %232 = load i32, i32* %5, align 4
  %233 = add nsw i32 %232, 1
  store i32 %233, i32* %5, align 4
  %234 = urem i32 %225, %226
  %235 = add nsw i32 %223, -1
  %236 = zext i32 %234 to i64
  %237 = shl i64 %236, %200
  %238 = add i64 %237, %205
  %239 = icmp ugt i64 %198, %238
  br i1 %239, label %240, label %289

240:                                              ; preds = %222
  %241 = sub i64 %193, %159
  %242 = zext i32 %226 to i64
  %243 = shl i64 %242, %200
  %244 = add i64 %241, -1
  %245 = add i64 %241, 1
  %246 = icmp ule i64 %244, %238
  %247 = sub i64 %198, %238
  %248 = icmp ult i64 %247, %243
  %249 = or i1 %246, %248
  br i1 %249, label %268, label %250

250:                                              ; preds = %240
  %251 = sext i32 %232 to i64
  %252 = getelementptr inbounds i8, i8* %3, i64 %251
  br label %253

253:                                              ; preds = %261, %250
  %254 = phi i64 [ %238, %250 ], [ %255, %261 ]
  %255 = add i64 %254, %243
  %256 = icmp ult i64 %255, %244
  br i1 %256, label %261, label %257

257:                                              ; preds = %253
  %258 = sub i64 %244, %254
  %259 = sub i64 %255, %244
  %260 = icmp ult i64 %258, %259
  br i1 %260, label %268, label %261

261:                                              ; preds = %257, %253
  %262 = load i8, i8* %252, align 1
  %263 = add i8 %262, -1
  store i8 %263, i8* %252, align 1
  %264 = icmp uge i64 %255, %244
  %265 = sub i64 %198, %255
  %266 = icmp ult i64 %265, %243
  %267 = or i1 %264, %266
  br i1 %267, label %268, label %253

268:                                              ; preds = %261, %257, %240
  %269 = phi i64 [ %238, %240 ], [ %254, %257 ], [ %255, %261 ]
  %270 = phi i1 [ %248, %240 ], [ false, %257 ], [ %266, %261 ]
  %271 = icmp ule i64 %245, %269
  %272 = or i1 %271, %270
  br i1 %272, label %282, label %273

273:                                              ; preds = %268
  %274 = add i64 %269, %243
  %275 = icmp ult i64 %274, %245
  br i1 %275, label %581, label %276

276:                                              ; preds = %273
  %277 = sub i64 %245, %269
  %278 = sub i64 %274, %245
  %279 = icmp ugt i64 %277, %278
  %280 = icmp ult i64 %269, 2
  %281 = or i1 %280, %279
  br i1 %281, label %581, label %284

282:                                              ; preds = %268
  %283 = icmp ult i64 %269, 2
  br i1 %283, label %581, label %284

284:                                              ; preds = %282, %276
  %285 = add i64 %198, -4
  %286 = icmp ugt i64 %269, %285
  %287 = load i32, i32* %11, align 4
  %288 = sub i32 %235, %287
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %132) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %129) #4
  br i1 %286, label %595, label %588

289:                                              ; preds = %222
  %290 = icmp sgt i32 %235, 0
  br i1 %290, label %291, label %219

291:                                              ; preds = %289
  %292 = udiv i32 %226, 10
  br label %222

293:                                              ; preds = %219, %293
  %294 = phi i32 [ %308, %293 ], [ %220, %219 ]
  %295 = phi i32 [ %310, %293 ], [ %221, %219 ]
  %296 = phi i64 [ %301, %293 ], [ %198, %219 ]
  %297 = phi i64 [ %309, %293 ], [ %205, %219 ]
  %298 = phi i64 [ %300, %293 ], [ 1, %219 ]
  %299 = mul i64 %297, 10
  %300 = mul i64 %298, 10
  %301 = mul i64 %296, 10
  %302 = lshr i64 %299, %200
  %303 = trunc i64 %302 to i8
  %304 = add i8 %303, 48
  %305 = sext i32 %294 to i64
  %306 = getelementptr inbounds i8, i8* %3, i64 %305
  store i8 %304, i8* %306, align 1
  %307 = load i32, i32* %5, align 4
  %308 = add nsw i32 %307, 1
  store i32 %308, i32* %5, align 4
  %309 = and i64 %299, %204
  %310 = add nsw i32 %295, -1
  %311 = icmp ugt i64 %301, %309
  br i1 %311, label %312, label %293

312:                                              ; preds = %293
  %313 = sub i64 %193, %159
  %314 = mul i64 %300, %313
  %315 = sub i64 %314, %300
  %316 = add i64 %314, %300
  %317 = icmp ule i64 %315, %309
  %318 = sub i64 %301, %309
  %319 = icmp ult i64 %318, %201
  %320 = or i1 %319, %317
  br i1 %320, label %339, label %321

321:                                              ; preds = %312
  %322 = sext i32 %307 to i64
  %323 = getelementptr inbounds i8, i8* %3, i64 %322
  br label %324

324:                                              ; preds = %332, %321
  %325 = phi i64 [ %309, %321 ], [ %326, %332 ]
  %326 = add i64 %325, %201
  %327 = icmp ult i64 %326, %315
  br i1 %327, label %332, label %328

328:                                              ; preds = %324
  %329 = sub i64 %315, %325
  %330 = sub i64 %326, %315
  %331 = icmp ult i64 %329, %330
  br i1 %331, label %339, label %332

332:                                              ; preds = %328, %324
  %333 = load i8, i8* %323, align 1
  %334 = add i8 %333, -1
  store i8 %334, i8* %323, align 1
  %335 = icmp uge i64 %326, %315
  %336 = sub i64 %301, %326
  %337 = icmp ult i64 %336, %201
  %338 = or i1 %335, %337
  br i1 %338, label %339, label %324

339:                                              ; preds = %332, %328, %312
  %340 = phi i64 [ %309, %312 ], [ %325, %328 ], [ %326, %332 ]
  %341 = phi i1 [ %319, %312 ], [ false, %328 ], [ %337, %332 ]
  %342 = icmp ule i64 %316, %340
  %343 = or i1 %342, %341
  br i1 %343, label %351, label %344

344:                                              ; preds = %339
  %345 = add i64 %340, %201
  %346 = icmp ult i64 %345, %316
  br i1 %346, label %581, label %347

347:                                              ; preds = %344
  %348 = sub i64 %316, %340
  %349 = sub i64 %345, %316
  %350 = icmp ugt i64 %348, %349
  br i1 %350, label %581, label %351

351:                                              ; preds = %347, %339
  %352 = mul i64 %298, 20
  %353 = icmp ugt i64 %352, %340
  br i1 %353, label %581, label %582

354:                                              ; preds = %7
  %355 = bitcast double %0 to i64
  %356 = and i64 %355, 4503599627370495
  %357 = and i64 %355, 9218868437227405312
  %358 = icmp eq i64 %357, 0
  %359 = or i64 %356, 4503599627370496
  %360 = select i1 %358, i64 %356, i64 %359
  br i1 %358, label %366, label %361

361:                                              ; preds = %354
  %362 = lshr i64 %355, 52
  %363 = trunc i64 %362 to i32
  %364 = and i32 %363, 2047
  %365 = add nsw i32 %364, -1075
  br label %366

366:                                              ; preds = %361, %354
  %367 = phi i32 [ %365, %361 ], [ -1074, %354 ]
  %368 = and i64 %360, 4503599627370496
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %370, label %377

370:                                              ; preds = %366, %370
  %371 = phi i32 [ %374, %370 ], [ %367, %366 ]
  %372 = phi i64 [ %373, %370 ], [ %360, %366 ]
  %373 = shl i64 %372, 1
  %374 = add nsw i32 %371, -1
  %375 = and i64 %372, 2251799813685248
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %370, label %377

377:                                              ; preds = %370, %366
  %378 = phi i64 [ %360, %366 ], [ %373, %370 ]
  %379 = phi i32 [ %367, %366 ], [ %374, %370 ]
  %380 = shl i64 %378, 11
  %381 = bitcast %"class.double_conversion::DiyFp"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %381) #4
  %382 = getelementptr inbounds %"class.double_conversion::DiyFp", %"class.double_conversion::DiyFp"* %8, i64 0, i32 0
  %383 = getelementptr inbounds %"class.double_conversion::DiyFp", %"class.double_conversion::DiyFp"* %8, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %381, i8 -86, i64 16, i1 false) #4
  store i64 0, i64* %382, align 8
  store i32 0, i32* %383, align 8
  %384 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %384) #4
  store i32 -1431655766, i32* %9, align 4
  %385 = sub i32 -113, %379
  %386 = sub i32 -85, %379
  call void @_ZN17double_conversion16PowersOfTenCache36GetCachedPowerForBinaryExponentRangeEiiPNS_5DiyFpEPi(i32 %385, i32 %386, %"class.double_conversion::DiyFp"* nonnull %8, i32* nonnull %9) #4
  %387 = lshr i64 %378, 21
  %388 = and i64 %387, 4294967295
  %389 = and i64 %380, 4294965248
  %390 = load i64, i64* %382, align 8
  %391 = lshr i64 %390, 32
  %392 = and i64 %390, 4294967295
  %393 = mul nuw i64 %391, %388
  %394 = mul nuw i64 %391, %389
  %395 = mul nuw i64 %392, %388
  %396 = mul nuw i64 %392, %389
  %397 = lshr i64 %396, 32
  %398 = and i64 %395, 4294967295
  %399 = and i64 %394, 4294965248
  %400 = add nuw nsw i64 %398, 2147483648
  %401 = add nuw nsw i64 %400, %397
  %402 = add nuw nsw i64 %401, %399
  %403 = load i32, i32* %383, align 8
  %404 = add i32 %379, 53
  %405 = add i32 %404, %403
  %406 = lshr i64 %395, 32
  %407 = add nuw i64 %406, %393
  %408 = lshr i64 %394, 32
  %409 = add nuw i64 %407, %408
  %410 = lshr i64 %402, 32
  %411 = add nuw i64 %409, %410
  %412 = sub nsw i32 0, %405
  %413 = zext i32 %412 to i64
  %414 = shl i64 1, %413
  %415 = lshr i64 %411, %413
  %416 = trunc i64 %415 to i32
  %417 = add i64 %414, -1
  %418 = and i64 %411, %417
  %419 = mul i32 %405, 1233
  %420 = add i32 %419, 80145
  %421 = ashr i32 %420, 12
  %422 = add nsw i32 %421, 1
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZN17double_conversionL17kSmallPowersOfTenE, i64 0, i64 %423
  %425 = load i32, i32* %424, align 4
  %426 = icmp ugt i32 %425, %416
  %427 = select i1 %426, i32 %421, i32 %422
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZN17double_conversionL17kSmallPowersOfTenE, i64 0, i64 %428
  %430 = load i32, i32* %429, align 4
  store i32 0, i32* %5, align 4
  %431 = icmp sgt i32 %427, 0
  br i1 %431, label %432, label %453

432:                                              ; preds = %377, %451
  %433 = phi i32 [ %447, %451 ], [ %427, %377 ]
  %434 = phi i32 [ %444, %451 ], [ 0, %377 ]
  %435 = phi i32 [ %445, %451 ], [ %2, %377 ]
  %436 = phi i32 [ %446, %451 ], [ %416, %377 ]
  %437 = phi i32 [ %452, %451 ], [ %430, %377 ]
  %438 = udiv i32 %436, %437
  %439 = trunc i32 %438 to i8
  %440 = add i8 %439, 48
  %441 = sext i32 %434 to i64
  %442 = getelementptr inbounds i8, i8* %3, i64 %441
  store i8 %440, i8* %442, align 1
  %443 = load i32, i32* %5, align 4
  %444 = add nsw i32 %443, 1
  store i32 %444, i32* %5, align 4
  %445 = add nsw i32 %435, -1
  %446 = urem i32 %436, %437
  %447 = add nsw i32 %433, -1
  %448 = icmp eq i32 %445, 0
  br i1 %448, label %462, label %449

449:                                              ; preds = %432
  %450 = icmp sgt i32 %447, 0
  br i1 %450, label %451, label %455

451:                                              ; preds = %449
  %452 = udiv i32 %437, 10
  br label %432

453:                                              ; preds = %377
  %454 = icmp eq i32 %2, 0
  br i1 %454, label %462, label %455

455:                                              ; preds = %449, %453
  %456 = phi i32 [ 0, %453 ], [ %444, %449 ]
  %457 = phi i32 [ %427, %453 ], [ %447, %449 ]
  %458 = phi i32 [ %2, %453 ], [ %445, %449 ]
  %459 = icmp sgt i32 %458, 0
  %460 = icmp ugt i64 %418, 1
  %461 = and i1 %460, %459
  br i1 %461, label %508, label %572

462:                                              ; preds = %432, %453
  %463 = phi i32 [ -1, %453 ], [ %443, %432 ]
  %464 = phi i32 [ %427, %453 ], [ %447, %432 ]
  %465 = phi i32 [ %430, %453 ], [ %437, %432 ]
  %466 = phi i32 [ %416, %453 ], [ %446, %432 ]
  %467 = zext i32 %466 to i64
  %468 = shl i64 %467, %413
  %469 = add i64 %468, %418
  %470 = zext i32 %465 to i64
  %471 = shl i64 %470, %413
  %472 = icmp ult i64 %471, 3
  br i1 %472, label %572, label %473

473:                                              ; preds = %462
  %474 = sub i64 %471, %469
  %475 = icmp ugt i64 %474, %469
  br i1 %475, label %476, label %480

476:                                              ; preds = %473
  %477 = shl i64 %469, 1
  %478 = sub i64 %471, %477
  %479 = icmp ult i64 %478, 2
  br i1 %479, label %480, label %573

480:                                              ; preds = %476, %473
  %481 = icmp ugt i64 %469, 1
  br i1 %481, label %482, label %572

482:                                              ; preds = %480
  %483 = add i64 %469, -1
  %484 = sub i64 %471, %483
  %485 = icmp ugt i64 %484, %483
  br i1 %485, label %572, label %486

486:                                              ; preds = %482
  %487 = sext i32 %463 to i64
  %488 = getelementptr inbounds i8, i8* %3, i64 %487
  %489 = load i8, i8* %488, align 1
  %490 = add i8 %489, 1
  store i8 %490, i8* %488, align 1
  %491 = icmp sgt i32 %463, 0
  br i1 %491, label %492, label %503

492:                                              ; preds = %486, %496
  %493 = phi i8 [ %501, %496 ], [ %490, %486 ]
  %494 = phi i64 [ %498, %496 ], [ %487, %486 ]
  %495 = icmp eq i8 %493, 58
  br i1 %495, label %496, label %503

496:                                              ; preds = %492
  %497 = getelementptr inbounds i8, i8* %3, i64 %494
  store i8 48, i8* %497, align 1
  %498 = add nsw i64 %494, -1
  %499 = getelementptr inbounds i8, i8* %3, i64 %498
  %500 = load i8, i8* %499, align 1
  %501 = add i8 %500, 1
  store i8 %501, i8* %499, align 1
  %502 = icmp sgt i64 %498, 0
  br i1 %502, label %492, label %503

503:                                              ; preds = %496, %492, %486
  %504 = load i8, i8* %3, align 1
  %505 = icmp eq i8 %504, 58
  br i1 %505, label %506, label %573

506:                                              ; preds = %503
  store i8 49, i8* %3, align 1
  %507 = add nsw i32 %464, 1
  br label %573

508:                                              ; preds = %455, %508
  %509 = phi i32 [ %522, %508 ], [ %456, %455 ]
  %510 = phi i32 [ %525, %508 ], [ %457, %455 ]
  %511 = phi i32 [ %523, %508 ], [ %458, %455 ]
  %512 = phi i64 [ %515, %508 ], [ 1, %455 ]
  %513 = phi i64 [ %524, %508 ], [ %418, %455 ]
  %514 = mul i64 %513, 10
  %515 = mul i64 %512, 10
  %516 = lshr i64 %514, %413
  %517 = trunc i64 %516 to i8
  %518 = add i8 %517, 48
  %519 = sext i32 %509 to i64
  %520 = getelementptr inbounds i8, i8* %3, i64 %519
  store i8 %518, i8* %520, align 1
  %521 = load i32, i32* %5, align 4
  %522 = add nsw i32 %521, 1
  store i32 %522, i32* %5, align 4
  %523 = add nsw i32 %511, -1
  %524 = and i64 %514, %417
  %525 = add nsw i32 %510, -1
  %526 = icmp sgt i32 %523, 0
  %527 = icmp ugt i64 %524, %515
  %528 = and i1 %526, %527
  br i1 %528, label %508, label %529

529:                                              ; preds = %508
  %530 = icmp eq i32 %523, 0
  br i1 %530, label %531, label %572

531:                                              ; preds = %529
  %532 = icmp ugt i64 %414, %515
  %533 = sub i64 %414, %515
  %534 = icmp ugt i64 %533, %515
  %535 = and i1 %532, %534
  br i1 %535, label %536, label %572

536:                                              ; preds = %531
  %537 = sub i64 %414, %524
  %538 = icmp ugt i64 %537, %524
  br i1 %538, label %539, label %546

539:                                              ; preds = %536
  %540 = shl i64 %524, 1
  %541 = sub i64 %414, %540
  %542 = mul i64 %512, 20
  %543 = icmp uge i64 %541, %542
  %544 = xor i1 %527, true
  %545 = or i1 %543, %544
  br i1 %545, label %577, label %547

546:                                              ; preds = %536
  br i1 %527, label %547, label %572

547:                                              ; preds = %546, %539
  %548 = sub i64 %524, %515
  %549 = sub i64 %414, %548
  %550 = icmp ugt i64 %549, %548
  br i1 %550, label %572, label %551

551:                                              ; preds = %547
  %552 = sext i32 %521 to i64
  %553 = getelementptr inbounds i8, i8* %3, i64 %552
  %554 = load i8, i8* %553, align 1
  %555 = add i8 %554, 1
  store i8 %555, i8* %553, align 1
  %556 = icmp sgt i32 %521, 0
  br i1 %556, label %557, label %568

557:                                              ; preds = %551, %561
  %558 = phi i8 [ %566, %561 ], [ %555, %551 ]
  %559 = phi i64 [ %563, %561 ], [ %552, %551 ]
  %560 = icmp eq i8 %558, 58
  br i1 %560, label %561, label %568

561:                                              ; preds = %557
  %562 = getelementptr inbounds i8, i8* %3, i64 %559
  store i8 48, i8* %562, align 1
  %563 = add nsw i64 %559, -1
  %564 = getelementptr inbounds i8, i8* %3, i64 %563
  %565 = load i8, i8* %564, align 1
  %566 = add i8 %565, 1
  store i8 %566, i8* %564, align 1
  %567 = icmp sgt i64 %563, 0
  br i1 %567, label %557, label %568

568:                                              ; preds = %561, %557, %551
  %569 = load i8, i8* %3, align 1
  %570 = icmp eq i8 %569, 58
  br i1 %570, label %571, label %573

571:                                              ; preds = %568
  store i8 49, i8* %3, align 1
  br label %573

572:                                              ; preds = %462, %482, %480, %547, %546, %531, %529, %455
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %384) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %381) #4
  br label %595

573:                                              ; preds = %506, %503, %476, %571, %568
  %574 = phi i32 [ %525, %568 ], [ %510, %571 ], [ %464, %476 ], [ %464, %503 ], [ %507, %506 ]
  %575 = load i32, i32* %9, align 4
  %576 = sub i32 %574, %575
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %384) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %381) #4
  br label %588

577:                                              ; preds = %539
  %578 = load i32, i32* %9, align 4
  %579 = sub i32 %525, %578
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %384) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %381) #4
  br i1 %543, label %588, label %595

580:                                              ; preds = %7
  tail call void @abort() #5
  unreachable

581:                                              ; preds = %282, %273, %276, %351, %344, %347
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %132) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %129) #4
  br label %595

582:                                              ; preds = %351
  %583 = mul i64 %298, -40
  %584 = add i64 %583, %301
  %585 = icmp ugt i64 %340, %584
  %586 = load i32, i32* %11, align 4
  %587 = sub i32 %310, %586
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %132) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %129) #4
  br i1 %585, label %595, label %588

588:                                              ; preds = %284, %582, %573, %577
  %589 = phi i32 [ %579, %577 ], [ %587, %582 ], [ %288, %284 ], [ %576, %573 ]
  %590 = load i32, i32* %5, align 4
  %591 = add nsw i32 %590, %589
  store i32 %591, i32* %6, align 4
  %592 = load i32, i32* %5, align 4
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds i8, i8* %3, i64 %593
  store i8 0, i8* %594, align 1
  br label %595

595:                                              ; preds = %284, %582, %572, %581, %577, %588
  %596 = phi i1 [ false, %577 ], [ true, %588 ], [ false, %582 ], [ false, %581 ], [ false, %284 ], [ false, %572 ]
  ret i1 %596
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN17double_conversion16PowersOfTenCache36GetCachedPowerForBinaryExponentRangeEiiPNS_5DiyFpEPi(i32, i32, %"class.double_conversion::DiyFp"*, i32*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
