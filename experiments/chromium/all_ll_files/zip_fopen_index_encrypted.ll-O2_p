; ModuleID = '../../third_party/libzip/src/lib/zip_fopen_index_encrypted.c'
source_filename = "../../third_party/libzip/src/lib/zip_fopen_index_encrypted.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_file = type { %struct.zip*, %struct.zip_error, i8, %struct.zip_source* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_file* @zip_fopen_index_encrypted(%struct.zip*, i64, i32, i8*) local_unnamed_addr #0 {
  %5 = tail call %struct.zip_source* @_zip_source_zip_new(%struct.zip* %0, %struct.zip* %0, i64 %1, i32 %2, i64 0, i64 0, i8* %3) #3
  %6 = icmp eq %struct.zip_source* %5, null
  br i1 %6, label %25, label %7

7:                                                ; preds = %4
  %8 = tail call i32 @zip_source_open(%struct.zip_source* nonnull %5) #3
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @_zip_error_set_from_source(%struct.zip_error* %11, %struct.zip_source* nonnull %5) #3
  tail call void @zip_source_free(%struct.zip_source* nonnull %5) #3
  br label %25

12:                                               ; preds = %7
  %13 = tail call noalias i8* @malloc(i64 40) #3
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %16, i32 14, i32 0) #3
  tail call void @zip_source_free(%struct.zip_source* nonnull %5) #3
  br label %25

17:                                               ; preds = %12
  %18 = bitcast i8* %13 to %struct.zip**
  store %struct.zip* %0, %struct.zip** %18, align 8
  %19 = getelementptr inbounds i8, i8* %13, i64 8
  %20 = bitcast i8* %19 to %struct.zip_error*
  tail call void @zip_error_init(%struct.zip_error* %20) #3
  %21 = getelementptr inbounds i8, i8* %13, i64 24
  store i8 0, i8* %21, align 8
  %22 = getelementptr inbounds i8, i8* %13, i64 32
  %23 = bitcast i8* %22 to %struct.zip_source**
  %24 = bitcast i8* %13 to %struct.zip_file*
  store %struct.zip_source* %5, %struct.zip_source** %23, align 8
  br label %25

25:                                               ; preds = %4, %17, %15, %10
  %26 = phi %struct.zip_file* [ null, %10 ], [ null, %15 ], [ %24, %17 ], [ null, %4 ]
  ret %struct.zip_file* %26
}

declare %struct.zip_source* @_zip_source_zip_new(%struct.zip*, %struct.zip*, i64, i32, i64, i64, i8*) local_unnamed_addr #1

declare i32 @zip_source_open(%struct.zip_source*) local_unnamed_addr #1

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #1

declare void @zip_source_free(%struct.zip_source*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare void @zip_error_init(%struct.zip_error*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
