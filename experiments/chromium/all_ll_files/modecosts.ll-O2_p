; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/modecosts.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/modecosts.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }

@vp8_bmode_tree = external constant [0 x i8], align 1
@vp8_kf_bmode_prob = external constant [10 x [10 x [9 x i8]]], align 16
@vp8_sub_mv_ref_tree = external constant [0 x i8], align 1
@vp8_ymode_tree = external constant [0 x i8], align 1
@vp8_kf_ymode_prob = external constant [4 x i8], align 1
@vp8_kf_ymode_tree = external constant [0 x i8], align 1
@vp8_uv_mode_tree = external constant [0 x i8], align 1
@vp8_kf_uv_mode_prob = external constant [3 x i8], align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_init_mode_costs(%struct.VP8_COMP*) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i64 [ %24, %2 ], [ 0, %1 ]
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 0, i64 0
  %5 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 0, i64 0
  tail call void @vp8_cost_tokens(i32* %4, i8* %5, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 1, i64 0
  %7 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 1, i64 0
  tail call void @vp8_cost_tokens(i32* %6, i8* %7, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 2, i64 0
  %9 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 2, i64 0
  tail call void @vp8_cost_tokens(i32* %8, i8* %9, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 3, i64 0
  %11 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 3, i64 0
  tail call void @vp8_cost_tokens(i32* %10, i8* %11, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 4, i64 0
  %13 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 4, i64 0
  tail call void @vp8_cost_tokens(i32* %12, i8* %13, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 5, i64 0
  %15 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 5, i64 0
  tail call void @vp8_cost_tokens(i32* %14, i8* %15, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 6, i64 0
  %17 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 6, i64 0
  tail call void @vp8_cost_tokens(i32* %16, i8* %17, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 7, i64 0
  %19 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 7, i64 0
  tail call void @vp8_cost_tokens(i32* %18, i8* %19, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 8, i64 0
  %21 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 8, i64 0
  tail call void @vp8_cost_tokens(i32* %20, i8* %21, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %22 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 4, i64 %3, i64 9, i64 0
  %23 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %3, i64 9, i64 0
  tail call void @vp8_cost_tokens(i32* %22, i8* %23, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %24 = add nuw nsw i64 %3, 1
  %25 = icmp eq i64 %24, 10
  br i1 %25, label %26, label %2

26:                                               ; preds = %2
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 5, i64 0
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 0, i64 0
  tail call void @vp8_cost_tokens(i32* %27, i8* %28, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 0)) #2
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 3, i64 0
  tail call void @vp8_cost_tokens(i32* %27, i8* %29, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_sub_mv_ref_tree, i64 0, i64 0)) #2
  %30 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 2, i64 1, i64 0
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 1, i64 0
  tail call void @vp8_cost_tokens(i32* %30, i8* %31, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_ymode_tree, i64 0, i64 0)) #2
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 2, i64 0, i64 0
  tail call void @vp8_cost_tokens(i32* %32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @vp8_kf_ymode_prob, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_kf_ymode_tree, i64 0, i64 0)) #2
  %33 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 3, i64 1, i64 0
  %34 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 2, i64 0
  tail call void @vp8_cost_tokens(i32* %33, i8* %34, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_uv_mode_tree, i64 0, i64 0)) #2
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 3, i64 0, i64 0
  tail call void @vp8_cost_tokens(i32* %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @vp8_kf_uv_mode_prob, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_uv_mode_tree, i64 0, i64 0)) #2
  ret void
}

declare void @vp8_cost_tokens(i32*, i8*, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
