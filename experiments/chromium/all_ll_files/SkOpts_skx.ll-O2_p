; ModuleID = '../../third_party/skia/src/opts/SkOpts_skx.cpp'
source_filename = "../../third_party/skia/src/opts/SkOpts_skx.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.skvm::InterpreterInstruction" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%union.Slot = type { %"struct.skvx::Vec" }
%"struct.skvx::Vec" = type { %"struct.skvx::Vec.0", %"struct.skvx::Vec.0" }
%"struct.skvx::Vec.0" = type { %"struct.skvx::Vec.1", %"struct.skvx::Vec.1" }
%"struct.skvx::Vec.1" = type { %"struct.skvx::Vec.2", %"struct.skvx::Vec.2" }
%"struct.skvx::Vec.2" = type { float }

$_ZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPv = comdat any

@_ZN6SkOpts14interpret_skvmE = external local_unnamed_addr global void (%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkOpts8Init_skxEv() local_unnamed_addr #0 {
  store void (%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**)* @_ZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPv, void (%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**)** @_ZN6SkOpts14interpret_skvmE, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPv(%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**) #1 comdat {
  %9 = alloca [16 x %union.Slot], align 32
  %10 = alloca <8 x i64>, align 64
  %11 = alloca <8 x i64>, align 64
  %12 = bitcast [16 x %union.Slot]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %12) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %12, i8 -1, i64 512, i1 false)
  %13 = getelementptr inbounds [16 x %union.Slot], [16 x %union.Slot]* %9, i64 0, i64 0
  %14 = icmp sgt i32 %2, 16
  br i1 %14, label %15, label %25

15:                                               ; preds = %8
  %16 = add nuw nsw i32 %2, 1
  %17 = sext i32 %16 to i64
  %18 = shl nsw i64 %17, 5
  %19 = tail call i8* @_Znam(i64 %18) #11
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 31
  %22 = add i64 %20, 32
  %23 = sub i64 %22, %21
  %24 = inttoptr i64 %23 to %union.Slot*
  br label %25

25:                                               ; preds = %15, %8
  %26 = phi i8* [ %19, %15 ], [ null, %8 ]
  %27 = phi %union.Slot* [ %24, %15 ], [ %13, %8 ]
  %28 = icmp sgt i32 %6, 0
  br i1 %28, label %29, label %1929

29:                                               ; preds = %25
  %30 = bitcast <8 x i64>* %10 to i8*
  %31 = bitcast <8 x i64>* %11 to i8*
  %32 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 4
  %33 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 5
  %34 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 6
  %35 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 7
  %36 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 4
  %37 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 5
  %38 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 6
  %39 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 7
  %40 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 0
  %41 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 1
  %42 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 2
  %43 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 3
  %44 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 0
  %45 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 1
  %46 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 2
  %47 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 3
  %48 = icmp sgt i32 %5, 0
  %49 = sext i32 %5 to i64
  %50 = and i64 %49, 1
  %51 = icmp eq i32 %5, 1
  %52 = sub nsw i64 %49, %50
  %53 = icmp eq i64 %50, 0
  br label %54

54:                                               ; preds = %29, %101
  %55 = phi i32 [ %6, %29 ], [ %68, %101 ]
  %56 = phi i32 [ 0, %29 ], [ %3, %101 ]
  %57 = icmp sgt i32 %55, 7
  %58 = select i1 %57, i32 8, i32 1
  %59 = icmp slt i32 %56, %1
  br i1 %59, label %60, label %67

60:                                               ; preds = %54
  %61 = zext i1 %57 to i32
  %62 = insertelement <8 x i32> undef, i32 %55, i32 0
  %63 = shufflevector <8 x i32> %62, <8 x i32> undef, <8 x i32> zeroinitializer
  %64 = add <8 x i32> %63, <i32 0, i32 -1, i32 -2, i32 -3, i32 -4, i32 -5, i32 -6, i32 -7>
  %65 = zext i32 %58 to i64
  %66 = sext i32 %56 to i64
  br label %103

67:                                               ; preds = %1925, %54
  %68 = sub nsw i32 %55, %58
  br i1 %48, label %69, label %101

69:                                               ; preds = %67
  br i1 %51, label %91, label %70

70:                                               ; preds = %69, %70
  %71 = phi i64 [ %88, %70 ], [ 0, %69 ]
  %72 = phi i64 [ %89, %70 ], [ %52, %69 ]
  %73 = getelementptr inbounds i8*, i8** %7, i64 %71
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds i32, i32* %4, i64 %71
  %76 = load i32, i32* %75, align 4
  %77 = mul nsw i32 %76, %58
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %74, i64 %78
  store i8* %79, i8** %73, align 8
  %80 = or i64 %71, 1
  %81 = getelementptr inbounds i8*, i8** %7, i64 %80
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds i32, i32* %4, i64 %80
  %84 = load i32, i32* %83, align 4
  %85 = mul nsw i32 %84, %58
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %82, i64 %86
  store i8* %87, i8** %81, align 8
  %88 = add nuw nsw i64 %71, 2
  %89 = add i64 %72, -2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %70

91:                                               ; preds = %70, %69
  %92 = phi i64 [ 0, %69 ], [ %88, %70 ]
  br i1 %53, label %101, label %93

93:                                               ; preds = %91
  %94 = getelementptr inbounds i8*, i8** %7, i64 %92
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds i32, i32* %4, i64 %92
  %97 = load i32, i32* %96, align 4
  %98 = mul nsw i32 %97, %58
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %95, i64 %99
  store i8* %100, i8** %94, align 8
  br label %101

101:                                              ; preds = %93, %91, %67
  %102 = icmp sgt i32 %68, 0
  br i1 %102, label %54, label %1929

103:                                              ; preds = %1925, %60
  %104 = phi i64 [ %66, %60 ], [ %1926, %1925 ]
  %105 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 3
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 4
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 6
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 7
  %118 = load i32, i32* %117, align 4
  %119 = shl nsw i32 %106, 1
  %120 = or i32 %119, %61
  switch i32 %120, label %121 [
    i32 2, label %122
    i32 4, label %130
    i32 6, label %139
    i32 8, label %148
    i32 3, label %164
    i32 5, label %204
    i32 7, label %214
    i32 9, label %221
    i32 12, label %238
    i32 14, label %247
    i32 16, label %257
    i32 18, label %267
    i32 13, label %280
    i32 15, label %290
    i32 17, label %306
    i32 19, label %313
    i32 24, label %328
    i32 26, label %351
    i32 28, label %374
    i32 25, label %396
    i32 27, label %478
    i32 29, label %560
    i32 10, label %642
    i32 11, label %642
    i32 20, label %713
    i32 21, label %713
    i32 0, label %1925
    i32 1, label %1925
    i32 22, label %773
    i32 23, label %773
    i32 30, label %777
    i32 31, label %777
    i32 32, label %792
    i32 33, label %792
    i32 34, label %800
    i32 35, label %800
    i32 38, label %813
    i32 39, label %813
    i32 42, label %826
    i32 43, label %826
    i32 46, label %839
    i32 47, label %839
    i32 48, label %852
    i32 49, label %852
    i32 50, label %866
    i32 51, label %866
    i32 52, label %880
    i32 53, label %880
    i32 54, label %949
    i32 55, label %949
    i32 56, label %1014
    i32 57, label %1014
    i32 58, label %1079
    i32 59, label %1079
    i32 36, label %1114
    i32 37, label %1114
    i32 40, label %1127
    i32 41, label %1127
    i32 44, label %1140
    i32 45, label %1140
    i32 60, label %1153
    i32 61, label %1153
    i32 64, label %1164
    i32 65, label %1164
    i32 62, label %1175
    i32 63, label %1175
    i32 82, label %1186
    i32 83, label %1186
    i32 80, label %1200
    i32 81, label %1200
    i32 88, label %1214
    i32 89, label %1214
    i32 86, label %1228
    i32 87, label %1228
    i32 84, label %1242
    i32 85, label %1242
    i32 90, label %1256
    i32 91, label %1256
    i32 92, label %1270
    i32 93, label %1270
    i32 94, label %1283
    i32 95, label %1283
    i32 96, label %1296
    i32 97, label %1296
    i32 98, label %1309
    i32 99, label %1309
    i32 100, label %1323
    i32 101, label %1323
    i32 66, label %1430
    i32 67, label %1430
    i32 68, label %1465
    i32 69, label %1465
    i32 78, label %1500
    i32 79, label %1500
    i32 70, label %1509
    i32 71, label %1509
    i32 72, label %1518
    i32 73, label %1518
    i32 74, label %1548
    i32 75, label %1548
    i32 76, label %1743
    i32 77, label %1743
  ]

121:                                              ; preds = %103
  tail call void @llvm.trap()
  unreachable

122:                                              ; preds = %103
  %123 = sext i32 %116 to i64
  %124 = getelementptr inbounds i8*, i8** %7, i64 %123
  %125 = load i8*, i8** %124, align 8
  %126 = sext i32 %110 to i64
  %127 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %126
  %128 = bitcast %union.Slot* %127 to i8*
  %129 = load i8, i8* %128, align 32
  store i8 %129, i8* %125, align 1
  br label %1925

130:                                              ; preds = %103
  %131 = sext i32 %116 to i64
  %132 = getelementptr inbounds i8*, i8** %7, i64 %131
  %133 = bitcast i8** %132 to i16**
  %134 = load i16*, i16** %133, align 8
  %135 = sext i32 %110 to i64
  %136 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %135
  %137 = bitcast %union.Slot* %136 to i16*
  %138 = load i16, i16* %137, align 32
  store i16 %138, i16* %134, align 1
  br label %1925

139:                                              ; preds = %103
  %140 = sext i32 %116 to i64
  %141 = getelementptr inbounds i8*, i8** %7, i64 %140
  %142 = bitcast i8** %141 to i32**
  %143 = load i32*, i32** %142, align 8
  %144 = sext i32 %110 to i64
  %145 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %144
  %146 = bitcast %union.Slot* %145 to i32*
  %147 = load i32, i32* %146, align 32
  store i32 %147, i32* %143, align 1
  br label %1925

148:                                              ; preds = %103
  %149 = sext i32 %116 to i64
  %150 = getelementptr inbounds i8*, i8** %7, i64 %149
  %151 = bitcast i8** %150 to i32**
  %152 = load i32*, i32** %151, align 8
  %153 = sext i32 %110 to i64
  %154 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %153
  %155 = bitcast %union.Slot* %154 to i32*
  %156 = load i32, i32* %155, align 32
  store i32 %156, i32* %152, align 1
  %157 = load i8*, i8** %150, align 8
  %158 = getelementptr inbounds i8, i8* %157, i64 4
  %159 = sext i32 %112 to i64
  %160 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %159
  %161 = bitcast %union.Slot* %160 to i32*
  %162 = bitcast i8* %158 to i32*
  %163 = load i32, i32* %161, align 32
  store i32 %163, i32* %162, align 1
  br label %1925

164:                                              ; preds = %103
  %165 = sext i32 %110 to i64
  %166 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %165
  %167 = bitcast %union.Slot* %166 to <8 x i32>*
  %168 = load <8 x i32>, <8 x i32>* %167, align 32
  %169 = trunc <8 x i32> %168 to <8 x i8>
  %170 = extractelement <8 x i8> %169, i32 0
  %171 = extractelement <8 x i8> %169, i32 1
  %172 = extractelement <8 x i8> %169, i32 2
  %173 = extractelement <8 x i8> %169, i32 3
  %174 = extractelement <8 x i8> %169, i32 4
  %175 = extractelement <8 x i8> %169, i32 5
  %176 = extractelement <8 x i8> %169, i32 6
  %177 = extractelement <8 x i8> %169, i32 7
  %178 = zext i8 %177 to i64
  %179 = shl nuw i64 %178, 56
  %180 = zext i8 %176 to i64
  %181 = shl nuw nsw i64 %180, 48
  %182 = zext i8 %175 to i64
  %183 = shl nuw nsw i64 %182, 40
  %184 = zext i8 %174 to i64
  %185 = shl nuw nsw i64 %184, 32
  %186 = zext i8 %173 to i64
  %187 = shl nuw nsw i64 %186, 24
  %188 = zext i8 %172 to i64
  %189 = shl nuw nsw i64 %188, 16
  %190 = zext i8 %171 to i64
  %191 = shl nuw nsw i64 %190, 8
  %192 = zext i8 %170 to i64
  %193 = or i64 %191, %192
  %194 = or i64 %193, %189
  %195 = or i64 %194, %187
  %196 = or i64 %195, %185
  %197 = or i64 %196, %183
  %198 = or i64 %197, %181
  %199 = or i64 %198, %179
  %200 = sext i32 %116 to i64
  %201 = getelementptr inbounds i8*, i8** %7, i64 %200
  %202 = bitcast i8** %201 to i64**
  %203 = load i64*, i64** %202, align 8
  store i64 %199, i64* %203, align 1
  br label %1925

204:                                              ; preds = %103
  %205 = sext i32 %110 to i64
  %206 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %205
  %207 = bitcast %union.Slot* %206 to <8 x i32>*
  %208 = load <8 x i32>, <8 x i32>* %207, align 32
  %209 = trunc <8 x i32> %208 to <8 x i16>
  %210 = sext i32 %116 to i64
  %211 = getelementptr inbounds i8*, i8** %7, i64 %210
  %212 = bitcast i8** %211 to <8 x i16>**
  %213 = load <8 x i16>*, <8 x i16>** %212, align 8
  store <8 x i16> %209, <8 x i16>* %213, align 1
  br label %1925

214:                                              ; preds = %103
  %215 = sext i32 %110 to i64
  %216 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %215
  %217 = sext i32 %116 to i64
  %218 = getelementptr inbounds i8*, i8** %7, i64 %217
  %219 = load i8*, i8** %218, align 8
  %220 = bitcast %union.Slot* %216 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %219, i8* align 32 %220, i64 32, i1 false) #10
  br label %1925

221:                                              ; preds = %103
  %222 = sext i32 %110 to i64
  %223 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %222
  %224 = bitcast %union.Slot* %223 to <8 x i32>*
  %225 = load <8 x i32>, <8 x i32>* %224, align 32, !noalias !2
  %226 = zext <8 x i32> %225 to <8 x i64>
  %227 = sext i32 %112 to i64
  %228 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %227
  %229 = bitcast %union.Slot* %228 to <8 x i32>*
  %230 = load <8 x i32>, <8 x i32>* %229, align 32, !noalias !5
  %231 = zext <8 x i32> %230 to <8 x i64>
  %232 = shl nuw <8 x i64> %231, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %233 = or <8 x i64> %232, %226
  %234 = sext i32 %116 to i64
  %235 = getelementptr inbounds i8*, i8** %7, i64 %234
  %236 = bitcast i8** %235 to <8 x i64>**
  %237 = load <8 x i64>*, <8 x i64>** %236, align 8
  store <8 x i64> %233, <8 x i64>* %237, align 1
  br label %1925

238:                                              ; preds = %103
  %239 = sext i32 %108 to i64
  %240 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %239
  %241 = bitcast %union.Slot* %240 to i8*
  %242 = sext i32 %116 to i64
  %243 = getelementptr inbounds i8*, i8** %7, i64 %242
  %244 = bitcast %union.Slot* %240 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %244, i8 0, i64 32, i1 false)
  %245 = load i8*, i8** %243, align 8
  %246 = load i8, i8* %245, align 1
  store i8 %246, i8* %241, align 32
  br label %1925

247:                                              ; preds = %103
  %248 = sext i32 %108 to i64
  %249 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %248
  %250 = sext i32 %116 to i64
  %251 = getelementptr inbounds i8*, i8** %7, i64 %250
  %252 = bitcast i8** %251 to i16**
  %253 = bitcast %union.Slot* %249 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %253, i8 0, i64 32, i1 false)
  %254 = load i16*, i16** %252, align 8
  %255 = bitcast %union.Slot* %249 to i16*
  %256 = load i16, i16* %254, align 1
  store i16 %256, i16* %255, align 32
  br label %1925

257:                                              ; preds = %103
  %258 = sext i32 %108 to i64
  %259 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %258
  %260 = bitcast %union.Slot* %259 to i32*
  %261 = sext i32 %116 to i64
  %262 = getelementptr inbounds i8*, i8** %7, i64 %261
  %263 = bitcast i8** %262 to i32**
  %264 = bitcast %union.Slot* %259 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %264, i8 0, i64 32, i1 false)
  %265 = load i32*, i32** %263, align 8
  %266 = load i32, i32* %265, align 1
  store i32 %266, i32* %260, align 32
  br label %1925

267:                                              ; preds = %103
  %268 = sext i32 %108 to i64
  %269 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %268
  %270 = bitcast %union.Slot* %269 to i32*
  %271 = sext i32 %116 to i64
  %272 = getelementptr inbounds i8*, i8** %7, i64 %271
  %273 = bitcast %union.Slot* %269 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %273, i8 0, i64 32, i1 false)
  %274 = load i8*, i8** %272, align 8
  %275 = shl nsw i32 %118, 2
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %274, i64 %276
  %278 = bitcast i8* %277 to i32*
  %279 = load i32, i32* %278, align 1
  store i32 %279, i32* %270, align 32
  br label %1925

280:                                              ; preds = %103
  %281 = sext i32 %116 to i64
  %282 = getelementptr inbounds i8*, i8** %7, i64 %281
  %283 = bitcast i8** %282 to <8 x i8>**
  %284 = load <8 x i8>*, <8 x i8>** %283, align 8
  %285 = load <8 x i8>, <8 x i8>* %284, align 1
  %286 = zext <8 x i8> %285 to <8 x i32>
  %287 = sext i32 %108 to i64
  %288 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %287
  %289 = bitcast %union.Slot* %288 to <8 x i32>*
  store <8 x i32> %286, <8 x i32>* %289, align 32
  br label %1925

290:                                              ; preds = %103
  %291 = sext i32 %116 to i64
  %292 = getelementptr inbounds i8*, i8** %7, i64 %291
  %293 = load i8*, i8** %292, align 8
  %294 = bitcast i8* %293 to <4 x i16>*
  %295 = load <4 x i16>, <4 x i16>* %294, align 1
  %296 = getelementptr inbounds i8, i8* %293, i64 8
  %297 = bitcast i8* %296 to <4 x i16>*
  %298 = load <4 x i16>, <4 x i16>* %297, align 1
  %299 = shufflevector <4 x i16> %295, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %300 = shufflevector <4 x i16> %298, <4 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %301 = shufflevector <8 x i16> %299, <8 x i16> %300, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %302 = zext <8 x i16> %301 to <8 x i32>
  %303 = sext i32 %108 to i64
  %304 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %303
  %305 = bitcast %union.Slot* %304 to <8 x i32>*
  store <8 x i32> %302, <8 x i32>* %305, align 32
  br label %1925

306:                                              ; preds = %103
  %307 = sext i32 %116 to i64
  %308 = getelementptr inbounds i8*, i8** %7, i64 %307
  %309 = load i8*, i8** %308, align 8
  %310 = sext i32 %108 to i64
  %311 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %310
  %312 = bitcast %union.Slot* %311 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 32 %312, i8* align 1 %309, i64 32, i1 false)
  br label %1925

313:                                              ; preds = %103
  %314 = sext i32 %116 to i64
  %315 = getelementptr inbounds i8*, i8** %7, i64 %314
  %316 = bitcast i8** %315 to <8 x i64>**
  %317 = load <8 x i64>*, <8 x i64>** %316, align 8
  %318 = load <8 x i64>, <8 x i64>* %317, align 1
  %319 = shl nsw i32 %118, 5
  %320 = insertelement <8 x i32> undef, i32 %319, i32 0
  %321 = shufflevector <8 x i32> %320, <8 x i32> undef, <8 x i32> zeroinitializer
  %322 = zext <8 x i32> %321 to <8 x i64>
  %323 = lshr <8 x i64> %318, %322
  %324 = trunc <8 x i64> %323 to <8 x i32>
  %325 = sext i32 %108 to i64
  %326 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %325
  %327 = bitcast %union.Slot* %326 to <8 x i32>*
  store <8 x i32> %324, <8 x i32>* %327, align 32
  br label %1925

328:                                              ; preds = %103
  %329 = sext i32 %116 to i64
  %330 = getelementptr inbounds i8*, i8** %7, i64 %329
  %331 = load i8*, i8** %330, align 8
  %332 = sext i32 %118 to i64
  %333 = getelementptr inbounds i8, i8* %331, i64 %332
  %334 = bitcast i8* %333 to i8**
  %335 = load i8*, i8** %334, align 1
  %336 = sext i32 %110 to i64
  %337 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %336
  %338 = bitcast %union.Slot* %337 to i32*
  %339 = load i32, i32* %338, align 4
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds i8, i8* %335, i64 %340
  %342 = load i8, i8* %341, align 1
  %343 = zext i8 %342 to i32
  %344 = sext i32 %108 to i64
  %345 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %344
  %346 = insertelement <4 x i32> undef, i32 %343, i32 0
  %347 = shufflevector <4 x i32> %346, <4 x i32> undef, <4 x i32> zeroinitializer
  %348 = bitcast %union.Slot* %345 to <4 x i32>*
  store <4 x i32> %347, <4 x i32>* %348, align 32
  %349 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %344, i32 0, i32 1
  %350 = bitcast %"struct.skvx::Vec.0"* %349 to <4 x i32>*
  store <4 x i32> %347, <4 x i32>* %350, align 16
  br label %1925

351:                                              ; preds = %103
  %352 = sext i32 %116 to i64
  %353 = getelementptr inbounds i8*, i8** %7, i64 %352
  %354 = load i8*, i8** %353, align 8
  %355 = sext i32 %118 to i64
  %356 = getelementptr inbounds i8, i8* %354, i64 %355
  %357 = bitcast i8* %356 to i16**
  %358 = load i16*, i16** %357, align 1
  %359 = sext i32 %110 to i64
  %360 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %359
  %361 = bitcast %union.Slot* %360 to i32*
  %362 = load i32, i32* %361, align 4
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i16, i16* %358, i64 %363
  %365 = load i16, i16* %364, align 2
  %366 = zext i16 %365 to i32
  %367 = sext i32 %108 to i64
  %368 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %367
  %369 = insertelement <4 x i32> undef, i32 %366, i32 0
  %370 = shufflevector <4 x i32> %369, <4 x i32> undef, <4 x i32> zeroinitializer
  %371 = bitcast %union.Slot* %368 to <4 x i32>*
  store <4 x i32> %370, <4 x i32>* %371, align 32
  %372 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %367, i32 0, i32 1
  %373 = bitcast %"struct.skvx::Vec.0"* %372 to <4 x i32>*
  store <4 x i32> %370, <4 x i32>* %373, align 16
  br label %1925

374:                                              ; preds = %103
  %375 = sext i32 %116 to i64
  %376 = getelementptr inbounds i8*, i8** %7, i64 %375
  %377 = load i8*, i8** %376, align 8
  %378 = sext i32 %118 to i64
  %379 = getelementptr inbounds i8, i8* %377, i64 %378
  %380 = bitcast i8* %379 to i32**
  %381 = load i32*, i32** %380, align 1
  %382 = sext i32 %110 to i64
  %383 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %382
  %384 = bitcast %union.Slot* %383 to i32*
  %385 = load i32, i32* %384, align 4
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds i32, i32* %381, i64 %386
  %388 = load i32, i32* %387, align 4
  %389 = sext i32 %108 to i64
  %390 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %389
  %391 = insertelement <4 x i32> undef, i32 %388, i32 0
  %392 = shufflevector <4 x i32> %391, <4 x i32> undef, <4 x i32> zeroinitializer
  %393 = bitcast %union.Slot* %390 to <4 x i32>*
  store <4 x i32> %392, <4 x i32>* %393, align 32
  %394 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %389, i32 0, i32 1
  %395 = bitcast %"struct.skvx::Vec.0"* %394 to <4 x i32>*
  store <4 x i32> %392, <4 x i32>* %395, align 16
  br label %1925

396:                                              ; preds = %103
  %397 = sext i32 %116 to i64
  %398 = getelementptr inbounds i8*, i8** %7, i64 %397
  %399 = load i8*, i8** %398, align 8
  %400 = sext i32 %118 to i64
  %401 = getelementptr inbounds i8, i8* %399, i64 %400
  %402 = bitcast i8* %401 to i8**
  %403 = load i8*, i8** %402, align 1
  %404 = sext i32 %110 to i64
  %405 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404
  %406 = bitcast %union.Slot* %405 to i32*
  %407 = load i32, i32* %406, align 4, !noalias !8
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i8, i8* %403, i64 %408
  %410 = load i8, i8* %409, align 1, !noalias !8
  %411 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 0, i32 0, i32 1
  %412 = bitcast %"struct.skvx::Vec.2"* %411 to i32*
  %413 = load i32, i32* %412, align 4, !noalias !8
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds i8, i8* %403, i64 %414
  %416 = load i8, i8* %415, align 1, !noalias !8
  %417 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 0, i32 1
  %418 = bitcast %"struct.skvx::Vec.1"* %417 to i32*
  %419 = load i32, i32* %418, align 4, !noalias !8
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds i8, i8* %403, i64 %420
  %422 = load i8, i8* %421, align 1, !noalias !8
  %423 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 0, i32 1, i32 1
  %424 = bitcast %"struct.skvx::Vec.2"* %423 to i32*
  %425 = load i32, i32* %424, align 4, !noalias !8
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i8, i8* %403, i64 %426
  %428 = load i8, i8* %427, align 1, !noalias !8
  %429 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 1
  %430 = bitcast %"struct.skvx::Vec.0"* %429 to i32*
  %431 = load i32, i32* %430, align 4, !noalias !8
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i8, i8* %403, i64 %432
  %434 = load i8, i8* %433, align 1, !noalias !8
  %435 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 1, i32 0, i32 1
  %436 = bitcast %"struct.skvx::Vec.2"* %435 to i32*
  %437 = load i32, i32* %436, align 4, !noalias !8
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds i8, i8* %403, i64 %438
  %440 = load i8, i8* %439, align 1, !noalias !8
  %441 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 1, i32 1
  %442 = bitcast %"struct.skvx::Vec.1"* %441 to i32*
  %443 = load i32, i32* %442, align 4, !noalias !8
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds i8, i8* %403, i64 %444
  %446 = load i8, i8* %445, align 1, !noalias !8
  %447 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 1, i32 1, i32 1
  %448 = bitcast %"struct.skvx::Vec.2"* %447 to i32*
  %449 = load i32, i32* %448, align 4, !noalias !8
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds i8, i8* %403, i64 %450
  %452 = load i8, i8* %451, align 1, !noalias !8
  %453 = zext i8 %446 to i64
  %454 = zext i8 %452 to i64
  %455 = shl nuw nsw i64 %454, 32
  %456 = or i64 %455, %453
  %457 = zext i8 %416 to i64
  %458 = shl nuw nsw i64 %457, 32
  %459 = zext i8 %410 to i64
  %460 = or i64 %458, %459
  %461 = zext i8 %428 to i64
  %462 = shl nuw nsw i64 %461, 32
  %463 = zext i8 %422 to i64
  %464 = or i64 %462, %463
  %465 = zext i8 %440 to i64
  %466 = shl nuw nsw i64 %465, 32
  %467 = zext i8 %434 to i64
  %468 = or i64 %466, %467
  %469 = sext i32 %108 to i64
  %470 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %469
  %471 = bitcast %union.Slot* %470 to i64*
  store i64 %460, i64* %471, align 32
  %472 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %469, i32 0, i32 0, i32 1
  %473 = bitcast %"struct.skvx::Vec.1"* %472 to i64*
  store i64 %464, i64* %473, align 8
  %474 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %469, i32 0, i32 1
  %475 = bitcast %"struct.skvx::Vec.0"* %474 to i64*
  store i64 %468, i64* %475, align 16
  %476 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %469, i32 0, i32 1, i32 1
  %477 = bitcast %"struct.skvx::Vec.1"* %476 to i64*
  store i64 %456, i64* %477, align 8
  br label %1925

478:                                              ; preds = %103
  %479 = sext i32 %116 to i64
  %480 = getelementptr inbounds i8*, i8** %7, i64 %479
  %481 = load i8*, i8** %480, align 8
  %482 = sext i32 %118 to i64
  %483 = getelementptr inbounds i8, i8* %481, i64 %482
  %484 = bitcast i8* %483 to i16**
  %485 = load i16*, i16** %484, align 1
  %486 = sext i32 %110 to i64
  %487 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486
  %488 = bitcast %union.Slot* %487 to i32*
  %489 = load i32, i32* %488, align 4, !noalias !13
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds i16, i16* %485, i64 %490
  %492 = load i16, i16* %491, align 2, !noalias !13
  %493 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 0, i32 0, i32 1
  %494 = bitcast %"struct.skvx::Vec.2"* %493 to i32*
  %495 = load i32, i32* %494, align 4, !noalias !13
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i16, i16* %485, i64 %496
  %498 = load i16, i16* %497, align 2, !noalias !13
  %499 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 0, i32 1
  %500 = bitcast %"struct.skvx::Vec.1"* %499 to i32*
  %501 = load i32, i32* %500, align 4, !noalias !13
  %502 = sext i32 %501 to i64
  %503 = getelementptr inbounds i16, i16* %485, i64 %502
  %504 = load i16, i16* %503, align 2, !noalias !13
  %505 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 0, i32 1, i32 1
  %506 = bitcast %"struct.skvx::Vec.2"* %505 to i32*
  %507 = load i32, i32* %506, align 4, !noalias !13
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i16, i16* %485, i64 %508
  %510 = load i16, i16* %509, align 2, !noalias !13
  %511 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 1
  %512 = bitcast %"struct.skvx::Vec.0"* %511 to i32*
  %513 = load i32, i32* %512, align 4, !noalias !13
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds i16, i16* %485, i64 %514
  %516 = load i16, i16* %515, align 2, !noalias !13
  %517 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 1, i32 0, i32 1
  %518 = bitcast %"struct.skvx::Vec.2"* %517 to i32*
  %519 = load i32, i32* %518, align 4, !noalias !13
  %520 = sext i32 %519 to i64
  %521 = getelementptr inbounds i16, i16* %485, i64 %520
  %522 = load i16, i16* %521, align 2, !noalias !13
  %523 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 1, i32 1
  %524 = bitcast %"struct.skvx::Vec.1"* %523 to i32*
  %525 = load i32, i32* %524, align 4, !noalias !13
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, i16* %485, i64 %526
  %528 = load i16, i16* %527, align 2, !noalias !13
  %529 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 1, i32 1, i32 1
  %530 = bitcast %"struct.skvx::Vec.2"* %529 to i32*
  %531 = load i32, i32* %530, align 4, !noalias !13
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds i16, i16* %485, i64 %532
  %534 = load i16, i16* %533, align 2, !noalias !13
  %535 = zext i16 %528 to i64
  %536 = zext i16 %534 to i64
  %537 = shl nuw nsw i64 %536, 32
  %538 = or i64 %537, %535
  %539 = zext i16 %498 to i64
  %540 = shl nuw nsw i64 %539, 32
  %541 = zext i16 %492 to i64
  %542 = or i64 %540, %541
  %543 = zext i16 %510 to i64
  %544 = shl nuw nsw i64 %543, 32
  %545 = zext i16 %504 to i64
  %546 = or i64 %544, %545
  %547 = zext i16 %522 to i64
  %548 = shl nuw nsw i64 %547, 32
  %549 = zext i16 %516 to i64
  %550 = or i64 %548, %549
  %551 = sext i32 %108 to i64
  %552 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %551
  %553 = bitcast %union.Slot* %552 to i64*
  store i64 %542, i64* %553, align 32
  %554 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %551, i32 0, i32 0, i32 1
  %555 = bitcast %"struct.skvx::Vec.1"* %554 to i64*
  store i64 %546, i64* %555, align 8
  %556 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %551, i32 0, i32 1
  %557 = bitcast %"struct.skvx::Vec.0"* %556 to i64*
  store i64 %550, i64* %557, align 16
  %558 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %551, i32 0, i32 1, i32 1
  %559 = bitcast %"struct.skvx::Vec.1"* %558 to i64*
  store i64 %538, i64* %559, align 8
  br label %1925

560:                                              ; preds = %103
  %561 = sext i32 %116 to i64
  %562 = getelementptr inbounds i8*, i8** %7, i64 %561
  %563 = load i8*, i8** %562, align 8
  %564 = sext i32 %118 to i64
  %565 = getelementptr inbounds i8, i8* %563, i64 %564
  %566 = bitcast i8* %565 to i32**
  %567 = load i32*, i32** %566, align 1
  %568 = sext i32 %110 to i64
  %569 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568
  %570 = bitcast %union.Slot* %569 to i32*
  %571 = load i32, i32* %570, align 4, !noalias !18
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds i32, i32* %567, i64 %572
  %574 = load i32, i32* %573, align 4, !noalias !18
  %575 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 0, i32 0, i32 1
  %576 = bitcast %"struct.skvx::Vec.2"* %575 to i32*
  %577 = load i32, i32* %576, align 4, !noalias !18
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i32, i32* %567, i64 %578
  %580 = load i32, i32* %579, align 4, !noalias !18
  %581 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 0, i32 1
  %582 = bitcast %"struct.skvx::Vec.1"* %581 to i32*
  %583 = load i32, i32* %582, align 4, !noalias !18
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds i32, i32* %567, i64 %584
  %586 = load i32, i32* %585, align 4, !noalias !18
  %587 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 0, i32 1, i32 1
  %588 = bitcast %"struct.skvx::Vec.2"* %587 to i32*
  %589 = load i32, i32* %588, align 4, !noalias !18
  %590 = sext i32 %589 to i64
  %591 = getelementptr inbounds i32, i32* %567, i64 %590
  %592 = load i32, i32* %591, align 4, !noalias !18
  %593 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 1
  %594 = bitcast %"struct.skvx::Vec.0"* %593 to i32*
  %595 = load i32, i32* %594, align 4, !noalias !18
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i32, i32* %567, i64 %596
  %598 = load i32, i32* %597, align 4, !noalias !18
  %599 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 1, i32 0, i32 1
  %600 = bitcast %"struct.skvx::Vec.2"* %599 to i32*
  %601 = load i32, i32* %600, align 4, !noalias !18
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds i32, i32* %567, i64 %602
  %604 = load i32, i32* %603, align 4, !noalias !18
  %605 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 1, i32 1
  %606 = bitcast %"struct.skvx::Vec.1"* %605 to i32*
  %607 = load i32, i32* %606, align 4, !noalias !18
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds i32, i32* %567, i64 %608
  %610 = load i32, i32* %609, align 4, !noalias !18
  %611 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 1, i32 1, i32 1
  %612 = bitcast %"struct.skvx::Vec.2"* %611 to i32*
  %613 = load i32, i32* %612, align 4, !noalias !18
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds i32, i32* %567, i64 %614
  %616 = load i32, i32* %615, align 4, !noalias !18
  %617 = zext i32 %610 to i64
  %618 = zext i32 %616 to i64
  %619 = shl nuw i64 %618, 32
  %620 = or i64 %619, %617
  %621 = zext i32 %580 to i64
  %622 = shl nuw i64 %621, 32
  %623 = zext i32 %574 to i64
  %624 = or i64 %622, %623
  %625 = zext i32 %592 to i64
  %626 = shl nuw i64 %625, 32
  %627 = zext i32 %586 to i64
  %628 = or i64 %626, %627
  %629 = zext i32 %604 to i64
  %630 = shl nuw i64 %629, 32
  %631 = zext i32 %598 to i64
  %632 = or i64 %630, %631
  %633 = sext i32 %108 to i64
  %634 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %633
  %635 = bitcast %union.Slot* %634 to i64*
  store i64 %624, i64* %635, align 32
  %636 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %633, i32 0, i32 0, i32 1
  %637 = bitcast %"struct.skvx::Vec.1"* %636 to i64*
  store i64 %628, i64* %637, align 8
  %638 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %633, i32 0, i32 1
  %639 = bitcast %"struct.skvx::Vec.0"* %638 to i64*
  store i64 %632, i64* %639, align 16
  %640 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %633, i32 0, i32 1, i32 1
  %641 = bitcast %"struct.skvx::Vec.1"* %640 to i64*
  store i64 %620, i64* %641, align 8
  br label %1925

642:                                              ; preds = %103, %103
  %643 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 5
  %644 = load i32, i32* %643, align 4
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %30)
  store <8 x i64> <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, <8 x i64>* %10, align 64
  %645 = sext i32 %110 to i64
  %646 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %645
  %647 = bitcast %union.Slot* %646 to <8 x i32>*
  %648 = load <8 x i32>, <8 x i32>* %647, align 32, !noalias !25
  %649 = zext <8 x i32> %648 to <8 x i64>
  %650 = sext i32 %112 to i64
  %651 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %650
  %652 = bitcast %union.Slot* %651 to <8 x i32>*
  %653 = load <8 x i32>, <8 x i32>* %652, align 32, !noalias !28
  %654 = zext <8 x i32> %653 to <8 x i64>
  %655 = shl nuw <8 x i64> %654, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %656 = or <8 x i64> %655, %649
  store <8 x i64> %656, <8 x i64>* %10, align 64, !alias.scope !31
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %31)
  store <8 x i64> <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, <8 x i64>* %11, align 64
  %657 = sext i32 %114 to i64
  %658 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %657
  %659 = bitcast %union.Slot* %658 to <8 x i32>*
  %660 = load <8 x i32>, <8 x i32>* %659, align 32, !noalias !34
  %661 = zext <8 x i32> %660 to <8 x i64>
  %662 = sext i32 %644 to i64
  %663 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %662
  %664 = bitcast %union.Slot* %663 to <8 x i32>*
  %665 = load <8 x i32>, <8 x i32>* %664, align 32, !noalias !37
  %666 = zext <8 x i32> %665 to <8 x i64>
  %667 = shl nuw <8 x i64> %666, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %668 = or <8 x i64> %667, %661
  store <8 x i64> %668, <8 x i64>* %11, align 64, !alias.scope !40
  %669 = sext i32 %116 to i64
  %670 = getelementptr inbounds i8*, i8** %7, i64 %669
  br label %672

671:                                              ; preds = %701
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %31)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %30)
  br label %1925

672:                                              ; preds = %642, %701
  %673 = phi i64 [ 0, %642 ], [ %711, %701 ]
  %674 = load i8*, i8** %670, align 8
  %675 = shl nsw i64 %673, 4
  %676 = getelementptr inbounds i8, i8* %674, i64 %675
  %677 = icmp ult i64 %673, 4
  br i1 %677, label %678, label %689

678:                                              ; preds = %672
  %679 = icmp ult i64 %673, 2
  %680 = icmp eq i64 %673, 1
  %681 = select i1 %680, i64* %41, i64* %40
  %682 = icmp eq i64 %673, 2
  %683 = select i1 %682, i64* %42, i64* %43
  %684 = select i1 %679, i64* %681, i64* %683
  %685 = bitcast i8* %676 to i64*
  %686 = load i64, i64* %684, align 8
  store i64 %686, i64* %685, align 1
  %687 = select i1 %680, i64* %45, i64* %44
  %688 = select i1 %682, i64* %46, i64* %47
  br label %701

689:                                              ; preds = %672
  %690 = add nsw i64 %673, -4
  %691 = icmp slt i64 %690, 2
  %692 = icmp eq i64 %690, 1
  %693 = select i1 %692, i64* %33, i64* %32
  %694 = icmp eq i64 %690, 2
  %695 = select i1 %694, i64* %34, i64* %35
  %696 = select i1 %691, i64* %693, i64* %695
  %697 = bitcast i8* %676 to i64*
  %698 = load i64, i64* %696, align 8
  store i64 %698, i64* %697, align 1
  %699 = select i1 %692, i64* %37, i64* %36
  %700 = select i1 %694, i64* %38, i64* %39
  br label %701

701:                                              ; preds = %678, %689
  %702 = phi i64* [ %688, %678 ], [ %700, %689 ]
  %703 = phi i64* [ %687, %678 ], [ %699, %689 ]
  %704 = phi i1 [ %679, %678 ], [ %691, %689 ]
  %705 = select i1 %704, i64* %703, i64* %702
  %706 = load i8*, i8** %670, align 8
  %707 = getelementptr inbounds i8, i8* %706, i64 8
  %708 = getelementptr inbounds i8, i8* %707, i64 %675
  %709 = bitcast i8* %708 to i64*
  %710 = load i64, i64* %705, align 8
  store i64 %710, i64* %709, align 1
  %711 = add nuw nsw i64 %673, 1
  %712 = icmp ult i64 %711, %65
  br i1 %712, label %672, label %671

713:                                              ; preds = %103, %103
  %714 = sext i32 %108 to i64
  %715 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714
  %716 = bitcast %union.Slot* %715 to i32*
  %717 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 0, i32 0, i32 1
  %718 = bitcast %"struct.skvx::Vec.2"* %717 to i32*
  %719 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 0, i32 1
  %720 = bitcast %"struct.skvx::Vec.1"* %719 to i32*
  %721 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 0, i32 1, i32 1
  %722 = bitcast %"struct.skvx::Vec.2"* %721 to i32*
  %723 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 1
  %724 = bitcast %"struct.skvx::Vec.0"* %723 to i32*
  %725 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 1, i32 0, i32 1
  %726 = bitcast %"struct.skvx::Vec.2"* %725 to i32*
  %727 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 1, i32 1
  %728 = bitcast %"struct.skvx::Vec.1"* %727 to i32*
  %729 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 1, i32 1, i32 1
  %730 = bitcast %"struct.skvx::Vec.2"* %729 to i32*
  %731 = sext i32 %116 to i64
  %732 = getelementptr inbounds i8*, i8** %7, i64 %731
  %733 = shl nsw i32 %118, 2
  %734 = sext i32 %733 to i64
  %735 = bitcast %union.Slot* %715 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %735, i8 0, i64 32, i1 false)
  %736 = load i8*, i8** %732, align 8
  %737 = getelementptr inbounds i8, i8* %736, i64 %734
  %738 = bitcast i8* %737 to i32*
  %739 = load i32, i32* %738, align 1
  store i32 %739, i32* %716, align 4
  br i1 %57, label %740, label %1925

740:                                              ; preds = %713
  %741 = load i8*, i8** %732, align 8
  %742 = getelementptr inbounds i8, i8* %741, i64 16
  %743 = getelementptr inbounds i8, i8* %742, i64 %734
  %744 = bitcast i8* %743 to i32*
  %745 = load i32, i32* %744, align 1
  store i32 %745, i32* %718, align 4
  %746 = load i8*, i8** %732, align 8
  %747 = getelementptr inbounds i8, i8* %746, i64 32
  %748 = getelementptr inbounds i8, i8* %747, i64 %734
  %749 = bitcast i8* %748 to i32*
  %750 = load i32, i32* %749, align 1
  store i32 %750, i32* %720, align 4
  %751 = load i8*, i8** %732, align 8
  %752 = getelementptr inbounds i8, i8* %751, i64 48
  %753 = getelementptr inbounds i8, i8* %752, i64 %734
  %754 = bitcast i8* %753 to i32*
  %755 = load i32, i32* %754, align 1
  store i32 %755, i32* %722, align 4
  br label %756

756:                                              ; preds = %756, %740
  %757 = phi i64 [ 4, %740 ], [ %771, %756 ]
  %758 = add nsw i64 %757, -4
  %759 = icmp ult i64 %758, 2
  %760 = icmp eq i64 %758, 1
  %761 = select i1 %760, i32* %726, i32* %724
  %762 = icmp eq i64 %758, 2
  %763 = select i1 %762, i32* %728, i32* %730
  %764 = select i1 %759, i32* %761, i32* %763
  %765 = load i8*, i8** %732, align 8
  %766 = shl nsw i64 %757, 4
  %767 = getelementptr inbounds i8, i8* %765, i64 %734
  %768 = getelementptr inbounds i8, i8* %767, i64 %766
  %769 = bitcast i8* %768 to i32*
  %770 = load i32, i32* %769, align 1
  store i32 %770, i32* %764, align 4
  %771 = add nuw nsw i64 %757, 1
  %772 = icmp ult i64 %771, %65
  br i1 %772, label %756, label %1925, !llvm.loop !43

773:                                              ; preds = %103, %103
  %774 = sext i32 %108 to i64
  %775 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %774
  %776 = bitcast %union.Slot* %775 to <8 x i32>*
  store <8 x i32> %64, <8 x i32>* %776, align 32
  br label %1925

777:                                              ; preds = %103, %103
  %778 = sext i32 %116 to i64
  %779 = getelementptr inbounds i8*, i8** %7, i64 %778
  %780 = load i8*, i8** %779, align 8
  %781 = sext i32 %118 to i64
  %782 = getelementptr inbounds i8, i8* %780, i64 %781
  %783 = bitcast i8* %782 to i32*
  %784 = load i32, i32* %783, align 4
  %785 = sext i32 %108 to i64
  %786 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %785
  %787 = insertelement <4 x i32> undef, i32 %784, i32 0
  %788 = shufflevector <4 x i32> %787, <4 x i32> undef, <4 x i32> zeroinitializer
  %789 = bitcast %union.Slot* %786 to <4 x i32>*
  store <4 x i32> %788, <4 x i32>* %789, align 32
  %790 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %785, i32 0, i32 1
  %791 = bitcast %"struct.skvx::Vec.0"* %790 to <4 x i32>*
  store <4 x i32> %788, <4 x i32>* %791, align 16
  br label %1925

792:                                              ; preds = %103, %103
  %793 = sext i32 %108 to i64
  %794 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %793
  %795 = insertelement <4 x i32> undef, i32 %116, i32 0
  %796 = shufflevector <4 x i32> %795, <4 x i32> undef, <4 x i32> zeroinitializer
  %797 = bitcast %union.Slot* %794 to <4 x i32>*
  store <4 x i32> %796, <4 x i32>* %797, align 32
  %798 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %793, i32 0, i32 1
  %799 = bitcast %"struct.skvx::Vec.0"* %798 to <4 x i32>*
  store <4 x i32> %796, <4 x i32>* %799, align 16
  br label %1925

800:                                              ; preds = %103, %103
  %801 = sext i32 %110 to i64
  %802 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %801, i32 0
  %803 = sext i32 %112 to i64
  %804 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %803, i32 0
  %805 = bitcast %"struct.skvx::Vec"* %802 to <8 x float>*
  %806 = load <8 x float>, <8 x float>* %805, align 32, !noalias !45
  %807 = bitcast %"struct.skvx::Vec"* %804 to <8 x float>*
  %808 = load <8 x float>, <8 x float>* %807, align 32, !noalias !45
  %809 = fadd <8 x float> %806, %808
  %810 = sext i32 %108 to i64
  %811 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %810, i32 0
  %812 = bitcast %"struct.skvx::Vec"* %811 to <8 x float>*
  store <8 x float> %809, <8 x float>* %812, align 32
  br label %1925

813:                                              ; preds = %103, %103
  %814 = sext i32 %110 to i64
  %815 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %814, i32 0
  %816 = sext i32 %112 to i64
  %817 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %816, i32 0
  %818 = bitcast %"struct.skvx::Vec"* %815 to <8 x float>*
  %819 = load <8 x float>, <8 x float>* %818, align 32, !noalias !48
  %820 = bitcast %"struct.skvx::Vec"* %817 to <8 x float>*
  %821 = load <8 x float>, <8 x float>* %820, align 32, !noalias !48
  %822 = fsub <8 x float> %819, %821
  %823 = sext i32 %108 to i64
  %824 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %823, i32 0
  %825 = bitcast %"struct.skvx::Vec"* %824 to <8 x float>*
  store <8 x float> %822, <8 x float>* %825, align 32
  br label %1925

826:                                              ; preds = %103, %103
  %827 = sext i32 %110 to i64
  %828 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %827, i32 0
  %829 = sext i32 %112 to i64
  %830 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %829, i32 0
  %831 = bitcast %"struct.skvx::Vec"* %828 to <8 x float>*
  %832 = load <8 x float>, <8 x float>* %831, align 32, !noalias !51
  %833 = bitcast %"struct.skvx::Vec"* %830 to <8 x float>*
  %834 = load <8 x float>, <8 x float>* %833, align 32, !noalias !51
  %835 = fmul <8 x float> %832, %834
  %836 = sext i32 %108 to i64
  %837 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %836, i32 0
  %838 = bitcast %"struct.skvx::Vec"* %837 to <8 x float>*
  store <8 x float> %835, <8 x float>* %838, align 32
  br label %1925

839:                                              ; preds = %103, %103
  %840 = sext i32 %110 to i64
  %841 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %840, i32 0
  %842 = sext i32 %112 to i64
  %843 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %842, i32 0
  %844 = bitcast %"struct.skvx::Vec"* %841 to <8 x float>*
  %845 = load <8 x float>, <8 x float>* %844, align 32, !noalias !54
  %846 = bitcast %"struct.skvx::Vec"* %843 to <8 x float>*
  %847 = load <8 x float>, <8 x float>* %846, align 32, !noalias !54
  %848 = fdiv <8 x float> %845, %847
  %849 = sext i32 %108 to i64
  %850 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %849, i32 0
  %851 = bitcast %"struct.skvx::Vec"* %850 to <8 x float>*
  store <8 x float> %848, <8 x float>* %851, align 32
  br label %1925

852:                                              ; preds = %103, %103
  %853 = sext i32 %110 to i64
  %854 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %853, i32 0
  %855 = sext i32 %112 to i64
  %856 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %855, i32 0
  %857 = bitcast %"struct.skvx::Vec"* %856 to <8 x float>*
  %858 = load <8 x float>, <8 x float>* %857, align 32, !noalias !57
  %859 = bitcast %"struct.skvx::Vec"* %854 to <8 x float>*
  %860 = load <8 x float>, <8 x float>* %859, align 32, !noalias !57
  %861 = fcmp olt <8 x float> %858, %860
  %862 = select <8 x i1> %861, <8 x float> %858, <8 x float> %860
  %863 = sext i32 %108 to i64
  %864 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %863, i32 0
  %865 = bitcast %"struct.skvx::Vec"* %864 to <8 x float>*
  store <8 x float> %862, <8 x float>* %865, align 32
  br label %1925

866:                                              ; preds = %103, %103
  %867 = sext i32 %110 to i64
  %868 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %867, i32 0
  %869 = sext i32 %112 to i64
  %870 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %869, i32 0
  %871 = bitcast %"struct.skvx::Vec"* %868 to <8 x float>*
  %872 = load <8 x float>, <8 x float>* %871, align 32, !noalias !60
  %873 = bitcast %"struct.skvx::Vec"* %870 to <8 x float>*
  %874 = load <8 x float>, <8 x float>* %873, align 32, !noalias !60
  %875 = fcmp olt <8 x float> %872, %874
  %876 = select <8 x i1> %875, <8 x float> %874, <8 x float> %872
  %877 = sext i32 %108 to i64
  %878 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %877, i32 0
  %879 = bitcast %"struct.skvx::Vec"* %878 to <8 x float>*
  store <8 x float> %876, <8 x float>* %879, align 32
  br label %1925

880:                                              ; preds = %103, %103
  %881 = sext i32 %110 to i64
  %882 = sext i32 %112 to i64
  %883 = sext i32 %114 to i64
  %884 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 0, i32 0, i32 0, i32 0
  %885 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 0, i32 0, i32 0, i32 0
  %886 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 0, i32 0, i32 0, i32 0
  %887 = load float, float* %884, align 4, !noalias !63
  %888 = load float, float* %885, align 4, !noalias !63
  %889 = load float, float* %886, align 4, !noalias !63
  %890 = tail call float @llvm.fma.f32(float %887, float %888, float %889) #10
  %891 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 0, i32 0, i32 1, i32 0
  %892 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 0, i32 0, i32 1, i32 0
  %893 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 0, i32 0, i32 1, i32 0
  %894 = load float, float* %891, align 4, !noalias !63
  %895 = load float, float* %892, align 4, !noalias !63
  %896 = load float, float* %893, align 4, !noalias !63
  %897 = tail call float @llvm.fma.f32(float %894, float %895, float %896) #10
  %898 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 0, i32 1, i32 0, i32 0
  %899 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 0, i32 1, i32 0, i32 0
  %900 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 0, i32 1, i32 0, i32 0
  %901 = load float, float* %898, align 4, !noalias !63
  %902 = load float, float* %899, align 4, !noalias !63
  %903 = load float, float* %900, align 4, !noalias !63
  %904 = tail call float @llvm.fma.f32(float %901, float %902, float %903) #10
  %905 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 0, i32 1, i32 1, i32 0
  %906 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 0, i32 1, i32 1, i32 0
  %907 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 0, i32 1, i32 1, i32 0
  %908 = load float, float* %905, align 4, !noalias !63
  %909 = load float, float* %906, align 4, !noalias !63
  %910 = load float, float* %907, align 4, !noalias !63
  %911 = tail call float @llvm.fma.f32(float %908, float %909, float %910) #10
  %912 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 1, i32 0, i32 0, i32 0
  %913 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 1, i32 0, i32 0, i32 0
  %914 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 1, i32 0, i32 0, i32 0
  %915 = load float, float* %912, align 4, !noalias !63
  %916 = load float, float* %913, align 4, !noalias !63
  %917 = load float, float* %914, align 4, !noalias !63
  %918 = tail call float @llvm.fma.f32(float %915, float %916, float %917) #10
  %919 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 1, i32 0, i32 1, i32 0
  %920 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 1, i32 0, i32 1, i32 0
  %921 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 1, i32 0, i32 1, i32 0
  %922 = load float, float* %919, align 4, !noalias !63
  %923 = load float, float* %920, align 4, !noalias !63
  %924 = load float, float* %921, align 4, !noalias !63
  %925 = tail call float @llvm.fma.f32(float %922, float %923, float %924) #10
  %926 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 1, i32 1, i32 0, i32 0
  %927 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 1, i32 1, i32 0, i32 0
  %928 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 1, i32 1, i32 0, i32 0
  %929 = load float, float* %926, align 4, !noalias !63
  %930 = load float, float* %927, align 4, !noalias !63
  %931 = load float, float* %928, align 4, !noalias !63
  %932 = tail call float @llvm.fma.f32(float %929, float %930, float %931) #10
  %933 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 1, i32 1, i32 1, i32 0
  %934 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 1, i32 1, i32 1, i32 0
  %935 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 1, i32 1, i32 1, i32 0
  %936 = load float, float* %933, align 4, !noalias !63
  %937 = load float, float* %934, align 4, !noalias !63
  %938 = load float, float* %935, align 4, !noalias !63
  %939 = tail call float @llvm.fma.f32(float %936, float %937, float %938) #10
  %940 = sext i32 %108 to i64
  %941 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %890, float* %941, align 32
  %942 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %897, float* %942, align 4
  %943 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %904, float* %943, align 8
  %944 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %911, float* %944, align 4
  %945 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %918, float* %945, align 16
  %946 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %925, float* %946, align 4
  %947 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %932, float* %947, align 8
  %948 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %939, float* %948, align 4
  br label %1925

949:                                              ; preds = %103, %103
  %950 = sext i32 %110 to i64
  %951 = sext i32 %112 to i64
  %952 = sext i32 %114 to i64
  %953 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %952, i32 0
  %954 = bitcast %"struct.skvx::Vec"* %953 to <8 x float>*
  %955 = load <8 x float>, <8 x float>* %954, align 32, !noalias !70
  %956 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %955
  %957 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 0, i32 0, i32 0, i32 0
  %958 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 0, i32 0, i32 0, i32 0
  %959 = load float, float* %957, align 4, !noalias !73
  %960 = load float, float* %958, align 4, !noalias !73
  %961 = extractelement <8 x float> %956, i32 0
  %962 = tail call float @llvm.fma.f32(float %959, float %960, float %961) #10
  %963 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 0, i32 0, i32 1, i32 0
  %964 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 0, i32 0, i32 1, i32 0
  %965 = load float, float* %963, align 4, !noalias !73
  %966 = load float, float* %964, align 4, !noalias !73
  %967 = extractelement <8 x float> %956, i32 1
  %968 = tail call float @llvm.fma.f32(float %965, float %966, float %967) #10
  %969 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 0, i32 1, i32 0, i32 0
  %970 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 0, i32 1, i32 0, i32 0
  %971 = load float, float* %969, align 4, !noalias !73
  %972 = load float, float* %970, align 4, !noalias !73
  %973 = extractelement <8 x float> %956, i32 2
  %974 = tail call float @llvm.fma.f32(float %971, float %972, float %973) #10
  %975 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 0, i32 1, i32 1, i32 0
  %976 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 0, i32 1, i32 1, i32 0
  %977 = load float, float* %975, align 4, !noalias !73
  %978 = load float, float* %976, align 4, !noalias !73
  %979 = extractelement <8 x float> %956, i32 3
  %980 = tail call float @llvm.fma.f32(float %977, float %978, float %979) #10
  %981 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 1, i32 0, i32 0, i32 0
  %982 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 1, i32 0, i32 0, i32 0
  %983 = load float, float* %981, align 4, !noalias !73
  %984 = load float, float* %982, align 4, !noalias !73
  %985 = extractelement <8 x float> %956, i32 4
  %986 = tail call float @llvm.fma.f32(float %983, float %984, float %985) #10
  %987 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 1, i32 0, i32 1, i32 0
  %988 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 1, i32 0, i32 1, i32 0
  %989 = load float, float* %987, align 4, !noalias !73
  %990 = load float, float* %988, align 4, !noalias !73
  %991 = extractelement <8 x float> %956, i32 5
  %992 = tail call float @llvm.fma.f32(float %989, float %990, float %991) #10
  %993 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 1, i32 1, i32 0, i32 0
  %994 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 1, i32 1, i32 0, i32 0
  %995 = load float, float* %993, align 4, !noalias !73
  %996 = load float, float* %994, align 4, !noalias !73
  %997 = extractelement <8 x float> %956, i32 6
  %998 = tail call float @llvm.fma.f32(float %995, float %996, float %997) #10
  %999 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 1, i32 1, i32 1, i32 0
  %1000 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 1, i32 1, i32 1, i32 0
  %1001 = load float, float* %999, align 4, !noalias !73
  %1002 = load float, float* %1000, align 4, !noalias !73
  %1003 = extractelement <8 x float> %956, i32 7
  %1004 = tail call float @llvm.fma.f32(float %1001, float %1002, float %1003) #10
  %1005 = sext i32 %108 to i64
  %1006 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %962, float* %1006, align 32
  %1007 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %968, float* %1007, align 4
  %1008 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %974, float* %1008, align 8
  %1009 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %980, float* %1009, align 4
  %1010 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %986, float* %1010, align 16
  %1011 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %992, float* %1011, align 4
  %1012 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %998, float* %1012, align 8
  %1013 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1004, float* %1013, align 4
  br label %1925

1014:                                             ; preds = %103, %103
  %1015 = sext i32 %110 to i64
  %1016 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1015, i32 0
  %1017 = bitcast %"struct.skvx::Vec"* %1016 to <8 x float>*
  %1018 = load <8 x float>, <8 x float>* %1017, align 32, !noalias !80
  %1019 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1018
  %1020 = sext i32 %112 to i64
  %1021 = sext i32 %114 to i64
  %1022 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 0, i32 0
  %1023 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 0, i32 0, i32 0, i32 0
  %1024 = extractelement <8 x float> %1019, i32 0
  %1025 = load float, float* %1022, align 4, !noalias !83
  %1026 = load float, float* %1023, align 4, !noalias !83
  %1027 = tail call float @llvm.fma.f32(float %1024, float %1025, float %1026) #10
  %1028 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 1, i32 0
  %1029 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 0, i32 0, i32 1, i32 0
  %1030 = extractelement <8 x float> %1019, i32 1
  %1031 = load float, float* %1028, align 4, !noalias !83
  %1032 = load float, float* %1029, align 4, !noalias !83
  %1033 = tail call float @llvm.fma.f32(float %1030, float %1031, float %1032) #10
  %1034 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 0, i32 0
  %1035 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 0, i32 1, i32 0, i32 0
  %1036 = extractelement <8 x float> %1019, i32 2
  %1037 = load float, float* %1034, align 4, !noalias !83
  %1038 = load float, float* %1035, align 4, !noalias !83
  %1039 = tail call float @llvm.fma.f32(float %1036, float %1037, float %1038) #10
  %1040 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 1, i32 0
  %1041 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 0, i32 1, i32 1, i32 0
  %1042 = extractelement <8 x float> %1019, i32 3
  %1043 = load float, float* %1040, align 4, !noalias !83
  %1044 = load float, float* %1041, align 4, !noalias !83
  %1045 = tail call float @llvm.fma.f32(float %1042, float %1043, float %1044) #10
  %1046 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 0, i32 0
  %1047 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 1, i32 0, i32 0, i32 0
  %1048 = extractelement <8 x float> %1019, i32 4
  %1049 = load float, float* %1046, align 4, !noalias !83
  %1050 = load float, float* %1047, align 4, !noalias !83
  %1051 = tail call float @llvm.fma.f32(float %1048, float %1049, float %1050) #10
  %1052 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 1, i32 0
  %1053 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 1, i32 0, i32 1, i32 0
  %1054 = extractelement <8 x float> %1019, i32 5
  %1055 = load float, float* %1052, align 4, !noalias !83
  %1056 = load float, float* %1053, align 4, !noalias !83
  %1057 = tail call float @llvm.fma.f32(float %1054, float %1055, float %1056) #10
  %1058 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 0, i32 0
  %1059 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 1, i32 1, i32 0, i32 0
  %1060 = extractelement <8 x float> %1019, i32 6
  %1061 = load float, float* %1058, align 4, !noalias !83
  %1062 = load float, float* %1059, align 4, !noalias !83
  %1063 = tail call float @llvm.fma.f32(float %1060, float %1061, float %1062) #10
  %1064 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 1, i32 0
  %1065 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 1, i32 1, i32 1, i32 0
  %1066 = extractelement <8 x float> %1019, i32 7
  %1067 = load float, float* %1064, align 4, !noalias !83
  %1068 = load float, float* %1065, align 4, !noalias !83
  %1069 = tail call float @llvm.fma.f32(float %1066, float %1067, float %1068) #10
  %1070 = sext i32 %108 to i64
  %1071 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1027, float* %1071, align 32
  %1072 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1033, float* %1072, align 4
  %1073 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1039, float* %1073, align 8
  %1074 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1045, float* %1074, align 4
  %1075 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1051, float* %1075, align 16
  %1076 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1057, float* %1076, align 4
  %1077 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1063, float* %1077, align 8
  %1078 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1069, float* %1078, align 4
  br label %1925

1079:                                             ; preds = %103, %103
  %1080 = sext i32 %110 to i64
  %1081 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 0, i32 0, i32 0, i32 0
  %1082 = load float, float* %1081, align 4, !noalias !90
  %1083 = tail call float @sqrtf(float %1082) #10, !noalias !90
  %1084 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 0, i32 0, i32 1, i32 0
  %1085 = load float, float* %1084, align 4, !noalias !90
  %1086 = tail call float @sqrtf(float %1085) #10, !noalias !90
  %1087 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 0, i32 1, i32 0, i32 0
  %1088 = load float, float* %1087, align 4, !noalias !90
  %1089 = tail call float @sqrtf(float %1088) #10, !noalias !90
  %1090 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 0, i32 1, i32 1, i32 0
  %1091 = load float, float* %1090, align 4, !noalias !90
  %1092 = tail call float @sqrtf(float %1091) #10, !noalias !90
  %1093 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 1, i32 0, i32 0, i32 0
  %1094 = load float, float* %1093, align 4, !noalias !90
  %1095 = tail call float @sqrtf(float %1094) #10, !noalias !90
  %1096 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 1, i32 0, i32 1, i32 0
  %1097 = load float, float* %1096, align 4, !noalias !90
  %1098 = tail call float @sqrtf(float %1097) #10, !noalias !90
  %1099 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 1, i32 1, i32 0, i32 0
  %1100 = load float, float* %1099, align 4, !noalias !90
  %1101 = tail call float @sqrtf(float %1100) #10, !noalias !90
  %1102 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 1, i32 1, i32 1, i32 0
  %1103 = load float, float* %1102, align 4, !noalias !90
  %1104 = tail call float @sqrtf(float %1103) #10, !noalias !90
  %1105 = sext i32 %108 to i64
  %1106 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1083, float* %1106, align 32
  %1107 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1086, float* %1107, align 4
  %1108 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1089, float* %1108, align 8
  %1109 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1092, float* %1109, align 4
  %1110 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1095, float* %1110, align 16
  %1111 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1098, float* %1111, align 4
  %1112 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1101, float* %1112, align 8
  %1113 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1104, float* %1113, align 4
  br label %1925

1114:                                             ; preds = %103, %103
  %1115 = sext i32 %110 to i64
  %1116 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1115
  %1117 = sext i32 %112 to i64
  %1118 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1117
  %1119 = bitcast %union.Slot* %1116 to <8 x i32>*
  %1120 = load <8 x i32>, <8 x i32>* %1119, align 32, !noalias !97
  %1121 = bitcast %union.Slot* %1118 to <8 x i32>*
  %1122 = load <8 x i32>, <8 x i32>* %1121, align 32, !noalias !97
  %1123 = add <8 x i32> %1122, %1120
  %1124 = sext i32 %108 to i64
  %1125 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1124
  %1126 = bitcast %union.Slot* %1125 to <8 x i32>*
  store <8 x i32> %1123, <8 x i32>* %1126, align 32
  br label %1925

1127:                                             ; preds = %103, %103
  %1128 = sext i32 %110 to i64
  %1129 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1128
  %1130 = sext i32 %112 to i64
  %1131 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1130
  %1132 = bitcast %union.Slot* %1129 to <8 x i32>*
  %1133 = load <8 x i32>, <8 x i32>* %1132, align 32, !noalias !100
  %1134 = bitcast %union.Slot* %1131 to <8 x i32>*
  %1135 = load <8 x i32>, <8 x i32>* %1134, align 32, !noalias !100
  %1136 = sub <8 x i32> %1133, %1135
  %1137 = sext i32 %108 to i64
  %1138 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1137
  %1139 = bitcast %union.Slot* %1138 to <8 x i32>*
  store <8 x i32> %1136, <8 x i32>* %1139, align 32
  br label %1925

1140:                                             ; preds = %103, %103
  %1141 = sext i32 %110 to i64
  %1142 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1141
  %1143 = sext i32 %112 to i64
  %1144 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1143
  %1145 = bitcast %union.Slot* %1142 to <8 x i32>*
  %1146 = load <8 x i32>, <8 x i32>* %1145, align 32, !noalias !103
  %1147 = bitcast %union.Slot* %1144 to <8 x i32>*
  %1148 = load <8 x i32>, <8 x i32>* %1147, align 32, !noalias !103
  %1149 = mul <8 x i32> %1148, %1146
  %1150 = sext i32 %108 to i64
  %1151 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1150
  %1152 = bitcast %union.Slot* %1151 to <8 x i32>*
  store <8 x i32> %1149, <8 x i32>* %1152, align 32
  br label %1925

1153:                                             ; preds = %103, %103
  %1154 = sext i32 %110 to i64
  %1155 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1154
  %1156 = bitcast %union.Slot* %1155 to <8 x i32>*
  %1157 = load <8 x i32>, <8 x i32>* %1156, align 32, !noalias !106
  %1158 = insertelement <8 x i32> undef, i32 %116, i32 0
  %1159 = shufflevector <8 x i32> %1158, <8 x i32> undef, <8 x i32> zeroinitializer
  %1160 = shl <8 x i32> %1157, %1159
  %1161 = sext i32 %108 to i64
  %1162 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1161
  %1163 = bitcast %union.Slot* %1162 to <8 x i32>*
  store <8 x i32> %1160, <8 x i32>* %1163, align 32
  br label %1925

1164:                                             ; preds = %103, %103
  %1165 = sext i32 %110 to i64
  %1166 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1165
  %1167 = bitcast %union.Slot* %1166 to <8 x i32>*
  %1168 = load <8 x i32>, <8 x i32>* %1167, align 32, !noalias !109
  %1169 = insertelement <8 x i32> undef, i32 %116, i32 0
  %1170 = shufflevector <8 x i32> %1169, <8 x i32> undef, <8 x i32> zeroinitializer
  %1171 = ashr <8 x i32> %1168, %1170
  %1172 = sext i32 %108 to i64
  %1173 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1172
  %1174 = bitcast %union.Slot* %1173 to <8 x i32>*
  store <8 x i32> %1171, <8 x i32>* %1174, align 32
  br label %1925

1175:                                             ; preds = %103, %103
  %1176 = sext i32 %110 to i64
  %1177 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1176
  %1178 = bitcast %union.Slot* %1177 to <8 x i32>*
  %1179 = load <8 x i32>, <8 x i32>* %1178, align 32, !noalias !112
  %1180 = insertelement <8 x i32> undef, i32 %116, i32 0
  %1181 = shufflevector <8 x i32> %1180, <8 x i32> undef, <8 x i32> zeroinitializer
  %1182 = lshr <8 x i32> %1179, %1181
  %1183 = sext i32 %108 to i64
  %1184 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1183
  %1185 = bitcast %union.Slot* %1184 to <8 x i32>*
  store <8 x i32> %1182, <8 x i32>* %1185, align 32
  br label %1925

1186:                                             ; preds = %103, %103
  %1187 = sext i32 %110 to i64
  %1188 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1187, i32 0
  %1189 = sext i32 %112 to i64
  %1190 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1189, i32 0
  %1191 = bitcast %"struct.skvx::Vec"* %1188 to <8 x float>*
  %1192 = load <8 x float>, <8 x float>* %1191, align 32, !noalias !115
  %1193 = bitcast %"struct.skvx::Vec"* %1190 to <8 x float>*
  %1194 = load <8 x float>, <8 x float>* %1193, align 32, !noalias !115
  %1195 = fcmp oeq <8 x float> %1192, %1194
  %1196 = sext <8 x i1> %1195 to <8 x i32>
  %1197 = sext i32 %108 to i64
  %1198 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1197
  %1199 = bitcast %union.Slot* %1198 to <8 x i32>*
  store <8 x i32> %1196, <8 x i32>* %1199, align 32
  br label %1925

1200:                                             ; preds = %103, %103
  %1201 = sext i32 %110 to i64
  %1202 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1201, i32 0
  %1203 = sext i32 %112 to i64
  %1204 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1203, i32 0
  %1205 = bitcast %"struct.skvx::Vec"* %1202 to <8 x float>*
  %1206 = load <8 x float>, <8 x float>* %1205, align 32, !noalias !118
  %1207 = bitcast %"struct.skvx::Vec"* %1204 to <8 x float>*
  %1208 = load <8 x float>, <8 x float>* %1207, align 32, !noalias !118
  %1209 = fcmp une <8 x float> %1206, %1208
  %1210 = sext <8 x i1> %1209 to <8 x i32>
  %1211 = sext i32 %108 to i64
  %1212 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1211
  %1213 = bitcast %union.Slot* %1212 to <8 x i32>*
  store <8 x i32> %1210, <8 x i32>* %1213, align 32
  br label %1925

1214:                                             ; preds = %103, %103
  %1215 = sext i32 %110 to i64
  %1216 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1215, i32 0
  %1217 = sext i32 %112 to i64
  %1218 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1217, i32 0
  %1219 = bitcast %"struct.skvx::Vec"* %1216 to <8 x float>*
  %1220 = load <8 x float>, <8 x float>* %1219, align 32, !noalias !121
  %1221 = bitcast %"struct.skvx::Vec"* %1218 to <8 x float>*
  %1222 = load <8 x float>, <8 x float>* %1221, align 32, !noalias !121
  %1223 = fcmp ogt <8 x float> %1220, %1222
  %1224 = sext <8 x i1> %1223 to <8 x i32>
  %1225 = sext i32 %108 to i64
  %1226 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1225
  %1227 = bitcast %union.Slot* %1226 to <8 x i32>*
  store <8 x i32> %1224, <8 x i32>* %1227, align 32
  br label %1925

1228:                                             ; preds = %103, %103
  %1229 = sext i32 %110 to i64
  %1230 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1229, i32 0
  %1231 = sext i32 %112 to i64
  %1232 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1231, i32 0
  %1233 = bitcast %"struct.skvx::Vec"* %1230 to <8 x float>*
  %1234 = load <8 x float>, <8 x float>* %1233, align 32, !noalias !124
  %1235 = bitcast %"struct.skvx::Vec"* %1232 to <8 x float>*
  %1236 = load <8 x float>, <8 x float>* %1235, align 32, !noalias !124
  %1237 = fcmp oge <8 x float> %1234, %1236
  %1238 = sext <8 x i1> %1237 to <8 x i32>
  %1239 = sext i32 %108 to i64
  %1240 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1239
  %1241 = bitcast %union.Slot* %1240 to <8 x i32>*
  store <8 x i32> %1238, <8 x i32>* %1241, align 32
  br label %1925

1242:                                             ; preds = %103, %103
  %1243 = sext i32 %110 to i64
  %1244 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1243
  %1245 = sext i32 %112 to i64
  %1246 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1245
  %1247 = bitcast %union.Slot* %1244 to <8 x i32>*
  %1248 = load <8 x i32>, <8 x i32>* %1247, align 32, !noalias !127
  %1249 = bitcast %union.Slot* %1246 to <8 x i32>*
  %1250 = load <8 x i32>, <8 x i32>* %1249, align 32, !noalias !127
  %1251 = icmp eq <8 x i32> %1248, %1250
  %1252 = sext <8 x i1> %1251 to <8 x i32>
  %1253 = sext i32 %108 to i64
  %1254 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1253
  %1255 = bitcast %union.Slot* %1254 to <8 x i32>*
  store <8 x i32> %1252, <8 x i32>* %1255, align 32
  br label %1925

1256:                                             ; preds = %103, %103
  %1257 = sext i32 %110 to i64
  %1258 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1257
  %1259 = sext i32 %112 to i64
  %1260 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1259
  %1261 = bitcast %union.Slot* %1258 to <8 x i32>*
  %1262 = load <8 x i32>, <8 x i32>* %1261, align 32, !noalias !130
  %1263 = bitcast %union.Slot* %1260 to <8 x i32>*
  %1264 = load <8 x i32>, <8 x i32>* %1263, align 32, !noalias !130
  %1265 = icmp sgt <8 x i32> %1262, %1264
  %1266 = sext <8 x i1> %1265 to <8 x i32>
  %1267 = sext i32 %108 to i64
  %1268 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1267
  %1269 = bitcast %union.Slot* %1268 to <8 x i32>*
  store <8 x i32> %1266, <8 x i32>* %1269, align 32
  br label %1925

1270:                                             ; preds = %103, %103
  %1271 = sext i32 %110 to i64
  %1272 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1271
  %1273 = sext i32 %112 to i64
  %1274 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1273
  %1275 = bitcast %union.Slot* %1272 to <8 x i32>*
  %1276 = load <8 x i32>, <8 x i32>* %1275, align 32, !noalias !133
  %1277 = bitcast %union.Slot* %1274 to <8 x i32>*
  %1278 = load <8 x i32>, <8 x i32>* %1277, align 32, !noalias !133
  %1279 = and <8 x i32> %1278, %1276
  %1280 = sext i32 %108 to i64
  %1281 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1280
  %1282 = bitcast %union.Slot* %1281 to <8 x i32>*
  store <8 x i32> %1279, <8 x i32>* %1282, align 32
  br label %1925

1283:                                             ; preds = %103, %103
  %1284 = sext i32 %110 to i64
  %1285 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1284
  %1286 = sext i32 %112 to i64
  %1287 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1286
  %1288 = bitcast %union.Slot* %1285 to <8 x i32>*
  %1289 = load <8 x i32>, <8 x i32>* %1288, align 32, !noalias !136
  %1290 = bitcast %union.Slot* %1287 to <8 x i32>*
  %1291 = load <8 x i32>, <8 x i32>* %1290, align 32, !noalias !136
  %1292 = or <8 x i32> %1291, %1289
  %1293 = sext i32 %108 to i64
  %1294 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1293
  %1295 = bitcast %union.Slot* %1294 to <8 x i32>*
  store <8 x i32> %1292, <8 x i32>* %1295, align 32
  br label %1925

1296:                                             ; preds = %103, %103
  %1297 = sext i32 %110 to i64
  %1298 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1297
  %1299 = sext i32 %112 to i64
  %1300 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1299
  %1301 = bitcast %union.Slot* %1298 to <8 x i32>*
  %1302 = load <8 x i32>, <8 x i32>* %1301, align 32, !noalias !139
  %1303 = bitcast %union.Slot* %1300 to <8 x i32>*
  %1304 = load <8 x i32>, <8 x i32>* %1303, align 32, !noalias !139
  %1305 = xor <8 x i32> %1304, %1302
  %1306 = sext i32 %108 to i64
  %1307 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1306
  %1308 = bitcast %union.Slot* %1307 to <8 x i32>*
  store <8 x i32> %1305, <8 x i32>* %1308, align 32
  br label %1925

1309:                                             ; preds = %103, %103
  %1310 = sext i32 %110 to i64
  %1311 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1310
  %1312 = sext i32 %112 to i64
  %1313 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1312
  %1314 = bitcast %union.Slot* %1313 to <8 x i32>*
  %1315 = load <8 x i32>, <8 x i32>* %1314, align 32, !noalias !142
  %1316 = xor <8 x i32> %1315, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1317 = bitcast %union.Slot* %1311 to <8 x i32>*
  %1318 = load <8 x i32>, <8 x i32>* %1317, align 32, !noalias !145
  %1319 = and <8 x i32> %1318, %1316
  %1320 = sext i32 %108 to i64
  %1321 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1320
  %1322 = bitcast %union.Slot* %1321 to <8 x i32>*
  store <8 x i32> %1319, <8 x i32>* %1322, align 32
  br label %1925

1323:                                             ; preds = %103, %103
  %1324 = sext i32 %110 to i64
  %1325 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324
  %1326 = sext i32 %112 to i64
  %1327 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1326
  %1328 = sext i32 %114 to i64
  %1329 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1328
  %1330 = bitcast %union.Slot* %1327 to <2 x i32>*
  %1331 = load <2 x i32>, <2 x i32>* %1330, align 16, !noalias !148
  %1332 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1326, i32 0, i32 0, i32 1
  %1333 = bitcast %"struct.skvx::Vec.1"* %1332 to <2 x i32>*
  %1334 = load <2 x i32>, <2 x i32>* %1333, align 8, !noalias !148
  %1335 = shufflevector <2 x i32> %1331, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1336 = shufflevector <2 x i32> %1334, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1337 = shufflevector <4 x i32> %1335, <4 x i32> %1336, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1338 = bitcast %union.Slot* %1325 to <4 x i32>*
  %1339 = load <4 x i32>, <4 x i32>* %1338, align 16, !noalias !148
  %1340 = and <4 x i32> %1337, %1339
  %1341 = bitcast <4 x i32> %1340 to <2 x i64>
  %1342 = extractelement <2 x i64> %1341, i32 0
  %1343 = extractelement <2 x i64> %1341, i32 1
  %1344 = bitcast i64 %1342 to <2 x i32>
  %1345 = shufflevector <2 x i32> %1344, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1346 = bitcast i64 %1343 to <2 x i32>
  %1347 = shufflevector <2 x i32> %1346, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1348 = shufflevector <4 x i32> %1345, <4 x i32> %1347, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1349 = bitcast <4 x i32> %1339 to <2 x i64>
  %1350 = xor <2 x i64> %1349, <i64 -1, i64 -1>
  %1351 = extractelement <2 x i64> %1350, i32 0
  %1352 = extractelement <2 x i64> %1350, i32 1
  %1353 = bitcast i64 %1351 to <2 x i32>
  %1354 = shufflevector <2 x i32> %1353, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1355 = bitcast i64 %1352 to <2 x i32>
  %1356 = shufflevector <2 x i32> %1355, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1357 = shufflevector <4 x i32> %1354, <4 x i32> %1356, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1358 = bitcast %union.Slot* %1329 to <2 x i32>*
  %1359 = load <2 x i32>, <2 x i32>* %1358, align 16, !noalias !148
  %1360 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1328, i32 0, i32 0, i32 1
  %1361 = bitcast %"struct.skvx::Vec.1"* %1360 to <2 x i32>*
  %1362 = load <2 x i32>, <2 x i32>* %1361, align 8, !noalias !148
  %1363 = shufflevector <2 x i32> %1359, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1364 = shufflevector <2 x i32> %1362, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1365 = shufflevector <4 x i32> %1363, <4 x i32> %1364, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1366 = and <4 x i32> %1357, %1365
  %1367 = bitcast <4 x i32> %1366 to <2 x i64>
  %1368 = extractelement <2 x i64> %1367, i32 0
  %1369 = extractelement <2 x i64> %1367, i32 1
  %1370 = bitcast i64 %1368 to <2 x i32>
  %1371 = shufflevector <2 x i32> %1370, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1372 = bitcast i64 %1369 to <2 x i32>
  %1373 = shufflevector <2 x i32> %1372, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1374 = shufflevector <4 x i32> %1371, <4 x i32> %1373, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1375 = or <4 x i32> %1374, %1348
  %1376 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1
  %1377 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1326, i32 0, i32 1
  %1378 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1328, i32 0, i32 1
  %1379 = bitcast %"struct.skvx::Vec.0"* %1377 to <2 x i32>*
  %1380 = load <2 x i32>, <2 x i32>* %1379, align 16, !noalias !148
  %1381 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1326, i32 0, i32 1, i32 1
  %1382 = bitcast %"struct.skvx::Vec.1"* %1381 to <2 x i32>*
  %1383 = load <2 x i32>, <2 x i32>* %1382, align 8, !noalias !148
  %1384 = shufflevector <2 x i32> %1380, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1385 = shufflevector <2 x i32> %1383, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1386 = shufflevector <4 x i32> %1384, <4 x i32> %1385, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1387 = bitcast %"struct.skvx::Vec.0"* %1376 to <4 x i32>*
  %1388 = load <4 x i32>, <4 x i32>* %1387, align 16, !noalias !148
  %1389 = and <4 x i32> %1386, %1388
  %1390 = bitcast <4 x i32> %1389 to <2 x i64>
  %1391 = extractelement <2 x i64> %1390, i32 0
  %1392 = extractelement <2 x i64> %1390, i32 1
  %1393 = bitcast i64 %1391 to <2 x i32>
  %1394 = shufflevector <2 x i32> %1393, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1395 = bitcast i64 %1392 to <2 x i32>
  %1396 = shufflevector <2 x i32> %1395, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1397 = shufflevector <4 x i32> %1394, <4 x i32> %1396, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1398 = bitcast <4 x i32> %1388 to <2 x i64>
  %1399 = xor <2 x i64> %1398, <i64 -1, i64 -1>
  %1400 = extractelement <2 x i64> %1399, i32 0
  %1401 = extractelement <2 x i64> %1399, i32 1
  %1402 = bitcast i64 %1400 to <2 x i32>
  %1403 = shufflevector <2 x i32> %1402, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1404 = bitcast i64 %1401 to <2 x i32>
  %1405 = shufflevector <2 x i32> %1404, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1406 = shufflevector <4 x i32> %1403, <4 x i32> %1405, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1407 = bitcast %"struct.skvx::Vec.0"* %1378 to <2 x i32>*
  %1408 = load <2 x i32>, <2 x i32>* %1407, align 16, !noalias !148
  %1409 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1328, i32 0, i32 1, i32 1
  %1410 = bitcast %"struct.skvx::Vec.1"* %1409 to <2 x i32>*
  %1411 = load <2 x i32>, <2 x i32>* %1410, align 8, !noalias !148
  %1412 = shufflevector <2 x i32> %1408, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1413 = shufflevector <2 x i32> %1411, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1414 = shufflevector <4 x i32> %1412, <4 x i32> %1413, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1415 = and <4 x i32> %1406, %1414
  %1416 = bitcast <4 x i32> %1415 to <2 x i64>
  %1417 = extractelement <2 x i64> %1416, i32 0
  %1418 = extractelement <2 x i64> %1416, i32 1
  %1419 = bitcast i64 %1417 to <2 x i32>
  %1420 = shufflevector <2 x i32> %1419, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1421 = bitcast i64 %1418 to <2 x i32>
  %1422 = shufflevector <2 x i32> %1421, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1423 = shufflevector <4 x i32> %1420, <4 x i32> %1422, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1424 = or <4 x i32> %1423, %1397
  %1425 = sext i32 %108 to i64
  %1426 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1425
  %1427 = bitcast %union.Slot* %1426 to <4 x i32>*
  store <4 x i32> %1375, <4 x i32>* %1427, align 32
  %1428 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1425, i32 0, i32 1
  %1429 = bitcast %"struct.skvx::Vec.0"* %1428 to <4 x i32>*
  store <4 x i32> %1424, <4 x i32>* %1429, align 16
  br label %1925

1430:                                             ; preds = %103, %103
  %1431 = sext i32 %110 to i64
  %1432 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 0, i32 0, i32 0, i32 0
  %1433 = load float, float* %1432, align 4, !noalias !151
  %1434 = tail call float @ceilf(float %1433) #10, !noalias !158
  %1435 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 0, i32 0, i32 1, i32 0
  %1436 = load float, float* %1435, align 4, !noalias !151
  %1437 = tail call float @ceilf(float %1436) #10, !noalias !158
  %1438 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 0, i32 1, i32 0, i32 0
  %1439 = load float, float* %1438, align 4, !noalias !151
  %1440 = tail call float @ceilf(float %1439) #10, !noalias !158
  %1441 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 0, i32 1, i32 1, i32 0
  %1442 = load float, float* %1441, align 4, !noalias !151
  %1443 = tail call float @ceilf(float %1442) #10, !noalias !158
  %1444 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 1, i32 0, i32 0, i32 0
  %1445 = load float, float* %1444, align 4, !noalias !151
  %1446 = tail call float @ceilf(float %1445) #10, !noalias !158
  %1447 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 1, i32 0, i32 1, i32 0
  %1448 = load float, float* %1447, align 4, !noalias !151
  %1449 = tail call float @ceilf(float %1448) #10, !noalias !158
  %1450 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 1, i32 1, i32 0, i32 0
  %1451 = load float, float* %1450, align 4, !noalias !151
  %1452 = tail call float @ceilf(float %1451) #10, !noalias !158
  %1453 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 1, i32 1, i32 1, i32 0
  %1454 = load float, float* %1453, align 4, !noalias !151
  %1455 = tail call float @ceilf(float %1454) #10, !noalias !158
  %1456 = sext i32 %108 to i64
  %1457 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1434, float* %1457, align 32
  %1458 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1437, float* %1458, align 4
  %1459 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1440, float* %1459, align 8
  %1460 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1443, float* %1460, align 4
  %1461 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1446, float* %1461, align 16
  %1462 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1449, float* %1462, align 4
  %1463 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1452, float* %1463, align 8
  %1464 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1455, float* %1464, align 4
  br label %1925

1465:                                             ; preds = %103, %103
  %1466 = sext i32 %110 to i64
  %1467 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 0, i32 0, i32 0, i32 0
  %1468 = load float, float* %1467, align 4, !noalias !159
  %1469 = tail call float @floorf(float %1468) #10, !noalias !166
  %1470 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 0, i32 0, i32 1, i32 0
  %1471 = load float, float* %1470, align 4, !noalias !159
  %1472 = tail call float @floorf(float %1471) #10, !noalias !166
  %1473 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 0, i32 1, i32 0, i32 0
  %1474 = load float, float* %1473, align 4, !noalias !159
  %1475 = tail call float @floorf(float %1474) #10, !noalias !166
  %1476 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 0, i32 1, i32 1, i32 0
  %1477 = load float, float* %1476, align 4, !noalias !159
  %1478 = tail call float @floorf(float %1477) #10, !noalias !166
  %1479 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 1, i32 0, i32 0, i32 0
  %1480 = load float, float* %1479, align 4, !noalias !159
  %1481 = tail call float @floorf(float %1480) #10, !noalias !166
  %1482 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 1, i32 0, i32 1, i32 0
  %1483 = load float, float* %1482, align 4, !noalias !159
  %1484 = tail call float @floorf(float %1483) #10, !noalias !166
  %1485 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 1, i32 1, i32 0, i32 0
  %1486 = load float, float* %1485, align 4, !noalias !159
  %1487 = tail call float @floorf(float %1486) #10, !noalias !166
  %1488 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 1, i32 1, i32 1, i32 0
  %1489 = load float, float* %1488, align 4, !noalias !159
  %1490 = tail call float @floorf(float %1489) #10, !noalias !166
  %1491 = sext i32 %108 to i64
  %1492 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1469, float* %1492, align 32
  %1493 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1472, float* %1493, align 4
  %1494 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1475, float* %1494, align 8
  %1495 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1478, float* %1495, align 4
  %1496 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1481, float* %1496, align 16
  %1497 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1484, float* %1497, align 4
  %1498 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1487, float* %1498, align 8
  %1499 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1490, float* %1499, align 4
  br label %1925

1500:                                             ; preds = %103, %103
  %1501 = sext i32 %110 to i64
  %1502 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1501
  %1503 = bitcast %union.Slot* %1502 to <8 x i32>*
  %1504 = load <8 x i32>, <8 x i32>* %1503, align 32, !noalias !167
  %1505 = sitofp <8 x i32> %1504 to <8 x float>
  %1506 = sext i32 %108 to i64
  %1507 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1506, i32 0
  %1508 = bitcast %"struct.skvx::Vec"* %1507 to <8 x float>*
  store <8 x float> %1505, <8 x float>* %1508, align 32
  br label %1925

1509:                                             ; preds = %103, %103
  %1510 = sext i32 %110 to i64
  %1511 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1510, i32 0
  %1512 = bitcast %"struct.skvx::Vec"* %1511 to <8 x float>*
  %1513 = load <8 x float>, <8 x float>* %1512, align 32, !noalias !170
  %1514 = fptosi <8 x float> %1513 to <8 x i32>
  %1515 = sext i32 %108 to i64
  %1516 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1515
  %1517 = bitcast %union.Slot* %1516 to <8 x i32>*
  store <8 x i32> %1514, <8 x i32>* %1517, align 32
  br label %1925

1518:                                             ; preds = %103, %103
  %1519 = sext i32 %110 to i64
  %1520 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1519, i32 0
  %1521 = bitcast %"struct.skvx::Vec"* %1520 to <4 x float>*
  %1522 = load <4 x float>, <4 x float>* %1521, align 16, !noalias !173
  %1523 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1522) #10
  %1524 = bitcast <4 x i32> %1523 to <2 x i64>
  %1525 = extractelement <2 x i64> %1524, i32 0
  %1526 = extractelement <2 x i64> %1524, i32 1
  %1527 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1519, i32 0, i32 1
  %1528 = bitcast %"struct.skvx::Vec.0"* %1527 to <4 x float>*
  %1529 = load <4 x float>, <4 x float>* %1528, align 16, !noalias !173
  %1530 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1529) #10
  %1531 = bitcast <4 x i32> %1530 to <2 x i64>
  %1532 = extractelement <2 x i64> %1531, i32 0
  %1533 = extractelement <2 x i64> %1531, i32 1
  %1534 = bitcast i64 %1525 to <2 x i32>
  %1535 = shufflevector <2 x i32> %1534, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1536 = bitcast i64 %1526 to <2 x i32>
  %1537 = shufflevector <2 x i32> %1536, <2 x i32> undef, <8 x i32> <i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %1538 = shufflevector <8 x i32> %1535, <8 x i32> %1537, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %1539 = bitcast i64 %1532 to <2 x i32>
  %1540 = shufflevector <2 x i32> %1539, <2 x i32> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %1541 = shufflevector <8 x i32> %1538, <8 x i32> %1540, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %1542 = bitcast i64 %1533 to <2 x i32>
  %1543 = shufflevector <2 x i32> %1542, <2 x i32> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1>
  %1544 = shufflevector <8 x i32> %1541, <8 x i32> %1543, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>
  %1545 = sext i32 %108 to i64
  %1546 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1545
  %1547 = bitcast %union.Slot* %1546 to <8 x i32>*
  store <8 x i32> %1544, <8 x i32>* %1547, align 32
  br label %1925

1548:                                             ; preds = %103, %103
  %1549 = sext i32 %110 to i64
  %1550 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1549, i32 0
  %1551 = bitcast %"struct.skvx::Vec"* %1550 to <2 x i64>*
  %1552 = load <2 x i64>, <2 x i64>* %1551, align 16
  %1553 = and <2 x i64> %1552, <i64 -9223372034707292160, i64 -9223372034707292160>
  %1554 = extractelement <2 x i64> %1553, i32 0
  %1555 = extractelement <2 x i64> %1553, i32 1
  %1556 = bitcast i64 %1554 to <2 x i32>
  %1557 = shufflevector <2 x i32> %1556, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1558 = bitcast i64 %1555 to <2 x i32>
  %1559 = shufflevector <2 x i32> %1558, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1560 = shufflevector <4 x i32> %1557, <4 x i32> %1559, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1561 = bitcast <4 x i32> %1560 to <2 x i64>
  %1562 = xor <2 x i64> %1552, %1561
  %1563 = extractelement <2 x i64> %1562, i32 0
  %1564 = extractelement <2 x i64> %1562, i32 1
  %1565 = bitcast i64 %1563 to <2 x i32>
  %1566 = shufflevector <2 x i32> %1565, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1567 = bitcast i64 %1564 to <2 x i32>
  %1568 = shufflevector <2 x i32> %1567, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1569 = shufflevector <4 x i32> %1566, <4 x i32> %1568, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1570 = icmp ult <4 x i32> %1569, <i32 947912704, i32 947912704, i32 947912704, i32 947912704>
  %1571 = sext <4 x i1> %1570 to <4 x i32>
  %1572 = bitcast <4 x i32> %1571 to <2 x i64>
  %1573 = extractelement <2 x i64> %1572, i32 0
  %1574 = extractelement <2 x i64> %1572, i32 1
  %1575 = bitcast i64 %1573 to <2 x i32>
  %1576 = shufflevector <2 x i32> %1575, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1577 = bitcast i64 %1574 to <2 x i32>
  %1578 = shufflevector <2 x i32> %1577, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1579 = shufflevector <4 x i32> %1576, <4 x i32> %1578, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1580 = lshr <4 x i32> %1560, <i32 16, i32 16, i32 16, i32 16>
  %1581 = bitcast <4 x i32> %1580 to <2 x i64>
  %1582 = extractelement <2 x i64> %1581, i32 0
  %1583 = extractelement <2 x i64> %1581, i32 1
  %1584 = bitcast i64 %1582 to <2 x i32>
  %1585 = shufflevector <2 x i32> %1584, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1586 = bitcast i64 %1583 to <2 x i32>
  %1587 = shufflevector <2 x i32> %1586, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1588 = shufflevector <4 x i32> %1585, <4 x i32> %1587, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1589 = lshr <4 x i32> %1569, <i32 13, i32 13, i32 13, i32 13>
  %1590 = bitcast <4 x i32> %1589 to <2 x i64>
  %1591 = extractelement <2 x i64> %1590, i32 0
  %1592 = extractelement <2 x i64> %1590, i32 1
  %1593 = bitcast i64 %1591 to <2 x i32>
  %1594 = shufflevector <2 x i32> %1593, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1595 = bitcast i64 %1592 to <2 x i32>
  %1596 = shufflevector <2 x i32> %1595, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1597 = shufflevector <4 x i32> %1594, <4 x i32> %1596, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1598 = add <4 x i32> %1597, %1588
  %1599 = bitcast <4 x i32> %1598 to <2 x i64>
  %1600 = extractelement <2 x i64> %1599, i32 0
  %1601 = extractelement <2 x i64> %1599, i32 1
  %1602 = bitcast i64 %1600 to <2 x i32>
  %1603 = shufflevector <2 x i32> %1602, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1604 = bitcast i64 %1601 to <2 x i32>
  %1605 = shufflevector <2 x i32> %1604, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1606 = shufflevector <4 x i32> %1603, <4 x i32> %1605, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1607 = add <4 x i32> %1606, <i32 -114688, i32 -114688, i32 -114688, i32 -114688>
  %1608 = bitcast <4 x i32> %1607 to <2 x i64>
  %1609 = extractelement <2 x i64> %1608, i32 0
  %1610 = extractelement <2 x i64> %1608, i32 1
  %1611 = bitcast i64 %1609 to <2 x i32>
  %1612 = bitcast <4 x i32> %1579 to <2 x i64>
  %1613 = xor <2 x i64> %1612, <i64 -1, i64 -1>
  %1614 = extractelement <2 x i64> %1613, i32 0
  %1615 = extractelement <2 x i64> %1613, i32 1
  %1616 = bitcast i64 %1614 to <2 x i32>
  %1617 = shufflevector <2 x i32> %1616, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1618 = bitcast i64 %1615 to <2 x i32>
  %1619 = shufflevector <2 x i32> %1618, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1620 = shufflevector <4 x i32> %1617, <4 x i32> %1619, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1621 = bitcast i64 %1610 to <2 x i32>
  %1622 = shufflevector <2 x i32> %1611, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1623 = shufflevector <2 x i32> %1621, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1624 = shufflevector <4 x i32> %1622, <4 x i32> %1623, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1625 = and <4 x i32> %1624, %1620
  %1626 = bitcast <4 x i32> %1625 to <2 x i64>
  %1627 = extractelement <2 x i64> %1626, i32 0
  %1628 = extractelement <2 x i64> %1626, i32 1
  %1629 = bitcast i64 %1627 to <2 x i32>
  %1630 = shufflevector <2 x i32> %1629, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1631 = bitcast i64 %1628 to <2 x i32>
  %1632 = shufflevector <2 x i32> %1631, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1633 = shufflevector <4 x i32> %1630, <4 x i32> %1632, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1634 = bitcast <4 x i32> %1633 to <2 x i64>
  %1635 = extractelement <2 x i64> %1634, i32 0
  %1636 = extractelement <2 x i64> %1634, i32 1
  %1637 = bitcast i64 %1635 to <2 x i32>
  %1638 = shufflevector <2 x i32> %1637, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1639 = bitcast i64 %1636 to <2 x i32>
  %1640 = shufflevector <2 x i32> %1639, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1641 = shufflevector <4 x i32> %1638, <4 x i32> %1640, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1642 = trunc <4 x i32> %1641 to <4 x i16>
  %1643 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1549, i32 0, i32 1
  %1644 = bitcast %"struct.skvx::Vec.0"* %1643 to <2 x i64>*
  %1645 = load <2 x i64>, <2 x i64>* %1644, align 16
  %1646 = and <2 x i64> %1645, <i64 -9223372034707292160, i64 -9223372034707292160>
  %1647 = extractelement <2 x i64> %1646, i32 0
  %1648 = extractelement <2 x i64> %1646, i32 1
  %1649 = bitcast i64 %1647 to <2 x i32>
  %1650 = shufflevector <2 x i32> %1649, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1651 = bitcast i64 %1648 to <2 x i32>
  %1652 = shufflevector <2 x i32> %1651, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1653 = shufflevector <4 x i32> %1650, <4 x i32> %1652, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1654 = bitcast <4 x i32> %1653 to <2 x i64>
  %1655 = xor <2 x i64> %1645, %1654
  %1656 = extractelement <2 x i64> %1655, i32 0
  %1657 = extractelement <2 x i64> %1655, i32 1
  %1658 = bitcast i64 %1656 to <2 x i32>
  %1659 = shufflevector <2 x i32> %1658, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1660 = bitcast i64 %1657 to <2 x i32>
  %1661 = shufflevector <2 x i32> %1660, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1662 = shufflevector <4 x i32> %1659, <4 x i32> %1661, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1663 = icmp ult <4 x i32> %1662, <i32 947912704, i32 947912704, i32 947912704, i32 947912704>
  %1664 = sext <4 x i1> %1663 to <4 x i32>
  %1665 = bitcast <4 x i32> %1664 to <2 x i64>
  %1666 = extractelement <2 x i64> %1665, i32 0
  %1667 = extractelement <2 x i64> %1665, i32 1
  %1668 = bitcast i64 %1666 to <2 x i32>
  %1669 = shufflevector <2 x i32> %1668, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1670 = bitcast i64 %1667 to <2 x i32>
  %1671 = shufflevector <2 x i32> %1670, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1672 = shufflevector <4 x i32> %1669, <4 x i32> %1671, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1673 = lshr <4 x i32> %1653, <i32 16, i32 16, i32 16, i32 16>
  %1674 = bitcast <4 x i32> %1673 to <2 x i64>
  %1675 = extractelement <2 x i64> %1674, i32 0
  %1676 = extractelement <2 x i64> %1674, i32 1
  %1677 = bitcast i64 %1675 to <2 x i32>
  %1678 = shufflevector <2 x i32> %1677, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1679 = bitcast i64 %1676 to <2 x i32>
  %1680 = shufflevector <2 x i32> %1679, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1681 = shufflevector <4 x i32> %1678, <4 x i32> %1680, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1682 = lshr <4 x i32> %1662, <i32 13, i32 13, i32 13, i32 13>
  %1683 = bitcast <4 x i32> %1682 to <2 x i64>
  %1684 = extractelement <2 x i64> %1683, i32 0
  %1685 = extractelement <2 x i64> %1683, i32 1
  %1686 = bitcast i64 %1684 to <2 x i32>
  %1687 = shufflevector <2 x i32> %1686, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1688 = bitcast i64 %1685 to <2 x i32>
  %1689 = shufflevector <2 x i32> %1688, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1690 = shufflevector <4 x i32> %1687, <4 x i32> %1689, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1691 = add <4 x i32> %1690, %1681
  %1692 = bitcast <4 x i32> %1691 to <2 x i64>
  %1693 = extractelement <2 x i64> %1692, i32 0
  %1694 = extractelement <2 x i64> %1692, i32 1
  %1695 = bitcast i64 %1693 to <2 x i32>
  %1696 = shufflevector <2 x i32> %1695, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1697 = bitcast i64 %1694 to <2 x i32>
  %1698 = shufflevector <2 x i32> %1697, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1699 = shufflevector <4 x i32> %1696, <4 x i32> %1698, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1700 = add <4 x i32> %1699, <i32 -114688, i32 -114688, i32 -114688, i32 -114688>
  %1701 = bitcast <4 x i32> %1700 to <2 x i64>
  %1702 = extractelement <2 x i64> %1701, i32 0
  %1703 = extractelement <2 x i64> %1701, i32 1
  %1704 = bitcast i64 %1702 to <2 x i32>
  %1705 = bitcast <4 x i32> %1672 to <2 x i64>
  %1706 = xor <2 x i64> %1705, <i64 -1, i64 -1>
  %1707 = extractelement <2 x i64> %1706, i32 0
  %1708 = extractelement <2 x i64> %1706, i32 1
  %1709 = bitcast i64 %1707 to <2 x i32>
  %1710 = shufflevector <2 x i32> %1709, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1711 = bitcast i64 %1708 to <2 x i32>
  %1712 = shufflevector <2 x i32> %1711, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1713 = shufflevector <4 x i32> %1710, <4 x i32> %1712, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1714 = bitcast i64 %1703 to <2 x i32>
  %1715 = shufflevector <2 x i32> %1704, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1716 = shufflevector <2 x i32> %1714, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1717 = shufflevector <4 x i32> %1715, <4 x i32> %1716, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1718 = and <4 x i32> %1717, %1713
  %1719 = bitcast <4 x i32> %1718 to <2 x i64>
  %1720 = extractelement <2 x i64> %1719, i32 0
  %1721 = extractelement <2 x i64> %1719, i32 1
  %1722 = bitcast i64 %1720 to <2 x i32>
  %1723 = shufflevector <2 x i32> %1722, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1724 = bitcast i64 %1721 to <2 x i32>
  %1725 = shufflevector <2 x i32> %1724, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1726 = shufflevector <4 x i32> %1723, <4 x i32> %1725, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1727 = bitcast <4 x i32> %1726 to <2 x i64>
  %1728 = extractelement <2 x i64> %1727, i32 0
  %1729 = extractelement <2 x i64> %1727, i32 1
  %1730 = bitcast i64 %1728 to <2 x i32>
  %1731 = shufflevector <2 x i32> %1730, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1732 = bitcast i64 %1729 to <2 x i32>
  %1733 = shufflevector <2 x i32> %1732, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1734 = shufflevector <4 x i32> %1731, <4 x i32> %1733, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1735 = trunc <4 x i32> %1734 to <4 x i16>
  %1736 = shufflevector <4 x i16> %1642, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1737 = shufflevector <4 x i16> %1735, <4 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1738 = shufflevector <8 x i16> %1736, <8 x i16> %1737, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1739 = zext <8 x i16> %1738 to <8 x i32>
  %1740 = sext i32 %108 to i64
  %1741 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1740
  %1742 = bitcast %union.Slot* %1741 to <8 x i32>*
  store <8 x i32> %1739, <8 x i32>* %1742, align 32
  br label %1925

1743:                                             ; preds = %103, %103
  %1744 = sext i32 %110 to i64
  %1745 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744
  %1746 = bitcast %union.Slot* %1745 to <8 x i32>*
  %1747 = load <8 x i32>, <8 x i32>* %1746, align 32
  %1748 = trunc <8 x i32> %1747 to <8 x i16>
  %1749 = bitcast <8 x i16> %1748 to <2 x i64>
  %1750 = extractelement <2 x i64> %1749, i32 0
  %1751 = extractelement <2 x i64> %1749, i32 1
  %1752 = bitcast i64 %1750 to <4 x i16>
  %1753 = zext <4 x i16> %1752 to <4 x i32>
  %1754 = bitcast <4 x i32> %1753 to <2 x i64>
  %1755 = and <2 x i64> %1754, <i64 140737488388096, i64 140737488388096>
  %1756 = extractelement <2 x i64> %1755, i32 0
  %1757 = extractelement <2 x i64> %1755, i32 1
  %1758 = bitcast i64 %1756 to <2 x i32>
  %1759 = shufflevector <2 x i32> %1758, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1760 = bitcast i64 %1757 to <2 x i32>
  %1761 = shufflevector <2 x i32> %1760, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1762 = shufflevector <4 x i32> %1759, <4 x i32> %1761, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1763 = xor <4 x i32> %1762, %1753
  %1764 = bitcast <4 x i32> %1763 to <2 x i64>
  %1765 = extractelement <2 x i64> %1764, i32 0
  %1766 = extractelement <2 x i64> %1764, i32 1
  %1767 = bitcast i64 %1765 to <2 x i32>
  %1768 = shufflevector <2 x i32> %1767, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1769 = bitcast i64 %1766 to <2 x i32>
  %1770 = shufflevector <2 x i32> %1769, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1771 = shufflevector <4 x i32> %1768, <4 x i32> %1770, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1772 = icmp ult <4 x i32> %1771, <i32 1024, i32 1024, i32 1024, i32 1024>
  %1773 = sext <4 x i1> %1772 to <4 x i32>
  %1774 = bitcast <4 x i32> %1773 to <2 x i64>
  %1775 = extractelement <2 x i64> %1774, i32 0
  %1776 = extractelement <2 x i64> %1774, i32 1
  %1777 = bitcast i64 %1775 to <2 x i32>
  %1778 = shufflevector <2 x i32> %1777, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1779 = bitcast i64 %1776 to <2 x i32>
  %1780 = shufflevector <2 x i32> %1779, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1781 = shufflevector <4 x i32> %1778, <4 x i32> %1780, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1782 = shl <4 x i32> %1762, <i32 16, i32 16, i32 16, i32 16>
  %1783 = bitcast <4 x i32> %1782 to <2 x i64>
  %1784 = extractelement <2 x i64> %1783, i32 0
  %1785 = extractelement <2 x i64> %1783, i32 1
  %1786 = bitcast i64 %1784 to <2 x i32>
  %1787 = shufflevector <2 x i32> %1786, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1788 = bitcast i64 %1785 to <2 x i32>
  %1789 = shufflevector <2 x i32> %1788, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1790 = shufflevector <4 x i32> %1787, <4 x i32> %1789, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1791 = shl <4 x i32> %1771, <i32 13, i32 13, i32 13, i32 13>
  %1792 = bitcast <4 x i32> %1791 to <2 x i64>
  %1793 = extractelement <2 x i64> %1792, i32 0
  %1794 = extractelement <2 x i64> %1792, i32 1
  %1795 = bitcast i64 %1793 to <2 x i32>
  %1796 = shufflevector <2 x i32> %1795, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1797 = bitcast i64 %1794 to <2 x i32>
  %1798 = shufflevector <2 x i32> %1797, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1799 = shufflevector <4 x i32> %1796, <4 x i32> %1798, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1800 = add <4 x i32> %1799, %1790
  %1801 = bitcast <4 x i32> %1800 to <2 x i64>
  %1802 = extractelement <2 x i64> %1801, i32 0
  %1803 = extractelement <2 x i64> %1801, i32 1
  %1804 = bitcast i64 %1802 to <2 x i32>
  %1805 = shufflevector <2 x i32> %1804, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1806 = bitcast i64 %1803 to <2 x i32>
  %1807 = shufflevector <2 x i32> %1806, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1808 = shufflevector <4 x i32> %1805, <4 x i32> %1807, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1809 = add <4 x i32> %1808, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %1810 = bitcast <4 x i32> %1809 to <2 x i64>
  %1811 = extractelement <2 x i64> %1810, i32 0
  %1812 = extractelement <2 x i64> %1810, i32 1
  %1813 = bitcast i64 %1811 to <2 x i32>
  %1814 = bitcast i64 %1812 to <2 x i32>
  %1815 = bitcast <4 x i32> %1781 to <2 x i64>
  %1816 = xor <2 x i64> %1815, <i64 -1, i64 -1>
  %1817 = extractelement <2 x i64> %1816, i32 0
  %1818 = extractelement <2 x i64> %1816, i32 1
  %1819 = bitcast i64 %1817 to <2 x i32>
  %1820 = shufflevector <2 x i32> %1819, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1821 = bitcast i64 %1818 to <2 x i32>
  %1822 = shufflevector <2 x i32> %1821, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1823 = shufflevector <4 x i32> %1820, <4 x i32> %1822, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1824 = shufflevector <2 x i32> %1813, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1825 = shufflevector <2 x i32> %1814, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1826 = shufflevector <4 x i32> %1824, <4 x i32> %1825, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1827 = and <4 x i32> %1826, %1823
  %1828 = bitcast <4 x i32> %1827 to <2 x i64>
  %1829 = extractelement <2 x i64> %1828, i32 0
  %1830 = extractelement <2 x i64> %1828, i32 1
  %1831 = bitcast i64 %1829 to <2 x i32>
  %1832 = shufflevector <2 x i32> %1831, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1833 = bitcast i64 %1830 to <2 x i32>
  %1834 = shufflevector <2 x i32> %1833, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1835 = shufflevector <4 x i32> %1832, <4 x i32> %1834, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1836 = bitcast i64 %1751 to <4 x i16>
  %1837 = zext <4 x i16> %1836 to <4 x i32>
  %1838 = bitcast <4 x i32> %1837 to <2 x i64>
  %1839 = and <2 x i64> %1838, <i64 140737488388096, i64 140737488388096>
  %1840 = extractelement <2 x i64> %1839, i32 0
  %1841 = extractelement <2 x i64> %1839, i32 1
  %1842 = bitcast i64 %1840 to <2 x i32>
  %1843 = shufflevector <2 x i32> %1842, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1844 = bitcast i64 %1841 to <2 x i32>
  %1845 = shufflevector <2 x i32> %1844, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1846 = shufflevector <4 x i32> %1843, <4 x i32> %1845, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1847 = xor <4 x i32> %1846, %1837
  %1848 = bitcast <4 x i32> %1847 to <2 x i64>
  %1849 = extractelement <2 x i64> %1848, i32 0
  %1850 = extractelement <2 x i64> %1848, i32 1
  %1851 = bitcast i64 %1849 to <2 x i32>
  %1852 = shufflevector <2 x i32> %1851, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1853 = bitcast i64 %1850 to <2 x i32>
  %1854 = shufflevector <2 x i32> %1853, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1855 = shufflevector <4 x i32> %1852, <4 x i32> %1854, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1856 = icmp ult <4 x i32> %1855, <i32 1024, i32 1024, i32 1024, i32 1024>
  %1857 = sext <4 x i1> %1856 to <4 x i32>
  %1858 = bitcast <4 x i32> %1857 to <2 x i64>
  %1859 = extractelement <2 x i64> %1858, i32 0
  %1860 = extractelement <2 x i64> %1858, i32 1
  %1861 = bitcast i64 %1859 to <2 x i32>
  %1862 = shufflevector <2 x i32> %1861, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1863 = bitcast i64 %1860 to <2 x i32>
  %1864 = shufflevector <2 x i32> %1863, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1865 = shufflevector <4 x i32> %1862, <4 x i32> %1864, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1866 = shl <4 x i32> %1846, <i32 16, i32 16, i32 16, i32 16>
  %1867 = bitcast <4 x i32> %1866 to <2 x i64>
  %1868 = extractelement <2 x i64> %1867, i32 0
  %1869 = extractelement <2 x i64> %1867, i32 1
  %1870 = bitcast i64 %1868 to <2 x i32>
  %1871 = shufflevector <2 x i32> %1870, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1872 = bitcast i64 %1869 to <2 x i32>
  %1873 = shufflevector <2 x i32> %1872, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1874 = shufflevector <4 x i32> %1871, <4 x i32> %1873, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1875 = shl <4 x i32> %1855, <i32 13, i32 13, i32 13, i32 13>
  %1876 = bitcast <4 x i32> %1875 to <2 x i64>
  %1877 = extractelement <2 x i64> %1876, i32 0
  %1878 = extractelement <2 x i64> %1876, i32 1
  %1879 = bitcast i64 %1877 to <2 x i32>
  %1880 = shufflevector <2 x i32> %1879, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1881 = bitcast i64 %1878 to <2 x i32>
  %1882 = shufflevector <2 x i32> %1881, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1883 = shufflevector <4 x i32> %1880, <4 x i32> %1882, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1884 = add <4 x i32> %1883, %1874
  %1885 = bitcast <4 x i32> %1884 to <2 x i64>
  %1886 = extractelement <2 x i64> %1885, i32 0
  %1887 = extractelement <2 x i64> %1885, i32 1
  %1888 = bitcast i64 %1886 to <2 x i32>
  %1889 = shufflevector <2 x i32> %1888, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1890 = bitcast i64 %1887 to <2 x i32>
  %1891 = shufflevector <2 x i32> %1890, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1892 = shufflevector <4 x i32> %1889, <4 x i32> %1891, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1893 = add <4 x i32> %1892, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %1894 = bitcast <4 x i32> %1893 to <2 x i64>
  %1895 = extractelement <2 x i64> %1894, i32 0
  %1896 = extractelement <2 x i64> %1894, i32 1
  %1897 = bitcast i64 %1895 to <2 x i32>
  %1898 = bitcast i64 %1896 to <2 x i32>
  %1899 = bitcast <4 x i32> %1865 to <2 x i64>
  %1900 = xor <2 x i64> %1899, <i64 -1, i64 -1>
  %1901 = extractelement <2 x i64> %1900, i32 0
  %1902 = extractelement <2 x i64> %1900, i32 1
  %1903 = bitcast i64 %1901 to <2 x i32>
  %1904 = shufflevector <2 x i32> %1903, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1905 = bitcast i64 %1902 to <2 x i32>
  %1906 = shufflevector <2 x i32> %1905, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1907 = shufflevector <4 x i32> %1904, <4 x i32> %1906, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1908 = shufflevector <2 x i32> %1897, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1909 = shufflevector <2 x i32> %1898, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1910 = shufflevector <4 x i32> %1908, <4 x i32> %1909, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1911 = and <4 x i32> %1910, %1907
  %1912 = bitcast <4 x i32> %1911 to <2 x i64>
  %1913 = extractelement <2 x i64> %1912, i32 0
  %1914 = extractelement <2 x i64> %1912, i32 1
  %1915 = bitcast i64 %1913 to <2 x i32>
  %1916 = shufflevector <2 x i32> %1915, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1917 = bitcast i64 %1914 to <2 x i32>
  %1918 = shufflevector <2 x i32> %1917, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1919 = shufflevector <4 x i32> %1916, <4 x i32> %1918, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1920 = sext i32 %108 to i64
  %1921 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1920, i32 0
  %1922 = bitcast %"struct.skvx::Vec"* %1921 to <4 x i32>*
  store <4 x i32> %1835, <4 x i32>* %1922, align 32
  %1923 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1920, i32 0, i32 1
  %1924 = bitcast %"struct.skvx::Vec.0"* %1923 to <4 x i32>*
  store <4 x i32> %1919, <4 x i32>* %1924, align 16
  br label %1925

1925:                                             ; preds = %713, %756, %103, %103, %1743, %1548, %1518, %1509, %1500, %1465, %1430, %1323, %1309, %1296, %1283, %1270, %1256, %1242, %1228, %1214, %1200, %1186, %1175, %1164, %1153, %1140, %1127, %1114, %1079, %1014, %949, %880, %866, %852, %839, %826, %813, %800, %792, %777, %773, %671, %560, %478, %396, %374, %351, %328, %313, %306, %290, %280, %267, %257, %247, %238, %221, %214, %204, %164, %148, %139, %130, %122
  %1926 = add nsw i64 %104, 1
  %1927 = trunc i64 %1926 to i32
  %1928 = icmp eq i32 %1927, %1
  br i1 %1928, label %67, label %103

1929:                                             ; preds = %101, %25
  %1930 = icmp eq i8* %26, null
  br i1 %1930, label %1932, label %1931

1931:                                             ; preds = %1929
  tail call void @_ZdaPv(i8* nonnull %26) #11
  br label %1932

1932:                                             ; preds = %1929, %1931
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %12) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fma.f32(float, float, float) #6

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

; Function Attrs: nofree nounwind readnone
declare float @ceilf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind readnone
declare float @floorf(float) local_unnamed_addr #8

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float>) #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!4 = distinct !{!4, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!7 = distinct !{!7, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"_ZN4skvxL3mapIRZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_JNS_3VecILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!10 = distinct !{!10, !"_ZN4skvxL3mapIRZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_JNS_3VecILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!11 = distinct !{!11, !12, !"_ZN4skvx3mapIZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_Li8EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!12 = distinct !{!12, !"_ZN4skvx3mapIZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_Li8EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!13 = !{!14, !16}
!14 = distinct !{!14, !15, !"_ZN4skvxL3mapIRZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_JNS_3VecILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!15 = distinct !{!15, !"_ZN4skvxL3mapIRZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_JNS_3VecILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!16 = distinct !{!16, !17, !"_ZN4skvx3mapIZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_Li8EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!17 = distinct !{!17, !"_ZN4skvx3mapIZN3skx14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_Li8EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!18 = !{!19, !21, !23}
!19 = distinct !{!19, !20, !"_ZN4skvxL3mapIRZL8gather32ILi8EENS_3VecIXT_EiEEPKiRKS3_EUliE_JNS2_ILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!20 = distinct !{!20, !"_ZN4skvxL3mapIRZL8gather32ILi8EENS_3VecIXT_EiEEPKiRKS3_EUliE_JNS2_ILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!21 = distinct !{!21, !22, !"_ZN4skvx3mapIZL8gather32ILi8EENS_3VecIXT_EiEEPKiRKS3_EUliE_Li8EiJEEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!22 = distinct !{!22, !"_ZN4skvx3mapIZL8gather32ILi8EENS_3VecIXT_EiEEPKiRKS3_EUliE_Li8EiJEEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!23 = distinct !{!23, !24, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_: argument 0"}
!24 = distinct !{!24, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!27 = distinct !{!27, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!30 = distinct !{!30, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN4skvxorILi8EmEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!33 = distinct !{!33, !"_ZN4skvxorILi8EmEENS_3VecIXT_ET0_EERKS3_S5_"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!36 = distinct !{!36, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!39 = distinct !{!39, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN4skvxorILi8EmEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!42 = distinct !{!42, !"_ZN4skvxorILi8EmEENS_3VecIXT_ET0_EERKS3_S5_"}
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.unroll.disable"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN4skvxplILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!47 = distinct !{!47, !"_ZN4skvxplILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN4skvxmiILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!50 = distinct !{!50, !"_ZN4skvxmiILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN4skvxmlILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!53 = distinct !{!53, !"_ZN4skvxmlILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN4skvxdvILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!56 = distinct !{!56, !"_ZN4skvxdvILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!57 = !{!58}
!58 = distinct !{!58, !59, !"_ZN4skvxL3minILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!59 = distinct !{!59, !"_ZN4skvxL3minILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"_ZN4skvxL3maxILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!62 = distinct !{!62, !"_ZN4skvxL3maxILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!63 = !{!64, !66, !68}
!64 = distinct !{!64, !65, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!65 = distinct !{!65, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!66 = distinct !{!66, !67, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!67 = distinct !{!67, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!68 = distinct !{!68, !69, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_: argument 0"}
!69 = distinct !{!69, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZN4skvxngILi8EfEENS_3VecIXT_ET0_EERKS3_: argument 0"}
!72 = distinct !{!72, !"_ZN4skvxngILi8EfEENS_3VecIXT_ET0_EERKS3_"}
!73 = !{!74, !76, !78}
!74 = distinct !{!74, !75, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!75 = distinct !{!75, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!76 = distinct !{!76, !77, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!77 = distinct !{!77, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!78 = distinct !{!78, !79, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_: argument 0"}
!79 = distinct !{!79, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZN4skvxngILi8EfEENS_3VecIXT_ET0_EERKS3_: argument 0"}
!82 = distinct !{!82, !"_ZN4skvxngILi8EfEENS_3VecIXT_ET0_EERKS3_"}
!83 = !{!84, !86, !88}
!84 = distinct !{!84, !85, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!85 = distinct !{!85, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!86 = distinct !{!86, !87, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!87 = distinct !{!87, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!88 = distinct !{!88, !89, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_: argument 0"}
!89 = distinct !{!89, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_"}
!90 = !{!91, !93, !95}
!91 = distinct !{!91, !92, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!92 = distinct !{!92, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!93 = distinct !{!93, !94, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!94 = distinct !{!94, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!95 = distinct !{!95, !96, !"_ZN4skvxL4sqrtILi8EEENS_3VecIXT_EfEERKS2_: argument 0"}
!96 = distinct !{!96, !"_ZN4skvxL4sqrtILi8EEENS_3VecIXT_EfEERKS2_"}
!97 = !{!98}
!98 = distinct !{!98, !99, !"_ZN4skvxplILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!99 = distinct !{!99, !"_ZN4skvxplILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!100 = !{!101}
!101 = distinct !{!101, !102, !"_ZN4skvxmiILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!102 = distinct !{!102, !"_ZN4skvxmiILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!103 = !{!104}
!104 = distinct !{!104, !105, !"_ZN4skvxmlILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!105 = distinct !{!105, !"_ZN4skvxmlILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!106 = !{!107}
!107 = distinct !{!107, !108, !"_ZN4skvxlsILi8EiEENS_3VecIXT_ET0_EERKS3_i: argument 0"}
!108 = distinct !{!108, !"_ZN4skvxlsILi8EiEENS_3VecIXT_ET0_EERKS3_i"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZN4skvxrsILi8EiEENS_3VecIXT_ET0_EERKS3_i: argument 0"}
!111 = distinct !{!111, !"_ZN4skvxrsILi8EiEENS_3VecIXT_ET0_EERKS3_i"}
!112 = !{!113}
!113 = distinct !{!113, !114, !"_ZN4skvxrsILi8EjEENS_3VecIXT_ET0_EERKS3_i: argument 0"}
!114 = distinct !{!114, !"_ZN4skvxrsILi8EjEENS_3VecIXT_ET0_EERKS3_i"}
!115 = !{!116}
!116 = distinct !{!116, !117, !"_ZN4skvxeqILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!117 = distinct !{!117, !"_ZN4skvxeqILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!118 = !{!119}
!119 = distinct !{!119, !120, !"_ZN4skvxneILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!120 = distinct !{!120, !"_ZN4skvxneILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!121 = !{!122}
!122 = distinct !{!122, !123, !"_ZN4skvxgtILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!123 = distinct !{!123, !"_ZN4skvxgtILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!124 = !{!125}
!125 = distinct !{!125, !126, !"_ZN4skvxgeILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!126 = distinct !{!126, !"_ZN4skvxgeILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!127 = !{!128}
!128 = distinct !{!128, !129, !"_ZN4skvxeqILi8EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!129 = distinct !{!129, !"_ZN4skvxeqILi8EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!130 = !{!131}
!131 = distinct !{!131, !132, !"_ZN4skvxgtILi8EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!132 = distinct !{!132, !"_ZN4skvxgtILi8EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!133 = !{!134}
!134 = distinct !{!134, !135, !"_ZN4skvxanILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!135 = distinct !{!135, !"_ZN4skvxanILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!136 = !{!137}
!137 = distinct !{!137, !138, !"_ZN4skvxorILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!138 = distinct !{!138, !"_ZN4skvxorILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!139 = !{!140}
!140 = distinct !{!140, !141, !"_ZN4skvxeoILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!141 = distinct !{!141, !"_ZN4skvxeoILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!142 = !{!143}
!143 = distinct !{!143, !144, !"_ZN4skvxcoILi8EiEENS_3VecIXT_ET0_EERKS3_: argument 0"}
!144 = distinct !{!144, !"_ZN4skvxcoILi8EiEENS_3VecIXT_ET0_EERKS3_"}
!145 = !{!146}
!146 = distinct !{!146, !147, !"_ZN4skvxanILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!147 = distinct !{!147, !"_ZN4skvxanILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!148 = !{!149}
!149 = distinct !{!149, !150, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_: argument 0"}
!150 = distinct !{!150, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_"}
!151 = !{!152, !154, !156}
!152 = distinct !{!152, !153, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!153 = distinct !{!153, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!154 = distinct !{!154, !155, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!155 = distinct !{!155, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!156 = distinct !{!156, !157, !"_ZN4skvxL4ceilILi8EEENS_3VecIXT_EfEERKS2_: argument 0"}
!157 = distinct !{!157, !"_ZN4skvxL4ceilILi8EEENS_3VecIXT_EfEERKS2_"}
!158 = !{!152, !154}
!159 = !{!160, !162, !164}
!160 = distinct !{!160, !161, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!161 = distinct !{!161, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!162 = distinct !{!162, !163, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!163 = distinct !{!163, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!164 = distinct !{!164, !165, !"_ZN4skvxL5floorILi8EEENS_3VecIXT_EfEERKS2_: argument 0"}
!165 = distinct !{!165, !"_ZN4skvxL5floorILi8EEENS_3VecIXT_EfEERKS2_"}
!166 = !{!160, !162}
!167 = !{!168}
!168 = distinct !{!168, !169, !"_ZN4skvxL4castIfLi8EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!169 = distinct !{!169, !"_ZN4skvxL4castIfLi8EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!170 = !{!171}
!171 = distinct !{!171, !172, !"_ZN4skvxL4castIiLi8EfEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!172 = distinct !{!172, !"_ZN4skvxL4castIiLi8EfEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!173 = !{!174}
!174 = distinct !{!174, !175, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE: argument 0"}
!175 = distinct !{!175, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE"}
