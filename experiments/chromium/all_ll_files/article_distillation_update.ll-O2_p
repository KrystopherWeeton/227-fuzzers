; ModuleID = '../../components/dom_distiller/core/article_distillation_update.cc'
source_filename = "../../components/dom_distiller/core/article_distillation_update.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.dom_distiller::ArticleDistillationUpdate" = type { i8, i8, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair.12" }
%class.scoped_refptr = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe", %"class.dom_distiller::DistilledPageProto" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.dom_distiller::DistilledPageProto" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"class.google::protobuf::RepeatedPtrField", %"class.google::protobuf::RepeatedPtrField.10", %"struct.google::protobuf::internal::ArenaStringPtr", %"struct.google::protobuf::internal::ArenaStringPtr", %"struct.google::protobuf::internal::ArenaStringPtr", %"struct.google::protobuf::internal::ArenaStringPtr", %"class.dom_distiller::DistilledPageProto_DebugInfo"*, %"class.dom_distiller::DistilledPageProto_PaginationInfo"* }
%"class.google::protobuf::MessageLite" = type { i32 (...)**, %"class.google::protobuf::internal::InternalMetadata" }
%"class.google::protobuf::internal::InternalMetadata" = type { i8* }
%"class.google::protobuf::internal::HasBits" = type { [1 x i32] }
%"class.google::protobuf::internal::CachedSize" = type { %"struct.std::__1::atomic" }
%"class.google::protobuf::RepeatedPtrField" = type { %"class.google::protobuf::internal::RepeatedPtrFieldBase" }
%"class.google::protobuf::internal::RepeatedPtrFieldBase" = type { %"class.google::protobuf::Arena"*, i32, i32, %"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep"* }
%"class.google::protobuf::Arena" = type { %"class.google::protobuf::internal::ArenaImpl", void (%"class.std::type_info"*, i64, i8*)*, void (%"class.google::protobuf::Arena"*, i8*, i64)*, void (%"class.google::protobuf::Arena"*, i8*, i64)*, i8* }
%"class.google::protobuf::internal::ArenaImpl" = type { %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.5", %"class.google::protobuf::internal::ArenaImpl::Block"*, i64, %"struct.google::protobuf::internal::ArenaImpl::Options" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { %"class.google::protobuf::internal::ArenaImpl::SerialArena"* }
%"class.google::protobuf::internal::ArenaImpl::SerialArena" = type { %"class.google::protobuf::internal::ArenaImpl"*, i8*, %"class.google::protobuf::internal::ArenaImpl::Block"*, %"struct.google::protobuf::internal::ArenaImpl::CleanupChunk"*, %"class.google::protobuf::internal::ArenaImpl::SerialArena"*, i8*, i8*, %"struct.google::protobuf::internal::ArenaImpl::CleanupNode"*, %"struct.google::protobuf::internal::ArenaImpl::CleanupNode"* }
%"struct.google::protobuf::internal::ArenaImpl::CleanupChunk" = type { i64, %"struct.google::protobuf::internal::ArenaImpl::CleanupChunk"*, [1 x %"struct.google::protobuf::internal::ArenaImpl::CleanupNode"] }
%"struct.google::protobuf::internal::ArenaImpl::CleanupNode" = type { i8*, void (i8*)* }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i64 }
%"class.google::protobuf::internal::ArenaImpl::Block" = type { %"class.google::protobuf::internal::ArenaImpl::Block"*, i64, i64 }
%"struct.google::protobuf::internal::ArenaImpl::Options" = type { i64, i64, i8*, i64, i8* (i64)*, void (i8*, i64)* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.google::protobuf::internal::RepeatedPtrFieldBase::Rep" = type { i32, [268435454 x i8*] }
%"class.google::protobuf::RepeatedPtrField.10" = type { %"class.google::protobuf::internal::RepeatedPtrFieldBase" }
%"struct.google::protobuf::internal::ArenaStringPtr" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.dom_distiller::DistilledPageProto_DebugInfo" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"struct.google::protobuf::internal::ArenaStringPtr" }
%"class.dom_distiller::DistilledPageProto_PaginationInfo" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"struct.google::protobuf::internal::ArenaStringPtr", %"struct.google::protobuf::internal::ArenaStringPtr", %"struct.google::protobuf::internal::ArenaStringPtr" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %class.scoped_refptr* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN13dom_distiller25ArticleDistillationUpdateC1ERKNSt3__16vectorI13scoped_refptrIN4base14RefCountedDataINS_18DistilledPageProtoEEEENS1_9allocatorIS8_EEEEbb = hidden unnamed_addr alias void (%"class.dom_distiller::ArticleDistillationUpdate"*, %"class.std::__1::vector"*, i1, i1), void (%"class.dom_distiller::ArticleDistillationUpdate"*, %"class.std::__1::vector"*, i1, i1)* @_ZN13dom_distiller25ArticleDistillationUpdateC2ERKNSt3__16vectorI13scoped_refptrIN4base14RefCountedDataINS_18DistilledPageProtoEEEENS1_9allocatorIS8_EEEEbb
@_ZN13dom_distiller25ArticleDistillationUpdateC1ERKS0_ = hidden unnamed_addr alias void (%"class.dom_distiller::ArticleDistillationUpdate"*, %"class.dom_distiller::ArticleDistillationUpdate"*), void (%"class.dom_distiller::ArticleDistillationUpdate"*, %"class.dom_distiller::ArticleDistillationUpdate"*)* @_ZN13dom_distiller25ArticleDistillationUpdateC2ERKS0_
@_ZN13dom_distiller25ArticleDistillationUpdateD1Ev = hidden unnamed_addr alias void (%"class.dom_distiller::ArticleDistillationUpdate"*), void (%"class.dom_distiller::ArticleDistillationUpdate"*)* @_ZN13dom_distiller25ArticleDistillationUpdateD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13dom_distiller25ArticleDistillationUpdateC2ERKNSt3__16vectorI13scoped_refptrIN4base14RefCountedDataINS_18DistilledPageProtoEEEENS1_9allocatorIS8_EEEEbb(%"class.dom_distiller::ArticleDistillationUpdate"*, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), i1 zeroext, i1 zeroext) unnamed_addr #0 align 2 {
  %5 = zext i1 %2 to i8
  %6 = zext i1 %3 to i8
  %7 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 0
  store i8 %5, i8* %7, align 8
  %8 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 1
  store i8 %6, i8* %8, align 1
  %9 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 2
  %10 = bitcast %"class.std::__1::vector"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #7
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %12 = bitcast %class.scoped_refptr** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector"* %1 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = ashr exact i64 %16, 3
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %87, label %19

19:                                               ; preds = %4
  %20 = icmp ugt i64 %17, 2305843009213693951
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast %"class.std::__1::vector"* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %22) #8
  unreachable

23:                                               ; preds = %19
  %24 = tail call i8* @_Znwm(i64 %16) #9
  %25 = bitcast i8* %24 to %class.scoped_refptr*
  %26 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 2, i32 0, i32 1
  %27 = bitcast %class.scoped_refptr** %26 to i8**
  store i8* %24, i8** %27, align 8
  %28 = bitcast %"class.std::__1::vector"* %9 to i8**
  store i8* %24, i8** %28, align 8
  %29 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %25, i64 %17
  %30 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store %class.scoped_refptr* %29, %class.scoped_refptr** %30, align 8
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %32 = load %class.scoped_refptr*, %class.scoped_refptr** %31, align 8
  %33 = load %class.scoped_refptr*, %class.scoped_refptr** %11, align 8
  %34 = bitcast %class.scoped_refptr** %26 to i64*
  %35 = ptrtoint i8* %24 to i64
  %36 = icmp eq %class.scoped_refptr* %32, %33
  br i1 %36, label %85, label %37

37:                                               ; preds = %23
  %38 = ptrtoint %class.scoped_refptr* %32 to i64
  %39 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %33, i64 -1, i32 0
  %40 = ptrtoint %"class.base::RefCountedData"** %39 to i64
  %41 = sub i64 %40, %38
  %42 = lshr i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = and i64 %43, 3
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %62, label %46

46:                                               ; preds = %37, %57
  %47 = phi %class.scoped_refptr* [ %59, %57 ], [ %25, %37 ]
  %48 = phi %class.scoped_refptr* [ %58, %57 ], [ %32, %37 ]
  %49 = phi i64 [ %60, %57 ], [ %44, %37 ]
  %50 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %48, i64 0, i32 0
  %51 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %50, align 8
  %52 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %47, i64 0, i32 0
  store %"class.base::RefCountedData"* %51, %"class.base::RefCountedData"** %52, align 8
  %53 = icmp eq %"class.base::RefCountedData"* %51, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %46
  %55 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = atomicrmw add i32* %55, i32 1 monotonic
  br label %57

57:                                               ; preds = %54, %46
  %58 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %48, i64 1
  %59 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %47, i64 1
  %60 = add i64 %49, -1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %46, !llvm.loop !2

62:                                               ; preds = %57, %37
  %63 = phi %class.scoped_refptr* [ undef, %37 ], [ %59, %57 ]
  %64 = phi %class.scoped_refptr* [ %25, %37 ], [ %59, %57 ]
  %65 = phi %class.scoped_refptr* [ %32, %37 ], [ %58, %57 ]
  %66 = icmp ult i64 %41, 24
  br i1 %66, label %82, label %67

67:                                               ; preds = %62, %107
  %68 = phi %class.scoped_refptr* [ %109, %107 ], [ %64, %62 ]
  %69 = phi %class.scoped_refptr* [ %108, %107 ], [ %65, %62 ]
  %70 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %69, i64 0, i32 0
  %71 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %70, align 8
  %72 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %68, i64 0, i32 0
  store %"class.base::RefCountedData"* %71, %"class.base::RefCountedData"** %72, align 8
  %73 = icmp eq %"class.base::RefCountedData"* %71, null
  br i1 %73, label %77, label %74

74:                                               ; preds = %67
  %75 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %71, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = atomicrmw add i32* %75, i32 1 monotonic
  br label %77

77:                                               ; preds = %74, %67
  %78 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %69, i64 1, i32 0
  %79 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %78, align 8
  %80 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %68, i64 1, i32 0
  store %"class.base::RefCountedData"* %79, %"class.base::RefCountedData"** %80, align 8
  %81 = icmp eq %"class.base::RefCountedData"* %79, null
  br i1 %81, label %91, label %88

82:                                               ; preds = %107, %62
  %83 = phi %class.scoped_refptr* [ %63, %62 ], [ %109, %107 ]
  %84 = ptrtoint %class.scoped_refptr* %83 to i64
  br label %85

85:                                               ; preds = %82, %23
  %86 = phi i64 [ %35, %23 ], [ %84, %82 ]
  store i64 %86, i64* %34, align 8
  br label %87

87:                                               ; preds = %4, %85
  ret void

88:                                               ; preds = %77
  %89 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %79, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = atomicrmw add i32* %89, i32 1 monotonic
  br label %91

91:                                               ; preds = %88, %77
  %92 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %69, i64 2, i32 0
  %93 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %92, align 8
  %94 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %68, i64 2, i32 0
  store %"class.base::RefCountedData"* %93, %"class.base::RefCountedData"** %94, align 8
  %95 = icmp eq %"class.base::RefCountedData"* %93, null
  br i1 %95, label %99, label %96

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %93, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = atomicrmw add i32* %97, i32 1 monotonic
  br label %99

99:                                               ; preds = %96, %91
  %100 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %69, i64 3, i32 0
  %101 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %100, align 8
  %102 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %68, i64 3, i32 0
  store %"class.base::RefCountedData"* %101, %"class.base::RefCountedData"** %102, align 8
  %103 = icmp eq %"class.base::RefCountedData"* %101, null
  br i1 %103, label %107, label %104

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %101, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = atomicrmw add i32* %105, i32 1 monotonic
  br label %107

107:                                              ; preds = %104, %99
  %108 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %69, i64 4
  %109 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %68, i64 4
  %110 = icmp eq %class.scoped_refptr* %108, %33
  br i1 %110, label %82, label %67
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13dom_distiller25ArticleDistillationUpdateC2ERKS0_(%"class.dom_distiller::ArticleDistillationUpdate"*, %"class.dom_distiller::ArticleDistillationUpdate"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.dom_distiller::ArticleDistillationUpdate"* %1 to i16*
  %4 = bitcast %"class.dom_distiller::ArticleDistillationUpdate"* %0 to i16*
  %5 = load i16, i16* %3, align 8
  store i16 %5, i16* %4, align 8
  %6 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %1, i64 0, i32 2
  %8 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #7
  %9 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %1, i64 0, i32 2, i32 0, i32 1
  %10 = bitcast %class.scoped_refptr** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 3
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %85, label %17

17:                                               ; preds = %2
  %18 = icmp ugt i64 %15, 2305843009213693951
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %20) #8
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_Znwm(i64 %14) #9
  %23 = bitcast i8* %22 to %class.scoped_refptr*
  %24 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 2, i32 0, i32 1
  %25 = bitcast %class.scoped_refptr** %24 to i8**
  store i8* %22, i8** %25, align 8
  %26 = bitcast %"class.std::__1::vector"* %6 to i8**
  store i8* %22, i8** %26, align 8
  %27 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %23, i64 %15
  %28 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store %class.scoped_refptr* %27, %class.scoped_refptr** %28, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %30 = load %class.scoped_refptr*, %class.scoped_refptr** %29, align 8
  %31 = load %class.scoped_refptr*, %class.scoped_refptr** %9, align 8
  %32 = bitcast %class.scoped_refptr** %24 to i64*
  %33 = ptrtoint i8* %22 to i64
  %34 = icmp eq %class.scoped_refptr* %30, %31
  br i1 %34, label %83, label %35

35:                                               ; preds = %21
  %36 = ptrtoint %class.scoped_refptr* %30 to i64
  %37 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %31, i64 -1, i32 0
  %38 = ptrtoint %"class.base::RefCountedData"** %37 to i64
  %39 = sub i64 %38, %36
  %40 = lshr i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 3
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %60, label %44

44:                                               ; preds = %35, %55
  %45 = phi %class.scoped_refptr* [ %57, %55 ], [ %23, %35 ]
  %46 = phi %class.scoped_refptr* [ %56, %55 ], [ %30, %35 ]
  %47 = phi i64 [ %58, %55 ], [ %42, %35 ]
  %48 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %46, i64 0, i32 0
  %49 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %48, align 8
  %50 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %45, i64 0, i32 0
  store %"class.base::RefCountedData"* %49, %"class.base::RefCountedData"** %50, align 8
  %51 = icmp eq %"class.base::RefCountedData"* %49, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %44
  %53 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = atomicrmw add i32* %53, i32 1 monotonic
  br label %55

55:                                               ; preds = %52, %44
  %56 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %46, i64 1
  %57 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %45, i64 1
  %58 = add i64 %47, -1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %44, !llvm.loop !4

60:                                               ; preds = %55, %35
  %61 = phi %class.scoped_refptr* [ undef, %35 ], [ %57, %55 ]
  %62 = phi %class.scoped_refptr* [ %23, %35 ], [ %57, %55 ]
  %63 = phi %class.scoped_refptr* [ %30, %35 ], [ %56, %55 ]
  %64 = icmp ult i64 %39, 24
  br i1 %64, label %80, label %65

65:                                               ; preds = %60, %105
  %66 = phi %class.scoped_refptr* [ %107, %105 ], [ %62, %60 ]
  %67 = phi %class.scoped_refptr* [ %106, %105 ], [ %63, %60 ]
  %68 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %67, i64 0, i32 0
  %69 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %68, align 8
  %70 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %66, i64 0, i32 0
  store %"class.base::RefCountedData"* %69, %"class.base::RefCountedData"** %70, align 8
  %71 = icmp eq %"class.base::RefCountedData"* %69, null
  br i1 %71, label %75, label %72

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %69, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = atomicrmw add i32* %73, i32 1 monotonic
  br label %75

75:                                               ; preds = %72, %65
  %76 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %67, i64 1, i32 0
  %77 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %76, align 8
  %78 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %66, i64 1, i32 0
  store %"class.base::RefCountedData"* %77, %"class.base::RefCountedData"** %78, align 8
  %79 = icmp eq %"class.base::RefCountedData"* %77, null
  br i1 %79, label %89, label %86

80:                                               ; preds = %105, %60
  %81 = phi %class.scoped_refptr* [ %61, %60 ], [ %107, %105 ]
  %82 = ptrtoint %class.scoped_refptr* %81 to i64
  br label %83

83:                                               ; preds = %80, %21
  %84 = phi i64 [ %33, %21 ], [ %82, %80 ]
  store i64 %84, i64* %32, align 8
  br label %85

85:                                               ; preds = %2, %83
  ret void

86:                                               ; preds = %75
  %87 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %77, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = atomicrmw add i32* %87, i32 1 monotonic
  br label %89

89:                                               ; preds = %86, %75
  %90 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %67, i64 2, i32 0
  %91 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %90, align 8
  %92 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %66, i64 2, i32 0
  store %"class.base::RefCountedData"* %91, %"class.base::RefCountedData"** %92, align 8
  %93 = icmp eq %"class.base::RefCountedData"* %91, null
  br i1 %93, label %97, label %94

94:                                               ; preds = %89
  %95 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %91, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = atomicrmw add i32* %95, i32 1 monotonic
  br label %97

97:                                               ; preds = %94, %89
  %98 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %67, i64 3, i32 0
  %99 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %98, align 8
  %100 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %66, i64 3, i32 0
  store %"class.base::RefCountedData"* %99, %"class.base::RefCountedData"** %100, align 8
  %101 = icmp eq %"class.base::RefCountedData"* %99, null
  br i1 %101, label %105, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %99, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = atomicrmw add i32* %103, i32 1 monotonic
  br label %105

105:                                              ; preds = %102, %97
  %106 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %67, i64 4
  %107 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %66, i64 4
  %108 = icmp eq %class.scoped_refptr* %106, %31
  br i1 %108, label %80, label %65
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13dom_distiller25ArticleDistillationUpdateD2Ev(%"class.dom_distiller::ArticleDistillationUpdate"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %4 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %5 = icmp eq %class.scoped_refptr* %4, null
  br i1 %5, label %33, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.scoped_refptr* %4 to i8*
  %8 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load %class.scoped_refptr*, %class.scoped_refptr** %8, align 8
  %10 = icmp eq %class.scoped_refptr* %9, %4
  br i1 %10, label %31, label %11

11:                                               ; preds = %6, %26
  %12 = phi %class.scoped_refptr* [ %13, %26 ], [ %9, %6 ]
  %13 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %12, i64 -1
  %14 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %13, i64 0, i32 0
  %15 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %14, align 8
  %16 = icmp eq %"class.base::RefCountedData"* %15, null
  br i1 %16, label %26, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %26

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %15, i64 0, i32 0
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %22, i64 2
  %24 = bitcast %"class.base::RefCountedThreadSafe"* %23 to %"class.dom_distiller::DistilledPageProto"*
  tail call void @_ZN13dom_distiller18DistilledPageProtoD1Ev(%"class.dom_distiller::DistilledPageProto"* %24) #7
  %25 = bitcast %"class.base::RefCountedData"* %15 to i8*
  tail call void @_ZdlPv(i8* %25) #9
  br label %26

26:                                               ; preds = %21, %17, %11
  %27 = icmp eq %class.scoped_refptr* %13, %4
  br i1 %27, label %28, label %11

28:                                               ; preds = %26
  %29 = bitcast %"class.std::__1::vector"* %2 to i8**
  %30 = load i8*, i8** %29, align 8
  br label %31

31:                                               ; preds = %28, %6
  %32 = phi i8* [ %30, %28 ], [ %7, %6 ]
  store %class.scoped_refptr* %4, %class.scoped_refptr** %8, align 8
  tail call void @_ZdlPv(i8* %32) #9
  br label %33

33:                                               ; preds = %1, %31
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(120) %"class.dom_distiller::DistilledPageProto"* @_ZNK13dom_distiller25ArticleDistillationUpdate16GetDistilledPageEm(%"class.dom_distiller::ArticleDistillationUpdate"* nocapture readonly, i64) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.dom_distiller::ArticleDistillationUpdate", %"class.dom_distiller::ArticleDistillationUpdate"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %5 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 %1, i32 0
  %6 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %5, align 8
  %7 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %6, i64 0, i32 1
  ret %"class.dom_distiller::DistilledPageProto"* %7
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN13dom_distiller18DistilledPageProtoD1Ev(%"class.dom_distiller::DistilledPageProto"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
