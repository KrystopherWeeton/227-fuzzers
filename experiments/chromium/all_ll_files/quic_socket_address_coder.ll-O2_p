; ModuleID = '../../net/third_party/quiche/src/quic/core/quic_socket_address_coder.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/quic_socket_address_coder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.quic::QuicSocketAddressCoder" = type { %"class.quic::QuicSocketAddress" }
%"class.quic::QuicSocketAddress" = type <{ %"class.quic::QuicIpAddress", i16, [2 x i8] }>
%"class.quic::QuicIpAddress" = type { %union.anon, i32 }
%union.anon = type { %struct.in6_addr }
%struct.in6_addr = type { %union.anon.0 }
%union.anon.0 = type { [4 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1 }
%union.anon.1 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN4quic22QuicSocketAddressCoderC1Ev = hidden unnamed_addr alias void (%"class.quic::QuicSocketAddressCoder"*), void (%"class.quic::QuicSocketAddressCoder"*)* @_ZN4quic22QuicSocketAddressCoderC2Ev
@_ZN4quic22QuicSocketAddressCoderC1ERKNS_17QuicSocketAddressE = hidden unnamed_addr alias void (%"class.quic::QuicSocketAddressCoder"*, %"class.quic::QuicSocketAddress"*), void (%"class.quic::QuicSocketAddressCoder"*, %"class.quic::QuicSocketAddress"*)* @_ZN4quic22QuicSocketAddressCoderC2ERKNS_17QuicSocketAddressE
@_ZN4quic22QuicSocketAddressCoderD1Ev = hidden unnamed_addr alias void (%"class.quic::QuicSocketAddressCoder"*), void (%"class.quic::QuicSocketAddressCoder"*)* @_ZN4quic22QuicSocketAddressCoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic22QuicSocketAddressCoderC2Ev(%"class.quic::QuicSocketAddressCoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicSocketAddressCoder", %"class.quic::QuicSocketAddressCoder"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4quic13QuicIpAddressC1Ev(%"class.quic::QuicIpAddress"* %2) #7
  %3 = getelementptr inbounds %"class.quic::QuicSocketAddressCoder", %"class.quic::QuicSocketAddressCoder"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic22QuicSocketAddressCoderC2ERKNS_17QuicSocketAddressE(%"class.quic::QuicSocketAddressCoder"* nocapture, %"class.quic::QuicSocketAddress"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.quic::QuicSocketAddressCoder"* %0 to i8*
  %4 = bitcast %"class.quic::QuicSocketAddress"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4quic22QuicSocketAddressCoderD2Ev(%"class.quic::QuicSocketAddressCoder"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4quic22QuicSocketAddressCoder6EncodeEv(%"class.std::__1::basic_string"* noalias sret, %"class.quic::QuicSocketAddressCoder"*) local_unnamed_addr #0 align 2 {
  %3 = alloca i16, align 2
  %4 = alloca %"class.quic::QuicIpAddress", align 4
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.quic::QuicIpAddress", align 4
  %7 = alloca i16, align 2
  %8 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #7
  %9 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %9) #7
  store i16 -21846, i16* %3, align 2
  %10 = bitcast %"class.quic::QuicIpAddress"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %10) #7
  %11 = getelementptr inbounds %"class.quic::QuicSocketAddressCoder", %"class.quic::QuicSocketAddressCoder"* %1, i64 0, i32 0
  call void @_ZNK4quic17QuicSocketAddress4hostEv(%"class.quic::QuicIpAddress"* nonnull sret %4, %"class.quic::QuicSocketAddress"* %11) #7
  %12 = call i32 @_ZNK4quic13QuicIpAddress14address_familyEv(%"class.quic::QuicIpAddress"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %10) #7
  switch i32 %12, label %39 [
    i32 0, label %14
    i32 1, label %13
  ]

13:                                               ; preds = %2
  br label %14

14:                                               ; preds = %2, %13
  %15 = phi i16 [ 10, %13 ], [ 2, %2 ]
  store i16 %15, i16* %3, align 2
  %16 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* nonnull %9, i64 2) #7
  %17 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #7
  %18 = bitcast %"class.quic::QuicIpAddress"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %18) #7
  call void @_ZNK4quic17QuicSocketAddress4hostEv(%"class.quic::QuicIpAddress"* nonnull sret %6, %"class.quic::QuicSocketAddress"* %11) #7
  call void @_ZNK4quic13QuicIpAddress14ToPackedStringEv(%"class.std::__1::basic_string"* nonnull sret %5, %"class.quic::QuicIpAddress"* nonnull %6) #7
  %19 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = zext i8 %21 to i64
  %28 = select i1 %22, i8* %24, i8* %17
  %29 = select i1 %22, i64 %26, i64 %27
  %30 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %28, i64 %29) #7
  %31 = load i8, i8* %20, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %14
  %34 = load i8*, i8** %23, align 8
  call void @_ZdlPv(i8* %34) #8
  br label %35

35:                                               ; preds = %14, %33
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %18) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #7
  %36 = bitcast i16* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %36) #7
  %37 = call zeroext i16 @_ZNK4quic17QuicSocketAddress4portEv(%"class.quic::QuicSocketAddress"* %11) #7
  store i16 %37, i16* %7, align 2
  %38 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* nonnull %36, i64 2) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %36) #7
  br label %39

39:                                               ; preds = %2, %35
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %9) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK4quic17QuicSocketAddress4hostEv(%"class.quic::QuicIpAddress"* sret, %"class.quic::QuicSocketAddress"*) local_unnamed_addr #3

declare i32 @_ZNK4quic13QuicIpAddress14address_familyEv(%"class.quic::QuicIpAddress"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

declare void @_ZNK4quic13QuicIpAddress14ToPackedStringEv(%"class.std::__1::basic_string"* sret, %"class.quic::QuicIpAddress"*) local_unnamed_addr #3

declare zeroext i16 @_ZNK4quic17QuicSocketAddress4portEv(%"class.quic::QuicSocketAddress"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic22QuicSocketAddressCoder6DecodeEPKcm(%"class.quic::QuicSocketAddressCoder"* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.quic::QuicIpAddress", align 8
  %5 = alloca %"class.quic::QuicSocketAddress", align 4
  %6 = icmp ult i64 %2, 2
  br i1 %6, label %37, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %1 to i16*
  %9 = load i16, i16* %8, align 1
  %10 = getelementptr inbounds i8, i8* %1, i64 2
  %11 = add i64 %2, -2
  switch i16 %9, label %37 [
    i16 2, label %13
    i16 10, label %12
  ]

12:                                               ; preds = %7
  br label %13

13:                                               ; preds = %7, %12
  %14 = phi i64 [ 16, %12 ], [ 4, %7 ]
  %15 = icmp ult i64 %11, %14
  br i1 %15, label %37, label %16

16:                                               ; preds = %13
  %17 = tail call i8* @_Znwm(i64 %14) #8
  %18 = ptrtoint i8* %17 to i64
  %19 = sub i64 %14, %18
  %20 = getelementptr i8, i8* %17, i64 %19
  %21 = ptrtoint i8* %20 to i64
  %22 = call i64 @llvm.usub.sat.i64(i64 %21, i64 %14)
  %23 = getelementptr i8, i8* %17, i64 %14
  call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 0, i64 %22, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %17, i8* align 1 %10, i64 %14, i1 false)
  %24 = sub i64 %11, %14
  %25 = icmp eq i64 %24, 2
  br i1 %25, label %26, label %35

26:                                               ; preds = %16
  %27 = getelementptr inbounds i8, i8* %10, i64 %14
  %28 = bitcast i8* %27 to i16*
  %29 = load i16, i16* %28, align 1
  %30 = bitcast %"class.quic::QuicIpAddress"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %30) #7
  %31 = bitcast %"class.quic::QuicIpAddress"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 20, i1 false)
  call void @_ZN4quic13QuicIpAddressC1Ev(%"class.quic::QuicIpAddress"* nonnull %4) #7
  %32 = call zeroext i1 @_ZN4quic13QuicIpAddress16FromPackedStringEPKcm(%"class.quic::QuicIpAddress"* nonnull %4, i8* nonnull %17, i64 %14) #7
  %33 = bitcast %"class.quic::QuicSocketAddress"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #7
  call void @_ZN4quic17QuicSocketAddressC1ENS_13QuicIpAddressEt(%"class.quic::QuicSocketAddress"* nonnull %5, %"class.quic::QuicIpAddress"* nonnull byval(%"class.quic::QuicIpAddress") align 8 %4, i16 zeroext %29) #7
  %34 = bitcast %"class.quic::QuicSocketAddressCoder"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* nonnull align 4 %33, i64 22, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #7
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %30) #7
  br label %35

35:                                               ; preds = %16, %26
  %36 = phi i1 [ true, %26 ], [ false, %16 ]
  call void @_ZdlPv(i8* nonnull %17) #8
  br label %37

37:                                               ; preds = %35, %7, %13, %3
  %38 = phi i1 [ false, %3 ], [ %36, %35 ], [ false, %7 ], [ false, %13 ]
  ret i1 %38
}

declare void @_ZN4quic13QuicIpAddressC1Ev(%"class.quic::QuicIpAddress"*) unnamed_addr #3

declare zeroext i1 @_ZN4quic13QuicIpAddress16FromPackedStringEPKcm(%"class.quic::QuicIpAddress"*, i8*, i64) local_unnamed_addr #3

declare void @_ZN4quic17QuicSocketAddressC1ENS_13QuicIpAddressEt(%"class.quic::QuicSocketAddress"*, %"class.quic::QuicIpAddress"* byval(%"class.quic::QuicIpAddress") align 8, i16 zeroext) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
