; ModuleID = '../../third_party/opus/src/silk/NLSF_del_dec_quant.c'
source_filename = "../../third_party/opus/src/silk/NLSF_del_dec_quant.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_NLSF_del_dec_quant(i8* nocapture, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture readonly, i16* nocapture readonly, i8* nocapture readonly, i32, i16 signext, i32, i16 signext) local_unnamed_addr #0 {
  %11 = alloca [4 x i32], align 16
  %12 = alloca [4 x [16 x i8]], align 16
  %13 = alloca [8 x i16], align 16
  %14 = alloca [8 x i32], align 16
  %15 = alloca [4 x i32], align 16
  %16 = alloca [4 x i32], align 16
  %17 = alloca [20 x i32], align 16
  %18 = alloca [20 x i32], align 16
  %19 = bitcast [4 x i32]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #2
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 0
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 1
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 2
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 3
  %24 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 0, i64 0
  %25 = bitcast [4 x i32]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %24) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 64, i1 false)
  %26 = bitcast [8 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #2
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 0
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 1
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 2
  %30 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 3
  %31 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 4
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 5
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 6
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 7
  %35 = bitcast [8 x i32]* %14 to i8*
  %36 = bitcast [8 x i16]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #2
  %37 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 0
  %38 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 1
  %39 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 2
  %40 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 3
  %41 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 4
  %42 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 5
  %43 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 6
  %44 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 7
  %45 = bitcast [4 x i32]* %15 to i8*
  %46 = bitcast [8 x i32]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #2
  %47 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 0
  %48 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 2
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  %51 = bitcast [4 x i32]* %16 to i8*
  %52 = bitcast [4 x i32]* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %52, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #2
  %53 = getelementptr inbounds [4 x i32], [4 x i32]* %16, i64 0, i64 0
  %54 = getelementptr inbounds [4 x i32], [4 x i32]* %16, i64 0, i64 1
  %55 = getelementptr inbounds [4 x i32], [4 x i32]* %16, i64 0, i64 2
  %56 = getelementptr inbounds [4 x i32], [4 x i32]* %16, i64 0, i64 3
  %57 = bitcast [20 x i32]* %17 to i8*
  %58 = bitcast [4 x i32]* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %57) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %57, i8 -86, i64 80, i1 false)
  %59 = bitcast [20 x i32]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %59) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %59, i8 -86, i64 80, i1 false)
  %60 = shl i32 %6, 16
  %61 = ashr exact i32 %60, 16
  br label %62

62:                                               ; preds = %81, %10
  %63 = phi i64 [ -10, %10 ], [ %93, %81 ]
  %64 = phi i32 [ -10, %10 ], [ %94, %81 ]
  %65 = trunc i32 %64 to i16
  %66 = shl i16 %65, 10
  %67 = add i16 %66, 1024
  %68 = icmp sgt i64 %63, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %62
  %70 = add i16 %66, -102
  %71 = or i16 %66, 922
  br label %81

72:                                               ; preds = %62
  %73 = icmp eq i64 %63, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %72
  %75 = or i16 %66, 922
  br label %81

76:                                               ; preds = %72
  %77 = icmp eq i64 %63, -1
  %78 = or i16 %66, 102
  %79 = or i16 %67, 102
  %80 = select i1 %77, i16 %67, i16 %79
  br label %81

81:                                               ; preds = %76, %74, %69
  %82 = phi i16 [ %70, %69 ], [ %66, %74 ], [ %78, %76 ]
  %83 = phi i16 [ %71, %69 ], [ %75, %74 ], [ %80, %76 ]
  %84 = sext i16 %82 to i32
  %85 = mul nsw i32 %61, %84
  %86 = ashr i32 %85, 16
  %87 = add nsw i64 %63, 10
  %88 = getelementptr inbounds [20 x i32], [20 x i32]* %17, i64 0, i64 %87
  store i32 %86, i32* %88, align 4
  %89 = sext i16 %83 to i32
  %90 = mul nsw i32 %61, %89
  %91 = ashr i32 %90, 16
  %92 = getelementptr inbounds [20 x i32], [20 x i32]* %18, i64 0, i64 %87
  store i32 %91, i32* %92, align 4
  %93 = add nsw i64 %63, 1
  %94 = add nsw i32 %64, 1
  %95 = icmp eq i64 %93, 10
  br i1 %95, label %96, label %62

96:                                               ; preds = %81
  store i32 0, i32* %37, align 16
  store i16 0, i16* %27, align 16
  %97 = sext i16 %9 to i64
  %98 = icmp sgt i16 %9, 0
  br i1 %98, label %99, label %113

99:                                               ; preds = %96
  %100 = sext i16 %7 to i32
  %101 = shl i32 %8, 16
  %102 = ashr exact i32 %101, 16
  %103 = sext i16 %9 to i64
  br label %143

104:                                              ; preds = %401
  %105 = load i32, i32* %37, align 16
  %106 = load i32, i32* %38, align 4
  %107 = load i32, i32* %39, align 8
  %108 = load i32, i32* %40, align 4
  %109 = load i32, i32* %41, align 16
  %110 = load i32, i32* %42, align 4
  %111 = load i32, i32* %43, align 8
  %112 = load i32, i32* %44, align 4
  br label %113

113:                                              ; preds = %104, %96
  %114 = phi i32 [ %112, %104 ], [ -1431655766, %96 ]
  %115 = phi i32 [ %111, %104 ], [ -1431655766, %96 ]
  %116 = phi i32 [ %110, %104 ], [ -1431655766, %96 ]
  %117 = phi i32 [ %109, %104 ], [ -1431655766, %96 ]
  %118 = phi i32 [ %108, %104 ], [ -1431655766, %96 ]
  %119 = phi i32 [ %107, %104 ], [ -1431655766, %96 ]
  %120 = phi i32 [ %106, %104 ], [ -1431655766, %96 ]
  %121 = phi i32 [ %105, %104 ], [ 0, %96 ]
  %122 = icmp sgt i32 %121, %120
  %123 = zext i1 %122 to i32
  %124 = select i1 %122, i32 %120, i32 %121
  %125 = icmp sgt i32 %124, %119
  %126 = select i1 %125, i32 2, i32 %123
  %127 = select i1 %125, i32 %119, i32 %124
  %128 = icmp sgt i32 %127, %118
  %129 = select i1 %128, i32 3, i32 %126
  %130 = select i1 %128, i32 %118, i32 %127
  %131 = icmp sgt i32 %130, %117
  %132 = select i1 %131, i32 4, i32 %129
  %133 = select i1 %131, i32 %117, i32 %130
  %134 = icmp sgt i32 %133, %116
  %135 = select i1 %134, i32 5, i32 %132
  %136 = select i1 %134, i32 %116, i32 %133
  %137 = icmp sgt i32 %136, %115
  %138 = select i1 %137, i32 6, i32 %135
  %139 = select i1 %137, i32 %115, i32 %136
  %140 = icmp sgt i32 %139, %114
  %141 = select i1 %140, i32 7, i32 %138
  %142 = select i1 %140, i32 %114, i32 %139
  br i1 %98, label %404, label %409

143:                                              ; preds = %99, %401
  %144 = phi i64 [ %103, %99 ], [ %146, %401 ]
  %145 = phi i32 [ 1, %99 ], [ %402, %401 ]
  %146 = add nsw i64 %144, -1
  %147 = getelementptr inbounds i16, i16* %4, i64 %146
  %148 = load i16, i16* %147, align 2
  %149 = sext i16 %148 to i64
  %150 = getelementptr inbounds i8, i8* %5, i64 %149
  %151 = getelementptr inbounds i16, i16* %1, i64 %146
  %152 = load i16, i16* %151, align 2
  %153 = icmp sgt i32 %145, 0
  br i1 %153, label %154, label %292

154:                                              ; preds = %143
  %155 = getelementptr inbounds i8, i8* %3, i64 %146
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = getelementptr inbounds i16, i16* %2, i64 %146
  %159 = load i16, i16* %158, align 2
  %160 = sext i16 %159 to i32
  %161 = sext i32 %145 to i64
  %162 = zext i32 %145 to i64
  %163 = getelementptr inbounds i8, i8* %150, i64 1
  %164 = getelementptr inbounds i8, i8* %150, i64 7
  br label %165

165:                                              ; preds = %227, %154
  %166 = phi i64 [ 0, %154 ], [ %251, %227 ]
  %167 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = sext i16 %168 to i32
  %170 = mul nsw i32 %169, %157
  %171 = ashr i32 %170, 8
  %172 = trunc i32 %171 to i16
  %173 = sub i16 %152, %172
  %174 = sext i16 %173 to i32
  %175 = mul nsw i32 %174, %100
  %176 = ashr i32 %175, 16
  %177 = icmp sgt i32 %175, 655359
  %178 = icmp sgt i32 %176, -10
  %179 = select i1 %178, i32 %176, i32 -10
  %180 = select i1 %177, i32 9, i32 %179
  %181 = trunc i32 %180 to i8
  %182 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %166, i64 %146
  store i8 %181, i8* %182, align 1
  %183 = add nsw i32 %180, 10
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds [20 x i32], [20 x i32]* %17, i64 0, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = getelementptr inbounds [20 x i32], [20 x i32]* %18, i64 0, i64 %184
  %188 = load i32, i32* %187, align 4
  %189 = add i32 %171, %186
  %190 = trunc i32 %189 to i16
  %191 = add i32 %188, %171
  %192 = trunc i32 %191 to i16
  store i16 %190, i16* %167, align 2
  %193 = add nsw i64 %166, %161
  %194 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 %193
  store i16 %192, i16* %194, align 2
  %195 = icmp sgt i32 %180, 2
  br i1 %195, label %196, label %205

196:                                              ; preds = %165
  %197 = icmp eq i32 %180, 3
  br i1 %197, label %198, label %201

198:                                              ; preds = %196
  %199 = load i8, i8* %164, align 1
  %200 = zext i8 %199 to i32
  br label %227

201:                                              ; preds = %196
  %202 = mul nsw i32 %180, 43
  %203 = add nuw nsw i32 %202, 108
  %204 = add nuw nsw i32 %202, 151
  br label %227

205:                                              ; preds = %165
  %206 = icmp slt i32 %180, -3
  br i1 %206, label %207, label %216

207:                                              ; preds = %205
  %208 = icmp eq i32 %180, -4
  br i1 %208, label %209, label %212

209:                                              ; preds = %207
  %210 = load i8, i8* %163, align 1
  %211 = zext i8 %210 to i32
  br label %227

212:                                              ; preds = %207
  %213 = mul nsw i32 %180, -43
  %214 = add nuw nsw i32 %213, 108
  %215 = add nuw nsw i32 %213, 65
  br label %227

216:                                              ; preds = %205
  %217 = add nsw i32 %180, 4
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i8, i8* %150, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i32
  %222 = add nsw i32 %180, 5
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds i8, i8* %150, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  br label %227

227:                                              ; preds = %216, %212, %209, %198, %201
  %228 = phi i32 [ %200, %198 ], [ %203, %201 ], [ 280, %209 ], [ %214, %212 ], [ %221, %216 ]
  %229 = phi i32 [ 280, %198 ], [ %204, %201 ], [ %211, %209 ], [ %215, %212 ], [ %226, %216 ]
  %230 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 %166
  %231 = load i32, i32* %230, align 4
  %232 = sub i16 %152, %190
  %233 = sext i16 %232 to i32
  %234 = mul nsw i32 %233, %233
  %235 = mul nsw i32 %234, %160
  %236 = shl i32 %228, 16
  %237 = ashr exact i32 %236, 16
  %238 = mul nsw i32 %237, %102
  %239 = add i32 %238, %231
  %240 = add i32 %239, %235
  store i32 %240, i32* %230, align 4
  %241 = sub i16 %152, %192
  %242 = sext i16 %241 to i32
  %243 = mul nsw i32 %242, %242
  %244 = mul nsw i32 %243, %160
  %245 = shl i32 %229, 16
  %246 = ashr exact i32 %245, 16
  %247 = mul nsw i32 %246, %102
  %248 = add i32 %247, %231
  %249 = add i32 %248, %244
  %250 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 %193
  store i32 %249, i32* %250, align 4
  %251 = add nuw nsw i64 %166, 1
  %252 = icmp eq i64 %251, %162
  br i1 %252, label %253, label %165

253:                                              ; preds = %227
  %254 = icmp slt i32 %145, 3
  br i1 %254, label %259, label %255

255:                                              ; preds = %253
  %256 = load i32, i32* %37, align 16
  %257 = load i32, i32* %41, align 16
  %258 = icmp sgt i32 %256, %257
  br i1 %258, label %310, label %313

259:                                              ; preds = %253
  br i1 %153, label %260, label %292

260:                                              ; preds = %259
  %261 = sext i32 %145 to i64
  %262 = and i64 %162, 1
  %263 = icmp eq i32 %145, 1
  br i1 %263, label %283, label %264

264:                                              ; preds = %260
  %265 = sub nsw i64 %162, %262
  br label %266

266:                                              ; preds = %266, %264
  %267 = phi i64 [ 0, %264 ], [ %280, %266 ]
  %268 = phi i64 [ %265, %264 ], [ %281, %266 ]
  %269 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %267, i64 %146
  %270 = load i8, i8* %269, align 1
  %271 = add i8 %270, 1
  %272 = add nsw i64 %267, %261
  %273 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %272, i64 %146
  store i8 %271, i8* %273, align 1
  %274 = or i64 %267, 1
  %275 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %274, i64 %146
  %276 = load i8, i8* %275, align 1
  %277 = add i8 %276, 1
  %278 = add nsw i64 %274, %261
  %279 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %278, i64 %146
  store i8 %277, i8* %279, align 1
  %280 = add nuw nsw i64 %267, 2
  %281 = add i64 %268, -2
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %266

283:                                              ; preds = %266, %260
  %284 = phi i64 [ 0, %260 ], [ %280, %266 ]
  %285 = icmp eq i64 %262, 0
  br i1 %285, label %292, label %286

286:                                              ; preds = %283
  %287 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %284, i64 %146
  %288 = load i8, i8* %287, align 1
  %289 = add i8 %288, 1
  %290 = add nsw i64 %284, %261
  %291 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %290, i64 %146
  store i8 %289, i8* %291, align 1
  br label %292

292:                                              ; preds = %286, %283, %143, %259
  %293 = shl i32 %145, 1
  %294 = icmp slt i32 %293, 4
  br i1 %294, label %295, label %401

295:                                              ; preds = %292
  %296 = sext i32 %293 to i64
  br label %297

297:                                              ; preds = %297, %295
  %298 = phi i64 [ %296, %295 ], [ %308, %297 ]
  %299 = sub nsw i64 %298, %296
  %300 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %299, i64 %146
  %301 = load i8, i8* %300, align 1
  %302 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %298, i64 %146
  store i8 %301, i8* %302, align 1
  %303 = or i64 %298, 1
  %304 = sub nsw i64 %303, %296
  %305 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %304, i64 %146
  %306 = load i8, i8* %305, align 1
  %307 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %303, i64 %146
  store i8 %306, i8* %307, align 1
  %308 = add nsw i64 %298, 2
  %309 = icmp eq i64 %308, 4
  br i1 %309, label %401, label %297

310:                                              ; preds = %255
  store i32 %257, i32* %37, align 16
  store i32 %256, i32* %41, align 16
  %311 = load i16, i16* %27, align 16
  %312 = load i16, i16* %31, align 8
  store i16 %312, i16* %27, align 16
  store i16 %311, i16* %31, align 8
  br label %313

313:                                              ; preds = %255, %310
  %314 = phi i32 [ %256, %310 ], [ %257, %255 ]
  %315 = phi i32 [ %257, %310 ], [ %256, %255 ]
  %316 = phi i32 [ 4, %310 ], [ 0, %255 ]
  store i32 %314, i32* %53, align 16
  store i32 %315, i32* %47, align 16
  store i32 %316, i32* %20, align 16
  %317 = load i32, i32* %38, align 4
  %318 = load i32, i32* %42, align 4
  %319 = icmp sgt i32 %317, %318
  br i1 %319, label %414, label %417

320:                                              ; preds = %437, %372
  %321 = phi i32 [ %439, %437 ], [ %400, %372 ]
  %322 = phi i32 [ %438, %437 ], [ %399, %372 ]
  %323 = phi i32 [ %429, %437 ], [ %398, %372 ]
  %324 = phi i32 [ %428, %437 ], [ %397, %372 ]
  %325 = phi i32 [ %419, %437 ], [ %396, %372 ]
  %326 = phi i32 [ %418, %437 ], [ %395, %372 ]
  %327 = phi i32 [ %315, %437 ], [ %394, %372 ]
  %328 = phi i32 [ %314, %437 ], [ %393, %372 ]
  %329 = icmp sgt i32 %327, 0
  %330 = select i1 %329, i32 %327, i32 0
  %331 = icmp sgt i32 %328, %326
  %332 = zext i1 %331 to i32
  %333 = select i1 %331, i32 %326, i32 %328
  %334 = icmp slt i32 %330, %325
  %335 = select i1 %334, i32 %325, i32 %330
  %336 = icmp sgt i32 %333, %324
  %337 = select i1 %336, i32 2, i32 %332
  %338 = select i1 %336, i32 %324, i32 %333
  %339 = icmp slt i32 %335, %323
  %340 = select i1 %339, i32 %323, i32 %335
  %341 = icmp sgt i32 %338, %322
  %342 = select i1 %341, i32 3, i32 %337
  %343 = select i1 %341, i32 %322, i32 %338
  %344 = icmp slt i32 %340, %321
  %345 = select i1 %344, i32 %321, i32 %340
  %346 = icmp slt i32 %343, %345
  br i1 %346, label %372, label %347

347:                                              ; preds = %320
  %348 = load i32, i32* %20, align 16
  %349 = lshr i32 %348, 2
  %350 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 0, i64 %146
  %351 = load i8, i8* %350, align 1
  %352 = trunc i32 %349 to i8
  %353 = add i8 %351, %352
  store i8 %353, i8* %350, align 1
  %354 = load i32, i32* %21, align 4
  %355 = lshr i32 %354, 2
  %356 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 1, i64 %146
  %357 = load i8, i8* %356, align 1
  %358 = trunc i32 %355 to i8
  %359 = add i8 %357, %358
  store i8 %359, i8* %356, align 1
  %360 = load i32, i32* %22, align 8
  %361 = lshr i32 %360, 2
  %362 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 2, i64 %146
  %363 = load i8, i8* %362, align 1
  %364 = trunc i32 %361 to i8
  %365 = add i8 %363, %364
  store i8 %365, i8* %362, align 1
  %366 = load i32, i32* %23, align 4
  %367 = lshr i32 %366, 2
  %368 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 3, i64 %146
  %369 = load i8, i8* %368, align 1
  %370 = trunc i32 %367 to i8
  %371 = add i8 %369, %370
  store i8 %371, i8* %368, align 1
  br label %401

372:                                              ; preds = %320
  %373 = zext i1 %334 to i64
  %374 = select i1 %339, i64 2, i64 %373
  %375 = select i1 %344, i64 3, i64 %374
  %376 = zext i32 %342 to i64
  %377 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %376
  %378 = load i32, i32* %377, align 4
  %379 = xor i32 %378, 4
  %380 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %375
  store i32 %379, i32* %380, align 4
  %381 = or i32 %342, 4
  %382 = zext i32 %381 to i64
  %383 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 %382
  %384 = load i32, i32* %383, align 4
  %385 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 %375
  store i32 %384, i32* %385, align 4
  %386 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 %382
  %387 = load i16, i16* %386, align 2
  %388 = getelementptr inbounds [8 x i16], [8 x i16]* %13, i64 0, i64 %375
  store i16 %387, i16* %388, align 2
  %389 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 %375
  store i32 0, i32* %389, align 4
  %390 = getelementptr inbounds [4 x i32], [4 x i32]* %16, i64 0, i64 %376
  store i32 2147483647, i32* %390, align 4
  %391 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %375, i64 0
  %392 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %376, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %391, i8* align 16 %392, i64 16, i1 false)
  %393 = load i32, i32* %53, align 16
  %394 = load i32, i32* %47, align 16
  %395 = load i32, i32* %54, align 4
  %396 = load i32, i32* %48, align 4
  %397 = load i32, i32* %55, align 8
  %398 = load i32, i32* %49, align 8
  %399 = load i32, i32* %56, align 4
  %400 = load i32, i32* %50, align 4
  br label %320

401:                                              ; preds = %297, %347, %292
  %402 = phi i32 [ %293, %292 ], [ %145, %347 ], [ %293, %297 ]
  %403 = icmp sgt i64 %146, 0
  br i1 %403, label %143, label %104

404:                                              ; preds = %113
  %405 = and i32 %141, 3
  %406 = zext i32 %405 to i64
  %407 = and i64 %97, 4294967295
  %408 = getelementptr [4 x [16 x i8]], [4 x [16 x i8]]* %12, i64 0, i64 %406, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 16 %408, i64 %407, i1 false)
  br label %409

409:                                              ; preds = %404, %113
  %410 = lshr i32 %141, 2
  %411 = load i8, i8* %0, align 1
  %412 = trunc i32 %410 to i8
  %413 = add i8 %411, %412
  store i8 %413, i8* %0, align 1
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %59) #2
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %57) #2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #2
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %24) #2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #2
  ret i32 %142

414:                                              ; preds = %313
  store i32 %318, i32* %38, align 4
  store i32 %317, i32* %42, align 4
  %415 = load i16, i16* %28, align 2
  %416 = load i16, i16* %32, align 2
  store i16 %416, i16* %28, align 2
  store i16 %415, i16* %32, align 2
  br label %417

417:                                              ; preds = %313, %414
  %418 = phi i32 [ %317, %414 ], [ %318, %313 ]
  %419 = phi i32 [ %318, %414 ], [ %317, %313 ]
  %420 = phi i32 [ 5, %414 ], [ 1, %313 ]
  store i32 %418, i32* %54, align 4
  store i32 %419, i32* %48, align 4
  store i32 %420, i32* %21, align 4
  %421 = load i32, i32* %39, align 8
  %422 = load i32, i32* %43, align 8
  %423 = icmp sgt i32 %421, %422
  br i1 %423, label %424, label %427

424:                                              ; preds = %417
  store i32 %422, i32* %39, align 8
  store i32 %421, i32* %43, align 8
  %425 = load i16, i16* %29, align 4
  %426 = load i16, i16* %33, align 4
  store i16 %426, i16* %29, align 4
  store i16 %425, i16* %33, align 4
  br label %427

427:                                              ; preds = %417, %424
  %428 = phi i32 [ %421, %424 ], [ %422, %417 ]
  %429 = phi i32 [ %422, %424 ], [ %421, %417 ]
  %430 = phi i32 [ 6, %424 ], [ 2, %417 ]
  store i32 %428, i32* %55, align 8
  store i32 %429, i32* %49, align 8
  store i32 %430, i32* %22, align 8
  %431 = load i32, i32* %40, align 4
  %432 = load i32, i32* %44, align 4
  %433 = icmp sgt i32 %431, %432
  br i1 %433, label %434, label %437

434:                                              ; preds = %427
  store i32 %432, i32* %40, align 4
  store i32 %431, i32* %44, align 4
  %435 = load i16, i16* %30, align 2
  %436 = load i16, i16* %34, align 2
  store i16 %436, i16* %30, align 2
  store i16 %435, i16* %34, align 2
  br label %437

437:                                              ; preds = %427, %434
  %438 = phi i32 [ %431, %434 ], [ %432, %427 ]
  %439 = phi i32 [ %432, %434 ], [ %431, %427 ]
  %440 = phi i32 [ 7, %434 ], [ 3, %427 ]
  store i32 %438, i32* %56, align 4
  store i32 %439, i32* %50, align 4
  store i32 %440, i32* %23, align 4
  br label %320
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
