; ModuleID = '../../third_party/ffmpeg/libavcodec/mdct_float.c'
source_filename = "../../third_party/ffmpeg/libavcodec/mdct_float.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, float*, float*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, i32, i32, i32* }
%struct.FFTComplex = type { float, float }

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @ff_mdct_init(%struct.FFTContext*, i32, i32, double) local_unnamed_addr #0 {
  %5 = bitcast %struct.FFTContext* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 104, i1 false)
  %6 = shl i32 1, %1
  %7 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 5
  store i32 %1, i32* %7, align 4
  %8 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 4
  store i32 %6, i32* %8, align 8
  %9 = ashr i32 %6, 2
  %10 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 14
  store i32 0, i32* %10, align 4
  %11 = add nsw i32 %1, -2
  %12 = tail call i32 @ff_fft_init(%struct.FFTContext* %0, i32 %11, i32 %2) #5
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %69, label %14

14:                                               ; preds = %4
  %15 = sdiv i32 %6, 2
  %16 = sext i32 %15 to i64
  %17 = tail call i8* @av_malloc_array(i64 %16, i64 4) #5
  %18 = bitcast i8* %17 to float*
  %19 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %20 = bitcast float** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = icmp eq i8* %17, null
  br i1 %21, label %69, label %22

22:                                               ; preds = %14
  %23 = load i32, i32* %10, align 4
  switch i32 %23, label %69 [
    i32 0, label %24
    i32 1, label %28
  ]

24:                                               ; preds = %22
  %25 = sext i32 %9 to i64
  %26 = getelementptr inbounds float, float* %18, i64 %25
  %27 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  store float* %26, float** %27, align 8
  br label %32

28:                                               ; preds = %22
  %29 = getelementptr inbounds i8, i8* %17, i64 4
  %30 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  %31 = bitcast float** %30 to i8**
  store i8* %29, i8** %31, align 8
  br label %32

32:                                               ; preds = %28, %24
  %33 = phi i64 [ 2, %28 ], [ 1, %24 ]
  %34 = fcmp nsz olt double %3, 0.000000e+00
  %35 = sitofp i32 %9 to double
  %36 = fadd nsz double %35, 1.250000e-01
  %37 = select i1 %34, double %36, double 1.250000e-01
  %38 = tail call nsz double @llvm.fabs.f64(double %3)
  %39 = tail call nsz double @llvm.sqrt.f64(double %38)
  %40 = icmp sgt i32 %6, 3
  br i1 %40, label %41, label %72

41:                                               ; preds = %32
  %42 = sitofp i32 %6 to double
  %43 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  %44 = sext i32 %9 to i64
  br label %45

45:                                               ; preds = %67, %41
  %46 = phi float* [ %18, %41 ], [ %68, %67 ]
  %47 = phi i64 [ 0, %41 ], [ %65, %67 ]
  %48 = trunc i64 %47 to i32
  %49 = sitofp i32 %48 to double
  %50 = fadd nsz double %37, %49
  %51 = fmul nsz double %50, 0x401921FB54442D18
  %52 = fdiv nsz double %51, %42
  %53 = tail call nsz double @llvm.cos.f64(double %52)
  %54 = fmul nsz double %39, %53
  %55 = fptrunc double %54 to float
  %56 = fsub nsz float -0.000000e+00, %55
  %57 = mul nuw nsw i64 %47, %33
  %58 = getelementptr inbounds float, float* %46, i64 %57
  store float %56, float* %58, align 4
  %59 = tail call nsz double @llvm.sin.f64(double %52)
  %60 = fmul nsz double %39, %59
  %61 = fptrunc double %60 to float
  %62 = fsub nsz float -0.000000e+00, %61
  %63 = load float*, float** %43, align 8
  %64 = getelementptr inbounds float, float* %63, i64 %57
  store float %62, float* %64, align 4
  %65 = add nuw nsw i64 %47, 1
  %66 = icmp slt i64 %65, %44
  br i1 %66, label %67, label %72

67:                                               ; preds = %45
  %68 = load float*, float** %19, align 8
  br label %45

69:                                               ; preds = %14, %22, %4
  %70 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %71 = bitcast float** %70 to i8*
  tail call void @av_freep(i8* %71) #5
  tail call void @ff_fft_end(%struct.FFTContext* %0) #5
  br label %72

72:                                               ; preds = %45, %32, %69
  %73 = phi i32 [ -1, %69 ], [ 0, %32 ], [ 0, %45 ]
  ret i32 %73
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @ff_fft_init(%struct.FFTContext*, i32, i32) local_unnamed_addr #2

declare i8* @av_malloc_array(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sin.f64(double) #3

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_mdct_end(%struct.FFTContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %3 = bitcast float** %2 to i8*
  tail call void @av_freep(i8* %3) #5
  tail call void @ff_fft_end(%struct.FFTContext* %0) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_imdct_half_c(%struct.FFTContext*, float*, float* nocapture readonly) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  %5 = load i16*, i16** %4, align 8
  %6 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  %9 = load float*, float** %8, align 8
  %10 = bitcast float* %1 to %struct.FFTComplex*
  %11 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 1, %12
  %14 = ashr i32 %13, 3
  %15 = icmp sgt i32 %13, 3
  br i1 %15, label %16, label %52

16:                                               ; preds = %3
  %17 = lshr i32 %13, 1
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds float, float* %2, i64 %18
  %20 = getelementptr inbounds float, float* %19, i64 -1
  %21 = lshr i32 %13, 2
  %22 = zext i32 %21 to i64
  br label %23

23:                                               ; preds = %16, %23
  %24 = phi i64 [ 0, %16 ], [ %50, %23 ]
  %25 = phi float* [ %20, %16 ], [ %49, %23 ]
  %26 = phi float* [ %2, %16 ], [ %48, %23 ]
  %27 = getelementptr inbounds i16, i16* %5, i64 %24
  %28 = load i16, i16* %27, align 2
  %29 = load float, float* %25, align 4
  %30 = getelementptr inbounds float, float* %7, i64 %24
  %31 = load float, float* %30, align 4
  %32 = fmul nsz float %29, %31
  %33 = load float, float* %26, align 4
  %34 = getelementptr inbounds float, float* %9, i64 %24
  %35 = load float, float* %34, align 4
  %36 = fmul nsz float %33, %35
  %37 = fsub nsz float %32, %36
  %38 = zext i16 %28 to i64
  %39 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %38, i32 0
  store float %37, float* %39, align 4
  %40 = load float, float* %25, align 4
  %41 = load float, float* %34, align 4
  %42 = fmul nsz float %40, %41
  %43 = load float, float* %26, align 4
  %44 = load float, float* %30, align 4
  %45 = fmul nsz float %43, %44
  %46 = fadd nsz float %42, %45
  %47 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %38, i32 1
  store float %46, float* %47, align 4
  %48 = getelementptr inbounds float, float* %26, i64 2
  %49 = getelementptr inbounds float, float* %25, i64 -2
  %50 = add nuw nsw i64 %24, 1
  %51 = icmp ult i64 %50, %22
  br i1 %51, label %23, label %52

52:                                               ; preds = %23, %3
  %53 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 9
  %54 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %53, align 8
  tail call void %54(%struct.FFTContext* %0, %struct.FFTComplex* %10) #5
  %55 = icmp sgt i32 %13, 7
  br i1 %55, label %56, label %93

56:                                               ; preds = %52
  %57 = sext i32 %14 to i64
  br label %58

58:                                               ; preds = %56, %58
  %59 = phi i64 [ 0, %56 ], [ %91, %58 ]
  %60 = xor i64 %59, -1
  %61 = add nsw i64 %57, %60
  %62 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %61, i32 1
  %63 = load float, float* %62, align 4
  %64 = getelementptr inbounds float, float* %9, i64 %61
  %65 = load float, float* %64, align 4
  %66 = fmul nsz float %63, %65
  %67 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %61, i32 0
  %68 = load float, float* %67, align 4
  %69 = getelementptr inbounds float, float* %7, i64 %61
  %70 = load float, float* %69, align 4
  %71 = fmul nsz float %68, %70
  %72 = fsub nsz float %66, %71
  %73 = fmul nsz float %63, %70
  %74 = fmul nsz float %65, %68
  %75 = fadd nsz float %74, %73
  %76 = add nsw i64 %59, %57
  %77 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %76, i32 1
  %78 = load float, float* %77, align 4
  %79 = getelementptr inbounds float, float* %9, i64 %76
  %80 = load float, float* %79, align 4
  %81 = fmul nsz float %78, %80
  %82 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %76, i32 0
  %83 = load float, float* %82, align 4
  %84 = getelementptr inbounds float, float* %7, i64 %76
  %85 = load float, float* %84, align 4
  %86 = fmul nsz float %83, %85
  %87 = fsub nsz float %81, %86
  %88 = fmul nsz float %78, %85
  %89 = fmul nsz float %80, %83
  %90 = fadd nsz float %89, %88
  store float %72, float* %67, align 4
  store float %90, float* %62, align 4
  store float %87, float* %82, align 4
  store float %75, float* %77, align 4
  %91 = add nuw nsw i64 %59, 1
  %92 = icmp slt i64 %91, %57
  br i1 %92, label %58, label %93

93:                                               ; preds = %58, %52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_imdct_calc_c(%struct.FFTContext*, float*, float* nocapture readonly) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 5
  %5 = load i32, i32* %4, align 4
  %6 = shl i32 1, %5
  %7 = ashr i32 %6, 2
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds float, float* %1, i64 %8
  tail call void @ff_imdct_half_c(%struct.FFTContext* %0, float* %9, float* %2)
  %10 = icmp sgt i32 %6, 3
  br i1 %10, label %11, label %33

11:                                               ; preds = %3
  %12 = lshr i32 %6, 1
  %13 = zext i32 %12 to i64
  br label %14

14:                                               ; preds = %11, %14
  %15 = phi i64 [ 0, %11 ], [ %31, %14 ]
  %16 = xor i64 %15, -1
  %17 = add nsw i64 %13, %16
  %18 = getelementptr inbounds float, float* %1, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fsub nsz float -0.000000e+00, %19
  %21 = getelementptr inbounds float, float* %1, i64 %15
  store float %20, float* %21, align 4
  %22 = add nuw nsw i64 %15, %13
  %23 = getelementptr inbounds float, float* %1, i64 %22
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = trunc i64 %16 to i32
  %27 = add i32 %6, %26
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds float, float* %1, i64 %28
  %30 = bitcast float* %29 to i32*
  store i32 %25, i32* %30, align 4
  %31 = add nuw nsw i64 %15, 1
  %32 = icmp slt i64 %31, %8
  br i1 %32, label %14, label %33

33:                                               ; preds = %14, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_mdct_calc_c(%struct.FFTContext*, float*, float* nocapture readonly) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  %5 = load i16*, i16** %4, align 8
  %6 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 6
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 7
  %9 = load float*, float** %8, align 8
  %10 = bitcast float* %1 to %struct.FFTComplex*
  %11 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 1, %12
  %14 = ashr i32 %13, 2
  %15 = ashr i32 %13, 3
  %16 = icmp sgt i32 %13, 7
  br i1 %16, label %20, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 9
  %19 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %18, align 8
  tail call void %19(%struct.FFTContext* %0, %struct.FFTComplex* %10) #5
  br label %145

20:                                               ; preds = %3
  %21 = mul nsw i32 %14, 3
  %22 = lshr i32 %13, 1
  %23 = sext i32 %15 to i64
  %24 = sext i32 %21 to i64
  %25 = sext i32 %14 to i64
  %26 = zext i32 %22 to i64
  br label %27

27:                                               ; preds = %20, %27
  %28 = phi i64 [ 0, %20 ], [ %99, %27 ]
  %29 = shl nuw nsw i64 %28, 1
  %30 = add nsw i64 %29, %24
  %31 = getelementptr inbounds float, float* %2, i64 %30
  %32 = load float, float* %31, align 4
  %33 = xor i64 %29, -1
  %34 = add nsw i64 %24, %33
  %35 = getelementptr inbounds float, float* %2, i64 %34
  %36 = load float, float* %35, align 4
  %37 = fsub nsz float -0.000000e+00, %36
  %38 = fsub nsz float %37, %32
  %39 = add nsw i64 %29, %25
  %40 = getelementptr inbounds float, float* %2, i64 %39
  %41 = load float, float* %40, align 4
  %42 = add nsw i64 %25, %33
  %43 = getelementptr inbounds float, float* %2, i64 %42
  %44 = load float, float* %43, align 4
  %45 = fsub nsz float %44, %41
  %46 = getelementptr inbounds i16, i16* %5, i64 %28
  %47 = load i16, i16* %46, align 2
  %48 = getelementptr inbounds float, float* %7, i64 %28
  %49 = load float, float* %48, align 4
  %50 = fmul nsz float %38, %49
  %51 = fsub nsz float -0.000000e+00, %50
  %52 = getelementptr inbounds float, float* %9, i64 %28
  %53 = load float, float* %52, align 4
  %54 = fmul nsz float %45, %53
  %55 = fsub nsz float %51, %54
  %56 = zext i16 %47 to i64
  %57 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %56, i32 0
  store float %55, float* %57, align 4
  %58 = load float, float* %52, align 4
  %59 = fmul nsz float %38, %58
  %60 = load float, float* %48, align 4
  %61 = fmul nsz float %45, %60
  %62 = fsub nsz float %59, %61
  %63 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %56, i32 1
  store float %62, float* %63, align 4
  %64 = getelementptr inbounds float, float* %2, i64 %29
  %65 = load float, float* %64, align 4
  %66 = add nsw i64 %26, %33
  %67 = getelementptr inbounds float, float* %2, i64 %66
  %68 = load float, float* %67, align 4
  %69 = fsub nsz float %65, %68
  %70 = add nuw nsw i64 %29, %26
  %71 = getelementptr inbounds float, float* %2, i64 %70
  %72 = load float, float* %71, align 4
  %73 = trunc i64 %33 to i32
  %74 = add i32 %13, %73
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %2, i64 %75
  %77 = load float, float* %76, align 4
  %78 = fsub nsz float -0.000000e+00, %77
  %79 = fsub nsz float %78, %72
  %80 = add nsw i64 %28, %23
  %81 = getelementptr inbounds i16, i16* %5, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = getelementptr inbounds float, float* %7, i64 %80
  %84 = load float, float* %83, align 4
  %85 = fmul nsz float %69, %84
  %86 = fsub nsz float -0.000000e+00, %85
  %87 = getelementptr inbounds float, float* %9, i64 %80
  %88 = load float, float* %87, align 4
  %89 = fmul nsz float %79, %88
  %90 = fsub nsz float %86, %89
  %91 = zext i16 %82 to i64
  %92 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %91, i32 0
  store float %90, float* %92, align 4
  %93 = load float, float* %87, align 4
  %94 = fmul nsz float %69, %93
  %95 = load float, float* %83, align 4
  %96 = fmul nsz float %79, %95
  %97 = fsub nsz float %94, %96
  %98 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %91, i32 1
  store float %97, float* %98, align 4
  %99 = add nuw nsw i64 %28, 1
  %100 = icmp slt i64 %99, %23
  br i1 %100, label %27, label %101

101:                                              ; preds = %27
  %102 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 9
  %103 = load void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)** %102, align 8
  tail call void %103(%struct.FFTContext* %0, %struct.FFTComplex* %10) #5
  br i1 %16, label %104, label %145

104:                                              ; preds = %101
  %105 = sext i32 %15 to i64
  br label %106

106:                                              ; preds = %104, %106
  %107 = phi i64 [ 0, %104 ], [ %143, %106 ]
  %108 = xor i64 %107, -1
  %109 = add nsw i64 %105, %108
  %110 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %109, i32 0
  %111 = load float, float* %110, align 4
  %112 = getelementptr inbounds float, float* %9, i64 %109
  %113 = load float, float* %112, align 4
  %114 = fsub nsz float -0.000000e+00, %113
  %115 = fmul nsz float %111, %114
  %116 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %109, i32 1
  %117 = load float, float* %116, align 4
  %118 = getelementptr inbounds float, float* %7, i64 %109
  %119 = load float, float* %118, align 4
  %120 = fsub nsz float -0.000000e+00, %119
  %121 = fmul nsz float %117, %120
  %122 = fsub nsz float %115, %121
  %123 = fmul nsz float %111, %120
  %124 = fmul nsz float %117, %114
  %125 = fadd nsz float %124, %123
  %126 = add nsw i64 %107, %105
  %127 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %126, i32 0
  %128 = load float, float* %127, align 4
  %129 = getelementptr inbounds float, float* %9, i64 %126
  %130 = load float, float* %129, align 4
  %131 = fsub nsz float -0.000000e+00, %130
  %132 = fmul nsz float %128, %131
  %133 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %10, i64 %126, i32 1
  %134 = load float, float* %133, align 4
  %135 = getelementptr inbounds float, float* %7, i64 %126
  %136 = load float, float* %135, align 4
  %137 = fsub nsz float -0.000000e+00, %136
  %138 = fmul nsz float %134, %137
  %139 = fsub nsz float %132, %138
  %140 = fmul nsz float %128, %137
  %141 = fmul nsz float %134, %131
  %142 = fadd nsz float %141, %140
  store float %125, float* %110, align 4
  store float %139, float* %116, align 4
  store float %142, float* %127, align 4
  store float %122, float* %133, align 4
  %143 = add nuw nsw i64 %107, 1
  %144 = icmp slt i64 %143, %105
  br i1 %144, label %106, label %145

145:                                              ; preds = %106, %17, %101
  ret void
}

declare void @av_freep(i8*) local_unnamed_addr #2

declare void @ff_fft_end(%struct.FFTContext*) local_unnamed_addr #2

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
