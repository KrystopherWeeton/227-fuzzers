; ModuleID = '../../net/http/alternative_service.cc'
source_filename = "../../net/http/alternative_service.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.net::AlternativeServiceInfo" = type { %"struct.net::AlternativeService", %"class.base::Time", %"class.std::__1::vector" }
%"struct.net::AlternativeService" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"*, %"class.std::__1::__compressed_pair.7" }
%"struct.quic::ParsedQuicVersion" = type { i32, i32 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.quic::ParsedQuicVersion"* }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.1", [4 x i8] }>
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.base::Time::Exploded" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"class.net::AlternativeServiceInfo"*, %"class.net::AlternativeServiceInfo"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.net::AlternativeServiceInfo"* }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"class.std::__1::__compressed_pair.17" }
%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, i32, %"class.absl::InlinedVector" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.16" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.16" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Allocated", [16 x i8] }
%"struct.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Allocated" = type { i32*, i64 }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = comdat any

$_ZNSt3__16vectorIN3net22AlternativeServiceInfoENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

@.str = private unnamed_addr constant [27 x i8] c"Net.AlternateProtocolUsage\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"Net.AlternateProtocolUsageGoogle\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"Net.AlternateProtocolBrokenLocation\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"%s %s:%d\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"%s, expires %04d-%02d-%02d %02d:%02d:%02d\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZZN3net31HistogramAlternateProtocolUsageENS_22AlternateProtocolUsageEbE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN3net31HistogramAlternateProtocolUsageENS_22AlternateProtocolUsageEbE24atomic_histogram_pointer_0.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN3net40HistogramBrokenAlternateProtocolLocationENS_31BrokenAlternateProtocolLocationEE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8

@_ZN3net22AlternativeServiceInfoC1Ev = hidden unnamed_addr alias void (%"class.net::AlternativeServiceInfo"*), void (%"class.net::AlternativeServiceInfo"*)* @_ZN3net22AlternativeServiceInfoC2Ev
@_ZN3net22AlternativeServiceInfoD1Ev = hidden unnamed_addr alias void (%"class.net::AlternativeServiceInfo"*), void (%"class.net::AlternativeServiceInfo"*)* @_ZN3net22AlternativeServiceInfoD2Ev
@_ZN3net22AlternativeServiceInfoC1ERKNS_18AlternativeServiceEN4base4TimeERKNSt3__16vectorIN4quic17ParsedQuicVersionENS6_9allocatorIS9_EEEE = hidden unnamed_addr alias void (%"class.net::AlternativeServiceInfo"*, %"struct.net::AlternativeService"*, i64, %"class.std::__1::vector"*), void (%"class.net::AlternativeServiceInfo"*, %"struct.net::AlternativeService"*, i64, %"class.std::__1::vector"*)* @_ZN3net22AlternativeServiceInfoC2ERKNS_18AlternativeServiceEN4base4TimeERKNSt3__16vectorIN4quic17ParsedQuicVersionENS6_9allocatorIS9_EEEE
@_ZN3net22AlternativeServiceInfoC1ERKS0_ = hidden unnamed_addr alias void (%"class.net::AlternativeServiceInfo"*, %"class.net::AlternativeServiceInfo"*), void (%"class.net::AlternativeServiceInfo"*, %"class.net::AlternativeServiceInfo"*)* @_ZN3net22AlternativeServiceInfoC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net31HistogramAlternateProtocolUsageENS_22AlternateProtocolUsageEb(i32, i1 zeroext) local_unnamed_addr #0 {
  %3 = load atomic i64, i64* @_ZZN3net31HistogramAlternateProtocolUsageENS_22AlternateProtocolUsageEbE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %4 = inttoptr i64 %3 to %"class.base::HistogramBase"*
  %5 = icmp eq i64 %3, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 1, i32 5, i32 6, i32 1) #12
  %8 = ptrtoint %"class.base::HistogramBase"* %7 to i64
  store atomic i64 %8, i64* @_ZZN3net31HistogramAlternateProtocolUsageENS_22AlternateProtocolUsageEbE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi %"class.base::HistogramBase"* [ %4, %2 ], [ %7, %6 ]
  %11 = bitcast %"class.base::HistogramBase"* %10 to void (%"class.base::HistogramBase"*, i32)***
  %12 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %12, i64 6
  %14 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %13, align 8
  tail call void %14(%"class.base::HistogramBase"* %10, i32 %0) #12
  br i1 %1, label %15, label %28

15:                                               ; preds = %9
  %16 = load atomic i64, i64* @_ZZN3net31HistogramAlternateProtocolUsageENS_22AlternateProtocolUsageEbE24atomic_histogram_pointer_0.0.0.0.0.0 acquire, align 8
  %17 = inttoptr i64 %16 to %"class.base::HistogramBase"*
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %15
  %20 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i32 1, i32 5, i32 6, i32 1) #12
  %21 = ptrtoint %"class.base::HistogramBase"* %20 to i64
  store atomic i64 %21, i64* @_ZZN3net31HistogramAlternateProtocolUsageENS_22AlternateProtocolUsageEbE24atomic_histogram_pointer_0.0.0.0.0.0 release, align 8
  br label %22

22:                                               ; preds = %15, %19
  %23 = phi %"class.base::HistogramBase"* [ %17, %15 ], [ %20, %19 ]
  %24 = bitcast %"class.base::HistogramBase"* %23 to void (%"class.base::HistogramBase"*, i32)***
  %25 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %25, i64 6
  %27 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %26, align 8
  tail call void %27(%"class.base::HistogramBase"* %23, i32 %0) #12
  br label %28

28:                                               ; preds = %22, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net40HistogramBrokenAlternateProtocolLocationENS_31BrokenAlternateProtocolLocationE(i32) local_unnamed_addr #0 {
  %2 = load atomic i64, i64* @_ZZN3net40HistogramBrokenAlternateProtocolLocationENS_31BrokenAlternateProtocolLocationEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %3 = inttoptr i64 %2 to %"class.base::HistogramBase"*
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i32 1, i32 6, i32 7, i32 1) #12
  %7 = ptrtoint %"class.base::HistogramBase"* %6 to i64
  store atomic i64 %7, i64* @_ZZN3net40HistogramBrokenAlternateProtocolLocationENS_31BrokenAlternateProtocolLocationEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi %"class.base::HistogramBase"* [ %3, %1 ], [ %6, %5 ]
  %10 = bitcast %"class.base::HistogramBase"* %9 to void (%"class.base::HistogramBase"*, i32)***
  %11 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %11, i64 6
  %13 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %12, align 8
  tail call void %13(%"class.base::HistogramBase"* %9, i32 %0) #12
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN3net24IsAlternateProtocolValidENS_9NextProtoE(i32) local_unnamed_addr #3 {
  switch i32 %0, label %4 [
    i32 3, label %3
    i32 2, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i1 [ true, %3 ], [ true, %2 ], [ false, %1 ]
  ret i1 %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN3net17IsProtocolEnabledENS_9NextProtoEbb(i32, i1 zeroext, i1 zeroext) local_unnamed_addr #3 {
  switch i32 %0, label %7 [
    i32 3, label %6
    i32 1, label %4
    i32 2, label %5
  ]

4:                                                ; preds = %3
  br label %7

5:                                                ; preds = %3
  br label %7

6:                                                ; preds = %3
  br label %7

7:                                                ; preds = %3, %6, %5, %4
  %8 = phi i1 [ %2, %6 ], [ %1, %5 ], [ true, %4 ], [ false, %3 ]
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22AlternativeServiceInfo33CreateHttp2AlternativeServiceInfoERKNS_18AlternativeServiceEN4base4TimeE(%"class.net::AlternativeServiceInfo"* noalias sret, %"struct.net::AlternativeService"* nocapture readonly dereferenceable(40), i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %4, align 8
  %7 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 2
  %8 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 2
  %9 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %15 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false) #12
  br label %22

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %7, i8* %18, i64 %20) #12
  %21 = load i32, i32* %4, align 8
  br label %22

22:                                               ; preds = %16, %13
  %23 = phi i32 [ %6, %13 ], [ %21, %16 ]
  %24 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 3
  %25 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 3
  %26 = load i16, i16* %25, align 8
  store i16 %26, i16* %24, align 8
  %27 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %2, i64* %27, align 8
  %28 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 2
  %29 = bitcast %"class.std::__1::vector"* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 24, i1 false) #12
  %30 = icmp eq i32 %23, 3
  br i1 %30, label %31, label %32

31:                                               ; preds = %22
  tail call void @_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %28, %"struct.quic::ParsedQuicVersion"* null, %"struct.quic::ParsedQuicVersion"* null) #12
  br label %32

32:                                               ; preds = %31, %22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22AlternativeServiceInfo32CreateQuicAlternativeServiceInfoERKNS_18AlternativeServiceEN4base4TimeERKNSt3__16vectorIN4quic17ParsedQuicVersionENS6_9allocatorIS9_EEEE(%"class.net::AlternativeServiceInfo"* noalias sret, %"struct.net::AlternativeService"* nocapture readonly dereferenceable(40), i64, %"class.std::__1::vector"* readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  store i32 %7, i32* %5, align 8
  %8 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 2
  %9 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 2
  %10 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %16 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false) #12
  br label %23

17:                                               ; preds = %4
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %8, i8* %19, i64 %21) #12
  %22 = load i32, i32* %5, align 8
  br label %23

23:                                               ; preds = %17, %14
  %24 = phi i32 [ %7, %14 ], [ %22, %17 ]
  %25 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 3
  %26 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 3
  %27 = load i16, i16* %26, align 8
  store i16 %27, i16* %25, align 8
  %28 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %2, i64* %28, align 8
  %29 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 2
  %30 = bitcast %"class.std::__1::vector"* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #12
  %31 = icmp ne i32 %24, 3
  %32 = icmp eq %"class.std::__1::vector"* %29, %3
  %33 = or i1 %32, %31
  br i1 %33, label %39, label %34

34:                                               ; preds = %23
  %35 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %36 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %35, align 8
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %38 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %37, align 8
  tail call void @_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %29, %"struct.quic::ParsedQuicVersion"* %36, %"struct.quic::ParsedQuicVersion"* %38) #12
  br label %39

39:                                               ; preds = %23, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22AlternativeServiceInfoC2Ev(%"class.net::AlternativeServiceInfo"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 2
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 26, i1 false) #12
  %5 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22AlternativeServiceInfoD2Ev(%"class.net::AlternativeServiceInfo"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %2, align 8
  %4 = icmp eq %"struct.quic::ParsedQuicVersion"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.quic::ParsedQuicVersion"* %3 to i64
  %7 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 2, i32 0, i32 1
  %8 = bitcast %"struct.quic::ParsedQuicVersion"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"struct.quic::ParsedQuicVersion"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #13
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 2
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #13
  br label %19

19:                                               ; preds = %10, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22AlternativeServiceInfoC2ERKNS_18AlternativeServiceEN4base4TimeERKNSt3__16vectorIN4quic17ParsedQuicVersionENS6_9allocatorIS9_EEEE(%"class.net::AlternativeServiceInfo"*, %"struct.net::AlternativeService"* nocapture readonly dereferenceable(40), i64, %"class.std::__1::vector"* readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  store i32 %7, i32* %5, align 8
  %8 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 2
  %9 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 2
  %10 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %16 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false) #12
  br label %23

17:                                               ; preds = %4
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %8, i8* %19, i64 %21) #12
  %22 = load i32, i32* %5, align 8
  br label %23

23:                                               ; preds = %14, %17
  %24 = phi i32 [ %7, %14 ], [ %22, %17 ]
  %25 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 3
  %26 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 3
  %27 = load i16, i16* %26, align 8
  store i16 %27, i16* %25, align 8
  %28 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %2, i64* %28, align 8
  %29 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 2
  %30 = bitcast %"class.std::__1::vector"* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #12
  %31 = icmp ne i32 %24, 3
  %32 = icmp eq %"class.std::__1::vector"* %29, %3
  %33 = or i1 %32, %31
  br i1 %33, label %39, label %34

34:                                               ; preds = %23
  %35 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %36 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %35, align 8
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %38 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %37, align 8
  tail call void @_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %29, %"struct.quic::ParsedQuicVersion"* %36, %"struct.quic::ParsedQuicVersion"* %38) #12
  br label %39

39:                                               ; preds = %23, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22AlternativeServiceInfoC2ERKS0_(%"class.net::AlternativeServiceInfo"*, %"class.net::AlternativeServiceInfo"* nocapture readonly dereferenceable(72)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 2
  %7 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 2
  %8 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %14 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false) #12
  br label %20

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %6, i8* %17, i64 %19) #12
  br label %20

20:                                               ; preds = %12, %15
  %21 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 3
  %22 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 3
  %23 = load i16, i16* %22, align 8
  store i16 %23, i16* %21, align 8
  %24 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 1, i32 0, i32 0
  %25 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 1, i32 0, i32 0
  %26 = load i64, i64* %24, align 8
  store i64 %26, i64* %25, align 8
  %27 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 2
  %29 = bitcast %"class.std::__1::vector"* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 24, i1 false) #12
  %30 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 2, i32 0, i32 1
  %31 = bitcast %"struct.quic::ParsedQuicVersion"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::vector"* %28 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %119, label %38

38:                                               ; preds = %20
  %39 = icmp ugt i64 %36, 2305843009213693951
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = bitcast %"class.std::__1::vector"* %27 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %41) #14
  unreachable

42:                                               ; preds = %38
  %43 = tail call i8* @_Znwm(i64 %35) #13
  %44 = bitcast i8* %43 to %"struct.quic::ParsedQuicVersion"*
  %45 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 2, i32 0, i32 1
  %46 = bitcast %"struct.quic::ParsedQuicVersion"** %45 to i8**
  store i8* %43, i8** %46, align 8
  %47 = bitcast %"class.std::__1::vector"* %27 to i8**
  store i8* %43, i8** %47, align 8
  %48 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %44, i64 %36
  %49 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store %"struct.quic::ParsedQuicVersion"* %48, %"struct.quic::ParsedQuicVersion"** %49, align 8
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %28, i64 0, i32 0, i32 0
  %51 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %50, align 8
  %52 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %30, align 8
  %53 = bitcast %"struct.quic::ParsedQuicVersion"** %45 to i64*
  %54 = ptrtoint i8* %43 to i64
  %55 = icmp eq %"struct.quic::ParsedQuicVersion"* %51, %52
  br i1 %55, label %117, label %56

56:                                               ; preds = %42
  %57 = ptrtoint %"struct.quic::ParsedQuicVersion"* %51 to i64
  %58 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 -1, i32 0
  %59 = ptrtoint i32* %58 to i64
  %60 = sub i64 %59, %57
  %61 = lshr i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 3
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %79, label %65

65:                                               ; preds = %56, %65
  %66 = phi %"struct.quic::ParsedQuicVersion"* [ %76, %65 ], [ %44, %56 ]
  %67 = phi %"struct.quic::ParsedQuicVersion"* [ %75, %65 ], [ %51, %56 ]
  %68 = phi i64 [ %77, %65 ], [ %63, %56 ]
  %69 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %67, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %67, i64 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %66, i64 0, i32 0
  store i32 %70, i32* %73, align 4
  %74 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %66, i64 0, i32 1
  store i32 %72, i32* %74, align 4
  %75 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %67, i64 1
  %76 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %66, i64 1
  %77 = add i64 %68, -1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %65, !llvm.loop !2

79:                                               ; preds = %65, %56
  %80 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %56 ], [ %76, %65 ]
  %81 = phi %"struct.quic::ParsedQuicVersion"* [ %44, %56 ], [ %76, %65 ]
  %82 = phi %"struct.quic::ParsedQuicVersion"* [ %51, %56 ], [ %75, %65 ]
  %83 = icmp ult i64 %60, 24
  br i1 %83, label %114, label %84

84:                                               ; preds = %79, %84
  %85 = phi %"struct.quic::ParsedQuicVersion"* [ %112, %84 ], [ %81, %79 ]
  %86 = phi %"struct.quic::ParsedQuicVersion"* [ %111, %84 ], [ %82, %79 ]
  %87 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 0, i32 0
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %85, i64 0, i32 0
  store i32 %88, i32* %91, align 4
  %92 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %85, i64 0, i32 1
  store i32 %90, i32* %92, align 4
  %93 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 1, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 1, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %85, i64 1, i32 0
  store i32 %94, i32* %97, align 4
  %98 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %85, i64 1, i32 1
  store i32 %96, i32* %98, align 4
  %99 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 2, i32 0
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 2, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %85, i64 2, i32 0
  store i32 %100, i32* %103, align 4
  %104 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %85, i64 2, i32 1
  store i32 %102, i32* %104, align 4
  %105 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 3, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 3, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %85, i64 3, i32 0
  store i32 %106, i32* %109, align 4
  %110 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %85, i64 3, i32 1
  store i32 %108, i32* %110, align 4
  %111 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 4
  %112 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %85, i64 4
  %113 = icmp eq %"struct.quic::ParsedQuicVersion"* %111, %52
  br i1 %113, label %114, label %84

114:                                              ; preds = %84, %79
  %115 = phi %"struct.quic::ParsedQuicVersion"* [ %80, %79 ], [ %112, %84 ]
  %116 = ptrtoint %"struct.quic::ParsedQuicVersion"* %115 to i64
  br label %117

117:                                              ; preds = %114, %42
  %118 = phi i64 [ %54, %42 ], [ %116, %114 ]
  store i64 %118, i64* %53, align 8
  br label %119

119:                                              ; preds = %20, %117
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(72) %"class.net::AlternativeServiceInfo"* @_ZN3net22AlternativeServiceInfoaSERKS0_(%"class.net::AlternativeServiceInfo"* returned, %"class.net::AlternativeServiceInfo"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 0
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 2
  %7 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 2
  %8 = icmp eq %"class.net::AlternativeServiceInfo"* %0, %1
  br i1 %8, label %51, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %13, label %28, label %18

18:                                               ; preds = %9
  br i1 %17, label %22, label %19

19:                                               ; preds = %18
  %20 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %21 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false) #12
  br label %38

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %6, i8* %24, i64 %26) #12
  br label %38

28:                                               ; preds = %9
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %34 = zext i8 %16 to i64
  %35 = select i1 %17, i8* %30, i8* %33
  %36 = select i1 %17, i64 %32, i64 %34
  %37 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %6, i8* %35, i64 %36) #12
  br label %38

38:                                               ; preds = %19, %22, %28
  %39 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 3
  %40 = load i16, i16* %39, align 8
  %41 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 3
  store i16 %40, i16* %41, align 8
  %42 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 1, i32 0, i32 0
  %43 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 1, i32 0, i32 0
  %44 = load i64, i64* %42, align 8
  store i64 %44, i64* %43, align 8
  br i1 %8, label %58, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 2
  %47 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 2, i32 0, i32 0
  %48 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %47, align 8
  %49 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 2, i32 0, i32 1
  %50 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %49, align 8
  tail call void @_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %46, %"struct.quic::ParsedQuicVersion"* %48, %"struct.quic::ParsedQuicVersion"* %50) #12
  br label %58

51:                                               ; preds = %2
  %52 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 3
  %53 = load i16, i16* %52, align 8
  %54 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 0, i32 3
  store i16 %53, i16* %54, align 8
  %55 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 1, i32 0, i32 0
  %56 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %0, i64 0, i32 1, i32 0, i32 0
  %57 = load i64, i64* %55, align 8
  store i64 %57, i64* %56, align 8
  br label %58

58:                                               ; preds = %51, %38, %45
  ret %"class.net::AlternativeServiceInfo"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net18AlternativeService8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"struct.net::AlternativeService"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = tail call i8* @_ZN3net17NextProtoToStringENS_9NextProtoE(i32 %4) #12
  %6 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 2
  %7 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  br label %16

14:                                               ; preds = %2
  %15 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  br label %16

16:                                               ; preds = %11, %14
  %17 = phi i8* [ %13, %11 ], [ %15, %14 ]
  %18 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 3
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* %5, i8* %17, i32 %20) #12
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #2

declare i8* @_ZN3net17NextProtoToStringENS_9NextProtoE(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net22AlternativeServiceInfo8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.net::AlternativeServiceInfo"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.base::Time::Exploded", align 4
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"struct.base::Time::Exploded"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %3, i64 0, i32 0
  %7 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %3, i64 0, i32 1
  %8 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %3, i64 0, i32 3
  %9 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %3, i64 0, i32 4
  %10 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %3, i64 0, i32 5
  %11 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %3, i64 0, i32 6
  %12 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 1
  %13 = bitcast %"struct.base::Time::Exploded"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 -86, i64 32, i1 false)
  call void @_ZNK4base4Time7ExplodeEbPNS0_8ExplodedE(%"class.base::Time"* %12, i1 zeroext true, %"struct.base::Time::Exploded"* nonnull %3) #12
  %14 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #12
  %15 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8, !noalias !4
  %17 = call i8* @_ZN3net17NextProtoToStringENS_9NextProtoE(i32 %16) #12, !noalias !4
  %18 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 2
  %19 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1, !noalias !4
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8, !noalias !4
  br label %28

26:                                               ; preds = %2
  %27 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  br label %28

28:                                               ; preds = %23, %26
  %29 = phi i8* [ %25, %23 ], [ %27, %26 ]
  %30 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %1, i64 0, i32 0, i32 3
  %31 = load i16, i16* %30, align 8, !noalias !4
  %32 = zext i16 %31 to i32
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* %17, i8* %29, i32 %32) #12
  %33 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  %35 = load i8, i8* %34, align 1
  %36 = icmp slt i8 %35, 0
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = select i1 %36, i8* %38, i8* %14
  %40 = load i32, i32* %6, align 4
  %41 = load i32, i32* %7, align 4
  %42 = load i32, i32* %8, align 4
  %43 = load i32, i32* %9, align 4
  %44 = load i32, i32* %10, align 4
  %45 = load i32, i32* %11, align 4
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i8* %39, i32 %40, i32 %41, i32 %42, i32 %43, i32 %44, i32 %45) #12
  %46 = load i8, i8* %34, align 1
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %28
  %49 = load i8*, i8** %37, align 8
  call void @_ZdlPv(i8* %49) #13
  br label %50

50:                                               ; preds = %28, %48
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #12
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3net22AlternativeServiceInfo24TransportVersionLessThanERKN4quic17ParsedQuicVersionES4_(%"struct.quic::ParsedQuicVersion"* nocapture readonly dereferenceable(8), %"struct.quic::ParsedQuicVersion"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %4, %6
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3netlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_18AlternativeServiceE(%"class.std::__1::basic_ostream"* returned dereferenceable(160), %"struct.net::AlternativeService"* dereferenceable(40)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12
  %5 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !noalias !7
  %7 = tail call i8* @_ZN3net17NextProtoToStringENS_9NextProtoE(i32 %6) #12, !noalias !7
  %8 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 2
  %9 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1, !noalias !7
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8, !noalias !7
  br label %18

16:                                               ; preds = %2
  %17 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  br label %18

18:                                               ; preds = %13, %16
  %19 = phi i8* [ %15, %13 ], [ %17, %16 ]
  %20 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %1, i64 0, i32 3
  %21 = load i16, i16* %20, align 8, !noalias !7
  %22 = zext i16 %21 to i32
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* %7, i8* %19, i32 %22) #12
  %23 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = zext i8 %25 to i64
  %32 = select i1 %26, i8* %28, i8* %4
  %33 = select i1 %26, i64 %30, i64 %31
  %34 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* %32, i64 %33) #12
  %35 = load i8, i8* %24, align 1
  %36 = icmp slt i8 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %18
  %38 = load i8*, i8** %27, align 8
  call void @_ZdlPv(i8* %38) #13
  br label %39

39:                                               ; preds = %18, %37
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12
  ret %"class.std::__1::basic_ostream"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net26ProcessAlternativeServicesERKNSt3__16vectorIN4spdy20SpdyAltSvcWireFormat18AlternativeServiceENS0_9allocatorIS4_EEEEbbRKNS1_IN4quic17ParsedQuicVersionENS5_ISB_EEEE(%"class.std::__1::vector.22"* noalias sret, %"class.std::__1::vector.12"* nocapture readonly dereferenceable(24), i1 zeroext, i1 zeroext, %"class.std::__1::vector"* dereferenceable(24)) local_unnamed_addr #0 {
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"struct.quic::ParsedQuicVersion", align 4
  %8 = alloca %"class.std::__1::vector", align 8
  %9 = alloca %"class.std::__1::vector", align 8
  %10 = alloca %"class.std::__1::vector", align 8
  %11 = alloca [1 x %"struct.quic::ParsedQuicVersion"], align 4
  %12 = alloca %"struct.net::AlternativeService", align 8
  %13 = alloca %"class.net::AlternativeServiceInfo", align 8
  %14 = alloca %"class.net::AlternativeServiceInfo", align 8
  %15 = alloca %"class.net::AlternativeServiceInfo", align 8
  %16 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"class.std::__1::vector.22"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #12
  %19 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %1, i64 0, i32 0, i32 0
  %20 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %19, align 8
  %21 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %1, i64 0, i32 0, i32 1
  %22 = load %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"*, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"** %21, align 8
  %23 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %20, %22
  br i1 %23, label %113, label %24

24:                                               ; preds = %5
  %25 = bitcast %"class.std::__1::vector"* %8 to i8*
  %26 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  %28 = bitcast %"class.std::__1::vector"* %9 to i8*
  %29 = bitcast %"struct.quic::ParsedQuicVersion"** %27 to i64*
  %30 = bitcast %"class.std::__1::vector"* %9 to i64*
  %31 = bitcast %"class.std::__1::vector"* %8 to i64*
  %32 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  %33 = bitcast %"class.std::__1::vector"* %10 to i8*
  %34 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %35 = bitcast %"struct.quic::ParsedQuicVersion"** %34 to i64*
  %36 = bitcast %"class.std::__1::vector"* %4 to i64*
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 1
  %38 = bitcast %"struct.quic::ParsedQuicVersion"** %37 to i8**
  %39 = bitcast %"class.std::__1::vector"* %10 to i8**
  %40 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  %41 = bitcast %"struct.quic::ParsedQuicVersion"** %37 to i64*
  %42 = bitcast %"struct.quic::ParsedQuicVersion"* %7 to i8*
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %44 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %45 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %7, i64 0, i32 0
  %46 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %7, i64 0, i32 1
  %47 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %51 = bitcast [1 x %"struct.quic::ParsedQuicVersion"]* %11 to i8*
  %52 = getelementptr inbounds [1 x %"struct.quic::ParsedQuicVersion"], [1 x %"struct.quic::ParsedQuicVersion"]* %11, i64 0, i64 0
  %53 = getelementptr inbounds [1 x %"struct.quic::ParsedQuicVersion"], [1 x %"struct.quic::ParsedQuicVersion"]* %11, i64 0, i64 0, i32 0
  %54 = getelementptr inbounds [1 x %"struct.quic::ParsedQuicVersion"], [1 x %"struct.quic::ParsedQuicVersion"]* %11, i64 0, i64 0, i32 1
  %55 = getelementptr inbounds [1 x %"struct.quic::ParsedQuicVersion"], [1 x %"struct.quic::ParsedQuicVersion"]* %11, i64 0, i64 1
  %56 = bitcast %"struct.net::AlternativeService"* %12 to i8*
  %57 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %12, i64 0, i32 0
  %58 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %12, i64 0, i32 2
  %59 = bitcast %"class.std::__1::basic_string"* %58 to i8*
  %60 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %12, i64 0, i32 3
  %61 = bitcast %"class.net::AlternativeServiceInfo"* %13 to i8*
  %62 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %13, i64 0, i32 0, i32 0
  %63 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %13, i64 0, i32 0, i32 2
  %64 = bitcast %"class.std::__1::basic_string"* %63 to i8*
  %65 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %13, i64 0, i32 1, i32 0, i32 0
  %66 = bitcast i64* %65 to i8*
  %67 = bitcast %"class.net::AlternativeServiceInfo"* %15 to i8*
  %68 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %15, i64 0, i32 0, i32 0
  %69 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %15, i64 0, i32 0, i32 2
  %70 = bitcast %"class.std::__1::basic_string"* %58 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %71 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %70, i64 0, i32 1, i32 0
  %72 = bitcast %"class.std::__1::basic_string"* %69 to i8*
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"struct.net::AlternativeService", %"struct.net::AlternativeService"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %75 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %15, i64 0, i32 0, i32 3
  %76 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %15, i64 0, i32 1, i32 0, i32 0
  %77 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %15, i64 0, i32 2
  %78 = bitcast %"class.std::__1::vector"* %77 to i8*
  %79 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %15, i64 0, i32 2, i32 0, i32 0
  %80 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %15, i64 0, i32 2, i32 0, i32 1
  %81 = bitcast %"struct.quic::ParsedQuicVersion"** %80 to i64*
  %82 = bitcast %"class.std::__1::basic_string"* %69 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %83 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %82, i64 0, i32 1, i32 0
  %84 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %69, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = bitcast %"class.net::AlternativeServiceInfo"* %14 to i8*
  %86 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %14, i64 0, i32 0, i32 0
  %87 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %14, i64 0, i32 0, i32 2
  %88 = bitcast %"class.std::__1::basic_string"* %87 to i8*
  %89 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %14, i64 0, i32 0, i32 3
  %90 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %14, i64 0, i32 1, i32 0, i32 0
  %91 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %14, i64 0, i32 2
  %92 = bitcast %"class.std::__1::vector"* %91 to i8*
  %93 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %14, i64 0, i32 2, i32 0, i32 0
  %94 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %14, i64 0, i32 2, i32 0, i32 1
  %95 = bitcast %"struct.quic::ParsedQuicVersion"** %94 to i64*
  %96 = bitcast %"class.std::__1::basic_string"* %87 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %97 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %96, i64 0, i32 1, i32 0
  %98 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = bitcast %"class.std::__1::basic_string"* %63 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %100 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %99, i64 0, i32 1, i32 0
  %101 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %13, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %103 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %13, i64 0, i32 0, i32 3
  %104 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %13, i64 0, i32 2
  %105 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %13, i64 0, i32 2, i32 0, i32 1
  %106 = bitcast %"struct.quic::ParsedQuicVersion"** %105 to i64*
  %107 = bitcast %"class.std::__1::vector"* %104 to i64*
  %108 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %104, i64 0, i32 0, i32 0
  %109 = bitcast %"class.net::AlternativeServiceInfo"** %16 to i64*
  %110 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %13, i64 0, i32 2, i32 0, i32 0
  %111 = bitcast %"struct.quic::ParsedQuicVersion"** %32 to <2 x i64>*
  %112 = bitcast %"struct.quic::ParsedQuicVersion"** %27 to <2 x i64>*
  br label %114

113:                                              ; preds = %511, %5
  ret void

114:                                              ; preds = %24, %511
  %115 = phi %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* [ %20, %24 ], [ %512, %511 ]
  %116 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115, i64 0, i32 2
  %117 = load i16, i16* %116, align 8
  %118 = zext i16 %117 to i32
  %119 = call zeroext i1 @_ZN3net11IsPortValidEi(i32 %118) #12
  br i1 %119, label %120, label %511

120:                                              ; preds = %114
  %121 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %122 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %121, i64 0, i32 1, i32 0
  %123 = load i8, i8* %122, align 1
  %124 = icmp slt i8 %123, 0
  %125 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = bitcast %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115 to i8*
  %128 = select i1 %124, i8* %126, i8* %127
  %129 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = zext i8 %123 to i64
  %132 = select i1 %124, i64 %130, i64 %131
  %133 = call i32 @_ZN3net19NextProtoFromStringEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8* %128, i64 %132) #12
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 24, i1 false) #12
  switch i32 %133, label %152 [
    i32 3, label %134
    i32 2, label %292
  ]

134:                                              ; preds = %120
  br i1 %3, label %135, label %502

135:                                              ; preds = %134
  %136 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = load i64, i64* %136, align 8
  %138 = icmp ult i64 %137, 2
  br i1 %138, label %293, label %139

139:                                              ; preds = %135
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #12
  call void @_ZN3net29FilterSupportedAltSvcVersionsERKN4spdy20SpdyAltSvcWireFormat18AlternativeServiceERKNSt3__16vectorIN4quic17ParsedQuicVersionENS5_9allocatorIS8_EEEE(%"class.std::__1::vector"* nonnull sret %9, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* dereferenceable(96) %115, %"class.std::__1::vector"* dereferenceable(24) %4) #12
  %140 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %26, align 8
  %141 = icmp eq %"struct.quic::ParsedQuicVersion"* %140, null
  br i1 %141, label %145, label %142

142:                                              ; preds = %139
  %143 = ptrtoint %"struct.quic::ParsedQuicVersion"* %140 to i64
  store i64 %143, i64* %29, align 8
  %144 = bitcast %"struct.quic::ParsedQuicVersion"* %140 to i8*
  call void @_ZdlPv(i8* %144) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 24, i1 false) #12
  br label %145

145:                                              ; preds = %142, %139
  %146 = load i64, i64* %30, align 8
  store i64 %146, i64* %31, align 8
  %147 = load <2 x i64>, <2 x i64>* %111, align 8
  store <2 x i64> %147, <2 x i64>* %112, align 8
  %148 = inttoptr i64 %146 to %"struct.quic::ParsedQuicVersion"*
  %149 = extractelement <2 x i64> %147, i32 0
  %150 = inttoptr i64 %149 to %"struct.quic::ParsedQuicVersion"*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12
  %151 = icmp eq %"struct.quic::ParsedQuicVersion"* %148, %150
  br i1 %151, label %504, label %293

152:                                              ; preds = %120
  %153 = load i8, i8* %122, align 1
  %154 = icmp slt i8 %153, 0
  %155 = load i8*, i8** %125, align 8
  %156 = select i1 %154, i8* %155, i8* %127
  %157 = load i64, i64* %129, align 8
  %158 = zext i8 %153 to i64
  %159 = select i1 %154, i64 %157, i64 %158
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #12
  %160 = load i64, i64* %35, align 8
  %161 = load i64, i64* %36, align 8
  %162 = sub i64 %160, %161
  %163 = ashr exact i64 %162, 3
  %164 = icmp eq i64 %162, 0
  %165 = inttoptr i64 %161 to %"struct.quic::ParsedQuicVersion"*
  %166 = inttoptr i64 %160 to %"struct.quic::ParsedQuicVersion"*
  br i1 %164, label %286, label %167

167:                                              ; preds = %152
  %168 = icmp ugt i64 %163, 2305843009213693951
  br i1 %168, label %169, label %171

169:                                              ; preds = %167
  %170 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %170) #14
  unreachable

171:                                              ; preds = %167
  %172 = call i8* @_Znwm(i64 %162) #13
  %173 = bitcast i8* %172 to %"struct.quic::ParsedQuicVersion"*
  store i8* %172, i8** %38, align 8
  store i8* %172, i8** %39, align 8
  %174 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %173, i64 %163
  store %"struct.quic::ParsedQuicVersion"* %174, %"struct.quic::ParsedQuicVersion"** %40, align 8
  %175 = ptrtoint i8* %172 to i64
  %176 = icmp eq %"struct.quic::ParsedQuicVersion"* %165, %166
  br i1 %176, label %240, label %177

177:                                              ; preds = %171
  %178 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %166, i64 -1
  %179 = bitcast %"struct.quic::ParsedQuicVersion"* %178 to i8*
  %180 = sub i64 0, %161
  %181 = getelementptr i8, i8* %179, i64 %180
  %182 = ptrtoint i8* %181 to i64
  %183 = lshr i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 3
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %201, label %187

187:                                              ; preds = %177, %187
  %188 = phi %"struct.quic::ParsedQuicVersion"* [ %198, %187 ], [ %173, %177 ]
  %189 = phi %"struct.quic::ParsedQuicVersion"* [ %197, %187 ], [ %165, %177 ]
  %190 = phi i64 [ %199, %187 ], [ %185, %177 ]
  %191 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %189, i64 0, i32 0
  %192 = load i32, i32* %191, align 4
  %193 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %189, i64 0, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %188, i64 0, i32 0
  store i32 %192, i32* %195, align 4
  %196 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %188, i64 0, i32 1
  store i32 %194, i32* %196, align 4
  %197 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %189, i64 1
  %198 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %188, i64 1
  %199 = add i64 %190, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %187, !llvm.loop !10

201:                                              ; preds = %187, %177
  %202 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %177 ], [ %198, %187 ]
  %203 = phi %"struct.quic::ParsedQuicVersion"* [ %173, %177 ], [ %198, %187 ]
  %204 = phi %"struct.quic::ParsedQuicVersion"* [ %165, %177 ], [ %197, %187 ]
  %205 = icmp ult i8* %181, inttoptr (i64 24 to i8*)
  br i1 %205, label %236, label %206

206:                                              ; preds = %201, %206
  %207 = phi %"struct.quic::ParsedQuicVersion"* [ %234, %206 ], [ %203, %201 ]
  %208 = phi %"struct.quic::ParsedQuicVersion"* [ %233, %206 ], [ %204, %201 ]
  %209 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %208, i64 0, i32 0
  %210 = load i32, i32* %209, align 4
  %211 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %208, i64 0, i32 1
  %212 = load i32, i32* %211, align 4
  %213 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %207, i64 0, i32 0
  store i32 %210, i32* %213, align 4
  %214 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %207, i64 0, i32 1
  store i32 %212, i32* %214, align 4
  %215 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %208, i64 1, i32 0
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %208, i64 1, i32 1
  %218 = load i32, i32* %217, align 4
  %219 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %207, i64 1, i32 0
  store i32 %216, i32* %219, align 4
  %220 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %207, i64 1, i32 1
  store i32 %218, i32* %220, align 4
  %221 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %208, i64 2, i32 0
  %222 = load i32, i32* %221, align 4
  %223 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %208, i64 2, i32 1
  %224 = load i32, i32* %223, align 4
  %225 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %207, i64 2, i32 0
  store i32 %222, i32* %225, align 4
  %226 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %207, i64 2, i32 1
  store i32 %224, i32* %226, align 4
  %227 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %208, i64 3, i32 0
  %228 = load i32, i32* %227, align 4
  %229 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %208, i64 3, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %207, i64 3, i32 0
  store i32 %228, i32* %231, align 4
  %232 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %207, i64 3, i32 1
  store i32 %230, i32* %232, align 4
  %233 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %208, i64 4
  %234 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %207, i64 4
  %235 = icmp eq %"struct.quic::ParsedQuicVersion"* %233, %166
  br i1 %235, label %236, label %206

236:                                              ; preds = %206, %201
  %237 = phi %"struct.quic::ParsedQuicVersion"* [ %202, %201 ], [ %234, %206 ]
  %238 = ptrtoint %"struct.quic::ParsedQuicVersion"* %237 to i64
  %239 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %43, align 8
  br label %240

240:                                              ; preds = %171, %236
  %241 = phi %"struct.quic::ParsedQuicVersion"* [ %173, %171 ], [ %239, %236 ]
  %242 = phi i64 [ %175, %171 ], [ %238, %236 ]
  store i64 %242, i64* %41, align 8
  %243 = inttoptr i64 %242 to %"struct.quic::ParsedQuicVersion"*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %244 = icmp eq %"struct.quic::ParsedQuicVersion"* %241, %243
  br i1 %244, label %278, label %247

245:                                              ; preds = %267
  %246 = icmp eq %"struct.quic::ParsedQuicVersion"* %268, %243
  br i1 %246, label %274, label %247

247:                                              ; preds = %240, %245
  %248 = phi %"struct.quic::ParsedQuicVersion"* [ %268, %245 ], [ %241, %240 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #12, !noalias !11
  %249 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %248, i64 0, i32 0
  %250 = load i32, i32* %249, align 4, !noalias !11
  %251 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %248, i64 0, i32 1
  %252 = load i32, i32* %251, align 4, !noalias !11
  store i32 %250, i32* %45, align 4, !noalias !11
  store i32 %252, i32* %46, align 4, !noalias !11
  call void @_ZN4quic14AlpnForVersionENS_17ParsedQuicVersionE(%"class.std::__1::basic_string"* nonnull sret %6, %"struct.quic::ParsedQuicVersion"* nonnull %7) #12, !noalias !11
  %253 = load i8, i8* %48, align 1, !noalias !11
  %254 = icmp slt i8 %253, 0
  %255 = load i8*, i8** %49, align 8, !noalias !11
  %256 = load i64, i64* %50, align 8, !noalias !11
  %257 = zext i8 %253 to i64
  %258 = select i1 %254, i64 %256, i64 %257
  %259 = icmp eq i64 %258, %159
  br i1 %259, label %260, label %264

260:                                              ; preds = %247
  %261 = select i1 %254, i8* %255, i8* %44
  %262 = call i32 @bcmp(i8* %261, i8* %156, i64 %159) #12, !noalias !11
  %263 = icmp eq i32 %262, 0
  br label %264

264:                                              ; preds = %260, %247
  %265 = phi i1 [ false, %247 ], [ %263, %260 ]
  br i1 %254, label %266, label %267

266:                                              ; preds = %264
  call void @_ZdlPv(i8* %255) #13, !noalias !11
  br label %267

267:                                              ; preds = %266, %264
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #12, !noalias !11
  %268 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %248, i64 1
  br i1 %265, label %269, label %245

269:                                              ; preds = %267
  %270 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %248, i64 0, i32 0
  %271 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %248, i64 0, i32 1
  %272 = load i32, i32* %270, align 4, !noalias !11
  %273 = load i32, i32* %271, align 4, !noalias !11
  br label %274

274:                                              ; preds = %245, %269
  %275 = phi i32 [ %272, %269 ], [ 0, %245 ]
  %276 = phi i32 [ %273, %269 ], [ 0, %245 ]
  %277 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %43, align 8
  br label %278

278:                                              ; preds = %274, %240
  %279 = phi %"struct.quic::ParsedQuicVersion"* [ %277, %274 ], [ %243, %240 ]
  %280 = phi i32 [ %275, %274 ], [ 0, %240 ]
  %281 = phi i32 [ %276, %274 ], [ 0, %240 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  %282 = icmp eq %"struct.quic::ParsedQuicVersion"* %279, null
  br i1 %282, label %286, label %283

283:                                              ; preds = %278
  %284 = ptrtoint %"struct.quic::ParsedQuicVersion"* %279 to i64
  store i64 %284, i64* %41, align 8
  %285 = bitcast %"struct.quic::ParsedQuicVersion"* %279 to i8*
  call void @_ZdlPv(i8* %285) #13
  br label %286

286:                                              ; preds = %152, %278, %283
  %287 = phi i32 [ %281, %278 ], [ %281, %283 ], [ 0, %152 ]
  %288 = phi i32 [ %280, %278 ], [ %280, %283 ], [ 0, %152 ]
  %289 = or i32 %287, %288
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %502, label %291

291:                                              ; preds = %286
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #12
  store i32 %288, i32* %53, align 4
  store i32 %287, i32* %54, align 4
  call void @_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector"* nonnull %8, %"struct.quic::ParsedQuicVersion"* nonnull %52, %"struct.quic::ParsedQuicVersion"* %55) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #12
  br i1 %3, label %293, label %502

292:                                              ; preds = %120
  br i1 %2, label %293, label %502

293:                                              ; preds = %145, %135, %291, %292
  %294 = phi i32 [ 3, %291 ], [ 2, %292 ], [ 3, %135 ], [ 3, %145 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %56) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 -86, i64 40, i1 false)
  %295 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115, i64 0, i32 1
  %296 = load i16, i16* %116, align 8
  store i32 %294, i32* %57, align 8
  %297 = bitcast %"class.std::__1::basic_string"* %295 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %298 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %297, i64 0, i32 1, i32 0
  %299 = load i8, i8* %298, align 1
  %300 = icmp slt i8 %299, 0
  br i1 %300, label %303, label %301

301:                                              ; preds = %293
  %302 = bitcast %"class.std::__1::basic_string"* %295 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %302, i64 24, i1 false) #12
  br label %308

303:                                              ; preds = %293
  %304 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %295, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %305 = load i8*, i8** %304, align 8
  %306 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %307 = load i64, i64* %306, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %58, i8* %305, i64 %307) #12
  br label %308

308:                                              ; preds = %301, %303
  store i16 %296, i16* %60, align 8
  %309 = call i64 @_ZN4base4Time3NowEv() #12
  %310 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115, i64 0, i32 3
  %311 = load i32, i32* %310, align 4
  %312 = zext i32 %311 to i64
  %313 = mul nuw nsw i64 %312, 1000000
  %314 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %309, i64 %313) #12
  %315 = extractvalue { i64, i1 } %314, 1
  %316 = extractvalue { i64, i1 } %314, 0
  %317 = select i1 %315, i64 9223372036854775807, i64 %316, !prof !14
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %61) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %61, i8 -86, i64 40, i1 false)
  store i32 0, i32* %62, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 26, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 32, i1 false) #12
  %318 = icmp eq i32 %294, 3
  br i1 %318, label %319, label %347

319:                                              ; preds = %308
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %85) #12
  %320 = load i32, i32* %57, align 8, !noalias !15
  store i32 %320, i32* %86, align 8, !alias.scope !15
  %321 = load i8, i8* %71, align 1, !noalias !15
  %322 = icmp slt i8 %321, 0
  br i1 %322, label %324, label %323

323:                                              ; preds = %319
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %59, i64 24, i1 false) #12
  br label %328

324:                                              ; preds = %319
  %325 = load i8*, i8** %73, align 8, !noalias !15
  %326 = load i64, i64* %74, align 8, !noalias !15
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %87, i8* %325, i64 %326) #12
  %327 = load i32, i32* %86, align 8, !alias.scope !15
  br label %328

328:                                              ; preds = %324, %323
  %329 = phi i32 [ %320, %323 ], [ %327, %324 ]
  %330 = load i16, i16* %60, align 8, !noalias !15
  store i16 %330, i16* %89, align 8, !alias.scope !15
  store i64 %317, i64* %90, align 8, !alias.scope !15
  call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 24, i1 false) #12, !alias.scope !15
  %331 = icmp eq i32 %329, 3
  br i1 %331, label %332, label %335

332:                                              ; preds = %328
  %333 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %26, align 8, !noalias !15
  %334 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %27, align 8, !noalias !15
  call void @_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %91, %"struct.quic::ParsedQuicVersion"* %333, %"struct.quic::ParsedQuicVersion"* %334) #12
  br label %335

335:                                              ; preds = %328, %332
  %336 = call dereferenceable(72) %"class.net::AlternativeServiceInfo"* @_ZN3net22AlternativeServiceInfoaSERKS0_(%"class.net::AlternativeServiceInfo"* nonnull %13, %"class.net::AlternativeServiceInfo"* nonnull dereferenceable(72) %14)
  %337 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %93, align 8
  %338 = icmp eq %"struct.quic::ParsedQuicVersion"* %337, null
  br i1 %338, label %342, label %339

339:                                              ; preds = %335
  %340 = ptrtoint %"struct.quic::ParsedQuicVersion"* %337 to i64
  store i64 %340, i64* %95, align 8
  %341 = bitcast %"struct.quic::ParsedQuicVersion"* %337 to i8*
  call void @_ZdlPv(i8* %341) #13
  br label %342

342:                                              ; preds = %339, %335
  %343 = load i8, i8* %97, align 1
  %344 = icmp slt i8 %343, 0
  br i1 %344, label %345, label %373

345:                                              ; preds = %342
  %346 = load i8*, i8** %98, align 8
  call void @_ZdlPv(i8* %346) #13
  br label %373

347:                                              ; preds = %308
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %67) #12
  %348 = load i32, i32* %57, align 8, !noalias !18
  store i32 %348, i32* %68, align 8, !alias.scope !18
  %349 = load i8, i8* %71, align 1, !noalias !18
  %350 = icmp slt i8 %349, 0
  br i1 %350, label %352, label %351

351:                                              ; preds = %347
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %59, i64 24, i1 false) #12
  br label %356

352:                                              ; preds = %347
  %353 = load i8*, i8** %73, align 8, !noalias !18
  %354 = load i64, i64* %74, align 8, !noalias !18
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %69, i8* %353, i64 %354) #12
  %355 = load i32, i32* %68, align 8, !alias.scope !18
  br label %356

356:                                              ; preds = %352, %351
  %357 = phi i32 [ %348, %351 ], [ %355, %352 ]
  %358 = load i16, i16* %60, align 8, !noalias !18
  store i16 %358, i16* %75, align 8, !alias.scope !18
  store i64 %317, i64* %76, align 8, !alias.scope !18
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 24, i1 false) #12, !alias.scope !18
  %359 = icmp eq i32 %357, 3
  br i1 %359, label %360, label %361

360:                                              ; preds = %356
  call void @_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %77, %"struct.quic::ParsedQuicVersion"* null, %"struct.quic::ParsedQuicVersion"* null) #12
  br label %361

361:                                              ; preds = %356, %360
  %362 = call dereferenceable(72) %"class.net::AlternativeServiceInfo"* @_ZN3net22AlternativeServiceInfoaSERKS0_(%"class.net::AlternativeServiceInfo"* nonnull %13, %"class.net::AlternativeServiceInfo"* nonnull dereferenceable(72) %15)
  %363 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %79, align 8
  %364 = icmp eq %"struct.quic::ParsedQuicVersion"* %363, null
  br i1 %364, label %368, label %365

365:                                              ; preds = %361
  %366 = ptrtoint %"struct.quic::ParsedQuicVersion"* %363 to i64
  store i64 %366, i64* %81, align 8
  %367 = bitcast %"struct.quic::ParsedQuicVersion"* %363 to i8*
  call void @_ZdlPv(i8* %367) #13
  br label %368

368:                                              ; preds = %365, %361
  %369 = load i8, i8* %83, align 1
  %370 = icmp slt i8 %369, 0
  br i1 %370, label %371, label %373

371:                                              ; preds = %368
  %372 = load i8*, i8** %84, align 8
  call void @_ZdlPv(i8* %372) #13
  br label %373

373:                                              ; preds = %371, %368, %345, %342
  %374 = phi i8* [ %85, %342 ], [ %85, %345 ], [ %67, %368 ], [ %67, %371 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %374) #12
  %375 = load %"class.net::AlternativeServiceInfo"*, %"class.net::AlternativeServiceInfo"** %16, align 8
  %376 = load %"class.net::AlternativeServiceInfo"*, %"class.net::AlternativeServiceInfo"** %17, align 8
  %377 = icmp eq %"class.net::AlternativeServiceInfo"* %375, %376
  br i1 %377, label %484, label %378

378:                                              ; preds = %373
  %379 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %375, i64 0, i32 0, i32 0
  %380 = load i32, i32* %62, align 8
  store i32 %380, i32* %379, align 8
  %381 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %375, i64 0, i32 0, i32 2
  %382 = load i8, i8* %100, align 1
  %383 = icmp slt i8 %382, 0
  br i1 %383, label %386, label %384

384:                                              ; preds = %378
  %385 = bitcast %"class.std::__1::basic_string"* %381 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %385, i8* align 8 %64, i64 24, i1 false) #12
  br label %389

386:                                              ; preds = %378
  %387 = load i8*, i8** %101, align 8
  %388 = load i64, i64* %102, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %381, i8* %387, i64 %388) #12
  br label %389

389:                                              ; preds = %386, %384
  %390 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %375, i64 0, i32 0, i32 3
  %391 = load i16, i16* %103, align 8
  store i16 %391, i16* %390, align 8
  %392 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %375, i64 0, i32 1, i32 0, i32 0
  %393 = load i64, i64* %65, align 8
  store i64 %393, i64* %392, align 8
  %394 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %375, i64 0, i32 2
  %395 = bitcast %"class.std::__1::vector"* %394 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %395, i8 0, i64 24, i1 false) #12
  %396 = load i64, i64* %106, align 8
  %397 = load i64, i64* %107, align 8
  %398 = sub i64 %396, %397
  %399 = ashr exact i64 %398, 3
  %400 = icmp eq i64 %398, 0
  br i1 %400, label %481, label %401

401:                                              ; preds = %389
  %402 = icmp ugt i64 %399, 2305843009213693951
  br i1 %402, label %403, label %405

403:                                              ; preds = %401
  %404 = bitcast %"class.std::__1::vector"* %394 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %404) #14
  unreachable

405:                                              ; preds = %401
  %406 = call i8* @_Znwm(i64 %398) #13
  %407 = bitcast i8* %406 to %"struct.quic::ParsedQuicVersion"*
  %408 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %375, i64 0, i32 2, i32 0, i32 1
  %409 = bitcast %"struct.quic::ParsedQuicVersion"** %408 to i8**
  store i8* %406, i8** %409, align 8
  %410 = bitcast %"class.std::__1::vector"* %394 to i8**
  store i8* %406, i8** %410, align 8
  %411 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %407, i64 %399
  %412 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %375, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store %"struct.quic::ParsedQuicVersion"* %411, %"struct.quic::ParsedQuicVersion"** %412, align 8
  %413 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %108, align 8
  %414 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %105, align 8
  %415 = bitcast %"struct.quic::ParsedQuicVersion"** %408 to i64*
  %416 = ptrtoint i8* %406 to i64
  %417 = icmp eq %"struct.quic::ParsedQuicVersion"* %413, %414
  br i1 %417, label %479, label %418

418:                                              ; preds = %405
  %419 = ptrtoint %"struct.quic::ParsedQuicVersion"* %413 to i64
  %420 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %414, i64 -1
  %421 = ptrtoint %"struct.quic::ParsedQuicVersion"* %420 to i64
  %422 = sub i64 %421, %419
  %423 = lshr i64 %422, 3
  %424 = add nuw nsw i64 %423, 1
  %425 = and i64 %424, 3
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %441, label %427

427:                                              ; preds = %418, %427
  %428 = phi %"struct.quic::ParsedQuicVersion"* [ %438, %427 ], [ %407, %418 ]
  %429 = phi %"struct.quic::ParsedQuicVersion"* [ %437, %427 ], [ %413, %418 ]
  %430 = phi i64 [ %439, %427 ], [ %425, %418 ]
  %431 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %429, i64 0, i32 0
  %432 = load i32, i32* %431, align 4
  %433 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %429, i64 0, i32 1
  %434 = load i32, i32* %433, align 4
  %435 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %428, i64 0, i32 0
  store i32 %432, i32* %435, align 4
  %436 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %428, i64 0, i32 1
  store i32 %434, i32* %436, align 4
  %437 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %429, i64 1
  %438 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %428, i64 1
  %439 = add i64 %430, -1
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %441, label %427, !llvm.loop !21

441:                                              ; preds = %427, %418
  %442 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %418 ], [ %438, %427 ]
  %443 = phi %"struct.quic::ParsedQuicVersion"* [ %407, %418 ], [ %438, %427 ]
  %444 = phi %"struct.quic::ParsedQuicVersion"* [ %413, %418 ], [ %437, %427 ]
  %445 = icmp ult i64 %422, 24
  br i1 %445, label %476, label %446

446:                                              ; preds = %441, %446
  %447 = phi %"struct.quic::ParsedQuicVersion"* [ %474, %446 ], [ %443, %441 ]
  %448 = phi %"struct.quic::ParsedQuicVersion"* [ %473, %446 ], [ %444, %441 ]
  %449 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %448, i64 0, i32 0
  %450 = load i32, i32* %449, align 4
  %451 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %448, i64 0, i32 1
  %452 = load i32, i32* %451, align 4
  %453 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %447, i64 0, i32 0
  store i32 %450, i32* %453, align 4
  %454 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %447, i64 0, i32 1
  store i32 %452, i32* %454, align 4
  %455 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %448, i64 1, i32 0
  %456 = load i32, i32* %455, align 4
  %457 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %448, i64 1, i32 1
  %458 = load i32, i32* %457, align 4
  %459 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %447, i64 1, i32 0
  store i32 %456, i32* %459, align 4
  %460 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %447, i64 1, i32 1
  store i32 %458, i32* %460, align 4
  %461 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %448, i64 2, i32 0
  %462 = load i32, i32* %461, align 4
  %463 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %448, i64 2, i32 1
  %464 = load i32, i32* %463, align 4
  %465 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %447, i64 2, i32 0
  store i32 %462, i32* %465, align 4
  %466 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %447, i64 2, i32 1
  store i32 %464, i32* %466, align 4
  %467 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %448, i64 3, i32 0
  %468 = load i32, i32* %467, align 4
  %469 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %448, i64 3, i32 1
  %470 = load i32, i32* %469, align 4
  %471 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %447, i64 3, i32 0
  store i32 %468, i32* %471, align 4
  %472 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %447, i64 3, i32 1
  store i32 %470, i32* %472, align 4
  %473 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %448, i64 4
  %474 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %447, i64 4
  %475 = icmp eq %"struct.quic::ParsedQuicVersion"* %473, %414
  br i1 %475, label %476, label %446

476:                                              ; preds = %446, %441
  %477 = phi %"struct.quic::ParsedQuicVersion"* [ %442, %441 ], [ %474, %446 ]
  %478 = ptrtoint %"struct.quic::ParsedQuicVersion"* %477 to i64
  br label %479

479:                                              ; preds = %476, %405
  %480 = phi i64 [ %416, %405 ], [ %478, %476 ]
  store i64 %480, i64* %415, align 8
  br label %481

481:                                              ; preds = %389, %479
  %482 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %375, i64 1
  %483 = ptrtoint %"class.net::AlternativeServiceInfo"* %482 to i64
  store i64 %483, i64* %109, align 8
  br label %485

484:                                              ; preds = %373
  call void @_ZNSt3__16vectorIN3net22AlternativeServiceInfoENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.22"* %0, %"class.net::AlternativeServiceInfo"* nonnull dereferenceable(72) %13) #12
  br label %485

485:                                              ; preds = %481, %484
  %486 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %110, align 8
  %487 = icmp eq %"struct.quic::ParsedQuicVersion"* %486, null
  br i1 %487, label %491, label %488

488:                                              ; preds = %485
  %489 = ptrtoint %"struct.quic::ParsedQuicVersion"* %486 to i64
  store i64 %489, i64* %106, align 8
  %490 = bitcast %"struct.quic::ParsedQuicVersion"* %486 to i8*
  call void @_ZdlPv(i8* %490) #13
  br label %491

491:                                              ; preds = %488, %485
  %492 = load i8, i8* %100, align 1
  %493 = icmp slt i8 %492, 0
  br i1 %493, label %494, label %496

494:                                              ; preds = %491
  %495 = load i8*, i8** %101, align 8
  call void @_ZdlPv(i8* %495) #13
  br label %496

496:                                              ; preds = %491, %494
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %61) #12
  %497 = load i8, i8* %71, align 1
  %498 = icmp slt i8 %497, 0
  br i1 %498, label %499, label %501

499:                                              ; preds = %496
  %500 = load i8*, i8** %73, align 8
  call void @_ZdlPv(i8* %500) #13
  br label %501

501:                                              ; preds = %496, %499
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %56) #12
  br label %502

502:                                              ; preds = %286, %501, %134, %292, %291
  %503 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %26, align 8
  br label %504

504:                                              ; preds = %502, %145
  %505 = phi %"struct.quic::ParsedQuicVersion"* [ %503, %502 ], [ %148, %145 ]
  %506 = icmp eq %"struct.quic::ParsedQuicVersion"* %505, null
  br i1 %506, label %510, label %507

507:                                              ; preds = %504
  %508 = ptrtoint %"struct.quic::ParsedQuicVersion"* %505 to i64
  store i64 %508, i64* %29, align 8
  %509 = bitcast %"struct.quic::ParsedQuicVersion"* %505 to i8*
  call void @_ZdlPv(i8* %509) #13
  br label %510

510:                                              ; preds = %504, %507
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #12
  br label %511

511:                                              ; preds = %510, %114
  %512 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %115, i64 1
  %513 = icmp eq %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %512, %22
  br i1 %513, label %113, label %114
}

declare zeroext i1 @_ZN3net11IsPortValidEi(i32) local_unnamed_addr #2

declare i32 @_ZN3net19NextProtoFromStringEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8*, i64) local_unnamed_addr #2

declare void @_ZN3net29FilterSupportedAltSvcVersionsERKN4spdy20SpdyAltSvcWireFormat18AlternativeServiceERKNSt3__16vectorIN4quic17ParsedQuicVersionENS5_9allocatorIS8_EEEE(%"class.std::__1::vector"* sret, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* dereferenceable(96), %"class.std::__1::vector"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @_ZN4base4Time3NowEv() local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare void @_ZNK4base4Time7ExplodeEbPNS0_8ExplodedE(%"class.base::Time"*, i1 zeroext, %"struct.base::Time::Exploded"*) local_unnamed_addr #2

declare void @_ZN4quic14AlpnForVersionENS_17ParsedQuicVersionE(%"class.std::__1::basic_string"* sret, %"struct.quic::ParsedQuicVersion"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #12
  %7 = load i8, i8* %6, align 8, !range !22
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #12
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #12
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #12
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #12
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #12
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #13
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #12
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #12
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #13
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #12
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #7

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"*, %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.quic::ParsedQuicVersion"* %1 to i64
  %5 = ptrtoint %"struct.quic::ParsedQuicVersion"* %2 to i64
  %6 = sub i64 %5, %4
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.quic::ParsedQuicVersion"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.quic::ParsedQuicVersion"*
  br i1 %15, label %133, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.quic::ParsedQuicVersion"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %1, i64 %22
  %25 = select i1 %23, %"struct.quic::ParsedQuicVersion"* %24, %"struct.quic::ParsedQuicVersion"* %2
  %26 = icmp eq %"struct.quic::ParsedQuicVersion"* %25, %1
  br i1 %26, label %63, label %27

27:                                               ; preds = %17
  %28 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %25, i64 -1, i32 0
  %29 = ptrtoint i32* %28 to i64
  %30 = sub i64 %29, %4
  %31 = and i64 %30, 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %27
  %34 = icmp eq %"struct.quic::ParsedQuicVersion"* %16, %1
  br i1 %34, label %42, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %1, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %16, i64 0, i32 0
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %1, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %16, i64 0, i32 1
  store i32 %40, i32* %41, align 4
  br label %42

42:                                               ; preds = %35, %33
  %43 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %1, i64 1
  %44 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %16, i64 1
  br label %45

45:                                               ; preds = %42, %27
  %46 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %27 ], [ %44, %42 ]
  %47 = phi %"struct.quic::ParsedQuicVersion"* [ %16, %27 ], [ %44, %42 ]
  %48 = phi %"struct.quic::ParsedQuicVersion"* [ %1, %27 ], [ %43, %42 ]
  %49 = icmp ult i64 %30, 8
  br i1 %49, label %63, label %50

50:                                               ; preds = %45, %237
  %51 = phi %"struct.quic::ParsedQuicVersion"* [ %239, %237 ], [ %47, %45 ]
  %52 = phi %"struct.quic::ParsedQuicVersion"* [ %238, %237 ], [ %48, %45 ]
  %53 = icmp eq %"struct.quic::ParsedQuicVersion"* %51, %52
  br i1 %53, label %61, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 0, i32 0
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 0, i32 1
  store i32 %59, i32* %60, align 4
  br label %61

61:                                               ; preds = %54, %50
  %62 = icmp eq %"struct.quic::ParsedQuicVersion"* %51, %52
  br i1 %62, label %237, label %230

63:                                               ; preds = %45, %237, %17
  %64 = phi %"struct.quic::ParsedQuicVersion"* [ %16, %17 ], [ %46, %45 ], [ %239, %237 ]
  br i1 %23, label %65, label %132

65:                                               ; preds = %63
  %66 = load i64, i64* %19, align 8
  %67 = icmp eq %"struct.quic::ParsedQuicVersion"* %25, %2
  br i1 %67, label %130, label %68

68:                                               ; preds = %65
  %69 = inttoptr i64 %66 to %"struct.quic::ParsedQuicVersion"*
  %70 = xor i64 %22, -1
  %71 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %2, i64 %70, i32 0
  %72 = ptrtoint i32* %71 to i64
  %73 = sub i64 %72, %4
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 3
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %92, label %78

78:                                               ; preds = %68, %78
  %79 = phi %"struct.quic::ParsedQuicVersion"* [ %89, %78 ], [ %69, %68 ]
  %80 = phi %"struct.quic::ParsedQuicVersion"* [ %88, %78 ], [ %24, %68 ]
  %81 = phi i64 [ %90, %78 ], [ %76, %68 ]
  %82 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %80, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %80, i64 0, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %79, i64 0, i32 0
  store i32 %83, i32* %86, align 4
  %87 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %79, i64 0, i32 1
  store i32 %85, i32* %87, align 4
  %88 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %80, i64 1
  %89 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %79, i64 1
  %90 = add i64 %81, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %78, !llvm.loop !23

92:                                               ; preds = %78, %68
  %93 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %68 ], [ %89, %78 ]
  %94 = phi %"struct.quic::ParsedQuicVersion"* [ %69, %68 ], [ %89, %78 ]
  %95 = phi %"struct.quic::ParsedQuicVersion"* [ %24, %68 ], [ %88, %78 ]
  %96 = icmp ult i64 %73, 24
  br i1 %96, label %127, label %97

97:                                               ; preds = %92, %97
  %98 = phi %"struct.quic::ParsedQuicVersion"* [ %125, %97 ], [ %94, %92 ]
  %99 = phi %"struct.quic::ParsedQuicVersion"* [ %124, %97 ], [ %95, %92 ]
  %100 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 0, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 0, i32 0
  store i32 %101, i32* %104, align 4
  %105 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 0, i32 1
  store i32 %103, i32* %105, align 4
  %106 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 1, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 1, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 1, i32 0
  store i32 %107, i32* %110, align 4
  %111 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 1, i32 1
  store i32 %109, i32* %111, align 4
  %112 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 2, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 2, i32 1
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 2, i32 0
  store i32 %113, i32* %116, align 4
  %117 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 2, i32 1
  store i32 %115, i32* %117, align 4
  %118 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 3, i32 0
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 3, i32 1
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 3, i32 0
  store i32 %119, i32* %122, align 4
  %123 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 3, i32 1
  store i32 %121, i32* %123, align 4
  %124 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 4
  %125 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 4
  %126 = icmp eq %"struct.quic::ParsedQuicVersion"* %124, %2
  br i1 %126, label %127, label %97

127:                                              ; preds = %97, %92
  %128 = phi %"struct.quic::ParsedQuicVersion"* [ %93, %92 ], [ %125, %97 ]
  %129 = ptrtoint %"struct.quic::ParsedQuicVersion"* %128 to i64
  br label %130

130:                                              ; preds = %65, %127
  %131 = phi i64 [ %66, %65 ], [ %129, %127 ]
  store i64 %131, i64* %19, align 8
  br label %229

132:                                              ; preds = %63
  store %"struct.quic::ParsedQuicVersion"* %64, %"struct.quic::ParsedQuicVersion"** %18, align 8
  br label %229

133:                                              ; preds = %3
  %134 = icmp eq i64 %12, 0
  br i1 %134, label %140, label %135

135:                                              ; preds = %133
  %136 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %137 = bitcast %"struct.quic::ParsedQuicVersion"** %136 to i64*
  store i64 %12, i64* %137, align 8
  %138 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %138) #13
  %139 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 24, i1 false) #12
  br label %140

140:                                              ; preds = %133, %135
  %141 = phi i64 [ %10, %133 ], [ 0, %135 ]
  %142 = icmp ugt i64 %7, 2305843009213693951
  br i1 %142, label %143, label %145

143:                                              ; preds = %140
  %144 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %144) #14
  unreachable

145:                                              ; preds = %140
  %146 = ashr exact i64 %141, 3
  %147 = icmp ult i64 %146, 1152921504606846975
  br i1 %147, label %148, label %155

148:                                              ; preds = %145
  %149 = ashr exact i64 %141, 2
  %150 = icmp ult i64 %149, %7
  br i1 %150, label %155, label %151

151:                                              ; preds = %148
  %152 = icmp ugt i64 %149, 2305843009213693951
  br i1 %152, label %153, label %155

153:                                              ; preds = %151
  %154 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %154) #14
  unreachable

155:                                              ; preds = %148, %145, %151
  %156 = phi i64 [ %149, %151 ], [ 2305843009213693951, %145 ], [ %7, %148 ]
  %157 = shl i64 %156, 3
  %158 = tail call i8* @_Znwm(i64 %157) #13
  %159 = bitcast i8* %158 to %"struct.quic::ParsedQuicVersion"*
  %160 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %161 = bitcast %"struct.quic::ParsedQuicVersion"** %160 to i8**
  store i8* %158, i8** %161, align 8
  %162 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %158, i8** %162, align 8
  %163 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %159, i64 %156
  store %"struct.quic::ParsedQuicVersion"* %163, %"struct.quic::ParsedQuicVersion"** %8, align 8
  %164 = bitcast %"struct.quic::ParsedQuicVersion"** %160 to i64*
  %165 = ptrtoint i8* %158 to i64
  %166 = icmp eq %"struct.quic::ParsedQuicVersion"* %1, %2
  br i1 %166, label %227, label %167

167:                                              ; preds = %155
  %168 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %2, i64 -1, i32 0
  %169 = ptrtoint i32* %168 to i64
  %170 = sub i64 %169, %4
  %171 = lshr i64 %170, 3
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %189, label %175

175:                                              ; preds = %167, %175
  %176 = phi %"struct.quic::ParsedQuicVersion"* [ %186, %175 ], [ %159, %167 ]
  %177 = phi %"struct.quic::ParsedQuicVersion"* [ %185, %175 ], [ %1, %167 ]
  %178 = phi i64 [ %187, %175 ], [ %173, %167 ]
  %179 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %177, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %177, i64 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %176, i64 0, i32 0
  store i32 %180, i32* %183, align 4
  %184 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %176, i64 0, i32 1
  store i32 %182, i32* %184, align 4
  %185 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %177, i64 1
  %186 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %176, i64 1
  %187 = add i64 %178, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %175, !llvm.loop !24

189:                                              ; preds = %175, %167
  %190 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %167 ], [ %186, %175 ]
  %191 = phi %"struct.quic::ParsedQuicVersion"* [ %159, %167 ], [ %186, %175 ]
  %192 = phi %"struct.quic::ParsedQuicVersion"* [ %1, %167 ], [ %185, %175 ]
  %193 = icmp ult i64 %170, 24
  br i1 %193, label %224, label %194

194:                                              ; preds = %189, %194
  %195 = phi %"struct.quic::ParsedQuicVersion"* [ %222, %194 ], [ %191, %189 ]
  %196 = phi %"struct.quic::ParsedQuicVersion"* [ %221, %194 ], [ %192, %189 ]
  %197 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  %199 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 0, i32 1
  %200 = load i32, i32* %199, align 4
  %201 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 0, i32 0
  store i32 %198, i32* %201, align 4
  %202 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 0, i32 1
  store i32 %200, i32* %202, align 4
  %203 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 1, i32 0
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 1, i32 1
  %206 = load i32, i32* %205, align 4
  %207 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 1, i32 0
  store i32 %204, i32* %207, align 4
  %208 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 1, i32 1
  store i32 %206, i32* %208, align 4
  %209 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 2, i32 0
  %210 = load i32, i32* %209, align 4
  %211 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 2, i32 1
  %212 = load i32, i32* %211, align 4
  %213 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 2, i32 0
  store i32 %210, i32* %213, align 4
  %214 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 2, i32 1
  store i32 %212, i32* %214, align 4
  %215 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 3, i32 0
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 3, i32 1
  %218 = load i32, i32* %217, align 4
  %219 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 3, i32 0
  store i32 %216, i32* %219, align 4
  %220 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 3, i32 1
  store i32 %218, i32* %220, align 4
  %221 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 4
  %222 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 4
  %223 = icmp eq %"struct.quic::ParsedQuicVersion"* %221, %2
  br i1 %223, label %224, label %194

224:                                              ; preds = %194, %189
  %225 = phi %"struct.quic::ParsedQuicVersion"* [ %190, %189 ], [ %222, %194 ]
  %226 = ptrtoint %"struct.quic::ParsedQuicVersion"* %225 to i64
  br label %227

227:                                              ; preds = %155, %224
  %228 = phi i64 [ %165, %155 ], [ %226, %224 ]
  store i64 %228, i64* %164, align 8
  br label %229

229:                                              ; preds = %130, %132, %227
  ret void

230:                                              ; preds = %61
  %231 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 1, i32 0
  %232 = load i32, i32* %231, align 4
  %233 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 1, i32 0
  store i32 %232, i32* %233, align 4
  %234 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 1, i32 1
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 1, i32 1
  store i32 %235, i32* %236, align 4
  br label %237

237:                                              ; preds = %230, %61
  %238 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 2
  %239 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 2
  %240 = icmp eq %"struct.quic::ParsedQuicVersion"* %238, %25
  br i1 %240, label %63, label %50
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4quic17ParsedQuicVersionENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector"*, %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.quic::ParsedQuicVersion"* %1 to i64
  %5 = ptrtoint %"struct.quic::ParsedQuicVersion"* %2 to i64
  %6 = sub i64 %5, %4
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.quic::ParsedQuicVersion"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.quic::ParsedQuicVersion"*
  br i1 %15, label %133, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.quic::ParsedQuicVersion"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %1, i64 %22
  %25 = select i1 %23, %"struct.quic::ParsedQuicVersion"* %24, %"struct.quic::ParsedQuicVersion"* %2
  %26 = icmp eq %"struct.quic::ParsedQuicVersion"* %25, %1
  br i1 %26, label %63, label %27

27:                                               ; preds = %17
  %28 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %25, i64 -1, i32 0
  %29 = ptrtoint i32* %28 to i64
  %30 = sub i64 %29, %4
  %31 = and i64 %30, 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %27
  %34 = icmp eq %"struct.quic::ParsedQuicVersion"* %16, %1
  br i1 %34, label %42, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %1, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %16, i64 0, i32 0
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %1, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %16, i64 0, i32 1
  store i32 %40, i32* %41, align 4
  br label %42

42:                                               ; preds = %35, %33
  %43 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %1, i64 1
  %44 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %16, i64 1
  br label %45

45:                                               ; preds = %42, %27
  %46 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %27 ], [ %44, %42 ]
  %47 = phi %"struct.quic::ParsedQuicVersion"* [ %16, %27 ], [ %44, %42 ]
  %48 = phi %"struct.quic::ParsedQuicVersion"* [ %1, %27 ], [ %43, %42 ]
  %49 = icmp ult i64 %30, 8
  br i1 %49, label %63, label %50

50:                                               ; preds = %45, %237
  %51 = phi %"struct.quic::ParsedQuicVersion"* [ %239, %237 ], [ %47, %45 ]
  %52 = phi %"struct.quic::ParsedQuicVersion"* [ %238, %237 ], [ %48, %45 ]
  %53 = icmp eq %"struct.quic::ParsedQuicVersion"* %51, %52
  br i1 %53, label %61, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 0, i32 0
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 0, i32 1
  store i32 %59, i32* %60, align 4
  br label %61

61:                                               ; preds = %54, %50
  %62 = icmp eq %"struct.quic::ParsedQuicVersion"* %51, %52
  br i1 %62, label %237, label %230

63:                                               ; preds = %45, %237, %17
  %64 = phi %"struct.quic::ParsedQuicVersion"* [ %16, %17 ], [ %46, %45 ], [ %239, %237 ]
  br i1 %23, label %65, label %132

65:                                               ; preds = %63
  %66 = load i64, i64* %19, align 8
  %67 = icmp eq %"struct.quic::ParsedQuicVersion"* %25, %2
  br i1 %67, label %130, label %68

68:                                               ; preds = %65
  %69 = inttoptr i64 %66 to %"struct.quic::ParsedQuicVersion"*
  %70 = xor i64 %22, -1
  %71 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %2, i64 %70, i32 0
  %72 = ptrtoint i32* %71 to i64
  %73 = sub i64 %72, %4
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 3
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %92, label %78

78:                                               ; preds = %68, %78
  %79 = phi %"struct.quic::ParsedQuicVersion"* [ %89, %78 ], [ %69, %68 ]
  %80 = phi %"struct.quic::ParsedQuicVersion"* [ %88, %78 ], [ %24, %68 ]
  %81 = phi i64 [ %90, %78 ], [ %76, %68 ]
  %82 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %80, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %80, i64 0, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %79, i64 0, i32 0
  store i32 %83, i32* %86, align 4
  %87 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %79, i64 0, i32 1
  store i32 %85, i32* %87, align 4
  %88 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %80, i64 1
  %89 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %79, i64 1
  %90 = add i64 %81, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %78, !llvm.loop !25

92:                                               ; preds = %78, %68
  %93 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %68 ], [ %89, %78 ]
  %94 = phi %"struct.quic::ParsedQuicVersion"* [ %69, %68 ], [ %89, %78 ]
  %95 = phi %"struct.quic::ParsedQuicVersion"* [ %24, %68 ], [ %88, %78 ]
  %96 = icmp ult i64 %73, 24
  br i1 %96, label %127, label %97

97:                                               ; preds = %92, %97
  %98 = phi %"struct.quic::ParsedQuicVersion"* [ %125, %97 ], [ %94, %92 ]
  %99 = phi %"struct.quic::ParsedQuicVersion"* [ %124, %97 ], [ %95, %92 ]
  %100 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 0, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 0, i32 0
  store i32 %101, i32* %104, align 4
  %105 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 0, i32 1
  store i32 %103, i32* %105, align 4
  %106 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 1, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 1, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 1, i32 0
  store i32 %107, i32* %110, align 4
  %111 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 1, i32 1
  store i32 %109, i32* %111, align 4
  %112 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 2, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 2, i32 1
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 2, i32 0
  store i32 %113, i32* %116, align 4
  %117 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 2, i32 1
  store i32 %115, i32* %117, align 4
  %118 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 3, i32 0
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 3, i32 1
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 3, i32 0
  store i32 %119, i32* %122, align 4
  %123 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 3, i32 1
  store i32 %121, i32* %123, align 4
  %124 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %99, i64 4
  %125 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %98, i64 4
  %126 = icmp eq %"struct.quic::ParsedQuicVersion"* %124, %2
  br i1 %126, label %127, label %97

127:                                              ; preds = %97, %92
  %128 = phi %"struct.quic::ParsedQuicVersion"* [ %93, %92 ], [ %125, %97 ]
  %129 = ptrtoint %"struct.quic::ParsedQuicVersion"* %128 to i64
  br label %130

130:                                              ; preds = %65, %127
  %131 = phi i64 [ %66, %65 ], [ %129, %127 ]
  store i64 %131, i64* %19, align 8
  br label %229

132:                                              ; preds = %63
  store %"struct.quic::ParsedQuicVersion"* %64, %"struct.quic::ParsedQuicVersion"** %18, align 8
  br label %229

133:                                              ; preds = %3
  %134 = icmp eq i64 %12, 0
  br i1 %134, label %140, label %135

135:                                              ; preds = %133
  %136 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %137 = bitcast %"struct.quic::ParsedQuicVersion"** %136 to i64*
  store i64 %12, i64* %137, align 8
  %138 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %138) #13
  %139 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 24, i1 false) #12
  br label %140

140:                                              ; preds = %133, %135
  %141 = phi i64 [ %10, %133 ], [ 0, %135 ]
  %142 = icmp ugt i64 %7, 2305843009213693951
  br i1 %142, label %143, label %145

143:                                              ; preds = %140
  %144 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %144) #14
  unreachable

145:                                              ; preds = %140
  %146 = ashr exact i64 %141, 3
  %147 = icmp ult i64 %146, 1152921504606846975
  br i1 %147, label %148, label %155

148:                                              ; preds = %145
  %149 = ashr exact i64 %141, 2
  %150 = icmp ult i64 %149, %7
  br i1 %150, label %155, label %151

151:                                              ; preds = %148
  %152 = icmp ugt i64 %149, 2305843009213693951
  br i1 %152, label %153, label %155

153:                                              ; preds = %151
  %154 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %154) #14
  unreachable

155:                                              ; preds = %148, %145, %151
  %156 = phi i64 [ %149, %151 ], [ 2305843009213693951, %145 ], [ %7, %148 ]
  %157 = shl i64 %156, 3
  %158 = tail call i8* @_Znwm(i64 %157) #13
  %159 = bitcast i8* %158 to %"struct.quic::ParsedQuicVersion"*
  %160 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %161 = bitcast %"struct.quic::ParsedQuicVersion"** %160 to i8**
  store i8* %158, i8** %161, align 8
  %162 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %158, i8** %162, align 8
  %163 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %159, i64 %156
  store %"struct.quic::ParsedQuicVersion"* %163, %"struct.quic::ParsedQuicVersion"** %8, align 8
  %164 = bitcast %"struct.quic::ParsedQuicVersion"** %160 to i64*
  %165 = ptrtoint i8* %158 to i64
  %166 = icmp eq %"struct.quic::ParsedQuicVersion"* %1, %2
  br i1 %166, label %227, label %167

167:                                              ; preds = %155
  %168 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %2, i64 -1, i32 0
  %169 = ptrtoint i32* %168 to i64
  %170 = sub i64 %169, %4
  %171 = lshr i64 %170, 3
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %189, label %175

175:                                              ; preds = %167, %175
  %176 = phi %"struct.quic::ParsedQuicVersion"* [ %186, %175 ], [ %159, %167 ]
  %177 = phi %"struct.quic::ParsedQuicVersion"* [ %185, %175 ], [ %1, %167 ]
  %178 = phi i64 [ %187, %175 ], [ %173, %167 ]
  %179 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %177, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %177, i64 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %176, i64 0, i32 0
  store i32 %180, i32* %183, align 4
  %184 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %176, i64 0, i32 1
  store i32 %182, i32* %184, align 4
  %185 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %177, i64 1
  %186 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %176, i64 1
  %187 = add i64 %178, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %175, !llvm.loop !26

189:                                              ; preds = %175, %167
  %190 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %167 ], [ %186, %175 ]
  %191 = phi %"struct.quic::ParsedQuicVersion"* [ %159, %167 ], [ %186, %175 ]
  %192 = phi %"struct.quic::ParsedQuicVersion"* [ %1, %167 ], [ %185, %175 ]
  %193 = icmp ult i64 %170, 24
  br i1 %193, label %224, label %194

194:                                              ; preds = %189, %194
  %195 = phi %"struct.quic::ParsedQuicVersion"* [ %222, %194 ], [ %191, %189 ]
  %196 = phi %"struct.quic::ParsedQuicVersion"* [ %221, %194 ], [ %192, %189 ]
  %197 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  %199 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 0, i32 1
  %200 = load i32, i32* %199, align 4
  %201 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 0, i32 0
  store i32 %198, i32* %201, align 4
  %202 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 0, i32 1
  store i32 %200, i32* %202, align 4
  %203 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 1, i32 0
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 1, i32 1
  %206 = load i32, i32* %205, align 4
  %207 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 1, i32 0
  store i32 %204, i32* %207, align 4
  %208 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 1, i32 1
  store i32 %206, i32* %208, align 4
  %209 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 2, i32 0
  %210 = load i32, i32* %209, align 4
  %211 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 2, i32 1
  %212 = load i32, i32* %211, align 4
  %213 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 2, i32 0
  store i32 %210, i32* %213, align 4
  %214 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 2, i32 1
  store i32 %212, i32* %214, align 4
  %215 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 3, i32 0
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 3, i32 1
  %218 = load i32, i32* %217, align 4
  %219 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 3, i32 0
  store i32 %216, i32* %219, align 4
  %220 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 3, i32 1
  store i32 %218, i32* %220, align 4
  %221 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %196, i64 4
  %222 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %195, i64 4
  %223 = icmp eq %"struct.quic::ParsedQuicVersion"* %221, %2
  br i1 %223, label %224, label %194

224:                                              ; preds = %194, %189
  %225 = phi %"struct.quic::ParsedQuicVersion"* [ %190, %189 ], [ %222, %194 ]
  %226 = ptrtoint %"struct.quic::ParsedQuicVersion"* %225 to i64
  br label %227

227:                                              ; preds = %155, %224
  %228 = phi i64 [ %165, %155 ], [ %226, %224 ]
  store i64 %228, i64* %164, align 8
  br label %229

229:                                              ; preds = %130, %132, %227
  ret void

230:                                              ; preds = %61
  %231 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 1, i32 0
  %232 = load i32, i32* %231, align 4
  %233 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 1, i32 0
  store i32 %232, i32* %233, align 4
  %234 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 1, i32 1
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 1, i32 1
  store i32 %235, i32* %236, align 4
  br label %237

237:                                              ; preds = %230, %61
  %238 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %52, i64 2
  %239 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %51, i64 2
  %240 = icmp eq %"struct.quic::ParsedQuicVersion"* %238, %25
  br i1 %240, label %63, label %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3net22AlternativeServiceInfoENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.22"*, %"class.net::AlternativeServiceInfo"* dereferenceable(72)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.net::AlternativeServiceInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.22"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 72
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 256204778801521550
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.22"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.net::AlternativeServiceInfo"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 72
  %20 = icmp ult i64 %19, 128102389400760775
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 256204778801521550, %14 ]
  %28 = mul i64 %27, 72
  %29 = tail call i8* @_Znwm(i64 %28) #13
  %30 = bitcast i8* %29 to %"class.net::AlternativeServiceInfo"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.net::AlternativeServiceInfo"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %33, i64 %9
  %35 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %33, i64 %32
  %36 = ptrtoint %"class.net::AlternativeServiceInfo"* %35 to i64
  tail call void @_ZN3net22AlternativeServiceInfoC2ERKS0_(%"class.net::AlternativeServiceInfo"* %34, %"class.net::AlternativeServiceInfo"* dereferenceable(72) %1) #12
  %37 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %34, i64 1
  %38 = ptrtoint %"class.net::AlternativeServiceInfo"* %37 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 0
  %40 = load %"class.net::AlternativeServiceInfo"*, %"class.net::AlternativeServiceInfo"** %39, align 8
  %41 = load %"class.net::AlternativeServiceInfo"*, %"class.net::AlternativeServiceInfo"** %3, align 8
  %42 = icmp eq %"class.net::AlternativeServiceInfo"* %41, %40
  br i1 %42, label %43, label %45

43:                                               ; preds = %31
  %44 = ptrtoint %"class.net::AlternativeServiceInfo"* %40 to i64
  br label %54

45:                                               ; preds = %31, %45
  %46 = phi %"class.net::AlternativeServiceInfo"* [ %48, %45 ], [ %34, %31 ]
  %47 = phi %"class.net::AlternativeServiceInfo"* [ %49, %45 ], [ %41, %31 ]
  %48 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %46, i64 -1
  %49 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %47, i64 -1
  tail call void @_ZN3net22AlternativeServiceInfoC2ERKS0_(%"class.net::AlternativeServiceInfo"* %48, %"class.net::AlternativeServiceInfo"* dereferenceable(72) %49) #12
  %50 = icmp eq %"class.net::AlternativeServiceInfo"* %49, %40
  br i1 %50, label %51, label %45

51:                                               ; preds = %45
  %52 = load i64, i64* %6, align 8
  %53 = load %"class.net::AlternativeServiceInfo"*, %"class.net::AlternativeServiceInfo"** %3, align 8
  br label %54

54:                                               ; preds = %43, %51
  %55 = phi %"class.net::AlternativeServiceInfo"* [ %40, %43 ], [ %53, %51 ]
  %56 = phi %"class.net::AlternativeServiceInfo"* [ %34, %43 ], [ %48, %51 ]
  %57 = phi i64 [ %44, %43 ], [ %52, %51 ]
  %58 = ptrtoint %"class.net::AlternativeServiceInfo"* %56 to i64
  store i64 %58, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %59 = inttoptr i64 %57 to %"class.net::AlternativeServiceInfo"*
  %60 = icmp eq %"class.net::AlternativeServiceInfo"* %55, %59
  br i1 %60, label %83, label %61

61:                                               ; preds = %54, %81
  %62 = phi %"class.net::AlternativeServiceInfo"* [ %63, %81 ], [ %55, %54 ]
  %63 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %62, i64 -1
  %64 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %62, i64 -1, i32 2, i32 0, i32 0
  %65 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %64, align 8
  %66 = icmp eq %"struct.quic::ParsedQuicVersion"* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %61
  %68 = ptrtoint %"struct.quic::ParsedQuicVersion"* %65 to i64
  %69 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %62, i64 -1, i32 2, i32 0, i32 1
  %70 = bitcast %"struct.quic::ParsedQuicVersion"** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = bitcast %"struct.quic::ParsedQuicVersion"* %65 to i8*
  tail call void @_ZdlPv(i8* %71) #13
  br label %72

72:                                               ; preds = %67, %61
  %73 = getelementptr inbounds %"class.net::AlternativeServiceInfo", %"class.net::AlternativeServiceInfo"* %62, i64 -1, i32 0, i32 2
  %74 = bitcast %"class.std::__1::basic_string"* %73 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %74, i64 0, i32 1, i32 0
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %72
  %79 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %73, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  tail call void @_ZdlPv(i8* %80) #13
  br label %81

81:                                               ; preds = %78, %72
  %82 = icmp eq %"class.net::AlternativeServiceInfo"* %63, %59
  br i1 %82, label %83, label %61

83:                                               ; preds = %81, %54
  %84 = icmp eq i64 %57, 0
  br i1 %84, label %87, label %85

85:                                               ; preds = %83
  %86 = inttoptr i64 %57 to i8*
  tail call void @_ZdlPv(i8* %86) #13
  br label %87

87:                                               ; preds = %83, %85
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readonly }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNK3net18AlternativeService8ToStringEv: argument 0"}
!6 = distinct !{!6, !"_ZNK3net18AlternativeService8ToStringEv"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK3net18AlternativeService8ToStringEv: argument 0"}
!9 = distinct !{!9, !"_ZNK3net18AlternativeService8ToStringEv"}
!10 = distinct !{!10, !3}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3net12_GLOBAL__N_125ParsedQuicVersionFromAlpnEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEENS3_6vectorIN4quic17ParsedQuicVersionENS3_9allocatorIS9_EEEE: argument 0"}
!13 = distinct !{!13, !"_ZN3net12_GLOBAL__N_125ParsedQuicVersionFromAlpnEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEENS3_6vectorIN4quic17ParsedQuicVersionENS3_9allocatorIS9_EEEE"}
!14 = !{!"branch_weights", i32 1, i32 2000}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3net22AlternativeServiceInfo32CreateQuicAlternativeServiceInfoERKNS_18AlternativeServiceEN4base4TimeERKNSt3__16vectorIN4quic17ParsedQuicVersionENS6_9allocatorIS9_EEEE: argument 0"}
!17 = distinct !{!17, !"_ZN3net22AlternativeServiceInfo32CreateQuicAlternativeServiceInfoERKNS_18AlternativeServiceEN4base4TimeERKNSt3__16vectorIN4quic17ParsedQuicVersionENS6_9allocatorIS9_EEEE"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3net22AlternativeServiceInfo33CreateHttp2AlternativeServiceInfoERKNS_18AlternativeServiceEN4base4TimeE: argument 0"}
!20 = distinct !{!20, !"_ZN3net22AlternativeServiceInfo33CreateHttp2AlternativeServiceInfoERKNS_18AlternativeServiceEN4base4TimeE"}
!21 = distinct !{!21, !3}
!22 = !{i8 0, i8 2}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !3}
