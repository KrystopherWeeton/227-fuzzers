; ModuleID = '../../base/task/thread_pool.cc'
source_filename = "../../base/task/thread_pool.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::ThreadPoolInstance" = type { i32 (...)** }
%"class.base::internal::ThreadPoolImpl" = type { %"class.base::ThreadPoolInstance", %"class.base::TaskExecutor", %"class.base::internal::ThreadGroup::Delegate", %"class.base::internal::PooledTaskRunnerDelegate", %"class.std::__1::unique_ptr", %"class.base::internal::ServiceThread", %"class.base::internal::DelayedTaskManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.std::__1::unique_ptr.71", %"class.std::__1::unique_ptr.71", i8, i8, %"struct.std::__1::atomic.94", i8, i8, i32, i32, %"class.base::internal::TrackedRefFactory.75" }
%"class.base::TaskExecutor" = type { i32 (...)** }
%"class.base::internal::ThreadGroup::Delegate" = type { i32 (...)** }
%"class.base::internal::PooledTaskRunnerDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::internal::TaskTrackerPosix"* }
%"class.base::internal::TaskTrackerPosix" = type { %"class.base::internal::TaskTracker", %class.scoped_refptr.43 }
%"class.base::internal::TaskTracker" = type { i32 (...)**, %"class.base::TaskAnnotator", %"class.std::__1::basic_string", i8, %"class.std::__1::unique_ptr.4", %"struct.std::__1::atomic", %"struct.std::__1::atomic.8", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.12", %"class.base::OnceCallback", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.22", %"class.base::internal::TrackedRefFactory" }
%"class.base::TaskAnnotator" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.base::internal::TaskTracker::State"* }
%"class.base::internal::TaskTracker::State" = type opaque
%"struct.std::__1::atomic.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i32 }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.base::ConditionVariable"* }
%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.15, %union.anon.17, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.15 = type { i64 }
%union.anon.17 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.base::WaitableEvent"* }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.25, i8, [7 x i8] }>
%class.scoped_refptr.25 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.26", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.26" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.27" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i64 }
%"class.base::internal::TrackedRefFactory" = type { %"class.base::internal::TaskTracker"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.36" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon.35 }
%union.anon.35 = type { %"class.base::WaitableEvent" }
%"class.absl::optional.36" = type { %"class.absl::optional_internal::optional_data.37" }
%"class.absl::optional_internal::optional_data.37" = type { %"class.absl::optional_internal::optional_data_base.38" }
%"class.absl::optional_internal::optional_data_base.38" = type { %"class.absl::optional_internal::optional_data_dtor_base.39" }
%"class.absl::optional_internal::optional_data_dtor_base.39" = type { i8, %union.anon.40 }
%union.anon.40 = type { %"class.base::internal::TrackedRef" }
%"class.base::internal::TrackedRef" = type { %"class.base::internal::TaskTracker"*, %"class.base::internal::TrackedRefFactory"* }
%class.scoped_refptr.43 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.44" }>
%"class.base::RefCountedThreadSafe.44" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::ServiceThread" = type { %"class.base::Thread.base", [7 x i8] }
%"class.base::Thread.base" = type <{ %"class.base::PlatformThread::Delegate", i8, i8, i8, [5 x i8], %"class.base::Lock", %"class.base::PlatformThreadHandle", %"class.base::Lock", i32, [4 x i8], %"class.base::WaitableEvent", %"class.std::__1::unique_ptr.48", %"class.base::RunLoop"*, i32, [4 x i8], %"class.std::__1::basic_string", %"class.base::WaitableEvent", %"class.base::SequenceCheckerDoNothing" }>
%"class.base::PlatformThread::Delegate" = type { i32 (...)** }
%"class.base::PlatformThreadHandle" = type { i64 }
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.base::Thread::Delegate"* }
%"class.base::Thread::Delegate" = type { i32 (...)** }
%"class.base::RunLoop" = type opaque
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::DelayedTaskManager" = type { %"class.base::RepeatingCallback", %"class.base::TickClock"*, %"class.base::internal::CheckedLock", %class.scoped_refptr.54, %"class.base::internal::IntrusiveHeap" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::TickClock" = type { i32 (...)** }
%class.scoped_refptr.54 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::internal::IntrusiveHeap" = type { %"class.base::IntrusiveHeap" }
%"class.base::IntrusiveHeap" = type { %"struct.base::IntrusiveHeap<base::internal::DelayedTaskManager::DelayedTask, base::internal::IntrusiveHeapImpl<base::internal::DelayedTaskManager::DelayedTask>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::DelayedTaskManager::DelayedTask> >::Impl" }
%"struct.base::IntrusiveHeap<base::internal::DelayedTaskManager::DelayedTask, base::internal::IntrusiveHeapImpl<base::internal::DelayedTaskManager::DelayedTask>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::DelayedTaskManager::DelayedTask> >::Impl" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::internal::DelayedTaskManager::DelayedTask"*, %"struct.base::internal::DelayedTaskManager::DelayedTask"*, %"class.std::__1::__compressed_pair.58" }
%"struct.base::internal::DelayedTaskManager::DelayedTask" = type <{ %"struct.base::internal::Task", %"class.base::OnceCallback.56", %class.scoped_refptr.57, i8, [7 x i8] }>
%"struct.base::internal::Task" = type { %"struct.base::PendingTask.base", [3 x i8] }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.55", i32, [4 x i8], i8*, i32, i8 }>
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::array.55" = type { [4 x i8*] }
%"class.base::OnceCallback.56" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.57 = type { %"class.base::TaskRunner"* }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.44", [4 x i8] }>
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.base::internal::DelayedTaskManager::DelayedTask"* }
%"class.base::internal::PooledSingleThreadTaskRunnerManager" = type <{ %"class.base::internal::TrackedRef", %"class.base::internal::DelayedTaskManager"*, %"class.base::WorkerThreadObserver"*, %"class.base::internal::CheckedLock", %"class.std::__1::vector.63", i32, [4 x i8], [4 x [2 x %"class.base::internal::WorkerThread"*]], i8, [7 x i8] }>
%"class.base::WorkerThreadObserver" = type opaque
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %class.scoped_refptr.65*, %class.scoped_refptr.65*, %"class.std::__1::__compressed_pair.66" }
%class.scoped_refptr.65 = type { %"class.base::internal::WorkerThread"* }
%"class.base::internal::WorkerThread" = type <{ %"class.base::PlatformThread::Delegate", %"class.base::RefCountedThreadSafe.103", [4 x i8], %class.scoped_refptr.65, %"class.base::internal::CheckedLock", %"class.base::PlatformThreadHandle", %"class.base::TimeTicks", %"class.base::WaitableEvent", %"class.base::AtomicFlag", [7 x i8], %"class.std::__1::unique_ptr.109", %"class.base::internal::TrackedRef", %"class.base::WorkerThreadObserver"*, i32, i32, %"class.base::AtomicFlag", [7 x i8] }>
%"class.base::RefCountedThreadSafe.103" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.base::internal::WorkerThread::Delegate"* }
%"class.base::internal::WorkerThread::Delegate" = type { i32 (...)** }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.104" }
%"struct.std::__1::atomic.104" = type { %"struct.std::__1::__atomic_base.105" }
%"struct.std::__1::__atomic_base.105" = type { %"struct.std::__1::__atomic_base.106" }
%"struct.std::__1::__atomic_base.106" = type { %"struct.std::__1::__cxx_atomic_impl.107" }
%"struct.std::__1::__cxx_atomic_impl.107" = type { %"struct.std::__1::__cxx_atomic_base_impl.108" }
%"struct.std::__1::__cxx_atomic_base_impl.108" = type { i8 }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %class.scoped_refptr.65* }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.base::internal::ThreadGroup"* }
%"class.base::internal::ThreadGroup" = type { i32 (...)**, %"class.base::internal::TrackedRef", %"class.base::internal::TrackedRef.74", %"class.base::internal::CheckedLock", i8, [7 x i8], %"class.base::internal::PriorityQueue", %"struct.std::__1::atomic.87", %"class.base::internal::ThreadGroup"* }
%"class.base::internal::TrackedRef.74" = type { %"class.base::internal::ThreadGroup::Delegate"*, %"class.base::internal::TrackedRefFactory.75"* }
%"class.base::internal::PriorityQueue" = type <{ %"class.base::internal::IntrusiveHeap.76", %"struct.std::__1::array.86", i8, [7 x i8] }>
%"class.base::internal::IntrusiveHeap.76" = type { %"class.base::IntrusiveHeap.77" }
%"class.base::IntrusiveHeap.77" = type { %"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" }
%"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" = type { %"class.std::__1::vector.79" }
%"class.std::__1::vector.79" = type { %"class.std::__1::__vector_base.80" }
%"class.std::__1::__vector_base.80" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.std::__1::__compressed_pair.81" }
%"class.base::internal::PriorityQueue::TaskSourceAndSortKey" = type opaque
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"* }
%"struct.std::__1::array.86" = type { [3 x i64] }
%"struct.std::__1::atomic.87" = type { %"struct.std::__1::__atomic_base.88" }
%"struct.std::__1::__atomic_base.88" = type { %"struct.std::__1::__cxx_atomic_impl.89" }
%"struct.std::__1::__cxx_atomic_impl.89" = type { %"struct.std::__1::__cxx_atomic_base_impl.90" }
%"struct.std::__1::__cxx_atomic_base_impl.90" = type { %"struct.base::internal::ThreadGroup::YieldSortKey" }
%"struct.base::internal::ThreadGroup::YieldSortKey" = type { i8, i8 }
%"struct.std::__1::atomic.94" = type { %"struct.std::__1::__atomic_base.95" }
%"struct.std::__1::__atomic_base.95" = type { %"struct.std::__1::__cxx_atomic_impl.96" }
%"struct.std::__1::__cxx_atomic_impl.96" = type { %"struct.std::__1::__cxx_atomic_base_impl.97" }
%"struct.std::__1::__cxx_atomic_base_impl.97" = type { i8 }
%"class.base::internal::TrackedRefFactory.75" = type { %"class.base::internal::ThreadGroup::Delegate"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.98" }
%"class.absl::optional.98" = type { %"class.absl::optional_internal::optional_data.99" }
%"class.absl::optional_internal::optional_data.99" = type { %"class.absl::optional_internal::optional_data_base.100" }
%"class.absl::optional_internal::optional_data_base.100" = type { %"class.absl::optional_internal::optional_data_dtor_base.101" }
%"class.absl::optional_internal::optional_data_dtor_base.101" = type { i8, %union.anon.102 }
%union.anon.102 = type { %"class.base::internal::TrackedRef.74" }
%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner" = type <{ %"class.base::internal::PostTaskAndReplyImpl", %"class.base::TaskTraits", i8 }>
%"class.base::internal::PostTaskAndReplyImpl" = type { i32 (...)** }
%"class.base::UpdateableSequencedTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }

$_ZN4base8internal20PostTaskAndReplyImplD2Ev = comdat any

@.ref.tmp.1 = private constant %"class.base::TaskTraits" { %"struct.base::TaskTraitsExtensionStorage" zeroinitializer, i8 2, i8 1, i8 0, i8 0, i8 0, i8 0 }, align 1
@_ZTVN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunnerE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::PostTaskAndReplyImpl"*)* @_ZN4base8internal20PostTaskAndReplyImplD2Ev to i8*), i8* bitcast (void (%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"*)* @_ZN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunnerD0Ev to i8*), i8* bitcast (i1 (%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*)* @_ZN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base10ThreadPool8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %9 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %10, align 8
  %11 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  %12 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %13 = bitcast %"class.base::ThreadPoolInstance"* %12 to %"class.base::internal::ThreadPoolImpl"*
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %8, i64* %15, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %14, align 8
  %16 = bitcast %"class.base::ThreadPoolInstance"* %12 to i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)***
  %17 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %17, i64 12
  %19 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %18, align 8
  %20 = call zeroext i1 %19(%"class.base::internal::ThreadPoolImpl"* %13, %"class.base::Location"* dereferenceable(32) %0, %"class.base::TaskTraits"* nonnull dereferenceable(15) @.ref.tmp.1, %"class.base::OnceCallback"* nonnull %3, i64 0) #6
  %21 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  %22 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  %23 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %23) #6
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base10ThreadPool15PostDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE(%"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %9 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %11 = bitcast %"class.base::ThreadPoolInstance"* %10 to %"class.base::internal::ThreadPoolImpl"*
  %12 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %8, i64* %13, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %12, align 8
  %14 = bitcast %"class.base::ThreadPoolInstance"* %10 to i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)***
  %15 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*** %14, align 8
  %16 = getelementptr inbounds i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %15, i64 12
  %17 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %16, align 8
  %18 = call zeroext i1 %17(%"class.base::internal::ThreadPoolImpl"* %11, %"class.base::Location"* dereferenceable(32) %0, %"class.base::TaskTraits"* nonnull dereferenceable(15) @.ref.tmp.1, %"class.base::OnceCallback"* nonnull %4, i64 %2) #6
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  %20 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %20) #6
  ret i1 %18
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base10ThreadPool15PostDelayedTaskERKNS_8LocationERKNS_10TaskTraitsENS_12OnceCallbackIFvvEEENS_9TimeDeltaE(%"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* dereferenceable(15), %"class.base::OnceCallback"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %7 = bitcast %"class.base::ThreadPoolInstance"* %6 to %"class.base::internal::ThreadPoolImpl"*
  %8 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %10, i64* %11, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %8, align 8
  %12 = bitcast %"class.base::ThreadPoolInstance"* %6 to i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)***
  %13 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*** %12, align 8
  %14 = getelementptr inbounds i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %13, i64 12
  %15 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %14, align 8
  %16 = call zeroext i1 %15(%"class.base::internal::ThreadPoolImpl"* %7, %"class.base::Location"* dereferenceable(32) %0, %"class.base::TaskTraits"* dereferenceable(15) %1, %"class.base::OnceCallback"* nonnull %5, i64 %3) #6
  %17 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %17) #6
  ret i1 %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base10ThreadPool16PostTaskAndReplyERKNS_8LocationENS_12OnceCallbackIFvvEEES6_(%"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"* nocapture, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"class.base::OnceCallback", align 8
  %8 = alloca %"class.base::OnceCallback", align 8
  %9 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %9, align 8
  %12 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %14 = load i64, i64* %13, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %12, align 8
  %15 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15)
  %16 = bitcast %"class.base::OnceCallback"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16)
  %17 = bitcast %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #6
  %18 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %19 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %4, i64 0, i32 1, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 1 getelementptr inbounds (%"class.base::TaskTraits", %"class.base::TaskTraits"* @.ref.tmp.1, i64 0, i32 0, i32 0), i64 9, i1 false) #6
  %20 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %4, i64 0, i32 1, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 getelementptr inbounds (%"class.base::TaskTraits", %"class.base::TaskTraits"* @.ref.tmp.1, i64 0, i32 1), i64 6, i1 false) #6
  %21 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %4, i64 0, i32 0
  %22 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0, i32 0, i32 0
  %23 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %11, i64* %23, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %22, align 8
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %8, i64 0, i32 0, i32 0, i32 0
  %25 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %14, i64* %25, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %24, align 8
  %26 = call zeroext i1 @_ZN4base8internal20PostTaskAndReplyImpl16PostTaskAndReplyERKNS_8LocationENS_12OnceCallbackIFvvEEES7_(%"class.base::internal::PostTaskAndReplyImpl"* nonnull %21, %"class.base::Location"* dereferenceable(32) %0, %"class.base::OnceCallback"* nonnull %5, %"class.base::OnceCallback"* nonnull %6) #6
  %27 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %27) #6
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16)
  %29 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %8, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %29) #6
  %30 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %30) #6
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base10ThreadPool16PostTaskAndReplyERKNS_8LocationERKNS_10TaskTraitsENS_12OnceCallbackIFvvEEES9_(%"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* nocapture readonly dereferenceable(15), %"class.base::OnceCallback"* nocapture, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"class.base::OnceCallback", align 8
  %8 = bitcast %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #6
  %9 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5, i64 0, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 1 %11, i64 9, i1 false) #6
  %12 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5, i64 0, i32 1, i32 1
  %13 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %13, i64 6, i1 false) #6
  %14 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %5, i64 0, i32 0
  %15 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %17, i64* %18, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %15, align 8
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %20 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.base::OnceCallback"* %7 to i64*
  store i64 %21, i64* %22, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %19, align 8
  %23 = call zeroext i1 @_ZN4base8internal20PostTaskAndReplyImpl16PostTaskAndReplyERKNS_8LocationENS_12OnceCallbackIFvvEEES7_(%"class.base::internal::PostTaskAndReplyImpl"* nonnull %14, %"class.base::Location"* dereferenceable(32) %0, %"class.base::OnceCallback"* nonnull %6, %"class.base::OnceCallback"* nonnull %7) #6
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %24) #6
  %25 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #6
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base10ThreadPool8PostTaskERKNS_8LocationERKNS_10TaskTraitsENS_12OnceCallbackIFvvEEE(%"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* dereferenceable(15), %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %8 = load i64, i64* %7, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %9 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %11 = bitcast %"class.base::ThreadPoolInstance"* %10 to %"class.base::internal::ThreadPoolImpl"*
  %12 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %8, i64* %13, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %12, align 8
  %14 = bitcast %"class.base::ThreadPoolInstance"* %10 to i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)***
  %15 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*** %14, align 8
  %16 = getelementptr inbounds i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %15, i64 12
  %17 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %16, align 8
  %18 = call zeroext i1 %17(%"class.base::internal::ThreadPoolImpl"* %11, %"class.base::Location"* dereferenceable(32) %0, %"class.base::TaskTraits"* dereferenceable(15) %1, %"class.base::OnceCallback"* nonnull %4, i64 0) #6
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  %20 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %20) #6
  ret i1 %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN4base8internal20PostTaskAndReplyImpl16PostTaskAndReplyERKNS_8LocationENS_12OnceCallbackIFvvEEES7_(%"class.base::internal::PostTaskAndReplyImpl"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*, %"class.base::OnceCallback"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::TaskRunner"* @_ZN4base10ThreadPool16CreateTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15)) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %3 = bitcast %"class.base::ThreadPoolInstance"* %2 to %"class.base::internal::ThreadPoolImpl"*
  %4 = bitcast %"class.base::ThreadPoolInstance"* %2 to %"class.base::TaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)***
  %5 = load %"class.base::TaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)**, %"class.base::TaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.base::TaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)*, %"class.base::TaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)** %5, i64 13
  %7 = load %"class.base::TaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)*, %"class.base::TaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)** %6, align 8
  %8 = tail call %"class.base::TaskRunner"* %7(%"class.base::internal::ThreadPoolImpl"* %3, %"class.base::TaskTraits"* dereferenceable(15) %0) #6
  ret %"class.base::TaskRunner"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::SequencedTaskRunner"* @_ZN4base10ThreadPool25CreateSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15)) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %3 = bitcast %"class.base::ThreadPoolInstance"* %2 to %"class.base::internal::ThreadPoolImpl"*
  %4 = bitcast %"class.base::ThreadPoolInstance"* %2 to %"class.base::SequencedTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)***
  %5 = load %"class.base::SequencedTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)**, %"class.base::SequencedTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.base::SequencedTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)*, %"class.base::SequencedTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)** %5, i64 14
  %7 = load %"class.base::SequencedTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)*, %"class.base::SequencedTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*)** %6, align 8
  %8 = tail call %"class.base::SequencedTaskRunner"* %7(%"class.base::internal::ThreadPoolImpl"* %3, %"class.base::TaskTraits"* dereferenceable(15) %0) #6
  ret %"class.base::SequencedTaskRunner"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::UpdateableSequencedTaskRunner"* @_ZN4base10ThreadPool35CreateUpdateableSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15)) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %3 = bitcast %"class.base::ThreadPoolInstance"* %2 to %"class.base::internal::ThreadPoolImpl"*
  %4 = tail call %"class.base::UpdateableSequencedTaskRunner"* @_ZN4base8internal14ThreadPoolImpl35CreateUpdateableSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::internal::ThreadPoolImpl"* %3, %"class.base::TaskTraits"* dereferenceable(15) %0) #6
  ret %"class.base::UpdateableSequencedTaskRunner"* %4
}

declare %"class.base::UpdateableSequencedTaskRunner"* @_ZN4base8internal14ThreadPoolImpl35CreateUpdateableSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"* dereferenceable(15)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::SingleThreadTaskRunner"* @_ZN4base10ThreadPool28CreateSingleThreadTaskRunnerERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::TaskTraits"* dereferenceable(15), i32) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %4 = bitcast %"class.base::ThreadPoolInstance"* %3 to %"class.base::internal::ThreadPoolImpl"*
  %5 = bitcast %"class.base::ThreadPoolInstance"* %3 to %"class.base::SingleThreadTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*, i32)***
  %6 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*, i32)**, %"class.base::SingleThreadTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*, i32)*** %5, align 8
  %7 = getelementptr inbounds %"class.base::SingleThreadTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*, i32)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*, i32)** %6, i64 15
  %8 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*, i32)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::internal::ThreadPoolImpl"*, %"class.base::TaskTraits"*, i32)** %7, align 8
  %9 = tail call %"class.base::SingleThreadTaskRunner"* %8(%"class.base::internal::ThreadPoolImpl"* %4, %"class.base::TaskTraits"* dereferenceable(15) %0, i32 %1) #6
  ret %"class.base::SingleThreadTaskRunner"* %9
}

declare %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunnerD0Ev(%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4base12_GLOBAL__N_136PostTaskAndReplyWithTraitsTaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = getelementptr inbounds %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner", %"class.base::(anonymous namespace)::PostTaskAndReplyWithTraitsTaskRunner"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %10 = load i64, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %8, align 8
  %11 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %12, align 8
  %13 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #6
  %14 = tail call %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() #6
  %15 = bitcast %"class.base::ThreadPoolInstance"* %14 to %"class.base::internal::ThreadPoolImpl"*
  %16 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %10, i64* %17, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %16, align 8
  %18 = bitcast %"class.base::ThreadPoolInstance"* %14 to i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)***
  %19 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*** %18, align 8
  %20 = getelementptr inbounds i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %19, i64 12
  %21 = load i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::ThreadPoolImpl"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)** %20, align 8
  %22 = call zeroext i1 %21(%"class.base::internal::ThreadPoolImpl"* %15, %"class.base::Location"* dereferenceable(32) %1, %"class.base::TaskTraits"* dereferenceable(15) %7, %"class.base::OnceCallback"* nonnull %4, i64 0) #6
  %23 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #6
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %24) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  %25 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %25) #6
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal20PostTaskAndReplyImplD2Ev(%"class.base::internal::PostTaskAndReplyImpl"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
