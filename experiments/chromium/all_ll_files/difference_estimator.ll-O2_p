; ModuleID = '../../courgette/difference_estimator.cc'
source_filename = "../../courgette/difference_estimator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.courgette::DifferenceEstimator" = type { %"class.std::__1::vector", %"class.std::__1::vector.19" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.courgette::DifferenceEstimator::Base"**, %"class.courgette::DifferenceEstimator::Base"**, %"class.std::__1::__compressed_pair.14" }
%"class.courgette::DifferenceEstimator::Base" = type { %"class.courgette::Region", %"class.std::__1::unordered_set" }
%"class.courgette::Region" = type { i8*, i64 }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.11", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { float }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.courgette::DifferenceEstimator::Base"** }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.courgette::DifferenceEstimator::Subject"**, %"class.courgette::DifferenceEstimator::Subject"**, %"class.std::__1::__compressed_pair.21" }
%"class.courgette::DifferenceEstimator::Subject" = type { %"class.courgette::Region" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.courgette::DifferenceEstimator::Subject"** }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE25__emplace_unique_key_argsImJRKmEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeImPvEEEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE6rehashEm = comdat any

$_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE8__rehashEm = comdat any

@_ZN9courgette19DifferenceEstimatorC1Ev = hidden unnamed_addr alias void (%"class.courgette::DifferenceEstimator"*), void (%"class.courgette::DifferenceEstimator"*)* @_ZN9courgette19DifferenceEstimatorC2Ev
@_ZN9courgette19DifferenceEstimatorD1Ev = hidden unnamed_addr alias void (%"class.courgette::DifferenceEstimator"*), void (%"class.courgette::DifferenceEstimator"*)* @_ZN9courgette19DifferenceEstimatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette19DifferenceEstimatorC2Ev(%"class.courgette::DifferenceEstimator"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.courgette::DifferenceEstimator"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette19DifferenceEstimatorD2Ev(%"class.courgette::DifferenceEstimator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = bitcast %"class.courgette::DifferenceEstimator::Base"*** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.courgette::DifferenceEstimator"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %8, label %16

8:                                                ; preds = %44, %1
  %9 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 1, i32 0, i32 1
  %11 = bitcast %"class.courgette::DifferenceEstimator::Subject"*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.19"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %51, label %64

16:                                               ; preds = %1, %44
  %17 = phi i64 [ %45, %44 ], [ %6, %1 ]
  %18 = phi i64 [ %46, %44 ], [ %4, %1 ]
  %19 = phi i64 [ %47, %44 ], [ 0, %1 ]
  %20 = inttoptr i64 %17 to %"class.courgette::DifferenceEstimator::Base"**
  %21 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base"*, %"class.courgette::DifferenceEstimator::Base"** %20, i64 %19
  %22 = load %"class.courgette::DifferenceEstimator::Base"*, %"class.courgette::DifferenceEstimator::Base"** %21, align 8
  %23 = icmp eq %"class.courgette::DifferenceEstimator::Base"* %22, null
  br i1 %23, label %44, label %24

24:                                               ; preds = %16
  %25 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base", %"class.courgette::DifferenceEstimator::Base"* %22, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  %26 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %25, align 8
  %27 = icmp eq %"struct.std::__1::__hash_node_base"* %26, null
  br i1 %27, label %34, label %28

28:                                               ; preds = %24, %28
  %29 = phi %"struct.std::__1::__hash_node_base"* [ %31, %28 ], [ %26, %24 ]
  %30 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %29, i64 0, i32 0
  %31 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %30, align 8
  %32 = bitcast %"struct.std::__1::__hash_node_base"* %29 to i8*
  tail call void @_ZdlPv(i8* %32) #10
  %33 = icmp eq %"struct.std::__1::__hash_node_base"* %31, null
  br i1 %33, label %34, label %28

34:                                               ; preds = %28, %24
  %35 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base", %"class.courgette::DifferenceEstimator::Base"* %22, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %35, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %35, align 8
  %37 = icmp eq %"struct.std::__1::__hash_node_base"** %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %34
  %39 = bitcast %"struct.std::__1::__hash_node_base"** %36 to i8*
  tail call void @_ZdlPv(i8* %39) #10
  br label %40

40:                                               ; preds = %34, %38
  %41 = bitcast %"class.courgette::DifferenceEstimator::Base"* %22 to i8*
  tail call void @_ZdlPv(i8* %41) #10
  %42 = load i64, i64* %3, align 8
  %43 = load i64, i64* %5, align 8
  br label %44

44:                                               ; preds = %16, %40
  %45 = phi i64 [ %17, %16 ], [ %43, %40 ]
  %46 = phi i64 [ %18, %16 ], [ %42, %40 ]
  %47 = add nuw i64 %19, 1
  %48 = sub i64 %46, %45
  %49 = ashr exact i64 %48, 3
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %16, label %8

51:                                               ; preds = %76, %8
  %52 = phi i64 [ %12, %8 ], [ %77, %76 ]
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %51
  store i64 %52, i64* %11, align 8
  %55 = inttoptr i64 %52 to i8*
  tail call void @_ZdlPv(i8* %55) #10
  br label %56

56:                                               ; preds = %51, %54
  %57 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.courgette::DifferenceEstimator::Base"**, %"class.courgette::DifferenceEstimator::Base"*** %57, align 8
  %59 = icmp eq %"class.courgette::DifferenceEstimator::Base"** %58, null
  br i1 %59, label %63, label %60

60:                                               ; preds = %56
  %61 = ptrtoint %"class.courgette::DifferenceEstimator::Base"** %58 to i64
  store i64 %61, i64* %3, align 8
  %62 = bitcast %"class.courgette::DifferenceEstimator::Base"** %58 to i8*
  tail call void @_ZdlPv(i8* %62) #10
  br label %63

63:                                               ; preds = %56, %60
  ret void

64:                                               ; preds = %8, %76
  %65 = phi i64 [ %77, %76 ], [ %14, %8 ]
  %66 = phi i64 [ %78, %76 ], [ %12, %8 ]
  %67 = phi i64 [ %79, %76 ], [ 0, %8 ]
  %68 = inttoptr i64 %65 to %"class.courgette::DifferenceEstimator::Subject"**
  %69 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Subject"*, %"class.courgette::DifferenceEstimator::Subject"** %68, i64 %67
  %70 = load %"class.courgette::DifferenceEstimator::Subject"*, %"class.courgette::DifferenceEstimator::Subject"** %69, align 8
  %71 = icmp eq %"class.courgette::DifferenceEstimator::Subject"* %70, null
  br i1 %71, label %76, label %72

72:                                               ; preds = %64
  %73 = bitcast %"class.courgette::DifferenceEstimator::Subject"* %70 to i8*
  tail call void @_ZdlPv(i8* %73) #10
  %74 = load i64, i64* %11, align 8
  %75 = load i64, i64* %13, align 8
  br label %76

76:                                               ; preds = %64, %72
  %77 = phi i64 [ %65, %64 ], [ %75, %72 ]
  %78 = phi i64 [ %66, %64 ], [ %74, %72 ]
  %79 = add nuw i64 %67, 1
  %80 = sub i64 %78, %77
  %81 = ashr exact i64 %80, 3
  %82 = icmp ult i64 %79, %81
  br i1 %82, label %64, label %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.courgette::DifferenceEstimator::Base"* @_ZN9courgette19DifferenceEstimator8MakeBaseERKNS_6RegionE(%"class.courgette::DifferenceEstimator"*, %"class.courgette::Region"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = tail call i8* @_Znwm(i64 56) #10
  %5 = bitcast %"class.courgette::Region"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast i8* %4 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = getelementptr inbounds %"class.courgette::Region", %"class.courgette::Region"* %1, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %9, align 8
  %12 = getelementptr inbounds i8, i8* %4, i64 16
  %13 = getelementptr inbounds i8, i8* %4, i64 48
  %14 = bitcast i8* %13 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 32, i1 false) #11
  store i32 1065353216, i32* %14, align 4
  %15 = ptrtoint i8* %4 to i64
  %16 = icmp ult i64 %11, 4
  %17 = inttoptr i64 %6 to i8*
  br i1 %16, label %38, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds i8, i8* %17, i64 %11
  %20 = getelementptr inbounds i8, i8* %19, i64 -3
  %21 = icmp ugt i8* %20, %17
  br i1 %21, label %22, label %38

22:                                               ; preds = %18
  %23 = bitcast i64* %3 to i8*
  %24 = bitcast i8* %12 to %"class.std::__1::__hash_table"*
  br label %25

25:                                               ; preds = %25, %22
  %26 = phi i8* [ %17, %22 ], [ %36, %25 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #11
  store i64 -6148914691236517206, i64* %3, align 8
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  %30 = mul nuw nsw i64 %29, 54
  %31 = lshr i64 %29, 17
  %32 = add nuw nsw i64 %30, %31
  %33 = lshr i64 %29, 23
  %34 = xor i64 %32, %33
  store i64 %34, i64* %3, align 8
  %35 = call { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE25__emplace_unique_key_argsImJRKmEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeImPvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"* %24, i64* nonnull dereferenceable(8) %3, i64* nonnull dereferenceable(8) %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #11
  %36 = getelementptr inbounds i8, i8* %26, i64 1
  %37 = icmp eq i8* %36, %20
  br i1 %37, label %38, label %25

38:                                               ; preds = %25, %2, %18
  %39 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 0, i32 0, i32 1
  %40 = load %"class.courgette::DifferenceEstimator::Base"**, %"class.courgette::DifferenceEstimator::Base"*** %39, align 8
  %41 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %42 = load %"class.courgette::DifferenceEstimator::Base"**, %"class.courgette::DifferenceEstimator::Base"*** %41, align 8
  %43 = icmp eq %"class.courgette::DifferenceEstimator::Base"** %40, %42
  %44 = ptrtoint %"class.courgette::DifferenceEstimator::Base"** %42 to i64
  br i1 %43, label %50, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.courgette::DifferenceEstimator::Base"** %40 to i64*
  store i64 %15, i64* %46, align 8
  %47 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base"*, %"class.courgette::DifferenceEstimator::Base"** %40, i64 1
  %48 = ptrtoint %"class.courgette::DifferenceEstimator::Base"** %47 to i64
  %49 = bitcast %"class.courgette::DifferenceEstimator::Base"*** %39 to i64*
  store i64 %48, i64* %49, align 8
  br label %107

50:                                               ; preds = %38
  %51 = ptrtoint %"class.courgette::DifferenceEstimator::Base"** %40 to i64
  %52 = bitcast %"class.courgette::DifferenceEstimator::Base"*** %39 to i64*
  %53 = bitcast %"class.courgette::DifferenceEstimator"* %0 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %51, %54
  %56 = ashr exact i64 %55, 3
  %57 = add nsw i64 %56, 1
  %58 = icmp ugt i64 %57, 2305843009213693951
  br i1 %58, label %59, label %61

59:                                               ; preds = %50
  %60 = bitcast %"class.courgette::DifferenceEstimator"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #12
  unreachable

61:                                               ; preds = %50
  %62 = bitcast %"class.courgette::DifferenceEstimator::Base"*** %41 to i64*
  %63 = sub i64 %44, %54
  %64 = ashr exact i64 %63, 3
  %65 = icmp ult i64 %64, 1152921504606846975
  br i1 %65, label %66, label %74

66:                                               ; preds = %61
  %67 = ashr exact i64 %63, 2
  %68 = icmp ult i64 %67, %57
  %69 = select i1 %68, i64 %57, i64 %67
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %79, label %71

71:                                               ; preds = %66
  %72 = icmp ugt i64 %69, 2305843009213693951
  br i1 %72, label %73, label %74

73:                                               ; preds = %71
  call void @abort() #12
  unreachable

74:                                               ; preds = %71, %61
  %75 = phi i64 [ %69, %71 ], [ 2305843009213693951, %61 ]
  %76 = shl i64 %75, 3
  %77 = call i8* @_Znwm(i64 %76) #10
  %78 = bitcast i8* %77 to %"class.courgette::DifferenceEstimator::Base"**
  br label %79

79:                                               ; preds = %74, %66
  %80 = phi i64 [ %75, %74 ], [ 0, %66 ]
  %81 = phi %"class.courgette::DifferenceEstimator::Base"** [ %78, %74 ], [ null, %66 ]
  %82 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base"*, %"class.courgette::DifferenceEstimator::Base"** %81, i64 %56
  %83 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base"*, %"class.courgette::DifferenceEstimator::Base"** %81, i64 %80
  %84 = ptrtoint %"class.courgette::DifferenceEstimator::Base"** %83 to i64
  %85 = bitcast %"class.courgette::DifferenceEstimator::Base"** %82 to i64*
  store i64 %15, i64* %85, align 8
  %86 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base"*, %"class.courgette::DifferenceEstimator::Base"** %82, i64 1
  %87 = ptrtoint %"class.courgette::DifferenceEstimator::Base"** %86 to i64
  %88 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 0, i32 0, i32 0
  %89 = load %"class.courgette::DifferenceEstimator::Base"**, %"class.courgette::DifferenceEstimator::Base"*** %88, align 8
  %90 = load i64, i64* %52, align 8
  %91 = ptrtoint %"class.courgette::DifferenceEstimator::Base"** %89 to i64
  %92 = sub i64 %90, %91
  %93 = ashr exact i64 %92, 3
  %94 = sub nsw i64 0, %93
  %95 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base"*, %"class.courgette::DifferenceEstimator::Base"** %82, i64 %94
  %96 = ptrtoint %"class.courgette::DifferenceEstimator::Base"** %95 to i64
  %97 = icmp sgt i64 %92, 0
  br i1 %97, label %98, label %102

98:                                               ; preds = %79
  %99 = bitcast %"class.courgette::DifferenceEstimator::Base"** %95 to i8*
  %100 = bitcast %"class.courgette::DifferenceEstimator::Base"** %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 %92, i1 false) #11
  %101 = load %"class.courgette::DifferenceEstimator::Base"**, %"class.courgette::DifferenceEstimator::Base"*** %88, align 8
  br label %102

102:                                              ; preds = %98, %79
  %103 = phi %"class.courgette::DifferenceEstimator::Base"** [ %89, %79 ], [ %101, %98 ]
  store i64 %96, i64* %53, align 8
  store i64 %87, i64* %52, align 8
  store i64 %84, i64* %62, align 8
  %104 = icmp eq %"class.courgette::DifferenceEstimator::Base"** %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %102
  %106 = bitcast %"class.courgette::DifferenceEstimator::Base"** %103 to i8*
  call void @_ZdlPv(i8* %106) #10
  br label %107

107:                                              ; preds = %45, %102, %105
  %108 = bitcast i8* %4 to %"class.courgette::DifferenceEstimator::Base"*
  ret %"class.courgette::DifferenceEstimator::Base"* %108
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.courgette::DifferenceEstimator::Subject"* @_ZN9courgette19DifferenceEstimator11MakeSubjectERKNS_6RegionE(%"class.courgette::DifferenceEstimator"*, %"class.courgette::Region"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 16) #10
  %4 = bitcast %"class.courgette::Region"* %1 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 8
  %6 = bitcast i8* %3 to <2 x i64>*
  store <2 x i64> %5, <2 x i64>* %6, align 8
  %7 = ptrtoint i8* %3 to i64
  %8 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.courgette::DifferenceEstimator::Subject"**, %"class.courgette::DifferenceEstimator::Subject"*** %9, align 8
  %11 = getelementptr inbounds %"class.courgette::DifferenceEstimator", %"class.courgette::DifferenceEstimator"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %12 = load %"class.courgette::DifferenceEstimator::Subject"**, %"class.courgette::DifferenceEstimator::Subject"*** %11, align 8
  %13 = icmp eq %"class.courgette::DifferenceEstimator::Subject"** %10, %12
  %14 = ptrtoint %"class.courgette::DifferenceEstimator::Subject"** %12 to i64
  br i1 %13, label %20, label %15

15:                                               ; preds = %2
  %16 = bitcast %"class.courgette::DifferenceEstimator::Subject"** %10 to i64*
  store i64 %7, i64* %16, align 8
  %17 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Subject"*, %"class.courgette::DifferenceEstimator::Subject"** %10, i64 1
  %18 = ptrtoint %"class.courgette::DifferenceEstimator::Subject"** %17 to i64
  %19 = bitcast %"class.courgette::DifferenceEstimator::Subject"*** %9 to i64*
  store i64 %18, i64* %19, align 8
  br label %77

20:                                               ; preds = %2
  %21 = ptrtoint %"class.courgette::DifferenceEstimator::Subject"** %10 to i64
  %22 = bitcast %"class.courgette::DifferenceEstimator::Subject"*** %9 to i64*
  %23 = bitcast %"class.std::__1::vector.19"* %8 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = ashr exact i64 %25, 3
  %27 = add nsw i64 %26, 1
  %28 = icmp ugt i64 %27, 2305843009213693951
  br i1 %28, label %29, label %31

29:                                               ; preds = %20
  %30 = bitcast %"class.std::__1::vector.19"* %8 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %30) #12
  unreachable

31:                                               ; preds = %20
  %32 = bitcast %"class.courgette::DifferenceEstimator::Subject"*** %11 to i64*
  %33 = sub i64 %14, %24
  %34 = ashr exact i64 %33, 3
  %35 = icmp ult i64 %34, 1152921504606846975
  br i1 %35, label %36, label %44

36:                                               ; preds = %31
  %37 = ashr exact i64 %33, 2
  %38 = icmp ult i64 %37, %27
  %39 = select i1 %38, i64 %27, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %36
  %42 = icmp ugt i64 %39, 2305843009213693951
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  tail call void @abort() #12
  unreachable

44:                                               ; preds = %41, %31
  %45 = phi i64 [ %39, %41 ], [ 2305843009213693951, %31 ]
  %46 = shl i64 %45, 3
  %47 = tail call i8* @_Znwm(i64 %46) #10
  %48 = bitcast i8* %47 to %"class.courgette::DifferenceEstimator::Subject"**
  br label %49

49:                                               ; preds = %44, %36
  %50 = phi i64 [ %45, %44 ], [ 0, %36 ]
  %51 = phi %"class.courgette::DifferenceEstimator::Subject"** [ %48, %44 ], [ null, %36 ]
  %52 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Subject"*, %"class.courgette::DifferenceEstimator::Subject"** %51, i64 %26
  %53 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Subject"*, %"class.courgette::DifferenceEstimator::Subject"** %51, i64 %50
  %54 = ptrtoint %"class.courgette::DifferenceEstimator::Subject"** %53 to i64
  %55 = bitcast %"class.courgette::DifferenceEstimator::Subject"** %52 to i64*
  store i64 %7, i64* %55, align 8
  %56 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Subject"*, %"class.courgette::DifferenceEstimator::Subject"** %52, i64 1
  %57 = ptrtoint %"class.courgette::DifferenceEstimator::Subject"** %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %8, i64 0, i32 0, i32 0
  %59 = load %"class.courgette::DifferenceEstimator::Subject"**, %"class.courgette::DifferenceEstimator::Subject"*** %58, align 8
  %60 = load i64, i64* %22, align 8
  %61 = ptrtoint %"class.courgette::DifferenceEstimator::Subject"** %59 to i64
  %62 = sub i64 %60, %61
  %63 = ashr exact i64 %62, 3
  %64 = sub nsw i64 0, %63
  %65 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Subject"*, %"class.courgette::DifferenceEstimator::Subject"** %52, i64 %64
  %66 = ptrtoint %"class.courgette::DifferenceEstimator::Subject"** %65 to i64
  %67 = icmp sgt i64 %62, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %49
  %69 = bitcast %"class.courgette::DifferenceEstimator::Subject"** %65 to i8*
  %70 = bitcast %"class.courgette::DifferenceEstimator::Subject"** %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 %62, i1 false) #11
  %71 = load %"class.courgette::DifferenceEstimator::Subject"**, %"class.courgette::DifferenceEstimator::Subject"*** %58, align 8
  br label %72

72:                                               ; preds = %68, %49
  %73 = phi %"class.courgette::DifferenceEstimator::Subject"** [ %59, %49 ], [ %71, %68 ]
  store i64 %66, i64* %23, align 8
  store i64 %57, i64* %22, align 8
  store i64 %54, i64* %32, align 8
  %74 = icmp eq %"class.courgette::DifferenceEstimator::Subject"** %73, null
  br i1 %74, label %77, label %75

75:                                               ; preds = %72
  %76 = bitcast %"class.courgette::DifferenceEstimator::Subject"** %73 to i8*
  tail call void @_ZdlPv(i8* %76) #10
  br label %77

77:                                               ; preds = %15, %72, %75
  %78 = bitcast i8* %3 to %"class.courgette::DifferenceEstimator::Subject"*
  ret %"class.courgette::DifferenceEstimator::Subject"* %78
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN9courgette19DifferenceEstimator7MeasureEPNS0_4BaseEPNS0_7SubjectE(%"class.courgette::DifferenceEstimator"* nocapture readnone, %"class.courgette::DifferenceEstimator::Base"* nocapture readonly, %"class.courgette::DifferenceEstimator::Subject"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Subject", %"class.courgette::DifferenceEstimator::Subject"* %2, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 3
  br i1 %6, label %7, label %84

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Subject", %"class.courgette::DifferenceEstimator::Subject"* %2, i64 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 %5
  %11 = getelementptr inbounds i8, i8* %10, i64 -3
  %12 = icmp ult i8* %9, %11
  br i1 %12, label %13, label %84

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base", %"class.courgette::DifferenceEstimator::Base"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  %17 = tail call i64 @llvm.ctpop.i64(i64 %15) #11, !range !2
  %18 = icmp ugt i64 %17, 1
  %19 = add i64 %15, 549755813887
  %20 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base", %"class.courgette::DifferenceEstimator::Base"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = add i64 %15, -1
  br label %22

22:                                               ; preds = %75, %13
  %23 = phi i8* [ %9, %13 ], [ %80, %75 ]
  %24 = phi i64 [ 0, %13 ], [ %79, %75 ]
  %25 = bitcast i8* %23 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = mul nuw nsw i64 %27, 54
  %29 = lshr i64 %27, 17
  %30 = add nuw nsw i64 %28, %29
  %31 = lshr i64 %27, 23
  %32 = xor i64 %30, %31
  br i1 %16, label %75, label %33

33:                                               ; preds = %22
  br i1 %18, label %36, label %34

34:                                               ; preds = %33
  %35 = and i64 %32, %19
  br label %40

36:                                               ; preds = %33
  %37 = icmp ult i64 %32, %15
  br i1 %37, label %40, label %38

38:                                               ; preds = %36
  %39 = urem i64 %32, %15
  br label %40

40:                                               ; preds = %38, %36, %34
  %41 = phi i64 [ %35, %34 ], [ %39, %38 ], [ %32, %36 ]
  %42 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %20, align 8
  %43 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %42, i64 %41
  %44 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %43, align 8
  %45 = icmp eq %"struct.std::__1::__hash_node_base"* %44, null
  br i1 %45, label %75, label %46

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %44, i64 0, i32 0
  %48 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %47, align 8
  %49 = icmp eq %"struct.std::__1::__hash_node_base"* %48, null
  br i1 %49, label %75, label %50

50:                                               ; preds = %46, %71
  %51 = phi %"struct.std::__1::__hash_node_base"* [ %73, %71 ], [ %48, %46 ]
  %52 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %51, i64 1
  %53 = bitcast %"struct.std::__1::__hash_node_base"* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, %32
  br i1 %55, label %66, label %56

56:                                               ; preds = %50
  br i1 %18, label %59, label %57

57:                                               ; preds = %56
  %58 = and i64 %54, %21
  br label %63

59:                                               ; preds = %56
  %60 = icmp ult i64 %54, %15
  br i1 %60, label %63, label %61

61:                                               ; preds = %59
  %62 = urem i64 %54, %15
  br label %63

63:                                               ; preds = %61, %59, %57
  %64 = phi i64 [ %58, %57 ], [ %62, %61 ], [ %54, %59 ]
  %65 = icmp eq i64 %64, %41
  br i1 %65, label %71, label %75

66:                                               ; preds = %50
  %67 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %51, i64 2
  %68 = bitcast %"struct.std::__1::__hash_node_base"* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, %32
  br i1 %70, label %75, label %71

71:                                               ; preds = %66, %63
  %72 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %51, i64 0, i32 0
  %73 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %72, align 8
  %74 = icmp eq %"struct.std::__1::__hash_node_base"* %73, null
  br i1 %74, label %75, label %50

75:                                               ; preds = %63, %66, %71, %22, %40, %46
  %76 = phi %"struct.std::__1::__hash_node_base"* [ null, %40 ], [ null, %22 ], [ null, %46 ], [ %51, %66 ], [ null, %71 ], [ null, %63 ]
  %77 = icmp eq %"struct.std::__1::__hash_node_base"* %76, null
  %78 = zext i1 %77 to i64
  %79 = add i64 %24, %78
  %80 = getelementptr inbounds i8, i8* %23, i64 1
  %81 = icmp eq i8* %80, %11
  br i1 %81, label %82, label %22

82:                                               ; preds = %75
  %83 = icmp eq i64 %79, 0
  br i1 %83, label %84, label %95

84:                                               ; preds = %7, %3, %82
  %85 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base", %"class.courgette::DifferenceEstimator::Base"* %1, i64 0, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, %5
  br i1 %87, label %88, label %95

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Base", %"class.courgette::DifferenceEstimator::Base"* %1, i64 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds %"class.courgette::DifferenceEstimator::Subject", %"class.courgette::DifferenceEstimator::Subject"* %2, i64 0, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = tail call i32 @bcmp(i8* %90, i8* %92, i64 %5) #11
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %98, label %95

95:                                               ; preds = %84, %88, %82
  %96 = phi i64 [ 0, %88 ], [ %79, %82 ], [ 0, %84 ]
  %97 = add i64 %96, 1
  br label %98

98:                                               ; preds = %88, %95
  %99 = phi i64 [ %97, %95 ], [ 0, %88 ]
  ret i64 %99
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE25__emplace_unique_key_argsImJRKmEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeImPvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %52, label %8

8:                                                ; preds = %3
  %9 = tail call i64 @llvm.ctpop.i64(i64 %6) #11, !range !2
  %10 = icmp ugt i64 %9, 1
  br i1 %10, label %14, label %11

11:                                               ; preds = %8
  %12 = add i64 %6, -1
  %13 = and i64 %12, %4
  br label %18

14:                                               ; preds = %8
  %15 = icmp ult i64 %4, %6
  br i1 %15, label %18, label %16

16:                                               ; preds = %14
  %17 = urem i64 %4, %6
  br label %18

18:                                               ; preds = %11, %14, %16
  %19 = phi i64 [ %13, %11 ], [ %17, %16 ], [ %4, %14 ]
  %20 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %20, align 8
  %22 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %21, i64 %19
  %23 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %22, align 8
  %24 = icmp eq %"struct.std::__1::__hash_node_base"* %23, null
  br i1 %24, label %52, label %25

25:                                               ; preds = %18
  %26 = add i64 %6, -1
  br label %27

27:                                               ; preds = %25, %47
  %28 = phi %"struct.std::__1::__hash_node_base"* [ %30, %47 ], [ %23, %25 ]
  %29 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %28, i64 0, i32 0
  %30 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %29, align 8
  %31 = icmp eq %"struct.std::__1::__hash_node_base"* %30, null
  br i1 %31, label %52, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %30, i64 1
  %34 = bitcast %"struct.std::__1::__hash_node_base"* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %35, %4
  br i1 %36, label %47, label %37

37:                                               ; preds = %32
  br i1 %10, label %40, label %38

38:                                               ; preds = %37
  %39 = and i64 %35, %26
  br label %44

40:                                               ; preds = %37
  %41 = icmp ult i64 %35, %6
  br i1 %41, label %44, label %42

42:                                               ; preds = %40
  %43 = urem i64 %35, %6
  br label %44

44:                                               ; preds = %38, %40, %42
  %45 = phi i64 [ %39, %38 ], [ %43, %42 ], [ %35, %40 ]
  %46 = icmp eq i64 %45, %19
  br i1 %46, label %47, label %52

47:                                               ; preds = %32, %44
  %48 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %30, i64 2
  %49 = bitcast %"struct.std::__1::__hash_node_base"* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = icmp eq i64 %50, %4
  br i1 %51, label %139, label %27

52:                                               ; preds = %27, %44, %18, %3
  %53 = phi i64 [ %19, %18 ], [ -6148914691236517206, %3 ], [ %19, %44 ], [ %19, %27 ]
  %54 = tail call i8* @_Znwm(i64 24) #10, !noalias !3
  %55 = getelementptr inbounds i8, i8* %54, i64 16
  %56 = bitcast i8* %55 to i64*
  %57 = load i64, i64* %2, align 8, !noalias !3
  store i64 %57, i64* %56, align 8, !noalias !3
  %58 = getelementptr inbounds i8, i8* %54, i64 8
  %59 = bitcast i8* %58 to i64*
  store i64 %4, i64* %59, align 8, !noalias !3
  %60 = bitcast i8* %54 to %"struct.std::__1::__hash_node_base"**
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %60, align 8, !noalias !3
  %61 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 1
  %64 = uitofp i64 %63 to float
  %65 = uitofp i64 %6 to float
  %66 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %67 = load float, float* %66, align 4
  %68 = fmul float %67, %65
  %69 = fcmp olt float %68, %64
  %70 = or i1 %7, %69
  br i1 %70, label %71, label %94

71:                                               ; preds = %52
  %72 = shl i64 %6, 1
  %73 = icmp ult i64 %6, 3
  %74 = tail call i64 @llvm.ctpop.i64(i64 %6) #11, !range !2
  %75 = icmp ugt i64 %74, 1
  %76 = or i1 %73, %75
  %77 = zext i1 %76 to i64
  %78 = or i64 %72, %77
  %79 = fdiv float %64, %67
  %80 = tail call float @llvm.ceil.f32(float %79) #11
  %81 = fptoui float %80 to i64
  %82 = icmp ult i64 %78, %81
  %83 = select i1 %82, i64 %81, i64 %78
  tail call void @_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE6rehashEm(%"class.std::__1::__hash_table"* %0, i64 %83)
  %84 = load i64, i64* %5, align 8
  %85 = tail call i64 @llvm.ctpop.i64(i64 %84) #11, !range !2
  %86 = icmp ugt i64 %85, 1
  br i1 %86, label %90, label %87

87:                                               ; preds = %71
  %88 = add i64 %84, -1
  %89 = and i64 %88, %4
  br label %94

90:                                               ; preds = %71
  %91 = icmp ult i64 %4, %84
  br i1 %91, label %94, label %92

92:                                               ; preds = %90
  %93 = urem i64 %4, %84
  br label %94

94:                                               ; preds = %92, %90, %87, %52
  %95 = phi i64 [ %6, %52 ], [ %84, %87 ], [ %84, %90 ], [ %84, %92 ]
  %96 = phi i64 [ %53, %52 ], [ %89, %87 ], [ %4, %90 ], [ %93, %92 ]
  %97 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %98 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %97, align 8
  %99 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %98, i64 %96
  %100 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %99, align 8
  %101 = icmp eq %"struct.std::__1::__hash_node_base"* %100, null
  br i1 %101, label %102, label %128

102:                                              ; preds = %94
  %103 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %104 = bitcast %"struct.std::__1::__hash_node_base"* %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast i8* %54 to i64*
  store i64 %105, i64* %106, align 8
  %107 = bitcast %"struct.std::__1::__hash_node_base"* %103 to i8**
  store i8* %54, i8** %107, align 8
  store %"struct.std::__1::__hash_node_base"* %103, %"struct.std::__1::__hash_node_base"** %99, align 8
  %108 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %60, align 8
  %109 = icmp eq %"struct.std::__1::__hash_node_base"* %108, null
  br i1 %109, label %135, label %110

110:                                              ; preds = %102
  %111 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %108, i64 1
  %112 = bitcast %"struct.std::__1::__hash_node_base"* %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = tail call i64 @llvm.ctpop.i64(i64 %95) #11, !range !2
  %115 = icmp ugt i64 %114, 1
  br i1 %115, label %119, label %116

116:                                              ; preds = %110
  %117 = add i64 %95, -1
  %118 = and i64 %113, %117
  br label %123

119:                                              ; preds = %110
  %120 = icmp ult i64 %113, %95
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = urem i64 %113, %95
  br label %123

123:                                              ; preds = %116, %119, %121
  %124 = phi i64 [ %118, %116 ], [ %122, %121 ], [ %113, %119 ]
  %125 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %97, align 8
  %126 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %125, i64 %124
  %127 = bitcast %"struct.std::__1::__hash_node_base"** %126 to i8**
  br label %133

128:                                              ; preds = %94
  %129 = bitcast %"struct.std::__1::__hash_node_base"* %100 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast i8* %54 to i64*
  store i64 %130, i64* %131, align 8
  %132 = bitcast %"struct.std::__1::__hash_node_base"* %100 to i8**
  br label %133

133:                                              ; preds = %123, %128
  %134 = phi i8** [ %132, %128 ], [ %127, %123 ]
  store i8* %54, i8** %134, align 8
  br label %135

135:                                              ; preds = %133, %102
  %136 = bitcast i8* %54 to %"struct.std::__1::__hash_node_base"*
  %137 = load i64, i64* %61, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %61, align 8
  br label %139

139:                                              ; preds = %47, %135
  %140 = phi i8 [ 1, %135 ], [ 0, %47 ]
  %141 = phi %"struct.std::__1::__hash_node_base"* [ %136, %135 ], [ %30, %47 ]
  %142 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } undef, %"struct.std::__1::__hash_node_base"* %141, 0
  %143 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } %142, i8 %140, 1
  ret { %"struct.std::__1::__hash_node_base"*, i8 } %143
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE6rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !2
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #11
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #11, !range !2
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #11
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #11, !range !2
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #11
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE8__rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %134, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 2305843009213693951
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @abort() #12
  unreachable

8:                                                ; preds = %5
  %9 = shl i64 %1, 3
  %10 = tail call i8* @_Znwm(i64 %9) #10
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %13 = bitcast %"class.std::__1::__hash_table"* %0 to i8**
  store i8* %10, i8** %13, align 8
  %14 = icmp eq %"struct.std::__1::__hash_node_base"** %12, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %8
  %16 = bitcast %"struct.std::__1::__hash_node_base"** %12 to i8*
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %15, %8
  %18 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %18, align 8
  %19 = add i64 %1, -1
  %20 = and i64 %1, 3
  %21 = icmp ult i64 %19, 3
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = sub i64 %1, %20
  br label %40

24:                                               ; preds = %40, %17
  %25 = phi i64 [ 0, %17 ], [ %54, %40 ]
  %26 = icmp eq i64 %20, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %24, %27
  %28 = phi i64 [ %32, %27 ], [ %25, %24 ]
  %29 = phi i64 [ %33, %27 ], [ %20, %24 ]
  %30 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %31 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %30, i64 %28
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %31, align 8
  %32 = add nuw i64 %28, 1
  %33 = add i64 %29, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %27, !llvm.loop !6

35:                                               ; preds = %27, %24
  %36 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %37 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %36, i64 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %37, align 8
  %39 = icmp eq %"struct.std::__1::__hash_node_base"* %38, null
  br i1 %39, label %142, label %57

40:                                               ; preds = %40, %22
  %41 = phi i64 [ 0, %22 ], [ %54, %40 ]
  %42 = phi i64 [ %23, %22 ], [ %55, %40 ]
  %43 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %43, i64 %41
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %44, align 8
  %45 = or i64 %41, 1
  %46 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %46, i64 %45
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %47, align 8
  %48 = or i64 %41, 2
  %49 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %49, i64 %48
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %50, align 8
  %51 = or i64 %41, 3
  %52 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %52, i64 %51
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %53, align 8
  %54 = add nuw i64 %41, 4
  %55 = add i64 %42, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %24, label %40

57:                                               ; preds = %35
  %58 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 1
  %59 = bitcast %"struct.std::__1::__hash_node_base"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = tail call i64 @llvm.ctpop.i64(i64 %1) #11, !range !2
  %62 = icmp ugt i64 %61, 1
  br i1 %62, label %66, label %63

63:                                               ; preds = %57
  %64 = add i64 %1, -1
  %65 = and i64 %60, %64
  br label %70

66:                                               ; preds = %57
  %67 = icmp ult i64 %60, %1
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = urem i64 %60, %1
  br label %70

70:                                               ; preds = %63, %66, %68
  %71 = phi i64 [ %65, %63 ], [ %69, %68 ], [ %60, %66 ]
  %72 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %73 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %72, i64 %71
  store %"struct.std::__1::__hash_node_base"* %36, %"struct.std::__1::__hash_node_base"** %73, align 8
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 0, i32 0
  %75 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %74, align 8
  %76 = icmp eq %"struct.std::__1::__hash_node_base"* %75, null
  br i1 %76, label %142, label %77

77:                                               ; preds = %70
  %78 = add i64 %1, -1
  br label %79

79:                                               ; preds = %77, %128
  %80 = phi %"struct.std::__1::__hash_node_base"* [ %75, %77 ], [ %132, %128 ]
  %81 = phi i64 [ %71, %77 ], [ %130, %128 ]
  %82 = phi %"struct.std::__1::__hash_node_base"* [ %38, %77 ], [ %129, %128 ]
  %83 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 1
  %84 = bitcast %"struct.std::__1::__hash_node_base"* %83 to i64*
  %85 = load i64, i64* %84, align 8
  br i1 %62, label %88, label %86

86:                                               ; preds = %79
  %87 = and i64 %85, %78
  br label %92

88:                                               ; preds = %79
  %89 = icmp ult i64 %85, %1
  br i1 %89, label %92, label %90

90:                                               ; preds = %88
  %91 = urem i64 %85, %1
  br label %92

92:                                               ; preds = %86, %88, %90
  %93 = phi i64 [ %87, %86 ], [ %91, %90 ], [ %85, %88 ]
  %94 = icmp eq i64 %93, %81
  br i1 %94, label %128, label %95

95:                                               ; preds = %92
  %96 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %97 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %96, i64 %93
  %98 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %97, align 8
  %99 = icmp eq %"struct.std::__1::__hash_node_base"* %98, null
  br i1 %99, label %103, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 2
  %102 = bitcast %"struct.std::__1::__hash_node_base"* %101 to i64*
  br label %104

103:                                              ; preds = %95
  store %"struct.std::__1::__hash_node_base"* %82, %"struct.std::__1::__hash_node_base"** %97, align 8
  br label %128

104:                                              ; preds = %100, %109
  %105 = phi %"struct.std::__1::__hash_node_base"* [ %107, %109 ], [ %80, %100 ]
  %106 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 0, i32 0
  %107 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %106, align 8
  %108 = icmp eq %"struct.std::__1::__hash_node_base"* %107, null
  br i1 %108, label %115, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %107, i64 2
  %111 = bitcast %"struct.std::__1::__hash_node_base"* %110 to i64*
  %112 = load i64, i64* %102, align 8
  %113 = load i64, i64* %111, align 8
  %114 = icmp eq i64 %112, %113
  br i1 %114, label %104, label %115

115:                                              ; preds = %104, %109
  %116 = ptrtoint %"struct.std::__1::__hash_node_base"* %107 to i64
  %117 = bitcast %"struct.std::__1::__hash_node_base"* %105 to i64*
  %118 = bitcast %"struct.std::__1::__hash_node_base"* %82 to i64*
  store i64 %116, i64* %118, align 8
  %119 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %120 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %119, i64 %93
  %121 = bitcast %"struct.std::__1::__hash_node_base"** %120 to i64**
  %122 = load i64*, i64** %121, align 8
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %117, align 8
  %124 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %125 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %124, i64 %93
  %126 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %125, align 8
  %127 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %126, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %80, %"struct.std::__1::__hash_node_base"** %127, align 8
  br label %128

128:                                              ; preds = %92, %115, %103
  %129 = phi %"struct.std::__1::__hash_node_base"* [ %80, %103 ], [ %82, %115 ], [ %80, %92 ]
  %130 = phi i64 [ %93, %103 ], [ %81, %115 ], [ %81, %92 ]
  %131 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %129, i64 0, i32 0
  %132 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %131, align 8
  %133 = icmp eq %"struct.std::__1::__hash_node_base"* %132, null
  br i1 %133, label %142, label %79

134:                                              ; preds = %2
  %135 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %136 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %135, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %135, align 8
  %137 = icmp eq %"struct.std::__1::__hash_node_base"** %136, null
  br i1 %137, label %140, label %138

138:                                              ; preds = %134
  %139 = bitcast %"struct.std::__1::__hash_node_base"** %136 to i8*
  tail call void @_ZdlPv(i8* %139) #10
  br label %140

140:                                              ; preds = %134, %138
  %141 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 0, i64* %141, align 8
  br label %142

142:                                              ; preds = %128, %70, %35, %140
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE21__construct_node_hashIRKmJEEENS_10unique_ptrINS_11__hash_nodeImPvEENS_22__hash_node_destructorINS5_ISE_EEEEEEmOT_DpOT0_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__112__hash_tableImNS_4hashImEENS_8equal_toImEENS_9allocatorImEEE21__construct_node_hashIRKmJEEENS_10unique_ptrINS_11__hash_nodeImPvEENS_22__hash_node_destructorINS5_ISE_EEEEEEmOT_DpOT0_"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
