; ModuleID = '../../third_party/swiftshader/src/OpenGL/libGLESv2/IndexDataManager.cpp'
source_filename = "../../third_party/swiftshader/src/OpenGL/libGLESv2/IndexDataManager.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.es2::IndexDataManager" = type { i32 (...)**, %"class.es2::StreamingIndexBuffer"* }
%"class.es2::StreamingIndexBuffer" = type { i32 (...)**, %"class.sw::Resource"*, i64, i64 }
%"class.sw::Resource" = type { i64, %"class.sw::MutexLock", %"class.sw::Event", i32, i32, i32, i8, i8* }
%"class.sw::MutexLock" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.sw::Event" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.es2::Buffer" = type <{ %"class.gl::NamedObject", %"class.sw::Resource"*, i64, i32, i8, [3 x i8], i64, i64, i32, [4 x i8] }>
%"class.gl::NamedObject" = type { %"class.gl::Object.base", i32 }
%"class.gl::Object.base" = type <{ i32 (...)**, i32 }>
%"struct.es2::TranslatedIndexData" = type { i32, i32, i32, i32, %"class.sw::Resource"* }

$_ZN3es212computeRangeIhEEvPKT_iPjS4_PNSt3__16vectorIiNS5_9allocatorIiEEEE = comdat any

$_ZN3es212computeRangeIjEEvPKT_iPjS4_PNSt3__16vectorIiNS5_9allocatorIiEEEE = comdat any

$_ZN3es212computeRangeItEEvPKT_iPjS4_PNSt3__16vectorIiNS5_9allocatorIiEEEE = comdat any

@_ZTVN3es216IndexDataManagerE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.es2::IndexDataManager"*)* @_ZN3es216IndexDataManagerD2Ev to i8*), i8* bitcast (void (%"class.es2::IndexDataManager"*)* @_ZN3es216IndexDataManagerD0Ev to i8*)] }, align 8
@_ZTVN3es220StreamingIndexBufferE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.es2::StreamingIndexBuffer"*)* @_ZN3es220StreamingIndexBufferD2Ev to i8*), i8* bitcast (void (%"class.es2::StreamingIndexBuffer"*)* @_ZN3es220StreamingIndexBufferD0Ev to i8*)] }, align 8
@switch.table._ZN3es211copyIndicesEjjRKNSt3__16vectorIiNS0_9allocatorIiEEEEPKviPv = private unnamed_addr constant [5 x i64] [i64 1, i64 0, i64 2, i64 0, i64 4], align 8
@switch.table._ZN3es216IndexDataManager8typeSizeEj = private unnamed_addr constant [5 x i64] [i64 1, i64 2, i64 2, i64 2, i64 4], align 8

@_ZN3es216IndexDataManagerC1Ev = hidden unnamed_addr alias void (%"class.es2::IndexDataManager"*), void (%"class.es2::IndexDataManager"*)* @_ZN3es216IndexDataManagerC2Ev
@_ZN3es216IndexDataManagerD1Ev = hidden unnamed_addr alias void (%"class.es2::IndexDataManager"*), void (%"class.es2::IndexDataManager"*)* @_ZN3es216IndexDataManagerD2Ev
@_ZN3es220StreamingIndexBufferC1Em = hidden unnamed_addr alias void (%"class.es2::StreamingIndexBuffer"*, i64), void (%"class.es2::StreamingIndexBuffer"*, i64)* @_ZN3es220StreamingIndexBufferC2Em
@_ZN3es220StreamingIndexBufferD1Ev = hidden unnamed_addr alias void (%"class.es2::StreamingIndexBuffer"*), void (%"class.es2::StreamingIndexBuffer"*)* @_ZN3es220StreamingIndexBufferD2Ev

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es216IndexDataManagerC2Ev(%"class.es2::IndexDataManager"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::IndexDataManager", %"class.es2::IndexDataManager"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3es216IndexDataManagerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = tail call i8* @_Znwm(i64 32) #10
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3es220StreamingIndexBufferE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = getelementptr inbounds i8, i8* %3, i64 16
  %7 = bitcast i8* %6 to i64*
  store i64 16384, i64* %7, align 8
  %8 = tail call i8* @_Znwm(i64 168) #10
  %9 = bitcast i8* %8 to %"class.sw::Resource"*
  tail call void @_ZN2sw8ResourceC1Em(%"class.sw::Resource"* nonnull %9, i64 16400) #11
  %10 = bitcast i8* %5 to i8**
  store i8* %8, i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %3, i64 24
  %12 = bitcast i8* %11 to i64*
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %"class.es2::IndexDataManager", %"class.es2::IndexDataManager"* %0, i64 0, i32 1
  %14 = bitcast %"class.es2::StreamingIndexBuffer"** %13 to i8**
  store i8* %3, i8** %14, align 8
  ret void
}

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es216IndexDataManagerD2Ev(%"class.es2::IndexDataManager"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::IndexDataManager", %"class.es2::IndexDataManager"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3es216IndexDataManagerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.es2::IndexDataManager", %"class.es2::IndexDataManager"* %0, i64 0, i32 1
  %4 = load %"class.es2::StreamingIndexBuffer"*, %"class.es2::StreamingIndexBuffer"** %3, align 8
  %5 = icmp eq %"class.es2::StreamingIndexBuffer"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.es2::StreamingIndexBuffer"* %4 to void (%"class.es2::StreamingIndexBuffer"*)***
  %8 = load void (%"class.es2::StreamingIndexBuffer"*)**, void (%"class.es2::StreamingIndexBuffer"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.es2::StreamingIndexBuffer"*)*, void (%"class.es2::StreamingIndexBuffer"*)** %8, i64 1
  %10 = load void (%"class.es2::StreamingIndexBuffer"*)*, void (%"class.es2::StreamingIndexBuffer"*)** %9, align 8
  tail call void %10(%"class.es2::StreamingIndexBuffer"* nonnull %4) #11
  br label %11

11:                                               ; preds = %6, %1
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es216IndexDataManagerD0Ev(%"class.es2::IndexDataManager"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::IndexDataManager", %"class.es2::IndexDataManager"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3es216IndexDataManagerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.es2::IndexDataManager", %"class.es2::IndexDataManager"* %0, i64 0, i32 1
  %4 = load %"class.es2::StreamingIndexBuffer"*, %"class.es2::StreamingIndexBuffer"** %3, align 8
  %5 = icmp eq %"class.es2::StreamingIndexBuffer"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.es2::StreamingIndexBuffer"* %4 to void (%"class.es2::StreamingIndexBuffer"*)***
  %8 = load void (%"class.es2::StreamingIndexBuffer"*)**, void (%"class.es2::StreamingIndexBuffer"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.es2::StreamingIndexBuffer"*)*, void (%"class.es2::StreamingIndexBuffer"*)** %8, i64 1
  %10 = load void (%"class.es2::StreamingIndexBuffer"*)*, void (%"class.es2::StreamingIndexBuffer"*)** %9, align 8
  tail call void %10(%"class.es2::StreamingIndexBuffer"* nonnull %4) #11
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.es2::IndexDataManager"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es211copyIndicesEjPKviPv(i32, i8* nocapture readonly, i32, i8* nocapture) local_unnamed_addr #0 {
  switch i32 %0, label %15 [
    i32 5121, label %5
    i32 5125, label %7
    i32 5123, label %10
  ]

5:                                                ; preds = %4
  %6 = sext i32 %2 to i64
  br label %13

7:                                                ; preds = %4
  %8 = sext i32 %2 to i64
  %9 = shl nsw i64 %8, 2
  br label %13

10:                                               ; preds = %4
  %11 = sext i32 %2 to i64
  %12 = shl nsw i64 %11, 1
  br label %13

13:                                               ; preds = %5, %10, %7
  %14 = phi i64 [ %9, %7 ], [ %12, %10 ], [ %6, %5 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %1, i64 %14, i1 false)
  br label %15

15:                                               ; preds = %13, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es211copyIndicesEjjRKNSt3__16vectorIiNS0_9allocatorIiEEEEPKviPv(i32, i32, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), i8* nocapture readonly, i32, i8* nocapture) local_unnamed_addr #0 {
  %7 = add i32 %1, -5121
  %8 = icmp ult i32 %7, 5
  br i1 %8, label %9, label %13

9:                                                ; preds = %6
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds [5 x i64], [5 x i64]* @switch.table._ZN3es211copyIndicesEjjRKNSt3__16vectorIiNS0_9allocatorIiEEEEPKviPv, i64 0, i64 %10
  %12 = load i64, i64* %11, align 8
  br label %13

13:                                               ; preds = %9, %6
  %14 = phi i64 [ 0, %6 ], [ %12, %9 ]
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector"* %2 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = ashr exact i64 %20, 2
  %22 = inttoptr i64 %19 to i32*
  %23 = inttoptr i64 %17 to i32*
  switch i32 %0, label %341 [
    i32 3, label %33
    i32 2, label %30
    i32 5, label %27
    i32 6, label %24
    i32 4, label %39
    i32 0, label %36
    i32 1, label %36
  ]

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %26 = shl nuw nsw i64 %14, 1
  br label %93

27:                                               ; preds = %13
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %29 = mul nuw nsw i64 %14, 3
  br label %150

30:                                               ; preds = %13
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %32 = shl nuw nsw i64 %14, 1
  br label %224

33:                                               ; preds = %13
  %34 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %35 = shl nuw nsw i64 %14, 1
  br label %285

36:                                               ; preds = %13, %13
  %37 = icmp eq i32 %0, 1
  %38 = select i1 %37, i32 2, i32 1
  br label %39

39:                                               ; preds = %13, %36
  %40 = phi i32 [ %38, %36 ], [ 3, %13 ]
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  br label %42

42:                                               ; preds = %86, %39
  %43 = phi i32* [ %23, %39 ], [ %92, %86 ]
  %44 = phi i32* [ %22, %39 ], [ %91, %86 ]
  %45 = phi i64 [ 0, %39 ], [ %84, %86 ]
  %46 = phi i8* [ %5, %39 ], [ %83, %86 ]
  %47 = phi i8* [ %3, %39 ], [ %90, %86 ]
  %48 = icmp eq i32* %44, %43
  %49 = ptrtoint i32* %43 to i64
  %50 = ptrtoint i32* %44 to i64
  br i1 %48, label %73, label %51

51:                                               ; preds = %42
  %52 = icmp eq i64 %45, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %51
  %54 = load i32, i32* %44, align 4
  br label %73

55:                                               ; preds = %51
  %56 = sub i64 %49, %50
  %57 = ashr exact i64 %56, 2
  %58 = icmp eq i64 %57, %45
  br i1 %58, label %59, label %65

59:                                               ; preds = %55
  %60 = add i64 %45, -1
  %61 = getelementptr inbounds i32, i32* %44, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = xor i32 %62, -1
  %64 = add i32 %63, %4
  br label %73

65:                                               ; preds = %55
  %66 = getelementptr inbounds i32, i32* %44, i64 %45
  %67 = load i32, i32* %66, align 4
  %68 = add i64 %45, -1
  %69 = getelementptr inbounds i32, i32* %44, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = xor i32 %70, -1
  %72 = add i32 %67, %71
  br label %73

73:                                               ; preds = %42, %53, %59, %65
  %74 = phi i32 [ %54, %53 ], [ %64, %59 ], [ %72, %65 ], [ %4, %42 ]
  %75 = srem i32 %74, %40
  %76 = sub i32 %74, %75
  %77 = sext i32 %76 to i64
  %78 = mul nsw i64 %14, %77
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %47, i64 %78, i1 false)
  %81 = getelementptr inbounds i8, i8* %46, i64 %78
  br label %82

82:                                               ; preds = %73, %80
  %83 = phi i8* [ %81, %80 ], [ %46, %73 ]
  %84 = add i64 %45, 1
  %85 = icmp ugt i64 %84, %21
  br i1 %85, label %341, label %86

86:                                               ; preds = %82
  %87 = add nsw i32 %74, 1
  %88 = sext i32 %87 to i64
  %89 = mul nsw i64 %14, %88
  %90 = getelementptr inbounds i8, i8* %47, i64 %89
  %91 = load i32*, i32** %41, align 8
  %92 = load i32*, i32** %15, align 8
  br label %42

93:                                               ; preds = %134, %24
  %94 = phi i32* [ %23, %24 ], [ %140, %134 ]
  %95 = phi i32* [ %22, %24 ], [ %139, %134 ]
  %96 = phi i64 [ 0, %24 ], [ %132, %134 ]
  %97 = phi i8* [ %5, %24 ], [ %131, %134 ]
  %98 = phi i8* [ %3, %24 ], [ %138, %134 ]
  %99 = icmp eq i32* %95, %94
  %100 = ptrtoint i32* %94 to i64
  %101 = ptrtoint i32* %95 to i64
  br i1 %99, label %124, label %102

102:                                              ; preds = %93
  %103 = icmp eq i64 %96, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %102
  %105 = load i32, i32* %95, align 4
  br label %124

106:                                              ; preds = %102
  %107 = sub i64 %100, %101
  %108 = ashr exact i64 %107, 2
  %109 = icmp eq i64 %108, %96
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = add i64 %96, -1
  %112 = getelementptr inbounds i32, i32* %95, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = xor i32 %113, -1
  %115 = add i32 %114, %4
  br label %124

116:                                              ; preds = %106
  %117 = getelementptr inbounds i32, i32* %95, i64 %96
  %118 = load i32, i32* %117, align 4
  %119 = add i64 %96, -1
  %120 = getelementptr inbounds i32, i32* %95, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = xor i32 %121, -1
  %123 = add i32 %118, %122
  br label %124

124:                                              ; preds = %93, %104, %110, %116
  %125 = phi i32 [ %105, %104 ], [ %115, %110 ], [ %123, %116 ], [ %4, %93 ]
  %126 = add i32 %125, -2
  %127 = icmp sgt i32 %126, 0
  br i1 %127, label %128, label %130

128:                                              ; preds = %124
  %129 = zext i32 %126 to i64
  br label %141

130:                                              ; preds = %141, %124
  %131 = phi i8* [ %97, %124 ], [ %148, %141 ]
  %132 = add i64 %96, 1
  %133 = icmp ugt i64 %132, %21
  br i1 %133, label %341, label %134

134:                                              ; preds = %130
  %135 = add nsw i32 %125, 1
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %14, %136
  %138 = getelementptr inbounds i8, i8* %98, i64 %137
  %139 = load i32*, i32** %25, align 8
  %140 = load i32*, i32** %15, align 8
  br label %93

141:                                              ; preds = %141, %128
  %142 = phi i64 [ 0, %128 ], [ %145, %141 ]
  %143 = phi i8* [ %97, %128 ], [ %148, %141 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %143, i8* align 1 %98, i64 %14, i1 false)
  %144 = getelementptr inbounds i8, i8* %143, i64 %14
  %145 = add nuw nsw i64 %142, 1
  %146 = mul nuw nsw i64 %14, %145
  %147 = getelementptr inbounds i8, i8* %98, i64 %146
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %144, i8* align 1 %147, i64 %26, i1 false)
  %148 = getelementptr inbounds i8, i8* %144, i64 %26
  %149 = icmp eq i64 %145, %129
  br i1 %149, label %130, label %141

150:                                              ; preds = %191, %27
  %151 = phi i32* [ %23, %27 ], [ %197, %191 ]
  %152 = phi i32* [ %22, %27 ], [ %196, %191 ]
  %153 = phi i64 [ 0, %27 ], [ %189, %191 ]
  %154 = phi i8* [ %5, %27 ], [ %188, %191 ]
  %155 = phi i8* [ %3, %27 ], [ %195, %191 ]
  %156 = icmp eq i32* %152, %151
  %157 = ptrtoint i32* %151 to i64
  %158 = ptrtoint i32* %152 to i64
  br i1 %156, label %181, label %159

159:                                              ; preds = %150
  %160 = icmp eq i64 %153, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %159
  %162 = load i32, i32* %152, align 4
  br label %181

163:                                              ; preds = %159
  %164 = sub i64 %157, %158
  %165 = ashr exact i64 %164, 2
  %166 = icmp eq i64 %165, %153
  br i1 %166, label %167, label %173

167:                                              ; preds = %163
  %168 = add i64 %153, -1
  %169 = getelementptr inbounds i32, i32* %152, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = xor i32 %170, -1
  %172 = add i32 %171, %4
  br label %181

173:                                              ; preds = %163
  %174 = getelementptr inbounds i32, i32* %152, i64 %153
  %175 = load i32, i32* %174, align 4
  %176 = add i64 %153, -1
  %177 = getelementptr inbounds i32, i32* %152, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = xor i32 %178, -1
  %180 = add i32 %175, %179
  br label %181

181:                                              ; preds = %150, %161, %167, %173
  %182 = phi i32 [ %162, %161 ], [ %172, %167 ], [ %180, %173 ], [ %4, %150 ]
  %183 = add i32 %182, -2
  %184 = icmp sgt i32 %183, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %181
  %186 = zext i32 %183 to i64
  br label %198

187:                                              ; preds = %220, %181
  %188 = phi i8* [ %154, %181 ], [ %222, %220 ]
  %189 = add i64 %153, 1
  %190 = icmp ugt i64 %189, %21
  br i1 %190, label %341, label %191

191:                                              ; preds = %187
  %192 = add nsw i32 %182, 1
  %193 = sext i32 %192 to i64
  %194 = mul nsw i64 %14, %193
  %195 = getelementptr inbounds i8, i8* %155, i64 %194
  %196 = load i32*, i32** %28, align 8
  %197 = load i32*, i32** %15, align 8
  br label %150

198:                                              ; preds = %220, %185
  %199 = phi i64 [ 0, %185 ], [ %221, %220 ]
  %200 = phi i8* [ %154, %185 ], [ %222, %220 ]
  %201 = and i64 %199, 1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %215, label %203

203:                                              ; preds = %198
  %204 = add nuw nsw i64 %199, 1
  %205 = mul nuw nsw i64 %14, %204
  %206 = getelementptr inbounds i8, i8* %155, i64 %205
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %200, i8* align 1 %206, i64 %14, i1 false)
  %207 = getelementptr inbounds i8, i8* %200, i64 %14
  %208 = mul nuw nsw i64 %14, %199
  %209 = getelementptr inbounds i8, i8* %155, i64 %208
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %207, i8* align 1 %209, i64 %14, i1 false)
  %210 = getelementptr inbounds i8, i8* %207, i64 %14
  %211 = add nuw nsw i64 %199, 2
  %212 = mul nuw nsw i64 %14, %211
  %213 = getelementptr inbounds i8, i8* %155, i64 %212
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %210, i8* align 1 %213, i64 %14, i1 false)
  %214 = getelementptr inbounds i8, i8* %210, i64 %14
  br label %220

215:                                              ; preds = %198
  %216 = mul nuw nsw i64 %14, %199
  %217 = getelementptr inbounds i8, i8* %155, i64 %216
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %200, i8* align 1 %217, i64 %29, i1 false)
  %218 = getelementptr inbounds i8, i8* %200, i64 %29
  %219 = add nuw nsw i64 %199, 1
  br label %220

220:                                              ; preds = %203, %215
  %221 = phi i64 [ %204, %203 ], [ %219, %215 ]
  %222 = phi i8* [ %214, %203 ], [ %218, %215 ]
  %223 = icmp eq i64 %221, %186
  br i1 %223, label %187, label %198

224:                                              ; preds = %278, %30
  %225 = phi i32* [ %23, %30 ], [ %284, %278 ]
  %226 = phi i32* [ %22, %30 ], [ %283, %278 ]
  %227 = phi i64 [ 0, %30 ], [ %276, %278 ]
  %228 = phi i8* [ %5, %30 ], [ %275, %278 ]
  %229 = phi i8* [ %3, %30 ], [ %282, %278 ]
  %230 = icmp eq i32* %226, %225
  %231 = ptrtoint i32* %225 to i64
  %232 = ptrtoint i32* %226 to i64
  br i1 %230, label %255, label %233

233:                                              ; preds = %224
  %234 = icmp eq i64 %227, 0
  br i1 %234, label %235, label %237

235:                                              ; preds = %233
  %236 = load i32, i32* %226, align 4
  br label %255

237:                                              ; preds = %233
  %238 = sub i64 %231, %232
  %239 = ashr exact i64 %238, 2
  %240 = icmp eq i64 %239, %227
  br i1 %240, label %241, label %247

241:                                              ; preds = %237
  %242 = add i64 %227, -1
  %243 = getelementptr inbounds i32, i32* %226, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = xor i32 %244, -1
  %246 = add i32 %245, %4
  br label %255

247:                                              ; preds = %237
  %248 = getelementptr inbounds i32, i32* %226, i64 %227
  %249 = load i32, i32* %248, align 4
  %250 = add i64 %227, -1
  %251 = getelementptr inbounds i32, i32* %226, i64 %250
  %252 = load i32, i32* %251, align 4
  %253 = xor i32 %252, -1
  %254 = add i32 %249, %253
  br label %255

255:                                              ; preds = %224, %235, %241, %247
  %256 = phi i32 [ %236, %235 ], [ %246, %241 ], [ %254, %247 ], [ %4, %224 ]
  %257 = icmp sgt i32 %256, 1
  br i1 %257, label %258, label %274

258:                                              ; preds = %255
  %259 = add nsw i32 %256, -1
  %260 = sext i32 %259 to i64
  %261 = mul nsw i64 %14, %260
  %262 = getelementptr inbounds i8, i8* %229, i64 %261
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %228, i8* align 1 %262, i64 %14, i1 false)
  %263 = getelementptr inbounds i8, i8* %228, i64 %14
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %263, i8* align 1 %229, i64 %14, i1 false)
  %264 = getelementptr inbounds i8, i8* %263, i64 %14
  %265 = zext i32 %259 to i64
  br label %266

266:                                              ; preds = %266, %258
  %267 = phi i64 [ 0, %258 ], [ %272, %266 ]
  %268 = phi i8* [ %264, %258 ], [ %271, %266 ]
  %269 = mul nuw nsw i64 %14, %267
  %270 = getelementptr inbounds i8, i8* %229, i64 %269
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %268, i8* align 1 %270, i64 %32, i1 false)
  %271 = getelementptr inbounds i8, i8* %268, i64 %32
  %272 = add nuw nsw i64 %267, 1
  %273 = icmp eq i64 %272, %265
  br i1 %273, label %274, label %266

274:                                              ; preds = %266, %255
  %275 = phi i8* [ %228, %255 ], [ %271, %266 ]
  %276 = add i64 %227, 1
  %277 = icmp ugt i64 %276, %21
  br i1 %277, label %341, label %278

278:                                              ; preds = %274
  %279 = add nsw i32 %256, 1
  %280 = sext i32 %279 to i64
  %281 = mul nsw i64 %14, %280
  %282 = getelementptr inbounds i8, i8* %229, i64 %281
  %283 = load i32*, i32** %31, align 8
  %284 = load i32*, i32** %15, align 8
  br label %224

285:                                              ; preds = %326, %33
  %286 = phi i32* [ %23, %33 ], [ %332, %326 ]
  %287 = phi i32* [ %22, %33 ], [ %331, %326 ]
  %288 = phi i64 [ 0, %33 ], [ %324, %326 ]
  %289 = phi i8* [ %5, %33 ], [ %323, %326 ]
  %290 = phi i8* [ %3, %33 ], [ %330, %326 ]
  %291 = icmp eq i32* %287, %286
  %292 = ptrtoint i32* %286 to i64
  %293 = ptrtoint i32* %287 to i64
  br i1 %291, label %316, label %294

294:                                              ; preds = %285
  %295 = icmp eq i64 %288, 0
  br i1 %295, label %296, label %298

296:                                              ; preds = %294
  %297 = load i32, i32* %287, align 4
  br label %316

298:                                              ; preds = %294
  %299 = sub i64 %292, %293
  %300 = ashr exact i64 %299, 2
  %301 = icmp eq i64 %300, %288
  br i1 %301, label %302, label %308

302:                                              ; preds = %298
  %303 = add i64 %288, -1
  %304 = getelementptr inbounds i32, i32* %287, i64 %303
  %305 = load i32, i32* %304, align 4
  %306 = xor i32 %305, -1
  %307 = add i32 %306, %4
  br label %316

308:                                              ; preds = %298
  %309 = getelementptr inbounds i32, i32* %287, i64 %288
  %310 = load i32, i32* %309, align 4
  %311 = add i64 %288, -1
  %312 = getelementptr inbounds i32, i32* %287, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = xor i32 %313, -1
  %315 = add i32 %310, %314
  br label %316

316:                                              ; preds = %285, %296, %302, %308
  %317 = phi i32 [ %297, %296 ], [ %307, %302 ], [ %315, %308 ], [ %4, %285 ]
  %318 = add i32 %317, -1
  %319 = icmp sgt i32 %318, 0
  br i1 %319, label %320, label %322

320:                                              ; preds = %316
  %321 = zext i32 %318 to i64
  br label %333

322:                                              ; preds = %333, %316
  %323 = phi i8* [ %289, %316 ], [ %338, %333 ]
  %324 = add i64 %288, 1
  %325 = icmp ugt i64 %324, %21
  br i1 %325, label %341, label %326

326:                                              ; preds = %322
  %327 = add nsw i32 %317, 1
  %328 = sext i32 %327 to i64
  %329 = mul nsw i64 %14, %328
  %330 = getelementptr inbounds i8, i8* %290, i64 %329
  %331 = load i32*, i32** %34, align 8
  %332 = load i32*, i32** %15, align 8
  br label %285

333:                                              ; preds = %333, %320
  %334 = phi i64 [ 0, %320 ], [ %339, %333 ]
  %335 = phi i8* [ %289, %320 ], [ %338, %333 ]
  %336 = mul nuw nsw i64 %14, %334
  %337 = getelementptr inbounds i8, i8* %290, i64 %336
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %335, i8* align 1 %337, i64 %35, i1 false)
  %338 = getelementptr inbounds i8, i8* %335, i64 %35
  %339 = add nuw nsw i64 %334, 1
  %340 = icmp eq i64 %339, %321
  br i1 %340, label %322, label %333

341:                                              ; preds = %82, %130, %187, %274, %322, %13
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es212computeRangeEjPKviPjS2_PNSt3__16vectorIiNS3_9allocatorIiEEEE(i32, i8*, i32, i32*, i32*, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  switch i32 %0, label %12 [
    i32 5121, label %7
    i32 5125, label %8
    i32 5123, label %10
  ]

7:                                                ; preds = %6
  tail call void @_ZN3es212computeRangeIhEEvPKT_iPjS4_PNSt3__16vectorIiNS5_9allocatorIiEEEE(i8* %1, i32 %2, i32* %3, i32* %4, %"class.std::__1::vector"* %5) #12
  br label %12

8:                                                ; preds = %6
  %9 = bitcast i8* %1 to i32*
  tail call void @_ZN3es212computeRangeIjEEvPKT_iPjS4_PNSt3__16vectorIiNS5_9allocatorIiEEEE(i32* %9, i32 %2, i32* %3, i32* %4, %"class.std::__1::vector"* %5) #12
  br label %12

10:                                               ; preds = %6
  %11 = bitcast i8* %1 to i16*
  tail call void @_ZN3es212computeRangeItEEvPKT_iPjS4_PNSt3__16vectorIiNS5_9allocatorIiEEEE(i16* %11, i32 %2, i32* %3, i32* %4, %"class.std::__1::vector"* %5) #12
  br label %12

12:                                               ; preds = %6, %8, %10, %7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN3es212computeRangeIhEEvPKT_iPjS4_PNSt3__16vectorIiNS5_9allocatorIiEEEE(i8*, i32, i32*, i32*, %"class.std::__1::vector"*) local_unnamed_addr #0 comdat {
  store i32 0, i32* %3, align 4
  store i32 2147483647, i32* %2, align 4
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %5
  %8 = icmp ne %"class.std::__1::vector"* %4, null
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast i32** %9 to i64*
  %12 = bitcast %"class.std::__1::vector"* %4 to i64*
  %13 = bitcast i32** %10 to i64*
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %15 = zext i32 %1 to i64
  br label %17

16:                                               ; preds = %98, %5
  ret void

17:                                               ; preds = %98, %7
  %18 = phi i64 [ 0, %7 ], [ %99, %98 ]
  %19 = getelementptr inbounds i8, i8* %0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, -1
  %22 = and i1 %8, %21
  br i1 %22, label %23, label %85

23:                                               ; preds = %17
  %24 = load i32*, i32** %9, align 8
  %25 = load i32*, i32** %10, align 8
  %26 = icmp eq i32* %24, %25
  %27 = ptrtoint i32* %25 to i64
  br i1 %26, label %32, label %28

28:                                               ; preds = %23
  %29 = trunc i64 %18 to i32
  store i32 %29, i32* %24, align 4
  %30 = getelementptr inbounds i32, i32* %24, i64 1
  %31 = ptrtoint i32* %30 to i64
  store i64 %31, i64* %11, align 8
  br label %98

32:                                               ; preds = %23
  %33 = ptrtoint i32* %24 to i64
  %34 = load i64, i64* %12, align 8
  %35 = sub i64 %33, %34
  %36 = ashr exact i64 %35, 2
  %37 = add nsw i64 %36, 1
  %38 = icmp ugt i64 %37, 4611686018427387903
  br i1 %38, label %39, label %41

39:                                               ; preds = %32
  %40 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %40) #13
  unreachable

41:                                               ; preds = %32
  %42 = sub i64 %27, %34
  %43 = ashr exact i64 %42, 2
  %44 = icmp ult i64 %43, 2305843009213693951
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = ashr exact i64 %42, 1
  %47 = icmp ult i64 %46, %37
  %48 = select i1 %47, i64 %37, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %45
  %51 = icmp ugt i64 %48, 4611686018427387903
  br i1 %51, label %52, label %53

52:                                               ; preds = %50
  tail call void @abort() #13
  unreachable

53:                                               ; preds = %50, %41
  %54 = phi i64 [ %48, %50 ], [ 4611686018427387903, %41 ]
  %55 = shl i64 %54, 2
  %56 = tail call i8* @_Znwm(i64 %55) #10
  %57 = bitcast i8* %56 to i32*
  br label %58

58:                                               ; preds = %53, %45
  %59 = phi i64 [ %54, %53 ], [ 0, %45 ]
  %60 = phi i32* [ %57, %53 ], [ null, %45 ]
  %61 = getelementptr inbounds i32, i32* %60, i64 %36
  %62 = getelementptr inbounds i32, i32* %60, i64 %59
  %63 = ptrtoint i32* %62 to i64
  %64 = trunc i64 %18 to i32
  store i32 %64, i32* %61, align 4
  %65 = getelementptr inbounds i32, i32* %61, i64 1
  %66 = ptrtoint i32* %65 to i64
  %67 = load i32*, i32** %14, align 8
  %68 = load i64, i64* %11, align 8
  %69 = ptrtoint i32* %67 to i64
  %70 = sub i64 %68, %69
  %71 = ashr exact i64 %70, 2
  %72 = sub nsw i64 0, %71
  %73 = getelementptr inbounds i32, i32* %61, i64 %72
  %74 = ptrtoint i32* %73 to i64
  %75 = icmp sgt i64 %70, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %58
  %77 = bitcast i32* %73 to i8*
  %78 = bitcast i32* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 %70, i1 false) #14
  %79 = load i32*, i32** %14, align 8
  br label %80

80:                                               ; preds = %76, %58
  %81 = phi i32* [ %67, %58 ], [ %79, %76 ]
  store i64 %74, i64* %12, align 8
  store i64 %66, i64* %11, align 8
  store i64 %63, i64* %13, align 8
  %82 = icmp eq i32* %81, null
  br i1 %82, label %98, label %83

83:                                               ; preds = %80
  %84 = bitcast i32* %81 to i8*
  tail call void @_ZdlPv(i8* %84) #10
  br label %98

85:                                               ; preds = %17
  %86 = load i32, i32* %2, align 4
  %87 = zext i8 %20 to i32
  %88 = icmp ugt i32 %86, %87
  br i1 %88, label %89, label %93

89:                                               ; preds = %85
  %90 = getelementptr inbounds i8, i8* %0, i64 %18
  store i32 %87, i32* %2, align 4
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  br label %93

93:                                               ; preds = %89, %85
  %94 = phi i32 [ %92, %89 ], [ %87, %85 ]
  %95 = load i32, i32* %3, align 4
  %96 = icmp ult i32 %95, %94
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  store i32 %94, i32* %3, align 4
  br label %98

98:                                               ; preds = %83, %80, %28, %93, %97
  %99 = add nuw nsw i64 %18, 1
  %100 = icmp eq i64 %99, %15
  br i1 %100, label %16, label %17
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN3es212computeRangeIjEEvPKT_iPjS4_PNSt3__16vectorIiNS5_9allocatorIiEEEE(i32*, i32, i32*, i32*, %"class.std::__1::vector"*) local_unnamed_addr #0 comdat {
  store i32 0, i32* %3, align 4
  store i32 2147483647, i32* %2, align 4
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %5
  %8 = icmp ne %"class.std::__1::vector"* %4, null
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast i32** %9 to i64*
  %12 = bitcast %"class.std::__1::vector"* %4 to i64*
  %13 = bitcast i32** %10 to i64*
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %15 = zext i32 %1 to i64
  br label %17

16:                                               ; preds = %96, %5
  ret void

17:                                               ; preds = %96, %7
  %18 = phi i64 [ 0, %7 ], [ %97, %96 ]
  %19 = getelementptr inbounds i32, i32* %0, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, -1
  %22 = and i1 %8, %21
  br i1 %22, label %23, label %85

23:                                               ; preds = %17
  %24 = load i32*, i32** %9, align 8
  %25 = load i32*, i32** %10, align 8
  %26 = icmp eq i32* %24, %25
  %27 = ptrtoint i32* %25 to i64
  br i1 %26, label %32, label %28

28:                                               ; preds = %23
  %29 = trunc i64 %18 to i32
  store i32 %29, i32* %24, align 4
  %30 = getelementptr inbounds i32, i32* %24, i64 1
  %31 = ptrtoint i32* %30 to i64
  store i64 %31, i64* %11, align 8
  br label %96

32:                                               ; preds = %23
  %33 = ptrtoint i32* %24 to i64
  %34 = load i64, i64* %12, align 8
  %35 = sub i64 %33, %34
  %36 = ashr exact i64 %35, 2
  %37 = add nsw i64 %36, 1
  %38 = icmp ugt i64 %37, 4611686018427387903
  br i1 %38, label %39, label %41

39:                                               ; preds = %32
  %40 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %40) #13
  unreachable

41:                                               ; preds = %32
  %42 = sub i64 %27, %34
  %43 = ashr exact i64 %42, 2
  %44 = icmp ult i64 %43, 2305843009213693951
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = ashr exact i64 %42, 1
  %47 = icmp ult i64 %46, %37
  %48 = select i1 %47, i64 %37, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %45
  %51 = icmp ugt i64 %48, 4611686018427387903
  br i1 %51, label %52, label %53

52:                                               ; preds = %50
  tail call void @abort() #13
  unreachable

53:                                               ; preds = %50, %41
  %54 = phi i64 [ %48, %50 ], [ 4611686018427387903, %41 ]
  %55 = shl i64 %54, 2
  %56 = tail call i8* @_Znwm(i64 %55) #10
  %57 = bitcast i8* %56 to i32*
  br label %58

58:                                               ; preds = %53, %45
  %59 = phi i64 [ %54, %53 ], [ 0, %45 ]
  %60 = phi i32* [ %57, %53 ], [ null, %45 ]
  %61 = getelementptr inbounds i32, i32* %60, i64 %36
  %62 = getelementptr inbounds i32, i32* %60, i64 %59
  %63 = ptrtoint i32* %62 to i64
  %64 = trunc i64 %18 to i32
  store i32 %64, i32* %61, align 4
  %65 = getelementptr inbounds i32, i32* %61, i64 1
  %66 = ptrtoint i32* %65 to i64
  %67 = load i32*, i32** %14, align 8
  %68 = load i64, i64* %11, align 8
  %69 = ptrtoint i32* %67 to i64
  %70 = sub i64 %68, %69
  %71 = ashr exact i64 %70, 2
  %72 = sub nsw i64 0, %71
  %73 = getelementptr inbounds i32, i32* %61, i64 %72
  %74 = ptrtoint i32* %73 to i64
  %75 = icmp sgt i64 %70, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %58
  %77 = bitcast i32* %73 to i8*
  %78 = bitcast i32* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 %70, i1 false) #14
  %79 = load i32*, i32** %14, align 8
  br label %80

80:                                               ; preds = %76, %58
  %81 = phi i32* [ %67, %58 ], [ %79, %76 ]
  store i64 %74, i64* %12, align 8
  store i64 %66, i64* %11, align 8
  store i64 %63, i64* %13, align 8
  %82 = icmp eq i32* %81, null
  br i1 %82, label %96, label %83

83:                                               ; preds = %80
  %84 = bitcast i32* %81 to i8*
  tail call void @_ZdlPv(i8* %84) #10
  br label %96

85:                                               ; preds = %17
  %86 = load i32, i32* %2, align 4
  %87 = icmp ugt i32 %86, %20
  br i1 %87, label %88, label %91

88:                                               ; preds = %85
  %89 = getelementptr inbounds i32, i32* %0, i64 %18
  store i32 %20, i32* %2, align 4
  %90 = load i32, i32* %89, align 4
  br label %91

91:                                               ; preds = %88, %85
  %92 = phi i32 [ %90, %88 ], [ %20, %85 ]
  %93 = load i32, i32* %3, align 4
  %94 = icmp ult i32 %93, %92
  br i1 %94, label %95, label %96

95:                                               ; preds = %91
  store i32 %92, i32* %3, align 4
  br label %96

96:                                               ; preds = %83, %80, %28, %91, %95
  %97 = add nuw nsw i64 %18, 1
  %98 = icmp eq i64 %97, %15
  br i1 %98, label %16, label %17
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN3es212computeRangeItEEvPKT_iPjS4_PNSt3__16vectorIiNS5_9allocatorIiEEEE(i16*, i32, i32*, i32*, %"class.std::__1::vector"*) local_unnamed_addr #0 comdat {
  store i32 0, i32* %3, align 4
  store i32 2147483647, i32* %2, align 4
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %5
  %8 = icmp ne %"class.std::__1::vector"* %4, null
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast i32** %9 to i64*
  %12 = bitcast %"class.std::__1::vector"* %4 to i64*
  %13 = bitcast i32** %10 to i64*
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %15 = zext i32 %1 to i64
  br label %17

16:                                               ; preds = %98, %5
  ret void

17:                                               ; preds = %98, %7
  %18 = phi i64 [ 0, %7 ], [ %99, %98 ]
  %19 = getelementptr inbounds i16, i16* %0, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = icmp eq i16 %20, -1
  %22 = and i1 %8, %21
  br i1 %22, label %23, label %85

23:                                               ; preds = %17
  %24 = load i32*, i32** %9, align 8
  %25 = load i32*, i32** %10, align 8
  %26 = icmp eq i32* %24, %25
  %27 = ptrtoint i32* %25 to i64
  br i1 %26, label %32, label %28

28:                                               ; preds = %23
  %29 = trunc i64 %18 to i32
  store i32 %29, i32* %24, align 4
  %30 = getelementptr inbounds i32, i32* %24, i64 1
  %31 = ptrtoint i32* %30 to i64
  store i64 %31, i64* %11, align 8
  br label %98

32:                                               ; preds = %23
  %33 = ptrtoint i32* %24 to i64
  %34 = load i64, i64* %12, align 8
  %35 = sub i64 %33, %34
  %36 = ashr exact i64 %35, 2
  %37 = add nsw i64 %36, 1
  %38 = icmp ugt i64 %37, 4611686018427387903
  br i1 %38, label %39, label %41

39:                                               ; preds = %32
  %40 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %40) #13
  unreachable

41:                                               ; preds = %32
  %42 = sub i64 %27, %34
  %43 = ashr exact i64 %42, 2
  %44 = icmp ult i64 %43, 2305843009213693951
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = ashr exact i64 %42, 1
  %47 = icmp ult i64 %46, %37
  %48 = select i1 %47, i64 %37, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %45
  %51 = icmp ugt i64 %48, 4611686018427387903
  br i1 %51, label %52, label %53

52:                                               ; preds = %50
  tail call void @abort() #13
  unreachable

53:                                               ; preds = %50, %41
  %54 = phi i64 [ %48, %50 ], [ 4611686018427387903, %41 ]
  %55 = shl i64 %54, 2
  %56 = tail call i8* @_Znwm(i64 %55) #10
  %57 = bitcast i8* %56 to i32*
  br label %58

58:                                               ; preds = %53, %45
  %59 = phi i64 [ %54, %53 ], [ 0, %45 ]
  %60 = phi i32* [ %57, %53 ], [ null, %45 ]
  %61 = getelementptr inbounds i32, i32* %60, i64 %36
  %62 = getelementptr inbounds i32, i32* %60, i64 %59
  %63 = ptrtoint i32* %62 to i64
  %64 = trunc i64 %18 to i32
  store i32 %64, i32* %61, align 4
  %65 = getelementptr inbounds i32, i32* %61, i64 1
  %66 = ptrtoint i32* %65 to i64
  %67 = load i32*, i32** %14, align 8
  %68 = load i64, i64* %11, align 8
  %69 = ptrtoint i32* %67 to i64
  %70 = sub i64 %68, %69
  %71 = ashr exact i64 %70, 2
  %72 = sub nsw i64 0, %71
  %73 = getelementptr inbounds i32, i32* %61, i64 %72
  %74 = ptrtoint i32* %73 to i64
  %75 = icmp sgt i64 %70, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %58
  %77 = bitcast i32* %73 to i8*
  %78 = bitcast i32* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 %70, i1 false) #14
  %79 = load i32*, i32** %14, align 8
  br label %80

80:                                               ; preds = %76, %58
  %81 = phi i32* [ %67, %58 ], [ %79, %76 ]
  store i64 %74, i64* %12, align 8
  store i64 %66, i64* %11, align 8
  store i64 %63, i64* %13, align 8
  %82 = icmp eq i32* %81, null
  br i1 %82, label %98, label %83

83:                                               ; preds = %80
  %84 = bitcast i32* %81 to i8*
  tail call void @_ZdlPv(i8* %84) #10
  br label %98

85:                                               ; preds = %17
  %86 = load i32, i32* %2, align 4
  %87 = zext i16 %20 to i32
  %88 = icmp ugt i32 %86, %87
  br i1 %88, label %89, label %93

89:                                               ; preds = %85
  %90 = getelementptr inbounds i16, i16* %0, i64 %18
  store i32 %87, i32* %2, align 4
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  br label %93

93:                                               ; preds = %89, %85
  %94 = phi i32 [ %92, %89 ], [ %87, %85 ]
  %95 = load i32, i32* %3, align 4
  %96 = icmp ult i32 %95, %94
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  store i32 %94, i32* %3, align 4
  br label %98

98:                                               ; preds = %83, %80, %28, %93, %97
  %99 = add nuw nsw i64 %18, 1
  %100 = icmp eq i64 %99, %15
  br i1 %100, label %16, label %17
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden i32 @_ZN3es223recomputePrimitiveCountEjiRKNSt3__16vectorIiNS0_9allocatorIiEEEEPj(i32, i32, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), i32* nocapture) local_unnamed_addr #4 {
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %2 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 2
  store i32 0, i32* %3, align 4
  switch i32 %0, label %106 [
    i32 4, label %12
    i32 1, label %13
    i32 6, label %52
    i32 5, label %52
    i32 3, label %53
    i32 2, label %56
    i32 0, label %99
  ]

12:                                               ; preds = %4
  br label %13

13:                                               ; preds = %4, %12
  %14 = phi i32 [ 2, %4 ], [ 3, %12 ]
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  br label %16

16:                                               ; preds = %13, %46
  %17 = phi i32 [ 0, %13 ], [ %49, %46 ]
  %18 = phi i64 [ 0, %13 ], [ %50, %46 ]
  %19 = load i32*, i32** %15, align 8
  %20 = load i32*, i32** %5, align 8
  %21 = icmp eq i32* %19, %20
  %22 = ptrtoint i32* %20 to i64
  %23 = ptrtoint i32* %19 to i64
  br i1 %21, label %46, label %24

24:                                               ; preds = %16
  %25 = icmp eq i64 %18, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = load i32, i32* %19, align 4
  br label %46

28:                                               ; preds = %24
  %29 = sub i64 %22, %23
  %30 = ashr exact i64 %29, 2
  %31 = icmp eq i64 %30, %18
  br i1 %31, label %32, label %38

32:                                               ; preds = %28
  %33 = add i64 %18, -1
  %34 = getelementptr inbounds i32, i32* %19, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = xor i32 %35, -1
  %37 = add i32 %36, %1
  br label %46

38:                                               ; preds = %28
  %39 = getelementptr inbounds i32, i32* %19, i64 %18
  %40 = load i32, i32* %39, align 4
  %41 = add i64 %18, -1
  %42 = getelementptr inbounds i32, i32* %19, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = xor i32 %43, -1
  %45 = add i32 %40, %44
  br label %46

46:                                               ; preds = %16, %26, %32, %38
  %47 = phi i32 [ %27, %26 ], [ %37, %32 ], [ %45, %38 ], [ %1, %16 ]
  %48 = udiv i32 %47, %14
  %49 = add i32 %17, %48
  store i32 %49, i32* %3, align 4
  %50 = add i64 %18, 1
  %51 = icmp ugt i64 %50, %11
  br i1 %51, label %106, label %16

52:                                               ; preds = %4, %4
  br label %53

53:                                               ; preds = %4, %52
  %54 = phi i32 [ -1, %4 ], [ -2, %52 ]
  %55 = phi i32 [ 0, %4 ], [ 1, %52 ]
  br label %56

56:                                               ; preds = %4, %53
  %57 = phi i32 [ 0, %4 ], [ %54, %53 ]
  %58 = phi i32 [ 0, %4 ], [ %55, %53 ]
  %59 = add nuw nsw i32 %58, 2
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  br label %61

61:                                               ; preds = %56, %91
  %62 = phi i32 [ 0, %56 ], [ %96, %91 ]
  %63 = phi i64 [ 0, %56 ], [ %97, %91 ]
  %64 = load i32*, i32** %60, align 8
  %65 = load i32*, i32** %5, align 8
  %66 = icmp eq i32* %64, %65
  %67 = ptrtoint i32* %65 to i64
  %68 = ptrtoint i32* %64 to i64
  br i1 %66, label %91, label %69

69:                                               ; preds = %61
  %70 = icmp eq i64 %63, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %69
  %72 = load i32, i32* %64, align 4
  br label %91

73:                                               ; preds = %69
  %74 = sub i64 %67, %68
  %75 = ashr exact i64 %74, 2
  %76 = icmp eq i64 %75, %63
  br i1 %76, label %77, label %83

77:                                               ; preds = %73
  %78 = add i64 %63, -1
  %79 = getelementptr inbounds i32, i32* %64, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = xor i32 %80, -1
  %82 = add i32 %81, %1
  br label %91

83:                                               ; preds = %73
  %84 = getelementptr inbounds i32, i32* %64, i64 %63
  %85 = load i32, i32* %84, align 4
  %86 = add i64 %63, -1
  %87 = getelementptr inbounds i32, i32* %64, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = xor i32 %88, -1
  %90 = add i32 %85, %89
  br label %91

91:                                               ; preds = %61, %71, %77, %83
  %92 = phi i32 [ %72, %71 ], [ %82, %77 ], [ %90, %83 ], [ %1, %61 ]
  %93 = icmp ult i32 %92, %59
  %94 = add i32 %92, %57
  %95 = select i1 %93, i32 0, i32 %94
  %96 = add i32 %95, %62
  store i32 %96, i32* %3, align 4
  %97 = add i64 %63, 1
  %98 = icmp ugt i64 %97, %11
  br i1 %98, label %106, label %61

99:                                               ; preds = %4
  %100 = load i64, i64* %6, align 8
  %101 = load i64, i64* %8, align 8
  %102 = sub i64 %100, %101
  %103 = lshr exact i64 %102, 2
  %104 = trunc i64 %103 to i32
  %105 = sub i32 %1, %104
  store i32 %105, i32* %3, align 4
  br label %106

106:                                              ; preds = %91, %46, %4, %99
  %107 = phi i32 [ 1, %99 ], [ -1, %4 ], [ %14, %46 ], [ %59, %91 ]
  ret i32 %107
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN3es216IndexDataManager16prepareIndexDataEjjjjiPNS_6BufferEPKvPNS_19TranslatedIndexDataEb(%"class.es2::IndexDataManager"* nocapture readonly, i32, i32, i32, i32, i32, %"class.es2::Buffer"*, i8*, %"struct.es2::TranslatedIndexData"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %11 = getelementptr inbounds %"class.es2::IndexDataManager", %"class.es2::IndexDataManager"* %0, i64 0, i32 1
  %12 = load %"class.es2::StreamingIndexBuffer"*, %"class.es2::StreamingIndexBuffer"** %11, align 8
  %13 = icmp eq %"class.es2::StreamingIndexBuffer"* %12, null
  br i1 %13, label %177, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i8* %7 to i64
  %16 = icmp ne %"class.es2::Buffer"* %6, null
  br i1 %16, label %17, label %41

17:                                               ; preds = %14
  %18 = add i32 %2, -5121
  %19 = icmp ult i32 %18, 5
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds [5 x i64], [5 x i64]* @switch.table._ZN3es216IndexDataManager8typeSizeEj, i64 0, i64 %21
  %23 = load i64, i64* %22, align 8
  br label %24

24:                                               ; preds = %17, %20
  %25 = phi i64 [ %23, %20 ], [ 2, %17 ]
  %26 = sext i32 %5 to i64
  %27 = mul nsw i64 %25, %26
  %28 = add i64 %27, %15
  %29 = getelementptr inbounds %"class.es2::Buffer", %"class.es2::Buffer"* %6, i64 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = icmp ugt i64 %28, %30
  br i1 %31, label %177, label %32

32:                                               ; preds = %24
  %33 = getelementptr inbounds %"class.es2::Buffer", %"class.es2::Buffer"* %6, i64 0, i32 1
  %34 = load %"class.sw::Resource"*, %"class.sw::Resource"** %33, align 8
  %35 = icmp eq %"class.sw::Resource"* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = tail call i8* @_ZNK2sw8Resource4dataEv(%"class.sw::Resource"* nonnull %34) #11
  br label %38

38:                                               ; preds = %32, %36
  %39 = phi i8* [ %37, %36 ], [ null, %32 ]
  %40 = getelementptr inbounds i8, i8* %39, i64 %15
  br label %41

41:                                               ; preds = %38, %14
  %42 = phi i8* [ %40, %38 ], [ %7, %14 ]
  br i1 %9, label %43, label %46

43:                                               ; preds = %41
  %44 = tail call i8* @_Znwm(i64 24) #10
  %45 = bitcast i8* %44 to %"class.std::__1::vector"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 0, i64 24, i1 false) #14
  br label %46

46:                                               ; preds = %41, %43
  %47 = phi i8* [ %44, %43 ], [ null, %41 ]
  %48 = phi %"class.std::__1::vector"* [ %45, %43 ], [ null, %41 ]
  %49 = getelementptr inbounds %"struct.es2::TranslatedIndexData", %"struct.es2::TranslatedIndexData"* %8, i64 0, i32 0
  %50 = getelementptr inbounds %"struct.es2::TranslatedIndexData", %"struct.es2::TranslatedIndexData"* %8, i64 0, i32 1
  tail call void @_ZN3es212computeRangeEjPKviPjS2_PNSt3__16vectorIiNS3_9allocatorIiEEEE(i32 %2, i8* %42, i32 %5, i32* %49, i32* %50, %"class.std::__1::vector"* %48) #12
  %51 = load %"class.es2::StreamingIndexBuffer"*, %"class.es2::StreamingIndexBuffer"** %11, align 8
  br i1 %16, label %52, label %54

52:                                               ; preds = %46
  %53 = tail call %"class.sw::Resource"* @_ZN3es26Buffer11getResourceEv(%"class.es2::Buffer"* nonnull %6) #11
  br label %54

54:                                               ; preds = %46, %52
  %55 = phi %"class.sw::Resource"* [ %53, %52 ], [ null, %46 ]
  %56 = icmp eq %"class.std::__1::vector"* %48, null
  br i1 %56, label %128, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"struct.es2::TranslatedIndexData", %"struct.es2::TranslatedIndexData"* %8, i64 0, i32 3
  %59 = tail call i32 @_ZN3es223recomputePrimitiveCountEjiRKNSt3__16vectorIiNS0_9allocatorIiEEEEPj(i32 %1, i32 %5, %"class.std::__1::vector"* nonnull dereferenceable(24) %48, i32* %58) #12
  %60 = icmp eq i32 %59, -1
  br i1 %60, label %61, label %71

61:                                               ; preds = %57
  %62 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 0
  %63 = load i32*, i32** %62, align 8
  %64 = icmp eq i32* %63, null
  br i1 %64, label %70, label %65

65:                                               ; preds = %61
  %66 = ptrtoint i32* %63 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 1
  %68 = bitcast i32** %67 to i64*
  store i64 %66, i64* %68, align 8
  %69 = bitcast i32* %63 to i8*
  tail call void @_ZdlPv(i8* %69) #10
  br label %70

70:                                               ; preds = %61, %65
  tail call void @_ZdlPv(i8* %47) #10
  br label %177

71:                                               ; preds = %57
  %72 = load i32, i32* %58, align 4
  %73 = mul i32 %72, %59
  %74 = sext i32 %73 to i64
  switch i32 %2, label %79 [
    i32 5125, label %75
    i32 5123, label %77
    i32 5121, label %81
  ]

75:                                               ; preds = %71
  %76 = shl nsw i64 %74, 2
  br label %81

77:                                               ; preds = %71
  %78 = shl nsw i64 %74, 1
  br label %81

79:                                               ; preds = %71
  %80 = shl nsw i64 %74, 1
  br label %81

81:                                               ; preds = %71, %75, %77, %79
  %82 = phi i64 [ %76, %75 ], [ %78, %77 ], [ %80, %79 ], [ %74, %71 ]
  %83 = phi i64 [ 4, %75 ], [ 2, %77 ], [ 2, %79 ], [ 1, %71 ]
  tail call void @_ZN3es220StreamingIndexBuffer12reserveSpaceEmj(%"class.es2::StreamingIndexBuffer"* %51, i64 %82, i32 undef) #12
  %84 = mul nsw i64 %83, %74
  %85 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %51, i64 0, i32 1
  %86 = load %"class.sw::Resource"*, %"class.sw::Resource"** %85, align 8
  %87 = icmp eq %"class.sw::Resource"* %86, null
  br i1 %87, label %94, label %88

88:                                               ; preds = %81
  %89 = tail call i8* @_ZN2sw8Resource4lockENS_8AccessorE(%"class.sw::Resource"* nonnull %86, i32 0) #11
  %90 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %51, i64 0, i32 3
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds i8, i8* %89, i64 %91
  %93 = icmp eq i8* %92, null
  br i1 %93, label %94, label %104

94:                                               ; preds = %88, %81
  %95 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 0
  %96 = load i32*, i32** %95, align 8
  %97 = icmp eq i32* %96, null
  br i1 %97, label %103, label %98

98:                                               ; preds = %94
  %99 = ptrtoint i32* %96 to i64
  %100 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 1
  %101 = bitcast i32** %100 to i64*
  store i64 %99, i64* %101, align 8
  %102 = bitcast i32* %96 to i8*
  tail call void @_ZdlPv(i8* %102) #10
  br label %103

103:                                              ; preds = %94, %98
  tail call void @_ZdlPv(i8* %47) #10
  br label %177

104:                                              ; preds = %88
  %105 = add i64 %91, %84
  store i64 %105, i64* %90, align 8
  tail call void @_ZN3es211copyIndicesEjjRKNSt3__16vectorIiNS0_9allocatorIiEEEEPKviPv(i32 %1, i32 %2, %"class.std::__1::vector"* nonnull dereferenceable(24) %48, i8* %42, i32 %5, i8* nonnull %92) #12
  %106 = load %"class.sw::Resource"*, %"class.sw::Resource"** %85, align 8
  %107 = icmp eq %"class.sw::Resource"* %106, null
  br i1 %107, label %108, label %110

108:                                              ; preds = %104
  %109 = ptrtoint %"class.sw::Resource"* %106 to i64
  br label %113

110:                                              ; preds = %104
  tail call void @_ZN2sw8Resource6unlockEv(%"class.sw::Resource"* nonnull %106) #11
  %111 = bitcast %"class.sw::Resource"** %85 to i64*
  %112 = load i64, i64* %111, align 8
  br label %113

113:                                              ; preds = %108, %110
  %114 = phi i64 [ %109, %108 ], [ %112, %110 ]
  %115 = getelementptr inbounds %"struct.es2::TranslatedIndexData", %"struct.es2::TranslatedIndexData"* %8, i64 0, i32 4
  %116 = bitcast %"class.sw::Resource"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = trunc i64 %91 to i32
  %118 = getelementptr inbounds %"struct.es2::TranslatedIndexData", %"struct.es2::TranslatedIndexData"* %8, i64 0, i32 2
  store i32 %117, i32* %118, align 8
  %119 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 0
  %120 = load i32*, i32** %119, align 8
  %121 = icmp eq i32* %120, null
  br i1 %121, label %127, label %122

122:                                              ; preds = %113
  %123 = ptrtoint i32* %120 to i64
  %124 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 1
  %125 = bitcast i32** %124 to i64*
  store i64 %123, i64* %125, align 8
  %126 = bitcast i32* %120 to i8*
  tail call void @_ZdlPv(i8* %126) #10
  br label %127

127:                                              ; preds = %122, %113
  tail call void @_ZdlPv(i8* %47) #10
  br label %177

128:                                              ; preds = %54
  %129 = icmp eq %"class.sw::Resource"* %55, null
  br i1 %129, label %134, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds %"struct.es2::TranslatedIndexData", %"struct.es2::TranslatedIndexData"* %8, i64 0, i32 4
  store %"class.sw::Resource"* %55, %"class.sw::Resource"** %131, align 8
  %132 = trunc i64 %15 to i32
  %133 = getelementptr inbounds %"struct.es2::TranslatedIndexData", %"struct.es2::TranslatedIndexData"* %8, i64 0, i32 2
  store i32 %132, i32* %133, align 8
  br label %177

134:                                              ; preds = %128
  %135 = sext i32 %5 to i64
  switch i32 %2, label %140 [
    i32 5125, label %136
    i32 5123, label %138
    i32 5121, label %142
  ]

136:                                              ; preds = %134
  %137 = shl nsw i64 %135, 2
  br label %142

138:                                              ; preds = %134
  %139 = shl nsw i64 %135, 1
  br label %142

140:                                              ; preds = %134
  %141 = shl nsw i64 %135, 1
  br label %142

142:                                              ; preds = %134, %136, %138, %140
  %143 = phi i64 [ %137, %136 ], [ %139, %138 ], [ %141, %140 ], [ %135, %134 ]
  %144 = phi i64 [ 4, %136 ], [ 2, %138 ], [ 2, %140 ], [ 1, %134 ]
  tail call void @_ZN3es220StreamingIndexBuffer12reserveSpaceEmj(%"class.es2::StreamingIndexBuffer"* %51, i64 %143, i32 undef) #12
  %145 = mul nsw i64 %144, %135
  %146 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %51, i64 0, i32 1
  %147 = load %"class.sw::Resource"*, %"class.sw::Resource"** %146, align 8
  %148 = icmp eq %"class.sw::Resource"* %147, null
  br i1 %148, label %177, label %149

149:                                              ; preds = %142
  %150 = tail call i8* @_ZN2sw8Resource4lockENS_8AccessorE(%"class.sw::Resource"* nonnull %147, i32 0) #11
  %151 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %51, i64 0, i32 3
  %152 = load i64, i64* %151, align 8
  %153 = getelementptr inbounds i8, i8* %150, i64 %152
  %154 = icmp eq i8* %153, null
  br i1 %154, label %177, label %155

155:                                              ; preds = %149
  %156 = add i64 %152, %145
  store i64 %156, i64* %151, align 8
  switch i32 %2, label %163 [
    i32 5121, label %161
    i32 5125, label %157
    i32 5123, label %159
  ]

157:                                              ; preds = %155
  %158 = shl nsw i64 %135, 2
  br label %161

159:                                              ; preds = %155
  %160 = shl nsw i64 %135, 1
  br label %161

161:                                              ; preds = %155, %159, %157
  %162 = phi i64 [ %158, %157 ], [ %160, %159 ], [ %135, %155 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %153, i8* align 1 %42, i64 %162, i1 false) #14
  br label %163

163:                                              ; preds = %161, %155
  %164 = load %"class.sw::Resource"*, %"class.sw::Resource"** %146, align 8
  %165 = icmp eq %"class.sw::Resource"* %164, null
  br i1 %165, label %166, label %168

166:                                              ; preds = %163
  %167 = ptrtoint %"class.sw::Resource"* %164 to i64
  br label %171

168:                                              ; preds = %163
  tail call void @_ZN2sw8Resource6unlockEv(%"class.sw::Resource"* nonnull %164) #11
  %169 = bitcast %"class.sw::Resource"** %146 to i64*
  %170 = load i64, i64* %169, align 8
  br label %171

171:                                              ; preds = %166, %168
  %172 = phi i64 [ %167, %166 ], [ %170, %168 ]
  %173 = getelementptr inbounds %"struct.es2::TranslatedIndexData", %"struct.es2::TranslatedIndexData"* %8, i64 0, i32 4
  %174 = bitcast %"class.sw::Resource"** %173 to i64*
  store i64 %172, i64* %174, align 8
  %175 = trunc i64 %152 to i32
  %176 = getelementptr inbounds %"struct.es2::TranslatedIndexData", %"struct.es2::TranslatedIndexData"* %8, i64 0, i32 2
  store i32 %175, i32* %176, align 8
  br label %177

177:                                              ; preds = %103, %70, %130, %171, %127, %142, %149, %24, %10
  %178 = phi i32 [ 1285, %10 ], [ 1282, %24 ], [ 1285, %149 ], [ 1285, %142 ], [ 0, %127 ], [ 0, %171 ], [ 0, %130 ], [ 1285, %103 ], [ 1280, %70 ]
  ret i32 %178
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden i64 @_ZN3es216IndexDataManager8typeSizeEj(i32) local_unnamed_addr #5 align 2 {
  %2 = add i32 %0, -5121
  %3 = icmp ult i32 %2, 5
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [5 x i64], [5 x i64]* @switch.table._ZN3es216IndexDataManager8typeSizeEj, i64 0, i64 %5
  %7 = load i64, i64* %6, align 8
  ret i64 %7

8:                                                ; preds = %1
  ret i64 2
}

; Function Attrs: optsize
declare %"class.sw::Resource"* @_ZN3es26Buffer11getResourceEv(%"class.es2::Buffer"*) local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es220StreamingIndexBuffer12reserveSpaceEmj(%"class.es2::StreamingIndexBuffer"* nocapture, i64, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %23

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 1
  %9 = load %"class.sw::Resource"*, %"class.sw::Resource"** %8, align 8
  %10 = icmp eq %"class.sw::Resource"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  tail call void @_ZN2sw8Resource8destructEv(%"class.sw::Resource"* nonnull %9) #11
  store %"class.sw::Resource"* null, %"class.sw::Resource"** %8, align 8
  %12 = load i64, i64* %4, align 8
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %5, %7 ], [ %12, %11 ]
  %15 = shl i64 %14, 1
  %16 = icmp ugt i64 %15, %1
  %17 = select i1 %16, i64 %15, i64 %1
  store i64 %17, i64* %4, align 8
  %18 = tail call i8* @_Znwm(i64 168) #10
  %19 = bitcast i8* %18 to %"class.sw::Resource"*
  %20 = add i64 %17, 16
  tail call void @_ZN2sw8ResourceC1Em(%"class.sw::Resource"* nonnull %19, i64 %20) #11
  %21 = bitcast %"class.sw::Resource"** %8 to i8**
  store i8* %18, i8** %21, align 8
  %22 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 3
  br label %38

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %1
  %27 = icmp ugt i64 %26, %5
  br i1 %27, label %28, label %40

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 1
  %30 = load %"class.sw::Resource"*, %"class.sw::Resource"** %29, align 8
  %31 = icmp eq %"class.sw::Resource"* %30, null
  br i1 %31, label %38, label %32

32:                                               ; preds = %28
  tail call void @_ZN2sw8Resource8destructEv(%"class.sw::Resource"* nonnull %30) #11
  %33 = tail call i8* @_Znwm(i64 168) #10
  %34 = bitcast i8* %33 to %"class.sw::Resource"*
  %35 = load i64, i64* %4, align 8
  %36 = add i64 %35, 16
  tail call void @_ZN2sw8ResourceC1Em(%"class.sw::Resource"* nonnull %34, i64 %36) #11
  %37 = bitcast %"class.sw::Resource"** %29 to i8**
  store i8* %33, i8** %37, align 8
  br label %38

38:                                               ; preds = %32, %28, %13
  %39 = phi i64* [ %22, %13 ], [ %24, %28 ], [ %24, %32 ]
  store i64 0, i64* %39, align 8
  br label %40

40:                                               ; preds = %38, %23
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN3es220StreamingIndexBuffer3mapEmPm(%"class.es2::StreamingIndexBuffer"* nocapture, i64, i64* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 1
  %5 = load %"class.sw::Resource"*, %"class.sw::Resource"** %4, align 8
  %6 = icmp eq %"class.sw::Resource"* %5, null
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = tail call i8* @_ZN2sw8Resource4lockENS_8AccessorE(%"class.sw::Resource"* nonnull %5, i32 0) #11
  %9 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* %8, i64 %10
  %12 = icmp eq i8* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %7
  store i64 %10, i64* %2, align 8
  %14 = load i64, i64* %9, align 8
  %15 = add i64 %14, %1
  store i64 %15, i64* %9, align 8
  br label %16

16:                                               ; preds = %13, %3, %7
  %17 = phi i8* [ null, %7 ], [ %11, %13 ], [ null, %3 ]
  ret i8* %17
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es220StreamingIndexBuffer5unmapEv(%"class.es2::StreamingIndexBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 1
  %3 = load %"class.sw::Resource"*, %"class.sw::Resource"** %2, align 8
  %4 = icmp eq %"class.sw::Resource"* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_ZN2sw8Resource6unlockEv(%"class.sw::Resource"* nonnull %3) #11
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden %"class.sw::Resource"* @_ZNK3es220StreamingIndexBuffer11getResourceEv(%"class.es2::StreamingIndexBuffer"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 1
  %3 = load %"class.sw::Resource"*, %"class.sw::Resource"** %2, align 8
  ret %"class.sw::Resource"* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es220StreamingIndexBufferC2Em(%"class.es2::StreamingIndexBuffer"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3es220StreamingIndexBufferE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 1
  store %"class.sw::Resource"* null, %"class.sw::Resource"** %4, align 8
  %5 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 2
  store i64 %1, i64* %5, align 8
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %2
  %8 = tail call i8* @_Znwm(i64 168) #10
  %9 = bitcast i8* %8 to %"class.sw::Resource"*
  %10 = add i64 %1, 16
  tail call void @_ZN2sw8ResourceC1Em(%"class.sw::Resource"* nonnull %9, i64 %10) #11
  %11 = bitcast %"class.sw::Resource"** %4 to i8**
  store i8* %8, i8** %11, align 8
  br label %12

12:                                               ; preds = %2, %7
  %13 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 3
  store i64 0, i64* %13, align 8
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw8ResourceC1Em(%"class.sw::Resource"*, i64) unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es220StreamingIndexBufferD2Ev(%"class.es2::StreamingIndexBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3es220StreamingIndexBufferE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 1
  %4 = load %"class.sw::Resource"*, %"class.sw::Resource"** %3, align 8
  %5 = icmp eq %"class.sw::Resource"* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN2sw8Resource8destructEv(%"class.sw::Resource"* nonnull %4) #11
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw8Resource8destructEv(%"class.sw::Resource"*) local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3es220StreamingIndexBufferD0Ev(%"class.es2::StreamingIndexBuffer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3es220StreamingIndexBufferE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.es2::StreamingIndexBuffer", %"class.es2::StreamingIndexBuffer"* %0, i64 0, i32 1
  %4 = load %"class.sw::Resource"*, %"class.sw::Resource"** %3, align 8
  %5 = icmp eq %"class.sw::Resource"* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN2sw8Resource8destructEv(%"class.sw::Resource"* nonnull %4) #11
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %"class.es2::StreamingIndexBuffer"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #10
  ret void
}

; Function Attrs: optsize
declare i8* @_ZN2sw8Resource4lockENS_8AccessorE(%"class.sw::Resource"*, i32) local_unnamed_addr #6

; Function Attrs: optsize
declare void @_ZN2sw8Resource6unlockEv(%"class.sw::Resource"*) local_unnamed_addr #6

; Function Attrs: optsize
declare i8* @_ZNK2sw8Resource4dataEv(%"class.sw::Resource"*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #9

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind optsize }
attributes #11 = { nounwind optsize }
attributes #12 = { optsize }
attributes #13 = { noreturn nounwind optsize }
attributes #14 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
