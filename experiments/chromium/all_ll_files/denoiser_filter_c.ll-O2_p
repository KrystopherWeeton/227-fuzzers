; ModuleID = '../../third_party/webrtc/modules/video_processing/util/denoiser_filter_c.cc'
source_filename = "../../third_party/webrtc/modules/video_processing/util/denoiser_filter_c.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::DenoiserFilterC" = type { %"class.webrtc::DenoiserFilter" }
%"class.webrtc::DenoiserFilter" = type { i32 (...)** }

$_ZN6webrtc14DenoiserFilterD2Ev = comdat any

$_ZN6webrtc15DenoiserFilterCD0Ev = comdat any

@_ZN6webrtc25kMotionMagnitudeThresholdE = external local_unnamed_addr constant i32, align 4
@_ZN6webrtc21kSumDiffThresholdHighE = external local_unnamed_addr constant i32, align 4
@_ZN6webrtc17kSumDiffThresholdE = external local_unnamed_addr constant i32, align 4
@_ZTVN6webrtc15DenoiserFilterCE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::DenoiserFilter"*)* @_ZN6webrtc14DenoiserFilterD2Ev to i8*), i8* bitcast (void (%"class.webrtc::DenoiserFilterC"*)* @_ZN6webrtc15DenoiserFilterCD0Ev to i8*), i8* bitcast (i32 (%"class.webrtc::DenoiserFilterC"*, i8*, i32, i8*, i32, i32*)* @_ZN6webrtc15DenoiserFilterC12Variance16x8EPKhiS2_iPj to i8*), i8* bitcast (i32 (%"class.webrtc::DenoiserFilterC"*, i8*, i32, i8*, i32, i8*, i32, i8, i32)* @_ZN6webrtc15DenoiserFilterC9MbDenoiseEPKhiPhiS2_ihi to i8*)] }, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN6webrtc15DenoiserFilterC12Variance16x8EPKhiS2_iPj(%"class.webrtc::DenoiserFilterC"* nocapture readnone, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) unnamed_addr #0 align 2 {
  store i32 0, i32* %5, align 4
  %7 = shl i32 %2, 1
  %8 = shl i32 %4, 1
  %9 = sext i32 %7 to i64
  %10 = sext i32 %8 to i64
  br label %11

11:                                               ; preds = %11, %6
  %12 = phi i32 [ 0, %6 ], [ %174, %11 ]
  %13 = phi i8* [ %1, %6 ], [ %175, %11 ]
  %14 = phi i32 [ 0, %6 ], [ %177, %11 ]
  %15 = phi i32 [ 0, %6 ], [ %172, %11 ]
  %16 = phi i8* [ %3, %6 ], [ %176, %11 ]
  %17 = load i8, i8* %13, align 1
  %18 = zext i8 %17 to i32
  %19 = load i8, i8* %16, align 1
  %20 = zext i8 %19 to i32
  %21 = sub nsw i32 %18, %20
  %22 = add nsw i32 %21, %15
  %23 = mul nsw i32 %21, %21
  %24 = add i32 %23, %12
  store i32 %24, i32* %5, align 4
  %25 = getelementptr inbounds i8, i8* %13, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds i8, i8* %16, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = add nsw i32 %31, %22
  %33 = mul nsw i32 %31, %31
  %34 = add i32 %33, %24
  store i32 %34, i32* %5, align 4
  %35 = getelementptr inbounds i8, i8* %13, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds i8, i8* %16, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = sub nsw i32 %37, %40
  %42 = add nsw i32 %41, %32
  %43 = mul nsw i32 %41, %41
  %44 = add i32 %43, %34
  store i32 %44, i32* %5, align 4
  %45 = getelementptr inbounds i8, i8* %13, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i8, i8* %16, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = sub nsw i32 %47, %50
  %52 = add nsw i32 %51, %42
  %53 = mul nsw i32 %51, %51
  %54 = add i32 %53, %44
  store i32 %54, i32* %5, align 4
  %55 = getelementptr inbounds i8, i8* %13, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds i8, i8* %16, i64 4
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = sub nsw i32 %57, %60
  %62 = add nsw i32 %61, %52
  %63 = mul nsw i32 %61, %61
  %64 = add i32 %63, %54
  store i32 %64, i32* %5, align 4
  %65 = getelementptr inbounds i8, i8* %13, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %16, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = add nsw i32 %71, %62
  %73 = mul nsw i32 %71, %71
  %74 = add i32 %73, %64
  store i32 %74, i32* %5, align 4
  %75 = getelementptr inbounds i8, i8* %13, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds i8, i8* %16, i64 6
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = sub nsw i32 %77, %80
  %82 = add nsw i32 %81, %72
  %83 = mul nsw i32 %81, %81
  %84 = add i32 %83, %74
  store i32 %84, i32* %5, align 4
  %85 = getelementptr inbounds i8, i8* %13, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds i8, i8* %16, i64 7
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = sub nsw i32 %87, %90
  %92 = add nsw i32 %91, %82
  %93 = mul nsw i32 %91, %91
  %94 = add i32 %93, %84
  store i32 %94, i32* %5, align 4
  %95 = getelementptr inbounds i8, i8* %13, i64 8
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = getelementptr inbounds i8, i8* %16, i64 8
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = sub nsw i32 %97, %100
  %102 = add nsw i32 %101, %92
  %103 = mul nsw i32 %101, %101
  %104 = add i32 %103, %94
  store i32 %104, i32* %5, align 4
  %105 = getelementptr inbounds i8, i8* %13, i64 9
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = getelementptr inbounds i8, i8* %16, i64 9
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = sub nsw i32 %107, %110
  %112 = add nsw i32 %111, %102
  %113 = mul nsw i32 %111, %111
  %114 = add i32 %113, %104
  store i32 %114, i32* %5, align 4
  %115 = getelementptr inbounds i8, i8* %13, i64 10
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds i8, i8* %16, i64 10
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = sub nsw i32 %117, %120
  %122 = add nsw i32 %121, %112
  %123 = mul nsw i32 %121, %121
  %124 = add i32 %123, %114
  store i32 %124, i32* %5, align 4
  %125 = getelementptr inbounds i8, i8* %13, i64 11
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = getelementptr inbounds i8, i8* %16, i64 11
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = sub nsw i32 %127, %130
  %132 = add nsw i32 %131, %122
  %133 = mul nsw i32 %131, %131
  %134 = add i32 %133, %124
  store i32 %134, i32* %5, align 4
  %135 = getelementptr inbounds i8, i8* %13, i64 12
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = getelementptr inbounds i8, i8* %16, i64 12
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = sub nsw i32 %137, %140
  %142 = add nsw i32 %141, %132
  %143 = mul nsw i32 %141, %141
  %144 = add i32 %143, %134
  store i32 %144, i32* %5, align 4
  %145 = getelementptr inbounds i8, i8* %13, i64 13
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = getelementptr inbounds i8, i8* %16, i64 13
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = sub nsw i32 %147, %150
  %152 = add nsw i32 %151, %142
  %153 = mul nsw i32 %151, %151
  %154 = add i32 %153, %144
  store i32 %154, i32* %5, align 4
  %155 = getelementptr inbounds i8, i8* %13, i64 14
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = getelementptr inbounds i8, i8* %16, i64 14
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = sub nsw i32 %157, %160
  %162 = add nsw i32 %161, %152
  %163 = mul nsw i32 %161, %161
  %164 = add i32 %163, %154
  store i32 %164, i32* %5, align 4
  %165 = getelementptr inbounds i8, i8* %13, i64 15
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = getelementptr inbounds i8, i8* %16, i64 15
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = sub nsw i32 %167, %170
  %172 = add nsw i32 %171, %162
  %173 = mul nsw i32 %171, %171
  %174 = add i32 %173, %164
  store i32 %174, i32* %5, align 4
  %175 = getelementptr inbounds i8, i8* %13, i64 %9
  %176 = getelementptr inbounds i8, i8* %16, i64 %10
  %177 = add nuw nsw i32 %14, 1
  %178 = icmp eq i32 %177, 8
  br i1 %178, label %179, label %11

179:                                              ; preds = %11
  %180 = sext i32 %172 to i64
  %181 = mul nsw i64 %180, %180
  %182 = lshr i64 %181, 7
  %183 = trunc i64 %182 to i32
  %184 = sub i32 %174, %183
  ret i32 %184
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc15DenoiserFilterC9MbDenoiseEPKhiPhiS2_ihi(%"class.webrtc::DenoiserFilterC"* nocapture readnone, i8* nocapture readonly, i32, i8* nocapture, i32, i8* nocapture readonly, i32, i8 zeroext, i32) unnamed_addr #2 align 2 {
  %10 = alloca [16 x i32], align 16
  %11 = bitcast [16 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 64, i1 false)
  %12 = zext i8 %7 to i32
  %13 = load i32, i32* @_ZN6webrtc25kMotionMagnitudeThresholdE, align 4
  %14 = icmp slt i32 %13, %12
  br i1 %14, label %23, label %15

15:                                               ; preds = %9
  %16 = icmp eq i32 %8, 0
  %17 = xor i1 %16, true
  %18 = zext i1 %17 to i32
  %19 = select i1 %16, i32 1, i32 2
  %20 = add nuw nsw i32 %19, 3
  %21 = or i32 %19, 4
  %22 = add nuw nsw i32 %19, 6
  br label %23

23:                                               ; preds = %9, %15
  %24 = phi i32 [ %22, %15 ], [ 6, %9 ]
  %25 = phi i32 [ %21, %15 ], [ 4, %9 ]
  %26 = phi i32 [ %20, %15 ], [ 3, %9 ]
  %27 = phi i32 [ %18, %15 ], [ 0, %9 ]
  %28 = add nuw nsw i32 %27, 3
  %29 = or i32 %27, 4
  %30 = sext i32 %6 to i64
  %31 = sext i32 %2 to i64
  %32 = sext i32 %4 to i64
  br label %33

33:                                               ; preds = %38, %23
  %34 = phi i32 [ 0, %23 ], [ %42, %38 ]
  %35 = phi i8* [ %1, %23 ], [ %40, %38 ]
  %36 = phi i8* [ %3, %23 ], [ %41, %38 ]
  %37 = phi i8* [ %5, %23 ], [ %39, %38 ]
  br label %48

38:                                               ; preds = %95
  %39 = getelementptr inbounds i8, i8* %37, i64 %30
  %40 = getelementptr inbounds i8, i8* %35, i64 %31
  %41 = getelementptr inbounds i8, i8* %36, i64 %32
  %42 = add nuw nsw i32 %34, 1
  %43 = icmp eq i32 %42, 16
  br i1 %43, label %44, label %33

44:                                               ; preds = %38
  %45 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 0
  %46 = load i32, i32* %45, align 16
  %47 = icmp sgt i32 %46, 127
  br i1 %47, label %98, label %99

48:                                               ; preds = %95, %33
  %49 = phi i64 [ 0, %33 ], [ %96, %95 ]
  %50 = getelementptr inbounds i8, i8* %35, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds i8, i8* %37, i64 %49
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = sub nsw i32 %52, %55
  %57 = icmp slt i32 %56, 0
  %58 = sub nsw i32 0, %56
  %59 = select i1 %57, i32 %58, i32 %56
  %60 = icmp sgt i32 %59, %28
  br i1 %60, label %66, label %61

61:                                               ; preds = %48
  %62 = getelementptr inbounds i8, i8* %36, i64 %49
  store i8 %51, i8* %62, align 1
  %63 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 %49
  %64 = load i32, i32* %63, align 4
  %65 = add nsw i32 %64, %56
  store i32 %65, i32* %63, align 4
  br label %95

66:                                               ; preds = %48
  %67 = icmp sge i32 %59, %29
  %68 = icmp slt i32 %59, 8
  %69 = and i1 %67, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = and i32 %59, 2147483640
  %72 = icmp eq i32 %71, 8
  %73 = select i1 %72, i32 %25, i32 %24
  br label %74

74:                                               ; preds = %70, %66
  %75 = phi i32 [ %26, %66 ], [ %73, %70 ]
  %76 = icmp sgt i32 %56, 0
  br i1 %76, label %77, label %86

77:                                               ; preds = %74
  %78 = add nsw i32 %75, %55
  %79 = icmp slt i32 %78, 255
  %80 = select i1 %79, i32 %78, i32 255
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %36, i64 %49
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 %49
  %84 = load i32, i32* %83, align 4
  %85 = add nsw i32 %84, %75
  store i32 %85, i32* %83, align 4
  br label %95

86:                                               ; preds = %74
  %87 = sub nsw i32 %55, %75
  %88 = icmp sgt i32 %87, 0
  %89 = select i1 %88, i32 %87, i32 0
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds i8, i8* %36, i64 %49
  store i8 %90, i8* %91, align 1
  %92 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 %49
  %93 = load i32, i32* %92, align 4
  %94 = sub nsw i32 %93, %75
  store i32 %94, i32* %92, align 4
  br label %95

95:                                               ; preds = %77, %86, %61
  %96 = add nuw nsw i64 %49, 1
  %97 = icmp eq i64 %96, 16
  br i1 %97, label %38, label %48

98:                                               ; preds = %44
  store i32 127, i32* %45, align 16
  br label %99

99:                                               ; preds = %98, %44
  %100 = phi i32 [ 127, %98 ], [ %46, %44 ]
  %101 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 1
  %102 = load i32, i32* %101, align 4
  %103 = icmp sgt i32 %102, 127
  br i1 %103, label %104, label %105

104:                                              ; preds = %99
  store i32 127, i32* %101, align 4
  br label %105

105:                                              ; preds = %104, %99
  %106 = phi i32 [ 127, %104 ], [ %102, %99 ]
  %107 = add nsw i32 %106, %100
  %108 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 2
  %109 = load i32, i32* %108, align 8
  %110 = icmp sgt i32 %109, 127
  br i1 %110, label %111, label %112

111:                                              ; preds = %105
  store i32 127, i32* %108, align 8
  br label %112

112:                                              ; preds = %111, %105
  %113 = phi i32 [ 127, %111 ], [ %109, %105 ]
  %114 = add nsw i32 %113, %107
  %115 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 3
  %116 = load i32, i32* %115, align 4
  %117 = icmp sgt i32 %116, 127
  br i1 %117, label %118, label %119

118:                                              ; preds = %112
  store i32 127, i32* %115, align 4
  br label %119

119:                                              ; preds = %118, %112
  %120 = phi i32 [ 127, %118 ], [ %116, %112 ]
  %121 = add nsw i32 %120, %114
  %122 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 4
  %123 = load i32, i32* %122, align 16
  %124 = icmp sgt i32 %123, 127
  br i1 %124, label %125, label %126

125:                                              ; preds = %119
  store i32 127, i32* %122, align 16
  br label %126

126:                                              ; preds = %125, %119
  %127 = phi i32 [ 127, %125 ], [ %123, %119 ]
  %128 = add nsw i32 %127, %121
  %129 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 5
  %130 = load i32, i32* %129, align 4
  %131 = icmp sgt i32 %130, 127
  br i1 %131, label %132, label %133

132:                                              ; preds = %126
  store i32 127, i32* %129, align 4
  br label %133

133:                                              ; preds = %132, %126
  %134 = phi i32 [ 127, %132 ], [ %130, %126 ]
  %135 = add nsw i32 %134, %128
  %136 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 6
  %137 = load i32, i32* %136, align 8
  %138 = icmp sgt i32 %137, 127
  br i1 %138, label %139, label %140

139:                                              ; preds = %133
  store i32 127, i32* %136, align 8
  br label %140

140:                                              ; preds = %139, %133
  %141 = phi i32 [ 127, %139 ], [ %137, %133 ]
  %142 = add nsw i32 %141, %135
  %143 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 7
  %144 = load i32, i32* %143, align 4
  %145 = icmp sgt i32 %144, 127
  br i1 %145, label %146, label %147

146:                                              ; preds = %140
  store i32 127, i32* %143, align 4
  br label %147

147:                                              ; preds = %146, %140
  %148 = phi i32 [ 127, %146 ], [ %144, %140 ]
  %149 = add nsw i32 %148, %142
  %150 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 8
  %151 = load i32, i32* %150, align 16
  %152 = icmp sgt i32 %151, 127
  br i1 %152, label %153, label %154

153:                                              ; preds = %147
  store i32 127, i32* %150, align 16
  br label %154

154:                                              ; preds = %153, %147
  %155 = phi i32 [ 127, %153 ], [ %151, %147 ]
  %156 = add nsw i32 %155, %149
  %157 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 9
  %158 = load i32, i32* %157, align 4
  %159 = icmp sgt i32 %158, 127
  br i1 %159, label %160, label %161

160:                                              ; preds = %154
  store i32 127, i32* %157, align 4
  br label %161

161:                                              ; preds = %160, %154
  %162 = phi i32 [ 127, %160 ], [ %158, %154 ]
  %163 = add nsw i32 %162, %156
  %164 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 10
  %165 = load i32, i32* %164, align 8
  %166 = icmp sgt i32 %165, 127
  br i1 %166, label %167, label %168

167:                                              ; preds = %161
  store i32 127, i32* %164, align 8
  br label %168

168:                                              ; preds = %167, %161
  %169 = phi i32 [ 127, %167 ], [ %165, %161 ]
  %170 = add nsw i32 %169, %163
  %171 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 11
  %172 = load i32, i32* %171, align 4
  %173 = icmp sgt i32 %172, 127
  br i1 %173, label %174, label %175

174:                                              ; preds = %168
  store i32 127, i32* %171, align 4
  br label %175

175:                                              ; preds = %174, %168
  %176 = phi i32 [ 127, %174 ], [ %172, %168 ]
  %177 = add nsw i32 %176, %170
  %178 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 12
  %179 = load i32, i32* %178, align 16
  %180 = icmp sgt i32 %179, 127
  br i1 %180, label %181, label %182

181:                                              ; preds = %175
  store i32 127, i32* %178, align 16
  br label %182

182:                                              ; preds = %181, %175
  %183 = phi i32 [ 127, %181 ], [ %179, %175 ]
  %184 = add nsw i32 %183, %177
  %185 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 13
  %186 = load i32, i32* %185, align 4
  %187 = icmp sgt i32 %186, 127
  br i1 %187, label %188, label %189

188:                                              ; preds = %182
  store i32 127, i32* %185, align 4
  br label %189

189:                                              ; preds = %188, %182
  %190 = phi i32 [ 127, %188 ], [ %186, %182 ]
  %191 = add nsw i32 %190, %184
  %192 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 14
  %193 = load i32, i32* %192, align 8
  %194 = icmp sgt i32 %193, 127
  br i1 %194, label %195, label %196

195:                                              ; preds = %189
  store i32 127, i32* %192, align 8
  br label %196

196:                                              ; preds = %195, %189
  %197 = phi i32 [ 127, %195 ], [ %193, %189 ]
  %198 = add nsw i32 %197, %191
  %199 = getelementptr inbounds [16 x i32], [16 x i32]* %10, i64 0, i64 15
  %200 = load i32, i32* %199, align 4
  %201 = icmp sgt i32 %200, 127
  br i1 %201, label %202, label %203

202:                                              ; preds = %196
  store i32 127, i32* %199, align 4
  br label %203

203:                                              ; preds = %202, %196
  %204 = phi i32 [ 127, %202 ], [ %200, %196 ]
  %205 = add nsw i32 %204, %198
  %206 = icmp eq i32 %8, 0
  %207 = load i32, i32* @_ZN6webrtc21kSumDiffThresholdHighE, align 4
  %208 = load i32, i32* @_ZN6webrtc17kSumDiffThresholdE, align 4
  %209 = select i1 %206, i32 %208, i32 %207
  %210 = icmp slt i32 %205, 0
  %211 = sub nsw i32 0, %205
  %212 = select i1 %210, i32 %211, i32 %205
  %213 = icmp sle i32 %212, %209
  %214 = zext i1 %213 to i32
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #5
  ret i32 %214
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc14DenoiserFilterD2Ev(%"class.webrtc::DenoiserFilter"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc15DenoiserFilterCD0Ev(%"class.webrtc::DenoiserFilterC"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.webrtc::DenoiserFilterC"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
