; ModuleID = '../../third_party/webrtc/modules/video_coding/svc/scalable_video_controller_no_layering.cc'
source_filename = "../../third_party/webrtc/modules/video_coding/svc/scalable_video_controller_no_layering.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::ScalableVideoControllerNoLayering" = type <{ %"class.webrtc::ScalableVideoController", i8, i8, [6 x i8] }>
%"class.webrtc::ScalableVideoController" = type { i32 (...)** }
%"struct.webrtc::ScalableVideoController::StreamLayersConfig" = type { i32, i32, [4 x i32], [4 x i32] }
%"struct.webrtc::FrameDependencyStructure" = type { i32, i32, i32, %"class.absl::InlinedVector", %"class.absl::InlinedVector.1", %"class.std::__1::vector" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.0" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.1" = type { %"class.absl::inlined_vector_internal::Storage.2" }
%"class.absl::inlined_vector_internal::Storage.2" = type { %"class.absl::container_internal::CompressedTuple.3", %"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data" }
%"class.absl::container_internal::CompressedTuple.3" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.4" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.4" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Allocated", [16 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Allocated" = type { %"class.webrtc::RenderResolution"*, i64 }
%"class.webrtc::RenderResolution" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"*, %"class.std::__1::__compressed_pair" }
%"struct.webrtc::FrameDependencyTemplate" = type { i32, i32, %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15" }
%"class.absl::InlinedVector.8" = type { %"class.absl::inlined_vector_internal::Storage.9" }
%"class.absl::inlined_vector_internal::Storage.9" = type { %"class.absl::container_internal::CompressedTuple.10", %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" }
%"class.absl::container_internal::CompressedTuple.10" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.11" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.11" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.15" = type { %"class.absl::inlined_vector_internal::Storage.16" }
%"class.absl::inlined_vector_internal::Storage.16" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" }
%"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.webrtc::FrameDependencyTemplate"* }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"class.webrtc::ScalableVideoController::LayerFrameConfig"*, %"class.webrtc::ScalableVideoController::LayerFrameConfig"*, %"class.std::__1::__compressed_pair.30" }
%"class.webrtc::ScalableVideoController::LayerFrameConfig" = type { i32, i8, i32, i32, %"class.absl::InlinedVector.23" }
%"class.absl::InlinedVector.23" = type { %"class.absl::inlined_vector_internal::Storage.24" }
%"class.absl::inlined_vector_internal::Storage.24" = type { %"class.absl::container_internal::CompressedTuple.25", %"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data" }
%"class.absl::container_internal::CompressedTuple.25" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.26" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.26" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Allocated", [48 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Allocated" = type { %"struct.webrtc::CodecBufferUsage"*, i64 }
%"struct.webrtc::CodecBufferUsage" = type <{ i32, i8, i8, [2 x i8] }>
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.webrtc::ScalableVideoController::LayerFrameConfig"* }
%"struct.webrtc::GenericFrameInfo" = type { %"struct.webrtc::FrameDependencyTemplate", %"class.absl::InlinedVector.23", %"class.std::__1::vector.35", %"class.std::__1::bitset" }
%"class.std::__1::vector.35" = type { i64*, i64, %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { i64 }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.webrtc::VideoBitrateAllocation" = type <{ i32, [5 x [4 x %"class.absl::optional"]], i8, [3 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m = comdat any

$_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc16CodecBufferUsageELm8ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m = comdat any

@.ref.tmp = private constant [1 x i32] zeroinitializer, align 4
@.ref.tmp.1 = private constant [1 x i32] [i32 2], align 4
@.ref.tmp.2 = private constant [1 x i32] zeroinitializer, align 4
@.ref.tmp.3 = private constant [1 x i32] [i32 2], align 4
@.ref.tmp.4 = private constant [1 x i32] [i32 1], align 4
@.ref.tmp.5 = private constant [1 x i32] [i32 1], align 4
@.ref.tmp.6 = private constant [1 x i32] [i32 2], align 4
@_ZTVN6webrtc33ScalableVideoControllerNoLayeringE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::ScalableVideoControllerNoLayering"*)* @_ZN6webrtc33ScalableVideoControllerNoLayeringD2Ev to i8*), i8* bitcast (void (%"class.webrtc::ScalableVideoControllerNoLayering"*)* @_ZN6webrtc33ScalableVideoControllerNoLayeringD0Ev to i8*), i8* bitcast (void (%"struct.webrtc::ScalableVideoController::StreamLayersConfig"*, %"class.webrtc::ScalableVideoControllerNoLayering"*)* @_ZNK6webrtc33ScalableVideoControllerNoLayering12StreamConfigEv to i8*), i8* bitcast (void (%"struct.webrtc::FrameDependencyStructure"*, %"class.webrtc::ScalableVideoControllerNoLayering"*)* @_ZNK6webrtc33ScalableVideoControllerNoLayering19DependencyStructureEv to i8*), i8* bitcast (void (%"class.webrtc::ScalableVideoControllerNoLayering"*, %"class.webrtc::VideoBitrateAllocation"*)* @_ZN6webrtc33ScalableVideoControllerNoLayering14OnRatesUpdatedERKNS_22VideoBitrateAllocationE to i8*), i8* bitcast (void (%"class.std::__1::vector.21"*, %"class.webrtc::ScalableVideoControllerNoLayering"*, i1)* @_ZN6webrtc33ScalableVideoControllerNoLayering15NextFrameConfigEb to i8*), i8* bitcast (void (%"struct.webrtc::GenericFrameInfo"*, %"class.webrtc::ScalableVideoControllerNoLayering"*, %"class.webrtc::ScalableVideoController::LayerFrameConfig"*)* @_ZN6webrtc33ScalableVideoControllerNoLayering12OnEncodeDoneERKNS_23ScalableVideoController16LayerFrameConfigE to i8*)] }, align 8

@_ZN6webrtc33ScalableVideoControllerNoLayeringD1Ev = hidden unnamed_addr alias void (%"class.webrtc::ScalableVideoControllerNoLayering"*), void (%"class.webrtc::ScalableVideoControllerNoLayering"*)* @_ZN6webrtc33ScalableVideoControllerNoLayeringD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6webrtc33ScalableVideoControllerNoLayeringD2Ev(%"class.webrtc::ScalableVideoControllerNoLayering"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc33ScalableVideoControllerNoLayeringD0Ev(%"class.webrtc::ScalableVideoControllerNoLayering"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.webrtc::ScalableVideoControllerNoLayering"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc33ScalableVideoControllerNoLayering12StreamConfigEv(%"struct.webrtc::ScalableVideoController::StreamLayersConfig"* noalias nocapture sret, %"class.webrtc::ScalableVideoControllerNoLayering"* nocapture readnone) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.webrtc::ScalableVideoController::StreamLayersConfig", %"struct.webrtc::ScalableVideoController::StreamLayersConfig"* %0, i64 0, i32 2, i64 2
  %4 = bitcast i32* %3 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %4, align 4
  %5 = getelementptr inbounds %"struct.webrtc::ScalableVideoController::StreamLayersConfig", %"struct.webrtc::ScalableVideoController::StreamLayersConfig"* %0, i64 0, i32 3, i64 2
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %"struct.webrtc::ScalableVideoController::StreamLayersConfig", %"struct.webrtc::ScalableVideoController::StreamLayersConfig"* %0, i64 0, i32 3, i64 3
  store i32 1, i32* %6, align 4
  %7 = bitcast %"struct.webrtc::ScalableVideoController::StreamLayersConfig"* %0 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %7, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc33ScalableVideoControllerNoLayering19DependencyStructureEv(%"struct.webrtc::FrameDependencyStructure"* noalias sret, %"class.webrtc::ScalableVideoControllerNoLayering"* nocapture readnone) unnamed_addr #1 align 2 {
  %3 = alloca %"struct.webrtc::FrameDependencyTemplate", align 8
  %4 = alloca %"struct.webrtc::FrameDependencyTemplate", align 8
  %5 = bitcast %"struct.webrtc::FrameDependencyStructure"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 -86, i64 104, i1 false)
  %6 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 5
  %12 = bitcast %"class.std::__1::vector"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #12
  store i32 1, i32* %7, align 4
  store i32 1, i32* %8, align 8
  %13 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 3, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage"* %13, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp, i64 0, i64 0), i64 1) #12
  %14 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %14) #12
  %15 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %3, i64 0, i32 2, i32 0, i32 1
  %16 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 88, i1 false)
  %17 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %3, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %3, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %18, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 16, i1 false) #12
  %19 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %3, i64 0, i32 2, i32 0
  call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.9"* %19, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp.1, i64 0, i64 0), i64 1) #12
  %20 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %3, i64 0, i32 4, i32 0
  call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.16"* %20, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp.2, i64 0, i64 0), i64 1) #12
  %21 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 5, i32 0, i32 1
  %22 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %21, align 8
  %23 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %24 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %23, align 8
  %25 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %22, %24
  br i1 %25, label %27, label %26

26:                                               ; preds = %2
  call void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_(%"class.std::__1::vector"* %11, %"struct.webrtc::FrameDependencyTemplate"* nonnull dereferenceable(104) %3) #12
  br label %28

27:                                               ; preds = %2
  call void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"* %11, %"struct.webrtc::FrameDependencyTemplate"* nonnull dereferenceable(104) %3) #12
  br label %28

28:                                               ; preds = %26, %27
  %29 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %29) #12
  %30 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 1
  %31 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 88, i1 false)
  %32 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %32, align 8
  %33 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %33, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 0, i64 16, i1 false) #12
  %34 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0
  call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.9"* %34, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp.3, i64 0, i64 0), i64 1) #12
  %35 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4, i32 0
  call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.16"* %35, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp.4, i64 0, i64 0), i64 1) #12
  %36 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3, i32 0
  call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.16"* %36, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp.5, i64 0, i64 0), i64 1) #12
  %37 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %21, align 8
  %38 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %23, align 8
  %39 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %37, %38
  br i1 %39, label %41, label %40

40:                                               ; preds = %28
  call void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_(%"class.std::__1::vector"* %11, %"struct.webrtc::FrameDependencyTemplate"* nonnull dereferenceable(104) %4) #12
  br label %42

41:                                               ; preds = %28
  call void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"* %11, %"struct.webrtc::FrameDependencyTemplate"* nonnull dereferenceable(104) %4) #12
  br label %42

42:                                               ; preds = %40, %41
  %43 = load i64, i64* %33, align 8
  %44 = and i64 %43, 1
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %48 = bitcast i32** %47 to i8**
  %49 = load i8*, i8** %48, align 8
  call void @_ZdlPv(i8* %49) #11
  br label %50

50:                                               ; preds = %46, %42
  %51 = load i64, i64* %32, align 8
  %52 = and i64 %51, 1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %56 = bitcast i32** %55 to i8**
  %57 = load i8*, i8** %56, align 8
  call void @_ZdlPv(i8* %57) #11
  br label %58

58:                                               ; preds = %54, %50
  %59 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %65 = bitcast i32** %64 to i8**
  %66 = load i8*, i8** %65, align 8
  call void @_ZdlPv(i8* %66) #11
  br label %67

67:                                               ; preds = %58, %63
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %29) #12
  %68 = load i64, i64* %18, align 8
  %69 = and i64 %68, 1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %3, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %73 = bitcast i32** %72 to i8**
  %74 = load i8*, i8** %73, align 8
  call void @_ZdlPv(i8* %74) #11
  br label %75

75:                                               ; preds = %71, %67
  %76 = load i64, i64* %17, align 8
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %3, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %81 = bitcast i32** %80 to i8**
  %82 = load i8*, i8** %81, align 8
  call void @_ZdlPv(i8* %82) #11
  br label %83

83:                                               ; preds = %79, %75
  %84 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = and i64 %85, 1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %3, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %90 = bitcast i32** %89 to i8**
  %91 = load i8*, i8** %90, align 8
  call void @_ZdlPv(i8* %91) #11
  br label %92

92:                                               ; preds = %83, %88
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %14) #12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc33ScalableVideoControllerNoLayering15NextFrameConfigEb(%"class.std::__1::vector.21"* noalias nocapture sret, %"class.webrtc::ScalableVideoControllerNoLayering"* nocapture, i1 zeroext) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::ScalableVideoControllerNoLayering", %"class.webrtc::ScalableVideoControllerNoLayering"* %1, i64 0, i32 2
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = bitcast %"class.std::__1::vector.21"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #12
  br label %39

9:                                                ; preds = %3
  %10 = tail call i8* @_Znwm(i64 88) #11
  %11 = ptrtoint i8* %10 to i64
  %12 = getelementptr inbounds i8, i8* %10, i64 88
  %13 = ptrtoint i8* %12 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 88, i1 false) #12
  br i1 %2, label %18, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.webrtc::ScalableVideoControllerNoLayering", %"class.webrtc::ScalableVideoControllerNoLayering"* %1, i64 0, i32 1
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %14, %9
  %19 = bitcast i8* %10 to i32*
  store i32 0, i32* %19, align 8
  %20 = getelementptr inbounds i8, i8* %10, i64 4
  store i8 1, i8* %20, align 4
  br label %23

21:                                               ; preds = %14
  %22 = bitcast i8* %10 to i32*
  store i32 0, i32* %22, align 8
  br label %23

23:                                               ; preds = %21, %18
  %24 = phi i8 [ 1, %21 ], [ 0, %18 ]
  %25 = getelementptr inbounds i8, i8* %10, i64 16
  %26 = bitcast i8* %25 to i64*
  %27 = getelementptr inbounds i8, i8* %10, i64 24
  %28 = bitcast i8* %27 to i32*
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %10, i64 28
  store i8 %24, i8* %29, align 4
  %30 = getelementptr inbounds i8, i8* %10, i64 29
  store i8 1, i8* %30, align 1
  %31 = load i64, i64* %26, align 8
  %32 = add i64 %31, 2
  store i64 %32, i64* %26, align 8
  %33 = getelementptr inbounds %"class.webrtc::ScalableVideoControllerNoLayering", %"class.webrtc::ScalableVideoControllerNoLayering"* %1, i64 0, i32 1
  store i8 0, i8* %33, align 8
  %34 = bitcast %"class.std::__1::vector.21"* %0 to i64*
  store i64 %11, i64* %34, align 8
  %35 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 1
  %36 = bitcast %"class.webrtc::ScalableVideoController::LayerFrameConfig"** %35 to i64*
  store i64 %13, i64* %36, align 8
  %37 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %38 = bitcast %"class.webrtc::ScalableVideoController::LayerFrameConfig"** %37 to i64*
  store i64 %13, i64* %38, align 8
  br label %39

39:                                               ; preds = %23, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc33ScalableVideoControllerNoLayering12OnEncodeDoneERKNS_23ScalableVideoController16LayerFrameConfigE(%"struct.webrtc::GenericFrameInfo"* noalias sret, %"class.webrtc::ScalableVideoControllerNoLayering"* nocapture readnone, %"class.webrtc::ScalableVideoController::LayerFrameConfig"* dereferenceable(88)) unnamed_addr #1 align 2 {
  %4 = bitcast %"struct.webrtc::GenericFrameInfo"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -86, i64 208, i1 false)
  tail call void @_ZN6webrtc16GenericFrameInfoC1Ev(%"struct.webrtc::GenericFrameInfo"* %0) #12
  %5 = getelementptr inbounds %"class.webrtc::ScalableVideoController::LayerFrameConfig", %"class.webrtc::ScalableVideoController::LayerFrameConfig"* %2, i64 0, i32 4
  %6 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %0, i64 0, i32 1
  %7 = icmp eq %"class.absl::InlinedVector.23"* %5, %6
  br i1 %7, label %22, label %8, !prof !3

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::InlinedVector.23", %"class.absl::InlinedVector.23"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %11, 0
  %13 = getelementptr inbounds %"class.webrtc::ScalableVideoController::LayerFrameConfig", %"class.webrtc::ScalableVideoController::LayerFrameConfig"* %2, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %14 = load %"struct.webrtc::CodecBufferUsage"*, %"struct.webrtc::CodecBufferUsage"** %13, align 8
  %15 = getelementptr inbounds %"class.webrtc::ScalableVideoController::LayerFrameConfig", %"class.webrtc::ScalableVideoController::LayerFrameConfig"* %2, i64 0, i32 4, i32 0, i32 1
  %16 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data"* %15 to %"struct.webrtc::CodecBufferUsage"*
  %17 = select i1 %12, %"struct.webrtc::CodecBufferUsage"* %16, %"struct.webrtc::CodecBufferUsage"* %14
  %18 = lshr i64 %10, 1
  %19 = getelementptr inbounds %"class.absl::InlinedVector.23", %"class.absl::InlinedVector.23"* %6, i64 0, i32 0
  %20 = shl nuw i64 %18, 3
  %21 = ashr exact i64 %20, 3
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc16CodecBufferUsageELm8ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.24"* %19, %"struct.webrtc::CodecBufferUsage"* %17, i64 %21) #12
  br label %22

22:                                               ; preds = %3, %8
  %23 = getelementptr inbounds %"class.webrtc::ScalableVideoController::LayerFrameConfig", %"class.webrtc::ScalableVideoController::LayerFrameConfig"* %2, i64 0, i32 1
  %24 = load i8, i8* %23, align 4, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %68, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.absl::InlinedVector.23", %"class.absl::InlinedVector.23"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %29, 0
  %31 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %32 = load %"struct.webrtc::CodecBufferUsage"*, %"struct.webrtc::CodecBufferUsage"** %31, align 8
  %33 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %0, i64 0, i32 1, i32 0, i32 1
  %34 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data"* %33 to %"struct.webrtc::CodecBufferUsage"*
  %35 = select i1 %30, %"struct.webrtc::CodecBufferUsage"* %34, %"struct.webrtc::CodecBufferUsage"* %32
  %36 = lshr i64 %28, 1
  %37 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %35, i64 %36
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %68, label %39

39:                                               ; preds = %26
  %40 = shl nuw nsw i64 %36, 3
  %41 = add nsw i64 %40, -8
  %42 = lshr exact i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = and i64 %43, 7
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %39, %46
  %47 = phi %"struct.webrtc::CodecBufferUsage"* [ %50, %46 ], [ %35, %39 ]
  %48 = phi i64 [ %51, %46 ], [ %44, %39 ]
  %49 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %47, i64 0, i32 1
  store i8 0, i8* %49, align 4
  %50 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %47, i64 1
  %51 = add i64 %48, -1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %46, !llvm.loop !4

53:                                               ; preds = %46, %39
  %54 = phi %"struct.webrtc::CodecBufferUsage"* [ %35, %39 ], [ %50, %46 ]
  %55 = icmp ult i64 %41, 56
  br i1 %55, label %68, label %56

56:                                               ; preds = %53, %56
  %57 = phi %"struct.webrtc::CodecBufferUsage"* [ %66, %56 ], [ %54, %53 ]
  %58 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %57, i64 0, i32 1
  store i8 0, i8* %58, align 4
  %59 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %57, i64 1, i32 1
  store i8 0, i8* %59, align 4
  %60 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %57, i64 2, i32 1
  store i8 0, i8* %60, align 4
  %61 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %57, i64 3, i32 1
  store i8 0, i8* %61, align 4
  %62 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %57, i64 4, i32 1
  store i8 0, i8* %62, align 4
  %63 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %57, i64 5, i32 1
  store i8 0, i8* %63, align 4
  %64 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %57, i64 6, i32 1
  store i8 0, i8* %64, align 4
  %65 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %57, i64 7, i32 1
  store i8 0, i8* %65, align 4
  %66 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %57, i64 8
  %67 = icmp eq %"struct.webrtc::CodecBufferUsage"* %66, %37
  br i1 %67, label %68, label %56

68:                                               ; preds = %53, %56, %26, %22
  %69 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %0, i64 0, i32 0, i32 2, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.9"* %69, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp.6, i64 0, i64 0), i64 1) #12
  %70 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %0, i64 0, i32 2
  %71 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %0, i64 0, i32 2, i32 1
  store i64 0, i64* %71, align 8
  %72 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %0, i64 0, i32 2, i32 2, i32 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = and i64 %73, 288230376151711743
  %75 = icmp eq i64 %74, 0
  %76 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %70, i64 0, i32 0
  %77 = load i64*, i64** %76, align 8
  br i1 %75, label %78, label %87

78:                                               ; preds = %68
  %79 = icmp eq i64* %77, null
  br i1 %79, label %83, label %80

80:                                               ; preds = %78
  %81 = bitcast i64* %77 to i8*
  tail call void @_ZdlPv(i8* %81) #11
  %82 = bitcast %"class.std::__1::vector.35"* %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 24, i1 false) #12
  br label %83

83:                                               ; preds = %80, %78
  %84 = tail call i8* @_Znwm(i64 8) #11
  %85 = bitcast %"class.std::__1::vector.35"* %70 to i8**
  store i8* %84, i8** %85, align 8
  store i64 1, i64* %72, align 8
  %86 = bitcast i8* %84 to i64*
  br label %87

87:                                               ; preds = %68, %83
  %88 = phi i64* [ %86, %83 ], [ %77, %68 ]
  store i64 1, i64* %71, align 8
  store i64 0, i64* %88, align 8
  %89 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %70, i64 0, i32 0
  %90 = load i64*, i64** %89, align 8, !noalias !6
  %91 = load i64, i64* %90, align 8, !noalias !9
  %92 = or i64 %91, 1
  store i64 %92, i64* %90, align 8, !noalias !9
  ret void
}

declare void @_ZN6webrtc16GenericFrameInfoC1Ev(%"struct.webrtc::GenericFrameInfo"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc33ScalableVideoControllerNoLayering14OnRatesUpdatedERKNS_22VideoBitrateAllocationE(%"class.webrtc::ScalableVideoControllerNoLayering"* nocapture, %"class.webrtc::VideoBitrateAllocation"* dereferenceable(168)) unnamed_addr #1 align 2 {
  %3 = tail call i32 @_ZNK6webrtc22VideoBitrateAllocation10GetBitrateEmm(%"class.webrtc::VideoBitrateAllocation"* %1, i64 0, i64 0) #12
  %4 = icmp ne i32 %3, 0
  %5 = getelementptr inbounds %"class.webrtc::ScalableVideoControllerNoLayering", %"class.webrtc::ScalableVideoControllerNoLayering"* %0, i64 0, i32 2
  %6 = zext i1 %4 to i8
  store i8 %6, i8* %5, align 1
  ret void
}

declare i32 @_ZNK6webrtc22VideoBitrateAllocation10GetBitrateEmm(%"class.webrtc::VideoBitrateAllocation"*, i64, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage"*, i32*, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !16
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !16
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !16
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 10, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #13
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 2
  %30 = tail call i8* @_Znwm(i64 %29) #11
  %31 = bitcast i8* %30 to i32*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i32*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i32, i32* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i32* %37, i32* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 8
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i32, i32* %35, i64 %40
  %46 = getelementptr i32, i32* %1, i64 %40
  %47 = bitcast i32* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i32* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775800
  %53 = getelementptr i32, i32* %1, i64 %52
  %54 = add nsw i64 %52, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 24
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i32, i32* %1, i64 %62
  %65 = getelementptr inbounds i32, i32* %35, i64 %62
  %66 = bitcast i32* %64 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !19
  %68 = getelementptr i32, i32* %64, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !19
  %71 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4, !alias.scope !22, !noalias !19
  %72 = getelementptr inbounds i32, i32* %65, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !22, !noalias !19
  %74 = or i64 %62, 8
  %75 = getelementptr i32, i32* %1, i64 %74
  %76 = getelementptr inbounds i32, i32* %35, i64 %74
  %77 = bitcast i32* %75 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !19
  %79 = getelementptr i32, i32* %75, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !19
  %82 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !22, !noalias !19
  %83 = getelementptr inbounds i32, i32* %76, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 4, !alias.scope !22, !noalias !19
  %85 = or i64 %62, 16
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = getelementptr inbounds i32, i32* %35, i64 %85
  %88 = bitcast i32* %86 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !19
  %90 = getelementptr i32, i32* %86, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !19
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !22, !noalias !19
  %94 = getelementptr inbounds i32, i32* %87, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !22, !noalias !19
  %96 = or i64 %62, 24
  %97 = getelementptr i32, i32* %1, i64 %96
  %98 = getelementptr inbounds i32, i32* %35, i64 %96
  %99 = bitcast i32* %97 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !19
  %101 = getelementptr i32, i32* %97, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !19
  %104 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 4, !alias.scope !22, !noalias !19
  %105 = getelementptr inbounds i32, i32* %98, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %106, align 4, !alias.scope !22, !noalias !19
  %107 = add i64 %62, 32
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !24

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i32, i32* %1, i64 %114
  %117 = getelementptr inbounds i32, i32* %35, i64 %114
  %118 = bitcast i32* %116 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !19
  %120 = getelementptr i32, i32* %116, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !19
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 4, !alias.scope !22, !noalias !19
  %124 = getelementptr inbounds i32, i32* %117, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %125, align 4, !alias.scope !22, !noalias !19
  %126 = add i64 %114, 8
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !26

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i32* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i32* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i32, i32* %35, i64 %140
  %143 = load i32, i32* %139, align 4
  store i32 %143, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !27

148:                                              ; preds = %138, %131
  %149 = phi i32* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i32* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i32* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i32, i32* %35, i64 %155
  %157 = load i32, i32* %154, align 4
  store i32 %157, i32* %156, align 4
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i32, i32* %35, i64 %159
  %161 = load i32, i32* %158, align 4
  store i32 %161, i32* %160, align 4
  %162 = getelementptr inbounds i32, i32* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i32, i32* %35, i64 %163
  %165 = load i32, i32* %162, align 4
  store i32 %165, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i32, i32* %35, i64 %167
  %169 = load i32, i32* %166, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !28

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i32* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i32* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i32* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 8
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i32, i32* %179, i64 %178
  %185 = getelementptr i32, i32* %177, i64 %178
  %186 = icmp ult i32* %179, %185
  %187 = icmp ult i32* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -8
  %191 = getelementptr i32, i32* %177, i64 %190
  %192 = add i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 24
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i32, i32* %177, i64 %200
  %203 = getelementptr inbounds i32, i32* %179, i64 %200
  %204 = bitcast i32* %202 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 4, !alias.scope !29
  %206 = getelementptr i32, i32* %202, i64 4
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4, !alias.scope !29
  %209 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %209, align 4, !alias.scope !32, !noalias !29
  %210 = getelementptr inbounds i32, i32* %203, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %211, align 4, !alias.scope !32, !noalias !29
  %212 = or i64 %200, 8
  %213 = getelementptr i32, i32* %177, i64 %212
  %214 = getelementptr inbounds i32, i32* %179, i64 %212
  %215 = bitcast i32* %213 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !29
  %217 = getelementptr i32, i32* %213, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !29
  %220 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %220, align 4, !alias.scope !32, !noalias !29
  %221 = getelementptr inbounds i32, i32* %214, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !32, !noalias !29
  %223 = or i64 %200, 16
  %224 = getelementptr i32, i32* %177, i64 %223
  %225 = getelementptr inbounds i32, i32* %179, i64 %223
  %226 = bitcast i32* %224 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !29
  %228 = getelementptr i32, i32* %224, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !29
  %231 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4, !alias.scope !32, !noalias !29
  %232 = getelementptr inbounds i32, i32* %225, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %233, align 4, !alias.scope !32, !noalias !29
  %234 = or i64 %200, 24
  %235 = getelementptr i32, i32* %177, i64 %234
  %236 = getelementptr inbounds i32, i32* %179, i64 %234
  %237 = bitcast i32* %235 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4, !alias.scope !29
  %239 = getelementptr i32, i32* %235, i64 4
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !29
  %242 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %242, align 4, !alias.scope !32, !noalias !29
  %243 = getelementptr inbounds i32, i32* %236, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %244, align 4, !alias.scope !32, !noalias !29
  %245 = add i64 %200, 32
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !34

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i32, i32* %177, i64 %252
  %255 = getelementptr inbounds i32, i32* %179, i64 %252
  %256 = bitcast i32* %254 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !alias.scope !29
  %258 = getelementptr i32, i32* %254, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !29
  %261 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %261, align 4, !alias.scope !32, !noalias !29
  %262 = getelementptr inbounds i32, i32* %255, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %263, align 4, !alias.scope !32, !noalias !29
  %264 = add i64 %252, 8
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !35

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i32* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i32* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i32, i32* %179, i64 %278
  %281 = load i32, i32* %277, align 4
  store i32 %281, i32* %280, align 4
  %282 = getelementptr inbounds i32, i32* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !36

286:                                              ; preds = %276, %269
  %287 = phi i32* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i32* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i32, i32* %179, i64 %292
  %294 = load i32, i32* %291, align 4
  store i32 %294, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i32, i32* %179, i64 %296
  %298 = load i32, i32* %295, align 4
  store i32 %298, i32* %297, align 4
  %299 = getelementptr inbounds i32, i32* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i32, i32* %179, i64 %300
  %302 = load i32, i32* %299, align 4
  store i32 %302, i32* %301, align 4
  %303 = getelementptr inbounds i32, i32* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i32, i32* %179, i64 %304
  %306 = load i32, i32* %303, align 4
  store i32 %306, i32* %305, align 4
  %307 = getelementptr inbounds i32, i32* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !37

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i32** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #11
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i32** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.9"*, i32*, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !38
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !38
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !38
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 10, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #13
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 2
  %30 = tail call i8* @_Znwm(i64 %29) #11
  %31 = bitcast i8* %30 to i32*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i32*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i32, i32* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i32* %37, i32* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 8
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i32, i32* %35, i64 %40
  %46 = getelementptr i32, i32* %1, i64 %40
  %47 = bitcast i32* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i32* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775800
  %53 = getelementptr i32, i32* %1, i64 %52
  %54 = add nsw i64 %52, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 24
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i32, i32* %1, i64 %62
  %65 = getelementptr inbounds i32, i32* %35, i64 %62
  %66 = bitcast i32* %64 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !41
  %68 = getelementptr i32, i32* %64, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !41
  %71 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4, !alias.scope !44, !noalias !41
  %72 = getelementptr inbounds i32, i32* %65, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !44, !noalias !41
  %74 = or i64 %62, 8
  %75 = getelementptr i32, i32* %1, i64 %74
  %76 = getelementptr inbounds i32, i32* %35, i64 %74
  %77 = bitcast i32* %75 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !41
  %79 = getelementptr i32, i32* %75, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !41
  %82 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !44, !noalias !41
  %83 = getelementptr inbounds i32, i32* %76, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 4, !alias.scope !44, !noalias !41
  %85 = or i64 %62, 16
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = getelementptr inbounds i32, i32* %35, i64 %85
  %88 = bitcast i32* %86 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !41
  %90 = getelementptr i32, i32* %86, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !41
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !44, !noalias !41
  %94 = getelementptr inbounds i32, i32* %87, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !44, !noalias !41
  %96 = or i64 %62, 24
  %97 = getelementptr i32, i32* %1, i64 %96
  %98 = getelementptr inbounds i32, i32* %35, i64 %96
  %99 = bitcast i32* %97 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !41
  %101 = getelementptr i32, i32* %97, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !41
  %104 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 4, !alias.scope !44, !noalias !41
  %105 = getelementptr inbounds i32, i32* %98, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %106, align 4, !alias.scope !44, !noalias !41
  %107 = add i64 %62, 32
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !46

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i32, i32* %1, i64 %114
  %117 = getelementptr inbounds i32, i32* %35, i64 %114
  %118 = bitcast i32* %116 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !41
  %120 = getelementptr i32, i32* %116, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !41
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 4, !alias.scope !44, !noalias !41
  %124 = getelementptr inbounds i32, i32* %117, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %125, align 4, !alias.scope !44, !noalias !41
  %126 = add i64 %114, 8
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !47

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i32* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i32* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i32, i32* %35, i64 %140
  %143 = load i32, i32* %139, align 4
  store i32 %143, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !48

148:                                              ; preds = %138, %131
  %149 = phi i32* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i32* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i32* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i32, i32* %35, i64 %155
  %157 = load i32, i32* %154, align 4
  store i32 %157, i32* %156, align 4
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i32, i32* %35, i64 %159
  %161 = load i32, i32* %158, align 4
  store i32 %161, i32* %160, align 4
  %162 = getelementptr inbounds i32, i32* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i32, i32* %35, i64 %163
  %165 = load i32, i32* %162, align 4
  store i32 %165, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i32, i32* %35, i64 %167
  %169 = load i32, i32* %166, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !49

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i32* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i32* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i32* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 8
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i32, i32* %179, i64 %178
  %185 = getelementptr i32, i32* %177, i64 %178
  %186 = icmp ult i32* %179, %185
  %187 = icmp ult i32* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -8
  %191 = getelementptr i32, i32* %177, i64 %190
  %192 = add i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 24
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i32, i32* %177, i64 %200
  %203 = getelementptr inbounds i32, i32* %179, i64 %200
  %204 = bitcast i32* %202 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 4, !alias.scope !50
  %206 = getelementptr i32, i32* %202, i64 4
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4, !alias.scope !50
  %209 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %209, align 4, !alias.scope !53, !noalias !50
  %210 = getelementptr inbounds i32, i32* %203, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %211, align 4, !alias.scope !53, !noalias !50
  %212 = or i64 %200, 8
  %213 = getelementptr i32, i32* %177, i64 %212
  %214 = getelementptr inbounds i32, i32* %179, i64 %212
  %215 = bitcast i32* %213 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !50
  %217 = getelementptr i32, i32* %213, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !50
  %220 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %220, align 4, !alias.scope !53, !noalias !50
  %221 = getelementptr inbounds i32, i32* %214, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !53, !noalias !50
  %223 = or i64 %200, 16
  %224 = getelementptr i32, i32* %177, i64 %223
  %225 = getelementptr inbounds i32, i32* %179, i64 %223
  %226 = bitcast i32* %224 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !50
  %228 = getelementptr i32, i32* %224, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !50
  %231 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4, !alias.scope !53, !noalias !50
  %232 = getelementptr inbounds i32, i32* %225, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %233, align 4, !alias.scope !53, !noalias !50
  %234 = or i64 %200, 24
  %235 = getelementptr i32, i32* %177, i64 %234
  %236 = getelementptr inbounds i32, i32* %179, i64 %234
  %237 = bitcast i32* %235 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4, !alias.scope !50
  %239 = getelementptr i32, i32* %235, i64 4
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !50
  %242 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %242, align 4, !alias.scope !53, !noalias !50
  %243 = getelementptr inbounds i32, i32* %236, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %244, align 4, !alias.scope !53, !noalias !50
  %245 = add i64 %200, 32
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !55

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i32, i32* %177, i64 %252
  %255 = getelementptr inbounds i32, i32* %179, i64 %252
  %256 = bitcast i32* %254 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !alias.scope !50
  %258 = getelementptr i32, i32* %254, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !50
  %261 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %261, align 4, !alias.scope !53, !noalias !50
  %262 = getelementptr inbounds i32, i32* %255, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %263, align 4, !alias.scope !53, !noalias !50
  %264 = add i64 %252, 8
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !56

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i32* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i32* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i32, i32* %179, i64 %278
  %281 = load i32, i32* %277, align 4
  store i32 %281, i32* %280, align 4
  %282 = getelementptr inbounds i32, i32* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !57

286:                                              ; preds = %276, %269
  %287 = phi i32* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i32* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i32, i32* %179, i64 %292
  %294 = load i32, i32* %291, align 4
  store i32 %294, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i32, i32* %179, i64 %296
  %298 = load i32, i32* %295, align 4
  store i32 %298, i32* %297, align 4
  %299 = getelementptr inbounds i32, i32* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i32, i32* %179, i64 %300
  %302 = load i32, i32* %299, align 4
  store i32 %302, i32* %301, align 4
  %303 = getelementptr inbounds i32, i32* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i32, i32* %179, i64 %304
  %306 = load i32, i32* %303, align 4
  store i32 %306, i32* %305, align 4
  %307 = getelementptr inbounds i32, i32* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !58

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i32** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #11
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i32** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.16"*, i32*, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !59
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !59
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !59
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 4, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #13
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 2
  %30 = tail call i8* @_Znwm(i64 %29) #11
  %31 = bitcast i8* %30 to i32*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i32*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i32, i32* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i32* %37, i32* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 8
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i32, i32* %35, i64 %40
  %46 = getelementptr i32, i32* %1, i64 %40
  %47 = bitcast i32* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i32* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775800
  %53 = getelementptr i32, i32* %1, i64 %52
  %54 = add nsw i64 %52, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 24
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i32, i32* %1, i64 %62
  %65 = getelementptr inbounds i32, i32* %35, i64 %62
  %66 = bitcast i32* %64 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !62
  %68 = getelementptr i32, i32* %64, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !62
  %71 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4, !alias.scope !65, !noalias !62
  %72 = getelementptr inbounds i32, i32* %65, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !65, !noalias !62
  %74 = or i64 %62, 8
  %75 = getelementptr i32, i32* %1, i64 %74
  %76 = getelementptr inbounds i32, i32* %35, i64 %74
  %77 = bitcast i32* %75 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !62
  %79 = getelementptr i32, i32* %75, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !62
  %82 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !65, !noalias !62
  %83 = getelementptr inbounds i32, i32* %76, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 4, !alias.scope !65, !noalias !62
  %85 = or i64 %62, 16
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = getelementptr inbounds i32, i32* %35, i64 %85
  %88 = bitcast i32* %86 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !62
  %90 = getelementptr i32, i32* %86, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !62
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !65, !noalias !62
  %94 = getelementptr inbounds i32, i32* %87, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !65, !noalias !62
  %96 = or i64 %62, 24
  %97 = getelementptr i32, i32* %1, i64 %96
  %98 = getelementptr inbounds i32, i32* %35, i64 %96
  %99 = bitcast i32* %97 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !62
  %101 = getelementptr i32, i32* %97, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !62
  %104 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 4, !alias.scope !65, !noalias !62
  %105 = getelementptr inbounds i32, i32* %98, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %106, align 4, !alias.scope !65, !noalias !62
  %107 = add i64 %62, 32
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !67

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i32, i32* %1, i64 %114
  %117 = getelementptr inbounds i32, i32* %35, i64 %114
  %118 = bitcast i32* %116 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !62
  %120 = getelementptr i32, i32* %116, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !62
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 4, !alias.scope !65, !noalias !62
  %124 = getelementptr inbounds i32, i32* %117, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %125, align 4, !alias.scope !65, !noalias !62
  %126 = add i64 %114, 8
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !68

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i32* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i32* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i32, i32* %35, i64 %140
  %143 = load i32, i32* %139, align 4
  store i32 %143, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !69

148:                                              ; preds = %138, %131
  %149 = phi i32* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i32* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i32* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i32, i32* %35, i64 %155
  %157 = load i32, i32* %154, align 4
  store i32 %157, i32* %156, align 4
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i32, i32* %35, i64 %159
  %161 = load i32, i32* %158, align 4
  store i32 %161, i32* %160, align 4
  %162 = getelementptr inbounds i32, i32* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i32, i32* %35, i64 %163
  %165 = load i32, i32* %162, align 4
  store i32 %165, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i32, i32* %35, i64 %167
  %169 = load i32, i32* %166, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !70

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i32* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i32* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i32* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 8
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i32, i32* %179, i64 %178
  %185 = getelementptr i32, i32* %177, i64 %178
  %186 = icmp ult i32* %179, %185
  %187 = icmp ult i32* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -8
  %191 = getelementptr i32, i32* %177, i64 %190
  %192 = add i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 24
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i32, i32* %177, i64 %200
  %203 = getelementptr inbounds i32, i32* %179, i64 %200
  %204 = bitcast i32* %202 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 4, !alias.scope !71
  %206 = getelementptr i32, i32* %202, i64 4
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4, !alias.scope !71
  %209 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %209, align 4, !alias.scope !74, !noalias !71
  %210 = getelementptr inbounds i32, i32* %203, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %211, align 4, !alias.scope !74, !noalias !71
  %212 = or i64 %200, 8
  %213 = getelementptr i32, i32* %177, i64 %212
  %214 = getelementptr inbounds i32, i32* %179, i64 %212
  %215 = bitcast i32* %213 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !71
  %217 = getelementptr i32, i32* %213, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !71
  %220 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %220, align 4, !alias.scope !74, !noalias !71
  %221 = getelementptr inbounds i32, i32* %214, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !74, !noalias !71
  %223 = or i64 %200, 16
  %224 = getelementptr i32, i32* %177, i64 %223
  %225 = getelementptr inbounds i32, i32* %179, i64 %223
  %226 = bitcast i32* %224 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !71
  %228 = getelementptr i32, i32* %224, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !71
  %231 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4, !alias.scope !74, !noalias !71
  %232 = getelementptr inbounds i32, i32* %225, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %233, align 4, !alias.scope !74, !noalias !71
  %234 = or i64 %200, 24
  %235 = getelementptr i32, i32* %177, i64 %234
  %236 = getelementptr inbounds i32, i32* %179, i64 %234
  %237 = bitcast i32* %235 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4, !alias.scope !71
  %239 = getelementptr i32, i32* %235, i64 4
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !71
  %242 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %242, align 4, !alias.scope !74, !noalias !71
  %243 = getelementptr inbounds i32, i32* %236, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %244, align 4, !alias.scope !74, !noalias !71
  %245 = add i64 %200, 32
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !76

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i32, i32* %177, i64 %252
  %255 = getelementptr inbounds i32, i32* %179, i64 %252
  %256 = bitcast i32* %254 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !alias.scope !71
  %258 = getelementptr i32, i32* %254, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !71
  %261 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %261, align 4, !alias.scope !74, !noalias !71
  %262 = getelementptr inbounds i32, i32* %255, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %263, align 4, !alias.scope !74, !noalias !71
  %264 = add i64 %252, 8
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !77

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i32* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i32* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i32, i32* %179, i64 %278
  %281 = load i32, i32* %277, align 4
  store i32 %281, i32* %280, align 4
  %282 = getelementptr inbounds i32, i32* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !78

286:                                              ; preds = %276, %269
  %287 = phi i32* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i32* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i32, i32* %179, i64 %292
  %294 = load i32, i32* %291, align 4
  store i32 %294, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i32, i32* %179, i64 %296
  %298 = load i32, i32* %295, align 4
  store i32 %298, i32* %297, align 4
  %299 = getelementptr inbounds i32, i32* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i32, i32* %179, i64 %300
  %302 = load i32, i32* %299, align 4
  store i32 %302, i32* %301, align 4
  %303 = getelementptr inbounds i32, i32* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i32, i32* %179, i64 %304
  %306 = load i32, i32* %303, align 4
  store i32 %306, i32* %305, align 4
  %307 = getelementptr inbounds i32, i32* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !79

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i32** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #11
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i32** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_(%"class.std::__1::vector"*, %"struct.webrtc::FrameDependencyTemplate"* dereferenceable(104)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %3, align 8
  %5 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %1 to i64*
  %6 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %4 to i64*
  %7 = load i64, i64* %5, align 8
  store i64 %7, i64* %6, align 8
  %8 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 2
  %10 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %9, i64 0, i32 0
  %11 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %8, i64 0, i32 0
  %12 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, 2
  br i1 %15, label %25, label %16

16:                                               ; preds = %2
  %17 = and i64 %14, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %16
  store i64 %14, i64* %12, align 8
  %20 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 2, i32 0, i32 1
  %21 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 1
  %22 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %21 to i8*
  %23 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 40, i1 false) #12
  br label %25

24:                                               ; preds = %16
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage.9"* %11, %"class.absl::inlined_vector_internal::Storage.9"* dereferenceable(48) %10) #12
  br label %25

25:                                               ; preds = %24, %19, %2
  %26 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3
  %27 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 3
  %28 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %27, i64 0, i32 0
  %29 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %26, i64 0, i32 0
  %30 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %30, align 8
  %31 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = icmp ult i64 %32, 2
  br i1 %33, label %43, label %34

34:                                               ; preds = %25
  %35 = and i64 %32, 1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %34
  store i64 %32, i64* %30, align 8
  %38 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 3, i32 0, i32 1
  %39 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3, i32 0, i32 1
  %40 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %39 to i8*
  %41 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false) #12
  br label %43

42:                                               ; preds = %34
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.16"* %29, %"class.absl::inlined_vector_internal::Storage.16"* dereferenceable(24) %28) #12
  br label %43

43:                                               ; preds = %42, %37, %25
  %44 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4
  %45 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 4
  %46 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %45, i64 0, i32 0
  %47 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %44, i64 0, i32 0
  %48 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %44, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %50, 2
  br i1 %51, label %61, label %52

52:                                               ; preds = %43
  %53 = and i64 %50, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %52
  store i64 %50, i64* %48, align 8
  %56 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 4, i32 0, i32 1
  %57 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4, i32 0, i32 1
  %58 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %57 to i8*
  %59 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 16, i1 false) #12
  br label %61

60:                                               ; preds = %52
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.16"* %47, %"class.absl::inlined_vector_internal::Storage.16"* dereferenceable(24) %46) #12
  br label %61

61:                                               ; preds = %43, %55, %60
  %62 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 1
  %63 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %62 to i64
  %64 = bitcast %"struct.webrtc::FrameDependencyTemplate"** %3 to i64*
  store i64 %63, i64* %64, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"*, %"struct.webrtc::FrameDependencyTemplate"* dereferenceable(104)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.webrtc::FrameDependencyTemplate"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 104
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 177372539170284150
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.webrtc::FrameDependencyTemplate"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 104
  %20 = icmp ult i64 %19, 88686269585142075
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 177372539170284150, %14 ]
  %28 = mul i64 %27, 104
  %29 = tail call i8* @_Znwm(i64 %28) #11
  %30 = bitcast i8* %29 to %"struct.webrtc::FrameDependencyTemplate"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %32
  %36 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %35 to i64
  %37 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %1 to i64*
  %38 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %34 to i64*
  %39 = load i64, i64* %37, align 8
  store i64 %39, i64* %38, align 8
  %40 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 2
  %41 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 2
  %42 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %41, i64 0, i32 0
  %43 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %40, i64 0, i32 0
  %44 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %44, align 8
  %45 = getelementptr inbounds %"class.absl::InlinedVector.8", %"class.absl::InlinedVector.8"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = icmp ult i64 %46, 2
  br i1 %47, label %57, label %48

48:                                               ; preds = %31
  %49 = and i64 %46, 1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %56

51:                                               ; preds = %48
  store i64 %46, i64* %44, align 8
  %52 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 2, i32 0, i32 1
  %53 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 2, i32 0, i32 1
  %54 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %53 to i8*
  %55 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %52 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 40, i1 false) #12
  br label %57

56:                                               ; preds = %48
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage.9"* %43, %"class.absl::inlined_vector_internal::Storage.9"* dereferenceable(48) %42) #12
  br label %57

57:                                               ; preds = %56, %51, %31
  %58 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 3
  %59 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 3
  %60 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %59, i64 0, i32 0
  %61 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %58, i64 0, i32 0
  %62 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %62, align 8
  %63 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %64, 2
  br i1 %65, label %75, label %66

66:                                               ; preds = %57
  %67 = and i64 %64, 1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %66
  store i64 %64, i64* %62, align 8
  %70 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 3, i32 0, i32 1
  %71 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 3, i32 0, i32 1
  %72 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %71 to i8*
  %73 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 16, i1 false) #12
  br label %75

74:                                               ; preds = %66
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.16"* %61, %"class.absl::inlined_vector_internal::Storage.16"* dereferenceable(24) %60) #12
  br label %75

75:                                               ; preds = %74, %69, %57
  %76 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 4
  %77 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 4
  %78 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %77, i64 0, i32 0
  %79 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %76, i64 0, i32 0
  %80 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %76, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %80, align 8
  %81 = getelementptr inbounds %"class.absl::InlinedVector.15", %"class.absl::InlinedVector.15"* %77, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = icmp ult i64 %82, 2
  br i1 %83, label %93, label %84

84:                                               ; preds = %75
  %85 = and i64 %82, 1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %92

87:                                               ; preds = %84
  store i64 %82, i64* %80, align 8
  %88 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 4, i32 0, i32 1
  %89 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 4, i32 0, i32 1
  %90 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %89 to i8*
  %91 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %88 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 16, i1 false) #12
  br label %93

92:                                               ; preds = %84
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.16"* %79, %"class.absl::inlined_vector_internal::Storage.16"* dereferenceable(24) %78) #12
  br label %93

93:                                               ; preds = %75, %87, %92
  %94 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %34, i64 1
  %95 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %94 to i64
  %96 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %97 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %96, align 8
  %98 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %3, align 8
  %99 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %98, %97
  br i1 %99, label %100, label %102

100:                                              ; preds = %93
  %101 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %97 to i64
  br label %135

102:                                              ; preds = %93, %102
  %103 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %105, %102 ], [ %34, %93 ]
  %104 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %106, %102 ], [ %98, %93 ]
  %105 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1
  %106 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1
  %107 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %106 to i64*
  %108 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %105 to i64*
  %109 = load i64, i64* %107, align 8
  store i64 %109, i64* %108, align 8
  %110 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %110, align 8
  %113 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 2, i32 0, i32 1
  %114 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 2, i32 0, i32 1
  %115 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %114 to i8*
  %116 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 40, i1 false) #12
  store i64 0, i64* %111, align 8
  %117 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %117, align 8
  %118 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %117, align 8
  %120 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 3, i32 0, i32 1
  %121 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 3, i32 0, i32 1
  %122 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %121 to i8*
  %123 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 16, i1 false) #12
  store i64 0, i64* %118, align 8
  %124 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %124, align 8
  %125 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %124, align 8
  %127 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 4, i32 0, i32 1
  %128 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 4, i32 0, i32 1
  %129 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %128 to i8*
  %130 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %130, i64 16, i1 false) #12
  store i64 0, i64* %125, align 8
  %131 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %106, %97
  br i1 %131, label %132, label %102

132:                                              ; preds = %102
  %133 = load i64, i64* %6, align 8
  %134 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %3, align 8
  br label %135

135:                                              ; preds = %100, %132
  %136 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %97, %100 ], [ %134, %132 ]
  %137 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %34, %100 ], [ %105, %132 ]
  %138 = phi i64 [ %101, %100 ], [ %133, %132 ]
  %139 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %137 to i64
  store i64 %139, i64* %6, align 8
  store i64 %95, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %140 = inttoptr i64 %138 to %"struct.webrtc::FrameDependencyTemplate"*
  %141 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %136, %140
  br i1 %141, label %173, label %142

142:                                              ; preds = %135, %171
  %143 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %144, %171 ], [ %136, %135 ]
  %144 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1
  %145 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load i64, i64* %145, align 8
  %147 = and i64 %146, 1
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %153, label %149

149:                                              ; preds = %142
  %150 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 4, i32 0, i32 1, i32 0, i32 0
  %151 = bitcast i32** %150 to i8**
  %152 = load i8*, i8** %151, align 8
  tail call void @_ZdlPv(i8* %152) #11
  br label %153

153:                                              ; preds = %149, %142
  %154 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, 1
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %162, label %158

158:                                              ; preds = %153
  %159 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 3, i32 0, i32 1, i32 0, i32 0
  %160 = bitcast i32** %159 to i8**
  %161 = load i8*, i8** %160, align 8
  tail call void @_ZdlPv(i8* %161) #11
  br label %162

162:                                              ; preds = %158, %153
  %163 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load i64, i64* %163, align 8
  %165 = and i64 %164, 1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %171, label %167

167:                                              ; preds = %162
  %168 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 2, i32 0, i32 1, i32 0, i32 0
  %169 = bitcast i32** %168 to i8**
  %170 = load i8*, i8** %169, align 8
  tail call void @_ZdlPv(i8* %170) #11
  br label %171

171:                                              ; preds = %167, %162
  %172 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %144, %140
  br i1 %172, label %173, label %142

173:                                              ; preds = %171, %135
  %174 = icmp eq i64 %138, 0
  br i1 %174, label %177, label %175

175:                                              ; preds = %173
  %176 = inttoptr i64 %138 to i8*
  tail call void @_ZdlPv(i8* %176) #11
  br label %177

177:                                              ; preds = %173, %175
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage.9"*, %"class.absl::inlined_vector_internal::Storage.9"* dereferenceable(48)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %9 to i32*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %11 to i32*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 20
  %15 = select i1 %14, i64 %5, i64 20
  %16 = icmp ugt i64 %15, 4611686018427387903
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #13
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 2
  %20 = tail call i8* @_Znwm(i64 %19) #11
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast i32** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi i32* [ %26, %18 ], [ %12, %8 ]
  %29 = phi i32* [ %21, %18 ], [ %10, %8 ]
  %30 = bitcast i32* %29 to i8*
  %31 = bitcast i32* %28 to i8*
  %32 = shl i64 %5, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #12
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.16"*, %"class.absl::inlined_vector_internal::Storage.16"* dereferenceable(24)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %9 to i32*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %11 to i32*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 8
  %15 = select i1 %14, i64 %5, i64 8
  %16 = icmp ugt i64 %15, 4611686018427387903
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #13
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 2
  %20 = tail call i8* @_Znwm(i64 %19) #11
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast i32** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi i32* [ %26, %18 ], [ %12, %8 ]
  %29 = phi i32* [ %21, %18 ], [ %10, %8 ]
  %30 = bitcast i32* %29 to i8*
  %31 = bitcast i32* %28 to i8*
  %32 = shl i64 %5, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #12
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.16", %"class.absl::inlined_vector_internal::Storage.16"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc16CodecBufferUsageELm8ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.24"*, %"struct.webrtc::CodecBufferUsage"*, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.24", %"class.absl::inlined_vector_internal::Storage.24"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !80
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.24", %"class.absl::inlined_vector_internal::Storage.24"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"struct.webrtc::CodecBufferUsage"** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !80
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.24", %"class.absl::inlined_vector_internal::Storage.24"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !80
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.24", %"class.absl::inlined_vector_internal::Storage.24"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 8, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 2305843009213693951
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #13
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 3
  %30 = tail call i8* @_Znwm(i64 %29) #11
  %31 = bitcast i8* %30 to %"struct.webrtc::CodecBufferUsage"*
  %32 = ptrtoint i8* %30 to i64
  br label %92

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to %"struct.webrtc::CodecBufferUsage"*
  %36 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %35, i64 %20
  %37 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %38 = select i1 %34, %"struct.webrtc::CodecBufferUsage"* %36, %"struct.webrtc::CodecBufferUsage"* null
  %39 = select i1 %34, i64 %20, i64 %2
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %89, label %41

41:                                               ; preds = %33
  %42 = add nsw i64 %39, -1
  %43 = and i64 %39, 3
  %44 = icmp ult i64 %42, 3
  br i1 %44, label %73, label %45

45:                                               ; preds = %41
  %46 = sub nsw i64 %39, %43
  br label %47

47:                                               ; preds = %47, %45
  %48 = phi %"struct.webrtc::CodecBufferUsage"* [ %1, %45 ], [ %69, %47 ]
  %49 = phi i64 [ 0, %45 ], [ %70, %47 ]
  %50 = phi i64 [ %46, %45 ], [ %71, %47 ]
  %51 = bitcast %"struct.webrtc::CodecBufferUsage"* %48 to i8*
  %52 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %35, i64 %49
  %53 = bitcast %"struct.webrtc::CodecBufferUsage"* %52 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* align 4 %51, i64 6, i1 false) #12
  %54 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %48, i64 1
  %55 = or i64 %49, 1
  %56 = bitcast %"struct.webrtc::CodecBufferUsage"* %54 to i8*
  %57 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %35, i64 %55
  %58 = bitcast %"struct.webrtc::CodecBufferUsage"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %56, i64 6, i1 false) #12
  %59 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %48, i64 2
  %60 = or i64 %49, 2
  %61 = bitcast %"struct.webrtc::CodecBufferUsage"* %59 to i8*
  %62 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %35, i64 %60
  %63 = bitcast %"struct.webrtc::CodecBufferUsage"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 6, i1 false) #12
  %64 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %48, i64 3
  %65 = or i64 %49, 3
  %66 = bitcast %"struct.webrtc::CodecBufferUsage"* %64 to i8*
  %67 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %35, i64 %65
  %68 = bitcast %"struct.webrtc::CodecBufferUsage"* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %66, i64 6, i1 false) #12
  %69 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %48, i64 4
  %70 = add nuw i64 %49, 4
  %71 = add i64 %50, -4
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %47

73:                                               ; preds = %47, %41
  %74 = phi %"struct.webrtc::CodecBufferUsage"* [ undef, %41 ], [ %69, %47 ]
  %75 = phi %"struct.webrtc::CodecBufferUsage"* [ %1, %41 ], [ %69, %47 ]
  %76 = phi i64 [ 0, %41 ], [ %70, %47 ]
  %77 = icmp eq i64 %43, 0
  br i1 %77, label %89, label %78

78:                                               ; preds = %73, %78
  %79 = phi %"struct.webrtc::CodecBufferUsage"* [ %85, %78 ], [ %75, %73 ]
  %80 = phi i64 [ %86, %78 ], [ %76, %73 ]
  %81 = phi i64 [ %87, %78 ], [ %43, %73 ]
  %82 = bitcast %"struct.webrtc::CodecBufferUsage"* %79 to i8*
  %83 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %35, i64 %80
  %84 = bitcast %"struct.webrtc::CodecBufferUsage"* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %84, i8* align 4 %82, i64 6, i1 false) #12
  %85 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %79, i64 1
  %86 = add nuw i64 %80, 1
  %87 = add i64 %81, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %78, !llvm.loop !83

89:                                               ; preds = %73, %78, %33
  %90 = phi %"struct.webrtc::CodecBufferUsage"* [ %1, %33 ], [ %74, %73 ], [ %85, %78 ]
  %91 = icmp eq i64 %37, 0
  br i1 %91, label %263, label %92

92:                                               ; preds = %28, %89
  %93 = phi %"struct.webrtc::CodecBufferUsage"* [ %1, %28 ], [ %90, %89 ]
  %94 = phi i64 [ %2, %28 ], [ %37, %89 ]
  %95 = phi %"struct.webrtc::CodecBufferUsage"* [ %31, %28 ], [ %38, %89 ]
  %96 = phi i64 [ %25, %28 ], [ 0, %89 ]
  %97 = phi i64 [ %32, %28 ], [ 0, %89 ]
  %98 = icmp ult i64 %94, 4
  br i1 %98, label %185, label %99

99:                                               ; preds = %92
  %100 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %94
  %101 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %93, i64 %94
  %102 = icmp ult %"struct.webrtc::CodecBufferUsage"* %95, %101
  %103 = icmp ult %"struct.webrtc::CodecBufferUsage"* %93, %100
  %104 = and i1 %102, %103
  br i1 %104, label %185, label %105

105:                                              ; preds = %99
  %106 = and i64 %94, -4
  %107 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %93, i64 %106
  %108 = add i64 %106, -4
  %109 = lshr exact i64 %108, 2
  %110 = add nuw nsw i64 %109, 1
  %111 = and i64 %110, 3
  %112 = icmp ult i64 %108, 12
  br i1 %112, label %164, label %113

113:                                              ; preds = %105
  %114 = sub nsw i64 %110, %111
  br label %115

115:                                              ; preds = %115, %113
  %116 = phi i64 [ 0, %113 ], [ %161, %115 ]
  %117 = phi i64 [ %114, %113 ], [ %162, %115 ]
  %118 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %93, i64 %116
  %119 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %116
  %120 = bitcast %"struct.webrtc::CodecBufferUsage"* %118 to <2 x i64>*
  %121 = load <2 x i64>, <2 x i64>* %120, align 4, !alias.scope !84
  %122 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %118, i64 2
  %123 = bitcast %"struct.webrtc::CodecBufferUsage"* %122 to <2 x i64>*
  %124 = load <2 x i64>, <2 x i64>* %123, align 4, !alias.scope !84
  %125 = bitcast %"struct.webrtc::CodecBufferUsage"* %119 to <2 x i64>*
  store <2 x i64> %121, <2 x i64>* %125, align 4, !alias.scope !87, !noalias !84
  %126 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %119, i64 2
  %127 = bitcast %"struct.webrtc::CodecBufferUsage"* %126 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %127, align 4, !alias.scope !87, !noalias !84
  %128 = or i64 %116, 4
  %129 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %93, i64 %128
  %130 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %128
  %131 = bitcast %"struct.webrtc::CodecBufferUsage"* %129 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 4, !alias.scope !84
  %133 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %129, i64 2
  %134 = bitcast %"struct.webrtc::CodecBufferUsage"* %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 4, !alias.scope !84
  %136 = bitcast %"struct.webrtc::CodecBufferUsage"* %130 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %136, align 4, !alias.scope !87, !noalias !84
  %137 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %130, i64 2
  %138 = bitcast %"struct.webrtc::CodecBufferUsage"* %137 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %138, align 4, !alias.scope !87, !noalias !84
  %139 = or i64 %116, 8
  %140 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %93, i64 %139
  %141 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %139
  %142 = bitcast %"struct.webrtc::CodecBufferUsage"* %140 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 4, !alias.scope !84
  %144 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %140, i64 2
  %145 = bitcast %"struct.webrtc::CodecBufferUsage"* %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 4, !alias.scope !84
  %147 = bitcast %"struct.webrtc::CodecBufferUsage"* %141 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %147, align 4, !alias.scope !87, !noalias !84
  %148 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %141, i64 2
  %149 = bitcast %"struct.webrtc::CodecBufferUsage"* %148 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %149, align 4, !alias.scope !87, !noalias !84
  %150 = or i64 %116, 12
  %151 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %93, i64 %150
  %152 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %150
  %153 = bitcast %"struct.webrtc::CodecBufferUsage"* %151 to <2 x i64>*
  %154 = load <2 x i64>, <2 x i64>* %153, align 4, !alias.scope !84
  %155 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %151, i64 2
  %156 = bitcast %"struct.webrtc::CodecBufferUsage"* %155 to <2 x i64>*
  %157 = load <2 x i64>, <2 x i64>* %156, align 4, !alias.scope !84
  %158 = bitcast %"struct.webrtc::CodecBufferUsage"* %152 to <2 x i64>*
  store <2 x i64> %154, <2 x i64>* %158, align 4, !alias.scope !87, !noalias !84
  %159 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %152, i64 2
  %160 = bitcast %"struct.webrtc::CodecBufferUsage"* %159 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %160, align 4, !alias.scope !87, !noalias !84
  %161 = add i64 %116, 16
  %162 = add i64 %117, -4
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %115, !llvm.loop !89

164:                                              ; preds = %115, %105
  %165 = phi i64 [ 0, %105 ], [ %161, %115 ]
  %166 = icmp eq i64 %111, 0
  br i1 %166, label %183, label %167

167:                                              ; preds = %164, %167
  %168 = phi i64 [ %180, %167 ], [ %165, %164 ]
  %169 = phi i64 [ %181, %167 ], [ %111, %164 ]
  %170 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %93, i64 %168
  %171 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %168
  %172 = bitcast %"struct.webrtc::CodecBufferUsage"* %170 to <2 x i64>*
  %173 = load <2 x i64>, <2 x i64>* %172, align 4, !alias.scope !84
  %174 = getelementptr %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %170, i64 2
  %175 = bitcast %"struct.webrtc::CodecBufferUsage"* %174 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %175, align 4, !alias.scope !84
  %177 = bitcast %"struct.webrtc::CodecBufferUsage"* %171 to <2 x i64>*
  store <2 x i64> %173, <2 x i64>* %177, align 4, !alias.scope !87, !noalias !84
  %178 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %171, i64 2
  %179 = bitcast %"struct.webrtc::CodecBufferUsage"* %178 to <2 x i64>*
  store <2 x i64> %176, <2 x i64>* %179, align 4, !alias.scope !87, !noalias !84
  %180 = add i64 %168, 4
  %181 = add i64 %169, -1
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %167, !llvm.loop !90

183:                                              ; preds = %167, %164
  %184 = icmp eq i64 %94, %106
  br i1 %184, label %261, label %185

185:                                              ; preds = %183, %99, %92
  %186 = phi %"struct.webrtc::CodecBufferUsage"* [ %93, %99 ], [ %93, %92 ], [ %107, %183 ]
  %187 = phi i64 [ 0, %99 ], [ 0, %92 ], [ %106, %183 ]
  %188 = sub i64 %94, %187
  %189 = xor i64 %187, -1
  %190 = add i64 %94, %189
  %191 = and i64 %188, 7
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %205, label %193

193:                                              ; preds = %185, %193
  %194 = phi %"struct.webrtc::CodecBufferUsage"* [ %201, %193 ], [ %186, %185 ]
  %195 = phi i64 [ %202, %193 ], [ %187, %185 ]
  %196 = phi i64 [ %203, %193 ], [ %191, %185 ]
  %197 = bitcast %"struct.webrtc::CodecBufferUsage"* %194 to i64*
  %198 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %195
  %199 = bitcast %"struct.webrtc::CodecBufferUsage"* %198 to i64*
  %200 = load i64, i64* %197, align 4
  store i64 %200, i64* %199, align 4
  %201 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %194, i64 1
  %202 = add nuw i64 %195, 1
  %203 = add i64 %196, -1
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %193, !llvm.loop !91

205:                                              ; preds = %193, %185
  %206 = phi %"struct.webrtc::CodecBufferUsage"* [ %186, %185 ], [ %201, %193 ]
  %207 = phi i64 [ %187, %185 ], [ %202, %193 ]
  %208 = icmp ult i64 %190, 7
  br i1 %208, label %261, label %209

209:                                              ; preds = %205, %209
  %210 = phi %"struct.webrtc::CodecBufferUsage"* [ %258, %209 ], [ %206, %205 ]
  %211 = phi i64 [ %259, %209 ], [ %207, %205 ]
  %212 = bitcast %"struct.webrtc::CodecBufferUsage"* %210 to i64*
  %213 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %211
  %214 = bitcast %"struct.webrtc::CodecBufferUsage"* %213 to i64*
  %215 = load i64, i64* %212, align 4
  store i64 %215, i64* %214, align 4
  %216 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %210, i64 1
  %217 = add nuw i64 %211, 1
  %218 = bitcast %"struct.webrtc::CodecBufferUsage"* %216 to i64*
  %219 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %217
  %220 = bitcast %"struct.webrtc::CodecBufferUsage"* %219 to i64*
  %221 = load i64, i64* %218, align 4
  store i64 %221, i64* %220, align 4
  %222 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %210, i64 2
  %223 = add nuw i64 %211, 2
  %224 = bitcast %"struct.webrtc::CodecBufferUsage"* %222 to i64*
  %225 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %223
  %226 = bitcast %"struct.webrtc::CodecBufferUsage"* %225 to i64*
  %227 = load i64, i64* %224, align 4
  store i64 %227, i64* %226, align 4
  %228 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %210, i64 3
  %229 = add nuw i64 %211, 3
  %230 = bitcast %"struct.webrtc::CodecBufferUsage"* %228 to i64*
  %231 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %229
  %232 = bitcast %"struct.webrtc::CodecBufferUsage"* %231 to i64*
  %233 = load i64, i64* %230, align 4
  store i64 %233, i64* %232, align 4
  %234 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %210, i64 4
  %235 = add nuw i64 %211, 4
  %236 = bitcast %"struct.webrtc::CodecBufferUsage"* %234 to i64*
  %237 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %235
  %238 = bitcast %"struct.webrtc::CodecBufferUsage"* %237 to i64*
  %239 = load i64, i64* %236, align 4
  store i64 %239, i64* %238, align 4
  %240 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %210, i64 5
  %241 = add nuw i64 %211, 5
  %242 = bitcast %"struct.webrtc::CodecBufferUsage"* %240 to i64*
  %243 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %241
  %244 = bitcast %"struct.webrtc::CodecBufferUsage"* %243 to i64*
  %245 = load i64, i64* %242, align 4
  store i64 %245, i64* %244, align 4
  %246 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %210, i64 6
  %247 = add nuw i64 %211, 6
  %248 = bitcast %"struct.webrtc::CodecBufferUsage"* %246 to i64*
  %249 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %247
  %250 = bitcast %"struct.webrtc::CodecBufferUsage"* %249 to i64*
  %251 = load i64, i64* %248, align 4
  store i64 %251, i64* %250, align 4
  %252 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %210, i64 7
  %253 = add nuw i64 %211, 7
  %254 = bitcast %"struct.webrtc::CodecBufferUsage"* %252 to i64*
  %255 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %95, i64 %253
  %256 = bitcast %"struct.webrtc::CodecBufferUsage"* %255 to i64*
  %257 = load i64, i64* %254, align 4
  store i64 %257, i64* %256, align 4
  %258 = getelementptr inbounds %"struct.webrtc::CodecBufferUsage", %"struct.webrtc::CodecBufferUsage"* %210, i64 8
  %259 = add nuw i64 %211, 8
  %260 = icmp eq i64 %259, %94
  br i1 %260, label %261, label %209, !llvm.loop !92

261:                                              ; preds = %205, %209, %183
  %262 = icmp eq i64 %97, 0
  br i1 %262, label %263, label %265

263:                                              ; preds = %89, %261
  %264 = load i64, i64* %4, align 8
  br label %280

265:                                              ; preds = %261
  %266 = load i64, i64* %4, align 8
  %267 = and i64 %266, 1
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %274, label %269

269:                                              ; preds = %265
  %270 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.24", %"class.absl::inlined_vector_internal::Storage.24"* %0, i64 0, i32 1, i32 0, i32 0
  %271 = bitcast %"struct.webrtc::CodecBufferUsage"** %270 to i8**
  %272 = load i8*, i8** %271, align 8
  tail call void @_ZdlPv(i8* %272) #11
  %273 = load i64, i64* %4, align 8
  br label %274

274:                                              ; preds = %265, %269
  %275 = phi i64 [ %266, %265 ], [ %273, %269 ]
  %276 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.24", %"class.absl::inlined_vector_internal::Storage.24"* %0, i64 0, i32 1, i32 0, i32 0
  %277 = bitcast %"struct.webrtc::CodecBufferUsage"** %276 to i64*
  store i64 %97, i64* %277, align 8
  %278 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.24", %"class.absl::inlined_vector_internal::Storage.24"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %96, i64* %278, align 8
  %279 = or i64 %275, 1
  store i64 %279, i64* %4, align 8
  br label %280

280:                                              ; preds = %274, %263
  %281 = phi i64 [ %264, %263 ], [ %279, %274 ]
  %282 = shl i64 %2, 1
  %283 = and i64 %281, 1
  %284 = or i64 %283, %282
  store i64 %284, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #10

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!8 = distinct !{!8, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!9 = !{!10, !12, !14}
!10 = distinct !{!10, !11, !"_ZNSt3__116__copy_constexprIPKbNS_14__bit_iteratorINS_6vectorIbNS_9allocatorIbEEEELb0ELm0EEEEET0_T_SA_S9_: argument 0"}
!11 = distinct !{!11, !"_ZNSt3__116__copy_constexprIPKbNS_14__bit_iteratorINS_6vectorIbNS_9allocatorIbEEEELb0ELm0EEEEET0_T_SA_S9_"}
!12 = distinct !{!12, !13, !"_ZNSt3__16__copyIPKbNS_14__bit_iteratorINS_6vectorIbNS_9allocatorIbEEEELb0ELm0EEEEET0_T_SA_S9_: argument 0"}
!13 = distinct !{!13, !"_ZNSt3__16__copyIPKbNS_14__bit_iteratorINS_6vectorIbNS_9allocatorIbEEEELb0ELm0EEEEET0_T_SA_S9_"}
!14 = distinct !{!14, !15, !"_ZNSt3__14copyIPKbNS_14__bit_iteratorINS_6vectorIbNS_9allocatorIbEEEELb0ELm0EEEEET0_T_SA_S9_: argument 0"}
!15 = distinct !{!15, !"_ZNSt3__14copyIPKbNS_14__bit_iteratorINS_6vectorIbNS_9allocatorIbEEEELb0ELm0EEEEET0_T_SA_S9_"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!18 = distinct !{!18, !"_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !25}
!25 = !{!"llvm.loop.isvectorized", i32 1}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !25}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !25}
!35 = distinct !{!35, !5}
!36 = distinct !{!36, !5}
!37 = distinct !{!37, !25}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!40 = distinct !{!40, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !25}
!47 = distinct !{!47, !5}
!48 = distinct !{!48, !5}
!49 = distinct !{!49, !25}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !25}
!56 = distinct !{!56, !5}
!57 = distinct !{!57, !5}
!58 = distinct !{!58, !25}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!61 = distinct !{!61, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !25}
!68 = distinct !{!68, !5}
!69 = distinct !{!69, !5}
!70 = distinct !{!70, !25}
!71 = !{!72}
!72 = distinct !{!72, !73}
!73 = distinct !{!73, !"LVerDomain"}
!74 = !{!75}
!75 = distinct !{!75, !73}
!76 = distinct !{!76, !25}
!77 = distinct !{!77, !5}
!78 = distinct !{!78, !5}
!79 = distinct !{!79, !25}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc16CodecBufferUsageELm8ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!82 = distinct !{!82, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc16CodecBufferUsageELm8ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!83 = distinct !{!83, !5}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !25}
!90 = distinct !{!90, !5}
!91 = distinct !{!91, !5}
!92 = distinct !{!92, !25}
