; ModuleID = '../../third_party/skia/src/effects/SkDashPathEffect.cpp'
source_filename = "../../third_party/skia/src/effects/SkDashPathEffect.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkDashImpl = type <{ %class.SkPathEffectBase.base, [4 x i8], float*, i32, float, float, i32, float, [4 x i8] }>
%class.SkPathEffectBase.base = type { %class.SkPathEffect.base }
%class.SkPathEffect.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkStrokeRec = type { float, float, float, i32 }
%"class.SkPathEffectBase::PointData" = type { i32, %struct.SkPoint*, i32, %struct.SkPoint, %struct.SkRect, [4 x i8], %class.SkPath, %class.SkPath, %class.SkPath }
%class.SkMatrix = type { [9 x float], i32 }
%"struct.SkPathEffect::DashInfo" = type { float*, i32, float }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.13*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.13*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.13*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.13 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.14, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.14 = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.9", [7 x i8] }>
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.15, i32, i32 }
%class.sk_sp.15 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.16, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.16 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.sk_sp.21 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.18*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.21*, %class.SkReadBuffer*)* }
%class.sk_sp.18 = type { %class.SkTypeface* }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp.18*, i8*, i64, i8*)*, i8* }
%class.SkAutoSTArray = type { i32, float*, [128 x i8] }
%class.sk_sp.22 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkPathEffectBase = type { %class.SkPathEffect.base, [4 x i8] }

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK10SkDashImpl10getFactoryEv = comdat any

$_ZNK10SkDashImpl11getTypeNameEv = comdat any

$_ZNK16SkPathEffectBase18getFlattenableTypeEv = comdat any

$_ZNK10SkDashImpl17computeFastBoundsEP6SkRect = comdat any

@_ZTV10SkDashImpl = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkDashImpl*)* @_ZN10SkDashImplD2Ev to i8*), i8* bitcast (void (%class.SkDashImpl*)* @_ZN10SkDashImplD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.21*, %class.SkReadBuffer*)* (%class.SkDashImpl*)* @_ZNK10SkDashImpl10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkDashImpl*)* @_ZNK10SkDashImpl11getTypeNameEv to i8*), i8* bitcast (void (%class.SkDashImpl*, %class.SkWriteBuffer*)* @_ZNK10SkDashImpl7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkPathEffectBase*)* @_ZNK16SkPathEffectBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkDashImpl*, %class.SkPath*, %class.SkPath*, %class.SkStrokeRec*, %struct.SkRect*)* @_ZNK10SkDashImpl12onFilterPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRect to i8*), i8* bitcast (i1 (%class.SkDashImpl*, %"class.SkPathEffectBase::PointData"*, %class.SkPath*, %class.SkStrokeRec*, %class.SkMatrix*, %struct.SkRect*)* @_ZNK10SkDashImpl10onAsPointsEPN16SkPathEffectBase9PointDataERK6SkPathRK11SkStrokeRecRK8SkMatrixPK6SkRect to i8*), i8* bitcast (i32 (%class.SkDashImpl*, %"struct.SkPathEffect::DashInfo"*)* @_ZNK10SkDashImpl9onAsADashEPN12SkPathEffect8DashInfoE to i8*), i8* bitcast (i1 (%class.SkDashImpl*, %struct.SkRect*)* @_ZNK10SkDashImpl17computeFastBoundsEP6SkRect to i8*)] }, align 8
@.str = private unnamed_addr constant [11 x i8] c"SkDashImpl\00", align 1

@_ZN10SkDashImplC1EPKfif = hidden unnamed_addr alias void (%class.SkDashImpl*, float*, i32, float), void (%class.SkDashImpl*, float*, i32, float)* @_ZN10SkDashImplC2EPKfif
@_ZN10SkDashImplD1Ev = hidden unnamed_addr alias void (%class.SkDashImpl*), void (%class.SkDashImpl*)* @_ZN10SkDashImplD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkDashImplC2EPKfif(%class.SkDashImpl*, float* nocapture readonly, i32, float) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV10SkDashImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 4
  store float 0.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 5
  store float -1.000000e+00, float* %8, align 8
  %9 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 6
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 7
  store float 0.000000e+00, float* %10, align 8
  %11 = sext i32 %2 to i64
  %12 = shl nsw i64 %11, 2
  %13 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %12, i32 2) #8
  %14 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 2
  %15 = bitcast float** %14 to i8**
  store i8* %13, i8** %15, align 8
  %16 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 3
  store i32 %2, i32* %16, align 8
  %17 = icmp sgt i32 %2, 0
  %18 = bitcast i8* %13 to float*
  br i1 %17, label %19, label %47

19:                                               ; preds = %4
  %20 = zext i32 %2 to i64
  %21 = add nsw i64 %20, -1
  %22 = and i64 %20, 3
  %23 = icmp ult i64 %21, 3
  br i1 %23, label %26, label %24

24:                                               ; preds = %19
  %25 = sub nsw i64 %20, %22
  br label %50

26:                                               ; preds = %50, %19
  %27 = phi float* [ undef, %19 ], [ %81, %50 ]
  %28 = phi float* [ %18, %19 ], [ %81, %50 ]
  %29 = phi i64 [ 0, %19 ], [ %80, %50 ]
  %30 = icmp eq i64 %22, 0
  br i1 %30, label %44, label %31

31:                                               ; preds = %26, %31
  %32 = phi float* [ %41, %31 ], [ %28, %26 ]
  %33 = phi i64 [ %40, %31 ], [ %29, %26 ]
  %34 = phi i64 [ %42, %31 ], [ %22, %26 ]
  %35 = getelementptr inbounds float, float* %1, i64 %33
  %36 = bitcast float* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds float, float* %32, i64 %33
  %39 = bitcast float* %38 to i32*
  store i32 %37, i32* %39, align 4
  %40 = add nuw nsw i64 %33, 1
  %41 = load float*, float** %14, align 8
  %42 = add i64 %34, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %31, !llvm.loop !2

44:                                               ; preds = %31, %26
  %45 = phi float* [ %27, %26 ], [ %41, %31 ]
  %46 = load i32, i32* %16, align 8
  br label %47

47:                                               ; preds = %44, %4
  %48 = phi i32 [ %46, %44 ], [ %2, %4 ]
  %49 = phi float* [ %45, %44 ], [ %18, %4 ]
  tail call void @_ZN10SkDashPath18CalcDashParametersEfPKfiPfPiS2_S2_(float %3, float* %49, i32 %48, float* %8, i32* %9, float* %10, float* %7) #8
  ret void

50:                                               ; preds = %50, %24
  %51 = phi float* [ %18, %24 ], [ %81, %50 ]
  %52 = phi i64 [ 0, %24 ], [ %80, %50 ]
  %53 = phi i64 [ %25, %24 ], [ %82, %50 ]
  %54 = getelementptr inbounds float, float* %1, i64 %52
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds float, float* %51, i64 %52
  %58 = bitcast float* %57 to i32*
  store i32 %56, i32* %58, align 4
  %59 = or i64 %52, 1
  %60 = load float*, float** %14, align 8
  %61 = getelementptr inbounds float, float* %1, i64 %59
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds float, float* %60, i64 %59
  %65 = bitcast float* %64 to i32*
  store i32 %63, i32* %65, align 4
  %66 = or i64 %52, 2
  %67 = load float*, float** %14, align 8
  %68 = getelementptr inbounds float, float* %1, i64 %66
  %69 = bitcast float* %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds float, float* %67, i64 %66
  %72 = bitcast float* %71 to i32*
  store i32 %70, i32* %72, align 4
  %73 = or i64 %52, 3
  %74 = load float*, float** %14, align 8
  %75 = getelementptr inbounds float, float* %1, i64 %73
  %76 = bitcast float* %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds float, float* %74, i64 %73
  %79 = bitcast float* %78 to i32*
  store i32 %77, i32* %79, align 4
  %80 = add nuw nsw i64 %52, 4
  %81 = load float*, float** %14, align 8
  %82 = add i64 %53, -4
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %26, label %50
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN10SkDashPath18CalcDashParametersEfPKfiPfPiS2_S2_(float, float*, i32, float*, i32*, float*, float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkDashImplD2Ev(%class.SkDashImpl* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV10SkDashImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 2
  %4 = bitcast float** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #8
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkDashImplD0Ev(%class.SkDashImpl*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV10SkDashImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 2
  %4 = bitcast float** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #8
  %6 = bitcast %class.SkDashImpl* %0 to i8*
  tail call void @_ZdlPv(i8* %6) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10SkDashImpl12onFilterPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRect(%class.SkDashImpl* nocapture readonly, %class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec*, %struct.SkRect*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 2
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 5
  %11 = load float, float* %10, align 8
  %12 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 6
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 7
  %15 = load float, float* %14, align 8
  %16 = tail call zeroext i1 @_ZN10SkDashPath14InternalFilterEP6SkPathRKS0_P11SkStrokeRecPK6SkRectPKfififNS_20StrokeRecApplicationE(%class.SkPath* %1, %class.SkPath* dereferenceable(16) %2, %class.SkStrokeRec* %3, %struct.SkRect* %4, float* %7, i32 %9, float %11, i32 %13, float %15, i32 1) #8
  ret i1 %16
}

declare zeroext i1 @_ZN10SkDashPath14InternalFilterEP6SkPathRKS0_P11SkStrokeRecPK6SkRectPKfififNS_20StrokeRecApplicationE(%class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec*, %struct.SkRect*, float*, i32, float, i32, float, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10SkDashImpl10onAsPointsEPN16SkPathEffectBase9PointDataERK6SkPathRK11SkStrokeRecRK8SkMatrixPK6SkRect(%class.SkDashImpl* nocapture readonly, %"class.SkPathEffectBase::PointData"*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec* nocapture readonly dereferenceable(16), %class.SkMatrix* dereferenceable(40), %struct.SkRect* readonly) unnamed_addr #4 align 2 {
  %7 = alloca <4 x float>, align 16
  %8 = bitcast <4 x float>* %7 to %struct.SkRect*
  %9 = alloca %class.SkMatrix, align 16
  %10 = alloca <4 x float>, align 16
  %11 = bitcast <4 x float>* %10 to %struct.SkRect*
  %12 = alloca <4 x float>, align 16
  %13 = bitcast <4 x float>* %12 to %struct.SkRect*
  %14 = alloca [2 x %struct.SkPoint], align 16
  %15 = alloca <2 x float>, align 8
  %16 = bitcast <2 x float>* %15 to %struct.SkPoint*
  %17 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %3, i64 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = fcmp ugt float %18, 0.000000e+00
  br i1 %19, label %20, label %474

20:                                               ; preds = %6
  %21 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 2
  br i1 %23, label %24, label %474

24:                                               ; preds = %20
  %25 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 2
  %26 = load float*, float** %25, align 8
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds float, float* %26, i64 1
  %29 = load float, float* %28, align 4
  %30 = fsub float %27, %29
  %31 = tail call float @llvm.fabs.f32(float %30) #8
  %32 = fcmp ole float %31, 0x3F30000000000000
  %33 = tail call float @llvm.floor.f32(float %27) #8
  %34 = fcmp oeq float %33, %27
  %35 = and i1 %34, %32
  %36 = tail call float @llvm.floor.f32(float %29) #8
  %37 = fcmp oeq float %36, %29
  %38 = and i1 %37, %35
  br i1 %38, label %39, label %474

39:                                               ; preds = %24
  %40 = bitcast [2 x %struct.SkPoint]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #8
  %41 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 0
  %42 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 0, i32 0
  %43 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 0, i32 1
  %44 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 1, i32 0
  %45 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 1, i32 1
  %46 = bitcast [2 x %struct.SkPoint]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -1, i64 16, i1 false)
  %47 = call zeroext i1 @_ZNK6SkPath6isLineEP7SkPoint(%class.SkPath* %2, %struct.SkPoint* nonnull %41) #8
  br i1 %47, label %48, label %472

48:                                               ; preds = %39
  %49 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %3, i64 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = and i32 %50, 65535
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %472

53:                                               ; preds = %48
  %54 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = trunc i32 %55 to i8
  %57 = icmp slt i8 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %53
  %59 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %4) #8
  %60 = zext i8 %59 to i32
  store i32 %60, i32* %54, align 4
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i32 [ %60, %58 ], [ %55, %53 ]
  %63 = and i32 %62, 16
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %472, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 7
  %67 = load float, float* %66, align 8
  %68 = icmp eq %struct.SkRect* %5, null
  br i1 %68, label %472, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 1
  %71 = bitcast %struct.SkPoint* %70 to <2 x float>*
  %72 = load <2 x float>, <2 x float>* %71, align 8
  %73 = bitcast [2 x %struct.SkPoint]* %14 to <2 x float>*
  %74 = load <2 x float>, <2 x float>* %73, align 16
  %75 = fsub <2 x float> %72, %74
  %76 = fcmp une <2 x float> %75, zeroinitializer
  %77 = extractelement <2 x i1> %76, i32 0
  %78 = extractelement <2 x i1> %76, i32 1
  %79 = xor i1 %77, %78
  br i1 %79, label %80, label %472

80:                                               ; preds = %69
  %81 = bitcast <4 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #8
  %82 = getelementptr inbounds <4 x float>, <4 x float>* %7, i64 0, i64 0
  %83 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %8, i64 0, i32 1
  %84 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %8, i64 0, i32 2
  %85 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %8, i64 0, i32 3
  %86 = bitcast %struct.SkRect* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %81, i8* nonnull align 4 %86, i64 16, i1 false) #8
  %87 = load float, float* %17, align 4
  %88 = fmul float %87, 5.000000e-01
  %89 = fcmp oeq float %88, 0.000000e+00
  %90 = select i1 %89, float 1.000000e+00, float %88
  %91 = load i32, i32* %49, align 4
  %92 = lshr i32 %91, 16
  %93 = trunc i32 %92 to i8
  %94 = icmp eq i8 %93, 0
  %95 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %3, i64 0, i32 2
  %96 = load float, float* %95, align 4
  %97 = fmul float %96, %90
  %98 = select i1 %94, float %97, float %90
  %99 = load <4 x float>, <4 x float>* %7, align 16
  %100 = insertelement <4 x float> undef, float %98, i32 0
  %101 = shufflevector <4 x float> %100, <4 x float> undef, <4 x i32> zeroinitializer
  %102 = fsub <4 x float> %99, %101
  %103 = fadd <4 x float> %99, %101
  %104 = shufflevector <4 x float> %102, <4 x float> %103, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %104, <4 x float>* %7, align 16
  %105 = bitcast %class.SkMatrix* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %105) #8
  %106 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 1
  %107 = bitcast %class.SkMatrix* %9 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %107, align 16
  %108 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 4
  %109 = bitcast float* %108 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %109, align 16
  %110 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %110, align 16
  store i32 16, i32* %106, align 4
  %111 = trunc i32 %62 to i8
  %112 = icmp slt i8 %111, 0
  br i1 %112, label %113, label %116

113:                                              ; preds = %80
  %114 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %4) #8
  %115 = zext i8 %114 to i32
  store i32 %115, i32* %54, align 4
  br label %116

116:                                              ; preds = %113, %80
  %117 = phi i32 [ %115, %113 ], [ %62, %80 ]
  %118 = and i32 %117, 15
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %122

120:                                              ; preds = %116
  %121 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %9) #8
  br label %124

122:                                              ; preds = %116
  %123 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* %4, %class.SkMatrix* nonnull %9) #8
  br i1 %123, label %124, label %208

124:                                              ; preds = %122, %120
  %125 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* nonnull %9, %struct.SkRect* nonnull %8, %struct.SkRect* nonnull dereferenceable(16) %8, i32 1) #8
  br i1 %77, label %126, label %167

126:                                              ; preds = %124
  %127 = bitcast [2 x %struct.SkPoint]* %14 to i32*
  %128 = load i32, i32* %127, align 16
  %129 = bitcast %struct.SkPoint* %70 to i32*
  %130 = load i32, i32* %129, align 8
  %131 = extractelement <2 x float> %75, i32 0
  %132 = fcmp olt float %131, 0.000000e+00
  %133 = select i1 %132, i32 %130, i32 %128
  %134 = select i1 %132, i32 %128, i32 %130
  %135 = bitcast i32 %134 to float
  %136 = load float, float* %82, align 16
  %137 = fcmp ult float %136, %135
  br i1 %137, label %138, label %208

138:                                              ; preds = %126
  %139 = bitcast i32 %133 to float
  %140 = load float, float* %84, align 8
  %141 = fcmp ugt float %140, %139
  br i1 %141, label %142, label %208

142:                                              ; preds = %138
  %143 = fcmp ogt float %136, %139
  br i1 %143, label %144, label %150

144:                                              ; preds = %142
  %145 = fsub float %136, %139
  %146 = call float @fmodf(float %145, float %67) #8
  %147 = fsub float %136, %146
  %148 = bitcast float %147 to i32
  %149 = load float, float* %84, align 8
  br label %150

150:                                              ; preds = %144, %142
  %151 = phi float [ %149, %144 ], [ %140, %142 ]
  %152 = phi i32 [ %148, %144 ], [ %133, %142 ]
  %153 = fcmp olt float %151, %135
  br i1 %153, label %154, label %159

154:                                              ; preds = %150
  %155 = fsub float %135, %151
  %156 = call float @fmodf(float %155, float %67) #8
  %157 = fadd float %151, %156
  %158 = bitcast float %157 to i32
  br label %159

159:                                              ; preds = %154, %150
  %160 = phi i32 [ %158, %154 ], [ %134, %150 ]
  %161 = select i1 %132, i32 %160, i32 %152
  %162 = select i1 %132, i32 %152, i32 %160
  store i32 %161, i32* %127, align 16
  store i32 %162, i32* %129, align 8
  %163 = bitcast i32 %162 to float
  %164 = bitcast i32 %161 to float
  %165 = load float, float* %45, align 4
  %166 = load float, float* %43, align 4
  br label %209

167:                                              ; preds = %124
  %168 = bitcast float* %43 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = bitcast float* %45 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = extractelement <2 x float> %75, i32 1
  %173 = fcmp olt float %172, 0.000000e+00
  %174 = select i1 %173, i32 %171, i32 %169
  %175 = select i1 %173, i32 %169, i32 %171
  %176 = bitcast i32 %175 to float
  %177 = load float, float* %83, align 4
  %178 = fcmp ult float %177, %176
  br i1 %178, label %179, label %208

179:                                              ; preds = %167
  %180 = bitcast i32 %174 to float
  %181 = load float, float* %85, align 4
  %182 = fcmp ugt float %181, %180
  br i1 %182, label %183, label %208

183:                                              ; preds = %179
  %184 = fcmp ogt float %177, %180
  br i1 %184, label %185, label %191

185:                                              ; preds = %183
  %186 = fsub float %177, %180
  %187 = call float @fmodf(float %186, float %67) #8
  %188 = fsub float %177, %187
  %189 = bitcast float %188 to i32
  %190 = load float, float* %85, align 4
  br label %191

191:                                              ; preds = %185, %183
  %192 = phi float [ %190, %185 ], [ %181, %183 ]
  %193 = phi i32 [ %189, %185 ], [ %174, %183 ]
  %194 = fcmp olt float %192, %176
  br i1 %194, label %195, label %200

195:                                              ; preds = %191
  %196 = fsub float %176, %192
  %197 = call float @fmodf(float %196, float %67) #8
  %198 = fadd float %192, %197
  %199 = bitcast float %198 to i32
  br label %200

200:                                              ; preds = %195, %191
  %201 = phi i32 [ %199, %195 ], [ %175, %191 ]
  %202 = select i1 %173, i32 %201, i32 %193
  %203 = select i1 %173, i32 %193, i32 %201
  store i32 %202, i32* %168, align 4
  store i32 %203, i32* %170, align 4
  %204 = load float, float* %44, align 8
  %205 = load float, float* %42, align 16
  %206 = bitcast i32 %203 to float
  %207 = bitcast i32 %202 to float
  br label %209

208:                                              ; preds = %122, %126, %138, %167, %179
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %105) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #8
  br label %472

209:                                              ; preds = %200, %159
  %210 = phi float [ %207, %200 ], [ %166, %159 ]
  %211 = phi float [ %206, %200 ], [ %165, %159 ]
  %212 = phi float [ %205, %200 ], [ %164, %159 ]
  %213 = phi float [ %204, %200 ], [ %163, %159 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %105) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #8
  %214 = fsub float %213, %212
  %215 = fsub float %211, %210
  %216 = call float @_ZN7SkPoint6LengthEff(float %214, float %215) #8
  %217 = bitcast <2 x float>* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %217) #8
  %218 = getelementptr inbounds <2 x float>, <2 x float>* %15, i64 0, i64 0
  %219 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %16, i64 0, i32 1
  %220 = bitcast float* %44 to <2 x float>*
  %221 = load <2 x float>, <2 x float>* %220, align 8
  %222 = bitcast [2 x %struct.SkPoint]* %14 to <2 x float>*
  %223 = load <2 x float>, <2 x float>* %222, align 16
  %224 = fsub <2 x float> %221, %223
  %225 = extractelement <2 x float> %224, i32 0
  %226 = extractelement <2 x float> %224, i32 1
  store <2 x float> %224, <2 x float>* %15, align 8
  %227 = fcmp oeq float %225, 0.000000e+00
  %228 = fcmp oeq float %226, 0.000000e+00
  %229 = and i1 %227, %228
  br i1 %229, label %470, label %230

230:                                              ; preds = %209
  %231 = fdiv float 1.000000e+00, %216
  call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* nonnull %16, float %231, %struct.SkPoint* nonnull %16) #8
  %232 = load float, float* %218, align 8
  %233 = fsub float 1.000000e+00, %232
  %234 = call float @llvm.fabs.f32(float %233) #8
  %235 = fcmp ugt float %234, 0x3F30000000000000
  br i1 %235, label %236, label %240

236:                                              ; preds = %230
  %237 = fsub float -1.000000e+00, %232
  %238 = call float @llvm.fabs.f32(float %237) #8
  %239 = fcmp ugt float %238, 0x3F30000000000000
  br i1 %239, label %242, label %240

240:                                              ; preds = %236, %230
  %241 = load float*, float** %25, align 8
  br label %257

242:                                              ; preds = %236
  %243 = load float, float* %219, align 4
  %244 = fsub float 1.000000e+00, %243
  %245 = call float @llvm.fabs.f32(float %244) #8
  %246 = fcmp ugt float %245, 0x3F30000000000000
  br i1 %246, label %247, label %251

247:                                              ; preds = %242
  %248 = fsub float -1.000000e+00, %243
  %249 = call float @llvm.fabs.f32(float %248) #8
  %250 = fcmp ugt float %249, 0x3F30000000000000
  br i1 %250, label %253, label %251

251:                                              ; preds = %247, %242
  %252 = load float*, float** %25, align 8
  br label %257

253:                                              ; preds = %247
  %254 = load i32, i32* %49, align 4
  %255 = and i32 %254, 65535
  %256 = icmp eq i32 %255, 1
  br i1 %256, label %267, label %470

257:                                              ; preds = %240, %251
  %258 = phi float* [ %252, %251 ], [ %17, %240 ]
  %259 = phi float* [ %17, %251 ], [ %241, %240 ]
  %260 = phi i1 [ false, %251 ], [ true, %240 ]
  %261 = load float, float* %259, align 4
  %262 = fmul float %261, 5.000000e-01
  %263 = load float, float* %258, align 4
  %264 = fmul float %263, 5.000000e-01
  %265 = getelementptr inbounds %"class.SkPathEffectBase::PointData", %"class.SkPathEffectBase::PointData"* %1, i64 0, i32 3, i32 0
  store float %262, float* %265, align 4
  %266 = getelementptr inbounds %"class.SkPathEffectBase::PointData", %"class.SkPathEffectBase::PointData"* %1, i64 0, i32 3, i32 1
  store float %264, float* %266, align 4
  br label %267

267:                                              ; preds = %257, %253
  %268 = phi i1 [ true, %253 ], [ %260, %257 ]
  %269 = icmp eq %"class.SkPathEffectBase::PointData"* %1, null
  br i1 %269, label %470, label %270

270:                                              ; preds = %267
  %271 = getelementptr inbounds %"class.SkPathEffectBase::PointData", %"class.SkPathEffectBase::PointData"* %1, i64 0, i32 0
  store i32 0, i32* %271, align 8
  %272 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 5
  %273 = load float, float* %272, align 4
  %274 = fcmp olt float %273, %216
  %275 = select i1 %274, float %273, float %216
  %276 = load i32, i32* %49, align 4
  %277 = and i32 %276, 65535
  %278 = icmp eq i32 %277, 1
  %279 = zext i1 %278 to i32
  store i32 %279, i32* %271, align 8
  %280 = getelementptr inbounds %"class.SkPathEffectBase::PointData", %"class.SkPathEffectBase::PointData"* %1, i64 0, i32 2
  store i32 0, i32* %280, align 8
  %281 = fcmp ogt float %275, 0.000000e+00
  %282 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 6
  %283 = load i32, i32* %282, align 4
  %284 = icmp eq i32 %283, 0
  br i1 %281, label %286, label %285

285:                                              ; preds = %270
  br i1 %284, label %295, label %306

286:                                              ; preds = %270
  br i1 %284, label %287, label %304

287:                                              ; preds = %286
  %288 = load float*, float** %25, align 8
  %289 = load float, float* %288, align 4
  %290 = fcmp ult float %275, %289
  br i1 %290, label %292, label %291

291:                                              ; preds = %287
  store i32 1, i32* %280, align 8
  br label %292

292:                                              ; preds = %287, %291
  %293 = phi i32 [ 0, %287 ], [ 1, %291 ]
  %294 = fsub float %216, %275
  br label %295

295:                                              ; preds = %285, %292
  %296 = phi i32 [ %293, %292 ], [ 0, %285 ]
  %297 = phi float [ %294, %292 ], [ %216, %285 ]
  %298 = load float*, float** %25, align 8
  %299 = getelementptr inbounds float, float* %298, i64 1
  %300 = load float, float* %299, align 4
  %301 = fsub float %297, %300
  %302 = fcmp olt float %301, 0.000000e+00
  br i1 %302, label %303, label %306

303:                                              ; preds = %295
  br label %306

304:                                              ; preds = %286
  %305 = fsub float %216, %275
  br label %306

306:                                              ; preds = %304, %303, %295, %285
  %307 = phi i32 [ %296, %303 ], [ %296, %295 ], [ 0, %304 ], [ 0, %285 ]
  %308 = phi float [ 0.000000e+00, %303 ], [ %301, %295 ], [ %305, %304 ], [ %216, %285 ]
  %309 = load float, float* %66, align 8
  %310 = fdiv float %308, %309
  %311 = bitcast float %310 to i32
  %312 = and i32 %311, 2139095040
  %313 = icmp eq i32 %312, 2139095040
  %314 = fcmp ogt float %310, 1.000000e+06
  %315 = or i1 %314, %313
  br i1 %315, label %470, label %316

316:                                              ; preds = %306
  %317 = call float @llvm.floor.f32(float %310)
  %318 = fcmp olt float %317, 0x41DFFFFFE0000000
  %319 = select i1 %318, float %317, float 0x41DFFFFFE0000000
  %320 = fcmp ogt float %319, 0xC1DFFFFFE0000000
  %321 = select i1 %320, float %319, float 0xC1DFFFFFE0000000
  %322 = fptosi float %321 to i32
  %323 = add nsw i32 %307, %322
  store i32 %323, i32* %280, align 8
  %324 = sitofp i32 %322 to float
  %325 = load float, float* %66, align 8
  %326 = fmul float %325, %324
  %327 = fsub float %308, %326
  %328 = fcmp ogt float %327, 0.000000e+00
  br i1 %328, label %329, label %336

329:                                              ; preds = %316
  %330 = load float*, float** %25, align 8
  %331 = load float, float* %330, align 4
  %332 = fcmp olt float %327, %331
  br i1 %332, label %336, label %333

333:                                              ; preds = %329
  %334 = add nsw i32 %322, 1
  %335 = add nsw i32 %323, 1
  store i32 %335, i32* %280, align 8
  br label %336

336:                                              ; preds = %329, %333, %316
  %337 = phi i32 [ %335, %333 ], [ %323, %316 ], [ %323, %329 ]
  %338 = phi i32 [ %334, %333 ], [ %322, %316 ], [ %322, %329 ]
  %339 = phi i1 [ false, %333 ], [ false, %316 ], [ true, %329 ]
  %340 = sext i32 %337 to i64
  %341 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %340, i64 8)
  %342 = extractvalue { i64, i1 } %341, 1
  %343 = extractvalue { i64, i1 } %341, 0
  %344 = select i1 %342, i64 -1, i64 %343
  %345 = call i8* @_Znam(i64 %344) #9
  %346 = getelementptr inbounds %"class.SkPathEffectBase::PointData", %"class.SkPathEffectBase::PointData"* %1, i64 0, i32 1
  %347 = bitcast %struct.SkPoint** %346 to i8**
  store i8* %345, i8** %347, align 8
  %348 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 6
  %349 = load i32, i32* %348, align 4
  %350 = icmp eq i32 %349, 0
  br i1 %281, label %352, label %351

351:                                              ; preds = %336
  br i1 %350, label %392, label %401

352:                                              ; preds = %336
  br i1 %350, label %353, label %399

353:                                              ; preds = %352
  %354 = bitcast [2 x %struct.SkPoint]* %14 to <2 x float>*
  %355 = load <2 x float>, <2 x float>* %354, align 16
  %356 = load float, float* %219, align 4
  %357 = insertelement <2 x float> undef, float %232, i32 0
  %358 = insertelement <2 x float> %357, float %356, i32 1
  %359 = load float, float* %17, align 4
  %360 = insertelement <2 x float> undef, float %359, i32 0
  %361 = insertelement <2 x float> %360, float %275, i32 1
  %362 = fmul <2 x float> %361, <float 5.000000e-01, float 5.000000e-01>
  %363 = shufflevector <2 x float> %362, <2 x float> undef, <2 x i32> <i32 1, i32 undef>
  %364 = shufflevector <2 x float> %362, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %365 = fmul <2 x float> %358, %364
  %366 = fadd <2 x float> %365, %355
  %367 = shufflevector <2 x float> %366, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %368 = insertelement <2 x i1> undef, i1 %268, i32 0
  %369 = shufflevector <2 x i1> %368, <2 x i1> undef, <2 x i32> zeroinitializer
  %370 = shufflevector <2 x float> %363, <2 x float> %362, <2 x i32> <i32 0, i32 2>
  %371 = select <2 x i1> %369, <2 x float> %370, <2 x float> %362
  %372 = shufflevector <2 x float> %371, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %373 = load float*, float** %25, align 8
  %374 = load float, float* %373, align 4
  %375 = fcmp olt float %275, %374
  br i1 %375, label %376, label %383

376:                                              ; preds = %353
  %377 = getelementptr inbounds %"class.SkPathEffectBase::PointData", %"class.SkPathEffectBase::PointData"* %1, i64 0, i32 7
  %378 = fsub <4 x float> %367, %372
  %379 = fadd <4 x float> %367, %372
  %380 = shufflevector <4 x float> %378, <4 x float> %379, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %381 = bitcast <4 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %381) #8
  store <4 x float> %380, <4 x float>* %10, align 16
  %382 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addRectERK6SkRect15SkPathDirectionj(%class.SkPath* %377, %struct.SkRect* nonnull dereferenceable(16) %11, i32 0, i32 0) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %381) #8
  br label %389

383:                                              ; preds = %353
  %384 = bitcast i8* %345 to float*
  %385 = extractelement <2 x float> %366, i32 0
  store float %385, float* %384, align 4
  %386 = getelementptr inbounds i8, i8* %345, i64 4
  %387 = bitcast i8* %386 to float*
  %388 = extractelement <2 x float> %366, i32 1
  store float %388, float* %387, align 4
  br label %389

389:                                              ; preds = %383, %376
  %390 = phi i32 [ 0, %376 ], [ 1, %383 ]
  %391 = fadd float %275, 0.000000e+00
  br label %392

392:                                              ; preds = %351, %389
  %393 = phi float [ %391, %389 ], [ 0.000000e+00, %351 ]
  %394 = phi i32 [ %390, %389 ], [ 0, %351 ]
  %395 = load float*, float** %25, align 8
  %396 = getelementptr inbounds float, float* %395, i64 1
  %397 = load float, float* %396, align 4
  %398 = fadd float %393, %397
  br label %401

399:                                              ; preds = %352
  %400 = fadd float %275, 0.000000e+00
  br label %401

401:                                              ; preds = %392, %399, %351
  %402 = phi float [ %398, %392 ], [ %400, %399 ], [ 0.000000e+00, %351 ]
  %403 = phi i32 [ %394, %392 ], [ 0, %399 ], [ 0, %351 ]
  %404 = icmp eq i32 %338, 0
  br i1 %404, label %441, label %405

405:                                              ; preds = %401
  %406 = load float*, float** %25, align 8
  %407 = load float, float* %406, align 4
  %408 = fmul float %407, 5.000000e-01
  %409 = fadd float %402, %408
  %410 = icmp sgt i32 %338, 0
  br i1 %410, label %411, label %419

411:                                              ; preds = %405
  %412 = zext i32 %403 to i64
  %413 = add nuw i32 %403, %338
  %414 = zext i32 %413 to i64
  br label %423

415:                                              ; preds = %423
  %416 = load float*, float** %25, align 8
  %417 = load float, float* %416, align 4
  %418 = fmul float %417, 5.000000e-01
  br label %419

419:                                              ; preds = %415, %405
  %420 = phi float [ %418, %415 ], [ %408, %405 ]
  %421 = phi float [ %439, %415 ], [ %409, %405 ]
  %422 = fsub float %421, %420
  br label %441

423:                                              ; preds = %423, %411
  %424 = phi i64 [ %412, %411 ], [ %437, %423 ]
  %425 = phi float [ %409, %411 ], [ %439, %423 ]
  %426 = load float, float* %42, align 16
  %427 = load float, float* %218, align 8
  %428 = fmul float %425, %427
  %429 = fadd float %426, %428
  %430 = load float, float* %43, align 4
  %431 = load float, float* %219, align 4
  %432 = fmul float %425, %431
  %433 = fadd float %430, %432
  %434 = load %struct.SkPoint*, %struct.SkPoint** %346, align 8
  %435 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %434, i64 %424, i32 0
  store float %429, float* %435, align 4
  %436 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %434, i64 %424, i32 1
  store float %433, float* %436, align 4
  %437 = add nuw nsw i64 %424, 1
  %438 = load float, float* %66, align 8
  %439 = fadd float %425, %438
  %440 = icmp eq i64 %437, %414
  br i1 %440, label %415, label %423

441:                                              ; preds = %401, %419
  %442 = phi float [ %422, %419 ], [ %402, %401 ]
  br i1 %339, label %443, label %470

443:                                              ; preds = %441
  %444 = fsub float %216, %442
  %445 = load float, float* %17, align 4
  %446 = insertelement <2 x float> undef, float %444, i32 0
  %447 = insertelement <2 x float> %446, float %445, i32 1
  %448 = fmul <2 x float> %447, <float 5.000000e-01, float 5.000000e-01>
  %449 = extractelement <2 x float> %448, i32 0
  %450 = fadd float %442, %449
  %451 = bitcast [2 x %struct.SkPoint]* %14 to <2 x float>*
  %452 = load <2 x float>, <2 x float>* %451, align 16
  %453 = load <2 x float>, <2 x float>* %15, align 8
  %454 = insertelement <2 x float> undef, float %450, i32 0
  %455 = shufflevector <2 x float> %454, <2 x float> undef, <2 x i32> zeroinitializer
  %456 = fmul <2 x float> %455, %453
  %457 = fadd <2 x float> %452, %456
  %458 = shufflevector <2 x float> %457, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %459 = insertelement <2 x i1> undef, i1 %268, i32 0
  %460 = shufflevector <2 x i1> %459, <2 x i1> undef, <2 x i32> zeroinitializer
  %461 = shufflevector <2 x float> %448, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %462 = select <2 x i1> %460, <2 x float> %448, <2 x float> %461
  %463 = shufflevector <2 x float> %462, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %464 = getelementptr inbounds %"class.SkPathEffectBase::PointData", %"class.SkPathEffectBase::PointData"* %1, i64 0, i32 8
  %465 = fsub <4 x float> %458, %463
  %466 = fadd <4 x float> %458, %463
  %467 = shufflevector <4 x float> %465, <4 x float> %466, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %468 = bitcast <4 x float>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %468) #8
  store <4 x float> %467, <4 x float>* %12, align 16
  %469 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addRectERK6SkRect15SkPathDirectionj(%class.SkPath* %464, %struct.SkRect* nonnull dereferenceable(16) %13, i32 0, i32 0) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %468) #8
  br label %470

470:                                              ; preds = %253, %443, %441, %267, %306, %209
  %471 = phi i1 [ false, %209 ], [ false, %253 ], [ true, %443 ], [ true, %441 ], [ true, %267 ], [ false, %306 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %217) #8
  br label %472

472:                                              ; preds = %61, %69, %65, %208, %48, %39, %470
  %473 = phi i1 [ %471, %470 ], [ false, %39 ], [ false, %48 ], [ false, %61 ], [ false, %208 ], [ false, %65 ], [ false, %69 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #8
  br label %474

474:                                              ; preds = %24, %20, %6, %472
  %475 = phi i1 [ %473, %472 ], [ false, %6 ], [ false, %20 ], [ false, %24 ]
  ret i1 %475
}

declare zeroext i1 @_ZNK6SkPath6isLineEP7SkPoint(%class.SkPath*, %struct.SkPoint*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK10SkDashImpl9onAsADashEPN12SkPathEffect8DashInfoE(%class.SkDashImpl* nocapture readonly, %"struct.SkPathEffect::DashInfo"*) unnamed_addr #0 align 2 {
  %3 = icmp eq %"struct.SkPathEffect::DashInfo"* %1, null
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"struct.SkPathEffect::DashInfo", %"struct.SkPathEffect::DashInfo"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %6, %8
  br i1 %9, label %22, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"struct.SkPathEffect::DashInfo", %"struct.SkPathEffect::DashInfo"* %1, i64 0, i32 0
  %12 = load float*, float** %11, align 8
  %13 = icmp eq float* %12, null
  br i1 %13, label %22, label %14

14:                                               ; preds = %10
  %15 = bitcast float* %12 to i8*
  %16 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 2
  %17 = bitcast float** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = sext i32 %8 to i64
  %20 = shl nsw i64 %19, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %15, i8* align 4 %18, i64 %20, i1 false)
  %21 = load i32, i32* %7, align 8
  br label %22

22:                                               ; preds = %10, %4, %14
  %23 = phi i32 [ %8, %10 ], [ %8, %4 ], [ %21, %14 ]
  store i32 %23, i32* %5, align 8
  %24 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 4
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"struct.SkPathEffect::DashInfo", %"struct.SkPathEffect::DashInfo"* %1, i64 0, i32 2
  %28 = bitcast float* %27 to i32*
  store i32 %26, i32* %28, align 4
  br label %29

29:                                               ; preds = %2, %22
  ret i32 1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkDashImpl7flattenER13SkWriteBuffer(%class.SkDashImpl* nocapture readonly, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 4
  %4 = load float, float* %3, align 4
  %5 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float)***
  %6 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %5, align 8
  %7 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %6, i64 5
  %8 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %7, align 8
  tail call void %8(%class.SkWriteBuffer* %1, float %4) #8
  %9 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 2
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %class.SkDashImpl, %class.SkDashImpl* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float*, i32)***
  %14 = load void (%class.SkWriteBuffer*, float*, i32)**, void (%class.SkWriteBuffer*, float*, i32)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkWriteBuffer*, float*, i32)*, void (%class.SkWriteBuffer*, float*, i32)** %14, i64 6
  %16 = load void (%class.SkWriteBuffer*, float*, i32)*, void (%class.SkWriteBuffer*, float*, i32)** %15, align 8
  tail call void %16(%class.SkWriteBuffer* %1, float* %10, i32 %12) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkDashImpl10CreateProcER12SkReadBuffer(%class.sk_sp.21* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #0 align 2 {
  %3 = alloca %class.SkAutoSTArray, align 8
  %4 = alloca %class.sk_sp.22, align 8
  %5 = tail call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #8
  %6 = tail call i32 @_ZN12SkReadBuffer13getArrayCountEv(%class.SkReadBuffer* %1) #8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %class.SkReadBuffer* %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = lshr i64 %13, 2
  %15 = icmp ult i64 %14, %7
  br i1 %15, label %16, label %17

16:                                               ; preds = %2
  tail call void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer* %1) #8
  br label %17

17:                                               ; preds = %2, %16
  %18 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 13
  %19 = load i8, i8* %18, align 8, !range !4
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %22, align 8
  br label %72

23:                                               ; preds = %17
  %24 = bitcast %class.SkAutoSTArray* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %24) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 144, i1 false)
  %25 = getelementptr inbounds %class.SkAutoSTArray, %class.SkAutoSTArray* %3, i64 0, i32 1
  store float* null, float** %25, align 8
  %26 = getelementptr inbounds %class.SkAutoSTArray, %class.SkAutoSTArray* %3, i64 0, i32 0
  store i32 0, i32* %26, align 8
  %27 = icmp eq i32 %6, 0
  br i1 %27, label %44, label %28

28:                                               ; preds = %23
  %29 = icmp sgt i32 %6, 32
  br i1 %29, label %30, label %35

30:                                               ; preds = %28
  %31 = sext i32 %6 to i64
  %32 = tail call i8* @_Z15sk_malloc_throwmm(i64 %31, i64 4) #8
  %33 = bitcast float** %25 to i8**
  store i8* %32, i8** %33, align 8
  %34 = bitcast i8* %32 to float*
  br label %42

35:                                               ; preds = %28
  %36 = icmp sgt i32 %6, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %35
  %38 = getelementptr inbounds %class.SkAutoSTArray, %class.SkAutoSTArray* %3, i64 0, i32 2, i64 0
  %39 = bitcast float** %25 to i8**
  store i8* %38, i8** %39, align 8
  %40 = bitcast i8* %38 to float*
  br label %42

41:                                               ; preds = %35
  store float* null, float** %25, align 8
  br label %42

42:                                               ; preds = %41, %37, %30
  %43 = phi float* [ null, %41 ], [ %40, %37 ], [ %34, %30 ]
  store i32 %6, i32* %26, align 8
  br label %44

44:                                               ; preds = %23, %42
  %45 = phi float* [ null, %23 ], [ %43, %42 ]
  %46 = call zeroext i1 @_ZN12SkReadBuffer15readScalarArrayEPfm(%class.SkReadBuffer* %1, float* %45, i64 %7) #8
  br i1 %46, label %47, label %53

47:                                               ; preds = %44
  %48 = bitcast %class.sk_sp.22* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #8
  %49 = load float*, float** %25, align 8
  call void @_ZN16SkDashPathEffect4MakeEPKfif(%class.sk_sp.22* nonnull sret %4, float* %49, i32 %6, float %5)
  %50 = bitcast %class.sk_sp.22* %4 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %class.sk_sp.21* %0 to i64*
  store i64 %51, i64* %52, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #8
  br label %55

53:                                               ; preds = %44
  %54 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %54, align 8
  br label %55

55:                                               ; preds = %53, %47
  %56 = load float*, float** %25, align 8
  %57 = load i32, i32* %26, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds float, float* %56, i64 %58
  br label %60

60:                                               ; preds = %60, %55
  %61 = phi float* [ %59, %55 ], [ %63, %60 ]
  %62 = icmp ugt float* %61, %56
  %63 = getelementptr inbounds float, float* %61, i64 -1
  br i1 %62, label %60, label %64

64:                                               ; preds = %60
  %65 = bitcast float* %56 to i8*
  %66 = icmp eq i32 %57, 0
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp sgt i32 %57, 32
  br i1 %68, label %69, label %70

69:                                               ; preds = %67
  call void @_Z7sk_freePv(i8* %65) #8
  br label %70

70:                                               ; preds = %69, %67
  store float* null, float** %25, align 8
  store i32 0, i32* %26, align 8
  br label %71

71:                                               ; preds = %64, %70
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %24) #8
  br label %72

72:                                               ; preds = %71, %21
  ret void
}

declare float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare i32 @_ZN12SkReadBuffer13getArrayCountEv(%class.SkReadBuffer*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN12SkReadBuffer15readScalarArrayEPfm(%class.SkReadBuffer*, float*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkDashPathEffect4MakeEPKfif(%class.sk_sp.22* noalias nocapture sret, float*, i32, float) local_unnamed_addr #0 align 2 {
  %5 = tail call zeroext i1 @_ZN10SkDashPath13ValidDashPathEfPKfi(float %3, float* %1, i32 %2) #8
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.sk_sp.22, %class.sk_sp.22* %0, i64 0, i32 0
  store %class.SkPathEffect* null, %class.SkPathEffect** %7, align 8
  br label %97

8:                                                ; preds = %4
  %9 = tail call i8* @_Znwm(i64 48) #9
  %10 = getelementptr inbounds i8, i8* %9, i64 8
  %11 = bitcast i8* %10 to i32*
  store i32 1, i32* %11, align 4
  %12 = bitcast i8* %9 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV10SkDashImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds i8, i8* %9, i64 28
  %14 = bitcast i8* %13 to float*
  store float 0.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds i8, i8* %9, i64 32
  %16 = bitcast i8* %15 to float*
  store float -1.000000e+00, float* %16, align 8
  %17 = getelementptr inbounds i8, i8* %9, i64 36
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %9, i64 40
  %20 = bitcast i8* %19 to float*
  store float 0.000000e+00, float* %20, align 8
  %21 = sext i32 %2 to i64
  %22 = shl nsw i64 %21, 2
  %23 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %22, i32 2) #8
  %24 = getelementptr inbounds i8, i8* %9, i64 16
  %25 = bitcast i8* %24 to float**
  %26 = bitcast i8* %24 to i8**
  store i8* %23, i8** %26, align 8
  %27 = getelementptr inbounds i8, i8* %9, i64 24
  %28 = bitcast i8* %27 to i32*
  store i32 %2, i32* %28, align 8
  %29 = icmp sgt i32 %2, 0
  %30 = bitcast i8* %23 to float*
  br i1 %29, label %31, label %93

31:                                               ; preds = %8
  %32 = zext i32 %2 to i64
  %33 = add nsw i64 %32, -1
  %34 = and i64 %32, 3
  %35 = icmp ult i64 %33, 3
  br i1 %35, label %38, label %36

36:                                               ; preds = %31
  %37 = sub nsw i64 %32, %34
  br label %59

38:                                               ; preds = %59, %31
  %39 = phi float* [ undef, %31 ], [ %90, %59 ]
  %40 = phi float* [ %30, %31 ], [ %90, %59 ]
  %41 = phi i64 [ 0, %31 ], [ %89, %59 ]
  %42 = icmp eq i64 %34, 0
  br i1 %42, label %56, label %43

43:                                               ; preds = %38, %43
  %44 = phi float* [ %53, %43 ], [ %40, %38 ]
  %45 = phi i64 [ %52, %43 ], [ %41, %38 ]
  %46 = phi i64 [ %54, %43 ], [ %34, %38 ]
  %47 = getelementptr inbounds float, float* %1, i64 %45
  %48 = bitcast float* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds float, float* %44, i64 %45
  %51 = bitcast float* %50 to i32*
  store i32 %49, i32* %51, align 4
  %52 = add nuw nsw i64 %45, 1
  %53 = load float*, float** %25, align 8
  %54 = add i64 %46, -1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %43, !llvm.loop !5

56:                                               ; preds = %43, %38
  %57 = phi float* [ %39, %38 ], [ %53, %43 ]
  %58 = load i32, i32* %28, align 8
  br label %93

59:                                               ; preds = %59, %36
  %60 = phi float* [ %30, %36 ], [ %90, %59 ]
  %61 = phi i64 [ 0, %36 ], [ %89, %59 ]
  %62 = phi i64 [ %37, %36 ], [ %91, %59 ]
  %63 = getelementptr inbounds float, float* %1, i64 %61
  %64 = bitcast float* %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds float, float* %60, i64 %61
  %67 = bitcast float* %66 to i32*
  store i32 %65, i32* %67, align 4
  %68 = or i64 %61, 1
  %69 = load float*, float** %25, align 8
  %70 = getelementptr inbounds float, float* %1, i64 %68
  %71 = bitcast float* %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds float, float* %69, i64 %68
  %74 = bitcast float* %73 to i32*
  store i32 %72, i32* %74, align 4
  %75 = or i64 %61, 2
  %76 = load float*, float** %25, align 8
  %77 = getelementptr inbounds float, float* %1, i64 %75
  %78 = bitcast float* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds float, float* %76, i64 %75
  %81 = bitcast float* %80 to i32*
  store i32 %79, i32* %81, align 4
  %82 = or i64 %61, 3
  %83 = load float*, float** %25, align 8
  %84 = getelementptr inbounds float, float* %1, i64 %82
  %85 = bitcast float* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds float, float* %83, i64 %82
  %88 = bitcast float* %87 to i32*
  store i32 %86, i32* %88, align 4
  %89 = add nuw nsw i64 %61, 4
  %90 = load float*, float** %25, align 8
  %91 = add i64 %62, -4
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %38, label %59

93:                                               ; preds = %8, %56
  %94 = phi i32 [ %58, %56 ], [ %2, %8 ]
  %95 = phi float* [ %57, %56 ], [ %30, %8 ]
  tail call void @_ZN10SkDashPath18CalcDashParametersEfPKfiPfPiS2_S2_(float %3, float* %95, i32 %94, float* %16, i32* %18, float* %20, float* %14) #8
  %96 = bitcast %class.sk_sp.22* %0 to i8**
  store i8* %9, i8** %96, align 8
  br label %97

97:                                               ; preds = %93, %6
  ret void
}

declare zeroext i1 @_ZN10SkDashPath13ValidDashPathEfPKfi(float, float*, i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #8
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.21*, %class.SkReadBuffer*)* @_ZNK10SkDashImpl10getFactoryEv(%class.SkDashImpl*) unnamed_addr #0 comdat align 2 {
  ret void (%class.sk_sp.21*, %class.SkReadBuffer*)* @_ZN10SkDashImpl10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK10SkDashImpl11getTypeNameEv(%class.SkDashImpl*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK16SkPathEffectBase18getFlattenableTypeEv(%class.SkPathEffectBase*) unnamed_addr #0 comdat align 2 {
  ret i32 5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10SkDashImpl17computeFastBoundsEP6SkRect(%class.SkDashImpl*, %struct.SkRect*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #5

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @fmodf(float, float) local_unnamed_addr #7

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #2

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #2

declare void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint*, float, %struct.SkPoint*) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7addRectERK6SkRect15SkPathDirectionj(%class.SkPath*, %struct.SkRect* dereferenceable(16), i32, i32) local_unnamed_addr #2

declare void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i8 0, i8 2}
!5 = distinct !{!5, !3}
