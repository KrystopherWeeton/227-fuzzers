; ModuleID = '../../v8/src/compiler/all-nodes.cc'
source_filename = "../../v8/src/compiler/all-nodes.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::compiler::AllNodes" = type <{ %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector.11", i8, [7 x i8] }>
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"**, %"class.std::__1::__compressed_pair" }
%"class.v8::internal::compiler::Node" = type { %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Type", i32, i32, %"struct.v8::internal::compiler::Node::Use"* }
%"class.v8::internal::compiler::Operator" = type <{ i32 (...)**, i8*, i16, %"class.v8::base::Flags", i8, i32, i32, i32, i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::base::Flags" = type { i8 }
%"class.v8::internal::compiler::Type" = type { i64 }
%"struct.v8::internal::compiler::Node::Use" = type { %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"*, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::compiler::Node"** }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.11" = type { %"class.std::__1::vector.12" }
%"class.std::__1::vector.12" = type { i64*, i64, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14", %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.v8::internal::ZoneAllocator.16" }
%"class.v8::internal::ZoneAllocator.16" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::compiler::Graph" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, i32, i32, %"class.v8::internal::ZoneVector.17" }
%"class.v8::internal::ZoneVector.17" = type { %"class.std::__1::vector.18" }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"class.v8::internal::compiler::GraphDecorator"**, %"class.v8::internal::compiler::GraphDecorator"**, %"class.std::__1::__compressed_pair.20" }
%"class.v8::internal::compiler::GraphDecorator" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21", %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.v8::internal::compiler::GraphDecorator"** }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.v8::internal::ZoneAllocator.23" }
%"class.v8::internal::ZoneAllocator.23" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneAllocator.24" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.v8::internal::compiler::Node::OutOfLineInputs" = type { %"class.v8::internal::compiler::Node"*, i32, i32 }

$_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEEC2EmRKbRKS4_ = comdat any

@_ZN2v88internal8compiler8AllNodesC1EPNS0_4ZoneEPKNS1_5GraphEb = hidden unnamed_addr alias void (%"class.v8::internal::compiler::AllNodes"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Graph"*, i1), void (%"class.v8::internal::compiler::AllNodes"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Graph"*, i1)* @_ZN2v88internal8compiler8AllNodesC2EPNS0_4ZoneEPKNS1_5GraphEb
@_ZN2v88internal8compiler8AllNodesC1EPNS0_4ZoneEPNS1_4NodeEPKNS1_5GraphEb = hidden unnamed_addr alias void (%"class.v8::internal::compiler::AllNodes"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Graph"*, i1), void (%"class.v8::internal::compiler::AllNodes"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Graph"*, i1)* @_ZN2v88internal8compiler8AllNodesC2EPNS0_4ZoneEPNS1_4NodeEPKNS1_5GraphEb

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler8AllNodesC2EPNS0_4ZoneEPKNS1_5GraphEb(%"class.v8::internal::compiler::AllNodes"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Graph"* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %5 = alloca i8, align 1
  %6 = alloca %"class.v8::internal::ZoneAllocator.24", align 8
  %7 = zext i1 %3 to i8
  %8 = ptrtoint %"class.v8::internal::Zone"* %1 to i64
  %9 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %10 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %9 to i64*
  %11 = bitcast %"class.v8::internal::compiler::AllNodes"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #4
  store i64 %8, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %2, i64 0, i32 4
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5)
  store i8 0, i8* %5, align 1
  %15 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 1, i32 0
  %16 = bitcast %"class.v8::internal::ZoneAllocator.24"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #4
  %17 = getelementptr inbounds %"class.v8::internal::ZoneAllocator.24", %"class.v8::internal::ZoneAllocator.24"* %6, i64 0, i32 0
  store %"class.v8::internal::Zone"* %1, %"class.v8::internal::Zone"** %17, align 8
  call void @_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEEC2EmRKbRKS4_(%"class.std::__1::vector.12"* %15, i64 %14, i8* nonnull dereferenceable(1) %5, %"class.v8::internal::ZoneAllocator.24"* nonnull dereferenceable(8) %6) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5)
  %18 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 2
  store i8 %7, i8* %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %2, i64 0, i32 2
  %20 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %19, align 8
  call void @_ZN2v88internal8compiler8AllNodes4MarkEPNS0_4ZoneEPNS1_4NodeEPKNS1_5GraphE(%"class.v8::internal::compiler::AllNodes"* %0, %"class.v8::internal::Zone"* undef, %"class.v8::internal::compiler::Node"* %20, %"class.v8::internal::compiler::Graph"* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler8AllNodes4MarkEPNS0_4ZoneEPNS1_4NodeEPKNS1_5GraphE(%"class.v8::internal::compiler::AllNodes"*, %"class.v8::internal::Zone"* nocapture readnone, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Graph"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = ptrtoint %"class.v8::internal::compiler::Node"* %2 to i64
  %6 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %2, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 16777215
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = load i64*, i64** %10, align 8
  %12 = lshr i64 %9, 6
  %13 = getelementptr inbounds i64, i64* %11, i64 %12
  %14 = and i64 %9, 63
  %15 = shl i64 1, %14
  %16 = load i64, i64* %13, align 8
  %17 = or i64 %15, %16
  store i64 %17, i64* %13, align 8
  %18 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %19 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %20, align 8
  %22 = icmp eq %"class.v8::internal::compiler::Node"** %19, %21
  %23 = ptrtoint %"class.v8::internal::compiler::Node"** %21 to i64
  br i1 %22, label %32, label %24

24:                                               ; preds = %4
  %25 = bitcast %"class.v8::internal::compiler::Node"** %19 to i64*
  store i64 %5, i64* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %19, i64 1
  %27 = ptrtoint %"class.v8::internal::compiler::Node"** %26 to i64
  %28 = bitcast %"class.v8::internal::compiler::Node"*** %18 to i64*
  store i64 %27, i64* %28, align 8
  %29 = bitcast %"class.v8::internal::compiler::AllNodes"* %0 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = inttoptr i64 %30 to %"class.v8::internal::compiler::Node"**
  br label %257

32:                                               ; preds = %4
  %33 = ptrtoint %"class.v8::internal::compiler::Node"** %19 to i64
  %34 = bitcast %"class.v8::internal::compiler::Node"*** %18 to i64*
  %35 = bitcast %"class.v8::internal::compiler::AllNodes"* %0 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %33, %36
  %38 = ashr exact i64 %37, 3
  %39 = add nsw i64 %38, 1
  %40 = icmp ugt i64 %39, 268435455
  br i1 %40, label %41, label %43

41:                                               ; preds = %32
  %42 = bitcast %"class.v8::internal::compiler::AllNodes"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %42) #5
  unreachable

43:                                               ; preds = %32
  %44 = bitcast %"class.v8::internal::compiler::Node"*** %20 to i64*
  %45 = sub i64 %23, %36
  %46 = ashr exact i64 %45, 3
  %47 = icmp ult i64 %46, 134217727
  br i1 %47, label %48, label %53

48:                                               ; preds = %43
  %49 = ashr exact i64 %45, 2
  %50 = icmp ult i64 %49, %39
  %51 = select i1 %50, i64 %39, i64 %49
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %71, label %53

53:                                               ; preds = %48, %43
  %54 = phi i64 [ %51, %48 ], [ 268435455, %43 ]
  %55 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %56 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %55, align 8
  %57 = shl i64 %54, 3
  %58 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %56, i64 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %56, i64 0, i32 3
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %61, %59
  %63 = icmp ugt i64 %57, %62
  br i1 %63, label %64, label %66, !prof !2

64:                                               ; preds = %53
  %65 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %56, i64 %57) #4
  br label %68

66:                                               ; preds = %53
  %67 = add i64 %59, %57
  store i64 %67, i64* %58, align 8
  br label %68

68:                                               ; preds = %66, %64
  %69 = phi i64 [ %65, %64 ], [ %59, %66 ]
  %70 = inttoptr i64 %69 to %"class.v8::internal::compiler::Node"**
  br label %71

71:                                               ; preds = %68, %48
  %72 = phi i64 [ %54, %68 ], [ 0, %48 ]
  %73 = phi %"class.v8::internal::compiler::Node"** [ %70, %68 ], [ null, %48 ]
  %74 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %73, i64 %38
  %75 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %73, i64 %72
  %76 = ptrtoint %"class.v8::internal::compiler::Node"** %75 to i64
  %77 = bitcast %"class.v8::internal::compiler::Node"** %74 to i64*
  store i64 %5, i64* %77, align 8
  %78 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 1
  %79 = ptrtoint %"class.v8::internal::compiler::Node"** %78 to i64
  %80 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %81 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %80, align 8
  %82 = ptrtoint %"class.v8::internal::compiler::Node"** %81 to i64
  %83 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %18, align 8
  %84 = icmp eq %"class.v8::internal::compiler::Node"** %83, %81
  br i1 %84, label %254, label %85

85:                                               ; preds = %71
  %86 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %83, i64 -1
  %87 = ptrtoint %"class.v8::internal::compiler::Node"** %86 to i64
  %88 = sub i64 %87, %82
  %89 = lshr i64 %88, 3
  %90 = add nuw nsw i64 %89, 1
  %91 = icmp ult i64 %90, 4
  br i1 %91, label %184, label %92

92:                                               ; preds = %85
  %93 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %83, i64 -1
  %94 = ptrtoint %"class.v8::internal::compiler::Node"** %93 to i64
  %95 = sub i64 %94, %82
  %96 = lshr i64 %95, 3
  %97 = xor i64 %96, -1
  %98 = add nsw i64 %38, %97
  %99 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %73, i64 %98
  %100 = xor i64 %96, -1
  %101 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %83, i64 %100
  %102 = icmp ult %"class.v8::internal::compiler::Node"** %99, %83
  %103 = icmp ult %"class.v8::internal::compiler::Node"** %101, %74
  %104 = and i1 %102, %103
  br i1 %104, label %184, label %105

105:                                              ; preds = %92
  %106 = and i64 %90, 4611686018427387900
  %107 = sub nsw i64 0, %106
  %108 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 %107
  %109 = sub nsw i64 0, %106
  %110 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %83, i64 %109
  %111 = add nsw i64 %106, -4
  %112 = lshr exact i64 %111, 2
  %113 = add nuw nsw i64 %112, 1
  %114 = and i64 %113, 1
  %115 = icmp eq i64 %111, 0
  br i1 %115, label %162, label %116

116:                                              ; preds = %105
  %117 = sub nuw nsw i64 %113, %114
  %118 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 -1
  %119 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %83, i64 -1
  %120 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 -1
  %121 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %83, i64 -1
  br label %122

122:                                              ; preds = %122, %116
  %123 = phi i64 [ 0, %116 ], [ %157, %122 ]
  %124 = phi i64 [ %117, %116 ], [ %158, %122 ]
  %125 = sub i64 0, %123
  %126 = sub i64 0, %123
  %127 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %118, i64 %125
  %128 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %119, i64 %126
  %129 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %128, i64 -1
  %130 = bitcast %"class.v8::internal::compiler::Node"** %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 8, !alias.scope !3
  %132 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %128, i64 -2
  %133 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %132, i64 -1
  %134 = bitcast %"class.v8::internal::compiler::Node"** %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 8, !alias.scope !3
  %136 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %127, i64 -1
  %137 = bitcast %"class.v8::internal::compiler::Node"** %136 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %137, align 8, !alias.scope !6, !noalias !3
  %138 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %127, i64 -2
  %139 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %138, i64 -1
  %140 = bitcast %"class.v8::internal::compiler::Node"** %139 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %140, align 8, !alias.scope !6, !noalias !3
  %141 = sub nuw nsw i64 -4, %123
  %142 = sub nuw nsw i64 -4, %123
  %143 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %120, i64 %141
  %144 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %121, i64 %142
  %145 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %144, i64 -1
  %146 = bitcast %"class.v8::internal::compiler::Node"** %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 8, !alias.scope !3
  %148 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %144, i64 -2
  %149 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %148, i64 -1
  %150 = bitcast %"class.v8::internal::compiler::Node"** %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 8, !alias.scope !3
  %152 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %143, i64 -1
  %153 = bitcast %"class.v8::internal::compiler::Node"** %152 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %153, align 8, !alias.scope !6, !noalias !3
  %154 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %143, i64 -2
  %155 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %154, i64 -1
  %156 = bitcast %"class.v8::internal::compiler::Node"** %155 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %156, align 8, !alias.scope !6, !noalias !3
  %157 = add i64 %123, 8
  %158 = add i64 %124, -2
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %122, !llvm.loop !8

160:                                              ; preds = %122
  %161 = sub nuw nsw i64 -8, %123
  br label %162

162:                                              ; preds = %160, %105
  %163 = phi i64 [ 0, %105 ], [ %161, %160 ]
  %164 = icmp eq i64 %114, 0
  br i1 %164, label %182, label %165

165:                                              ; preds = %162
  %166 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 -1
  %167 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %83, i64 -1
  %168 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %166, i64 %163
  %169 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %167, i64 %163
  %170 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %169, i64 -1
  %171 = bitcast %"class.v8::internal::compiler::Node"** %170 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 8, !alias.scope !3
  %173 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %169, i64 -2
  %174 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %173, i64 -1
  %175 = bitcast %"class.v8::internal::compiler::Node"** %174 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %175, align 8, !alias.scope !3
  %177 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %168, i64 -1
  %178 = bitcast %"class.v8::internal::compiler::Node"** %177 to <2 x i64>*
  store <2 x i64> %172, <2 x i64>* %178, align 8, !alias.scope !6, !noalias !3
  %179 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %168, i64 -2
  %180 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %179, i64 -1
  %181 = bitcast %"class.v8::internal::compiler::Node"** %180 to <2 x i64>*
  store <2 x i64> %176, <2 x i64>* %181, align 8, !alias.scope !6, !noalias !3
  br label %182

182:                                              ; preds = %162, %165
  %183 = icmp eq i64 %90, %106
  br i1 %183, label %254, label %184

184:                                              ; preds = %182, %92, %85
  %185 = phi %"class.v8::internal::compiler::Node"** [ %74, %92 ], [ %74, %85 ], [ %108, %182 ]
  %186 = phi %"class.v8::internal::compiler::Node"** [ %83, %92 ], [ %83, %85 ], [ %110, %182 ]
  %187 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %186, i64 -1
  %188 = ptrtoint %"class.v8::internal::compiler::Node"** %187 to i64
  %189 = sub i64 %188, %82
  %190 = lshr i64 %189, 3
  %191 = add nuw nsw i64 %190, 1
  %192 = and i64 %191, 7
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %205, label %194

194:                                              ; preds = %184, %194
  %195 = phi %"class.v8::internal::compiler::Node"** [ %198, %194 ], [ %185, %184 ]
  %196 = phi %"class.v8::internal::compiler::Node"** [ %199, %194 ], [ %186, %184 ]
  %197 = phi i64 [ %203, %194 ], [ %192, %184 ]
  %198 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %195, i64 -1
  %199 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %196, i64 -1
  %200 = bitcast %"class.v8::internal::compiler::Node"** %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = bitcast %"class.v8::internal::compiler::Node"** %198 to i64*
  store i64 %201, i64* %202, align 8
  %203 = add i64 %197, -1
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %194, !llvm.loop !10

205:                                              ; preds = %194, %184
  %206 = phi %"class.v8::internal::compiler::Node"** [ undef, %184 ], [ %198, %194 ]
  %207 = phi %"class.v8::internal::compiler::Node"** [ %185, %184 ], [ %198, %194 ]
  %208 = phi %"class.v8::internal::compiler::Node"** [ %186, %184 ], [ %199, %194 ]
  %209 = icmp ult i64 %189, 56
  br i1 %209, label %254, label %210

210:                                              ; preds = %205, %210
  %211 = phi %"class.v8::internal::compiler::Node"** [ %248, %210 ], [ %207, %205 ]
  %212 = phi %"class.v8::internal::compiler::Node"** [ %249, %210 ], [ %208, %205 ]
  %213 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %211, i64 -1
  %214 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %212, i64 -1
  %215 = bitcast %"class.v8::internal::compiler::Node"** %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = bitcast %"class.v8::internal::compiler::Node"** %213 to i64*
  store i64 %216, i64* %217, align 8
  %218 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %211, i64 -2
  %219 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %212, i64 -2
  %220 = bitcast %"class.v8::internal::compiler::Node"** %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = bitcast %"class.v8::internal::compiler::Node"** %218 to i64*
  store i64 %221, i64* %222, align 8
  %223 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %211, i64 -3
  %224 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %212, i64 -3
  %225 = bitcast %"class.v8::internal::compiler::Node"** %224 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = bitcast %"class.v8::internal::compiler::Node"** %223 to i64*
  store i64 %226, i64* %227, align 8
  %228 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %211, i64 -4
  %229 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %212, i64 -4
  %230 = bitcast %"class.v8::internal::compiler::Node"** %229 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = bitcast %"class.v8::internal::compiler::Node"** %228 to i64*
  store i64 %231, i64* %232, align 8
  %233 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %211, i64 -5
  %234 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %212, i64 -5
  %235 = bitcast %"class.v8::internal::compiler::Node"** %234 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = bitcast %"class.v8::internal::compiler::Node"** %233 to i64*
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %211, i64 -6
  %239 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %212, i64 -6
  %240 = bitcast %"class.v8::internal::compiler::Node"** %239 to i64*
  %241 = load i64, i64* %240, align 8
  %242 = bitcast %"class.v8::internal::compiler::Node"** %238 to i64*
  store i64 %241, i64* %242, align 8
  %243 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %211, i64 -7
  %244 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %212, i64 -7
  %245 = bitcast %"class.v8::internal::compiler::Node"** %244 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = bitcast %"class.v8::internal::compiler::Node"** %243 to i64*
  store i64 %246, i64* %247, align 8
  %248 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %211, i64 -8
  %249 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %212, i64 -8
  %250 = bitcast %"class.v8::internal::compiler::Node"** %249 to i64*
  %251 = load i64, i64* %250, align 8
  %252 = bitcast %"class.v8::internal::compiler::Node"** %248 to i64*
  store i64 %251, i64* %252, align 8
  %253 = icmp eq %"class.v8::internal::compiler::Node"** %249, %81
  br i1 %253, label %254, label %210, !llvm.loop !12

254:                                              ; preds = %205, %210, %182, %71
  %255 = phi %"class.v8::internal::compiler::Node"** [ %74, %71 ], [ %108, %182 ], [ %206, %205 ], [ %248, %210 ]
  %256 = ptrtoint %"class.v8::internal::compiler::Node"** %255 to i64
  store i64 %256, i64* %35, align 8
  store i64 %79, i64* %34, align 8
  store i64 %76, i64* %44, align 8
  br label %257

257:                                              ; preds = %24, %254
  %258 = phi i64* [ %29, %24 ], [ %35, %254 ]
  %259 = phi i64* [ %28, %24 ], [ %34, %254 ]
  %260 = phi %"class.v8::internal::compiler::Node"** [ %31, %24 ], [ %255, %254 ]
  %261 = phi i64 [ %30, %24 ], [ %256, %254 ]
  %262 = phi i64 [ %27, %24 ], [ %79, %254 ]
  %263 = icmp eq i64 %262, %261
  br i1 %263, label %270, label %264

264:                                              ; preds = %257
  %265 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %266 = bitcast %"class.v8::internal::compiler::Node"*** %20 to i64*
  %267 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %268 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 2
  %269 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %3, i64 0, i32 4
  br label %271

270:                                              ; preds = %837, %257
  ret void

271:                                              ; preds = %264, %837
  %272 = phi i64 [ %262, %264 ], [ %838, %837 ]
  %273 = phi %"class.v8::internal::compiler::Node"** [ %260, %264 ], [ %844, %837 ]
  %274 = phi i64 [ 0, %264 ], [ %839, %837 ]
  %275 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %273, i64 %274
  %276 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %275, align 8
  %277 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %276, i64 0, i32 3
  %278 = load i32, i32* %277, align 4
  %279 = lshr i32 %278, 24
  %280 = and i32 %279, 15
  %281 = icmp eq i32 %280, 15
  %282 = ptrtoint %"class.v8::internal::compiler::Node"* %276 to i64
  %283 = add i64 %282, 32
  br i1 %281, label %284, label %291

284:                                              ; preds = %271
  %285 = inttoptr i64 %283 to %"struct.v8::internal::compiler::Node::OutOfLineInputs"**
  %286 = load %"struct.v8::internal::compiler::Node::OutOfLineInputs"*, %"struct.v8::internal::compiler::Node::OutOfLineInputs"** %285, align 8
  %287 = ptrtoint %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %286 to i64
  %288 = add i64 %287, 16
  %289 = getelementptr inbounds %"struct.v8::internal::compiler::Node::OutOfLineInputs", %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %286, i64 0, i32 1
  %290 = load i32, i32* %289, align 8
  br label %291

291:                                              ; preds = %271, %284
  %292 = phi i32 [ %290, %284 ], [ %280, %271 ]
  %293 = phi i64 [ %288, %284 ], [ %283, %271 ]
  %294 = inttoptr i64 %293 to %"class.v8::internal::compiler::Node"**
  %295 = sext i32 %292 to i64
  %296 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %294, i64 %295
  %297 = icmp eq i32 %292, 0
  br i1 %297, label %298, label %302

298:                                              ; preds = %552, %291
  %299 = phi i64 [ %272, %291 ], [ %553, %552 ]
  %300 = load i8, i8* %268, align 8, !range !13
  %301 = icmp eq i8 %300, 0
  br i1 %301, label %556, label %837

302:                                              ; preds = %291, %552
  %303 = phi i64 [ %553, %552 ], [ %272, %291 ]
  %304 = phi %"class.v8::internal::compiler::Node"** [ %554, %552 ], [ %294, %291 ]
  %305 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %304, align 8
  %306 = ptrtoint %"class.v8::internal::compiler::Node"* %305 to i64
  %307 = icmp eq %"class.v8::internal::compiler::Node"* %305, null
  br i1 %307, label %552, label %308

308:                                              ; preds = %302
  %309 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %305, i64 0, i32 3
  %310 = load i32, i32* %309, align 4
  %311 = and i32 %310, 16777215
  %312 = zext i32 %311 to i64
  %313 = load i64*, i64** %10, align 8
  %314 = lshr i64 %312, 6
  %315 = getelementptr inbounds i64, i64* %313, i64 %314
  %316 = and i64 %312, 63
  %317 = shl i64 1, %316
  %318 = load i64, i64* %315, align 8
  %319 = and i64 %317, %318
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %552

321:                                              ; preds = %308
  %322 = or i64 %317, %318
  store i64 %322, i64* %315, align 8
  %323 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %18, align 8
  %324 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %20, align 8
  %325 = icmp eq %"class.v8::internal::compiler::Node"** %323, %324
  %326 = ptrtoint %"class.v8::internal::compiler::Node"** %324 to i64
  br i1 %325, label %331, label %327

327:                                              ; preds = %321
  %328 = bitcast %"class.v8::internal::compiler::Node"** %323 to i64*
  store i64 %306, i64* %328, align 8
  %329 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %323, i64 1
  %330 = ptrtoint %"class.v8::internal::compiler::Node"** %329 to i64
  store i64 %330, i64* %259, align 8
  br label %552

331:                                              ; preds = %321
  %332 = ptrtoint %"class.v8::internal::compiler::Node"** %323 to i64
  %333 = load i64, i64* %258, align 8
  %334 = sub i64 %332, %333
  %335 = ashr exact i64 %334, 3
  %336 = add nsw i64 %335, 1
  %337 = icmp ugt i64 %336, 268435455
  br i1 %337, label %338, label %340

338:                                              ; preds = %331
  %339 = bitcast %"class.v8::internal::compiler::AllNodes"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %339) #5
  unreachable

340:                                              ; preds = %331
  %341 = sub i64 %326, %333
  %342 = ashr exact i64 %341, 3
  %343 = icmp ult i64 %342, 134217727
  br i1 %343, label %344, label %349

344:                                              ; preds = %340
  %345 = ashr exact i64 %341, 2
  %346 = icmp ult i64 %345, %336
  %347 = select i1 %346, i64 %336, i64 %345
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %366, label %349

349:                                              ; preds = %344, %340
  %350 = phi i64 [ %347, %344 ], [ 268435455, %340 ]
  %351 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %267, align 8
  %352 = shl i64 %350, 3
  %353 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %351, i64 0, i32 2
  %354 = load i64, i64* %353, align 8
  %355 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %351, i64 0, i32 3
  %356 = load i64, i64* %355, align 8
  %357 = sub i64 %356, %354
  %358 = icmp ugt i64 %352, %357
  br i1 %358, label %359, label %361, !prof !2

359:                                              ; preds = %349
  %360 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %351, i64 %352) #4
  br label %363

361:                                              ; preds = %349
  %362 = add i64 %354, %352
  store i64 %362, i64* %353, align 8
  br label %363

363:                                              ; preds = %361, %359
  %364 = phi i64 [ %360, %359 ], [ %354, %361 ]
  %365 = inttoptr i64 %364 to %"class.v8::internal::compiler::Node"**
  br label %366

366:                                              ; preds = %363, %344
  %367 = phi i64 [ %350, %363 ], [ 0, %344 ]
  %368 = phi %"class.v8::internal::compiler::Node"** [ %365, %363 ], [ null, %344 ]
  %369 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %368, i64 %335
  %370 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %368, i64 %367
  %371 = ptrtoint %"class.v8::internal::compiler::Node"** %370 to i64
  %372 = bitcast %"class.v8::internal::compiler::Node"** %369 to i64*
  store i64 %306, i64* %372, align 8
  %373 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %369, i64 1
  %374 = ptrtoint %"class.v8::internal::compiler::Node"** %373 to i64
  %375 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %265, align 8
  %376 = ptrtoint %"class.v8::internal::compiler::Node"** %375 to i64
  %377 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %18, align 8
  %378 = icmp eq %"class.v8::internal::compiler::Node"** %377, %375
  br i1 %378, label %549, label %379

379:                                              ; preds = %366
  %380 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %377, i64 -1
  %381 = ptrtoint %"class.v8::internal::compiler::Node"** %380 to i64
  %382 = sub i64 %381, %376
  %383 = lshr i64 %382, 3
  %384 = add nuw nsw i64 %383, 1
  %385 = icmp ult i64 %384, 4
  br i1 %385, label %479, label %386

386:                                              ; preds = %379
  %387 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %368, i64 -1
  %388 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %377, i64 -1
  %389 = ptrtoint %"class.v8::internal::compiler::Node"** %388 to i64
  %390 = sub i64 %389, %376
  %391 = lshr i64 %390, 3
  %392 = sub nsw i64 %335, %391
  %393 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %387, i64 %392
  %394 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %377, i64 -1
  %395 = sub nsw i64 0, %391
  %396 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %394, i64 %395
  %397 = icmp ult %"class.v8::internal::compiler::Node"** %393, %377
  %398 = icmp ult %"class.v8::internal::compiler::Node"** %396, %369
  %399 = and i1 %397, %398
  br i1 %399, label %479, label %400

400:                                              ; preds = %386
  %401 = and i64 %384, 4611686018427387900
  %402 = sub nsw i64 0, %401
  %403 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %369, i64 %402
  %404 = sub nsw i64 0, %401
  %405 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %377, i64 %404
  %406 = add nsw i64 %401, -4
  %407 = lshr exact i64 %406, 2
  %408 = add nuw nsw i64 %407, 1
  %409 = and i64 %408, 1
  %410 = icmp eq i64 %406, 0
  br i1 %410, label %455, label %411

411:                                              ; preds = %400
  %412 = sub nuw nsw i64 %408, %409
  %413 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %369, i64 -1
  %414 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %377, i64 -1
  %415 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %369, i64 -1
  %416 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %377, i64 -1
  br label %417

417:                                              ; preds = %417, %411
  %418 = phi i64 [ 0, %411 ], [ %452, %417 ]
  %419 = phi i64 [ %412, %411 ], [ %453, %417 ]
  %420 = sub i64 0, %418
  %421 = sub i64 0, %418
  %422 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %413, i64 %420
  %423 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %414, i64 %421
  %424 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %423, i64 -1
  %425 = bitcast %"class.v8::internal::compiler::Node"** %424 to <2 x i64>*
  %426 = load <2 x i64>, <2 x i64>* %425, align 8, !alias.scope !14
  %427 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %423, i64 -2
  %428 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %427, i64 -1
  %429 = bitcast %"class.v8::internal::compiler::Node"** %428 to <2 x i64>*
  %430 = load <2 x i64>, <2 x i64>* %429, align 8, !alias.scope !14
  %431 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %422, i64 -1
  %432 = bitcast %"class.v8::internal::compiler::Node"** %431 to <2 x i64>*
  store <2 x i64> %426, <2 x i64>* %432, align 8, !alias.scope !17, !noalias !14
  %433 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %422, i64 -2
  %434 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %433, i64 -1
  %435 = bitcast %"class.v8::internal::compiler::Node"** %434 to <2 x i64>*
  store <2 x i64> %430, <2 x i64>* %435, align 8, !alias.scope !17, !noalias !14
  %436 = sub nuw nsw i64 -4, %418
  %437 = sub nuw nsw i64 -4, %418
  %438 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %415, i64 %436
  %439 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %416, i64 %437
  %440 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %439, i64 -1
  %441 = bitcast %"class.v8::internal::compiler::Node"** %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 8, !alias.scope !14
  %443 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %439, i64 -2
  %444 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %443, i64 -1
  %445 = bitcast %"class.v8::internal::compiler::Node"** %444 to <2 x i64>*
  %446 = load <2 x i64>, <2 x i64>* %445, align 8, !alias.scope !14
  %447 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %438, i64 -1
  %448 = bitcast %"class.v8::internal::compiler::Node"** %447 to <2 x i64>*
  store <2 x i64> %442, <2 x i64>* %448, align 8, !alias.scope !17, !noalias !14
  %449 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %438, i64 -2
  %450 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %449, i64 -1
  %451 = bitcast %"class.v8::internal::compiler::Node"** %450 to <2 x i64>*
  store <2 x i64> %446, <2 x i64>* %451, align 8, !alias.scope !17, !noalias !14
  %452 = add i64 %418, 8
  %453 = add i64 %419, -2
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %455, label %417, !llvm.loop !19

455:                                              ; preds = %417, %400
  %456 = phi i64 [ 0, %400 ], [ %452, %417 ]
  %457 = icmp eq i64 %409, 0
  br i1 %457, label %477, label %458

458:                                              ; preds = %455
  %459 = sub i64 0, %456
  %460 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %369, i64 -1
  %461 = sub i64 0, %456
  %462 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %377, i64 -1
  %463 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %460, i64 %459
  %464 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %462, i64 %461
  %465 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %464, i64 -1
  %466 = bitcast %"class.v8::internal::compiler::Node"** %465 to <2 x i64>*
  %467 = load <2 x i64>, <2 x i64>* %466, align 8, !alias.scope !14
  %468 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %464, i64 -2
  %469 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %468, i64 -1
  %470 = bitcast %"class.v8::internal::compiler::Node"** %469 to <2 x i64>*
  %471 = load <2 x i64>, <2 x i64>* %470, align 8, !alias.scope !14
  %472 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %463, i64 -1
  %473 = bitcast %"class.v8::internal::compiler::Node"** %472 to <2 x i64>*
  store <2 x i64> %467, <2 x i64>* %473, align 8, !alias.scope !17, !noalias !14
  %474 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %463, i64 -2
  %475 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %474, i64 -1
  %476 = bitcast %"class.v8::internal::compiler::Node"** %475 to <2 x i64>*
  store <2 x i64> %471, <2 x i64>* %476, align 8, !alias.scope !17, !noalias !14
  br label %477

477:                                              ; preds = %455, %458
  %478 = icmp eq i64 %384, %401
  br i1 %478, label %549, label %479

479:                                              ; preds = %477, %386, %379
  %480 = phi %"class.v8::internal::compiler::Node"** [ %369, %386 ], [ %369, %379 ], [ %403, %477 ]
  %481 = phi %"class.v8::internal::compiler::Node"** [ %377, %386 ], [ %377, %379 ], [ %405, %477 ]
  %482 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %481, i64 -1
  %483 = ptrtoint %"class.v8::internal::compiler::Node"** %482 to i64
  %484 = sub i64 %483, %376
  %485 = lshr i64 %484, 3
  %486 = add nuw nsw i64 %485, 1
  %487 = and i64 %486, 7
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %500, label %489

489:                                              ; preds = %479, %489
  %490 = phi %"class.v8::internal::compiler::Node"** [ %493, %489 ], [ %480, %479 ]
  %491 = phi %"class.v8::internal::compiler::Node"** [ %494, %489 ], [ %481, %479 ]
  %492 = phi i64 [ %498, %489 ], [ %487, %479 ]
  %493 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %490, i64 -1
  %494 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %491, i64 -1
  %495 = bitcast %"class.v8::internal::compiler::Node"** %494 to i64*
  %496 = load i64, i64* %495, align 8
  %497 = bitcast %"class.v8::internal::compiler::Node"** %493 to i64*
  store i64 %496, i64* %497, align 8
  %498 = add i64 %492, -1
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %500, label %489, !llvm.loop !20

500:                                              ; preds = %489, %479
  %501 = phi %"class.v8::internal::compiler::Node"** [ undef, %479 ], [ %493, %489 ]
  %502 = phi %"class.v8::internal::compiler::Node"** [ %480, %479 ], [ %493, %489 ]
  %503 = phi %"class.v8::internal::compiler::Node"** [ %481, %479 ], [ %494, %489 ]
  %504 = icmp ult i64 %484, 56
  br i1 %504, label %549, label %505

505:                                              ; preds = %500, %505
  %506 = phi %"class.v8::internal::compiler::Node"** [ %543, %505 ], [ %502, %500 ]
  %507 = phi %"class.v8::internal::compiler::Node"** [ %544, %505 ], [ %503, %500 ]
  %508 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %506, i64 -1
  %509 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %507, i64 -1
  %510 = bitcast %"class.v8::internal::compiler::Node"** %509 to i64*
  %511 = load i64, i64* %510, align 8
  %512 = bitcast %"class.v8::internal::compiler::Node"** %508 to i64*
  store i64 %511, i64* %512, align 8
  %513 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %506, i64 -2
  %514 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %507, i64 -2
  %515 = bitcast %"class.v8::internal::compiler::Node"** %514 to i64*
  %516 = load i64, i64* %515, align 8
  %517 = bitcast %"class.v8::internal::compiler::Node"** %513 to i64*
  store i64 %516, i64* %517, align 8
  %518 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %506, i64 -3
  %519 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %507, i64 -3
  %520 = bitcast %"class.v8::internal::compiler::Node"** %519 to i64*
  %521 = load i64, i64* %520, align 8
  %522 = bitcast %"class.v8::internal::compiler::Node"** %518 to i64*
  store i64 %521, i64* %522, align 8
  %523 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %506, i64 -4
  %524 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %507, i64 -4
  %525 = bitcast %"class.v8::internal::compiler::Node"** %524 to i64*
  %526 = load i64, i64* %525, align 8
  %527 = bitcast %"class.v8::internal::compiler::Node"** %523 to i64*
  store i64 %526, i64* %527, align 8
  %528 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %506, i64 -5
  %529 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %507, i64 -5
  %530 = bitcast %"class.v8::internal::compiler::Node"** %529 to i64*
  %531 = load i64, i64* %530, align 8
  %532 = bitcast %"class.v8::internal::compiler::Node"** %528 to i64*
  store i64 %531, i64* %532, align 8
  %533 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %506, i64 -6
  %534 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %507, i64 -6
  %535 = bitcast %"class.v8::internal::compiler::Node"** %534 to i64*
  %536 = load i64, i64* %535, align 8
  %537 = bitcast %"class.v8::internal::compiler::Node"** %533 to i64*
  store i64 %536, i64* %537, align 8
  %538 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %506, i64 -7
  %539 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %507, i64 -7
  %540 = bitcast %"class.v8::internal::compiler::Node"** %539 to i64*
  %541 = load i64, i64* %540, align 8
  %542 = bitcast %"class.v8::internal::compiler::Node"** %538 to i64*
  store i64 %541, i64* %542, align 8
  %543 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %506, i64 -8
  %544 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %507, i64 -8
  %545 = bitcast %"class.v8::internal::compiler::Node"** %544 to i64*
  %546 = load i64, i64* %545, align 8
  %547 = bitcast %"class.v8::internal::compiler::Node"** %543 to i64*
  store i64 %546, i64* %547, align 8
  %548 = icmp eq %"class.v8::internal::compiler::Node"** %544, %375
  br i1 %548, label %549, label %505, !llvm.loop !21

549:                                              ; preds = %500, %505, %477, %366
  %550 = phi %"class.v8::internal::compiler::Node"** [ %369, %366 ], [ %403, %477 ], [ %501, %500 ], [ %543, %505 ]
  %551 = ptrtoint %"class.v8::internal::compiler::Node"** %550 to i64
  store i64 %551, i64* %258, align 8
  store i64 %374, i64* %259, align 8
  store i64 %371, i64* %266, align 8
  br label %552

552:                                              ; preds = %308, %549, %327, %302
  %553 = phi i64 [ %303, %308 ], [ %374, %549 ], [ %330, %327 ], [ %303, %302 ]
  %554 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %304, i64 1
  %555 = icmp eq %"class.v8::internal::compiler::Node"** %554, %296
  br i1 %555, label %298, label %302

556:                                              ; preds = %298
  %557 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %265, align 8
  %558 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %557, i64 %274
  %559 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %558, align 8
  %560 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %559, i64 0, i32 4
  %561 = bitcast %"struct.v8::internal::compiler::Node::Use"** %560 to i64*
  %562 = load i64, i64* %561, align 8
  %563 = icmp eq i64 %562, 0
  br i1 %563, label %837, label %564

564:                                              ; preds = %556, %832
  %565 = phi i64 [ %833, %832 ], [ %299, %556 ]
  %566 = phi i64 [ %835, %832 ], [ %562, %556 ]
  %567 = inttoptr i64 %566 to %"struct.v8::internal::compiler::Node::Use"*
  %568 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %567, i64 1
  %569 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %567, i64 0, i32 2
  %570 = load i32, i32* %569, align 8
  %571 = lshr i32 %570, 1
  %572 = zext i32 %571 to i64
  %573 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %568, i64 %572
  %574 = and i32 %570, 1
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %578, label %576

576:                                              ; preds = %564
  %577 = bitcast %"struct.v8::internal::compiler::Node::Use"* %573 to %"class.v8::internal::compiler::Node"*
  br label %581

578:                                              ; preds = %564
  %579 = bitcast %"struct.v8::internal::compiler::Node::Use"* %573 to %"class.v8::internal::compiler::Node"**
  %580 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %579, align 8
  br label %581

581:                                              ; preds = %576, %578
  %582 = phi %"class.v8::internal::compiler::Node"* [ %577, %576 ], [ %580, %578 ]
  %583 = ptrtoint %"class.v8::internal::compiler::Node"* %582 to i64
  %584 = icmp eq %"class.v8::internal::compiler::Node"* %582, null
  br i1 %584, label %832, label %585

585:                                              ; preds = %581
  %586 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %582, i64 0, i32 3
  %587 = load i32, i32* %586, align 4
  %588 = and i32 %587, 16777215
  %589 = zext i32 %588 to i64
  %590 = load i32, i32* %269, align 4
  %591 = icmp ugt i32 %590, %588
  br i1 %591, label %592, label %832

592:                                              ; preds = %585
  %593 = load i64*, i64** %10, align 8
  %594 = lshr i64 %589, 6
  %595 = getelementptr inbounds i64, i64* %593, i64 %594
  %596 = and i64 %589, 63
  %597 = shl i64 1, %596
  %598 = load i64, i64* %595, align 8
  %599 = and i64 %598, %597
  %600 = icmp eq i64 %599, 0
  br i1 %600, label %601, label %832

601:                                              ; preds = %592
  %602 = or i64 %598, %597
  store i64 %602, i64* %595, align 8
  %603 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %18, align 8
  %604 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %20, align 8
  %605 = icmp eq %"class.v8::internal::compiler::Node"** %603, %604
  %606 = ptrtoint %"class.v8::internal::compiler::Node"** %604 to i64
  br i1 %605, label %611, label %607

607:                                              ; preds = %601
  %608 = bitcast %"class.v8::internal::compiler::Node"** %603 to i64*
  store i64 %583, i64* %608, align 8
  %609 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %603, i64 1
  %610 = ptrtoint %"class.v8::internal::compiler::Node"** %609 to i64
  store i64 %610, i64* %259, align 8
  br label %832

611:                                              ; preds = %601
  %612 = ptrtoint %"class.v8::internal::compiler::Node"** %603 to i64
  %613 = load i64, i64* %258, align 8
  %614 = sub i64 %612, %613
  %615 = ashr exact i64 %614, 3
  %616 = add nsw i64 %615, 1
  %617 = icmp ugt i64 %616, 268435455
  br i1 %617, label %618, label %620

618:                                              ; preds = %611
  %619 = bitcast %"class.v8::internal::compiler::AllNodes"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %619) #5
  unreachable

620:                                              ; preds = %611
  %621 = sub i64 %606, %613
  %622 = ashr exact i64 %621, 3
  %623 = icmp ult i64 %622, 134217727
  br i1 %623, label %624, label %629

624:                                              ; preds = %620
  %625 = ashr exact i64 %621, 2
  %626 = icmp ult i64 %625, %616
  %627 = select i1 %626, i64 %616, i64 %625
  %628 = icmp eq i64 %627, 0
  br i1 %628, label %646, label %629

629:                                              ; preds = %624, %620
  %630 = phi i64 [ %627, %624 ], [ 268435455, %620 ]
  %631 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %267, align 8
  %632 = shl i64 %630, 3
  %633 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %631, i64 0, i32 2
  %634 = load i64, i64* %633, align 8
  %635 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %631, i64 0, i32 3
  %636 = load i64, i64* %635, align 8
  %637 = sub i64 %636, %634
  %638 = icmp ugt i64 %632, %637
  br i1 %638, label %639, label %641, !prof !2

639:                                              ; preds = %629
  %640 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %631, i64 %632) #4
  br label %643

641:                                              ; preds = %629
  %642 = add i64 %634, %632
  store i64 %642, i64* %633, align 8
  br label %643

643:                                              ; preds = %641, %639
  %644 = phi i64 [ %640, %639 ], [ %634, %641 ]
  %645 = inttoptr i64 %644 to %"class.v8::internal::compiler::Node"**
  br label %646

646:                                              ; preds = %643, %624
  %647 = phi i64 [ %630, %643 ], [ 0, %624 ]
  %648 = phi %"class.v8::internal::compiler::Node"** [ %645, %643 ], [ null, %624 ]
  %649 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %648, i64 %615
  %650 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %648, i64 %647
  %651 = ptrtoint %"class.v8::internal::compiler::Node"** %650 to i64
  %652 = bitcast %"class.v8::internal::compiler::Node"** %649 to i64*
  store i64 %583, i64* %652, align 8
  %653 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %649, i64 1
  %654 = ptrtoint %"class.v8::internal::compiler::Node"** %653 to i64
  %655 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %265, align 8
  %656 = ptrtoint %"class.v8::internal::compiler::Node"** %655 to i64
  %657 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %18, align 8
  %658 = icmp eq %"class.v8::internal::compiler::Node"** %657, %655
  br i1 %658, label %829, label %659

659:                                              ; preds = %646
  %660 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %657, i64 -1
  %661 = ptrtoint %"class.v8::internal::compiler::Node"** %660 to i64
  %662 = sub i64 %661, %656
  %663 = lshr i64 %662, 3
  %664 = add nuw nsw i64 %663, 1
  %665 = icmp ult i64 %664, 4
  br i1 %665, label %759, label %666

666:                                              ; preds = %659
  %667 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %648, i64 -1
  %668 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %657, i64 -1
  %669 = ptrtoint %"class.v8::internal::compiler::Node"** %668 to i64
  %670 = sub i64 %669, %656
  %671 = lshr i64 %670, 3
  %672 = sub nsw i64 %615, %671
  %673 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %667, i64 %672
  %674 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %657, i64 -1
  %675 = sub nsw i64 0, %671
  %676 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %674, i64 %675
  %677 = icmp ult %"class.v8::internal::compiler::Node"** %673, %657
  %678 = icmp ult %"class.v8::internal::compiler::Node"** %676, %649
  %679 = and i1 %677, %678
  br i1 %679, label %759, label %680

680:                                              ; preds = %666
  %681 = and i64 %664, 4611686018427387900
  %682 = sub nsw i64 0, %681
  %683 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %649, i64 %682
  %684 = sub nsw i64 0, %681
  %685 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %657, i64 %684
  %686 = add nsw i64 %681, -4
  %687 = lshr exact i64 %686, 2
  %688 = add nuw nsw i64 %687, 1
  %689 = and i64 %688, 1
  %690 = icmp eq i64 %686, 0
  br i1 %690, label %735, label %691

691:                                              ; preds = %680
  %692 = sub nuw nsw i64 %688, %689
  %693 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %649, i64 -1
  %694 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %657, i64 -1
  %695 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %649, i64 -1
  %696 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %657, i64 -1
  br label %697

697:                                              ; preds = %697, %691
  %698 = phi i64 [ 0, %691 ], [ %732, %697 ]
  %699 = phi i64 [ %692, %691 ], [ %733, %697 ]
  %700 = sub i64 0, %698
  %701 = sub i64 0, %698
  %702 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %693, i64 %700
  %703 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %694, i64 %701
  %704 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %703, i64 -1
  %705 = bitcast %"class.v8::internal::compiler::Node"** %704 to <2 x i64>*
  %706 = load <2 x i64>, <2 x i64>* %705, align 8, !alias.scope !22
  %707 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %703, i64 -2
  %708 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %707, i64 -1
  %709 = bitcast %"class.v8::internal::compiler::Node"** %708 to <2 x i64>*
  %710 = load <2 x i64>, <2 x i64>* %709, align 8, !alias.scope !22
  %711 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %702, i64 -1
  %712 = bitcast %"class.v8::internal::compiler::Node"** %711 to <2 x i64>*
  store <2 x i64> %706, <2 x i64>* %712, align 8, !alias.scope !25, !noalias !22
  %713 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %702, i64 -2
  %714 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %713, i64 -1
  %715 = bitcast %"class.v8::internal::compiler::Node"** %714 to <2 x i64>*
  store <2 x i64> %710, <2 x i64>* %715, align 8, !alias.scope !25, !noalias !22
  %716 = sub nuw nsw i64 -4, %698
  %717 = sub nuw nsw i64 -4, %698
  %718 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %695, i64 %716
  %719 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %696, i64 %717
  %720 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %719, i64 -1
  %721 = bitcast %"class.v8::internal::compiler::Node"** %720 to <2 x i64>*
  %722 = load <2 x i64>, <2 x i64>* %721, align 8, !alias.scope !22
  %723 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %719, i64 -2
  %724 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %723, i64 -1
  %725 = bitcast %"class.v8::internal::compiler::Node"** %724 to <2 x i64>*
  %726 = load <2 x i64>, <2 x i64>* %725, align 8, !alias.scope !22
  %727 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %718, i64 -1
  %728 = bitcast %"class.v8::internal::compiler::Node"** %727 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %728, align 8, !alias.scope !25, !noalias !22
  %729 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %718, i64 -2
  %730 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %729, i64 -1
  %731 = bitcast %"class.v8::internal::compiler::Node"** %730 to <2 x i64>*
  store <2 x i64> %726, <2 x i64>* %731, align 8, !alias.scope !25, !noalias !22
  %732 = add i64 %698, 8
  %733 = add i64 %699, -2
  %734 = icmp eq i64 %733, 0
  br i1 %734, label %735, label %697, !llvm.loop !27

735:                                              ; preds = %697, %680
  %736 = phi i64 [ 0, %680 ], [ %732, %697 ]
  %737 = icmp eq i64 %689, 0
  br i1 %737, label %757, label %738

738:                                              ; preds = %735
  %739 = sub i64 0, %736
  %740 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %649, i64 -1
  %741 = sub i64 0, %736
  %742 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %657, i64 -1
  %743 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %740, i64 %739
  %744 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %742, i64 %741
  %745 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %744, i64 -1
  %746 = bitcast %"class.v8::internal::compiler::Node"** %745 to <2 x i64>*
  %747 = load <2 x i64>, <2 x i64>* %746, align 8, !alias.scope !22
  %748 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %744, i64 -2
  %749 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %748, i64 -1
  %750 = bitcast %"class.v8::internal::compiler::Node"** %749 to <2 x i64>*
  %751 = load <2 x i64>, <2 x i64>* %750, align 8, !alias.scope !22
  %752 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %743, i64 -1
  %753 = bitcast %"class.v8::internal::compiler::Node"** %752 to <2 x i64>*
  store <2 x i64> %747, <2 x i64>* %753, align 8, !alias.scope !25, !noalias !22
  %754 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %743, i64 -2
  %755 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %754, i64 -1
  %756 = bitcast %"class.v8::internal::compiler::Node"** %755 to <2 x i64>*
  store <2 x i64> %751, <2 x i64>* %756, align 8, !alias.scope !25, !noalias !22
  br label %757

757:                                              ; preds = %735, %738
  %758 = icmp eq i64 %664, %681
  br i1 %758, label %829, label %759

759:                                              ; preds = %757, %666, %659
  %760 = phi %"class.v8::internal::compiler::Node"** [ %649, %666 ], [ %649, %659 ], [ %683, %757 ]
  %761 = phi %"class.v8::internal::compiler::Node"** [ %657, %666 ], [ %657, %659 ], [ %685, %757 ]
  %762 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %761, i64 -1
  %763 = ptrtoint %"class.v8::internal::compiler::Node"** %762 to i64
  %764 = sub i64 %763, %656
  %765 = lshr i64 %764, 3
  %766 = add nuw nsw i64 %765, 1
  %767 = and i64 %766, 7
  %768 = icmp eq i64 %767, 0
  br i1 %768, label %780, label %769

769:                                              ; preds = %759, %769
  %770 = phi %"class.v8::internal::compiler::Node"** [ %773, %769 ], [ %760, %759 ]
  %771 = phi %"class.v8::internal::compiler::Node"** [ %774, %769 ], [ %761, %759 ]
  %772 = phi i64 [ %778, %769 ], [ %767, %759 ]
  %773 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %770, i64 -1
  %774 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %771, i64 -1
  %775 = bitcast %"class.v8::internal::compiler::Node"** %774 to i64*
  %776 = load i64, i64* %775, align 8
  %777 = bitcast %"class.v8::internal::compiler::Node"** %773 to i64*
  store i64 %776, i64* %777, align 8
  %778 = add i64 %772, -1
  %779 = icmp eq i64 %778, 0
  br i1 %779, label %780, label %769, !llvm.loop !28

780:                                              ; preds = %769, %759
  %781 = phi %"class.v8::internal::compiler::Node"** [ undef, %759 ], [ %773, %769 ]
  %782 = phi %"class.v8::internal::compiler::Node"** [ %760, %759 ], [ %773, %769 ]
  %783 = phi %"class.v8::internal::compiler::Node"** [ %761, %759 ], [ %774, %769 ]
  %784 = icmp ult i64 %764, 56
  br i1 %784, label %829, label %785

785:                                              ; preds = %780, %785
  %786 = phi %"class.v8::internal::compiler::Node"** [ %823, %785 ], [ %782, %780 ]
  %787 = phi %"class.v8::internal::compiler::Node"** [ %824, %785 ], [ %783, %780 ]
  %788 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %786, i64 -1
  %789 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %787, i64 -1
  %790 = bitcast %"class.v8::internal::compiler::Node"** %789 to i64*
  %791 = load i64, i64* %790, align 8
  %792 = bitcast %"class.v8::internal::compiler::Node"** %788 to i64*
  store i64 %791, i64* %792, align 8
  %793 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %786, i64 -2
  %794 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %787, i64 -2
  %795 = bitcast %"class.v8::internal::compiler::Node"** %794 to i64*
  %796 = load i64, i64* %795, align 8
  %797 = bitcast %"class.v8::internal::compiler::Node"** %793 to i64*
  store i64 %796, i64* %797, align 8
  %798 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %786, i64 -3
  %799 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %787, i64 -3
  %800 = bitcast %"class.v8::internal::compiler::Node"** %799 to i64*
  %801 = load i64, i64* %800, align 8
  %802 = bitcast %"class.v8::internal::compiler::Node"** %798 to i64*
  store i64 %801, i64* %802, align 8
  %803 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %786, i64 -4
  %804 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %787, i64 -4
  %805 = bitcast %"class.v8::internal::compiler::Node"** %804 to i64*
  %806 = load i64, i64* %805, align 8
  %807 = bitcast %"class.v8::internal::compiler::Node"** %803 to i64*
  store i64 %806, i64* %807, align 8
  %808 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %786, i64 -5
  %809 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %787, i64 -5
  %810 = bitcast %"class.v8::internal::compiler::Node"** %809 to i64*
  %811 = load i64, i64* %810, align 8
  %812 = bitcast %"class.v8::internal::compiler::Node"** %808 to i64*
  store i64 %811, i64* %812, align 8
  %813 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %786, i64 -6
  %814 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %787, i64 -6
  %815 = bitcast %"class.v8::internal::compiler::Node"** %814 to i64*
  %816 = load i64, i64* %815, align 8
  %817 = bitcast %"class.v8::internal::compiler::Node"** %813 to i64*
  store i64 %816, i64* %817, align 8
  %818 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %786, i64 -7
  %819 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %787, i64 -7
  %820 = bitcast %"class.v8::internal::compiler::Node"** %819 to i64*
  %821 = load i64, i64* %820, align 8
  %822 = bitcast %"class.v8::internal::compiler::Node"** %818 to i64*
  store i64 %821, i64* %822, align 8
  %823 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %786, i64 -8
  %824 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %787, i64 -8
  %825 = bitcast %"class.v8::internal::compiler::Node"** %824 to i64*
  %826 = load i64, i64* %825, align 8
  %827 = bitcast %"class.v8::internal::compiler::Node"** %823 to i64*
  store i64 %826, i64* %827, align 8
  %828 = icmp eq %"class.v8::internal::compiler::Node"** %824, %655
  br i1 %828, label %829, label %785, !llvm.loop !29

829:                                              ; preds = %780, %785, %757, %646
  %830 = phi %"class.v8::internal::compiler::Node"** [ %649, %646 ], [ %683, %757 ], [ %781, %780 ], [ %823, %785 ]
  %831 = ptrtoint %"class.v8::internal::compiler::Node"** %830 to i64
  store i64 %831, i64* %258, align 8
  store i64 %654, i64* %259, align 8
  store i64 %651, i64* %266, align 8
  br label %832

832:                                              ; preds = %592, %829, %607, %581, %585
  %833 = phi i64 [ %565, %592 ], [ %654, %829 ], [ %610, %607 ], [ %565, %581 ], [ %565, %585 ]
  %834 = inttoptr i64 %566 to i64*
  %835 = load i64, i64* %834, align 8
  %836 = icmp eq i64 %835, 0
  br i1 %836, label %837, label %564

837:                                              ; preds = %832, %556, %298
  %838 = phi i64 [ %299, %556 ], [ %299, %298 ], [ %833, %832 ]
  %839 = add nuw i64 %274, 1
  %840 = load i64, i64* %258, align 8
  %841 = sub i64 %838, %840
  %842 = ashr exact i64 %841, 3
  %843 = icmp ult i64 %839, %842
  %844 = inttoptr i64 %840 to %"class.v8::internal::compiler::Node"**
  br i1 %843, label %271, label %270
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler8AllNodesC2EPNS0_4ZoneEPNS1_4NodeEPKNS1_5GraphEb(%"class.v8::internal::compiler::AllNodes"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Graph"* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %6 = alloca i8, align 1
  %7 = alloca %"class.v8::internal::ZoneAllocator.24", align 8
  %8 = zext i1 %4 to i8
  %9 = ptrtoint %"class.v8::internal::Zone"* %1 to i64
  %10 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %11 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %10 to i64*
  %12 = bitcast %"class.v8::internal::compiler::AllNodes"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #4
  store i64 %9, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %3, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6)
  store i8 0, i8* %6, align 1
  %16 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 1, i32 0
  %17 = bitcast %"class.v8::internal::ZoneAllocator.24"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #4
  %18 = getelementptr inbounds %"class.v8::internal::ZoneAllocator.24", %"class.v8::internal::ZoneAllocator.24"* %7, i64 0, i32 0
  store %"class.v8::internal::Zone"* %1, %"class.v8::internal::Zone"** %18, align 8
  call void @_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEEC2EmRKbRKS4_(%"class.std::__1::vector.12"* %16, i64 %15, i8* nonnull dereferenceable(1) %6, %"class.v8::internal::ZoneAllocator.24"* nonnull dereferenceable(8) %7) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6)
  %19 = getelementptr inbounds %"class.v8::internal::compiler::AllNodes", %"class.v8::internal::compiler::AllNodes"* %0, i64 0, i32 2
  store i8 %8, i8* %19, align 8
  call void @_ZN2v88internal8compiler8AllNodes4MarkEPNS0_4ZoneEPNS1_4NodeEPKNS1_5GraphE(%"class.v8::internal::compiler::AllNodes"* %0, %"class.v8::internal::Zone"* undef, %"class.v8::internal::compiler::Node"* %2, %"class.v8::internal::compiler::Graph"* %3)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEEC2EmRKbRKS4_(%"class.std::__1::vector.12"*, i64, i8* dereferenceable(1), %"class.v8::internal::ZoneAllocator.24"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 1
  %7 = bitcast %"class.v8::internal::ZoneAllocator.24"* %3 to i64*
  %8 = bitcast %"class.std::__1::vector.12"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  %9 = load i64, i64* %7, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 2, i32 0, i32 0
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 2, i32 1
  %12 = bitcast %"struct.std::__1::__compressed_pair_elem.15"* %11 to i64*
  store i64 %9, i64* %12, align 8
  %13 = icmp eq i64 %1, 0
  %14 = inttoptr i64 %9 to %"class.v8::internal::Zone"*
  br i1 %13, label %68, label %15

15:                                               ; preds = %4
  %16 = icmp ugt i64 %1, 17179869120
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = bitcast %"class.std::__1::vector.12"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %18) #5
  unreachable

19:                                               ; preds = %15
  %20 = add nsw i64 %1, -1
  %21 = lshr i64 %20, 6
  %22 = add nuw nsw i64 %21, 1
  %23 = shl nuw nsw i64 %22, 3
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %14, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %14, i64 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %25
  %29 = icmp ugt i64 %23, %28
  br i1 %29, label %30, label %32, !prof !2

30:                                               ; preds = %19
  %31 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %14, i64 %23) #4
  br label %34

32:                                               ; preds = %19
  %33 = add i64 %25, %23
  store i64 %33, i64* %24, align 8
  br label %34

34:                                               ; preds = %32, %30
  %35 = phi i64 [ %31, %30 ], [ %25, %32 ]
  %36 = inttoptr i64 %35 to i64*
  store i64* %36, i64** %5, align 8
  store i64 0, i64* %6, align 8
  store i64 %22, i64* %10, align 8
  %37 = load i8, i8* %2, align 1, !range !13
  %38 = icmp eq i8 %37, 0
  store i64 %1, i64* %6, align 8
  %39 = icmp ult i64 %1, 65
  %40 = getelementptr inbounds i64, i64* %36, i64 %21
  %41 = select i1 %39, i64* %36, i64* %40
  store i64 0, i64* %41, align 8
  %42 = bitcast %"class.std::__1::vector.12"* %0 to i64*
  %43 = load i64, i64* %42, align 8, !noalias !30
  %44 = inttoptr i64 %43 to i8*
  %45 = lshr i64 %1, 6
  %46 = shl nuw nsw i64 %45, 3
  br i1 %38, label %57, label %47

47:                                               ; preds = %34
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 -1, i64 %46, i1 false) #4
  %48 = and i64 %1, 63
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %68, label %50

50:                                               ; preds = %47
  %51 = inttoptr i64 %43 to i64*
  %52 = getelementptr inbounds i64, i64* %51, i64 %45
  %53 = sub nuw nsw i64 64, %48
  %54 = lshr i64 -1, %53
  %55 = load i64, i64* %52, align 8
  %56 = or i64 %55, %54
  store i64 %56, i64* %52, align 8
  br label %68

57:                                               ; preds = %34
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 %46, i1 false) #4
  %58 = and i64 %1, 63
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %57
  %61 = inttoptr i64 %43 to i64*
  %62 = getelementptr inbounds i64, i64* %61, i64 %45
  %63 = sub nuw nsw i64 64, %58
  %64 = lshr i64 -1, %63
  %65 = xor i64 %64, -1
  %66 = load i64, i64* %62, align 8
  %67 = and i64 %66, %65
  store i64 %67, i64* %62, align 8
  br label %68

68:                                               ; preds = %60, %57, %50, %47, %4
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{i8 0, i8 2}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !9}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !9}
!28 = distinct !{!28, !11}
!29 = distinct !{!29, !9}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEE11__make_iterEm: argument 0"}
!32 = distinct !{!32, !"_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEE11__make_iterEm"}
