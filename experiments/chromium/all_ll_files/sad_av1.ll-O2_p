; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/sad_av1.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/sad_av1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad128x128_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %94

13:                                               ; preds = %8, %81
  %14 = phi i8* [ %88, %81 ], [ %0, %8 ]
  %15 = phi i32 [ %87, %81 ], [ 0, %8 ]
  %16 = phi i32 [ %92, %81 ], [ 0, %8 ]
  %17 = phi i8* [ %89, %81 ], [ %2, %8 ]
  %18 = phi i8* [ %90, %81 ], [ %4, %8 ]
  %19 = phi i8* [ %91, %81 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  br label %21

21:                                               ; preds = %21, %13
  %22 = phi i64 [ 0, %13 ], [ %79, %21 ]
  %23 = phi <4 x i32> [ %20, %13 ], [ %77, %21 ]
  %24 = phi <4 x i32> [ zeroinitializer, %13 ], [ %78, %21 ]
  %25 = getelementptr inbounds i8, i8* %19, i64 %22
  %26 = bitcast i8* %25 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = getelementptr inbounds i8, i8* %25, i64 4
  %29 = bitcast i8* %28 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %27 to <4 x i32>
  %32 = zext <4 x i8> %30 to <4 x i32>
  %33 = getelementptr inbounds i8, i8* %17, i64 %22
  %34 = bitcast i8* %33 to <4 x i8>*
  %35 = load <4 x i8>, <4 x i8>* %34, align 1
  %36 = getelementptr inbounds i8, i8* %33, i64 4
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %35 to <4 x i32>
  %40 = zext <4 x i8> %38 to <4 x i32>
  %41 = mul nuw nsw <4 x i32> %39, %31
  %42 = mul nuw nsw <4 x i32> %40, %32
  %43 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %31
  %44 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %32
  %45 = getelementptr inbounds i8, i8* %18, i64 %22
  %46 = bitcast i8* %45 to <4 x i8>*
  %47 = load <4 x i8>, <4 x i8>* %46, align 1
  %48 = getelementptr inbounds i8, i8* %45, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %47 to <4 x i32>
  %52 = zext <4 x i8> %50 to <4 x i32>
  %53 = mul nsw <4 x i32> %43, %51
  %54 = mul nsw <4 x i32> %44, %52
  %55 = add nuw nsw <4 x i32> %41, <i32 32, i32 32, i32 32, i32 32>
  %56 = add nuw nsw <4 x i32> %42, <i32 32, i32 32, i32 32, i32 32>
  %57 = add nsw <4 x i32> %55, %53
  %58 = add nsw <4 x i32> %56, %54
  %59 = ashr <4 x i32> %57, <i32 6, i32 6, i32 6, i32 6>
  %60 = ashr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %61 = getelementptr inbounds i8, i8* %14, i64 %22
  %62 = bitcast i8* %61 to <4 x i8>*
  %63 = load <4 x i8>, <4 x i8>* %62, align 1
  %64 = getelementptr inbounds i8, i8* %61, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %63 to <4 x i32>
  %68 = zext <4 x i8> %66 to <4 x i32>
  %69 = sub nsw <4 x i32> %59, %67
  %70 = sub nsw <4 x i32> %60, %68
  %71 = icmp slt <4 x i32> %69, zeroinitializer
  %72 = icmp slt <4 x i32> %70, zeroinitializer
  %73 = sub nsw <4 x i32> zeroinitializer, %69
  %74 = sub nsw <4 x i32> zeroinitializer, %70
  %75 = select <4 x i1> %71, <4 x i32> %73, <4 x i32> %69
  %76 = select <4 x i1> %72, <4 x i32> %74, <4 x i32> %70
  %77 = add <4 x i32> %75, %23
  %78 = add <4 x i32> %76, %24
  %79 = add i64 %22, 8
  %80 = icmp eq i64 %79, 128
  br i1 %80, label %81, label %21, !llvm.loop !2

81:                                               ; preds = %21
  %82 = add <4 x i32> %78, %77
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %84 = add <4 x i32> %82, %83
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = getelementptr inbounds i8, i8* %14, i64 %10
  %89 = getelementptr inbounds i8, i8* %17, i64 %11
  %90 = getelementptr inbounds i8, i8* %18, i64 128
  %91 = getelementptr inbounds i8, i8* %19, i64 %12
  %92 = add nuw nsw i32 %16, 1
  %93 = icmp eq i32 %92, 128
  br i1 %93, label %175, label %13

94:                                               ; preds = %8, %162
  %95 = phi i8* [ %169, %162 ], [ %0, %8 ]
  %96 = phi i32 [ %168, %162 ], [ 0, %8 ]
  %97 = phi i32 [ %173, %162 ], [ 0, %8 ]
  %98 = phi i8* [ %170, %162 ], [ %4, %8 ]
  %99 = phi i8* [ %171, %162 ], [ %2, %8 ]
  %100 = phi i8* [ %172, %162 ], [ %5, %8 ]
  %101 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %96, i32 0
  br label %102

102:                                              ; preds = %102, %94
  %103 = phi i64 [ 0, %94 ], [ %160, %102 ]
  %104 = phi <4 x i32> [ %101, %94 ], [ %158, %102 ]
  %105 = phi <4 x i32> [ zeroinitializer, %94 ], [ %159, %102 ]
  %106 = getelementptr inbounds i8, i8* %100, i64 %103
  %107 = bitcast i8* %106 to <4 x i8>*
  %108 = load <4 x i8>, <4 x i8>* %107, align 1
  %109 = getelementptr inbounds i8, i8* %106, i64 4
  %110 = bitcast i8* %109 to <4 x i8>*
  %111 = load <4 x i8>, <4 x i8>* %110, align 1
  %112 = zext <4 x i8> %108 to <4 x i32>
  %113 = zext <4 x i8> %111 to <4 x i32>
  %114 = getelementptr inbounds i8, i8* %98, i64 %103
  %115 = bitcast i8* %114 to <4 x i8>*
  %116 = load <4 x i8>, <4 x i8>* %115, align 1
  %117 = getelementptr inbounds i8, i8* %114, i64 4
  %118 = bitcast i8* %117 to <4 x i8>*
  %119 = load <4 x i8>, <4 x i8>* %118, align 1
  %120 = zext <4 x i8> %116 to <4 x i32>
  %121 = zext <4 x i8> %119 to <4 x i32>
  %122 = mul nuw nsw <4 x i32> %120, %112
  %123 = mul nuw nsw <4 x i32> %121, %113
  %124 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %112
  %125 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %113
  %126 = getelementptr inbounds i8, i8* %99, i64 %103
  %127 = bitcast i8* %126 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1
  %129 = getelementptr inbounds i8, i8* %126, i64 4
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1
  %132 = zext <4 x i8> %128 to <4 x i32>
  %133 = zext <4 x i8> %131 to <4 x i32>
  %134 = mul nsw <4 x i32> %124, %132
  %135 = mul nsw <4 x i32> %125, %133
  %136 = add nuw nsw <4 x i32> %122, <i32 32, i32 32, i32 32, i32 32>
  %137 = add nuw nsw <4 x i32> %123, <i32 32, i32 32, i32 32, i32 32>
  %138 = add nsw <4 x i32> %136, %134
  %139 = add nsw <4 x i32> %137, %135
  %140 = ashr <4 x i32> %138, <i32 6, i32 6, i32 6, i32 6>
  %141 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %142 = getelementptr inbounds i8, i8* %95, i64 %103
  %143 = bitcast i8* %142 to <4 x i8>*
  %144 = load <4 x i8>, <4 x i8>* %143, align 1
  %145 = getelementptr inbounds i8, i8* %142, i64 4
  %146 = bitcast i8* %145 to <4 x i8>*
  %147 = load <4 x i8>, <4 x i8>* %146, align 1
  %148 = zext <4 x i8> %144 to <4 x i32>
  %149 = zext <4 x i8> %147 to <4 x i32>
  %150 = sub nsw <4 x i32> %140, %148
  %151 = sub nsw <4 x i32> %141, %149
  %152 = icmp slt <4 x i32> %150, zeroinitializer
  %153 = icmp slt <4 x i32> %151, zeroinitializer
  %154 = sub nsw <4 x i32> zeroinitializer, %150
  %155 = sub nsw <4 x i32> zeroinitializer, %151
  %156 = select <4 x i1> %152, <4 x i32> %154, <4 x i32> %150
  %157 = select <4 x i1> %153, <4 x i32> %155, <4 x i32> %151
  %158 = add <4 x i32> %156, %104
  %159 = add <4 x i32> %157, %105
  %160 = add i64 %103, 8
  %161 = icmp eq i64 %160, 128
  br i1 %161, label %162, label %102, !llvm.loop !4

162:                                              ; preds = %102
  %163 = add <4 x i32> %159, %158
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %165 = add <4 x i32> %163, %164
  %166 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %167 = add <4 x i32> %165, %166
  %168 = extractelement <4 x i32> %167, i32 0
  %169 = getelementptr inbounds i8, i8* %95, i64 %10
  %170 = getelementptr inbounds i8, i8* %98, i64 128
  %171 = getelementptr inbounds i8, i8* %99, i64 %11
  %172 = getelementptr inbounds i8, i8* %100, i64 %12
  %173 = add nuw nsw i32 %97, 1
  %174 = icmp eq i32 %173, 128
  br i1 %174, label %175, label %94

175:                                              ; preds = %162, %81
  %176 = phi i32 [ %87, %81 ], [ %168, %162 ]
  ret i32 %176
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad128x128x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %99

15:                                               ; preds = %9, %83
  %16 = phi i8* [ %90, %83 ], [ %0, %9 ]
  %17 = phi i32 [ %89, %83 ], [ 0, %9 ]
  %18 = phi i32 [ %94, %83 ], [ 0, %9 ]
  %19 = phi i8* [ %91, %83 ], [ %14, %9 ]
  %20 = phi i8* [ %92, %83 ], [ %4, %9 ]
  %21 = phi i8* [ %93, %83 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  br label %23

23:                                               ; preds = %23, %15
  %24 = phi i64 [ 0, %15 ], [ %81, %23 ]
  %25 = phi <4 x i32> [ %22, %15 ], [ %79, %23 ]
  %26 = phi <4 x i32> [ zeroinitializer, %15 ], [ %80, %23 ]
  %27 = getelementptr inbounds i8, i8* %21, i64 %24
  %28 = bitcast i8* %27 to <4 x i8>*
  %29 = load <4 x i8>, <4 x i8>* %28, align 1
  %30 = getelementptr inbounds i8, i8* %27, i64 4
  %31 = bitcast i8* %30 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %29 to <4 x i32>
  %34 = zext <4 x i8> %32 to <4 x i32>
  %35 = getelementptr inbounds i8, i8* %19, i64 %24
  %36 = bitcast i8* %35 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = getelementptr inbounds i8, i8* %35, i64 4
  %39 = bitcast i8* %38 to <4 x i8>*
  %40 = load <4 x i8>, <4 x i8>* %39, align 1
  %41 = zext <4 x i8> %37 to <4 x i32>
  %42 = zext <4 x i8> %40 to <4 x i32>
  %43 = mul nuw nsw <4 x i32> %41, %33
  %44 = mul nuw nsw <4 x i32> %42, %34
  %45 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %33
  %46 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %34
  %47 = getelementptr inbounds i8, i8* %20, i64 %24
  %48 = bitcast i8* %47 to <4 x i8>*
  %49 = load <4 x i8>, <4 x i8>* %48, align 1
  %50 = getelementptr inbounds i8, i8* %47, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %49 to <4 x i32>
  %54 = zext <4 x i8> %52 to <4 x i32>
  %55 = mul nsw <4 x i32> %45, %53
  %56 = mul nsw <4 x i32> %46, %54
  %57 = add nuw nsw <4 x i32> %43, <i32 32, i32 32, i32 32, i32 32>
  %58 = add nuw nsw <4 x i32> %44, <i32 32, i32 32, i32 32, i32 32>
  %59 = add nsw <4 x i32> %57, %55
  %60 = add nsw <4 x i32> %58, %56
  %61 = ashr <4 x i32> %59, <i32 6, i32 6, i32 6, i32 6>
  %62 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %63 = getelementptr inbounds i8, i8* %16, i64 %24
  %64 = bitcast i8* %63 to <4 x i8>*
  %65 = load <4 x i8>, <4 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %63, i64 4
  %67 = bitcast i8* %66 to <4 x i8>*
  %68 = load <4 x i8>, <4 x i8>* %67, align 1
  %69 = zext <4 x i8> %65 to <4 x i32>
  %70 = zext <4 x i8> %68 to <4 x i32>
  %71 = sub nsw <4 x i32> %61, %69
  %72 = sub nsw <4 x i32> %62, %70
  %73 = icmp slt <4 x i32> %71, zeroinitializer
  %74 = icmp slt <4 x i32> %72, zeroinitializer
  %75 = sub nsw <4 x i32> zeroinitializer, %71
  %76 = sub nsw <4 x i32> zeroinitializer, %72
  %77 = select <4 x i1> %73, <4 x i32> %75, <4 x i32> %71
  %78 = select <4 x i1> %74, <4 x i32> %76, <4 x i32> %72
  %79 = add <4 x i32> %77, %25
  %80 = add <4 x i32> %78, %26
  %81 = add i64 %24, 8
  %82 = icmp eq i64 %81, 128
  br i1 %82, label %83, label %23, !llvm.loop !5

83:                                               ; preds = %23
  %84 = add <4 x i32> %80, %79
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %88 = add <4 x i32> %86, %87
  %89 = extractelement <4 x i32> %88, i32 0
  %90 = getelementptr inbounds i8, i8* %16, i64 %11
  %91 = getelementptr inbounds i8, i8* %19, i64 %12
  %92 = getelementptr inbounds i8, i8* %20, i64 128
  %93 = getelementptr inbounds i8, i8* %21, i64 %13
  %94 = add nuw nsw i32 %18, 1
  %95 = icmp eq i32 %94, 128
  br i1 %95, label %96, label %15

96:                                               ; preds = %83
  store i32 %89, i32* %8, align 4
  %97 = getelementptr inbounds i8*, i8** %2, i64 1
  %98 = load i8*, i8** %97, align 8
  br label %186

99:                                               ; preds = %9, %167
  %100 = phi i8* [ %174, %167 ], [ %0, %9 ]
  %101 = phi i32 [ %173, %167 ], [ 0, %9 ]
  %102 = phi i32 [ %178, %167 ], [ 0, %9 ]
  %103 = phi i8* [ %175, %167 ], [ %4, %9 ]
  %104 = phi i8* [ %176, %167 ], [ %14, %9 ]
  %105 = phi i8* [ %177, %167 ], [ %5, %9 ]
  %106 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %101, i32 0
  br label %107

107:                                              ; preds = %107, %99
  %108 = phi i64 [ 0, %99 ], [ %165, %107 ]
  %109 = phi <4 x i32> [ %106, %99 ], [ %163, %107 ]
  %110 = phi <4 x i32> [ zeroinitializer, %99 ], [ %164, %107 ]
  %111 = getelementptr inbounds i8, i8* %105, i64 %108
  %112 = bitcast i8* %111 to <4 x i8>*
  %113 = load <4 x i8>, <4 x i8>* %112, align 1
  %114 = getelementptr inbounds i8, i8* %111, i64 4
  %115 = bitcast i8* %114 to <4 x i8>*
  %116 = load <4 x i8>, <4 x i8>* %115, align 1
  %117 = zext <4 x i8> %113 to <4 x i32>
  %118 = zext <4 x i8> %116 to <4 x i32>
  %119 = getelementptr inbounds i8, i8* %103, i64 %108
  %120 = bitcast i8* %119 to <4 x i8>*
  %121 = load <4 x i8>, <4 x i8>* %120, align 1
  %122 = getelementptr inbounds i8, i8* %119, i64 4
  %123 = bitcast i8* %122 to <4 x i8>*
  %124 = load <4 x i8>, <4 x i8>* %123, align 1
  %125 = zext <4 x i8> %121 to <4 x i32>
  %126 = zext <4 x i8> %124 to <4 x i32>
  %127 = mul nuw nsw <4 x i32> %125, %117
  %128 = mul nuw nsw <4 x i32> %126, %118
  %129 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %117
  %130 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %118
  %131 = getelementptr inbounds i8, i8* %104, i64 %108
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = getelementptr inbounds i8, i8* %131, i64 4
  %135 = bitcast i8* %134 to <4 x i8>*
  %136 = load <4 x i8>, <4 x i8>* %135, align 1
  %137 = zext <4 x i8> %133 to <4 x i32>
  %138 = zext <4 x i8> %136 to <4 x i32>
  %139 = mul nsw <4 x i32> %129, %137
  %140 = mul nsw <4 x i32> %130, %138
  %141 = add nuw nsw <4 x i32> %127, <i32 32, i32 32, i32 32, i32 32>
  %142 = add nuw nsw <4 x i32> %128, <i32 32, i32 32, i32 32, i32 32>
  %143 = add nsw <4 x i32> %141, %139
  %144 = add nsw <4 x i32> %142, %140
  %145 = ashr <4 x i32> %143, <i32 6, i32 6, i32 6, i32 6>
  %146 = ashr <4 x i32> %144, <i32 6, i32 6, i32 6, i32 6>
  %147 = getelementptr inbounds i8, i8* %100, i64 %108
  %148 = bitcast i8* %147 to <4 x i8>*
  %149 = load <4 x i8>, <4 x i8>* %148, align 1
  %150 = getelementptr inbounds i8, i8* %147, i64 4
  %151 = bitcast i8* %150 to <4 x i8>*
  %152 = load <4 x i8>, <4 x i8>* %151, align 1
  %153 = zext <4 x i8> %149 to <4 x i32>
  %154 = zext <4 x i8> %152 to <4 x i32>
  %155 = sub nsw <4 x i32> %145, %153
  %156 = sub nsw <4 x i32> %146, %154
  %157 = icmp slt <4 x i32> %155, zeroinitializer
  %158 = icmp slt <4 x i32> %156, zeroinitializer
  %159 = sub nsw <4 x i32> zeroinitializer, %155
  %160 = sub nsw <4 x i32> zeroinitializer, %156
  %161 = select <4 x i1> %157, <4 x i32> %159, <4 x i32> %155
  %162 = select <4 x i1> %158, <4 x i32> %160, <4 x i32> %156
  %163 = add <4 x i32> %161, %109
  %164 = add <4 x i32> %162, %110
  %165 = add i64 %108, 8
  %166 = icmp eq i64 %165, 128
  br i1 %166, label %167, label %107, !llvm.loop !6

167:                                              ; preds = %107
  %168 = add <4 x i32> %164, %163
  %169 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %170 = add <4 x i32> %168, %169
  %171 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %172 = add <4 x i32> %170, %171
  %173 = extractelement <4 x i32> %172, i32 0
  %174 = getelementptr inbounds i8, i8* %100, i64 %11
  %175 = getelementptr inbounds i8, i8* %103, i64 128
  %176 = getelementptr inbounds i8, i8* %104, i64 %12
  %177 = getelementptr inbounds i8, i8* %105, i64 %13
  %178 = add nuw nsw i32 %102, 1
  %179 = icmp eq i32 %178, 128
  br i1 %179, label %180, label %99

180:                                              ; preds = %167
  store i32 %173, i32* %8, align 4
  %181 = getelementptr inbounds i8*, i8** %2, i64 1
  %182 = load i8*, i8** %181, align 8
  br label %437

183:                                              ; preds = %675, %424
  %184 = phi i32 [ %430, %424 ], [ %681, %675 ]
  %185 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %184, i32* %185, align 4
  ret void

186:                                              ; preds = %96, %254
  %187 = phi i8* [ %0, %96 ], [ %261, %254 ]
  %188 = phi i32 [ 0, %96 ], [ %260, %254 ]
  %189 = phi i32 [ 0, %96 ], [ %265, %254 ]
  %190 = phi i8* [ %98, %96 ], [ %262, %254 ]
  %191 = phi i8* [ %4, %96 ], [ %263, %254 ]
  %192 = phi i8* [ %5, %96 ], [ %264, %254 ]
  %193 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %188, i32 0
  br label %194

194:                                              ; preds = %194, %186
  %195 = phi i64 [ 0, %186 ], [ %252, %194 ]
  %196 = phi <4 x i32> [ %193, %186 ], [ %250, %194 ]
  %197 = phi <4 x i32> [ zeroinitializer, %186 ], [ %251, %194 ]
  %198 = getelementptr inbounds i8, i8* %192, i64 %195
  %199 = bitcast i8* %198 to <4 x i8>*
  %200 = load <4 x i8>, <4 x i8>* %199, align 1
  %201 = getelementptr inbounds i8, i8* %198, i64 4
  %202 = bitcast i8* %201 to <4 x i8>*
  %203 = load <4 x i8>, <4 x i8>* %202, align 1
  %204 = zext <4 x i8> %200 to <4 x i32>
  %205 = zext <4 x i8> %203 to <4 x i32>
  %206 = getelementptr inbounds i8, i8* %190, i64 %195
  %207 = bitcast i8* %206 to <4 x i8>*
  %208 = load <4 x i8>, <4 x i8>* %207, align 1
  %209 = getelementptr inbounds i8, i8* %206, i64 4
  %210 = bitcast i8* %209 to <4 x i8>*
  %211 = load <4 x i8>, <4 x i8>* %210, align 1
  %212 = zext <4 x i8> %208 to <4 x i32>
  %213 = zext <4 x i8> %211 to <4 x i32>
  %214 = mul nuw nsw <4 x i32> %212, %204
  %215 = mul nuw nsw <4 x i32> %213, %205
  %216 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %204
  %217 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %205
  %218 = getelementptr inbounds i8, i8* %191, i64 %195
  %219 = bitcast i8* %218 to <4 x i8>*
  %220 = load <4 x i8>, <4 x i8>* %219, align 1
  %221 = getelementptr inbounds i8, i8* %218, i64 4
  %222 = bitcast i8* %221 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1
  %224 = zext <4 x i8> %220 to <4 x i32>
  %225 = zext <4 x i8> %223 to <4 x i32>
  %226 = mul nsw <4 x i32> %216, %224
  %227 = mul nsw <4 x i32> %217, %225
  %228 = add nuw nsw <4 x i32> %214, <i32 32, i32 32, i32 32, i32 32>
  %229 = add nuw nsw <4 x i32> %215, <i32 32, i32 32, i32 32, i32 32>
  %230 = add nsw <4 x i32> %228, %226
  %231 = add nsw <4 x i32> %229, %227
  %232 = ashr <4 x i32> %230, <i32 6, i32 6, i32 6, i32 6>
  %233 = ashr <4 x i32> %231, <i32 6, i32 6, i32 6, i32 6>
  %234 = getelementptr inbounds i8, i8* %187, i64 %195
  %235 = bitcast i8* %234 to <4 x i8>*
  %236 = load <4 x i8>, <4 x i8>* %235, align 1
  %237 = getelementptr inbounds i8, i8* %234, i64 4
  %238 = bitcast i8* %237 to <4 x i8>*
  %239 = load <4 x i8>, <4 x i8>* %238, align 1
  %240 = zext <4 x i8> %236 to <4 x i32>
  %241 = zext <4 x i8> %239 to <4 x i32>
  %242 = sub nsw <4 x i32> %232, %240
  %243 = sub nsw <4 x i32> %233, %241
  %244 = icmp slt <4 x i32> %242, zeroinitializer
  %245 = icmp slt <4 x i32> %243, zeroinitializer
  %246 = sub nsw <4 x i32> zeroinitializer, %242
  %247 = sub nsw <4 x i32> zeroinitializer, %243
  %248 = select <4 x i1> %244, <4 x i32> %246, <4 x i32> %242
  %249 = select <4 x i1> %245, <4 x i32> %247, <4 x i32> %243
  %250 = add <4 x i32> %248, %196
  %251 = add <4 x i32> %249, %197
  %252 = add i64 %195, 8
  %253 = icmp eq i64 %252, 128
  br i1 %253, label %254, label %194, !llvm.loop !7

254:                                              ; preds = %194
  %255 = add <4 x i32> %251, %250
  %256 = shufflevector <4 x i32> %255, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %257 = add <4 x i32> %255, %256
  %258 = shufflevector <4 x i32> %257, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %259 = add <4 x i32> %257, %258
  %260 = extractelement <4 x i32> %259, i32 0
  %261 = getelementptr inbounds i8, i8* %187, i64 %11
  %262 = getelementptr inbounds i8, i8* %190, i64 %12
  %263 = getelementptr inbounds i8, i8* %191, i64 128
  %264 = getelementptr inbounds i8, i8* %192, i64 %13
  %265 = add nuw nsw i32 %189, 1
  %266 = icmp eq i32 %265, 128
  br i1 %266, label %267, label %186

267:                                              ; preds = %254
  %268 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %260, i32* %268, align 4
  %269 = getelementptr inbounds i8*, i8** %2, i64 2
  %270 = load i8*, i8** %269, align 8
  br label %271

271:                                              ; preds = %267, %339
  %272 = phi i8* [ %0, %267 ], [ %346, %339 ]
  %273 = phi i32 [ 0, %267 ], [ %345, %339 ]
  %274 = phi i32 [ 0, %267 ], [ %350, %339 ]
  %275 = phi i8* [ %270, %267 ], [ %347, %339 ]
  %276 = phi i8* [ %4, %267 ], [ %348, %339 ]
  %277 = phi i8* [ %5, %267 ], [ %349, %339 ]
  %278 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %273, i32 0
  br label %279

279:                                              ; preds = %279, %271
  %280 = phi i64 [ 0, %271 ], [ %337, %279 ]
  %281 = phi <4 x i32> [ %278, %271 ], [ %335, %279 ]
  %282 = phi <4 x i32> [ zeroinitializer, %271 ], [ %336, %279 ]
  %283 = getelementptr inbounds i8, i8* %277, i64 %280
  %284 = bitcast i8* %283 to <4 x i8>*
  %285 = load <4 x i8>, <4 x i8>* %284, align 1
  %286 = getelementptr inbounds i8, i8* %283, i64 4
  %287 = bitcast i8* %286 to <4 x i8>*
  %288 = load <4 x i8>, <4 x i8>* %287, align 1
  %289 = zext <4 x i8> %285 to <4 x i32>
  %290 = zext <4 x i8> %288 to <4 x i32>
  %291 = getelementptr inbounds i8, i8* %275, i64 %280
  %292 = bitcast i8* %291 to <4 x i8>*
  %293 = load <4 x i8>, <4 x i8>* %292, align 1
  %294 = getelementptr inbounds i8, i8* %291, i64 4
  %295 = bitcast i8* %294 to <4 x i8>*
  %296 = load <4 x i8>, <4 x i8>* %295, align 1
  %297 = zext <4 x i8> %293 to <4 x i32>
  %298 = zext <4 x i8> %296 to <4 x i32>
  %299 = mul nuw nsw <4 x i32> %297, %289
  %300 = mul nuw nsw <4 x i32> %298, %290
  %301 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %289
  %302 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %290
  %303 = getelementptr inbounds i8, i8* %276, i64 %280
  %304 = bitcast i8* %303 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = getelementptr inbounds i8, i8* %303, i64 4
  %307 = bitcast i8* %306 to <4 x i8>*
  %308 = load <4 x i8>, <4 x i8>* %307, align 1
  %309 = zext <4 x i8> %305 to <4 x i32>
  %310 = zext <4 x i8> %308 to <4 x i32>
  %311 = mul nsw <4 x i32> %301, %309
  %312 = mul nsw <4 x i32> %302, %310
  %313 = add nuw nsw <4 x i32> %299, <i32 32, i32 32, i32 32, i32 32>
  %314 = add nuw nsw <4 x i32> %300, <i32 32, i32 32, i32 32, i32 32>
  %315 = add nsw <4 x i32> %313, %311
  %316 = add nsw <4 x i32> %314, %312
  %317 = ashr <4 x i32> %315, <i32 6, i32 6, i32 6, i32 6>
  %318 = ashr <4 x i32> %316, <i32 6, i32 6, i32 6, i32 6>
  %319 = getelementptr inbounds i8, i8* %272, i64 %280
  %320 = bitcast i8* %319 to <4 x i8>*
  %321 = load <4 x i8>, <4 x i8>* %320, align 1
  %322 = getelementptr inbounds i8, i8* %319, i64 4
  %323 = bitcast i8* %322 to <4 x i8>*
  %324 = load <4 x i8>, <4 x i8>* %323, align 1
  %325 = zext <4 x i8> %321 to <4 x i32>
  %326 = zext <4 x i8> %324 to <4 x i32>
  %327 = sub nsw <4 x i32> %317, %325
  %328 = sub nsw <4 x i32> %318, %326
  %329 = icmp slt <4 x i32> %327, zeroinitializer
  %330 = icmp slt <4 x i32> %328, zeroinitializer
  %331 = sub nsw <4 x i32> zeroinitializer, %327
  %332 = sub nsw <4 x i32> zeroinitializer, %328
  %333 = select <4 x i1> %329, <4 x i32> %331, <4 x i32> %327
  %334 = select <4 x i1> %330, <4 x i32> %332, <4 x i32> %328
  %335 = add <4 x i32> %333, %281
  %336 = add <4 x i32> %334, %282
  %337 = add i64 %280, 8
  %338 = icmp eq i64 %337, 128
  br i1 %338, label %339, label %279, !llvm.loop !8

339:                                              ; preds = %279
  %340 = add <4 x i32> %336, %335
  %341 = shufflevector <4 x i32> %340, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %342 = add <4 x i32> %340, %341
  %343 = shufflevector <4 x i32> %342, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %344 = add <4 x i32> %342, %343
  %345 = extractelement <4 x i32> %344, i32 0
  %346 = getelementptr inbounds i8, i8* %272, i64 %11
  %347 = getelementptr inbounds i8, i8* %275, i64 %12
  %348 = getelementptr inbounds i8, i8* %276, i64 128
  %349 = getelementptr inbounds i8, i8* %277, i64 %13
  %350 = add nuw nsw i32 %274, 1
  %351 = icmp eq i32 %350, 128
  br i1 %351, label %352, label %271

352:                                              ; preds = %339
  %353 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %345, i32* %353, align 4
  %354 = getelementptr inbounds i8*, i8** %2, i64 3
  %355 = load i8*, i8** %354, align 8
  br label %356

356:                                              ; preds = %352, %424
  %357 = phi i8* [ %0, %352 ], [ %431, %424 ]
  %358 = phi i32 [ 0, %352 ], [ %430, %424 ]
  %359 = phi i32 [ 0, %352 ], [ %435, %424 ]
  %360 = phi i8* [ %355, %352 ], [ %432, %424 ]
  %361 = phi i8* [ %4, %352 ], [ %433, %424 ]
  %362 = phi i8* [ %5, %352 ], [ %434, %424 ]
  %363 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %358, i32 0
  br label %364

364:                                              ; preds = %364, %356
  %365 = phi i64 [ 0, %356 ], [ %422, %364 ]
  %366 = phi <4 x i32> [ %363, %356 ], [ %420, %364 ]
  %367 = phi <4 x i32> [ zeroinitializer, %356 ], [ %421, %364 ]
  %368 = getelementptr inbounds i8, i8* %362, i64 %365
  %369 = bitcast i8* %368 to <4 x i8>*
  %370 = load <4 x i8>, <4 x i8>* %369, align 1
  %371 = getelementptr inbounds i8, i8* %368, i64 4
  %372 = bitcast i8* %371 to <4 x i8>*
  %373 = load <4 x i8>, <4 x i8>* %372, align 1
  %374 = zext <4 x i8> %370 to <4 x i32>
  %375 = zext <4 x i8> %373 to <4 x i32>
  %376 = getelementptr inbounds i8, i8* %360, i64 %365
  %377 = bitcast i8* %376 to <4 x i8>*
  %378 = load <4 x i8>, <4 x i8>* %377, align 1
  %379 = getelementptr inbounds i8, i8* %376, i64 4
  %380 = bitcast i8* %379 to <4 x i8>*
  %381 = load <4 x i8>, <4 x i8>* %380, align 1
  %382 = zext <4 x i8> %378 to <4 x i32>
  %383 = zext <4 x i8> %381 to <4 x i32>
  %384 = mul nuw nsw <4 x i32> %382, %374
  %385 = mul nuw nsw <4 x i32> %383, %375
  %386 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %374
  %387 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %375
  %388 = getelementptr inbounds i8, i8* %361, i64 %365
  %389 = bitcast i8* %388 to <4 x i8>*
  %390 = load <4 x i8>, <4 x i8>* %389, align 1
  %391 = getelementptr inbounds i8, i8* %388, i64 4
  %392 = bitcast i8* %391 to <4 x i8>*
  %393 = load <4 x i8>, <4 x i8>* %392, align 1
  %394 = zext <4 x i8> %390 to <4 x i32>
  %395 = zext <4 x i8> %393 to <4 x i32>
  %396 = mul nsw <4 x i32> %386, %394
  %397 = mul nsw <4 x i32> %387, %395
  %398 = add nuw nsw <4 x i32> %384, <i32 32, i32 32, i32 32, i32 32>
  %399 = add nuw nsw <4 x i32> %385, <i32 32, i32 32, i32 32, i32 32>
  %400 = add nsw <4 x i32> %398, %396
  %401 = add nsw <4 x i32> %399, %397
  %402 = ashr <4 x i32> %400, <i32 6, i32 6, i32 6, i32 6>
  %403 = ashr <4 x i32> %401, <i32 6, i32 6, i32 6, i32 6>
  %404 = getelementptr inbounds i8, i8* %357, i64 %365
  %405 = bitcast i8* %404 to <4 x i8>*
  %406 = load <4 x i8>, <4 x i8>* %405, align 1
  %407 = getelementptr inbounds i8, i8* %404, i64 4
  %408 = bitcast i8* %407 to <4 x i8>*
  %409 = load <4 x i8>, <4 x i8>* %408, align 1
  %410 = zext <4 x i8> %406 to <4 x i32>
  %411 = zext <4 x i8> %409 to <4 x i32>
  %412 = sub nsw <4 x i32> %402, %410
  %413 = sub nsw <4 x i32> %403, %411
  %414 = icmp slt <4 x i32> %412, zeroinitializer
  %415 = icmp slt <4 x i32> %413, zeroinitializer
  %416 = sub nsw <4 x i32> zeroinitializer, %412
  %417 = sub nsw <4 x i32> zeroinitializer, %413
  %418 = select <4 x i1> %414, <4 x i32> %416, <4 x i32> %412
  %419 = select <4 x i1> %415, <4 x i32> %417, <4 x i32> %413
  %420 = add <4 x i32> %418, %366
  %421 = add <4 x i32> %419, %367
  %422 = add i64 %365, 8
  %423 = icmp eq i64 %422, 128
  br i1 %423, label %424, label %364, !llvm.loop !9

424:                                              ; preds = %364
  %425 = add <4 x i32> %421, %420
  %426 = shufflevector <4 x i32> %425, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %427 = add <4 x i32> %425, %426
  %428 = shufflevector <4 x i32> %427, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %429 = add <4 x i32> %427, %428
  %430 = extractelement <4 x i32> %429, i32 0
  %431 = getelementptr inbounds i8, i8* %357, i64 %11
  %432 = getelementptr inbounds i8, i8* %360, i64 %12
  %433 = getelementptr inbounds i8, i8* %361, i64 128
  %434 = getelementptr inbounds i8, i8* %362, i64 %13
  %435 = add nuw nsw i32 %359, 1
  %436 = icmp eq i32 %435, 128
  br i1 %436, label %183, label %356

437:                                              ; preds = %180, %505
  %438 = phi i8* [ %0, %180 ], [ %512, %505 ]
  %439 = phi i32 [ 0, %180 ], [ %511, %505 ]
  %440 = phi i32 [ 0, %180 ], [ %516, %505 ]
  %441 = phi i8* [ %4, %180 ], [ %513, %505 ]
  %442 = phi i8* [ %182, %180 ], [ %514, %505 ]
  %443 = phi i8* [ %5, %180 ], [ %515, %505 ]
  %444 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %439, i32 0
  br label %445

445:                                              ; preds = %445, %437
  %446 = phi i64 [ 0, %437 ], [ %503, %445 ]
  %447 = phi <4 x i32> [ %444, %437 ], [ %501, %445 ]
  %448 = phi <4 x i32> [ zeroinitializer, %437 ], [ %502, %445 ]
  %449 = getelementptr inbounds i8, i8* %443, i64 %446
  %450 = bitcast i8* %449 to <4 x i8>*
  %451 = load <4 x i8>, <4 x i8>* %450, align 1
  %452 = getelementptr inbounds i8, i8* %449, i64 4
  %453 = bitcast i8* %452 to <4 x i8>*
  %454 = load <4 x i8>, <4 x i8>* %453, align 1
  %455 = zext <4 x i8> %451 to <4 x i32>
  %456 = zext <4 x i8> %454 to <4 x i32>
  %457 = getelementptr inbounds i8, i8* %441, i64 %446
  %458 = bitcast i8* %457 to <4 x i8>*
  %459 = load <4 x i8>, <4 x i8>* %458, align 1
  %460 = getelementptr inbounds i8, i8* %457, i64 4
  %461 = bitcast i8* %460 to <4 x i8>*
  %462 = load <4 x i8>, <4 x i8>* %461, align 1
  %463 = zext <4 x i8> %459 to <4 x i32>
  %464 = zext <4 x i8> %462 to <4 x i32>
  %465 = mul nuw nsw <4 x i32> %463, %455
  %466 = mul nuw nsw <4 x i32> %464, %456
  %467 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %455
  %468 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %456
  %469 = getelementptr inbounds i8, i8* %442, i64 %446
  %470 = bitcast i8* %469 to <4 x i8>*
  %471 = load <4 x i8>, <4 x i8>* %470, align 1
  %472 = getelementptr inbounds i8, i8* %469, i64 4
  %473 = bitcast i8* %472 to <4 x i8>*
  %474 = load <4 x i8>, <4 x i8>* %473, align 1
  %475 = zext <4 x i8> %471 to <4 x i32>
  %476 = zext <4 x i8> %474 to <4 x i32>
  %477 = mul nsw <4 x i32> %467, %475
  %478 = mul nsw <4 x i32> %468, %476
  %479 = add nuw nsw <4 x i32> %465, <i32 32, i32 32, i32 32, i32 32>
  %480 = add nuw nsw <4 x i32> %466, <i32 32, i32 32, i32 32, i32 32>
  %481 = add nsw <4 x i32> %479, %477
  %482 = add nsw <4 x i32> %480, %478
  %483 = ashr <4 x i32> %481, <i32 6, i32 6, i32 6, i32 6>
  %484 = ashr <4 x i32> %482, <i32 6, i32 6, i32 6, i32 6>
  %485 = getelementptr inbounds i8, i8* %438, i64 %446
  %486 = bitcast i8* %485 to <4 x i8>*
  %487 = load <4 x i8>, <4 x i8>* %486, align 1
  %488 = getelementptr inbounds i8, i8* %485, i64 4
  %489 = bitcast i8* %488 to <4 x i8>*
  %490 = load <4 x i8>, <4 x i8>* %489, align 1
  %491 = zext <4 x i8> %487 to <4 x i32>
  %492 = zext <4 x i8> %490 to <4 x i32>
  %493 = sub nsw <4 x i32> %483, %491
  %494 = sub nsw <4 x i32> %484, %492
  %495 = icmp slt <4 x i32> %493, zeroinitializer
  %496 = icmp slt <4 x i32> %494, zeroinitializer
  %497 = sub nsw <4 x i32> zeroinitializer, %493
  %498 = sub nsw <4 x i32> zeroinitializer, %494
  %499 = select <4 x i1> %495, <4 x i32> %497, <4 x i32> %493
  %500 = select <4 x i1> %496, <4 x i32> %498, <4 x i32> %494
  %501 = add <4 x i32> %499, %447
  %502 = add <4 x i32> %500, %448
  %503 = add i64 %446, 8
  %504 = icmp eq i64 %503, 128
  br i1 %504, label %505, label %445, !llvm.loop !10

505:                                              ; preds = %445
  %506 = add <4 x i32> %502, %501
  %507 = shufflevector <4 x i32> %506, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %508 = add <4 x i32> %506, %507
  %509 = shufflevector <4 x i32> %508, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %510 = add <4 x i32> %508, %509
  %511 = extractelement <4 x i32> %510, i32 0
  %512 = getelementptr inbounds i8, i8* %438, i64 %11
  %513 = getelementptr inbounds i8, i8* %441, i64 128
  %514 = getelementptr inbounds i8, i8* %442, i64 %12
  %515 = getelementptr inbounds i8, i8* %443, i64 %13
  %516 = add nuw nsw i32 %440, 1
  %517 = icmp eq i32 %516, 128
  br i1 %517, label %518, label %437

518:                                              ; preds = %505
  %519 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %511, i32* %519, align 4
  %520 = getelementptr inbounds i8*, i8** %2, i64 2
  %521 = load i8*, i8** %520, align 8
  br label %522

522:                                              ; preds = %518, %590
  %523 = phi i8* [ %0, %518 ], [ %597, %590 ]
  %524 = phi i32 [ 0, %518 ], [ %596, %590 ]
  %525 = phi i32 [ 0, %518 ], [ %601, %590 ]
  %526 = phi i8* [ %4, %518 ], [ %598, %590 ]
  %527 = phi i8* [ %521, %518 ], [ %599, %590 ]
  %528 = phi i8* [ %5, %518 ], [ %600, %590 ]
  %529 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %524, i32 0
  br label %530

530:                                              ; preds = %530, %522
  %531 = phi i64 [ 0, %522 ], [ %588, %530 ]
  %532 = phi <4 x i32> [ %529, %522 ], [ %586, %530 ]
  %533 = phi <4 x i32> [ zeroinitializer, %522 ], [ %587, %530 ]
  %534 = getelementptr inbounds i8, i8* %528, i64 %531
  %535 = bitcast i8* %534 to <4 x i8>*
  %536 = load <4 x i8>, <4 x i8>* %535, align 1
  %537 = getelementptr inbounds i8, i8* %534, i64 4
  %538 = bitcast i8* %537 to <4 x i8>*
  %539 = load <4 x i8>, <4 x i8>* %538, align 1
  %540 = zext <4 x i8> %536 to <4 x i32>
  %541 = zext <4 x i8> %539 to <4 x i32>
  %542 = getelementptr inbounds i8, i8* %526, i64 %531
  %543 = bitcast i8* %542 to <4 x i8>*
  %544 = load <4 x i8>, <4 x i8>* %543, align 1
  %545 = getelementptr inbounds i8, i8* %542, i64 4
  %546 = bitcast i8* %545 to <4 x i8>*
  %547 = load <4 x i8>, <4 x i8>* %546, align 1
  %548 = zext <4 x i8> %544 to <4 x i32>
  %549 = zext <4 x i8> %547 to <4 x i32>
  %550 = mul nuw nsw <4 x i32> %548, %540
  %551 = mul nuw nsw <4 x i32> %549, %541
  %552 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %540
  %553 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %541
  %554 = getelementptr inbounds i8, i8* %527, i64 %531
  %555 = bitcast i8* %554 to <4 x i8>*
  %556 = load <4 x i8>, <4 x i8>* %555, align 1
  %557 = getelementptr inbounds i8, i8* %554, i64 4
  %558 = bitcast i8* %557 to <4 x i8>*
  %559 = load <4 x i8>, <4 x i8>* %558, align 1
  %560 = zext <4 x i8> %556 to <4 x i32>
  %561 = zext <4 x i8> %559 to <4 x i32>
  %562 = mul nsw <4 x i32> %552, %560
  %563 = mul nsw <4 x i32> %553, %561
  %564 = add nuw nsw <4 x i32> %550, <i32 32, i32 32, i32 32, i32 32>
  %565 = add nuw nsw <4 x i32> %551, <i32 32, i32 32, i32 32, i32 32>
  %566 = add nsw <4 x i32> %564, %562
  %567 = add nsw <4 x i32> %565, %563
  %568 = ashr <4 x i32> %566, <i32 6, i32 6, i32 6, i32 6>
  %569 = ashr <4 x i32> %567, <i32 6, i32 6, i32 6, i32 6>
  %570 = getelementptr inbounds i8, i8* %523, i64 %531
  %571 = bitcast i8* %570 to <4 x i8>*
  %572 = load <4 x i8>, <4 x i8>* %571, align 1
  %573 = getelementptr inbounds i8, i8* %570, i64 4
  %574 = bitcast i8* %573 to <4 x i8>*
  %575 = load <4 x i8>, <4 x i8>* %574, align 1
  %576 = zext <4 x i8> %572 to <4 x i32>
  %577 = zext <4 x i8> %575 to <4 x i32>
  %578 = sub nsw <4 x i32> %568, %576
  %579 = sub nsw <4 x i32> %569, %577
  %580 = icmp slt <4 x i32> %578, zeroinitializer
  %581 = icmp slt <4 x i32> %579, zeroinitializer
  %582 = sub nsw <4 x i32> zeroinitializer, %578
  %583 = sub nsw <4 x i32> zeroinitializer, %579
  %584 = select <4 x i1> %580, <4 x i32> %582, <4 x i32> %578
  %585 = select <4 x i1> %581, <4 x i32> %583, <4 x i32> %579
  %586 = add <4 x i32> %584, %532
  %587 = add <4 x i32> %585, %533
  %588 = add i64 %531, 8
  %589 = icmp eq i64 %588, 128
  br i1 %589, label %590, label %530, !llvm.loop !11

590:                                              ; preds = %530
  %591 = add <4 x i32> %587, %586
  %592 = shufflevector <4 x i32> %591, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %593 = add <4 x i32> %591, %592
  %594 = shufflevector <4 x i32> %593, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %595 = add <4 x i32> %593, %594
  %596 = extractelement <4 x i32> %595, i32 0
  %597 = getelementptr inbounds i8, i8* %523, i64 %11
  %598 = getelementptr inbounds i8, i8* %526, i64 128
  %599 = getelementptr inbounds i8, i8* %527, i64 %12
  %600 = getelementptr inbounds i8, i8* %528, i64 %13
  %601 = add nuw nsw i32 %525, 1
  %602 = icmp eq i32 %601, 128
  br i1 %602, label %603, label %522

603:                                              ; preds = %590
  %604 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %596, i32* %604, align 4
  %605 = getelementptr inbounds i8*, i8** %2, i64 3
  %606 = load i8*, i8** %605, align 8
  br label %607

607:                                              ; preds = %603, %675
  %608 = phi i8* [ %0, %603 ], [ %682, %675 ]
  %609 = phi i32 [ 0, %603 ], [ %681, %675 ]
  %610 = phi i32 [ 0, %603 ], [ %686, %675 ]
  %611 = phi i8* [ %4, %603 ], [ %683, %675 ]
  %612 = phi i8* [ %606, %603 ], [ %684, %675 ]
  %613 = phi i8* [ %5, %603 ], [ %685, %675 ]
  %614 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %609, i32 0
  br label %615

615:                                              ; preds = %615, %607
  %616 = phi i64 [ 0, %607 ], [ %673, %615 ]
  %617 = phi <4 x i32> [ %614, %607 ], [ %671, %615 ]
  %618 = phi <4 x i32> [ zeroinitializer, %607 ], [ %672, %615 ]
  %619 = getelementptr inbounds i8, i8* %613, i64 %616
  %620 = bitcast i8* %619 to <4 x i8>*
  %621 = load <4 x i8>, <4 x i8>* %620, align 1
  %622 = getelementptr inbounds i8, i8* %619, i64 4
  %623 = bitcast i8* %622 to <4 x i8>*
  %624 = load <4 x i8>, <4 x i8>* %623, align 1
  %625 = zext <4 x i8> %621 to <4 x i32>
  %626 = zext <4 x i8> %624 to <4 x i32>
  %627 = getelementptr inbounds i8, i8* %611, i64 %616
  %628 = bitcast i8* %627 to <4 x i8>*
  %629 = load <4 x i8>, <4 x i8>* %628, align 1
  %630 = getelementptr inbounds i8, i8* %627, i64 4
  %631 = bitcast i8* %630 to <4 x i8>*
  %632 = load <4 x i8>, <4 x i8>* %631, align 1
  %633 = zext <4 x i8> %629 to <4 x i32>
  %634 = zext <4 x i8> %632 to <4 x i32>
  %635 = mul nuw nsw <4 x i32> %633, %625
  %636 = mul nuw nsw <4 x i32> %634, %626
  %637 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %625
  %638 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %626
  %639 = getelementptr inbounds i8, i8* %612, i64 %616
  %640 = bitcast i8* %639 to <4 x i8>*
  %641 = load <4 x i8>, <4 x i8>* %640, align 1
  %642 = getelementptr inbounds i8, i8* %639, i64 4
  %643 = bitcast i8* %642 to <4 x i8>*
  %644 = load <4 x i8>, <4 x i8>* %643, align 1
  %645 = zext <4 x i8> %641 to <4 x i32>
  %646 = zext <4 x i8> %644 to <4 x i32>
  %647 = mul nsw <4 x i32> %637, %645
  %648 = mul nsw <4 x i32> %638, %646
  %649 = add nuw nsw <4 x i32> %635, <i32 32, i32 32, i32 32, i32 32>
  %650 = add nuw nsw <4 x i32> %636, <i32 32, i32 32, i32 32, i32 32>
  %651 = add nsw <4 x i32> %649, %647
  %652 = add nsw <4 x i32> %650, %648
  %653 = ashr <4 x i32> %651, <i32 6, i32 6, i32 6, i32 6>
  %654 = ashr <4 x i32> %652, <i32 6, i32 6, i32 6, i32 6>
  %655 = getelementptr inbounds i8, i8* %608, i64 %616
  %656 = bitcast i8* %655 to <4 x i8>*
  %657 = load <4 x i8>, <4 x i8>* %656, align 1
  %658 = getelementptr inbounds i8, i8* %655, i64 4
  %659 = bitcast i8* %658 to <4 x i8>*
  %660 = load <4 x i8>, <4 x i8>* %659, align 1
  %661 = zext <4 x i8> %657 to <4 x i32>
  %662 = zext <4 x i8> %660 to <4 x i32>
  %663 = sub nsw <4 x i32> %653, %661
  %664 = sub nsw <4 x i32> %654, %662
  %665 = icmp slt <4 x i32> %663, zeroinitializer
  %666 = icmp slt <4 x i32> %664, zeroinitializer
  %667 = sub nsw <4 x i32> zeroinitializer, %663
  %668 = sub nsw <4 x i32> zeroinitializer, %664
  %669 = select <4 x i1> %665, <4 x i32> %667, <4 x i32> %663
  %670 = select <4 x i1> %666, <4 x i32> %668, <4 x i32> %664
  %671 = add <4 x i32> %669, %617
  %672 = add <4 x i32> %670, %618
  %673 = add i64 %616, 8
  %674 = icmp eq i64 %673, 128
  br i1 %674, label %675, label %615, !llvm.loop !12

675:                                              ; preds = %615
  %676 = add <4 x i32> %672, %671
  %677 = shufflevector <4 x i32> %676, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %678 = add <4 x i32> %676, %677
  %679 = shufflevector <4 x i32> %678, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %680 = add <4 x i32> %678, %679
  %681 = extractelement <4 x i32> %680, i32 0
  %682 = getelementptr inbounds i8, i8* %608, i64 %11
  %683 = getelementptr inbounds i8, i8* %611, i64 128
  %684 = getelementptr inbounds i8, i8* %612, i64 %12
  %685 = getelementptr inbounds i8, i8* %613, i64 %13
  %686 = add nuw nsw i32 %610, 1
  %687 = icmp eq i32 %686, 128
  br i1 %687, label %183, label %607
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad128x64_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %94

13:                                               ; preds = %8, %81
  %14 = phi i8* [ %88, %81 ], [ %0, %8 ]
  %15 = phi i32 [ %87, %81 ], [ 0, %8 ]
  %16 = phi i32 [ %92, %81 ], [ 0, %8 ]
  %17 = phi i8* [ %89, %81 ], [ %2, %8 ]
  %18 = phi i8* [ %90, %81 ], [ %4, %8 ]
  %19 = phi i8* [ %91, %81 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  br label %21

21:                                               ; preds = %21, %13
  %22 = phi i64 [ 0, %13 ], [ %79, %21 ]
  %23 = phi <4 x i32> [ %20, %13 ], [ %77, %21 ]
  %24 = phi <4 x i32> [ zeroinitializer, %13 ], [ %78, %21 ]
  %25 = getelementptr inbounds i8, i8* %19, i64 %22
  %26 = bitcast i8* %25 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = getelementptr inbounds i8, i8* %25, i64 4
  %29 = bitcast i8* %28 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %27 to <4 x i32>
  %32 = zext <4 x i8> %30 to <4 x i32>
  %33 = getelementptr inbounds i8, i8* %17, i64 %22
  %34 = bitcast i8* %33 to <4 x i8>*
  %35 = load <4 x i8>, <4 x i8>* %34, align 1
  %36 = getelementptr inbounds i8, i8* %33, i64 4
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %35 to <4 x i32>
  %40 = zext <4 x i8> %38 to <4 x i32>
  %41 = mul nuw nsw <4 x i32> %39, %31
  %42 = mul nuw nsw <4 x i32> %40, %32
  %43 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %31
  %44 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %32
  %45 = getelementptr inbounds i8, i8* %18, i64 %22
  %46 = bitcast i8* %45 to <4 x i8>*
  %47 = load <4 x i8>, <4 x i8>* %46, align 1
  %48 = getelementptr inbounds i8, i8* %45, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %47 to <4 x i32>
  %52 = zext <4 x i8> %50 to <4 x i32>
  %53 = mul nsw <4 x i32> %43, %51
  %54 = mul nsw <4 x i32> %44, %52
  %55 = add nuw nsw <4 x i32> %41, <i32 32, i32 32, i32 32, i32 32>
  %56 = add nuw nsw <4 x i32> %42, <i32 32, i32 32, i32 32, i32 32>
  %57 = add nsw <4 x i32> %55, %53
  %58 = add nsw <4 x i32> %56, %54
  %59 = ashr <4 x i32> %57, <i32 6, i32 6, i32 6, i32 6>
  %60 = ashr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %61 = getelementptr inbounds i8, i8* %14, i64 %22
  %62 = bitcast i8* %61 to <4 x i8>*
  %63 = load <4 x i8>, <4 x i8>* %62, align 1
  %64 = getelementptr inbounds i8, i8* %61, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %63 to <4 x i32>
  %68 = zext <4 x i8> %66 to <4 x i32>
  %69 = sub nsw <4 x i32> %59, %67
  %70 = sub nsw <4 x i32> %60, %68
  %71 = icmp slt <4 x i32> %69, zeroinitializer
  %72 = icmp slt <4 x i32> %70, zeroinitializer
  %73 = sub nsw <4 x i32> zeroinitializer, %69
  %74 = sub nsw <4 x i32> zeroinitializer, %70
  %75 = select <4 x i1> %71, <4 x i32> %73, <4 x i32> %69
  %76 = select <4 x i1> %72, <4 x i32> %74, <4 x i32> %70
  %77 = add <4 x i32> %75, %23
  %78 = add <4 x i32> %76, %24
  %79 = add i64 %22, 8
  %80 = icmp eq i64 %79, 128
  br i1 %80, label %81, label %21, !llvm.loop !13

81:                                               ; preds = %21
  %82 = add <4 x i32> %78, %77
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %84 = add <4 x i32> %82, %83
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = getelementptr inbounds i8, i8* %14, i64 %10
  %89 = getelementptr inbounds i8, i8* %17, i64 %11
  %90 = getelementptr inbounds i8, i8* %18, i64 128
  %91 = getelementptr inbounds i8, i8* %19, i64 %12
  %92 = add nuw nsw i32 %16, 1
  %93 = icmp eq i32 %92, 64
  br i1 %93, label %175, label %13

94:                                               ; preds = %8, %162
  %95 = phi i8* [ %169, %162 ], [ %0, %8 ]
  %96 = phi i32 [ %168, %162 ], [ 0, %8 ]
  %97 = phi i32 [ %173, %162 ], [ 0, %8 ]
  %98 = phi i8* [ %170, %162 ], [ %4, %8 ]
  %99 = phi i8* [ %171, %162 ], [ %2, %8 ]
  %100 = phi i8* [ %172, %162 ], [ %5, %8 ]
  %101 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %96, i32 0
  br label %102

102:                                              ; preds = %102, %94
  %103 = phi i64 [ 0, %94 ], [ %160, %102 ]
  %104 = phi <4 x i32> [ %101, %94 ], [ %158, %102 ]
  %105 = phi <4 x i32> [ zeroinitializer, %94 ], [ %159, %102 ]
  %106 = getelementptr inbounds i8, i8* %100, i64 %103
  %107 = bitcast i8* %106 to <4 x i8>*
  %108 = load <4 x i8>, <4 x i8>* %107, align 1
  %109 = getelementptr inbounds i8, i8* %106, i64 4
  %110 = bitcast i8* %109 to <4 x i8>*
  %111 = load <4 x i8>, <4 x i8>* %110, align 1
  %112 = zext <4 x i8> %108 to <4 x i32>
  %113 = zext <4 x i8> %111 to <4 x i32>
  %114 = getelementptr inbounds i8, i8* %98, i64 %103
  %115 = bitcast i8* %114 to <4 x i8>*
  %116 = load <4 x i8>, <4 x i8>* %115, align 1
  %117 = getelementptr inbounds i8, i8* %114, i64 4
  %118 = bitcast i8* %117 to <4 x i8>*
  %119 = load <4 x i8>, <4 x i8>* %118, align 1
  %120 = zext <4 x i8> %116 to <4 x i32>
  %121 = zext <4 x i8> %119 to <4 x i32>
  %122 = mul nuw nsw <4 x i32> %120, %112
  %123 = mul nuw nsw <4 x i32> %121, %113
  %124 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %112
  %125 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %113
  %126 = getelementptr inbounds i8, i8* %99, i64 %103
  %127 = bitcast i8* %126 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1
  %129 = getelementptr inbounds i8, i8* %126, i64 4
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1
  %132 = zext <4 x i8> %128 to <4 x i32>
  %133 = zext <4 x i8> %131 to <4 x i32>
  %134 = mul nsw <4 x i32> %124, %132
  %135 = mul nsw <4 x i32> %125, %133
  %136 = add nuw nsw <4 x i32> %122, <i32 32, i32 32, i32 32, i32 32>
  %137 = add nuw nsw <4 x i32> %123, <i32 32, i32 32, i32 32, i32 32>
  %138 = add nsw <4 x i32> %136, %134
  %139 = add nsw <4 x i32> %137, %135
  %140 = ashr <4 x i32> %138, <i32 6, i32 6, i32 6, i32 6>
  %141 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %142 = getelementptr inbounds i8, i8* %95, i64 %103
  %143 = bitcast i8* %142 to <4 x i8>*
  %144 = load <4 x i8>, <4 x i8>* %143, align 1
  %145 = getelementptr inbounds i8, i8* %142, i64 4
  %146 = bitcast i8* %145 to <4 x i8>*
  %147 = load <4 x i8>, <4 x i8>* %146, align 1
  %148 = zext <4 x i8> %144 to <4 x i32>
  %149 = zext <4 x i8> %147 to <4 x i32>
  %150 = sub nsw <4 x i32> %140, %148
  %151 = sub nsw <4 x i32> %141, %149
  %152 = icmp slt <4 x i32> %150, zeroinitializer
  %153 = icmp slt <4 x i32> %151, zeroinitializer
  %154 = sub nsw <4 x i32> zeroinitializer, %150
  %155 = sub nsw <4 x i32> zeroinitializer, %151
  %156 = select <4 x i1> %152, <4 x i32> %154, <4 x i32> %150
  %157 = select <4 x i1> %153, <4 x i32> %155, <4 x i32> %151
  %158 = add <4 x i32> %156, %104
  %159 = add <4 x i32> %157, %105
  %160 = add i64 %103, 8
  %161 = icmp eq i64 %160, 128
  br i1 %161, label %162, label %102, !llvm.loop !14

162:                                              ; preds = %102
  %163 = add <4 x i32> %159, %158
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %165 = add <4 x i32> %163, %164
  %166 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %167 = add <4 x i32> %165, %166
  %168 = extractelement <4 x i32> %167, i32 0
  %169 = getelementptr inbounds i8, i8* %95, i64 %10
  %170 = getelementptr inbounds i8, i8* %98, i64 128
  %171 = getelementptr inbounds i8, i8* %99, i64 %11
  %172 = getelementptr inbounds i8, i8* %100, i64 %12
  %173 = add nuw nsw i32 %97, 1
  %174 = icmp eq i32 %173, 64
  br i1 %174, label %175, label %94

175:                                              ; preds = %162, %81
  %176 = phi i32 [ %87, %81 ], [ %168, %162 ]
  ret i32 %176
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad128x64x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %99

15:                                               ; preds = %9, %83
  %16 = phi i8* [ %90, %83 ], [ %0, %9 ]
  %17 = phi i32 [ %89, %83 ], [ 0, %9 ]
  %18 = phi i32 [ %94, %83 ], [ 0, %9 ]
  %19 = phi i8* [ %91, %83 ], [ %14, %9 ]
  %20 = phi i8* [ %92, %83 ], [ %4, %9 ]
  %21 = phi i8* [ %93, %83 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  br label %23

23:                                               ; preds = %23, %15
  %24 = phi i64 [ 0, %15 ], [ %81, %23 ]
  %25 = phi <4 x i32> [ %22, %15 ], [ %79, %23 ]
  %26 = phi <4 x i32> [ zeroinitializer, %15 ], [ %80, %23 ]
  %27 = getelementptr inbounds i8, i8* %21, i64 %24
  %28 = bitcast i8* %27 to <4 x i8>*
  %29 = load <4 x i8>, <4 x i8>* %28, align 1
  %30 = getelementptr inbounds i8, i8* %27, i64 4
  %31 = bitcast i8* %30 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %29 to <4 x i32>
  %34 = zext <4 x i8> %32 to <4 x i32>
  %35 = getelementptr inbounds i8, i8* %19, i64 %24
  %36 = bitcast i8* %35 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = getelementptr inbounds i8, i8* %35, i64 4
  %39 = bitcast i8* %38 to <4 x i8>*
  %40 = load <4 x i8>, <4 x i8>* %39, align 1
  %41 = zext <4 x i8> %37 to <4 x i32>
  %42 = zext <4 x i8> %40 to <4 x i32>
  %43 = mul nuw nsw <4 x i32> %41, %33
  %44 = mul nuw nsw <4 x i32> %42, %34
  %45 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %33
  %46 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %34
  %47 = getelementptr inbounds i8, i8* %20, i64 %24
  %48 = bitcast i8* %47 to <4 x i8>*
  %49 = load <4 x i8>, <4 x i8>* %48, align 1
  %50 = getelementptr inbounds i8, i8* %47, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %49 to <4 x i32>
  %54 = zext <4 x i8> %52 to <4 x i32>
  %55 = mul nsw <4 x i32> %45, %53
  %56 = mul nsw <4 x i32> %46, %54
  %57 = add nuw nsw <4 x i32> %43, <i32 32, i32 32, i32 32, i32 32>
  %58 = add nuw nsw <4 x i32> %44, <i32 32, i32 32, i32 32, i32 32>
  %59 = add nsw <4 x i32> %57, %55
  %60 = add nsw <4 x i32> %58, %56
  %61 = ashr <4 x i32> %59, <i32 6, i32 6, i32 6, i32 6>
  %62 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %63 = getelementptr inbounds i8, i8* %16, i64 %24
  %64 = bitcast i8* %63 to <4 x i8>*
  %65 = load <4 x i8>, <4 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %63, i64 4
  %67 = bitcast i8* %66 to <4 x i8>*
  %68 = load <4 x i8>, <4 x i8>* %67, align 1
  %69 = zext <4 x i8> %65 to <4 x i32>
  %70 = zext <4 x i8> %68 to <4 x i32>
  %71 = sub nsw <4 x i32> %61, %69
  %72 = sub nsw <4 x i32> %62, %70
  %73 = icmp slt <4 x i32> %71, zeroinitializer
  %74 = icmp slt <4 x i32> %72, zeroinitializer
  %75 = sub nsw <4 x i32> zeroinitializer, %71
  %76 = sub nsw <4 x i32> zeroinitializer, %72
  %77 = select <4 x i1> %73, <4 x i32> %75, <4 x i32> %71
  %78 = select <4 x i1> %74, <4 x i32> %76, <4 x i32> %72
  %79 = add <4 x i32> %77, %25
  %80 = add <4 x i32> %78, %26
  %81 = add i64 %24, 8
  %82 = icmp eq i64 %81, 128
  br i1 %82, label %83, label %23, !llvm.loop !15

83:                                               ; preds = %23
  %84 = add <4 x i32> %80, %79
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %88 = add <4 x i32> %86, %87
  %89 = extractelement <4 x i32> %88, i32 0
  %90 = getelementptr inbounds i8, i8* %16, i64 %11
  %91 = getelementptr inbounds i8, i8* %19, i64 %12
  %92 = getelementptr inbounds i8, i8* %20, i64 128
  %93 = getelementptr inbounds i8, i8* %21, i64 %13
  %94 = add nuw nsw i32 %18, 1
  %95 = icmp eq i32 %94, 64
  br i1 %95, label %96, label %15

96:                                               ; preds = %83
  store i32 %89, i32* %8, align 4
  %97 = getelementptr inbounds i8*, i8** %2, i64 1
  %98 = load i8*, i8** %97, align 8
  br label %186

99:                                               ; preds = %9, %167
  %100 = phi i8* [ %174, %167 ], [ %0, %9 ]
  %101 = phi i32 [ %173, %167 ], [ 0, %9 ]
  %102 = phi i32 [ %178, %167 ], [ 0, %9 ]
  %103 = phi i8* [ %175, %167 ], [ %4, %9 ]
  %104 = phi i8* [ %176, %167 ], [ %14, %9 ]
  %105 = phi i8* [ %177, %167 ], [ %5, %9 ]
  %106 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %101, i32 0
  br label %107

107:                                              ; preds = %107, %99
  %108 = phi i64 [ 0, %99 ], [ %165, %107 ]
  %109 = phi <4 x i32> [ %106, %99 ], [ %163, %107 ]
  %110 = phi <4 x i32> [ zeroinitializer, %99 ], [ %164, %107 ]
  %111 = getelementptr inbounds i8, i8* %105, i64 %108
  %112 = bitcast i8* %111 to <4 x i8>*
  %113 = load <4 x i8>, <4 x i8>* %112, align 1
  %114 = getelementptr inbounds i8, i8* %111, i64 4
  %115 = bitcast i8* %114 to <4 x i8>*
  %116 = load <4 x i8>, <4 x i8>* %115, align 1
  %117 = zext <4 x i8> %113 to <4 x i32>
  %118 = zext <4 x i8> %116 to <4 x i32>
  %119 = getelementptr inbounds i8, i8* %103, i64 %108
  %120 = bitcast i8* %119 to <4 x i8>*
  %121 = load <4 x i8>, <4 x i8>* %120, align 1
  %122 = getelementptr inbounds i8, i8* %119, i64 4
  %123 = bitcast i8* %122 to <4 x i8>*
  %124 = load <4 x i8>, <4 x i8>* %123, align 1
  %125 = zext <4 x i8> %121 to <4 x i32>
  %126 = zext <4 x i8> %124 to <4 x i32>
  %127 = mul nuw nsw <4 x i32> %125, %117
  %128 = mul nuw nsw <4 x i32> %126, %118
  %129 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %117
  %130 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %118
  %131 = getelementptr inbounds i8, i8* %104, i64 %108
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = getelementptr inbounds i8, i8* %131, i64 4
  %135 = bitcast i8* %134 to <4 x i8>*
  %136 = load <4 x i8>, <4 x i8>* %135, align 1
  %137 = zext <4 x i8> %133 to <4 x i32>
  %138 = zext <4 x i8> %136 to <4 x i32>
  %139 = mul nsw <4 x i32> %129, %137
  %140 = mul nsw <4 x i32> %130, %138
  %141 = add nuw nsw <4 x i32> %127, <i32 32, i32 32, i32 32, i32 32>
  %142 = add nuw nsw <4 x i32> %128, <i32 32, i32 32, i32 32, i32 32>
  %143 = add nsw <4 x i32> %141, %139
  %144 = add nsw <4 x i32> %142, %140
  %145 = ashr <4 x i32> %143, <i32 6, i32 6, i32 6, i32 6>
  %146 = ashr <4 x i32> %144, <i32 6, i32 6, i32 6, i32 6>
  %147 = getelementptr inbounds i8, i8* %100, i64 %108
  %148 = bitcast i8* %147 to <4 x i8>*
  %149 = load <4 x i8>, <4 x i8>* %148, align 1
  %150 = getelementptr inbounds i8, i8* %147, i64 4
  %151 = bitcast i8* %150 to <4 x i8>*
  %152 = load <4 x i8>, <4 x i8>* %151, align 1
  %153 = zext <4 x i8> %149 to <4 x i32>
  %154 = zext <4 x i8> %152 to <4 x i32>
  %155 = sub nsw <4 x i32> %145, %153
  %156 = sub nsw <4 x i32> %146, %154
  %157 = icmp slt <4 x i32> %155, zeroinitializer
  %158 = icmp slt <4 x i32> %156, zeroinitializer
  %159 = sub nsw <4 x i32> zeroinitializer, %155
  %160 = sub nsw <4 x i32> zeroinitializer, %156
  %161 = select <4 x i1> %157, <4 x i32> %159, <4 x i32> %155
  %162 = select <4 x i1> %158, <4 x i32> %160, <4 x i32> %156
  %163 = add <4 x i32> %161, %109
  %164 = add <4 x i32> %162, %110
  %165 = add i64 %108, 8
  %166 = icmp eq i64 %165, 128
  br i1 %166, label %167, label %107, !llvm.loop !16

167:                                              ; preds = %107
  %168 = add <4 x i32> %164, %163
  %169 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %170 = add <4 x i32> %168, %169
  %171 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %172 = add <4 x i32> %170, %171
  %173 = extractelement <4 x i32> %172, i32 0
  %174 = getelementptr inbounds i8, i8* %100, i64 %11
  %175 = getelementptr inbounds i8, i8* %103, i64 128
  %176 = getelementptr inbounds i8, i8* %104, i64 %12
  %177 = getelementptr inbounds i8, i8* %105, i64 %13
  %178 = add nuw nsw i32 %102, 1
  %179 = icmp eq i32 %178, 64
  br i1 %179, label %180, label %99

180:                                              ; preds = %167
  store i32 %173, i32* %8, align 4
  %181 = getelementptr inbounds i8*, i8** %2, i64 1
  %182 = load i8*, i8** %181, align 8
  br label %437

183:                                              ; preds = %675, %424
  %184 = phi i32 [ %430, %424 ], [ %681, %675 ]
  %185 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %184, i32* %185, align 4
  ret void

186:                                              ; preds = %96, %254
  %187 = phi i8* [ %0, %96 ], [ %261, %254 ]
  %188 = phi i32 [ 0, %96 ], [ %260, %254 ]
  %189 = phi i32 [ 0, %96 ], [ %265, %254 ]
  %190 = phi i8* [ %98, %96 ], [ %262, %254 ]
  %191 = phi i8* [ %4, %96 ], [ %263, %254 ]
  %192 = phi i8* [ %5, %96 ], [ %264, %254 ]
  %193 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %188, i32 0
  br label %194

194:                                              ; preds = %194, %186
  %195 = phi i64 [ 0, %186 ], [ %252, %194 ]
  %196 = phi <4 x i32> [ %193, %186 ], [ %250, %194 ]
  %197 = phi <4 x i32> [ zeroinitializer, %186 ], [ %251, %194 ]
  %198 = getelementptr inbounds i8, i8* %192, i64 %195
  %199 = bitcast i8* %198 to <4 x i8>*
  %200 = load <4 x i8>, <4 x i8>* %199, align 1
  %201 = getelementptr inbounds i8, i8* %198, i64 4
  %202 = bitcast i8* %201 to <4 x i8>*
  %203 = load <4 x i8>, <4 x i8>* %202, align 1
  %204 = zext <4 x i8> %200 to <4 x i32>
  %205 = zext <4 x i8> %203 to <4 x i32>
  %206 = getelementptr inbounds i8, i8* %190, i64 %195
  %207 = bitcast i8* %206 to <4 x i8>*
  %208 = load <4 x i8>, <4 x i8>* %207, align 1
  %209 = getelementptr inbounds i8, i8* %206, i64 4
  %210 = bitcast i8* %209 to <4 x i8>*
  %211 = load <4 x i8>, <4 x i8>* %210, align 1
  %212 = zext <4 x i8> %208 to <4 x i32>
  %213 = zext <4 x i8> %211 to <4 x i32>
  %214 = mul nuw nsw <4 x i32> %212, %204
  %215 = mul nuw nsw <4 x i32> %213, %205
  %216 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %204
  %217 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %205
  %218 = getelementptr inbounds i8, i8* %191, i64 %195
  %219 = bitcast i8* %218 to <4 x i8>*
  %220 = load <4 x i8>, <4 x i8>* %219, align 1
  %221 = getelementptr inbounds i8, i8* %218, i64 4
  %222 = bitcast i8* %221 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1
  %224 = zext <4 x i8> %220 to <4 x i32>
  %225 = zext <4 x i8> %223 to <4 x i32>
  %226 = mul nsw <4 x i32> %216, %224
  %227 = mul nsw <4 x i32> %217, %225
  %228 = add nuw nsw <4 x i32> %214, <i32 32, i32 32, i32 32, i32 32>
  %229 = add nuw nsw <4 x i32> %215, <i32 32, i32 32, i32 32, i32 32>
  %230 = add nsw <4 x i32> %228, %226
  %231 = add nsw <4 x i32> %229, %227
  %232 = ashr <4 x i32> %230, <i32 6, i32 6, i32 6, i32 6>
  %233 = ashr <4 x i32> %231, <i32 6, i32 6, i32 6, i32 6>
  %234 = getelementptr inbounds i8, i8* %187, i64 %195
  %235 = bitcast i8* %234 to <4 x i8>*
  %236 = load <4 x i8>, <4 x i8>* %235, align 1
  %237 = getelementptr inbounds i8, i8* %234, i64 4
  %238 = bitcast i8* %237 to <4 x i8>*
  %239 = load <4 x i8>, <4 x i8>* %238, align 1
  %240 = zext <4 x i8> %236 to <4 x i32>
  %241 = zext <4 x i8> %239 to <4 x i32>
  %242 = sub nsw <4 x i32> %232, %240
  %243 = sub nsw <4 x i32> %233, %241
  %244 = icmp slt <4 x i32> %242, zeroinitializer
  %245 = icmp slt <4 x i32> %243, zeroinitializer
  %246 = sub nsw <4 x i32> zeroinitializer, %242
  %247 = sub nsw <4 x i32> zeroinitializer, %243
  %248 = select <4 x i1> %244, <4 x i32> %246, <4 x i32> %242
  %249 = select <4 x i1> %245, <4 x i32> %247, <4 x i32> %243
  %250 = add <4 x i32> %248, %196
  %251 = add <4 x i32> %249, %197
  %252 = add i64 %195, 8
  %253 = icmp eq i64 %252, 128
  br i1 %253, label %254, label %194, !llvm.loop !17

254:                                              ; preds = %194
  %255 = add <4 x i32> %251, %250
  %256 = shufflevector <4 x i32> %255, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %257 = add <4 x i32> %255, %256
  %258 = shufflevector <4 x i32> %257, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %259 = add <4 x i32> %257, %258
  %260 = extractelement <4 x i32> %259, i32 0
  %261 = getelementptr inbounds i8, i8* %187, i64 %11
  %262 = getelementptr inbounds i8, i8* %190, i64 %12
  %263 = getelementptr inbounds i8, i8* %191, i64 128
  %264 = getelementptr inbounds i8, i8* %192, i64 %13
  %265 = add nuw nsw i32 %189, 1
  %266 = icmp eq i32 %265, 64
  br i1 %266, label %267, label %186

267:                                              ; preds = %254
  %268 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %260, i32* %268, align 4
  %269 = getelementptr inbounds i8*, i8** %2, i64 2
  %270 = load i8*, i8** %269, align 8
  br label %271

271:                                              ; preds = %267, %339
  %272 = phi i8* [ %0, %267 ], [ %346, %339 ]
  %273 = phi i32 [ 0, %267 ], [ %345, %339 ]
  %274 = phi i32 [ 0, %267 ], [ %350, %339 ]
  %275 = phi i8* [ %270, %267 ], [ %347, %339 ]
  %276 = phi i8* [ %4, %267 ], [ %348, %339 ]
  %277 = phi i8* [ %5, %267 ], [ %349, %339 ]
  %278 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %273, i32 0
  br label %279

279:                                              ; preds = %279, %271
  %280 = phi i64 [ 0, %271 ], [ %337, %279 ]
  %281 = phi <4 x i32> [ %278, %271 ], [ %335, %279 ]
  %282 = phi <4 x i32> [ zeroinitializer, %271 ], [ %336, %279 ]
  %283 = getelementptr inbounds i8, i8* %277, i64 %280
  %284 = bitcast i8* %283 to <4 x i8>*
  %285 = load <4 x i8>, <4 x i8>* %284, align 1
  %286 = getelementptr inbounds i8, i8* %283, i64 4
  %287 = bitcast i8* %286 to <4 x i8>*
  %288 = load <4 x i8>, <4 x i8>* %287, align 1
  %289 = zext <4 x i8> %285 to <4 x i32>
  %290 = zext <4 x i8> %288 to <4 x i32>
  %291 = getelementptr inbounds i8, i8* %275, i64 %280
  %292 = bitcast i8* %291 to <4 x i8>*
  %293 = load <4 x i8>, <4 x i8>* %292, align 1
  %294 = getelementptr inbounds i8, i8* %291, i64 4
  %295 = bitcast i8* %294 to <4 x i8>*
  %296 = load <4 x i8>, <4 x i8>* %295, align 1
  %297 = zext <4 x i8> %293 to <4 x i32>
  %298 = zext <4 x i8> %296 to <4 x i32>
  %299 = mul nuw nsw <4 x i32> %297, %289
  %300 = mul nuw nsw <4 x i32> %298, %290
  %301 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %289
  %302 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %290
  %303 = getelementptr inbounds i8, i8* %276, i64 %280
  %304 = bitcast i8* %303 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = getelementptr inbounds i8, i8* %303, i64 4
  %307 = bitcast i8* %306 to <4 x i8>*
  %308 = load <4 x i8>, <4 x i8>* %307, align 1
  %309 = zext <4 x i8> %305 to <4 x i32>
  %310 = zext <4 x i8> %308 to <4 x i32>
  %311 = mul nsw <4 x i32> %301, %309
  %312 = mul nsw <4 x i32> %302, %310
  %313 = add nuw nsw <4 x i32> %299, <i32 32, i32 32, i32 32, i32 32>
  %314 = add nuw nsw <4 x i32> %300, <i32 32, i32 32, i32 32, i32 32>
  %315 = add nsw <4 x i32> %313, %311
  %316 = add nsw <4 x i32> %314, %312
  %317 = ashr <4 x i32> %315, <i32 6, i32 6, i32 6, i32 6>
  %318 = ashr <4 x i32> %316, <i32 6, i32 6, i32 6, i32 6>
  %319 = getelementptr inbounds i8, i8* %272, i64 %280
  %320 = bitcast i8* %319 to <4 x i8>*
  %321 = load <4 x i8>, <4 x i8>* %320, align 1
  %322 = getelementptr inbounds i8, i8* %319, i64 4
  %323 = bitcast i8* %322 to <4 x i8>*
  %324 = load <4 x i8>, <4 x i8>* %323, align 1
  %325 = zext <4 x i8> %321 to <4 x i32>
  %326 = zext <4 x i8> %324 to <4 x i32>
  %327 = sub nsw <4 x i32> %317, %325
  %328 = sub nsw <4 x i32> %318, %326
  %329 = icmp slt <4 x i32> %327, zeroinitializer
  %330 = icmp slt <4 x i32> %328, zeroinitializer
  %331 = sub nsw <4 x i32> zeroinitializer, %327
  %332 = sub nsw <4 x i32> zeroinitializer, %328
  %333 = select <4 x i1> %329, <4 x i32> %331, <4 x i32> %327
  %334 = select <4 x i1> %330, <4 x i32> %332, <4 x i32> %328
  %335 = add <4 x i32> %333, %281
  %336 = add <4 x i32> %334, %282
  %337 = add i64 %280, 8
  %338 = icmp eq i64 %337, 128
  br i1 %338, label %339, label %279, !llvm.loop !18

339:                                              ; preds = %279
  %340 = add <4 x i32> %336, %335
  %341 = shufflevector <4 x i32> %340, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %342 = add <4 x i32> %340, %341
  %343 = shufflevector <4 x i32> %342, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %344 = add <4 x i32> %342, %343
  %345 = extractelement <4 x i32> %344, i32 0
  %346 = getelementptr inbounds i8, i8* %272, i64 %11
  %347 = getelementptr inbounds i8, i8* %275, i64 %12
  %348 = getelementptr inbounds i8, i8* %276, i64 128
  %349 = getelementptr inbounds i8, i8* %277, i64 %13
  %350 = add nuw nsw i32 %274, 1
  %351 = icmp eq i32 %350, 64
  br i1 %351, label %352, label %271

352:                                              ; preds = %339
  %353 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %345, i32* %353, align 4
  %354 = getelementptr inbounds i8*, i8** %2, i64 3
  %355 = load i8*, i8** %354, align 8
  br label %356

356:                                              ; preds = %352, %424
  %357 = phi i8* [ %0, %352 ], [ %431, %424 ]
  %358 = phi i32 [ 0, %352 ], [ %430, %424 ]
  %359 = phi i32 [ 0, %352 ], [ %435, %424 ]
  %360 = phi i8* [ %355, %352 ], [ %432, %424 ]
  %361 = phi i8* [ %4, %352 ], [ %433, %424 ]
  %362 = phi i8* [ %5, %352 ], [ %434, %424 ]
  %363 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %358, i32 0
  br label %364

364:                                              ; preds = %364, %356
  %365 = phi i64 [ 0, %356 ], [ %422, %364 ]
  %366 = phi <4 x i32> [ %363, %356 ], [ %420, %364 ]
  %367 = phi <4 x i32> [ zeroinitializer, %356 ], [ %421, %364 ]
  %368 = getelementptr inbounds i8, i8* %362, i64 %365
  %369 = bitcast i8* %368 to <4 x i8>*
  %370 = load <4 x i8>, <4 x i8>* %369, align 1
  %371 = getelementptr inbounds i8, i8* %368, i64 4
  %372 = bitcast i8* %371 to <4 x i8>*
  %373 = load <4 x i8>, <4 x i8>* %372, align 1
  %374 = zext <4 x i8> %370 to <4 x i32>
  %375 = zext <4 x i8> %373 to <4 x i32>
  %376 = getelementptr inbounds i8, i8* %360, i64 %365
  %377 = bitcast i8* %376 to <4 x i8>*
  %378 = load <4 x i8>, <4 x i8>* %377, align 1
  %379 = getelementptr inbounds i8, i8* %376, i64 4
  %380 = bitcast i8* %379 to <4 x i8>*
  %381 = load <4 x i8>, <4 x i8>* %380, align 1
  %382 = zext <4 x i8> %378 to <4 x i32>
  %383 = zext <4 x i8> %381 to <4 x i32>
  %384 = mul nuw nsw <4 x i32> %382, %374
  %385 = mul nuw nsw <4 x i32> %383, %375
  %386 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %374
  %387 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %375
  %388 = getelementptr inbounds i8, i8* %361, i64 %365
  %389 = bitcast i8* %388 to <4 x i8>*
  %390 = load <4 x i8>, <4 x i8>* %389, align 1
  %391 = getelementptr inbounds i8, i8* %388, i64 4
  %392 = bitcast i8* %391 to <4 x i8>*
  %393 = load <4 x i8>, <4 x i8>* %392, align 1
  %394 = zext <4 x i8> %390 to <4 x i32>
  %395 = zext <4 x i8> %393 to <4 x i32>
  %396 = mul nsw <4 x i32> %386, %394
  %397 = mul nsw <4 x i32> %387, %395
  %398 = add nuw nsw <4 x i32> %384, <i32 32, i32 32, i32 32, i32 32>
  %399 = add nuw nsw <4 x i32> %385, <i32 32, i32 32, i32 32, i32 32>
  %400 = add nsw <4 x i32> %398, %396
  %401 = add nsw <4 x i32> %399, %397
  %402 = ashr <4 x i32> %400, <i32 6, i32 6, i32 6, i32 6>
  %403 = ashr <4 x i32> %401, <i32 6, i32 6, i32 6, i32 6>
  %404 = getelementptr inbounds i8, i8* %357, i64 %365
  %405 = bitcast i8* %404 to <4 x i8>*
  %406 = load <4 x i8>, <4 x i8>* %405, align 1
  %407 = getelementptr inbounds i8, i8* %404, i64 4
  %408 = bitcast i8* %407 to <4 x i8>*
  %409 = load <4 x i8>, <4 x i8>* %408, align 1
  %410 = zext <4 x i8> %406 to <4 x i32>
  %411 = zext <4 x i8> %409 to <4 x i32>
  %412 = sub nsw <4 x i32> %402, %410
  %413 = sub nsw <4 x i32> %403, %411
  %414 = icmp slt <4 x i32> %412, zeroinitializer
  %415 = icmp slt <4 x i32> %413, zeroinitializer
  %416 = sub nsw <4 x i32> zeroinitializer, %412
  %417 = sub nsw <4 x i32> zeroinitializer, %413
  %418 = select <4 x i1> %414, <4 x i32> %416, <4 x i32> %412
  %419 = select <4 x i1> %415, <4 x i32> %417, <4 x i32> %413
  %420 = add <4 x i32> %418, %366
  %421 = add <4 x i32> %419, %367
  %422 = add i64 %365, 8
  %423 = icmp eq i64 %422, 128
  br i1 %423, label %424, label %364, !llvm.loop !19

424:                                              ; preds = %364
  %425 = add <4 x i32> %421, %420
  %426 = shufflevector <4 x i32> %425, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %427 = add <4 x i32> %425, %426
  %428 = shufflevector <4 x i32> %427, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %429 = add <4 x i32> %427, %428
  %430 = extractelement <4 x i32> %429, i32 0
  %431 = getelementptr inbounds i8, i8* %357, i64 %11
  %432 = getelementptr inbounds i8, i8* %360, i64 %12
  %433 = getelementptr inbounds i8, i8* %361, i64 128
  %434 = getelementptr inbounds i8, i8* %362, i64 %13
  %435 = add nuw nsw i32 %359, 1
  %436 = icmp eq i32 %435, 64
  br i1 %436, label %183, label %356

437:                                              ; preds = %180, %505
  %438 = phi i8* [ %0, %180 ], [ %512, %505 ]
  %439 = phi i32 [ 0, %180 ], [ %511, %505 ]
  %440 = phi i32 [ 0, %180 ], [ %516, %505 ]
  %441 = phi i8* [ %4, %180 ], [ %513, %505 ]
  %442 = phi i8* [ %182, %180 ], [ %514, %505 ]
  %443 = phi i8* [ %5, %180 ], [ %515, %505 ]
  %444 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %439, i32 0
  br label %445

445:                                              ; preds = %445, %437
  %446 = phi i64 [ 0, %437 ], [ %503, %445 ]
  %447 = phi <4 x i32> [ %444, %437 ], [ %501, %445 ]
  %448 = phi <4 x i32> [ zeroinitializer, %437 ], [ %502, %445 ]
  %449 = getelementptr inbounds i8, i8* %443, i64 %446
  %450 = bitcast i8* %449 to <4 x i8>*
  %451 = load <4 x i8>, <4 x i8>* %450, align 1
  %452 = getelementptr inbounds i8, i8* %449, i64 4
  %453 = bitcast i8* %452 to <4 x i8>*
  %454 = load <4 x i8>, <4 x i8>* %453, align 1
  %455 = zext <4 x i8> %451 to <4 x i32>
  %456 = zext <4 x i8> %454 to <4 x i32>
  %457 = getelementptr inbounds i8, i8* %441, i64 %446
  %458 = bitcast i8* %457 to <4 x i8>*
  %459 = load <4 x i8>, <4 x i8>* %458, align 1
  %460 = getelementptr inbounds i8, i8* %457, i64 4
  %461 = bitcast i8* %460 to <4 x i8>*
  %462 = load <4 x i8>, <4 x i8>* %461, align 1
  %463 = zext <4 x i8> %459 to <4 x i32>
  %464 = zext <4 x i8> %462 to <4 x i32>
  %465 = mul nuw nsw <4 x i32> %463, %455
  %466 = mul nuw nsw <4 x i32> %464, %456
  %467 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %455
  %468 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %456
  %469 = getelementptr inbounds i8, i8* %442, i64 %446
  %470 = bitcast i8* %469 to <4 x i8>*
  %471 = load <4 x i8>, <4 x i8>* %470, align 1
  %472 = getelementptr inbounds i8, i8* %469, i64 4
  %473 = bitcast i8* %472 to <4 x i8>*
  %474 = load <4 x i8>, <4 x i8>* %473, align 1
  %475 = zext <4 x i8> %471 to <4 x i32>
  %476 = zext <4 x i8> %474 to <4 x i32>
  %477 = mul nsw <4 x i32> %467, %475
  %478 = mul nsw <4 x i32> %468, %476
  %479 = add nuw nsw <4 x i32> %465, <i32 32, i32 32, i32 32, i32 32>
  %480 = add nuw nsw <4 x i32> %466, <i32 32, i32 32, i32 32, i32 32>
  %481 = add nsw <4 x i32> %479, %477
  %482 = add nsw <4 x i32> %480, %478
  %483 = ashr <4 x i32> %481, <i32 6, i32 6, i32 6, i32 6>
  %484 = ashr <4 x i32> %482, <i32 6, i32 6, i32 6, i32 6>
  %485 = getelementptr inbounds i8, i8* %438, i64 %446
  %486 = bitcast i8* %485 to <4 x i8>*
  %487 = load <4 x i8>, <4 x i8>* %486, align 1
  %488 = getelementptr inbounds i8, i8* %485, i64 4
  %489 = bitcast i8* %488 to <4 x i8>*
  %490 = load <4 x i8>, <4 x i8>* %489, align 1
  %491 = zext <4 x i8> %487 to <4 x i32>
  %492 = zext <4 x i8> %490 to <4 x i32>
  %493 = sub nsw <4 x i32> %483, %491
  %494 = sub nsw <4 x i32> %484, %492
  %495 = icmp slt <4 x i32> %493, zeroinitializer
  %496 = icmp slt <4 x i32> %494, zeroinitializer
  %497 = sub nsw <4 x i32> zeroinitializer, %493
  %498 = sub nsw <4 x i32> zeroinitializer, %494
  %499 = select <4 x i1> %495, <4 x i32> %497, <4 x i32> %493
  %500 = select <4 x i1> %496, <4 x i32> %498, <4 x i32> %494
  %501 = add <4 x i32> %499, %447
  %502 = add <4 x i32> %500, %448
  %503 = add i64 %446, 8
  %504 = icmp eq i64 %503, 128
  br i1 %504, label %505, label %445, !llvm.loop !20

505:                                              ; preds = %445
  %506 = add <4 x i32> %502, %501
  %507 = shufflevector <4 x i32> %506, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %508 = add <4 x i32> %506, %507
  %509 = shufflevector <4 x i32> %508, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %510 = add <4 x i32> %508, %509
  %511 = extractelement <4 x i32> %510, i32 0
  %512 = getelementptr inbounds i8, i8* %438, i64 %11
  %513 = getelementptr inbounds i8, i8* %441, i64 128
  %514 = getelementptr inbounds i8, i8* %442, i64 %12
  %515 = getelementptr inbounds i8, i8* %443, i64 %13
  %516 = add nuw nsw i32 %440, 1
  %517 = icmp eq i32 %516, 64
  br i1 %517, label %518, label %437

518:                                              ; preds = %505
  %519 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %511, i32* %519, align 4
  %520 = getelementptr inbounds i8*, i8** %2, i64 2
  %521 = load i8*, i8** %520, align 8
  br label %522

522:                                              ; preds = %518, %590
  %523 = phi i8* [ %0, %518 ], [ %597, %590 ]
  %524 = phi i32 [ 0, %518 ], [ %596, %590 ]
  %525 = phi i32 [ 0, %518 ], [ %601, %590 ]
  %526 = phi i8* [ %4, %518 ], [ %598, %590 ]
  %527 = phi i8* [ %521, %518 ], [ %599, %590 ]
  %528 = phi i8* [ %5, %518 ], [ %600, %590 ]
  %529 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %524, i32 0
  br label %530

530:                                              ; preds = %530, %522
  %531 = phi i64 [ 0, %522 ], [ %588, %530 ]
  %532 = phi <4 x i32> [ %529, %522 ], [ %586, %530 ]
  %533 = phi <4 x i32> [ zeroinitializer, %522 ], [ %587, %530 ]
  %534 = getelementptr inbounds i8, i8* %528, i64 %531
  %535 = bitcast i8* %534 to <4 x i8>*
  %536 = load <4 x i8>, <4 x i8>* %535, align 1
  %537 = getelementptr inbounds i8, i8* %534, i64 4
  %538 = bitcast i8* %537 to <4 x i8>*
  %539 = load <4 x i8>, <4 x i8>* %538, align 1
  %540 = zext <4 x i8> %536 to <4 x i32>
  %541 = zext <4 x i8> %539 to <4 x i32>
  %542 = getelementptr inbounds i8, i8* %526, i64 %531
  %543 = bitcast i8* %542 to <4 x i8>*
  %544 = load <4 x i8>, <4 x i8>* %543, align 1
  %545 = getelementptr inbounds i8, i8* %542, i64 4
  %546 = bitcast i8* %545 to <4 x i8>*
  %547 = load <4 x i8>, <4 x i8>* %546, align 1
  %548 = zext <4 x i8> %544 to <4 x i32>
  %549 = zext <4 x i8> %547 to <4 x i32>
  %550 = mul nuw nsw <4 x i32> %548, %540
  %551 = mul nuw nsw <4 x i32> %549, %541
  %552 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %540
  %553 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %541
  %554 = getelementptr inbounds i8, i8* %527, i64 %531
  %555 = bitcast i8* %554 to <4 x i8>*
  %556 = load <4 x i8>, <4 x i8>* %555, align 1
  %557 = getelementptr inbounds i8, i8* %554, i64 4
  %558 = bitcast i8* %557 to <4 x i8>*
  %559 = load <4 x i8>, <4 x i8>* %558, align 1
  %560 = zext <4 x i8> %556 to <4 x i32>
  %561 = zext <4 x i8> %559 to <4 x i32>
  %562 = mul nsw <4 x i32> %552, %560
  %563 = mul nsw <4 x i32> %553, %561
  %564 = add nuw nsw <4 x i32> %550, <i32 32, i32 32, i32 32, i32 32>
  %565 = add nuw nsw <4 x i32> %551, <i32 32, i32 32, i32 32, i32 32>
  %566 = add nsw <4 x i32> %564, %562
  %567 = add nsw <4 x i32> %565, %563
  %568 = ashr <4 x i32> %566, <i32 6, i32 6, i32 6, i32 6>
  %569 = ashr <4 x i32> %567, <i32 6, i32 6, i32 6, i32 6>
  %570 = getelementptr inbounds i8, i8* %523, i64 %531
  %571 = bitcast i8* %570 to <4 x i8>*
  %572 = load <4 x i8>, <4 x i8>* %571, align 1
  %573 = getelementptr inbounds i8, i8* %570, i64 4
  %574 = bitcast i8* %573 to <4 x i8>*
  %575 = load <4 x i8>, <4 x i8>* %574, align 1
  %576 = zext <4 x i8> %572 to <4 x i32>
  %577 = zext <4 x i8> %575 to <4 x i32>
  %578 = sub nsw <4 x i32> %568, %576
  %579 = sub nsw <4 x i32> %569, %577
  %580 = icmp slt <4 x i32> %578, zeroinitializer
  %581 = icmp slt <4 x i32> %579, zeroinitializer
  %582 = sub nsw <4 x i32> zeroinitializer, %578
  %583 = sub nsw <4 x i32> zeroinitializer, %579
  %584 = select <4 x i1> %580, <4 x i32> %582, <4 x i32> %578
  %585 = select <4 x i1> %581, <4 x i32> %583, <4 x i32> %579
  %586 = add <4 x i32> %584, %532
  %587 = add <4 x i32> %585, %533
  %588 = add i64 %531, 8
  %589 = icmp eq i64 %588, 128
  br i1 %589, label %590, label %530, !llvm.loop !21

590:                                              ; preds = %530
  %591 = add <4 x i32> %587, %586
  %592 = shufflevector <4 x i32> %591, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %593 = add <4 x i32> %591, %592
  %594 = shufflevector <4 x i32> %593, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %595 = add <4 x i32> %593, %594
  %596 = extractelement <4 x i32> %595, i32 0
  %597 = getelementptr inbounds i8, i8* %523, i64 %11
  %598 = getelementptr inbounds i8, i8* %526, i64 128
  %599 = getelementptr inbounds i8, i8* %527, i64 %12
  %600 = getelementptr inbounds i8, i8* %528, i64 %13
  %601 = add nuw nsw i32 %525, 1
  %602 = icmp eq i32 %601, 64
  br i1 %602, label %603, label %522

603:                                              ; preds = %590
  %604 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %596, i32* %604, align 4
  %605 = getelementptr inbounds i8*, i8** %2, i64 3
  %606 = load i8*, i8** %605, align 8
  br label %607

607:                                              ; preds = %603, %675
  %608 = phi i8* [ %0, %603 ], [ %682, %675 ]
  %609 = phi i32 [ 0, %603 ], [ %681, %675 ]
  %610 = phi i32 [ 0, %603 ], [ %686, %675 ]
  %611 = phi i8* [ %4, %603 ], [ %683, %675 ]
  %612 = phi i8* [ %606, %603 ], [ %684, %675 ]
  %613 = phi i8* [ %5, %603 ], [ %685, %675 ]
  %614 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %609, i32 0
  br label %615

615:                                              ; preds = %615, %607
  %616 = phi i64 [ 0, %607 ], [ %673, %615 ]
  %617 = phi <4 x i32> [ %614, %607 ], [ %671, %615 ]
  %618 = phi <4 x i32> [ zeroinitializer, %607 ], [ %672, %615 ]
  %619 = getelementptr inbounds i8, i8* %613, i64 %616
  %620 = bitcast i8* %619 to <4 x i8>*
  %621 = load <4 x i8>, <4 x i8>* %620, align 1
  %622 = getelementptr inbounds i8, i8* %619, i64 4
  %623 = bitcast i8* %622 to <4 x i8>*
  %624 = load <4 x i8>, <4 x i8>* %623, align 1
  %625 = zext <4 x i8> %621 to <4 x i32>
  %626 = zext <4 x i8> %624 to <4 x i32>
  %627 = getelementptr inbounds i8, i8* %611, i64 %616
  %628 = bitcast i8* %627 to <4 x i8>*
  %629 = load <4 x i8>, <4 x i8>* %628, align 1
  %630 = getelementptr inbounds i8, i8* %627, i64 4
  %631 = bitcast i8* %630 to <4 x i8>*
  %632 = load <4 x i8>, <4 x i8>* %631, align 1
  %633 = zext <4 x i8> %629 to <4 x i32>
  %634 = zext <4 x i8> %632 to <4 x i32>
  %635 = mul nuw nsw <4 x i32> %633, %625
  %636 = mul nuw nsw <4 x i32> %634, %626
  %637 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %625
  %638 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %626
  %639 = getelementptr inbounds i8, i8* %612, i64 %616
  %640 = bitcast i8* %639 to <4 x i8>*
  %641 = load <4 x i8>, <4 x i8>* %640, align 1
  %642 = getelementptr inbounds i8, i8* %639, i64 4
  %643 = bitcast i8* %642 to <4 x i8>*
  %644 = load <4 x i8>, <4 x i8>* %643, align 1
  %645 = zext <4 x i8> %641 to <4 x i32>
  %646 = zext <4 x i8> %644 to <4 x i32>
  %647 = mul nsw <4 x i32> %637, %645
  %648 = mul nsw <4 x i32> %638, %646
  %649 = add nuw nsw <4 x i32> %635, <i32 32, i32 32, i32 32, i32 32>
  %650 = add nuw nsw <4 x i32> %636, <i32 32, i32 32, i32 32, i32 32>
  %651 = add nsw <4 x i32> %649, %647
  %652 = add nsw <4 x i32> %650, %648
  %653 = ashr <4 x i32> %651, <i32 6, i32 6, i32 6, i32 6>
  %654 = ashr <4 x i32> %652, <i32 6, i32 6, i32 6, i32 6>
  %655 = getelementptr inbounds i8, i8* %608, i64 %616
  %656 = bitcast i8* %655 to <4 x i8>*
  %657 = load <4 x i8>, <4 x i8>* %656, align 1
  %658 = getelementptr inbounds i8, i8* %655, i64 4
  %659 = bitcast i8* %658 to <4 x i8>*
  %660 = load <4 x i8>, <4 x i8>* %659, align 1
  %661 = zext <4 x i8> %657 to <4 x i32>
  %662 = zext <4 x i8> %660 to <4 x i32>
  %663 = sub nsw <4 x i32> %653, %661
  %664 = sub nsw <4 x i32> %654, %662
  %665 = icmp slt <4 x i32> %663, zeroinitializer
  %666 = icmp slt <4 x i32> %664, zeroinitializer
  %667 = sub nsw <4 x i32> zeroinitializer, %663
  %668 = sub nsw <4 x i32> zeroinitializer, %664
  %669 = select <4 x i1> %665, <4 x i32> %667, <4 x i32> %663
  %670 = select <4 x i1> %666, <4 x i32> %668, <4 x i32> %664
  %671 = add <4 x i32> %669, %617
  %672 = add <4 x i32> %670, %618
  %673 = add i64 %616, 8
  %674 = icmp eq i64 %673, 128
  br i1 %674, label %675, label %615, !llvm.loop !22

675:                                              ; preds = %615
  %676 = add <4 x i32> %672, %671
  %677 = shufflevector <4 x i32> %676, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %678 = add <4 x i32> %676, %677
  %679 = shufflevector <4 x i32> %678, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %680 = add <4 x i32> %678, %679
  %681 = extractelement <4 x i32> %680, i32 0
  %682 = getelementptr inbounds i8, i8* %608, i64 %11
  %683 = getelementptr inbounds i8, i8* %611, i64 128
  %684 = getelementptr inbounds i8, i8* %612, i64 %12
  %685 = getelementptr inbounds i8, i8* %613, i64 %13
  %686 = add nuw nsw i32 %610, 1
  %687 = icmp eq i32 %686, 64
  br i1 %687, label %183, label %607
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x128_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %65

13:                                               ; preds = %8, %53
  %14 = phi i8* [ %59, %53 ], [ %0, %8 ]
  %15 = phi i32 [ %58, %53 ], [ 0, %8 ]
  %16 = phi i32 [ %63, %53 ], [ 0, %8 ]
  %17 = phi i8* [ %60, %53 ], [ %2, %8 ]
  %18 = phi i8* [ %61, %53 ], [ %4, %8 ]
  %19 = phi i8* [ %62, %53 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  br label %21

21:                                               ; preds = %21, %13
  %22 = phi i64 [ 0, %13 ], [ %51, %21 ]
  %23 = phi <4 x i32> [ %20, %13 ], [ %50, %21 ]
  %24 = getelementptr inbounds i8, i8* %19, i64 %22
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = getelementptr inbounds i8, i8* %17, i64 %22
  %29 = bitcast i8* %28 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nuw nsw <4 x i32> %31, %27
  %33 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %27
  %34 = getelementptr inbounds i8, i8* %18, i64 %22
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = mul nsw <4 x i32> %33, %37
  %39 = add nuw nsw <4 x i32> %32, <i32 32, i32 32, i32 32, i32 32>
  %40 = add nsw <4 x i32> %39, %38
  %41 = ashr <4 x i32> %40, <i32 6, i32 6, i32 6, i32 6>
  %42 = getelementptr inbounds i8, i8* %14, i64 %22
  %43 = bitcast i8* %42 to <4 x i8>*
  %44 = load <4 x i8>, <4 x i8>* %43, align 1
  %45 = zext <4 x i8> %44 to <4 x i32>
  %46 = sub nsw <4 x i32> %41, %45
  %47 = icmp slt <4 x i32> %46, zeroinitializer
  %48 = sub nsw <4 x i32> zeroinitializer, %46
  %49 = select <4 x i1> %47, <4 x i32> %48, <4 x i32> %46
  %50 = add <4 x i32> %49, %23
  %51 = add i64 %22, 4
  %52 = icmp eq i64 %51, 64
  br i1 %52, label %53, label %21, !llvm.loop !23

53:                                               ; preds = %21
  %54 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %55 = add <4 x i32> %50, %54
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %57 = add <4 x i32> %55, %56
  %58 = extractelement <4 x i32> %57, i32 0
  %59 = getelementptr inbounds i8, i8* %14, i64 %10
  %60 = getelementptr inbounds i8, i8* %17, i64 %11
  %61 = getelementptr inbounds i8, i8* %18, i64 64
  %62 = getelementptr inbounds i8, i8* %19, i64 %12
  %63 = add nuw nsw i32 %16, 1
  %64 = icmp eq i32 %63, 128
  br i1 %64, label %117, label %13

65:                                               ; preds = %8, %105
  %66 = phi i8* [ %111, %105 ], [ %0, %8 ]
  %67 = phi i32 [ %110, %105 ], [ 0, %8 ]
  %68 = phi i32 [ %115, %105 ], [ 0, %8 ]
  %69 = phi i8* [ %112, %105 ], [ %4, %8 ]
  %70 = phi i8* [ %113, %105 ], [ %2, %8 ]
  %71 = phi i8* [ %114, %105 ], [ %5, %8 ]
  %72 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %67, i32 0
  br label %73

73:                                               ; preds = %73, %65
  %74 = phi i64 [ 0, %65 ], [ %103, %73 ]
  %75 = phi <4 x i32> [ %72, %65 ], [ %102, %73 ]
  %76 = getelementptr inbounds i8, i8* %71, i64 %74
  %77 = bitcast i8* %76 to <4 x i8>*
  %78 = load <4 x i8>, <4 x i8>* %77, align 1
  %79 = zext <4 x i8> %78 to <4 x i32>
  %80 = getelementptr inbounds i8, i8* %69, i64 %74
  %81 = bitcast i8* %80 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 1
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = mul nuw nsw <4 x i32> %83, %79
  %85 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %79
  %86 = getelementptr inbounds i8, i8* %70, i64 %74
  %87 = bitcast i8* %86 to <4 x i8>*
  %88 = load <4 x i8>, <4 x i8>* %87, align 1
  %89 = zext <4 x i8> %88 to <4 x i32>
  %90 = mul nsw <4 x i32> %85, %89
  %91 = add nuw nsw <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %92 = add nsw <4 x i32> %91, %90
  %93 = ashr <4 x i32> %92, <i32 6, i32 6, i32 6, i32 6>
  %94 = getelementptr inbounds i8, i8* %66, i64 %74
  %95 = bitcast i8* %94 to <4 x i8>*
  %96 = load <4 x i8>, <4 x i8>* %95, align 1
  %97 = zext <4 x i8> %96 to <4 x i32>
  %98 = sub nsw <4 x i32> %93, %97
  %99 = icmp slt <4 x i32> %98, zeroinitializer
  %100 = sub nsw <4 x i32> zeroinitializer, %98
  %101 = select <4 x i1> %99, <4 x i32> %100, <4 x i32> %98
  %102 = add <4 x i32> %101, %75
  %103 = add i64 %74, 4
  %104 = icmp eq i64 %103, 64
  br i1 %104, label %105, label %73, !llvm.loop !24

105:                                              ; preds = %73
  %106 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %107 = add <4 x i32> %102, %106
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %109 = add <4 x i32> %107, %108
  %110 = extractelement <4 x i32> %109, i32 0
  %111 = getelementptr inbounds i8, i8* %66, i64 %10
  %112 = getelementptr inbounds i8, i8* %69, i64 64
  %113 = getelementptr inbounds i8, i8* %70, i64 %11
  %114 = getelementptr inbounds i8, i8* %71, i64 %12
  %115 = add nuw nsw i32 %68, 1
  %116 = icmp eq i32 %115, 128
  br i1 %116, label %117, label %65

117:                                              ; preds = %105, %53
  %118 = phi i32 [ %58, %53 ], [ %110, %105 ]
  ret i32 %118
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad64x128x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %70

15:                                               ; preds = %9, %55
  %16 = phi i8* [ %61, %55 ], [ %0, %9 ]
  %17 = phi i32 [ %60, %55 ], [ 0, %9 ]
  %18 = phi i32 [ %65, %55 ], [ 0, %9 ]
  %19 = phi i8* [ %62, %55 ], [ %14, %9 ]
  %20 = phi i8* [ %63, %55 ], [ %4, %9 ]
  %21 = phi i8* [ %64, %55 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  br label %23

23:                                               ; preds = %23, %15
  %24 = phi i64 [ 0, %15 ], [ %53, %23 ]
  %25 = phi <4 x i32> [ %22, %15 ], [ %52, %23 ]
  %26 = getelementptr inbounds i8, i8* %21, i64 %24
  %27 = bitcast i8* %26 to <4 x i8>*
  %28 = load <4 x i8>, <4 x i8>* %27, align 1
  %29 = zext <4 x i8> %28 to <4 x i32>
  %30 = getelementptr inbounds i8, i8* %19, i64 %24
  %31 = bitcast i8* %30 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nuw nsw <4 x i32> %33, %29
  %35 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %29
  %36 = getelementptr inbounds i8, i8* %20, i64 %24
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %38 to <4 x i32>
  %40 = mul nsw <4 x i32> %35, %39
  %41 = add nuw nsw <4 x i32> %34, <i32 32, i32 32, i32 32, i32 32>
  %42 = add nsw <4 x i32> %41, %40
  %43 = ashr <4 x i32> %42, <i32 6, i32 6, i32 6, i32 6>
  %44 = getelementptr inbounds i8, i8* %16, i64 %24
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = sub nsw <4 x i32> %43, %47
  %49 = icmp slt <4 x i32> %48, zeroinitializer
  %50 = sub nsw <4 x i32> zeroinitializer, %48
  %51 = select <4 x i1> %49, <4 x i32> %50, <4 x i32> %48
  %52 = add <4 x i32> %51, %25
  %53 = add i64 %24, 4
  %54 = icmp eq i64 %53, 64
  br i1 %54, label %55, label %23, !llvm.loop !25

55:                                               ; preds = %23
  %56 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %57 = add <4 x i32> %52, %56
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %59 = add <4 x i32> %57, %58
  %60 = extractelement <4 x i32> %59, i32 0
  %61 = getelementptr inbounds i8, i8* %16, i64 %11
  %62 = getelementptr inbounds i8, i8* %19, i64 %12
  %63 = getelementptr inbounds i8, i8* %20, i64 64
  %64 = getelementptr inbounds i8, i8* %21, i64 %13
  %65 = add nuw nsw i32 %18, 1
  %66 = icmp eq i32 %65, 128
  br i1 %66, label %67, label %15

67:                                               ; preds = %55
  store i32 %60, i32* %8, align 4
  %68 = getelementptr inbounds i8*, i8** %2, i64 1
  %69 = load i8*, i8** %68, align 8
  br label %128

70:                                               ; preds = %9, %110
  %71 = phi i8* [ %116, %110 ], [ %0, %9 ]
  %72 = phi i32 [ %115, %110 ], [ 0, %9 ]
  %73 = phi i32 [ %120, %110 ], [ 0, %9 ]
  %74 = phi i8* [ %117, %110 ], [ %4, %9 ]
  %75 = phi i8* [ %118, %110 ], [ %14, %9 ]
  %76 = phi i8* [ %119, %110 ], [ %5, %9 ]
  %77 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %72, i32 0
  br label %78

78:                                               ; preds = %78, %70
  %79 = phi i64 [ 0, %70 ], [ %108, %78 ]
  %80 = phi <4 x i32> [ %77, %70 ], [ %107, %78 ]
  %81 = getelementptr inbounds i8, i8* %76, i64 %79
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = getelementptr inbounds i8, i8* %74, i64 %79
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 1
  %88 = zext <4 x i8> %87 to <4 x i32>
  %89 = mul nuw nsw <4 x i32> %88, %84
  %90 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %84
  %91 = getelementptr inbounds i8, i8* %75, i64 %79
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = mul nsw <4 x i32> %90, %94
  %96 = add nuw nsw <4 x i32> %89, <i32 32, i32 32, i32 32, i32 32>
  %97 = add nsw <4 x i32> %96, %95
  %98 = ashr <4 x i32> %97, <i32 6, i32 6, i32 6, i32 6>
  %99 = getelementptr inbounds i8, i8* %71, i64 %79
  %100 = bitcast i8* %99 to <4 x i8>*
  %101 = load <4 x i8>, <4 x i8>* %100, align 1
  %102 = zext <4 x i8> %101 to <4 x i32>
  %103 = sub nsw <4 x i32> %98, %102
  %104 = icmp slt <4 x i32> %103, zeroinitializer
  %105 = sub nsw <4 x i32> zeroinitializer, %103
  %106 = select <4 x i1> %104, <4 x i32> %105, <4 x i32> %103
  %107 = add <4 x i32> %106, %80
  %108 = add i64 %79, 4
  %109 = icmp eq i64 %108, 64
  br i1 %109, label %110, label %78, !llvm.loop !26

110:                                              ; preds = %78
  %111 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %112 = add <4 x i32> %107, %111
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %114 = add <4 x i32> %112, %113
  %115 = extractelement <4 x i32> %114, i32 0
  %116 = getelementptr inbounds i8, i8* %71, i64 %11
  %117 = getelementptr inbounds i8, i8* %74, i64 64
  %118 = getelementptr inbounds i8, i8* %75, i64 %12
  %119 = getelementptr inbounds i8, i8* %76, i64 %13
  %120 = add nuw nsw i32 %73, 1
  %121 = icmp eq i32 %120, 128
  br i1 %121, label %122, label %70

122:                                              ; preds = %110
  store i32 %115, i32* %8, align 4
  %123 = getelementptr inbounds i8*, i8** %2, i64 1
  %124 = load i8*, i8** %123, align 8
  br label %292

125:                                              ; preds = %444, %280
  %126 = phi i32 [ %285, %280 ], [ %449, %444 ]
  %127 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %126, i32* %127, align 4
  ret void

128:                                              ; preds = %67, %168
  %129 = phi i8* [ %0, %67 ], [ %174, %168 ]
  %130 = phi i32 [ 0, %67 ], [ %173, %168 ]
  %131 = phi i32 [ 0, %67 ], [ %178, %168 ]
  %132 = phi i8* [ %69, %67 ], [ %175, %168 ]
  %133 = phi i8* [ %4, %67 ], [ %176, %168 ]
  %134 = phi i8* [ %5, %67 ], [ %177, %168 ]
  %135 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %130, i32 0
  br label %136

136:                                              ; preds = %136, %128
  %137 = phi i64 [ 0, %128 ], [ %166, %136 ]
  %138 = phi <4 x i32> [ %135, %128 ], [ %165, %136 ]
  %139 = getelementptr inbounds i8, i8* %134, i64 %137
  %140 = bitcast i8* %139 to <4 x i8>*
  %141 = load <4 x i8>, <4 x i8>* %140, align 1
  %142 = zext <4 x i8> %141 to <4 x i32>
  %143 = getelementptr inbounds i8, i8* %132, i64 %137
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = mul nuw nsw <4 x i32> %146, %142
  %148 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %142
  %149 = getelementptr inbounds i8, i8* %133, i64 %137
  %150 = bitcast i8* %149 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = zext <4 x i8> %151 to <4 x i32>
  %153 = mul nsw <4 x i32> %148, %152
  %154 = add nuw nsw <4 x i32> %147, <i32 32, i32 32, i32 32, i32 32>
  %155 = add nsw <4 x i32> %154, %153
  %156 = ashr <4 x i32> %155, <i32 6, i32 6, i32 6, i32 6>
  %157 = getelementptr inbounds i8, i8* %129, i64 %137
  %158 = bitcast i8* %157 to <4 x i8>*
  %159 = load <4 x i8>, <4 x i8>* %158, align 1
  %160 = zext <4 x i8> %159 to <4 x i32>
  %161 = sub nsw <4 x i32> %156, %160
  %162 = icmp slt <4 x i32> %161, zeroinitializer
  %163 = sub nsw <4 x i32> zeroinitializer, %161
  %164 = select <4 x i1> %162, <4 x i32> %163, <4 x i32> %161
  %165 = add <4 x i32> %164, %138
  %166 = add i64 %137, 4
  %167 = icmp eq i64 %166, 64
  br i1 %167, label %168, label %136, !llvm.loop !27

168:                                              ; preds = %136
  %169 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %170 = add <4 x i32> %165, %169
  %171 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %172 = add <4 x i32> %170, %171
  %173 = extractelement <4 x i32> %172, i32 0
  %174 = getelementptr inbounds i8, i8* %129, i64 %11
  %175 = getelementptr inbounds i8, i8* %132, i64 %12
  %176 = getelementptr inbounds i8, i8* %133, i64 64
  %177 = getelementptr inbounds i8, i8* %134, i64 %13
  %178 = add nuw nsw i32 %131, 1
  %179 = icmp eq i32 %178, 128
  br i1 %179, label %180, label %128

180:                                              ; preds = %168
  %181 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %173, i32* %181, align 4
  %182 = getelementptr inbounds i8*, i8** %2, i64 2
  %183 = load i8*, i8** %182, align 8
  br label %184

184:                                              ; preds = %180, %224
  %185 = phi i8* [ %0, %180 ], [ %230, %224 ]
  %186 = phi i32 [ 0, %180 ], [ %229, %224 ]
  %187 = phi i32 [ 0, %180 ], [ %234, %224 ]
  %188 = phi i8* [ %183, %180 ], [ %231, %224 ]
  %189 = phi i8* [ %4, %180 ], [ %232, %224 ]
  %190 = phi i8* [ %5, %180 ], [ %233, %224 ]
  %191 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %186, i32 0
  br label %192

192:                                              ; preds = %192, %184
  %193 = phi i64 [ 0, %184 ], [ %222, %192 ]
  %194 = phi <4 x i32> [ %191, %184 ], [ %221, %192 ]
  %195 = getelementptr inbounds i8, i8* %190, i64 %193
  %196 = bitcast i8* %195 to <4 x i8>*
  %197 = load <4 x i8>, <4 x i8>* %196, align 1
  %198 = zext <4 x i8> %197 to <4 x i32>
  %199 = getelementptr inbounds i8, i8* %188, i64 %193
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = mul nuw nsw <4 x i32> %202, %198
  %204 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %198
  %205 = getelementptr inbounds i8, i8* %189, i64 %193
  %206 = bitcast i8* %205 to <4 x i8>*
  %207 = load <4 x i8>, <4 x i8>* %206, align 1
  %208 = zext <4 x i8> %207 to <4 x i32>
  %209 = mul nsw <4 x i32> %204, %208
  %210 = add nuw nsw <4 x i32> %203, <i32 32, i32 32, i32 32, i32 32>
  %211 = add nsw <4 x i32> %210, %209
  %212 = ashr <4 x i32> %211, <i32 6, i32 6, i32 6, i32 6>
  %213 = getelementptr inbounds i8, i8* %185, i64 %193
  %214 = bitcast i8* %213 to <4 x i8>*
  %215 = load <4 x i8>, <4 x i8>* %214, align 1
  %216 = zext <4 x i8> %215 to <4 x i32>
  %217 = sub nsw <4 x i32> %212, %216
  %218 = icmp slt <4 x i32> %217, zeroinitializer
  %219 = sub nsw <4 x i32> zeroinitializer, %217
  %220 = select <4 x i1> %218, <4 x i32> %219, <4 x i32> %217
  %221 = add <4 x i32> %220, %194
  %222 = add i64 %193, 4
  %223 = icmp eq i64 %222, 64
  br i1 %223, label %224, label %192, !llvm.loop !28

224:                                              ; preds = %192
  %225 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %226 = add <4 x i32> %221, %225
  %227 = shufflevector <4 x i32> %226, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %228 = add <4 x i32> %226, %227
  %229 = extractelement <4 x i32> %228, i32 0
  %230 = getelementptr inbounds i8, i8* %185, i64 %11
  %231 = getelementptr inbounds i8, i8* %188, i64 %12
  %232 = getelementptr inbounds i8, i8* %189, i64 64
  %233 = getelementptr inbounds i8, i8* %190, i64 %13
  %234 = add nuw nsw i32 %187, 1
  %235 = icmp eq i32 %234, 128
  br i1 %235, label %236, label %184

236:                                              ; preds = %224
  %237 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %229, i32* %237, align 4
  %238 = getelementptr inbounds i8*, i8** %2, i64 3
  %239 = load i8*, i8** %238, align 8
  br label %240

240:                                              ; preds = %236, %280
  %241 = phi i8* [ %0, %236 ], [ %286, %280 ]
  %242 = phi i32 [ 0, %236 ], [ %285, %280 ]
  %243 = phi i32 [ 0, %236 ], [ %290, %280 ]
  %244 = phi i8* [ %239, %236 ], [ %287, %280 ]
  %245 = phi i8* [ %4, %236 ], [ %288, %280 ]
  %246 = phi i8* [ %5, %236 ], [ %289, %280 ]
  %247 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %242, i32 0
  br label %248

248:                                              ; preds = %248, %240
  %249 = phi i64 [ 0, %240 ], [ %278, %248 ]
  %250 = phi <4 x i32> [ %247, %240 ], [ %277, %248 ]
  %251 = getelementptr inbounds i8, i8* %246, i64 %249
  %252 = bitcast i8* %251 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = getelementptr inbounds i8, i8* %244, i64 %249
  %256 = bitcast i8* %255 to <4 x i8>*
  %257 = load <4 x i8>, <4 x i8>* %256, align 1
  %258 = zext <4 x i8> %257 to <4 x i32>
  %259 = mul nuw nsw <4 x i32> %258, %254
  %260 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %254
  %261 = getelementptr inbounds i8, i8* %245, i64 %249
  %262 = bitcast i8* %261 to <4 x i8>*
  %263 = load <4 x i8>, <4 x i8>* %262, align 1
  %264 = zext <4 x i8> %263 to <4 x i32>
  %265 = mul nsw <4 x i32> %260, %264
  %266 = add nuw nsw <4 x i32> %259, <i32 32, i32 32, i32 32, i32 32>
  %267 = add nsw <4 x i32> %266, %265
  %268 = ashr <4 x i32> %267, <i32 6, i32 6, i32 6, i32 6>
  %269 = getelementptr inbounds i8, i8* %241, i64 %249
  %270 = bitcast i8* %269 to <4 x i8>*
  %271 = load <4 x i8>, <4 x i8>* %270, align 1
  %272 = zext <4 x i8> %271 to <4 x i32>
  %273 = sub nsw <4 x i32> %268, %272
  %274 = icmp slt <4 x i32> %273, zeroinitializer
  %275 = sub nsw <4 x i32> zeroinitializer, %273
  %276 = select <4 x i1> %274, <4 x i32> %275, <4 x i32> %273
  %277 = add <4 x i32> %276, %250
  %278 = add i64 %249, 4
  %279 = icmp eq i64 %278, 64
  br i1 %279, label %280, label %248, !llvm.loop !29

280:                                              ; preds = %248
  %281 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %282 = add <4 x i32> %277, %281
  %283 = shufflevector <4 x i32> %282, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %284 = add <4 x i32> %282, %283
  %285 = extractelement <4 x i32> %284, i32 0
  %286 = getelementptr inbounds i8, i8* %241, i64 %11
  %287 = getelementptr inbounds i8, i8* %244, i64 %12
  %288 = getelementptr inbounds i8, i8* %245, i64 64
  %289 = getelementptr inbounds i8, i8* %246, i64 %13
  %290 = add nuw nsw i32 %243, 1
  %291 = icmp eq i32 %290, 128
  br i1 %291, label %125, label %240

292:                                              ; preds = %122, %332
  %293 = phi i8* [ %0, %122 ], [ %338, %332 ]
  %294 = phi i32 [ 0, %122 ], [ %337, %332 ]
  %295 = phi i32 [ 0, %122 ], [ %342, %332 ]
  %296 = phi i8* [ %4, %122 ], [ %339, %332 ]
  %297 = phi i8* [ %124, %122 ], [ %340, %332 ]
  %298 = phi i8* [ %5, %122 ], [ %341, %332 ]
  %299 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %294, i32 0
  br label %300

300:                                              ; preds = %300, %292
  %301 = phi i64 [ 0, %292 ], [ %330, %300 ]
  %302 = phi <4 x i32> [ %299, %292 ], [ %329, %300 ]
  %303 = getelementptr inbounds i8, i8* %298, i64 %301
  %304 = bitcast i8* %303 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = zext <4 x i8> %305 to <4 x i32>
  %307 = getelementptr inbounds i8, i8* %296, i64 %301
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = zext <4 x i8> %309 to <4 x i32>
  %311 = mul nuw nsw <4 x i32> %310, %306
  %312 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %306
  %313 = getelementptr inbounds i8, i8* %297, i64 %301
  %314 = bitcast i8* %313 to <4 x i8>*
  %315 = load <4 x i8>, <4 x i8>* %314, align 1
  %316 = zext <4 x i8> %315 to <4 x i32>
  %317 = mul nsw <4 x i32> %312, %316
  %318 = add nuw nsw <4 x i32> %311, <i32 32, i32 32, i32 32, i32 32>
  %319 = add nsw <4 x i32> %318, %317
  %320 = ashr <4 x i32> %319, <i32 6, i32 6, i32 6, i32 6>
  %321 = getelementptr inbounds i8, i8* %293, i64 %301
  %322 = bitcast i8* %321 to <4 x i8>*
  %323 = load <4 x i8>, <4 x i8>* %322, align 1
  %324 = zext <4 x i8> %323 to <4 x i32>
  %325 = sub nsw <4 x i32> %320, %324
  %326 = icmp slt <4 x i32> %325, zeroinitializer
  %327 = sub nsw <4 x i32> zeroinitializer, %325
  %328 = select <4 x i1> %326, <4 x i32> %327, <4 x i32> %325
  %329 = add <4 x i32> %328, %302
  %330 = add i64 %301, 4
  %331 = icmp eq i64 %330, 64
  br i1 %331, label %332, label %300, !llvm.loop !30

332:                                              ; preds = %300
  %333 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %334 = add <4 x i32> %329, %333
  %335 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %336 = add <4 x i32> %334, %335
  %337 = extractelement <4 x i32> %336, i32 0
  %338 = getelementptr inbounds i8, i8* %293, i64 %11
  %339 = getelementptr inbounds i8, i8* %296, i64 64
  %340 = getelementptr inbounds i8, i8* %297, i64 %12
  %341 = getelementptr inbounds i8, i8* %298, i64 %13
  %342 = add nuw nsw i32 %295, 1
  %343 = icmp eq i32 %342, 128
  br i1 %343, label %344, label %292

344:                                              ; preds = %332
  %345 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %337, i32* %345, align 4
  %346 = getelementptr inbounds i8*, i8** %2, i64 2
  %347 = load i8*, i8** %346, align 8
  br label %348

348:                                              ; preds = %344, %388
  %349 = phi i8* [ %0, %344 ], [ %394, %388 ]
  %350 = phi i32 [ 0, %344 ], [ %393, %388 ]
  %351 = phi i32 [ 0, %344 ], [ %398, %388 ]
  %352 = phi i8* [ %4, %344 ], [ %395, %388 ]
  %353 = phi i8* [ %347, %344 ], [ %396, %388 ]
  %354 = phi i8* [ %5, %344 ], [ %397, %388 ]
  %355 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %350, i32 0
  br label %356

356:                                              ; preds = %356, %348
  %357 = phi i64 [ 0, %348 ], [ %386, %356 ]
  %358 = phi <4 x i32> [ %355, %348 ], [ %385, %356 ]
  %359 = getelementptr inbounds i8, i8* %354, i64 %357
  %360 = bitcast i8* %359 to <4 x i8>*
  %361 = load <4 x i8>, <4 x i8>* %360, align 1
  %362 = zext <4 x i8> %361 to <4 x i32>
  %363 = getelementptr inbounds i8, i8* %352, i64 %357
  %364 = bitcast i8* %363 to <4 x i8>*
  %365 = load <4 x i8>, <4 x i8>* %364, align 1
  %366 = zext <4 x i8> %365 to <4 x i32>
  %367 = mul nuw nsw <4 x i32> %366, %362
  %368 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %362
  %369 = getelementptr inbounds i8, i8* %353, i64 %357
  %370 = bitcast i8* %369 to <4 x i8>*
  %371 = load <4 x i8>, <4 x i8>* %370, align 1
  %372 = zext <4 x i8> %371 to <4 x i32>
  %373 = mul nsw <4 x i32> %368, %372
  %374 = add nuw nsw <4 x i32> %367, <i32 32, i32 32, i32 32, i32 32>
  %375 = add nsw <4 x i32> %374, %373
  %376 = ashr <4 x i32> %375, <i32 6, i32 6, i32 6, i32 6>
  %377 = getelementptr inbounds i8, i8* %349, i64 %357
  %378 = bitcast i8* %377 to <4 x i8>*
  %379 = load <4 x i8>, <4 x i8>* %378, align 1
  %380 = zext <4 x i8> %379 to <4 x i32>
  %381 = sub nsw <4 x i32> %376, %380
  %382 = icmp slt <4 x i32> %381, zeroinitializer
  %383 = sub nsw <4 x i32> zeroinitializer, %381
  %384 = select <4 x i1> %382, <4 x i32> %383, <4 x i32> %381
  %385 = add <4 x i32> %384, %358
  %386 = add i64 %357, 4
  %387 = icmp eq i64 %386, 64
  br i1 %387, label %388, label %356, !llvm.loop !31

388:                                              ; preds = %356
  %389 = shufflevector <4 x i32> %385, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %390 = add <4 x i32> %385, %389
  %391 = shufflevector <4 x i32> %390, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %392 = add <4 x i32> %390, %391
  %393 = extractelement <4 x i32> %392, i32 0
  %394 = getelementptr inbounds i8, i8* %349, i64 %11
  %395 = getelementptr inbounds i8, i8* %352, i64 64
  %396 = getelementptr inbounds i8, i8* %353, i64 %12
  %397 = getelementptr inbounds i8, i8* %354, i64 %13
  %398 = add nuw nsw i32 %351, 1
  %399 = icmp eq i32 %398, 128
  br i1 %399, label %400, label %348

400:                                              ; preds = %388
  %401 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %393, i32* %401, align 4
  %402 = getelementptr inbounds i8*, i8** %2, i64 3
  %403 = load i8*, i8** %402, align 8
  br label %404

404:                                              ; preds = %400, %444
  %405 = phi i8* [ %0, %400 ], [ %450, %444 ]
  %406 = phi i32 [ 0, %400 ], [ %449, %444 ]
  %407 = phi i32 [ 0, %400 ], [ %454, %444 ]
  %408 = phi i8* [ %4, %400 ], [ %451, %444 ]
  %409 = phi i8* [ %403, %400 ], [ %452, %444 ]
  %410 = phi i8* [ %5, %400 ], [ %453, %444 ]
  %411 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %406, i32 0
  br label %412

412:                                              ; preds = %412, %404
  %413 = phi i64 [ 0, %404 ], [ %442, %412 ]
  %414 = phi <4 x i32> [ %411, %404 ], [ %441, %412 ]
  %415 = getelementptr inbounds i8, i8* %410, i64 %413
  %416 = bitcast i8* %415 to <4 x i8>*
  %417 = load <4 x i8>, <4 x i8>* %416, align 1
  %418 = zext <4 x i8> %417 to <4 x i32>
  %419 = getelementptr inbounds i8, i8* %408, i64 %413
  %420 = bitcast i8* %419 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = mul nuw nsw <4 x i32> %422, %418
  %424 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %418
  %425 = getelementptr inbounds i8, i8* %409, i64 %413
  %426 = bitcast i8* %425 to <4 x i8>*
  %427 = load <4 x i8>, <4 x i8>* %426, align 1
  %428 = zext <4 x i8> %427 to <4 x i32>
  %429 = mul nsw <4 x i32> %424, %428
  %430 = add nuw nsw <4 x i32> %423, <i32 32, i32 32, i32 32, i32 32>
  %431 = add nsw <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 6, i32 6, i32 6, i32 6>
  %433 = getelementptr inbounds i8, i8* %405, i64 %413
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = zext <4 x i8> %435 to <4 x i32>
  %437 = sub nsw <4 x i32> %432, %436
  %438 = icmp slt <4 x i32> %437, zeroinitializer
  %439 = sub nsw <4 x i32> zeroinitializer, %437
  %440 = select <4 x i1> %438, <4 x i32> %439, <4 x i32> %437
  %441 = add <4 x i32> %440, %414
  %442 = add i64 %413, 4
  %443 = icmp eq i64 %442, 64
  br i1 %443, label %444, label %412, !llvm.loop !32

444:                                              ; preds = %412
  %445 = shufflevector <4 x i32> %441, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %446 = add <4 x i32> %441, %445
  %447 = shufflevector <4 x i32> %446, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %448 = add <4 x i32> %446, %447
  %449 = extractelement <4 x i32> %448, i32 0
  %450 = getelementptr inbounds i8, i8* %405, i64 %11
  %451 = getelementptr inbounds i8, i8* %408, i64 64
  %452 = getelementptr inbounds i8, i8* %409, i64 %12
  %453 = getelementptr inbounds i8, i8* %410, i64 %13
  %454 = add nuw nsw i32 %407, 1
  %455 = icmp eq i32 %454, 128
  br i1 %455, label %125, label %404
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x64_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %65

13:                                               ; preds = %8, %53
  %14 = phi i8* [ %59, %53 ], [ %0, %8 ]
  %15 = phi i32 [ %58, %53 ], [ 0, %8 ]
  %16 = phi i32 [ %63, %53 ], [ 0, %8 ]
  %17 = phi i8* [ %60, %53 ], [ %2, %8 ]
  %18 = phi i8* [ %61, %53 ], [ %4, %8 ]
  %19 = phi i8* [ %62, %53 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  br label %21

21:                                               ; preds = %21, %13
  %22 = phi i64 [ 0, %13 ], [ %51, %21 ]
  %23 = phi <4 x i32> [ %20, %13 ], [ %50, %21 ]
  %24 = getelementptr inbounds i8, i8* %19, i64 %22
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = getelementptr inbounds i8, i8* %17, i64 %22
  %29 = bitcast i8* %28 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nuw nsw <4 x i32> %31, %27
  %33 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %27
  %34 = getelementptr inbounds i8, i8* %18, i64 %22
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = mul nsw <4 x i32> %33, %37
  %39 = add nuw nsw <4 x i32> %32, <i32 32, i32 32, i32 32, i32 32>
  %40 = add nsw <4 x i32> %39, %38
  %41 = ashr <4 x i32> %40, <i32 6, i32 6, i32 6, i32 6>
  %42 = getelementptr inbounds i8, i8* %14, i64 %22
  %43 = bitcast i8* %42 to <4 x i8>*
  %44 = load <4 x i8>, <4 x i8>* %43, align 1
  %45 = zext <4 x i8> %44 to <4 x i32>
  %46 = sub nsw <4 x i32> %41, %45
  %47 = icmp slt <4 x i32> %46, zeroinitializer
  %48 = sub nsw <4 x i32> zeroinitializer, %46
  %49 = select <4 x i1> %47, <4 x i32> %48, <4 x i32> %46
  %50 = add <4 x i32> %49, %23
  %51 = add i64 %22, 4
  %52 = icmp eq i64 %51, 64
  br i1 %52, label %53, label %21, !llvm.loop !33

53:                                               ; preds = %21
  %54 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %55 = add <4 x i32> %50, %54
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %57 = add <4 x i32> %55, %56
  %58 = extractelement <4 x i32> %57, i32 0
  %59 = getelementptr inbounds i8, i8* %14, i64 %10
  %60 = getelementptr inbounds i8, i8* %17, i64 %11
  %61 = getelementptr inbounds i8, i8* %18, i64 64
  %62 = getelementptr inbounds i8, i8* %19, i64 %12
  %63 = add nuw nsw i32 %16, 1
  %64 = icmp eq i32 %63, 64
  br i1 %64, label %117, label %13

65:                                               ; preds = %8, %105
  %66 = phi i8* [ %111, %105 ], [ %0, %8 ]
  %67 = phi i32 [ %110, %105 ], [ 0, %8 ]
  %68 = phi i32 [ %115, %105 ], [ 0, %8 ]
  %69 = phi i8* [ %112, %105 ], [ %4, %8 ]
  %70 = phi i8* [ %113, %105 ], [ %2, %8 ]
  %71 = phi i8* [ %114, %105 ], [ %5, %8 ]
  %72 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %67, i32 0
  br label %73

73:                                               ; preds = %73, %65
  %74 = phi i64 [ 0, %65 ], [ %103, %73 ]
  %75 = phi <4 x i32> [ %72, %65 ], [ %102, %73 ]
  %76 = getelementptr inbounds i8, i8* %71, i64 %74
  %77 = bitcast i8* %76 to <4 x i8>*
  %78 = load <4 x i8>, <4 x i8>* %77, align 1
  %79 = zext <4 x i8> %78 to <4 x i32>
  %80 = getelementptr inbounds i8, i8* %69, i64 %74
  %81 = bitcast i8* %80 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 1
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = mul nuw nsw <4 x i32> %83, %79
  %85 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %79
  %86 = getelementptr inbounds i8, i8* %70, i64 %74
  %87 = bitcast i8* %86 to <4 x i8>*
  %88 = load <4 x i8>, <4 x i8>* %87, align 1
  %89 = zext <4 x i8> %88 to <4 x i32>
  %90 = mul nsw <4 x i32> %85, %89
  %91 = add nuw nsw <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %92 = add nsw <4 x i32> %91, %90
  %93 = ashr <4 x i32> %92, <i32 6, i32 6, i32 6, i32 6>
  %94 = getelementptr inbounds i8, i8* %66, i64 %74
  %95 = bitcast i8* %94 to <4 x i8>*
  %96 = load <4 x i8>, <4 x i8>* %95, align 1
  %97 = zext <4 x i8> %96 to <4 x i32>
  %98 = sub nsw <4 x i32> %93, %97
  %99 = icmp slt <4 x i32> %98, zeroinitializer
  %100 = sub nsw <4 x i32> zeroinitializer, %98
  %101 = select <4 x i1> %99, <4 x i32> %100, <4 x i32> %98
  %102 = add <4 x i32> %101, %75
  %103 = add i64 %74, 4
  %104 = icmp eq i64 %103, 64
  br i1 %104, label %105, label %73, !llvm.loop !34

105:                                              ; preds = %73
  %106 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %107 = add <4 x i32> %102, %106
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %109 = add <4 x i32> %107, %108
  %110 = extractelement <4 x i32> %109, i32 0
  %111 = getelementptr inbounds i8, i8* %66, i64 %10
  %112 = getelementptr inbounds i8, i8* %69, i64 64
  %113 = getelementptr inbounds i8, i8* %70, i64 %11
  %114 = getelementptr inbounds i8, i8* %71, i64 %12
  %115 = add nuw nsw i32 %68, 1
  %116 = icmp eq i32 %115, 64
  br i1 %116, label %117, label %65

117:                                              ; preds = %105, %53
  %118 = phi i32 [ %58, %53 ], [ %110, %105 ]
  ret i32 %118
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad64x64x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %70

15:                                               ; preds = %9, %55
  %16 = phi i8* [ %61, %55 ], [ %0, %9 ]
  %17 = phi i32 [ %60, %55 ], [ 0, %9 ]
  %18 = phi i32 [ %65, %55 ], [ 0, %9 ]
  %19 = phi i8* [ %62, %55 ], [ %14, %9 ]
  %20 = phi i8* [ %63, %55 ], [ %4, %9 ]
  %21 = phi i8* [ %64, %55 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  br label %23

23:                                               ; preds = %23, %15
  %24 = phi i64 [ 0, %15 ], [ %53, %23 ]
  %25 = phi <4 x i32> [ %22, %15 ], [ %52, %23 ]
  %26 = getelementptr inbounds i8, i8* %21, i64 %24
  %27 = bitcast i8* %26 to <4 x i8>*
  %28 = load <4 x i8>, <4 x i8>* %27, align 1
  %29 = zext <4 x i8> %28 to <4 x i32>
  %30 = getelementptr inbounds i8, i8* %19, i64 %24
  %31 = bitcast i8* %30 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nuw nsw <4 x i32> %33, %29
  %35 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %29
  %36 = getelementptr inbounds i8, i8* %20, i64 %24
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %38 to <4 x i32>
  %40 = mul nsw <4 x i32> %35, %39
  %41 = add nuw nsw <4 x i32> %34, <i32 32, i32 32, i32 32, i32 32>
  %42 = add nsw <4 x i32> %41, %40
  %43 = ashr <4 x i32> %42, <i32 6, i32 6, i32 6, i32 6>
  %44 = getelementptr inbounds i8, i8* %16, i64 %24
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = sub nsw <4 x i32> %43, %47
  %49 = icmp slt <4 x i32> %48, zeroinitializer
  %50 = sub nsw <4 x i32> zeroinitializer, %48
  %51 = select <4 x i1> %49, <4 x i32> %50, <4 x i32> %48
  %52 = add <4 x i32> %51, %25
  %53 = add i64 %24, 4
  %54 = icmp eq i64 %53, 64
  br i1 %54, label %55, label %23, !llvm.loop !35

55:                                               ; preds = %23
  %56 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %57 = add <4 x i32> %52, %56
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %59 = add <4 x i32> %57, %58
  %60 = extractelement <4 x i32> %59, i32 0
  %61 = getelementptr inbounds i8, i8* %16, i64 %11
  %62 = getelementptr inbounds i8, i8* %19, i64 %12
  %63 = getelementptr inbounds i8, i8* %20, i64 64
  %64 = getelementptr inbounds i8, i8* %21, i64 %13
  %65 = add nuw nsw i32 %18, 1
  %66 = icmp eq i32 %65, 64
  br i1 %66, label %67, label %15

67:                                               ; preds = %55
  store i32 %60, i32* %8, align 4
  %68 = getelementptr inbounds i8*, i8** %2, i64 1
  %69 = load i8*, i8** %68, align 8
  br label %128

70:                                               ; preds = %9, %110
  %71 = phi i8* [ %116, %110 ], [ %0, %9 ]
  %72 = phi i32 [ %115, %110 ], [ 0, %9 ]
  %73 = phi i32 [ %120, %110 ], [ 0, %9 ]
  %74 = phi i8* [ %117, %110 ], [ %4, %9 ]
  %75 = phi i8* [ %118, %110 ], [ %14, %9 ]
  %76 = phi i8* [ %119, %110 ], [ %5, %9 ]
  %77 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %72, i32 0
  br label %78

78:                                               ; preds = %78, %70
  %79 = phi i64 [ 0, %70 ], [ %108, %78 ]
  %80 = phi <4 x i32> [ %77, %70 ], [ %107, %78 ]
  %81 = getelementptr inbounds i8, i8* %76, i64 %79
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = getelementptr inbounds i8, i8* %74, i64 %79
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 1
  %88 = zext <4 x i8> %87 to <4 x i32>
  %89 = mul nuw nsw <4 x i32> %88, %84
  %90 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %84
  %91 = getelementptr inbounds i8, i8* %75, i64 %79
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = mul nsw <4 x i32> %90, %94
  %96 = add nuw nsw <4 x i32> %89, <i32 32, i32 32, i32 32, i32 32>
  %97 = add nsw <4 x i32> %96, %95
  %98 = ashr <4 x i32> %97, <i32 6, i32 6, i32 6, i32 6>
  %99 = getelementptr inbounds i8, i8* %71, i64 %79
  %100 = bitcast i8* %99 to <4 x i8>*
  %101 = load <4 x i8>, <4 x i8>* %100, align 1
  %102 = zext <4 x i8> %101 to <4 x i32>
  %103 = sub nsw <4 x i32> %98, %102
  %104 = icmp slt <4 x i32> %103, zeroinitializer
  %105 = sub nsw <4 x i32> zeroinitializer, %103
  %106 = select <4 x i1> %104, <4 x i32> %105, <4 x i32> %103
  %107 = add <4 x i32> %106, %80
  %108 = add i64 %79, 4
  %109 = icmp eq i64 %108, 64
  br i1 %109, label %110, label %78, !llvm.loop !36

110:                                              ; preds = %78
  %111 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %112 = add <4 x i32> %107, %111
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %114 = add <4 x i32> %112, %113
  %115 = extractelement <4 x i32> %114, i32 0
  %116 = getelementptr inbounds i8, i8* %71, i64 %11
  %117 = getelementptr inbounds i8, i8* %74, i64 64
  %118 = getelementptr inbounds i8, i8* %75, i64 %12
  %119 = getelementptr inbounds i8, i8* %76, i64 %13
  %120 = add nuw nsw i32 %73, 1
  %121 = icmp eq i32 %120, 64
  br i1 %121, label %122, label %70

122:                                              ; preds = %110
  store i32 %115, i32* %8, align 4
  %123 = getelementptr inbounds i8*, i8** %2, i64 1
  %124 = load i8*, i8** %123, align 8
  br label %292

125:                                              ; preds = %444, %280
  %126 = phi i32 [ %285, %280 ], [ %449, %444 ]
  %127 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %126, i32* %127, align 4
  ret void

128:                                              ; preds = %67, %168
  %129 = phi i8* [ %0, %67 ], [ %174, %168 ]
  %130 = phi i32 [ 0, %67 ], [ %173, %168 ]
  %131 = phi i32 [ 0, %67 ], [ %178, %168 ]
  %132 = phi i8* [ %69, %67 ], [ %175, %168 ]
  %133 = phi i8* [ %4, %67 ], [ %176, %168 ]
  %134 = phi i8* [ %5, %67 ], [ %177, %168 ]
  %135 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %130, i32 0
  br label %136

136:                                              ; preds = %136, %128
  %137 = phi i64 [ 0, %128 ], [ %166, %136 ]
  %138 = phi <4 x i32> [ %135, %128 ], [ %165, %136 ]
  %139 = getelementptr inbounds i8, i8* %134, i64 %137
  %140 = bitcast i8* %139 to <4 x i8>*
  %141 = load <4 x i8>, <4 x i8>* %140, align 1
  %142 = zext <4 x i8> %141 to <4 x i32>
  %143 = getelementptr inbounds i8, i8* %132, i64 %137
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = mul nuw nsw <4 x i32> %146, %142
  %148 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %142
  %149 = getelementptr inbounds i8, i8* %133, i64 %137
  %150 = bitcast i8* %149 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = zext <4 x i8> %151 to <4 x i32>
  %153 = mul nsw <4 x i32> %148, %152
  %154 = add nuw nsw <4 x i32> %147, <i32 32, i32 32, i32 32, i32 32>
  %155 = add nsw <4 x i32> %154, %153
  %156 = ashr <4 x i32> %155, <i32 6, i32 6, i32 6, i32 6>
  %157 = getelementptr inbounds i8, i8* %129, i64 %137
  %158 = bitcast i8* %157 to <4 x i8>*
  %159 = load <4 x i8>, <4 x i8>* %158, align 1
  %160 = zext <4 x i8> %159 to <4 x i32>
  %161 = sub nsw <4 x i32> %156, %160
  %162 = icmp slt <4 x i32> %161, zeroinitializer
  %163 = sub nsw <4 x i32> zeroinitializer, %161
  %164 = select <4 x i1> %162, <4 x i32> %163, <4 x i32> %161
  %165 = add <4 x i32> %164, %138
  %166 = add i64 %137, 4
  %167 = icmp eq i64 %166, 64
  br i1 %167, label %168, label %136, !llvm.loop !37

168:                                              ; preds = %136
  %169 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %170 = add <4 x i32> %165, %169
  %171 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %172 = add <4 x i32> %170, %171
  %173 = extractelement <4 x i32> %172, i32 0
  %174 = getelementptr inbounds i8, i8* %129, i64 %11
  %175 = getelementptr inbounds i8, i8* %132, i64 %12
  %176 = getelementptr inbounds i8, i8* %133, i64 64
  %177 = getelementptr inbounds i8, i8* %134, i64 %13
  %178 = add nuw nsw i32 %131, 1
  %179 = icmp eq i32 %178, 64
  br i1 %179, label %180, label %128

180:                                              ; preds = %168
  %181 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %173, i32* %181, align 4
  %182 = getelementptr inbounds i8*, i8** %2, i64 2
  %183 = load i8*, i8** %182, align 8
  br label %184

184:                                              ; preds = %180, %224
  %185 = phi i8* [ %0, %180 ], [ %230, %224 ]
  %186 = phi i32 [ 0, %180 ], [ %229, %224 ]
  %187 = phi i32 [ 0, %180 ], [ %234, %224 ]
  %188 = phi i8* [ %183, %180 ], [ %231, %224 ]
  %189 = phi i8* [ %4, %180 ], [ %232, %224 ]
  %190 = phi i8* [ %5, %180 ], [ %233, %224 ]
  %191 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %186, i32 0
  br label %192

192:                                              ; preds = %192, %184
  %193 = phi i64 [ 0, %184 ], [ %222, %192 ]
  %194 = phi <4 x i32> [ %191, %184 ], [ %221, %192 ]
  %195 = getelementptr inbounds i8, i8* %190, i64 %193
  %196 = bitcast i8* %195 to <4 x i8>*
  %197 = load <4 x i8>, <4 x i8>* %196, align 1
  %198 = zext <4 x i8> %197 to <4 x i32>
  %199 = getelementptr inbounds i8, i8* %188, i64 %193
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = mul nuw nsw <4 x i32> %202, %198
  %204 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %198
  %205 = getelementptr inbounds i8, i8* %189, i64 %193
  %206 = bitcast i8* %205 to <4 x i8>*
  %207 = load <4 x i8>, <4 x i8>* %206, align 1
  %208 = zext <4 x i8> %207 to <4 x i32>
  %209 = mul nsw <4 x i32> %204, %208
  %210 = add nuw nsw <4 x i32> %203, <i32 32, i32 32, i32 32, i32 32>
  %211 = add nsw <4 x i32> %210, %209
  %212 = ashr <4 x i32> %211, <i32 6, i32 6, i32 6, i32 6>
  %213 = getelementptr inbounds i8, i8* %185, i64 %193
  %214 = bitcast i8* %213 to <4 x i8>*
  %215 = load <4 x i8>, <4 x i8>* %214, align 1
  %216 = zext <4 x i8> %215 to <4 x i32>
  %217 = sub nsw <4 x i32> %212, %216
  %218 = icmp slt <4 x i32> %217, zeroinitializer
  %219 = sub nsw <4 x i32> zeroinitializer, %217
  %220 = select <4 x i1> %218, <4 x i32> %219, <4 x i32> %217
  %221 = add <4 x i32> %220, %194
  %222 = add i64 %193, 4
  %223 = icmp eq i64 %222, 64
  br i1 %223, label %224, label %192, !llvm.loop !38

224:                                              ; preds = %192
  %225 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %226 = add <4 x i32> %221, %225
  %227 = shufflevector <4 x i32> %226, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %228 = add <4 x i32> %226, %227
  %229 = extractelement <4 x i32> %228, i32 0
  %230 = getelementptr inbounds i8, i8* %185, i64 %11
  %231 = getelementptr inbounds i8, i8* %188, i64 %12
  %232 = getelementptr inbounds i8, i8* %189, i64 64
  %233 = getelementptr inbounds i8, i8* %190, i64 %13
  %234 = add nuw nsw i32 %187, 1
  %235 = icmp eq i32 %234, 64
  br i1 %235, label %236, label %184

236:                                              ; preds = %224
  %237 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %229, i32* %237, align 4
  %238 = getelementptr inbounds i8*, i8** %2, i64 3
  %239 = load i8*, i8** %238, align 8
  br label %240

240:                                              ; preds = %236, %280
  %241 = phi i8* [ %0, %236 ], [ %286, %280 ]
  %242 = phi i32 [ 0, %236 ], [ %285, %280 ]
  %243 = phi i32 [ 0, %236 ], [ %290, %280 ]
  %244 = phi i8* [ %239, %236 ], [ %287, %280 ]
  %245 = phi i8* [ %4, %236 ], [ %288, %280 ]
  %246 = phi i8* [ %5, %236 ], [ %289, %280 ]
  %247 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %242, i32 0
  br label %248

248:                                              ; preds = %248, %240
  %249 = phi i64 [ 0, %240 ], [ %278, %248 ]
  %250 = phi <4 x i32> [ %247, %240 ], [ %277, %248 ]
  %251 = getelementptr inbounds i8, i8* %246, i64 %249
  %252 = bitcast i8* %251 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = getelementptr inbounds i8, i8* %244, i64 %249
  %256 = bitcast i8* %255 to <4 x i8>*
  %257 = load <4 x i8>, <4 x i8>* %256, align 1
  %258 = zext <4 x i8> %257 to <4 x i32>
  %259 = mul nuw nsw <4 x i32> %258, %254
  %260 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %254
  %261 = getelementptr inbounds i8, i8* %245, i64 %249
  %262 = bitcast i8* %261 to <4 x i8>*
  %263 = load <4 x i8>, <4 x i8>* %262, align 1
  %264 = zext <4 x i8> %263 to <4 x i32>
  %265 = mul nsw <4 x i32> %260, %264
  %266 = add nuw nsw <4 x i32> %259, <i32 32, i32 32, i32 32, i32 32>
  %267 = add nsw <4 x i32> %266, %265
  %268 = ashr <4 x i32> %267, <i32 6, i32 6, i32 6, i32 6>
  %269 = getelementptr inbounds i8, i8* %241, i64 %249
  %270 = bitcast i8* %269 to <4 x i8>*
  %271 = load <4 x i8>, <4 x i8>* %270, align 1
  %272 = zext <4 x i8> %271 to <4 x i32>
  %273 = sub nsw <4 x i32> %268, %272
  %274 = icmp slt <4 x i32> %273, zeroinitializer
  %275 = sub nsw <4 x i32> zeroinitializer, %273
  %276 = select <4 x i1> %274, <4 x i32> %275, <4 x i32> %273
  %277 = add <4 x i32> %276, %250
  %278 = add i64 %249, 4
  %279 = icmp eq i64 %278, 64
  br i1 %279, label %280, label %248, !llvm.loop !39

280:                                              ; preds = %248
  %281 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %282 = add <4 x i32> %277, %281
  %283 = shufflevector <4 x i32> %282, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %284 = add <4 x i32> %282, %283
  %285 = extractelement <4 x i32> %284, i32 0
  %286 = getelementptr inbounds i8, i8* %241, i64 %11
  %287 = getelementptr inbounds i8, i8* %244, i64 %12
  %288 = getelementptr inbounds i8, i8* %245, i64 64
  %289 = getelementptr inbounds i8, i8* %246, i64 %13
  %290 = add nuw nsw i32 %243, 1
  %291 = icmp eq i32 %290, 64
  br i1 %291, label %125, label %240

292:                                              ; preds = %122, %332
  %293 = phi i8* [ %0, %122 ], [ %338, %332 ]
  %294 = phi i32 [ 0, %122 ], [ %337, %332 ]
  %295 = phi i32 [ 0, %122 ], [ %342, %332 ]
  %296 = phi i8* [ %4, %122 ], [ %339, %332 ]
  %297 = phi i8* [ %124, %122 ], [ %340, %332 ]
  %298 = phi i8* [ %5, %122 ], [ %341, %332 ]
  %299 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %294, i32 0
  br label %300

300:                                              ; preds = %300, %292
  %301 = phi i64 [ 0, %292 ], [ %330, %300 ]
  %302 = phi <4 x i32> [ %299, %292 ], [ %329, %300 ]
  %303 = getelementptr inbounds i8, i8* %298, i64 %301
  %304 = bitcast i8* %303 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = zext <4 x i8> %305 to <4 x i32>
  %307 = getelementptr inbounds i8, i8* %296, i64 %301
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = zext <4 x i8> %309 to <4 x i32>
  %311 = mul nuw nsw <4 x i32> %310, %306
  %312 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %306
  %313 = getelementptr inbounds i8, i8* %297, i64 %301
  %314 = bitcast i8* %313 to <4 x i8>*
  %315 = load <4 x i8>, <4 x i8>* %314, align 1
  %316 = zext <4 x i8> %315 to <4 x i32>
  %317 = mul nsw <4 x i32> %312, %316
  %318 = add nuw nsw <4 x i32> %311, <i32 32, i32 32, i32 32, i32 32>
  %319 = add nsw <4 x i32> %318, %317
  %320 = ashr <4 x i32> %319, <i32 6, i32 6, i32 6, i32 6>
  %321 = getelementptr inbounds i8, i8* %293, i64 %301
  %322 = bitcast i8* %321 to <4 x i8>*
  %323 = load <4 x i8>, <4 x i8>* %322, align 1
  %324 = zext <4 x i8> %323 to <4 x i32>
  %325 = sub nsw <4 x i32> %320, %324
  %326 = icmp slt <4 x i32> %325, zeroinitializer
  %327 = sub nsw <4 x i32> zeroinitializer, %325
  %328 = select <4 x i1> %326, <4 x i32> %327, <4 x i32> %325
  %329 = add <4 x i32> %328, %302
  %330 = add i64 %301, 4
  %331 = icmp eq i64 %330, 64
  br i1 %331, label %332, label %300, !llvm.loop !40

332:                                              ; preds = %300
  %333 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %334 = add <4 x i32> %329, %333
  %335 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %336 = add <4 x i32> %334, %335
  %337 = extractelement <4 x i32> %336, i32 0
  %338 = getelementptr inbounds i8, i8* %293, i64 %11
  %339 = getelementptr inbounds i8, i8* %296, i64 64
  %340 = getelementptr inbounds i8, i8* %297, i64 %12
  %341 = getelementptr inbounds i8, i8* %298, i64 %13
  %342 = add nuw nsw i32 %295, 1
  %343 = icmp eq i32 %342, 64
  br i1 %343, label %344, label %292

344:                                              ; preds = %332
  %345 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %337, i32* %345, align 4
  %346 = getelementptr inbounds i8*, i8** %2, i64 2
  %347 = load i8*, i8** %346, align 8
  br label %348

348:                                              ; preds = %344, %388
  %349 = phi i8* [ %0, %344 ], [ %394, %388 ]
  %350 = phi i32 [ 0, %344 ], [ %393, %388 ]
  %351 = phi i32 [ 0, %344 ], [ %398, %388 ]
  %352 = phi i8* [ %4, %344 ], [ %395, %388 ]
  %353 = phi i8* [ %347, %344 ], [ %396, %388 ]
  %354 = phi i8* [ %5, %344 ], [ %397, %388 ]
  %355 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %350, i32 0
  br label %356

356:                                              ; preds = %356, %348
  %357 = phi i64 [ 0, %348 ], [ %386, %356 ]
  %358 = phi <4 x i32> [ %355, %348 ], [ %385, %356 ]
  %359 = getelementptr inbounds i8, i8* %354, i64 %357
  %360 = bitcast i8* %359 to <4 x i8>*
  %361 = load <4 x i8>, <4 x i8>* %360, align 1
  %362 = zext <4 x i8> %361 to <4 x i32>
  %363 = getelementptr inbounds i8, i8* %352, i64 %357
  %364 = bitcast i8* %363 to <4 x i8>*
  %365 = load <4 x i8>, <4 x i8>* %364, align 1
  %366 = zext <4 x i8> %365 to <4 x i32>
  %367 = mul nuw nsw <4 x i32> %366, %362
  %368 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %362
  %369 = getelementptr inbounds i8, i8* %353, i64 %357
  %370 = bitcast i8* %369 to <4 x i8>*
  %371 = load <4 x i8>, <4 x i8>* %370, align 1
  %372 = zext <4 x i8> %371 to <4 x i32>
  %373 = mul nsw <4 x i32> %368, %372
  %374 = add nuw nsw <4 x i32> %367, <i32 32, i32 32, i32 32, i32 32>
  %375 = add nsw <4 x i32> %374, %373
  %376 = ashr <4 x i32> %375, <i32 6, i32 6, i32 6, i32 6>
  %377 = getelementptr inbounds i8, i8* %349, i64 %357
  %378 = bitcast i8* %377 to <4 x i8>*
  %379 = load <4 x i8>, <4 x i8>* %378, align 1
  %380 = zext <4 x i8> %379 to <4 x i32>
  %381 = sub nsw <4 x i32> %376, %380
  %382 = icmp slt <4 x i32> %381, zeroinitializer
  %383 = sub nsw <4 x i32> zeroinitializer, %381
  %384 = select <4 x i1> %382, <4 x i32> %383, <4 x i32> %381
  %385 = add <4 x i32> %384, %358
  %386 = add i64 %357, 4
  %387 = icmp eq i64 %386, 64
  br i1 %387, label %388, label %356, !llvm.loop !41

388:                                              ; preds = %356
  %389 = shufflevector <4 x i32> %385, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %390 = add <4 x i32> %385, %389
  %391 = shufflevector <4 x i32> %390, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %392 = add <4 x i32> %390, %391
  %393 = extractelement <4 x i32> %392, i32 0
  %394 = getelementptr inbounds i8, i8* %349, i64 %11
  %395 = getelementptr inbounds i8, i8* %352, i64 64
  %396 = getelementptr inbounds i8, i8* %353, i64 %12
  %397 = getelementptr inbounds i8, i8* %354, i64 %13
  %398 = add nuw nsw i32 %351, 1
  %399 = icmp eq i32 %398, 64
  br i1 %399, label %400, label %348

400:                                              ; preds = %388
  %401 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %393, i32* %401, align 4
  %402 = getelementptr inbounds i8*, i8** %2, i64 3
  %403 = load i8*, i8** %402, align 8
  br label %404

404:                                              ; preds = %400, %444
  %405 = phi i8* [ %0, %400 ], [ %450, %444 ]
  %406 = phi i32 [ 0, %400 ], [ %449, %444 ]
  %407 = phi i32 [ 0, %400 ], [ %454, %444 ]
  %408 = phi i8* [ %4, %400 ], [ %451, %444 ]
  %409 = phi i8* [ %403, %400 ], [ %452, %444 ]
  %410 = phi i8* [ %5, %400 ], [ %453, %444 ]
  %411 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %406, i32 0
  br label %412

412:                                              ; preds = %412, %404
  %413 = phi i64 [ 0, %404 ], [ %442, %412 ]
  %414 = phi <4 x i32> [ %411, %404 ], [ %441, %412 ]
  %415 = getelementptr inbounds i8, i8* %410, i64 %413
  %416 = bitcast i8* %415 to <4 x i8>*
  %417 = load <4 x i8>, <4 x i8>* %416, align 1
  %418 = zext <4 x i8> %417 to <4 x i32>
  %419 = getelementptr inbounds i8, i8* %408, i64 %413
  %420 = bitcast i8* %419 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = mul nuw nsw <4 x i32> %422, %418
  %424 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %418
  %425 = getelementptr inbounds i8, i8* %409, i64 %413
  %426 = bitcast i8* %425 to <4 x i8>*
  %427 = load <4 x i8>, <4 x i8>* %426, align 1
  %428 = zext <4 x i8> %427 to <4 x i32>
  %429 = mul nsw <4 x i32> %424, %428
  %430 = add nuw nsw <4 x i32> %423, <i32 32, i32 32, i32 32, i32 32>
  %431 = add nsw <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 6, i32 6, i32 6, i32 6>
  %433 = getelementptr inbounds i8, i8* %405, i64 %413
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = zext <4 x i8> %435 to <4 x i32>
  %437 = sub nsw <4 x i32> %432, %436
  %438 = icmp slt <4 x i32> %437, zeroinitializer
  %439 = sub nsw <4 x i32> zeroinitializer, %437
  %440 = select <4 x i1> %438, <4 x i32> %439, <4 x i32> %437
  %441 = add <4 x i32> %440, %414
  %442 = add i64 %413, 4
  %443 = icmp eq i64 %442, 64
  br i1 %443, label %444, label %412, !llvm.loop !42

444:                                              ; preds = %412
  %445 = shufflevector <4 x i32> %441, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %446 = add <4 x i32> %441, %445
  %447 = shufflevector <4 x i32> %446, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %448 = add <4 x i32> %446, %447
  %449 = extractelement <4 x i32> %448, i32 0
  %450 = getelementptr inbounds i8, i8* %405, i64 %11
  %451 = getelementptr inbounds i8, i8* %408, i64 64
  %452 = getelementptr inbounds i8, i8* %409, i64 %12
  %453 = getelementptr inbounds i8, i8* %410, i64 %13
  %454 = add nuw nsw i32 %407, 1
  %455 = icmp eq i32 %454, 64
  br i1 %455, label %125, label %404
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x32_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %65

13:                                               ; preds = %8, %53
  %14 = phi i8* [ %59, %53 ], [ %0, %8 ]
  %15 = phi i32 [ %58, %53 ], [ 0, %8 ]
  %16 = phi i32 [ %63, %53 ], [ 0, %8 ]
  %17 = phi i8* [ %60, %53 ], [ %2, %8 ]
  %18 = phi i8* [ %61, %53 ], [ %4, %8 ]
  %19 = phi i8* [ %62, %53 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  br label %21

21:                                               ; preds = %21, %13
  %22 = phi i64 [ 0, %13 ], [ %51, %21 ]
  %23 = phi <4 x i32> [ %20, %13 ], [ %50, %21 ]
  %24 = getelementptr inbounds i8, i8* %19, i64 %22
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = getelementptr inbounds i8, i8* %17, i64 %22
  %29 = bitcast i8* %28 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nuw nsw <4 x i32> %31, %27
  %33 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %27
  %34 = getelementptr inbounds i8, i8* %18, i64 %22
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = mul nsw <4 x i32> %33, %37
  %39 = add nuw nsw <4 x i32> %32, <i32 32, i32 32, i32 32, i32 32>
  %40 = add nsw <4 x i32> %39, %38
  %41 = ashr <4 x i32> %40, <i32 6, i32 6, i32 6, i32 6>
  %42 = getelementptr inbounds i8, i8* %14, i64 %22
  %43 = bitcast i8* %42 to <4 x i8>*
  %44 = load <4 x i8>, <4 x i8>* %43, align 1
  %45 = zext <4 x i8> %44 to <4 x i32>
  %46 = sub nsw <4 x i32> %41, %45
  %47 = icmp slt <4 x i32> %46, zeroinitializer
  %48 = sub nsw <4 x i32> zeroinitializer, %46
  %49 = select <4 x i1> %47, <4 x i32> %48, <4 x i32> %46
  %50 = add <4 x i32> %49, %23
  %51 = add i64 %22, 4
  %52 = icmp eq i64 %51, 64
  br i1 %52, label %53, label %21, !llvm.loop !43

53:                                               ; preds = %21
  %54 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %55 = add <4 x i32> %50, %54
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %57 = add <4 x i32> %55, %56
  %58 = extractelement <4 x i32> %57, i32 0
  %59 = getelementptr inbounds i8, i8* %14, i64 %10
  %60 = getelementptr inbounds i8, i8* %17, i64 %11
  %61 = getelementptr inbounds i8, i8* %18, i64 64
  %62 = getelementptr inbounds i8, i8* %19, i64 %12
  %63 = add nuw nsw i32 %16, 1
  %64 = icmp eq i32 %63, 32
  br i1 %64, label %117, label %13

65:                                               ; preds = %8, %105
  %66 = phi i8* [ %111, %105 ], [ %0, %8 ]
  %67 = phi i32 [ %110, %105 ], [ 0, %8 ]
  %68 = phi i32 [ %115, %105 ], [ 0, %8 ]
  %69 = phi i8* [ %112, %105 ], [ %4, %8 ]
  %70 = phi i8* [ %113, %105 ], [ %2, %8 ]
  %71 = phi i8* [ %114, %105 ], [ %5, %8 ]
  %72 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %67, i32 0
  br label %73

73:                                               ; preds = %73, %65
  %74 = phi i64 [ 0, %65 ], [ %103, %73 ]
  %75 = phi <4 x i32> [ %72, %65 ], [ %102, %73 ]
  %76 = getelementptr inbounds i8, i8* %71, i64 %74
  %77 = bitcast i8* %76 to <4 x i8>*
  %78 = load <4 x i8>, <4 x i8>* %77, align 1
  %79 = zext <4 x i8> %78 to <4 x i32>
  %80 = getelementptr inbounds i8, i8* %69, i64 %74
  %81 = bitcast i8* %80 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 1
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = mul nuw nsw <4 x i32> %83, %79
  %85 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %79
  %86 = getelementptr inbounds i8, i8* %70, i64 %74
  %87 = bitcast i8* %86 to <4 x i8>*
  %88 = load <4 x i8>, <4 x i8>* %87, align 1
  %89 = zext <4 x i8> %88 to <4 x i32>
  %90 = mul nsw <4 x i32> %85, %89
  %91 = add nuw nsw <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %92 = add nsw <4 x i32> %91, %90
  %93 = ashr <4 x i32> %92, <i32 6, i32 6, i32 6, i32 6>
  %94 = getelementptr inbounds i8, i8* %66, i64 %74
  %95 = bitcast i8* %94 to <4 x i8>*
  %96 = load <4 x i8>, <4 x i8>* %95, align 1
  %97 = zext <4 x i8> %96 to <4 x i32>
  %98 = sub nsw <4 x i32> %93, %97
  %99 = icmp slt <4 x i32> %98, zeroinitializer
  %100 = sub nsw <4 x i32> zeroinitializer, %98
  %101 = select <4 x i1> %99, <4 x i32> %100, <4 x i32> %98
  %102 = add <4 x i32> %101, %75
  %103 = add i64 %74, 4
  %104 = icmp eq i64 %103, 64
  br i1 %104, label %105, label %73, !llvm.loop !44

105:                                              ; preds = %73
  %106 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %107 = add <4 x i32> %102, %106
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %109 = add <4 x i32> %107, %108
  %110 = extractelement <4 x i32> %109, i32 0
  %111 = getelementptr inbounds i8, i8* %66, i64 %10
  %112 = getelementptr inbounds i8, i8* %69, i64 64
  %113 = getelementptr inbounds i8, i8* %70, i64 %11
  %114 = getelementptr inbounds i8, i8* %71, i64 %12
  %115 = add nuw nsw i32 %68, 1
  %116 = icmp eq i32 %115, 32
  br i1 %116, label %117, label %65

117:                                              ; preds = %105, %53
  %118 = phi i32 [ %58, %53 ], [ %110, %105 ]
  ret i32 %118
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad64x32x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %70

15:                                               ; preds = %9, %55
  %16 = phi i8* [ %61, %55 ], [ %0, %9 ]
  %17 = phi i32 [ %60, %55 ], [ 0, %9 ]
  %18 = phi i32 [ %65, %55 ], [ 0, %9 ]
  %19 = phi i8* [ %62, %55 ], [ %14, %9 ]
  %20 = phi i8* [ %63, %55 ], [ %4, %9 ]
  %21 = phi i8* [ %64, %55 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  br label %23

23:                                               ; preds = %23, %15
  %24 = phi i64 [ 0, %15 ], [ %53, %23 ]
  %25 = phi <4 x i32> [ %22, %15 ], [ %52, %23 ]
  %26 = getelementptr inbounds i8, i8* %21, i64 %24
  %27 = bitcast i8* %26 to <4 x i8>*
  %28 = load <4 x i8>, <4 x i8>* %27, align 1
  %29 = zext <4 x i8> %28 to <4 x i32>
  %30 = getelementptr inbounds i8, i8* %19, i64 %24
  %31 = bitcast i8* %30 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nuw nsw <4 x i32> %33, %29
  %35 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %29
  %36 = getelementptr inbounds i8, i8* %20, i64 %24
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %38 to <4 x i32>
  %40 = mul nsw <4 x i32> %35, %39
  %41 = add nuw nsw <4 x i32> %34, <i32 32, i32 32, i32 32, i32 32>
  %42 = add nsw <4 x i32> %41, %40
  %43 = ashr <4 x i32> %42, <i32 6, i32 6, i32 6, i32 6>
  %44 = getelementptr inbounds i8, i8* %16, i64 %24
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = sub nsw <4 x i32> %43, %47
  %49 = icmp slt <4 x i32> %48, zeroinitializer
  %50 = sub nsw <4 x i32> zeroinitializer, %48
  %51 = select <4 x i1> %49, <4 x i32> %50, <4 x i32> %48
  %52 = add <4 x i32> %51, %25
  %53 = add i64 %24, 4
  %54 = icmp eq i64 %53, 64
  br i1 %54, label %55, label %23, !llvm.loop !45

55:                                               ; preds = %23
  %56 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %57 = add <4 x i32> %52, %56
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %59 = add <4 x i32> %57, %58
  %60 = extractelement <4 x i32> %59, i32 0
  %61 = getelementptr inbounds i8, i8* %16, i64 %11
  %62 = getelementptr inbounds i8, i8* %19, i64 %12
  %63 = getelementptr inbounds i8, i8* %20, i64 64
  %64 = getelementptr inbounds i8, i8* %21, i64 %13
  %65 = add nuw nsw i32 %18, 1
  %66 = icmp eq i32 %65, 32
  br i1 %66, label %67, label %15

67:                                               ; preds = %55
  store i32 %60, i32* %8, align 4
  %68 = getelementptr inbounds i8*, i8** %2, i64 1
  %69 = load i8*, i8** %68, align 8
  br label %128

70:                                               ; preds = %9, %110
  %71 = phi i8* [ %116, %110 ], [ %0, %9 ]
  %72 = phi i32 [ %115, %110 ], [ 0, %9 ]
  %73 = phi i32 [ %120, %110 ], [ 0, %9 ]
  %74 = phi i8* [ %117, %110 ], [ %4, %9 ]
  %75 = phi i8* [ %118, %110 ], [ %14, %9 ]
  %76 = phi i8* [ %119, %110 ], [ %5, %9 ]
  %77 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %72, i32 0
  br label %78

78:                                               ; preds = %78, %70
  %79 = phi i64 [ 0, %70 ], [ %108, %78 ]
  %80 = phi <4 x i32> [ %77, %70 ], [ %107, %78 ]
  %81 = getelementptr inbounds i8, i8* %76, i64 %79
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = getelementptr inbounds i8, i8* %74, i64 %79
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 1
  %88 = zext <4 x i8> %87 to <4 x i32>
  %89 = mul nuw nsw <4 x i32> %88, %84
  %90 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %84
  %91 = getelementptr inbounds i8, i8* %75, i64 %79
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = mul nsw <4 x i32> %90, %94
  %96 = add nuw nsw <4 x i32> %89, <i32 32, i32 32, i32 32, i32 32>
  %97 = add nsw <4 x i32> %96, %95
  %98 = ashr <4 x i32> %97, <i32 6, i32 6, i32 6, i32 6>
  %99 = getelementptr inbounds i8, i8* %71, i64 %79
  %100 = bitcast i8* %99 to <4 x i8>*
  %101 = load <4 x i8>, <4 x i8>* %100, align 1
  %102 = zext <4 x i8> %101 to <4 x i32>
  %103 = sub nsw <4 x i32> %98, %102
  %104 = icmp slt <4 x i32> %103, zeroinitializer
  %105 = sub nsw <4 x i32> zeroinitializer, %103
  %106 = select <4 x i1> %104, <4 x i32> %105, <4 x i32> %103
  %107 = add <4 x i32> %106, %80
  %108 = add i64 %79, 4
  %109 = icmp eq i64 %108, 64
  br i1 %109, label %110, label %78, !llvm.loop !46

110:                                              ; preds = %78
  %111 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %112 = add <4 x i32> %107, %111
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %114 = add <4 x i32> %112, %113
  %115 = extractelement <4 x i32> %114, i32 0
  %116 = getelementptr inbounds i8, i8* %71, i64 %11
  %117 = getelementptr inbounds i8, i8* %74, i64 64
  %118 = getelementptr inbounds i8, i8* %75, i64 %12
  %119 = getelementptr inbounds i8, i8* %76, i64 %13
  %120 = add nuw nsw i32 %73, 1
  %121 = icmp eq i32 %120, 32
  br i1 %121, label %122, label %70

122:                                              ; preds = %110
  store i32 %115, i32* %8, align 4
  %123 = getelementptr inbounds i8*, i8** %2, i64 1
  %124 = load i8*, i8** %123, align 8
  br label %292

125:                                              ; preds = %444, %280
  %126 = phi i32 [ %285, %280 ], [ %449, %444 ]
  %127 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %126, i32* %127, align 4
  ret void

128:                                              ; preds = %67, %168
  %129 = phi i8* [ %0, %67 ], [ %174, %168 ]
  %130 = phi i32 [ 0, %67 ], [ %173, %168 ]
  %131 = phi i32 [ 0, %67 ], [ %178, %168 ]
  %132 = phi i8* [ %69, %67 ], [ %175, %168 ]
  %133 = phi i8* [ %4, %67 ], [ %176, %168 ]
  %134 = phi i8* [ %5, %67 ], [ %177, %168 ]
  %135 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %130, i32 0
  br label %136

136:                                              ; preds = %136, %128
  %137 = phi i64 [ 0, %128 ], [ %166, %136 ]
  %138 = phi <4 x i32> [ %135, %128 ], [ %165, %136 ]
  %139 = getelementptr inbounds i8, i8* %134, i64 %137
  %140 = bitcast i8* %139 to <4 x i8>*
  %141 = load <4 x i8>, <4 x i8>* %140, align 1
  %142 = zext <4 x i8> %141 to <4 x i32>
  %143 = getelementptr inbounds i8, i8* %132, i64 %137
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = mul nuw nsw <4 x i32> %146, %142
  %148 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %142
  %149 = getelementptr inbounds i8, i8* %133, i64 %137
  %150 = bitcast i8* %149 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = zext <4 x i8> %151 to <4 x i32>
  %153 = mul nsw <4 x i32> %148, %152
  %154 = add nuw nsw <4 x i32> %147, <i32 32, i32 32, i32 32, i32 32>
  %155 = add nsw <4 x i32> %154, %153
  %156 = ashr <4 x i32> %155, <i32 6, i32 6, i32 6, i32 6>
  %157 = getelementptr inbounds i8, i8* %129, i64 %137
  %158 = bitcast i8* %157 to <4 x i8>*
  %159 = load <4 x i8>, <4 x i8>* %158, align 1
  %160 = zext <4 x i8> %159 to <4 x i32>
  %161 = sub nsw <4 x i32> %156, %160
  %162 = icmp slt <4 x i32> %161, zeroinitializer
  %163 = sub nsw <4 x i32> zeroinitializer, %161
  %164 = select <4 x i1> %162, <4 x i32> %163, <4 x i32> %161
  %165 = add <4 x i32> %164, %138
  %166 = add i64 %137, 4
  %167 = icmp eq i64 %166, 64
  br i1 %167, label %168, label %136, !llvm.loop !47

168:                                              ; preds = %136
  %169 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %170 = add <4 x i32> %165, %169
  %171 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %172 = add <4 x i32> %170, %171
  %173 = extractelement <4 x i32> %172, i32 0
  %174 = getelementptr inbounds i8, i8* %129, i64 %11
  %175 = getelementptr inbounds i8, i8* %132, i64 %12
  %176 = getelementptr inbounds i8, i8* %133, i64 64
  %177 = getelementptr inbounds i8, i8* %134, i64 %13
  %178 = add nuw nsw i32 %131, 1
  %179 = icmp eq i32 %178, 32
  br i1 %179, label %180, label %128

180:                                              ; preds = %168
  %181 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %173, i32* %181, align 4
  %182 = getelementptr inbounds i8*, i8** %2, i64 2
  %183 = load i8*, i8** %182, align 8
  br label %184

184:                                              ; preds = %180, %224
  %185 = phi i8* [ %0, %180 ], [ %230, %224 ]
  %186 = phi i32 [ 0, %180 ], [ %229, %224 ]
  %187 = phi i32 [ 0, %180 ], [ %234, %224 ]
  %188 = phi i8* [ %183, %180 ], [ %231, %224 ]
  %189 = phi i8* [ %4, %180 ], [ %232, %224 ]
  %190 = phi i8* [ %5, %180 ], [ %233, %224 ]
  %191 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %186, i32 0
  br label %192

192:                                              ; preds = %192, %184
  %193 = phi i64 [ 0, %184 ], [ %222, %192 ]
  %194 = phi <4 x i32> [ %191, %184 ], [ %221, %192 ]
  %195 = getelementptr inbounds i8, i8* %190, i64 %193
  %196 = bitcast i8* %195 to <4 x i8>*
  %197 = load <4 x i8>, <4 x i8>* %196, align 1
  %198 = zext <4 x i8> %197 to <4 x i32>
  %199 = getelementptr inbounds i8, i8* %188, i64 %193
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = mul nuw nsw <4 x i32> %202, %198
  %204 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %198
  %205 = getelementptr inbounds i8, i8* %189, i64 %193
  %206 = bitcast i8* %205 to <4 x i8>*
  %207 = load <4 x i8>, <4 x i8>* %206, align 1
  %208 = zext <4 x i8> %207 to <4 x i32>
  %209 = mul nsw <4 x i32> %204, %208
  %210 = add nuw nsw <4 x i32> %203, <i32 32, i32 32, i32 32, i32 32>
  %211 = add nsw <4 x i32> %210, %209
  %212 = ashr <4 x i32> %211, <i32 6, i32 6, i32 6, i32 6>
  %213 = getelementptr inbounds i8, i8* %185, i64 %193
  %214 = bitcast i8* %213 to <4 x i8>*
  %215 = load <4 x i8>, <4 x i8>* %214, align 1
  %216 = zext <4 x i8> %215 to <4 x i32>
  %217 = sub nsw <4 x i32> %212, %216
  %218 = icmp slt <4 x i32> %217, zeroinitializer
  %219 = sub nsw <4 x i32> zeroinitializer, %217
  %220 = select <4 x i1> %218, <4 x i32> %219, <4 x i32> %217
  %221 = add <4 x i32> %220, %194
  %222 = add i64 %193, 4
  %223 = icmp eq i64 %222, 64
  br i1 %223, label %224, label %192, !llvm.loop !48

224:                                              ; preds = %192
  %225 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %226 = add <4 x i32> %221, %225
  %227 = shufflevector <4 x i32> %226, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %228 = add <4 x i32> %226, %227
  %229 = extractelement <4 x i32> %228, i32 0
  %230 = getelementptr inbounds i8, i8* %185, i64 %11
  %231 = getelementptr inbounds i8, i8* %188, i64 %12
  %232 = getelementptr inbounds i8, i8* %189, i64 64
  %233 = getelementptr inbounds i8, i8* %190, i64 %13
  %234 = add nuw nsw i32 %187, 1
  %235 = icmp eq i32 %234, 32
  br i1 %235, label %236, label %184

236:                                              ; preds = %224
  %237 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %229, i32* %237, align 4
  %238 = getelementptr inbounds i8*, i8** %2, i64 3
  %239 = load i8*, i8** %238, align 8
  br label %240

240:                                              ; preds = %236, %280
  %241 = phi i8* [ %0, %236 ], [ %286, %280 ]
  %242 = phi i32 [ 0, %236 ], [ %285, %280 ]
  %243 = phi i32 [ 0, %236 ], [ %290, %280 ]
  %244 = phi i8* [ %239, %236 ], [ %287, %280 ]
  %245 = phi i8* [ %4, %236 ], [ %288, %280 ]
  %246 = phi i8* [ %5, %236 ], [ %289, %280 ]
  %247 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %242, i32 0
  br label %248

248:                                              ; preds = %248, %240
  %249 = phi i64 [ 0, %240 ], [ %278, %248 ]
  %250 = phi <4 x i32> [ %247, %240 ], [ %277, %248 ]
  %251 = getelementptr inbounds i8, i8* %246, i64 %249
  %252 = bitcast i8* %251 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = getelementptr inbounds i8, i8* %244, i64 %249
  %256 = bitcast i8* %255 to <4 x i8>*
  %257 = load <4 x i8>, <4 x i8>* %256, align 1
  %258 = zext <4 x i8> %257 to <4 x i32>
  %259 = mul nuw nsw <4 x i32> %258, %254
  %260 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %254
  %261 = getelementptr inbounds i8, i8* %245, i64 %249
  %262 = bitcast i8* %261 to <4 x i8>*
  %263 = load <4 x i8>, <4 x i8>* %262, align 1
  %264 = zext <4 x i8> %263 to <4 x i32>
  %265 = mul nsw <4 x i32> %260, %264
  %266 = add nuw nsw <4 x i32> %259, <i32 32, i32 32, i32 32, i32 32>
  %267 = add nsw <4 x i32> %266, %265
  %268 = ashr <4 x i32> %267, <i32 6, i32 6, i32 6, i32 6>
  %269 = getelementptr inbounds i8, i8* %241, i64 %249
  %270 = bitcast i8* %269 to <4 x i8>*
  %271 = load <4 x i8>, <4 x i8>* %270, align 1
  %272 = zext <4 x i8> %271 to <4 x i32>
  %273 = sub nsw <4 x i32> %268, %272
  %274 = icmp slt <4 x i32> %273, zeroinitializer
  %275 = sub nsw <4 x i32> zeroinitializer, %273
  %276 = select <4 x i1> %274, <4 x i32> %275, <4 x i32> %273
  %277 = add <4 x i32> %276, %250
  %278 = add i64 %249, 4
  %279 = icmp eq i64 %278, 64
  br i1 %279, label %280, label %248, !llvm.loop !49

280:                                              ; preds = %248
  %281 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %282 = add <4 x i32> %277, %281
  %283 = shufflevector <4 x i32> %282, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %284 = add <4 x i32> %282, %283
  %285 = extractelement <4 x i32> %284, i32 0
  %286 = getelementptr inbounds i8, i8* %241, i64 %11
  %287 = getelementptr inbounds i8, i8* %244, i64 %12
  %288 = getelementptr inbounds i8, i8* %245, i64 64
  %289 = getelementptr inbounds i8, i8* %246, i64 %13
  %290 = add nuw nsw i32 %243, 1
  %291 = icmp eq i32 %290, 32
  br i1 %291, label %125, label %240

292:                                              ; preds = %122, %332
  %293 = phi i8* [ %0, %122 ], [ %338, %332 ]
  %294 = phi i32 [ 0, %122 ], [ %337, %332 ]
  %295 = phi i32 [ 0, %122 ], [ %342, %332 ]
  %296 = phi i8* [ %4, %122 ], [ %339, %332 ]
  %297 = phi i8* [ %124, %122 ], [ %340, %332 ]
  %298 = phi i8* [ %5, %122 ], [ %341, %332 ]
  %299 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %294, i32 0
  br label %300

300:                                              ; preds = %300, %292
  %301 = phi i64 [ 0, %292 ], [ %330, %300 ]
  %302 = phi <4 x i32> [ %299, %292 ], [ %329, %300 ]
  %303 = getelementptr inbounds i8, i8* %298, i64 %301
  %304 = bitcast i8* %303 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = zext <4 x i8> %305 to <4 x i32>
  %307 = getelementptr inbounds i8, i8* %296, i64 %301
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = zext <4 x i8> %309 to <4 x i32>
  %311 = mul nuw nsw <4 x i32> %310, %306
  %312 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %306
  %313 = getelementptr inbounds i8, i8* %297, i64 %301
  %314 = bitcast i8* %313 to <4 x i8>*
  %315 = load <4 x i8>, <4 x i8>* %314, align 1
  %316 = zext <4 x i8> %315 to <4 x i32>
  %317 = mul nsw <4 x i32> %312, %316
  %318 = add nuw nsw <4 x i32> %311, <i32 32, i32 32, i32 32, i32 32>
  %319 = add nsw <4 x i32> %318, %317
  %320 = ashr <4 x i32> %319, <i32 6, i32 6, i32 6, i32 6>
  %321 = getelementptr inbounds i8, i8* %293, i64 %301
  %322 = bitcast i8* %321 to <4 x i8>*
  %323 = load <4 x i8>, <4 x i8>* %322, align 1
  %324 = zext <4 x i8> %323 to <4 x i32>
  %325 = sub nsw <4 x i32> %320, %324
  %326 = icmp slt <4 x i32> %325, zeroinitializer
  %327 = sub nsw <4 x i32> zeroinitializer, %325
  %328 = select <4 x i1> %326, <4 x i32> %327, <4 x i32> %325
  %329 = add <4 x i32> %328, %302
  %330 = add i64 %301, 4
  %331 = icmp eq i64 %330, 64
  br i1 %331, label %332, label %300, !llvm.loop !50

332:                                              ; preds = %300
  %333 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %334 = add <4 x i32> %329, %333
  %335 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %336 = add <4 x i32> %334, %335
  %337 = extractelement <4 x i32> %336, i32 0
  %338 = getelementptr inbounds i8, i8* %293, i64 %11
  %339 = getelementptr inbounds i8, i8* %296, i64 64
  %340 = getelementptr inbounds i8, i8* %297, i64 %12
  %341 = getelementptr inbounds i8, i8* %298, i64 %13
  %342 = add nuw nsw i32 %295, 1
  %343 = icmp eq i32 %342, 32
  br i1 %343, label %344, label %292

344:                                              ; preds = %332
  %345 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %337, i32* %345, align 4
  %346 = getelementptr inbounds i8*, i8** %2, i64 2
  %347 = load i8*, i8** %346, align 8
  br label %348

348:                                              ; preds = %344, %388
  %349 = phi i8* [ %0, %344 ], [ %394, %388 ]
  %350 = phi i32 [ 0, %344 ], [ %393, %388 ]
  %351 = phi i32 [ 0, %344 ], [ %398, %388 ]
  %352 = phi i8* [ %4, %344 ], [ %395, %388 ]
  %353 = phi i8* [ %347, %344 ], [ %396, %388 ]
  %354 = phi i8* [ %5, %344 ], [ %397, %388 ]
  %355 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %350, i32 0
  br label %356

356:                                              ; preds = %356, %348
  %357 = phi i64 [ 0, %348 ], [ %386, %356 ]
  %358 = phi <4 x i32> [ %355, %348 ], [ %385, %356 ]
  %359 = getelementptr inbounds i8, i8* %354, i64 %357
  %360 = bitcast i8* %359 to <4 x i8>*
  %361 = load <4 x i8>, <4 x i8>* %360, align 1
  %362 = zext <4 x i8> %361 to <4 x i32>
  %363 = getelementptr inbounds i8, i8* %352, i64 %357
  %364 = bitcast i8* %363 to <4 x i8>*
  %365 = load <4 x i8>, <4 x i8>* %364, align 1
  %366 = zext <4 x i8> %365 to <4 x i32>
  %367 = mul nuw nsw <4 x i32> %366, %362
  %368 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %362
  %369 = getelementptr inbounds i8, i8* %353, i64 %357
  %370 = bitcast i8* %369 to <4 x i8>*
  %371 = load <4 x i8>, <4 x i8>* %370, align 1
  %372 = zext <4 x i8> %371 to <4 x i32>
  %373 = mul nsw <4 x i32> %368, %372
  %374 = add nuw nsw <4 x i32> %367, <i32 32, i32 32, i32 32, i32 32>
  %375 = add nsw <4 x i32> %374, %373
  %376 = ashr <4 x i32> %375, <i32 6, i32 6, i32 6, i32 6>
  %377 = getelementptr inbounds i8, i8* %349, i64 %357
  %378 = bitcast i8* %377 to <4 x i8>*
  %379 = load <4 x i8>, <4 x i8>* %378, align 1
  %380 = zext <4 x i8> %379 to <4 x i32>
  %381 = sub nsw <4 x i32> %376, %380
  %382 = icmp slt <4 x i32> %381, zeroinitializer
  %383 = sub nsw <4 x i32> zeroinitializer, %381
  %384 = select <4 x i1> %382, <4 x i32> %383, <4 x i32> %381
  %385 = add <4 x i32> %384, %358
  %386 = add i64 %357, 4
  %387 = icmp eq i64 %386, 64
  br i1 %387, label %388, label %356, !llvm.loop !51

388:                                              ; preds = %356
  %389 = shufflevector <4 x i32> %385, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %390 = add <4 x i32> %385, %389
  %391 = shufflevector <4 x i32> %390, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %392 = add <4 x i32> %390, %391
  %393 = extractelement <4 x i32> %392, i32 0
  %394 = getelementptr inbounds i8, i8* %349, i64 %11
  %395 = getelementptr inbounds i8, i8* %352, i64 64
  %396 = getelementptr inbounds i8, i8* %353, i64 %12
  %397 = getelementptr inbounds i8, i8* %354, i64 %13
  %398 = add nuw nsw i32 %351, 1
  %399 = icmp eq i32 %398, 32
  br i1 %399, label %400, label %348

400:                                              ; preds = %388
  %401 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %393, i32* %401, align 4
  %402 = getelementptr inbounds i8*, i8** %2, i64 3
  %403 = load i8*, i8** %402, align 8
  br label %404

404:                                              ; preds = %400, %444
  %405 = phi i8* [ %0, %400 ], [ %450, %444 ]
  %406 = phi i32 [ 0, %400 ], [ %449, %444 ]
  %407 = phi i32 [ 0, %400 ], [ %454, %444 ]
  %408 = phi i8* [ %4, %400 ], [ %451, %444 ]
  %409 = phi i8* [ %403, %400 ], [ %452, %444 ]
  %410 = phi i8* [ %5, %400 ], [ %453, %444 ]
  %411 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %406, i32 0
  br label %412

412:                                              ; preds = %412, %404
  %413 = phi i64 [ 0, %404 ], [ %442, %412 ]
  %414 = phi <4 x i32> [ %411, %404 ], [ %441, %412 ]
  %415 = getelementptr inbounds i8, i8* %410, i64 %413
  %416 = bitcast i8* %415 to <4 x i8>*
  %417 = load <4 x i8>, <4 x i8>* %416, align 1
  %418 = zext <4 x i8> %417 to <4 x i32>
  %419 = getelementptr inbounds i8, i8* %408, i64 %413
  %420 = bitcast i8* %419 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = mul nuw nsw <4 x i32> %422, %418
  %424 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %418
  %425 = getelementptr inbounds i8, i8* %409, i64 %413
  %426 = bitcast i8* %425 to <4 x i8>*
  %427 = load <4 x i8>, <4 x i8>* %426, align 1
  %428 = zext <4 x i8> %427 to <4 x i32>
  %429 = mul nsw <4 x i32> %424, %428
  %430 = add nuw nsw <4 x i32> %423, <i32 32, i32 32, i32 32, i32 32>
  %431 = add nsw <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 6, i32 6, i32 6, i32 6>
  %433 = getelementptr inbounds i8, i8* %405, i64 %413
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = zext <4 x i8> %435 to <4 x i32>
  %437 = sub nsw <4 x i32> %432, %436
  %438 = icmp slt <4 x i32> %437, zeroinitializer
  %439 = sub nsw <4 x i32> zeroinitializer, %437
  %440 = select <4 x i1> %438, <4 x i32> %439, <4 x i32> %437
  %441 = add <4 x i32> %440, %414
  %442 = add i64 %413, 4
  %443 = icmp eq i64 %442, 64
  br i1 %443, label %444, label %412, !llvm.loop !52

444:                                              ; preds = %412
  %445 = shufflevector <4 x i32> %441, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %446 = add <4 x i32> %441, %445
  %447 = shufflevector <4 x i32> %446, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %448 = add <4 x i32> %446, %447
  %449 = extractelement <4 x i32> %448, i32 0
  %450 = getelementptr inbounds i8, i8* %405, i64 %11
  %451 = getelementptr inbounds i8, i8* %408, i64 64
  %452 = getelementptr inbounds i8, i8* %409, i64 %12
  %453 = getelementptr inbounds i8, i8* %410, i64 %13
  %454 = add nuw nsw i32 %407, 1
  %455 = icmp eq i32 %454, 32
  br i1 %455, label %125, label %404
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x64_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %244

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %238, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %237, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %242, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %239, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %240, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %241, %13 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %21 = bitcast i8* %19 to <4 x i8>*
  %22 = load <4 x i8>, <4 x i8>* %21, align 1
  %23 = zext <4 x i8> %22 to <4 x i32>
  %24 = bitcast i8* %17 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1
  %26 = zext <4 x i8> %25 to <4 x i32>
  %27 = mul nuw nsw <4 x i32> %26, %23
  %28 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %23
  %29 = bitcast i8* %18 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nsw <4 x i32> %28, %31
  %33 = add nuw nsw <4 x i32> %27, <i32 32, i32 32, i32 32, i32 32>
  %34 = add nsw <4 x i32> %33, %32
  %35 = ashr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %36 = bitcast i8* %14 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = zext <4 x i8> %37 to <4 x i32>
  %39 = sub nsw <4 x i32> %35, %38
  %40 = icmp slt <4 x i32> %39, zeroinitializer
  %41 = sub nsw <4 x i32> zeroinitializer, %39
  %42 = select <4 x i1> %40, <4 x i32> %41, <4 x i32> %39
  %43 = add <4 x i32> %42, %20
  %44 = getelementptr inbounds i8, i8* %19, i64 4
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = getelementptr inbounds i8, i8* %17, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %50 to <4 x i32>
  %52 = mul nuw nsw <4 x i32> %51, %47
  %53 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %47
  %54 = getelementptr inbounds i8, i8* %18, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = mul nsw <4 x i32> %53, %57
  %59 = add nuw nsw <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %60 = add nsw <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %62 = getelementptr inbounds i8, i8* %14, i64 4
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = sub nsw <4 x i32> %61, %65
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add <4 x i32> %69, %43
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = zext <4 x i8> %73 to <4 x i32>
  %75 = getelementptr inbounds i8, i8* %17, i64 8
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = mul nuw nsw <4 x i32> %78, %74
  %80 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %74
  %81 = getelementptr inbounds i8, i8* %18, i64 8
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = mul nsw <4 x i32> %80, %84
  %86 = add nuw nsw <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %87 = add nsw <4 x i32> %86, %85
  %88 = ashr <4 x i32> %87, <i32 6, i32 6, i32 6, i32 6>
  %89 = getelementptr inbounds i8, i8* %14, i64 8
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = sub nsw <4 x i32> %88, %92
  %94 = icmp slt <4 x i32> %93, zeroinitializer
  %95 = sub nsw <4 x i32> zeroinitializer, %93
  %96 = select <4 x i1> %94, <4 x i32> %95, <4 x i32> %93
  %97 = add <4 x i32> %96, %70
  %98 = getelementptr inbounds i8, i8* %19, i64 12
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = getelementptr inbounds i8, i8* %17, i64 12
  %103 = bitcast i8* %102 to <4 x i8>*
  %104 = load <4 x i8>, <4 x i8>* %103, align 1
  %105 = zext <4 x i8> %104 to <4 x i32>
  %106 = mul nuw nsw <4 x i32> %105, %101
  %107 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %101
  %108 = getelementptr inbounds i8, i8* %18, i64 12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = mul nsw <4 x i32> %107, %111
  %113 = add nuw nsw <4 x i32> %106, <i32 32, i32 32, i32 32, i32 32>
  %114 = add nsw <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = getelementptr inbounds i8, i8* %14, i64 12
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = sub nsw <4 x i32> %115, %119
  %121 = icmp slt <4 x i32> %120, zeroinitializer
  %122 = sub nsw <4 x i32> zeroinitializer, %120
  %123 = select <4 x i1> %121, <4 x i32> %122, <4 x i32> %120
  %124 = add <4 x i32> %123, %97
  %125 = getelementptr inbounds i8, i8* %19, i64 16
  %126 = bitcast i8* %125 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1
  %128 = zext <4 x i8> %127 to <4 x i32>
  %129 = getelementptr inbounds i8, i8* %17, i64 16
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1
  %132 = zext <4 x i8> %131 to <4 x i32>
  %133 = mul nuw nsw <4 x i32> %132, %128
  %134 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %128
  %135 = getelementptr inbounds i8, i8* %18, i64 16
  %136 = bitcast i8* %135 to <4 x i8>*
  %137 = load <4 x i8>, <4 x i8>* %136, align 1
  %138 = zext <4 x i8> %137 to <4 x i32>
  %139 = mul nsw <4 x i32> %134, %138
  %140 = add nuw nsw <4 x i32> %133, <i32 32, i32 32, i32 32, i32 32>
  %141 = add nsw <4 x i32> %140, %139
  %142 = ashr <4 x i32> %141, <i32 6, i32 6, i32 6, i32 6>
  %143 = getelementptr inbounds i8, i8* %14, i64 16
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = sub nsw <4 x i32> %142, %146
  %148 = icmp slt <4 x i32> %147, zeroinitializer
  %149 = sub nsw <4 x i32> zeroinitializer, %147
  %150 = select <4 x i1> %148, <4 x i32> %149, <4 x i32> %147
  %151 = add <4 x i32> %150, %124
  %152 = getelementptr inbounds i8, i8* %19, i64 20
  %153 = bitcast i8* %152 to <4 x i8>*
  %154 = load <4 x i8>, <4 x i8>* %153, align 1
  %155 = zext <4 x i8> %154 to <4 x i32>
  %156 = getelementptr inbounds i8, i8* %17, i64 20
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = zext <4 x i8> %158 to <4 x i32>
  %160 = mul nuw nsw <4 x i32> %159, %155
  %161 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %155
  %162 = getelementptr inbounds i8, i8* %18, i64 20
  %163 = bitcast i8* %162 to <4 x i8>*
  %164 = load <4 x i8>, <4 x i8>* %163, align 1
  %165 = zext <4 x i8> %164 to <4 x i32>
  %166 = mul nsw <4 x i32> %161, %165
  %167 = add nuw nsw <4 x i32> %160, <i32 32, i32 32, i32 32, i32 32>
  %168 = add nsw <4 x i32> %167, %166
  %169 = ashr <4 x i32> %168, <i32 6, i32 6, i32 6, i32 6>
  %170 = getelementptr inbounds i8, i8* %14, i64 20
  %171 = bitcast i8* %170 to <4 x i8>*
  %172 = load <4 x i8>, <4 x i8>* %171, align 1
  %173 = zext <4 x i8> %172 to <4 x i32>
  %174 = sub nsw <4 x i32> %169, %173
  %175 = icmp slt <4 x i32> %174, zeroinitializer
  %176 = sub nsw <4 x i32> zeroinitializer, %174
  %177 = select <4 x i1> %175, <4 x i32> %176, <4 x i32> %174
  %178 = add <4 x i32> %177, %151
  %179 = getelementptr inbounds i8, i8* %19, i64 24
  %180 = bitcast i8* %179 to <4 x i8>*
  %181 = load <4 x i8>, <4 x i8>* %180, align 1
  %182 = zext <4 x i8> %181 to <4 x i32>
  %183 = getelementptr inbounds i8, i8* %17, i64 24
  %184 = bitcast i8* %183 to <4 x i8>*
  %185 = load <4 x i8>, <4 x i8>* %184, align 1
  %186 = zext <4 x i8> %185 to <4 x i32>
  %187 = mul nuw nsw <4 x i32> %186, %182
  %188 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %182
  %189 = getelementptr inbounds i8, i8* %18, i64 24
  %190 = bitcast i8* %189 to <4 x i8>*
  %191 = load <4 x i8>, <4 x i8>* %190, align 1
  %192 = zext <4 x i8> %191 to <4 x i32>
  %193 = mul nsw <4 x i32> %188, %192
  %194 = add nuw nsw <4 x i32> %187, <i32 32, i32 32, i32 32, i32 32>
  %195 = add nsw <4 x i32> %194, %193
  %196 = ashr <4 x i32> %195, <i32 6, i32 6, i32 6, i32 6>
  %197 = getelementptr inbounds i8, i8* %14, i64 24
  %198 = bitcast i8* %197 to <4 x i8>*
  %199 = load <4 x i8>, <4 x i8>* %198, align 1
  %200 = zext <4 x i8> %199 to <4 x i32>
  %201 = sub nsw <4 x i32> %196, %200
  %202 = icmp slt <4 x i32> %201, zeroinitializer
  %203 = sub nsw <4 x i32> zeroinitializer, %201
  %204 = select <4 x i1> %202, <4 x i32> %203, <4 x i32> %201
  %205 = add <4 x i32> %204, %178
  %206 = getelementptr inbounds i8, i8* %19, i64 28
  %207 = bitcast i8* %206 to <4 x i8>*
  %208 = load <4 x i8>, <4 x i8>* %207, align 1
  %209 = zext <4 x i8> %208 to <4 x i32>
  %210 = getelementptr inbounds i8, i8* %17, i64 28
  %211 = bitcast i8* %210 to <4 x i8>*
  %212 = load <4 x i8>, <4 x i8>* %211, align 1
  %213 = zext <4 x i8> %212 to <4 x i32>
  %214 = mul nuw nsw <4 x i32> %213, %209
  %215 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %209
  %216 = getelementptr inbounds i8, i8* %18, i64 28
  %217 = bitcast i8* %216 to <4 x i8>*
  %218 = load <4 x i8>, <4 x i8>* %217, align 1
  %219 = zext <4 x i8> %218 to <4 x i32>
  %220 = mul nsw <4 x i32> %215, %219
  %221 = add nuw nsw <4 x i32> %214, <i32 32, i32 32, i32 32, i32 32>
  %222 = add nsw <4 x i32> %221, %220
  %223 = ashr <4 x i32> %222, <i32 6, i32 6, i32 6, i32 6>
  %224 = getelementptr inbounds i8, i8* %14, i64 28
  %225 = bitcast i8* %224 to <4 x i8>*
  %226 = load <4 x i8>, <4 x i8>* %225, align 1
  %227 = zext <4 x i8> %226 to <4 x i32>
  %228 = sub nsw <4 x i32> %223, %227
  %229 = icmp slt <4 x i32> %228, zeroinitializer
  %230 = sub nsw <4 x i32> zeroinitializer, %228
  %231 = select <4 x i1> %229, <4 x i32> %230, <4 x i32> %228
  %232 = add <4 x i32> %231, %205
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %234 = add <4 x i32> %232, %233
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %236 = add <4 x i32> %234, %235
  %237 = extractelement <4 x i32> %236, i32 0
  %238 = getelementptr inbounds i8, i8* %14, i64 %10
  %239 = getelementptr inbounds i8, i8* %17, i64 %11
  %240 = getelementptr inbounds i8, i8* %18, i64 32
  %241 = getelementptr inbounds i8, i8* %19, i64 %12
  %242 = add nuw nsw i32 %16, 1
  %243 = icmp eq i32 %242, 64
  br i1 %243, label %475, label %13

244:                                              ; preds = %8, %244
  %245 = phi i8* [ %469, %244 ], [ %0, %8 ]
  %246 = phi i32 [ %468, %244 ], [ 0, %8 ]
  %247 = phi i32 [ %473, %244 ], [ 0, %8 ]
  %248 = phi i8* [ %470, %244 ], [ %4, %8 ]
  %249 = phi i8* [ %471, %244 ], [ %2, %8 ]
  %250 = phi i8* [ %472, %244 ], [ %5, %8 ]
  %251 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %246, i32 0
  %252 = bitcast i8* %250 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = bitcast i8* %248 to <4 x i8>*
  %256 = load <4 x i8>, <4 x i8>* %255, align 1
  %257 = zext <4 x i8> %256 to <4 x i32>
  %258 = mul nuw nsw <4 x i32> %257, %254
  %259 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %254
  %260 = bitcast i8* %249 to <4 x i8>*
  %261 = load <4 x i8>, <4 x i8>* %260, align 1
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = mul nsw <4 x i32> %259, %262
  %264 = add nuw nsw <4 x i32> %258, <i32 32, i32 32, i32 32, i32 32>
  %265 = add nsw <4 x i32> %264, %263
  %266 = ashr <4 x i32> %265, <i32 6, i32 6, i32 6, i32 6>
  %267 = bitcast i8* %245 to <4 x i8>*
  %268 = load <4 x i8>, <4 x i8>* %267, align 1
  %269 = zext <4 x i8> %268 to <4 x i32>
  %270 = sub nsw <4 x i32> %266, %269
  %271 = icmp slt <4 x i32> %270, zeroinitializer
  %272 = sub nsw <4 x i32> zeroinitializer, %270
  %273 = select <4 x i1> %271, <4 x i32> %272, <4 x i32> %270
  %274 = add <4 x i32> %273, %251
  %275 = getelementptr inbounds i8, i8* %250, i64 4
  %276 = bitcast i8* %275 to <4 x i8>*
  %277 = load <4 x i8>, <4 x i8>* %276, align 1
  %278 = zext <4 x i8> %277 to <4 x i32>
  %279 = getelementptr inbounds i8, i8* %248, i64 4
  %280 = bitcast i8* %279 to <4 x i8>*
  %281 = load <4 x i8>, <4 x i8>* %280, align 1
  %282 = zext <4 x i8> %281 to <4 x i32>
  %283 = mul nuw nsw <4 x i32> %282, %278
  %284 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %278
  %285 = getelementptr inbounds i8, i8* %249, i64 4
  %286 = bitcast i8* %285 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 1
  %288 = zext <4 x i8> %287 to <4 x i32>
  %289 = mul nsw <4 x i32> %284, %288
  %290 = add nuw nsw <4 x i32> %283, <i32 32, i32 32, i32 32, i32 32>
  %291 = add nsw <4 x i32> %290, %289
  %292 = ashr <4 x i32> %291, <i32 6, i32 6, i32 6, i32 6>
  %293 = getelementptr inbounds i8, i8* %245, i64 4
  %294 = bitcast i8* %293 to <4 x i8>*
  %295 = load <4 x i8>, <4 x i8>* %294, align 1
  %296 = zext <4 x i8> %295 to <4 x i32>
  %297 = sub nsw <4 x i32> %292, %296
  %298 = icmp slt <4 x i32> %297, zeroinitializer
  %299 = sub nsw <4 x i32> zeroinitializer, %297
  %300 = select <4 x i1> %298, <4 x i32> %299, <4 x i32> %297
  %301 = add <4 x i32> %300, %274
  %302 = getelementptr inbounds i8, i8* %250, i64 8
  %303 = bitcast i8* %302 to <4 x i8>*
  %304 = load <4 x i8>, <4 x i8>* %303, align 1
  %305 = zext <4 x i8> %304 to <4 x i32>
  %306 = getelementptr inbounds i8, i8* %248, i64 8
  %307 = bitcast i8* %306 to <4 x i8>*
  %308 = load <4 x i8>, <4 x i8>* %307, align 1
  %309 = zext <4 x i8> %308 to <4 x i32>
  %310 = mul nuw nsw <4 x i32> %309, %305
  %311 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %305
  %312 = getelementptr inbounds i8, i8* %249, i64 8
  %313 = bitcast i8* %312 to <4 x i8>*
  %314 = load <4 x i8>, <4 x i8>* %313, align 1
  %315 = zext <4 x i8> %314 to <4 x i32>
  %316 = mul nsw <4 x i32> %311, %315
  %317 = add nuw nsw <4 x i32> %310, <i32 32, i32 32, i32 32, i32 32>
  %318 = add nsw <4 x i32> %317, %316
  %319 = ashr <4 x i32> %318, <i32 6, i32 6, i32 6, i32 6>
  %320 = getelementptr inbounds i8, i8* %245, i64 8
  %321 = bitcast i8* %320 to <4 x i8>*
  %322 = load <4 x i8>, <4 x i8>* %321, align 1
  %323 = zext <4 x i8> %322 to <4 x i32>
  %324 = sub nsw <4 x i32> %319, %323
  %325 = icmp slt <4 x i32> %324, zeroinitializer
  %326 = sub nsw <4 x i32> zeroinitializer, %324
  %327 = select <4 x i1> %325, <4 x i32> %326, <4 x i32> %324
  %328 = add <4 x i32> %327, %301
  %329 = getelementptr inbounds i8, i8* %250, i64 12
  %330 = bitcast i8* %329 to <4 x i8>*
  %331 = load <4 x i8>, <4 x i8>* %330, align 1
  %332 = zext <4 x i8> %331 to <4 x i32>
  %333 = getelementptr inbounds i8, i8* %248, i64 12
  %334 = bitcast i8* %333 to <4 x i8>*
  %335 = load <4 x i8>, <4 x i8>* %334, align 1
  %336 = zext <4 x i8> %335 to <4 x i32>
  %337 = mul nuw nsw <4 x i32> %336, %332
  %338 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %332
  %339 = getelementptr inbounds i8, i8* %249, i64 12
  %340 = bitcast i8* %339 to <4 x i8>*
  %341 = load <4 x i8>, <4 x i8>* %340, align 1
  %342 = zext <4 x i8> %341 to <4 x i32>
  %343 = mul nsw <4 x i32> %338, %342
  %344 = add nuw nsw <4 x i32> %337, <i32 32, i32 32, i32 32, i32 32>
  %345 = add nsw <4 x i32> %344, %343
  %346 = ashr <4 x i32> %345, <i32 6, i32 6, i32 6, i32 6>
  %347 = getelementptr inbounds i8, i8* %245, i64 12
  %348 = bitcast i8* %347 to <4 x i8>*
  %349 = load <4 x i8>, <4 x i8>* %348, align 1
  %350 = zext <4 x i8> %349 to <4 x i32>
  %351 = sub nsw <4 x i32> %346, %350
  %352 = icmp slt <4 x i32> %351, zeroinitializer
  %353 = sub nsw <4 x i32> zeroinitializer, %351
  %354 = select <4 x i1> %352, <4 x i32> %353, <4 x i32> %351
  %355 = add <4 x i32> %354, %328
  %356 = getelementptr inbounds i8, i8* %250, i64 16
  %357 = bitcast i8* %356 to <4 x i8>*
  %358 = load <4 x i8>, <4 x i8>* %357, align 1
  %359 = zext <4 x i8> %358 to <4 x i32>
  %360 = getelementptr inbounds i8, i8* %248, i64 16
  %361 = bitcast i8* %360 to <4 x i8>*
  %362 = load <4 x i8>, <4 x i8>* %361, align 1
  %363 = zext <4 x i8> %362 to <4 x i32>
  %364 = mul nuw nsw <4 x i32> %363, %359
  %365 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %359
  %366 = getelementptr inbounds i8, i8* %249, i64 16
  %367 = bitcast i8* %366 to <4 x i8>*
  %368 = load <4 x i8>, <4 x i8>* %367, align 1
  %369 = zext <4 x i8> %368 to <4 x i32>
  %370 = mul nsw <4 x i32> %365, %369
  %371 = add nuw nsw <4 x i32> %364, <i32 32, i32 32, i32 32, i32 32>
  %372 = add nsw <4 x i32> %371, %370
  %373 = ashr <4 x i32> %372, <i32 6, i32 6, i32 6, i32 6>
  %374 = getelementptr inbounds i8, i8* %245, i64 16
  %375 = bitcast i8* %374 to <4 x i8>*
  %376 = load <4 x i8>, <4 x i8>* %375, align 1
  %377 = zext <4 x i8> %376 to <4 x i32>
  %378 = sub nsw <4 x i32> %373, %377
  %379 = icmp slt <4 x i32> %378, zeroinitializer
  %380 = sub nsw <4 x i32> zeroinitializer, %378
  %381 = select <4 x i1> %379, <4 x i32> %380, <4 x i32> %378
  %382 = add <4 x i32> %381, %355
  %383 = getelementptr inbounds i8, i8* %250, i64 20
  %384 = bitcast i8* %383 to <4 x i8>*
  %385 = load <4 x i8>, <4 x i8>* %384, align 1
  %386 = zext <4 x i8> %385 to <4 x i32>
  %387 = getelementptr inbounds i8, i8* %248, i64 20
  %388 = bitcast i8* %387 to <4 x i8>*
  %389 = load <4 x i8>, <4 x i8>* %388, align 1
  %390 = zext <4 x i8> %389 to <4 x i32>
  %391 = mul nuw nsw <4 x i32> %390, %386
  %392 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %386
  %393 = getelementptr inbounds i8, i8* %249, i64 20
  %394 = bitcast i8* %393 to <4 x i8>*
  %395 = load <4 x i8>, <4 x i8>* %394, align 1
  %396 = zext <4 x i8> %395 to <4 x i32>
  %397 = mul nsw <4 x i32> %392, %396
  %398 = add nuw nsw <4 x i32> %391, <i32 32, i32 32, i32 32, i32 32>
  %399 = add nsw <4 x i32> %398, %397
  %400 = ashr <4 x i32> %399, <i32 6, i32 6, i32 6, i32 6>
  %401 = getelementptr inbounds i8, i8* %245, i64 20
  %402 = bitcast i8* %401 to <4 x i8>*
  %403 = load <4 x i8>, <4 x i8>* %402, align 1
  %404 = zext <4 x i8> %403 to <4 x i32>
  %405 = sub nsw <4 x i32> %400, %404
  %406 = icmp slt <4 x i32> %405, zeroinitializer
  %407 = sub nsw <4 x i32> zeroinitializer, %405
  %408 = select <4 x i1> %406, <4 x i32> %407, <4 x i32> %405
  %409 = add <4 x i32> %408, %382
  %410 = getelementptr inbounds i8, i8* %250, i64 24
  %411 = bitcast i8* %410 to <4 x i8>*
  %412 = load <4 x i8>, <4 x i8>* %411, align 1
  %413 = zext <4 x i8> %412 to <4 x i32>
  %414 = getelementptr inbounds i8, i8* %248, i64 24
  %415 = bitcast i8* %414 to <4 x i8>*
  %416 = load <4 x i8>, <4 x i8>* %415, align 1
  %417 = zext <4 x i8> %416 to <4 x i32>
  %418 = mul nuw nsw <4 x i32> %417, %413
  %419 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %413
  %420 = getelementptr inbounds i8, i8* %249, i64 24
  %421 = bitcast i8* %420 to <4 x i8>*
  %422 = load <4 x i8>, <4 x i8>* %421, align 1
  %423 = zext <4 x i8> %422 to <4 x i32>
  %424 = mul nsw <4 x i32> %419, %423
  %425 = add nuw nsw <4 x i32> %418, <i32 32, i32 32, i32 32, i32 32>
  %426 = add nsw <4 x i32> %425, %424
  %427 = ashr <4 x i32> %426, <i32 6, i32 6, i32 6, i32 6>
  %428 = getelementptr inbounds i8, i8* %245, i64 24
  %429 = bitcast i8* %428 to <4 x i8>*
  %430 = load <4 x i8>, <4 x i8>* %429, align 1
  %431 = zext <4 x i8> %430 to <4 x i32>
  %432 = sub nsw <4 x i32> %427, %431
  %433 = icmp slt <4 x i32> %432, zeroinitializer
  %434 = sub nsw <4 x i32> zeroinitializer, %432
  %435 = select <4 x i1> %433, <4 x i32> %434, <4 x i32> %432
  %436 = add <4 x i32> %435, %409
  %437 = getelementptr inbounds i8, i8* %250, i64 28
  %438 = bitcast i8* %437 to <4 x i8>*
  %439 = load <4 x i8>, <4 x i8>* %438, align 1
  %440 = zext <4 x i8> %439 to <4 x i32>
  %441 = getelementptr inbounds i8, i8* %248, i64 28
  %442 = bitcast i8* %441 to <4 x i8>*
  %443 = load <4 x i8>, <4 x i8>* %442, align 1
  %444 = zext <4 x i8> %443 to <4 x i32>
  %445 = mul nuw nsw <4 x i32> %444, %440
  %446 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %440
  %447 = getelementptr inbounds i8, i8* %249, i64 28
  %448 = bitcast i8* %447 to <4 x i8>*
  %449 = load <4 x i8>, <4 x i8>* %448, align 1
  %450 = zext <4 x i8> %449 to <4 x i32>
  %451 = mul nsw <4 x i32> %446, %450
  %452 = add nuw nsw <4 x i32> %445, <i32 32, i32 32, i32 32, i32 32>
  %453 = add nsw <4 x i32> %452, %451
  %454 = ashr <4 x i32> %453, <i32 6, i32 6, i32 6, i32 6>
  %455 = getelementptr inbounds i8, i8* %245, i64 28
  %456 = bitcast i8* %455 to <4 x i8>*
  %457 = load <4 x i8>, <4 x i8>* %456, align 1
  %458 = zext <4 x i8> %457 to <4 x i32>
  %459 = sub nsw <4 x i32> %454, %458
  %460 = icmp slt <4 x i32> %459, zeroinitializer
  %461 = sub nsw <4 x i32> zeroinitializer, %459
  %462 = select <4 x i1> %460, <4 x i32> %461, <4 x i32> %459
  %463 = add <4 x i32> %462, %436
  %464 = shufflevector <4 x i32> %463, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %465 = add <4 x i32> %463, %464
  %466 = shufflevector <4 x i32> %465, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %467 = add <4 x i32> %465, %466
  %468 = extractelement <4 x i32> %467, i32 0
  %469 = getelementptr inbounds i8, i8* %245, i64 %10
  %470 = getelementptr inbounds i8, i8* %248, i64 32
  %471 = getelementptr inbounds i8, i8* %249, i64 %11
  %472 = getelementptr inbounds i8, i8* %250, i64 %12
  %473 = add nuw nsw i32 %247, 1
  %474 = icmp eq i32 %473, 64
  br i1 %474, label %475, label %244

475:                                              ; preds = %244, %13
  %476 = phi i32 [ %237, %13 ], [ %468, %244 ]
  ret i32 %476
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad32x64x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %249

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %240, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %239, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %244, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %241, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %242, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %243, %15 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %23 = bitcast i8* %21 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = bitcast i8* %19 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = zext <4 x i8> %27 to <4 x i32>
  %29 = mul nuw nsw <4 x i32> %28, %25
  %30 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %25
  %31 = bitcast i8* %20 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nsw <4 x i32> %30, %33
  %35 = add nuw nsw <4 x i32> %29, <i32 32, i32 32, i32 32, i32 32>
  %36 = add nsw <4 x i32> %35, %34
  %37 = ashr <4 x i32> %36, <i32 6, i32 6, i32 6, i32 6>
  %38 = bitcast i8* %16 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = zext <4 x i8> %39 to <4 x i32>
  %41 = sub nsw <4 x i32> %37, %40
  %42 = icmp slt <4 x i32> %41, zeroinitializer
  %43 = sub nsw <4 x i32> zeroinitializer, %41
  %44 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %41
  %45 = add <4 x i32> %44, %22
  %46 = getelementptr inbounds i8, i8* %21, i64 4
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = zext <4 x i8> %48 to <4 x i32>
  %50 = getelementptr inbounds i8, i8* %19, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %52 to <4 x i32>
  %54 = mul nuw nsw <4 x i32> %53, %49
  %55 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %49
  %56 = getelementptr inbounds i8, i8* %20, i64 4
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1
  %59 = zext <4 x i8> %58 to <4 x i32>
  %60 = mul nsw <4 x i32> %55, %59
  %61 = add nuw nsw <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %62 = add nsw <4 x i32> %61, %60
  %63 = ashr <4 x i32> %62, <i32 6, i32 6, i32 6, i32 6>
  %64 = getelementptr inbounds i8, i8* %16, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = sub nsw <4 x i32> %63, %67
  %69 = icmp slt <4 x i32> %68, zeroinitializer
  %70 = sub nsw <4 x i32> zeroinitializer, %68
  %71 = select <4 x i1> %69, <4 x i32> %70, <4 x i32> %68
  %72 = add <4 x i32> %71, %45
  %73 = getelementptr inbounds i8, i8* %21, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = getelementptr inbounds i8, i8* %19, i64 8
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = mul nuw nsw <4 x i32> %80, %76
  %82 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %76
  %83 = getelementptr inbounds i8, i8* %20, i64 8
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = mul nsw <4 x i32> %82, %86
  %88 = add nuw nsw <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %89 = add nsw <4 x i32> %88, %87
  %90 = ashr <4 x i32> %89, <i32 6, i32 6, i32 6, i32 6>
  %91 = getelementptr inbounds i8, i8* %16, i64 8
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = sub nsw <4 x i32> %90, %94
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = add <4 x i32> %98, %72
  %100 = getelementptr inbounds i8, i8* %21, i64 12
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = zext <4 x i8> %102 to <4 x i32>
  %104 = getelementptr inbounds i8, i8* %19, i64 12
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = zext <4 x i8> %106 to <4 x i32>
  %108 = mul nuw nsw <4 x i32> %107, %103
  %109 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %103
  %110 = getelementptr inbounds i8, i8* %20, i64 12
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = mul nsw <4 x i32> %109, %113
  %115 = add nuw nsw <4 x i32> %108, <i32 32, i32 32, i32 32, i32 32>
  %116 = add nsw <4 x i32> %115, %114
  %117 = ashr <4 x i32> %116, <i32 6, i32 6, i32 6, i32 6>
  %118 = getelementptr inbounds i8, i8* %16, i64 12
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = sub nsw <4 x i32> %117, %121
  %123 = icmp slt <4 x i32> %122, zeroinitializer
  %124 = sub nsw <4 x i32> zeroinitializer, %122
  %125 = select <4 x i1> %123, <4 x i32> %124, <4 x i32> %122
  %126 = add <4 x i32> %125, %99
  %127 = getelementptr inbounds i8, i8* %21, i64 16
  %128 = bitcast i8* %127 to <4 x i8>*
  %129 = load <4 x i8>, <4 x i8>* %128, align 1
  %130 = zext <4 x i8> %129 to <4 x i32>
  %131 = getelementptr inbounds i8, i8* %19, i64 16
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = zext <4 x i8> %133 to <4 x i32>
  %135 = mul nuw nsw <4 x i32> %134, %130
  %136 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %130
  %137 = getelementptr inbounds i8, i8* %20, i64 16
  %138 = bitcast i8* %137 to <4 x i8>*
  %139 = load <4 x i8>, <4 x i8>* %138, align 1
  %140 = zext <4 x i8> %139 to <4 x i32>
  %141 = mul nsw <4 x i32> %136, %140
  %142 = add nuw nsw <4 x i32> %135, <i32 32, i32 32, i32 32, i32 32>
  %143 = add nsw <4 x i32> %142, %141
  %144 = ashr <4 x i32> %143, <i32 6, i32 6, i32 6, i32 6>
  %145 = getelementptr inbounds i8, i8* %16, i64 16
  %146 = bitcast i8* %145 to <4 x i8>*
  %147 = load <4 x i8>, <4 x i8>* %146, align 1
  %148 = zext <4 x i8> %147 to <4 x i32>
  %149 = sub nsw <4 x i32> %144, %148
  %150 = icmp slt <4 x i32> %149, zeroinitializer
  %151 = sub nsw <4 x i32> zeroinitializer, %149
  %152 = select <4 x i1> %150, <4 x i32> %151, <4 x i32> %149
  %153 = add <4 x i32> %152, %126
  %154 = getelementptr inbounds i8, i8* %21, i64 20
  %155 = bitcast i8* %154 to <4 x i8>*
  %156 = load <4 x i8>, <4 x i8>* %155, align 1
  %157 = zext <4 x i8> %156 to <4 x i32>
  %158 = getelementptr inbounds i8, i8* %19, i64 20
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = mul nuw nsw <4 x i32> %161, %157
  %163 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %157
  %164 = getelementptr inbounds i8, i8* %20, i64 20
  %165 = bitcast i8* %164 to <4 x i8>*
  %166 = load <4 x i8>, <4 x i8>* %165, align 1
  %167 = zext <4 x i8> %166 to <4 x i32>
  %168 = mul nsw <4 x i32> %163, %167
  %169 = add nuw nsw <4 x i32> %162, <i32 32, i32 32, i32 32, i32 32>
  %170 = add nsw <4 x i32> %169, %168
  %171 = ashr <4 x i32> %170, <i32 6, i32 6, i32 6, i32 6>
  %172 = getelementptr inbounds i8, i8* %16, i64 20
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = sub nsw <4 x i32> %171, %175
  %177 = icmp slt <4 x i32> %176, zeroinitializer
  %178 = sub nsw <4 x i32> zeroinitializer, %176
  %179 = select <4 x i1> %177, <4 x i32> %178, <4 x i32> %176
  %180 = add <4 x i32> %179, %153
  %181 = getelementptr inbounds i8, i8* %21, i64 24
  %182 = bitcast i8* %181 to <4 x i8>*
  %183 = load <4 x i8>, <4 x i8>* %182, align 1
  %184 = zext <4 x i8> %183 to <4 x i32>
  %185 = getelementptr inbounds i8, i8* %19, i64 24
  %186 = bitcast i8* %185 to <4 x i8>*
  %187 = load <4 x i8>, <4 x i8>* %186, align 1
  %188 = zext <4 x i8> %187 to <4 x i32>
  %189 = mul nuw nsw <4 x i32> %188, %184
  %190 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %184
  %191 = getelementptr inbounds i8, i8* %20, i64 24
  %192 = bitcast i8* %191 to <4 x i8>*
  %193 = load <4 x i8>, <4 x i8>* %192, align 1
  %194 = zext <4 x i8> %193 to <4 x i32>
  %195 = mul nsw <4 x i32> %190, %194
  %196 = add nuw nsw <4 x i32> %189, <i32 32, i32 32, i32 32, i32 32>
  %197 = add nsw <4 x i32> %196, %195
  %198 = ashr <4 x i32> %197, <i32 6, i32 6, i32 6, i32 6>
  %199 = getelementptr inbounds i8, i8* %16, i64 24
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = sub nsw <4 x i32> %198, %202
  %204 = icmp slt <4 x i32> %203, zeroinitializer
  %205 = sub nsw <4 x i32> zeroinitializer, %203
  %206 = select <4 x i1> %204, <4 x i32> %205, <4 x i32> %203
  %207 = add <4 x i32> %206, %180
  %208 = getelementptr inbounds i8, i8* %21, i64 28
  %209 = bitcast i8* %208 to <4 x i8>*
  %210 = load <4 x i8>, <4 x i8>* %209, align 1
  %211 = zext <4 x i8> %210 to <4 x i32>
  %212 = getelementptr inbounds i8, i8* %19, i64 28
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = zext <4 x i8> %214 to <4 x i32>
  %216 = mul nuw nsw <4 x i32> %215, %211
  %217 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %211
  %218 = getelementptr inbounds i8, i8* %20, i64 28
  %219 = bitcast i8* %218 to <4 x i8>*
  %220 = load <4 x i8>, <4 x i8>* %219, align 1
  %221 = zext <4 x i8> %220 to <4 x i32>
  %222 = mul nsw <4 x i32> %217, %221
  %223 = add nuw nsw <4 x i32> %216, <i32 32, i32 32, i32 32, i32 32>
  %224 = add nsw <4 x i32> %223, %222
  %225 = ashr <4 x i32> %224, <i32 6, i32 6, i32 6, i32 6>
  %226 = getelementptr inbounds i8, i8* %16, i64 28
  %227 = bitcast i8* %226 to <4 x i8>*
  %228 = load <4 x i8>, <4 x i8>* %227, align 1
  %229 = zext <4 x i8> %228 to <4 x i32>
  %230 = sub nsw <4 x i32> %225, %229
  %231 = icmp slt <4 x i32> %230, zeroinitializer
  %232 = sub nsw <4 x i32> zeroinitializer, %230
  %233 = select <4 x i1> %231, <4 x i32> %232, <4 x i32> %230
  %234 = add <4 x i32> %233, %207
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %236 = add <4 x i32> %234, %235
  %237 = shufflevector <4 x i32> %236, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %238 = add <4 x i32> %236, %237
  %239 = extractelement <4 x i32> %238, i32 0
  %240 = getelementptr inbounds i8, i8* %16, i64 %11
  %241 = getelementptr inbounds i8, i8* %19, i64 %12
  %242 = getelementptr inbounds i8, i8* %20, i64 32
  %243 = getelementptr inbounds i8, i8* %21, i64 %13
  %244 = add nuw nsw i32 %18, 1
  %245 = icmp eq i32 %244, 64
  br i1 %245, label %246, label %15

246:                                              ; preds = %15
  store i32 %239, i32* %8, align 4
  %247 = getelementptr inbounds i8*, i8** %2, i64 1
  %248 = load i8*, i8** %247, align 8
  br label %486

249:                                              ; preds = %9, %249
  %250 = phi i8* [ %474, %249 ], [ %0, %9 ]
  %251 = phi i32 [ %473, %249 ], [ 0, %9 ]
  %252 = phi i32 [ %478, %249 ], [ 0, %9 ]
  %253 = phi i8* [ %475, %249 ], [ %4, %9 ]
  %254 = phi i8* [ %476, %249 ], [ %14, %9 ]
  %255 = phi i8* [ %477, %249 ], [ %5, %9 ]
  %256 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %251, i32 0
  %257 = bitcast i8* %255 to <4 x i8>*
  %258 = load <4 x i8>, <4 x i8>* %257, align 1
  %259 = zext <4 x i8> %258 to <4 x i32>
  %260 = bitcast i8* %253 to <4 x i8>*
  %261 = load <4 x i8>, <4 x i8>* %260, align 1
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = mul nuw nsw <4 x i32> %262, %259
  %264 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %259
  %265 = bitcast i8* %254 to <4 x i8>*
  %266 = load <4 x i8>, <4 x i8>* %265, align 1
  %267 = zext <4 x i8> %266 to <4 x i32>
  %268 = mul nsw <4 x i32> %264, %267
  %269 = add nuw nsw <4 x i32> %263, <i32 32, i32 32, i32 32, i32 32>
  %270 = add nsw <4 x i32> %269, %268
  %271 = ashr <4 x i32> %270, <i32 6, i32 6, i32 6, i32 6>
  %272 = bitcast i8* %250 to <4 x i8>*
  %273 = load <4 x i8>, <4 x i8>* %272, align 1
  %274 = zext <4 x i8> %273 to <4 x i32>
  %275 = sub nsw <4 x i32> %271, %274
  %276 = icmp slt <4 x i32> %275, zeroinitializer
  %277 = sub nsw <4 x i32> zeroinitializer, %275
  %278 = select <4 x i1> %276, <4 x i32> %277, <4 x i32> %275
  %279 = add <4 x i32> %278, %256
  %280 = getelementptr inbounds i8, i8* %255, i64 4
  %281 = bitcast i8* %280 to <4 x i8>*
  %282 = load <4 x i8>, <4 x i8>* %281, align 1
  %283 = zext <4 x i8> %282 to <4 x i32>
  %284 = getelementptr inbounds i8, i8* %253, i64 4
  %285 = bitcast i8* %284 to <4 x i8>*
  %286 = load <4 x i8>, <4 x i8>* %285, align 1
  %287 = zext <4 x i8> %286 to <4 x i32>
  %288 = mul nuw nsw <4 x i32> %287, %283
  %289 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %283
  %290 = getelementptr inbounds i8, i8* %254, i64 4
  %291 = bitcast i8* %290 to <4 x i8>*
  %292 = load <4 x i8>, <4 x i8>* %291, align 1
  %293 = zext <4 x i8> %292 to <4 x i32>
  %294 = mul nsw <4 x i32> %289, %293
  %295 = add nuw nsw <4 x i32> %288, <i32 32, i32 32, i32 32, i32 32>
  %296 = add nsw <4 x i32> %295, %294
  %297 = ashr <4 x i32> %296, <i32 6, i32 6, i32 6, i32 6>
  %298 = getelementptr inbounds i8, i8* %250, i64 4
  %299 = bitcast i8* %298 to <4 x i8>*
  %300 = load <4 x i8>, <4 x i8>* %299, align 1
  %301 = zext <4 x i8> %300 to <4 x i32>
  %302 = sub nsw <4 x i32> %297, %301
  %303 = icmp slt <4 x i32> %302, zeroinitializer
  %304 = sub nsw <4 x i32> zeroinitializer, %302
  %305 = select <4 x i1> %303, <4 x i32> %304, <4 x i32> %302
  %306 = add <4 x i32> %305, %279
  %307 = getelementptr inbounds i8, i8* %255, i64 8
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = zext <4 x i8> %309 to <4 x i32>
  %311 = getelementptr inbounds i8, i8* %253, i64 8
  %312 = bitcast i8* %311 to <4 x i8>*
  %313 = load <4 x i8>, <4 x i8>* %312, align 1
  %314 = zext <4 x i8> %313 to <4 x i32>
  %315 = mul nuw nsw <4 x i32> %314, %310
  %316 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %310
  %317 = getelementptr inbounds i8, i8* %254, i64 8
  %318 = bitcast i8* %317 to <4 x i8>*
  %319 = load <4 x i8>, <4 x i8>* %318, align 1
  %320 = zext <4 x i8> %319 to <4 x i32>
  %321 = mul nsw <4 x i32> %316, %320
  %322 = add nuw nsw <4 x i32> %315, <i32 32, i32 32, i32 32, i32 32>
  %323 = add nsw <4 x i32> %322, %321
  %324 = ashr <4 x i32> %323, <i32 6, i32 6, i32 6, i32 6>
  %325 = getelementptr inbounds i8, i8* %250, i64 8
  %326 = bitcast i8* %325 to <4 x i8>*
  %327 = load <4 x i8>, <4 x i8>* %326, align 1
  %328 = zext <4 x i8> %327 to <4 x i32>
  %329 = sub nsw <4 x i32> %324, %328
  %330 = icmp slt <4 x i32> %329, zeroinitializer
  %331 = sub nsw <4 x i32> zeroinitializer, %329
  %332 = select <4 x i1> %330, <4 x i32> %331, <4 x i32> %329
  %333 = add <4 x i32> %332, %306
  %334 = getelementptr inbounds i8, i8* %255, i64 12
  %335 = bitcast i8* %334 to <4 x i8>*
  %336 = load <4 x i8>, <4 x i8>* %335, align 1
  %337 = zext <4 x i8> %336 to <4 x i32>
  %338 = getelementptr inbounds i8, i8* %253, i64 12
  %339 = bitcast i8* %338 to <4 x i8>*
  %340 = load <4 x i8>, <4 x i8>* %339, align 1
  %341 = zext <4 x i8> %340 to <4 x i32>
  %342 = mul nuw nsw <4 x i32> %341, %337
  %343 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %337
  %344 = getelementptr inbounds i8, i8* %254, i64 12
  %345 = bitcast i8* %344 to <4 x i8>*
  %346 = load <4 x i8>, <4 x i8>* %345, align 1
  %347 = zext <4 x i8> %346 to <4 x i32>
  %348 = mul nsw <4 x i32> %343, %347
  %349 = add nuw nsw <4 x i32> %342, <i32 32, i32 32, i32 32, i32 32>
  %350 = add nsw <4 x i32> %349, %348
  %351 = ashr <4 x i32> %350, <i32 6, i32 6, i32 6, i32 6>
  %352 = getelementptr inbounds i8, i8* %250, i64 12
  %353 = bitcast i8* %352 to <4 x i8>*
  %354 = load <4 x i8>, <4 x i8>* %353, align 1
  %355 = zext <4 x i8> %354 to <4 x i32>
  %356 = sub nsw <4 x i32> %351, %355
  %357 = icmp slt <4 x i32> %356, zeroinitializer
  %358 = sub nsw <4 x i32> zeroinitializer, %356
  %359 = select <4 x i1> %357, <4 x i32> %358, <4 x i32> %356
  %360 = add <4 x i32> %359, %333
  %361 = getelementptr inbounds i8, i8* %255, i64 16
  %362 = bitcast i8* %361 to <4 x i8>*
  %363 = load <4 x i8>, <4 x i8>* %362, align 1
  %364 = zext <4 x i8> %363 to <4 x i32>
  %365 = getelementptr inbounds i8, i8* %253, i64 16
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1
  %368 = zext <4 x i8> %367 to <4 x i32>
  %369 = mul nuw nsw <4 x i32> %368, %364
  %370 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %364
  %371 = getelementptr inbounds i8, i8* %254, i64 16
  %372 = bitcast i8* %371 to <4 x i8>*
  %373 = load <4 x i8>, <4 x i8>* %372, align 1
  %374 = zext <4 x i8> %373 to <4 x i32>
  %375 = mul nsw <4 x i32> %370, %374
  %376 = add nuw nsw <4 x i32> %369, <i32 32, i32 32, i32 32, i32 32>
  %377 = add nsw <4 x i32> %376, %375
  %378 = ashr <4 x i32> %377, <i32 6, i32 6, i32 6, i32 6>
  %379 = getelementptr inbounds i8, i8* %250, i64 16
  %380 = bitcast i8* %379 to <4 x i8>*
  %381 = load <4 x i8>, <4 x i8>* %380, align 1
  %382 = zext <4 x i8> %381 to <4 x i32>
  %383 = sub nsw <4 x i32> %378, %382
  %384 = icmp slt <4 x i32> %383, zeroinitializer
  %385 = sub nsw <4 x i32> zeroinitializer, %383
  %386 = select <4 x i1> %384, <4 x i32> %385, <4 x i32> %383
  %387 = add <4 x i32> %386, %360
  %388 = getelementptr inbounds i8, i8* %255, i64 20
  %389 = bitcast i8* %388 to <4 x i8>*
  %390 = load <4 x i8>, <4 x i8>* %389, align 1
  %391 = zext <4 x i8> %390 to <4 x i32>
  %392 = getelementptr inbounds i8, i8* %253, i64 20
  %393 = bitcast i8* %392 to <4 x i8>*
  %394 = load <4 x i8>, <4 x i8>* %393, align 1
  %395 = zext <4 x i8> %394 to <4 x i32>
  %396 = mul nuw nsw <4 x i32> %395, %391
  %397 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %391
  %398 = getelementptr inbounds i8, i8* %254, i64 20
  %399 = bitcast i8* %398 to <4 x i8>*
  %400 = load <4 x i8>, <4 x i8>* %399, align 1
  %401 = zext <4 x i8> %400 to <4 x i32>
  %402 = mul nsw <4 x i32> %397, %401
  %403 = add nuw nsw <4 x i32> %396, <i32 32, i32 32, i32 32, i32 32>
  %404 = add nsw <4 x i32> %403, %402
  %405 = ashr <4 x i32> %404, <i32 6, i32 6, i32 6, i32 6>
  %406 = getelementptr inbounds i8, i8* %250, i64 20
  %407 = bitcast i8* %406 to <4 x i8>*
  %408 = load <4 x i8>, <4 x i8>* %407, align 1
  %409 = zext <4 x i8> %408 to <4 x i32>
  %410 = sub nsw <4 x i32> %405, %409
  %411 = icmp slt <4 x i32> %410, zeroinitializer
  %412 = sub nsw <4 x i32> zeroinitializer, %410
  %413 = select <4 x i1> %411, <4 x i32> %412, <4 x i32> %410
  %414 = add <4 x i32> %413, %387
  %415 = getelementptr inbounds i8, i8* %255, i64 24
  %416 = bitcast i8* %415 to <4 x i8>*
  %417 = load <4 x i8>, <4 x i8>* %416, align 1
  %418 = zext <4 x i8> %417 to <4 x i32>
  %419 = getelementptr inbounds i8, i8* %253, i64 24
  %420 = bitcast i8* %419 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = mul nuw nsw <4 x i32> %422, %418
  %424 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %418
  %425 = getelementptr inbounds i8, i8* %254, i64 24
  %426 = bitcast i8* %425 to <4 x i8>*
  %427 = load <4 x i8>, <4 x i8>* %426, align 1
  %428 = zext <4 x i8> %427 to <4 x i32>
  %429 = mul nsw <4 x i32> %424, %428
  %430 = add nuw nsw <4 x i32> %423, <i32 32, i32 32, i32 32, i32 32>
  %431 = add nsw <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 6, i32 6, i32 6, i32 6>
  %433 = getelementptr inbounds i8, i8* %250, i64 24
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = zext <4 x i8> %435 to <4 x i32>
  %437 = sub nsw <4 x i32> %432, %436
  %438 = icmp slt <4 x i32> %437, zeroinitializer
  %439 = sub nsw <4 x i32> zeroinitializer, %437
  %440 = select <4 x i1> %438, <4 x i32> %439, <4 x i32> %437
  %441 = add <4 x i32> %440, %414
  %442 = getelementptr inbounds i8, i8* %255, i64 28
  %443 = bitcast i8* %442 to <4 x i8>*
  %444 = load <4 x i8>, <4 x i8>* %443, align 1
  %445 = zext <4 x i8> %444 to <4 x i32>
  %446 = getelementptr inbounds i8, i8* %253, i64 28
  %447 = bitcast i8* %446 to <4 x i8>*
  %448 = load <4 x i8>, <4 x i8>* %447, align 1
  %449 = zext <4 x i8> %448 to <4 x i32>
  %450 = mul nuw nsw <4 x i32> %449, %445
  %451 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %445
  %452 = getelementptr inbounds i8, i8* %254, i64 28
  %453 = bitcast i8* %452 to <4 x i8>*
  %454 = load <4 x i8>, <4 x i8>* %453, align 1
  %455 = zext <4 x i8> %454 to <4 x i32>
  %456 = mul nsw <4 x i32> %451, %455
  %457 = add nuw nsw <4 x i32> %450, <i32 32, i32 32, i32 32, i32 32>
  %458 = add nsw <4 x i32> %457, %456
  %459 = ashr <4 x i32> %458, <i32 6, i32 6, i32 6, i32 6>
  %460 = getelementptr inbounds i8, i8* %250, i64 28
  %461 = bitcast i8* %460 to <4 x i8>*
  %462 = load <4 x i8>, <4 x i8>* %461, align 1
  %463 = zext <4 x i8> %462 to <4 x i32>
  %464 = sub nsw <4 x i32> %459, %463
  %465 = icmp slt <4 x i32> %464, zeroinitializer
  %466 = sub nsw <4 x i32> zeroinitializer, %464
  %467 = select <4 x i1> %465, <4 x i32> %466, <4 x i32> %464
  %468 = add <4 x i32> %467, %441
  %469 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %470 = add <4 x i32> %468, %469
  %471 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %472 = add <4 x i32> %470, %471
  %473 = extractelement <4 x i32> %472, i32 0
  %474 = getelementptr inbounds i8, i8* %250, i64 %11
  %475 = getelementptr inbounds i8, i8* %253, i64 32
  %476 = getelementptr inbounds i8, i8* %254, i64 %12
  %477 = getelementptr inbounds i8, i8* %255, i64 %13
  %478 = add nuw nsw i32 %252, 1
  %479 = icmp eq i32 %478, 64
  br i1 %479, label %480, label %249

480:                                              ; preds = %249
  store i32 %473, i32* %8, align 4
  %481 = getelementptr inbounds i8*, i8** %2, i64 1
  %482 = load i8*, i8** %481, align 8
  br label %1187

483:                                              ; preds = %1657, %956
  %484 = phi i32 [ %1180, %956 ], [ %1881, %1657 ]
  %485 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %484, i32* %485, align 4
  ret void

486:                                              ; preds = %246, %486
  %487 = phi i8* [ %0, %246 ], [ %711, %486 ]
  %488 = phi i32 [ 0, %246 ], [ %710, %486 ]
  %489 = phi i32 [ 0, %246 ], [ %715, %486 ]
  %490 = phi i8* [ %248, %246 ], [ %712, %486 ]
  %491 = phi i8* [ %4, %246 ], [ %713, %486 ]
  %492 = phi i8* [ %5, %246 ], [ %714, %486 ]
  %493 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %488, i32 0
  %494 = bitcast i8* %492 to <4 x i8>*
  %495 = load <4 x i8>, <4 x i8>* %494, align 1
  %496 = zext <4 x i8> %495 to <4 x i32>
  %497 = bitcast i8* %490 to <4 x i8>*
  %498 = load <4 x i8>, <4 x i8>* %497, align 1
  %499 = zext <4 x i8> %498 to <4 x i32>
  %500 = mul nuw nsw <4 x i32> %499, %496
  %501 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %496
  %502 = bitcast i8* %491 to <4 x i8>*
  %503 = load <4 x i8>, <4 x i8>* %502, align 1
  %504 = zext <4 x i8> %503 to <4 x i32>
  %505 = mul nsw <4 x i32> %501, %504
  %506 = add nuw nsw <4 x i32> %500, <i32 32, i32 32, i32 32, i32 32>
  %507 = add nsw <4 x i32> %506, %505
  %508 = ashr <4 x i32> %507, <i32 6, i32 6, i32 6, i32 6>
  %509 = bitcast i8* %487 to <4 x i8>*
  %510 = load <4 x i8>, <4 x i8>* %509, align 1
  %511 = zext <4 x i8> %510 to <4 x i32>
  %512 = sub nsw <4 x i32> %508, %511
  %513 = icmp slt <4 x i32> %512, zeroinitializer
  %514 = sub nsw <4 x i32> zeroinitializer, %512
  %515 = select <4 x i1> %513, <4 x i32> %514, <4 x i32> %512
  %516 = add <4 x i32> %515, %493
  %517 = getelementptr inbounds i8, i8* %492, i64 4
  %518 = bitcast i8* %517 to <4 x i8>*
  %519 = load <4 x i8>, <4 x i8>* %518, align 1
  %520 = zext <4 x i8> %519 to <4 x i32>
  %521 = getelementptr inbounds i8, i8* %490, i64 4
  %522 = bitcast i8* %521 to <4 x i8>*
  %523 = load <4 x i8>, <4 x i8>* %522, align 1
  %524 = zext <4 x i8> %523 to <4 x i32>
  %525 = mul nuw nsw <4 x i32> %524, %520
  %526 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %520
  %527 = getelementptr inbounds i8, i8* %491, i64 4
  %528 = bitcast i8* %527 to <4 x i8>*
  %529 = load <4 x i8>, <4 x i8>* %528, align 1
  %530 = zext <4 x i8> %529 to <4 x i32>
  %531 = mul nsw <4 x i32> %526, %530
  %532 = add nuw nsw <4 x i32> %525, <i32 32, i32 32, i32 32, i32 32>
  %533 = add nsw <4 x i32> %532, %531
  %534 = ashr <4 x i32> %533, <i32 6, i32 6, i32 6, i32 6>
  %535 = getelementptr inbounds i8, i8* %487, i64 4
  %536 = bitcast i8* %535 to <4 x i8>*
  %537 = load <4 x i8>, <4 x i8>* %536, align 1
  %538 = zext <4 x i8> %537 to <4 x i32>
  %539 = sub nsw <4 x i32> %534, %538
  %540 = icmp slt <4 x i32> %539, zeroinitializer
  %541 = sub nsw <4 x i32> zeroinitializer, %539
  %542 = select <4 x i1> %540, <4 x i32> %541, <4 x i32> %539
  %543 = add <4 x i32> %542, %516
  %544 = getelementptr inbounds i8, i8* %492, i64 8
  %545 = bitcast i8* %544 to <4 x i8>*
  %546 = load <4 x i8>, <4 x i8>* %545, align 1
  %547 = zext <4 x i8> %546 to <4 x i32>
  %548 = getelementptr inbounds i8, i8* %490, i64 8
  %549 = bitcast i8* %548 to <4 x i8>*
  %550 = load <4 x i8>, <4 x i8>* %549, align 1
  %551 = zext <4 x i8> %550 to <4 x i32>
  %552 = mul nuw nsw <4 x i32> %551, %547
  %553 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %547
  %554 = getelementptr inbounds i8, i8* %491, i64 8
  %555 = bitcast i8* %554 to <4 x i8>*
  %556 = load <4 x i8>, <4 x i8>* %555, align 1
  %557 = zext <4 x i8> %556 to <4 x i32>
  %558 = mul nsw <4 x i32> %553, %557
  %559 = add nuw nsw <4 x i32> %552, <i32 32, i32 32, i32 32, i32 32>
  %560 = add nsw <4 x i32> %559, %558
  %561 = ashr <4 x i32> %560, <i32 6, i32 6, i32 6, i32 6>
  %562 = getelementptr inbounds i8, i8* %487, i64 8
  %563 = bitcast i8* %562 to <4 x i8>*
  %564 = load <4 x i8>, <4 x i8>* %563, align 1
  %565 = zext <4 x i8> %564 to <4 x i32>
  %566 = sub nsw <4 x i32> %561, %565
  %567 = icmp slt <4 x i32> %566, zeroinitializer
  %568 = sub nsw <4 x i32> zeroinitializer, %566
  %569 = select <4 x i1> %567, <4 x i32> %568, <4 x i32> %566
  %570 = add <4 x i32> %569, %543
  %571 = getelementptr inbounds i8, i8* %492, i64 12
  %572 = bitcast i8* %571 to <4 x i8>*
  %573 = load <4 x i8>, <4 x i8>* %572, align 1
  %574 = zext <4 x i8> %573 to <4 x i32>
  %575 = getelementptr inbounds i8, i8* %490, i64 12
  %576 = bitcast i8* %575 to <4 x i8>*
  %577 = load <4 x i8>, <4 x i8>* %576, align 1
  %578 = zext <4 x i8> %577 to <4 x i32>
  %579 = mul nuw nsw <4 x i32> %578, %574
  %580 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %574
  %581 = getelementptr inbounds i8, i8* %491, i64 12
  %582 = bitcast i8* %581 to <4 x i8>*
  %583 = load <4 x i8>, <4 x i8>* %582, align 1
  %584 = zext <4 x i8> %583 to <4 x i32>
  %585 = mul nsw <4 x i32> %580, %584
  %586 = add nuw nsw <4 x i32> %579, <i32 32, i32 32, i32 32, i32 32>
  %587 = add nsw <4 x i32> %586, %585
  %588 = ashr <4 x i32> %587, <i32 6, i32 6, i32 6, i32 6>
  %589 = getelementptr inbounds i8, i8* %487, i64 12
  %590 = bitcast i8* %589 to <4 x i8>*
  %591 = load <4 x i8>, <4 x i8>* %590, align 1
  %592 = zext <4 x i8> %591 to <4 x i32>
  %593 = sub nsw <4 x i32> %588, %592
  %594 = icmp slt <4 x i32> %593, zeroinitializer
  %595 = sub nsw <4 x i32> zeroinitializer, %593
  %596 = select <4 x i1> %594, <4 x i32> %595, <4 x i32> %593
  %597 = add <4 x i32> %596, %570
  %598 = getelementptr inbounds i8, i8* %492, i64 16
  %599 = bitcast i8* %598 to <4 x i8>*
  %600 = load <4 x i8>, <4 x i8>* %599, align 1
  %601 = zext <4 x i8> %600 to <4 x i32>
  %602 = getelementptr inbounds i8, i8* %490, i64 16
  %603 = bitcast i8* %602 to <4 x i8>*
  %604 = load <4 x i8>, <4 x i8>* %603, align 1
  %605 = zext <4 x i8> %604 to <4 x i32>
  %606 = mul nuw nsw <4 x i32> %605, %601
  %607 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %601
  %608 = getelementptr inbounds i8, i8* %491, i64 16
  %609 = bitcast i8* %608 to <4 x i8>*
  %610 = load <4 x i8>, <4 x i8>* %609, align 1
  %611 = zext <4 x i8> %610 to <4 x i32>
  %612 = mul nsw <4 x i32> %607, %611
  %613 = add nuw nsw <4 x i32> %606, <i32 32, i32 32, i32 32, i32 32>
  %614 = add nsw <4 x i32> %613, %612
  %615 = ashr <4 x i32> %614, <i32 6, i32 6, i32 6, i32 6>
  %616 = getelementptr inbounds i8, i8* %487, i64 16
  %617 = bitcast i8* %616 to <4 x i8>*
  %618 = load <4 x i8>, <4 x i8>* %617, align 1
  %619 = zext <4 x i8> %618 to <4 x i32>
  %620 = sub nsw <4 x i32> %615, %619
  %621 = icmp slt <4 x i32> %620, zeroinitializer
  %622 = sub nsw <4 x i32> zeroinitializer, %620
  %623 = select <4 x i1> %621, <4 x i32> %622, <4 x i32> %620
  %624 = add <4 x i32> %623, %597
  %625 = getelementptr inbounds i8, i8* %492, i64 20
  %626 = bitcast i8* %625 to <4 x i8>*
  %627 = load <4 x i8>, <4 x i8>* %626, align 1
  %628 = zext <4 x i8> %627 to <4 x i32>
  %629 = getelementptr inbounds i8, i8* %490, i64 20
  %630 = bitcast i8* %629 to <4 x i8>*
  %631 = load <4 x i8>, <4 x i8>* %630, align 1
  %632 = zext <4 x i8> %631 to <4 x i32>
  %633 = mul nuw nsw <4 x i32> %632, %628
  %634 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %628
  %635 = getelementptr inbounds i8, i8* %491, i64 20
  %636 = bitcast i8* %635 to <4 x i8>*
  %637 = load <4 x i8>, <4 x i8>* %636, align 1
  %638 = zext <4 x i8> %637 to <4 x i32>
  %639 = mul nsw <4 x i32> %634, %638
  %640 = add nuw nsw <4 x i32> %633, <i32 32, i32 32, i32 32, i32 32>
  %641 = add nsw <4 x i32> %640, %639
  %642 = ashr <4 x i32> %641, <i32 6, i32 6, i32 6, i32 6>
  %643 = getelementptr inbounds i8, i8* %487, i64 20
  %644 = bitcast i8* %643 to <4 x i8>*
  %645 = load <4 x i8>, <4 x i8>* %644, align 1
  %646 = zext <4 x i8> %645 to <4 x i32>
  %647 = sub nsw <4 x i32> %642, %646
  %648 = icmp slt <4 x i32> %647, zeroinitializer
  %649 = sub nsw <4 x i32> zeroinitializer, %647
  %650 = select <4 x i1> %648, <4 x i32> %649, <4 x i32> %647
  %651 = add <4 x i32> %650, %624
  %652 = getelementptr inbounds i8, i8* %492, i64 24
  %653 = bitcast i8* %652 to <4 x i8>*
  %654 = load <4 x i8>, <4 x i8>* %653, align 1
  %655 = zext <4 x i8> %654 to <4 x i32>
  %656 = getelementptr inbounds i8, i8* %490, i64 24
  %657 = bitcast i8* %656 to <4 x i8>*
  %658 = load <4 x i8>, <4 x i8>* %657, align 1
  %659 = zext <4 x i8> %658 to <4 x i32>
  %660 = mul nuw nsw <4 x i32> %659, %655
  %661 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %655
  %662 = getelementptr inbounds i8, i8* %491, i64 24
  %663 = bitcast i8* %662 to <4 x i8>*
  %664 = load <4 x i8>, <4 x i8>* %663, align 1
  %665 = zext <4 x i8> %664 to <4 x i32>
  %666 = mul nsw <4 x i32> %661, %665
  %667 = add nuw nsw <4 x i32> %660, <i32 32, i32 32, i32 32, i32 32>
  %668 = add nsw <4 x i32> %667, %666
  %669 = ashr <4 x i32> %668, <i32 6, i32 6, i32 6, i32 6>
  %670 = getelementptr inbounds i8, i8* %487, i64 24
  %671 = bitcast i8* %670 to <4 x i8>*
  %672 = load <4 x i8>, <4 x i8>* %671, align 1
  %673 = zext <4 x i8> %672 to <4 x i32>
  %674 = sub nsw <4 x i32> %669, %673
  %675 = icmp slt <4 x i32> %674, zeroinitializer
  %676 = sub nsw <4 x i32> zeroinitializer, %674
  %677 = select <4 x i1> %675, <4 x i32> %676, <4 x i32> %674
  %678 = add <4 x i32> %677, %651
  %679 = getelementptr inbounds i8, i8* %492, i64 28
  %680 = bitcast i8* %679 to <4 x i8>*
  %681 = load <4 x i8>, <4 x i8>* %680, align 1
  %682 = zext <4 x i8> %681 to <4 x i32>
  %683 = getelementptr inbounds i8, i8* %490, i64 28
  %684 = bitcast i8* %683 to <4 x i8>*
  %685 = load <4 x i8>, <4 x i8>* %684, align 1
  %686 = zext <4 x i8> %685 to <4 x i32>
  %687 = mul nuw nsw <4 x i32> %686, %682
  %688 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %682
  %689 = getelementptr inbounds i8, i8* %491, i64 28
  %690 = bitcast i8* %689 to <4 x i8>*
  %691 = load <4 x i8>, <4 x i8>* %690, align 1
  %692 = zext <4 x i8> %691 to <4 x i32>
  %693 = mul nsw <4 x i32> %688, %692
  %694 = add nuw nsw <4 x i32> %687, <i32 32, i32 32, i32 32, i32 32>
  %695 = add nsw <4 x i32> %694, %693
  %696 = ashr <4 x i32> %695, <i32 6, i32 6, i32 6, i32 6>
  %697 = getelementptr inbounds i8, i8* %487, i64 28
  %698 = bitcast i8* %697 to <4 x i8>*
  %699 = load <4 x i8>, <4 x i8>* %698, align 1
  %700 = zext <4 x i8> %699 to <4 x i32>
  %701 = sub nsw <4 x i32> %696, %700
  %702 = icmp slt <4 x i32> %701, zeroinitializer
  %703 = sub nsw <4 x i32> zeroinitializer, %701
  %704 = select <4 x i1> %702, <4 x i32> %703, <4 x i32> %701
  %705 = add <4 x i32> %704, %678
  %706 = shufflevector <4 x i32> %705, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %707 = add <4 x i32> %705, %706
  %708 = shufflevector <4 x i32> %707, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %709 = add <4 x i32> %707, %708
  %710 = extractelement <4 x i32> %709, i32 0
  %711 = getelementptr inbounds i8, i8* %487, i64 %11
  %712 = getelementptr inbounds i8, i8* %490, i64 %12
  %713 = getelementptr inbounds i8, i8* %491, i64 32
  %714 = getelementptr inbounds i8, i8* %492, i64 %13
  %715 = add nuw nsw i32 %489, 1
  %716 = icmp eq i32 %715, 64
  br i1 %716, label %717, label %486

717:                                              ; preds = %486
  %718 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %710, i32* %718, align 4
  %719 = getelementptr inbounds i8*, i8** %2, i64 2
  %720 = load i8*, i8** %719, align 8
  br label %721

721:                                              ; preds = %717, %721
  %722 = phi i8* [ %0, %717 ], [ %946, %721 ]
  %723 = phi i32 [ 0, %717 ], [ %945, %721 ]
  %724 = phi i32 [ 0, %717 ], [ %950, %721 ]
  %725 = phi i8* [ %720, %717 ], [ %947, %721 ]
  %726 = phi i8* [ %4, %717 ], [ %948, %721 ]
  %727 = phi i8* [ %5, %717 ], [ %949, %721 ]
  %728 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %723, i32 0
  %729 = bitcast i8* %727 to <4 x i8>*
  %730 = load <4 x i8>, <4 x i8>* %729, align 1
  %731 = zext <4 x i8> %730 to <4 x i32>
  %732 = bitcast i8* %725 to <4 x i8>*
  %733 = load <4 x i8>, <4 x i8>* %732, align 1
  %734 = zext <4 x i8> %733 to <4 x i32>
  %735 = mul nuw nsw <4 x i32> %734, %731
  %736 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %731
  %737 = bitcast i8* %726 to <4 x i8>*
  %738 = load <4 x i8>, <4 x i8>* %737, align 1
  %739 = zext <4 x i8> %738 to <4 x i32>
  %740 = mul nsw <4 x i32> %736, %739
  %741 = add nuw nsw <4 x i32> %735, <i32 32, i32 32, i32 32, i32 32>
  %742 = add nsw <4 x i32> %741, %740
  %743 = ashr <4 x i32> %742, <i32 6, i32 6, i32 6, i32 6>
  %744 = bitcast i8* %722 to <4 x i8>*
  %745 = load <4 x i8>, <4 x i8>* %744, align 1
  %746 = zext <4 x i8> %745 to <4 x i32>
  %747 = sub nsw <4 x i32> %743, %746
  %748 = icmp slt <4 x i32> %747, zeroinitializer
  %749 = sub nsw <4 x i32> zeroinitializer, %747
  %750 = select <4 x i1> %748, <4 x i32> %749, <4 x i32> %747
  %751 = add <4 x i32> %750, %728
  %752 = getelementptr inbounds i8, i8* %727, i64 4
  %753 = bitcast i8* %752 to <4 x i8>*
  %754 = load <4 x i8>, <4 x i8>* %753, align 1
  %755 = zext <4 x i8> %754 to <4 x i32>
  %756 = getelementptr inbounds i8, i8* %725, i64 4
  %757 = bitcast i8* %756 to <4 x i8>*
  %758 = load <4 x i8>, <4 x i8>* %757, align 1
  %759 = zext <4 x i8> %758 to <4 x i32>
  %760 = mul nuw nsw <4 x i32> %759, %755
  %761 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %755
  %762 = getelementptr inbounds i8, i8* %726, i64 4
  %763 = bitcast i8* %762 to <4 x i8>*
  %764 = load <4 x i8>, <4 x i8>* %763, align 1
  %765 = zext <4 x i8> %764 to <4 x i32>
  %766 = mul nsw <4 x i32> %761, %765
  %767 = add nuw nsw <4 x i32> %760, <i32 32, i32 32, i32 32, i32 32>
  %768 = add nsw <4 x i32> %767, %766
  %769 = ashr <4 x i32> %768, <i32 6, i32 6, i32 6, i32 6>
  %770 = getelementptr inbounds i8, i8* %722, i64 4
  %771 = bitcast i8* %770 to <4 x i8>*
  %772 = load <4 x i8>, <4 x i8>* %771, align 1
  %773 = zext <4 x i8> %772 to <4 x i32>
  %774 = sub nsw <4 x i32> %769, %773
  %775 = icmp slt <4 x i32> %774, zeroinitializer
  %776 = sub nsw <4 x i32> zeroinitializer, %774
  %777 = select <4 x i1> %775, <4 x i32> %776, <4 x i32> %774
  %778 = add <4 x i32> %777, %751
  %779 = getelementptr inbounds i8, i8* %727, i64 8
  %780 = bitcast i8* %779 to <4 x i8>*
  %781 = load <4 x i8>, <4 x i8>* %780, align 1
  %782 = zext <4 x i8> %781 to <4 x i32>
  %783 = getelementptr inbounds i8, i8* %725, i64 8
  %784 = bitcast i8* %783 to <4 x i8>*
  %785 = load <4 x i8>, <4 x i8>* %784, align 1
  %786 = zext <4 x i8> %785 to <4 x i32>
  %787 = mul nuw nsw <4 x i32> %786, %782
  %788 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %782
  %789 = getelementptr inbounds i8, i8* %726, i64 8
  %790 = bitcast i8* %789 to <4 x i8>*
  %791 = load <4 x i8>, <4 x i8>* %790, align 1
  %792 = zext <4 x i8> %791 to <4 x i32>
  %793 = mul nsw <4 x i32> %788, %792
  %794 = add nuw nsw <4 x i32> %787, <i32 32, i32 32, i32 32, i32 32>
  %795 = add nsw <4 x i32> %794, %793
  %796 = ashr <4 x i32> %795, <i32 6, i32 6, i32 6, i32 6>
  %797 = getelementptr inbounds i8, i8* %722, i64 8
  %798 = bitcast i8* %797 to <4 x i8>*
  %799 = load <4 x i8>, <4 x i8>* %798, align 1
  %800 = zext <4 x i8> %799 to <4 x i32>
  %801 = sub nsw <4 x i32> %796, %800
  %802 = icmp slt <4 x i32> %801, zeroinitializer
  %803 = sub nsw <4 x i32> zeroinitializer, %801
  %804 = select <4 x i1> %802, <4 x i32> %803, <4 x i32> %801
  %805 = add <4 x i32> %804, %778
  %806 = getelementptr inbounds i8, i8* %727, i64 12
  %807 = bitcast i8* %806 to <4 x i8>*
  %808 = load <4 x i8>, <4 x i8>* %807, align 1
  %809 = zext <4 x i8> %808 to <4 x i32>
  %810 = getelementptr inbounds i8, i8* %725, i64 12
  %811 = bitcast i8* %810 to <4 x i8>*
  %812 = load <4 x i8>, <4 x i8>* %811, align 1
  %813 = zext <4 x i8> %812 to <4 x i32>
  %814 = mul nuw nsw <4 x i32> %813, %809
  %815 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %809
  %816 = getelementptr inbounds i8, i8* %726, i64 12
  %817 = bitcast i8* %816 to <4 x i8>*
  %818 = load <4 x i8>, <4 x i8>* %817, align 1
  %819 = zext <4 x i8> %818 to <4 x i32>
  %820 = mul nsw <4 x i32> %815, %819
  %821 = add nuw nsw <4 x i32> %814, <i32 32, i32 32, i32 32, i32 32>
  %822 = add nsw <4 x i32> %821, %820
  %823 = ashr <4 x i32> %822, <i32 6, i32 6, i32 6, i32 6>
  %824 = getelementptr inbounds i8, i8* %722, i64 12
  %825 = bitcast i8* %824 to <4 x i8>*
  %826 = load <4 x i8>, <4 x i8>* %825, align 1
  %827 = zext <4 x i8> %826 to <4 x i32>
  %828 = sub nsw <4 x i32> %823, %827
  %829 = icmp slt <4 x i32> %828, zeroinitializer
  %830 = sub nsw <4 x i32> zeroinitializer, %828
  %831 = select <4 x i1> %829, <4 x i32> %830, <4 x i32> %828
  %832 = add <4 x i32> %831, %805
  %833 = getelementptr inbounds i8, i8* %727, i64 16
  %834 = bitcast i8* %833 to <4 x i8>*
  %835 = load <4 x i8>, <4 x i8>* %834, align 1
  %836 = zext <4 x i8> %835 to <4 x i32>
  %837 = getelementptr inbounds i8, i8* %725, i64 16
  %838 = bitcast i8* %837 to <4 x i8>*
  %839 = load <4 x i8>, <4 x i8>* %838, align 1
  %840 = zext <4 x i8> %839 to <4 x i32>
  %841 = mul nuw nsw <4 x i32> %840, %836
  %842 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %836
  %843 = getelementptr inbounds i8, i8* %726, i64 16
  %844 = bitcast i8* %843 to <4 x i8>*
  %845 = load <4 x i8>, <4 x i8>* %844, align 1
  %846 = zext <4 x i8> %845 to <4 x i32>
  %847 = mul nsw <4 x i32> %842, %846
  %848 = add nuw nsw <4 x i32> %841, <i32 32, i32 32, i32 32, i32 32>
  %849 = add nsw <4 x i32> %848, %847
  %850 = ashr <4 x i32> %849, <i32 6, i32 6, i32 6, i32 6>
  %851 = getelementptr inbounds i8, i8* %722, i64 16
  %852 = bitcast i8* %851 to <4 x i8>*
  %853 = load <4 x i8>, <4 x i8>* %852, align 1
  %854 = zext <4 x i8> %853 to <4 x i32>
  %855 = sub nsw <4 x i32> %850, %854
  %856 = icmp slt <4 x i32> %855, zeroinitializer
  %857 = sub nsw <4 x i32> zeroinitializer, %855
  %858 = select <4 x i1> %856, <4 x i32> %857, <4 x i32> %855
  %859 = add <4 x i32> %858, %832
  %860 = getelementptr inbounds i8, i8* %727, i64 20
  %861 = bitcast i8* %860 to <4 x i8>*
  %862 = load <4 x i8>, <4 x i8>* %861, align 1
  %863 = zext <4 x i8> %862 to <4 x i32>
  %864 = getelementptr inbounds i8, i8* %725, i64 20
  %865 = bitcast i8* %864 to <4 x i8>*
  %866 = load <4 x i8>, <4 x i8>* %865, align 1
  %867 = zext <4 x i8> %866 to <4 x i32>
  %868 = mul nuw nsw <4 x i32> %867, %863
  %869 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %863
  %870 = getelementptr inbounds i8, i8* %726, i64 20
  %871 = bitcast i8* %870 to <4 x i8>*
  %872 = load <4 x i8>, <4 x i8>* %871, align 1
  %873 = zext <4 x i8> %872 to <4 x i32>
  %874 = mul nsw <4 x i32> %869, %873
  %875 = add nuw nsw <4 x i32> %868, <i32 32, i32 32, i32 32, i32 32>
  %876 = add nsw <4 x i32> %875, %874
  %877 = ashr <4 x i32> %876, <i32 6, i32 6, i32 6, i32 6>
  %878 = getelementptr inbounds i8, i8* %722, i64 20
  %879 = bitcast i8* %878 to <4 x i8>*
  %880 = load <4 x i8>, <4 x i8>* %879, align 1
  %881 = zext <4 x i8> %880 to <4 x i32>
  %882 = sub nsw <4 x i32> %877, %881
  %883 = icmp slt <4 x i32> %882, zeroinitializer
  %884 = sub nsw <4 x i32> zeroinitializer, %882
  %885 = select <4 x i1> %883, <4 x i32> %884, <4 x i32> %882
  %886 = add <4 x i32> %885, %859
  %887 = getelementptr inbounds i8, i8* %727, i64 24
  %888 = bitcast i8* %887 to <4 x i8>*
  %889 = load <4 x i8>, <4 x i8>* %888, align 1
  %890 = zext <4 x i8> %889 to <4 x i32>
  %891 = getelementptr inbounds i8, i8* %725, i64 24
  %892 = bitcast i8* %891 to <4 x i8>*
  %893 = load <4 x i8>, <4 x i8>* %892, align 1
  %894 = zext <4 x i8> %893 to <4 x i32>
  %895 = mul nuw nsw <4 x i32> %894, %890
  %896 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %890
  %897 = getelementptr inbounds i8, i8* %726, i64 24
  %898 = bitcast i8* %897 to <4 x i8>*
  %899 = load <4 x i8>, <4 x i8>* %898, align 1
  %900 = zext <4 x i8> %899 to <4 x i32>
  %901 = mul nsw <4 x i32> %896, %900
  %902 = add nuw nsw <4 x i32> %895, <i32 32, i32 32, i32 32, i32 32>
  %903 = add nsw <4 x i32> %902, %901
  %904 = ashr <4 x i32> %903, <i32 6, i32 6, i32 6, i32 6>
  %905 = getelementptr inbounds i8, i8* %722, i64 24
  %906 = bitcast i8* %905 to <4 x i8>*
  %907 = load <4 x i8>, <4 x i8>* %906, align 1
  %908 = zext <4 x i8> %907 to <4 x i32>
  %909 = sub nsw <4 x i32> %904, %908
  %910 = icmp slt <4 x i32> %909, zeroinitializer
  %911 = sub nsw <4 x i32> zeroinitializer, %909
  %912 = select <4 x i1> %910, <4 x i32> %911, <4 x i32> %909
  %913 = add <4 x i32> %912, %886
  %914 = getelementptr inbounds i8, i8* %727, i64 28
  %915 = bitcast i8* %914 to <4 x i8>*
  %916 = load <4 x i8>, <4 x i8>* %915, align 1
  %917 = zext <4 x i8> %916 to <4 x i32>
  %918 = getelementptr inbounds i8, i8* %725, i64 28
  %919 = bitcast i8* %918 to <4 x i8>*
  %920 = load <4 x i8>, <4 x i8>* %919, align 1
  %921 = zext <4 x i8> %920 to <4 x i32>
  %922 = mul nuw nsw <4 x i32> %921, %917
  %923 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %917
  %924 = getelementptr inbounds i8, i8* %726, i64 28
  %925 = bitcast i8* %924 to <4 x i8>*
  %926 = load <4 x i8>, <4 x i8>* %925, align 1
  %927 = zext <4 x i8> %926 to <4 x i32>
  %928 = mul nsw <4 x i32> %923, %927
  %929 = add nuw nsw <4 x i32> %922, <i32 32, i32 32, i32 32, i32 32>
  %930 = add nsw <4 x i32> %929, %928
  %931 = ashr <4 x i32> %930, <i32 6, i32 6, i32 6, i32 6>
  %932 = getelementptr inbounds i8, i8* %722, i64 28
  %933 = bitcast i8* %932 to <4 x i8>*
  %934 = load <4 x i8>, <4 x i8>* %933, align 1
  %935 = zext <4 x i8> %934 to <4 x i32>
  %936 = sub nsw <4 x i32> %931, %935
  %937 = icmp slt <4 x i32> %936, zeroinitializer
  %938 = sub nsw <4 x i32> zeroinitializer, %936
  %939 = select <4 x i1> %937, <4 x i32> %938, <4 x i32> %936
  %940 = add <4 x i32> %939, %913
  %941 = shufflevector <4 x i32> %940, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %942 = add <4 x i32> %940, %941
  %943 = shufflevector <4 x i32> %942, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %944 = add <4 x i32> %942, %943
  %945 = extractelement <4 x i32> %944, i32 0
  %946 = getelementptr inbounds i8, i8* %722, i64 %11
  %947 = getelementptr inbounds i8, i8* %725, i64 %12
  %948 = getelementptr inbounds i8, i8* %726, i64 32
  %949 = getelementptr inbounds i8, i8* %727, i64 %13
  %950 = add nuw nsw i32 %724, 1
  %951 = icmp eq i32 %950, 64
  br i1 %951, label %952, label %721

952:                                              ; preds = %721
  %953 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %945, i32* %953, align 4
  %954 = getelementptr inbounds i8*, i8** %2, i64 3
  %955 = load i8*, i8** %954, align 8
  br label %956

956:                                              ; preds = %952, %956
  %957 = phi i8* [ %0, %952 ], [ %1181, %956 ]
  %958 = phi i32 [ 0, %952 ], [ %1180, %956 ]
  %959 = phi i32 [ 0, %952 ], [ %1185, %956 ]
  %960 = phi i8* [ %955, %952 ], [ %1182, %956 ]
  %961 = phi i8* [ %4, %952 ], [ %1183, %956 ]
  %962 = phi i8* [ %5, %952 ], [ %1184, %956 ]
  %963 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %958, i32 0
  %964 = bitcast i8* %962 to <4 x i8>*
  %965 = load <4 x i8>, <4 x i8>* %964, align 1
  %966 = zext <4 x i8> %965 to <4 x i32>
  %967 = bitcast i8* %960 to <4 x i8>*
  %968 = load <4 x i8>, <4 x i8>* %967, align 1
  %969 = zext <4 x i8> %968 to <4 x i32>
  %970 = mul nuw nsw <4 x i32> %969, %966
  %971 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %966
  %972 = bitcast i8* %961 to <4 x i8>*
  %973 = load <4 x i8>, <4 x i8>* %972, align 1
  %974 = zext <4 x i8> %973 to <4 x i32>
  %975 = mul nsw <4 x i32> %971, %974
  %976 = add nuw nsw <4 x i32> %970, <i32 32, i32 32, i32 32, i32 32>
  %977 = add nsw <4 x i32> %976, %975
  %978 = ashr <4 x i32> %977, <i32 6, i32 6, i32 6, i32 6>
  %979 = bitcast i8* %957 to <4 x i8>*
  %980 = load <4 x i8>, <4 x i8>* %979, align 1
  %981 = zext <4 x i8> %980 to <4 x i32>
  %982 = sub nsw <4 x i32> %978, %981
  %983 = icmp slt <4 x i32> %982, zeroinitializer
  %984 = sub nsw <4 x i32> zeroinitializer, %982
  %985 = select <4 x i1> %983, <4 x i32> %984, <4 x i32> %982
  %986 = add <4 x i32> %985, %963
  %987 = getelementptr inbounds i8, i8* %962, i64 4
  %988 = bitcast i8* %987 to <4 x i8>*
  %989 = load <4 x i8>, <4 x i8>* %988, align 1
  %990 = zext <4 x i8> %989 to <4 x i32>
  %991 = getelementptr inbounds i8, i8* %960, i64 4
  %992 = bitcast i8* %991 to <4 x i8>*
  %993 = load <4 x i8>, <4 x i8>* %992, align 1
  %994 = zext <4 x i8> %993 to <4 x i32>
  %995 = mul nuw nsw <4 x i32> %994, %990
  %996 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %990
  %997 = getelementptr inbounds i8, i8* %961, i64 4
  %998 = bitcast i8* %997 to <4 x i8>*
  %999 = load <4 x i8>, <4 x i8>* %998, align 1
  %1000 = zext <4 x i8> %999 to <4 x i32>
  %1001 = mul nsw <4 x i32> %996, %1000
  %1002 = add nuw nsw <4 x i32> %995, <i32 32, i32 32, i32 32, i32 32>
  %1003 = add nsw <4 x i32> %1002, %1001
  %1004 = ashr <4 x i32> %1003, <i32 6, i32 6, i32 6, i32 6>
  %1005 = getelementptr inbounds i8, i8* %957, i64 4
  %1006 = bitcast i8* %1005 to <4 x i8>*
  %1007 = load <4 x i8>, <4 x i8>* %1006, align 1
  %1008 = zext <4 x i8> %1007 to <4 x i32>
  %1009 = sub nsw <4 x i32> %1004, %1008
  %1010 = icmp slt <4 x i32> %1009, zeroinitializer
  %1011 = sub nsw <4 x i32> zeroinitializer, %1009
  %1012 = select <4 x i1> %1010, <4 x i32> %1011, <4 x i32> %1009
  %1013 = add <4 x i32> %1012, %986
  %1014 = getelementptr inbounds i8, i8* %962, i64 8
  %1015 = bitcast i8* %1014 to <4 x i8>*
  %1016 = load <4 x i8>, <4 x i8>* %1015, align 1
  %1017 = zext <4 x i8> %1016 to <4 x i32>
  %1018 = getelementptr inbounds i8, i8* %960, i64 8
  %1019 = bitcast i8* %1018 to <4 x i8>*
  %1020 = load <4 x i8>, <4 x i8>* %1019, align 1
  %1021 = zext <4 x i8> %1020 to <4 x i32>
  %1022 = mul nuw nsw <4 x i32> %1021, %1017
  %1023 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1017
  %1024 = getelementptr inbounds i8, i8* %961, i64 8
  %1025 = bitcast i8* %1024 to <4 x i8>*
  %1026 = load <4 x i8>, <4 x i8>* %1025, align 1
  %1027 = zext <4 x i8> %1026 to <4 x i32>
  %1028 = mul nsw <4 x i32> %1023, %1027
  %1029 = add nuw nsw <4 x i32> %1022, <i32 32, i32 32, i32 32, i32 32>
  %1030 = add nsw <4 x i32> %1029, %1028
  %1031 = ashr <4 x i32> %1030, <i32 6, i32 6, i32 6, i32 6>
  %1032 = getelementptr inbounds i8, i8* %957, i64 8
  %1033 = bitcast i8* %1032 to <4 x i8>*
  %1034 = load <4 x i8>, <4 x i8>* %1033, align 1
  %1035 = zext <4 x i8> %1034 to <4 x i32>
  %1036 = sub nsw <4 x i32> %1031, %1035
  %1037 = icmp slt <4 x i32> %1036, zeroinitializer
  %1038 = sub nsw <4 x i32> zeroinitializer, %1036
  %1039 = select <4 x i1> %1037, <4 x i32> %1038, <4 x i32> %1036
  %1040 = add <4 x i32> %1039, %1013
  %1041 = getelementptr inbounds i8, i8* %962, i64 12
  %1042 = bitcast i8* %1041 to <4 x i8>*
  %1043 = load <4 x i8>, <4 x i8>* %1042, align 1
  %1044 = zext <4 x i8> %1043 to <4 x i32>
  %1045 = getelementptr inbounds i8, i8* %960, i64 12
  %1046 = bitcast i8* %1045 to <4 x i8>*
  %1047 = load <4 x i8>, <4 x i8>* %1046, align 1
  %1048 = zext <4 x i8> %1047 to <4 x i32>
  %1049 = mul nuw nsw <4 x i32> %1048, %1044
  %1050 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1044
  %1051 = getelementptr inbounds i8, i8* %961, i64 12
  %1052 = bitcast i8* %1051 to <4 x i8>*
  %1053 = load <4 x i8>, <4 x i8>* %1052, align 1
  %1054 = zext <4 x i8> %1053 to <4 x i32>
  %1055 = mul nsw <4 x i32> %1050, %1054
  %1056 = add nuw nsw <4 x i32> %1049, <i32 32, i32 32, i32 32, i32 32>
  %1057 = add nsw <4 x i32> %1056, %1055
  %1058 = ashr <4 x i32> %1057, <i32 6, i32 6, i32 6, i32 6>
  %1059 = getelementptr inbounds i8, i8* %957, i64 12
  %1060 = bitcast i8* %1059 to <4 x i8>*
  %1061 = load <4 x i8>, <4 x i8>* %1060, align 1
  %1062 = zext <4 x i8> %1061 to <4 x i32>
  %1063 = sub nsw <4 x i32> %1058, %1062
  %1064 = icmp slt <4 x i32> %1063, zeroinitializer
  %1065 = sub nsw <4 x i32> zeroinitializer, %1063
  %1066 = select <4 x i1> %1064, <4 x i32> %1065, <4 x i32> %1063
  %1067 = add <4 x i32> %1066, %1040
  %1068 = getelementptr inbounds i8, i8* %962, i64 16
  %1069 = bitcast i8* %1068 to <4 x i8>*
  %1070 = load <4 x i8>, <4 x i8>* %1069, align 1
  %1071 = zext <4 x i8> %1070 to <4 x i32>
  %1072 = getelementptr inbounds i8, i8* %960, i64 16
  %1073 = bitcast i8* %1072 to <4 x i8>*
  %1074 = load <4 x i8>, <4 x i8>* %1073, align 1
  %1075 = zext <4 x i8> %1074 to <4 x i32>
  %1076 = mul nuw nsw <4 x i32> %1075, %1071
  %1077 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1071
  %1078 = getelementptr inbounds i8, i8* %961, i64 16
  %1079 = bitcast i8* %1078 to <4 x i8>*
  %1080 = load <4 x i8>, <4 x i8>* %1079, align 1
  %1081 = zext <4 x i8> %1080 to <4 x i32>
  %1082 = mul nsw <4 x i32> %1077, %1081
  %1083 = add nuw nsw <4 x i32> %1076, <i32 32, i32 32, i32 32, i32 32>
  %1084 = add nsw <4 x i32> %1083, %1082
  %1085 = ashr <4 x i32> %1084, <i32 6, i32 6, i32 6, i32 6>
  %1086 = getelementptr inbounds i8, i8* %957, i64 16
  %1087 = bitcast i8* %1086 to <4 x i8>*
  %1088 = load <4 x i8>, <4 x i8>* %1087, align 1
  %1089 = zext <4 x i8> %1088 to <4 x i32>
  %1090 = sub nsw <4 x i32> %1085, %1089
  %1091 = icmp slt <4 x i32> %1090, zeroinitializer
  %1092 = sub nsw <4 x i32> zeroinitializer, %1090
  %1093 = select <4 x i1> %1091, <4 x i32> %1092, <4 x i32> %1090
  %1094 = add <4 x i32> %1093, %1067
  %1095 = getelementptr inbounds i8, i8* %962, i64 20
  %1096 = bitcast i8* %1095 to <4 x i8>*
  %1097 = load <4 x i8>, <4 x i8>* %1096, align 1
  %1098 = zext <4 x i8> %1097 to <4 x i32>
  %1099 = getelementptr inbounds i8, i8* %960, i64 20
  %1100 = bitcast i8* %1099 to <4 x i8>*
  %1101 = load <4 x i8>, <4 x i8>* %1100, align 1
  %1102 = zext <4 x i8> %1101 to <4 x i32>
  %1103 = mul nuw nsw <4 x i32> %1102, %1098
  %1104 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1098
  %1105 = getelementptr inbounds i8, i8* %961, i64 20
  %1106 = bitcast i8* %1105 to <4 x i8>*
  %1107 = load <4 x i8>, <4 x i8>* %1106, align 1
  %1108 = zext <4 x i8> %1107 to <4 x i32>
  %1109 = mul nsw <4 x i32> %1104, %1108
  %1110 = add nuw nsw <4 x i32> %1103, <i32 32, i32 32, i32 32, i32 32>
  %1111 = add nsw <4 x i32> %1110, %1109
  %1112 = ashr <4 x i32> %1111, <i32 6, i32 6, i32 6, i32 6>
  %1113 = getelementptr inbounds i8, i8* %957, i64 20
  %1114 = bitcast i8* %1113 to <4 x i8>*
  %1115 = load <4 x i8>, <4 x i8>* %1114, align 1
  %1116 = zext <4 x i8> %1115 to <4 x i32>
  %1117 = sub nsw <4 x i32> %1112, %1116
  %1118 = icmp slt <4 x i32> %1117, zeroinitializer
  %1119 = sub nsw <4 x i32> zeroinitializer, %1117
  %1120 = select <4 x i1> %1118, <4 x i32> %1119, <4 x i32> %1117
  %1121 = add <4 x i32> %1120, %1094
  %1122 = getelementptr inbounds i8, i8* %962, i64 24
  %1123 = bitcast i8* %1122 to <4 x i8>*
  %1124 = load <4 x i8>, <4 x i8>* %1123, align 1
  %1125 = zext <4 x i8> %1124 to <4 x i32>
  %1126 = getelementptr inbounds i8, i8* %960, i64 24
  %1127 = bitcast i8* %1126 to <4 x i8>*
  %1128 = load <4 x i8>, <4 x i8>* %1127, align 1
  %1129 = zext <4 x i8> %1128 to <4 x i32>
  %1130 = mul nuw nsw <4 x i32> %1129, %1125
  %1131 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1125
  %1132 = getelementptr inbounds i8, i8* %961, i64 24
  %1133 = bitcast i8* %1132 to <4 x i8>*
  %1134 = load <4 x i8>, <4 x i8>* %1133, align 1
  %1135 = zext <4 x i8> %1134 to <4 x i32>
  %1136 = mul nsw <4 x i32> %1131, %1135
  %1137 = add nuw nsw <4 x i32> %1130, <i32 32, i32 32, i32 32, i32 32>
  %1138 = add nsw <4 x i32> %1137, %1136
  %1139 = ashr <4 x i32> %1138, <i32 6, i32 6, i32 6, i32 6>
  %1140 = getelementptr inbounds i8, i8* %957, i64 24
  %1141 = bitcast i8* %1140 to <4 x i8>*
  %1142 = load <4 x i8>, <4 x i8>* %1141, align 1
  %1143 = zext <4 x i8> %1142 to <4 x i32>
  %1144 = sub nsw <4 x i32> %1139, %1143
  %1145 = icmp slt <4 x i32> %1144, zeroinitializer
  %1146 = sub nsw <4 x i32> zeroinitializer, %1144
  %1147 = select <4 x i1> %1145, <4 x i32> %1146, <4 x i32> %1144
  %1148 = add <4 x i32> %1147, %1121
  %1149 = getelementptr inbounds i8, i8* %962, i64 28
  %1150 = bitcast i8* %1149 to <4 x i8>*
  %1151 = load <4 x i8>, <4 x i8>* %1150, align 1
  %1152 = zext <4 x i8> %1151 to <4 x i32>
  %1153 = getelementptr inbounds i8, i8* %960, i64 28
  %1154 = bitcast i8* %1153 to <4 x i8>*
  %1155 = load <4 x i8>, <4 x i8>* %1154, align 1
  %1156 = zext <4 x i8> %1155 to <4 x i32>
  %1157 = mul nuw nsw <4 x i32> %1156, %1152
  %1158 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1152
  %1159 = getelementptr inbounds i8, i8* %961, i64 28
  %1160 = bitcast i8* %1159 to <4 x i8>*
  %1161 = load <4 x i8>, <4 x i8>* %1160, align 1
  %1162 = zext <4 x i8> %1161 to <4 x i32>
  %1163 = mul nsw <4 x i32> %1158, %1162
  %1164 = add nuw nsw <4 x i32> %1157, <i32 32, i32 32, i32 32, i32 32>
  %1165 = add nsw <4 x i32> %1164, %1163
  %1166 = ashr <4 x i32> %1165, <i32 6, i32 6, i32 6, i32 6>
  %1167 = getelementptr inbounds i8, i8* %957, i64 28
  %1168 = bitcast i8* %1167 to <4 x i8>*
  %1169 = load <4 x i8>, <4 x i8>* %1168, align 1
  %1170 = zext <4 x i8> %1169 to <4 x i32>
  %1171 = sub nsw <4 x i32> %1166, %1170
  %1172 = icmp slt <4 x i32> %1171, zeroinitializer
  %1173 = sub nsw <4 x i32> zeroinitializer, %1171
  %1174 = select <4 x i1> %1172, <4 x i32> %1173, <4 x i32> %1171
  %1175 = add <4 x i32> %1174, %1148
  %1176 = shufflevector <4 x i32> %1175, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1177 = add <4 x i32> %1175, %1176
  %1178 = shufflevector <4 x i32> %1177, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1179 = add <4 x i32> %1177, %1178
  %1180 = extractelement <4 x i32> %1179, i32 0
  %1181 = getelementptr inbounds i8, i8* %957, i64 %11
  %1182 = getelementptr inbounds i8, i8* %960, i64 %12
  %1183 = getelementptr inbounds i8, i8* %961, i64 32
  %1184 = getelementptr inbounds i8, i8* %962, i64 %13
  %1185 = add nuw nsw i32 %959, 1
  %1186 = icmp eq i32 %1185, 64
  br i1 %1186, label %483, label %956

1187:                                             ; preds = %480, %1187
  %1188 = phi i8* [ %0, %480 ], [ %1412, %1187 ]
  %1189 = phi i32 [ 0, %480 ], [ %1411, %1187 ]
  %1190 = phi i32 [ 0, %480 ], [ %1416, %1187 ]
  %1191 = phi i8* [ %4, %480 ], [ %1413, %1187 ]
  %1192 = phi i8* [ %482, %480 ], [ %1414, %1187 ]
  %1193 = phi i8* [ %5, %480 ], [ %1415, %1187 ]
  %1194 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1189, i32 0
  %1195 = bitcast i8* %1193 to <4 x i8>*
  %1196 = load <4 x i8>, <4 x i8>* %1195, align 1
  %1197 = zext <4 x i8> %1196 to <4 x i32>
  %1198 = bitcast i8* %1191 to <4 x i8>*
  %1199 = load <4 x i8>, <4 x i8>* %1198, align 1
  %1200 = zext <4 x i8> %1199 to <4 x i32>
  %1201 = mul nuw nsw <4 x i32> %1200, %1197
  %1202 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1197
  %1203 = bitcast i8* %1192 to <4 x i8>*
  %1204 = load <4 x i8>, <4 x i8>* %1203, align 1
  %1205 = zext <4 x i8> %1204 to <4 x i32>
  %1206 = mul nsw <4 x i32> %1202, %1205
  %1207 = add nuw nsw <4 x i32> %1201, <i32 32, i32 32, i32 32, i32 32>
  %1208 = add nsw <4 x i32> %1207, %1206
  %1209 = ashr <4 x i32> %1208, <i32 6, i32 6, i32 6, i32 6>
  %1210 = bitcast i8* %1188 to <4 x i8>*
  %1211 = load <4 x i8>, <4 x i8>* %1210, align 1
  %1212 = zext <4 x i8> %1211 to <4 x i32>
  %1213 = sub nsw <4 x i32> %1209, %1212
  %1214 = icmp slt <4 x i32> %1213, zeroinitializer
  %1215 = sub nsw <4 x i32> zeroinitializer, %1213
  %1216 = select <4 x i1> %1214, <4 x i32> %1215, <4 x i32> %1213
  %1217 = add <4 x i32> %1216, %1194
  %1218 = getelementptr inbounds i8, i8* %1193, i64 4
  %1219 = bitcast i8* %1218 to <4 x i8>*
  %1220 = load <4 x i8>, <4 x i8>* %1219, align 1
  %1221 = zext <4 x i8> %1220 to <4 x i32>
  %1222 = getelementptr inbounds i8, i8* %1191, i64 4
  %1223 = bitcast i8* %1222 to <4 x i8>*
  %1224 = load <4 x i8>, <4 x i8>* %1223, align 1
  %1225 = zext <4 x i8> %1224 to <4 x i32>
  %1226 = mul nuw nsw <4 x i32> %1225, %1221
  %1227 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1221
  %1228 = getelementptr inbounds i8, i8* %1192, i64 4
  %1229 = bitcast i8* %1228 to <4 x i8>*
  %1230 = load <4 x i8>, <4 x i8>* %1229, align 1
  %1231 = zext <4 x i8> %1230 to <4 x i32>
  %1232 = mul nsw <4 x i32> %1227, %1231
  %1233 = add nuw nsw <4 x i32> %1226, <i32 32, i32 32, i32 32, i32 32>
  %1234 = add nsw <4 x i32> %1233, %1232
  %1235 = ashr <4 x i32> %1234, <i32 6, i32 6, i32 6, i32 6>
  %1236 = getelementptr inbounds i8, i8* %1188, i64 4
  %1237 = bitcast i8* %1236 to <4 x i8>*
  %1238 = load <4 x i8>, <4 x i8>* %1237, align 1
  %1239 = zext <4 x i8> %1238 to <4 x i32>
  %1240 = sub nsw <4 x i32> %1235, %1239
  %1241 = icmp slt <4 x i32> %1240, zeroinitializer
  %1242 = sub nsw <4 x i32> zeroinitializer, %1240
  %1243 = select <4 x i1> %1241, <4 x i32> %1242, <4 x i32> %1240
  %1244 = add <4 x i32> %1243, %1217
  %1245 = getelementptr inbounds i8, i8* %1193, i64 8
  %1246 = bitcast i8* %1245 to <4 x i8>*
  %1247 = load <4 x i8>, <4 x i8>* %1246, align 1
  %1248 = zext <4 x i8> %1247 to <4 x i32>
  %1249 = getelementptr inbounds i8, i8* %1191, i64 8
  %1250 = bitcast i8* %1249 to <4 x i8>*
  %1251 = load <4 x i8>, <4 x i8>* %1250, align 1
  %1252 = zext <4 x i8> %1251 to <4 x i32>
  %1253 = mul nuw nsw <4 x i32> %1252, %1248
  %1254 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1248
  %1255 = getelementptr inbounds i8, i8* %1192, i64 8
  %1256 = bitcast i8* %1255 to <4 x i8>*
  %1257 = load <4 x i8>, <4 x i8>* %1256, align 1
  %1258 = zext <4 x i8> %1257 to <4 x i32>
  %1259 = mul nsw <4 x i32> %1254, %1258
  %1260 = add nuw nsw <4 x i32> %1253, <i32 32, i32 32, i32 32, i32 32>
  %1261 = add nsw <4 x i32> %1260, %1259
  %1262 = ashr <4 x i32> %1261, <i32 6, i32 6, i32 6, i32 6>
  %1263 = getelementptr inbounds i8, i8* %1188, i64 8
  %1264 = bitcast i8* %1263 to <4 x i8>*
  %1265 = load <4 x i8>, <4 x i8>* %1264, align 1
  %1266 = zext <4 x i8> %1265 to <4 x i32>
  %1267 = sub nsw <4 x i32> %1262, %1266
  %1268 = icmp slt <4 x i32> %1267, zeroinitializer
  %1269 = sub nsw <4 x i32> zeroinitializer, %1267
  %1270 = select <4 x i1> %1268, <4 x i32> %1269, <4 x i32> %1267
  %1271 = add <4 x i32> %1270, %1244
  %1272 = getelementptr inbounds i8, i8* %1193, i64 12
  %1273 = bitcast i8* %1272 to <4 x i8>*
  %1274 = load <4 x i8>, <4 x i8>* %1273, align 1
  %1275 = zext <4 x i8> %1274 to <4 x i32>
  %1276 = getelementptr inbounds i8, i8* %1191, i64 12
  %1277 = bitcast i8* %1276 to <4 x i8>*
  %1278 = load <4 x i8>, <4 x i8>* %1277, align 1
  %1279 = zext <4 x i8> %1278 to <4 x i32>
  %1280 = mul nuw nsw <4 x i32> %1279, %1275
  %1281 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1275
  %1282 = getelementptr inbounds i8, i8* %1192, i64 12
  %1283 = bitcast i8* %1282 to <4 x i8>*
  %1284 = load <4 x i8>, <4 x i8>* %1283, align 1
  %1285 = zext <4 x i8> %1284 to <4 x i32>
  %1286 = mul nsw <4 x i32> %1281, %1285
  %1287 = add nuw nsw <4 x i32> %1280, <i32 32, i32 32, i32 32, i32 32>
  %1288 = add nsw <4 x i32> %1287, %1286
  %1289 = ashr <4 x i32> %1288, <i32 6, i32 6, i32 6, i32 6>
  %1290 = getelementptr inbounds i8, i8* %1188, i64 12
  %1291 = bitcast i8* %1290 to <4 x i8>*
  %1292 = load <4 x i8>, <4 x i8>* %1291, align 1
  %1293 = zext <4 x i8> %1292 to <4 x i32>
  %1294 = sub nsw <4 x i32> %1289, %1293
  %1295 = icmp slt <4 x i32> %1294, zeroinitializer
  %1296 = sub nsw <4 x i32> zeroinitializer, %1294
  %1297 = select <4 x i1> %1295, <4 x i32> %1296, <4 x i32> %1294
  %1298 = add <4 x i32> %1297, %1271
  %1299 = getelementptr inbounds i8, i8* %1193, i64 16
  %1300 = bitcast i8* %1299 to <4 x i8>*
  %1301 = load <4 x i8>, <4 x i8>* %1300, align 1
  %1302 = zext <4 x i8> %1301 to <4 x i32>
  %1303 = getelementptr inbounds i8, i8* %1191, i64 16
  %1304 = bitcast i8* %1303 to <4 x i8>*
  %1305 = load <4 x i8>, <4 x i8>* %1304, align 1
  %1306 = zext <4 x i8> %1305 to <4 x i32>
  %1307 = mul nuw nsw <4 x i32> %1306, %1302
  %1308 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1302
  %1309 = getelementptr inbounds i8, i8* %1192, i64 16
  %1310 = bitcast i8* %1309 to <4 x i8>*
  %1311 = load <4 x i8>, <4 x i8>* %1310, align 1
  %1312 = zext <4 x i8> %1311 to <4 x i32>
  %1313 = mul nsw <4 x i32> %1308, %1312
  %1314 = add nuw nsw <4 x i32> %1307, <i32 32, i32 32, i32 32, i32 32>
  %1315 = add nsw <4 x i32> %1314, %1313
  %1316 = ashr <4 x i32> %1315, <i32 6, i32 6, i32 6, i32 6>
  %1317 = getelementptr inbounds i8, i8* %1188, i64 16
  %1318 = bitcast i8* %1317 to <4 x i8>*
  %1319 = load <4 x i8>, <4 x i8>* %1318, align 1
  %1320 = zext <4 x i8> %1319 to <4 x i32>
  %1321 = sub nsw <4 x i32> %1316, %1320
  %1322 = icmp slt <4 x i32> %1321, zeroinitializer
  %1323 = sub nsw <4 x i32> zeroinitializer, %1321
  %1324 = select <4 x i1> %1322, <4 x i32> %1323, <4 x i32> %1321
  %1325 = add <4 x i32> %1324, %1298
  %1326 = getelementptr inbounds i8, i8* %1193, i64 20
  %1327 = bitcast i8* %1326 to <4 x i8>*
  %1328 = load <4 x i8>, <4 x i8>* %1327, align 1
  %1329 = zext <4 x i8> %1328 to <4 x i32>
  %1330 = getelementptr inbounds i8, i8* %1191, i64 20
  %1331 = bitcast i8* %1330 to <4 x i8>*
  %1332 = load <4 x i8>, <4 x i8>* %1331, align 1
  %1333 = zext <4 x i8> %1332 to <4 x i32>
  %1334 = mul nuw nsw <4 x i32> %1333, %1329
  %1335 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1329
  %1336 = getelementptr inbounds i8, i8* %1192, i64 20
  %1337 = bitcast i8* %1336 to <4 x i8>*
  %1338 = load <4 x i8>, <4 x i8>* %1337, align 1
  %1339 = zext <4 x i8> %1338 to <4 x i32>
  %1340 = mul nsw <4 x i32> %1335, %1339
  %1341 = add nuw nsw <4 x i32> %1334, <i32 32, i32 32, i32 32, i32 32>
  %1342 = add nsw <4 x i32> %1341, %1340
  %1343 = ashr <4 x i32> %1342, <i32 6, i32 6, i32 6, i32 6>
  %1344 = getelementptr inbounds i8, i8* %1188, i64 20
  %1345 = bitcast i8* %1344 to <4 x i8>*
  %1346 = load <4 x i8>, <4 x i8>* %1345, align 1
  %1347 = zext <4 x i8> %1346 to <4 x i32>
  %1348 = sub nsw <4 x i32> %1343, %1347
  %1349 = icmp slt <4 x i32> %1348, zeroinitializer
  %1350 = sub nsw <4 x i32> zeroinitializer, %1348
  %1351 = select <4 x i1> %1349, <4 x i32> %1350, <4 x i32> %1348
  %1352 = add <4 x i32> %1351, %1325
  %1353 = getelementptr inbounds i8, i8* %1193, i64 24
  %1354 = bitcast i8* %1353 to <4 x i8>*
  %1355 = load <4 x i8>, <4 x i8>* %1354, align 1
  %1356 = zext <4 x i8> %1355 to <4 x i32>
  %1357 = getelementptr inbounds i8, i8* %1191, i64 24
  %1358 = bitcast i8* %1357 to <4 x i8>*
  %1359 = load <4 x i8>, <4 x i8>* %1358, align 1
  %1360 = zext <4 x i8> %1359 to <4 x i32>
  %1361 = mul nuw nsw <4 x i32> %1360, %1356
  %1362 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1356
  %1363 = getelementptr inbounds i8, i8* %1192, i64 24
  %1364 = bitcast i8* %1363 to <4 x i8>*
  %1365 = load <4 x i8>, <4 x i8>* %1364, align 1
  %1366 = zext <4 x i8> %1365 to <4 x i32>
  %1367 = mul nsw <4 x i32> %1362, %1366
  %1368 = add nuw nsw <4 x i32> %1361, <i32 32, i32 32, i32 32, i32 32>
  %1369 = add nsw <4 x i32> %1368, %1367
  %1370 = ashr <4 x i32> %1369, <i32 6, i32 6, i32 6, i32 6>
  %1371 = getelementptr inbounds i8, i8* %1188, i64 24
  %1372 = bitcast i8* %1371 to <4 x i8>*
  %1373 = load <4 x i8>, <4 x i8>* %1372, align 1
  %1374 = zext <4 x i8> %1373 to <4 x i32>
  %1375 = sub nsw <4 x i32> %1370, %1374
  %1376 = icmp slt <4 x i32> %1375, zeroinitializer
  %1377 = sub nsw <4 x i32> zeroinitializer, %1375
  %1378 = select <4 x i1> %1376, <4 x i32> %1377, <4 x i32> %1375
  %1379 = add <4 x i32> %1378, %1352
  %1380 = getelementptr inbounds i8, i8* %1193, i64 28
  %1381 = bitcast i8* %1380 to <4 x i8>*
  %1382 = load <4 x i8>, <4 x i8>* %1381, align 1
  %1383 = zext <4 x i8> %1382 to <4 x i32>
  %1384 = getelementptr inbounds i8, i8* %1191, i64 28
  %1385 = bitcast i8* %1384 to <4 x i8>*
  %1386 = load <4 x i8>, <4 x i8>* %1385, align 1
  %1387 = zext <4 x i8> %1386 to <4 x i32>
  %1388 = mul nuw nsw <4 x i32> %1387, %1383
  %1389 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1383
  %1390 = getelementptr inbounds i8, i8* %1192, i64 28
  %1391 = bitcast i8* %1390 to <4 x i8>*
  %1392 = load <4 x i8>, <4 x i8>* %1391, align 1
  %1393 = zext <4 x i8> %1392 to <4 x i32>
  %1394 = mul nsw <4 x i32> %1389, %1393
  %1395 = add nuw nsw <4 x i32> %1388, <i32 32, i32 32, i32 32, i32 32>
  %1396 = add nsw <4 x i32> %1395, %1394
  %1397 = ashr <4 x i32> %1396, <i32 6, i32 6, i32 6, i32 6>
  %1398 = getelementptr inbounds i8, i8* %1188, i64 28
  %1399 = bitcast i8* %1398 to <4 x i8>*
  %1400 = load <4 x i8>, <4 x i8>* %1399, align 1
  %1401 = zext <4 x i8> %1400 to <4 x i32>
  %1402 = sub nsw <4 x i32> %1397, %1401
  %1403 = icmp slt <4 x i32> %1402, zeroinitializer
  %1404 = sub nsw <4 x i32> zeroinitializer, %1402
  %1405 = select <4 x i1> %1403, <4 x i32> %1404, <4 x i32> %1402
  %1406 = add <4 x i32> %1405, %1379
  %1407 = shufflevector <4 x i32> %1406, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1408 = add <4 x i32> %1406, %1407
  %1409 = shufflevector <4 x i32> %1408, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1410 = add <4 x i32> %1408, %1409
  %1411 = extractelement <4 x i32> %1410, i32 0
  %1412 = getelementptr inbounds i8, i8* %1188, i64 %11
  %1413 = getelementptr inbounds i8, i8* %1191, i64 32
  %1414 = getelementptr inbounds i8, i8* %1192, i64 %12
  %1415 = getelementptr inbounds i8, i8* %1193, i64 %13
  %1416 = add nuw nsw i32 %1190, 1
  %1417 = icmp eq i32 %1416, 64
  br i1 %1417, label %1418, label %1187

1418:                                             ; preds = %1187
  %1419 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %1411, i32* %1419, align 4
  %1420 = getelementptr inbounds i8*, i8** %2, i64 2
  %1421 = load i8*, i8** %1420, align 8
  br label %1422

1422:                                             ; preds = %1418, %1422
  %1423 = phi i8* [ %0, %1418 ], [ %1647, %1422 ]
  %1424 = phi i32 [ 0, %1418 ], [ %1646, %1422 ]
  %1425 = phi i32 [ 0, %1418 ], [ %1651, %1422 ]
  %1426 = phi i8* [ %4, %1418 ], [ %1648, %1422 ]
  %1427 = phi i8* [ %1421, %1418 ], [ %1649, %1422 ]
  %1428 = phi i8* [ %5, %1418 ], [ %1650, %1422 ]
  %1429 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1424, i32 0
  %1430 = bitcast i8* %1428 to <4 x i8>*
  %1431 = load <4 x i8>, <4 x i8>* %1430, align 1
  %1432 = zext <4 x i8> %1431 to <4 x i32>
  %1433 = bitcast i8* %1426 to <4 x i8>*
  %1434 = load <4 x i8>, <4 x i8>* %1433, align 1
  %1435 = zext <4 x i8> %1434 to <4 x i32>
  %1436 = mul nuw nsw <4 x i32> %1435, %1432
  %1437 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1432
  %1438 = bitcast i8* %1427 to <4 x i8>*
  %1439 = load <4 x i8>, <4 x i8>* %1438, align 1
  %1440 = zext <4 x i8> %1439 to <4 x i32>
  %1441 = mul nsw <4 x i32> %1437, %1440
  %1442 = add nuw nsw <4 x i32> %1436, <i32 32, i32 32, i32 32, i32 32>
  %1443 = add nsw <4 x i32> %1442, %1441
  %1444 = ashr <4 x i32> %1443, <i32 6, i32 6, i32 6, i32 6>
  %1445 = bitcast i8* %1423 to <4 x i8>*
  %1446 = load <4 x i8>, <4 x i8>* %1445, align 1
  %1447 = zext <4 x i8> %1446 to <4 x i32>
  %1448 = sub nsw <4 x i32> %1444, %1447
  %1449 = icmp slt <4 x i32> %1448, zeroinitializer
  %1450 = sub nsw <4 x i32> zeroinitializer, %1448
  %1451 = select <4 x i1> %1449, <4 x i32> %1450, <4 x i32> %1448
  %1452 = add <4 x i32> %1451, %1429
  %1453 = getelementptr inbounds i8, i8* %1428, i64 4
  %1454 = bitcast i8* %1453 to <4 x i8>*
  %1455 = load <4 x i8>, <4 x i8>* %1454, align 1
  %1456 = zext <4 x i8> %1455 to <4 x i32>
  %1457 = getelementptr inbounds i8, i8* %1426, i64 4
  %1458 = bitcast i8* %1457 to <4 x i8>*
  %1459 = load <4 x i8>, <4 x i8>* %1458, align 1
  %1460 = zext <4 x i8> %1459 to <4 x i32>
  %1461 = mul nuw nsw <4 x i32> %1460, %1456
  %1462 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1456
  %1463 = getelementptr inbounds i8, i8* %1427, i64 4
  %1464 = bitcast i8* %1463 to <4 x i8>*
  %1465 = load <4 x i8>, <4 x i8>* %1464, align 1
  %1466 = zext <4 x i8> %1465 to <4 x i32>
  %1467 = mul nsw <4 x i32> %1462, %1466
  %1468 = add nuw nsw <4 x i32> %1461, <i32 32, i32 32, i32 32, i32 32>
  %1469 = add nsw <4 x i32> %1468, %1467
  %1470 = ashr <4 x i32> %1469, <i32 6, i32 6, i32 6, i32 6>
  %1471 = getelementptr inbounds i8, i8* %1423, i64 4
  %1472 = bitcast i8* %1471 to <4 x i8>*
  %1473 = load <4 x i8>, <4 x i8>* %1472, align 1
  %1474 = zext <4 x i8> %1473 to <4 x i32>
  %1475 = sub nsw <4 x i32> %1470, %1474
  %1476 = icmp slt <4 x i32> %1475, zeroinitializer
  %1477 = sub nsw <4 x i32> zeroinitializer, %1475
  %1478 = select <4 x i1> %1476, <4 x i32> %1477, <4 x i32> %1475
  %1479 = add <4 x i32> %1478, %1452
  %1480 = getelementptr inbounds i8, i8* %1428, i64 8
  %1481 = bitcast i8* %1480 to <4 x i8>*
  %1482 = load <4 x i8>, <4 x i8>* %1481, align 1
  %1483 = zext <4 x i8> %1482 to <4 x i32>
  %1484 = getelementptr inbounds i8, i8* %1426, i64 8
  %1485 = bitcast i8* %1484 to <4 x i8>*
  %1486 = load <4 x i8>, <4 x i8>* %1485, align 1
  %1487 = zext <4 x i8> %1486 to <4 x i32>
  %1488 = mul nuw nsw <4 x i32> %1487, %1483
  %1489 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1483
  %1490 = getelementptr inbounds i8, i8* %1427, i64 8
  %1491 = bitcast i8* %1490 to <4 x i8>*
  %1492 = load <4 x i8>, <4 x i8>* %1491, align 1
  %1493 = zext <4 x i8> %1492 to <4 x i32>
  %1494 = mul nsw <4 x i32> %1489, %1493
  %1495 = add nuw nsw <4 x i32> %1488, <i32 32, i32 32, i32 32, i32 32>
  %1496 = add nsw <4 x i32> %1495, %1494
  %1497 = ashr <4 x i32> %1496, <i32 6, i32 6, i32 6, i32 6>
  %1498 = getelementptr inbounds i8, i8* %1423, i64 8
  %1499 = bitcast i8* %1498 to <4 x i8>*
  %1500 = load <4 x i8>, <4 x i8>* %1499, align 1
  %1501 = zext <4 x i8> %1500 to <4 x i32>
  %1502 = sub nsw <4 x i32> %1497, %1501
  %1503 = icmp slt <4 x i32> %1502, zeroinitializer
  %1504 = sub nsw <4 x i32> zeroinitializer, %1502
  %1505 = select <4 x i1> %1503, <4 x i32> %1504, <4 x i32> %1502
  %1506 = add <4 x i32> %1505, %1479
  %1507 = getelementptr inbounds i8, i8* %1428, i64 12
  %1508 = bitcast i8* %1507 to <4 x i8>*
  %1509 = load <4 x i8>, <4 x i8>* %1508, align 1
  %1510 = zext <4 x i8> %1509 to <4 x i32>
  %1511 = getelementptr inbounds i8, i8* %1426, i64 12
  %1512 = bitcast i8* %1511 to <4 x i8>*
  %1513 = load <4 x i8>, <4 x i8>* %1512, align 1
  %1514 = zext <4 x i8> %1513 to <4 x i32>
  %1515 = mul nuw nsw <4 x i32> %1514, %1510
  %1516 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1510
  %1517 = getelementptr inbounds i8, i8* %1427, i64 12
  %1518 = bitcast i8* %1517 to <4 x i8>*
  %1519 = load <4 x i8>, <4 x i8>* %1518, align 1
  %1520 = zext <4 x i8> %1519 to <4 x i32>
  %1521 = mul nsw <4 x i32> %1516, %1520
  %1522 = add nuw nsw <4 x i32> %1515, <i32 32, i32 32, i32 32, i32 32>
  %1523 = add nsw <4 x i32> %1522, %1521
  %1524 = ashr <4 x i32> %1523, <i32 6, i32 6, i32 6, i32 6>
  %1525 = getelementptr inbounds i8, i8* %1423, i64 12
  %1526 = bitcast i8* %1525 to <4 x i8>*
  %1527 = load <4 x i8>, <4 x i8>* %1526, align 1
  %1528 = zext <4 x i8> %1527 to <4 x i32>
  %1529 = sub nsw <4 x i32> %1524, %1528
  %1530 = icmp slt <4 x i32> %1529, zeroinitializer
  %1531 = sub nsw <4 x i32> zeroinitializer, %1529
  %1532 = select <4 x i1> %1530, <4 x i32> %1531, <4 x i32> %1529
  %1533 = add <4 x i32> %1532, %1506
  %1534 = getelementptr inbounds i8, i8* %1428, i64 16
  %1535 = bitcast i8* %1534 to <4 x i8>*
  %1536 = load <4 x i8>, <4 x i8>* %1535, align 1
  %1537 = zext <4 x i8> %1536 to <4 x i32>
  %1538 = getelementptr inbounds i8, i8* %1426, i64 16
  %1539 = bitcast i8* %1538 to <4 x i8>*
  %1540 = load <4 x i8>, <4 x i8>* %1539, align 1
  %1541 = zext <4 x i8> %1540 to <4 x i32>
  %1542 = mul nuw nsw <4 x i32> %1541, %1537
  %1543 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1537
  %1544 = getelementptr inbounds i8, i8* %1427, i64 16
  %1545 = bitcast i8* %1544 to <4 x i8>*
  %1546 = load <4 x i8>, <4 x i8>* %1545, align 1
  %1547 = zext <4 x i8> %1546 to <4 x i32>
  %1548 = mul nsw <4 x i32> %1543, %1547
  %1549 = add nuw nsw <4 x i32> %1542, <i32 32, i32 32, i32 32, i32 32>
  %1550 = add nsw <4 x i32> %1549, %1548
  %1551 = ashr <4 x i32> %1550, <i32 6, i32 6, i32 6, i32 6>
  %1552 = getelementptr inbounds i8, i8* %1423, i64 16
  %1553 = bitcast i8* %1552 to <4 x i8>*
  %1554 = load <4 x i8>, <4 x i8>* %1553, align 1
  %1555 = zext <4 x i8> %1554 to <4 x i32>
  %1556 = sub nsw <4 x i32> %1551, %1555
  %1557 = icmp slt <4 x i32> %1556, zeroinitializer
  %1558 = sub nsw <4 x i32> zeroinitializer, %1556
  %1559 = select <4 x i1> %1557, <4 x i32> %1558, <4 x i32> %1556
  %1560 = add <4 x i32> %1559, %1533
  %1561 = getelementptr inbounds i8, i8* %1428, i64 20
  %1562 = bitcast i8* %1561 to <4 x i8>*
  %1563 = load <4 x i8>, <4 x i8>* %1562, align 1
  %1564 = zext <4 x i8> %1563 to <4 x i32>
  %1565 = getelementptr inbounds i8, i8* %1426, i64 20
  %1566 = bitcast i8* %1565 to <4 x i8>*
  %1567 = load <4 x i8>, <4 x i8>* %1566, align 1
  %1568 = zext <4 x i8> %1567 to <4 x i32>
  %1569 = mul nuw nsw <4 x i32> %1568, %1564
  %1570 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1564
  %1571 = getelementptr inbounds i8, i8* %1427, i64 20
  %1572 = bitcast i8* %1571 to <4 x i8>*
  %1573 = load <4 x i8>, <4 x i8>* %1572, align 1
  %1574 = zext <4 x i8> %1573 to <4 x i32>
  %1575 = mul nsw <4 x i32> %1570, %1574
  %1576 = add nuw nsw <4 x i32> %1569, <i32 32, i32 32, i32 32, i32 32>
  %1577 = add nsw <4 x i32> %1576, %1575
  %1578 = ashr <4 x i32> %1577, <i32 6, i32 6, i32 6, i32 6>
  %1579 = getelementptr inbounds i8, i8* %1423, i64 20
  %1580 = bitcast i8* %1579 to <4 x i8>*
  %1581 = load <4 x i8>, <4 x i8>* %1580, align 1
  %1582 = zext <4 x i8> %1581 to <4 x i32>
  %1583 = sub nsw <4 x i32> %1578, %1582
  %1584 = icmp slt <4 x i32> %1583, zeroinitializer
  %1585 = sub nsw <4 x i32> zeroinitializer, %1583
  %1586 = select <4 x i1> %1584, <4 x i32> %1585, <4 x i32> %1583
  %1587 = add <4 x i32> %1586, %1560
  %1588 = getelementptr inbounds i8, i8* %1428, i64 24
  %1589 = bitcast i8* %1588 to <4 x i8>*
  %1590 = load <4 x i8>, <4 x i8>* %1589, align 1
  %1591 = zext <4 x i8> %1590 to <4 x i32>
  %1592 = getelementptr inbounds i8, i8* %1426, i64 24
  %1593 = bitcast i8* %1592 to <4 x i8>*
  %1594 = load <4 x i8>, <4 x i8>* %1593, align 1
  %1595 = zext <4 x i8> %1594 to <4 x i32>
  %1596 = mul nuw nsw <4 x i32> %1595, %1591
  %1597 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1591
  %1598 = getelementptr inbounds i8, i8* %1427, i64 24
  %1599 = bitcast i8* %1598 to <4 x i8>*
  %1600 = load <4 x i8>, <4 x i8>* %1599, align 1
  %1601 = zext <4 x i8> %1600 to <4 x i32>
  %1602 = mul nsw <4 x i32> %1597, %1601
  %1603 = add nuw nsw <4 x i32> %1596, <i32 32, i32 32, i32 32, i32 32>
  %1604 = add nsw <4 x i32> %1603, %1602
  %1605 = ashr <4 x i32> %1604, <i32 6, i32 6, i32 6, i32 6>
  %1606 = getelementptr inbounds i8, i8* %1423, i64 24
  %1607 = bitcast i8* %1606 to <4 x i8>*
  %1608 = load <4 x i8>, <4 x i8>* %1607, align 1
  %1609 = zext <4 x i8> %1608 to <4 x i32>
  %1610 = sub nsw <4 x i32> %1605, %1609
  %1611 = icmp slt <4 x i32> %1610, zeroinitializer
  %1612 = sub nsw <4 x i32> zeroinitializer, %1610
  %1613 = select <4 x i1> %1611, <4 x i32> %1612, <4 x i32> %1610
  %1614 = add <4 x i32> %1613, %1587
  %1615 = getelementptr inbounds i8, i8* %1428, i64 28
  %1616 = bitcast i8* %1615 to <4 x i8>*
  %1617 = load <4 x i8>, <4 x i8>* %1616, align 1
  %1618 = zext <4 x i8> %1617 to <4 x i32>
  %1619 = getelementptr inbounds i8, i8* %1426, i64 28
  %1620 = bitcast i8* %1619 to <4 x i8>*
  %1621 = load <4 x i8>, <4 x i8>* %1620, align 1
  %1622 = zext <4 x i8> %1621 to <4 x i32>
  %1623 = mul nuw nsw <4 x i32> %1622, %1618
  %1624 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1618
  %1625 = getelementptr inbounds i8, i8* %1427, i64 28
  %1626 = bitcast i8* %1625 to <4 x i8>*
  %1627 = load <4 x i8>, <4 x i8>* %1626, align 1
  %1628 = zext <4 x i8> %1627 to <4 x i32>
  %1629 = mul nsw <4 x i32> %1624, %1628
  %1630 = add nuw nsw <4 x i32> %1623, <i32 32, i32 32, i32 32, i32 32>
  %1631 = add nsw <4 x i32> %1630, %1629
  %1632 = ashr <4 x i32> %1631, <i32 6, i32 6, i32 6, i32 6>
  %1633 = getelementptr inbounds i8, i8* %1423, i64 28
  %1634 = bitcast i8* %1633 to <4 x i8>*
  %1635 = load <4 x i8>, <4 x i8>* %1634, align 1
  %1636 = zext <4 x i8> %1635 to <4 x i32>
  %1637 = sub nsw <4 x i32> %1632, %1636
  %1638 = icmp slt <4 x i32> %1637, zeroinitializer
  %1639 = sub nsw <4 x i32> zeroinitializer, %1637
  %1640 = select <4 x i1> %1638, <4 x i32> %1639, <4 x i32> %1637
  %1641 = add <4 x i32> %1640, %1614
  %1642 = shufflevector <4 x i32> %1641, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1643 = add <4 x i32> %1641, %1642
  %1644 = shufflevector <4 x i32> %1643, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1645 = add <4 x i32> %1643, %1644
  %1646 = extractelement <4 x i32> %1645, i32 0
  %1647 = getelementptr inbounds i8, i8* %1423, i64 %11
  %1648 = getelementptr inbounds i8, i8* %1426, i64 32
  %1649 = getelementptr inbounds i8, i8* %1427, i64 %12
  %1650 = getelementptr inbounds i8, i8* %1428, i64 %13
  %1651 = add nuw nsw i32 %1425, 1
  %1652 = icmp eq i32 %1651, 64
  br i1 %1652, label %1653, label %1422

1653:                                             ; preds = %1422
  %1654 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %1646, i32* %1654, align 4
  %1655 = getelementptr inbounds i8*, i8** %2, i64 3
  %1656 = load i8*, i8** %1655, align 8
  br label %1657

1657:                                             ; preds = %1653, %1657
  %1658 = phi i8* [ %0, %1653 ], [ %1882, %1657 ]
  %1659 = phi i32 [ 0, %1653 ], [ %1881, %1657 ]
  %1660 = phi i32 [ 0, %1653 ], [ %1886, %1657 ]
  %1661 = phi i8* [ %4, %1653 ], [ %1883, %1657 ]
  %1662 = phi i8* [ %1656, %1653 ], [ %1884, %1657 ]
  %1663 = phi i8* [ %5, %1653 ], [ %1885, %1657 ]
  %1664 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1659, i32 0
  %1665 = bitcast i8* %1663 to <4 x i8>*
  %1666 = load <4 x i8>, <4 x i8>* %1665, align 1
  %1667 = zext <4 x i8> %1666 to <4 x i32>
  %1668 = bitcast i8* %1661 to <4 x i8>*
  %1669 = load <4 x i8>, <4 x i8>* %1668, align 1
  %1670 = zext <4 x i8> %1669 to <4 x i32>
  %1671 = mul nuw nsw <4 x i32> %1670, %1667
  %1672 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1667
  %1673 = bitcast i8* %1662 to <4 x i8>*
  %1674 = load <4 x i8>, <4 x i8>* %1673, align 1
  %1675 = zext <4 x i8> %1674 to <4 x i32>
  %1676 = mul nsw <4 x i32> %1672, %1675
  %1677 = add nuw nsw <4 x i32> %1671, <i32 32, i32 32, i32 32, i32 32>
  %1678 = add nsw <4 x i32> %1677, %1676
  %1679 = ashr <4 x i32> %1678, <i32 6, i32 6, i32 6, i32 6>
  %1680 = bitcast i8* %1658 to <4 x i8>*
  %1681 = load <4 x i8>, <4 x i8>* %1680, align 1
  %1682 = zext <4 x i8> %1681 to <4 x i32>
  %1683 = sub nsw <4 x i32> %1679, %1682
  %1684 = icmp slt <4 x i32> %1683, zeroinitializer
  %1685 = sub nsw <4 x i32> zeroinitializer, %1683
  %1686 = select <4 x i1> %1684, <4 x i32> %1685, <4 x i32> %1683
  %1687 = add <4 x i32> %1686, %1664
  %1688 = getelementptr inbounds i8, i8* %1663, i64 4
  %1689 = bitcast i8* %1688 to <4 x i8>*
  %1690 = load <4 x i8>, <4 x i8>* %1689, align 1
  %1691 = zext <4 x i8> %1690 to <4 x i32>
  %1692 = getelementptr inbounds i8, i8* %1661, i64 4
  %1693 = bitcast i8* %1692 to <4 x i8>*
  %1694 = load <4 x i8>, <4 x i8>* %1693, align 1
  %1695 = zext <4 x i8> %1694 to <4 x i32>
  %1696 = mul nuw nsw <4 x i32> %1695, %1691
  %1697 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1691
  %1698 = getelementptr inbounds i8, i8* %1662, i64 4
  %1699 = bitcast i8* %1698 to <4 x i8>*
  %1700 = load <4 x i8>, <4 x i8>* %1699, align 1
  %1701 = zext <4 x i8> %1700 to <4 x i32>
  %1702 = mul nsw <4 x i32> %1697, %1701
  %1703 = add nuw nsw <4 x i32> %1696, <i32 32, i32 32, i32 32, i32 32>
  %1704 = add nsw <4 x i32> %1703, %1702
  %1705 = ashr <4 x i32> %1704, <i32 6, i32 6, i32 6, i32 6>
  %1706 = getelementptr inbounds i8, i8* %1658, i64 4
  %1707 = bitcast i8* %1706 to <4 x i8>*
  %1708 = load <4 x i8>, <4 x i8>* %1707, align 1
  %1709 = zext <4 x i8> %1708 to <4 x i32>
  %1710 = sub nsw <4 x i32> %1705, %1709
  %1711 = icmp slt <4 x i32> %1710, zeroinitializer
  %1712 = sub nsw <4 x i32> zeroinitializer, %1710
  %1713 = select <4 x i1> %1711, <4 x i32> %1712, <4 x i32> %1710
  %1714 = add <4 x i32> %1713, %1687
  %1715 = getelementptr inbounds i8, i8* %1663, i64 8
  %1716 = bitcast i8* %1715 to <4 x i8>*
  %1717 = load <4 x i8>, <4 x i8>* %1716, align 1
  %1718 = zext <4 x i8> %1717 to <4 x i32>
  %1719 = getelementptr inbounds i8, i8* %1661, i64 8
  %1720 = bitcast i8* %1719 to <4 x i8>*
  %1721 = load <4 x i8>, <4 x i8>* %1720, align 1
  %1722 = zext <4 x i8> %1721 to <4 x i32>
  %1723 = mul nuw nsw <4 x i32> %1722, %1718
  %1724 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1718
  %1725 = getelementptr inbounds i8, i8* %1662, i64 8
  %1726 = bitcast i8* %1725 to <4 x i8>*
  %1727 = load <4 x i8>, <4 x i8>* %1726, align 1
  %1728 = zext <4 x i8> %1727 to <4 x i32>
  %1729 = mul nsw <4 x i32> %1724, %1728
  %1730 = add nuw nsw <4 x i32> %1723, <i32 32, i32 32, i32 32, i32 32>
  %1731 = add nsw <4 x i32> %1730, %1729
  %1732 = ashr <4 x i32> %1731, <i32 6, i32 6, i32 6, i32 6>
  %1733 = getelementptr inbounds i8, i8* %1658, i64 8
  %1734 = bitcast i8* %1733 to <4 x i8>*
  %1735 = load <4 x i8>, <4 x i8>* %1734, align 1
  %1736 = zext <4 x i8> %1735 to <4 x i32>
  %1737 = sub nsw <4 x i32> %1732, %1736
  %1738 = icmp slt <4 x i32> %1737, zeroinitializer
  %1739 = sub nsw <4 x i32> zeroinitializer, %1737
  %1740 = select <4 x i1> %1738, <4 x i32> %1739, <4 x i32> %1737
  %1741 = add <4 x i32> %1740, %1714
  %1742 = getelementptr inbounds i8, i8* %1663, i64 12
  %1743 = bitcast i8* %1742 to <4 x i8>*
  %1744 = load <4 x i8>, <4 x i8>* %1743, align 1
  %1745 = zext <4 x i8> %1744 to <4 x i32>
  %1746 = getelementptr inbounds i8, i8* %1661, i64 12
  %1747 = bitcast i8* %1746 to <4 x i8>*
  %1748 = load <4 x i8>, <4 x i8>* %1747, align 1
  %1749 = zext <4 x i8> %1748 to <4 x i32>
  %1750 = mul nuw nsw <4 x i32> %1749, %1745
  %1751 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1745
  %1752 = getelementptr inbounds i8, i8* %1662, i64 12
  %1753 = bitcast i8* %1752 to <4 x i8>*
  %1754 = load <4 x i8>, <4 x i8>* %1753, align 1
  %1755 = zext <4 x i8> %1754 to <4 x i32>
  %1756 = mul nsw <4 x i32> %1751, %1755
  %1757 = add nuw nsw <4 x i32> %1750, <i32 32, i32 32, i32 32, i32 32>
  %1758 = add nsw <4 x i32> %1757, %1756
  %1759 = ashr <4 x i32> %1758, <i32 6, i32 6, i32 6, i32 6>
  %1760 = getelementptr inbounds i8, i8* %1658, i64 12
  %1761 = bitcast i8* %1760 to <4 x i8>*
  %1762 = load <4 x i8>, <4 x i8>* %1761, align 1
  %1763 = zext <4 x i8> %1762 to <4 x i32>
  %1764 = sub nsw <4 x i32> %1759, %1763
  %1765 = icmp slt <4 x i32> %1764, zeroinitializer
  %1766 = sub nsw <4 x i32> zeroinitializer, %1764
  %1767 = select <4 x i1> %1765, <4 x i32> %1766, <4 x i32> %1764
  %1768 = add <4 x i32> %1767, %1741
  %1769 = getelementptr inbounds i8, i8* %1663, i64 16
  %1770 = bitcast i8* %1769 to <4 x i8>*
  %1771 = load <4 x i8>, <4 x i8>* %1770, align 1
  %1772 = zext <4 x i8> %1771 to <4 x i32>
  %1773 = getelementptr inbounds i8, i8* %1661, i64 16
  %1774 = bitcast i8* %1773 to <4 x i8>*
  %1775 = load <4 x i8>, <4 x i8>* %1774, align 1
  %1776 = zext <4 x i8> %1775 to <4 x i32>
  %1777 = mul nuw nsw <4 x i32> %1776, %1772
  %1778 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1772
  %1779 = getelementptr inbounds i8, i8* %1662, i64 16
  %1780 = bitcast i8* %1779 to <4 x i8>*
  %1781 = load <4 x i8>, <4 x i8>* %1780, align 1
  %1782 = zext <4 x i8> %1781 to <4 x i32>
  %1783 = mul nsw <4 x i32> %1778, %1782
  %1784 = add nuw nsw <4 x i32> %1777, <i32 32, i32 32, i32 32, i32 32>
  %1785 = add nsw <4 x i32> %1784, %1783
  %1786 = ashr <4 x i32> %1785, <i32 6, i32 6, i32 6, i32 6>
  %1787 = getelementptr inbounds i8, i8* %1658, i64 16
  %1788 = bitcast i8* %1787 to <4 x i8>*
  %1789 = load <4 x i8>, <4 x i8>* %1788, align 1
  %1790 = zext <4 x i8> %1789 to <4 x i32>
  %1791 = sub nsw <4 x i32> %1786, %1790
  %1792 = icmp slt <4 x i32> %1791, zeroinitializer
  %1793 = sub nsw <4 x i32> zeroinitializer, %1791
  %1794 = select <4 x i1> %1792, <4 x i32> %1793, <4 x i32> %1791
  %1795 = add <4 x i32> %1794, %1768
  %1796 = getelementptr inbounds i8, i8* %1663, i64 20
  %1797 = bitcast i8* %1796 to <4 x i8>*
  %1798 = load <4 x i8>, <4 x i8>* %1797, align 1
  %1799 = zext <4 x i8> %1798 to <4 x i32>
  %1800 = getelementptr inbounds i8, i8* %1661, i64 20
  %1801 = bitcast i8* %1800 to <4 x i8>*
  %1802 = load <4 x i8>, <4 x i8>* %1801, align 1
  %1803 = zext <4 x i8> %1802 to <4 x i32>
  %1804 = mul nuw nsw <4 x i32> %1803, %1799
  %1805 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1799
  %1806 = getelementptr inbounds i8, i8* %1662, i64 20
  %1807 = bitcast i8* %1806 to <4 x i8>*
  %1808 = load <4 x i8>, <4 x i8>* %1807, align 1
  %1809 = zext <4 x i8> %1808 to <4 x i32>
  %1810 = mul nsw <4 x i32> %1805, %1809
  %1811 = add nuw nsw <4 x i32> %1804, <i32 32, i32 32, i32 32, i32 32>
  %1812 = add nsw <4 x i32> %1811, %1810
  %1813 = ashr <4 x i32> %1812, <i32 6, i32 6, i32 6, i32 6>
  %1814 = getelementptr inbounds i8, i8* %1658, i64 20
  %1815 = bitcast i8* %1814 to <4 x i8>*
  %1816 = load <4 x i8>, <4 x i8>* %1815, align 1
  %1817 = zext <4 x i8> %1816 to <4 x i32>
  %1818 = sub nsw <4 x i32> %1813, %1817
  %1819 = icmp slt <4 x i32> %1818, zeroinitializer
  %1820 = sub nsw <4 x i32> zeroinitializer, %1818
  %1821 = select <4 x i1> %1819, <4 x i32> %1820, <4 x i32> %1818
  %1822 = add <4 x i32> %1821, %1795
  %1823 = getelementptr inbounds i8, i8* %1663, i64 24
  %1824 = bitcast i8* %1823 to <4 x i8>*
  %1825 = load <4 x i8>, <4 x i8>* %1824, align 1
  %1826 = zext <4 x i8> %1825 to <4 x i32>
  %1827 = getelementptr inbounds i8, i8* %1661, i64 24
  %1828 = bitcast i8* %1827 to <4 x i8>*
  %1829 = load <4 x i8>, <4 x i8>* %1828, align 1
  %1830 = zext <4 x i8> %1829 to <4 x i32>
  %1831 = mul nuw nsw <4 x i32> %1830, %1826
  %1832 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1826
  %1833 = getelementptr inbounds i8, i8* %1662, i64 24
  %1834 = bitcast i8* %1833 to <4 x i8>*
  %1835 = load <4 x i8>, <4 x i8>* %1834, align 1
  %1836 = zext <4 x i8> %1835 to <4 x i32>
  %1837 = mul nsw <4 x i32> %1832, %1836
  %1838 = add nuw nsw <4 x i32> %1831, <i32 32, i32 32, i32 32, i32 32>
  %1839 = add nsw <4 x i32> %1838, %1837
  %1840 = ashr <4 x i32> %1839, <i32 6, i32 6, i32 6, i32 6>
  %1841 = getelementptr inbounds i8, i8* %1658, i64 24
  %1842 = bitcast i8* %1841 to <4 x i8>*
  %1843 = load <4 x i8>, <4 x i8>* %1842, align 1
  %1844 = zext <4 x i8> %1843 to <4 x i32>
  %1845 = sub nsw <4 x i32> %1840, %1844
  %1846 = icmp slt <4 x i32> %1845, zeroinitializer
  %1847 = sub nsw <4 x i32> zeroinitializer, %1845
  %1848 = select <4 x i1> %1846, <4 x i32> %1847, <4 x i32> %1845
  %1849 = add <4 x i32> %1848, %1822
  %1850 = getelementptr inbounds i8, i8* %1663, i64 28
  %1851 = bitcast i8* %1850 to <4 x i8>*
  %1852 = load <4 x i8>, <4 x i8>* %1851, align 1
  %1853 = zext <4 x i8> %1852 to <4 x i32>
  %1854 = getelementptr inbounds i8, i8* %1661, i64 28
  %1855 = bitcast i8* %1854 to <4 x i8>*
  %1856 = load <4 x i8>, <4 x i8>* %1855, align 1
  %1857 = zext <4 x i8> %1856 to <4 x i32>
  %1858 = mul nuw nsw <4 x i32> %1857, %1853
  %1859 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1853
  %1860 = getelementptr inbounds i8, i8* %1662, i64 28
  %1861 = bitcast i8* %1860 to <4 x i8>*
  %1862 = load <4 x i8>, <4 x i8>* %1861, align 1
  %1863 = zext <4 x i8> %1862 to <4 x i32>
  %1864 = mul nsw <4 x i32> %1859, %1863
  %1865 = add nuw nsw <4 x i32> %1858, <i32 32, i32 32, i32 32, i32 32>
  %1866 = add nsw <4 x i32> %1865, %1864
  %1867 = ashr <4 x i32> %1866, <i32 6, i32 6, i32 6, i32 6>
  %1868 = getelementptr inbounds i8, i8* %1658, i64 28
  %1869 = bitcast i8* %1868 to <4 x i8>*
  %1870 = load <4 x i8>, <4 x i8>* %1869, align 1
  %1871 = zext <4 x i8> %1870 to <4 x i32>
  %1872 = sub nsw <4 x i32> %1867, %1871
  %1873 = icmp slt <4 x i32> %1872, zeroinitializer
  %1874 = sub nsw <4 x i32> zeroinitializer, %1872
  %1875 = select <4 x i1> %1873, <4 x i32> %1874, <4 x i32> %1872
  %1876 = add <4 x i32> %1875, %1849
  %1877 = shufflevector <4 x i32> %1876, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1878 = add <4 x i32> %1876, %1877
  %1879 = shufflevector <4 x i32> %1878, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1880 = add <4 x i32> %1878, %1879
  %1881 = extractelement <4 x i32> %1880, i32 0
  %1882 = getelementptr inbounds i8, i8* %1658, i64 %11
  %1883 = getelementptr inbounds i8, i8* %1661, i64 32
  %1884 = getelementptr inbounds i8, i8* %1662, i64 %12
  %1885 = getelementptr inbounds i8, i8* %1663, i64 %13
  %1886 = add nuw nsw i32 %1660, 1
  %1887 = icmp eq i32 %1886, 64
  br i1 %1887, label %483, label %1657
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x32_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %244

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %238, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %237, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %242, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %239, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %240, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %241, %13 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %21 = bitcast i8* %19 to <4 x i8>*
  %22 = load <4 x i8>, <4 x i8>* %21, align 1
  %23 = zext <4 x i8> %22 to <4 x i32>
  %24 = bitcast i8* %17 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1
  %26 = zext <4 x i8> %25 to <4 x i32>
  %27 = mul nuw nsw <4 x i32> %26, %23
  %28 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %23
  %29 = bitcast i8* %18 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nsw <4 x i32> %28, %31
  %33 = add nuw nsw <4 x i32> %27, <i32 32, i32 32, i32 32, i32 32>
  %34 = add nsw <4 x i32> %33, %32
  %35 = ashr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %36 = bitcast i8* %14 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = zext <4 x i8> %37 to <4 x i32>
  %39 = sub nsw <4 x i32> %35, %38
  %40 = icmp slt <4 x i32> %39, zeroinitializer
  %41 = sub nsw <4 x i32> zeroinitializer, %39
  %42 = select <4 x i1> %40, <4 x i32> %41, <4 x i32> %39
  %43 = add <4 x i32> %42, %20
  %44 = getelementptr inbounds i8, i8* %19, i64 4
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = getelementptr inbounds i8, i8* %17, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %50 to <4 x i32>
  %52 = mul nuw nsw <4 x i32> %51, %47
  %53 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %47
  %54 = getelementptr inbounds i8, i8* %18, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = mul nsw <4 x i32> %53, %57
  %59 = add nuw nsw <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %60 = add nsw <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %62 = getelementptr inbounds i8, i8* %14, i64 4
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = sub nsw <4 x i32> %61, %65
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add <4 x i32> %69, %43
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = zext <4 x i8> %73 to <4 x i32>
  %75 = getelementptr inbounds i8, i8* %17, i64 8
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = mul nuw nsw <4 x i32> %78, %74
  %80 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %74
  %81 = getelementptr inbounds i8, i8* %18, i64 8
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = mul nsw <4 x i32> %80, %84
  %86 = add nuw nsw <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %87 = add nsw <4 x i32> %86, %85
  %88 = ashr <4 x i32> %87, <i32 6, i32 6, i32 6, i32 6>
  %89 = getelementptr inbounds i8, i8* %14, i64 8
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = sub nsw <4 x i32> %88, %92
  %94 = icmp slt <4 x i32> %93, zeroinitializer
  %95 = sub nsw <4 x i32> zeroinitializer, %93
  %96 = select <4 x i1> %94, <4 x i32> %95, <4 x i32> %93
  %97 = add <4 x i32> %96, %70
  %98 = getelementptr inbounds i8, i8* %19, i64 12
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = getelementptr inbounds i8, i8* %17, i64 12
  %103 = bitcast i8* %102 to <4 x i8>*
  %104 = load <4 x i8>, <4 x i8>* %103, align 1
  %105 = zext <4 x i8> %104 to <4 x i32>
  %106 = mul nuw nsw <4 x i32> %105, %101
  %107 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %101
  %108 = getelementptr inbounds i8, i8* %18, i64 12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = mul nsw <4 x i32> %107, %111
  %113 = add nuw nsw <4 x i32> %106, <i32 32, i32 32, i32 32, i32 32>
  %114 = add nsw <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = getelementptr inbounds i8, i8* %14, i64 12
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = sub nsw <4 x i32> %115, %119
  %121 = icmp slt <4 x i32> %120, zeroinitializer
  %122 = sub nsw <4 x i32> zeroinitializer, %120
  %123 = select <4 x i1> %121, <4 x i32> %122, <4 x i32> %120
  %124 = add <4 x i32> %123, %97
  %125 = getelementptr inbounds i8, i8* %19, i64 16
  %126 = bitcast i8* %125 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1
  %128 = zext <4 x i8> %127 to <4 x i32>
  %129 = getelementptr inbounds i8, i8* %17, i64 16
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1
  %132 = zext <4 x i8> %131 to <4 x i32>
  %133 = mul nuw nsw <4 x i32> %132, %128
  %134 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %128
  %135 = getelementptr inbounds i8, i8* %18, i64 16
  %136 = bitcast i8* %135 to <4 x i8>*
  %137 = load <4 x i8>, <4 x i8>* %136, align 1
  %138 = zext <4 x i8> %137 to <4 x i32>
  %139 = mul nsw <4 x i32> %134, %138
  %140 = add nuw nsw <4 x i32> %133, <i32 32, i32 32, i32 32, i32 32>
  %141 = add nsw <4 x i32> %140, %139
  %142 = ashr <4 x i32> %141, <i32 6, i32 6, i32 6, i32 6>
  %143 = getelementptr inbounds i8, i8* %14, i64 16
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = sub nsw <4 x i32> %142, %146
  %148 = icmp slt <4 x i32> %147, zeroinitializer
  %149 = sub nsw <4 x i32> zeroinitializer, %147
  %150 = select <4 x i1> %148, <4 x i32> %149, <4 x i32> %147
  %151 = add <4 x i32> %150, %124
  %152 = getelementptr inbounds i8, i8* %19, i64 20
  %153 = bitcast i8* %152 to <4 x i8>*
  %154 = load <4 x i8>, <4 x i8>* %153, align 1
  %155 = zext <4 x i8> %154 to <4 x i32>
  %156 = getelementptr inbounds i8, i8* %17, i64 20
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = zext <4 x i8> %158 to <4 x i32>
  %160 = mul nuw nsw <4 x i32> %159, %155
  %161 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %155
  %162 = getelementptr inbounds i8, i8* %18, i64 20
  %163 = bitcast i8* %162 to <4 x i8>*
  %164 = load <4 x i8>, <4 x i8>* %163, align 1
  %165 = zext <4 x i8> %164 to <4 x i32>
  %166 = mul nsw <4 x i32> %161, %165
  %167 = add nuw nsw <4 x i32> %160, <i32 32, i32 32, i32 32, i32 32>
  %168 = add nsw <4 x i32> %167, %166
  %169 = ashr <4 x i32> %168, <i32 6, i32 6, i32 6, i32 6>
  %170 = getelementptr inbounds i8, i8* %14, i64 20
  %171 = bitcast i8* %170 to <4 x i8>*
  %172 = load <4 x i8>, <4 x i8>* %171, align 1
  %173 = zext <4 x i8> %172 to <4 x i32>
  %174 = sub nsw <4 x i32> %169, %173
  %175 = icmp slt <4 x i32> %174, zeroinitializer
  %176 = sub nsw <4 x i32> zeroinitializer, %174
  %177 = select <4 x i1> %175, <4 x i32> %176, <4 x i32> %174
  %178 = add <4 x i32> %177, %151
  %179 = getelementptr inbounds i8, i8* %19, i64 24
  %180 = bitcast i8* %179 to <4 x i8>*
  %181 = load <4 x i8>, <4 x i8>* %180, align 1
  %182 = zext <4 x i8> %181 to <4 x i32>
  %183 = getelementptr inbounds i8, i8* %17, i64 24
  %184 = bitcast i8* %183 to <4 x i8>*
  %185 = load <4 x i8>, <4 x i8>* %184, align 1
  %186 = zext <4 x i8> %185 to <4 x i32>
  %187 = mul nuw nsw <4 x i32> %186, %182
  %188 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %182
  %189 = getelementptr inbounds i8, i8* %18, i64 24
  %190 = bitcast i8* %189 to <4 x i8>*
  %191 = load <4 x i8>, <4 x i8>* %190, align 1
  %192 = zext <4 x i8> %191 to <4 x i32>
  %193 = mul nsw <4 x i32> %188, %192
  %194 = add nuw nsw <4 x i32> %187, <i32 32, i32 32, i32 32, i32 32>
  %195 = add nsw <4 x i32> %194, %193
  %196 = ashr <4 x i32> %195, <i32 6, i32 6, i32 6, i32 6>
  %197 = getelementptr inbounds i8, i8* %14, i64 24
  %198 = bitcast i8* %197 to <4 x i8>*
  %199 = load <4 x i8>, <4 x i8>* %198, align 1
  %200 = zext <4 x i8> %199 to <4 x i32>
  %201 = sub nsw <4 x i32> %196, %200
  %202 = icmp slt <4 x i32> %201, zeroinitializer
  %203 = sub nsw <4 x i32> zeroinitializer, %201
  %204 = select <4 x i1> %202, <4 x i32> %203, <4 x i32> %201
  %205 = add <4 x i32> %204, %178
  %206 = getelementptr inbounds i8, i8* %19, i64 28
  %207 = bitcast i8* %206 to <4 x i8>*
  %208 = load <4 x i8>, <4 x i8>* %207, align 1
  %209 = zext <4 x i8> %208 to <4 x i32>
  %210 = getelementptr inbounds i8, i8* %17, i64 28
  %211 = bitcast i8* %210 to <4 x i8>*
  %212 = load <4 x i8>, <4 x i8>* %211, align 1
  %213 = zext <4 x i8> %212 to <4 x i32>
  %214 = mul nuw nsw <4 x i32> %213, %209
  %215 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %209
  %216 = getelementptr inbounds i8, i8* %18, i64 28
  %217 = bitcast i8* %216 to <4 x i8>*
  %218 = load <4 x i8>, <4 x i8>* %217, align 1
  %219 = zext <4 x i8> %218 to <4 x i32>
  %220 = mul nsw <4 x i32> %215, %219
  %221 = add nuw nsw <4 x i32> %214, <i32 32, i32 32, i32 32, i32 32>
  %222 = add nsw <4 x i32> %221, %220
  %223 = ashr <4 x i32> %222, <i32 6, i32 6, i32 6, i32 6>
  %224 = getelementptr inbounds i8, i8* %14, i64 28
  %225 = bitcast i8* %224 to <4 x i8>*
  %226 = load <4 x i8>, <4 x i8>* %225, align 1
  %227 = zext <4 x i8> %226 to <4 x i32>
  %228 = sub nsw <4 x i32> %223, %227
  %229 = icmp slt <4 x i32> %228, zeroinitializer
  %230 = sub nsw <4 x i32> zeroinitializer, %228
  %231 = select <4 x i1> %229, <4 x i32> %230, <4 x i32> %228
  %232 = add <4 x i32> %231, %205
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %234 = add <4 x i32> %232, %233
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %236 = add <4 x i32> %234, %235
  %237 = extractelement <4 x i32> %236, i32 0
  %238 = getelementptr inbounds i8, i8* %14, i64 %10
  %239 = getelementptr inbounds i8, i8* %17, i64 %11
  %240 = getelementptr inbounds i8, i8* %18, i64 32
  %241 = getelementptr inbounds i8, i8* %19, i64 %12
  %242 = add nuw nsw i32 %16, 1
  %243 = icmp eq i32 %242, 32
  br i1 %243, label %475, label %13

244:                                              ; preds = %8, %244
  %245 = phi i8* [ %469, %244 ], [ %0, %8 ]
  %246 = phi i32 [ %468, %244 ], [ 0, %8 ]
  %247 = phi i32 [ %473, %244 ], [ 0, %8 ]
  %248 = phi i8* [ %470, %244 ], [ %4, %8 ]
  %249 = phi i8* [ %471, %244 ], [ %2, %8 ]
  %250 = phi i8* [ %472, %244 ], [ %5, %8 ]
  %251 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %246, i32 0
  %252 = bitcast i8* %250 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = bitcast i8* %248 to <4 x i8>*
  %256 = load <4 x i8>, <4 x i8>* %255, align 1
  %257 = zext <4 x i8> %256 to <4 x i32>
  %258 = mul nuw nsw <4 x i32> %257, %254
  %259 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %254
  %260 = bitcast i8* %249 to <4 x i8>*
  %261 = load <4 x i8>, <4 x i8>* %260, align 1
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = mul nsw <4 x i32> %259, %262
  %264 = add nuw nsw <4 x i32> %258, <i32 32, i32 32, i32 32, i32 32>
  %265 = add nsw <4 x i32> %264, %263
  %266 = ashr <4 x i32> %265, <i32 6, i32 6, i32 6, i32 6>
  %267 = bitcast i8* %245 to <4 x i8>*
  %268 = load <4 x i8>, <4 x i8>* %267, align 1
  %269 = zext <4 x i8> %268 to <4 x i32>
  %270 = sub nsw <4 x i32> %266, %269
  %271 = icmp slt <4 x i32> %270, zeroinitializer
  %272 = sub nsw <4 x i32> zeroinitializer, %270
  %273 = select <4 x i1> %271, <4 x i32> %272, <4 x i32> %270
  %274 = add <4 x i32> %273, %251
  %275 = getelementptr inbounds i8, i8* %250, i64 4
  %276 = bitcast i8* %275 to <4 x i8>*
  %277 = load <4 x i8>, <4 x i8>* %276, align 1
  %278 = zext <4 x i8> %277 to <4 x i32>
  %279 = getelementptr inbounds i8, i8* %248, i64 4
  %280 = bitcast i8* %279 to <4 x i8>*
  %281 = load <4 x i8>, <4 x i8>* %280, align 1
  %282 = zext <4 x i8> %281 to <4 x i32>
  %283 = mul nuw nsw <4 x i32> %282, %278
  %284 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %278
  %285 = getelementptr inbounds i8, i8* %249, i64 4
  %286 = bitcast i8* %285 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 1
  %288 = zext <4 x i8> %287 to <4 x i32>
  %289 = mul nsw <4 x i32> %284, %288
  %290 = add nuw nsw <4 x i32> %283, <i32 32, i32 32, i32 32, i32 32>
  %291 = add nsw <4 x i32> %290, %289
  %292 = ashr <4 x i32> %291, <i32 6, i32 6, i32 6, i32 6>
  %293 = getelementptr inbounds i8, i8* %245, i64 4
  %294 = bitcast i8* %293 to <4 x i8>*
  %295 = load <4 x i8>, <4 x i8>* %294, align 1
  %296 = zext <4 x i8> %295 to <4 x i32>
  %297 = sub nsw <4 x i32> %292, %296
  %298 = icmp slt <4 x i32> %297, zeroinitializer
  %299 = sub nsw <4 x i32> zeroinitializer, %297
  %300 = select <4 x i1> %298, <4 x i32> %299, <4 x i32> %297
  %301 = add <4 x i32> %300, %274
  %302 = getelementptr inbounds i8, i8* %250, i64 8
  %303 = bitcast i8* %302 to <4 x i8>*
  %304 = load <4 x i8>, <4 x i8>* %303, align 1
  %305 = zext <4 x i8> %304 to <4 x i32>
  %306 = getelementptr inbounds i8, i8* %248, i64 8
  %307 = bitcast i8* %306 to <4 x i8>*
  %308 = load <4 x i8>, <4 x i8>* %307, align 1
  %309 = zext <4 x i8> %308 to <4 x i32>
  %310 = mul nuw nsw <4 x i32> %309, %305
  %311 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %305
  %312 = getelementptr inbounds i8, i8* %249, i64 8
  %313 = bitcast i8* %312 to <4 x i8>*
  %314 = load <4 x i8>, <4 x i8>* %313, align 1
  %315 = zext <4 x i8> %314 to <4 x i32>
  %316 = mul nsw <4 x i32> %311, %315
  %317 = add nuw nsw <4 x i32> %310, <i32 32, i32 32, i32 32, i32 32>
  %318 = add nsw <4 x i32> %317, %316
  %319 = ashr <4 x i32> %318, <i32 6, i32 6, i32 6, i32 6>
  %320 = getelementptr inbounds i8, i8* %245, i64 8
  %321 = bitcast i8* %320 to <4 x i8>*
  %322 = load <4 x i8>, <4 x i8>* %321, align 1
  %323 = zext <4 x i8> %322 to <4 x i32>
  %324 = sub nsw <4 x i32> %319, %323
  %325 = icmp slt <4 x i32> %324, zeroinitializer
  %326 = sub nsw <4 x i32> zeroinitializer, %324
  %327 = select <4 x i1> %325, <4 x i32> %326, <4 x i32> %324
  %328 = add <4 x i32> %327, %301
  %329 = getelementptr inbounds i8, i8* %250, i64 12
  %330 = bitcast i8* %329 to <4 x i8>*
  %331 = load <4 x i8>, <4 x i8>* %330, align 1
  %332 = zext <4 x i8> %331 to <4 x i32>
  %333 = getelementptr inbounds i8, i8* %248, i64 12
  %334 = bitcast i8* %333 to <4 x i8>*
  %335 = load <4 x i8>, <4 x i8>* %334, align 1
  %336 = zext <4 x i8> %335 to <4 x i32>
  %337 = mul nuw nsw <4 x i32> %336, %332
  %338 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %332
  %339 = getelementptr inbounds i8, i8* %249, i64 12
  %340 = bitcast i8* %339 to <4 x i8>*
  %341 = load <4 x i8>, <4 x i8>* %340, align 1
  %342 = zext <4 x i8> %341 to <4 x i32>
  %343 = mul nsw <4 x i32> %338, %342
  %344 = add nuw nsw <4 x i32> %337, <i32 32, i32 32, i32 32, i32 32>
  %345 = add nsw <4 x i32> %344, %343
  %346 = ashr <4 x i32> %345, <i32 6, i32 6, i32 6, i32 6>
  %347 = getelementptr inbounds i8, i8* %245, i64 12
  %348 = bitcast i8* %347 to <4 x i8>*
  %349 = load <4 x i8>, <4 x i8>* %348, align 1
  %350 = zext <4 x i8> %349 to <4 x i32>
  %351 = sub nsw <4 x i32> %346, %350
  %352 = icmp slt <4 x i32> %351, zeroinitializer
  %353 = sub nsw <4 x i32> zeroinitializer, %351
  %354 = select <4 x i1> %352, <4 x i32> %353, <4 x i32> %351
  %355 = add <4 x i32> %354, %328
  %356 = getelementptr inbounds i8, i8* %250, i64 16
  %357 = bitcast i8* %356 to <4 x i8>*
  %358 = load <4 x i8>, <4 x i8>* %357, align 1
  %359 = zext <4 x i8> %358 to <4 x i32>
  %360 = getelementptr inbounds i8, i8* %248, i64 16
  %361 = bitcast i8* %360 to <4 x i8>*
  %362 = load <4 x i8>, <4 x i8>* %361, align 1
  %363 = zext <4 x i8> %362 to <4 x i32>
  %364 = mul nuw nsw <4 x i32> %363, %359
  %365 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %359
  %366 = getelementptr inbounds i8, i8* %249, i64 16
  %367 = bitcast i8* %366 to <4 x i8>*
  %368 = load <4 x i8>, <4 x i8>* %367, align 1
  %369 = zext <4 x i8> %368 to <4 x i32>
  %370 = mul nsw <4 x i32> %365, %369
  %371 = add nuw nsw <4 x i32> %364, <i32 32, i32 32, i32 32, i32 32>
  %372 = add nsw <4 x i32> %371, %370
  %373 = ashr <4 x i32> %372, <i32 6, i32 6, i32 6, i32 6>
  %374 = getelementptr inbounds i8, i8* %245, i64 16
  %375 = bitcast i8* %374 to <4 x i8>*
  %376 = load <4 x i8>, <4 x i8>* %375, align 1
  %377 = zext <4 x i8> %376 to <4 x i32>
  %378 = sub nsw <4 x i32> %373, %377
  %379 = icmp slt <4 x i32> %378, zeroinitializer
  %380 = sub nsw <4 x i32> zeroinitializer, %378
  %381 = select <4 x i1> %379, <4 x i32> %380, <4 x i32> %378
  %382 = add <4 x i32> %381, %355
  %383 = getelementptr inbounds i8, i8* %250, i64 20
  %384 = bitcast i8* %383 to <4 x i8>*
  %385 = load <4 x i8>, <4 x i8>* %384, align 1
  %386 = zext <4 x i8> %385 to <4 x i32>
  %387 = getelementptr inbounds i8, i8* %248, i64 20
  %388 = bitcast i8* %387 to <4 x i8>*
  %389 = load <4 x i8>, <4 x i8>* %388, align 1
  %390 = zext <4 x i8> %389 to <4 x i32>
  %391 = mul nuw nsw <4 x i32> %390, %386
  %392 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %386
  %393 = getelementptr inbounds i8, i8* %249, i64 20
  %394 = bitcast i8* %393 to <4 x i8>*
  %395 = load <4 x i8>, <4 x i8>* %394, align 1
  %396 = zext <4 x i8> %395 to <4 x i32>
  %397 = mul nsw <4 x i32> %392, %396
  %398 = add nuw nsw <4 x i32> %391, <i32 32, i32 32, i32 32, i32 32>
  %399 = add nsw <4 x i32> %398, %397
  %400 = ashr <4 x i32> %399, <i32 6, i32 6, i32 6, i32 6>
  %401 = getelementptr inbounds i8, i8* %245, i64 20
  %402 = bitcast i8* %401 to <4 x i8>*
  %403 = load <4 x i8>, <4 x i8>* %402, align 1
  %404 = zext <4 x i8> %403 to <4 x i32>
  %405 = sub nsw <4 x i32> %400, %404
  %406 = icmp slt <4 x i32> %405, zeroinitializer
  %407 = sub nsw <4 x i32> zeroinitializer, %405
  %408 = select <4 x i1> %406, <4 x i32> %407, <4 x i32> %405
  %409 = add <4 x i32> %408, %382
  %410 = getelementptr inbounds i8, i8* %250, i64 24
  %411 = bitcast i8* %410 to <4 x i8>*
  %412 = load <4 x i8>, <4 x i8>* %411, align 1
  %413 = zext <4 x i8> %412 to <4 x i32>
  %414 = getelementptr inbounds i8, i8* %248, i64 24
  %415 = bitcast i8* %414 to <4 x i8>*
  %416 = load <4 x i8>, <4 x i8>* %415, align 1
  %417 = zext <4 x i8> %416 to <4 x i32>
  %418 = mul nuw nsw <4 x i32> %417, %413
  %419 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %413
  %420 = getelementptr inbounds i8, i8* %249, i64 24
  %421 = bitcast i8* %420 to <4 x i8>*
  %422 = load <4 x i8>, <4 x i8>* %421, align 1
  %423 = zext <4 x i8> %422 to <4 x i32>
  %424 = mul nsw <4 x i32> %419, %423
  %425 = add nuw nsw <4 x i32> %418, <i32 32, i32 32, i32 32, i32 32>
  %426 = add nsw <4 x i32> %425, %424
  %427 = ashr <4 x i32> %426, <i32 6, i32 6, i32 6, i32 6>
  %428 = getelementptr inbounds i8, i8* %245, i64 24
  %429 = bitcast i8* %428 to <4 x i8>*
  %430 = load <4 x i8>, <4 x i8>* %429, align 1
  %431 = zext <4 x i8> %430 to <4 x i32>
  %432 = sub nsw <4 x i32> %427, %431
  %433 = icmp slt <4 x i32> %432, zeroinitializer
  %434 = sub nsw <4 x i32> zeroinitializer, %432
  %435 = select <4 x i1> %433, <4 x i32> %434, <4 x i32> %432
  %436 = add <4 x i32> %435, %409
  %437 = getelementptr inbounds i8, i8* %250, i64 28
  %438 = bitcast i8* %437 to <4 x i8>*
  %439 = load <4 x i8>, <4 x i8>* %438, align 1
  %440 = zext <4 x i8> %439 to <4 x i32>
  %441 = getelementptr inbounds i8, i8* %248, i64 28
  %442 = bitcast i8* %441 to <4 x i8>*
  %443 = load <4 x i8>, <4 x i8>* %442, align 1
  %444 = zext <4 x i8> %443 to <4 x i32>
  %445 = mul nuw nsw <4 x i32> %444, %440
  %446 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %440
  %447 = getelementptr inbounds i8, i8* %249, i64 28
  %448 = bitcast i8* %447 to <4 x i8>*
  %449 = load <4 x i8>, <4 x i8>* %448, align 1
  %450 = zext <4 x i8> %449 to <4 x i32>
  %451 = mul nsw <4 x i32> %446, %450
  %452 = add nuw nsw <4 x i32> %445, <i32 32, i32 32, i32 32, i32 32>
  %453 = add nsw <4 x i32> %452, %451
  %454 = ashr <4 x i32> %453, <i32 6, i32 6, i32 6, i32 6>
  %455 = getelementptr inbounds i8, i8* %245, i64 28
  %456 = bitcast i8* %455 to <4 x i8>*
  %457 = load <4 x i8>, <4 x i8>* %456, align 1
  %458 = zext <4 x i8> %457 to <4 x i32>
  %459 = sub nsw <4 x i32> %454, %458
  %460 = icmp slt <4 x i32> %459, zeroinitializer
  %461 = sub nsw <4 x i32> zeroinitializer, %459
  %462 = select <4 x i1> %460, <4 x i32> %461, <4 x i32> %459
  %463 = add <4 x i32> %462, %436
  %464 = shufflevector <4 x i32> %463, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %465 = add <4 x i32> %463, %464
  %466 = shufflevector <4 x i32> %465, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %467 = add <4 x i32> %465, %466
  %468 = extractelement <4 x i32> %467, i32 0
  %469 = getelementptr inbounds i8, i8* %245, i64 %10
  %470 = getelementptr inbounds i8, i8* %248, i64 32
  %471 = getelementptr inbounds i8, i8* %249, i64 %11
  %472 = getelementptr inbounds i8, i8* %250, i64 %12
  %473 = add nuw nsw i32 %247, 1
  %474 = icmp eq i32 %473, 32
  br i1 %474, label %475, label %244

475:                                              ; preds = %244, %13
  %476 = phi i32 [ %237, %13 ], [ %468, %244 ]
  ret i32 %476
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad32x32x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %249

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %240, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %239, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %244, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %241, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %242, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %243, %15 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %23 = bitcast i8* %21 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = bitcast i8* %19 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = zext <4 x i8> %27 to <4 x i32>
  %29 = mul nuw nsw <4 x i32> %28, %25
  %30 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %25
  %31 = bitcast i8* %20 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nsw <4 x i32> %30, %33
  %35 = add nuw nsw <4 x i32> %29, <i32 32, i32 32, i32 32, i32 32>
  %36 = add nsw <4 x i32> %35, %34
  %37 = ashr <4 x i32> %36, <i32 6, i32 6, i32 6, i32 6>
  %38 = bitcast i8* %16 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = zext <4 x i8> %39 to <4 x i32>
  %41 = sub nsw <4 x i32> %37, %40
  %42 = icmp slt <4 x i32> %41, zeroinitializer
  %43 = sub nsw <4 x i32> zeroinitializer, %41
  %44 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %41
  %45 = add <4 x i32> %44, %22
  %46 = getelementptr inbounds i8, i8* %21, i64 4
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = zext <4 x i8> %48 to <4 x i32>
  %50 = getelementptr inbounds i8, i8* %19, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %52 to <4 x i32>
  %54 = mul nuw nsw <4 x i32> %53, %49
  %55 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %49
  %56 = getelementptr inbounds i8, i8* %20, i64 4
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1
  %59 = zext <4 x i8> %58 to <4 x i32>
  %60 = mul nsw <4 x i32> %55, %59
  %61 = add nuw nsw <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %62 = add nsw <4 x i32> %61, %60
  %63 = ashr <4 x i32> %62, <i32 6, i32 6, i32 6, i32 6>
  %64 = getelementptr inbounds i8, i8* %16, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = sub nsw <4 x i32> %63, %67
  %69 = icmp slt <4 x i32> %68, zeroinitializer
  %70 = sub nsw <4 x i32> zeroinitializer, %68
  %71 = select <4 x i1> %69, <4 x i32> %70, <4 x i32> %68
  %72 = add <4 x i32> %71, %45
  %73 = getelementptr inbounds i8, i8* %21, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = getelementptr inbounds i8, i8* %19, i64 8
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = mul nuw nsw <4 x i32> %80, %76
  %82 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %76
  %83 = getelementptr inbounds i8, i8* %20, i64 8
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = mul nsw <4 x i32> %82, %86
  %88 = add nuw nsw <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %89 = add nsw <4 x i32> %88, %87
  %90 = ashr <4 x i32> %89, <i32 6, i32 6, i32 6, i32 6>
  %91 = getelementptr inbounds i8, i8* %16, i64 8
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = sub nsw <4 x i32> %90, %94
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = add <4 x i32> %98, %72
  %100 = getelementptr inbounds i8, i8* %21, i64 12
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = zext <4 x i8> %102 to <4 x i32>
  %104 = getelementptr inbounds i8, i8* %19, i64 12
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = zext <4 x i8> %106 to <4 x i32>
  %108 = mul nuw nsw <4 x i32> %107, %103
  %109 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %103
  %110 = getelementptr inbounds i8, i8* %20, i64 12
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = mul nsw <4 x i32> %109, %113
  %115 = add nuw nsw <4 x i32> %108, <i32 32, i32 32, i32 32, i32 32>
  %116 = add nsw <4 x i32> %115, %114
  %117 = ashr <4 x i32> %116, <i32 6, i32 6, i32 6, i32 6>
  %118 = getelementptr inbounds i8, i8* %16, i64 12
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = sub nsw <4 x i32> %117, %121
  %123 = icmp slt <4 x i32> %122, zeroinitializer
  %124 = sub nsw <4 x i32> zeroinitializer, %122
  %125 = select <4 x i1> %123, <4 x i32> %124, <4 x i32> %122
  %126 = add <4 x i32> %125, %99
  %127 = getelementptr inbounds i8, i8* %21, i64 16
  %128 = bitcast i8* %127 to <4 x i8>*
  %129 = load <4 x i8>, <4 x i8>* %128, align 1
  %130 = zext <4 x i8> %129 to <4 x i32>
  %131 = getelementptr inbounds i8, i8* %19, i64 16
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = zext <4 x i8> %133 to <4 x i32>
  %135 = mul nuw nsw <4 x i32> %134, %130
  %136 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %130
  %137 = getelementptr inbounds i8, i8* %20, i64 16
  %138 = bitcast i8* %137 to <4 x i8>*
  %139 = load <4 x i8>, <4 x i8>* %138, align 1
  %140 = zext <4 x i8> %139 to <4 x i32>
  %141 = mul nsw <4 x i32> %136, %140
  %142 = add nuw nsw <4 x i32> %135, <i32 32, i32 32, i32 32, i32 32>
  %143 = add nsw <4 x i32> %142, %141
  %144 = ashr <4 x i32> %143, <i32 6, i32 6, i32 6, i32 6>
  %145 = getelementptr inbounds i8, i8* %16, i64 16
  %146 = bitcast i8* %145 to <4 x i8>*
  %147 = load <4 x i8>, <4 x i8>* %146, align 1
  %148 = zext <4 x i8> %147 to <4 x i32>
  %149 = sub nsw <4 x i32> %144, %148
  %150 = icmp slt <4 x i32> %149, zeroinitializer
  %151 = sub nsw <4 x i32> zeroinitializer, %149
  %152 = select <4 x i1> %150, <4 x i32> %151, <4 x i32> %149
  %153 = add <4 x i32> %152, %126
  %154 = getelementptr inbounds i8, i8* %21, i64 20
  %155 = bitcast i8* %154 to <4 x i8>*
  %156 = load <4 x i8>, <4 x i8>* %155, align 1
  %157 = zext <4 x i8> %156 to <4 x i32>
  %158 = getelementptr inbounds i8, i8* %19, i64 20
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = mul nuw nsw <4 x i32> %161, %157
  %163 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %157
  %164 = getelementptr inbounds i8, i8* %20, i64 20
  %165 = bitcast i8* %164 to <4 x i8>*
  %166 = load <4 x i8>, <4 x i8>* %165, align 1
  %167 = zext <4 x i8> %166 to <4 x i32>
  %168 = mul nsw <4 x i32> %163, %167
  %169 = add nuw nsw <4 x i32> %162, <i32 32, i32 32, i32 32, i32 32>
  %170 = add nsw <4 x i32> %169, %168
  %171 = ashr <4 x i32> %170, <i32 6, i32 6, i32 6, i32 6>
  %172 = getelementptr inbounds i8, i8* %16, i64 20
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = sub nsw <4 x i32> %171, %175
  %177 = icmp slt <4 x i32> %176, zeroinitializer
  %178 = sub nsw <4 x i32> zeroinitializer, %176
  %179 = select <4 x i1> %177, <4 x i32> %178, <4 x i32> %176
  %180 = add <4 x i32> %179, %153
  %181 = getelementptr inbounds i8, i8* %21, i64 24
  %182 = bitcast i8* %181 to <4 x i8>*
  %183 = load <4 x i8>, <4 x i8>* %182, align 1
  %184 = zext <4 x i8> %183 to <4 x i32>
  %185 = getelementptr inbounds i8, i8* %19, i64 24
  %186 = bitcast i8* %185 to <4 x i8>*
  %187 = load <4 x i8>, <4 x i8>* %186, align 1
  %188 = zext <4 x i8> %187 to <4 x i32>
  %189 = mul nuw nsw <4 x i32> %188, %184
  %190 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %184
  %191 = getelementptr inbounds i8, i8* %20, i64 24
  %192 = bitcast i8* %191 to <4 x i8>*
  %193 = load <4 x i8>, <4 x i8>* %192, align 1
  %194 = zext <4 x i8> %193 to <4 x i32>
  %195 = mul nsw <4 x i32> %190, %194
  %196 = add nuw nsw <4 x i32> %189, <i32 32, i32 32, i32 32, i32 32>
  %197 = add nsw <4 x i32> %196, %195
  %198 = ashr <4 x i32> %197, <i32 6, i32 6, i32 6, i32 6>
  %199 = getelementptr inbounds i8, i8* %16, i64 24
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = sub nsw <4 x i32> %198, %202
  %204 = icmp slt <4 x i32> %203, zeroinitializer
  %205 = sub nsw <4 x i32> zeroinitializer, %203
  %206 = select <4 x i1> %204, <4 x i32> %205, <4 x i32> %203
  %207 = add <4 x i32> %206, %180
  %208 = getelementptr inbounds i8, i8* %21, i64 28
  %209 = bitcast i8* %208 to <4 x i8>*
  %210 = load <4 x i8>, <4 x i8>* %209, align 1
  %211 = zext <4 x i8> %210 to <4 x i32>
  %212 = getelementptr inbounds i8, i8* %19, i64 28
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = zext <4 x i8> %214 to <4 x i32>
  %216 = mul nuw nsw <4 x i32> %215, %211
  %217 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %211
  %218 = getelementptr inbounds i8, i8* %20, i64 28
  %219 = bitcast i8* %218 to <4 x i8>*
  %220 = load <4 x i8>, <4 x i8>* %219, align 1
  %221 = zext <4 x i8> %220 to <4 x i32>
  %222 = mul nsw <4 x i32> %217, %221
  %223 = add nuw nsw <4 x i32> %216, <i32 32, i32 32, i32 32, i32 32>
  %224 = add nsw <4 x i32> %223, %222
  %225 = ashr <4 x i32> %224, <i32 6, i32 6, i32 6, i32 6>
  %226 = getelementptr inbounds i8, i8* %16, i64 28
  %227 = bitcast i8* %226 to <4 x i8>*
  %228 = load <4 x i8>, <4 x i8>* %227, align 1
  %229 = zext <4 x i8> %228 to <4 x i32>
  %230 = sub nsw <4 x i32> %225, %229
  %231 = icmp slt <4 x i32> %230, zeroinitializer
  %232 = sub nsw <4 x i32> zeroinitializer, %230
  %233 = select <4 x i1> %231, <4 x i32> %232, <4 x i32> %230
  %234 = add <4 x i32> %233, %207
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %236 = add <4 x i32> %234, %235
  %237 = shufflevector <4 x i32> %236, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %238 = add <4 x i32> %236, %237
  %239 = extractelement <4 x i32> %238, i32 0
  %240 = getelementptr inbounds i8, i8* %16, i64 %11
  %241 = getelementptr inbounds i8, i8* %19, i64 %12
  %242 = getelementptr inbounds i8, i8* %20, i64 32
  %243 = getelementptr inbounds i8, i8* %21, i64 %13
  %244 = add nuw nsw i32 %18, 1
  %245 = icmp eq i32 %244, 32
  br i1 %245, label %246, label %15

246:                                              ; preds = %15
  store i32 %239, i32* %8, align 4
  %247 = getelementptr inbounds i8*, i8** %2, i64 1
  %248 = load i8*, i8** %247, align 8
  br label %486

249:                                              ; preds = %9, %249
  %250 = phi i8* [ %474, %249 ], [ %0, %9 ]
  %251 = phi i32 [ %473, %249 ], [ 0, %9 ]
  %252 = phi i32 [ %478, %249 ], [ 0, %9 ]
  %253 = phi i8* [ %475, %249 ], [ %4, %9 ]
  %254 = phi i8* [ %476, %249 ], [ %14, %9 ]
  %255 = phi i8* [ %477, %249 ], [ %5, %9 ]
  %256 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %251, i32 0
  %257 = bitcast i8* %255 to <4 x i8>*
  %258 = load <4 x i8>, <4 x i8>* %257, align 1
  %259 = zext <4 x i8> %258 to <4 x i32>
  %260 = bitcast i8* %253 to <4 x i8>*
  %261 = load <4 x i8>, <4 x i8>* %260, align 1
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = mul nuw nsw <4 x i32> %262, %259
  %264 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %259
  %265 = bitcast i8* %254 to <4 x i8>*
  %266 = load <4 x i8>, <4 x i8>* %265, align 1
  %267 = zext <4 x i8> %266 to <4 x i32>
  %268 = mul nsw <4 x i32> %264, %267
  %269 = add nuw nsw <4 x i32> %263, <i32 32, i32 32, i32 32, i32 32>
  %270 = add nsw <4 x i32> %269, %268
  %271 = ashr <4 x i32> %270, <i32 6, i32 6, i32 6, i32 6>
  %272 = bitcast i8* %250 to <4 x i8>*
  %273 = load <4 x i8>, <4 x i8>* %272, align 1
  %274 = zext <4 x i8> %273 to <4 x i32>
  %275 = sub nsw <4 x i32> %271, %274
  %276 = icmp slt <4 x i32> %275, zeroinitializer
  %277 = sub nsw <4 x i32> zeroinitializer, %275
  %278 = select <4 x i1> %276, <4 x i32> %277, <4 x i32> %275
  %279 = add <4 x i32> %278, %256
  %280 = getelementptr inbounds i8, i8* %255, i64 4
  %281 = bitcast i8* %280 to <4 x i8>*
  %282 = load <4 x i8>, <4 x i8>* %281, align 1
  %283 = zext <4 x i8> %282 to <4 x i32>
  %284 = getelementptr inbounds i8, i8* %253, i64 4
  %285 = bitcast i8* %284 to <4 x i8>*
  %286 = load <4 x i8>, <4 x i8>* %285, align 1
  %287 = zext <4 x i8> %286 to <4 x i32>
  %288 = mul nuw nsw <4 x i32> %287, %283
  %289 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %283
  %290 = getelementptr inbounds i8, i8* %254, i64 4
  %291 = bitcast i8* %290 to <4 x i8>*
  %292 = load <4 x i8>, <4 x i8>* %291, align 1
  %293 = zext <4 x i8> %292 to <4 x i32>
  %294 = mul nsw <4 x i32> %289, %293
  %295 = add nuw nsw <4 x i32> %288, <i32 32, i32 32, i32 32, i32 32>
  %296 = add nsw <4 x i32> %295, %294
  %297 = ashr <4 x i32> %296, <i32 6, i32 6, i32 6, i32 6>
  %298 = getelementptr inbounds i8, i8* %250, i64 4
  %299 = bitcast i8* %298 to <4 x i8>*
  %300 = load <4 x i8>, <4 x i8>* %299, align 1
  %301 = zext <4 x i8> %300 to <4 x i32>
  %302 = sub nsw <4 x i32> %297, %301
  %303 = icmp slt <4 x i32> %302, zeroinitializer
  %304 = sub nsw <4 x i32> zeroinitializer, %302
  %305 = select <4 x i1> %303, <4 x i32> %304, <4 x i32> %302
  %306 = add <4 x i32> %305, %279
  %307 = getelementptr inbounds i8, i8* %255, i64 8
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = zext <4 x i8> %309 to <4 x i32>
  %311 = getelementptr inbounds i8, i8* %253, i64 8
  %312 = bitcast i8* %311 to <4 x i8>*
  %313 = load <4 x i8>, <4 x i8>* %312, align 1
  %314 = zext <4 x i8> %313 to <4 x i32>
  %315 = mul nuw nsw <4 x i32> %314, %310
  %316 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %310
  %317 = getelementptr inbounds i8, i8* %254, i64 8
  %318 = bitcast i8* %317 to <4 x i8>*
  %319 = load <4 x i8>, <4 x i8>* %318, align 1
  %320 = zext <4 x i8> %319 to <4 x i32>
  %321 = mul nsw <4 x i32> %316, %320
  %322 = add nuw nsw <4 x i32> %315, <i32 32, i32 32, i32 32, i32 32>
  %323 = add nsw <4 x i32> %322, %321
  %324 = ashr <4 x i32> %323, <i32 6, i32 6, i32 6, i32 6>
  %325 = getelementptr inbounds i8, i8* %250, i64 8
  %326 = bitcast i8* %325 to <4 x i8>*
  %327 = load <4 x i8>, <4 x i8>* %326, align 1
  %328 = zext <4 x i8> %327 to <4 x i32>
  %329 = sub nsw <4 x i32> %324, %328
  %330 = icmp slt <4 x i32> %329, zeroinitializer
  %331 = sub nsw <4 x i32> zeroinitializer, %329
  %332 = select <4 x i1> %330, <4 x i32> %331, <4 x i32> %329
  %333 = add <4 x i32> %332, %306
  %334 = getelementptr inbounds i8, i8* %255, i64 12
  %335 = bitcast i8* %334 to <4 x i8>*
  %336 = load <4 x i8>, <4 x i8>* %335, align 1
  %337 = zext <4 x i8> %336 to <4 x i32>
  %338 = getelementptr inbounds i8, i8* %253, i64 12
  %339 = bitcast i8* %338 to <4 x i8>*
  %340 = load <4 x i8>, <4 x i8>* %339, align 1
  %341 = zext <4 x i8> %340 to <4 x i32>
  %342 = mul nuw nsw <4 x i32> %341, %337
  %343 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %337
  %344 = getelementptr inbounds i8, i8* %254, i64 12
  %345 = bitcast i8* %344 to <4 x i8>*
  %346 = load <4 x i8>, <4 x i8>* %345, align 1
  %347 = zext <4 x i8> %346 to <4 x i32>
  %348 = mul nsw <4 x i32> %343, %347
  %349 = add nuw nsw <4 x i32> %342, <i32 32, i32 32, i32 32, i32 32>
  %350 = add nsw <4 x i32> %349, %348
  %351 = ashr <4 x i32> %350, <i32 6, i32 6, i32 6, i32 6>
  %352 = getelementptr inbounds i8, i8* %250, i64 12
  %353 = bitcast i8* %352 to <4 x i8>*
  %354 = load <4 x i8>, <4 x i8>* %353, align 1
  %355 = zext <4 x i8> %354 to <4 x i32>
  %356 = sub nsw <4 x i32> %351, %355
  %357 = icmp slt <4 x i32> %356, zeroinitializer
  %358 = sub nsw <4 x i32> zeroinitializer, %356
  %359 = select <4 x i1> %357, <4 x i32> %358, <4 x i32> %356
  %360 = add <4 x i32> %359, %333
  %361 = getelementptr inbounds i8, i8* %255, i64 16
  %362 = bitcast i8* %361 to <4 x i8>*
  %363 = load <4 x i8>, <4 x i8>* %362, align 1
  %364 = zext <4 x i8> %363 to <4 x i32>
  %365 = getelementptr inbounds i8, i8* %253, i64 16
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1
  %368 = zext <4 x i8> %367 to <4 x i32>
  %369 = mul nuw nsw <4 x i32> %368, %364
  %370 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %364
  %371 = getelementptr inbounds i8, i8* %254, i64 16
  %372 = bitcast i8* %371 to <4 x i8>*
  %373 = load <4 x i8>, <4 x i8>* %372, align 1
  %374 = zext <4 x i8> %373 to <4 x i32>
  %375 = mul nsw <4 x i32> %370, %374
  %376 = add nuw nsw <4 x i32> %369, <i32 32, i32 32, i32 32, i32 32>
  %377 = add nsw <4 x i32> %376, %375
  %378 = ashr <4 x i32> %377, <i32 6, i32 6, i32 6, i32 6>
  %379 = getelementptr inbounds i8, i8* %250, i64 16
  %380 = bitcast i8* %379 to <4 x i8>*
  %381 = load <4 x i8>, <4 x i8>* %380, align 1
  %382 = zext <4 x i8> %381 to <4 x i32>
  %383 = sub nsw <4 x i32> %378, %382
  %384 = icmp slt <4 x i32> %383, zeroinitializer
  %385 = sub nsw <4 x i32> zeroinitializer, %383
  %386 = select <4 x i1> %384, <4 x i32> %385, <4 x i32> %383
  %387 = add <4 x i32> %386, %360
  %388 = getelementptr inbounds i8, i8* %255, i64 20
  %389 = bitcast i8* %388 to <4 x i8>*
  %390 = load <4 x i8>, <4 x i8>* %389, align 1
  %391 = zext <4 x i8> %390 to <4 x i32>
  %392 = getelementptr inbounds i8, i8* %253, i64 20
  %393 = bitcast i8* %392 to <4 x i8>*
  %394 = load <4 x i8>, <4 x i8>* %393, align 1
  %395 = zext <4 x i8> %394 to <4 x i32>
  %396 = mul nuw nsw <4 x i32> %395, %391
  %397 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %391
  %398 = getelementptr inbounds i8, i8* %254, i64 20
  %399 = bitcast i8* %398 to <4 x i8>*
  %400 = load <4 x i8>, <4 x i8>* %399, align 1
  %401 = zext <4 x i8> %400 to <4 x i32>
  %402 = mul nsw <4 x i32> %397, %401
  %403 = add nuw nsw <4 x i32> %396, <i32 32, i32 32, i32 32, i32 32>
  %404 = add nsw <4 x i32> %403, %402
  %405 = ashr <4 x i32> %404, <i32 6, i32 6, i32 6, i32 6>
  %406 = getelementptr inbounds i8, i8* %250, i64 20
  %407 = bitcast i8* %406 to <4 x i8>*
  %408 = load <4 x i8>, <4 x i8>* %407, align 1
  %409 = zext <4 x i8> %408 to <4 x i32>
  %410 = sub nsw <4 x i32> %405, %409
  %411 = icmp slt <4 x i32> %410, zeroinitializer
  %412 = sub nsw <4 x i32> zeroinitializer, %410
  %413 = select <4 x i1> %411, <4 x i32> %412, <4 x i32> %410
  %414 = add <4 x i32> %413, %387
  %415 = getelementptr inbounds i8, i8* %255, i64 24
  %416 = bitcast i8* %415 to <4 x i8>*
  %417 = load <4 x i8>, <4 x i8>* %416, align 1
  %418 = zext <4 x i8> %417 to <4 x i32>
  %419 = getelementptr inbounds i8, i8* %253, i64 24
  %420 = bitcast i8* %419 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = mul nuw nsw <4 x i32> %422, %418
  %424 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %418
  %425 = getelementptr inbounds i8, i8* %254, i64 24
  %426 = bitcast i8* %425 to <4 x i8>*
  %427 = load <4 x i8>, <4 x i8>* %426, align 1
  %428 = zext <4 x i8> %427 to <4 x i32>
  %429 = mul nsw <4 x i32> %424, %428
  %430 = add nuw nsw <4 x i32> %423, <i32 32, i32 32, i32 32, i32 32>
  %431 = add nsw <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 6, i32 6, i32 6, i32 6>
  %433 = getelementptr inbounds i8, i8* %250, i64 24
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = zext <4 x i8> %435 to <4 x i32>
  %437 = sub nsw <4 x i32> %432, %436
  %438 = icmp slt <4 x i32> %437, zeroinitializer
  %439 = sub nsw <4 x i32> zeroinitializer, %437
  %440 = select <4 x i1> %438, <4 x i32> %439, <4 x i32> %437
  %441 = add <4 x i32> %440, %414
  %442 = getelementptr inbounds i8, i8* %255, i64 28
  %443 = bitcast i8* %442 to <4 x i8>*
  %444 = load <4 x i8>, <4 x i8>* %443, align 1
  %445 = zext <4 x i8> %444 to <4 x i32>
  %446 = getelementptr inbounds i8, i8* %253, i64 28
  %447 = bitcast i8* %446 to <4 x i8>*
  %448 = load <4 x i8>, <4 x i8>* %447, align 1
  %449 = zext <4 x i8> %448 to <4 x i32>
  %450 = mul nuw nsw <4 x i32> %449, %445
  %451 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %445
  %452 = getelementptr inbounds i8, i8* %254, i64 28
  %453 = bitcast i8* %452 to <4 x i8>*
  %454 = load <4 x i8>, <4 x i8>* %453, align 1
  %455 = zext <4 x i8> %454 to <4 x i32>
  %456 = mul nsw <4 x i32> %451, %455
  %457 = add nuw nsw <4 x i32> %450, <i32 32, i32 32, i32 32, i32 32>
  %458 = add nsw <4 x i32> %457, %456
  %459 = ashr <4 x i32> %458, <i32 6, i32 6, i32 6, i32 6>
  %460 = getelementptr inbounds i8, i8* %250, i64 28
  %461 = bitcast i8* %460 to <4 x i8>*
  %462 = load <4 x i8>, <4 x i8>* %461, align 1
  %463 = zext <4 x i8> %462 to <4 x i32>
  %464 = sub nsw <4 x i32> %459, %463
  %465 = icmp slt <4 x i32> %464, zeroinitializer
  %466 = sub nsw <4 x i32> zeroinitializer, %464
  %467 = select <4 x i1> %465, <4 x i32> %466, <4 x i32> %464
  %468 = add <4 x i32> %467, %441
  %469 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %470 = add <4 x i32> %468, %469
  %471 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %472 = add <4 x i32> %470, %471
  %473 = extractelement <4 x i32> %472, i32 0
  %474 = getelementptr inbounds i8, i8* %250, i64 %11
  %475 = getelementptr inbounds i8, i8* %253, i64 32
  %476 = getelementptr inbounds i8, i8* %254, i64 %12
  %477 = getelementptr inbounds i8, i8* %255, i64 %13
  %478 = add nuw nsw i32 %252, 1
  %479 = icmp eq i32 %478, 32
  br i1 %479, label %480, label %249

480:                                              ; preds = %249
  store i32 %473, i32* %8, align 4
  %481 = getelementptr inbounds i8*, i8** %2, i64 1
  %482 = load i8*, i8** %481, align 8
  br label %1187

483:                                              ; preds = %1657, %956
  %484 = phi i32 [ %1180, %956 ], [ %1881, %1657 ]
  %485 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %484, i32* %485, align 4
  ret void

486:                                              ; preds = %246, %486
  %487 = phi i8* [ %0, %246 ], [ %711, %486 ]
  %488 = phi i32 [ 0, %246 ], [ %710, %486 ]
  %489 = phi i32 [ 0, %246 ], [ %715, %486 ]
  %490 = phi i8* [ %248, %246 ], [ %712, %486 ]
  %491 = phi i8* [ %4, %246 ], [ %713, %486 ]
  %492 = phi i8* [ %5, %246 ], [ %714, %486 ]
  %493 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %488, i32 0
  %494 = bitcast i8* %492 to <4 x i8>*
  %495 = load <4 x i8>, <4 x i8>* %494, align 1
  %496 = zext <4 x i8> %495 to <4 x i32>
  %497 = bitcast i8* %490 to <4 x i8>*
  %498 = load <4 x i8>, <4 x i8>* %497, align 1
  %499 = zext <4 x i8> %498 to <4 x i32>
  %500 = mul nuw nsw <4 x i32> %499, %496
  %501 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %496
  %502 = bitcast i8* %491 to <4 x i8>*
  %503 = load <4 x i8>, <4 x i8>* %502, align 1
  %504 = zext <4 x i8> %503 to <4 x i32>
  %505 = mul nsw <4 x i32> %501, %504
  %506 = add nuw nsw <4 x i32> %500, <i32 32, i32 32, i32 32, i32 32>
  %507 = add nsw <4 x i32> %506, %505
  %508 = ashr <4 x i32> %507, <i32 6, i32 6, i32 6, i32 6>
  %509 = bitcast i8* %487 to <4 x i8>*
  %510 = load <4 x i8>, <4 x i8>* %509, align 1
  %511 = zext <4 x i8> %510 to <4 x i32>
  %512 = sub nsw <4 x i32> %508, %511
  %513 = icmp slt <4 x i32> %512, zeroinitializer
  %514 = sub nsw <4 x i32> zeroinitializer, %512
  %515 = select <4 x i1> %513, <4 x i32> %514, <4 x i32> %512
  %516 = add <4 x i32> %515, %493
  %517 = getelementptr inbounds i8, i8* %492, i64 4
  %518 = bitcast i8* %517 to <4 x i8>*
  %519 = load <4 x i8>, <4 x i8>* %518, align 1
  %520 = zext <4 x i8> %519 to <4 x i32>
  %521 = getelementptr inbounds i8, i8* %490, i64 4
  %522 = bitcast i8* %521 to <4 x i8>*
  %523 = load <4 x i8>, <4 x i8>* %522, align 1
  %524 = zext <4 x i8> %523 to <4 x i32>
  %525 = mul nuw nsw <4 x i32> %524, %520
  %526 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %520
  %527 = getelementptr inbounds i8, i8* %491, i64 4
  %528 = bitcast i8* %527 to <4 x i8>*
  %529 = load <4 x i8>, <4 x i8>* %528, align 1
  %530 = zext <4 x i8> %529 to <4 x i32>
  %531 = mul nsw <4 x i32> %526, %530
  %532 = add nuw nsw <4 x i32> %525, <i32 32, i32 32, i32 32, i32 32>
  %533 = add nsw <4 x i32> %532, %531
  %534 = ashr <4 x i32> %533, <i32 6, i32 6, i32 6, i32 6>
  %535 = getelementptr inbounds i8, i8* %487, i64 4
  %536 = bitcast i8* %535 to <4 x i8>*
  %537 = load <4 x i8>, <4 x i8>* %536, align 1
  %538 = zext <4 x i8> %537 to <4 x i32>
  %539 = sub nsw <4 x i32> %534, %538
  %540 = icmp slt <4 x i32> %539, zeroinitializer
  %541 = sub nsw <4 x i32> zeroinitializer, %539
  %542 = select <4 x i1> %540, <4 x i32> %541, <4 x i32> %539
  %543 = add <4 x i32> %542, %516
  %544 = getelementptr inbounds i8, i8* %492, i64 8
  %545 = bitcast i8* %544 to <4 x i8>*
  %546 = load <4 x i8>, <4 x i8>* %545, align 1
  %547 = zext <4 x i8> %546 to <4 x i32>
  %548 = getelementptr inbounds i8, i8* %490, i64 8
  %549 = bitcast i8* %548 to <4 x i8>*
  %550 = load <4 x i8>, <4 x i8>* %549, align 1
  %551 = zext <4 x i8> %550 to <4 x i32>
  %552 = mul nuw nsw <4 x i32> %551, %547
  %553 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %547
  %554 = getelementptr inbounds i8, i8* %491, i64 8
  %555 = bitcast i8* %554 to <4 x i8>*
  %556 = load <4 x i8>, <4 x i8>* %555, align 1
  %557 = zext <4 x i8> %556 to <4 x i32>
  %558 = mul nsw <4 x i32> %553, %557
  %559 = add nuw nsw <4 x i32> %552, <i32 32, i32 32, i32 32, i32 32>
  %560 = add nsw <4 x i32> %559, %558
  %561 = ashr <4 x i32> %560, <i32 6, i32 6, i32 6, i32 6>
  %562 = getelementptr inbounds i8, i8* %487, i64 8
  %563 = bitcast i8* %562 to <4 x i8>*
  %564 = load <4 x i8>, <4 x i8>* %563, align 1
  %565 = zext <4 x i8> %564 to <4 x i32>
  %566 = sub nsw <4 x i32> %561, %565
  %567 = icmp slt <4 x i32> %566, zeroinitializer
  %568 = sub nsw <4 x i32> zeroinitializer, %566
  %569 = select <4 x i1> %567, <4 x i32> %568, <4 x i32> %566
  %570 = add <4 x i32> %569, %543
  %571 = getelementptr inbounds i8, i8* %492, i64 12
  %572 = bitcast i8* %571 to <4 x i8>*
  %573 = load <4 x i8>, <4 x i8>* %572, align 1
  %574 = zext <4 x i8> %573 to <4 x i32>
  %575 = getelementptr inbounds i8, i8* %490, i64 12
  %576 = bitcast i8* %575 to <4 x i8>*
  %577 = load <4 x i8>, <4 x i8>* %576, align 1
  %578 = zext <4 x i8> %577 to <4 x i32>
  %579 = mul nuw nsw <4 x i32> %578, %574
  %580 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %574
  %581 = getelementptr inbounds i8, i8* %491, i64 12
  %582 = bitcast i8* %581 to <4 x i8>*
  %583 = load <4 x i8>, <4 x i8>* %582, align 1
  %584 = zext <4 x i8> %583 to <4 x i32>
  %585 = mul nsw <4 x i32> %580, %584
  %586 = add nuw nsw <4 x i32> %579, <i32 32, i32 32, i32 32, i32 32>
  %587 = add nsw <4 x i32> %586, %585
  %588 = ashr <4 x i32> %587, <i32 6, i32 6, i32 6, i32 6>
  %589 = getelementptr inbounds i8, i8* %487, i64 12
  %590 = bitcast i8* %589 to <4 x i8>*
  %591 = load <4 x i8>, <4 x i8>* %590, align 1
  %592 = zext <4 x i8> %591 to <4 x i32>
  %593 = sub nsw <4 x i32> %588, %592
  %594 = icmp slt <4 x i32> %593, zeroinitializer
  %595 = sub nsw <4 x i32> zeroinitializer, %593
  %596 = select <4 x i1> %594, <4 x i32> %595, <4 x i32> %593
  %597 = add <4 x i32> %596, %570
  %598 = getelementptr inbounds i8, i8* %492, i64 16
  %599 = bitcast i8* %598 to <4 x i8>*
  %600 = load <4 x i8>, <4 x i8>* %599, align 1
  %601 = zext <4 x i8> %600 to <4 x i32>
  %602 = getelementptr inbounds i8, i8* %490, i64 16
  %603 = bitcast i8* %602 to <4 x i8>*
  %604 = load <4 x i8>, <4 x i8>* %603, align 1
  %605 = zext <4 x i8> %604 to <4 x i32>
  %606 = mul nuw nsw <4 x i32> %605, %601
  %607 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %601
  %608 = getelementptr inbounds i8, i8* %491, i64 16
  %609 = bitcast i8* %608 to <4 x i8>*
  %610 = load <4 x i8>, <4 x i8>* %609, align 1
  %611 = zext <4 x i8> %610 to <4 x i32>
  %612 = mul nsw <4 x i32> %607, %611
  %613 = add nuw nsw <4 x i32> %606, <i32 32, i32 32, i32 32, i32 32>
  %614 = add nsw <4 x i32> %613, %612
  %615 = ashr <4 x i32> %614, <i32 6, i32 6, i32 6, i32 6>
  %616 = getelementptr inbounds i8, i8* %487, i64 16
  %617 = bitcast i8* %616 to <4 x i8>*
  %618 = load <4 x i8>, <4 x i8>* %617, align 1
  %619 = zext <4 x i8> %618 to <4 x i32>
  %620 = sub nsw <4 x i32> %615, %619
  %621 = icmp slt <4 x i32> %620, zeroinitializer
  %622 = sub nsw <4 x i32> zeroinitializer, %620
  %623 = select <4 x i1> %621, <4 x i32> %622, <4 x i32> %620
  %624 = add <4 x i32> %623, %597
  %625 = getelementptr inbounds i8, i8* %492, i64 20
  %626 = bitcast i8* %625 to <4 x i8>*
  %627 = load <4 x i8>, <4 x i8>* %626, align 1
  %628 = zext <4 x i8> %627 to <4 x i32>
  %629 = getelementptr inbounds i8, i8* %490, i64 20
  %630 = bitcast i8* %629 to <4 x i8>*
  %631 = load <4 x i8>, <4 x i8>* %630, align 1
  %632 = zext <4 x i8> %631 to <4 x i32>
  %633 = mul nuw nsw <4 x i32> %632, %628
  %634 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %628
  %635 = getelementptr inbounds i8, i8* %491, i64 20
  %636 = bitcast i8* %635 to <4 x i8>*
  %637 = load <4 x i8>, <4 x i8>* %636, align 1
  %638 = zext <4 x i8> %637 to <4 x i32>
  %639 = mul nsw <4 x i32> %634, %638
  %640 = add nuw nsw <4 x i32> %633, <i32 32, i32 32, i32 32, i32 32>
  %641 = add nsw <4 x i32> %640, %639
  %642 = ashr <4 x i32> %641, <i32 6, i32 6, i32 6, i32 6>
  %643 = getelementptr inbounds i8, i8* %487, i64 20
  %644 = bitcast i8* %643 to <4 x i8>*
  %645 = load <4 x i8>, <4 x i8>* %644, align 1
  %646 = zext <4 x i8> %645 to <4 x i32>
  %647 = sub nsw <4 x i32> %642, %646
  %648 = icmp slt <4 x i32> %647, zeroinitializer
  %649 = sub nsw <4 x i32> zeroinitializer, %647
  %650 = select <4 x i1> %648, <4 x i32> %649, <4 x i32> %647
  %651 = add <4 x i32> %650, %624
  %652 = getelementptr inbounds i8, i8* %492, i64 24
  %653 = bitcast i8* %652 to <4 x i8>*
  %654 = load <4 x i8>, <4 x i8>* %653, align 1
  %655 = zext <4 x i8> %654 to <4 x i32>
  %656 = getelementptr inbounds i8, i8* %490, i64 24
  %657 = bitcast i8* %656 to <4 x i8>*
  %658 = load <4 x i8>, <4 x i8>* %657, align 1
  %659 = zext <4 x i8> %658 to <4 x i32>
  %660 = mul nuw nsw <4 x i32> %659, %655
  %661 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %655
  %662 = getelementptr inbounds i8, i8* %491, i64 24
  %663 = bitcast i8* %662 to <4 x i8>*
  %664 = load <4 x i8>, <4 x i8>* %663, align 1
  %665 = zext <4 x i8> %664 to <4 x i32>
  %666 = mul nsw <4 x i32> %661, %665
  %667 = add nuw nsw <4 x i32> %660, <i32 32, i32 32, i32 32, i32 32>
  %668 = add nsw <4 x i32> %667, %666
  %669 = ashr <4 x i32> %668, <i32 6, i32 6, i32 6, i32 6>
  %670 = getelementptr inbounds i8, i8* %487, i64 24
  %671 = bitcast i8* %670 to <4 x i8>*
  %672 = load <4 x i8>, <4 x i8>* %671, align 1
  %673 = zext <4 x i8> %672 to <4 x i32>
  %674 = sub nsw <4 x i32> %669, %673
  %675 = icmp slt <4 x i32> %674, zeroinitializer
  %676 = sub nsw <4 x i32> zeroinitializer, %674
  %677 = select <4 x i1> %675, <4 x i32> %676, <4 x i32> %674
  %678 = add <4 x i32> %677, %651
  %679 = getelementptr inbounds i8, i8* %492, i64 28
  %680 = bitcast i8* %679 to <4 x i8>*
  %681 = load <4 x i8>, <4 x i8>* %680, align 1
  %682 = zext <4 x i8> %681 to <4 x i32>
  %683 = getelementptr inbounds i8, i8* %490, i64 28
  %684 = bitcast i8* %683 to <4 x i8>*
  %685 = load <4 x i8>, <4 x i8>* %684, align 1
  %686 = zext <4 x i8> %685 to <4 x i32>
  %687 = mul nuw nsw <4 x i32> %686, %682
  %688 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %682
  %689 = getelementptr inbounds i8, i8* %491, i64 28
  %690 = bitcast i8* %689 to <4 x i8>*
  %691 = load <4 x i8>, <4 x i8>* %690, align 1
  %692 = zext <4 x i8> %691 to <4 x i32>
  %693 = mul nsw <4 x i32> %688, %692
  %694 = add nuw nsw <4 x i32> %687, <i32 32, i32 32, i32 32, i32 32>
  %695 = add nsw <4 x i32> %694, %693
  %696 = ashr <4 x i32> %695, <i32 6, i32 6, i32 6, i32 6>
  %697 = getelementptr inbounds i8, i8* %487, i64 28
  %698 = bitcast i8* %697 to <4 x i8>*
  %699 = load <4 x i8>, <4 x i8>* %698, align 1
  %700 = zext <4 x i8> %699 to <4 x i32>
  %701 = sub nsw <4 x i32> %696, %700
  %702 = icmp slt <4 x i32> %701, zeroinitializer
  %703 = sub nsw <4 x i32> zeroinitializer, %701
  %704 = select <4 x i1> %702, <4 x i32> %703, <4 x i32> %701
  %705 = add <4 x i32> %704, %678
  %706 = shufflevector <4 x i32> %705, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %707 = add <4 x i32> %705, %706
  %708 = shufflevector <4 x i32> %707, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %709 = add <4 x i32> %707, %708
  %710 = extractelement <4 x i32> %709, i32 0
  %711 = getelementptr inbounds i8, i8* %487, i64 %11
  %712 = getelementptr inbounds i8, i8* %490, i64 %12
  %713 = getelementptr inbounds i8, i8* %491, i64 32
  %714 = getelementptr inbounds i8, i8* %492, i64 %13
  %715 = add nuw nsw i32 %489, 1
  %716 = icmp eq i32 %715, 32
  br i1 %716, label %717, label %486

717:                                              ; preds = %486
  %718 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %710, i32* %718, align 4
  %719 = getelementptr inbounds i8*, i8** %2, i64 2
  %720 = load i8*, i8** %719, align 8
  br label %721

721:                                              ; preds = %717, %721
  %722 = phi i8* [ %0, %717 ], [ %946, %721 ]
  %723 = phi i32 [ 0, %717 ], [ %945, %721 ]
  %724 = phi i32 [ 0, %717 ], [ %950, %721 ]
  %725 = phi i8* [ %720, %717 ], [ %947, %721 ]
  %726 = phi i8* [ %4, %717 ], [ %948, %721 ]
  %727 = phi i8* [ %5, %717 ], [ %949, %721 ]
  %728 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %723, i32 0
  %729 = bitcast i8* %727 to <4 x i8>*
  %730 = load <4 x i8>, <4 x i8>* %729, align 1
  %731 = zext <4 x i8> %730 to <4 x i32>
  %732 = bitcast i8* %725 to <4 x i8>*
  %733 = load <4 x i8>, <4 x i8>* %732, align 1
  %734 = zext <4 x i8> %733 to <4 x i32>
  %735 = mul nuw nsw <4 x i32> %734, %731
  %736 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %731
  %737 = bitcast i8* %726 to <4 x i8>*
  %738 = load <4 x i8>, <4 x i8>* %737, align 1
  %739 = zext <4 x i8> %738 to <4 x i32>
  %740 = mul nsw <4 x i32> %736, %739
  %741 = add nuw nsw <4 x i32> %735, <i32 32, i32 32, i32 32, i32 32>
  %742 = add nsw <4 x i32> %741, %740
  %743 = ashr <4 x i32> %742, <i32 6, i32 6, i32 6, i32 6>
  %744 = bitcast i8* %722 to <4 x i8>*
  %745 = load <4 x i8>, <4 x i8>* %744, align 1
  %746 = zext <4 x i8> %745 to <4 x i32>
  %747 = sub nsw <4 x i32> %743, %746
  %748 = icmp slt <4 x i32> %747, zeroinitializer
  %749 = sub nsw <4 x i32> zeroinitializer, %747
  %750 = select <4 x i1> %748, <4 x i32> %749, <4 x i32> %747
  %751 = add <4 x i32> %750, %728
  %752 = getelementptr inbounds i8, i8* %727, i64 4
  %753 = bitcast i8* %752 to <4 x i8>*
  %754 = load <4 x i8>, <4 x i8>* %753, align 1
  %755 = zext <4 x i8> %754 to <4 x i32>
  %756 = getelementptr inbounds i8, i8* %725, i64 4
  %757 = bitcast i8* %756 to <4 x i8>*
  %758 = load <4 x i8>, <4 x i8>* %757, align 1
  %759 = zext <4 x i8> %758 to <4 x i32>
  %760 = mul nuw nsw <4 x i32> %759, %755
  %761 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %755
  %762 = getelementptr inbounds i8, i8* %726, i64 4
  %763 = bitcast i8* %762 to <4 x i8>*
  %764 = load <4 x i8>, <4 x i8>* %763, align 1
  %765 = zext <4 x i8> %764 to <4 x i32>
  %766 = mul nsw <4 x i32> %761, %765
  %767 = add nuw nsw <4 x i32> %760, <i32 32, i32 32, i32 32, i32 32>
  %768 = add nsw <4 x i32> %767, %766
  %769 = ashr <4 x i32> %768, <i32 6, i32 6, i32 6, i32 6>
  %770 = getelementptr inbounds i8, i8* %722, i64 4
  %771 = bitcast i8* %770 to <4 x i8>*
  %772 = load <4 x i8>, <4 x i8>* %771, align 1
  %773 = zext <4 x i8> %772 to <4 x i32>
  %774 = sub nsw <4 x i32> %769, %773
  %775 = icmp slt <4 x i32> %774, zeroinitializer
  %776 = sub nsw <4 x i32> zeroinitializer, %774
  %777 = select <4 x i1> %775, <4 x i32> %776, <4 x i32> %774
  %778 = add <4 x i32> %777, %751
  %779 = getelementptr inbounds i8, i8* %727, i64 8
  %780 = bitcast i8* %779 to <4 x i8>*
  %781 = load <4 x i8>, <4 x i8>* %780, align 1
  %782 = zext <4 x i8> %781 to <4 x i32>
  %783 = getelementptr inbounds i8, i8* %725, i64 8
  %784 = bitcast i8* %783 to <4 x i8>*
  %785 = load <4 x i8>, <4 x i8>* %784, align 1
  %786 = zext <4 x i8> %785 to <4 x i32>
  %787 = mul nuw nsw <4 x i32> %786, %782
  %788 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %782
  %789 = getelementptr inbounds i8, i8* %726, i64 8
  %790 = bitcast i8* %789 to <4 x i8>*
  %791 = load <4 x i8>, <4 x i8>* %790, align 1
  %792 = zext <4 x i8> %791 to <4 x i32>
  %793 = mul nsw <4 x i32> %788, %792
  %794 = add nuw nsw <4 x i32> %787, <i32 32, i32 32, i32 32, i32 32>
  %795 = add nsw <4 x i32> %794, %793
  %796 = ashr <4 x i32> %795, <i32 6, i32 6, i32 6, i32 6>
  %797 = getelementptr inbounds i8, i8* %722, i64 8
  %798 = bitcast i8* %797 to <4 x i8>*
  %799 = load <4 x i8>, <4 x i8>* %798, align 1
  %800 = zext <4 x i8> %799 to <4 x i32>
  %801 = sub nsw <4 x i32> %796, %800
  %802 = icmp slt <4 x i32> %801, zeroinitializer
  %803 = sub nsw <4 x i32> zeroinitializer, %801
  %804 = select <4 x i1> %802, <4 x i32> %803, <4 x i32> %801
  %805 = add <4 x i32> %804, %778
  %806 = getelementptr inbounds i8, i8* %727, i64 12
  %807 = bitcast i8* %806 to <4 x i8>*
  %808 = load <4 x i8>, <4 x i8>* %807, align 1
  %809 = zext <4 x i8> %808 to <4 x i32>
  %810 = getelementptr inbounds i8, i8* %725, i64 12
  %811 = bitcast i8* %810 to <4 x i8>*
  %812 = load <4 x i8>, <4 x i8>* %811, align 1
  %813 = zext <4 x i8> %812 to <4 x i32>
  %814 = mul nuw nsw <4 x i32> %813, %809
  %815 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %809
  %816 = getelementptr inbounds i8, i8* %726, i64 12
  %817 = bitcast i8* %816 to <4 x i8>*
  %818 = load <4 x i8>, <4 x i8>* %817, align 1
  %819 = zext <4 x i8> %818 to <4 x i32>
  %820 = mul nsw <4 x i32> %815, %819
  %821 = add nuw nsw <4 x i32> %814, <i32 32, i32 32, i32 32, i32 32>
  %822 = add nsw <4 x i32> %821, %820
  %823 = ashr <4 x i32> %822, <i32 6, i32 6, i32 6, i32 6>
  %824 = getelementptr inbounds i8, i8* %722, i64 12
  %825 = bitcast i8* %824 to <4 x i8>*
  %826 = load <4 x i8>, <4 x i8>* %825, align 1
  %827 = zext <4 x i8> %826 to <4 x i32>
  %828 = sub nsw <4 x i32> %823, %827
  %829 = icmp slt <4 x i32> %828, zeroinitializer
  %830 = sub nsw <4 x i32> zeroinitializer, %828
  %831 = select <4 x i1> %829, <4 x i32> %830, <4 x i32> %828
  %832 = add <4 x i32> %831, %805
  %833 = getelementptr inbounds i8, i8* %727, i64 16
  %834 = bitcast i8* %833 to <4 x i8>*
  %835 = load <4 x i8>, <4 x i8>* %834, align 1
  %836 = zext <4 x i8> %835 to <4 x i32>
  %837 = getelementptr inbounds i8, i8* %725, i64 16
  %838 = bitcast i8* %837 to <4 x i8>*
  %839 = load <4 x i8>, <4 x i8>* %838, align 1
  %840 = zext <4 x i8> %839 to <4 x i32>
  %841 = mul nuw nsw <4 x i32> %840, %836
  %842 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %836
  %843 = getelementptr inbounds i8, i8* %726, i64 16
  %844 = bitcast i8* %843 to <4 x i8>*
  %845 = load <4 x i8>, <4 x i8>* %844, align 1
  %846 = zext <4 x i8> %845 to <4 x i32>
  %847 = mul nsw <4 x i32> %842, %846
  %848 = add nuw nsw <4 x i32> %841, <i32 32, i32 32, i32 32, i32 32>
  %849 = add nsw <4 x i32> %848, %847
  %850 = ashr <4 x i32> %849, <i32 6, i32 6, i32 6, i32 6>
  %851 = getelementptr inbounds i8, i8* %722, i64 16
  %852 = bitcast i8* %851 to <4 x i8>*
  %853 = load <4 x i8>, <4 x i8>* %852, align 1
  %854 = zext <4 x i8> %853 to <4 x i32>
  %855 = sub nsw <4 x i32> %850, %854
  %856 = icmp slt <4 x i32> %855, zeroinitializer
  %857 = sub nsw <4 x i32> zeroinitializer, %855
  %858 = select <4 x i1> %856, <4 x i32> %857, <4 x i32> %855
  %859 = add <4 x i32> %858, %832
  %860 = getelementptr inbounds i8, i8* %727, i64 20
  %861 = bitcast i8* %860 to <4 x i8>*
  %862 = load <4 x i8>, <4 x i8>* %861, align 1
  %863 = zext <4 x i8> %862 to <4 x i32>
  %864 = getelementptr inbounds i8, i8* %725, i64 20
  %865 = bitcast i8* %864 to <4 x i8>*
  %866 = load <4 x i8>, <4 x i8>* %865, align 1
  %867 = zext <4 x i8> %866 to <4 x i32>
  %868 = mul nuw nsw <4 x i32> %867, %863
  %869 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %863
  %870 = getelementptr inbounds i8, i8* %726, i64 20
  %871 = bitcast i8* %870 to <4 x i8>*
  %872 = load <4 x i8>, <4 x i8>* %871, align 1
  %873 = zext <4 x i8> %872 to <4 x i32>
  %874 = mul nsw <4 x i32> %869, %873
  %875 = add nuw nsw <4 x i32> %868, <i32 32, i32 32, i32 32, i32 32>
  %876 = add nsw <4 x i32> %875, %874
  %877 = ashr <4 x i32> %876, <i32 6, i32 6, i32 6, i32 6>
  %878 = getelementptr inbounds i8, i8* %722, i64 20
  %879 = bitcast i8* %878 to <4 x i8>*
  %880 = load <4 x i8>, <4 x i8>* %879, align 1
  %881 = zext <4 x i8> %880 to <4 x i32>
  %882 = sub nsw <4 x i32> %877, %881
  %883 = icmp slt <4 x i32> %882, zeroinitializer
  %884 = sub nsw <4 x i32> zeroinitializer, %882
  %885 = select <4 x i1> %883, <4 x i32> %884, <4 x i32> %882
  %886 = add <4 x i32> %885, %859
  %887 = getelementptr inbounds i8, i8* %727, i64 24
  %888 = bitcast i8* %887 to <4 x i8>*
  %889 = load <4 x i8>, <4 x i8>* %888, align 1
  %890 = zext <4 x i8> %889 to <4 x i32>
  %891 = getelementptr inbounds i8, i8* %725, i64 24
  %892 = bitcast i8* %891 to <4 x i8>*
  %893 = load <4 x i8>, <4 x i8>* %892, align 1
  %894 = zext <4 x i8> %893 to <4 x i32>
  %895 = mul nuw nsw <4 x i32> %894, %890
  %896 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %890
  %897 = getelementptr inbounds i8, i8* %726, i64 24
  %898 = bitcast i8* %897 to <4 x i8>*
  %899 = load <4 x i8>, <4 x i8>* %898, align 1
  %900 = zext <4 x i8> %899 to <4 x i32>
  %901 = mul nsw <4 x i32> %896, %900
  %902 = add nuw nsw <4 x i32> %895, <i32 32, i32 32, i32 32, i32 32>
  %903 = add nsw <4 x i32> %902, %901
  %904 = ashr <4 x i32> %903, <i32 6, i32 6, i32 6, i32 6>
  %905 = getelementptr inbounds i8, i8* %722, i64 24
  %906 = bitcast i8* %905 to <4 x i8>*
  %907 = load <4 x i8>, <4 x i8>* %906, align 1
  %908 = zext <4 x i8> %907 to <4 x i32>
  %909 = sub nsw <4 x i32> %904, %908
  %910 = icmp slt <4 x i32> %909, zeroinitializer
  %911 = sub nsw <4 x i32> zeroinitializer, %909
  %912 = select <4 x i1> %910, <4 x i32> %911, <4 x i32> %909
  %913 = add <4 x i32> %912, %886
  %914 = getelementptr inbounds i8, i8* %727, i64 28
  %915 = bitcast i8* %914 to <4 x i8>*
  %916 = load <4 x i8>, <4 x i8>* %915, align 1
  %917 = zext <4 x i8> %916 to <4 x i32>
  %918 = getelementptr inbounds i8, i8* %725, i64 28
  %919 = bitcast i8* %918 to <4 x i8>*
  %920 = load <4 x i8>, <4 x i8>* %919, align 1
  %921 = zext <4 x i8> %920 to <4 x i32>
  %922 = mul nuw nsw <4 x i32> %921, %917
  %923 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %917
  %924 = getelementptr inbounds i8, i8* %726, i64 28
  %925 = bitcast i8* %924 to <4 x i8>*
  %926 = load <4 x i8>, <4 x i8>* %925, align 1
  %927 = zext <4 x i8> %926 to <4 x i32>
  %928 = mul nsw <4 x i32> %923, %927
  %929 = add nuw nsw <4 x i32> %922, <i32 32, i32 32, i32 32, i32 32>
  %930 = add nsw <4 x i32> %929, %928
  %931 = ashr <4 x i32> %930, <i32 6, i32 6, i32 6, i32 6>
  %932 = getelementptr inbounds i8, i8* %722, i64 28
  %933 = bitcast i8* %932 to <4 x i8>*
  %934 = load <4 x i8>, <4 x i8>* %933, align 1
  %935 = zext <4 x i8> %934 to <4 x i32>
  %936 = sub nsw <4 x i32> %931, %935
  %937 = icmp slt <4 x i32> %936, zeroinitializer
  %938 = sub nsw <4 x i32> zeroinitializer, %936
  %939 = select <4 x i1> %937, <4 x i32> %938, <4 x i32> %936
  %940 = add <4 x i32> %939, %913
  %941 = shufflevector <4 x i32> %940, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %942 = add <4 x i32> %940, %941
  %943 = shufflevector <4 x i32> %942, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %944 = add <4 x i32> %942, %943
  %945 = extractelement <4 x i32> %944, i32 0
  %946 = getelementptr inbounds i8, i8* %722, i64 %11
  %947 = getelementptr inbounds i8, i8* %725, i64 %12
  %948 = getelementptr inbounds i8, i8* %726, i64 32
  %949 = getelementptr inbounds i8, i8* %727, i64 %13
  %950 = add nuw nsw i32 %724, 1
  %951 = icmp eq i32 %950, 32
  br i1 %951, label %952, label %721

952:                                              ; preds = %721
  %953 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %945, i32* %953, align 4
  %954 = getelementptr inbounds i8*, i8** %2, i64 3
  %955 = load i8*, i8** %954, align 8
  br label %956

956:                                              ; preds = %952, %956
  %957 = phi i8* [ %0, %952 ], [ %1181, %956 ]
  %958 = phi i32 [ 0, %952 ], [ %1180, %956 ]
  %959 = phi i32 [ 0, %952 ], [ %1185, %956 ]
  %960 = phi i8* [ %955, %952 ], [ %1182, %956 ]
  %961 = phi i8* [ %4, %952 ], [ %1183, %956 ]
  %962 = phi i8* [ %5, %952 ], [ %1184, %956 ]
  %963 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %958, i32 0
  %964 = bitcast i8* %962 to <4 x i8>*
  %965 = load <4 x i8>, <4 x i8>* %964, align 1
  %966 = zext <4 x i8> %965 to <4 x i32>
  %967 = bitcast i8* %960 to <4 x i8>*
  %968 = load <4 x i8>, <4 x i8>* %967, align 1
  %969 = zext <4 x i8> %968 to <4 x i32>
  %970 = mul nuw nsw <4 x i32> %969, %966
  %971 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %966
  %972 = bitcast i8* %961 to <4 x i8>*
  %973 = load <4 x i8>, <4 x i8>* %972, align 1
  %974 = zext <4 x i8> %973 to <4 x i32>
  %975 = mul nsw <4 x i32> %971, %974
  %976 = add nuw nsw <4 x i32> %970, <i32 32, i32 32, i32 32, i32 32>
  %977 = add nsw <4 x i32> %976, %975
  %978 = ashr <4 x i32> %977, <i32 6, i32 6, i32 6, i32 6>
  %979 = bitcast i8* %957 to <4 x i8>*
  %980 = load <4 x i8>, <4 x i8>* %979, align 1
  %981 = zext <4 x i8> %980 to <4 x i32>
  %982 = sub nsw <4 x i32> %978, %981
  %983 = icmp slt <4 x i32> %982, zeroinitializer
  %984 = sub nsw <4 x i32> zeroinitializer, %982
  %985 = select <4 x i1> %983, <4 x i32> %984, <4 x i32> %982
  %986 = add <4 x i32> %985, %963
  %987 = getelementptr inbounds i8, i8* %962, i64 4
  %988 = bitcast i8* %987 to <4 x i8>*
  %989 = load <4 x i8>, <4 x i8>* %988, align 1
  %990 = zext <4 x i8> %989 to <4 x i32>
  %991 = getelementptr inbounds i8, i8* %960, i64 4
  %992 = bitcast i8* %991 to <4 x i8>*
  %993 = load <4 x i8>, <4 x i8>* %992, align 1
  %994 = zext <4 x i8> %993 to <4 x i32>
  %995 = mul nuw nsw <4 x i32> %994, %990
  %996 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %990
  %997 = getelementptr inbounds i8, i8* %961, i64 4
  %998 = bitcast i8* %997 to <4 x i8>*
  %999 = load <4 x i8>, <4 x i8>* %998, align 1
  %1000 = zext <4 x i8> %999 to <4 x i32>
  %1001 = mul nsw <4 x i32> %996, %1000
  %1002 = add nuw nsw <4 x i32> %995, <i32 32, i32 32, i32 32, i32 32>
  %1003 = add nsw <4 x i32> %1002, %1001
  %1004 = ashr <4 x i32> %1003, <i32 6, i32 6, i32 6, i32 6>
  %1005 = getelementptr inbounds i8, i8* %957, i64 4
  %1006 = bitcast i8* %1005 to <4 x i8>*
  %1007 = load <4 x i8>, <4 x i8>* %1006, align 1
  %1008 = zext <4 x i8> %1007 to <4 x i32>
  %1009 = sub nsw <4 x i32> %1004, %1008
  %1010 = icmp slt <4 x i32> %1009, zeroinitializer
  %1011 = sub nsw <4 x i32> zeroinitializer, %1009
  %1012 = select <4 x i1> %1010, <4 x i32> %1011, <4 x i32> %1009
  %1013 = add <4 x i32> %1012, %986
  %1014 = getelementptr inbounds i8, i8* %962, i64 8
  %1015 = bitcast i8* %1014 to <4 x i8>*
  %1016 = load <4 x i8>, <4 x i8>* %1015, align 1
  %1017 = zext <4 x i8> %1016 to <4 x i32>
  %1018 = getelementptr inbounds i8, i8* %960, i64 8
  %1019 = bitcast i8* %1018 to <4 x i8>*
  %1020 = load <4 x i8>, <4 x i8>* %1019, align 1
  %1021 = zext <4 x i8> %1020 to <4 x i32>
  %1022 = mul nuw nsw <4 x i32> %1021, %1017
  %1023 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1017
  %1024 = getelementptr inbounds i8, i8* %961, i64 8
  %1025 = bitcast i8* %1024 to <4 x i8>*
  %1026 = load <4 x i8>, <4 x i8>* %1025, align 1
  %1027 = zext <4 x i8> %1026 to <4 x i32>
  %1028 = mul nsw <4 x i32> %1023, %1027
  %1029 = add nuw nsw <4 x i32> %1022, <i32 32, i32 32, i32 32, i32 32>
  %1030 = add nsw <4 x i32> %1029, %1028
  %1031 = ashr <4 x i32> %1030, <i32 6, i32 6, i32 6, i32 6>
  %1032 = getelementptr inbounds i8, i8* %957, i64 8
  %1033 = bitcast i8* %1032 to <4 x i8>*
  %1034 = load <4 x i8>, <4 x i8>* %1033, align 1
  %1035 = zext <4 x i8> %1034 to <4 x i32>
  %1036 = sub nsw <4 x i32> %1031, %1035
  %1037 = icmp slt <4 x i32> %1036, zeroinitializer
  %1038 = sub nsw <4 x i32> zeroinitializer, %1036
  %1039 = select <4 x i1> %1037, <4 x i32> %1038, <4 x i32> %1036
  %1040 = add <4 x i32> %1039, %1013
  %1041 = getelementptr inbounds i8, i8* %962, i64 12
  %1042 = bitcast i8* %1041 to <4 x i8>*
  %1043 = load <4 x i8>, <4 x i8>* %1042, align 1
  %1044 = zext <4 x i8> %1043 to <4 x i32>
  %1045 = getelementptr inbounds i8, i8* %960, i64 12
  %1046 = bitcast i8* %1045 to <4 x i8>*
  %1047 = load <4 x i8>, <4 x i8>* %1046, align 1
  %1048 = zext <4 x i8> %1047 to <4 x i32>
  %1049 = mul nuw nsw <4 x i32> %1048, %1044
  %1050 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1044
  %1051 = getelementptr inbounds i8, i8* %961, i64 12
  %1052 = bitcast i8* %1051 to <4 x i8>*
  %1053 = load <4 x i8>, <4 x i8>* %1052, align 1
  %1054 = zext <4 x i8> %1053 to <4 x i32>
  %1055 = mul nsw <4 x i32> %1050, %1054
  %1056 = add nuw nsw <4 x i32> %1049, <i32 32, i32 32, i32 32, i32 32>
  %1057 = add nsw <4 x i32> %1056, %1055
  %1058 = ashr <4 x i32> %1057, <i32 6, i32 6, i32 6, i32 6>
  %1059 = getelementptr inbounds i8, i8* %957, i64 12
  %1060 = bitcast i8* %1059 to <4 x i8>*
  %1061 = load <4 x i8>, <4 x i8>* %1060, align 1
  %1062 = zext <4 x i8> %1061 to <4 x i32>
  %1063 = sub nsw <4 x i32> %1058, %1062
  %1064 = icmp slt <4 x i32> %1063, zeroinitializer
  %1065 = sub nsw <4 x i32> zeroinitializer, %1063
  %1066 = select <4 x i1> %1064, <4 x i32> %1065, <4 x i32> %1063
  %1067 = add <4 x i32> %1066, %1040
  %1068 = getelementptr inbounds i8, i8* %962, i64 16
  %1069 = bitcast i8* %1068 to <4 x i8>*
  %1070 = load <4 x i8>, <4 x i8>* %1069, align 1
  %1071 = zext <4 x i8> %1070 to <4 x i32>
  %1072 = getelementptr inbounds i8, i8* %960, i64 16
  %1073 = bitcast i8* %1072 to <4 x i8>*
  %1074 = load <4 x i8>, <4 x i8>* %1073, align 1
  %1075 = zext <4 x i8> %1074 to <4 x i32>
  %1076 = mul nuw nsw <4 x i32> %1075, %1071
  %1077 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1071
  %1078 = getelementptr inbounds i8, i8* %961, i64 16
  %1079 = bitcast i8* %1078 to <4 x i8>*
  %1080 = load <4 x i8>, <4 x i8>* %1079, align 1
  %1081 = zext <4 x i8> %1080 to <4 x i32>
  %1082 = mul nsw <4 x i32> %1077, %1081
  %1083 = add nuw nsw <4 x i32> %1076, <i32 32, i32 32, i32 32, i32 32>
  %1084 = add nsw <4 x i32> %1083, %1082
  %1085 = ashr <4 x i32> %1084, <i32 6, i32 6, i32 6, i32 6>
  %1086 = getelementptr inbounds i8, i8* %957, i64 16
  %1087 = bitcast i8* %1086 to <4 x i8>*
  %1088 = load <4 x i8>, <4 x i8>* %1087, align 1
  %1089 = zext <4 x i8> %1088 to <4 x i32>
  %1090 = sub nsw <4 x i32> %1085, %1089
  %1091 = icmp slt <4 x i32> %1090, zeroinitializer
  %1092 = sub nsw <4 x i32> zeroinitializer, %1090
  %1093 = select <4 x i1> %1091, <4 x i32> %1092, <4 x i32> %1090
  %1094 = add <4 x i32> %1093, %1067
  %1095 = getelementptr inbounds i8, i8* %962, i64 20
  %1096 = bitcast i8* %1095 to <4 x i8>*
  %1097 = load <4 x i8>, <4 x i8>* %1096, align 1
  %1098 = zext <4 x i8> %1097 to <4 x i32>
  %1099 = getelementptr inbounds i8, i8* %960, i64 20
  %1100 = bitcast i8* %1099 to <4 x i8>*
  %1101 = load <4 x i8>, <4 x i8>* %1100, align 1
  %1102 = zext <4 x i8> %1101 to <4 x i32>
  %1103 = mul nuw nsw <4 x i32> %1102, %1098
  %1104 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1098
  %1105 = getelementptr inbounds i8, i8* %961, i64 20
  %1106 = bitcast i8* %1105 to <4 x i8>*
  %1107 = load <4 x i8>, <4 x i8>* %1106, align 1
  %1108 = zext <4 x i8> %1107 to <4 x i32>
  %1109 = mul nsw <4 x i32> %1104, %1108
  %1110 = add nuw nsw <4 x i32> %1103, <i32 32, i32 32, i32 32, i32 32>
  %1111 = add nsw <4 x i32> %1110, %1109
  %1112 = ashr <4 x i32> %1111, <i32 6, i32 6, i32 6, i32 6>
  %1113 = getelementptr inbounds i8, i8* %957, i64 20
  %1114 = bitcast i8* %1113 to <4 x i8>*
  %1115 = load <4 x i8>, <4 x i8>* %1114, align 1
  %1116 = zext <4 x i8> %1115 to <4 x i32>
  %1117 = sub nsw <4 x i32> %1112, %1116
  %1118 = icmp slt <4 x i32> %1117, zeroinitializer
  %1119 = sub nsw <4 x i32> zeroinitializer, %1117
  %1120 = select <4 x i1> %1118, <4 x i32> %1119, <4 x i32> %1117
  %1121 = add <4 x i32> %1120, %1094
  %1122 = getelementptr inbounds i8, i8* %962, i64 24
  %1123 = bitcast i8* %1122 to <4 x i8>*
  %1124 = load <4 x i8>, <4 x i8>* %1123, align 1
  %1125 = zext <4 x i8> %1124 to <4 x i32>
  %1126 = getelementptr inbounds i8, i8* %960, i64 24
  %1127 = bitcast i8* %1126 to <4 x i8>*
  %1128 = load <4 x i8>, <4 x i8>* %1127, align 1
  %1129 = zext <4 x i8> %1128 to <4 x i32>
  %1130 = mul nuw nsw <4 x i32> %1129, %1125
  %1131 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1125
  %1132 = getelementptr inbounds i8, i8* %961, i64 24
  %1133 = bitcast i8* %1132 to <4 x i8>*
  %1134 = load <4 x i8>, <4 x i8>* %1133, align 1
  %1135 = zext <4 x i8> %1134 to <4 x i32>
  %1136 = mul nsw <4 x i32> %1131, %1135
  %1137 = add nuw nsw <4 x i32> %1130, <i32 32, i32 32, i32 32, i32 32>
  %1138 = add nsw <4 x i32> %1137, %1136
  %1139 = ashr <4 x i32> %1138, <i32 6, i32 6, i32 6, i32 6>
  %1140 = getelementptr inbounds i8, i8* %957, i64 24
  %1141 = bitcast i8* %1140 to <4 x i8>*
  %1142 = load <4 x i8>, <4 x i8>* %1141, align 1
  %1143 = zext <4 x i8> %1142 to <4 x i32>
  %1144 = sub nsw <4 x i32> %1139, %1143
  %1145 = icmp slt <4 x i32> %1144, zeroinitializer
  %1146 = sub nsw <4 x i32> zeroinitializer, %1144
  %1147 = select <4 x i1> %1145, <4 x i32> %1146, <4 x i32> %1144
  %1148 = add <4 x i32> %1147, %1121
  %1149 = getelementptr inbounds i8, i8* %962, i64 28
  %1150 = bitcast i8* %1149 to <4 x i8>*
  %1151 = load <4 x i8>, <4 x i8>* %1150, align 1
  %1152 = zext <4 x i8> %1151 to <4 x i32>
  %1153 = getelementptr inbounds i8, i8* %960, i64 28
  %1154 = bitcast i8* %1153 to <4 x i8>*
  %1155 = load <4 x i8>, <4 x i8>* %1154, align 1
  %1156 = zext <4 x i8> %1155 to <4 x i32>
  %1157 = mul nuw nsw <4 x i32> %1156, %1152
  %1158 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1152
  %1159 = getelementptr inbounds i8, i8* %961, i64 28
  %1160 = bitcast i8* %1159 to <4 x i8>*
  %1161 = load <4 x i8>, <4 x i8>* %1160, align 1
  %1162 = zext <4 x i8> %1161 to <4 x i32>
  %1163 = mul nsw <4 x i32> %1158, %1162
  %1164 = add nuw nsw <4 x i32> %1157, <i32 32, i32 32, i32 32, i32 32>
  %1165 = add nsw <4 x i32> %1164, %1163
  %1166 = ashr <4 x i32> %1165, <i32 6, i32 6, i32 6, i32 6>
  %1167 = getelementptr inbounds i8, i8* %957, i64 28
  %1168 = bitcast i8* %1167 to <4 x i8>*
  %1169 = load <4 x i8>, <4 x i8>* %1168, align 1
  %1170 = zext <4 x i8> %1169 to <4 x i32>
  %1171 = sub nsw <4 x i32> %1166, %1170
  %1172 = icmp slt <4 x i32> %1171, zeroinitializer
  %1173 = sub nsw <4 x i32> zeroinitializer, %1171
  %1174 = select <4 x i1> %1172, <4 x i32> %1173, <4 x i32> %1171
  %1175 = add <4 x i32> %1174, %1148
  %1176 = shufflevector <4 x i32> %1175, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1177 = add <4 x i32> %1175, %1176
  %1178 = shufflevector <4 x i32> %1177, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1179 = add <4 x i32> %1177, %1178
  %1180 = extractelement <4 x i32> %1179, i32 0
  %1181 = getelementptr inbounds i8, i8* %957, i64 %11
  %1182 = getelementptr inbounds i8, i8* %960, i64 %12
  %1183 = getelementptr inbounds i8, i8* %961, i64 32
  %1184 = getelementptr inbounds i8, i8* %962, i64 %13
  %1185 = add nuw nsw i32 %959, 1
  %1186 = icmp eq i32 %1185, 32
  br i1 %1186, label %483, label %956

1187:                                             ; preds = %480, %1187
  %1188 = phi i8* [ %0, %480 ], [ %1412, %1187 ]
  %1189 = phi i32 [ 0, %480 ], [ %1411, %1187 ]
  %1190 = phi i32 [ 0, %480 ], [ %1416, %1187 ]
  %1191 = phi i8* [ %4, %480 ], [ %1413, %1187 ]
  %1192 = phi i8* [ %482, %480 ], [ %1414, %1187 ]
  %1193 = phi i8* [ %5, %480 ], [ %1415, %1187 ]
  %1194 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1189, i32 0
  %1195 = bitcast i8* %1193 to <4 x i8>*
  %1196 = load <4 x i8>, <4 x i8>* %1195, align 1
  %1197 = zext <4 x i8> %1196 to <4 x i32>
  %1198 = bitcast i8* %1191 to <4 x i8>*
  %1199 = load <4 x i8>, <4 x i8>* %1198, align 1
  %1200 = zext <4 x i8> %1199 to <4 x i32>
  %1201 = mul nuw nsw <4 x i32> %1200, %1197
  %1202 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1197
  %1203 = bitcast i8* %1192 to <4 x i8>*
  %1204 = load <4 x i8>, <4 x i8>* %1203, align 1
  %1205 = zext <4 x i8> %1204 to <4 x i32>
  %1206 = mul nsw <4 x i32> %1202, %1205
  %1207 = add nuw nsw <4 x i32> %1201, <i32 32, i32 32, i32 32, i32 32>
  %1208 = add nsw <4 x i32> %1207, %1206
  %1209 = ashr <4 x i32> %1208, <i32 6, i32 6, i32 6, i32 6>
  %1210 = bitcast i8* %1188 to <4 x i8>*
  %1211 = load <4 x i8>, <4 x i8>* %1210, align 1
  %1212 = zext <4 x i8> %1211 to <4 x i32>
  %1213 = sub nsw <4 x i32> %1209, %1212
  %1214 = icmp slt <4 x i32> %1213, zeroinitializer
  %1215 = sub nsw <4 x i32> zeroinitializer, %1213
  %1216 = select <4 x i1> %1214, <4 x i32> %1215, <4 x i32> %1213
  %1217 = add <4 x i32> %1216, %1194
  %1218 = getelementptr inbounds i8, i8* %1193, i64 4
  %1219 = bitcast i8* %1218 to <4 x i8>*
  %1220 = load <4 x i8>, <4 x i8>* %1219, align 1
  %1221 = zext <4 x i8> %1220 to <4 x i32>
  %1222 = getelementptr inbounds i8, i8* %1191, i64 4
  %1223 = bitcast i8* %1222 to <4 x i8>*
  %1224 = load <4 x i8>, <4 x i8>* %1223, align 1
  %1225 = zext <4 x i8> %1224 to <4 x i32>
  %1226 = mul nuw nsw <4 x i32> %1225, %1221
  %1227 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1221
  %1228 = getelementptr inbounds i8, i8* %1192, i64 4
  %1229 = bitcast i8* %1228 to <4 x i8>*
  %1230 = load <4 x i8>, <4 x i8>* %1229, align 1
  %1231 = zext <4 x i8> %1230 to <4 x i32>
  %1232 = mul nsw <4 x i32> %1227, %1231
  %1233 = add nuw nsw <4 x i32> %1226, <i32 32, i32 32, i32 32, i32 32>
  %1234 = add nsw <4 x i32> %1233, %1232
  %1235 = ashr <4 x i32> %1234, <i32 6, i32 6, i32 6, i32 6>
  %1236 = getelementptr inbounds i8, i8* %1188, i64 4
  %1237 = bitcast i8* %1236 to <4 x i8>*
  %1238 = load <4 x i8>, <4 x i8>* %1237, align 1
  %1239 = zext <4 x i8> %1238 to <4 x i32>
  %1240 = sub nsw <4 x i32> %1235, %1239
  %1241 = icmp slt <4 x i32> %1240, zeroinitializer
  %1242 = sub nsw <4 x i32> zeroinitializer, %1240
  %1243 = select <4 x i1> %1241, <4 x i32> %1242, <4 x i32> %1240
  %1244 = add <4 x i32> %1243, %1217
  %1245 = getelementptr inbounds i8, i8* %1193, i64 8
  %1246 = bitcast i8* %1245 to <4 x i8>*
  %1247 = load <4 x i8>, <4 x i8>* %1246, align 1
  %1248 = zext <4 x i8> %1247 to <4 x i32>
  %1249 = getelementptr inbounds i8, i8* %1191, i64 8
  %1250 = bitcast i8* %1249 to <4 x i8>*
  %1251 = load <4 x i8>, <4 x i8>* %1250, align 1
  %1252 = zext <4 x i8> %1251 to <4 x i32>
  %1253 = mul nuw nsw <4 x i32> %1252, %1248
  %1254 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1248
  %1255 = getelementptr inbounds i8, i8* %1192, i64 8
  %1256 = bitcast i8* %1255 to <4 x i8>*
  %1257 = load <4 x i8>, <4 x i8>* %1256, align 1
  %1258 = zext <4 x i8> %1257 to <4 x i32>
  %1259 = mul nsw <4 x i32> %1254, %1258
  %1260 = add nuw nsw <4 x i32> %1253, <i32 32, i32 32, i32 32, i32 32>
  %1261 = add nsw <4 x i32> %1260, %1259
  %1262 = ashr <4 x i32> %1261, <i32 6, i32 6, i32 6, i32 6>
  %1263 = getelementptr inbounds i8, i8* %1188, i64 8
  %1264 = bitcast i8* %1263 to <4 x i8>*
  %1265 = load <4 x i8>, <4 x i8>* %1264, align 1
  %1266 = zext <4 x i8> %1265 to <4 x i32>
  %1267 = sub nsw <4 x i32> %1262, %1266
  %1268 = icmp slt <4 x i32> %1267, zeroinitializer
  %1269 = sub nsw <4 x i32> zeroinitializer, %1267
  %1270 = select <4 x i1> %1268, <4 x i32> %1269, <4 x i32> %1267
  %1271 = add <4 x i32> %1270, %1244
  %1272 = getelementptr inbounds i8, i8* %1193, i64 12
  %1273 = bitcast i8* %1272 to <4 x i8>*
  %1274 = load <4 x i8>, <4 x i8>* %1273, align 1
  %1275 = zext <4 x i8> %1274 to <4 x i32>
  %1276 = getelementptr inbounds i8, i8* %1191, i64 12
  %1277 = bitcast i8* %1276 to <4 x i8>*
  %1278 = load <4 x i8>, <4 x i8>* %1277, align 1
  %1279 = zext <4 x i8> %1278 to <4 x i32>
  %1280 = mul nuw nsw <4 x i32> %1279, %1275
  %1281 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1275
  %1282 = getelementptr inbounds i8, i8* %1192, i64 12
  %1283 = bitcast i8* %1282 to <4 x i8>*
  %1284 = load <4 x i8>, <4 x i8>* %1283, align 1
  %1285 = zext <4 x i8> %1284 to <4 x i32>
  %1286 = mul nsw <4 x i32> %1281, %1285
  %1287 = add nuw nsw <4 x i32> %1280, <i32 32, i32 32, i32 32, i32 32>
  %1288 = add nsw <4 x i32> %1287, %1286
  %1289 = ashr <4 x i32> %1288, <i32 6, i32 6, i32 6, i32 6>
  %1290 = getelementptr inbounds i8, i8* %1188, i64 12
  %1291 = bitcast i8* %1290 to <4 x i8>*
  %1292 = load <4 x i8>, <4 x i8>* %1291, align 1
  %1293 = zext <4 x i8> %1292 to <4 x i32>
  %1294 = sub nsw <4 x i32> %1289, %1293
  %1295 = icmp slt <4 x i32> %1294, zeroinitializer
  %1296 = sub nsw <4 x i32> zeroinitializer, %1294
  %1297 = select <4 x i1> %1295, <4 x i32> %1296, <4 x i32> %1294
  %1298 = add <4 x i32> %1297, %1271
  %1299 = getelementptr inbounds i8, i8* %1193, i64 16
  %1300 = bitcast i8* %1299 to <4 x i8>*
  %1301 = load <4 x i8>, <4 x i8>* %1300, align 1
  %1302 = zext <4 x i8> %1301 to <4 x i32>
  %1303 = getelementptr inbounds i8, i8* %1191, i64 16
  %1304 = bitcast i8* %1303 to <4 x i8>*
  %1305 = load <4 x i8>, <4 x i8>* %1304, align 1
  %1306 = zext <4 x i8> %1305 to <4 x i32>
  %1307 = mul nuw nsw <4 x i32> %1306, %1302
  %1308 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1302
  %1309 = getelementptr inbounds i8, i8* %1192, i64 16
  %1310 = bitcast i8* %1309 to <4 x i8>*
  %1311 = load <4 x i8>, <4 x i8>* %1310, align 1
  %1312 = zext <4 x i8> %1311 to <4 x i32>
  %1313 = mul nsw <4 x i32> %1308, %1312
  %1314 = add nuw nsw <4 x i32> %1307, <i32 32, i32 32, i32 32, i32 32>
  %1315 = add nsw <4 x i32> %1314, %1313
  %1316 = ashr <4 x i32> %1315, <i32 6, i32 6, i32 6, i32 6>
  %1317 = getelementptr inbounds i8, i8* %1188, i64 16
  %1318 = bitcast i8* %1317 to <4 x i8>*
  %1319 = load <4 x i8>, <4 x i8>* %1318, align 1
  %1320 = zext <4 x i8> %1319 to <4 x i32>
  %1321 = sub nsw <4 x i32> %1316, %1320
  %1322 = icmp slt <4 x i32> %1321, zeroinitializer
  %1323 = sub nsw <4 x i32> zeroinitializer, %1321
  %1324 = select <4 x i1> %1322, <4 x i32> %1323, <4 x i32> %1321
  %1325 = add <4 x i32> %1324, %1298
  %1326 = getelementptr inbounds i8, i8* %1193, i64 20
  %1327 = bitcast i8* %1326 to <4 x i8>*
  %1328 = load <4 x i8>, <4 x i8>* %1327, align 1
  %1329 = zext <4 x i8> %1328 to <4 x i32>
  %1330 = getelementptr inbounds i8, i8* %1191, i64 20
  %1331 = bitcast i8* %1330 to <4 x i8>*
  %1332 = load <4 x i8>, <4 x i8>* %1331, align 1
  %1333 = zext <4 x i8> %1332 to <4 x i32>
  %1334 = mul nuw nsw <4 x i32> %1333, %1329
  %1335 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1329
  %1336 = getelementptr inbounds i8, i8* %1192, i64 20
  %1337 = bitcast i8* %1336 to <4 x i8>*
  %1338 = load <4 x i8>, <4 x i8>* %1337, align 1
  %1339 = zext <4 x i8> %1338 to <4 x i32>
  %1340 = mul nsw <4 x i32> %1335, %1339
  %1341 = add nuw nsw <4 x i32> %1334, <i32 32, i32 32, i32 32, i32 32>
  %1342 = add nsw <4 x i32> %1341, %1340
  %1343 = ashr <4 x i32> %1342, <i32 6, i32 6, i32 6, i32 6>
  %1344 = getelementptr inbounds i8, i8* %1188, i64 20
  %1345 = bitcast i8* %1344 to <4 x i8>*
  %1346 = load <4 x i8>, <4 x i8>* %1345, align 1
  %1347 = zext <4 x i8> %1346 to <4 x i32>
  %1348 = sub nsw <4 x i32> %1343, %1347
  %1349 = icmp slt <4 x i32> %1348, zeroinitializer
  %1350 = sub nsw <4 x i32> zeroinitializer, %1348
  %1351 = select <4 x i1> %1349, <4 x i32> %1350, <4 x i32> %1348
  %1352 = add <4 x i32> %1351, %1325
  %1353 = getelementptr inbounds i8, i8* %1193, i64 24
  %1354 = bitcast i8* %1353 to <4 x i8>*
  %1355 = load <4 x i8>, <4 x i8>* %1354, align 1
  %1356 = zext <4 x i8> %1355 to <4 x i32>
  %1357 = getelementptr inbounds i8, i8* %1191, i64 24
  %1358 = bitcast i8* %1357 to <4 x i8>*
  %1359 = load <4 x i8>, <4 x i8>* %1358, align 1
  %1360 = zext <4 x i8> %1359 to <4 x i32>
  %1361 = mul nuw nsw <4 x i32> %1360, %1356
  %1362 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1356
  %1363 = getelementptr inbounds i8, i8* %1192, i64 24
  %1364 = bitcast i8* %1363 to <4 x i8>*
  %1365 = load <4 x i8>, <4 x i8>* %1364, align 1
  %1366 = zext <4 x i8> %1365 to <4 x i32>
  %1367 = mul nsw <4 x i32> %1362, %1366
  %1368 = add nuw nsw <4 x i32> %1361, <i32 32, i32 32, i32 32, i32 32>
  %1369 = add nsw <4 x i32> %1368, %1367
  %1370 = ashr <4 x i32> %1369, <i32 6, i32 6, i32 6, i32 6>
  %1371 = getelementptr inbounds i8, i8* %1188, i64 24
  %1372 = bitcast i8* %1371 to <4 x i8>*
  %1373 = load <4 x i8>, <4 x i8>* %1372, align 1
  %1374 = zext <4 x i8> %1373 to <4 x i32>
  %1375 = sub nsw <4 x i32> %1370, %1374
  %1376 = icmp slt <4 x i32> %1375, zeroinitializer
  %1377 = sub nsw <4 x i32> zeroinitializer, %1375
  %1378 = select <4 x i1> %1376, <4 x i32> %1377, <4 x i32> %1375
  %1379 = add <4 x i32> %1378, %1352
  %1380 = getelementptr inbounds i8, i8* %1193, i64 28
  %1381 = bitcast i8* %1380 to <4 x i8>*
  %1382 = load <4 x i8>, <4 x i8>* %1381, align 1
  %1383 = zext <4 x i8> %1382 to <4 x i32>
  %1384 = getelementptr inbounds i8, i8* %1191, i64 28
  %1385 = bitcast i8* %1384 to <4 x i8>*
  %1386 = load <4 x i8>, <4 x i8>* %1385, align 1
  %1387 = zext <4 x i8> %1386 to <4 x i32>
  %1388 = mul nuw nsw <4 x i32> %1387, %1383
  %1389 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1383
  %1390 = getelementptr inbounds i8, i8* %1192, i64 28
  %1391 = bitcast i8* %1390 to <4 x i8>*
  %1392 = load <4 x i8>, <4 x i8>* %1391, align 1
  %1393 = zext <4 x i8> %1392 to <4 x i32>
  %1394 = mul nsw <4 x i32> %1389, %1393
  %1395 = add nuw nsw <4 x i32> %1388, <i32 32, i32 32, i32 32, i32 32>
  %1396 = add nsw <4 x i32> %1395, %1394
  %1397 = ashr <4 x i32> %1396, <i32 6, i32 6, i32 6, i32 6>
  %1398 = getelementptr inbounds i8, i8* %1188, i64 28
  %1399 = bitcast i8* %1398 to <4 x i8>*
  %1400 = load <4 x i8>, <4 x i8>* %1399, align 1
  %1401 = zext <4 x i8> %1400 to <4 x i32>
  %1402 = sub nsw <4 x i32> %1397, %1401
  %1403 = icmp slt <4 x i32> %1402, zeroinitializer
  %1404 = sub nsw <4 x i32> zeroinitializer, %1402
  %1405 = select <4 x i1> %1403, <4 x i32> %1404, <4 x i32> %1402
  %1406 = add <4 x i32> %1405, %1379
  %1407 = shufflevector <4 x i32> %1406, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1408 = add <4 x i32> %1406, %1407
  %1409 = shufflevector <4 x i32> %1408, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1410 = add <4 x i32> %1408, %1409
  %1411 = extractelement <4 x i32> %1410, i32 0
  %1412 = getelementptr inbounds i8, i8* %1188, i64 %11
  %1413 = getelementptr inbounds i8, i8* %1191, i64 32
  %1414 = getelementptr inbounds i8, i8* %1192, i64 %12
  %1415 = getelementptr inbounds i8, i8* %1193, i64 %13
  %1416 = add nuw nsw i32 %1190, 1
  %1417 = icmp eq i32 %1416, 32
  br i1 %1417, label %1418, label %1187

1418:                                             ; preds = %1187
  %1419 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %1411, i32* %1419, align 4
  %1420 = getelementptr inbounds i8*, i8** %2, i64 2
  %1421 = load i8*, i8** %1420, align 8
  br label %1422

1422:                                             ; preds = %1418, %1422
  %1423 = phi i8* [ %0, %1418 ], [ %1647, %1422 ]
  %1424 = phi i32 [ 0, %1418 ], [ %1646, %1422 ]
  %1425 = phi i32 [ 0, %1418 ], [ %1651, %1422 ]
  %1426 = phi i8* [ %4, %1418 ], [ %1648, %1422 ]
  %1427 = phi i8* [ %1421, %1418 ], [ %1649, %1422 ]
  %1428 = phi i8* [ %5, %1418 ], [ %1650, %1422 ]
  %1429 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1424, i32 0
  %1430 = bitcast i8* %1428 to <4 x i8>*
  %1431 = load <4 x i8>, <4 x i8>* %1430, align 1
  %1432 = zext <4 x i8> %1431 to <4 x i32>
  %1433 = bitcast i8* %1426 to <4 x i8>*
  %1434 = load <4 x i8>, <4 x i8>* %1433, align 1
  %1435 = zext <4 x i8> %1434 to <4 x i32>
  %1436 = mul nuw nsw <4 x i32> %1435, %1432
  %1437 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1432
  %1438 = bitcast i8* %1427 to <4 x i8>*
  %1439 = load <4 x i8>, <4 x i8>* %1438, align 1
  %1440 = zext <4 x i8> %1439 to <4 x i32>
  %1441 = mul nsw <4 x i32> %1437, %1440
  %1442 = add nuw nsw <4 x i32> %1436, <i32 32, i32 32, i32 32, i32 32>
  %1443 = add nsw <4 x i32> %1442, %1441
  %1444 = ashr <4 x i32> %1443, <i32 6, i32 6, i32 6, i32 6>
  %1445 = bitcast i8* %1423 to <4 x i8>*
  %1446 = load <4 x i8>, <4 x i8>* %1445, align 1
  %1447 = zext <4 x i8> %1446 to <4 x i32>
  %1448 = sub nsw <4 x i32> %1444, %1447
  %1449 = icmp slt <4 x i32> %1448, zeroinitializer
  %1450 = sub nsw <4 x i32> zeroinitializer, %1448
  %1451 = select <4 x i1> %1449, <4 x i32> %1450, <4 x i32> %1448
  %1452 = add <4 x i32> %1451, %1429
  %1453 = getelementptr inbounds i8, i8* %1428, i64 4
  %1454 = bitcast i8* %1453 to <4 x i8>*
  %1455 = load <4 x i8>, <4 x i8>* %1454, align 1
  %1456 = zext <4 x i8> %1455 to <4 x i32>
  %1457 = getelementptr inbounds i8, i8* %1426, i64 4
  %1458 = bitcast i8* %1457 to <4 x i8>*
  %1459 = load <4 x i8>, <4 x i8>* %1458, align 1
  %1460 = zext <4 x i8> %1459 to <4 x i32>
  %1461 = mul nuw nsw <4 x i32> %1460, %1456
  %1462 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1456
  %1463 = getelementptr inbounds i8, i8* %1427, i64 4
  %1464 = bitcast i8* %1463 to <4 x i8>*
  %1465 = load <4 x i8>, <4 x i8>* %1464, align 1
  %1466 = zext <4 x i8> %1465 to <4 x i32>
  %1467 = mul nsw <4 x i32> %1462, %1466
  %1468 = add nuw nsw <4 x i32> %1461, <i32 32, i32 32, i32 32, i32 32>
  %1469 = add nsw <4 x i32> %1468, %1467
  %1470 = ashr <4 x i32> %1469, <i32 6, i32 6, i32 6, i32 6>
  %1471 = getelementptr inbounds i8, i8* %1423, i64 4
  %1472 = bitcast i8* %1471 to <4 x i8>*
  %1473 = load <4 x i8>, <4 x i8>* %1472, align 1
  %1474 = zext <4 x i8> %1473 to <4 x i32>
  %1475 = sub nsw <4 x i32> %1470, %1474
  %1476 = icmp slt <4 x i32> %1475, zeroinitializer
  %1477 = sub nsw <4 x i32> zeroinitializer, %1475
  %1478 = select <4 x i1> %1476, <4 x i32> %1477, <4 x i32> %1475
  %1479 = add <4 x i32> %1478, %1452
  %1480 = getelementptr inbounds i8, i8* %1428, i64 8
  %1481 = bitcast i8* %1480 to <4 x i8>*
  %1482 = load <4 x i8>, <4 x i8>* %1481, align 1
  %1483 = zext <4 x i8> %1482 to <4 x i32>
  %1484 = getelementptr inbounds i8, i8* %1426, i64 8
  %1485 = bitcast i8* %1484 to <4 x i8>*
  %1486 = load <4 x i8>, <4 x i8>* %1485, align 1
  %1487 = zext <4 x i8> %1486 to <4 x i32>
  %1488 = mul nuw nsw <4 x i32> %1487, %1483
  %1489 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1483
  %1490 = getelementptr inbounds i8, i8* %1427, i64 8
  %1491 = bitcast i8* %1490 to <4 x i8>*
  %1492 = load <4 x i8>, <4 x i8>* %1491, align 1
  %1493 = zext <4 x i8> %1492 to <4 x i32>
  %1494 = mul nsw <4 x i32> %1489, %1493
  %1495 = add nuw nsw <4 x i32> %1488, <i32 32, i32 32, i32 32, i32 32>
  %1496 = add nsw <4 x i32> %1495, %1494
  %1497 = ashr <4 x i32> %1496, <i32 6, i32 6, i32 6, i32 6>
  %1498 = getelementptr inbounds i8, i8* %1423, i64 8
  %1499 = bitcast i8* %1498 to <4 x i8>*
  %1500 = load <4 x i8>, <4 x i8>* %1499, align 1
  %1501 = zext <4 x i8> %1500 to <4 x i32>
  %1502 = sub nsw <4 x i32> %1497, %1501
  %1503 = icmp slt <4 x i32> %1502, zeroinitializer
  %1504 = sub nsw <4 x i32> zeroinitializer, %1502
  %1505 = select <4 x i1> %1503, <4 x i32> %1504, <4 x i32> %1502
  %1506 = add <4 x i32> %1505, %1479
  %1507 = getelementptr inbounds i8, i8* %1428, i64 12
  %1508 = bitcast i8* %1507 to <4 x i8>*
  %1509 = load <4 x i8>, <4 x i8>* %1508, align 1
  %1510 = zext <4 x i8> %1509 to <4 x i32>
  %1511 = getelementptr inbounds i8, i8* %1426, i64 12
  %1512 = bitcast i8* %1511 to <4 x i8>*
  %1513 = load <4 x i8>, <4 x i8>* %1512, align 1
  %1514 = zext <4 x i8> %1513 to <4 x i32>
  %1515 = mul nuw nsw <4 x i32> %1514, %1510
  %1516 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1510
  %1517 = getelementptr inbounds i8, i8* %1427, i64 12
  %1518 = bitcast i8* %1517 to <4 x i8>*
  %1519 = load <4 x i8>, <4 x i8>* %1518, align 1
  %1520 = zext <4 x i8> %1519 to <4 x i32>
  %1521 = mul nsw <4 x i32> %1516, %1520
  %1522 = add nuw nsw <4 x i32> %1515, <i32 32, i32 32, i32 32, i32 32>
  %1523 = add nsw <4 x i32> %1522, %1521
  %1524 = ashr <4 x i32> %1523, <i32 6, i32 6, i32 6, i32 6>
  %1525 = getelementptr inbounds i8, i8* %1423, i64 12
  %1526 = bitcast i8* %1525 to <4 x i8>*
  %1527 = load <4 x i8>, <4 x i8>* %1526, align 1
  %1528 = zext <4 x i8> %1527 to <4 x i32>
  %1529 = sub nsw <4 x i32> %1524, %1528
  %1530 = icmp slt <4 x i32> %1529, zeroinitializer
  %1531 = sub nsw <4 x i32> zeroinitializer, %1529
  %1532 = select <4 x i1> %1530, <4 x i32> %1531, <4 x i32> %1529
  %1533 = add <4 x i32> %1532, %1506
  %1534 = getelementptr inbounds i8, i8* %1428, i64 16
  %1535 = bitcast i8* %1534 to <4 x i8>*
  %1536 = load <4 x i8>, <4 x i8>* %1535, align 1
  %1537 = zext <4 x i8> %1536 to <4 x i32>
  %1538 = getelementptr inbounds i8, i8* %1426, i64 16
  %1539 = bitcast i8* %1538 to <4 x i8>*
  %1540 = load <4 x i8>, <4 x i8>* %1539, align 1
  %1541 = zext <4 x i8> %1540 to <4 x i32>
  %1542 = mul nuw nsw <4 x i32> %1541, %1537
  %1543 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1537
  %1544 = getelementptr inbounds i8, i8* %1427, i64 16
  %1545 = bitcast i8* %1544 to <4 x i8>*
  %1546 = load <4 x i8>, <4 x i8>* %1545, align 1
  %1547 = zext <4 x i8> %1546 to <4 x i32>
  %1548 = mul nsw <4 x i32> %1543, %1547
  %1549 = add nuw nsw <4 x i32> %1542, <i32 32, i32 32, i32 32, i32 32>
  %1550 = add nsw <4 x i32> %1549, %1548
  %1551 = ashr <4 x i32> %1550, <i32 6, i32 6, i32 6, i32 6>
  %1552 = getelementptr inbounds i8, i8* %1423, i64 16
  %1553 = bitcast i8* %1552 to <4 x i8>*
  %1554 = load <4 x i8>, <4 x i8>* %1553, align 1
  %1555 = zext <4 x i8> %1554 to <4 x i32>
  %1556 = sub nsw <4 x i32> %1551, %1555
  %1557 = icmp slt <4 x i32> %1556, zeroinitializer
  %1558 = sub nsw <4 x i32> zeroinitializer, %1556
  %1559 = select <4 x i1> %1557, <4 x i32> %1558, <4 x i32> %1556
  %1560 = add <4 x i32> %1559, %1533
  %1561 = getelementptr inbounds i8, i8* %1428, i64 20
  %1562 = bitcast i8* %1561 to <4 x i8>*
  %1563 = load <4 x i8>, <4 x i8>* %1562, align 1
  %1564 = zext <4 x i8> %1563 to <4 x i32>
  %1565 = getelementptr inbounds i8, i8* %1426, i64 20
  %1566 = bitcast i8* %1565 to <4 x i8>*
  %1567 = load <4 x i8>, <4 x i8>* %1566, align 1
  %1568 = zext <4 x i8> %1567 to <4 x i32>
  %1569 = mul nuw nsw <4 x i32> %1568, %1564
  %1570 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1564
  %1571 = getelementptr inbounds i8, i8* %1427, i64 20
  %1572 = bitcast i8* %1571 to <4 x i8>*
  %1573 = load <4 x i8>, <4 x i8>* %1572, align 1
  %1574 = zext <4 x i8> %1573 to <4 x i32>
  %1575 = mul nsw <4 x i32> %1570, %1574
  %1576 = add nuw nsw <4 x i32> %1569, <i32 32, i32 32, i32 32, i32 32>
  %1577 = add nsw <4 x i32> %1576, %1575
  %1578 = ashr <4 x i32> %1577, <i32 6, i32 6, i32 6, i32 6>
  %1579 = getelementptr inbounds i8, i8* %1423, i64 20
  %1580 = bitcast i8* %1579 to <4 x i8>*
  %1581 = load <4 x i8>, <4 x i8>* %1580, align 1
  %1582 = zext <4 x i8> %1581 to <4 x i32>
  %1583 = sub nsw <4 x i32> %1578, %1582
  %1584 = icmp slt <4 x i32> %1583, zeroinitializer
  %1585 = sub nsw <4 x i32> zeroinitializer, %1583
  %1586 = select <4 x i1> %1584, <4 x i32> %1585, <4 x i32> %1583
  %1587 = add <4 x i32> %1586, %1560
  %1588 = getelementptr inbounds i8, i8* %1428, i64 24
  %1589 = bitcast i8* %1588 to <4 x i8>*
  %1590 = load <4 x i8>, <4 x i8>* %1589, align 1
  %1591 = zext <4 x i8> %1590 to <4 x i32>
  %1592 = getelementptr inbounds i8, i8* %1426, i64 24
  %1593 = bitcast i8* %1592 to <4 x i8>*
  %1594 = load <4 x i8>, <4 x i8>* %1593, align 1
  %1595 = zext <4 x i8> %1594 to <4 x i32>
  %1596 = mul nuw nsw <4 x i32> %1595, %1591
  %1597 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1591
  %1598 = getelementptr inbounds i8, i8* %1427, i64 24
  %1599 = bitcast i8* %1598 to <4 x i8>*
  %1600 = load <4 x i8>, <4 x i8>* %1599, align 1
  %1601 = zext <4 x i8> %1600 to <4 x i32>
  %1602 = mul nsw <4 x i32> %1597, %1601
  %1603 = add nuw nsw <4 x i32> %1596, <i32 32, i32 32, i32 32, i32 32>
  %1604 = add nsw <4 x i32> %1603, %1602
  %1605 = ashr <4 x i32> %1604, <i32 6, i32 6, i32 6, i32 6>
  %1606 = getelementptr inbounds i8, i8* %1423, i64 24
  %1607 = bitcast i8* %1606 to <4 x i8>*
  %1608 = load <4 x i8>, <4 x i8>* %1607, align 1
  %1609 = zext <4 x i8> %1608 to <4 x i32>
  %1610 = sub nsw <4 x i32> %1605, %1609
  %1611 = icmp slt <4 x i32> %1610, zeroinitializer
  %1612 = sub nsw <4 x i32> zeroinitializer, %1610
  %1613 = select <4 x i1> %1611, <4 x i32> %1612, <4 x i32> %1610
  %1614 = add <4 x i32> %1613, %1587
  %1615 = getelementptr inbounds i8, i8* %1428, i64 28
  %1616 = bitcast i8* %1615 to <4 x i8>*
  %1617 = load <4 x i8>, <4 x i8>* %1616, align 1
  %1618 = zext <4 x i8> %1617 to <4 x i32>
  %1619 = getelementptr inbounds i8, i8* %1426, i64 28
  %1620 = bitcast i8* %1619 to <4 x i8>*
  %1621 = load <4 x i8>, <4 x i8>* %1620, align 1
  %1622 = zext <4 x i8> %1621 to <4 x i32>
  %1623 = mul nuw nsw <4 x i32> %1622, %1618
  %1624 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1618
  %1625 = getelementptr inbounds i8, i8* %1427, i64 28
  %1626 = bitcast i8* %1625 to <4 x i8>*
  %1627 = load <4 x i8>, <4 x i8>* %1626, align 1
  %1628 = zext <4 x i8> %1627 to <4 x i32>
  %1629 = mul nsw <4 x i32> %1624, %1628
  %1630 = add nuw nsw <4 x i32> %1623, <i32 32, i32 32, i32 32, i32 32>
  %1631 = add nsw <4 x i32> %1630, %1629
  %1632 = ashr <4 x i32> %1631, <i32 6, i32 6, i32 6, i32 6>
  %1633 = getelementptr inbounds i8, i8* %1423, i64 28
  %1634 = bitcast i8* %1633 to <4 x i8>*
  %1635 = load <4 x i8>, <4 x i8>* %1634, align 1
  %1636 = zext <4 x i8> %1635 to <4 x i32>
  %1637 = sub nsw <4 x i32> %1632, %1636
  %1638 = icmp slt <4 x i32> %1637, zeroinitializer
  %1639 = sub nsw <4 x i32> zeroinitializer, %1637
  %1640 = select <4 x i1> %1638, <4 x i32> %1639, <4 x i32> %1637
  %1641 = add <4 x i32> %1640, %1614
  %1642 = shufflevector <4 x i32> %1641, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1643 = add <4 x i32> %1641, %1642
  %1644 = shufflevector <4 x i32> %1643, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1645 = add <4 x i32> %1643, %1644
  %1646 = extractelement <4 x i32> %1645, i32 0
  %1647 = getelementptr inbounds i8, i8* %1423, i64 %11
  %1648 = getelementptr inbounds i8, i8* %1426, i64 32
  %1649 = getelementptr inbounds i8, i8* %1427, i64 %12
  %1650 = getelementptr inbounds i8, i8* %1428, i64 %13
  %1651 = add nuw nsw i32 %1425, 1
  %1652 = icmp eq i32 %1651, 32
  br i1 %1652, label %1653, label %1422

1653:                                             ; preds = %1422
  %1654 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %1646, i32* %1654, align 4
  %1655 = getelementptr inbounds i8*, i8** %2, i64 3
  %1656 = load i8*, i8** %1655, align 8
  br label %1657

1657:                                             ; preds = %1653, %1657
  %1658 = phi i8* [ %0, %1653 ], [ %1882, %1657 ]
  %1659 = phi i32 [ 0, %1653 ], [ %1881, %1657 ]
  %1660 = phi i32 [ 0, %1653 ], [ %1886, %1657 ]
  %1661 = phi i8* [ %4, %1653 ], [ %1883, %1657 ]
  %1662 = phi i8* [ %1656, %1653 ], [ %1884, %1657 ]
  %1663 = phi i8* [ %5, %1653 ], [ %1885, %1657 ]
  %1664 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1659, i32 0
  %1665 = bitcast i8* %1663 to <4 x i8>*
  %1666 = load <4 x i8>, <4 x i8>* %1665, align 1
  %1667 = zext <4 x i8> %1666 to <4 x i32>
  %1668 = bitcast i8* %1661 to <4 x i8>*
  %1669 = load <4 x i8>, <4 x i8>* %1668, align 1
  %1670 = zext <4 x i8> %1669 to <4 x i32>
  %1671 = mul nuw nsw <4 x i32> %1670, %1667
  %1672 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1667
  %1673 = bitcast i8* %1662 to <4 x i8>*
  %1674 = load <4 x i8>, <4 x i8>* %1673, align 1
  %1675 = zext <4 x i8> %1674 to <4 x i32>
  %1676 = mul nsw <4 x i32> %1672, %1675
  %1677 = add nuw nsw <4 x i32> %1671, <i32 32, i32 32, i32 32, i32 32>
  %1678 = add nsw <4 x i32> %1677, %1676
  %1679 = ashr <4 x i32> %1678, <i32 6, i32 6, i32 6, i32 6>
  %1680 = bitcast i8* %1658 to <4 x i8>*
  %1681 = load <4 x i8>, <4 x i8>* %1680, align 1
  %1682 = zext <4 x i8> %1681 to <4 x i32>
  %1683 = sub nsw <4 x i32> %1679, %1682
  %1684 = icmp slt <4 x i32> %1683, zeroinitializer
  %1685 = sub nsw <4 x i32> zeroinitializer, %1683
  %1686 = select <4 x i1> %1684, <4 x i32> %1685, <4 x i32> %1683
  %1687 = add <4 x i32> %1686, %1664
  %1688 = getelementptr inbounds i8, i8* %1663, i64 4
  %1689 = bitcast i8* %1688 to <4 x i8>*
  %1690 = load <4 x i8>, <4 x i8>* %1689, align 1
  %1691 = zext <4 x i8> %1690 to <4 x i32>
  %1692 = getelementptr inbounds i8, i8* %1661, i64 4
  %1693 = bitcast i8* %1692 to <4 x i8>*
  %1694 = load <4 x i8>, <4 x i8>* %1693, align 1
  %1695 = zext <4 x i8> %1694 to <4 x i32>
  %1696 = mul nuw nsw <4 x i32> %1695, %1691
  %1697 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1691
  %1698 = getelementptr inbounds i8, i8* %1662, i64 4
  %1699 = bitcast i8* %1698 to <4 x i8>*
  %1700 = load <4 x i8>, <4 x i8>* %1699, align 1
  %1701 = zext <4 x i8> %1700 to <4 x i32>
  %1702 = mul nsw <4 x i32> %1697, %1701
  %1703 = add nuw nsw <4 x i32> %1696, <i32 32, i32 32, i32 32, i32 32>
  %1704 = add nsw <4 x i32> %1703, %1702
  %1705 = ashr <4 x i32> %1704, <i32 6, i32 6, i32 6, i32 6>
  %1706 = getelementptr inbounds i8, i8* %1658, i64 4
  %1707 = bitcast i8* %1706 to <4 x i8>*
  %1708 = load <4 x i8>, <4 x i8>* %1707, align 1
  %1709 = zext <4 x i8> %1708 to <4 x i32>
  %1710 = sub nsw <4 x i32> %1705, %1709
  %1711 = icmp slt <4 x i32> %1710, zeroinitializer
  %1712 = sub nsw <4 x i32> zeroinitializer, %1710
  %1713 = select <4 x i1> %1711, <4 x i32> %1712, <4 x i32> %1710
  %1714 = add <4 x i32> %1713, %1687
  %1715 = getelementptr inbounds i8, i8* %1663, i64 8
  %1716 = bitcast i8* %1715 to <4 x i8>*
  %1717 = load <4 x i8>, <4 x i8>* %1716, align 1
  %1718 = zext <4 x i8> %1717 to <4 x i32>
  %1719 = getelementptr inbounds i8, i8* %1661, i64 8
  %1720 = bitcast i8* %1719 to <4 x i8>*
  %1721 = load <4 x i8>, <4 x i8>* %1720, align 1
  %1722 = zext <4 x i8> %1721 to <4 x i32>
  %1723 = mul nuw nsw <4 x i32> %1722, %1718
  %1724 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1718
  %1725 = getelementptr inbounds i8, i8* %1662, i64 8
  %1726 = bitcast i8* %1725 to <4 x i8>*
  %1727 = load <4 x i8>, <4 x i8>* %1726, align 1
  %1728 = zext <4 x i8> %1727 to <4 x i32>
  %1729 = mul nsw <4 x i32> %1724, %1728
  %1730 = add nuw nsw <4 x i32> %1723, <i32 32, i32 32, i32 32, i32 32>
  %1731 = add nsw <4 x i32> %1730, %1729
  %1732 = ashr <4 x i32> %1731, <i32 6, i32 6, i32 6, i32 6>
  %1733 = getelementptr inbounds i8, i8* %1658, i64 8
  %1734 = bitcast i8* %1733 to <4 x i8>*
  %1735 = load <4 x i8>, <4 x i8>* %1734, align 1
  %1736 = zext <4 x i8> %1735 to <4 x i32>
  %1737 = sub nsw <4 x i32> %1732, %1736
  %1738 = icmp slt <4 x i32> %1737, zeroinitializer
  %1739 = sub nsw <4 x i32> zeroinitializer, %1737
  %1740 = select <4 x i1> %1738, <4 x i32> %1739, <4 x i32> %1737
  %1741 = add <4 x i32> %1740, %1714
  %1742 = getelementptr inbounds i8, i8* %1663, i64 12
  %1743 = bitcast i8* %1742 to <4 x i8>*
  %1744 = load <4 x i8>, <4 x i8>* %1743, align 1
  %1745 = zext <4 x i8> %1744 to <4 x i32>
  %1746 = getelementptr inbounds i8, i8* %1661, i64 12
  %1747 = bitcast i8* %1746 to <4 x i8>*
  %1748 = load <4 x i8>, <4 x i8>* %1747, align 1
  %1749 = zext <4 x i8> %1748 to <4 x i32>
  %1750 = mul nuw nsw <4 x i32> %1749, %1745
  %1751 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1745
  %1752 = getelementptr inbounds i8, i8* %1662, i64 12
  %1753 = bitcast i8* %1752 to <4 x i8>*
  %1754 = load <4 x i8>, <4 x i8>* %1753, align 1
  %1755 = zext <4 x i8> %1754 to <4 x i32>
  %1756 = mul nsw <4 x i32> %1751, %1755
  %1757 = add nuw nsw <4 x i32> %1750, <i32 32, i32 32, i32 32, i32 32>
  %1758 = add nsw <4 x i32> %1757, %1756
  %1759 = ashr <4 x i32> %1758, <i32 6, i32 6, i32 6, i32 6>
  %1760 = getelementptr inbounds i8, i8* %1658, i64 12
  %1761 = bitcast i8* %1760 to <4 x i8>*
  %1762 = load <4 x i8>, <4 x i8>* %1761, align 1
  %1763 = zext <4 x i8> %1762 to <4 x i32>
  %1764 = sub nsw <4 x i32> %1759, %1763
  %1765 = icmp slt <4 x i32> %1764, zeroinitializer
  %1766 = sub nsw <4 x i32> zeroinitializer, %1764
  %1767 = select <4 x i1> %1765, <4 x i32> %1766, <4 x i32> %1764
  %1768 = add <4 x i32> %1767, %1741
  %1769 = getelementptr inbounds i8, i8* %1663, i64 16
  %1770 = bitcast i8* %1769 to <4 x i8>*
  %1771 = load <4 x i8>, <4 x i8>* %1770, align 1
  %1772 = zext <4 x i8> %1771 to <4 x i32>
  %1773 = getelementptr inbounds i8, i8* %1661, i64 16
  %1774 = bitcast i8* %1773 to <4 x i8>*
  %1775 = load <4 x i8>, <4 x i8>* %1774, align 1
  %1776 = zext <4 x i8> %1775 to <4 x i32>
  %1777 = mul nuw nsw <4 x i32> %1776, %1772
  %1778 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1772
  %1779 = getelementptr inbounds i8, i8* %1662, i64 16
  %1780 = bitcast i8* %1779 to <4 x i8>*
  %1781 = load <4 x i8>, <4 x i8>* %1780, align 1
  %1782 = zext <4 x i8> %1781 to <4 x i32>
  %1783 = mul nsw <4 x i32> %1778, %1782
  %1784 = add nuw nsw <4 x i32> %1777, <i32 32, i32 32, i32 32, i32 32>
  %1785 = add nsw <4 x i32> %1784, %1783
  %1786 = ashr <4 x i32> %1785, <i32 6, i32 6, i32 6, i32 6>
  %1787 = getelementptr inbounds i8, i8* %1658, i64 16
  %1788 = bitcast i8* %1787 to <4 x i8>*
  %1789 = load <4 x i8>, <4 x i8>* %1788, align 1
  %1790 = zext <4 x i8> %1789 to <4 x i32>
  %1791 = sub nsw <4 x i32> %1786, %1790
  %1792 = icmp slt <4 x i32> %1791, zeroinitializer
  %1793 = sub nsw <4 x i32> zeroinitializer, %1791
  %1794 = select <4 x i1> %1792, <4 x i32> %1793, <4 x i32> %1791
  %1795 = add <4 x i32> %1794, %1768
  %1796 = getelementptr inbounds i8, i8* %1663, i64 20
  %1797 = bitcast i8* %1796 to <4 x i8>*
  %1798 = load <4 x i8>, <4 x i8>* %1797, align 1
  %1799 = zext <4 x i8> %1798 to <4 x i32>
  %1800 = getelementptr inbounds i8, i8* %1661, i64 20
  %1801 = bitcast i8* %1800 to <4 x i8>*
  %1802 = load <4 x i8>, <4 x i8>* %1801, align 1
  %1803 = zext <4 x i8> %1802 to <4 x i32>
  %1804 = mul nuw nsw <4 x i32> %1803, %1799
  %1805 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1799
  %1806 = getelementptr inbounds i8, i8* %1662, i64 20
  %1807 = bitcast i8* %1806 to <4 x i8>*
  %1808 = load <4 x i8>, <4 x i8>* %1807, align 1
  %1809 = zext <4 x i8> %1808 to <4 x i32>
  %1810 = mul nsw <4 x i32> %1805, %1809
  %1811 = add nuw nsw <4 x i32> %1804, <i32 32, i32 32, i32 32, i32 32>
  %1812 = add nsw <4 x i32> %1811, %1810
  %1813 = ashr <4 x i32> %1812, <i32 6, i32 6, i32 6, i32 6>
  %1814 = getelementptr inbounds i8, i8* %1658, i64 20
  %1815 = bitcast i8* %1814 to <4 x i8>*
  %1816 = load <4 x i8>, <4 x i8>* %1815, align 1
  %1817 = zext <4 x i8> %1816 to <4 x i32>
  %1818 = sub nsw <4 x i32> %1813, %1817
  %1819 = icmp slt <4 x i32> %1818, zeroinitializer
  %1820 = sub nsw <4 x i32> zeroinitializer, %1818
  %1821 = select <4 x i1> %1819, <4 x i32> %1820, <4 x i32> %1818
  %1822 = add <4 x i32> %1821, %1795
  %1823 = getelementptr inbounds i8, i8* %1663, i64 24
  %1824 = bitcast i8* %1823 to <4 x i8>*
  %1825 = load <4 x i8>, <4 x i8>* %1824, align 1
  %1826 = zext <4 x i8> %1825 to <4 x i32>
  %1827 = getelementptr inbounds i8, i8* %1661, i64 24
  %1828 = bitcast i8* %1827 to <4 x i8>*
  %1829 = load <4 x i8>, <4 x i8>* %1828, align 1
  %1830 = zext <4 x i8> %1829 to <4 x i32>
  %1831 = mul nuw nsw <4 x i32> %1830, %1826
  %1832 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1826
  %1833 = getelementptr inbounds i8, i8* %1662, i64 24
  %1834 = bitcast i8* %1833 to <4 x i8>*
  %1835 = load <4 x i8>, <4 x i8>* %1834, align 1
  %1836 = zext <4 x i8> %1835 to <4 x i32>
  %1837 = mul nsw <4 x i32> %1832, %1836
  %1838 = add nuw nsw <4 x i32> %1831, <i32 32, i32 32, i32 32, i32 32>
  %1839 = add nsw <4 x i32> %1838, %1837
  %1840 = ashr <4 x i32> %1839, <i32 6, i32 6, i32 6, i32 6>
  %1841 = getelementptr inbounds i8, i8* %1658, i64 24
  %1842 = bitcast i8* %1841 to <4 x i8>*
  %1843 = load <4 x i8>, <4 x i8>* %1842, align 1
  %1844 = zext <4 x i8> %1843 to <4 x i32>
  %1845 = sub nsw <4 x i32> %1840, %1844
  %1846 = icmp slt <4 x i32> %1845, zeroinitializer
  %1847 = sub nsw <4 x i32> zeroinitializer, %1845
  %1848 = select <4 x i1> %1846, <4 x i32> %1847, <4 x i32> %1845
  %1849 = add <4 x i32> %1848, %1822
  %1850 = getelementptr inbounds i8, i8* %1663, i64 28
  %1851 = bitcast i8* %1850 to <4 x i8>*
  %1852 = load <4 x i8>, <4 x i8>* %1851, align 1
  %1853 = zext <4 x i8> %1852 to <4 x i32>
  %1854 = getelementptr inbounds i8, i8* %1661, i64 28
  %1855 = bitcast i8* %1854 to <4 x i8>*
  %1856 = load <4 x i8>, <4 x i8>* %1855, align 1
  %1857 = zext <4 x i8> %1856 to <4 x i32>
  %1858 = mul nuw nsw <4 x i32> %1857, %1853
  %1859 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1853
  %1860 = getelementptr inbounds i8, i8* %1662, i64 28
  %1861 = bitcast i8* %1860 to <4 x i8>*
  %1862 = load <4 x i8>, <4 x i8>* %1861, align 1
  %1863 = zext <4 x i8> %1862 to <4 x i32>
  %1864 = mul nsw <4 x i32> %1859, %1863
  %1865 = add nuw nsw <4 x i32> %1858, <i32 32, i32 32, i32 32, i32 32>
  %1866 = add nsw <4 x i32> %1865, %1864
  %1867 = ashr <4 x i32> %1866, <i32 6, i32 6, i32 6, i32 6>
  %1868 = getelementptr inbounds i8, i8* %1658, i64 28
  %1869 = bitcast i8* %1868 to <4 x i8>*
  %1870 = load <4 x i8>, <4 x i8>* %1869, align 1
  %1871 = zext <4 x i8> %1870 to <4 x i32>
  %1872 = sub nsw <4 x i32> %1867, %1871
  %1873 = icmp slt <4 x i32> %1872, zeroinitializer
  %1874 = sub nsw <4 x i32> zeroinitializer, %1872
  %1875 = select <4 x i1> %1873, <4 x i32> %1874, <4 x i32> %1872
  %1876 = add <4 x i32> %1875, %1849
  %1877 = shufflevector <4 x i32> %1876, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1878 = add <4 x i32> %1876, %1877
  %1879 = shufflevector <4 x i32> %1878, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1880 = add <4 x i32> %1878, %1879
  %1881 = extractelement <4 x i32> %1880, i32 0
  %1882 = getelementptr inbounds i8, i8* %1658, i64 %11
  %1883 = getelementptr inbounds i8, i8* %1661, i64 32
  %1884 = getelementptr inbounds i8, i8* %1662, i64 %12
  %1885 = getelementptr inbounds i8, i8* %1663, i64 %13
  %1886 = add nuw nsw i32 %1660, 1
  %1887 = icmp eq i32 %1886, 32
  br i1 %1887, label %483, label %1657
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %244

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %238, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %237, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %242, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %239, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %240, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %241, %13 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %21 = bitcast i8* %19 to <4 x i8>*
  %22 = load <4 x i8>, <4 x i8>* %21, align 1
  %23 = zext <4 x i8> %22 to <4 x i32>
  %24 = bitcast i8* %17 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1
  %26 = zext <4 x i8> %25 to <4 x i32>
  %27 = mul nuw nsw <4 x i32> %26, %23
  %28 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %23
  %29 = bitcast i8* %18 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nsw <4 x i32> %28, %31
  %33 = add nuw nsw <4 x i32> %27, <i32 32, i32 32, i32 32, i32 32>
  %34 = add nsw <4 x i32> %33, %32
  %35 = ashr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %36 = bitcast i8* %14 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = zext <4 x i8> %37 to <4 x i32>
  %39 = sub nsw <4 x i32> %35, %38
  %40 = icmp slt <4 x i32> %39, zeroinitializer
  %41 = sub nsw <4 x i32> zeroinitializer, %39
  %42 = select <4 x i1> %40, <4 x i32> %41, <4 x i32> %39
  %43 = add <4 x i32> %42, %20
  %44 = getelementptr inbounds i8, i8* %19, i64 4
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = getelementptr inbounds i8, i8* %17, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %50 to <4 x i32>
  %52 = mul nuw nsw <4 x i32> %51, %47
  %53 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %47
  %54 = getelementptr inbounds i8, i8* %18, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = mul nsw <4 x i32> %53, %57
  %59 = add nuw nsw <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %60 = add nsw <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %62 = getelementptr inbounds i8, i8* %14, i64 4
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = sub nsw <4 x i32> %61, %65
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add <4 x i32> %69, %43
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = zext <4 x i8> %73 to <4 x i32>
  %75 = getelementptr inbounds i8, i8* %17, i64 8
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = mul nuw nsw <4 x i32> %78, %74
  %80 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %74
  %81 = getelementptr inbounds i8, i8* %18, i64 8
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = mul nsw <4 x i32> %80, %84
  %86 = add nuw nsw <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %87 = add nsw <4 x i32> %86, %85
  %88 = ashr <4 x i32> %87, <i32 6, i32 6, i32 6, i32 6>
  %89 = getelementptr inbounds i8, i8* %14, i64 8
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = sub nsw <4 x i32> %88, %92
  %94 = icmp slt <4 x i32> %93, zeroinitializer
  %95 = sub nsw <4 x i32> zeroinitializer, %93
  %96 = select <4 x i1> %94, <4 x i32> %95, <4 x i32> %93
  %97 = add <4 x i32> %96, %70
  %98 = getelementptr inbounds i8, i8* %19, i64 12
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = getelementptr inbounds i8, i8* %17, i64 12
  %103 = bitcast i8* %102 to <4 x i8>*
  %104 = load <4 x i8>, <4 x i8>* %103, align 1
  %105 = zext <4 x i8> %104 to <4 x i32>
  %106 = mul nuw nsw <4 x i32> %105, %101
  %107 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %101
  %108 = getelementptr inbounds i8, i8* %18, i64 12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = mul nsw <4 x i32> %107, %111
  %113 = add nuw nsw <4 x i32> %106, <i32 32, i32 32, i32 32, i32 32>
  %114 = add nsw <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = getelementptr inbounds i8, i8* %14, i64 12
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = sub nsw <4 x i32> %115, %119
  %121 = icmp slt <4 x i32> %120, zeroinitializer
  %122 = sub nsw <4 x i32> zeroinitializer, %120
  %123 = select <4 x i1> %121, <4 x i32> %122, <4 x i32> %120
  %124 = add <4 x i32> %123, %97
  %125 = getelementptr inbounds i8, i8* %19, i64 16
  %126 = bitcast i8* %125 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1
  %128 = zext <4 x i8> %127 to <4 x i32>
  %129 = getelementptr inbounds i8, i8* %17, i64 16
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1
  %132 = zext <4 x i8> %131 to <4 x i32>
  %133 = mul nuw nsw <4 x i32> %132, %128
  %134 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %128
  %135 = getelementptr inbounds i8, i8* %18, i64 16
  %136 = bitcast i8* %135 to <4 x i8>*
  %137 = load <4 x i8>, <4 x i8>* %136, align 1
  %138 = zext <4 x i8> %137 to <4 x i32>
  %139 = mul nsw <4 x i32> %134, %138
  %140 = add nuw nsw <4 x i32> %133, <i32 32, i32 32, i32 32, i32 32>
  %141 = add nsw <4 x i32> %140, %139
  %142 = ashr <4 x i32> %141, <i32 6, i32 6, i32 6, i32 6>
  %143 = getelementptr inbounds i8, i8* %14, i64 16
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = sub nsw <4 x i32> %142, %146
  %148 = icmp slt <4 x i32> %147, zeroinitializer
  %149 = sub nsw <4 x i32> zeroinitializer, %147
  %150 = select <4 x i1> %148, <4 x i32> %149, <4 x i32> %147
  %151 = add <4 x i32> %150, %124
  %152 = getelementptr inbounds i8, i8* %19, i64 20
  %153 = bitcast i8* %152 to <4 x i8>*
  %154 = load <4 x i8>, <4 x i8>* %153, align 1
  %155 = zext <4 x i8> %154 to <4 x i32>
  %156 = getelementptr inbounds i8, i8* %17, i64 20
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = zext <4 x i8> %158 to <4 x i32>
  %160 = mul nuw nsw <4 x i32> %159, %155
  %161 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %155
  %162 = getelementptr inbounds i8, i8* %18, i64 20
  %163 = bitcast i8* %162 to <4 x i8>*
  %164 = load <4 x i8>, <4 x i8>* %163, align 1
  %165 = zext <4 x i8> %164 to <4 x i32>
  %166 = mul nsw <4 x i32> %161, %165
  %167 = add nuw nsw <4 x i32> %160, <i32 32, i32 32, i32 32, i32 32>
  %168 = add nsw <4 x i32> %167, %166
  %169 = ashr <4 x i32> %168, <i32 6, i32 6, i32 6, i32 6>
  %170 = getelementptr inbounds i8, i8* %14, i64 20
  %171 = bitcast i8* %170 to <4 x i8>*
  %172 = load <4 x i8>, <4 x i8>* %171, align 1
  %173 = zext <4 x i8> %172 to <4 x i32>
  %174 = sub nsw <4 x i32> %169, %173
  %175 = icmp slt <4 x i32> %174, zeroinitializer
  %176 = sub nsw <4 x i32> zeroinitializer, %174
  %177 = select <4 x i1> %175, <4 x i32> %176, <4 x i32> %174
  %178 = add <4 x i32> %177, %151
  %179 = getelementptr inbounds i8, i8* %19, i64 24
  %180 = bitcast i8* %179 to <4 x i8>*
  %181 = load <4 x i8>, <4 x i8>* %180, align 1
  %182 = zext <4 x i8> %181 to <4 x i32>
  %183 = getelementptr inbounds i8, i8* %17, i64 24
  %184 = bitcast i8* %183 to <4 x i8>*
  %185 = load <4 x i8>, <4 x i8>* %184, align 1
  %186 = zext <4 x i8> %185 to <4 x i32>
  %187 = mul nuw nsw <4 x i32> %186, %182
  %188 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %182
  %189 = getelementptr inbounds i8, i8* %18, i64 24
  %190 = bitcast i8* %189 to <4 x i8>*
  %191 = load <4 x i8>, <4 x i8>* %190, align 1
  %192 = zext <4 x i8> %191 to <4 x i32>
  %193 = mul nsw <4 x i32> %188, %192
  %194 = add nuw nsw <4 x i32> %187, <i32 32, i32 32, i32 32, i32 32>
  %195 = add nsw <4 x i32> %194, %193
  %196 = ashr <4 x i32> %195, <i32 6, i32 6, i32 6, i32 6>
  %197 = getelementptr inbounds i8, i8* %14, i64 24
  %198 = bitcast i8* %197 to <4 x i8>*
  %199 = load <4 x i8>, <4 x i8>* %198, align 1
  %200 = zext <4 x i8> %199 to <4 x i32>
  %201 = sub nsw <4 x i32> %196, %200
  %202 = icmp slt <4 x i32> %201, zeroinitializer
  %203 = sub nsw <4 x i32> zeroinitializer, %201
  %204 = select <4 x i1> %202, <4 x i32> %203, <4 x i32> %201
  %205 = add <4 x i32> %204, %178
  %206 = getelementptr inbounds i8, i8* %19, i64 28
  %207 = bitcast i8* %206 to <4 x i8>*
  %208 = load <4 x i8>, <4 x i8>* %207, align 1
  %209 = zext <4 x i8> %208 to <4 x i32>
  %210 = getelementptr inbounds i8, i8* %17, i64 28
  %211 = bitcast i8* %210 to <4 x i8>*
  %212 = load <4 x i8>, <4 x i8>* %211, align 1
  %213 = zext <4 x i8> %212 to <4 x i32>
  %214 = mul nuw nsw <4 x i32> %213, %209
  %215 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %209
  %216 = getelementptr inbounds i8, i8* %18, i64 28
  %217 = bitcast i8* %216 to <4 x i8>*
  %218 = load <4 x i8>, <4 x i8>* %217, align 1
  %219 = zext <4 x i8> %218 to <4 x i32>
  %220 = mul nsw <4 x i32> %215, %219
  %221 = add nuw nsw <4 x i32> %214, <i32 32, i32 32, i32 32, i32 32>
  %222 = add nsw <4 x i32> %221, %220
  %223 = ashr <4 x i32> %222, <i32 6, i32 6, i32 6, i32 6>
  %224 = getelementptr inbounds i8, i8* %14, i64 28
  %225 = bitcast i8* %224 to <4 x i8>*
  %226 = load <4 x i8>, <4 x i8>* %225, align 1
  %227 = zext <4 x i8> %226 to <4 x i32>
  %228 = sub nsw <4 x i32> %223, %227
  %229 = icmp slt <4 x i32> %228, zeroinitializer
  %230 = sub nsw <4 x i32> zeroinitializer, %228
  %231 = select <4 x i1> %229, <4 x i32> %230, <4 x i32> %228
  %232 = add <4 x i32> %231, %205
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %234 = add <4 x i32> %232, %233
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %236 = add <4 x i32> %234, %235
  %237 = extractelement <4 x i32> %236, i32 0
  %238 = getelementptr inbounds i8, i8* %14, i64 %10
  %239 = getelementptr inbounds i8, i8* %17, i64 %11
  %240 = getelementptr inbounds i8, i8* %18, i64 32
  %241 = getelementptr inbounds i8, i8* %19, i64 %12
  %242 = add nuw nsw i32 %16, 1
  %243 = icmp eq i32 %242, 16
  br i1 %243, label %475, label %13

244:                                              ; preds = %8, %244
  %245 = phi i8* [ %469, %244 ], [ %0, %8 ]
  %246 = phi i32 [ %468, %244 ], [ 0, %8 ]
  %247 = phi i32 [ %473, %244 ], [ 0, %8 ]
  %248 = phi i8* [ %470, %244 ], [ %4, %8 ]
  %249 = phi i8* [ %471, %244 ], [ %2, %8 ]
  %250 = phi i8* [ %472, %244 ], [ %5, %8 ]
  %251 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %246, i32 0
  %252 = bitcast i8* %250 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = bitcast i8* %248 to <4 x i8>*
  %256 = load <4 x i8>, <4 x i8>* %255, align 1
  %257 = zext <4 x i8> %256 to <4 x i32>
  %258 = mul nuw nsw <4 x i32> %257, %254
  %259 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %254
  %260 = bitcast i8* %249 to <4 x i8>*
  %261 = load <4 x i8>, <4 x i8>* %260, align 1
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = mul nsw <4 x i32> %259, %262
  %264 = add nuw nsw <4 x i32> %258, <i32 32, i32 32, i32 32, i32 32>
  %265 = add nsw <4 x i32> %264, %263
  %266 = ashr <4 x i32> %265, <i32 6, i32 6, i32 6, i32 6>
  %267 = bitcast i8* %245 to <4 x i8>*
  %268 = load <4 x i8>, <4 x i8>* %267, align 1
  %269 = zext <4 x i8> %268 to <4 x i32>
  %270 = sub nsw <4 x i32> %266, %269
  %271 = icmp slt <4 x i32> %270, zeroinitializer
  %272 = sub nsw <4 x i32> zeroinitializer, %270
  %273 = select <4 x i1> %271, <4 x i32> %272, <4 x i32> %270
  %274 = add <4 x i32> %273, %251
  %275 = getelementptr inbounds i8, i8* %250, i64 4
  %276 = bitcast i8* %275 to <4 x i8>*
  %277 = load <4 x i8>, <4 x i8>* %276, align 1
  %278 = zext <4 x i8> %277 to <4 x i32>
  %279 = getelementptr inbounds i8, i8* %248, i64 4
  %280 = bitcast i8* %279 to <4 x i8>*
  %281 = load <4 x i8>, <4 x i8>* %280, align 1
  %282 = zext <4 x i8> %281 to <4 x i32>
  %283 = mul nuw nsw <4 x i32> %282, %278
  %284 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %278
  %285 = getelementptr inbounds i8, i8* %249, i64 4
  %286 = bitcast i8* %285 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 1
  %288 = zext <4 x i8> %287 to <4 x i32>
  %289 = mul nsw <4 x i32> %284, %288
  %290 = add nuw nsw <4 x i32> %283, <i32 32, i32 32, i32 32, i32 32>
  %291 = add nsw <4 x i32> %290, %289
  %292 = ashr <4 x i32> %291, <i32 6, i32 6, i32 6, i32 6>
  %293 = getelementptr inbounds i8, i8* %245, i64 4
  %294 = bitcast i8* %293 to <4 x i8>*
  %295 = load <4 x i8>, <4 x i8>* %294, align 1
  %296 = zext <4 x i8> %295 to <4 x i32>
  %297 = sub nsw <4 x i32> %292, %296
  %298 = icmp slt <4 x i32> %297, zeroinitializer
  %299 = sub nsw <4 x i32> zeroinitializer, %297
  %300 = select <4 x i1> %298, <4 x i32> %299, <4 x i32> %297
  %301 = add <4 x i32> %300, %274
  %302 = getelementptr inbounds i8, i8* %250, i64 8
  %303 = bitcast i8* %302 to <4 x i8>*
  %304 = load <4 x i8>, <4 x i8>* %303, align 1
  %305 = zext <4 x i8> %304 to <4 x i32>
  %306 = getelementptr inbounds i8, i8* %248, i64 8
  %307 = bitcast i8* %306 to <4 x i8>*
  %308 = load <4 x i8>, <4 x i8>* %307, align 1
  %309 = zext <4 x i8> %308 to <4 x i32>
  %310 = mul nuw nsw <4 x i32> %309, %305
  %311 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %305
  %312 = getelementptr inbounds i8, i8* %249, i64 8
  %313 = bitcast i8* %312 to <4 x i8>*
  %314 = load <4 x i8>, <4 x i8>* %313, align 1
  %315 = zext <4 x i8> %314 to <4 x i32>
  %316 = mul nsw <4 x i32> %311, %315
  %317 = add nuw nsw <4 x i32> %310, <i32 32, i32 32, i32 32, i32 32>
  %318 = add nsw <4 x i32> %317, %316
  %319 = ashr <4 x i32> %318, <i32 6, i32 6, i32 6, i32 6>
  %320 = getelementptr inbounds i8, i8* %245, i64 8
  %321 = bitcast i8* %320 to <4 x i8>*
  %322 = load <4 x i8>, <4 x i8>* %321, align 1
  %323 = zext <4 x i8> %322 to <4 x i32>
  %324 = sub nsw <4 x i32> %319, %323
  %325 = icmp slt <4 x i32> %324, zeroinitializer
  %326 = sub nsw <4 x i32> zeroinitializer, %324
  %327 = select <4 x i1> %325, <4 x i32> %326, <4 x i32> %324
  %328 = add <4 x i32> %327, %301
  %329 = getelementptr inbounds i8, i8* %250, i64 12
  %330 = bitcast i8* %329 to <4 x i8>*
  %331 = load <4 x i8>, <4 x i8>* %330, align 1
  %332 = zext <4 x i8> %331 to <4 x i32>
  %333 = getelementptr inbounds i8, i8* %248, i64 12
  %334 = bitcast i8* %333 to <4 x i8>*
  %335 = load <4 x i8>, <4 x i8>* %334, align 1
  %336 = zext <4 x i8> %335 to <4 x i32>
  %337 = mul nuw nsw <4 x i32> %336, %332
  %338 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %332
  %339 = getelementptr inbounds i8, i8* %249, i64 12
  %340 = bitcast i8* %339 to <4 x i8>*
  %341 = load <4 x i8>, <4 x i8>* %340, align 1
  %342 = zext <4 x i8> %341 to <4 x i32>
  %343 = mul nsw <4 x i32> %338, %342
  %344 = add nuw nsw <4 x i32> %337, <i32 32, i32 32, i32 32, i32 32>
  %345 = add nsw <4 x i32> %344, %343
  %346 = ashr <4 x i32> %345, <i32 6, i32 6, i32 6, i32 6>
  %347 = getelementptr inbounds i8, i8* %245, i64 12
  %348 = bitcast i8* %347 to <4 x i8>*
  %349 = load <4 x i8>, <4 x i8>* %348, align 1
  %350 = zext <4 x i8> %349 to <4 x i32>
  %351 = sub nsw <4 x i32> %346, %350
  %352 = icmp slt <4 x i32> %351, zeroinitializer
  %353 = sub nsw <4 x i32> zeroinitializer, %351
  %354 = select <4 x i1> %352, <4 x i32> %353, <4 x i32> %351
  %355 = add <4 x i32> %354, %328
  %356 = getelementptr inbounds i8, i8* %250, i64 16
  %357 = bitcast i8* %356 to <4 x i8>*
  %358 = load <4 x i8>, <4 x i8>* %357, align 1
  %359 = zext <4 x i8> %358 to <4 x i32>
  %360 = getelementptr inbounds i8, i8* %248, i64 16
  %361 = bitcast i8* %360 to <4 x i8>*
  %362 = load <4 x i8>, <4 x i8>* %361, align 1
  %363 = zext <4 x i8> %362 to <4 x i32>
  %364 = mul nuw nsw <4 x i32> %363, %359
  %365 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %359
  %366 = getelementptr inbounds i8, i8* %249, i64 16
  %367 = bitcast i8* %366 to <4 x i8>*
  %368 = load <4 x i8>, <4 x i8>* %367, align 1
  %369 = zext <4 x i8> %368 to <4 x i32>
  %370 = mul nsw <4 x i32> %365, %369
  %371 = add nuw nsw <4 x i32> %364, <i32 32, i32 32, i32 32, i32 32>
  %372 = add nsw <4 x i32> %371, %370
  %373 = ashr <4 x i32> %372, <i32 6, i32 6, i32 6, i32 6>
  %374 = getelementptr inbounds i8, i8* %245, i64 16
  %375 = bitcast i8* %374 to <4 x i8>*
  %376 = load <4 x i8>, <4 x i8>* %375, align 1
  %377 = zext <4 x i8> %376 to <4 x i32>
  %378 = sub nsw <4 x i32> %373, %377
  %379 = icmp slt <4 x i32> %378, zeroinitializer
  %380 = sub nsw <4 x i32> zeroinitializer, %378
  %381 = select <4 x i1> %379, <4 x i32> %380, <4 x i32> %378
  %382 = add <4 x i32> %381, %355
  %383 = getelementptr inbounds i8, i8* %250, i64 20
  %384 = bitcast i8* %383 to <4 x i8>*
  %385 = load <4 x i8>, <4 x i8>* %384, align 1
  %386 = zext <4 x i8> %385 to <4 x i32>
  %387 = getelementptr inbounds i8, i8* %248, i64 20
  %388 = bitcast i8* %387 to <4 x i8>*
  %389 = load <4 x i8>, <4 x i8>* %388, align 1
  %390 = zext <4 x i8> %389 to <4 x i32>
  %391 = mul nuw nsw <4 x i32> %390, %386
  %392 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %386
  %393 = getelementptr inbounds i8, i8* %249, i64 20
  %394 = bitcast i8* %393 to <4 x i8>*
  %395 = load <4 x i8>, <4 x i8>* %394, align 1
  %396 = zext <4 x i8> %395 to <4 x i32>
  %397 = mul nsw <4 x i32> %392, %396
  %398 = add nuw nsw <4 x i32> %391, <i32 32, i32 32, i32 32, i32 32>
  %399 = add nsw <4 x i32> %398, %397
  %400 = ashr <4 x i32> %399, <i32 6, i32 6, i32 6, i32 6>
  %401 = getelementptr inbounds i8, i8* %245, i64 20
  %402 = bitcast i8* %401 to <4 x i8>*
  %403 = load <4 x i8>, <4 x i8>* %402, align 1
  %404 = zext <4 x i8> %403 to <4 x i32>
  %405 = sub nsw <4 x i32> %400, %404
  %406 = icmp slt <4 x i32> %405, zeroinitializer
  %407 = sub nsw <4 x i32> zeroinitializer, %405
  %408 = select <4 x i1> %406, <4 x i32> %407, <4 x i32> %405
  %409 = add <4 x i32> %408, %382
  %410 = getelementptr inbounds i8, i8* %250, i64 24
  %411 = bitcast i8* %410 to <4 x i8>*
  %412 = load <4 x i8>, <4 x i8>* %411, align 1
  %413 = zext <4 x i8> %412 to <4 x i32>
  %414 = getelementptr inbounds i8, i8* %248, i64 24
  %415 = bitcast i8* %414 to <4 x i8>*
  %416 = load <4 x i8>, <4 x i8>* %415, align 1
  %417 = zext <4 x i8> %416 to <4 x i32>
  %418 = mul nuw nsw <4 x i32> %417, %413
  %419 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %413
  %420 = getelementptr inbounds i8, i8* %249, i64 24
  %421 = bitcast i8* %420 to <4 x i8>*
  %422 = load <4 x i8>, <4 x i8>* %421, align 1
  %423 = zext <4 x i8> %422 to <4 x i32>
  %424 = mul nsw <4 x i32> %419, %423
  %425 = add nuw nsw <4 x i32> %418, <i32 32, i32 32, i32 32, i32 32>
  %426 = add nsw <4 x i32> %425, %424
  %427 = ashr <4 x i32> %426, <i32 6, i32 6, i32 6, i32 6>
  %428 = getelementptr inbounds i8, i8* %245, i64 24
  %429 = bitcast i8* %428 to <4 x i8>*
  %430 = load <4 x i8>, <4 x i8>* %429, align 1
  %431 = zext <4 x i8> %430 to <4 x i32>
  %432 = sub nsw <4 x i32> %427, %431
  %433 = icmp slt <4 x i32> %432, zeroinitializer
  %434 = sub nsw <4 x i32> zeroinitializer, %432
  %435 = select <4 x i1> %433, <4 x i32> %434, <4 x i32> %432
  %436 = add <4 x i32> %435, %409
  %437 = getelementptr inbounds i8, i8* %250, i64 28
  %438 = bitcast i8* %437 to <4 x i8>*
  %439 = load <4 x i8>, <4 x i8>* %438, align 1
  %440 = zext <4 x i8> %439 to <4 x i32>
  %441 = getelementptr inbounds i8, i8* %248, i64 28
  %442 = bitcast i8* %441 to <4 x i8>*
  %443 = load <4 x i8>, <4 x i8>* %442, align 1
  %444 = zext <4 x i8> %443 to <4 x i32>
  %445 = mul nuw nsw <4 x i32> %444, %440
  %446 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %440
  %447 = getelementptr inbounds i8, i8* %249, i64 28
  %448 = bitcast i8* %447 to <4 x i8>*
  %449 = load <4 x i8>, <4 x i8>* %448, align 1
  %450 = zext <4 x i8> %449 to <4 x i32>
  %451 = mul nsw <4 x i32> %446, %450
  %452 = add nuw nsw <4 x i32> %445, <i32 32, i32 32, i32 32, i32 32>
  %453 = add nsw <4 x i32> %452, %451
  %454 = ashr <4 x i32> %453, <i32 6, i32 6, i32 6, i32 6>
  %455 = getelementptr inbounds i8, i8* %245, i64 28
  %456 = bitcast i8* %455 to <4 x i8>*
  %457 = load <4 x i8>, <4 x i8>* %456, align 1
  %458 = zext <4 x i8> %457 to <4 x i32>
  %459 = sub nsw <4 x i32> %454, %458
  %460 = icmp slt <4 x i32> %459, zeroinitializer
  %461 = sub nsw <4 x i32> zeroinitializer, %459
  %462 = select <4 x i1> %460, <4 x i32> %461, <4 x i32> %459
  %463 = add <4 x i32> %462, %436
  %464 = shufflevector <4 x i32> %463, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %465 = add <4 x i32> %463, %464
  %466 = shufflevector <4 x i32> %465, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %467 = add <4 x i32> %465, %466
  %468 = extractelement <4 x i32> %467, i32 0
  %469 = getelementptr inbounds i8, i8* %245, i64 %10
  %470 = getelementptr inbounds i8, i8* %248, i64 32
  %471 = getelementptr inbounds i8, i8* %249, i64 %11
  %472 = getelementptr inbounds i8, i8* %250, i64 %12
  %473 = add nuw nsw i32 %247, 1
  %474 = icmp eq i32 %473, 16
  br i1 %474, label %475, label %244

475:                                              ; preds = %244, %13
  %476 = phi i32 [ %237, %13 ], [ %468, %244 ]
  ret i32 %476
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad32x16x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %249

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %240, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %239, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %244, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %241, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %242, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %243, %15 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %23 = bitcast i8* %21 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = bitcast i8* %19 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = zext <4 x i8> %27 to <4 x i32>
  %29 = mul nuw nsw <4 x i32> %28, %25
  %30 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %25
  %31 = bitcast i8* %20 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nsw <4 x i32> %30, %33
  %35 = add nuw nsw <4 x i32> %29, <i32 32, i32 32, i32 32, i32 32>
  %36 = add nsw <4 x i32> %35, %34
  %37 = ashr <4 x i32> %36, <i32 6, i32 6, i32 6, i32 6>
  %38 = bitcast i8* %16 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = zext <4 x i8> %39 to <4 x i32>
  %41 = sub nsw <4 x i32> %37, %40
  %42 = icmp slt <4 x i32> %41, zeroinitializer
  %43 = sub nsw <4 x i32> zeroinitializer, %41
  %44 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %41
  %45 = add <4 x i32> %44, %22
  %46 = getelementptr inbounds i8, i8* %21, i64 4
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = zext <4 x i8> %48 to <4 x i32>
  %50 = getelementptr inbounds i8, i8* %19, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %52 to <4 x i32>
  %54 = mul nuw nsw <4 x i32> %53, %49
  %55 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %49
  %56 = getelementptr inbounds i8, i8* %20, i64 4
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1
  %59 = zext <4 x i8> %58 to <4 x i32>
  %60 = mul nsw <4 x i32> %55, %59
  %61 = add nuw nsw <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %62 = add nsw <4 x i32> %61, %60
  %63 = ashr <4 x i32> %62, <i32 6, i32 6, i32 6, i32 6>
  %64 = getelementptr inbounds i8, i8* %16, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = sub nsw <4 x i32> %63, %67
  %69 = icmp slt <4 x i32> %68, zeroinitializer
  %70 = sub nsw <4 x i32> zeroinitializer, %68
  %71 = select <4 x i1> %69, <4 x i32> %70, <4 x i32> %68
  %72 = add <4 x i32> %71, %45
  %73 = getelementptr inbounds i8, i8* %21, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = getelementptr inbounds i8, i8* %19, i64 8
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = mul nuw nsw <4 x i32> %80, %76
  %82 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %76
  %83 = getelementptr inbounds i8, i8* %20, i64 8
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = mul nsw <4 x i32> %82, %86
  %88 = add nuw nsw <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %89 = add nsw <4 x i32> %88, %87
  %90 = ashr <4 x i32> %89, <i32 6, i32 6, i32 6, i32 6>
  %91 = getelementptr inbounds i8, i8* %16, i64 8
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = sub nsw <4 x i32> %90, %94
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = add <4 x i32> %98, %72
  %100 = getelementptr inbounds i8, i8* %21, i64 12
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = zext <4 x i8> %102 to <4 x i32>
  %104 = getelementptr inbounds i8, i8* %19, i64 12
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = zext <4 x i8> %106 to <4 x i32>
  %108 = mul nuw nsw <4 x i32> %107, %103
  %109 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %103
  %110 = getelementptr inbounds i8, i8* %20, i64 12
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = mul nsw <4 x i32> %109, %113
  %115 = add nuw nsw <4 x i32> %108, <i32 32, i32 32, i32 32, i32 32>
  %116 = add nsw <4 x i32> %115, %114
  %117 = ashr <4 x i32> %116, <i32 6, i32 6, i32 6, i32 6>
  %118 = getelementptr inbounds i8, i8* %16, i64 12
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = sub nsw <4 x i32> %117, %121
  %123 = icmp slt <4 x i32> %122, zeroinitializer
  %124 = sub nsw <4 x i32> zeroinitializer, %122
  %125 = select <4 x i1> %123, <4 x i32> %124, <4 x i32> %122
  %126 = add <4 x i32> %125, %99
  %127 = getelementptr inbounds i8, i8* %21, i64 16
  %128 = bitcast i8* %127 to <4 x i8>*
  %129 = load <4 x i8>, <4 x i8>* %128, align 1
  %130 = zext <4 x i8> %129 to <4 x i32>
  %131 = getelementptr inbounds i8, i8* %19, i64 16
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = zext <4 x i8> %133 to <4 x i32>
  %135 = mul nuw nsw <4 x i32> %134, %130
  %136 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %130
  %137 = getelementptr inbounds i8, i8* %20, i64 16
  %138 = bitcast i8* %137 to <4 x i8>*
  %139 = load <4 x i8>, <4 x i8>* %138, align 1
  %140 = zext <4 x i8> %139 to <4 x i32>
  %141 = mul nsw <4 x i32> %136, %140
  %142 = add nuw nsw <4 x i32> %135, <i32 32, i32 32, i32 32, i32 32>
  %143 = add nsw <4 x i32> %142, %141
  %144 = ashr <4 x i32> %143, <i32 6, i32 6, i32 6, i32 6>
  %145 = getelementptr inbounds i8, i8* %16, i64 16
  %146 = bitcast i8* %145 to <4 x i8>*
  %147 = load <4 x i8>, <4 x i8>* %146, align 1
  %148 = zext <4 x i8> %147 to <4 x i32>
  %149 = sub nsw <4 x i32> %144, %148
  %150 = icmp slt <4 x i32> %149, zeroinitializer
  %151 = sub nsw <4 x i32> zeroinitializer, %149
  %152 = select <4 x i1> %150, <4 x i32> %151, <4 x i32> %149
  %153 = add <4 x i32> %152, %126
  %154 = getelementptr inbounds i8, i8* %21, i64 20
  %155 = bitcast i8* %154 to <4 x i8>*
  %156 = load <4 x i8>, <4 x i8>* %155, align 1
  %157 = zext <4 x i8> %156 to <4 x i32>
  %158 = getelementptr inbounds i8, i8* %19, i64 20
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = mul nuw nsw <4 x i32> %161, %157
  %163 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %157
  %164 = getelementptr inbounds i8, i8* %20, i64 20
  %165 = bitcast i8* %164 to <4 x i8>*
  %166 = load <4 x i8>, <4 x i8>* %165, align 1
  %167 = zext <4 x i8> %166 to <4 x i32>
  %168 = mul nsw <4 x i32> %163, %167
  %169 = add nuw nsw <4 x i32> %162, <i32 32, i32 32, i32 32, i32 32>
  %170 = add nsw <4 x i32> %169, %168
  %171 = ashr <4 x i32> %170, <i32 6, i32 6, i32 6, i32 6>
  %172 = getelementptr inbounds i8, i8* %16, i64 20
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = sub nsw <4 x i32> %171, %175
  %177 = icmp slt <4 x i32> %176, zeroinitializer
  %178 = sub nsw <4 x i32> zeroinitializer, %176
  %179 = select <4 x i1> %177, <4 x i32> %178, <4 x i32> %176
  %180 = add <4 x i32> %179, %153
  %181 = getelementptr inbounds i8, i8* %21, i64 24
  %182 = bitcast i8* %181 to <4 x i8>*
  %183 = load <4 x i8>, <4 x i8>* %182, align 1
  %184 = zext <4 x i8> %183 to <4 x i32>
  %185 = getelementptr inbounds i8, i8* %19, i64 24
  %186 = bitcast i8* %185 to <4 x i8>*
  %187 = load <4 x i8>, <4 x i8>* %186, align 1
  %188 = zext <4 x i8> %187 to <4 x i32>
  %189 = mul nuw nsw <4 x i32> %188, %184
  %190 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %184
  %191 = getelementptr inbounds i8, i8* %20, i64 24
  %192 = bitcast i8* %191 to <4 x i8>*
  %193 = load <4 x i8>, <4 x i8>* %192, align 1
  %194 = zext <4 x i8> %193 to <4 x i32>
  %195 = mul nsw <4 x i32> %190, %194
  %196 = add nuw nsw <4 x i32> %189, <i32 32, i32 32, i32 32, i32 32>
  %197 = add nsw <4 x i32> %196, %195
  %198 = ashr <4 x i32> %197, <i32 6, i32 6, i32 6, i32 6>
  %199 = getelementptr inbounds i8, i8* %16, i64 24
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = sub nsw <4 x i32> %198, %202
  %204 = icmp slt <4 x i32> %203, zeroinitializer
  %205 = sub nsw <4 x i32> zeroinitializer, %203
  %206 = select <4 x i1> %204, <4 x i32> %205, <4 x i32> %203
  %207 = add <4 x i32> %206, %180
  %208 = getelementptr inbounds i8, i8* %21, i64 28
  %209 = bitcast i8* %208 to <4 x i8>*
  %210 = load <4 x i8>, <4 x i8>* %209, align 1
  %211 = zext <4 x i8> %210 to <4 x i32>
  %212 = getelementptr inbounds i8, i8* %19, i64 28
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = zext <4 x i8> %214 to <4 x i32>
  %216 = mul nuw nsw <4 x i32> %215, %211
  %217 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %211
  %218 = getelementptr inbounds i8, i8* %20, i64 28
  %219 = bitcast i8* %218 to <4 x i8>*
  %220 = load <4 x i8>, <4 x i8>* %219, align 1
  %221 = zext <4 x i8> %220 to <4 x i32>
  %222 = mul nsw <4 x i32> %217, %221
  %223 = add nuw nsw <4 x i32> %216, <i32 32, i32 32, i32 32, i32 32>
  %224 = add nsw <4 x i32> %223, %222
  %225 = ashr <4 x i32> %224, <i32 6, i32 6, i32 6, i32 6>
  %226 = getelementptr inbounds i8, i8* %16, i64 28
  %227 = bitcast i8* %226 to <4 x i8>*
  %228 = load <4 x i8>, <4 x i8>* %227, align 1
  %229 = zext <4 x i8> %228 to <4 x i32>
  %230 = sub nsw <4 x i32> %225, %229
  %231 = icmp slt <4 x i32> %230, zeroinitializer
  %232 = sub nsw <4 x i32> zeroinitializer, %230
  %233 = select <4 x i1> %231, <4 x i32> %232, <4 x i32> %230
  %234 = add <4 x i32> %233, %207
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %236 = add <4 x i32> %234, %235
  %237 = shufflevector <4 x i32> %236, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %238 = add <4 x i32> %236, %237
  %239 = extractelement <4 x i32> %238, i32 0
  %240 = getelementptr inbounds i8, i8* %16, i64 %11
  %241 = getelementptr inbounds i8, i8* %19, i64 %12
  %242 = getelementptr inbounds i8, i8* %20, i64 32
  %243 = getelementptr inbounds i8, i8* %21, i64 %13
  %244 = add nuw nsw i32 %18, 1
  %245 = icmp eq i32 %244, 16
  br i1 %245, label %246, label %15

246:                                              ; preds = %15
  store i32 %239, i32* %8, align 4
  %247 = getelementptr inbounds i8*, i8** %2, i64 1
  %248 = load i8*, i8** %247, align 8
  br label %486

249:                                              ; preds = %9, %249
  %250 = phi i8* [ %474, %249 ], [ %0, %9 ]
  %251 = phi i32 [ %473, %249 ], [ 0, %9 ]
  %252 = phi i32 [ %478, %249 ], [ 0, %9 ]
  %253 = phi i8* [ %475, %249 ], [ %4, %9 ]
  %254 = phi i8* [ %476, %249 ], [ %14, %9 ]
  %255 = phi i8* [ %477, %249 ], [ %5, %9 ]
  %256 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %251, i32 0
  %257 = bitcast i8* %255 to <4 x i8>*
  %258 = load <4 x i8>, <4 x i8>* %257, align 1
  %259 = zext <4 x i8> %258 to <4 x i32>
  %260 = bitcast i8* %253 to <4 x i8>*
  %261 = load <4 x i8>, <4 x i8>* %260, align 1
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = mul nuw nsw <4 x i32> %262, %259
  %264 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %259
  %265 = bitcast i8* %254 to <4 x i8>*
  %266 = load <4 x i8>, <4 x i8>* %265, align 1
  %267 = zext <4 x i8> %266 to <4 x i32>
  %268 = mul nsw <4 x i32> %264, %267
  %269 = add nuw nsw <4 x i32> %263, <i32 32, i32 32, i32 32, i32 32>
  %270 = add nsw <4 x i32> %269, %268
  %271 = ashr <4 x i32> %270, <i32 6, i32 6, i32 6, i32 6>
  %272 = bitcast i8* %250 to <4 x i8>*
  %273 = load <4 x i8>, <4 x i8>* %272, align 1
  %274 = zext <4 x i8> %273 to <4 x i32>
  %275 = sub nsw <4 x i32> %271, %274
  %276 = icmp slt <4 x i32> %275, zeroinitializer
  %277 = sub nsw <4 x i32> zeroinitializer, %275
  %278 = select <4 x i1> %276, <4 x i32> %277, <4 x i32> %275
  %279 = add <4 x i32> %278, %256
  %280 = getelementptr inbounds i8, i8* %255, i64 4
  %281 = bitcast i8* %280 to <4 x i8>*
  %282 = load <4 x i8>, <4 x i8>* %281, align 1
  %283 = zext <4 x i8> %282 to <4 x i32>
  %284 = getelementptr inbounds i8, i8* %253, i64 4
  %285 = bitcast i8* %284 to <4 x i8>*
  %286 = load <4 x i8>, <4 x i8>* %285, align 1
  %287 = zext <4 x i8> %286 to <4 x i32>
  %288 = mul nuw nsw <4 x i32> %287, %283
  %289 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %283
  %290 = getelementptr inbounds i8, i8* %254, i64 4
  %291 = bitcast i8* %290 to <4 x i8>*
  %292 = load <4 x i8>, <4 x i8>* %291, align 1
  %293 = zext <4 x i8> %292 to <4 x i32>
  %294 = mul nsw <4 x i32> %289, %293
  %295 = add nuw nsw <4 x i32> %288, <i32 32, i32 32, i32 32, i32 32>
  %296 = add nsw <4 x i32> %295, %294
  %297 = ashr <4 x i32> %296, <i32 6, i32 6, i32 6, i32 6>
  %298 = getelementptr inbounds i8, i8* %250, i64 4
  %299 = bitcast i8* %298 to <4 x i8>*
  %300 = load <4 x i8>, <4 x i8>* %299, align 1
  %301 = zext <4 x i8> %300 to <4 x i32>
  %302 = sub nsw <4 x i32> %297, %301
  %303 = icmp slt <4 x i32> %302, zeroinitializer
  %304 = sub nsw <4 x i32> zeroinitializer, %302
  %305 = select <4 x i1> %303, <4 x i32> %304, <4 x i32> %302
  %306 = add <4 x i32> %305, %279
  %307 = getelementptr inbounds i8, i8* %255, i64 8
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = zext <4 x i8> %309 to <4 x i32>
  %311 = getelementptr inbounds i8, i8* %253, i64 8
  %312 = bitcast i8* %311 to <4 x i8>*
  %313 = load <4 x i8>, <4 x i8>* %312, align 1
  %314 = zext <4 x i8> %313 to <4 x i32>
  %315 = mul nuw nsw <4 x i32> %314, %310
  %316 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %310
  %317 = getelementptr inbounds i8, i8* %254, i64 8
  %318 = bitcast i8* %317 to <4 x i8>*
  %319 = load <4 x i8>, <4 x i8>* %318, align 1
  %320 = zext <4 x i8> %319 to <4 x i32>
  %321 = mul nsw <4 x i32> %316, %320
  %322 = add nuw nsw <4 x i32> %315, <i32 32, i32 32, i32 32, i32 32>
  %323 = add nsw <4 x i32> %322, %321
  %324 = ashr <4 x i32> %323, <i32 6, i32 6, i32 6, i32 6>
  %325 = getelementptr inbounds i8, i8* %250, i64 8
  %326 = bitcast i8* %325 to <4 x i8>*
  %327 = load <4 x i8>, <4 x i8>* %326, align 1
  %328 = zext <4 x i8> %327 to <4 x i32>
  %329 = sub nsw <4 x i32> %324, %328
  %330 = icmp slt <4 x i32> %329, zeroinitializer
  %331 = sub nsw <4 x i32> zeroinitializer, %329
  %332 = select <4 x i1> %330, <4 x i32> %331, <4 x i32> %329
  %333 = add <4 x i32> %332, %306
  %334 = getelementptr inbounds i8, i8* %255, i64 12
  %335 = bitcast i8* %334 to <4 x i8>*
  %336 = load <4 x i8>, <4 x i8>* %335, align 1
  %337 = zext <4 x i8> %336 to <4 x i32>
  %338 = getelementptr inbounds i8, i8* %253, i64 12
  %339 = bitcast i8* %338 to <4 x i8>*
  %340 = load <4 x i8>, <4 x i8>* %339, align 1
  %341 = zext <4 x i8> %340 to <4 x i32>
  %342 = mul nuw nsw <4 x i32> %341, %337
  %343 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %337
  %344 = getelementptr inbounds i8, i8* %254, i64 12
  %345 = bitcast i8* %344 to <4 x i8>*
  %346 = load <4 x i8>, <4 x i8>* %345, align 1
  %347 = zext <4 x i8> %346 to <4 x i32>
  %348 = mul nsw <4 x i32> %343, %347
  %349 = add nuw nsw <4 x i32> %342, <i32 32, i32 32, i32 32, i32 32>
  %350 = add nsw <4 x i32> %349, %348
  %351 = ashr <4 x i32> %350, <i32 6, i32 6, i32 6, i32 6>
  %352 = getelementptr inbounds i8, i8* %250, i64 12
  %353 = bitcast i8* %352 to <4 x i8>*
  %354 = load <4 x i8>, <4 x i8>* %353, align 1
  %355 = zext <4 x i8> %354 to <4 x i32>
  %356 = sub nsw <4 x i32> %351, %355
  %357 = icmp slt <4 x i32> %356, zeroinitializer
  %358 = sub nsw <4 x i32> zeroinitializer, %356
  %359 = select <4 x i1> %357, <4 x i32> %358, <4 x i32> %356
  %360 = add <4 x i32> %359, %333
  %361 = getelementptr inbounds i8, i8* %255, i64 16
  %362 = bitcast i8* %361 to <4 x i8>*
  %363 = load <4 x i8>, <4 x i8>* %362, align 1
  %364 = zext <4 x i8> %363 to <4 x i32>
  %365 = getelementptr inbounds i8, i8* %253, i64 16
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1
  %368 = zext <4 x i8> %367 to <4 x i32>
  %369 = mul nuw nsw <4 x i32> %368, %364
  %370 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %364
  %371 = getelementptr inbounds i8, i8* %254, i64 16
  %372 = bitcast i8* %371 to <4 x i8>*
  %373 = load <4 x i8>, <4 x i8>* %372, align 1
  %374 = zext <4 x i8> %373 to <4 x i32>
  %375 = mul nsw <4 x i32> %370, %374
  %376 = add nuw nsw <4 x i32> %369, <i32 32, i32 32, i32 32, i32 32>
  %377 = add nsw <4 x i32> %376, %375
  %378 = ashr <4 x i32> %377, <i32 6, i32 6, i32 6, i32 6>
  %379 = getelementptr inbounds i8, i8* %250, i64 16
  %380 = bitcast i8* %379 to <4 x i8>*
  %381 = load <4 x i8>, <4 x i8>* %380, align 1
  %382 = zext <4 x i8> %381 to <4 x i32>
  %383 = sub nsw <4 x i32> %378, %382
  %384 = icmp slt <4 x i32> %383, zeroinitializer
  %385 = sub nsw <4 x i32> zeroinitializer, %383
  %386 = select <4 x i1> %384, <4 x i32> %385, <4 x i32> %383
  %387 = add <4 x i32> %386, %360
  %388 = getelementptr inbounds i8, i8* %255, i64 20
  %389 = bitcast i8* %388 to <4 x i8>*
  %390 = load <4 x i8>, <4 x i8>* %389, align 1
  %391 = zext <4 x i8> %390 to <4 x i32>
  %392 = getelementptr inbounds i8, i8* %253, i64 20
  %393 = bitcast i8* %392 to <4 x i8>*
  %394 = load <4 x i8>, <4 x i8>* %393, align 1
  %395 = zext <4 x i8> %394 to <4 x i32>
  %396 = mul nuw nsw <4 x i32> %395, %391
  %397 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %391
  %398 = getelementptr inbounds i8, i8* %254, i64 20
  %399 = bitcast i8* %398 to <4 x i8>*
  %400 = load <4 x i8>, <4 x i8>* %399, align 1
  %401 = zext <4 x i8> %400 to <4 x i32>
  %402 = mul nsw <4 x i32> %397, %401
  %403 = add nuw nsw <4 x i32> %396, <i32 32, i32 32, i32 32, i32 32>
  %404 = add nsw <4 x i32> %403, %402
  %405 = ashr <4 x i32> %404, <i32 6, i32 6, i32 6, i32 6>
  %406 = getelementptr inbounds i8, i8* %250, i64 20
  %407 = bitcast i8* %406 to <4 x i8>*
  %408 = load <4 x i8>, <4 x i8>* %407, align 1
  %409 = zext <4 x i8> %408 to <4 x i32>
  %410 = sub nsw <4 x i32> %405, %409
  %411 = icmp slt <4 x i32> %410, zeroinitializer
  %412 = sub nsw <4 x i32> zeroinitializer, %410
  %413 = select <4 x i1> %411, <4 x i32> %412, <4 x i32> %410
  %414 = add <4 x i32> %413, %387
  %415 = getelementptr inbounds i8, i8* %255, i64 24
  %416 = bitcast i8* %415 to <4 x i8>*
  %417 = load <4 x i8>, <4 x i8>* %416, align 1
  %418 = zext <4 x i8> %417 to <4 x i32>
  %419 = getelementptr inbounds i8, i8* %253, i64 24
  %420 = bitcast i8* %419 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = mul nuw nsw <4 x i32> %422, %418
  %424 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %418
  %425 = getelementptr inbounds i8, i8* %254, i64 24
  %426 = bitcast i8* %425 to <4 x i8>*
  %427 = load <4 x i8>, <4 x i8>* %426, align 1
  %428 = zext <4 x i8> %427 to <4 x i32>
  %429 = mul nsw <4 x i32> %424, %428
  %430 = add nuw nsw <4 x i32> %423, <i32 32, i32 32, i32 32, i32 32>
  %431 = add nsw <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 6, i32 6, i32 6, i32 6>
  %433 = getelementptr inbounds i8, i8* %250, i64 24
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = zext <4 x i8> %435 to <4 x i32>
  %437 = sub nsw <4 x i32> %432, %436
  %438 = icmp slt <4 x i32> %437, zeroinitializer
  %439 = sub nsw <4 x i32> zeroinitializer, %437
  %440 = select <4 x i1> %438, <4 x i32> %439, <4 x i32> %437
  %441 = add <4 x i32> %440, %414
  %442 = getelementptr inbounds i8, i8* %255, i64 28
  %443 = bitcast i8* %442 to <4 x i8>*
  %444 = load <4 x i8>, <4 x i8>* %443, align 1
  %445 = zext <4 x i8> %444 to <4 x i32>
  %446 = getelementptr inbounds i8, i8* %253, i64 28
  %447 = bitcast i8* %446 to <4 x i8>*
  %448 = load <4 x i8>, <4 x i8>* %447, align 1
  %449 = zext <4 x i8> %448 to <4 x i32>
  %450 = mul nuw nsw <4 x i32> %449, %445
  %451 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %445
  %452 = getelementptr inbounds i8, i8* %254, i64 28
  %453 = bitcast i8* %452 to <4 x i8>*
  %454 = load <4 x i8>, <4 x i8>* %453, align 1
  %455 = zext <4 x i8> %454 to <4 x i32>
  %456 = mul nsw <4 x i32> %451, %455
  %457 = add nuw nsw <4 x i32> %450, <i32 32, i32 32, i32 32, i32 32>
  %458 = add nsw <4 x i32> %457, %456
  %459 = ashr <4 x i32> %458, <i32 6, i32 6, i32 6, i32 6>
  %460 = getelementptr inbounds i8, i8* %250, i64 28
  %461 = bitcast i8* %460 to <4 x i8>*
  %462 = load <4 x i8>, <4 x i8>* %461, align 1
  %463 = zext <4 x i8> %462 to <4 x i32>
  %464 = sub nsw <4 x i32> %459, %463
  %465 = icmp slt <4 x i32> %464, zeroinitializer
  %466 = sub nsw <4 x i32> zeroinitializer, %464
  %467 = select <4 x i1> %465, <4 x i32> %466, <4 x i32> %464
  %468 = add <4 x i32> %467, %441
  %469 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %470 = add <4 x i32> %468, %469
  %471 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %472 = add <4 x i32> %470, %471
  %473 = extractelement <4 x i32> %472, i32 0
  %474 = getelementptr inbounds i8, i8* %250, i64 %11
  %475 = getelementptr inbounds i8, i8* %253, i64 32
  %476 = getelementptr inbounds i8, i8* %254, i64 %12
  %477 = getelementptr inbounds i8, i8* %255, i64 %13
  %478 = add nuw nsw i32 %252, 1
  %479 = icmp eq i32 %478, 16
  br i1 %479, label %480, label %249

480:                                              ; preds = %249
  store i32 %473, i32* %8, align 4
  %481 = getelementptr inbounds i8*, i8** %2, i64 1
  %482 = load i8*, i8** %481, align 8
  br label %1187

483:                                              ; preds = %1657, %956
  %484 = phi i32 [ %1180, %956 ], [ %1881, %1657 ]
  %485 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %484, i32* %485, align 4
  ret void

486:                                              ; preds = %246, %486
  %487 = phi i8* [ %0, %246 ], [ %711, %486 ]
  %488 = phi i32 [ 0, %246 ], [ %710, %486 ]
  %489 = phi i32 [ 0, %246 ], [ %715, %486 ]
  %490 = phi i8* [ %248, %246 ], [ %712, %486 ]
  %491 = phi i8* [ %4, %246 ], [ %713, %486 ]
  %492 = phi i8* [ %5, %246 ], [ %714, %486 ]
  %493 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %488, i32 0
  %494 = bitcast i8* %492 to <4 x i8>*
  %495 = load <4 x i8>, <4 x i8>* %494, align 1
  %496 = zext <4 x i8> %495 to <4 x i32>
  %497 = bitcast i8* %490 to <4 x i8>*
  %498 = load <4 x i8>, <4 x i8>* %497, align 1
  %499 = zext <4 x i8> %498 to <4 x i32>
  %500 = mul nuw nsw <4 x i32> %499, %496
  %501 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %496
  %502 = bitcast i8* %491 to <4 x i8>*
  %503 = load <4 x i8>, <4 x i8>* %502, align 1
  %504 = zext <4 x i8> %503 to <4 x i32>
  %505 = mul nsw <4 x i32> %501, %504
  %506 = add nuw nsw <4 x i32> %500, <i32 32, i32 32, i32 32, i32 32>
  %507 = add nsw <4 x i32> %506, %505
  %508 = ashr <4 x i32> %507, <i32 6, i32 6, i32 6, i32 6>
  %509 = bitcast i8* %487 to <4 x i8>*
  %510 = load <4 x i8>, <4 x i8>* %509, align 1
  %511 = zext <4 x i8> %510 to <4 x i32>
  %512 = sub nsw <4 x i32> %508, %511
  %513 = icmp slt <4 x i32> %512, zeroinitializer
  %514 = sub nsw <4 x i32> zeroinitializer, %512
  %515 = select <4 x i1> %513, <4 x i32> %514, <4 x i32> %512
  %516 = add <4 x i32> %515, %493
  %517 = getelementptr inbounds i8, i8* %492, i64 4
  %518 = bitcast i8* %517 to <4 x i8>*
  %519 = load <4 x i8>, <4 x i8>* %518, align 1
  %520 = zext <4 x i8> %519 to <4 x i32>
  %521 = getelementptr inbounds i8, i8* %490, i64 4
  %522 = bitcast i8* %521 to <4 x i8>*
  %523 = load <4 x i8>, <4 x i8>* %522, align 1
  %524 = zext <4 x i8> %523 to <4 x i32>
  %525 = mul nuw nsw <4 x i32> %524, %520
  %526 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %520
  %527 = getelementptr inbounds i8, i8* %491, i64 4
  %528 = bitcast i8* %527 to <4 x i8>*
  %529 = load <4 x i8>, <4 x i8>* %528, align 1
  %530 = zext <4 x i8> %529 to <4 x i32>
  %531 = mul nsw <4 x i32> %526, %530
  %532 = add nuw nsw <4 x i32> %525, <i32 32, i32 32, i32 32, i32 32>
  %533 = add nsw <4 x i32> %532, %531
  %534 = ashr <4 x i32> %533, <i32 6, i32 6, i32 6, i32 6>
  %535 = getelementptr inbounds i8, i8* %487, i64 4
  %536 = bitcast i8* %535 to <4 x i8>*
  %537 = load <4 x i8>, <4 x i8>* %536, align 1
  %538 = zext <4 x i8> %537 to <4 x i32>
  %539 = sub nsw <4 x i32> %534, %538
  %540 = icmp slt <4 x i32> %539, zeroinitializer
  %541 = sub nsw <4 x i32> zeroinitializer, %539
  %542 = select <4 x i1> %540, <4 x i32> %541, <4 x i32> %539
  %543 = add <4 x i32> %542, %516
  %544 = getelementptr inbounds i8, i8* %492, i64 8
  %545 = bitcast i8* %544 to <4 x i8>*
  %546 = load <4 x i8>, <4 x i8>* %545, align 1
  %547 = zext <4 x i8> %546 to <4 x i32>
  %548 = getelementptr inbounds i8, i8* %490, i64 8
  %549 = bitcast i8* %548 to <4 x i8>*
  %550 = load <4 x i8>, <4 x i8>* %549, align 1
  %551 = zext <4 x i8> %550 to <4 x i32>
  %552 = mul nuw nsw <4 x i32> %551, %547
  %553 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %547
  %554 = getelementptr inbounds i8, i8* %491, i64 8
  %555 = bitcast i8* %554 to <4 x i8>*
  %556 = load <4 x i8>, <4 x i8>* %555, align 1
  %557 = zext <4 x i8> %556 to <4 x i32>
  %558 = mul nsw <4 x i32> %553, %557
  %559 = add nuw nsw <4 x i32> %552, <i32 32, i32 32, i32 32, i32 32>
  %560 = add nsw <4 x i32> %559, %558
  %561 = ashr <4 x i32> %560, <i32 6, i32 6, i32 6, i32 6>
  %562 = getelementptr inbounds i8, i8* %487, i64 8
  %563 = bitcast i8* %562 to <4 x i8>*
  %564 = load <4 x i8>, <4 x i8>* %563, align 1
  %565 = zext <4 x i8> %564 to <4 x i32>
  %566 = sub nsw <4 x i32> %561, %565
  %567 = icmp slt <4 x i32> %566, zeroinitializer
  %568 = sub nsw <4 x i32> zeroinitializer, %566
  %569 = select <4 x i1> %567, <4 x i32> %568, <4 x i32> %566
  %570 = add <4 x i32> %569, %543
  %571 = getelementptr inbounds i8, i8* %492, i64 12
  %572 = bitcast i8* %571 to <4 x i8>*
  %573 = load <4 x i8>, <4 x i8>* %572, align 1
  %574 = zext <4 x i8> %573 to <4 x i32>
  %575 = getelementptr inbounds i8, i8* %490, i64 12
  %576 = bitcast i8* %575 to <4 x i8>*
  %577 = load <4 x i8>, <4 x i8>* %576, align 1
  %578 = zext <4 x i8> %577 to <4 x i32>
  %579 = mul nuw nsw <4 x i32> %578, %574
  %580 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %574
  %581 = getelementptr inbounds i8, i8* %491, i64 12
  %582 = bitcast i8* %581 to <4 x i8>*
  %583 = load <4 x i8>, <4 x i8>* %582, align 1
  %584 = zext <4 x i8> %583 to <4 x i32>
  %585 = mul nsw <4 x i32> %580, %584
  %586 = add nuw nsw <4 x i32> %579, <i32 32, i32 32, i32 32, i32 32>
  %587 = add nsw <4 x i32> %586, %585
  %588 = ashr <4 x i32> %587, <i32 6, i32 6, i32 6, i32 6>
  %589 = getelementptr inbounds i8, i8* %487, i64 12
  %590 = bitcast i8* %589 to <4 x i8>*
  %591 = load <4 x i8>, <4 x i8>* %590, align 1
  %592 = zext <4 x i8> %591 to <4 x i32>
  %593 = sub nsw <4 x i32> %588, %592
  %594 = icmp slt <4 x i32> %593, zeroinitializer
  %595 = sub nsw <4 x i32> zeroinitializer, %593
  %596 = select <4 x i1> %594, <4 x i32> %595, <4 x i32> %593
  %597 = add <4 x i32> %596, %570
  %598 = getelementptr inbounds i8, i8* %492, i64 16
  %599 = bitcast i8* %598 to <4 x i8>*
  %600 = load <4 x i8>, <4 x i8>* %599, align 1
  %601 = zext <4 x i8> %600 to <4 x i32>
  %602 = getelementptr inbounds i8, i8* %490, i64 16
  %603 = bitcast i8* %602 to <4 x i8>*
  %604 = load <4 x i8>, <4 x i8>* %603, align 1
  %605 = zext <4 x i8> %604 to <4 x i32>
  %606 = mul nuw nsw <4 x i32> %605, %601
  %607 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %601
  %608 = getelementptr inbounds i8, i8* %491, i64 16
  %609 = bitcast i8* %608 to <4 x i8>*
  %610 = load <4 x i8>, <4 x i8>* %609, align 1
  %611 = zext <4 x i8> %610 to <4 x i32>
  %612 = mul nsw <4 x i32> %607, %611
  %613 = add nuw nsw <4 x i32> %606, <i32 32, i32 32, i32 32, i32 32>
  %614 = add nsw <4 x i32> %613, %612
  %615 = ashr <4 x i32> %614, <i32 6, i32 6, i32 6, i32 6>
  %616 = getelementptr inbounds i8, i8* %487, i64 16
  %617 = bitcast i8* %616 to <4 x i8>*
  %618 = load <4 x i8>, <4 x i8>* %617, align 1
  %619 = zext <4 x i8> %618 to <4 x i32>
  %620 = sub nsw <4 x i32> %615, %619
  %621 = icmp slt <4 x i32> %620, zeroinitializer
  %622 = sub nsw <4 x i32> zeroinitializer, %620
  %623 = select <4 x i1> %621, <4 x i32> %622, <4 x i32> %620
  %624 = add <4 x i32> %623, %597
  %625 = getelementptr inbounds i8, i8* %492, i64 20
  %626 = bitcast i8* %625 to <4 x i8>*
  %627 = load <4 x i8>, <4 x i8>* %626, align 1
  %628 = zext <4 x i8> %627 to <4 x i32>
  %629 = getelementptr inbounds i8, i8* %490, i64 20
  %630 = bitcast i8* %629 to <4 x i8>*
  %631 = load <4 x i8>, <4 x i8>* %630, align 1
  %632 = zext <4 x i8> %631 to <4 x i32>
  %633 = mul nuw nsw <4 x i32> %632, %628
  %634 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %628
  %635 = getelementptr inbounds i8, i8* %491, i64 20
  %636 = bitcast i8* %635 to <4 x i8>*
  %637 = load <4 x i8>, <4 x i8>* %636, align 1
  %638 = zext <4 x i8> %637 to <4 x i32>
  %639 = mul nsw <4 x i32> %634, %638
  %640 = add nuw nsw <4 x i32> %633, <i32 32, i32 32, i32 32, i32 32>
  %641 = add nsw <4 x i32> %640, %639
  %642 = ashr <4 x i32> %641, <i32 6, i32 6, i32 6, i32 6>
  %643 = getelementptr inbounds i8, i8* %487, i64 20
  %644 = bitcast i8* %643 to <4 x i8>*
  %645 = load <4 x i8>, <4 x i8>* %644, align 1
  %646 = zext <4 x i8> %645 to <4 x i32>
  %647 = sub nsw <4 x i32> %642, %646
  %648 = icmp slt <4 x i32> %647, zeroinitializer
  %649 = sub nsw <4 x i32> zeroinitializer, %647
  %650 = select <4 x i1> %648, <4 x i32> %649, <4 x i32> %647
  %651 = add <4 x i32> %650, %624
  %652 = getelementptr inbounds i8, i8* %492, i64 24
  %653 = bitcast i8* %652 to <4 x i8>*
  %654 = load <4 x i8>, <4 x i8>* %653, align 1
  %655 = zext <4 x i8> %654 to <4 x i32>
  %656 = getelementptr inbounds i8, i8* %490, i64 24
  %657 = bitcast i8* %656 to <4 x i8>*
  %658 = load <4 x i8>, <4 x i8>* %657, align 1
  %659 = zext <4 x i8> %658 to <4 x i32>
  %660 = mul nuw nsw <4 x i32> %659, %655
  %661 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %655
  %662 = getelementptr inbounds i8, i8* %491, i64 24
  %663 = bitcast i8* %662 to <4 x i8>*
  %664 = load <4 x i8>, <4 x i8>* %663, align 1
  %665 = zext <4 x i8> %664 to <4 x i32>
  %666 = mul nsw <4 x i32> %661, %665
  %667 = add nuw nsw <4 x i32> %660, <i32 32, i32 32, i32 32, i32 32>
  %668 = add nsw <4 x i32> %667, %666
  %669 = ashr <4 x i32> %668, <i32 6, i32 6, i32 6, i32 6>
  %670 = getelementptr inbounds i8, i8* %487, i64 24
  %671 = bitcast i8* %670 to <4 x i8>*
  %672 = load <4 x i8>, <4 x i8>* %671, align 1
  %673 = zext <4 x i8> %672 to <4 x i32>
  %674 = sub nsw <4 x i32> %669, %673
  %675 = icmp slt <4 x i32> %674, zeroinitializer
  %676 = sub nsw <4 x i32> zeroinitializer, %674
  %677 = select <4 x i1> %675, <4 x i32> %676, <4 x i32> %674
  %678 = add <4 x i32> %677, %651
  %679 = getelementptr inbounds i8, i8* %492, i64 28
  %680 = bitcast i8* %679 to <4 x i8>*
  %681 = load <4 x i8>, <4 x i8>* %680, align 1
  %682 = zext <4 x i8> %681 to <4 x i32>
  %683 = getelementptr inbounds i8, i8* %490, i64 28
  %684 = bitcast i8* %683 to <4 x i8>*
  %685 = load <4 x i8>, <4 x i8>* %684, align 1
  %686 = zext <4 x i8> %685 to <4 x i32>
  %687 = mul nuw nsw <4 x i32> %686, %682
  %688 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %682
  %689 = getelementptr inbounds i8, i8* %491, i64 28
  %690 = bitcast i8* %689 to <4 x i8>*
  %691 = load <4 x i8>, <4 x i8>* %690, align 1
  %692 = zext <4 x i8> %691 to <4 x i32>
  %693 = mul nsw <4 x i32> %688, %692
  %694 = add nuw nsw <4 x i32> %687, <i32 32, i32 32, i32 32, i32 32>
  %695 = add nsw <4 x i32> %694, %693
  %696 = ashr <4 x i32> %695, <i32 6, i32 6, i32 6, i32 6>
  %697 = getelementptr inbounds i8, i8* %487, i64 28
  %698 = bitcast i8* %697 to <4 x i8>*
  %699 = load <4 x i8>, <4 x i8>* %698, align 1
  %700 = zext <4 x i8> %699 to <4 x i32>
  %701 = sub nsw <4 x i32> %696, %700
  %702 = icmp slt <4 x i32> %701, zeroinitializer
  %703 = sub nsw <4 x i32> zeroinitializer, %701
  %704 = select <4 x i1> %702, <4 x i32> %703, <4 x i32> %701
  %705 = add <4 x i32> %704, %678
  %706 = shufflevector <4 x i32> %705, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %707 = add <4 x i32> %705, %706
  %708 = shufflevector <4 x i32> %707, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %709 = add <4 x i32> %707, %708
  %710 = extractelement <4 x i32> %709, i32 0
  %711 = getelementptr inbounds i8, i8* %487, i64 %11
  %712 = getelementptr inbounds i8, i8* %490, i64 %12
  %713 = getelementptr inbounds i8, i8* %491, i64 32
  %714 = getelementptr inbounds i8, i8* %492, i64 %13
  %715 = add nuw nsw i32 %489, 1
  %716 = icmp eq i32 %715, 16
  br i1 %716, label %717, label %486

717:                                              ; preds = %486
  %718 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %710, i32* %718, align 4
  %719 = getelementptr inbounds i8*, i8** %2, i64 2
  %720 = load i8*, i8** %719, align 8
  br label %721

721:                                              ; preds = %717, %721
  %722 = phi i8* [ %0, %717 ], [ %946, %721 ]
  %723 = phi i32 [ 0, %717 ], [ %945, %721 ]
  %724 = phi i32 [ 0, %717 ], [ %950, %721 ]
  %725 = phi i8* [ %720, %717 ], [ %947, %721 ]
  %726 = phi i8* [ %4, %717 ], [ %948, %721 ]
  %727 = phi i8* [ %5, %717 ], [ %949, %721 ]
  %728 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %723, i32 0
  %729 = bitcast i8* %727 to <4 x i8>*
  %730 = load <4 x i8>, <4 x i8>* %729, align 1
  %731 = zext <4 x i8> %730 to <4 x i32>
  %732 = bitcast i8* %725 to <4 x i8>*
  %733 = load <4 x i8>, <4 x i8>* %732, align 1
  %734 = zext <4 x i8> %733 to <4 x i32>
  %735 = mul nuw nsw <4 x i32> %734, %731
  %736 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %731
  %737 = bitcast i8* %726 to <4 x i8>*
  %738 = load <4 x i8>, <4 x i8>* %737, align 1
  %739 = zext <4 x i8> %738 to <4 x i32>
  %740 = mul nsw <4 x i32> %736, %739
  %741 = add nuw nsw <4 x i32> %735, <i32 32, i32 32, i32 32, i32 32>
  %742 = add nsw <4 x i32> %741, %740
  %743 = ashr <4 x i32> %742, <i32 6, i32 6, i32 6, i32 6>
  %744 = bitcast i8* %722 to <4 x i8>*
  %745 = load <4 x i8>, <4 x i8>* %744, align 1
  %746 = zext <4 x i8> %745 to <4 x i32>
  %747 = sub nsw <4 x i32> %743, %746
  %748 = icmp slt <4 x i32> %747, zeroinitializer
  %749 = sub nsw <4 x i32> zeroinitializer, %747
  %750 = select <4 x i1> %748, <4 x i32> %749, <4 x i32> %747
  %751 = add <4 x i32> %750, %728
  %752 = getelementptr inbounds i8, i8* %727, i64 4
  %753 = bitcast i8* %752 to <4 x i8>*
  %754 = load <4 x i8>, <4 x i8>* %753, align 1
  %755 = zext <4 x i8> %754 to <4 x i32>
  %756 = getelementptr inbounds i8, i8* %725, i64 4
  %757 = bitcast i8* %756 to <4 x i8>*
  %758 = load <4 x i8>, <4 x i8>* %757, align 1
  %759 = zext <4 x i8> %758 to <4 x i32>
  %760 = mul nuw nsw <4 x i32> %759, %755
  %761 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %755
  %762 = getelementptr inbounds i8, i8* %726, i64 4
  %763 = bitcast i8* %762 to <4 x i8>*
  %764 = load <4 x i8>, <4 x i8>* %763, align 1
  %765 = zext <4 x i8> %764 to <4 x i32>
  %766 = mul nsw <4 x i32> %761, %765
  %767 = add nuw nsw <4 x i32> %760, <i32 32, i32 32, i32 32, i32 32>
  %768 = add nsw <4 x i32> %767, %766
  %769 = ashr <4 x i32> %768, <i32 6, i32 6, i32 6, i32 6>
  %770 = getelementptr inbounds i8, i8* %722, i64 4
  %771 = bitcast i8* %770 to <4 x i8>*
  %772 = load <4 x i8>, <4 x i8>* %771, align 1
  %773 = zext <4 x i8> %772 to <4 x i32>
  %774 = sub nsw <4 x i32> %769, %773
  %775 = icmp slt <4 x i32> %774, zeroinitializer
  %776 = sub nsw <4 x i32> zeroinitializer, %774
  %777 = select <4 x i1> %775, <4 x i32> %776, <4 x i32> %774
  %778 = add <4 x i32> %777, %751
  %779 = getelementptr inbounds i8, i8* %727, i64 8
  %780 = bitcast i8* %779 to <4 x i8>*
  %781 = load <4 x i8>, <4 x i8>* %780, align 1
  %782 = zext <4 x i8> %781 to <4 x i32>
  %783 = getelementptr inbounds i8, i8* %725, i64 8
  %784 = bitcast i8* %783 to <4 x i8>*
  %785 = load <4 x i8>, <4 x i8>* %784, align 1
  %786 = zext <4 x i8> %785 to <4 x i32>
  %787 = mul nuw nsw <4 x i32> %786, %782
  %788 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %782
  %789 = getelementptr inbounds i8, i8* %726, i64 8
  %790 = bitcast i8* %789 to <4 x i8>*
  %791 = load <4 x i8>, <4 x i8>* %790, align 1
  %792 = zext <4 x i8> %791 to <4 x i32>
  %793 = mul nsw <4 x i32> %788, %792
  %794 = add nuw nsw <4 x i32> %787, <i32 32, i32 32, i32 32, i32 32>
  %795 = add nsw <4 x i32> %794, %793
  %796 = ashr <4 x i32> %795, <i32 6, i32 6, i32 6, i32 6>
  %797 = getelementptr inbounds i8, i8* %722, i64 8
  %798 = bitcast i8* %797 to <4 x i8>*
  %799 = load <4 x i8>, <4 x i8>* %798, align 1
  %800 = zext <4 x i8> %799 to <4 x i32>
  %801 = sub nsw <4 x i32> %796, %800
  %802 = icmp slt <4 x i32> %801, zeroinitializer
  %803 = sub nsw <4 x i32> zeroinitializer, %801
  %804 = select <4 x i1> %802, <4 x i32> %803, <4 x i32> %801
  %805 = add <4 x i32> %804, %778
  %806 = getelementptr inbounds i8, i8* %727, i64 12
  %807 = bitcast i8* %806 to <4 x i8>*
  %808 = load <4 x i8>, <4 x i8>* %807, align 1
  %809 = zext <4 x i8> %808 to <4 x i32>
  %810 = getelementptr inbounds i8, i8* %725, i64 12
  %811 = bitcast i8* %810 to <4 x i8>*
  %812 = load <4 x i8>, <4 x i8>* %811, align 1
  %813 = zext <4 x i8> %812 to <4 x i32>
  %814 = mul nuw nsw <4 x i32> %813, %809
  %815 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %809
  %816 = getelementptr inbounds i8, i8* %726, i64 12
  %817 = bitcast i8* %816 to <4 x i8>*
  %818 = load <4 x i8>, <4 x i8>* %817, align 1
  %819 = zext <4 x i8> %818 to <4 x i32>
  %820 = mul nsw <4 x i32> %815, %819
  %821 = add nuw nsw <4 x i32> %814, <i32 32, i32 32, i32 32, i32 32>
  %822 = add nsw <4 x i32> %821, %820
  %823 = ashr <4 x i32> %822, <i32 6, i32 6, i32 6, i32 6>
  %824 = getelementptr inbounds i8, i8* %722, i64 12
  %825 = bitcast i8* %824 to <4 x i8>*
  %826 = load <4 x i8>, <4 x i8>* %825, align 1
  %827 = zext <4 x i8> %826 to <4 x i32>
  %828 = sub nsw <4 x i32> %823, %827
  %829 = icmp slt <4 x i32> %828, zeroinitializer
  %830 = sub nsw <4 x i32> zeroinitializer, %828
  %831 = select <4 x i1> %829, <4 x i32> %830, <4 x i32> %828
  %832 = add <4 x i32> %831, %805
  %833 = getelementptr inbounds i8, i8* %727, i64 16
  %834 = bitcast i8* %833 to <4 x i8>*
  %835 = load <4 x i8>, <4 x i8>* %834, align 1
  %836 = zext <4 x i8> %835 to <4 x i32>
  %837 = getelementptr inbounds i8, i8* %725, i64 16
  %838 = bitcast i8* %837 to <4 x i8>*
  %839 = load <4 x i8>, <4 x i8>* %838, align 1
  %840 = zext <4 x i8> %839 to <4 x i32>
  %841 = mul nuw nsw <4 x i32> %840, %836
  %842 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %836
  %843 = getelementptr inbounds i8, i8* %726, i64 16
  %844 = bitcast i8* %843 to <4 x i8>*
  %845 = load <4 x i8>, <4 x i8>* %844, align 1
  %846 = zext <4 x i8> %845 to <4 x i32>
  %847 = mul nsw <4 x i32> %842, %846
  %848 = add nuw nsw <4 x i32> %841, <i32 32, i32 32, i32 32, i32 32>
  %849 = add nsw <4 x i32> %848, %847
  %850 = ashr <4 x i32> %849, <i32 6, i32 6, i32 6, i32 6>
  %851 = getelementptr inbounds i8, i8* %722, i64 16
  %852 = bitcast i8* %851 to <4 x i8>*
  %853 = load <4 x i8>, <4 x i8>* %852, align 1
  %854 = zext <4 x i8> %853 to <4 x i32>
  %855 = sub nsw <4 x i32> %850, %854
  %856 = icmp slt <4 x i32> %855, zeroinitializer
  %857 = sub nsw <4 x i32> zeroinitializer, %855
  %858 = select <4 x i1> %856, <4 x i32> %857, <4 x i32> %855
  %859 = add <4 x i32> %858, %832
  %860 = getelementptr inbounds i8, i8* %727, i64 20
  %861 = bitcast i8* %860 to <4 x i8>*
  %862 = load <4 x i8>, <4 x i8>* %861, align 1
  %863 = zext <4 x i8> %862 to <4 x i32>
  %864 = getelementptr inbounds i8, i8* %725, i64 20
  %865 = bitcast i8* %864 to <4 x i8>*
  %866 = load <4 x i8>, <4 x i8>* %865, align 1
  %867 = zext <4 x i8> %866 to <4 x i32>
  %868 = mul nuw nsw <4 x i32> %867, %863
  %869 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %863
  %870 = getelementptr inbounds i8, i8* %726, i64 20
  %871 = bitcast i8* %870 to <4 x i8>*
  %872 = load <4 x i8>, <4 x i8>* %871, align 1
  %873 = zext <4 x i8> %872 to <4 x i32>
  %874 = mul nsw <4 x i32> %869, %873
  %875 = add nuw nsw <4 x i32> %868, <i32 32, i32 32, i32 32, i32 32>
  %876 = add nsw <4 x i32> %875, %874
  %877 = ashr <4 x i32> %876, <i32 6, i32 6, i32 6, i32 6>
  %878 = getelementptr inbounds i8, i8* %722, i64 20
  %879 = bitcast i8* %878 to <4 x i8>*
  %880 = load <4 x i8>, <4 x i8>* %879, align 1
  %881 = zext <4 x i8> %880 to <4 x i32>
  %882 = sub nsw <4 x i32> %877, %881
  %883 = icmp slt <4 x i32> %882, zeroinitializer
  %884 = sub nsw <4 x i32> zeroinitializer, %882
  %885 = select <4 x i1> %883, <4 x i32> %884, <4 x i32> %882
  %886 = add <4 x i32> %885, %859
  %887 = getelementptr inbounds i8, i8* %727, i64 24
  %888 = bitcast i8* %887 to <4 x i8>*
  %889 = load <4 x i8>, <4 x i8>* %888, align 1
  %890 = zext <4 x i8> %889 to <4 x i32>
  %891 = getelementptr inbounds i8, i8* %725, i64 24
  %892 = bitcast i8* %891 to <4 x i8>*
  %893 = load <4 x i8>, <4 x i8>* %892, align 1
  %894 = zext <4 x i8> %893 to <4 x i32>
  %895 = mul nuw nsw <4 x i32> %894, %890
  %896 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %890
  %897 = getelementptr inbounds i8, i8* %726, i64 24
  %898 = bitcast i8* %897 to <4 x i8>*
  %899 = load <4 x i8>, <4 x i8>* %898, align 1
  %900 = zext <4 x i8> %899 to <4 x i32>
  %901 = mul nsw <4 x i32> %896, %900
  %902 = add nuw nsw <4 x i32> %895, <i32 32, i32 32, i32 32, i32 32>
  %903 = add nsw <4 x i32> %902, %901
  %904 = ashr <4 x i32> %903, <i32 6, i32 6, i32 6, i32 6>
  %905 = getelementptr inbounds i8, i8* %722, i64 24
  %906 = bitcast i8* %905 to <4 x i8>*
  %907 = load <4 x i8>, <4 x i8>* %906, align 1
  %908 = zext <4 x i8> %907 to <4 x i32>
  %909 = sub nsw <4 x i32> %904, %908
  %910 = icmp slt <4 x i32> %909, zeroinitializer
  %911 = sub nsw <4 x i32> zeroinitializer, %909
  %912 = select <4 x i1> %910, <4 x i32> %911, <4 x i32> %909
  %913 = add <4 x i32> %912, %886
  %914 = getelementptr inbounds i8, i8* %727, i64 28
  %915 = bitcast i8* %914 to <4 x i8>*
  %916 = load <4 x i8>, <4 x i8>* %915, align 1
  %917 = zext <4 x i8> %916 to <4 x i32>
  %918 = getelementptr inbounds i8, i8* %725, i64 28
  %919 = bitcast i8* %918 to <4 x i8>*
  %920 = load <4 x i8>, <4 x i8>* %919, align 1
  %921 = zext <4 x i8> %920 to <4 x i32>
  %922 = mul nuw nsw <4 x i32> %921, %917
  %923 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %917
  %924 = getelementptr inbounds i8, i8* %726, i64 28
  %925 = bitcast i8* %924 to <4 x i8>*
  %926 = load <4 x i8>, <4 x i8>* %925, align 1
  %927 = zext <4 x i8> %926 to <4 x i32>
  %928 = mul nsw <4 x i32> %923, %927
  %929 = add nuw nsw <4 x i32> %922, <i32 32, i32 32, i32 32, i32 32>
  %930 = add nsw <4 x i32> %929, %928
  %931 = ashr <4 x i32> %930, <i32 6, i32 6, i32 6, i32 6>
  %932 = getelementptr inbounds i8, i8* %722, i64 28
  %933 = bitcast i8* %932 to <4 x i8>*
  %934 = load <4 x i8>, <4 x i8>* %933, align 1
  %935 = zext <4 x i8> %934 to <4 x i32>
  %936 = sub nsw <4 x i32> %931, %935
  %937 = icmp slt <4 x i32> %936, zeroinitializer
  %938 = sub nsw <4 x i32> zeroinitializer, %936
  %939 = select <4 x i1> %937, <4 x i32> %938, <4 x i32> %936
  %940 = add <4 x i32> %939, %913
  %941 = shufflevector <4 x i32> %940, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %942 = add <4 x i32> %940, %941
  %943 = shufflevector <4 x i32> %942, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %944 = add <4 x i32> %942, %943
  %945 = extractelement <4 x i32> %944, i32 0
  %946 = getelementptr inbounds i8, i8* %722, i64 %11
  %947 = getelementptr inbounds i8, i8* %725, i64 %12
  %948 = getelementptr inbounds i8, i8* %726, i64 32
  %949 = getelementptr inbounds i8, i8* %727, i64 %13
  %950 = add nuw nsw i32 %724, 1
  %951 = icmp eq i32 %950, 16
  br i1 %951, label %952, label %721

952:                                              ; preds = %721
  %953 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %945, i32* %953, align 4
  %954 = getelementptr inbounds i8*, i8** %2, i64 3
  %955 = load i8*, i8** %954, align 8
  br label %956

956:                                              ; preds = %952, %956
  %957 = phi i8* [ %0, %952 ], [ %1181, %956 ]
  %958 = phi i32 [ 0, %952 ], [ %1180, %956 ]
  %959 = phi i32 [ 0, %952 ], [ %1185, %956 ]
  %960 = phi i8* [ %955, %952 ], [ %1182, %956 ]
  %961 = phi i8* [ %4, %952 ], [ %1183, %956 ]
  %962 = phi i8* [ %5, %952 ], [ %1184, %956 ]
  %963 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %958, i32 0
  %964 = bitcast i8* %962 to <4 x i8>*
  %965 = load <4 x i8>, <4 x i8>* %964, align 1
  %966 = zext <4 x i8> %965 to <4 x i32>
  %967 = bitcast i8* %960 to <4 x i8>*
  %968 = load <4 x i8>, <4 x i8>* %967, align 1
  %969 = zext <4 x i8> %968 to <4 x i32>
  %970 = mul nuw nsw <4 x i32> %969, %966
  %971 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %966
  %972 = bitcast i8* %961 to <4 x i8>*
  %973 = load <4 x i8>, <4 x i8>* %972, align 1
  %974 = zext <4 x i8> %973 to <4 x i32>
  %975 = mul nsw <4 x i32> %971, %974
  %976 = add nuw nsw <4 x i32> %970, <i32 32, i32 32, i32 32, i32 32>
  %977 = add nsw <4 x i32> %976, %975
  %978 = ashr <4 x i32> %977, <i32 6, i32 6, i32 6, i32 6>
  %979 = bitcast i8* %957 to <4 x i8>*
  %980 = load <4 x i8>, <4 x i8>* %979, align 1
  %981 = zext <4 x i8> %980 to <4 x i32>
  %982 = sub nsw <4 x i32> %978, %981
  %983 = icmp slt <4 x i32> %982, zeroinitializer
  %984 = sub nsw <4 x i32> zeroinitializer, %982
  %985 = select <4 x i1> %983, <4 x i32> %984, <4 x i32> %982
  %986 = add <4 x i32> %985, %963
  %987 = getelementptr inbounds i8, i8* %962, i64 4
  %988 = bitcast i8* %987 to <4 x i8>*
  %989 = load <4 x i8>, <4 x i8>* %988, align 1
  %990 = zext <4 x i8> %989 to <4 x i32>
  %991 = getelementptr inbounds i8, i8* %960, i64 4
  %992 = bitcast i8* %991 to <4 x i8>*
  %993 = load <4 x i8>, <4 x i8>* %992, align 1
  %994 = zext <4 x i8> %993 to <4 x i32>
  %995 = mul nuw nsw <4 x i32> %994, %990
  %996 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %990
  %997 = getelementptr inbounds i8, i8* %961, i64 4
  %998 = bitcast i8* %997 to <4 x i8>*
  %999 = load <4 x i8>, <4 x i8>* %998, align 1
  %1000 = zext <4 x i8> %999 to <4 x i32>
  %1001 = mul nsw <4 x i32> %996, %1000
  %1002 = add nuw nsw <4 x i32> %995, <i32 32, i32 32, i32 32, i32 32>
  %1003 = add nsw <4 x i32> %1002, %1001
  %1004 = ashr <4 x i32> %1003, <i32 6, i32 6, i32 6, i32 6>
  %1005 = getelementptr inbounds i8, i8* %957, i64 4
  %1006 = bitcast i8* %1005 to <4 x i8>*
  %1007 = load <4 x i8>, <4 x i8>* %1006, align 1
  %1008 = zext <4 x i8> %1007 to <4 x i32>
  %1009 = sub nsw <4 x i32> %1004, %1008
  %1010 = icmp slt <4 x i32> %1009, zeroinitializer
  %1011 = sub nsw <4 x i32> zeroinitializer, %1009
  %1012 = select <4 x i1> %1010, <4 x i32> %1011, <4 x i32> %1009
  %1013 = add <4 x i32> %1012, %986
  %1014 = getelementptr inbounds i8, i8* %962, i64 8
  %1015 = bitcast i8* %1014 to <4 x i8>*
  %1016 = load <4 x i8>, <4 x i8>* %1015, align 1
  %1017 = zext <4 x i8> %1016 to <4 x i32>
  %1018 = getelementptr inbounds i8, i8* %960, i64 8
  %1019 = bitcast i8* %1018 to <4 x i8>*
  %1020 = load <4 x i8>, <4 x i8>* %1019, align 1
  %1021 = zext <4 x i8> %1020 to <4 x i32>
  %1022 = mul nuw nsw <4 x i32> %1021, %1017
  %1023 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1017
  %1024 = getelementptr inbounds i8, i8* %961, i64 8
  %1025 = bitcast i8* %1024 to <4 x i8>*
  %1026 = load <4 x i8>, <4 x i8>* %1025, align 1
  %1027 = zext <4 x i8> %1026 to <4 x i32>
  %1028 = mul nsw <4 x i32> %1023, %1027
  %1029 = add nuw nsw <4 x i32> %1022, <i32 32, i32 32, i32 32, i32 32>
  %1030 = add nsw <4 x i32> %1029, %1028
  %1031 = ashr <4 x i32> %1030, <i32 6, i32 6, i32 6, i32 6>
  %1032 = getelementptr inbounds i8, i8* %957, i64 8
  %1033 = bitcast i8* %1032 to <4 x i8>*
  %1034 = load <4 x i8>, <4 x i8>* %1033, align 1
  %1035 = zext <4 x i8> %1034 to <4 x i32>
  %1036 = sub nsw <4 x i32> %1031, %1035
  %1037 = icmp slt <4 x i32> %1036, zeroinitializer
  %1038 = sub nsw <4 x i32> zeroinitializer, %1036
  %1039 = select <4 x i1> %1037, <4 x i32> %1038, <4 x i32> %1036
  %1040 = add <4 x i32> %1039, %1013
  %1041 = getelementptr inbounds i8, i8* %962, i64 12
  %1042 = bitcast i8* %1041 to <4 x i8>*
  %1043 = load <4 x i8>, <4 x i8>* %1042, align 1
  %1044 = zext <4 x i8> %1043 to <4 x i32>
  %1045 = getelementptr inbounds i8, i8* %960, i64 12
  %1046 = bitcast i8* %1045 to <4 x i8>*
  %1047 = load <4 x i8>, <4 x i8>* %1046, align 1
  %1048 = zext <4 x i8> %1047 to <4 x i32>
  %1049 = mul nuw nsw <4 x i32> %1048, %1044
  %1050 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1044
  %1051 = getelementptr inbounds i8, i8* %961, i64 12
  %1052 = bitcast i8* %1051 to <4 x i8>*
  %1053 = load <4 x i8>, <4 x i8>* %1052, align 1
  %1054 = zext <4 x i8> %1053 to <4 x i32>
  %1055 = mul nsw <4 x i32> %1050, %1054
  %1056 = add nuw nsw <4 x i32> %1049, <i32 32, i32 32, i32 32, i32 32>
  %1057 = add nsw <4 x i32> %1056, %1055
  %1058 = ashr <4 x i32> %1057, <i32 6, i32 6, i32 6, i32 6>
  %1059 = getelementptr inbounds i8, i8* %957, i64 12
  %1060 = bitcast i8* %1059 to <4 x i8>*
  %1061 = load <4 x i8>, <4 x i8>* %1060, align 1
  %1062 = zext <4 x i8> %1061 to <4 x i32>
  %1063 = sub nsw <4 x i32> %1058, %1062
  %1064 = icmp slt <4 x i32> %1063, zeroinitializer
  %1065 = sub nsw <4 x i32> zeroinitializer, %1063
  %1066 = select <4 x i1> %1064, <4 x i32> %1065, <4 x i32> %1063
  %1067 = add <4 x i32> %1066, %1040
  %1068 = getelementptr inbounds i8, i8* %962, i64 16
  %1069 = bitcast i8* %1068 to <4 x i8>*
  %1070 = load <4 x i8>, <4 x i8>* %1069, align 1
  %1071 = zext <4 x i8> %1070 to <4 x i32>
  %1072 = getelementptr inbounds i8, i8* %960, i64 16
  %1073 = bitcast i8* %1072 to <4 x i8>*
  %1074 = load <4 x i8>, <4 x i8>* %1073, align 1
  %1075 = zext <4 x i8> %1074 to <4 x i32>
  %1076 = mul nuw nsw <4 x i32> %1075, %1071
  %1077 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1071
  %1078 = getelementptr inbounds i8, i8* %961, i64 16
  %1079 = bitcast i8* %1078 to <4 x i8>*
  %1080 = load <4 x i8>, <4 x i8>* %1079, align 1
  %1081 = zext <4 x i8> %1080 to <4 x i32>
  %1082 = mul nsw <4 x i32> %1077, %1081
  %1083 = add nuw nsw <4 x i32> %1076, <i32 32, i32 32, i32 32, i32 32>
  %1084 = add nsw <4 x i32> %1083, %1082
  %1085 = ashr <4 x i32> %1084, <i32 6, i32 6, i32 6, i32 6>
  %1086 = getelementptr inbounds i8, i8* %957, i64 16
  %1087 = bitcast i8* %1086 to <4 x i8>*
  %1088 = load <4 x i8>, <4 x i8>* %1087, align 1
  %1089 = zext <4 x i8> %1088 to <4 x i32>
  %1090 = sub nsw <4 x i32> %1085, %1089
  %1091 = icmp slt <4 x i32> %1090, zeroinitializer
  %1092 = sub nsw <4 x i32> zeroinitializer, %1090
  %1093 = select <4 x i1> %1091, <4 x i32> %1092, <4 x i32> %1090
  %1094 = add <4 x i32> %1093, %1067
  %1095 = getelementptr inbounds i8, i8* %962, i64 20
  %1096 = bitcast i8* %1095 to <4 x i8>*
  %1097 = load <4 x i8>, <4 x i8>* %1096, align 1
  %1098 = zext <4 x i8> %1097 to <4 x i32>
  %1099 = getelementptr inbounds i8, i8* %960, i64 20
  %1100 = bitcast i8* %1099 to <4 x i8>*
  %1101 = load <4 x i8>, <4 x i8>* %1100, align 1
  %1102 = zext <4 x i8> %1101 to <4 x i32>
  %1103 = mul nuw nsw <4 x i32> %1102, %1098
  %1104 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1098
  %1105 = getelementptr inbounds i8, i8* %961, i64 20
  %1106 = bitcast i8* %1105 to <4 x i8>*
  %1107 = load <4 x i8>, <4 x i8>* %1106, align 1
  %1108 = zext <4 x i8> %1107 to <4 x i32>
  %1109 = mul nsw <4 x i32> %1104, %1108
  %1110 = add nuw nsw <4 x i32> %1103, <i32 32, i32 32, i32 32, i32 32>
  %1111 = add nsw <4 x i32> %1110, %1109
  %1112 = ashr <4 x i32> %1111, <i32 6, i32 6, i32 6, i32 6>
  %1113 = getelementptr inbounds i8, i8* %957, i64 20
  %1114 = bitcast i8* %1113 to <4 x i8>*
  %1115 = load <4 x i8>, <4 x i8>* %1114, align 1
  %1116 = zext <4 x i8> %1115 to <4 x i32>
  %1117 = sub nsw <4 x i32> %1112, %1116
  %1118 = icmp slt <4 x i32> %1117, zeroinitializer
  %1119 = sub nsw <4 x i32> zeroinitializer, %1117
  %1120 = select <4 x i1> %1118, <4 x i32> %1119, <4 x i32> %1117
  %1121 = add <4 x i32> %1120, %1094
  %1122 = getelementptr inbounds i8, i8* %962, i64 24
  %1123 = bitcast i8* %1122 to <4 x i8>*
  %1124 = load <4 x i8>, <4 x i8>* %1123, align 1
  %1125 = zext <4 x i8> %1124 to <4 x i32>
  %1126 = getelementptr inbounds i8, i8* %960, i64 24
  %1127 = bitcast i8* %1126 to <4 x i8>*
  %1128 = load <4 x i8>, <4 x i8>* %1127, align 1
  %1129 = zext <4 x i8> %1128 to <4 x i32>
  %1130 = mul nuw nsw <4 x i32> %1129, %1125
  %1131 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1125
  %1132 = getelementptr inbounds i8, i8* %961, i64 24
  %1133 = bitcast i8* %1132 to <4 x i8>*
  %1134 = load <4 x i8>, <4 x i8>* %1133, align 1
  %1135 = zext <4 x i8> %1134 to <4 x i32>
  %1136 = mul nsw <4 x i32> %1131, %1135
  %1137 = add nuw nsw <4 x i32> %1130, <i32 32, i32 32, i32 32, i32 32>
  %1138 = add nsw <4 x i32> %1137, %1136
  %1139 = ashr <4 x i32> %1138, <i32 6, i32 6, i32 6, i32 6>
  %1140 = getelementptr inbounds i8, i8* %957, i64 24
  %1141 = bitcast i8* %1140 to <4 x i8>*
  %1142 = load <4 x i8>, <4 x i8>* %1141, align 1
  %1143 = zext <4 x i8> %1142 to <4 x i32>
  %1144 = sub nsw <4 x i32> %1139, %1143
  %1145 = icmp slt <4 x i32> %1144, zeroinitializer
  %1146 = sub nsw <4 x i32> zeroinitializer, %1144
  %1147 = select <4 x i1> %1145, <4 x i32> %1146, <4 x i32> %1144
  %1148 = add <4 x i32> %1147, %1121
  %1149 = getelementptr inbounds i8, i8* %962, i64 28
  %1150 = bitcast i8* %1149 to <4 x i8>*
  %1151 = load <4 x i8>, <4 x i8>* %1150, align 1
  %1152 = zext <4 x i8> %1151 to <4 x i32>
  %1153 = getelementptr inbounds i8, i8* %960, i64 28
  %1154 = bitcast i8* %1153 to <4 x i8>*
  %1155 = load <4 x i8>, <4 x i8>* %1154, align 1
  %1156 = zext <4 x i8> %1155 to <4 x i32>
  %1157 = mul nuw nsw <4 x i32> %1156, %1152
  %1158 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1152
  %1159 = getelementptr inbounds i8, i8* %961, i64 28
  %1160 = bitcast i8* %1159 to <4 x i8>*
  %1161 = load <4 x i8>, <4 x i8>* %1160, align 1
  %1162 = zext <4 x i8> %1161 to <4 x i32>
  %1163 = mul nsw <4 x i32> %1158, %1162
  %1164 = add nuw nsw <4 x i32> %1157, <i32 32, i32 32, i32 32, i32 32>
  %1165 = add nsw <4 x i32> %1164, %1163
  %1166 = ashr <4 x i32> %1165, <i32 6, i32 6, i32 6, i32 6>
  %1167 = getelementptr inbounds i8, i8* %957, i64 28
  %1168 = bitcast i8* %1167 to <4 x i8>*
  %1169 = load <4 x i8>, <4 x i8>* %1168, align 1
  %1170 = zext <4 x i8> %1169 to <4 x i32>
  %1171 = sub nsw <4 x i32> %1166, %1170
  %1172 = icmp slt <4 x i32> %1171, zeroinitializer
  %1173 = sub nsw <4 x i32> zeroinitializer, %1171
  %1174 = select <4 x i1> %1172, <4 x i32> %1173, <4 x i32> %1171
  %1175 = add <4 x i32> %1174, %1148
  %1176 = shufflevector <4 x i32> %1175, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1177 = add <4 x i32> %1175, %1176
  %1178 = shufflevector <4 x i32> %1177, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1179 = add <4 x i32> %1177, %1178
  %1180 = extractelement <4 x i32> %1179, i32 0
  %1181 = getelementptr inbounds i8, i8* %957, i64 %11
  %1182 = getelementptr inbounds i8, i8* %960, i64 %12
  %1183 = getelementptr inbounds i8, i8* %961, i64 32
  %1184 = getelementptr inbounds i8, i8* %962, i64 %13
  %1185 = add nuw nsw i32 %959, 1
  %1186 = icmp eq i32 %1185, 16
  br i1 %1186, label %483, label %956

1187:                                             ; preds = %480, %1187
  %1188 = phi i8* [ %0, %480 ], [ %1412, %1187 ]
  %1189 = phi i32 [ 0, %480 ], [ %1411, %1187 ]
  %1190 = phi i32 [ 0, %480 ], [ %1416, %1187 ]
  %1191 = phi i8* [ %4, %480 ], [ %1413, %1187 ]
  %1192 = phi i8* [ %482, %480 ], [ %1414, %1187 ]
  %1193 = phi i8* [ %5, %480 ], [ %1415, %1187 ]
  %1194 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1189, i32 0
  %1195 = bitcast i8* %1193 to <4 x i8>*
  %1196 = load <4 x i8>, <4 x i8>* %1195, align 1
  %1197 = zext <4 x i8> %1196 to <4 x i32>
  %1198 = bitcast i8* %1191 to <4 x i8>*
  %1199 = load <4 x i8>, <4 x i8>* %1198, align 1
  %1200 = zext <4 x i8> %1199 to <4 x i32>
  %1201 = mul nuw nsw <4 x i32> %1200, %1197
  %1202 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1197
  %1203 = bitcast i8* %1192 to <4 x i8>*
  %1204 = load <4 x i8>, <4 x i8>* %1203, align 1
  %1205 = zext <4 x i8> %1204 to <4 x i32>
  %1206 = mul nsw <4 x i32> %1202, %1205
  %1207 = add nuw nsw <4 x i32> %1201, <i32 32, i32 32, i32 32, i32 32>
  %1208 = add nsw <4 x i32> %1207, %1206
  %1209 = ashr <4 x i32> %1208, <i32 6, i32 6, i32 6, i32 6>
  %1210 = bitcast i8* %1188 to <4 x i8>*
  %1211 = load <4 x i8>, <4 x i8>* %1210, align 1
  %1212 = zext <4 x i8> %1211 to <4 x i32>
  %1213 = sub nsw <4 x i32> %1209, %1212
  %1214 = icmp slt <4 x i32> %1213, zeroinitializer
  %1215 = sub nsw <4 x i32> zeroinitializer, %1213
  %1216 = select <4 x i1> %1214, <4 x i32> %1215, <4 x i32> %1213
  %1217 = add <4 x i32> %1216, %1194
  %1218 = getelementptr inbounds i8, i8* %1193, i64 4
  %1219 = bitcast i8* %1218 to <4 x i8>*
  %1220 = load <4 x i8>, <4 x i8>* %1219, align 1
  %1221 = zext <4 x i8> %1220 to <4 x i32>
  %1222 = getelementptr inbounds i8, i8* %1191, i64 4
  %1223 = bitcast i8* %1222 to <4 x i8>*
  %1224 = load <4 x i8>, <4 x i8>* %1223, align 1
  %1225 = zext <4 x i8> %1224 to <4 x i32>
  %1226 = mul nuw nsw <4 x i32> %1225, %1221
  %1227 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1221
  %1228 = getelementptr inbounds i8, i8* %1192, i64 4
  %1229 = bitcast i8* %1228 to <4 x i8>*
  %1230 = load <4 x i8>, <4 x i8>* %1229, align 1
  %1231 = zext <4 x i8> %1230 to <4 x i32>
  %1232 = mul nsw <4 x i32> %1227, %1231
  %1233 = add nuw nsw <4 x i32> %1226, <i32 32, i32 32, i32 32, i32 32>
  %1234 = add nsw <4 x i32> %1233, %1232
  %1235 = ashr <4 x i32> %1234, <i32 6, i32 6, i32 6, i32 6>
  %1236 = getelementptr inbounds i8, i8* %1188, i64 4
  %1237 = bitcast i8* %1236 to <4 x i8>*
  %1238 = load <4 x i8>, <4 x i8>* %1237, align 1
  %1239 = zext <4 x i8> %1238 to <4 x i32>
  %1240 = sub nsw <4 x i32> %1235, %1239
  %1241 = icmp slt <4 x i32> %1240, zeroinitializer
  %1242 = sub nsw <4 x i32> zeroinitializer, %1240
  %1243 = select <4 x i1> %1241, <4 x i32> %1242, <4 x i32> %1240
  %1244 = add <4 x i32> %1243, %1217
  %1245 = getelementptr inbounds i8, i8* %1193, i64 8
  %1246 = bitcast i8* %1245 to <4 x i8>*
  %1247 = load <4 x i8>, <4 x i8>* %1246, align 1
  %1248 = zext <4 x i8> %1247 to <4 x i32>
  %1249 = getelementptr inbounds i8, i8* %1191, i64 8
  %1250 = bitcast i8* %1249 to <4 x i8>*
  %1251 = load <4 x i8>, <4 x i8>* %1250, align 1
  %1252 = zext <4 x i8> %1251 to <4 x i32>
  %1253 = mul nuw nsw <4 x i32> %1252, %1248
  %1254 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1248
  %1255 = getelementptr inbounds i8, i8* %1192, i64 8
  %1256 = bitcast i8* %1255 to <4 x i8>*
  %1257 = load <4 x i8>, <4 x i8>* %1256, align 1
  %1258 = zext <4 x i8> %1257 to <4 x i32>
  %1259 = mul nsw <4 x i32> %1254, %1258
  %1260 = add nuw nsw <4 x i32> %1253, <i32 32, i32 32, i32 32, i32 32>
  %1261 = add nsw <4 x i32> %1260, %1259
  %1262 = ashr <4 x i32> %1261, <i32 6, i32 6, i32 6, i32 6>
  %1263 = getelementptr inbounds i8, i8* %1188, i64 8
  %1264 = bitcast i8* %1263 to <4 x i8>*
  %1265 = load <4 x i8>, <4 x i8>* %1264, align 1
  %1266 = zext <4 x i8> %1265 to <4 x i32>
  %1267 = sub nsw <4 x i32> %1262, %1266
  %1268 = icmp slt <4 x i32> %1267, zeroinitializer
  %1269 = sub nsw <4 x i32> zeroinitializer, %1267
  %1270 = select <4 x i1> %1268, <4 x i32> %1269, <4 x i32> %1267
  %1271 = add <4 x i32> %1270, %1244
  %1272 = getelementptr inbounds i8, i8* %1193, i64 12
  %1273 = bitcast i8* %1272 to <4 x i8>*
  %1274 = load <4 x i8>, <4 x i8>* %1273, align 1
  %1275 = zext <4 x i8> %1274 to <4 x i32>
  %1276 = getelementptr inbounds i8, i8* %1191, i64 12
  %1277 = bitcast i8* %1276 to <4 x i8>*
  %1278 = load <4 x i8>, <4 x i8>* %1277, align 1
  %1279 = zext <4 x i8> %1278 to <4 x i32>
  %1280 = mul nuw nsw <4 x i32> %1279, %1275
  %1281 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1275
  %1282 = getelementptr inbounds i8, i8* %1192, i64 12
  %1283 = bitcast i8* %1282 to <4 x i8>*
  %1284 = load <4 x i8>, <4 x i8>* %1283, align 1
  %1285 = zext <4 x i8> %1284 to <4 x i32>
  %1286 = mul nsw <4 x i32> %1281, %1285
  %1287 = add nuw nsw <4 x i32> %1280, <i32 32, i32 32, i32 32, i32 32>
  %1288 = add nsw <4 x i32> %1287, %1286
  %1289 = ashr <4 x i32> %1288, <i32 6, i32 6, i32 6, i32 6>
  %1290 = getelementptr inbounds i8, i8* %1188, i64 12
  %1291 = bitcast i8* %1290 to <4 x i8>*
  %1292 = load <4 x i8>, <4 x i8>* %1291, align 1
  %1293 = zext <4 x i8> %1292 to <4 x i32>
  %1294 = sub nsw <4 x i32> %1289, %1293
  %1295 = icmp slt <4 x i32> %1294, zeroinitializer
  %1296 = sub nsw <4 x i32> zeroinitializer, %1294
  %1297 = select <4 x i1> %1295, <4 x i32> %1296, <4 x i32> %1294
  %1298 = add <4 x i32> %1297, %1271
  %1299 = getelementptr inbounds i8, i8* %1193, i64 16
  %1300 = bitcast i8* %1299 to <4 x i8>*
  %1301 = load <4 x i8>, <4 x i8>* %1300, align 1
  %1302 = zext <4 x i8> %1301 to <4 x i32>
  %1303 = getelementptr inbounds i8, i8* %1191, i64 16
  %1304 = bitcast i8* %1303 to <4 x i8>*
  %1305 = load <4 x i8>, <4 x i8>* %1304, align 1
  %1306 = zext <4 x i8> %1305 to <4 x i32>
  %1307 = mul nuw nsw <4 x i32> %1306, %1302
  %1308 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1302
  %1309 = getelementptr inbounds i8, i8* %1192, i64 16
  %1310 = bitcast i8* %1309 to <4 x i8>*
  %1311 = load <4 x i8>, <4 x i8>* %1310, align 1
  %1312 = zext <4 x i8> %1311 to <4 x i32>
  %1313 = mul nsw <4 x i32> %1308, %1312
  %1314 = add nuw nsw <4 x i32> %1307, <i32 32, i32 32, i32 32, i32 32>
  %1315 = add nsw <4 x i32> %1314, %1313
  %1316 = ashr <4 x i32> %1315, <i32 6, i32 6, i32 6, i32 6>
  %1317 = getelementptr inbounds i8, i8* %1188, i64 16
  %1318 = bitcast i8* %1317 to <4 x i8>*
  %1319 = load <4 x i8>, <4 x i8>* %1318, align 1
  %1320 = zext <4 x i8> %1319 to <4 x i32>
  %1321 = sub nsw <4 x i32> %1316, %1320
  %1322 = icmp slt <4 x i32> %1321, zeroinitializer
  %1323 = sub nsw <4 x i32> zeroinitializer, %1321
  %1324 = select <4 x i1> %1322, <4 x i32> %1323, <4 x i32> %1321
  %1325 = add <4 x i32> %1324, %1298
  %1326 = getelementptr inbounds i8, i8* %1193, i64 20
  %1327 = bitcast i8* %1326 to <4 x i8>*
  %1328 = load <4 x i8>, <4 x i8>* %1327, align 1
  %1329 = zext <4 x i8> %1328 to <4 x i32>
  %1330 = getelementptr inbounds i8, i8* %1191, i64 20
  %1331 = bitcast i8* %1330 to <4 x i8>*
  %1332 = load <4 x i8>, <4 x i8>* %1331, align 1
  %1333 = zext <4 x i8> %1332 to <4 x i32>
  %1334 = mul nuw nsw <4 x i32> %1333, %1329
  %1335 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1329
  %1336 = getelementptr inbounds i8, i8* %1192, i64 20
  %1337 = bitcast i8* %1336 to <4 x i8>*
  %1338 = load <4 x i8>, <4 x i8>* %1337, align 1
  %1339 = zext <4 x i8> %1338 to <4 x i32>
  %1340 = mul nsw <4 x i32> %1335, %1339
  %1341 = add nuw nsw <4 x i32> %1334, <i32 32, i32 32, i32 32, i32 32>
  %1342 = add nsw <4 x i32> %1341, %1340
  %1343 = ashr <4 x i32> %1342, <i32 6, i32 6, i32 6, i32 6>
  %1344 = getelementptr inbounds i8, i8* %1188, i64 20
  %1345 = bitcast i8* %1344 to <4 x i8>*
  %1346 = load <4 x i8>, <4 x i8>* %1345, align 1
  %1347 = zext <4 x i8> %1346 to <4 x i32>
  %1348 = sub nsw <4 x i32> %1343, %1347
  %1349 = icmp slt <4 x i32> %1348, zeroinitializer
  %1350 = sub nsw <4 x i32> zeroinitializer, %1348
  %1351 = select <4 x i1> %1349, <4 x i32> %1350, <4 x i32> %1348
  %1352 = add <4 x i32> %1351, %1325
  %1353 = getelementptr inbounds i8, i8* %1193, i64 24
  %1354 = bitcast i8* %1353 to <4 x i8>*
  %1355 = load <4 x i8>, <4 x i8>* %1354, align 1
  %1356 = zext <4 x i8> %1355 to <4 x i32>
  %1357 = getelementptr inbounds i8, i8* %1191, i64 24
  %1358 = bitcast i8* %1357 to <4 x i8>*
  %1359 = load <4 x i8>, <4 x i8>* %1358, align 1
  %1360 = zext <4 x i8> %1359 to <4 x i32>
  %1361 = mul nuw nsw <4 x i32> %1360, %1356
  %1362 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1356
  %1363 = getelementptr inbounds i8, i8* %1192, i64 24
  %1364 = bitcast i8* %1363 to <4 x i8>*
  %1365 = load <4 x i8>, <4 x i8>* %1364, align 1
  %1366 = zext <4 x i8> %1365 to <4 x i32>
  %1367 = mul nsw <4 x i32> %1362, %1366
  %1368 = add nuw nsw <4 x i32> %1361, <i32 32, i32 32, i32 32, i32 32>
  %1369 = add nsw <4 x i32> %1368, %1367
  %1370 = ashr <4 x i32> %1369, <i32 6, i32 6, i32 6, i32 6>
  %1371 = getelementptr inbounds i8, i8* %1188, i64 24
  %1372 = bitcast i8* %1371 to <4 x i8>*
  %1373 = load <4 x i8>, <4 x i8>* %1372, align 1
  %1374 = zext <4 x i8> %1373 to <4 x i32>
  %1375 = sub nsw <4 x i32> %1370, %1374
  %1376 = icmp slt <4 x i32> %1375, zeroinitializer
  %1377 = sub nsw <4 x i32> zeroinitializer, %1375
  %1378 = select <4 x i1> %1376, <4 x i32> %1377, <4 x i32> %1375
  %1379 = add <4 x i32> %1378, %1352
  %1380 = getelementptr inbounds i8, i8* %1193, i64 28
  %1381 = bitcast i8* %1380 to <4 x i8>*
  %1382 = load <4 x i8>, <4 x i8>* %1381, align 1
  %1383 = zext <4 x i8> %1382 to <4 x i32>
  %1384 = getelementptr inbounds i8, i8* %1191, i64 28
  %1385 = bitcast i8* %1384 to <4 x i8>*
  %1386 = load <4 x i8>, <4 x i8>* %1385, align 1
  %1387 = zext <4 x i8> %1386 to <4 x i32>
  %1388 = mul nuw nsw <4 x i32> %1387, %1383
  %1389 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1383
  %1390 = getelementptr inbounds i8, i8* %1192, i64 28
  %1391 = bitcast i8* %1390 to <4 x i8>*
  %1392 = load <4 x i8>, <4 x i8>* %1391, align 1
  %1393 = zext <4 x i8> %1392 to <4 x i32>
  %1394 = mul nsw <4 x i32> %1389, %1393
  %1395 = add nuw nsw <4 x i32> %1388, <i32 32, i32 32, i32 32, i32 32>
  %1396 = add nsw <4 x i32> %1395, %1394
  %1397 = ashr <4 x i32> %1396, <i32 6, i32 6, i32 6, i32 6>
  %1398 = getelementptr inbounds i8, i8* %1188, i64 28
  %1399 = bitcast i8* %1398 to <4 x i8>*
  %1400 = load <4 x i8>, <4 x i8>* %1399, align 1
  %1401 = zext <4 x i8> %1400 to <4 x i32>
  %1402 = sub nsw <4 x i32> %1397, %1401
  %1403 = icmp slt <4 x i32> %1402, zeroinitializer
  %1404 = sub nsw <4 x i32> zeroinitializer, %1402
  %1405 = select <4 x i1> %1403, <4 x i32> %1404, <4 x i32> %1402
  %1406 = add <4 x i32> %1405, %1379
  %1407 = shufflevector <4 x i32> %1406, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1408 = add <4 x i32> %1406, %1407
  %1409 = shufflevector <4 x i32> %1408, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1410 = add <4 x i32> %1408, %1409
  %1411 = extractelement <4 x i32> %1410, i32 0
  %1412 = getelementptr inbounds i8, i8* %1188, i64 %11
  %1413 = getelementptr inbounds i8, i8* %1191, i64 32
  %1414 = getelementptr inbounds i8, i8* %1192, i64 %12
  %1415 = getelementptr inbounds i8, i8* %1193, i64 %13
  %1416 = add nuw nsw i32 %1190, 1
  %1417 = icmp eq i32 %1416, 16
  br i1 %1417, label %1418, label %1187

1418:                                             ; preds = %1187
  %1419 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %1411, i32* %1419, align 4
  %1420 = getelementptr inbounds i8*, i8** %2, i64 2
  %1421 = load i8*, i8** %1420, align 8
  br label %1422

1422:                                             ; preds = %1418, %1422
  %1423 = phi i8* [ %0, %1418 ], [ %1647, %1422 ]
  %1424 = phi i32 [ 0, %1418 ], [ %1646, %1422 ]
  %1425 = phi i32 [ 0, %1418 ], [ %1651, %1422 ]
  %1426 = phi i8* [ %4, %1418 ], [ %1648, %1422 ]
  %1427 = phi i8* [ %1421, %1418 ], [ %1649, %1422 ]
  %1428 = phi i8* [ %5, %1418 ], [ %1650, %1422 ]
  %1429 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1424, i32 0
  %1430 = bitcast i8* %1428 to <4 x i8>*
  %1431 = load <4 x i8>, <4 x i8>* %1430, align 1
  %1432 = zext <4 x i8> %1431 to <4 x i32>
  %1433 = bitcast i8* %1426 to <4 x i8>*
  %1434 = load <4 x i8>, <4 x i8>* %1433, align 1
  %1435 = zext <4 x i8> %1434 to <4 x i32>
  %1436 = mul nuw nsw <4 x i32> %1435, %1432
  %1437 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1432
  %1438 = bitcast i8* %1427 to <4 x i8>*
  %1439 = load <4 x i8>, <4 x i8>* %1438, align 1
  %1440 = zext <4 x i8> %1439 to <4 x i32>
  %1441 = mul nsw <4 x i32> %1437, %1440
  %1442 = add nuw nsw <4 x i32> %1436, <i32 32, i32 32, i32 32, i32 32>
  %1443 = add nsw <4 x i32> %1442, %1441
  %1444 = ashr <4 x i32> %1443, <i32 6, i32 6, i32 6, i32 6>
  %1445 = bitcast i8* %1423 to <4 x i8>*
  %1446 = load <4 x i8>, <4 x i8>* %1445, align 1
  %1447 = zext <4 x i8> %1446 to <4 x i32>
  %1448 = sub nsw <4 x i32> %1444, %1447
  %1449 = icmp slt <4 x i32> %1448, zeroinitializer
  %1450 = sub nsw <4 x i32> zeroinitializer, %1448
  %1451 = select <4 x i1> %1449, <4 x i32> %1450, <4 x i32> %1448
  %1452 = add <4 x i32> %1451, %1429
  %1453 = getelementptr inbounds i8, i8* %1428, i64 4
  %1454 = bitcast i8* %1453 to <4 x i8>*
  %1455 = load <4 x i8>, <4 x i8>* %1454, align 1
  %1456 = zext <4 x i8> %1455 to <4 x i32>
  %1457 = getelementptr inbounds i8, i8* %1426, i64 4
  %1458 = bitcast i8* %1457 to <4 x i8>*
  %1459 = load <4 x i8>, <4 x i8>* %1458, align 1
  %1460 = zext <4 x i8> %1459 to <4 x i32>
  %1461 = mul nuw nsw <4 x i32> %1460, %1456
  %1462 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1456
  %1463 = getelementptr inbounds i8, i8* %1427, i64 4
  %1464 = bitcast i8* %1463 to <4 x i8>*
  %1465 = load <4 x i8>, <4 x i8>* %1464, align 1
  %1466 = zext <4 x i8> %1465 to <4 x i32>
  %1467 = mul nsw <4 x i32> %1462, %1466
  %1468 = add nuw nsw <4 x i32> %1461, <i32 32, i32 32, i32 32, i32 32>
  %1469 = add nsw <4 x i32> %1468, %1467
  %1470 = ashr <4 x i32> %1469, <i32 6, i32 6, i32 6, i32 6>
  %1471 = getelementptr inbounds i8, i8* %1423, i64 4
  %1472 = bitcast i8* %1471 to <4 x i8>*
  %1473 = load <4 x i8>, <4 x i8>* %1472, align 1
  %1474 = zext <4 x i8> %1473 to <4 x i32>
  %1475 = sub nsw <4 x i32> %1470, %1474
  %1476 = icmp slt <4 x i32> %1475, zeroinitializer
  %1477 = sub nsw <4 x i32> zeroinitializer, %1475
  %1478 = select <4 x i1> %1476, <4 x i32> %1477, <4 x i32> %1475
  %1479 = add <4 x i32> %1478, %1452
  %1480 = getelementptr inbounds i8, i8* %1428, i64 8
  %1481 = bitcast i8* %1480 to <4 x i8>*
  %1482 = load <4 x i8>, <4 x i8>* %1481, align 1
  %1483 = zext <4 x i8> %1482 to <4 x i32>
  %1484 = getelementptr inbounds i8, i8* %1426, i64 8
  %1485 = bitcast i8* %1484 to <4 x i8>*
  %1486 = load <4 x i8>, <4 x i8>* %1485, align 1
  %1487 = zext <4 x i8> %1486 to <4 x i32>
  %1488 = mul nuw nsw <4 x i32> %1487, %1483
  %1489 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1483
  %1490 = getelementptr inbounds i8, i8* %1427, i64 8
  %1491 = bitcast i8* %1490 to <4 x i8>*
  %1492 = load <4 x i8>, <4 x i8>* %1491, align 1
  %1493 = zext <4 x i8> %1492 to <4 x i32>
  %1494 = mul nsw <4 x i32> %1489, %1493
  %1495 = add nuw nsw <4 x i32> %1488, <i32 32, i32 32, i32 32, i32 32>
  %1496 = add nsw <4 x i32> %1495, %1494
  %1497 = ashr <4 x i32> %1496, <i32 6, i32 6, i32 6, i32 6>
  %1498 = getelementptr inbounds i8, i8* %1423, i64 8
  %1499 = bitcast i8* %1498 to <4 x i8>*
  %1500 = load <4 x i8>, <4 x i8>* %1499, align 1
  %1501 = zext <4 x i8> %1500 to <4 x i32>
  %1502 = sub nsw <4 x i32> %1497, %1501
  %1503 = icmp slt <4 x i32> %1502, zeroinitializer
  %1504 = sub nsw <4 x i32> zeroinitializer, %1502
  %1505 = select <4 x i1> %1503, <4 x i32> %1504, <4 x i32> %1502
  %1506 = add <4 x i32> %1505, %1479
  %1507 = getelementptr inbounds i8, i8* %1428, i64 12
  %1508 = bitcast i8* %1507 to <4 x i8>*
  %1509 = load <4 x i8>, <4 x i8>* %1508, align 1
  %1510 = zext <4 x i8> %1509 to <4 x i32>
  %1511 = getelementptr inbounds i8, i8* %1426, i64 12
  %1512 = bitcast i8* %1511 to <4 x i8>*
  %1513 = load <4 x i8>, <4 x i8>* %1512, align 1
  %1514 = zext <4 x i8> %1513 to <4 x i32>
  %1515 = mul nuw nsw <4 x i32> %1514, %1510
  %1516 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1510
  %1517 = getelementptr inbounds i8, i8* %1427, i64 12
  %1518 = bitcast i8* %1517 to <4 x i8>*
  %1519 = load <4 x i8>, <4 x i8>* %1518, align 1
  %1520 = zext <4 x i8> %1519 to <4 x i32>
  %1521 = mul nsw <4 x i32> %1516, %1520
  %1522 = add nuw nsw <4 x i32> %1515, <i32 32, i32 32, i32 32, i32 32>
  %1523 = add nsw <4 x i32> %1522, %1521
  %1524 = ashr <4 x i32> %1523, <i32 6, i32 6, i32 6, i32 6>
  %1525 = getelementptr inbounds i8, i8* %1423, i64 12
  %1526 = bitcast i8* %1525 to <4 x i8>*
  %1527 = load <4 x i8>, <4 x i8>* %1526, align 1
  %1528 = zext <4 x i8> %1527 to <4 x i32>
  %1529 = sub nsw <4 x i32> %1524, %1528
  %1530 = icmp slt <4 x i32> %1529, zeroinitializer
  %1531 = sub nsw <4 x i32> zeroinitializer, %1529
  %1532 = select <4 x i1> %1530, <4 x i32> %1531, <4 x i32> %1529
  %1533 = add <4 x i32> %1532, %1506
  %1534 = getelementptr inbounds i8, i8* %1428, i64 16
  %1535 = bitcast i8* %1534 to <4 x i8>*
  %1536 = load <4 x i8>, <4 x i8>* %1535, align 1
  %1537 = zext <4 x i8> %1536 to <4 x i32>
  %1538 = getelementptr inbounds i8, i8* %1426, i64 16
  %1539 = bitcast i8* %1538 to <4 x i8>*
  %1540 = load <4 x i8>, <4 x i8>* %1539, align 1
  %1541 = zext <4 x i8> %1540 to <4 x i32>
  %1542 = mul nuw nsw <4 x i32> %1541, %1537
  %1543 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1537
  %1544 = getelementptr inbounds i8, i8* %1427, i64 16
  %1545 = bitcast i8* %1544 to <4 x i8>*
  %1546 = load <4 x i8>, <4 x i8>* %1545, align 1
  %1547 = zext <4 x i8> %1546 to <4 x i32>
  %1548 = mul nsw <4 x i32> %1543, %1547
  %1549 = add nuw nsw <4 x i32> %1542, <i32 32, i32 32, i32 32, i32 32>
  %1550 = add nsw <4 x i32> %1549, %1548
  %1551 = ashr <4 x i32> %1550, <i32 6, i32 6, i32 6, i32 6>
  %1552 = getelementptr inbounds i8, i8* %1423, i64 16
  %1553 = bitcast i8* %1552 to <4 x i8>*
  %1554 = load <4 x i8>, <4 x i8>* %1553, align 1
  %1555 = zext <4 x i8> %1554 to <4 x i32>
  %1556 = sub nsw <4 x i32> %1551, %1555
  %1557 = icmp slt <4 x i32> %1556, zeroinitializer
  %1558 = sub nsw <4 x i32> zeroinitializer, %1556
  %1559 = select <4 x i1> %1557, <4 x i32> %1558, <4 x i32> %1556
  %1560 = add <4 x i32> %1559, %1533
  %1561 = getelementptr inbounds i8, i8* %1428, i64 20
  %1562 = bitcast i8* %1561 to <4 x i8>*
  %1563 = load <4 x i8>, <4 x i8>* %1562, align 1
  %1564 = zext <4 x i8> %1563 to <4 x i32>
  %1565 = getelementptr inbounds i8, i8* %1426, i64 20
  %1566 = bitcast i8* %1565 to <4 x i8>*
  %1567 = load <4 x i8>, <4 x i8>* %1566, align 1
  %1568 = zext <4 x i8> %1567 to <4 x i32>
  %1569 = mul nuw nsw <4 x i32> %1568, %1564
  %1570 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1564
  %1571 = getelementptr inbounds i8, i8* %1427, i64 20
  %1572 = bitcast i8* %1571 to <4 x i8>*
  %1573 = load <4 x i8>, <4 x i8>* %1572, align 1
  %1574 = zext <4 x i8> %1573 to <4 x i32>
  %1575 = mul nsw <4 x i32> %1570, %1574
  %1576 = add nuw nsw <4 x i32> %1569, <i32 32, i32 32, i32 32, i32 32>
  %1577 = add nsw <4 x i32> %1576, %1575
  %1578 = ashr <4 x i32> %1577, <i32 6, i32 6, i32 6, i32 6>
  %1579 = getelementptr inbounds i8, i8* %1423, i64 20
  %1580 = bitcast i8* %1579 to <4 x i8>*
  %1581 = load <4 x i8>, <4 x i8>* %1580, align 1
  %1582 = zext <4 x i8> %1581 to <4 x i32>
  %1583 = sub nsw <4 x i32> %1578, %1582
  %1584 = icmp slt <4 x i32> %1583, zeroinitializer
  %1585 = sub nsw <4 x i32> zeroinitializer, %1583
  %1586 = select <4 x i1> %1584, <4 x i32> %1585, <4 x i32> %1583
  %1587 = add <4 x i32> %1586, %1560
  %1588 = getelementptr inbounds i8, i8* %1428, i64 24
  %1589 = bitcast i8* %1588 to <4 x i8>*
  %1590 = load <4 x i8>, <4 x i8>* %1589, align 1
  %1591 = zext <4 x i8> %1590 to <4 x i32>
  %1592 = getelementptr inbounds i8, i8* %1426, i64 24
  %1593 = bitcast i8* %1592 to <4 x i8>*
  %1594 = load <4 x i8>, <4 x i8>* %1593, align 1
  %1595 = zext <4 x i8> %1594 to <4 x i32>
  %1596 = mul nuw nsw <4 x i32> %1595, %1591
  %1597 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1591
  %1598 = getelementptr inbounds i8, i8* %1427, i64 24
  %1599 = bitcast i8* %1598 to <4 x i8>*
  %1600 = load <4 x i8>, <4 x i8>* %1599, align 1
  %1601 = zext <4 x i8> %1600 to <4 x i32>
  %1602 = mul nsw <4 x i32> %1597, %1601
  %1603 = add nuw nsw <4 x i32> %1596, <i32 32, i32 32, i32 32, i32 32>
  %1604 = add nsw <4 x i32> %1603, %1602
  %1605 = ashr <4 x i32> %1604, <i32 6, i32 6, i32 6, i32 6>
  %1606 = getelementptr inbounds i8, i8* %1423, i64 24
  %1607 = bitcast i8* %1606 to <4 x i8>*
  %1608 = load <4 x i8>, <4 x i8>* %1607, align 1
  %1609 = zext <4 x i8> %1608 to <4 x i32>
  %1610 = sub nsw <4 x i32> %1605, %1609
  %1611 = icmp slt <4 x i32> %1610, zeroinitializer
  %1612 = sub nsw <4 x i32> zeroinitializer, %1610
  %1613 = select <4 x i1> %1611, <4 x i32> %1612, <4 x i32> %1610
  %1614 = add <4 x i32> %1613, %1587
  %1615 = getelementptr inbounds i8, i8* %1428, i64 28
  %1616 = bitcast i8* %1615 to <4 x i8>*
  %1617 = load <4 x i8>, <4 x i8>* %1616, align 1
  %1618 = zext <4 x i8> %1617 to <4 x i32>
  %1619 = getelementptr inbounds i8, i8* %1426, i64 28
  %1620 = bitcast i8* %1619 to <4 x i8>*
  %1621 = load <4 x i8>, <4 x i8>* %1620, align 1
  %1622 = zext <4 x i8> %1621 to <4 x i32>
  %1623 = mul nuw nsw <4 x i32> %1622, %1618
  %1624 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1618
  %1625 = getelementptr inbounds i8, i8* %1427, i64 28
  %1626 = bitcast i8* %1625 to <4 x i8>*
  %1627 = load <4 x i8>, <4 x i8>* %1626, align 1
  %1628 = zext <4 x i8> %1627 to <4 x i32>
  %1629 = mul nsw <4 x i32> %1624, %1628
  %1630 = add nuw nsw <4 x i32> %1623, <i32 32, i32 32, i32 32, i32 32>
  %1631 = add nsw <4 x i32> %1630, %1629
  %1632 = ashr <4 x i32> %1631, <i32 6, i32 6, i32 6, i32 6>
  %1633 = getelementptr inbounds i8, i8* %1423, i64 28
  %1634 = bitcast i8* %1633 to <4 x i8>*
  %1635 = load <4 x i8>, <4 x i8>* %1634, align 1
  %1636 = zext <4 x i8> %1635 to <4 x i32>
  %1637 = sub nsw <4 x i32> %1632, %1636
  %1638 = icmp slt <4 x i32> %1637, zeroinitializer
  %1639 = sub nsw <4 x i32> zeroinitializer, %1637
  %1640 = select <4 x i1> %1638, <4 x i32> %1639, <4 x i32> %1637
  %1641 = add <4 x i32> %1640, %1614
  %1642 = shufflevector <4 x i32> %1641, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1643 = add <4 x i32> %1641, %1642
  %1644 = shufflevector <4 x i32> %1643, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1645 = add <4 x i32> %1643, %1644
  %1646 = extractelement <4 x i32> %1645, i32 0
  %1647 = getelementptr inbounds i8, i8* %1423, i64 %11
  %1648 = getelementptr inbounds i8, i8* %1426, i64 32
  %1649 = getelementptr inbounds i8, i8* %1427, i64 %12
  %1650 = getelementptr inbounds i8, i8* %1428, i64 %13
  %1651 = add nuw nsw i32 %1425, 1
  %1652 = icmp eq i32 %1651, 16
  br i1 %1652, label %1653, label %1422

1653:                                             ; preds = %1422
  %1654 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %1646, i32* %1654, align 4
  %1655 = getelementptr inbounds i8*, i8** %2, i64 3
  %1656 = load i8*, i8** %1655, align 8
  br label %1657

1657:                                             ; preds = %1653, %1657
  %1658 = phi i8* [ %0, %1653 ], [ %1882, %1657 ]
  %1659 = phi i32 [ 0, %1653 ], [ %1881, %1657 ]
  %1660 = phi i32 [ 0, %1653 ], [ %1886, %1657 ]
  %1661 = phi i8* [ %4, %1653 ], [ %1883, %1657 ]
  %1662 = phi i8* [ %1656, %1653 ], [ %1884, %1657 ]
  %1663 = phi i8* [ %5, %1653 ], [ %1885, %1657 ]
  %1664 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1659, i32 0
  %1665 = bitcast i8* %1663 to <4 x i8>*
  %1666 = load <4 x i8>, <4 x i8>* %1665, align 1
  %1667 = zext <4 x i8> %1666 to <4 x i32>
  %1668 = bitcast i8* %1661 to <4 x i8>*
  %1669 = load <4 x i8>, <4 x i8>* %1668, align 1
  %1670 = zext <4 x i8> %1669 to <4 x i32>
  %1671 = mul nuw nsw <4 x i32> %1670, %1667
  %1672 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1667
  %1673 = bitcast i8* %1662 to <4 x i8>*
  %1674 = load <4 x i8>, <4 x i8>* %1673, align 1
  %1675 = zext <4 x i8> %1674 to <4 x i32>
  %1676 = mul nsw <4 x i32> %1672, %1675
  %1677 = add nuw nsw <4 x i32> %1671, <i32 32, i32 32, i32 32, i32 32>
  %1678 = add nsw <4 x i32> %1677, %1676
  %1679 = ashr <4 x i32> %1678, <i32 6, i32 6, i32 6, i32 6>
  %1680 = bitcast i8* %1658 to <4 x i8>*
  %1681 = load <4 x i8>, <4 x i8>* %1680, align 1
  %1682 = zext <4 x i8> %1681 to <4 x i32>
  %1683 = sub nsw <4 x i32> %1679, %1682
  %1684 = icmp slt <4 x i32> %1683, zeroinitializer
  %1685 = sub nsw <4 x i32> zeroinitializer, %1683
  %1686 = select <4 x i1> %1684, <4 x i32> %1685, <4 x i32> %1683
  %1687 = add <4 x i32> %1686, %1664
  %1688 = getelementptr inbounds i8, i8* %1663, i64 4
  %1689 = bitcast i8* %1688 to <4 x i8>*
  %1690 = load <4 x i8>, <4 x i8>* %1689, align 1
  %1691 = zext <4 x i8> %1690 to <4 x i32>
  %1692 = getelementptr inbounds i8, i8* %1661, i64 4
  %1693 = bitcast i8* %1692 to <4 x i8>*
  %1694 = load <4 x i8>, <4 x i8>* %1693, align 1
  %1695 = zext <4 x i8> %1694 to <4 x i32>
  %1696 = mul nuw nsw <4 x i32> %1695, %1691
  %1697 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1691
  %1698 = getelementptr inbounds i8, i8* %1662, i64 4
  %1699 = bitcast i8* %1698 to <4 x i8>*
  %1700 = load <4 x i8>, <4 x i8>* %1699, align 1
  %1701 = zext <4 x i8> %1700 to <4 x i32>
  %1702 = mul nsw <4 x i32> %1697, %1701
  %1703 = add nuw nsw <4 x i32> %1696, <i32 32, i32 32, i32 32, i32 32>
  %1704 = add nsw <4 x i32> %1703, %1702
  %1705 = ashr <4 x i32> %1704, <i32 6, i32 6, i32 6, i32 6>
  %1706 = getelementptr inbounds i8, i8* %1658, i64 4
  %1707 = bitcast i8* %1706 to <4 x i8>*
  %1708 = load <4 x i8>, <4 x i8>* %1707, align 1
  %1709 = zext <4 x i8> %1708 to <4 x i32>
  %1710 = sub nsw <4 x i32> %1705, %1709
  %1711 = icmp slt <4 x i32> %1710, zeroinitializer
  %1712 = sub nsw <4 x i32> zeroinitializer, %1710
  %1713 = select <4 x i1> %1711, <4 x i32> %1712, <4 x i32> %1710
  %1714 = add <4 x i32> %1713, %1687
  %1715 = getelementptr inbounds i8, i8* %1663, i64 8
  %1716 = bitcast i8* %1715 to <4 x i8>*
  %1717 = load <4 x i8>, <4 x i8>* %1716, align 1
  %1718 = zext <4 x i8> %1717 to <4 x i32>
  %1719 = getelementptr inbounds i8, i8* %1661, i64 8
  %1720 = bitcast i8* %1719 to <4 x i8>*
  %1721 = load <4 x i8>, <4 x i8>* %1720, align 1
  %1722 = zext <4 x i8> %1721 to <4 x i32>
  %1723 = mul nuw nsw <4 x i32> %1722, %1718
  %1724 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1718
  %1725 = getelementptr inbounds i8, i8* %1662, i64 8
  %1726 = bitcast i8* %1725 to <4 x i8>*
  %1727 = load <4 x i8>, <4 x i8>* %1726, align 1
  %1728 = zext <4 x i8> %1727 to <4 x i32>
  %1729 = mul nsw <4 x i32> %1724, %1728
  %1730 = add nuw nsw <4 x i32> %1723, <i32 32, i32 32, i32 32, i32 32>
  %1731 = add nsw <4 x i32> %1730, %1729
  %1732 = ashr <4 x i32> %1731, <i32 6, i32 6, i32 6, i32 6>
  %1733 = getelementptr inbounds i8, i8* %1658, i64 8
  %1734 = bitcast i8* %1733 to <4 x i8>*
  %1735 = load <4 x i8>, <4 x i8>* %1734, align 1
  %1736 = zext <4 x i8> %1735 to <4 x i32>
  %1737 = sub nsw <4 x i32> %1732, %1736
  %1738 = icmp slt <4 x i32> %1737, zeroinitializer
  %1739 = sub nsw <4 x i32> zeroinitializer, %1737
  %1740 = select <4 x i1> %1738, <4 x i32> %1739, <4 x i32> %1737
  %1741 = add <4 x i32> %1740, %1714
  %1742 = getelementptr inbounds i8, i8* %1663, i64 12
  %1743 = bitcast i8* %1742 to <4 x i8>*
  %1744 = load <4 x i8>, <4 x i8>* %1743, align 1
  %1745 = zext <4 x i8> %1744 to <4 x i32>
  %1746 = getelementptr inbounds i8, i8* %1661, i64 12
  %1747 = bitcast i8* %1746 to <4 x i8>*
  %1748 = load <4 x i8>, <4 x i8>* %1747, align 1
  %1749 = zext <4 x i8> %1748 to <4 x i32>
  %1750 = mul nuw nsw <4 x i32> %1749, %1745
  %1751 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1745
  %1752 = getelementptr inbounds i8, i8* %1662, i64 12
  %1753 = bitcast i8* %1752 to <4 x i8>*
  %1754 = load <4 x i8>, <4 x i8>* %1753, align 1
  %1755 = zext <4 x i8> %1754 to <4 x i32>
  %1756 = mul nsw <4 x i32> %1751, %1755
  %1757 = add nuw nsw <4 x i32> %1750, <i32 32, i32 32, i32 32, i32 32>
  %1758 = add nsw <4 x i32> %1757, %1756
  %1759 = ashr <4 x i32> %1758, <i32 6, i32 6, i32 6, i32 6>
  %1760 = getelementptr inbounds i8, i8* %1658, i64 12
  %1761 = bitcast i8* %1760 to <4 x i8>*
  %1762 = load <4 x i8>, <4 x i8>* %1761, align 1
  %1763 = zext <4 x i8> %1762 to <4 x i32>
  %1764 = sub nsw <4 x i32> %1759, %1763
  %1765 = icmp slt <4 x i32> %1764, zeroinitializer
  %1766 = sub nsw <4 x i32> zeroinitializer, %1764
  %1767 = select <4 x i1> %1765, <4 x i32> %1766, <4 x i32> %1764
  %1768 = add <4 x i32> %1767, %1741
  %1769 = getelementptr inbounds i8, i8* %1663, i64 16
  %1770 = bitcast i8* %1769 to <4 x i8>*
  %1771 = load <4 x i8>, <4 x i8>* %1770, align 1
  %1772 = zext <4 x i8> %1771 to <4 x i32>
  %1773 = getelementptr inbounds i8, i8* %1661, i64 16
  %1774 = bitcast i8* %1773 to <4 x i8>*
  %1775 = load <4 x i8>, <4 x i8>* %1774, align 1
  %1776 = zext <4 x i8> %1775 to <4 x i32>
  %1777 = mul nuw nsw <4 x i32> %1776, %1772
  %1778 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1772
  %1779 = getelementptr inbounds i8, i8* %1662, i64 16
  %1780 = bitcast i8* %1779 to <4 x i8>*
  %1781 = load <4 x i8>, <4 x i8>* %1780, align 1
  %1782 = zext <4 x i8> %1781 to <4 x i32>
  %1783 = mul nsw <4 x i32> %1778, %1782
  %1784 = add nuw nsw <4 x i32> %1777, <i32 32, i32 32, i32 32, i32 32>
  %1785 = add nsw <4 x i32> %1784, %1783
  %1786 = ashr <4 x i32> %1785, <i32 6, i32 6, i32 6, i32 6>
  %1787 = getelementptr inbounds i8, i8* %1658, i64 16
  %1788 = bitcast i8* %1787 to <4 x i8>*
  %1789 = load <4 x i8>, <4 x i8>* %1788, align 1
  %1790 = zext <4 x i8> %1789 to <4 x i32>
  %1791 = sub nsw <4 x i32> %1786, %1790
  %1792 = icmp slt <4 x i32> %1791, zeroinitializer
  %1793 = sub nsw <4 x i32> zeroinitializer, %1791
  %1794 = select <4 x i1> %1792, <4 x i32> %1793, <4 x i32> %1791
  %1795 = add <4 x i32> %1794, %1768
  %1796 = getelementptr inbounds i8, i8* %1663, i64 20
  %1797 = bitcast i8* %1796 to <4 x i8>*
  %1798 = load <4 x i8>, <4 x i8>* %1797, align 1
  %1799 = zext <4 x i8> %1798 to <4 x i32>
  %1800 = getelementptr inbounds i8, i8* %1661, i64 20
  %1801 = bitcast i8* %1800 to <4 x i8>*
  %1802 = load <4 x i8>, <4 x i8>* %1801, align 1
  %1803 = zext <4 x i8> %1802 to <4 x i32>
  %1804 = mul nuw nsw <4 x i32> %1803, %1799
  %1805 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1799
  %1806 = getelementptr inbounds i8, i8* %1662, i64 20
  %1807 = bitcast i8* %1806 to <4 x i8>*
  %1808 = load <4 x i8>, <4 x i8>* %1807, align 1
  %1809 = zext <4 x i8> %1808 to <4 x i32>
  %1810 = mul nsw <4 x i32> %1805, %1809
  %1811 = add nuw nsw <4 x i32> %1804, <i32 32, i32 32, i32 32, i32 32>
  %1812 = add nsw <4 x i32> %1811, %1810
  %1813 = ashr <4 x i32> %1812, <i32 6, i32 6, i32 6, i32 6>
  %1814 = getelementptr inbounds i8, i8* %1658, i64 20
  %1815 = bitcast i8* %1814 to <4 x i8>*
  %1816 = load <4 x i8>, <4 x i8>* %1815, align 1
  %1817 = zext <4 x i8> %1816 to <4 x i32>
  %1818 = sub nsw <4 x i32> %1813, %1817
  %1819 = icmp slt <4 x i32> %1818, zeroinitializer
  %1820 = sub nsw <4 x i32> zeroinitializer, %1818
  %1821 = select <4 x i1> %1819, <4 x i32> %1820, <4 x i32> %1818
  %1822 = add <4 x i32> %1821, %1795
  %1823 = getelementptr inbounds i8, i8* %1663, i64 24
  %1824 = bitcast i8* %1823 to <4 x i8>*
  %1825 = load <4 x i8>, <4 x i8>* %1824, align 1
  %1826 = zext <4 x i8> %1825 to <4 x i32>
  %1827 = getelementptr inbounds i8, i8* %1661, i64 24
  %1828 = bitcast i8* %1827 to <4 x i8>*
  %1829 = load <4 x i8>, <4 x i8>* %1828, align 1
  %1830 = zext <4 x i8> %1829 to <4 x i32>
  %1831 = mul nuw nsw <4 x i32> %1830, %1826
  %1832 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1826
  %1833 = getelementptr inbounds i8, i8* %1662, i64 24
  %1834 = bitcast i8* %1833 to <4 x i8>*
  %1835 = load <4 x i8>, <4 x i8>* %1834, align 1
  %1836 = zext <4 x i8> %1835 to <4 x i32>
  %1837 = mul nsw <4 x i32> %1832, %1836
  %1838 = add nuw nsw <4 x i32> %1831, <i32 32, i32 32, i32 32, i32 32>
  %1839 = add nsw <4 x i32> %1838, %1837
  %1840 = ashr <4 x i32> %1839, <i32 6, i32 6, i32 6, i32 6>
  %1841 = getelementptr inbounds i8, i8* %1658, i64 24
  %1842 = bitcast i8* %1841 to <4 x i8>*
  %1843 = load <4 x i8>, <4 x i8>* %1842, align 1
  %1844 = zext <4 x i8> %1843 to <4 x i32>
  %1845 = sub nsw <4 x i32> %1840, %1844
  %1846 = icmp slt <4 x i32> %1845, zeroinitializer
  %1847 = sub nsw <4 x i32> zeroinitializer, %1845
  %1848 = select <4 x i1> %1846, <4 x i32> %1847, <4 x i32> %1845
  %1849 = add <4 x i32> %1848, %1822
  %1850 = getelementptr inbounds i8, i8* %1663, i64 28
  %1851 = bitcast i8* %1850 to <4 x i8>*
  %1852 = load <4 x i8>, <4 x i8>* %1851, align 1
  %1853 = zext <4 x i8> %1852 to <4 x i32>
  %1854 = getelementptr inbounds i8, i8* %1661, i64 28
  %1855 = bitcast i8* %1854 to <4 x i8>*
  %1856 = load <4 x i8>, <4 x i8>* %1855, align 1
  %1857 = zext <4 x i8> %1856 to <4 x i32>
  %1858 = mul nuw nsw <4 x i32> %1857, %1853
  %1859 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1853
  %1860 = getelementptr inbounds i8, i8* %1662, i64 28
  %1861 = bitcast i8* %1860 to <4 x i8>*
  %1862 = load <4 x i8>, <4 x i8>* %1861, align 1
  %1863 = zext <4 x i8> %1862 to <4 x i32>
  %1864 = mul nsw <4 x i32> %1859, %1863
  %1865 = add nuw nsw <4 x i32> %1858, <i32 32, i32 32, i32 32, i32 32>
  %1866 = add nsw <4 x i32> %1865, %1864
  %1867 = ashr <4 x i32> %1866, <i32 6, i32 6, i32 6, i32 6>
  %1868 = getelementptr inbounds i8, i8* %1658, i64 28
  %1869 = bitcast i8* %1868 to <4 x i8>*
  %1870 = load <4 x i8>, <4 x i8>* %1869, align 1
  %1871 = zext <4 x i8> %1870 to <4 x i32>
  %1872 = sub nsw <4 x i32> %1867, %1871
  %1873 = icmp slt <4 x i32> %1872, zeroinitializer
  %1874 = sub nsw <4 x i32> zeroinitializer, %1872
  %1875 = select <4 x i1> %1873, <4 x i32> %1874, <4 x i32> %1872
  %1876 = add <4 x i32> %1875, %1849
  %1877 = shufflevector <4 x i32> %1876, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1878 = add <4 x i32> %1876, %1877
  %1879 = shufflevector <4 x i32> %1878, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1880 = add <4 x i32> %1878, %1879
  %1881 = extractelement <4 x i32> %1880, i32 0
  %1882 = getelementptr inbounds i8, i8* %1658, i64 %11
  %1883 = getelementptr inbounds i8, i8* %1661, i64 32
  %1884 = getelementptr inbounds i8, i8* %1662, i64 %12
  %1885 = getelementptr inbounds i8, i8* %1663, i64 %13
  %1886 = add nuw nsw i32 %1660, 1
  %1887 = icmp eq i32 %1886, 16
  br i1 %1887, label %483, label %1657
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x32_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %136

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %130, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %129, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %134, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %131, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %132, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %133, %13 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %21 = bitcast i8* %19 to <4 x i8>*
  %22 = load <4 x i8>, <4 x i8>* %21, align 1
  %23 = zext <4 x i8> %22 to <4 x i32>
  %24 = bitcast i8* %17 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1
  %26 = zext <4 x i8> %25 to <4 x i32>
  %27 = mul nuw nsw <4 x i32> %26, %23
  %28 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %23
  %29 = bitcast i8* %18 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nsw <4 x i32> %28, %31
  %33 = add nuw nsw <4 x i32> %27, <i32 32, i32 32, i32 32, i32 32>
  %34 = add nsw <4 x i32> %33, %32
  %35 = ashr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %36 = bitcast i8* %14 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = zext <4 x i8> %37 to <4 x i32>
  %39 = sub nsw <4 x i32> %35, %38
  %40 = icmp slt <4 x i32> %39, zeroinitializer
  %41 = sub nsw <4 x i32> zeroinitializer, %39
  %42 = select <4 x i1> %40, <4 x i32> %41, <4 x i32> %39
  %43 = add <4 x i32> %42, %20
  %44 = getelementptr inbounds i8, i8* %19, i64 4
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = getelementptr inbounds i8, i8* %17, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %50 to <4 x i32>
  %52 = mul nuw nsw <4 x i32> %51, %47
  %53 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %47
  %54 = getelementptr inbounds i8, i8* %18, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = mul nsw <4 x i32> %53, %57
  %59 = add nuw nsw <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %60 = add nsw <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %62 = getelementptr inbounds i8, i8* %14, i64 4
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = sub nsw <4 x i32> %61, %65
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add <4 x i32> %69, %43
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = zext <4 x i8> %73 to <4 x i32>
  %75 = getelementptr inbounds i8, i8* %17, i64 8
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = mul nuw nsw <4 x i32> %78, %74
  %80 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %74
  %81 = getelementptr inbounds i8, i8* %18, i64 8
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = mul nsw <4 x i32> %80, %84
  %86 = add nuw nsw <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %87 = add nsw <4 x i32> %86, %85
  %88 = ashr <4 x i32> %87, <i32 6, i32 6, i32 6, i32 6>
  %89 = getelementptr inbounds i8, i8* %14, i64 8
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = sub nsw <4 x i32> %88, %92
  %94 = icmp slt <4 x i32> %93, zeroinitializer
  %95 = sub nsw <4 x i32> zeroinitializer, %93
  %96 = select <4 x i1> %94, <4 x i32> %95, <4 x i32> %93
  %97 = add <4 x i32> %96, %70
  %98 = getelementptr inbounds i8, i8* %19, i64 12
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = getelementptr inbounds i8, i8* %17, i64 12
  %103 = bitcast i8* %102 to <4 x i8>*
  %104 = load <4 x i8>, <4 x i8>* %103, align 1
  %105 = zext <4 x i8> %104 to <4 x i32>
  %106 = mul nuw nsw <4 x i32> %105, %101
  %107 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %101
  %108 = getelementptr inbounds i8, i8* %18, i64 12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = mul nsw <4 x i32> %107, %111
  %113 = add nuw nsw <4 x i32> %106, <i32 32, i32 32, i32 32, i32 32>
  %114 = add nsw <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = getelementptr inbounds i8, i8* %14, i64 12
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = sub nsw <4 x i32> %115, %119
  %121 = icmp slt <4 x i32> %120, zeroinitializer
  %122 = sub nsw <4 x i32> zeroinitializer, %120
  %123 = select <4 x i1> %121, <4 x i32> %122, <4 x i32> %120
  %124 = add <4 x i32> %123, %97
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %126 = add <4 x i32> %124, %125
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %128 = add <4 x i32> %126, %127
  %129 = extractelement <4 x i32> %128, i32 0
  %130 = getelementptr inbounds i8, i8* %14, i64 %10
  %131 = getelementptr inbounds i8, i8* %17, i64 %11
  %132 = getelementptr inbounds i8, i8* %18, i64 16
  %133 = getelementptr inbounds i8, i8* %19, i64 %12
  %134 = add nuw nsw i32 %16, 1
  %135 = icmp eq i32 %134, 32
  br i1 %135, label %259, label %13

136:                                              ; preds = %8, %136
  %137 = phi i8* [ %253, %136 ], [ %0, %8 ]
  %138 = phi i32 [ %252, %136 ], [ 0, %8 ]
  %139 = phi i32 [ %257, %136 ], [ 0, %8 ]
  %140 = phi i8* [ %254, %136 ], [ %4, %8 ]
  %141 = phi i8* [ %255, %136 ], [ %2, %8 ]
  %142 = phi i8* [ %256, %136 ], [ %5, %8 ]
  %143 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %138, i32 0
  %144 = bitcast i8* %142 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = bitcast i8* %140 to <4 x i8>*
  %148 = load <4 x i8>, <4 x i8>* %147, align 1
  %149 = zext <4 x i8> %148 to <4 x i32>
  %150 = mul nuw nsw <4 x i32> %149, %146
  %151 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %146
  %152 = bitcast i8* %141 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1
  %154 = zext <4 x i8> %153 to <4 x i32>
  %155 = mul nsw <4 x i32> %151, %154
  %156 = add nuw nsw <4 x i32> %150, <i32 32, i32 32, i32 32, i32 32>
  %157 = add nsw <4 x i32> %156, %155
  %158 = ashr <4 x i32> %157, <i32 6, i32 6, i32 6, i32 6>
  %159 = bitcast i8* %137 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = sub nsw <4 x i32> %158, %161
  %163 = icmp slt <4 x i32> %162, zeroinitializer
  %164 = sub nsw <4 x i32> zeroinitializer, %162
  %165 = select <4 x i1> %163, <4 x i32> %164, <4 x i32> %162
  %166 = add <4 x i32> %165, %143
  %167 = getelementptr inbounds i8, i8* %142, i64 4
  %168 = bitcast i8* %167 to <4 x i8>*
  %169 = load <4 x i8>, <4 x i8>* %168, align 1
  %170 = zext <4 x i8> %169 to <4 x i32>
  %171 = getelementptr inbounds i8, i8* %140, i64 4
  %172 = bitcast i8* %171 to <4 x i8>*
  %173 = load <4 x i8>, <4 x i8>* %172, align 1
  %174 = zext <4 x i8> %173 to <4 x i32>
  %175 = mul nuw nsw <4 x i32> %174, %170
  %176 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %170
  %177 = getelementptr inbounds i8, i8* %141, i64 4
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %180 = zext <4 x i8> %179 to <4 x i32>
  %181 = mul nsw <4 x i32> %176, %180
  %182 = add nuw nsw <4 x i32> %175, <i32 32, i32 32, i32 32, i32 32>
  %183 = add nsw <4 x i32> %182, %181
  %184 = ashr <4 x i32> %183, <i32 6, i32 6, i32 6, i32 6>
  %185 = getelementptr inbounds i8, i8* %137, i64 4
  %186 = bitcast i8* %185 to <4 x i8>*
  %187 = load <4 x i8>, <4 x i8>* %186, align 1
  %188 = zext <4 x i8> %187 to <4 x i32>
  %189 = sub nsw <4 x i32> %184, %188
  %190 = icmp slt <4 x i32> %189, zeroinitializer
  %191 = sub nsw <4 x i32> zeroinitializer, %189
  %192 = select <4 x i1> %190, <4 x i32> %191, <4 x i32> %189
  %193 = add <4 x i32> %192, %166
  %194 = getelementptr inbounds i8, i8* %142, i64 8
  %195 = bitcast i8* %194 to <4 x i8>*
  %196 = load <4 x i8>, <4 x i8>* %195, align 1
  %197 = zext <4 x i8> %196 to <4 x i32>
  %198 = getelementptr inbounds i8, i8* %140, i64 8
  %199 = bitcast i8* %198 to <4 x i8>*
  %200 = load <4 x i8>, <4 x i8>* %199, align 1
  %201 = zext <4 x i8> %200 to <4 x i32>
  %202 = mul nuw nsw <4 x i32> %201, %197
  %203 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %197
  %204 = getelementptr inbounds i8, i8* %141, i64 8
  %205 = bitcast i8* %204 to <4 x i8>*
  %206 = load <4 x i8>, <4 x i8>* %205, align 1
  %207 = zext <4 x i8> %206 to <4 x i32>
  %208 = mul nsw <4 x i32> %203, %207
  %209 = add nuw nsw <4 x i32> %202, <i32 32, i32 32, i32 32, i32 32>
  %210 = add nsw <4 x i32> %209, %208
  %211 = ashr <4 x i32> %210, <i32 6, i32 6, i32 6, i32 6>
  %212 = getelementptr inbounds i8, i8* %137, i64 8
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = zext <4 x i8> %214 to <4 x i32>
  %216 = sub nsw <4 x i32> %211, %215
  %217 = icmp slt <4 x i32> %216, zeroinitializer
  %218 = sub nsw <4 x i32> zeroinitializer, %216
  %219 = select <4 x i1> %217, <4 x i32> %218, <4 x i32> %216
  %220 = add <4 x i32> %219, %193
  %221 = getelementptr inbounds i8, i8* %142, i64 12
  %222 = bitcast i8* %221 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1
  %224 = zext <4 x i8> %223 to <4 x i32>
  %225 = getelementptr inbounds i8, i8* %140, i64 12
  %226 = bitcast i8* %225 to <4 x i8>*
  %227 = load <4 x i8>, <4 x i8>* %226, align 1
  %228 = zext <4 x i8> %227 to <4 x i32>
  %229 = mul nuw nsw <4 x i32> %228, %224
  %230 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %224
  %231 = getelementptr inbounds i8, i8* %141, i64 12
  %232 = bitcast i8* %231 to <4 x i8>*
  %233 = load <4 x i8>, <4 x i8>* %232, align 1
  %234 = zext <4 x i8> %233 to <4 x i32>
  %235 = mul nsw <4 x i32> %230, %234
  %236 = add nuw nsw <4 x i32> %229, <i32 32, i32 32, i32 32, i32 32>
  %237 = add nsw <4 x i32> %236, %235
  %238 = ashr <4 x i32> %237, <i32 6, i32 6, i32 6, i32 6>
  %239 = getelementptr inbounds i8, i8* %137, i64 12
  %240 = bitcast i8* %239 to <4 x i8>*
  %241 = load <4 x i8>, <4 x i8>* %240, align 1
  %242 = zext <4 x i8> %241 to <4 x i32>
  %243 = sub nsw <4 x i32> %238, %242
  %244 = icmp slt <4 x i32> %243, zeroinitializer
  %245 = sub nsw <4 x i32> zeroinitializer, %243
  %246 = select <4 x i1> %244, <4 x i32> %245, <4 x i32> %243
  %247 = add <4 x i32> %246, %220
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %249 = add <4 x i32> %247, %248
  %250 = shufflevector <4 x i32> %249, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %251 = add <4 x i32> %249, %250
  %252 = extractelement <4 x i32> %251, i32 0
  %253 = getelementptr inbounds i8, i8* %137, i64 %10
  %254 = getelementptr inbounds i8, i8* %140, i64 16
  %255 = getelementptr inbounds i8, i8* %141, i64 %11
  %256 = getelementptr inbounds i8, i8* %142, i64 %12
  %257 = add nuw nsw i32 %139, 1
  %258 = icmp eq i32 %257, 32
  br i1 %258, label %259, label %136

259:                                              ; preds = %136, %13
  %260 = phi i32 [ %129, %13 ], [ %252, %136 ]
  ret i32 %260
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad16x32x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %141

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %132, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %131, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %136, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %133, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %134, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %135, %15 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %23 = bitcast i8* %21 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = bitcast i8* %19 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = zext <4 x i8> %27 to <4 x i32>
  %29 = mul nuw nsw <4 x i32> %28, %25
  %30 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %25
  %31 = bitcast i8* %20 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nsw <4 x i32> %30, %33
  %35 = add nuw nsw <4 x i32> %29, <i32 32, i32 32, i32 32, i32 32>
  %36 = add nsw <4 x i32> %35, %34
  %37 = ashr <4 x i32> %36, <i32 6, i32 6, i32 6, i32 6>
  %38 = bitcast i8* %16 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = zext <4 x i8> %39 to <4 x i32>
  %41 = sub nsw <4 x i32> %37, %40
  %42 = icmp slt <4 x i32> %41, zeroinitializer
  %43 = sub nsw <4 x i32> zeroinitializer, %41
  %44 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %41
  %45 = add <4 x i32> %44, %22
  %46 = getelementptr inbounds i8, i8* %21, i64 4
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = zext <4 x i8> %48 to <4 x i32>
  %50 = getelementptr inbounds i8, i8* %19, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %52 to <4 x i32>
  %54 = mul nuw nsw <4 x i32> %53, %49
  %55 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %49
  %56 = getelementptr inbounds i8, i8* %20, i64 4
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1
  %59 = zext <4 x i8> %58 to <4 x i32>
  %60 = mul nsw <4 x i32> %55, %59
  %61 = add nuw nsw <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %62 = add nsw <4 x i32> %61, %60
  %63 = ashr <4 x i32> %62, <i32 6, i32 6, i32 6, i32 6>
  %64 = getelementptr inbounds i8, i8* %16, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = sub nsw <4 x i32> %63, %67
  %69 = icmp slt <4 x i32> %68, zeroinitializer
  %70 = sub nsw <4 x i32> zeroinitializer, %68
  %71 = select <4 x i1> %69, <4 x i32> %70, <4 x i32> %68
  %72 = add <4 x i32> %71, %45
  %73 = getelementptr inbounds i8, i8* %21, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = getelementptr inbounds i8, i8* %19, i64 8
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = mul nuw nsw <4 x i32> %80, %76
  %82 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %76
  %83 = getelementptr inbounds i8, i8* %20, i64 8
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = mul nsw <4 x i32> %82, %86
  %88 = add nuw nsw <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %89 = add nsw <4 x i32> %88, %87
  %90 = ashr <4 x i32> %89, <i32 6, i32 6, i32 6, i32 6>
  %91 = getelementptr inbounds i8, i8* %16, i64 8
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = sub nsw <4 x i32> %90, %94
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = add <4 x i32> %98, %72
  %100 = getelementptr inbounds i8, i8* %21, i64 12
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = zext <4 x i8> %102 to <4 x i32>
  %104 = getelementptr inbounds i8, i8* %19, i64 12
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = zext <4 x i8> %106 to <4 x i32>
  %108 = mul nuw nsw <4 x i32> %107, %103
  %109 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %103
  %110 = getelementptr inbounds i8, i8* %20, i64 12
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = mul nsw <4 x i32> %109, %113
  %115 = add nuw nsw <4 x i32> %108, <i32 32, i32 32, i32 32, i32 32>
  %116 = add nsw <4 x i32> %115, %114
  %117 = ashr <4 x i32> %116, <i32 6, i32 6, i32 6, i32 6>
  %118 = getelementptr inbounds i8, i8* %16, i64 12
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = sub nsw <4 x i32> %117, %121
  %123 = icmp slt <4 x i32> %122, zeroinitializer
  %124 = sub nsw <4 x i32> zeroinitializer, %122
  %125 = select <4 x i1> %123, <4 x i32> %124, <4 x i32> %122
  %126 = add <4 x i32> %125, %99
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %128 = add <4 x i32> %126, %127
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %130 = add <4 x i32> %128, %129
  %131 = extractelement <4 x i32> %130, i32 0
  %132 = getelementptr inbounds i8, i8* %16, i64 %11
  %133 = getelementptr inbounds i8, i8* %19, i64 %12
  %134 = getelementptr inbounds i8, i8* %20, i64 16
  %135 = getelementptr inbounds i8, i8* %21, i64 %13
  %136 = add nuw nsw i32 %18, 1
  %137 = icmp eq i32 %136, 32
  br i1 %137, label %138, label %15

138:                                              ; preds = %15
  store i32 %131, i32* %8, align 4
  %139 = getelementptr inbounds i8*, i8** %2, i64 1
  %140 = load i8*, i8** %139, align 8
  br label %270

141:                                              ; preds = %9, %141
  %142 = phi i8* [ %258, %141 ], [ %0, %9 ]
  %143 = phi i32 [ %257, %141 ], [ 0, %9 ]
  %144 = phi i32 [ %262, %141 ], [ 0, %9 ]
  %145 = phi i8* [ %259, %141 ], [ %4, %9 ]
  %146 = phi i8* [ %260, %141 ], [ %14, %9 ]
  %147 = phi i8* [ %261, %141 ], [ %5, %9 ]
  %148 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %143, i32 0
  %149 = bitcast i8* %147 to <4 x i8>*
  %150 = load <4 x i8>, <4 x i8>* %149, align 1
  %151 = zext <4 x i8> %150 to <4 x i32>
  %152 = bitcast i8* %145 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1
  %154 = zext <4 x i8> %153 to <4 x i32>
  %155 = mul nuw nsw <4 x i32> %154, %151
  %156 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %151
  %157 = bitcast i8* %146 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = zext <4 x i8> %158 to <4 x i32>
  %160 = mul nsw <4 x i32> %156, %159
  %161 = add nuw nsw <4 x i32> %155, <i32 32, i32 32, i32 32, i32 32>
  %162 = add nsw <4 x i32> %161, %160
  %163 = ashr <4 x i32> %162, <i32 6, i32 6, i32 6, i32 6>
  %164 = bitcast i8* %142 to <4 x i8>*
  %165 = load <4 x i8>, <4 x i8>* %164, align 1
  %166 = zext <4 x i8> %165 to <4 x i32>
  %167 = sub nsw <4 x i32> %163, %166
  %168 = icmp slt <4 x i32> %167, zeroinitializer
  %169 = sub nsw <4 x i32> zeroinitializer, %167
  %170 = select <4 x i1> %168, <4 x i32> %169, <4 x i32> %167
  %171 = add <4 x i32> %170, %148
  %172 = getelementptr inbounds i8, i8* %147, i64 4
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = getelementptr inbounds i8, i8* %145, i64 4
  %177 = bitcast i8* %176 to <4 x i8>*
  %178 = load <4 x i8>, <4 x i8>* %177, align 1
  %179 = zext <4 x i8> %178 to <4 x i32>
  %180 = mul nuw nsw <4 x i32> %179, %175
  %181 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %175
  %182 = getelementptr inbounds i8, i8* %146, i64 4
  %183 = bitcast i8* %182 to <4 x i8>*
  %184 = load <4 x i8>, <4 x i8>* %183, align 1
  %185 = zext <4 x i8> %184 to <4 x i32>
  %186 = mul nsw <4 x i32> %181, %185
  %187 = add nuw nsw <4 x i32> %180, <i32 32, i32 32, i32 32, i32 32>
  %188 = add nsw <4 x i32> %187, %186
  %189 = ashr <4 x i32> %188, <i32 6, i32 6, i32 6, i32 6>
  %190 = getelementptr inbounds i8, i8* %142, i64 4
  %191 = bitcast i8* %190 to <4 x i8>*
  %192 = load <4 x i8>, <4 x i8>* %191, align 1
  %193 = zext <4 x i8> %192 to <4 x i32>
  %194 = sub nsw <4 x i32> %189, %193
  %195 = icmp slt <4 x i32> %194, zeroinitializer
  %196 = sub nsw <4 x i32> zeroinitializer, %194
  %197 = select <4 x i1> %195, <4 x i32> %196, <4 x i32> %194
  %198 = add <4 x i32> %197, %171
  %199 = getelementptr inbounds i8, i8* %147, i64 8
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = getelementptr inbounds i8, i8* %145, i64 8
  %204 = bitcast i8* %203 to <4 x i8>*
  %205 = load <4 x i8>, <4 x i8>* %204, align 1
  %206 = zext <4 x i8> %205 to <4 x i32>
  %207 = mul nuw nsw <4 x i32> %206, %202
  %208 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %202
  %209 = getelementptr inbounds i8, i8* %146, i64 8
  %210 = bitcast i8* %209 to <4 x i8>*
  %211 = load <4 x i8>, <4 x i8>* %210, align 1
  %212 = zext <4 x i8> %211 to <4 x i32>
  %213 = mul nsw <4 x i32> %208, %212
  %214 = add nuw nsw <4 x i32> %207, <i32 32, i32 32, i32 32, i32 32>
  %215 = add nsw <4 x i32> %214, %213
  %216 = ashr <4 x i32> %215, <i32 6, i32 6, i32 6, i32 6>
  %217 = getelementptr inbounds i8, i8* %142, i64 8
  %218 = bitcast i8* %217 to <4 x i8>*
  %219 = load <4 x i8>, <4 x i8>* %218, align 1
  %220 = zext <4 x i8> %219 to <4 x i32>
  %221 = sub nsw <4 x i32> %216, %220
  %222 = icmp slt <4 x i32> %221, zeroinitializer
  %223 = sub nsw <4 x i32> zeroinitializer, %221
  %224 = select <4 x i1> %222, <4 x i32> %223, <4 x i32> %221
  %225 = add <4 x i32> %224, %198
  %226 = getelementptr inbounds i8, i8* %147, i64 12
  %227 = bitcast i8* %226 to <4 x i8>*
  %228 = load <4 x i8>, <4 x i8>* %227, align 1
  %229 = zext <4 x i8> %228 to <4 x i32>
  %230 = getelementptr inbounds i8, i8* %145, i64 12
  %231 = bitcast i8* %230 to <4 x i8>*
  %232 = load <4 x i8>, <4 x i8>* %231, align 1
  %233 = zext <4 x i8> %232 to <4 x i32>
  %234 = mul nuw nsw <4 x i32> %233, %229
  %235 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %229
  %236 = getelementptr inbounds i8, i8* %146, i64 12
  %237 = bitcast i8* %236 to <4 x i8>*
  %238 = load <4 x i8>, <4 x i8>* %237, align 1
  %239 = zext <4 x i8> %238 to <4 x i32>
  %240 = mul nsw <4 x i32> %235, %239
  %241 = add nuw nsw <4 x i32> %234, <i32 32, i32 32, i32 32, i32 32>
  %242 = add nsw <4 x i32> %241, %240
  %243 = ashr <4 x i32> %242, <i32 6, i32 6, i32 6, i32 6>
  %244 = getelementptr inbounds i8, i8* %142, i64 12
  %245 = bitcast i8* %244 to <4 x i8>*
  %246 = load <4 x i8>, <4 x i8>* %245, align 1
  %247 = zext <4 x i8> %246 to <4 x i32>
  %248 = sub nsw <4 x i32> %243, %247
  %249 = icmp slt <4 x i32> %248, zeroinitializer
  %250 = sub nsw <4 x i32> zeroinitializer, %248
  %251 = select <4 x i1> %249, <4 x i32> %250, <4 x i32> %248
  %252 = add <4 x i32> %251, %225
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %254 = add <4 x i32> %252, %253
  %255 = shufflevector <4 x i32> %254, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %256 = add <4 x i32> %254, %255
  %257 = extractelement <4 x i32> %256, i32 0
  %258 = getelementptr inbounds i8, i8* %142, i64 %11
  %259 = getelementptr inbounds i8, i8* %145, i64 16
  %260 = getelementptr inbounds i8, i8* %146, i64 %12
  %261 = getelementptr inbounds i8, i8* %147, i64 %13
  %262 = add nuw nsw i32 %144, 1
  %263 = icmp eq i32 %262, 32
  br i1 %263, label %264, label %141

264:                                              ; preds = %141
  store i32 %257, i32* %8, align 4
  %265 = getelementptr inbounds i8*, i8** %2, i64 1
  %266 = load i8*, i8** %265, align 8
  br label %647

267:                                              ; preds = %901, %524
  %268 = phi i32 [ %640, %524 ], [ %1017, %901 ]
  %269 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %268, i32* %269, align 4
  ret void

270:                                              ; preds = %138, %270
  %271 = phi i8* [ %0, %138 ], [ %387, %270 ]
  %272 = phi i32 [ 0, %138 ], [ %386, %270 ]
  %273 = phi i32 [ 0, %138 ], [ %391, %270 ]
  %274 = phi i8* [ %140, %138 ], [ %388, %270 ]
  %275 = phi i8* [ %4, %138 ], [ %389, %270 ]
  %276 = phi i8* [ %5, %138 ], [ %390, %270 ]
  %277 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %272, i32 0
  %278 = bitcast i8* %276 to <4 x i8>*
  %279 = load <4 x i8>, <4 x i8>* %278, align 1
  %280 = zext <4 x i8> %279 to <4 x i32>
  %281 = bitcast i8* %274 to <4 x i8>*
  %282 = load <4 x i8>, <4 x i8>* %281, align 1
  %283 = zext <4 x i8> %282 to <4 x i32>
  %284 = mul nuw nsw <4 x i32> %283, %280
  %285 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %280
  %286 = bitcast i8* %275 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 1
  %288 = zext <4 x i8> %287 to <4 x i32>
  %289 = mul nsw <4 x i32> %285, %288
  %290 = add nuw nsw <4 x i32> %284, <i32 32, i32 32, i32 32, i32 32>
  %291 = add nsw <4 x i32> %290, %289
  %292 = ashr <4 x i32> %291, <i32 6, i32 6, i32 6, i32 6>
  %293 = bitcast i8* %271 to <4 x i8>*
  %294 = load <4 x i8>, <4 x i8>* %293, align 1
  %295 = zext <4 x i8> %294 to <4 x i32>
  %296 = sub nsw <4 x i32> %292, %295
  %297 = icmp slt <4 x i32> %296, zeroinitializer
  %298 = sub nsw <4 x i32> zeroinitializer, %296
  %299 = select <4 x i1> %297, <4 x i32> %298, <4 x i32> %296
  %300 = add <4 x i32> %299, %277
  %301 = getelementptr inbounds i8, i8* %276, i64 4
  %302 = bitcast i8* %301 to <4 x i8>*
  %303 = load <4 x i8>, <4 x i8>* %302, align 1
  %304 = zext <4 x i8> %303 to <4 x i32>
  %305 = getelementptr inbounds i8, i8* %274, i64 4
  %306 = bitcast i8* %305 to <4 x i8>*
  %307 = load <4 x i8>, <4 x i8>* %306, align 1
  %308 = zext <4 x i8> %307 to <4 x i32>
  %309 = mul nuw nsw <4 x i32> %308, %304
  %310 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %304
  %311 = getelementptr inbounds i8, i8* %275, i64 4
  %312 = bitcast i8* %311 to <4 x i8>*
  %313 = load <4 x i8>, <4 x i8>* %312, align 1
  %314 = zext <4 x i8> %313 to <4 x i32>
  %315 = mul nsw <4 x i32> %310, %314
  %316 = add nuw nsw <4 x i32> %309, <i32 32, i32 32, i32 32, i32 32>
  %317 = add nsw <4 x i32> %316, %315
  %318 = ashr <4 x i32> %317, <i32 6, i32 6, i32 6, i32 6>
  %319 = getelementptr inbounds i8, i8* %271, i64 4
  %320 = bitcast i8* %319 to <4 x i8>*
  %321 = load <4 x i8>, <4 x i8>* %320, align 1
  %322 = zext <4 x i8> %321 to <4 x i32>
  %323 = sub nsw <4 x i32> %318, %322
  %324 = icmp slt <4 x i32> %323, zeroinitializer
  %325 = sub nsw <4 x i32> zeroinitializer, %323
  %326 = select <4 x i1> %324, <4 x i32> %325, <4 x i32> %323
  %327 = add <4 x i32> %326, %300
  %328 = getelementptr inbounds i8, i8* %276, i64 8
  %329 = bitcast i8* %328 to <4 x i8>*
  %330 = load <4 x i8>, <4 x i8>* %329, align 1
  %331 = zext <4 x i8> %330 to <4 x i32>
  %332 = getelementptr inbounds i8, i8* %274, i64 8
  %333 = bitcast i8* %332 to <4 x i8>*
  %334 = load <4 x i8>, <4 x i8>* %333, align 1
  %335 = zext <4 x i8> %334 to <4 x i32>
  %336 = mul nuw nsw <4 x i32> %335, %331
  %337 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %331
  %338 = getelementptr inbounds i8, i8* %275, i64 8
  %339 = bitcast i8* %338 to <4 x i8>*
  %340 = load <4 x i8>, <4 x i8>* %339, align 1
  %341 = zext <4 x i8> %340 to <4 x i32>
  %342 = mul nsw <4 x i32> %337, %341
  %343 = add nuw nsw <4 x i32> %336, <i32 32, i32 32, i32 32, i32 32>
  %344 = add nsw <4 x i32> %343, %342
  %345 = ashr <4 x i32> %344, <i32 6, i32 6, i32 6, i32 6>
  %346 = getelementptr inbounds i8, i8* %271, i64 8
  %347 = bitcast i8* %346 to <4 x i8>*
  %348 = load <4 x i8>, <4 x i8>* %347, align 1
  %349 = zext <4 x i8> %348 to <4 x i32>
  %350 = sub nsw <4 x i32> %345, %349
  %351 = icmp slt <4 x i32> %350, zeroinitializer
  %352 = sub nsw <4 x i32> zeroinitializer, %350
  %353 = select <4 x i1> %351, <4 x i32> %352, <4 x i32> %350
  %354 = add <4 x i32> %353, %327
  %355 = getelementptr inbounds i8, i8* %276, i64 12
  %356 = bitcast i8* %355 to <4 x i8>*
  %357 = load <4 x i8>, <4 x i8>* %356, align 1
  %358 = zext <4 x i8> %357 to <4 x i32>
  %359 = getelementptr inbounds i8, i8* %274, i64 12
  %360 = bitcast i8* %359 to <4 x i8>*
  %361 = load <4 x i8>, <4 x i8>* %360, align 1
  %362 = zext <4 x i8> %361 to <4 x i32>
  %363 = mul nuw nsw <4 x i32> %362, %358
  %364 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %358
  %365 = getelementptr inbounds i8, i8* %275, i64 12
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1
  %368 = zext <4 x i8> %367 to <4 x i32>
  %369 = mul nsw <4 x i32> %364, %368
  %370 = add nuw nsw <4 x i32> %363, <i32 32, i32 32, i32 32, i32 32>
  %371 = add nsw <4 x i32> %370, %369
  %372 = ashr <4 x i32> %371, <i32 6, i32 6, i32 6, i32 6>
  %373 = getelementptr inbounds i8, i8* %271, i64 12
  %374 = bitcast i8* %373 to <4 x i8>*
  %375 = load <4 x i8>, <4 x i8>* %374, align 1
  %376 = zext <4 x i8> %375 to <4 x i32>
  %377 = sub nsw <4 x i32> %372, %376
  %378 = icmp slt <4 x i32> %377, zeroinitializer
  %379 = sub nsw <4 x i32> zeroinitializer, %377
  %380 = select <4 x i1> %378, <4 x i32> %379, <4 x i32> %377
  %381 = add <4 x i32> %380, %354
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %383 = add <4 x i32> %381, %382
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %385 = add <4 x i32> %383, %384
  %386 = extractelement <4 x i32> %385, i32 0
  %387 = getelementptr inbounds i8, i8* %271, i64 %11
  %388 = getelementptr inbounds i8, i8* %274, i64 %12
  %389 = getelementptr inbounds i8, i8* %275, i64 16
  %390 = getelementptr inbounds i8, i8* %276, i64 %13
  %391 = add nuw nsw i32 %273, 1
  %392 = icmp eq i32 %391, 32
  br i1 %392, label %393, label %270

393:                                              ; preds = %270
  %394 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %386, i32* %394, align 4
  %395 = getelementptr inbounds i8*, i8** %2, i64 2
  %396 = load i8*, i8** %395, align 8
  br label %397

397:                                              ; preds = %393, %397
  %398 = phi i8* [ %0, %393 ], [ %514, %397 ]
  %399 = phi i32 [ 0, %393 ], [ %513, %397 ]
  %400 = phi i32 [ 0, %393 ], [ %518, %397 ]
  %401 = phi i8* [ %396, %393 ], [ %515, %397 ]
  %402 = phi i8* [ %4, %393 ], [ %516, %397 ]
  %403 = phi i8* [ %5, %393 ], [ %517, %397 ]
  %404 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %399, i32 0
  %405 = bitcast i8* %403 to <4 x i8>*
  %406 = load <4 x i8>, <4 x i8>* %405, align 1
  %407 = zext <4 x i8> %406 to <4 x i32>
  %408 = bitcast i8* %401 to <4 x i8>*
  %409 = load <4 x i8>, <4 x i8>* %408, align 1
  %410 = zext <4 x i8> %409 to <4 x i32>
  %411 = mul nuw nsw <4 x i32> %410, %407
  %412 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %407
  %413 = bitcast i8* %402 to <4 x i8>*
  %414 = load <4 x i8>, <4 x i8>* %413, align 1
  %415 = zext <4 x i8> %414 to <4 x i32>
  %416 = mul nsw <4 x i32> %412, %415
  %417 = add nuw nsw <4 x i32> %411, <i32 32, i32 32, i32 32, i32 32>
  %418 = add nsw <4 x i32> %417, %416
  %419 = ashr <4 x i32> %418, <i32 6, i32 6, i32 6, i32 6>
  %420 = bitcast i8* %398 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = sub nsw <4 x i32> %419, %422
  %424 = icmp slt <4 x i32> %423, zeroinitializer
  %425 = sub nsw <4 x i32> zeroinitializer, %423
  %426 = select <4 x i1> %424, <4 x i32> %425, <4 x i32> %423
  %427 = add <4 x i32> %426, %404
  %428 = getelementptr inbounds i8, i8* %403, i64 4
  %429 = bitcast i8* %428 to <4 x i8>*
  %430 = load <4 x i8>, <4 x i8>* %429, align 1
  %431 = zext <4 x i8> %430 to <4 x i32>
  %432 = getelementptr inbounds i8, i8* %401, i64 4
  %433 = bitcast i8* %432 to <4 x i8>*
  %434 = load <4 x i8>, <4 x i8>* %433, align 1
  %435 = zext <4 x i8> %434 to <4 x i32>
  %436 = mul nuw nsw <4 x i32> %435, %431
  %437 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %431
  %438 = getelementptr inbounds i8, i8* %402, i64 4
  %439 = bitcast i8* %438 to <4 x i8>*
  %440 = load <4 x i8>, <4 x i8>* %439, align 1
  %441 = zext <4 x i8> %440 to <4 x i32>
  %442 = mul nsw <4 x i32> %437, %441
  %443 = add nuw nsw <4 x i32> %436, <i32 32, i32 32, i32 32, i32 32>
  %444 = add nsw <4 x i32> %443, %442
  %445 = ashr <4 x i32> %444, <i32 6, i32 6, i32 6, i32 6>
  %446 = getelementptr inbounds i8, i8* %398, i64 4
  %447 = bitcast i8* %446 to <4 x i8>*
  %448 = load <4 x i8>, <4 x i8>* %447, align 1
  %449 = zext <4 x i8> %448 to <4 x i32>
  %450 = sub nsw <4 x i32> %445, %449
  %451 = icmp slt <4 x i32> %450, zeroinitializer
  %452 = sub nsw <4 x i32> zeroinitializer, %450
  %453 = select <4 x i1> %451, <4 x i32> %452, <4 x i32> %450
  %454 = add <4 x i32> %453, %427
  %455 = getelementptr inbounds i8, i8* %403, i64 8
  %456 = bitcast i8* %455 to <4 x i8>*
  %457 = load <4 x i8>, <4 x i8>* %456, align 1
  %458 = zext <4 x i8> %457 to <4 x i32>
  %459 = getelementptr inbounds i8, i8* %401, i64 8
  %460 = bitcast i8* %459 to <4 x i8>*
  %461 = load <4 x i8>, <4 x i8>* %460, align 1
  %462 = zext <4 x i8> %461 to <4 x i32>
  %463 = mul nuw nsw <4 x i32> %462, %458
  %464 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %458
  %465 = getelementptr inbounds i8, i8* %402, i64 8
  %466 = bitcast i8* %465 to <4 x i8>*
  %467 = load <4 x i8>, <4 x i8>* %466, align 1
  %468 = zext <4 x i8> %467 to <4 x i32>
  %469 = mul nsw <4 x i32> %464, %468
  %470 = add nuw nsw <4 x i32> %463, <i32 32, i32 32, i32 32, i32 32>
  %471 = add nsw <4 x i32> %470, %469
  %472 = ashr <4 x i32> %471, <i32 6, i32 6, i32 6, i32 6>
  %473 = getelementptr inbounds i8, i8* %398, i64 8
  %474 = bitcast i8* %473 to <4 x i8>*
  %475 = load <4 x i8>, <4 x i8>* %474, align 1
  %476 = zext <4 x i8> %475 to <4 x i32>
  %477 = sub nsw <4 x i32> %472, %476
  %478 = icmp slt <4 x i32> %477, zeroinitializer
  %479 = sub nsw <4 x i32> zeroinitializer, %477
  %480 = select <4 x i1> %478, <4 x i32> %479, <4 x i32> %477
  %481 = add <4 x i32> %480, %454
  %482 = getelementptr inbounds i8, i8* %403, i64 12
  %483 = bitcast i8* %482 to <4 x i8>*
  %484 = load <4 x i8>, <4 x i8>* %483, align 1
  %485 = zext <4 x i8> %484 to <4 x i32>
  %486 = getelementptr inbounds i8, i8* %401, i64 12
  %487 = bitcast i8* %486 to <4 x i8>*
  %488 = load <4 x i8>, <4 x i8>* %487, align 1
  %489 = zext <4 x i8> %488 to <4 x i32>
  %490 = mul nuw nsw <4 x i32> %489, %485
  %491 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %485
  %492 = getelementptr inbounds i8, i8* %402, i64 12
  %493 = bitcast i8* %492 to <4 x i8>*
  %494 = load <4 x i8>, <4 x i8>* %493, align 1
  %495 = zext <4 x i8> %494 to <4 x i32>
  %496 = mul nsw <4 x i32> %491, %495
  %497 = add nuw nsw <4 x i32> %490, <i32 32, i32 32, i32 32, i32 32>
  %498 = add nsw <4 x i32> %497, %496
  %499 = ashr <4 x i32> %498, <i32 6, i32 6, i32 6, i32 6>
  %500 = getelementptr inbounds i8, i8* %398, i64 12
  %501 = bitcast i8* %500 to <4 x i8>*
  %502 = load <4 x i8>, <4 x i8>* %501, align 1
  %503 = zext <4 x i8> %502 to <4 x i32>
  %504 = sub nsw <4 x i32> %499, %503
  %505 = icmp slt <4 x i32> %504, zeroinitializer
  %506 = sub nsw <4 x i32> zeroinitializer, %504
  %507 = select <4 x i1> %505, <4 x i32> %506, <4 x i32> %504
  %508 = add <4 x i32> %507, %481
  %509 = shufflevector <4 x i32> %508, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %510 = add <4 x i32> %508, %509
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %512 = add <4 x i32> %510, %511
  %513 = extractelement <4 x i32> %512, i32 0
  %514 = getelementptr inbounds i8, i8* %398, i64 %11
  %515 = getelementptr inbounds i8, i8* %401, i64 %12
  %516 = getelementptr inbounds i8, i8* %402, i64 16
  %517 = getelementptr inbounds i8, i8* %403, i64 %13
  %518 = add nuw nsw i32 %400, 1
  %519 = icmp eq i32 %518, 32
  br i1 %519, label %520, label %397

520:                                              ; preds = %397
  %521 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %513, i32* %521, align 4
  %522 = getelementptr inbounds i8*, i8** %2, i64 3
  %523 = load i8*, i8** %522, align 8
  br label %524

524:                                              ; preds = %520, %524
  %525 = phi i8* [ %0, %520 ], [ %641, %524 ]
  %526 = phi i32 [ 0, %520 ], [ %640, %524 ]
  %527 = phi i32 [ 0, %520 ], [ %645, %524 ]
  %528 = phi i8* [ %523, %520 ], [ %642, %524 ]
  %529 = phi i8* [ %4, %520 ], [ %643, %524 ]
  %530 = phi i8* [ %5, %520 ], [ %644, %524 ]
  %531 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %526, i32 0
  %532 = bitcast i8* %530 to <4 x i8>*
  %533 = load <4 x i8>, <4 x i8>* %532, align 1
  %534 = zext <4 x i8> %533 to <4 x i32>
  %535 = bitcast i8* %528 to <4 x i8>*
  %536 = load <4 x i8>, <4 x i8>* %535, align 1
  %537 = zext <4 x i8> %536 to <4 x i32>
  %538 = mul nuw nsw <4 x i32> %537, %534
  %539 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %534
  %540 = bitcast i8* %529 to <4 x i8>*
  %541 = load <4 x i8>, <4 x i8>* %540, align 1
  %542 = zext <4 x i8> %541 to <4 x i32>
  %543 = mul nsw <4 x i32> %539, %542
  %544 = add nuw nsw <4 x i32> %538, <i32 32, i32 32, i32 32, i32 32>
  %545 = add nsw <4 x i32> %544, %543
  %546 = ashr <4 x i32> %545, <i32 6, i32 6, i32 6, i32 6>
  %547 = bitcast i8* %525 to <4 x i8>*
  %548 = load <4 x i8>, <4 x i8>* %547, align 1
  %549 = zext <4 x i8> %548 to <4 x i32>
  %550 = sub nsw <4 x i32> %546, %549
  %551 = icmp slt <4 x i32> %550, zeroinitializer
  %552 = sub nsw <4 x i32> zeroinitializer, %550
  %553 = select <4 x i1> %551, <4 x i32> %552, <4 x i32> %550
  %554 = add <4 x i32> %553, %531
  %555 = getelementptr inbounds i8, i8* %530, i64 4
  %556 = bitcast i8* %555 to <4 x i8>*
  %557 = load <4 x i8>, <4 x i8>* %556, align 1
  %558 = zext <4 x i8> %557 to <4 x i32>
  %559 = getelementptr inbounds i8, i8* %528, i64 4
  %560 = bitcast i8* %559 to <4 x i8>*
  %561 = load <4 x i8>, <4 x i8>* %560, align 1
  %562 = zext <4 x i8> %561 to <4 x i32>
  %563 = mul nuw nsw <4 x i32> %562, %558
  %564 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %558
  %565 = getelementptr inbounds i8, i8* %529, i64 4
  %566 = bitcast i8* %565 to <4 x i8>*
  %567 = load <4 x i8>, <4 x i8>* %566, align 1
  %568 = zext <4 x i8> %567 to <4 x i32>
  %569 = mul nsw <4 x i32> %564, %568
  %570 = add nuw nsw <4 x i32> %563, <i32 32, i32 32, i32 32, i32 32>
  %571 = add nsw <4 x i32> %570, %569
  %572 = ashr <4 x i32> %571, <i32 6, i32 6, i32 6, i32 6>
  %573 = getelementptr inbounds i8, i8* %525, i64 4
  %574 = bitcast i8* %573 to <4 x i8>*
  %575 = load <4 x i8>, <4 x i8>* %574, align 1
  %576 = zext <4 x i8> %575 to <4 x i32>
  %577 = sub nsw <4 x i32> %572, %576
  %578 = icmp slt <4 x i32> %577, zeroinitializer
  %579 = sub nsw <4 x i32> zeroinitializer, %577
  %580 = select <4 x i1> %578, <4 x i32> %579, <4 x i32> %577
  %581 = add <4 x i32> %580, %554
  %582 = getelementptr inbounds i8, i8* %530, i64 8
  %583 = bitcast i8* %582 to <4 x i8>*
  %584 = load <4 x i8>, <4 x i8>* %583, align 1
  %585 = zext <4 x i8> %584 to <4 x i32>
  %586 = getelementptr inbounds i8, i8* %528, i64 8
  %587 = bitcast i8* %586 to <4 x i8>*
  %588 = load <4 x i8>, <4 x i8>* %587, align 1
  %589 = zext <4 x i8> %588 to <4 x i32>
  %590 = mul nuw nsw <4 x i32> %589, %585
  %591 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %585
  %592 = getelementptr inbounds i8, i8* %529, i64 8
  %593 = bitcast i8* %592 to <4 x i8>*
  %594 = load <4 x i8>, <4 x i8>* %593, align 1
  %595 = zext <4 x i8> %594 to <4 x i32>
  %596 = mul nsw <4 x i32> %591, %595
  %597 = add nuw nsw <4 x i32> %590, <i32 32, i32 32, i32 32, i32 32>
  %598 = add nsw <4 x i32> %597, %596
  %599 = ashr <4 x i32> %598, <i32 6, i32 6, i32 6, i32 6>
  %600 = getelementptr inbounds i8, i8* %525, i64 8
  %601 = bitcast i8* %600 to <4 x i8>*
  %602 = load <4 x i8>, <4 x i8>* %601, align 1
  %603 = zext <4 x i8> %602 to <4 x i32>
  %604 = sub nsw <4 x i32> %599, %603
  %605 = icmp slt <4 x i32> %604, zeroinitializer
  %606 = sub nsw <4 x i32> zeroinitializer, %604
  %607 = select <4 x i1> %605, <4 x i32> %606, <4 x i32> %604
  %608 = add <4 x i32> %607, %581
  %609 = getelementptr inbounds i8, i8* %530, i64 12
  %610 = bitcast i8* %609 to <4 x i8>*
  %611 = load <4 x i8>, <4 x i8>* %610, align 1
  %612 = zext <4 x i8> %611 to <4 x i32>
  %613 = getelementptr inbounds i8, i8* %528, i64 12
  %614 = bitcast i8* %613 to <4 x i8>*
  %615 = load <4 x i8>, <4 x i8>* %614, align 1
  %616 = zext <4 x i8> %615 to <4 x i32>
  %617 = mul nuw nsw <4 x i32> %616, %612
  %618 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %612
  %619 = getelementptr inbounds i8, i8* %529, i64 12
  %620 = bitcast i8* %619 to <4 x i8>*
  %621 = load <4 x i8>, <4 x i8>* %620, align 1
  %622 = zext <4 x i8> %621 to <4 x i32>
  %623 = mul nsw <4 x i32> %618, %622
  %624 = add nuw nsw <4 x i32> %617, <i32 32, i32 32, i32 32, i32 32>
  %625 = add nsw <4 x i32> %624, %623
  %626 = ashr <4 x i32> %625, <i32 6, i32 6, i32 6, i32 6>
  %627 = getelementptr inbounds i8, i8* %525, i64 12
  %628 = bitcast i8* %627 to <4 x i8>*
  %629 = load <4 x i8>, <4 x i8>* %628, align 1
  %630 = zext <4 x i8> %629 to <4 x i32>
  %631 = sub nsw <4 x i32> %626, %630
  %632 = icmp slt <4 x i32> %631, zeroinitializer
  %633 = sub nsw <4 x i32> zeroinitializer, %631
  %634 = select <4 x i1> %632, <4 x i32> %633, <4 x i32> %631
  %635 = add <4 x i32> %634, %608
  %636 = shufflevector <4 x i32> %635, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %637 = add <4 x i32> %635, %636
  %638 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %639 = add <4 x i32> %637, %638
  %640 = extractelement <4 x i32> %639, i32 0
  %641 = getelementptr inbounds i8, i8* %525, i64 %11
  %642 = getelementptr inbounds i8, i8* %528, i64 %12
  %643 = getelementptr inbounds i8, i8* %529, i64 16
  %644 = getelementptr inbounds i8, i8* %530, i64 %13
  %645 = add nuw nsw i32 %527, 1
  %646 = icmp eq i32 %645, 32
  br i1 %646, label %267, label %524

647:                                              ; preds = %264, %647
  %648 = phi i8* [ %0, %264 ], [ %764, %647 ]
  %649 = phi i32 [ 0, %264 ], [ %763, %647 ]
  %650 = phi i32 [ 0, %264 ], [ %768, %647 ]
  %651 = phi i8* [ %4, %264 ], [ %765, %647 ]
  %652 = phi i8* [ %266, %264 ], [ %766, %647 ]
  %653 = phi i8* [ %5, %264 ], [ %767, %647 ]
  %654 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %649, i32 0
  %655 = bitcast i8* %653 to <4 x i8>*
  %656 = load <4 x i8>, <4 x i8>* %655, align 1
  %657 = zext <4 x i8> %656 to <4 x i32>
  %658 = bitcast i8* %651 to <4 x i8>*
  %659 = load <4 x i8>, <4 x i8>* %658, align 1
  %660 = zext <4 x i8> %659 to <4 x i32>
  %661 = mul nuw nsw <4 x i32> %660, %657
  %662 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %657
  %663 = bitcast i8* %652 to <4 x i8>*
  %664 = load <4 x i8>, <4 x i8>* %663, align 1
  %665 = zext <4 x i8> %664 to <4 x i32>
  %666 = mul nsw <4 x i32> %662, %665
  %667 = add nuw nsw <4 x i32> %661, <i32 32, i32 32, i32 32, i32 32>
  %668 = add nsw <4 x i32> %667, %666
  %669 = ashr <4 x i32> %668, <i32 6, i32 6, i32 6, i32 6>
  %670 = bitcast i8* %648 to <4 x i8>*
  %671 = load <4 x i8>, <4 x i8>* %670, align 1
  %672 = zext <4 x i8> %671 to <4 x i32>
  %673 = sub nsw <4 x i32> %669, %672
  %674 = icmp slt <4 x i32> %673, zeroinitializer
  %675 = sub nsw <4 x i32> zeroinitializer, %673
  %676 = select <4 x i1> %674, <4 x i32> %675, <4 x i32> %673
  %677 = add <4 x i32> %676, %654
  %678 = getelementptr inbounds i8, i8* %653, i64 4
  %679 = bitcast i8* %678 to <4 x i8>*
  %680 = load <4 x i8>, <4 x i8>* %679, align 1
  %681 = zext <4 x i8> %680 to <4 x i32>
  %682 = getelementptr inbounds i8, i8* %651, i64 4
  %683 = bitcast i8* %682 to <4 x i8>*
  %684 = load <4 x i8>, <4 x i8>* %683, align 1
  %685 = zext <4 x i8> %684 to <4 x i32>
  %686 = mul nuw nsw <4 x i32> %685, %681
  %687 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %681
  %688 = getelementptr inbounds i8, i8* %652, i64 4
  %689 = bitcast i8* %688 to <4 x i8>*
  %690 = load <4 x i8>, <4 x i8>* %689, align 1
  %691 = zext <4 x i8> %690 to <4 x i32>
  %692 = mul nsw <4 x i32> %687, %691
  %693 = add nuw nsw <4 x i32> %686, <i32 32, i32 32, i32 32, i32 32>
  %694 = add nsw <4 x i32> %693, %692
  %695 = ashr <4 x i32> %694, <i32 6, i32 6, i32 6, i32 6>
  %696 = getelementptr inbounds i8, i8* %648, i64 4
  %697 = bitcast i8* %696 to <4 x i8>*
  %698 = load <4 x i8>, <4 x i8>* %697, align 1
  %699 = zext <4 x i8> %698 to <4 x i32>
  %700 = sub nsw <4 x i32> %695, %699
  %701 = icmp slt <4 x i32> %700, zeroinitializer
  %702 = sub nsw <4 x i32> zeroinitializer, %700
  %703 = select <4 x i1> %701, <4 x i32> %702, <4 x i32> %700
  %704 = add <4 x i32> %703, %677
  %705 = getelementptr inbounds i8, i8* %653, i64 8
  %706 = bitcast i8* %705 to <4 x i8>*
  %707 = load <4 x i8>, <4 x i8>* %706, align 1
  %708 = zext <4 x i8> %707 to <4 x i32>
  %709 = getelementptr inbounds i8, i8* %651, i64 8
  %710 = bitcast i8* %709 to <4 x i8>*
  %711 = load <4 x i8>, <4 x i8>* %710, align 1
  %712 = zext <4 x i8> %711 to <4 x i32>
  %713 = mul nuw nsw <4 x i32> %712, %708
  %714 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %708
  %715 = getelementptr inbounds i8, i8* %652, i64 8
  %716 = bitcast i8* %715 to <4 x i8>*
  %717 = load <4 x i8>, <4 x i8>* %716, align 1
  %718 = zext <4 x i8> %717 to <4 x i32>
  %719 = mul nsw <4 x i32> %714, %718
  %720 = add nuw nsw <4 x i32> %713, <i32 32, i32 32, i32 32, i32 32>
  %721 = add nsw <4 x i32> %720, %719
  %722 = ashr <4 x i32> %721, <i32 6, i32 6, i32 6, i32 6>
  %723 = getelementptr inbounds i8, i8* %648, i64 8
  %724 = bitcast i8* %723 to <4 x i8>*
  %725 = load <4 x i8>, <4 x i8>* %724, align 1
  %726 = zext <4 x i8> %725 to <4 x i32>
  %727 = sub nsw <4 x i32> %722, %726
  %728 = icmp slt <4 x i32> %727, zeroinitializer
  %729 = sub nsw <4 x i32> zeroinitializer, %727
  %730 = select <4 x i1> %728, <4 x i32> %729, <4 x i32> %727
  %731 = add <4 x i32> %730, %704
  %732 = getelementptr inbounds i8, i8* %653, i64 12
  %733 = bitcast i8* %732 to <4 x i8>*
  %734 = load <4 x i8>, <4 x i8>* %733, align 1
  %735 = zext <4 x i8> %734 to <4 x i32>
  %736 = getelementptr inbounds i8, i8* %651, i64 12
  %737 = bitcast i8* %736 to <4 x i8>*
  %738 = load <4 x i8>, <4 x i8>* %737, align 1
  %739 = zext <4 x i8> %738 to <4 x i32>
  %740 = mul nuw nsw <4 x i32> %739, %735
  %741 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %735
  %742 = getelementptr inbounds i8, i8* %652, i64 12
  %743 = bitcast i8* %742 to <4 x i8>*
  %744 = load <4 x i8>, <4 x i8>* %743, align 1
  %745 = zext <4 x i8> %744 to <4 x i32>
  %746 = mul nsw <4 x i32> %741, %745
  %747 = add nuw nsw <4 x i32> %740, <i32 32, i32 32, i32 32, i32 32>
  %748 = add nsw <4 x i32> %747, %746
  %749 = ashr <4 x i32> %748, <i32 6, i32 6, i32 6, i32 6>
  %750 = getelementptr inbounds i8, i8* %648, i64 12
  %751 = bitcast i8* %750 to <4 x i8>*
  %752 = load <4 x i8>, <4 x i8>* %751, align 1
  %753 = zext <4 x i8> %752 to <4 x i32>
  %754 = sub nsw <4 x i32> %749, %753
  %755 = icmp slt <4 x i32> %754, zeroinitializer
  %756 = sub nsw <4 x i32> zeroinitializer, %754
  %757 = select <4 x i1> %755, <4 x i32> %756, <4 x i32> %754
  %758 = add <4 x i32> %757, %731
  %759 = shufflevector <4 x i32> %758, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %760 = add <4 x i32> %758, %759
  %761 = shufflevector <4 x i32> %760, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %762 = add <4 x i32> %760, %761
  %763 = extractelement <4 x i32> %762, i32 0
  %764 = getelementptr inbounds i8, i8* %648, i64 %11
  %765 = getelementptr inbounds i8, i8* %651, i64 16
  %766 = getelementptr inbounds i8, i8* %652, i64 %12
  %767 = getelementptr inbounds i8, i8* %653, i64 %13
  %768 = add nuw nsw i32 %650, 1
  %769 = icmp eq i32 %768, 32
  br i1 %769, label %770, label %647

770:                                              ; preds = %647
  %771 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %763, i32* %771, align 4
  %772 = getelementptr inbounds i8*, i8** %2, i64 2
  %773 = load i8*, i8** %772, align 8
  br label %774

774:                                              ; preds = %770, %774
  %775 = phi i8* [ %0, %770 ], [ %891, %774 ]
  %776 = phi i32 [ 0, %770 ], [ %890, %774 ]
  %777 = phi i32 [ 0, %770 ], [ %895, %774 ]
  %778 = phi i8* [ %4, %770 ], [ %892, %774 ]
  %779 = phi i8* [ %773, %770 ], [ %893, %774 ]
  %780 = phi i8* [ %5, %770 ], [ %894, %774 ]
  %781 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %776, i32 0
  %782 = bitcast i8* %780 to <4 x i8>*
  %783 = load <4 x i8>, <4 x i8>* %782, align 1
  %784 = zext <4 x i8> %783 to <4 x i32>
  %785 = bitcast i8* %778 to <4 x i8>*
  %786 = load <4 x i8>, <4 x i8>* %785, align 1
  %787 = zext <4 x i8> %786 to <4 x i32>
  %788 = mul nuw nsw <4 x i32> %787, %784
  %789 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %784
  %790 = bitcast i8* %779 to <4 x i8>*
  %791 = load <4 x i8>, <4 x i8>* %790, align 1
  %792 = zext <4 x i8> %791 to <4 x i32>
  %793 = mul nsw <4 x i32> %789, %792
  %794 = add nuw nsw <4 x i32> %788, <i32 32, i32 32, i32 32, i32 32>
  %795 = add nsw <4 x i32> %794, %793
  %796 = ashr <4 x i32> %795, <i32 6, i32 6, i32 6, i32 6>
  %797 = bitcast i8* %775 to <4 x i8>*
  %798 = load <4 x i8>, <4 x i8>* %797, align 1
  %799 = zext <4 x i8> %798 to <4 x i32>
  %800 = sub nsw <4 x i32> %796, %799
  %801 = icmp slt <4 x i32> %800, zeroinitializer
  %802 = sub nsw <4 x i32> zeroinitializer, %800
  %803 = select <4 x i1> %801, <4 x i32> %802, <4 x i32> %800
  %804 = add <4 x i32> %803, %781
  %805 = getelementptr inbounds i8, i8* %780, i64 4
  %806 = bitcast i8* %805 to <4 x i8>*
  %807 = load <4 x i8>, <4 x i8>* %806, align 1
  %808 = zext <4 x i8> %807 to <4 x i32>
  %809 = getelementptr inbounds i8, i8* %778, i64 4
  %810 = bitcast i8* %809 to <4 x i8>*
  %811 = load <4 x i8>, <4 x i8>* %810, align 1
  %812 = zext <4 x i8> %811 to <4 x i32>
  %813 = mul nuw nsw <4 x i32> %812, %808
  %814 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %808
  %815 = getelementptr inbounds i8, i8* %779, i64 4
  %816 = bitcast i8* %815 to <4 x i8>*
  %817 = load <4 x i8>, <4 x i8>* %816, align 1
  %818 = zext <4 x i8> %817 to <4 x i32>
  %819 = mul nsw <4 x i32> %814, %818
  %820 = add nuw nsw <4 x i32> %813, <i32 32, i32 32, i32 32, i32 32>
  %821 = add nsw <4 x i32> %820, %819
  %822 = ashr <4 x i32> %821, <i32 6, i32 6, i32 6, i32 6>
  %823 = getelementptr inbounds i8, i8* %775, i64 4
  %824 = bitcast i8* %823 to <4 x i8>*
  %825 = load <4 x i8>, <4 x i8>* %824, align 1
  %826 = zext <4 x i8> %825 to <4 x i32>
  %827 = sub nsw <4 x i32> %822, %826
  %828 = icmp slt <4 x i32> %827, zeroinitializer
  %829 = sub nsw <4 x i32> zeroinitializer, %827
  %830 = select <4 x i1> %828, <4 x i32> %829, <4 x i32> %827
  %831 = add <4 x i32> %830, %804
  %832 = getelementptr inbounds i8, i8* %780, i64 8
  %833 = bitcast i8* %832 to <4 x i8>*
  %834 = load <4 x i8>, <4 x i8>* %833, align 1
  %835 = zext <4 x i8> %834 to <4 x i32>
  %836 = getelementptr inbounds i8, i8* %778, i64 8
  %837 = bitcast i8* %836 to <4 x i8>*
  %838 = load <4 x i8>, <4 x i8>* %837, align 1
  %839 = zext <4 x i8> %838 to <4 x i32>
  %840 = mul nuw nsw <4 x i32> %839, %835
  %841 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %835
  %842 = getelementptr inbounds i8, i8* %779, i64 8
  %843 = bitcast i8* %842 to <4 x i8>*
  %844 = load <4 x i8>, <4 x i8>* %843, align 1
  %845 = zext <4 x i8> %844 to <4 x i32>
  %846 = mul nsw <4 x i32> %841, %845
  %847 = add nuw nsw <4 x i32> %840, <i32 32, i32 32, i32 32, i32 32>
  %848 = add nsw <4 x i32> %847, %846
  %849 = ashr <4 x i32> %848, <i32 6, i32 6, i32 6, i32 6>
  %850 = getelementptr inbounds i8, i8* %775, i64 8
  %851 = bitcast i8* %850 to <4 x i8>*
  %852 = load <4 x i8>, <4 x i8>* %851, align 1
  %853 = zext <4 x i8> %852 to <4 x i32>
  %854 = sub nsw <4 x i32> %849, %853
  %855 = icmp slt <4 x i32> %854, zeroinitializer
  %856 = sub nsw <4 x i32> zeroinitializer, %854
  %857 = select <4 x i1> %855, <4 x i32> %856, <4 x i32> %854
  %858 = add <4 x i32> %857, %831
  %859 = getelementptr inbounds i8, i8* %780, i64 12
  %860 = bitcast i8* %859 to <4 x i8>*
  %861 = load <4 x i8>, <4 x i8>* %860, align 1
  %862 = zext <4 x i8> %861 to <4 x i32>
  %863 = getelementptr inbounds i8, i8* %778, i64 12
  %864 = bitcast i8* %863 to <4 x i8>*
  %865 = load <4 x i8>, <4 x i8>* %864, align 1
  %866 = zext <4 x i8> %865 to <4 x i32>
  %867 = mul nuw nsw <4 x i32> %866, %862
  %868 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %862
  %869 = getelementptr inbounds i8, i8* %779, i64 12
  %870 = bitcast i8* %869 to <4 x i8>*
  %871 = load <4 x i8>, <4 x i8>* %870, align 1
  %872 = zext <4 x i8> %871 to <4 x i32>
  %873 = mul nsw <4 x i32> %868, %872
  %874 = add nuw nsw <4 x i32> %867, <i32 32, i32 32, i32 32, i32 32>
  %875 = add nsw <4 x i32> %874, %873
  %876 = ashr <4 x i32> %875, <i32 6, i32 6, i32 6, i32 6>
  %877 = getelementptr inbounds i8, i8* %775, i64 12
  %878 = bitcast i8* %877 to <4 x i8>*
  %879 = load <4 x i8>, <4 x i8>* %878, align 1
  %880 = zext <4 x i8> %879 to <4 x i32>
  %881 = sub nsw <4 x i32> %876, %880
  %882 = icmp slt <4 x i32> %881, zeroinitializer
  %883 = sub nsw <4 x i32> zeroinitializer, %881
  %884 = select <4 x i1> %882, <4 x i32> %883, <4 x i32> %881
  %885 = add <4 x i32> %884, %858
  %886 = shufflevector <4 x i32> %885, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %887 = add <4 x i32> %885, %886
  %888 = shufflevector <4 x i32> %887, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %889 = add <4 x i32> %887, %888
  %890 = extractelement <4 x i32> %889, i32 0
  %891 = getelementptr inbounds i8, i8* %775, i64 %11
  %892 = getelementptr inbounds i8, i8* %778, i64 16
  %893 = getelementptr inbounds i8, i8* %779, i64 %12
  %894 = getelementptr inbounds i8, i8* %780, i64 %13
  %895 = add nuw nsw i32 %777, 1
  %896 = icmp eq i32 %895, 32
  br i1 %896, label %897, label %774

897:                                              ; preds = %774
  %898 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %890, i32* %898, align 4
  %899 = getelementptr inbounds i8*, i8** %2, i64 3
  %900 = load i8*, i8** %899, align 8
  br label %901

901:                                              ; preds = %897, %901
  %902 = phi i8* [ %0, %897 ], [ %1018, %901 ]
  %903 = phi i32 [ 0, %897 ], [ %1017, %901 ]
  %904 = phi i32 [ 0, %897 ], [ %1022, %901 ]
  %905 = phi i8* [ %4, %897 ], [ %1019, %901 ]
  %906 = phi i8* [ %900, %897 ], [ %1020, %901 ]
  %907 = phi i8* [ %5, %897 ], [ %1021, %901 ]
  %908 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %903, i32 0
  %909 = bitcast i8* %907 to <4 x i8>*
  %910 = load <4 x i8>, <4 x i8>* %909, align 1
  %911 = zext <4 x i8> %910 to <4 x i32>
  %912 = bitcast i8* %905 to <4 x i8>*
  %913 = load <4 x i8>, <4 x i8>* %912, align 1
  %914 = zext <4 x i8> %913 to <4 x i32>
  %915 = mul nuw nsw <4 x i32> %914, %911
  %916 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %911
  %917 = bitcast i8* %906 to <4 x i8>*
  %918 = load <4 x i8>, <4 x i8>* %917, align 1
  %919 = zext <4 x i8> %918 to <4 x i32>
  %920 = mul nsw <4 x i32> %916, %919
  %921 = add nuw nsw <4 x i32> %915, <i32 32, i32 32, i32 32, i32 32>
  %922 = add nsw <4 x i32> %921, %920
  %923 = ashr <4 x i32> %922, <i32 6, i32 6, i32 6, i32 6>
  %924 = bitcast i8* %902 to <4 x i8>*
  %925 = load <4 x i8>, <4 x i8>* %924, align 1
  %926 = zext <4 x i8> %925 to <4 x i32>
  %927 = sub nsw <4 x i32> %923, %926
  %928 = icmp slt <4 x i32> %927, zeroinitializer
  %929 = sub nsw <4 x i32> zeroinitializer, %927
  %930 = select <4 x i1> %928, <4 x i32> %929, <4 x i32> %927
  %931 = add <4 x i32> %930, %908
  %932 = getelementptr inbounds i8, i8* %907, i64 4
  %933 = bitcast i8* %932 to <4 x i8>*
  %934 = load <4 x i8>, <4 x i8>* %933, align 1
  %935 = zext <4 x i8> %934 to <4 x i32>
  %936 = getelementptr inbounds i8, i8* %905, i64 4
  %937 = bitcast i8* %936 to <4 x i8>*
  %938 = load <4 x i8>, <4 x i8>* %937, align 1
  %939 = zext <4 x i8> %938 to <4 x i32>
  %940 = mul nuw nsw <4 x i32> %939, %935
  %941 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %935
  %942 = getelementptr inbounds i8, i8* %906, i64 4
  %943 = bitcast i8* %942 to <4 x i8>*
  %944 = load <4 x i8>, <4 x i8>* %943, align 1
  %945 = zext <4 x i8> %944 to <4 x i32>
  %946 = mul nsw <4 x i32> %941, %945
  %947 = add nuw nsw <4 x i32> %940, <i32 32, i32 32, i32 32, i32 32>
  %948 = add nsw <4 x i32> %947, %946
  %949 = ashr <4 x i32> %948, <i32 6, i32 6, i32 6, i32 6>
  %950 = getelementptr inbounds i8, i8* %902, i64 4
  %951 = bitcast i8* %950 to <4 x i8>*
  %952 = load <4 x i8>, <4 x i8>* %951, align 1
  %953 = zext <4 x i8> %952 to <4 x i32>
  %954 = sub nsw <4 x i32> %949, %953
  %955 = icmp slt <4 x i32> %954, zeroinitializer
  %956 = sub nsw <4 x i32> zeroinitializer, %954
  %957 = select <4 x i1> %955, <4 x i32> %956, <4 x i32> %954
  %958 = add <4 x i32> %957, %931
  %959 = getelementptr inbounds i8, i8* %907, i64 8
  %960 = bitcast i8* %959 to <4 x i8>*
  %961 = load <4 x i8>, <4 x i8>* %960, align 1
  %962 = zext <4 x i8> %961 to <4 x i32>
  %963 = getelementptr inbounds i8, i8* %905, i64 8
  %964 = bitcast i8* %963 to <4 x i8>*
  %965 = load <4 x i8>, <4 x i8>* %964, align 1
  %966 = zext <4 x i8> %965 to <4 x i32>
  %967 = mul nuw nsw <4 x i32> %966, %962
  %968 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %962
  %969 = getelementptr inbounds i8, i8* %906, i64 8
  %970 = bitcast i8* %969 to <4 x i8>*
  %971 = load <4 x i8>, <4 x i8>* %970, align 1
  %972 = zext <4 x i8> %971 to <4 x i32>
  %973 = mul nsw <4 x i32> %968, %972
  %974 = add nuw nsw <4 x i32> %967, <i32 32, i32 32, i32 32, i32 32>
  %975 = add nsw <4 x i32> %974, %973
  %976 = ashr <4 x i32> %975, <i32 6, i32 6, i32 6, i32 6>
  %977 = getelementptr inbounds i8, i8* %902, i64 8
  %978 = bitcast i8* %977 to <4 x i8>*
  %979 = load <4 x i8>, <4 x i8>* %978, align 1
  %980 = zext <4 x i8> %979 to <4 x i32>
  %981 = sub nsw <4 x i32> %976, %980
  %982 = icmp slt <4 x i32> %981, zeroinitializer
  %983 = sub nsw <4 x i32> zeroinitializer, %981
  %984 = select <4 x i1> %982, <4 x i32> %983, <4 x i32> %981
  %985 = add <4 x i32> %984, %958
  %986 = getelementptr inbounds i8, i8* %907, i64 12
  %987 = bitcast i8* %986 to <4 x i8>*
  %988 = load <4 x i8>, <4 x i8>* %987, align 1
  %989 = zext <4 x i8> %988 to <4 x i32>
  %990 = getelementptr inbounds i8, i8* %905, i64 12
  %991 = bitcast i8* %990 to <4 x i8>*
  %992 = load <4 x i8>, <4 x i8>* %991, align 1
  %993 = zext <4 x i8> %992 to <4 x i32>
  %994 = mul nuw nsw <4 x i32> %993, %989
  %995 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %989
  %996 = getelementptr inbounds i8, i8* %906, i64 12
  %997 = bitcast i8* %996 to <4 x i8>*
  %998 = load <4 x i8>, <4 x i8>* %997, align 1
  %999 = zext <4 x i8> %998 to <4 x i32>
  %1000 = mul nsw <4 x i32> %995, %999
  %1001 = add nuw nsw <4 x i32> %994, <i32 32, i32 32, i32 32, i32 32>
  %1002 = add nsw <4 x i32> %1001, %1000
  %1003 = ashr <4 x i32> %1002, <i32 6, i32 6, i32 6, i32 6>
  %1004 = getelementptr inbounds i8, i8* %902, i64 12
  %1005 = bitcast i8* %1004 to <4 x i8>*
  %1006 = load <4 x i8>, <4 x i8>* %1005, align 1
  %1007 = zext <4 x i8> %1006 to <4 x i32>
  %1008 = sub nsw <4 x i32> %1003, %1007
  %1009 = icmp slt <4 x i32> %1008, zeroinitializer
  %1010 = sub nsw <4 x i32> zeroinitializer, %1008
  %1011 = select <4 x i1> %1009, <4 x i32> %1010, <4 x i32> %1008
  %1012 = add <4 x i32> %1011, %985
  %1013 = shufflevector <4 x i32> %1012, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1014 = add <4 x i32> %1012, %1013
  %1015 = shufflevector <4 x i32> %1014, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1016 = add <4 x i32> %1014, %1015
  %1017 = extractelement <4 x i32> %1016, i32 0
  %1018 = getelementptr inbounds i8, i8* %902, i64 %11
  %1019 = getelementptr inbounds i8, i8* %905, i64 16
  %1020 = getelementptr inbounds i8, i8* %906, i64 %12
  %1021 = getelementptr inbounds i8, i8* %907, i64 %13
  %1022 = add nuw nsw i32 %904, 1
  %1023 = icmp eq i32 %1022, 32
  br i1 %1023, label %267, label %901
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %136

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %130, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %129, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %134, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %131, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %132, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %133, %13 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %21 = bitcast i8* %19 to <4 x i8>*
  %22 = load <4 x i8>, <4 x i8>* %21, align 1
  %23 = zext <4 x i8> %22 to <4 x i32>
  %24 = bitcast i8* %17 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1
  %26 = zext <4 x i8> %25 to <4 x i32>
  %27 = mul nuw nsw <4 x i32> %26, %23
  %28 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %23
  %29 = bitcast i8* %18 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nsw <4 x i32> %28, %31
  %33 = add nuw nsw <4 x i32> %27, <i32 32, i32 32, i32 32, i32 32>
  %34 = add nsw <4 x i32> %33, %32
  %35 = ashr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %36 = bitcast i8* %14 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = zext <4 x i8> %37 to <4 x i32>
  %39 = sub nsw <4 x i32> %35, %38
  %40 = icmp slt <4 x i32> %39, zeroinitializer
  %41 = sub nsw <4 x i32> zeroinitializer, %39
  %42 = select <4 x i1> %40, <4 x i32> %41, <4 x i32> %39
  %43 = add <4 x i32> %42, %20
  %44 = getelementptr inbounds i8, i8* %19, i64 4
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = getelementptr inbounds i8, i8* %17, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %50 to <4 x i32>
  %52 = mul nuw nsw <4 x i32> %51, %47
  %53 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %47
  %54 = getelementptr inbounds i8, i8* %18, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = mul nsw <4 x i32> %53, %57
  %59 = add nuw nsw <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %60 = add nsw <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %62 = getelementptr inbounds i8, i8* %14, i64 4
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = sub nsw <4 x i32> %61, %65
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add <4 x i32> %69, %43
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = zext <4 x i8> %73 to <4 x i32>
  %75 = getelementptr inbounds i8, i8* %17, i64 8
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = mul nuw nsw <4 x i32> %78, %74
  %80 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %74
  %81 = getelementptr inbounds i8, i8* %18, i64 8
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = mul nsw <4 x i32> %80, %84
  %86 = add nuw nsw <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %87 = add nsw <4 x i32> %86, %85
  %88 = ashr <4 x i32> %87, <i32 6, i32 6, i32 6, i32 6>
  %89 = getelementptr inbounds i8, i8* %14, i64 8
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = sub nsw <4 x i32> %88, %92
  %94 = icmp slt <4 x i32> %93, zeroinitializer
  %95 = sub nsw <4 x i32> zeroinitializer, %93
  %96 = select <4 x i1> %94, <4 x i32> %95, <4 x i32> %93
  %97 = add <4 x i32> %96, %70
  %98 = getelementptr inbounds i8, i8* %19, i64 12
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = getelementptr inbounds i8, i8* %17, i64 12
  %103 = bitcast i8* %102 to <4 x i8>*
  %104 = load <4 x i8>, <4 x i8>* %103, align 1
  %105 = zext <4 x i8> %104 to <4 x i32>
  %106 = mul nuw nsw <4 x i32> %105, %101
  %107 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %101
  %108 = getelementptr inbounds i8, i8* %18, i64 12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = mul nsw <4 x i32> %107, %111
  %113 = add nuw nsw <4 x i32> %106, <i32 32, i32 32, i32 32, i32 32>
  %114 = add nsw <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = getelementptr inbounds i8, i8* %14, i64 12
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = sub nsw <4 x i32> %115, %119
  %121 = icmp slt <4 x i32> %120, zeroinitializer
  %122 = sub nsw <4 x i32> zeroinitializer, %120
  %123 = select <4 x i1> %121, <4 x i32> %122, <4 x i32> %120
  %124 = add <4 x i32> %123, %97
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %126 = add <4 x i32> %124, %125
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %128 = add <4 x i32> %126, %127
  %129 = extractelement <4 x i32> %128, i32 0
  %130 = getelementptr inbounds i8, i8* %14, i64 %10
  %131 = getelementptr inbounds i8, i8* %17, i64 %11
  %132 = getelementptr inbounds i8, i8* %18, i64 16
  %133 = getelementptr inbounds i8, i8* %19, i64 %12
  %134 = add nuw nsw i32 %16, 1
  %135 = icmp eq i32 %134, 16
  br i1 %135, label %259, label %13

136:                                              ; preds = %8, %136
  %137 = phi i8* [ %253, %136 ], [ %0, %8 ]
  %138 = phi i32 [ %252, %136 ], [ 0, %8 ]
  %139 = phi i32 [ %257, %136 ], [ 0, %8 ]
  %140 = phi i8* [ %254, %136 ], [ %4, %8 ]
  %141 = phi i8* [ %255, %136 ], [ %2, %8 ]
  %142 = phi i8* [ %256, %136 ], [ %5, %8 ]
  %143 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %138, i32 0
  %144 = bitcast i8* %142 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = bitcast i8* %140 to <4 x i8>*
  %148 = load <4 x i8>, <4 x i8>* %147, align 1
  %149 = zext <4 x i8> %148 to <4 x i32>
  %150 = mul nuw nsw <4 x i32> %149, %146
  %151 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %146
  %152 = bitcast i8* %141 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1
  %154 = zext <4 x i8> %153 to <4 x i32>
  %155 = mul nsw <4 x i32> %151, %154
  %156 = add nuw nsw <4 x i32> %150, <i32 32, i32 32, i32 32, i32 32>
  %157 = add nsw <4 x i32> %156, %155
  %158 = ashr <4 x i32> %157, <i32 6, i32 6, i32 6, i32 6>
  %159 = bitcast i8* %137 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = sub nsw <4 x i32> %158, %161
  %163 = icmp slt <4 x i32> %162, zeroinitializer
  %164 = sub nsw <4 x i32> zeroinitializer, %162
  %165 = select <4 x i1> %163, <4 x i32> %164, <4 x i32> %162
  %166 = add <4 x i32> %165, %143
  %167 = getelementptr inbounds i8, i8* %142, i64 4
  %168 = bitcast i8* %167 to <4 x i8>*
  %169 = load <4 x i8>, <4 x i8>* %168, align 1
  %170 = zext <4 x i8> %169 to <4 x i32>
  %171 = getelementptr inbounds i8, i8* %140, i64 4
  %172 = bitcast i8* %171 to <4 x i8>*
  %173 = load <4 x i8>, <4 x i8>* %172, align 1
  %174 = zext <4 x i8> %173 to <4 x i32>
  %175 = mul nuw nsw <4 x i32> %174, %170
  %176 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %170
  %177 = getelementptr inbounds i8, i8* %141, i64 4
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %180 = zext <4 x i8> %179 to <4 x i32>
  %181 = mul nsw <4 x i32> %176, %180
  %182 = add nuw nsw <4 x i32> %175, <i32 32, i32 32, i32 32, i32 32>
  %183 = add nsw <4 x i32> %182, %181
  %184 = ashr <4 x i32> %183, <i32 6, i32 6, i32 6, i32 6>
  %185 = getelementptr inbounds i8, i8* %137, i64 4
  %186 = bitcast i8* %185 to <4 x i8>*
  %187 = load <4 x i8>, <4 x i8>* %186, align 1
  %188 = zext <4 x i8> %187 to <4 x i32>
  %189 = sub nsw <4 x i32> %184, %188
  %190 = icmp slt <4 x i32> %189, zeroinitializer
  %191 = sub nsw <4 x i32> zeroinitializer, %189
  %192 = select <4 x i1> %190, <4 x i32> %191, <4 x i32> %189
  %193 = add <4 x i32> %192, %166
  %194 = getelementptr inbounds i8, i8* %142, i64 8
  %195 = bitcast i8* %194 to <4 x i8>*
  %196 = load <4 x i8>, <4 x i8>* %195, align 1
  %197 = zext <4 x i8> %196 to <4 x i32>
  %198 = getelementptr inbounds i8, i8* %140, i64 8
  %199 = bitcast i8* %198 to <4 x i8>*
  %200 = load <4 x i8>, <4 x i8>* %199, align 1
  %201 = zext <4 x i8> %200 to <4 x i32>
  %202 = mul nuw nsw <4 x i32> %201, %197
  %203 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %197
  %204 = getelementptr inbounds i8, i8* %141, i64 8
  %205 = bitcast i8* %204 to <4 x i8>*
  %206 = load <4 x i8>, <4 x i8>* %205, align 1
  %207 = zext <4 x i8> %206 to <4 x i32>
  %208 = mul nsw <4 x i32> %203, %207
  %209 = add nuw nsw <4 x i32> %202, <i32 32, i32 32, i32 32, i32 32>
  %210 = add nsw <4 x i32> %209, %208
  %211 = ashr <4 x i32> %210, <i32 6, i32 6, i32 6, i32 6>
  %212 = getelementptr inbounds i8, i8* %137, i64 8
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = zext <4 x i8> %214 to <4 x i32>
  %216 = sub nsw <4 x i32> %211, %215
  %217 = icmp slt <4 x i32> %216, zeroinitializer
  %218 = sub nsw <4 x i32> zeroinitializer, %216
  %219 = select <4 x i1> %217, <4 x i32> %218, <4 x i32> %216
  %220 = add <4 x i32> %219, %193
  %221 = getelementptr inbounds i8, i8* %142, i64 12
  %222 = bitcast i8* %221 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1
  %224 = zext <4 x i8> %223 to <4 x i32>
  %225 = getelementptr inbounds i8, i8* %140, i64 12
  %226 = bitcast i8* %225 to <4 x i8>*
  %227 = load <4 x i8>, <4 x i8>* %226, align 1
  %228 = zext <4 x i8> %227 to <4 x i32>
  %229 = mul nuw nsw <4 x i32> %228, %224
  %230 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %224
  %231 = getelementptr inbounds i8, i8* %141, i64 12
  %232 = bitcast i8* %231 to <4 x i8>*
  %233 = load <4 x i8>, <4 x i8>* %232, align 1
  %234 = zext <4 x i8> %233 to <4 x i32>
  %235 = mul nsw <4 x i32> %230, %234
  %236 = add nuw nsw <4 x i32> %229, <i32 32, i32 32, i32 32, i32 32>
  %237 = add nsw <4 x i32> %236, %235
  %238 = ashr <4 x i32> %237, <i32 6, i32 6, i32 6, i32 6>
  %239 = getelementptr inbounds i8, i8* %137, i64 12
  %240 = bitcast i8* %239 to <4 x i8>*
  %241 = load <4 x i8>, <4 x i8>* %240, align 1
  %242 = zext <4 x i8> %241 to <4 x i32>
  %243 = sub nsw <4 x i32> %238, %242
  %244 = icmp slt <4 x i32> %243, zeroinitializer
  %245 = sub nsw <4 x i32> zeroinitializer, %243
  %246 = select <4 x i1> %244, <4 x i32> %245, <4 x i32> %243
  %247 = add <4 x i32> %246, %220
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %249 = add <4 x i32> %247, %248
  %250 = shufflevector <4 x i32> %249, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %251 = add <4 x i32> %249, %250
  %252 = extractelement <4 x i32> %251, i32 0
  %253 = getelementptr inbounds i8, i8* %137, i64 %10
  %254 = getelementptr inbounds i8, i8* %140, i64 16
  %255 = getelementptr inbounds i8, i8* %141, i64 %11
  %256 = getelementptr inbounds i8, i8* %142, i64 %12
  %257 = add nuw nsw i32 %139, 1
  %258 = icmp eq i32 %257, 16
  br i1 %258, label %259, label %136

259:                                              ; preds = %136, %13
  %260 = phi i32 [ %129, %13 ], [ %252, %136 ]
  ret i32 %260
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad16x16x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %141

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %132, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %131, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %136, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %133, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %134, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %135, %15 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %23 = bitcast i8* %21 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = bitcast i8* %19 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = zext <4 x i8> %27 to <4 x i32>
  %29 = mul nuw nsw <4 x i32> %28, %25
  %30 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %25
  %31 = bitcast i8* %20 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nsw <4 x i32> %30, %33
  %35 = add nuw nsw <4 x i32> %29, <i32 32, i32 32, i32 32, i32 32>
  %36 = add nsw <4 x i32> %35, %34
  %37 = ashr <4 x i32> %36, <i32 6, i32 6, i32 6, i32 6>
  %38 = bitcast i8* %16 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = zext <4 x i8> %39 to <4 x i32>
  %41 = sub nsw <4 x i32> %37, %40
  %42 = icmp slt <4 x i32> %41, zeroinitializer
  %43 = sub nsw <4 x i32> zeroinitializer, %41
  %44 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %41
  %45 = add <4 x i32> %44, %22
  %46 = getelementptr inbounds i8, i8* %21, i64 4
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = zext <4 x i8> %48 to <4 x i32>
  %50 = getelementptr inbounds i8, i8* %19, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %52 to <4 x i32>
  %54 = mul nuw nsw <4 x i32> %53, %49
  %55 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %49
  %56 = getelementptr inbounds i8, i8* %20, i64 4
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1
  %59 = zext <4 x i8> %58 to <4 x i32>
  %60 = mul nsw <4 x i32> %55, %59
  %61 = add nuw nsw <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %62 = add nsw <4 x i32> %61, %60
  %63 = ashr <4 x i32> %62, <i32 6, i32 6, i32 6, i32 6>
  %64 = getelementptr inbounds i8, i8* %16, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = sub nsw <4 x i32> %63, %67
  %69 = icmp slt <4 x i32> %68, zeroinitializer
  %70 = sub nsw <4 x i32> zeroinitializer, %68
  %71 = select <4 x i1> %69, <4 x i32> %70, <4 x i32> %68
  %72 = add <4 x i32> %71, %45
  %73 = getelementptr inbounds i8, i8* %21, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = getelementptr inbounds i8, i8* %19, i64 8
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = mul nuw nsw <4 x i32> %80, %76
  %82 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %76
  %83 = getelementptr inbounds i8, i8* %20, i64 8
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = mul nsw <4 x i32> %82, %86
  %88 = add nuw nsw <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %89 = add nsw <4 x i32> %88, %87
  %90 = ashr <4 x i32> %89, <i32 6, i32 6, i32 6, i32 6>
  %91 = getelementptr inbounds i8, i8* %16, i64 8
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = sub nsw <4 x i32> %90, %94
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = add <4 x i32> %98, %72
  %100 = getelementptr inbounds i8, i8* %21, i64 12
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = zext <4 x i8> %102 to <4 x i32>
  %104 = getelementptr inbounds i8, i8* %19, i64 12
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = zext <4 x i8> %106 to <4 x i32>
  %108 = mul nuw nsw <4 x i32> %107, %103
  %109 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %103
  %110 = getelementptr inbounds i8, i8* %20, i64 12
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = mul nsw <4 x i32> %109, %113
  %115 = add nuw nsw <4 x i32> %108, <i32 32, i32 32, i32 32, i32 32>
  %116 = add nsw <4 x i32> %115, %114
  %117 = ashr <4 x i32> %116, <i32 6, i32 6, i32 6, i32 6>
  %118 = getelementptr inbounds i8, i8* %16, i64 12
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = sub nsw <4 x i32> %117, %121
  %123 = icmp slt <4 x i32> %122, zeroinitializer
  %124 = sub nsw <4 x i32> zeroinitializer, %122
  %125 = select <4 x i1> %123, <4 x i32> %124, <4 x i32> %122
  %126 = add <4 x i32> %125, %99
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %128 = add <4 x i32> %126, %127
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %130 = add <4 x i32> %128, %129
  %131 = extractelement <4 x i32> %130, i32 0
  %132 = getelementptr inbounds i8, i8* %16, i64 %11
  %133 = getelementptr inbounds i8, i8* %19, i64 %12
  %134 = getelementptr inbounds i8, i8* %20, i64 16
  %135 = getelementptr inbounds i8, i8* %21, i64 %13
  %136 = add nuw nsw i32 %18, 1
  %137 = icmp eq i32 %136, 16
  br i1 %137, label %138, label %15

138:                                              ; preds = %15
  store i32 %131, i32* %8, align 4
  %139 = getelementptr inbounds i8*, i8** %2, i64 1
  %140 = load i8*, i8** %139, align 8
  br label %270

141:                                              ; preds = %9, %141
  %142 = phi i8* [ %258, %141 ], [ %0, %9 ]
  %143 = phi i32 [ %257, %141 ], [ 0, %9 ]
  %144 = phi i32 [ %262, %141 ], [ 0, %9 ]
  %145 = phi i8* [ %259, %141 ], [ %4, %9 ]
  %146 = phi i8* [ %260, %141 ], [ %14, %9 ]
  %147 = phi i8* [ %261, %141 ], [ %5, %9 ]
  %148 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %143, i32 0
  %149 = bitcast i8* %147 to <4 x i8>*
  %150 = load <4 x i8>, <4 x i8>* %149, align 1
  %151 = zext <4 x i8> %150 to <4 x i32>
  %152 = bitcast i8* %145 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1
  %154 = zext <4 x i8> %153 to <4 x i32>
  %155 = mul nuw nsw <4 x i32> %154, %151
  %156 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %151
  %157 = bitcast i8* %146 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = zext <4 x i8> %158 to <4 x i32>
  %160 = mul nsw <4 x i32> %156, %159
  %161 = add nuw nsw <4 x i32> %155, <i32 32, i32 32, i32 32, i32 32>
  %162 = add nsw <4 x i32> %161, %160
  %163 = ashr <4 x i32> %162, <i32 6, i32 6, i32 6, i32 6>
  %164 = bitcast i8* %142 to <4 x i8>*
  %165 = load <4 x i8>, <4 x i8>* %164, align 1
  %166 = zext <4 x i8> %165 to <4 x i32>
  %167 = sub nsw <4 x i32> %163, %166
  %168 = icmp slt <4 x i32> %167, zeroinitializer
  %169 = sub nsw <4 x i32> zeroinitializer, %167
  %170 = select <4 x i1> %168, <4 x i32> %169, <4 x i32> %167
  %171 = add <4 x i32> %170, %148
  %172 = getelementptr inbounds i8, i8* %147, i64 4
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = getelementptr inbounds i8, i8* %145, i64 4
  %177 = bitcast i8* %176 to <4 x i8>*
  %178 = load <4 x i8>, <4 x i8>* %177, align 1
  %179 = zext <4 x i8> %178 to <4 x i32>
  %180 = mul nuw nsw <4 x i32> %179, %175
  %181 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %175
  %182 = getelementptr inbounds i8, i8* %146, i64 4
  %183 = bitcast i8* %182 to <4 x i8>*
  %184 = load <4 x i8>, <4 x i8>* %183, align 1
  %185 = zext <4 x i8> %184 to <4 x i32>
  %186 = mul nsw <4 x i32> %181, %185
  %187 = add nuw nsw <4 x i32> %180, <i32 32, i32 32, i32 32, i32 32>
  %188 = add nsw <4 x i32> %187, %186
  %189 = ashr <4 x i32> %188, <i32 6, i32 6, i32 6, i32 6>
  %190 = getelementptr inbounds i8, i8* %142, i64 4
  %191 = bitcast i8* %190 to <4 x i8>*
  %192 = load <4 x i8>, <4 x i8>* %191, align 1
  %193 = zext <4 x i8> %192 to <4 x i32>
  %194 = sub nsw <4 x i32> %189, %193
  %195 = icmp slt <4 x i32> %194, zeroinitializer
  %196 = sub nsw <4 x i32> zeroinitializer, %194
  %197 = select <4 x i1> %195, <4 x i32> %196, <4 x i32> %194
  %198 = add <4 x i32> %197, %171
  %199 = getelementptr inbounds i8, i8* %147, i64 8
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = getelementptr inbounds i8, i8* %145, i64 8
  %204 = bitcast i8* %203 to <4 x i8>*
  %205 = load <4 x i8>, <4 x i8>* %204, align 1
  %206 = zext <4 x i8> %205 to <4 x i32>
  %207 = mul nuw nsw <4 x i32> %206, %202
  %208 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %202
  %209 = getelementptr inbounds i8, i8* %146, i64 8
  %210 = bitcast i8* %209 to <4 x i8>*
  %211 = load <4 x i8>, <4 x i8>* %210, align 1
  %212 = zext <4 x i8> %211 to <4 x i32>
  %213 = mul nsw <4 x i32> %208, %212
  %214 = add nuw nsw <4 x i32> %207, <i32 32, i32 32, i32 32, i32 32>
  %215 = add nsw <4 x i32> %214, %213
  %216 = ashr <4 x i32> %215, <i32 6, i32 6, i32 6, i32 6>
  %217 = getelementptr inbounds i8, i8* %142, i64 8
  %218 = bitcast i8* %217 to <4 x i8>*
  %219 = load <4 x i8>, <4 x i8>* %218, align 1
  %220 = zext <4 x i8> %219 to <4 x i32>
  %221 = sub nsw <4 x i32> %216, %220
  %222 = icmp slt <4 x i32> %221, zeroinitializer
  %223 = sub nsw <4 x i32> zeroinitializer, %221
  %224 = select <4 x i1> %222, <4 x i32> %223, <4 x i32> %221
  %225 = add <4 x i32> %224, %198
  %226 = getelementptr inbounds i8, i8* %147, i64 12
  %227 = bitcast i8* %226 to <4 x i8>*
  %228 = load <4 x i8>, <4 x i8>* %227, align 1
  %229 = zext <4 x i8> %228 to <4 x i32>
  %230 = getelementptr inbounds i8, i8* %145, i64 12
  %231 = bitcast i8* %230 to <4 x i8>*
  %232 = load <4 x i8>, <4 x i8>* %231, align 1
  %233 = zext <4 x i8> %232 to <4 x i32>
  %234 = mul nuw nsw <4 x i32> %233, %229
  %235 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %229
  %236 = getelementptr inbounds i8, i8* %146, i64 12
  %237 = bitcast i8* %236 to <4 x i8>*
  %238 = load <4 x i8>, <4 x i8>* %237, align 1
  %239 = zext <4 x i8> %238 to <4 x i32>
  %240 = mul nsw <4 x i32> %235, %239
  %241 = add nuw nsw <4 x i32> %234, <i32 32, i32 32, i32 32, i32 32>
  %242 = add nsw <4 x i32> %241, %240
  %243 = ashr <4 x i32> %242, <i32 6, i32 6, i32 6, i32 6>
  %244 = getelementptr inbounds i8, i8* %142, i64 12
  %245 = bitcast i8* %244 to <4 x i8>*
  %246 = load <4 x i8>, <4 x i8>* %245, align 1
  %247 = zext <4 x i8> %246 to <4 x i32>
  %248 = sub nsw <4 x i32> %243, %247
  %249 = icmp slt <4 x i32> %248, zeroinitializer
  %250 = sub nsw <4 x i32> zeroinitializer, %248
  %251 = select <4 x i1> %249, <4 x i32> %250, <4 x i32> %248
  %252 = add <4 x i32> %251, %225
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %254 = add <4 x i32> %252, %253
  %255 = shufflevector <4 x i32> %254, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %256 = add <4 x i32> %254, %255
  %257 = extractelement <4 x i32> %256, i32 0
  %258 = getelementptr inbounds i8, i8* %142, i64 %11
  %259 = getelementptr inbounds i8, i8* %145, i64 16
  %260 = getelementptr inbounds i8, i8* %146, i64 %12
  %261 = getelementptr inbounds i8, i8* %147, i64 %13
  %262 = add nuw nsw i32 %144, 1
  %263 = icmp eq i32 %262, 16
  br i1 %263, label %264, label %141

264:                                              ; preds = %141
  store i32 %257, i32* %8, align 4
  %265 = getelementptr inbounds i8*, i8** %2, i64 1
  %266 = load i8*, i8** %265, align 8
  br label %647

267:                                              ; preds = %901, %524
  %268 = phi i32 [ %640, %524 ], [ %1017, %901 ]
  %269 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %268, i32* %269, align 4
  ret void

270:                                              ; preds = %138, %270
  %271 = phi i8* [ %0, %138 ], [ %387, %270 ]
  %272 = phi i32 [ 0, %138 ], [ %386, %270 ]
  %273 = phi i32 [ 0, %138 ], [ %391, %270 ]
  %274 = phi i8* [ %140, %138 ], [ %388, %270 ]
  %275 = phi i8* [ %4, %138 ], [ %389, %270 ]
  %276 = phi i8* [ %5, %138 ], [ %390, %270 ]
  %277 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %272, i32 0
  %278 = bitcast i8* %276 to <4 x i8>*
  %279 = load <4 x i8>, <4 x i8>* %278, align 1
  %280 = zext <4 x i8> %279 to <4 x i32>
  %281 = bitcast i8* %274 to <4 x i8>*
  %282 = load <4 x i8>, <4 x i8>* %281, align 1
  %283 = zext <4 x i8> %282 to <4 x i32>
  %284 = mul nuw nsw <4 x i32> %283, %280
  %285 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %280
  %286 = bitcast i8* %275 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 1
  %288 = zext <4 x i8> %287 to <4 x i32>
  %289 = mul nsw <4 x i32> %285, %288
  %290 = add nuw nsw <4 x i32> %284, <i32 32, i32 32, i32 32, i32 32>
  %291 = add nsw <4 x i32> %290, %289
  %292 = ashr <4 x i32> %291, <i32 6, i32 6, i32 6, i32 6>
  %293 = bitcast i8* %271 to <4 x i8>*
  %294 = load <4 x i8>, <4 x i8>* %293, align 1
  %295 = zext <4 x i8> %294 to <4 x i32>
  %296 = sub nsw <4 x i32> %292, %295
  %297 = icmp slt <4 x i32> %296, zeroinitializer
  %298 = sub nsw <4 x i32> zeroinitializer, %296
  %299 = select <4 x i1> %297, <4 x i32> %298, <4 x i32> %296
  %300 = add <4 x i32> %299, %277
  %301 = getelementptr inbounds i8, i8* %276, i64 4
  %302 = bitcast i8* %301 to <4 x i8>*
  %303 = load <4 x i8>, <4 x i8>* %302, align 1
  %304 = zext <4 x i8> %303 to <4 x i32>
  %305 = getelementptr inbounds i8, i8* %274, i64 4
  %306 = bitcast i8* %305 to <4 x i8>*
  %307 = load <4 x i8>, <4 x i8>* %306, align 1
  %308 = zext <4 x i8> %307 to <4 x i32>
  %309 = mul nuw nsw <4 x i32> %308, %304
  %310 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %304
  %311 = getelementptr inbounds i8, i8* %275, i64 4
  %312 = bitcast i8* %311 to <4 x i8>*
  %313 = load <4 x i8>, <4 x i8>* %312, align 1
  %314 = zext <4 x i8> %313 to <4 x i32>
  %315 = mul nsw <4 x i32> %310, %314
  %316 = add nuw nsw <4 x i32> %309, <i32 32, i32 32, i32 32, i32 32>
  %317 = add nsw <4 x i32> %316, %315
  %318 = ashr <4 x i32> %317, <i32 6, i32 6, i32 6, i32 6>
  %319 = getelementptr inbounds i8, i8* %271, i64 4
  %320 = bitcast i8* %319 to <4 x i8>*
  %321 = load <4 x i8>, <4 x i8>* %320, align 1
  %322 = zext <4 x i8> %321 to <4 x i32>
  %323 = sub nsw <4 x i32> %318, %322
  %324 = icmp slt <4 x i32> %323, zeroinitializer
  %325 = sub nsw <4 x i32> zeroinitializer, %323
  %326 = select <4 x i1> %324, <4 x i32> %325, <4 x i32> %323
  %327 = add <4 x i32> %326, %300
  %328 = getelementptr inbounds i8, i8* %276, i64 8
  %329 = bitcast i8* %328 to <4 x i8>*
  %330 = load <4 x i8>, <4 x i8>* %329, align 1
  %331 = zext <4 x i8> %330 to <4 x i32>
  %332 = getelementptr inbounds i8, i8* %274, i64 8
  %333 = bitcast i8* %332 to <4 x i8>*
  %334 = load <4 x i8>, <4 x i8>* %333, align 1
  %335 = zext <4 x i8> %334 to <4 x i32>
  %336 = mul nuw nsw <4 x i32> %335, %331
  %337 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %331
  %338 = getelementptr inbounds i8, i8* %275, i64 8
  %339 = bitcast i8* %338 to <4 x i8>*
  %340 = load <4 x i8>, <4 x i8>* %339, align 1
  %341 = zext <4 x i8> %340 to <4 x i32>
  %342 = mul nsw <4 x i32> %337, %341
  %343 = add nuw nsw <4 x i32> %336, <i32 32, i32 32, i32 32, i32 32>
  %344 = add nsw <4 x i32> %343, %342
  %345 = ashr <4 x i32> %344, <i32 6, i32 6, i32 6, i32 6>
  %346 = getelementptr inbounds i8, i8* %271, i64 8
  %347 = bitcast i8* %346 to <4 x i8>*
  %348 = load <4 x i8>, <4 x i8>* %347, align 1
  %349 = zext <4 x i8> %348 to <4 x i32>
  %350 = sub nsw <4 x i32> %345, %349
  %351 = icmp slt <4 x i32> %350, zeroinitializer
  %352 = sub nsw <4 x i32> zeroinitializer, %350
  %353 = select <4 x i1> %351, <4 x i32> %352, <4 x i32> %350
  %354 = add <4 x i32> %353, %327
  %355 = getelementptr inbounds i8, i8* %276, i64 12
  %356 = bitcast i8* %355 to <4 x i8>*
  %357 = load <4 x i8>, <4 x i8>* %356, align 1
  %358 = zext <4 x i8> %357 to <4 x i32>
  %359 = getelementptr inbounds i8, i8* %274, i64 12
  %360 = bitcast i8* %359 to <4 x i8>*
  %361 = load <4 x i8>, <4 x i8>* %360, align 1
  %362 = zext <4 x i8> %361 to <4 x i32>
  %363 = mul nuw nsw <4 x i32> %362, %358
  %364 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %358
  %365 = getelementptr inbounds i8, i8* %275, i64 12
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1
  %368 = zext <4 x i8> %367 to <4 x i32>
  %369 = mul nsw <4 x i32> %364, %368
  %370 = add nuw nsw <4 x i32> %363, <i32 32, i32 32, i32 32, i32 32>
  %371 = add nsw <4 x i32> %370, %369
  %372 = ashr <4 x i32> %371, <i32 6, i32 6, i32 6, i32 6>
  %373 = getelementptr inbounds i8, i8* %271, i64 12
  %374 = bitcast i8* %373 to <4 x i8>*
  %375 = load <4 x i8>, <4 x i8>* %374, align 1
  %376 = zext <4 x i8> %375 to <4 x i32>
  %377 = sub nsw <4 x i32> %372, %376
  %378 = icmp slt <4 x i32> %377, zeroinitializer
  %379 = sub nsw <4 x i32> zeroinitializer, %377
  %380 = select <4 x i1> %378, <4 x i32> %379, <4 x i32> %377
  %381 = add <4 x i32> %380, %354
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %383 = add <4 x i32> %381, %382
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %385 = add <4 x i32> %383, %384
  %386 = extractelement <4 x i32> %385, i32 0
  %387 = getelementptr inbounds i8, i8* %271, i64 %11
  %388 = getelementptr inbounds i8, i8* %274, i64 %12
  %389 = getelementptr inbounds i8, i8* %275, i64 16
  %390 = getelementptr inbounds i8, i8* %276, i64 %13
  %391 = add nuw nsw i32 %273, 1
  %392 = icmp eq i32 %391, 16
  br i1 %392, label %393, label %270

393:                                              ; preds = %270
  %394 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %386, i32* %394, align 4
  %395 = getelementptr inbounds i8*, i8** %2, i64 2
  %396 = load i8*, i8** %395, align 8
  br label %397

397:                                              ; preds = %393, %397
  %398 = phi i8* [ %0, %393 ], [ %514, %397 ]
  %399 = phi i32 [ 0, %393 ], [ %513, %397 ]
  %400 = phi i32 [ 0, %393 ], [ %518, %397 ]
  %401 = phi i8* [ %396, %393 ], [ %515, %397 ]
  %402 = phi i8* [ %4, %393 ], [ %516, %397 ]
  %403 = phi i8* [ %5, %393 ], [ %517, %397 ]
  %404 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %399, i32 0
  %405 = bitcast i8* %403 to <4 x i8>*
  %406 = load <4 x i8>, <4 x i8>* %405, align 1
  %407 = zext <4 x i8> %406 to <4 x i32>
  %408 = bitcast i8* %401 to <4 x i8>*
  %409 = load <4 x i8>, <4 x i8>* %408, align 1
  %410 = zext <4 x i8> %409 to <4 x i32>
  %411 = mul nuw nsw <4 x i32> %410, %407
  %412 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %407
  %413 = bitcast i8* %402 to <4 x i8>*
  %414 = load <4 x i8>, <4 x i8>* %413, align 1
  %415 = zext <4 x i8> %414 to <4 x i32>
  %416 = mul nsw <4 x i32> %412, %415
  %417 = add nuw nsw <4 x i32> %411, <i32 32, i32 32, i32 32, i32 32>
  %418 = add nsw <4 x i32> %417, %416
  %419 = ashr <4 x i32> %418, <i32 6, i32 6, i32 6, i32 6>
  %420 = bitcast i8* %398 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = sub nsw <4 x i32> %419, %422
  %424 = icmp slt <4 x i32> %423, zeroinitializer
  %425 = sub nsw <4 x i32> zeroinitializer, %423
  %426 = select <4 x i1> %424, <4 x i32> %425, <4 x i32> %423
  %427 = add <4 x i32> %426, %404
  %428 = getelementptr inbounds i8, i8* %403, i64 4
  %429 = bitcast i8* %428 to <4 x i8>*
  %430 = load <4 x i8>, <4 x i8>* %429, align 1
  %431 = zext <4 x i8> %430 to <4 x i32>
  %432 = getelementptr inbounds i8, i8* %401, i64 4
  %433 = bitcast i8* %432 to <4 x i8>*
  %434 = load <4 x i8>, <4 x i8>* %433, align 1
  %435 = zext <4 x i8> %434 to <4 x i32>
  %436 = mul nuw nsw <4 x i32> %435, %431
  %437 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %431
  %438 = getelementptr inbounds i8, i8* %402, i64 4
  %439 = bitcast i8* %438 to <4 x i8>*
  %440 = load <4 x i8>, <4 x i8>* %439, align 1
  %441 = zext <4 x i8> %440 to <4 x i32>
  %442 = mul nsw <4 x i32> %437, %441
  %443 = add nuw nsw <4 x i32> %436, <i32 32, i32 32, i32 32, i32 32>
  %444 = add nsw <4 x i32> %443, %442
  %445 = ashr <4 x i32> %444, <i32 6, i32 6, i32 6, i32 6>
  %446 = getelementptr inbounds i8, i8* %398, i64 4
  %447 = bitcast i8* %446 to <4 x i8>*
  %448 = load <4 x i8>, <4 x i8>* %447, align 1
  %449 = zext <4 x i8> %448 to <4 x i32>
  %450 = sub nsw <4 x i32> %445, %449
  %451 = icmp slt <4 x i32> %450, zeroinitializer
  %452 = sub nsw <4 x i32> zeroinitializer, %450
  %453 = select <4 x i1> %451, <4 x i32> %452, <4 x i32> %450
  %454 = add <4 x i32> %453, %427
  %455 = getelementptr inbounds i8, i8* %403, i64 8
  %456 = bitcast i8* %455 to <4 x i8>*
  %457 = load <4 x i8>, <4 x i8>* %456, align 1
  %458 = zext <4 x i8> %457 to <4 x i32>
  %459 = getelementptr inbounds i8, i8* %401, i64 8
  %460 = bitcast i8* %459 to <4 x i8>*
  %461 = load <4 x i8>, <4 x i8>* %460, align 1
  %462 = zext <4 x i8> %461 to <4 x i32>
  %463 = mul nuw nsw <4 x i32> %462, %458
  %464 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %458
  %465 = getelementptr inbounds i8, i8* %402, i64 8
  %466 = bitcast i8* %465 to <4 x i8>*
  %467 = load <4 x i8>, <4 x i8>* %466, align 1
  %468 = zext <4 x i8> %467 to <4 x i32>
  %469 = mul nsw <4 x i32> %464, %468
  %470 = add nuw nsw <4 x i32> %463, <i32 32, i32 32, i32 32, i32 32>
  %471 = add nsw <4 x i32> %470, %469
  %472 = ashr <4 x i32> %471, <i32 6, i32 6, i32 6, i32 6>
  %473 = getelementptr inbounds i8, i8* %398, i64 8
  %474 = bitcast i8* %473 to <4 x i8>*
  %475 = load <4 x i8>, <4 x i8>* %474, align 1
  %476 = zext <4 x i8> %475 to <4 x i32>
  %477 = sub nsw <4 x i32> %472, %476
  %478 = icmp slt <4 x i32> %477, zeroinitializer
  %479 = sub nsw <4 x i32> zeroinitializer, %477
  %480 = select <4 x i1> %478, <4 x i32> %479, <4 x i32> %477
  %481 = add <4 x i32> %480, %454
  %482 = getelementptr inbounds i8, i8* %403, i64 12
  %483 = bitcast i8* %482 to <4 x i8>*
  %484 = load <4 x i8>, <4 x i8>* %483, align 1
  %485 = zext <4 x i8> %484 to <4 x i32>
  %486 = getelementptr inbounds i8, i8* %401, i64 12
  %487 = bitcast i8* %486 to <4 x i8>*
  %488 = load <4 x i8>, <4 x i8>* %487, align 1
  %489 = zext <4 x i8> %488 to <4 x i32>
  %490 = mul nuw nsw <4 x i32> %489, %485
  %491 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %485
  %492 = getelementptr inbounds i8, i8* %402, i64 12
  %493 = bitcast i8* %492 to <4 x i8>*
  %494 = load <4 x i8>, <4 x i8>* %493, align 1
  %495 = zext <4 x i8> %494 to <4 x i32>
  %496 = mul nsw <4 x i32> %491, %495
  %497 = add nuw nsw <4 x i32> %490, <i32 32, i32 32, i32 32, i32 32>
  %498 = add nsw <4 x i32> %497, %496
  %499 = ashr <4 x i32> %498, <i32 6, i32 6, i32 6, i32 6>
  %500 = getelementptr inbounds i8, i8* %398, i64 12
  %501 = bitcast i8* %500 to <4 x i8>*
  %502 = load <4 x i8>, <4 x i8>* %501, align 1
  %503 = zext <4 x i8> %502 to <4 x i32>
  %504 = sub nsw <4 x i32> %499, %503
  %505 = icmp slt <4 x i32> %504, zeroinitializer
  %506 = sub nsw <4 x i32> zeroinitializer, %504
  %507 = select <4 x i1> %505, <4 x i32> %506, <4 x i32> %504
  %508 = add <4 x i32> %507, %481
  %509 = shufflevector <4 x i32> %508, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %510 = add <4 x i32> %508, %509
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %512 = add <4 x i32> %510, %511
  %513 = extractelement <4 x i32> %512, i32 0
  %514 = getelementptr inbounds i8, i8* %398, i64 %11
  %515 = getelementptr inbounds i8, i8* %401, i64 %12
  %516 = getelementptr inbounds i8, i8* %402, i64 16
  %517 = getelementptr inbounds i8, i8* %403, i64 %13
  %518 = add nuw nsw i32 %400, 1
  %519 = icmp eq i32 %518, 16
  br i1 %519, label %520, label %397

520:                                              ; preds = %397
  %521 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %513, i32* %521, align 4
  %522 = getelementptr inbounds i8*, i8** %2, i64 3
  %523 = load i8*, i8** %522, align 8
  br label %524

524:                                              ; preds = %520, %524
  %525 = phi i8* [ %0, %520 ], [ %641, %524 ]
  %526 = phi i32 [ 0, %520 ], [ %640, %524 ]
  %527 = phi i32 [ 0, %520 ], [ %645, %524 ]
  %528 = phi i8* [ %523, %520 ], [ %642, %524 ]
  %529 = phi i8* [ %4, %520 ], [ %643, %524 ]
  %530 = phi i8* [ %5, %520 ], [ %644, %524 ]
  %531 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %526, i32 0
  %532 = bitcast i8* %530 to <4 x i8>*
  %533 = load <4 x i8>, <4 x i8>* %532, align 1
  %534 = zext <4 x i8> %533 to <4 x i32>
  %535 = bitcast i8* %528 to <4 x i8>*
  %536 = load <4 x i8>, <4 x i8>* %535, align 1
  %537 = zext <4 x i8> %536 to <4 x i32>
  %538 = mul nuw nsw <4 x i32> %537, %534
  %539 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %534
  %540 = bitcast i8* %529 to <4 x i8>*
  %541 = load <4 x i8>, <4 x i8>* %540, align 1
  %542 = zext <4 x i8> %541 to <4 x i32>
  %543 = mul nsw <4 x i32> %539, %542
  %544 = add nuw nsw <4 x i32> %538, <i32 32, i32 32, i32 32, i32 32>
  %545 = add nsw <4 x i32> %544, %543
  %546 = ashr <4 x i32> %545, <i32 6, i32 6, i32 6, i32 6>
  %547 = bitcast i8* %525 to <4 x i8>*
  %548 = load <4 x i8>, <4 x i8>* %547, align 1
  %549 = zext <4 x i8> %548 to <4 x i32>
  %550 = sub nsw <4 x i32> %546, %549
  %551 = icmp slt <4 x i32> %550, zeroinitializer
  %552 = sub nsw <4 x i32> zeroinitializer, %550
  %553 = select <4 x i1> %551, <4 x i32> %552, <4 x i32> %550
  %554 = add <4 x i32> %553, %531
  %555 = getelementptr inbounds i8, i8* %530, i64 4
  %556 = bitcast i8* %555 to <4 x i8>*
  %557 = load <4 x i8>, <4 x i8>* %556, align 1
  %558 = zext <4 x i8> %557 to <4 x i32>
  %559 = getelementptr inbounds i8, i8* %528, i64 4
  %560 = bitcast i8* %559 to <4 x i8>*
  %561 = load <4 x i8>, <4 x i8>* %560, align 1
  %562 = zext <4 x i8> %561 to <4 x i32>
  %563 = mul nuw nsw <4 x i32> %562, %558
  %564 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %558
  %565 = getelementptr inbounds i8, i8* %529, i64 4
  %566 = bitcast i8* %565 to <4 x i8>*
  %567 = load <4 x i8>, <4 x i8>* %566, align 1
  %568 = zext <4 x i8> %567 to <4 x i32>
  %569 = mul nsw <4 x i32> %564, %568
  %570 = add nuw nsw <4 x i32> %563, <i32 32, i32 32, i32 32, i32 32>
  %571 = add nsw <4 x i32> %570, %569
  %572 = ashr <4 x i32> %571, <i32 6, i32 6, i32 6, i32 6>
  %573 = getelementptr inbounds i8, i8* %525, i64 4
  %574 = bitcast i8* %573 to <4 x i8>*
  %575 = load <4 x i8>, <4 x i8>* %574, align 1
  %576 = zext <4 x i8> %575 to <4 x i32>
  %577 = sub nsw <4 x i32> %572, %576
  %578 = icmp slt <4 x i32> %577, zeroinitializer
  %579 = sub nsw <4 x i32> zeroinitializer, %577
  %580 = select <4 x i1> %578, <4 x i32> %579, <4 x i32> %577
  %581 = add <4 x i32> %580, %554
  %582 = getelementptr inbounds i8, i8* %530, i64 8
  %583 = bitcast i8* %582 to <4 x i8>*
  %584 = load <4 x i8>, <4 x i8>* %583, align 1
  %585 = zext <4 x i8> %584 to <4 x i32>
  %586 = getelementptr inbounds i8, i8* %528, i64 8
  %587 = bitcast i8* %586 to <4 x i8>*
  %588 = load <4 x i8>, <4 x i8>* %587, align 1
  %589 = zext <4 x i8> %588 to <4 x i32>
  %590 = mul nuw nsw <4 x i32> %589, %585
  %591 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %585
  %592 = getelementptr inbounds i8, i8* %529, i64 8
  %593 = bitcast i8* %592 to <4 x i8>*
  %594 = load <4 x i8>, <4 x i8>* %593, align 1
  %595 = zext <4 x i8> %594 to <4 x i32>
  %596 = mul nsw <4 x i32> %591, %595
  %597 = add nuw nsw <4 x i32> %590, <i32 32, i32 32, i32 32, i32 32>
  %598 = add nsw <4 x i32> %597, %596
  %599 = ashr <4 x i32> %598, <i32 6, i32 6, i32 6, i32 6>
  %600 = getelementptr inbounds i8, i8* %525, i64 8
  %601 = bitcast i8* %600 to <4 x i8>*
  %602 = load <4 x i8>, <4 x i8>* %601, align 1
  %603 = zext <4 x i8> %602 to <4 x i32>
  %604 = sub nsw <4 x i32> %599, %603
  %605 = icmp slt <4 x i32> %604, zeroinitializer
  %606 = sub nsw <4 x i32> zeroinitializer, %604
  %607 = select <4 x i1> %605, <4 x i32> %606, <4 x i32> %604
  %608 = add <4 x i32> %607, %581
  %609 = getelementptr inbounds i8, i8* %530, i64 12
  %610 = bitcast i8* %609 to <4 x i8>*
  %611 = load <4 x i8>, <4 x i8>* %610, align 1
  %612 = zext <4 x i8> %611 to <4 x i32>
  %613 = getelementptr inbounds i8, i8* %528, i64 12
  %614 = bitcast i8* %613 to <4 x i8>*
  %615 = load <4 x i8>, <4 x i8>* %614, align 1
  %616 = zext <4 x i8> %615 to <4 x i32>
  %617 = mul nuw nsw <4 x i32> %616, %612
  %618 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %612
  %619 = getelementptr inbounds i8, i8* %529, i64 12
  %620 = bitcast i8* %619 to <4 x i8>*
  %621 = load <4 x i8>, <4 x i8>* %620, align 1
  %622 = zext <4 x i8> %621 to <4 x i32>
  %623 = mul nsw <4 x i32> %618, %622
  %624 = add nuw nsw <4 x i32> %617, <i32 32, i32 32, i32 32, i32 32>
  %625 = add nsw <4 x i32> %624, %623
  %626 = ashr <4 x i32> %625, <i32 6, i32 6, i32 6, i32 6>
  %627 = getelementptr inbounds i8, i8* %525, i64 12
  %628 = bitcast i8* %627 to <4 x i8>*
  %629 = load <4 x i8>, <4 x i8>* %628, align 1
  %630 = zext <4 x i8> %629 to <4 x i32>
  %631 = sub nsw <4 x i32> %626, %630
  %632 = icmp slt <4 x i32> %631, zeroinitializer
  %633 = sub nsw <4 x i32> zeroinitializer, %631
  %634 = select <4 x i1> %632, <4 x i32> %633, <4 x i32> %631
  %635 = add <4 x i32> %634, %608
  %636 = shufflevector <4 x i32> %635, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %637 = add <4 x i32> %635, %636
  %638 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %639 = add <4 x i32> %637, %638
  %640 = extractelement <4 x i32> %639, i32 0
  %641 = getelementptr inbounds i8, i8* %525, i64 %11
  %642 = getelementptr inbounds i8, i8* %528, i64 %12
  %643 = getelementptr inbounds i8, i8* %529, i64 16
  %644 = getelementptr inbounds i8, i8* %530, i64 %13
  %645 = add nuw nsw i32 %527, 1
  %646 = icmp eq i32 %645, 16
  br i1 %646, label %267, label %524

647:                                              ; preds = %264, %647
  %648 = phi i8* [ %0, %264 ], [ %764, %647 ]
  %649 = phi i32 [ 0, %264 ], [ %763, %647 ]
  %650 = phi i32 [ 0, %264 ], [ %768, %647 ]
  %651 = phi i8* [ %4, %264 ], [ %765, %647 ]
  %652 = phi i8* [ %266, %264 ], [ %766, %647 ]
  %653 = phi i8* [ %5, %264 ], [ %767, %647 ]
  %654 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %649, i32 0
  %655 = bitcast i8* %653 to <4 x i8>*
  %656 = load <4 x i8>, <4 x i8>* %655, align 1
  %657 = zext <4 x i8> %656 to <4 x i32>
  %658 = bitcast i8* %651 to <4 x i8>*
  %659 = load <4 x i8>, <4 x i8>* %658, align 1
  %660 = zext <4 x i8> %659 to <4 x i32>
  %661 = mul nuw nsw <4 x i32> %660, %657
  %662 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %657
  %663 = bitcast i8* %652 to <4 x i8>*
  %664 = load <4 x i8>, <4 x i8>* %663, align 1
  %665 = zext <4 x i8> %664 to <4 x i32>
  %666 = mul nsw <4 x i32> %662, %665
  %667 = add nuw nsw <4 x i32> %661, <i32 32, i32 32, i32 32, i32 32>
  %668 = add nsw <4 x i32> %667, %666
  %669 = ashr <4 x i32> %668, <i32 6, i32 6, i32 6, i32 6>
  %670 = bitcast i8* %648 to <4 x i8>*
  %671 = load <4 x i8>, <4 x i8>* %670, align 1
  %672 = zext <4 x i8> %671 to <4 x i32>
  %673 = sub nsw <4 x i32> %669, %672
  %674 = icmp slt <4 x i32> %673, zeroinitializer
  %675 = sub nsw <4 x i32> zeroinitializer, %673
  %676 = select <4 x i1> %674, <4 x i32> %675, <4 x i32> %673
  %677 = add <4 x i32> %676, %654
  %678 = getelementptr inbounds i8, i8* %653, i64 4
  %679 = bitcast i8* %678 to <4 x i8>*
  %680 = load <4 x i8>, <4 x i8>* %679, align 1
  %681 = zext <4 x i8> %680 to <4 x i32>
  %682 = getelementptr inbounds i8, i8* %651, i64 4
  %683 = bitcast i8* %682 to <4 x i8>*
  %684 = load <4 x i8>, <4 x i8>* %683, align 1
  %685 = zext <4 x i8> %684 to <4 x i32>
  %686 = mul nuw nsw <4 x i32> %685, %681
  %687 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %681
  %688 = getelementptr inbounds i8, i8* %652, i64 4
  %689 = bitcast i8* %688 to <4 x i8>*
  %690 = load <4 x i8>, <4 x i8>* %689, align 1
  %691 = zext <4 x i8> %690 to <4 x i32>
  %692 = mul nsw <4 x i32> %687, %691
  %693 = add nuw nsw <4 x i32> %686, <i32 32, i32 32, i32 32, i32 32>
  %694 = add nsw <4 x i32> %693, %692
  %695 = ashr <4 x i32> %694, <i32 6, i32 6, i32 6, i32 6>
  %696 = getelementptr inbounds i8, i8* %648, i64 4
  %697 = bitcast i8* %696 to <4 x i8>*
  %698 = load <4 x i8>, <4 x i8>* %697, align 1
  %699 = zext <4 x i8> %698 to <4 x i32>
  %700 = sub nsw <4 x i32> %695, %699
  %701 = icmp slt <4 x i32> %700, zeroinitializer
  %702 = sub nsw <4 x i32> zeroinitializer, %700
  %703 = select <4 x i1> %701, <4 x i32> %702, <4 x i32> %700
  %704 = add <4 x i32> %703, %677
  %705 = getelementptr inbounds i8, i8* %653, i64 8
  %706 = bitcast i8* %705 to <4 x i8>*
  %707 = load <4 x i8>, <4 x i8>* %706, align 1
  %708 = zext <4 x i8> %707 to <4 x i32>
  %709 = getelementptr inbounds i8, i8* %651, i64 8
  %710 = bitcast i8* %709 to <4 x i8>*
  %711 = load <4 x i8>, <4 x i8>* %710, align 1
  %712 = zext <4 x i8> %711 to <4 x i32>
  %713 = mul nuw nsw <4 x i32> %712, %708
  %714 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %708
  %715 = getelementptr inbounds i8, i8* %652, i64 8
  %716 = bitcast i8* %715 to <4 x i8>*
  %717 = load <4 x i8>, <4 x i8>* %716, align 1
  %718 = zext <4 x i8> %717 to <4 x i32>
  %719 = mul nsw <4 x i32> %714, %718
  %720 = add nuw nsw <4 x i32> %713, <i32 32, i32 32, i32 32, i32 32>
  %721 = add nsw <4 x i32> %720, %719
  %722 = ashr <4 x i32> %721, <i32 6, i32 6, i32 6, i32 6>
  %723 = getelementptr inbounds i8, i8* %648, i64 8
  %724 = bitcast i8* %723 to <4 x i8>*
  %725 = load <4 x i8>, <4 x i8>* %724, align 1
  %726 = zext <4 x i8> %725 to <4 x i32>
  %727 = sub nsw <4 x i32> %722, %726
  %728 = icmp slt <4 x i32> %727, zeroinitializer
  %729 = sub nsw <4 x i32> zeroinitializer, %727
  %730 = select <4 x i1> %728, <4 x i32> %729, <4 x i32> %727
  %731 = add <4 x i32> %730, %704
  %732 = getelementptr inbounds i8, i8* %653, i64 12
  %733 = bitcast i8* %732 to <4 x i8>*
  %734 = load <4 x i8>, <4 x i8>* %733, align 1
  %735 = zext <4 x i8> %734 to <4 x i32>
  %736 = getelementptr inbounds i8, i8* %651, i64 12
  %737 = bitcast i8* %736 to <4 x i8>*
  %738 = load <4 x i8>, <4 x i8>* %737, align 1
  %739 = zext <4 x i8> %738 to <4 x i32>
  %740 = mul nuw nsw <4 x i32> %739, %735
  %741 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %735
  %742 = getelementptr inbounds i8, i8* %652, i64 12
  %743 = bitcast i8* %742 to <4 x i8>*
  %744 = load <4 x i8>, <4 x i8>* %743, align 1
  %745 = zext <4 x i8> %744 to <4 x i32>
  %746 = mul nsw <4 x i32> %741, %745
  %747 = add nuw nsw <4 x i32> %740, <i32 32, i32 32, i32 32, i32 32>
  %748 = add nsw <4 x i32> %747, %746
  %749 = ashr <4 x i32> %748, <i32 6, i32 6, i32 6, i32 6>
  %750 = getelementptr inbounds i8, i8* %648, i64 12
  %751 = bitcast i8* %750 to <4 x i8>*
  %752 = load <4 x i8>, <4 x i8>* %751, align 1
  %753 = zext <4 x i8> %752 to <4 x i32>
  %754 = sub nsw <4 x i32> %749, %753
  %755 = icmp slt <4 x i32> %754, zeroinitializer
  %756 = sub nsw <4 x i32> zeroinitializer, %754
  %757 = select <4 x i1> %755, <4 x i32> %756, <4 x i32> %754
  %758 = add <4 x i32> %757, %731
  %759 = shufflevector <4 x i32> %758, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %760 = add <4 x i32> %758, %759
  %761 = shufflevector <4 x i32> %760, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %762 = add <4 x i32> %760, %761
  %763 = extractelement <4 x i32> %762, i32 0
  %764 = getelementptr inbounds i8, i8* %648, i64 %11
  %765 = getelementptr inbounds i8, i8* %651, i64 16
  %766 = getelementptr inbounds i8, i8* %652, i64 %12
  %767 = getelementptr inbounds i8, i8* %653, i64 %13
  %768 = add nuw nsw i32 %650, 1
  %769 = icmp eq i32 %768, 16
  br i1 %769, label %770, label %647

770:                                              ; preds = %647
  %771 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %763, i32* %771, align 4
  %772 = getelementptr inbounds i8*, i8** %2, i64 2
  %773 = load i8*, i8** %772, align 8
  br label %774

774:                                              ; preds = %770, %774
  %775 = phi i8* [ %0, %770 ], [ %891, %774 ]
  %776 = phi i32 [ 0, %770 ], [ %890, %774 ]
  %777 = phi i32 [ 0, %770 ], [ %895, %774 ]
  %778 = phi i8* [ %4, %770 ], [ %892, %774 ]
  %779 = phi i8* [ %773, %770 ], [ %893, %774 ]
  %780 = phi i8* [ %5, %770 ], [ %894, %774 ]
  %781 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %776, i32 0
  %782 = bitcast i8* %780 to <4 x i8>*
  %783 = load <4 x i8>, <4 x i8>* %782, align 1
  %784 = zext <4 x i8> %783 to <4 x i32>
  %785 = bitcast i8* %778 to <4 x i8>*
  %786 = load <4 x i8>, <4 x i8>* %785, align 1
  %787 = zext <4 x i8> %786 to <4 x i32>
  %788 = mul nuw nsw <4 x i32> %787, %784
  %789 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %784
  %790 = bitcast i8* %779 to <4 x i8>*
  %791 = load <4 x i8>, <4 x i8>* %790, align 1
  %792 = zext <4 x i8> %791 to <4 x i32>
  %793 = mul nsw <4 x i32> %789, %792
  %794 = add nuw nsw <4 x i32> %788, <i32 32, i32 32, i32 32, i32 32>
  %795 = add nsw <4 x i32> %794, %793
  %796 = ashr <4 x i32> %795, <i32 6, i32 6, i32 6, i32 6>
  %797 = bitcast i8* %775 to <4 x i8>*
  %798 = load <4 x i8>, <4 x i8>* %797, align 1
  %799 = zext <4 x i8> %798 to <4 x i32>
  %800 = sub nsw <4 x i32> %796, %799
  %801 = icmp slt <4 x i32> %800, zeroinitializer
  %802 = sub nsw <4 x i32> zeroinitializer, %800
  %803 = select <4 x i1> %801, <4 x i32> %802, <4 x i32> %800
  %804 = add <4 x i32> %803, %781
  %805 = getelementptr inbounds i8, i8* %780, i64 4
  %806 = bitcast i8* %805 to <4 x i8>*
  %807 = load <4 x i8>, <4 x i8>* %806, align 1
  %808 = zext <4 x i8> %807 to <4 x i32>
  %809 = getelementptr inbounds i8, i8* %778, i64 4
  %810 = bitcast i8* %809 to <4 x i8>*
  %811 = load <4 x i8>, <4 x i8>* %810, align 1
  %812 = zext <4 x i8> %811 to <4 x i32>
  %813 = mul nuw nsw <4 x i32> %812, %808
  %814 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %808
  %815 = getelementptr inbounds i8, i8* %779, i64 4
  %816 = bitcast i8* %815 to <4 x i8>*
  %817 = load <4 x i8>, <4 x i8>* %816, align 1
  %818 = zext <4 x i8> %817 to <4 x i32>
  %819 = mul nsw <4 x i32> %814, %818
  %820 = add nuw nsw <4 x i32> %813, <i32 32, i32 32, i32 32, i32 32>
  %821 = add nsw <4 x i32> %820, %819
  %822 = ashr <4 x i32> %821, <i32 6, i32 6, i32 6, i32 6>
  %823 = getelementptr inbounds i8, i8* %775, i64 4
  %824 = bitcast i8* %823 to <4 x i8>*
  %825 = load <4 x i8>, <4 x i8>* %824, align 1
  %826 = zext <4 x i8> %825 to <4 x i32>
  %827 = sub nsw <4 x i32> %822, %826
  %828 = icmp slt <4 x i32> %827, zeroinitializer
  %829 = sub nsw <4 x i32> zeroinitializer, %827
  %830 = select <4 x i1> %828, <4 x i32> %829, <4 x i32> %827
  %831 = add <4 x i32> %830, %804
  %832 = getelementptr inbounds i8, i8* %780, i64 8
  %833 = bitcast i8* %832 to <4 x i8>*
  %834 = load <4 x i8>, <4 x i8>* %833, align 1
  %835 = zext <4 x i8> %834 to <4 x i32>
  %836 = getelementptr inbounds i8, i8* %778, i64 8
  %837 = bitcast i8* %836 to <4 x i8>*
  %838 = load <4 x i8>, <4 x i8>* %837, align 1
  %839 = zext <4 x i8> %838 to <4 x i32>
  %840 = mul nuw nsw <4 x i32> %839, %835
  %841 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %835
  %842 = getelementptr inbounds i8, i8* %779, i64 8
  %843 = bitcast i8* %842 to <4 x i8>*
  %844 = load <4 x i8>, <4 x i8>* %843, align 1
  %845 = zext <4 x i8> %844 to <4 x i32>
  %846 = mul nsw <4 x i32> %841, %845
  %847 = add nuw nsw <4 x i32> %840, <i32 32, i32 32, i32 32, i32 32>
  %848 = add nsw <4 x i32> %847, %846
  %849 = ashr <4 x i32> %848, <i32 6, i32 6, i32 6, i32 6>
  %850 = getelementptr inbounds i8, i8* %775, i64 8
  %851 = bitcast i8* %850 to <4 x i8>*
  %852 = load <4 x i8>, <4 x i8>* %851, align 1
  %853 = zext <4 x i8> %852 to <4 x i32>
  %854 = sub nsw <4 x i32> %849, %853
  %855 = icmp slt <4 x i32> %854, zeroinitializer
  %856 = sub nsw <4 x i32> zeroinitializer, %854
  %857 = select <4 x i1> %855, <4 x i32> %856, <4 x i32> %854
  %858 = add <4 x i32> %857, %831
  %859 = getelementptr inbounds i8, i8* %780, i64 12
  %860 = bitcast i8* %859 to <4 x i8>*
  %861 = load <4 x i8>, <4 x i8>* %860, align 1
  %862 = zext <4 x i8> %861 to <4 x i32>
  %863 = getelementptr inbounds i8, i8* %778, i64 12
  %864 = bitcast i8* %863 to <4 x i8>*
  %865 = load <4 x i8>, <4 x i8>* %864, align 1
  %866 = zext <4 x i8> %865 to <4 x i32>
  %867 = mul nuw nsw <4 x i32> %866, %862
  %868 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %862
  %869 = getelementptr inbounds i8, i8* %779, i64 12
  %870 = bitcast i8* %869 to <4 x i8>*
  %871 = load <4 x i8>, <4 x i8>* %870, align 1
  %872 = zext <4 x i8> %871 to <4 x i32>
  %873 = mul nsw <4 x i32> %868, %872
  %874 = add nuw nsw <4 x i32> %867, <i32 32, i32 32, i32 32, i32 32>
  %875 = add nsw <4 x i32> %874, %873
  %876 = ashr <4 x i32> %875, <i32 6, i32 6, i32 6, i32 6>
  %877 = getelementptr inbounds i8, i8* %775, i64 12
  %878 = bitcast i8* %877 to <4 x i8>*
  %879 = load <4 x i8>, <4 x i8>* %878, align 1
  %880 = zext <4 x i8> %879 to <4 x i32>
  %881 = sub nsw <4 x i32> %876, %880
  %882 = icmp slt <4 x i32> %881, zeroinitializer
  %883 = sub nsw <4 x i32> zeroinitializer, %881
  %884 = select <4 x i1> %882, <4 x i32> %883, <4 x i32> %881
  %885 = add <4 x i32> %884, %858
  %886 = shufflevector <4 x i32> %885, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %887 = add <4 x i32> %885, %886
  %888 = shufflevector <4 x i32> %887, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %889 = add <4 x i32> %887, %888
  %890 = extractelement <4 x i32> %889, i32 0
  %891 = getelementptr inbounds i8, i8* %775, i64 %11
  %892 = getelementptr inbounds i8, i8* %778, i64 16
  %893 = getelementptr inbounds i8, i8* %779, i64 %12
  %894 = getelementptr inbounds i8, i8* %780, i64 %13
  %895 = add nuw nsw i32 %777, 1
  %896 = icmp eq i32 %895, 16
  br i1 %896, label %897, label %774

897:                                              ; preds = %774
  %898 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %890, i32* %898, align 4
  %899 = getelementptr inbounds i8*, i8** %2, i64 3
  %900 = load i8*, i8** %899, align 8
  br label %901

901:                                              ; preds = %897, %901
  %902 = phi i8* [ %0, %897 ], [ %1018, %901 ]
  %903 = phi i32 [ 0, %897 ], [ %1017, %901 ]
  %904 = phi i32 [ 0, %897 ], [ %1022, %901 ]
  %905 = phi i8* [ %4, %897 ], [ %1019, %901 ]
  %906 = phi i8* [ %900, %897 ], [ %1020, %901 ]
  %907 = phi i8* [ %5, %897 ], [ %1021, %901 ]
  %908 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %903, i32 0
  %909 = bitcast i8* %907 to <4 x i8>*
  %910 = load <4 x i8>, <4 x i8>* %909, align 1
  %911 = zext <4 x i8> %910 to <4 x i32>
  %912 = bitcast i8* %905 to <4 x i8>*
  %913 = load <4 x i8>, <4 x i8>* %912, align 1
  %914 = zext <4 x i8> %913 to <4 x i32>
  %915 = mul nuw nsw <4 x i32> %914, %911
  %916 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %911
  %917 = bitcast i8* %906 to <4 x i8>*
  %918 = load <4 x i8>, <4 x i8>* %917, align 1
  %919 = zext <4 x i8> %918 to <4 x i32>
  %920 = mul nsw <4 x i32> %916, %919
  %921 = add nuw nsw <4 x i32> %915, <i32 32, i32 32, i32 32, i32 32>
  %922 = add nsw <4 x i32> %921, %920
  %923 = ashr <4 x i32> %922, <i32 6, i32 6, i32 6, i32 6>
  %924 = bitcast i8* %902 to <4 x i8>*
  %925 = load <4 x i8>, <4 x i8>* %924, align 1
  %926 = zext <4 x i8> %925 to <4 x i32>
  %927 = sub nsw <4 x i32> %923, %926
  %928 = icmp slt <4 x i32> %927, zeroinitializer
  %929 = sub nsw <4 x i32> zeroinitializer, %927
  %930 = select <4 x i1> %928, <4 x i32> %929, <4 x i32> %927
  %931 = add <4 x i32> %930, %908
  %932 = getelementptr inbounds i8, i8* %907, i64 4
  %933 = bitcast i8* %932 to <4 x i8>*
  %934 = load <4 x i8>, <4 x i8>* %933, align 1
  %935 = zext <4 x i8> %934 to <4 x i32>
  %936 = getelementptr inbounds i8, i8* %905, i64 4
  %937 = bitcast i8* %936 to <4 x i8>*
  %938 = load <4 x i8>, <4 x i8>* %937, align 1
  %939 = zext <4 x i8> %938 to <4 x i32>
  %940 = mul nuw nsw <4 x i32> %939, %935
  %941 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %935
  %942 = getelementptr inbounds i8, i8* %906, i64 4
  %943 = bitcast i8* %942 to <4 x i8>*
  %944 = load <4 x i8>, <4 x i8>* %943, align 1
  %945 = zext <4 x i8> %944 to <4 x i32>
  %946 = mul nsw <4 x i32> %941, %945
  %947 = add nuw nsw <4 x i32> %940, <i32 32, i32 32, i32 32, i32 32>
  %948 = add nsw <4 x i32> %947, %946
  %949 = ashr <4 x i32> %948, <i32 6, i32 6, i32 6, i32 6>
  %950 = getelementptr inbounds i8, i8* %902, i64 4
  %951 = bitcast i8* %950 to <4 x i8>*
  %952 = load <4 x i8>, <4 x i8>* %951, align 1
  %953 = zext <4 x i8> %952 to <4 x i32>
  %954 = sub nsw <4 x i32> %949, %953
  %955 = icmp slt <4 x i32> %954, zeroinitializer
  %956 = sub nsw <4 x i32> zeroinitializer, %954
  %957 = select <4 x i1> %955, <4 x i32> %956, <4 x i32> %954
  %958 = add <4 x i32> %957, %931
  %959 = getelementptr inbounds i8, i8* %907, i64 8
  %960 = bitcast i8* %959 to <4 x i8>*
  %961 = load <4 x i8>, <4 x i8>* %960, align 1
  %962 = zext <4 x i8> %961 to <4 x i32>
  %963 = getelementptr inbounds i8, i8* %905, i64 8
  %964 = bitcast i8* %963 to <4 x i8>*
  %965 = load <4 x i8>, <4 x i8>* %964, align 1
  %966 = zext <4 x i8> %965 to <4 x i32>
  %967 = mul nuw nsw <4 x i32> %966, %962
  %968 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %962
  %969 = getelementptr inbounds i8, i8* %906, i64 8
  %970 = bitcast i8* %969 to <4 x i8>*
  %971 = load <4 x i8>, <4 x i8>* %970, align 1
  %972 = zext <4 x i8> %971 to <4 x i32>
  %973 = mul nsw <4 x i32> %968, %972
  %974 = add nuw nsw <4 x i32> %967, <i32 32, i32 32, i32 32, i32 32>
  %975 = add nsw <4 x i32> %974, %973
  %976 = ashr <4 x i32> %975, <i32 6, i32 6, i32 6, i32 6>
  %977 = getelementptr inbounds i8, i8* %902, i64 8
  %978 = bitcast i8* %977 to <4 x i8>*
  %979 = load <4 x i8>, <4 x i8>* %978, align 1
  %980 = zext <4 x i8> %979 to <4 x i32>
  %981 = sub nsw <4 x i32> %976, %980
  %982 = icmp slt <4 x i32> %981, zeroinitializer
  %983 = sub nsw <4 x i32> zeroinitializer, %981
  %984 = select <4 x i1> %982, <4 x i32> %983, <4 x i32> %981
  %985 = add <4 x i32> %984, %958
  %986 = getelementptr inbounds i8, i8* %907, i64 12
  %987 = bitcast i8* %986 to <4 x i8>*
  %988 = load <4 x i8>, <4 x i8>* %987, align 1
  %989 = zext <4 x i8> %988 to <4 x i32>
  %990 = getelementptr inbounds i8, i8* %905, i64 12
  %991 = bitcast i8* %990 to <4 x i8>*
  %992 = load <4 x i8>, <4 x i8>* %991, align 1
  %993 = zext <4 x i8> %992 to <4 x i32>
  %994 = mul nuw nsw <4 x i32> %993, %989
  %995 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %989
  %996 = getelementptr inbounds i8, i8* %906, i64 12
  %997 = bitcast i8* %996 to <4 x i8>*
  %998 = load <4 x i8>, <4 x i8>* %997, align 1
  %999 = zext <4 x i8> %998 to <4 x i32>
  %1000 = mul nsw <4 x i32> %995, %999
  %1001 = add nuw nsw <4 x i32> %994, <i32 32, i32 32, i32 32, i32 32>
  %1002 = add nsw <4 x i32> %1001, %1000
  %1003 = ashr <4 x i32> %1002, <i32 6, i32 6, i32 6, i32 6>
  %1004 = getelementptr inbounds i8, i8* %902, i64 12
  %1005 = bitcast i8* %1004 to <4 x i8>*
  %1006 = load <4 x i8>, <4 x i8>* %1005, align 1
  %1007 = zext <4 x i8> %1006 to <4 x i32>
  %1008 = sub nsw <4 x i32> %1003, %1007
  %1009 = icmp slt <4 x i32> %1008, zeroinitializer
  %1010 = sub nsw <4 x i32> zeroinitializer, %1008
  %1011 = select <4 x i1> %1009, <4 x i32> %1010, <4 x i32> %1008
  %1012 = add <4 x i32> %1011, %985
  %1013 = shufflevector <4 x i32> %1012, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1014 = add <4 x i32> %1012, %1013
  %1015 = shufflevector <4 x i32> %1014, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1016 = add <4 x i32> %1014, %1015
  %1017 = extractelement <4 x i32> %1016, i32 0
  %1018 = getelementptr inbounds i8, i8* %902, i64 %11
  %1019 = getelementptr inbounds i8, i8* %905, i64 16
  %1020 = getelementptr inbounds i8, i8* %906, i64 %12
  %1021 = getelementptr inbounds i8, i8* %907, i64 %13
  %1022 = add nuw nsw i32 %904, 1
  %1023 = icmp eq i32 %1022, 16
  br i1 %1023, label %267, label %901
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %136

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %130, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %129, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %134, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %131, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %132, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %133, %13 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %21 = bitcast i8* %19 to <4 x i8>*
  %22 = load <4 x i8>, <4 x i8>* %21, align 1
  %23 = zext <4 x i8> %22 to <4 x i32>
  %24 = bitcast i8* %17 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1
  %26 = zext <4 x i8> %25 to <4 x i32>
  %27 = mul nuw nsw <4 x i32> %26, %23
  %28 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %23
  %29 = bitcast i8* %18 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nsw <4 x i32> %28, %31
  %33 = add nuw nsw <4 x i32> %27, <i32 32, i32 32, i32 32, i32 32>
  %34 = add nsw <4 x i32> %33, %32
  %35 = ashr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %36 = bitcast i8* %14 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = zext <4 x i8> %37 to <4 x i32>
  %39 = sub nsw <4 x i32> %35, %38
  %40 = icmp slt <4 x i32> %39, zeroinitializer
  %41 = sub nsw <4 x i32> zeroinitializer, %39
  %42 = select <4 x i1> %40, <4 x i32> %41, <4 x i32> %39
  %43 = add <4 x i32> %42, %20
  %44 = getelementptr inbounds i8, i8* %19, i64 4
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = getelementptr inbounds i8, i8* %17, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %50 to <4 x i32>
  %52 = mul nuw nsw <4 x i32> %51, %47
  %53 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %47
  %54 = getelementptr inbounds i8, i8* %18, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = mul nsw <4 x i32> %53, %57
  %59 = add nuw nsw <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %60 = add nsw <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %62 = getelementptr inbounds i8, i8* %14, i64 4
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = sub nsw <4 x i32> %61, %65
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add <4 x i32> %69, %43
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = zext <4 x i8> %73 to <4 x i32>
  %75 = getelementptr inbounds i8, i8* %17, i64 8
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = mul nuw nsw <4 x i32> %78, %74
  %80 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %74
  %81 = getelementptr inbounds i8, i8* %18, i64 8
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = mul nsw <4 x i32> %80, %84
  %86 = add nuw nsw <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %87 = add nsw <4 x i32> %86, %85
  %88 = ashr <4 x i32> %87, <i32 6, i32 6, i32 6, i32 6>
  %89 = getelementptr inbounds i8, i8* %14, i64 8
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = sub nsw <4 x i32> %88, %92
  %94 = icmp slt <4 x i32> %93, zeroinitializer
  %95 = sub nsw <4 x i32> zeroinitializer, %93
  %96 = select <4 x i1> %94, <4 x i32> %95, <4 x i32> %93
  %97 = add <4 x i32> %96, %70
  %98 = getelementptr inbounds i8, i8* %19, i64 12
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = getelementptr inbounds i8, i8* %17, i64 12
  %103 = bitcast i8* %102 to <4 x i8>*
  %104 = load <4 x i8>, <4 x i8>* %103, align 1
  %105 = zext <4 x i8> %104 to <4 x i32>
  %106 = mul nuw nsw <4 x i32> %105, %101
  %107 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %101
  %108 = getelementptr inbounds i8, i8* %18, i64 12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = mul nsw <4 x i32> %107, %111
  %113 = add nuw nsw <4 x i32> %106, <i32 32, i32 32, i32 32, i32 32>
  %114 = add nsw <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = getelementptr inbounds i8, i8* %14, i64 12
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = sub nsw <4 x i32> %115, %119
  %121 = icmp slt <4 x i32> %120, zeroinitializer
  %122 = sub nsw <4 x i32> zeroinitializer, %120
  %123 = select <4 x i1> %121, <4 x i32> %122, <4 x i32> %120
  %124 = add <4 x i32> %123, %97
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %126 = add <4 x i32> %124, %125
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %128 = add <4 x i32> %126, %127
  %129 = extractelement <4 x i32> %128, i32 0
  %130 = getelementptr inbounds i8, i8* %14, i64 %10
  %131 = getelementptr inbounds i8, i8* %17, i64 %11
  %132 = getelementptr inbounds i8, i8* %18, i64 16
  %133 = getelementptr inbounds i8, i8* %19, i64 %12
  %134 = add nuw nsw i32 %16, 1
  %135 = icmp eq i32 %134, 8
  br i1 %135, label %259, label %13

136:                                              ; preds = %8, %136
  %137 = phi i8* [ %253, %136 ], [ %0, %8 ]
  %138 = phi i32 [ %252, %136 ], [ 0, %8 ]
  %139 = phi i32 [ %257, %136 ], [ 0, %8 ]
  %140 = phi i8* [ %254, %136 ], [ %4, %8 ]
  %141 = phi i8* [ %255, %136 ], [ %2, %8 ]
  %142 = phi i8* [ %256, %136 ], [ %5, %8 ]
  %143 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %138, i32 0
  %144 = bitcast i8* %142 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = bitcast i8* %140 to <4 x i8>*
  %148 = load <4 x i8>, <4 x i8>* %147, align 1
  %149 = zext <4 x i8> %148 to <4 x i32>
  %150 = mul nuw nsw <4 x i32> %149, %146
  %151 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %146
  %152 = bitcast i8* %141 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1
  %154 = zext <4 x i8> %153 to <4 x i32>
  %155 = mul nsw <4 x i32> %151, %154
  %156 = add nuw nsw <4 x i32> %150, <i32 32, i32 32, i32 32, i32 32>
  %157 = add nsw <4 x i32> %156, %155
  %158 = ashr <4 x i32> %157, <i32 6, i32 6, i32 6, i32 6>
  %159 = bitcast i8* %137 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = sub nsw <4 x i32> %158, %161
  %163 = icmp slt <4 x i32> %162, zeroinitializer
  %164 = sub nsw <4 x i32> zeroinitializer, %162
  %165 = select <4 x i1> %163, <4 x i32> %164, <4 x i32> %162
  %166 = add <4 x i32> %165, %143
  %167 = getelementptr inbounds i8, i8* %142, i64 4
  %168 = bitcast i8* %167 to <4 x i8>*
  %169 = load <4 x i8>, <4 x i8>* %168, align 1
  %170 = zext <4 x i8> %169 to <4 x i32>
  %171 = getelementptr inbounds i8, i8* %140, i64 4
  %172 = bitcast i8* %171 to <4 x i8>*
  %173 = load <4 x i8>, <4 x i8>* %172, align 1
  %174 = zext <4 x i8> %173 to <4 x i32>
  %175 = mul nuw nsw <4 x i32> %174, %170
  %176 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %170
  %177 = getelementptr inbounds i8, i8* %141, i64 4
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %180 = zext <4 x i8> %179 to <4 x i32>
  %181 = mul nsw <4 x i32> %176, %180
  %182 = add nuw nsw <4 x i32> %175, <i32 32, i32 32, i32 32, i32 32>
  %183 = add nsw <4 x i32> %182, %181
  %184 = ashr <4 x i32> %183, <i32 6, i32 6, i32 6, i32 6>
  %185 = getelementptr inbounds i8, i8* %137, i64 4
  %186 = bitcast i8* %185 to <4 x i8>*
  %187 = load <4 x i8>, <4 x i8>* %186, align 1
  %188 = zext <4 x i8> %187 to <4 x i32>
  %189 = sub nsw <4 x i32> %184, %188
  %190 = icmp slt <4 x i32> %189, zeroinitializer
  %191 = sub nsw <4 x i32> zeroinitializer, %189
  %192 = select <4 x i1> %190, <4 x i32> %191, <4 x i32> %189
  %193 = add <4 x i32> %192, %166
  %194 = getelementptr inbounds i8, i8* %142, i64 8
  %195 = bitcast i8* %194 to <4 x i8>*
  %196 = load <4 x i8>, <4 x i8>* %195, align 1
  %197 = zext <4 x i8> %196 to <4 x i32>
  %198 = getelementptr inbounds i8, i8* %140, i64 8
  %199 = bitcast i8* %198 to <4 x i8>*
  %200 = load <4 x i8>, <4 x i8>* %199, align 1
  %201 = zext <4 x i8> %200 to <4 x i32>
  %202 = mul nuw nsw <4 x i32> %201, %197
  %203 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %197
  %204 = getelementptr inbounds i8, i8* %141, i64 8
  %205 = bitcast i8* %204 to <4 x i8>*
  %206 = load <4 x i8>, <4 x i8>* %205, align 1
  %207 = zext <4 x i8> %206 to <4 x i32>
  %208 = mul nsw <4 x i32> %203, %207
  %209 = add nuw nsw <4 x i32> %202, <i32 32, i32 32, i32 32, i32 32>
  %210 = add nsw <4 x i32> %209, %208
  %211 = ashr <4 x i32> %210, <i32 6, i32 6, i32 6, i32 6>
  %212 = getelementptr inbounds i8, i8* %137, i64 8
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = zext <4 x i8> %214 to <4 x i32>
  %216 = sub nsw <4 x i32> %211, %215
  %217 = icmp slt <4 x i32> %216, zeroinitializer
  %218 = sub nsw <4 x i32> zeroinitializer, %216
  %219 = select <4 x i1> %217, <4 x i32> %218, <4 x i32> %216
  %220 = add <4 x i32> %219, %193
  %221 = getelementptr inbounds i8, i8* %142, i64 12
  %222 = bitcast i8* %221 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1
  %224 = zext <4 x i8> %223 to <4 x i32>
  %225 = getelementptr inbounds i8, i8* %140, i64 12
  %226 = bitcast i8* %225 to <4 x i8>*
  %227 = load <4 x i8>, <4 x i8>* %226, align 1
  %228 = zext <4 x i8> %227 to <4 x i32>
  %229 = mul nuw nsw <4 x i32> %228, %224
  %230 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %224
  %231 = getelementptr inbounds i8, i8* %141, i64 12
  %232 = bitcast i8* %231 to <4 x i8>*
  %233 = load <4 x i8>, <4 x i8>* %232, align 1
  %234 = zext <4 x i8> %233 to <4 x i32>
  %235 = mul nsw <4 x i32> %230, %234
  %236 = add nuw nsw <4 x i32> %229, <i32 32, i32 32, i32 32, i32 32>
  %237 = add nsw <4 x i32> %236, %235
  %238 = ashr <4 x i32> %237, <i32 6, i32 6, i32 6, i32 6>
  %239 = getelementptr inbounds i8, i8* %137, i64 12
  %240 = bitcast i8* %239 to <4 x i8>*
  %241 = load <4 x i8>, <4 x i8>* %240, align 1
  %242 = zext <4 x i8> %241 to <4 x i32>
  %243 = sub nsw <4 x i32> %238, %242
  %244 = icmp slt <4 x i32> %243, zeroinitializer
  %245 = sub nsw <4 x i32> zeroinitializer, %243
  %246 = select <4 x i1> %244, <4 x i32> %245, <4 x i32> %243
  %247 = add <4 x i32> %246, %220
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %249 = add <4 x i32> %247, %248
  %250 = shufflevector <4 x i32> %249, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %251 = add <4 x i32> %249, %250
  %252 = extractelement <4 x i32> %251, i32 0
  %253 = getelementptr inbounds i8, i8* %137, i64 %10
  %254 = getelementptr inbounds i8, i8* %140, i64 16
  %255 = getelementptr inbounds i8, i8* %141, i64 %11
  %256 = getelementptr inbounds i8, i8* %142, i64 %12
  %257 = add nuw nsw i32 %139, 1
  %258 = icmp eq i32 %257, 8
  br i1 %258, label %259, label %136

259:                                              ; preds = %136, %13
  %260 = phi i32 [ %129, %13 ], [ %252, %136 ]
  ret i32 %260
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad16x8x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %141

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %132, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %131, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %136, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %133, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %134, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %135, %15 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %23 = bitcast i8* %21 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = bitcast i8* %19 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = zext <4 x i8> %27 to <4 x i32>
  %29 = mul nuw nsw <4 x i32> %28, %25
  %30 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %25
  %31 = bitcast i8* %20 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nsw <4 x i32> %30, %33
  %35 = add nuw nsw <4 x i32> %29, <i32 32, i32 32, i32 32, i32 32>
  %36 = add nsw <4 x i32> %35, %34
  %37 = ashr <4 x i32> %36, <i32 6, i32 6, i32 6, i32 6>
  %38 = bitcast i8* %16 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = zext <4 x i8> %39 to <4 x i32>
  %41 = sub nsw <4 x i32> %37, %40
  %42 = icmp slt <4 x i32> %41, zeroinitializer
  %43 = sub nsw <4 x i32> zeroinitializer, %41
  %44 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %41
  %45 = add <4 x i32> %44, %22
  %46 = getelementptr inbounds i8, i8* %21, i64 4
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = zext <4 x i8> %48 to <4 x i32>
  %50 = getelementptr inbounds i8, i8* %19, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %52 to <4 x i32>
  %54 = mul nuw nsw <4 x i32> %53, %49
  %55 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %49
  %56 = getelementptr inbounds i8, i8* %20, i64 4
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1
  %59 = zext <4 x i8> %58 to <4 x i32>
  %60 = mul nsw <4 x i32> %55, %59
  %61 = add nuw nsw <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %62 = add nsw <4 x i32> %61, %60
  %63 = ashr <4 x i32> %62, <i32 6, i32 6, i32 6, i32 6>
  %64 = getelementptr inbounds i8, i8* %16, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = sub nsw <4 x i32> %63, %67
  %69 = icmp slt <4 x i32> %68, zeroinitializer
  %70 = sub nsw <4 x i32> zeroinitializer, %68
  %71 = select <4 x i1> %69, <4 x i32> %70, <4 x i32> %68
  %72 = add <4 x i32> %71, %45
  %73 = getelementptr inbounds i8, i8* %21, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = getelementptr inbounds i8, i8* %19, i64 8
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = mul nuw nsw <4 x i32> %80, %76
  %82 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %76
  %83 = getelementptr inbounds i8, i8* %20, i64 8
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = mul nsw <4 x i32> %82, %86
  %88 = add nuw nsw <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %89 = add nsw <4 x i32> %88, %87
  %90 = ashr <4 x i32> %89, <i32 6, i32 6, i32 6, i32 6>
  %91 = getelementptr inbounds i8, i8* %16, i64 8
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = sub nsw <4 x i32> %90, %94
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = add <4 x i32> %98, %72
  %100 = getelementptr inbounds i8, i8* %21, i64 12
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = zext <4 x i8> %102 to <4 x i32>
  %104 = getelementptr inbounds i8, i8* %19, i64 12
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = zext <4 x i8> %106 to <4 x i32>
  %108 = mul nuw nsw <4 x i32> %107, %103
  %109 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %103
  %110 = getelementptr inbounds i8, i8* %20, i64 12
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = mul nsw <4 x i32> %109, %113
  %115 = add nuw nsw <4 x i32> %108, <i32 32, i32 32, i32 32, i32 32>
  %116 = add nsw <4 x i32> %115, %114
  %117 = ashr <4 x i32> %116, <i32 6, i32 6, i32 6, i32 6>
  %118 = getelementptr inbounds i8, i8* %16, i64 12
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = sub nsw <4 x i32> %117, %121
  %123 = icmp slt <4 x i32> %122, zeroinitializer
  %124 = sub nsw <4 x i32> zeroinitializer, %122
  %125 = select <4 x i1> %123, <4 x i32> %124, <4 x i32> %122
  %126 = add <4 x i32> %125, %99
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %128 = add <4 x i32> %126, %127
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %130 = add <4 x i32> %128, %129
  %131 = extractelement <4 x i32> %130, i32 0
  %132 = getelementptr inbounds i8, i8* %16, i64 %11
  %133 = getelementptr inbounds i8, i8* %19, i64 %12
  %134 = getelementptr inbounds i8, i8* %20, i64 16
  %135 = getelementptr inbounds i8, i8* %21, i64 %13
  %136 = add nuw nsw i32 %18, 1
  %137 = icmp eq i32 %136, 8
  br i1 %137, label %138, label %15

138:                                              ; preds = %15
  store i32 %131, i32* %8, align 4
  %139 = getelementptr inbounds i8*, i8** %2, i64 1
  %140 = load i8*, i8** %139, align 8
  br label %270

141:                                              ; preds = %9, %141
  %142 = phi i8* [ %258, %141 ], [ %0, %9 ]
  %143 = phi i32 [ %257, %141 ], [ 0, %9 ]
  %144 = phi i32 [ %262, %141 ], [ 0, %9 ]
  %145 = phi i8* [ %259, %141 ], [ %4, %9 ]
  %146 = phi i8* [ %260, %141 ], [ %14, %9 ]
  %147 = phi i8* [ %261, %141 ], [ %5, %9 ]
  %148 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %143, i32 0
  %149 = bitcast i8* %147 to <4 x i8>*
  %150 = load <4 x i8>, <4 x i8>* %149, align 1
  %151 = zext <4 x i8> %150 to <4 x i32>
  %152 = bitcast i8* %145 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1
  %154 = zext <4 x i8> %153 to <4 x i32>
  %155 = mul nuw nsw <4 x i32> %154, %151
  %156 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %151
  %157 = bitcast i8* %146 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = zext <4 x i8> %158 to <4 x i32>
  %160 = mul nsw <4 x i32> %156, %159
  %161 = add nuw nsw <4 x i32> %155, <i32 32, i32 32, i32 32, i32 32>
  %162 = add nsw <4 x i32> %161, %160
  %163 = ashr <4 x i32> %162, <i32 6, i32 6, i32 6, i32 6>
  %164 = bitcast i8* %142 to <4 x i8>*
  %165 = load <4 x i8>, <4 x i8>* %164, align 1
  %166 = zext <4 x i8> %165 to <4 x i32>
  %167 = sub nsw <4 x i32> %163, %166
  %168 = icmp slt <4 x i32> %167, zeroinitializer
  %169 = sub nsw <4 x i32> zeroinitializer, %167
  %170 = select <4 x i1> %168, <4 x i32> %169, <4 x i32> %167
  %171 = add <4 x i32> %170, %148
  %172 = getelementptr inbounds i8, i8* %147, i64 4
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = getelementptr inbounds i8, i8* %145, i64 4
  %177 = bitcast i8* %176 to <4 x i8>*
  %178 = load <4 x i8>, <4 x i8>* %177, align 1
  %179 = zext <4 x i8> %178 to <4 x i32>
  %180 = mul nuw nsw <4 x i32> %179, %175
  %181 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %175
  %182 = getelementptr inbounds i8, i8* %146, i64 4
  %183 = bitcast i8* %182 to <4 x i8>*
  %184 = load <4 x i8>, <4 x i8>* %183, align 1
  %185 = zext <4 x i8> %184 to <4 x i32>
  %186 = mul nsw <4 x i32> %181, %185
  %187 = add nuw nsw <4 x i32> %180, <i32 32, i32 32, i32 32, i32 32>
  %188 = add nsw <4 x i32> %187, %186
  %189 = ashr <4 x i32> %188, <i32 6, i32 6, i32 6, i32 6>
  %190 = getelementptr inbounds i8, i8* %142, i64 4
  %191 = bitcast i8* %190 to <4 x i8>*
  %192 = load <4 x i8>, <4 x i8>* %191, align 1
  %193 = zext <4 x i8> %192 to <4 x i32>
  %194 = sub nsw <4 x i32> %189, %193
  %195 = icmp slt <4 x i32> %194, zeroinitializer
  %196 = sub nsw <4 x i32> zeroinitializer, %194
  %197 = select <4 x i1> %195, <4 x i32> %196, <4 x i32> %194
  %198 = add <4 x i32> %197, %171
  %199 = getelementptr inbounds i8, i8* %147, i64 8
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = getelementptr inbounds i8, i8* %145, i64 8
  %204 = bitcast i8* %203 to <4 x i8>*
  %205 = load <4 x i8>, <4 x i8>* %204, align 1
  %206 = zext <4 x i8> %205 to <4 x i32>
  %207 = mul nuw nsw <4 x i32> %206, %202
  %208 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %202
  %209 = getelementptr inbounds i8, i8* %146, i64 8
  %210 = bitcast i8* %209 to <4 x i8>*
  %211 = load <4 x i8>, <4 x i8>* %210, align 1
  %212 = zext <4 x i8> %211 to <4 x i32>
  %213 = mul nsw <4 x i32> %208, %212
  %214 = add nuw nsw <4 x i32> %207, <i32 32, i32 32, i32 32, i32 32>
  %215 = add nsw <4 x i32> %214, %213
  %216 = ashr <4 x i32> %215, <i32 6, i32 6, i32 6, i32 6>
  %217 = getelementptr inbounds i8, i8* %142, i64 8
  %218 = bitcast i8* %217 to <4 x i8>*
  %219 = load <4 x i8>, <4 x i8>* %218, align 1
  %220 = zext <4 x i8> %219 to <4 x i32>
  %221 = sub nsw <4 x i32> %216, %220
  %222 = icmp slt <4 x i32> %221, zeroinitializer
  %223 = sub nsw <4 x i32> zeroinitializer, %221
  %224 = select <4 x i1> %222, <4 x i32> %223, <4 x i32> %221
  %225 = add <4 x i32> %224, %198
  %226 = getelementptr inbounds i8, i8* %147, i64 12
  %227 = bitcast i8* %226 to <4 x i8>*
  %228 = load <4 x i8>, <4 x i8>* %227, align 1
  %229 = zext <4 x i8> %228 to <4 x i32>
  %230 = getelementptr inbounds i8, i8* %145, i64 12
  %231 = bitcast i8* %230 to <4 x i8>*
  %232 = load <4 x i8>, <4 x i8>* %231, align 1
  %233 = zext <4 x i8> %232 to <4 x i32>
  %234 = mul nuw nsw <4 x i32> %233, %229
  %235 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %229
  %236 = getelementptr inbounds i8, i8* %146, i64 12
  %237 = bitcast i8* %236 to <4 x i8>*
  %238 = load <4 x i8>, <4 x i8>* %237, align 1
  %239 = zext <4 x i8> %238 to <4 x i32>
  %240 = mul nsw <4 x i32> %235, %239
  %241 = add nuw nsw <4 x i32> %234, <i32 32, i32 32, i32 32, i32 32>
  %242 = add nsw <4 x i32> %241, %240
  %243 = ashr <4 x i32> %242, <i32 6, i32 6, i32 6, i32 6>
  %244 = getelementptr inbounds i8, i8* %142, i64 12
  %245 = bitcast i8* %244 to <4 x i8>*
  %246 = load <4 x i8>, <4 x i8>* %245, align 1
  %247 = zext <4 x i8> %246 to <4 x i32>
  %248 = sub nsw <4 x i32> %243, %247
  %249 = icmp slt <4 x i32> %248, zeroinitializer
  %250 = sub nsw <4 x i32> zeroinitializer, %248
  %251 = select <4 x i1> %249, <4 x i32> %250, <4 x i32> %248
  %252 = add <4 x i32> %251, %225
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %254 = add <4 x i32> %252, %253
  %255 = shufflevector <4 x i32> %254, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %256 = add <4 x i32> %254, %255
  %257 = extractelement <4 x i32> %256, i32 0
  %258 = getelementptr inbounds i8, i8* %142, i64 %11
  %259 = getelementptr inbounds i8, i8* %145, i64 16
  %260 = getelementptr inbounds i8, i8* %146, i64 %12
  %261 = getelementptr inbounds i8, i8* %147, i64 %13
  %262 = add nuw nsw i32 %144, 1
  %263 = icmp eq i32 %262, 8
  br i1 %263, label %264, label %141

264:                                              ; preds = %141
  store i32 %257, i32* %8, align 4
  %265 = getelementptr inbounds i8*, i8** %2, i64 1
  %266 = load i8*, i8** %265, align 8
  br label %647

267:                                              ; preds = %901, %524
  %268 = phi i32 [ %640, %524 ], [ %1017, %901 ]
  %269 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %268, i32* %269, align 4
  ret void

270:                                              ; preds = %138, %270
  %271 = phi i8* [ %0, %138 ], [ %387, %270 ]
  %272 = phi i32 [ 0, %138 ], [ %386, %270 ]
  %273 = phi i32 [ 0, %138 ], [ %391, %270 ]
  %274 = phi i8* [ %140, %138 ], [ %388, %270 ]
  %275 = phi i8* [ %4, %138 ], [ %389, %270 ]
  %276 = phi i8* [ %5, %138 ], [ %390, %270 ]
  %277 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %272, i32 0
  %278 = bitcast i8* %276 to <4 x i8>*
  %279 = load <4 x i8>, <4 x i8>* %278, align 1
  %280 = zext <4 x i8> %279 to <4 x i32>
  %281 = bitcast i8* %274 to <4 x i8>*
  %282 = load <4 x i8>, <4 x i8>* %281, align 1
  %283 = zext <4 x i8> %282 to <4 x i32>
  %284 = mul nuw nsw <4 x i32> %283, %280
  %285 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %280
  %286 = bitcast i8* %275 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 1
  %288 = zext <4 x i8> %287 to <4 x i32>
  %289 = mul nsw <4 x i32> %285, %288
  %290 = add nuw nsw <4 x i32> %284, <i32 32, i32 32, i32 32, i32 32>
  %291 = add nsw <4 x i32> %290, %289
  %292 = ashr <4 x i32> %291, <i32 6, i32 6, i32 6, i32 6>
  %293 = bitcast i8* %271 to <4 x i8>*
  %294 = load <4 x i8>, <4 x i8>* %293, align 1
  %295 = zext <4 x i8> %294 to <4 x i32>
  %296 = sub nsw <4 x i32> %292, %295
  %297 = icmp slt <4 x i32> %296, zeroinitializer
  %298 = sub nsw <4 x i32> zeroinitializer, %296
  %299 = select <4 x i1> %297, <4 x i32> %298, <4 x i32> %296
  %300 = add <4 x i32> %299, %277
  %301 = getelementptr inbounds i8, i8* %276, i64 4
  %302 = bitcast i8* %301 to <4 x i8>*
  %303 = load <4 x i8>, <4 x i8>* %302, align 1
  %304 = zext <4 x i8> %303 to <4 x i32>
  %305 = getelementptr inbounds i8, i8* %274, i64 4
  %306 = bitcast i8* %305 to <4 x i8>*
  %307 = load <4 x i8>, <4 x i8>* %306, align 1
  %308 = zext <4 x i8> %307 to <4 x i32>
  %309 = mul nuw nsw <4 x i32> %308, %304
  %310 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %304
  %311 = getelementptr inbounds i8, i8* %275, i64 4
  %312 = bitcast i8* %311 to <4 x i8>*
  %313 = load <4 x i8>, <4 x i8>* %312, align 1
  %314 = zext <4 x i8> %313 to <4 x i32>
  %315 = mul nsw <4 x i32> %310, %314
  %316 = add nuw nsw <4 x i32> %309, <i32 32, i32 32, i32 32, i32 32>
  %317 = add nsw <4 x i32> %316, %315
  %318 = ashr <4 x i32> %317, <i32 6, i32 6, i32 6, i32 6>
  %319 = getelementptr inbounds i8, i8* %271, i64 4
  %320 = bitcast i8* %319 to <4 x i8>*
  %321 = load <4 x i8>, <4 x i8>* %320, align 1
  %322 = zext <4 x i8> %321 to <4 x i32>
  %323 = sub nsw <4 x i32> %318, %322
  %324 = icmp slt <4 x i32> %323, zeroinitializer
  %325 = sub nsw <4 x i32> zeroinitializer, %323
  %326 = select <4 x i1> %324, <4 x i32> %325, <4 x i32> %323
  %327 = add <4 x i32> %326, %300
  %328 = getelementptr inbounds i8, i8* %276, i64 8
  %329 = bitcast i8* %328 to <4 x i8>*
  %330 = load <4 x i8>, <4 x i8>* %329, align 1
  %331 = zext <4 x i8> %330 to <4 x i32>
  %332 = getelementptr inbounds i8, i8* %274, i64 8
  %333 = bitcast i8* %332 to <4 x i8>*
  %334 = load <4 x i8>, <4 x i8>* %333, align 1
  %335 = zext <4 x i8> %334 to <4 x i32>
  %336 = mul nuw nsw <4 x i32> %335, %331
  %337 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %331
  %338 = getelementptr inbounds i8, i8* %275, i64 8
  %339 = bitcast i8* %338 to <4 x i8>*
  %340 = load <4 x i8>, <4 x i8>* %339, align 1
  %341 = zext <4 x i8> %340 to <4 x i32>
  %342 = mul nsw <4 x i32> %337, %341
  %343 = add nuw nsw <4 x i32> %336, <i32 32, i32 32, i32 32, i32 32>
  %344 = add nsw <4 x i32> %343, %342
  %345 = ashr <4 x i32> %344, <i32 6, i32 6, i32 6, i32 6>
  %346 = getelementptr inbounds i8, i8* %271, i64 8
  %347 = bitcast i8* %346 to <4 x i8>*
  %348 = load <4 x i8>, <4 x i8>* %347, align 1
  %349 = zext <4 x i8> %348 to <4 x i32>
  %350 = sub nsw <4 x i32> %345, %349
  %351 = icmp slt <4 x i32> %350, zeroinitializer
  %352 = sub nsw <4 x i32> zeroinitializer, %350
  %353 = select <4 x i1> %351, <4 x i32> %352, <4 x i32> %350
  %354 = add <4 x i32> %353, %327
  %355 = getelementptr inbounds i8, i8* %276, i64 12
  %356 = bitcast i8* %355 to <4 x i8>*
  %357 = load <4 x i8>, <4 x i8>* %356, align 1
  %358 = zext <4 x i8> %357 to <4 x i32>
  %359 = getelementptr inbounds i8, i8* %274, i64 12
  %360 = bitcast i8* %359 to <4 x i8>*
  %361 = load <4 x i8>, <4 x i8>* %360, align 1
  %362 = zext <4 x i8> %361 to <4 x i32>
  %363 = mul nuw nsw <4 x i32> %362, %358
  %364 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %358
  %365 = getelementptr inbounds i8, i8* %275, i64 12
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1
  %368 = zext <4 x i8> %367 to <4 x i32>
  %369 = mul nsw <4 x i32> %364, %368
  %370 = add nuw nsw <4 x i32> %363, <i32 32, i32 32, i32 32, i32 32>
  %371 = add nsw <4 x i32> %370, %369
  %372 = ashr <4 x i32> %371, <i32 6, i32 6, i32 6, i32 6>
  %373 = getelementptr inbounds i8, i8* %271, i64 12
  %374 = bitcast i8* %373 to <4 x i8>*
  %375 = load <4 x i8>, <4 x i8>* %374, align 1
  %376 = zext <4 x i8> %375 to <4 x i32>
  %377 = sub nsw <4 x i32> %372, %376
  %378 = icmp slt <4 x i32> %377, zeroinitializer
  %379 = sub nsw <4 x i32> zeroinitializer, %377
  %380 = select <4 x i1> %378, <4 x i32> %379, <4 x i32> %377
  %381 = add <4 x i32> %380, %354
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %383 = add <4 x i32> %381, %382
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %385 = add <4 x i32> %383, %384
  %386 = extractelement <4 x i32> %385, i32 0
  %387 = getelementptr inbounds i8, i8* %271, i64 %11
  %388 = getelementptr inbounds i8, i8* %274, i64 %12
  %389 = getelementptr inbounds i8, i8* %275, i64 16
  %390 = getelementptr inbounds i8, i8* %276, i64 %13
  %391 = add nuw nsw i32 %273, 1
  %392 = icmp eq i32 %391, 8
  br i1 %392, label %393, label %270

393:                                              ; preds = %270
  %394 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %386, i32* %394, align 4
  %395 = getelementptr inbounds i8*, i8** %2, i64 2
  %396 = load i8*, i8** %395, align 8
  br label %397

397:                                              ; preds = %393, %397
  %398 = phi i8* [ %0, %393 ], [ %514, %397 ]
  %399 = phi i32 [ 0, %393 ], [ %513, %397 ]
  %400 = phi i32 [ 0, %393 ], [ %518, %397 ]
  %401 = phi i8* [ %396, %393 ], [ %515, %397 ]
  %402 = phi i8* [ %4, %393 ], [ %516, %397 ]
  %403 = phi i8* [ %5, %393 ], [ %517, %397 ]
  %404 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %399, i32 0
  %405 = bitcast i8* %403 to <4 x i8>*
  %406 = load <4 x i8>, <4 x i8>* %405, align 1
  %407 = zext <4 x i8> %406 to <4 x i32>
  %408 = bitcast i8* %401 to <4 x i8>*
  %409 = load <4 x i8>, <4 x i8>* %408, align 1
  %410 = zext <4 x i8> %409 to <4 x i32>
  %411 = mul nuw nsw <4 x i32> %410, %407
  %412 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %407
  %413 = bitcast i8* %402 to <4 x i8>*
  %414 = load <4 x i8>, <4 x i8>* %413, align 1
  %415 = zext <4 x i8> %414 to <4 x i32>
  %416 = mul nsw <4 x i32> %412, %415
  %417 = add nuw nsw <4 x i32> %411, <i32 32, i32 32, i32 32, i32 32>
  %418 = add nsw <4 x i32> %417, %416
  %419 = ashr <4 x i32> %418, <i32 6, i32 6, i32 6, i32 6>
  %420 = bitcast i8* %398 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = sub nsw <4 x i32> %419, %422
  %424 = icmp slt <4 x i32> %423, zeroinitializer
  %425 = sub nsw <4 x i32> zeroinitializer, %423
  %426 = select <4 x i1> %424, <4 x i32> %425, <4 x i32> %423
  %427 = add <4 x i32> %426, %404
  %428 = getelementptr inbounds i8, i8* %403, i64 4
  %429 = bitcast i8* %428 to <4 x i8>*
  %430 = load <4 x i8>, <4 x i8>* %429, align 1
  %431 = zext <4 x i8> %430 to <4 x i32>
  %432 = getelementptr inbounds i8, i8* %401, i64 4
  %433 = bitcast i8* %432 to <4 x i8>*
  %434 = load <4 x i8>, <4 x i8>* %433, align 1
  %435 = zext <4 x i8> %434 to <4 x i32>
  %436 = mul nuw nsw <4 x i32> %435, %431
  %437 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %431
  %438 = getelementptr inbounds i8, i8* %402, i64 4
  %439 = bitcast i8* %438 to <4 x i8>*
  %440 = load <4 x i8>, <4 x i8>* %439, align 1
  %441 = zext <4 x i8> %440 to <4 x i32>
  %442 = mul nsw <4 x i32> %437, %441
  %443 = add nuw nsw <4 x i32> %436, <i32 32, i32 32, i32 32, i32 32>
  %444 = add nsw <4 x i32> %443, %442
  %445 = ashr <4 x i32> %444, <i32 6, i32 6, i32 6, i32 6>
  %446 = getelementptr inbounds i8, i8* %398, i64 4
  %447 = bitcast i8* %446 to <4 x i8>*
  %448 = load <4 x i8>, <4 x i8>* %447, align 1
  %449 = zext <4 x i8> %448 to <4 x i32>
  %450 = sub nsw <4 x i32> %445, %449
  %451 = icmp slt <4 x i32> %450, zeroinitializer
  %452 = sub nsw <4 x i32> zeroinitializer, %450
  %453 = select <4 x i1> %451, <4 x i32> %452, <4 x i32> %450
  %454 = add <4 x i32> %453, %427
  %455 = getelementptr inbounds i8, i8* %403, i64 8
  %456 = bitcast i8* %455 to <4 x i8>*
  %457 = load <4 x i8>, <4 x i8>* %456, align 1
  %458 = zext <4 x i8> %457 to <4 x i32>
  %459 = getelementptr inbounds i8, i8* %401, i64 8
  %460 = bitcast i8* %459 to <4 x i8>*
  %461 = load <4 x i8>, <4 x i8>* %460, align 1
  %462 = zext <4 x i8> %461 to <4 x i32>
  %463 = mul nuw nsw <4 x i32> %462, %458
  %464 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %458
  %465 = getelementptr inbounds i8, i8* %402, i64 8
  %466 = bitcast i8* %465 to <4 x i8>*
  %467 = load <4 x i8>, <4 x i8>* %466, align 1
  %468 = zext <4 x i8> %467 to <4 x i32>
  %469 = mul nsw <4 x i32> %464, %468
  %470 = add nuw nsw <4 x i32> %463, <i32 32, i32 32, i32 32, i32 32>
  %471 = add nsw <4 x i32> %470, %469
  %472 = ashr <4 x i32> %471, <i32 6, i32 6, i32 6, i32 6>
  %473 = getelementptr inbounds i8, i8* %398, i64 8
  %474 = bitcast i8* %473 to <4 x i8>*
  %475 = load <4 x i8>, <4 x i8>* %474, align 1
  %476 = zext <4 x i8> %475 to <4 x i32>
  %477 = sub nsw <4 x i32> %472, %476
  %478 = icmp slt <4 x i32> %477, zeroinitializer
  %479 = sub nsw <4 x i32> zeroinitializer, %477
  %480 = select <4 x i1> %478, <4 x i32> %479, <4 x i32> %477
  %481 = add <4 x i32> %480, %454
  %482 = getelementptr inbounds i8, i8* %403, i64 12
  %483 = bitcast i8* %482 to <4 x i8>*
  %484 = load <4 x i8>, <4 x i8>* %483, align 1
  %485 = zext <4 x i8> %484 to <4 x i32>
  %486 = getelementptr inbounds i8, i8* %401, i64 12
  %487 = bitcast i8* %486 to <4 x i8>*
  %488 = load <4 x i8>, <4 x i8>* %487, align 1
  %489 = zext <4 x i8> %488 to <4 x i32>
  %490 = mul nuw nsw <4 x i32> %489, %485
  %491 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %485
  %492 = getelementptr inbounds i8, i8* %402, i64 12
  %493 = bitcast i8* %492 to <4 x i8>*
  %494 = load <4 x i8>, <4 x i8>* %493, align 1
  %495 = zext <4 x i8> %494 to <4 x i32>
  %496 = mul nsw <4 x i32> %491, %495
  %497 = add nuw nsw <4 x i32> %490, <i32 32, i32 32, i32 32, i32 32>
  %498 = add nsw <4 x i32> %497, %496
  %499 = ashr <4 x i32> %498, <i32 6, i32 6, i32 6, i32 6>
  %500 = getelementptr inbounds i8, i8* %398, i64 12
  %501 = bitcast i8* %500 to <4 x i8>*
  %502 = load <4 x i8>, <4 x i8>* %501, align 1
  %503 = zext <4 x i8> %502 to <4 x i32>
  %504 = sub nsw <4 x i32> %499, %503
  %505 = icmp slt <4 x i32> %504, zeroinitializer
  %506 = sub nsw <4 x i32> zeroinitializer, %504
  %507 = select <4 x i1> %505, <4 x i32> %506, <4 x i32> %504
  %508 = add <4 x i32> %507, %481
  %509 = shufflevector <4 x i32> %508, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %510 = add <4 x i32> %508, %509
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %512 = add <4 x i32> %510, %511
  %513 = extractelement <4 x i32> %512, i32 0
  %514 = getelementptr inbounds i8, i8* %398, i64 %11
  %515 = getelementptr inbounds i8, i8* %401, i64 %12
  %516 = getelementptr inbounds i8, i8* %402, i64 16
  %517 = getelementptr inbounds i8, i8* %403, i64 %13
  %518 = add nuw nsw i32 %400, 1
  %519 = icmp eq i32 %518, 8
  br i1 %519, label %520, label %397

520:                                              ; preds = %397
  %521 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %513, i32* %521, align 4
  %522 = getelementptr inbounds i8*, i8** %2, i64 3
  %523 = load i8*, i8** %522, align 8
  br label %524

524:                                              ; preds = %520, %524
  %525 = phi i8* [ %0, %520 ], [ %641, %524 ]
  %526 = phi i32 [ 0, %520 ], [ %640, %524 ]
  %527 = phi i32 [ 0, %520 ], [ %645, %524 ]
  %528 = phi i8* [ %523, %520 ], [ %642, %524 ]
  %529 = phi i8* [ %4, %520 ], [ %643, %524 ]
  %530 = phi i8* [ %5, %520 ], [ %644, %524 ]
  %531 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %526, i32 0
  %532 = bitcast i8* %530 to <4 x i8>*
  %533 = load <4 x i8>, <4 x i8>* %532, align 1
  %534 = zext <4 x i8> %533 to <4 x i32>
  %535 = bitcast i8* %528 to <4 x i8>*
  %536 = load <4 x i8>, <4 x i8>* %535, align 1
  %537 = zext <4 x i8> %536 to <4 x i32>
  %538 = mul nuw nsw <4 x i32> %537, %534
  %539 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %534
  %540 = bitcast i8* %529 to <4 x i8>*
  %541 = load <4 x i8>, <4 x i8>* %540, align 1
  %542 = zext <4 x i8> %541 to <4 x i32>
  %543 = mul nsw <4 x i32> %539, %542
  %544 = add nuw nsw <4 x i32> %538, <i32 32, i32 32, i32 32, i32 32>
  %545 = add nsw <4 x i32> %544, %543
  %546 = ashr <4 x i32> %545, <i32 6, i32 6, i32 6, i32 6>
  %547 = bitcast i8* %525 to <4 x i8>*
  %548 = load <4 x i8>, <4 x i8>* %547, align 1
  %549 = zext <4 x i8> %548 to <4 x i32>
  %550 = sub nsw <4 x i32> %546, %549
  %551 = icmp slt <4 x i32> %550, zeroinitializer
  %552 = sub nsw <4 x i32> zeroinitializer, %550
  %553 = select <4 x i1> %551, <4 x i32> %552, <4 x i32> %550
  %554 = add <4 x i32> %553, %531
  %555 = getelementptr inbounds i8, i8* %530, i64 4
  %556 = bitcast i8* %555 to <4 x i8>*
  %557 = load <4 x i8>, <4 x i8>* %556, align 1
  %558 = zext <4 x i8> %557 to <4 x i32>
  %559 = getelementptr inbounds i8, i8* %528, i64 4
  %560 = bitcast i8* %559 to <4 x i8>*
  %561 = load <4 x i8>, <4 x i8>* %560, align 1
  %562 = zext <4 x i8> %561 to <4 x i32>
  %563 = mul nuw nsw <4 x i32> %562, %558
  %564 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %558
  %565 = getelementptr inbounds i8, i8* %529, i64 4
  %566 = bitcast i8* %565 to <4 x i8>*
  %567 = load <4 x i8>, <4 x i8>* %566, align 1
  %568 = zext <4 x i8> %567 to <4 x i32>
  %569 = mul nsw <4 x i32> %564, %568
  %570 = add nuw nsw <4 x i32> %563, <i32 32, i32 32, i32 32, i32 32>
  %571 = add nsw <4 x i32> %570, %569
  %572 = ashr <4 x i32> %571, <i32 6, i32 6, i32 6, i32 6>
  %573 = getelementptr inbounds i8, i8* %525, i64 4
  %574 = bitcast i8* %573 to <4 x i8>*
  %575 = load <4 x i8>, <4 x i8>* %574, align 1
  %576 = zext <4 x i8> %575 to <4 x i32>
  %577 = sub nsw <4 x i32> %572, %576
  %578 = icmp slt <4 x i32> %577, zeroinitializer
  %579 = sub nsw <4 x i32> zeroinitializer, %577
  %580 = select <4 x i1> %578, <4 x i32> %579, <4 x i32> %577
  %581 = add <4 x i32> %580, %554
  %582 = getelementptr inbounds i8, i8* %530, i64 8
  %583 = bitcast i8* %582 to <4 x i8>*
  %584 = load <4 x i8>, <4 x i8>* %583, align 1
  %585 = zext <4 x i8> %584 to <4 x i32>
  %586 = getelementptr inbounds i8, i8* %528, i64 8
  %587 = bitcast i8* %586 to <4 x i8>*
  %588 = load <4 x i8>, <4 x i8>* %587, align 1
  %589 = zext <4 x i8> %588 to <4 x i32>
  %590 = mul nuw nsw <4 x i32> %589, %585
  %591 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %585
  %592 = getelementptr inbounds i8, i8* %529, i64 8
  %593 = bitcast i8* %592 to <4 x i8>*
  %594 = load <4 x i8>, <4 x i8>* %593, align 1
  %595 = zext <4 x i8> %594 to <4 x i32>
  %596 = mul nsw <4 x i32> %591, %595
  %597 = add nuw nsw <4 x i32> %590, <i32 32, i32 32, i32 32, i32 32>
  %598 = add nsw <4 x i32> %597, %596
  %599 = ashr <4 x i32> %598, <i32 6, i32 6, i32 6, i32 6>
  %600 = getelementptr inbounds i8, i8* %525, i64 8
  %601 = bitcast i8* %600 to <4 x i8>*
  %602 = load <4 x i8>, <4 x i8>* %601, align 1
  %603 = zext <4 x i8> %602 to <4 x i32>
  %604 = sub nsw <4 x i32> %599, %603
  %605 = icmp slt <4 x i32> %604, zeroinitializer
  %606 = sub nsw <4 x i32> zeroinitializer, %604
  %607 = select <4 x i1> %605, <4 x i32> %606, <4 x i32> %604
  %608 = add <4 x i32> %607, %581
  %609 = getelementptr inbounds i8, i8* %530, i64 12
  %610 = bitcast i8* %609 to <4 x i8>*
  %611 = load <4 x i8>, <4 x i8>* %610, align 1
  %612 = zext <4 x i8> %611 to <4 x i32>
  %613 = getelementptr inbounds i8, i8* %528, i64 12
  %614 = bitcast i8* %613 to <4 x i8>*
  %615 = load <4 x i8>, <4 x i8>* %614, align 1
  %616 = zext <4 x i8> %615 to <4 x i32>
  %617 = mul nuw nsw <4 x i32> %616, %612
  %618 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %612
  %619 = getelementptr inbounds i8, i8* %529, i64 12
  %620 = bitcast i8* %619 to <4 x i8>*
  %621 = load <4 x i8>, <4 x i8>* %620, align 1
  %622 = zext <4 x i8> %621 to <4 x i32>
  %623 = mul nsw <4 x i32> %618, %622
  %624 = add nuw nsw <4 x i32> %617, <i32 32, i32 32, i32 32, i32 32>
  %625 = add nsw <4 x i32> %624, %623
  %626 = ashr <4 x i32> %625, <i32 6, i32 6, i32 6, i32 6>
  %627 = getelementptr inbounds i8, i8* %525, i64 12
  %628 = bitcast i8* %627 to <4 x i8>*
  %629 = load <4 x i8>, <4 x i8>* %628, align 1
  %630 = zext <4 x i8> %629 to <4 x i32>
  %631 = sub nsw <4 x i32> %626, %630
  %632 = icmp slt <4 x i32> %631, zeroinitializer
  %633 = sub nsw <4 x i32> zeroinitializer, %631
  %634 = select <4 x i1> %632, <4 x i32> %633, <4 x i32> %631
  %635 = add <4 x i32> %634, %608
  %636 = shufflevector <4 x i32> %635, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %637 = add <4 x i32> %635, %636
  %638 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %639 = add <4 x i32> %637, %638
  %640 = extractelement <4 x i32> %639, i32 0
  %641 = getelementptr inbounds i8, i8* %525, i64 %11
  %642 = getelementptr inbounds i8, i8* %528, i64 %12
  %643 = getelementptr inbounds i8, i8* %529, i64 16
  %644 = getelementptr inbounds i8, i8* %530, i64 %13
  %645 = add nuw nsw i32 %527, 1
  %646 = icmp eq i32 %645, 8
  br i1 %646, label %267, label %524

647:                                              ; preds = %264, %647
  %648 = phi i8* [ %0, %264 ], [ %764, %647 ]
  %649 = phi i32 [ 0, %264 ], [ %763, %647 ]
  %650 = phi i32 [ 0, %264 ], [ %768, %647 ]
  %651 = phi i8* [ %4, %264 ], [ %765, %647 ]
  %652 = phi i8* [ %266, %264 ], [ %766, %647 ]
  %653 = phi i8* [ %5, %264 ], [ %767, %647 ]
  %654 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %649, i32 0
  %655 = bitcast i8* %653 to <4 x i8>*
  %656 = load <4 x i8>, <4 x i8>* %655, align 1
  %657 = zext <4 x i8> %656 to <4 x i32>
  %658 = bitcast i8* %651 to <4 x i8>*
  %659 = load <4 x i8>, <4 x i8>* %658, align 1
  %660 = zext <4 x i8> %659 to <4 x i32>
  %661 = mul nuw nsw <4 x i32> %660, %657
  %662 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %657
  %663 = bitcast i8* %652 to <4 x i8>*
  %664 = load <4 x i8>, <4 x i8>* %663, align 1
  %665 = zext <4 x i8> %664 to <4 x i32>
  %666 = mul nsw <4 x i32> %662, %665
  %667 = add nuw nsw <4 x i32> %661, <i32 32, i32 32, i32 32, i32 32>
  %668 = add nsw <4 x i32> %667, %666
  %669 = ashr <4 x i32> %668, <i32 6, i32 6, i32 6, i32 6>
  %670 = bitcast i8* %648 to <4 x i8>*
  %671 = load <4 x i8>, <4 x i8>* %670, align 1
  %672 = zext <4 x i8> %671 to <4 x i32>
  %673 = sub nsw <4 x i32> %669, %672
  %674 = icmp slt <4 x i32> %673, zeroinitializer
  %675 = sub nsw <4 x i32> zeroinitializer, %673
  %676 = select <4 x i1> %674, <4 x i32> %675, <4 x i32> %673
  %677 = add <4 x i32> %676, %654
  %678 = getelementptr inbounds i8, i8* %653, i64 4
  %679 = bitcast i8* %678 to <4 x i8>*
  %680 = load <4 x i8>, <4 x i8>* %679, align 1
  %681 = zext <4 x i8> %680 to <4 x i32>
  %682 = getelementptr inbounds i8, i8* %651, i64 4
  %683 = bitcast i8* %682 to <4 x i8>*
  %684 = load <4 x i8>, <4 x i8>* %683, align 1
  %685 = zext <4 x i8> %684 to <4 x i32>
  %686 = mul nuw nsw <4 x i32> %685, %681
  %687 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %681
  %688 = getelementptr inbounds i8, i8* %652, i64 4
  %689 = bitcast i8* %688 to <4 x i8>*
  %690 = load <4 x i8>, <4 x i8>* %689, align 1
  %691 = zext <4 x i8> %690 to <4 x i32>
  %692 = mul nsw <4 x i32> %687, %691
  %693 = add nuw nsw <4 x i32> %686, <i32 32, i32 32, i32 32, i32 32>
  %694 = add nsw <4 x i32> %693, %692
  %695 = ashr <4 x i32> %694, <i32 6, i32 6, i32 6, i32 6>
  %696 = getelementptr inbounds i8, i8* %648, i64 4
  %697 = bitcast i8* %696 to <4 x i8>*
  %698 = load <4 x i8>, <4 x i8>* %697, align 1
  %699 = zext <4 x i8> %698 to <4 x i32>
  %700 = sub nsw <4 x i32> %695, %699
  %701 = icmp slt <4 x i32> %700, zeroinitializer
  %702 = sub nsw <4 x i32> zeroinitializer, %700
  %703 = select <4 x i1> %701, <4 x i32> %702, <4 x i32> %700
  %704 = add <4 x i32> %703, %677
  %705 = getelementptr inbounds i8, i8* %653, i64 8
  %706 = bitcast i8* %705 to <4 x i8>*
  %707 = load <4 x i8>, <4 x i8>* %706, align 1
  %708 = zext <4 x i8> %707 to <4 x i32>
  %709 = getelementptr inbounds i8, i8* %651, i64 8
  %710 = bitcast i8* %709 to <4 x i8>*
  %711 = load <4 x i8>, <4 x i8>* %710, align 1
  %712 = zext <4 x i8> %711 to <4 x i32>
  %713 = mul nuw nsw <4 x i32> %712, %708
  %714 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %708
  %715 = getelementptr inbounds i8, i8* %652, i64 8
  %716 = bitcast i8* %715 to <4 x i8>*
  %717 = load <4 x i8>, <4 x i8>* %716, align 1
  %718 = zext <4 x i8> %717 to <4 x i32>
  %719 = mul nsw <4 x i32> %714, %718
  %720 = add nuw nsw <4 x i32> %713, <i32 32, i32 32, i32 32, i32 32>
  %721 = add nsw <4 x i32> %720, %719
  %722 = ashr <4 x i32> %721, <i32 6, i32 6, i32 6, i32 6>
  %723 = getelementptr inbounds i8, i8* %648, i64 8
  %724 = bitcast i8* %723 to <4 x i8>*
  %725 = load <4 x i8>, <4 x i8>* %724, align 1
  %726 = zext <4 x i8> %725 to <4 x i32>
  %727 = sub nsw <4 x i32> %722, %726
  %728 = icmp slt <4 x i32> %727, zeroinitializer
  %729 = sub nsw <4 x i32> zeroinitializer, %727
  %730 = select <4 x i1> %728, <4 x i32> %729, <4 x i32> %727
  %731 = add <4 x i32> %730, %704
  %732 = getelementptr inbounds i8, i8* %653, i64 12
  %733 = bitcast i8* %732 to <4 x i8>*
  %734 = load <4 x i8>, <4 x i8>* %733, align 1
  %735 = zext <4 x i8> %734 to <4 x i32>
  %736 = getelementptr inbounds i8, i8* %651, i64 12
  %737 = bitcast i8* %736 to <4 x i8>*
  %738 = load <4 x i8>, <4 x i8>* %737, align 1
  %739 = zext <4 x i8> %738 to <4 x i32>
  %740 = mul nuw nsw <4 x i32> %739, %735
  %741 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %735
  %742 = getelementptr inbounds i8, i8* %652, i64 12
  %743 = bitcast i8* %742 to <4 x i8>*
  %744 = load <4 x i8>, <4 x i8>* %743, align 1
  %745 = zext <4 x i8> %744 to <4 x i32>
  %746 = mul nsw <4 x i32> %741, %745
  %747 = add nuw nsw <4 x i32> %740, <i32 32, i32 32, i32 32, i32 32>
  %748 = add nsw <4 x i32> %747, %746
  %749 = ashr <4 x i32> %748, <i32 6, i32 6, i32 6, i32 6>
  %750 = getelementptr inbounds i8, i8* %648, i64 12
  %751 = bitcast i8* %750 to <4 x i8>*
  %752 = load <4 x i8>, <4 x i8>* %751, align 1
  %753 = zext <4 x i8> %752 to <4 x i32>
  %754 = sub nsw <4 x i32> %749, %753
  %755 = icmp slt <4 x i32> %754, zeroinitializer
  %756 = sub nsw <4 x i32> zeroinitializer, %754
  %757 = select <4 x i1> %755, <4 x i32> %756, <4 x i32> %754
  %758 = add <4 x i32> %757, %731
  %759 = shufflevector <4 x i32> %758, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %760 = add <4 x i32> %758, %759
  %761 = shufflevector <4 x i32> %760, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %762 = add <4 x i32> %760, %761
  %763 = extractelement <4 x i32> %762, i32 0
  %764 = getelementptr inbounds i8, i8* %648, i64 %11
  %765 = getelementptr inbounds i8, i8* %651, i64 16
  %766 = getelementptr inbounds i8, i8* %652, i64 %12
  %767 = getelementptr inbounds i8, i8* %653, i64 %13
  %768 = add nuw nsw i32 %650, 1
  %769 = icmp eq i32 %768, 8
  br i1 %769, label %770, label %647

770:                                              ; preds = %647
  %771 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %763, i32* %771, align 4
  %772 = getelementptr inbounds i8*, i8** %2, i64 2
  %773 = load i8*, i8** %772, align 8
  br label %774

774:                                              ; preds = %770, %774
  %775 = phi i8* [ %0, %770 ], [ %891, %774 ]
  %776 = phi i32 [ 0, %770 ], [ %890, %774 ]
  %777 = phi i32 [ 0, %770 ], [ %895, %774 ]
  %778 = phi i8* [ %4, %770 ], [ %892, %774 ]
  %779 = phi i8* [ %773, %770 ], [ %893, %774 ]
  %780 = phi i8* [ %5, %770 ], [ %894, %774 ]
  %781 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %776, i32 0
  %782 = bitcast i8* %780 to <4 x i8>*
  %783 = load <4 x i8>, <4 x i8>* %782, align 1
  %784 = zext <4 x i8> %783 to <4 x i32>
  %785 = bitcast i8* %778 to <4 x i8>*
  %786 = load <4 x i8>, <4 x i8>* %785, align 1
  %787 = zext <4 x i8> %786 to <4 x i32>
  %788 = mul nuw nsw <4 x i32> %787, %784
  %789 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %784
  %790 = bitcast i8* %779 to <4 x i8>*
  %791 = load <4 x i8>, <4 x i8>* %790, align 1
  %792 = zext <4 x i8> %791 to <4 x i32>
  %793 = mul nsw <4 x i32> %789, %792
  %794 = add nuw nsw <4 x i32> %788, <i32 32, i32 32, i32 32, i32 32>
  %795 = add nsw <4 x i32> %794, %793
  %796 = ashr <4 x i32> %795, <i32 6, i32 6, i32 6, i32 6>
  %797 = bitcast i8* %775 to <4 x i8>*
  %798 = load <4 x i8>, <4 x i8>* %797, align 1
  %799 = zext <4 x i8> %798 to <4 x i32>
  %800 = sub nsw <4 x i32> %796, %799
  %801 = icmp slt <4 x i32> %800, zeroinitializer
  %802 = sub nsw <4 x i32> zeroinitializer, %800
  %803 = select <4 x i1> %801, <4 x i32> %802, <4 x i32> %800
  %804 = add <4 x i32> %803, %781
  %805 = getelementptr inbounds i8, i8* %780, i64 4
  %806 = bitcast i8* %805 to <4 x i8>*
  %807 = load <4 x i8>, <4 x i8>* %806, align 1
  %808 = zext <4 x i8> %807 to <4 x i32>
  %809 = getelementptr inbounds i8, i8* %778, i64 4
  %810 = bitcast i8* %809 to <4 x i8>*
  %811 = load <4 x i8>, <4 x i8>* %810, align 1
  %812 = zext <4 x i8> %811 to <4 x i32>
  %813 = mul nuw nsw <4 x i32> %812, %808
  %814 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %808
  %815 = getelementptr inbounds i8, i8* %779, i64 4
  %816 = bitcast i8* %815 to <4 x i8>*
  %817 = load <4 x i8>, <4 x i8>* %816, align 1
  %818 = zext <4 x i8> %817 to <4 x i32>
  %819 = mul nsw <4 x i32> %814, %818
  %820 = add nuw nsw <4 x i32> %813, <i32 32, i32 32, i32 32, i32 32>
  %821 = add nsw <4 x i32> %820, %819
  %822 = ashr <4 x i32> %821, <i32 6, i32 6, i32 6, i32 6>
  %823 = getelementptr inbounds i8, i8* %775, i64 4
  %824 = bitcast i8* %823 to <4 x i8>*
  %825 = load <4 x i8>, <4 x i8>* %824, align 1
  %826 = zext <4 x i8> %825 to <4 x i32>
  %827 = sub nsw <4 x i32> %822, %826
  %828 = icmp slt <4 x i32> %827, zeroinitializer
  %829 = sub nsw <4 x i32> zeroinitializer, %827
  %830 = select <4 x i1> %828, <4 x i32> %829, <4 x i32> %827
  %831 = add <4 x i32> %830, %804
  %832 = getelementptr inbounds i8, i8* %780, i64 8
  %833 = bitcast i8* %832 to <4 x i8>*
  %834 = load <4 x i8>, <4 x i8>* %833, align 1
  %835 = zext <4 x i8> %834 to <4 x i32>
  %836 = getelementptr inbounds i8, i8* %778, i64 8
  %837 = bitcast i8* %836 to <4 x i8>*
  %838 = load <4 x i8>, <4 x i8>* %837, align 1
  %839 = zext <4 x i8> %838 to <4 x i32>
  %840 = mul nuw nsw <4 x i32> %839, %835
  %841 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %835
  %842 = getelementptr inbounds i8, i8* %779, i64 8
  %843 = bitcast i8* %842 to <4 x i8>*
  %844 = load <4 x i8>, <4 x i8>* %843, align 1
  %845 = zext <4 x i8> %844 to <4 x i32>
  %846 = mul nsw <4 x i32> %841, %845
  %847 = add nuw nsw <4 x i32> %840, <i32 32, i32 32, i32 32, i32 32>
  %848 = add nsw <4 x i32> %847, %846
  %849 = ashr <4 x i32> %848, <i32 6, i32 6, i32 6, i32 6>
  %850 = getelementptr inbounds i8, i8* %775, i64 8
  %851 = bitcast i8* %850 to <4 x i8>*
  %852 = load <4 x i8>, <4 x i8>* %851, align 1
  %853 = zext <4 x i8> %852 to <4 x i32>
  %854 = sub nsw <4 x i32> %849, %853
  %855 = icmp slt <4 x i32> %854, zeroinitializer
  %856 = sub nsw <4 x i32> zeroinitializer, %854
  %857 = select <4 x i1> %855, <4 x i32> %856, <4 x i32> %854
  %858 = add <4 x i32> %857, %831
  %859 = getelementptr inbounds i8, i8* %780, i64 12
  %860 = bitcast i8* %859 to <4 x i8>*
  %861 = load <4 x i8>, <4 x i8>* %860, align 1
  %862 = zext <4 x i8> %861 to <4 x i32>
  %863 = getelementptr inbounds i8, i8* %778, i64 12
  %864 = bitcast i8* %863 to <4 x i8>*
  %865 = load <4 x i8>, <4 x i8>* %864, align 1
  %866 = zext <4 x i8> %865 to <4 x i32>
  %867 = mul nuw nsw <4 x i32> %866, %862
  %868 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %862
  %869 = getelementptr inbounds i8, i8* %779, i64 12
  %870 = bitcast i8* %869 to <4 x i8>*
  %871 = load <4 x i8>, <4 x i8>* %870, align 1
  %872 = zext <4 x i8> %871 to <4 x i32>
  %873 = mul nsw <4 x i32> %868, %872
  %874 = add nuw nsw <4 x i32> %867, <i32 32, i32 32, i32 32, i32 32>
  %875 = add nsw <4 x i32> %874, %873
  %876 = ashr <4 x i32> %875, <i32 6, i32 6, i32 6, i32 6>
  %877 = getelementptr inbounds i8, i8* %775, i64 12
  %878 = bitcast i8* %877 to <4 x i8>*
  %879 = load <4 x i8>, <4 x i8>* %878, align 1
  %880 = zext <4 x i8> %879 to <4 x i32>
  %881 = sub nsw <4 x i32> %876, %880
  %882 = icmp slt <4 x i32> %881, zeroinitializer
  %883 = sub nsw <4 x i32> zeroinitializer, %881
  %884 = select <4 x i1> %882, <4 x i32> %883, <4 x i32> %881
  %885 = add <4 x i32> %884, %858
  %886 = shufflevector <4 x i32> %885, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %887 = add <4 x i32> %885, %886
  %888 = shufflevector <4 x i32> %887, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %889 = add <4 x i32> %887, %888
  %890 = extractelement <4 x i32> %889, i32 0
  %891 = getelementptr inbounds i8, i8* %775, i64 %11
  %892 = getelementptr inbounds i8, i8* %778, i64 16
  %893 = getelementptr inbounds i8, i8* %779, i64 %12
  %894 = getelementptr inbounds i8, i8* %780, i64 %13
  %895 = add nuw nsw i32 %777, 1
  %896 = icmp eq i32 %895, 8
  br i1 %896, label %897, label %774

897:                                              ; preds = %774
  %898 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %890, i32* %898, align 4
  %899 = getelementptr inbounds i8*, i8** %2, i64 3
  %900 = load i8*, i8** %899, align 8
  br label %901

901:                                              ; preds = %897, %901
  %902 = phi i8* [ %0, %897 ], [ %1018, %901 ]
  %903 = phi i32 [ 0, %897 ], [ %1017, %901 ]
  %904 = phi i32 [ 0, %897 ], [ %1022, %901 ]
  %905 = phi i8* [ %4, %897 ], [ %1019, %901 ]
  %906 = phi i8* [ %900, %897 ], [ %1020, %901 ]
  %907 = phi i8* [ %5, %897 ], [ %1021, %901 ]
  %908 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %903, i32 0
  %909 = bitcast i8* %907 to <4 x i8>*
  %910 = load <4 x i8>, <4 x i8>* %909, align 1
  %911 = zext <4 x i8> %910 to <4 x i32>
  %912 = bitcast i8* %905 to <4 x i8>*
  %913 = load <4 x i8>, <4 x i8>* %912, align 1
  %914 = zext <4 x i8> %913 to <4 x i32>
  %915 = mul nuw nsw <4 x i32> %914, %911
  %916 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %911
  %917 = bitcast i8* %906 to <4 x i8>*
  %918 = load <4 x i8>, <4 x i8>* %917, align 1
  %919 = zext <4 x i8> %918 to <4 x i32>
  %920 = mul nsw <4 x i32> %916, %919
  %921 = add nuw nsw <4 x i32> %915, <i32 32, i32 32, i32 32, i32 32>
  %922 = add nsw <4 x i32> %921, %920
  %923 = ashr <4 x i32> %922, <i32 6, i32 6, i32 6, i32 6>
  %924 = bitcast i8* %902 to <4 x i8>*
  %925 = load <4 x i8>, <4 x i8>* %924, align 1
  %926 = zext <4 x i8> %925 to <4 x i32>
  %927 = sub nsw <4 x i32> %923, %926
  %928 = icmp slt <4 x i32> %927, zeroinitializer
  %929 = sub nsw <4 x i32> zeroinitializer, %927
  %930 = select <4 x i1> %928, <4 x i32> %929, <4 x i32> %927
  %931 = add <4 x i32> %930, %908
  %932 = getelementptr inbounds i8, i8* %907, i64 4
  %933 = bitcast i8* %932 to <4 x i8>*
  %934 = load <4 x i8>, <4 x i8>* %933, align 1
  %935 = zext <4 x i8> %934 to <4 x i32>
  %936 = getelementptr inbounds i8, i8* %905, i64 4
  %937 = bitcast i8* %936 to <4 x i8>*
  %938 = load <4 x i8>, <4 x i8>* %937, align 1
  %939 = zext <4 x i8> %938 to <4 x i32>
  %940 = mul nuw nsw <4 x i32> %939, %935
  %941 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %935
  %942 = getelementptr inbounds i8, i8* %906, i64 4
  %943 = bitcast i8* %942 to <4 x i8>*
  %944 = load <4 x i8>, <4 x i8>* %943, align 1
  %945 = zext <4 x i8> %944 to <4 x i32>
  %946 = mul nsw <4 x i32> %941, %945
  %947 = add nuw nsw <4 x i32> %940, <i32 32, i32 32, i32 32, i32 32>
  %948 = add nsw <4 x i32> %947, %946
  %949 = ashr <4 x i32> %948, <i32 6, i32 6, i32 6, i32 6>
  %950 = getelementptr inbounds i8, i8* %902, i64 4
  %951 = bitcast i8* %950 to <4 x i8>*
  %952 = load <4 x i8>, <4 x i8>* %951, align 1
  %953 = zext <4 x i8> %952 to <4 x i32>
  %954 = sub nsw <4 x i32> %949, %953
  %955 = icmp slt <4 x i32> %954, zeroinitializer
  %956 = sub nsw <4 x i32> zeroinitializer, %954
  %957 = select <4 x i1> %955, <4 x i32> %956, <4 x i32> %954
  %958 = add <4 x i32> %957, %931
  %959 = getelementptr inbounds i8, i8* %907, i64 8
  %960 = bitcast i8* %959 to <4 x i8>*
  %961 = load <4 x i8>, <4 x i8>* %960, align 1
  %962 = zext <4 x i8> %961 to <4 x i32>
  %963 = getelementptr inbounds i8, i8* %905, i64 8
  %964 = bitcast i8* %963 to <4 x i8>*
  %965 = load <4 x i8>, <4 x i8>* %964, align 1
  %966 = zext <4 x i8> %965 to <4 x i32>
  %967 = mul nuw nsw <4 x i32> %966, %962
  %968 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %962
  %969 = getelementptr inbounds i8, i8* %906, i64 8
  %970 = bitcast i8* %969 to <4 x i8>*
  %971 = load <4 x i8>, <4 x i8>* %970, align 1
  %972 = zext <4 x i8> %971 to <4 x i32>
  %973 = mul nsw <4 x i32> %968, %972
  %974 = add nuw nsw <4 x i32> %967, <i32 32, i32 32, i32 32, i32 32>
  %975 = add nsw <4 x i32> %974, %973
  %976 = ashr <4 x i32> %975, <i32 6, i32 6, i32 6, i32 6>
  %977 = getelementptr inbounds i8, i8* %902, i64 8
  %978 = bitcast i8* %977 to <4 x i8>*
  %979 = load <4 x i8>, <4 x i8>* %978, align 1
  %980 = zext <4 x i8> %979 to <4 x i32>
  %981 = sub nsw <4 x i32> %976, %980
  %982 = icmp slt <4 x i32> %981, zeroinitializer
  %983 = sub nsw <4 x i32> zeroinitializer, %981
  %984 = select <4 x i1> %982, <4 x i32> %983, <4 x i32> %981
  %985 = add <4 x i32> %984, %958
  %986 = getelementptr inbounds i8, i8* %907, i64 12
  %987 = bitcast i8* %986 to <4 x i8>*
  %988 = load <4 x i8>, <4 x i8>* %987, align 1
  %989 = zext <4 x i8> %988 to <4 x i32>
  %990 = getelementptr inbounds i8, i8* %905, i64 12
  %991 = bitcast i8* %990 to <4 x i8>*
  %992 = load <4 x i8>, <4 x i8>* %991, align 1
  %993 = zext <4 x i8> %992 to <4 x i32>
  %994 = mul nuw nsw <4 x i32> %993, %989
  %995 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %989
  %996 = getelementptr inbounds i8, i8* %906, i64 12
  %997 = bitcast i8* %996 to <4 x i8>*
  %998 = load <4 x i8>, <4 x i8>* %997, align 1
  %999 = zext <4 x i8> %998 to <4 x i32>
  %1000 = mul nsw <4 x i32> %995, %999
  %1001 = add nuw nsw <4 x i32> %994, <i32 32, i32 32, i32 32, i32 32>
  %1002 = add nsw <4 x i32> %1001, %1000
  %1003 = ashr <4 x i32> %1002, <i32 6, i32 6, i32 6, i32 6>
  %1004 = getelementptr inbounds i8, i8* %902, i64 12
  %1005 = bitcast i8* %1004 to <4 x i8>*
  %1006 = load <4 x i8>, <4 x i8>* %1005, align 1
  %1007 = zext <4 x i8> %1006 to <4 x i32>
  %1008 = sub nsw <4 x i32> %1003, %1007
  %1009 = icmp slt <4 x i32> %1008, zeroinitializer
  %1010 = sub nsw <4 x i32> zeroinitializer, %1008
  %1011 = select <4 x i1> %1009, <4 x i32> %1010, <4 x i32> %1008
  %1012 = add <4 x i32> %1011, %985
  %1013 = shufflevector <4 x i32> %1012, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1014 = add <4 x i32> %1012, %1013
  %1015 = shufflevector <4 x i32> %1014, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1016 = add <4 x i32> %1014, %1015
  %1017 = extractelement <4 x i32> %1016, i32 0
  %1018 = getelementptr inbounds i8, i8* %902, i64 %11
  %1019 = getelementptr inbounds i8, i8* %905, i64 16
  %1020 = getelementptr inbounds i8, i8* %906, i64 %12
  %1021 = getelementptr inbounds i8, i8* %907, i64 %13
  %1022 = add nuw nsw i32 %904, 1
  %1023 = icmp eq i32 %1022, 8
  br i1 %1023, label %267, label %901
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad8x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %56

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %50, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %49, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %54, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %51, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %52, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %53, %13 ], [ %5, %8 ]
  %20 = bitcast i8* %19 to <8 x i8>*
  %21 = load <8 x i8>, <8 x i8>* %20, align 1
  %22 = zext <8 x i8> %21 to <8 x i32>
  %23 = bitcast i8* %17 to <8 x i8>*
  %24 = load <8 x i8>, <8 x i8>* %23, align 1
  %25 = zext <8 x i8> %24 to <8 x i32>
  %26 = mul nuw nsw <8 x i32> %25, %22
  %27 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %22
  %28 = bitcast i8* %18 to <8 x i8>*
  %29 = load <8 x i8>, <8 x i8>* %28, align 1
  %30 = zext <8 x i8> %29 to <8 x i32>
  %31 = mul nsw <8 x i32> %27, %30
  %32 = add nuw nsw <8 x i32> %26, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %33 = add nsw <8 x i32> %32, %31
  %34 = ashr <8 x i32> %33, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %35 = bitcast i8* %14 to <8 x i8>*
  %36 = load <8 x i8>, <8 x i8>* %35, align 1
  %37 = zext <8 x i8> %36 to <8 x i32>
  %38 = sub nsw <8 x i32> %34, %37
  %39 = icmp slt <8 x i32> %38, zeroinitializer
  %40 = sub nsw <8 x i32> zeroinitializer, %38
  %41 = select <8 x i1> %39, <8 x i32> %40, <8 x i32> %38
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = add <8 x i32> %41, %42
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add <8 x i32> %43, %44
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = add <8 x i32> %45, %46
  %48 = extractelement <8 x i32> %47, i32 0
  %49 = add i32 %48, %15
  %50 = getelementptr inbounds i8, i8* %14, i64 %10
  %51 = getelementptr inbounds i8, i8* %17, i64 %11
  %52 = getelementptr inbounds i8, i8* %18, i64 8
  %53 = getelementptr inbounds i8, i8* %19, i64 %12
  %54 = add nuw nsw i32 %16, 1
  %55 = icmp eq i32 %54, 16
  br i1 %55, label %99, label %13

56:                                               ; preds = %8, %56
  %57 = phi i8* [ %93, %56 ], [ %0, %8 ]
  %58 = phi i32 [ %92, %56 ], [ 0, %8 ]
  %59 = phi i32 [ %97, %56 ], [ 0, %8 ]
  %60 = phi i8* [ %94, %56 ], [ %4, %8 ]
  %61 = phi i8* [ %95, %56 ], [ %2, %8 ]
  %62 = phi i8* [ %96, %56 ], [ %5, %8 ]
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = bitcast i8* %60 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %68, %65
  %70 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %65
  %71 = bitcast i8* %61 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1
  %73 = zext <8 x i8> %72 to <8 x i32>
  %74 = mul nsw <8 x i32> %70, %73
  %75 = add nuw nsw <8 x i32> %69, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %76 = add nsw <8 x i32> %75, %74
  %77 = ashr <8 x i32> %76, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %78 = bitcast i8* %57 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1
  %80 = zext <8 x i8> %79 to <8 x i32>
  %81 = sub nsw <8 x i32> %77, %80
  %82 = icmp slt <8 x i32> %81, zeroinitializer
  %83 = sub nsw <8 x i32> zeroinitializer, %81
  %84 = select <8 x i1> %82, <8 x i32> %83, <8 x i32> %81
  %85 = shufflevector <8 x i32> %84, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = add <8 x i32> %84, %85
  %87 = shufflevector <8 x i32> %86, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = add <8 x i32> %86, %87
  %89 = shufflevector <8 x i32> %88, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add <8 x i32> %88, %89
  %91 = extractelement <8 x i32> %90, i32 0
  %92 = add i32 %91, %58
  %93 = getelementptr inbounds i8, i8* %57, i64 %10
  %94 = getelementptr inbounds i8, i8* %60, i64 8
  %95 = getelementptr inbounds i8, i8* %61, i64 %11
  %96 = getelementptr inbounds i8, i8* %62, i64 %12
  %97 = add nuw nsw i32 %59, 1
  %98 = icmp eq i32 %97, 16
  br i1 %98, label %99, label %56

99:                                               ; preds = %56, %13
  %100 = phi i32 [ %49, %13 ], [ %92, %56 ]
  ret i32 %100
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad8x16x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %61

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %52, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %51, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %56, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %53, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %54, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %55, %15 ], [ %5, %9 ]
  %22 = bitcast i8* %21 to <8 x i8>*
  %23 = load <8 x i8>, <8 x i8>* %22, align 1
  %24 = zext <8 x i8> %23 to <8 x i32>
  %25 = bitcast i8* %19 to <8 x i8>*
  %26 = load <8 x i8>, <8 x i8>* %25, align 1
  %27 = zext <8 x i8> %26 to <8 x i32>
  %28 = mul nuw nsw <8 x i32> %27, %24
  %29 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %24
  %30 = bitcast i8* %20 to <8 x i8>*
  %31 = load <8 x i8>, <8 x i8>* %30, align 1
  %32 = zext <8 x i8> %31 to <8 x i32>
  %33 = mul nsw <8 x i32> %29, %32
  %34 = add nuw nsw <8 x i32> %28, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %35 = add nsw <8 x i32> %34, %33
  %36 = ashr <8 x i32> %35, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %37 = bitcast i8* %16 to <8 x i8>*
  %38 = load <8 x i8>, <8 x i8>* %37, align 1
  %39 = zext <8 x i8> %38 to <8 x i32>
  %40 = sub nsw <8 x i32> %36, %39
  %41 = icmp slt <8 x i32> %40, zeroinitializer
  %42 = sub nsw <8 x i32> zeroinitializer, %40
  %43 = select <8 x i1> %41, <8 x i32> %42, <8 x i32> %40
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add <8 x i32> %43, %44
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = add <8 x i32> %45, %46
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = add <8 x i32> %47, %48
  %50 = extractelement <8 x i32> %49, i32 0
  %51 = add i32 %50, %17
  %52 = getelementptr inbounds i8, i8* %16, i64 %11
  %53 = getelementptr inbounds i8, i8* %19, i64 %12
  %54 = getelementptr inbounds i8, i8* %20, i64 8
  %55 = getelementptr inbounds i8, i8* %21, i64 %13
  %56 = add nuw nsw i32 %18, 1
  %57 = icmp eq i32 %56, 16
  br i1 %57, label %58, label %15

58:                                               ; preds = %15
  store i32 %51, i32* %8, align 4
  %59 = getelementptr inbounds i8*, i8** %2, i64 1
  %60 = load i8*, i8** %59, align 8
  br label %108

61:                                               ; preds = %9, %61
  %62 = phi i8* [ %98, %61 ], [ %0, %9 ]
  %63 = phi i32 [ %97, %61 ], [ 0, %9 ]
  %64 = phi i32 [ %102, %61 ], [ 0, %9 ]
  %65 = phi i8* [ %99, %61 ], [ %4, %9 ]
  %66 = phi i8* [ %100, %61 ], [ %14, %9 ]
  %67 = phi i8* [ %101, %61 ], [ %5, %9 ]
  %68 = bitcast i8* %67 to <8 x i8>*
  %69 = load <8 x i8>, <8 x i8>* %68, align 1
  %70 = zext <8 x i8> %69 to <8 x i32>
  %71 = bitcast i8* %65 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1
  %73 = zext <8 x i8> %72 to <8 x i32>
  %74 = mul nuw nsw <8 x i32> %73, %70
  %75 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %70
  %76 = bitcast i8* %66 to <8 x i8>*
  %77 = load <8 x i8>, <8 x i8>* %76, align 1
  %78 = zext <8 x i8> %77 to <8 x i32>
  %79 = mul nsw <8 x i32> %75, %78
  %80 = add nuw nsw <8 x i32> %74, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %81 = add nsw <8 x i32> %80, %79
  %82 = ashr <8 x i32> %81, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %83 = bitcast i8* %62 to <8 x i8>*
  %84 = load <8 x i8>, <8 x i8>* %83, align 1
  %85 = zext <8 x i8> %84 to <8 x i32>
  %86 = sub nsw <8 x i32> %82, %85
  %87 = icmp slt <8 x i32> %86, zeroinitializer
  %88 = sub nsw <8 x i32> zeroinitializer, %86
  %89 = select <8 x i1> %87, <8 x i32> %88, <8 x i32> %86
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add <8 x i32> %89, %90
  %92 = shufflevector <8 x i32> %91, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add <8 x i32> %91, %92
  %94 = shufflevector <8 x i32> %93, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add <8 x i32> %93, %94
  %96 = extractelement <8 x i32> %95, i32 0
  %97 = add i32 %96, %63
  %98 = getelementptr inbounds i8, i8* %62, i64 %11
  %99 = getelementptr inbounds i8, i8* %65, i64 8
  %100 = getelementptr inbounds i8, i8* %66, i64 %12
  %101 = getelementptr inbounds i8, i8* %67, i64 %13
  %102 = add nuw nsw i32 %64, 1
  %103 = icmp eq i32 %102, 16
  br i1 %103, label %104, label %61

104:                                              ; preds = %61
  store i32 %97, i32* %8, align 4
  %105 = getelementptr inbounds i8*, i8** %2, i64 1
  %106 = load i8*, i8** %105, align 8
  br label %247

107:                                              ; preds = %384, %245
  ret void

108:                                              ; preds = %108, %58
  %109 = phi i8* [ %0, %58 ], [ %145, %108 ]
  %110 = phi i32 [ 0, %58 ], [ %144, %108 ]
  %111 = phi i32 [ 0, %58 ], [ %149, %108 ]
  %112 = phi i8* [ %60, %58 ], [ %146, %108 ]
  %113 = phi i8* [ %4, %58 ], [ %147, %108 ]
  %114 = phi i8* [ %5, %58 ], [ %148, %108 ]
  %115 = bitcast i8* %114 to <8 x i8>*
  %116 = load <8 x i8>, <8 x i8>* %115, align 1
  %117 = zext <8 x i8> %116 to <8 x i32>
  %118 = bitcast i8* %112 to <8 x i8>*
  %119 = load <8 x i8>, <8 x i8>* %118, align 1
  %120 = zext <8 x i8> %119 to <8 x i32>
  %121 = mul nuw nsw <8 x i32> %120, %117
  %122 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %117
  %123 = bitcast i8* %113 to <8 x i8>*
  %124 = load <8 x i8>, <8 x i8>* %123, align 1
  %125 = zext <8 x i8> %124 to <8 x i32>
  %126 = mul nsw <8 x i32> %122, %125
  %127 = add nuw nsw <8 x i32> %121, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %128 = add nsw <8 x i32> %127, %126
  %129 = ashr <8 x i32> %128, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %130 = bitcast i8* %109 to <8 x i8>*
  %131 = load <8 x i8>, <8 x i8>* %130, align 1
  %132 = zext <8 x i8> %131 to <8 x i32>
  %133 = sub nsw <8 x i32> %129, %132
  %134 = icmp slt <8 x i32> %133, zeroinitializer
  %135 = sub nsw <8 x i32> zeroinitializer, %133
  %136 = select <8 x i1> %134, <8 x i32> %135, <8 x i32> %133
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %138 = add <8 x i32> %136, %137
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = add <8 x i32> %138, %139
  %141 = shufflevector <8 x i32> %140, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = add <8 x i32> %140, %141
  %143 = extractelement <8 x i32> %142, i32 0
  %144 = add i32 %143, %110
  %145 = getelementptr inbounds i8, i8* %109, i64 %11
  %146 = getelementptr inbounds i8, i8* %112, i64 %12
  %147 = getelementptr inbounds i8, i8* %113, i64 8
  %148 = getelementptr inbounds i8, i8* %114, i64 %13
  %149 = add nuw nsw i32 %111, 1
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %151, label %108

151:                                              ; preds = %108
  %152 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %144, i32* %152, align 4
  %153 = getelementptr inbounds i8*, i8** %2, i64 2
  %154 = load i8*, i8** %153, align 8
  br label %155

155:                                              ; preds = %155, %151
  %156 = phi i8* [ %0, %151 ], [ %192, %155 ]
  %157 = phi i32 [ 0, %151 ], [ %191, %155 ]
  %158 = phi i32 [ 0, %151 ], [ %196, %155 ]
  %159 = phi i8* [ %154, %151 ], [ %193, %155 ]
  %160 = phi i8* [ %4, %151 ], [ %194, %155 ]
  %161 = phi i8* [ %5, %151 ], [ %195, %155 ]
  %162 = bitcast i8* %161 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1
  %164 = zext <8 x i8> %163 to <8 x i32>
  %165 = bitcast i8* %159 to <8 x i8>*
  %166 = load <8 x i8>, <8 x i8>* %165, align 1
  %167 = zext <8 x i8> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %167, %164
  %169 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %164
  %170 = bitcast i8* %160 to <8 x i8>*
  %171 = load <8 x i8>, <8 x i8>* %170, align 1
  %172 = zext <8 x i8> %171 to <8 x i32>
  %173 = mul nsw <8 x i32> %169, %172
  %174 = add nuw nsw <8 x i32> %168, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %175 = add nsw <8 x i32> %174, %173
  %176 = ashr <8 x i32> %175, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %177 = bitcast i8* %156 to <8 x i8>*
  %178 = load <8 x i8>, <8 x i8>* %177, align 1
  %179 = zext <8 x i8> %178 to <8 x i32>
  %180 = sub nsw <8 x i32> %176, %179
  %181 = icmp slt <8 x i32> %180, zeroinitializer
  %182 = sub nsw <8 x i32> zeroinitializer, %180
  %183 = select <8 x i1> %181, <8 x i32> %182, <8 x i32> %180
  %184 = shufflevector <8 x i32> %183, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %185 = add <8 x i32> %183, %184
  %186 = shufflevector <8 x i32> %185, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = add <8 x i32> %185, %186
  %188 = shufflevector <8 x i32> %187, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %189 = add <8 x i32> %187, %188
  %190 = extractelement <8 x i32> %189, i32 0
  %191 = add i32 %190, %157
  %192 = getelementptr inbounds i8, i8* %156, i64 %11
  %193 = getelementptr inbounds i8, i8* %159, i64 %12
  %194 = getelementptr inbounds i8, i8* %160, i64 8
  %195 = getelementptr inbounds i8, i8* %161, i64 %13
  %196 = add nuw nsw i32 %158, 1
  %197 = icmp eq i32 %196, 16
  br i1 %197, label %198, label %155

198:                                              ; preds = %155
  %199 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %191, i32* %199, align 4
  %200 = getelementptr inbounds i8*, i8** %2, i64 3
  %201 = load i8*, i8** %200, align 8
  br label %202

202:                                              ; preds = %202, %198
  %203 = phi i8* [ %0, %198 ], [ %239, %202 ]
  %204 = phi i32 [ 0, %198 ], [ %238, %202 ]
  %205 = phi i32 [ 0, %198 ], [ %243, %202 ]
  %206 = phi i8* [ %201, %198 ], [ %240, %202 ]
  %207 = phi i8* [ %4, %198 ], [ %241, %202 ]
  %208 = phi i8* [ %5, %198 ], [ %242, %202 ]
  %209 = bitcast i8* %208 to <8 x i8>*
  %210 = load <8 x i8>, <8 x i8>* %209, align 1
  %211 = zext <8 x i8> %210 to <8 x i32>
  %212 = bitcast i8* %206 to <8 x i8>*
  %213 = load <8 x i8>, <8 x i8>* %212, align 1
  %214 = zext <8 x i8> %213 to <8 x i32>
  %215 = mul nuw nsw <8 x i32> %214, %211
  %216 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %211
  %217 = bitcast i8* %207 to <8 x i8>*
  %218 = load <8 x i8>, <8 x i8>* %217, align 1
  %219 = zext <8 x i8> %218 to <8 x i32>
  %220 = mul nsw <8 x i32> %216, %219
  %221 = add nuw nsw <8 x i32> %215, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %222 = add nsw <8 x i32> %221, %220
  %223 = ashr <8 x i32> %222, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %224 = bitcast i8* %203 to <8 x i8>*
  %225 = load <8 x i8>, <8 x i8>* %224, align 1
  %226 = zext <8 x i8> %225 to <8 x i32>
  %227 = sub nsw <8 x i32> %223, %226
  %228 = icmp slt <8 x i32> %227, zeroinitializer
  %229 = sub nsw <8 x i32> zeroinitializer, %227
  %230 = select <8 x i1> %228, <8 x i32> %229, <8 x i32> %227
  %231 = shufflevector <8 x i32> %230, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %232 = add <8 x i32> %230, %231
  %233 = shufflevector <8 x i32> %232, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %234 = add <8 x i32> %232, %233
  %235 = shufflevector <8 x i32> %234, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %236 = add <8 x i32> %234, %235
  %237 = extractelement <8 x i32> %236, i32 0
  %238 = add i32 %237, %204
  %239 = getelementptr inbounds i8, i8* %203, i64 %11
  %240 = getelementptr inbounds i8, i8* %206, i64 %12
  %241 = getelementptr inbounds i8, i8* %207, i64 8
  %242 = getelementptr inbounds i8, i8* %208, i64 %13
  %243 = add nuw nsw i32 %205, 1
  %244 = icmp eq i32 %243, 16
  br i1 %244, label %245, label %202

245:                                              ; preds = %202
  %246 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %238, i32* %246, align 4
  br label %107

247:                                              ; preds = %247, %104
  %248 = phi i8* [ %0, %104 ], [ %284, %247 ]
  %249 = phi i32 [ 0, %104 ], [ %283, %247 ]
  %250 = phi i32 [ 0, %104 ], [ %288, %247 ]
  %251 = phi i8* [ %4, %104 ], [ %285, %247 ]
  %252 = phi i8* [ %106, %104 ], [ %286, %247 ]
  %253 = phi i8* [ %5, %104 ], [ %287, %247 ]
  %254 = bitcast i8* %253 to <8 x i8>*
  %255 = load <8 x i8>, <8 x i8>* %254, align 1
  %256 = zext <8 x i8> %255 to <8 x i32>
  %257 = bitcast i8* %251 to <8 x i8>*
  %258 = load <8 x i8>, <8 x i8>* %257, align 1
  %259 = zext <8 x i8> %258 to <8 x i32>
  %260 = mul nuw nsw <8 x i32> %259, %256
  %261 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %256
  %262 = bitcast i8* %252 to <8 x i8>*
  %263 = load <8 x i8>, <8 x i8>* %262, align 1
  %264 = zext <8 x i8> %263 to <8 x i32>
  %265 = mul nsw <8 x i32> %261, %264
  %266 = add nuw nsw <8 x i32> %260, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %267 = add nsw <8 x i32> %266, %265
  %268 = ashr <8 x i32> %267, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %269 = bitcast i8* %248 to <8 x i8>*
  %270 = load <8 x i8>, <8 x i8>* %269, align 1
  %271 = zext <8 x i8> %270 to <8 x i32>
  %272 = sub nsw <8 x i32> %268, %271
  %273 = icmp slt <8 x i32> %272, zeroinitializer
  %274 = sub nsw <8 x i32> zeroinitializer, %272
  %275 = select <8 x i1> %273, <8 x i32> %274, <8 x i32> %272
  %276 = shufflevector <8 x i32> %275, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %277 = add <8 x i32> %275, %276
  %278 = shufflevector <8 x i32> %277, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %279 = add <8 x i32> %277, %278
  %280 = shufflevector <8 x i32> %279, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = add <8 x i32> %279, %280
  %282 = extractelement <8 x i32> %281, i32 0
  %283 = add i32 %282, %249
  %284 = getelementptr inbounds i8, i8* %248, i64 %11
  %285 = getelementptr inbounds i8, i8* %251, i64 8
  %286 = getelementptr inbounds i8, i8* %252, i64 %12
  %287 = getelementptr inbounds i8, i8* %253, i64 %13
  %288 = add nuw nsw i32 %250, 1
  %289 = icmp eq i32 %288, 16
  br i1 %289, label %290, label %247

290:                                              ; preds = %247
  %291 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %283, i32* %291, align 4
  %292 = getelementptr inbounds i8*, i8** %2, i64 2
  %293 = load i8*, i8** %292, align 8
  br label %294

294:                                              ; preds = %294, %290
  %295 = phi i8* [ %0, %290 ], [ %331, %294 ]
  %296 = phi i32 [ 0, %290 ], [ %330, %294 ]
  %297 = phi i32 [ 0, %290 ], [ %335, %294 ]
  %298 = phi i8* [ %4, %290 ], [ %332, %294 ]
  %299 = phi i8* [ %293, %290 ], [ %333, %294 ]
  %300 = phi i8* [ %5, %290 ], [ %334, %294 ]
  %301 = bitcast i8* %300 to <8 x i8>*
  %302 = load <8 x i8>, <8 x i8>* %301, align 1
  %303 = zext <8 x i8> %302 to <8 x i32>
  %304 = bitcast i8* %298 to <8 x i8>*
  %305 = load <8 x i8>, <8 x i8>* %304, align 1
  %306 = zext <8 x i8> %305 to <8 x i32>
  %307 = mul nuw nsw <8 x i32> %306, %303
  %308 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %303
  %309 = bitcast i8* %299 to <8 x i8>*
  %310 = load <8 x i8>, <8 x i8>* %309, align 1
  %311 = zext <8 x i8> %310 to <8 x i32>
  %312 = mul nsw <8 x i32> %308, %311
  %313 = add nuw nsw <8 x i32> %307, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %314 = add nsw <8 x i32> %313, %312
  %315 = ashr <8 x i32> %314, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %316 = bitcast i8* %295 to <8 x i8>*
  %317 = load <8 x i8>, <8 x i8>* %316, align 1
  %318 = zext <8 x i8> %317 to <8 x i32>
  %319 = sub nsw <8 x i32> %315, %318
  %320 = icmp slt <8 x i32> %319, zeroinitializer
  %321 = sub nsw <8 x i32> zeroinitializer, %319
  %322 = select <8 x i1> %320, <8 x i32> %321, <8 x i32> %319
  %323 = shufflevector <8 x i32> %322, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %324 = add <8 x i32> %322, %323
  %325 = shufflevector <8 x i32> %324, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %326 = add <8 x i32> %324, %325
  %327 = shufflevector <8 x i32> %326, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %328 = add <8 x i32> %326, %327
  %329 = extractelement <8 x i32> %328, i32 0
  %330 = add i32 %329, %296
  %331 = getelementptr inbounds i8, i8* %295, i64 %11
  %332 = getelementptr inbounds i8, i8* %298, i64 8
  %333 = getelementptr inbounds i8, i8* %299, i64 %12
  %334 = getelementptr inbounds i8, i8* %300, i64 %13
  %335 = add nuw nsw i32 %297, 1
  %336 = icmp eq i32 %335, 16
  br i1 %336, label %337, label %294

337:                                              ; preds = %294
  %338 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %330, i32* %338, align 4
  %339 = getelementptr inbounds i8*, i8** %2, i64 3
  %340 = load i8*, i8** %339, align 8
  br label %341

341:                                              ; preds = %341, %337
  %342 = phi i8* [ %0, %337 ], [ %378, %341 ]
  %343 = phi i32 [ 0, %337 ], [ %377, %341 ]
  %344 = phi i32 [ 0, %337 ], [ %382, %341 ]
  %345 = phi i8* [ %4, %337 ], [ %379, %341 ]
  %346 = phi i8* [ %340, %337 ], [ %380, %341 ]
  %347 = phi i8* [ %5, %337 ], [ %381, %341 ]
  %348 = bitcast i8* %347 to <8 x i8>*
  %349 = load <8 x i8>, <8 x i8>* %348, align 1
  %350 = zext <8 x i8> %349 to <8 x i32>
  %351 = bitcast i8* %345 to <8 x i8>*
  %352 = load <8 x i8>, <8 x i8>* %351, align 1
  %353 = zext <8 x i8> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %353, %350
  %355 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %350
  %356 = bitcast i8* %346 to <8 x i8>*
  %357 = load <8 x i8>, <8 x i8>* %356, align 1
  %358 = zext <8 x i8> %357 to <8 x i32>
  %359 = mul nsw <8 x i32> %355, %358
  %360 = add nuw nsw <8 x i32> %354, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %361 = add nsw <8 x i32> %360, %359
  %362 = ashr <8 x i32> %361, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %363 = bitcast i8* %342 to <8 x i8>*
  %364 = load <8 x i8>, <8 x i8>* %363, align 1
  %365 = zext <8 x i8> %364 to <8 x i32>
  %366 = sub nsw <8 x i32> %362, %365
  %367 = icmp slt <8 x i32> %366, zeroinitializer
  %368 = sub nsw <8 x i32> zeroinitializer, %366
  %369 = select <8 x i1> %367, <8 x i32> %368, <8 x i32> %366
  %370 = shufflevector <8 x i32> %369, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %371 = add <8 x i32> %369, %370
  %372 = shufflevector <8 x i32> %371, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %373 = add <8 x i32> %371, %372
  %374 = shufflevector <8 x i32> %373, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %375 = add <8 x i32> %373, %374
  %376 = extractelement <8 x i32> %375, i32 0
  %377 = add i32 %376, %343
  %378 = getelementptr inbounds i8, i8* %342, i64 %11
  %379 = getelementptr inbounds i8, i8* %345, i64 8
  %380 = getelementptr inbounds i8, i8* %346, i64 %12
  %381 = getelementptr inbounds i8, i8* %347, i64 %13
  %382 = add nuw nsw i32 %344, 1
  %383 = icmp eq i32 %382, 16
  br i1 %383, label %384, label %341

384:                                              ; preds = %341
  %385 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %377, i32* %385, align 4
  br label %107
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad8x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %56

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %50, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %49, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %54, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %51, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %52, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %53, %13 ], [ %5, %8 ]
  %20 = bitcast i8* %19 to <8 x i8>*
  %21 = load <8 x i8>, <8 x i8>* %20, align 1
  %22 = zext <8 x i8> %21 to <8 x i32>
  %23 = bitcast i8* %17 to <8 x i8>*
  %24 = load <8 x i8>, <8 x i8>* %23, align 1
  %25 = zext <8 x i8> %24 to <8 x i32>
  %26 = mul nuw nsw <8 x i32> %25, %22
  %27 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %22
  %28 = bitcast i8* %18 to <8 x i8>*
  %29 = load <8 x i8>, <8 x i8>* %28, align 1
  %30 = zext <8 x i8> %29 to <8 x i32>
  %31 = mul nsw <8 x i32> %27, %30
  %32 = add nuw nsw <8 x i32> %26, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %33 = add nsw <8 x i32> %32, %31
  %34 = ashr <8 x i32> %33, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %35 = bitcast i8* %14 to <8 x i8>*
  %36 = load <8 x i8>, <8 x i8>* %35, align 1
  %37 = zext <8 x i8> %36 to <8 x i32>
  %38 = sub nsw <8 x i32> %34, %37
  %39 = icmp slt <8 x i32> %38, zeroinitializer
  %40 = sub nsw <8 x i32> zeroinitializer, %38
  %41 = select <8 x i1> %39, <8 x i32> %40, <8 x i32> %38
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = add <8 x i32> %41, %42
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add <8 x i32> %43, %44
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = add <8 x i32> %45, %46
  %48 = extractelement <8 x i32> %47, i32 0
  %49 = add i32 %48, %15
  %50 = getelementptr inbounds i8, i8* %14, i64 %10
  %51 = getelementptr inbounds i8, i8* %17, i64 %11
  %52 = getelementptr inbounds i8, i8* %18, i64 8
  %53 = getelementptr inbounds i8, i8* %19, i64 %12
  %54 = add nuw nsw i32 %16, 1
  %55 = icmp eq i32 %54, 8
  br i1 %55, label %99, label %13

56:                                               ; preds = %8, %56
  %57 = phi i8* [ %93, %56 ], [ %0, %8 ]
  %58 = phi i32 [ %92, %56 ], [ 0, %8 ]
  %59 = phi i32 [ %97, %56 ], [ 0, %8 ]
  %60 = phi i8* [ %94, %56 ], [ %4, %8 ]
  %61 = phi i8* [ %95, %56 ], [ %2, %8 ]
  %62 = phi i8* [ %96, %56 ], [ %5, %8 ]
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = bitcast i8* %60 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %68, %65
  %70 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %65
  %71 = bitcast i8* %61 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1
  %73 = zext <8 x i8> %72 to <8 x i32>
  %74 = mul nsw <8 x i32> %70, %73
  %75 = add nuw nsw <8 x i32> %69, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %76 = add nsw <8 x i32> %75, %74
  %77 = ashr <8 x i32> %76, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %78 = bitcast i8* %57 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1
  %80 = zext <8 x i8> %79 to <8 x i32>
  %81 = sub nsw <8 x i32> %77, %80
  %82 = icmp slt <8 x i32> %81, zeroinitializer
  %83 = sub nsw <8 x i32> zeroinitializer, %81
  %84 = select <8 x i1> %82, <8 x i32> %83, <8 x i32> %81
  %85 = shufflevector <8 x i32> %84, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = add <8 x i32> %84, %85
  %87 = shufflevector <8 x i32> %86, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = add <8 x i32> %86, %87
  %89 = shufflevector <8 x i32> %88, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add <8 x i32> %88, %89
  %91 = extractelement <8 x i32> %90, i32 0
  %92 = add i32 %91, %58
  %93 = getelementptr inbounds i8, i8* %57, i64 %10
  %94 = getelementptr inbounds i8, i8* %60, i64 8
  %95 = getelementptr inbounds i8, i8* %61, i64 %11
  %96 = getelementptr inbounds i8, i8* %62, i64 %12
  %97 = add nuw nsw i32 %59, 1
  %98 = icmp eq i32 %97, 8
  br i1 %98, label %99, label %56

99:                                               ; preds = %56, %13
  %100 = phi i32 [ %49, %13 ], [ %92, %56 ]
  ret i32 %100
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad8x8x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %61

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %52, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %51, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %56, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %53, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %54, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %55, %15 ], [ %5, %9 ]
  %22 = bitcast i8* %21 to <8 x i8>*
  %23 = load <8 x i8>, <8 x i8>* %22, align 1
  %24 = zext <8 x i8> %23 to <8 x i32>
  %25 = bitcast i8* %19 to <8 x i8>*
  %26 = load <8 x i8>, <8 x i8>* %25, align 1
  %27 = zext <8 x i8> %26 to <8 x i32>
  %28 = mul nuw nsw <8 x i32> %27, %24
  %29 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %24
  %30 = bitcast i8* %20 to <8 x i8>*
  %31 = load <8 x i8>, <8 x i8>* %30, align 1
  %32 = zext <8 x i8> %31 to <8 x i32>
  %33 = mul nsw <8 x i32> %29, %32
  %34 = add nuw nsw <8 x i32> %28, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %35 = add nsw <8 x i32> %34, %33
  %36 = ashr <8 x i32> %35, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %37 = bitcast i8* %16 to <8 x i8>*
  %38 = load <8 x i8>, <8 x i8>* %37, align 1
  %39 = zext <8 x i8> %38 to <8 x i32>
  %40 = sub nsw <8 x i32> %36, %39
  %41 = icmp slt <8 x i32> %40, zeroinitializer
  %42 = sub nsw <8 x i32> zeroinitializer, %40
  %43 = select <8 x i1> %41, <8 x i32> %42, <8 x i32> %40
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add <8 x i32> %43, %44
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = add <8 x i32> %45, %46
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = add <8 x i32> %47, %48
  %50 = extractelement <8 x i32> %49, i32 0
  %51 = add i32 %50, %17
  %52 = getelementptr inbounds i8, i8* %16, i64 %11
  %53 = getelementptr inbounds i8, i8* %19, i64 %12
  %54 = getelementptr inbounds i8, i8* %20, i64 8
  %55 = getelementptr inbounds i8, i8* %21, i64 %13
  %56 = add nuw nsw i32 %18, 1
  %57 = icmp eq i32 %56, 8
  br i1 %57, label %58, label %15

58:                                               ; preds = %15
  store i32 %51, i32* %8, align 4
  %59 = getelementptr inbounds i8*, i8** %2, i64 1
  %60 = load i8*, i8** %59, align 8
  br label %108

61:                                               ; preds = %9, %61
  %62 = phi i8* [ %98, %61 ], [ %0, %9 ]
  %63 = phi i32 [ %97, %61 ], [ 0, %9 ]
  %64 = phi i32 [ %102, %61 ], [ 0, %9 ]
  %65 = phi i8* [ %99, %61 ], [ %4, %9 ]
  %66 = phi i8* [ %100, %61 ], [ %14, %9 ]
  %67 = phi i8* [ %101, %61 ], [ %5, %9 ]
  %68 = bitcast i8* %67 to <8 x i8>*
  %69 = load <8 x i8>, <8 x i8>* %68, align 1
  %70 = zext <8 x i8> %69 to <8 x i32>
  %71 = bitcast i8* %65 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1
  %73 = zext <8 x i8> %72 to <8 x i32>
  %74 = mul nuw nsw <8 x i32> %73, %70
  %75 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %70
  %76 = bitcast i8* %66 to <8 x i8>*
  %77 = load <8 x i8>, <8 x i8>* %76, align 1
  %78 = zext <8 x i8> %77 to <8 x i32>
  %79 = mul nsw <8 x i32> %75, %78
  %80 = add nuw nsw <8 x i32> %74, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %81 = add nsw <8 x i32> %80, %79
  %82 = ashr <8 x i32> %81, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %83 = bitcast i8* %62 to <8 x i8>*
  %84 = load <8 x i8>, <8 x i8>* %83, align 1
  %85 = zext <8 x i8> %84 to <8 x i32>
  %86 = sub nsw <8 x i32> %82, %85
  %87 = icmp slt <8 x i32> %86, zeroinitializer
  %88 = sub nsw <8 x i32> zeroinitializer, %86
  %89 = select <8 x i1> %87, <8 x i32> %88, <8 x i32> %86
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add <8 x i32> %89, %90
  %92 = shufflevector <8 x i32> %91, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add <8 x i32> %91, %92
  %94 = shufflevector <8 x i32> %93, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add <8 x i32> %93, %94
  %96 = extractelement <8 x i32> %95, i32 0
  %97 = add i32 %96, %63
  %98 = getelementptr inbounds i8, i8* %62, i64 %11
  %99 = getelementptr inbounds i8, i8* %65, i64 8
  %100 = getelementptr inbounds i8, i8* %66, i64 %12
  %101 = getelementptr inbounds i8, i8* %67, i64 %13
  %102 = add nuw nsw i32 %64, 1
  %103 = icmp eq i32 %102, 8
  br i1 %103, label %104, label %61

104:                                              ; preds = %61
  store i32 %97, i32* %8, align 4
  %105 = getelementptr inbounds i8*, i8** %2, i64 1
  %106 = load i8*, i8** %105, align 8
  br label %247

107:                                              ; preds = %384, %245
  ret void

108:                                              ; preds = %108, %58
  %109 = phi i8* [ %0, %58 ], [ %145, %108 ]
  %110 = phi i32 [ 0, %58 ], [ %144, %108 ]
  %111 = phi i32 [ 0, %58 ], [ %149, %108 ]
  %112 = phi i8* [ %60, %58 ], [ %146, %108 ]
  %113 = phi i8* [ %4, %58 ], [ %147, %108 ]
  %114 = phi i8* [ %5, %58 ], [ %148, %108 ]
  %115 = bitcast i8* %114 to <8 x i8>*
  %116 = load <8 x i8>, <8 x i8>* %115, align 1
  %117 = zext <8 x i8> %116 to <8 x i32>
  %118 = bitcast i8* %112 to <8 x i8>*
  %119 = load <8 x i8>, <8 x i8>* %118, align 1
  %120 = zext <8 x i8> %119 to <8 x i32>
  %121 = mul nuw nsw <8 x i32> %120, %117
  %122 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %117
  %123 = bitcast i8* %113 to <8 x i8>*
  %124 = load <8 x i8>, <8 x i8>* %123, align 1
  %125 = zext <8 x i8> %124 to <8 x i32>
  %126 = mul nsw <8 x i32> %122, %125
  %127 = add nuw nsw <8 x i32> %121, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %128 = add nsw <8 x i32> %127, %126
  %129 = ashr <8 x i32> %128, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %130 = bitcast i8* %109 to <8 x i8>*
  %131 = load <8 x i8>, <8 x i8>* %130, align 1
  %132 = zext <8 x i8> %131 to <8 x i32>
  %133 = sub nsw <8 x i32> %129, %132
  %134 = icmp slt <8 x i32> %133, zeroinitializer
  %135 = sub nsw <8 x i32> zeroinitializer, %133
  %136 = select <8 x i1> %134, <8 x i32> %135, <8 x i32> %133
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %138 = add <8 x i32> %136, %137
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = add <8 x i32> %138, %139
  %141 = shufflevector <8 x i32> %140, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = add <8 x i32> %140, %141
  %143 = extractelement <8 x i32> %142, i32 0
  %144 = add i32 %143, %110
  %145 = getelementptr inbounds i8, i8* %109, i64 %11
  %146 = getelementptr inbounds i8, i8* %112, i64 %12
  %147 = getelementptr inbounds i8, i8* %113, i64 8
  %148 = getelementptr inbounds i8, i8* %114, i64 %13
  %149 = add nuw nsw i32 %111, 1
  %150 = icmp eq i32 %149, 8
  br i1 %150, label %151, label %108

151:                                              ; preds = %108
  %152 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %144, i32* %152, align 4
  %153 = getelementptr inbounds i8*, i8** %2, i64 2
  %154 = load i8*, i8** %153, align 8
  br label %155

155:                                              ; preds = %155, %151
  %156 = phi i8* [ %0, %151 ], [ %192, %155 ]
  %157 = phi i32 [ 0, %151 ], [ %191, %155 ]
  %158 = phi i32 [ 0, %151 ], [ %196, %155 ]
  %159 = phi i8* [ %154, %151 ], [ %193, %155 ]
  %160 = phi i8* [ %4, %151 ], [ %194, %155 ]
  %161 = phi i8* [ %5, %151 ], [ %195, %155 ]
  %162 = bitcast i8* %161 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1
  %164 = zext <8 x i8> %163 to <8 x i32>
  %165 = bitcast i8* %159 to <8 x i8>*
  %166 = load <8 x i8>, <8 x i8>* %165, align 1
  %167 = zext <8 x i8> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %167, %164
  %169 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %164
  %170 = bitcast i8* %160 to <8 x i8>*
  %171 = load <8 x i8>, <8 x i8>* %170, align 1
  %172 = zext <8 x i8> %171 to <8 x i32>
  %173 = mul nsw <8 x i32> %169, %172
  %174 = add nuw nsw <8 x i32> %168, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %175 = add nsw <8 x i32> %174, %173
  %176 = ashr <8 x i32> %175, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %177 = bitcast i8* %156 to <8 x i8>*
  %178 = load <8 x i8>, <8 x i8>* %177, align 1
  %179 = zext <8 x i8> %178 to <8 x i32>
  %180 = sub nsw <8 x i32> %176, %179
  %181 = icmp slt <8 x i32> %180, zeroinitializer
  %182 = sub nsw <8 x i32> zeroinitializer, %180
  %183 = select <8 x i1> %181, <8 x i32> %182, <8 x i32> %180
  %184 = shufflevector <8 x i32> %183, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %185 = add <8 x i32> %183, %184
  %186 = shufflevector <8 x i32> %185, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = add <8 x i32> %185, %186
  %188 = shufflevector <8 x i32> %187, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %189 = add <8 x i32> %187, %188
  %190 = extractelement <8 x i32> %189, i32 0
  %191 = add i32 %190, %157
  %192 = getelementptr inbounds i8, i8* %156, i64 %11
  %193 = getelementptr inbounds i8, i8* %159, i64 %12
  %194 = getelementptr inbounds i8, i8* %160, i64 8
  %195 = getelementptr inbounds i8, i8* %161, i64 %13
  %196 = add nuw nsw i32 %158, 1
  %197 = icmp eq i32 %196, 8
  br i1 %197, label %198, label %155

198:                                              ; preds = %155
  %199 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %191, i32* %199, align 4
  %200 = getelementptr inbounds i8*, i8** %2, i64 3
  %201 = load i8*, i8** %200, align 8
  br label %202

202:                                              ; preds = %202, %198
  %203 = phi i8* [ %0, %198 ], [ %239, %202 ]
  %204 = phi i32 [ 0, %198 ], [ %238, %202 ]
  %205 = phi i32 [ 0, %198 ], [ %243, %202 ]
  %206 = phi i8* [ %201, %198 ], [ %240, %202 ]
  %207 = phi i8* [ %4, %198 ], [ %241, %202 ]
  %208 = phi i8* [ %5, %198 ], [ %242, %202 ]
  %209 = bitcast i8* %208 to <8 x i8>*
  %210 = load <8 x i8>, <8 x i8>* %209, align 1
  %211 = zext <8 x i8> %210 to <8 x i32>
  %212 = bitcast i8* %206 to <8 x i8>*
  %213 = load <8 x i8>, <8 x i8>* %212, align 1
  %214 = zext <8 x i8> %213 to <8 x i32>
  %215 = mul nuw nsw <8 x i32> %214, %211
  %216 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %211
  %217 = bitcast i8* %207 to <8 x i8>*
  %218 = load <8 x i8>, <8 x i8>* %217, align 1
  %219 = zext <8 x i8> %218 to <8 x i32>
  %220 = mul nsw <8 x i32> %216, %219
  %221 = add nuw nsw <8 x i32> %215, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %222 = add nsw <8 x i32> %221, %220
  %223 = ashr <8 x i32> %222, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %224 = bitcast i8* %203 to <8 x i8>*
  %225 = load <8 x i8>, <8 x i8>* %224, align 1
  %226 = zext <8 x i8> %225 to <8 x i32>
  %227 = sub nsw <8 x i32> %223, %226
  %228 = icmp slt <8 x i32> %227, zeroinitializer
  %229 = sub nsw <8 x i32> zeroinitializer, %227
  %230 = select <8 x i1> %228, <8 x i32> %229, <8 x i32> %227
  %231 = shufflevector <8 x i32> %230, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %232 = add <8 x i32> %230, %231
  %233 = shufflevector <8 x i32> %232, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %234 = add <8 x i32> %232, %233
  %235 = shufflevector <8 x i32> %234, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %236 = add <8 x i32> %234, %235
  %237 = extractelement <8 x i32> %236, i32 0
  %238 = add i32 %237, %204
  %239 = getelementptr inbounds i8, i8* %203, i64 %11
  %240 = getelementptr inbounds i8, i8* %206, i64 %12
  %241 = getelementptr inbounds i8, i8* %207, i64 8
  %242 = getelementptr inbounds i8, i8* %208, i64 %13
  %243 = add nuw nsw i32 %205, 1
  %244 = icmp eq i32 %243, 8
  br i1 %244, label %245, label %202

245:                                              ; preds = %202
  %246 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %238, i32* %246, align 4
  br label %107

247:                                              ; preds = %247, %104
  %248 = phi i8* [ %0, %104 ], [ %284, %247 ]
  %249 = phi i32 [ 0, %104 ], [ %283, %247 ]
  %250 = phi i32 [ 0, %104 ], [ %288, %247 ]
  %251 = phi i8* [ %4, %104 ], [ %285, %247 ]
  %252 = phi i8* [ %106, %104 ], [ %286, %247 ]
  %253 = phi i8* [ %5, %104 ], [ %287, %247 ]
  %254 = bitcast i8* %253 to <8 x i8>*
  %255 = load <8 x i8>, <8 x i8>* %254, align 1
  %256 = zext <8 x i8> %255 to <8 x i32>
  %257 = bitcast i8* %251 to <8 x i8>*
  %258 = load <8 x i8>, <8 x i8>* %257, align 1
  %259 = zext <8 x i8> %258 to <8 x i32>
  %260 = mul nuw nsw <8 x i32> %259, %256
  %261 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %256
  %262 = bitcast i8* %252 to <8 x i8>*
  %263 = load <8 x i8>, <8 x i8>* %262, align 1
  %264 = zext <8 x i8> %263 to <8 x i32>
  %265 = mul nsw <8 x i32> %261, %264
  %266 = add nuw nsw <8 x i32> %260, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %267 = add nsw <8 x i32> %266, %265
  %268 = ashr <8 x i32> %267, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %269 = bitcast i8* %248 to <8 x i8>*
  %270 = load <8 x i8>, <8 x i8>* %269, align 1
  %271 = zext <8 x i8> %270 to <8 x i32>
  %272 = sub nsw <8 x i32> %268, %271
  %273 = icmp slt <8 x i32> %272, zeroinitializer
  %274 = sub nsw <8 x i32> zeroinitializer, %272
  %275 = select <8 x i1> %273, <8 x i32> %274, <8 x i32> %272
  %276 = shufflevector <8 x i32> %275, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %277 = add <8 x i32> %275, %276
  %278 = shufflevector <8 x i32> %277, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %279 = add <8 x i32> %277, %278
  %280 = shufflevector <8 x i32> %279, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = add <8 x i32> %279, %280
  %282 = extractelement <8 x i32> %281, i32 0
  %283 = add i32 %282, %249
  %284 = getelementptr inbounds i8, i8* %248, i64 %11
  %285 = getelementptr inbounds i8, i8* %251, i64 8
  %286 = getelementptr inbounds i8, i8* %252, i64 %12
  %287 = getelementptr inbounds i8, i8* %253, i64 %13
  %288 = add nuw nsw i32 %250, 1
  %289 = icmp eq i32 %288, 8
  br i1 %289, label %290, label %247

290:                                              ; preds = %247
  %291 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %283, i32* %291, align 4
  %292 = getelementptr inbounds i8*, i8** %2, i64 2
  %293 = load i8*, i8** %292, align 8
  br label %294

294:                                              ; preds = %294, %290
  %295 = phi i8* [ %0, %290 ], [ %331, %294 ]
  %296 = phi i32 [ 0, %290 ], [ %330, %294 ]
  %297 = phi i32 [ 0, %290 ], [ %335, %294 ]
  %298 = phi i8* [ %4, %290 ], [ %332, %294 ]
  %299 = phi i8* [ %293, %290 ], [ %333, %294 ]
  %300 = phi i8* [ %5, %290 ], [ %334, %294 ]
  %301 = bitcast i8* %300 to <8 x i8>*
  %302 = load <8 x i8>, <8 x i8>* %301, align 1
  %303 = zext <8 x i8> %302 to <8 x i32>
  %304 = bitcast i8* %298 to <8 x i8>*
  %305 = load <8 x i8>, <8 x i8>* %304, align 1
  %306 = zext <8 x i8> %305 to <8 x i32>
  %307 = mul nuw nsw <8 x i32> %306, %303
  %308 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %303
  %309 = bitcast i8* %299 to <8 x i8>*
  %310 = load <8 x i8>, <8 x i8>* %309, align 1
  %311 = zext <8 x i8> %310 to <8 x i32>
  %312 = mul nsw <8 x i32> %308, %311
  %313 = add nuw nsw <8 x i32> %307, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %314 = add nsw <8 x i32> %313, %312
  %315 = ashr <8 x i32> %314, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %316 = bitcast i8* %295 to <8 x i8>*
  %317 = load <8 x i8>, <8 x i8>* %316, align 1
  %318 = zext <8 x i8> %317 to <8 x i32>
  %319 = sub nsw <8 x i32> %315, %318
  %320 = icmp slt <8 x i32> %319, zeroinitializer
  %321 = sub nsw <8 x i32> zeroinitializer, %319
  %322 = select <8 x i1> %320, <8 x i32> %321, <8 x i32> %319
  %323 = shufflevector <8 x i32> %322, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %324 = add <8 x i32> %322, %323
  %325 = shufflevector <8 x i32> %324, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %326 = add <8 x i32> %324, %325
  %327 = shufflevector <8 x i32> %326, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %328 = add <8 x i32> %326, %327
  %329 = extractelement <8 x i32> %328, i32 0
  %330 = add i32 %329, %296
  %331 = getelementptr inbounds i8, i8* %295, i64 %11
  %332 = getelementptr inbounds i8, i8* %298, i64 8
  %333 = getelementptr inbounds i8, i8* %299, i64 %12
  %334 = getelementptr inbounds i8, i8* %300, i64 %13
  %335 = add nuw nsw i32 %297, 1
  %336 = icmp eq i32 %335, 8
  br i1 %336, label %337, label %294

337:                                              ; preds = %294
  %338 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %330, i32* %338, align 4
  %339 = getelementptr inbounds i8*, i8** %2, i64 3
  %340 = load i8*, i8** %339, align 8
  br label %341

341:                                              ; preds = %341, %337
  %342 = phi i8* [ %0, %337 ], [ %378, %341 ]
  %343 = phi i32 [ 0, %337 ], [ %377, %341 ]
  %344 = phi i32 [ 0, %337 ], [ %382, %341 ]
  %345 = phi i8* [ %4, %337 ], [ %379, %341 ]
  %346 = phi i8* [ %340, %337 ], [ %380, %341 ]
  %347 = phi i8* [ %5, %337 ], [ %381, %341 ]
  %348 = bitcast i8* %347 to <8 x i8>*
  %349 = load <8 x i8>, <8 x i8>* %348, align 1
  %350 = zext <8 x i8> %349 to <8 x i32>
  %351 = bitcast i8* %345 to <8 x i8>*
  %352 = load <8 x i8>, <8 x i8>* %351, align 1
  %353 = zext <8 x i8> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %353, %350
  %355 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %350
  %356 = bitcast i8* %346 to <8 x i8>*
  %357 = load <8 x i8>, <8 x i8>* %356, align 1
  %358 = zext <8 x i8> %357 to <8 x i32>
  %359 = mul nsw <8 x i32> %355, %358
  %360 = add nuw nsw <8 x i32> %354, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %361 = add nsw <8 x i32> %360, %359
  %362 = ashr <8 x i32> %361, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %363 = bitcast i8* %342 to <8 x i8>*
  %364 = load <8 x i8>, <8 x i8>* %363, align 1
  %365 = zext <8 x i8> %364 to <8 x i32>
  %366 = sub nsw <8 x i32> %362, %365
  %367 = icmp slt <8 x i32> %366, zeroinitializer
  %368 = sub nsw <8 x i32> zeroinitializer, %366
  %369 = select <8 x i1> %367, <8 x i32> %368, <8 x i32> %366
  %370 = shufflevector <8 x i32> %369, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %371 = add <8 x i32> %369, %370
  %372 = shufflevector <8 x i32> %371, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %373 = add <8 x i32> %371, %372
  %374 = shufflevector <8 x i32> %373, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %375 = add <8 x i32> %373, %374
  %376 = extractelement <8 x i32> %375, i32 0
  %377 = add i32 %376, %343
  %378 = getelementptr inbounds i8, i8* %342, i64 %11
  %379 = getelementptr inbounds i8, i8* %345, i64 8
  %380 = getelementptr inbounds i8, i8* %346, i64 %12
  %381 = getelementptr inbounds i8, i8* %347, i64 %13
  %382 = add nuw nsw i32 %344, 1
  %383 = icmp eq i32 %382, 8
  br i1 %383, label %384, label %341

384:                                              ; preds = %341
  %385 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %377, i32* %385, align 4
  br label %107
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad8x4_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = bitcast i8* %5 to <8 x i8>*
  %14 = load <8 x i8>, <8 x i8>* %13, align 1
  %15 = zext <8 x i8> %14 to <8 x i32>
  br i1 %9, label %16, label %145

16:                                               ; preds = %8
  %17 = bitcast i8* %2 to <8 x i8>*
  %18 = load <8 x i8>, <8 x i8>* %17, align 1
  %19 = zext <8 x i8> %18 to <8 x i32>
  %20 = mul nuw nsw <8 x i32> %19, %15
  %21 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %15
  %22 = bitcast i8* %4 to <8 x i8>*
  %23 = load <8 x i8>, <8 x i8>* %22, align 1
  %24 = zext <8 x i8> %23 to <8 x i32>
  %25 = mul nsw <8 x i32> %21, %24
  %26 = add nuw nsw <8 x i32> %20, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %27 = add nsw <8 x i32> %26, %25
  %28 = ashr <8 x i32> %27, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %29 = bitcast i8* %0 to <8 x i8>*
  %30 = load <8 x i8>, <8 x i8>* %29, align 1
  %31 = zext <8 x i8> %30 to <8 x i32>
  %32 = sub nsw <8 x i32> %28, %31
  %33 = icmp slt <8 x i32> %32, zeroinitializer
  %34 = sub nsw <8 x i32> zeroinitializer, %32
  %35 = select <8 x i1> %33, <8 x i32> %34, <8 x i32> %32
  %36 = shufflevector <8 x i32> %35, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = add <8 x i32> %35, %36
  %38 = shufflevector <8 x i32> %37, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = add <8 x i32> %37, %38
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = add <8 x i32> %39, %40
  %42 = extractelement <8 x i32> %41, i32 0
  %43 = getelementptr inbounds i8, i8* %0, i64 %10
  %44 = getelementptr inbounds i8, i8* %2, i64 %11
  %45 = getelementptr inbounds i8, i8* %4, i64 8
  %46 = getelementptr inbounds i8, i8* %5, i64 %12
  %47 = bitcast i8* %46 to <8 x i8>*
  %48 = load <8 x i8>, <8 x i8>* %47, align 1
  %49 = zext <8 x i8> %48 to <8 x i32>
  %50 = bitcast i8* %44 to <8 x i8>*
  %51 = load <8 x i8>, <8 x i8>* %50, align 1
  %52 = zext <8 x i8> %51 to <8 x i32>
  %53 = mul nuw nsw <8 x i32> %52, %49
  %54 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %49
  %55 = bitcast i8* %45 to <8 x i8>*
  %56 = load <8 x i8>, <8 x i8>* %55, align 1
  %57 = zext <8 x i8> %56 to <8 x i32>
  %58 = mul nsw <8 x i32> %54, %57
  %59 = add nuw nsw <8 x i32> %53, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %60 = add nsw <8 x i32> %59, %58
  %61 = ashr <8 x i32> %60, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %62 = bitcast i8* %43 to <8 x i8>*
  %63 = load <8 x i8>, <8 x i8>* %62, align 1
  %64 = zext <8 x i8> %63 to <8 x i32>
  %65 = sub nsw <8 x i32> %61, %64
  %66 = icmp slt <8 x i32> %65, zeroinitializer
  %67 = sub nsw <8 x i32> zeroinitializer, %65
  %68 = select <8 x i1> %66, <8 x i32> %67, <8 x i32> %65
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = add <8 x i32> %68, %69
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = add <8 x i32> %70, %71
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %74 = add <8 x i32> %72, %73
  %75 = extractelement <8 x i32> %74, i32 0
  %76 = add i32 %75, %42
  %77 = getelementptr inbounds i8, i8* %43, i64 %10
  %78 = getelementptr inbounds i8, i8* %44, i64 %11
  %79 = getelementptr inbounds i8, i8* %4, i64 16
  %80 = getelementptr inbounds i8, i8* %46, i64 %12
  %81 = bitcast i8* %80 to <8 x i8>*
  %82 = load <8 x i8>, <8 x i8>* %81, align 1
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = bitcast i8* %78 to <8 x i8>*
  %85 = load <8 x i8>, <8 x i8>* %84, align 1
  %86 = zext <8 x i8> %85 to <8 x i32>
  %87 = mul nuw nsw <8 x i32> %86, %83
  %88 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %83
  %89 = bitcast i8* %79 to <8 x i8>*
  %90 = load <8 x i8>, <8 x i8>* %89, align 1
  %91 = zext <8 x i8> %90 to <8 x i32>
  %92 = mul nsw <8 x i32> %88, %91
  %93 = add nuw nsw <8 x i32> %87, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %94 = add nsw <8 x i32> %93, %92
  %95 = ashr <8 x i32> %94, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %96 = bitcast i8* %77 to <8 x i8>*
  %97 = load <8 x i8>, <8 x i8>* %96, align 1
  %98 = zext <8 x i8> %97 to <8 x i32>
  %99 = sub nsw <8 x i32> %95, %98
  %100 = icmp slt <8 x i32> %99, zeroinitializer
  %101 = sub nsw <8 x i32> zeroinitializer, %99
  %102 = select <8 x i1> %100, <8 x i32> %101, <8 x i32> %99
  %103 = shufflevector <8 x i32> %102, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = add <8 x i32> %102, %103
  %105 = shufflevector <8 x i32> %104, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = add <8 x i32> %104, %105
  %107 = shufflevector <8 x i32> %106, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %108 = add <8 x i32> %106, %107
  %109 = extractelement <8 x i32> %108, i32 0
  %110 = add i32 %109, %76
  %111 = getelementptr inbounds i8, i8* %77, i64 %10
  %112 = getelementptr inbounds i8, i8* %78, i64 %11
  %113 = getelementptr inbounds i8, i8* %4, i64 24
  %114 = getelementptr inbounds i8, i8* %80, i64 %12
  %115 = bitcast i8* %114 to <8 x i8>*
  %116 = load <8 x i8>, <8 x i8>* %115, align 1
  %117 = zext <8 x i8> %116 to <8 x i32>
  %118 = bitcast i8* %112 to <8 x i8>*
  %119 = load <8 x i8>, <8 x i8>* %118, align 1
  %120 = zext <8 x i8> %119 to <8 x i32>
  %121 = mul nuw nsw <8 x i32> %120, %117
  %122 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %117
  %123 = bitcast i8* %113 to <8 x i8>*
  %124 = load <8 x i8>, <8 x i8>* %123, align 1
  %125 = zext <8 x i8> %124 to <8 x i32>
  %126 = mul nsw <8 x i32> %122, %125
  %127 = add nuw nsw <8 x i32> %121, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %128 = add nsw <8 x i32> %127, %126
  %129 = ashr <8 x i32> %128, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %130 = bitcast i8* %111 to <8 x i8>*
  %131 = load <8 x i8>, <8 x i8>* %130, align 1
  %132 = zext <8 x i8> %131 to <8 x i32>
  %133 = sub nsw <8 x i32> %129, %132
  %134 = icmp slt <8 x i32> %133, zeroinitializer
  %135 = sub nsw <8 x i32> zeroinitializer, %133
  %136 = select <8 x i1> %134, <8 x i32> %135, <8 x i32> %133
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %138 = add <8 x i32> %136, %137
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = add <8 x i32> %138, %139
  %141 = shufflevector <8 x i32> %140, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = add <8 x i32> %140, %141
  %143 = extractelement <8 x i32> %142, i32 0
  %144 = add i32 %143, %110
  br label %274

145:                                              ; preds = %8
  %146 = bitcast i8* %4 to <8 x i8>*
  %147 = load <8 x i8>, <8 x i8>* %146, align 1
  %148 = zext <8 x i8> %147 to <8 x i32>
  %149 = mul nuw nsw <8 x i32> %148, %15
  %150 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %15
  %151 = bitcast i8* %2 to <8 x i8>*
  %152 = load <8 x i8>, <8 x i8>* %151, align 1
  %153 = zext <8 x i8> %152 to <8 x i32>
  %154 = mul nsw <8 x i32> %150, %153
  %155 = add nuw nsw <8 x i32> %149, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %156 = add nsw <8 x i32> %155, %154
  %157 = ashr <8 x i32> %156, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %158 = bitcast i8* %0 to <8 x i8>*
  %159 = load <8 x i8>, <8 x i8>* %158, align 1
  %160 = zext <8 x i8> %159 to <8 x i32>
  %161 = sub nsw <8 x i32> %157, %160
  %162 = icmp slt <8 x i32> %161, zeroinitializer
  %163 = sub nsw <8 x i32> zeroinitializer, %161
  %164 = select <8 x i1> %162, <8 x i32> %163, <8 x i32> %161
  %165 = shufflevector <8 x i32> %164, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %166 = add <8 x i32> %164, %165
  %167 = shufflevector <8 x i32> %166, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %168 = add <8 x i32> %166, %167
  %169 = shufflevector <8 x i32> %168, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = add <8 x i32> %168, %169
  %171 = extractelement <8 x i32> %170, i32 0
  %172 = getelementptr inbounds i8, i8* %0, i64 %10
  %173 = getelementptr inbounds i8, i8* %4, i64 8
  %174 = getelementptr inbounds i8, i8* %2, i64 %11
  %175 = getelementptr inbounds i8, i8* %5, i64 %12
  %176 = bitcast i8* %175 to <8 x i8>*
  %177 = load <8 x i8>, <8 x i8>* %176, align 1
  %178 = zext <8 x i8> %177 to <8 x i32>
  %179 = bitcast i8* %173 to <8 x i8>*
  %180 = load <8 x i8>, <8 x i8>* %179, align 1
  %181 = zext <8 x i8> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %181, %178
  %183 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %178
  %184 = bitcast i8* %174 to <8 x i8>*
  %185 = load <8 x i8>, <8 x i8>* %184, align 1
  %186 = zext <8 x i8> %185 to <8 x i32>
  %187 = mul nsw <8 x i32> %183, %186
  %188 = add nuw nsw <8 x i32> %182, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %189 = add nsw <8 x i32> %188, %187
  %190 = ashr <8 x i32> %189, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %191 = bitcast i8* %172 to <8 x i8>*
  %192 = load <8 x i8>, <8 x i8>* %191, align 1
  %193 = zext <8 x i8> %192 to <8 x i32>
  %194 = sub nsw <8 x i32> %190, %193
  %195 = icmp slt <8 x i32> %194, zeroinitializer
  %196 = sub nsw <8 x i32> zeroinitializer, %194
  %197 = select <8 x i1> %195, <8 x i32> %196, <8 x i32> %194
  %198 = shufflevector <8 x i32> %197, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %199 = add <8 x i32> %197, %198
  %200 = shufflevector <8 x i32> %199, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %201 = add <8 x i32> %199, %200
  %202 = shufflevector <8 x i32> %201, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %203 = add <8 x i32> %201, %202
  %204 = extractelement <8 x i32> %203, i32 0
  %205 = add i32 %204, %171
  %206 = getelementptr inbounds i8, i8* %172, i64 %10
  %207 = getelementptr inbounds i8, i8* %4, i64 16
  %208 = getelementptr inbounds i8, i8* %174, i64 %11
  %209 = getelementptr inbounds i8, i8* %175, i64 %12
  %210 = bitcast i8* %209 to <8 x i8>*
  %211 = load <8 x i8>, <8 x i8>* %210, align 1
  %212 = zext <8 x i8> %211 to <8 x i32>
  %213 = bitcast i8* %207 to <8 x i8>*
  %214 = load <8 x i8>, <8 x i8>* %213, align 1
  %215 = zext <8 x i8> %214 to <8 x i32>
  %216 = mul nuw nsw <8 x i32> %215, %212
  %217 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %212
  %218 = bitcast i8* %208 to <8 x i8>*
  %219 = load <8 x i8>, <8 x i8>* %218, align 1
  %220 = zext <8 x i8> %219 to <8 x i32>
  %221 = mul nsw <8 x i32> %217, %220
  %222 = add nuw nsw <8 x i32> %216, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %223 = add nsw <8 x i32> %222, %221
  %224 = ashr <8 x i32> %223, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %225 = bitcast i8* %206 to <8 x i8>*
  %226 = load <8 x i8>, <8 x i8>* %225, align 1
  %227 = zext <8 x i8> %226 to <8 x i32>
  %228 = sub nsw <8 x i32> %224, %227
  %229 = icmp slt <8 x i32> %228, zeroinitializer
  %230 = sub nsw <8 x i32> zeroinitializer, %228
  %231 = select <8 x i1> %229, <8 x i32> %230, <8 x i32> %228
  %232 = shufflevector <8 x i32> %231, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %233 = add <8 x i32> %231, %232
  %234 = shufflevector <8 x i32> %233, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %235 = add <8 x i32> %233, %234
  %236 = shufflevector <8 x i32> %235, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %237 = add <8 x i32> %235, %236
  %238 = extractelement <8 x i32> %237, i32 0
  %239 = add i32 %238, %205
  %240 = getelementptr inbounds i8, i8* %206, i64 %10
  %241 = getelementptr inbounds i8, i8* %4, i64 24
  %242 = getelementptr inbounds i8, i8* %208, i64 %11
  %243 = getelementptr inbounds i8, i8* %209, i64 %12
  %244 = bitcast i8* %243 to <8 x i8>*
  %245 = load <8 x i8>, <8 x i8>* %244, align 1
  %246 = zext <8 x i8> %245 to <8 x i32>
  %247 = bitcast i8* %241 to <8 x i8>*
  %248 = load <8 x i8>, <8 x i8>* %247, align 1
  %249 = zext <8 x i8> %248 to <8 x i32>
  %250 = mul nuw nsw <8 x i32> %249, %246
  %251 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %246
  %252 = bitcast i8* %242 to <8 x i8>*
  %253 = load <8 x i8>, <8 x i8>* %252, align 1
  %254 = zext <8 x i8> %253 to <8 x i32>
  %255 = mul nsw <8 x i32> %251, %254
  %256 = add nuw nsw <8 x i32> %250, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %257 = add nsw <8 x i32> %256, %255
  %258 = ashr <8 x i32> %257, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %259 = bitcast i8* %240 to <8 x i8>*
  %260 = load <8 x i8>, <8 x i8>* %259, align 1
  %261 = zext <8 x i8> %260 to <8 x i32>
  %262 = sub nsw <8 x i32> %258, %261
  %263 = icmp slt <8 x i32> %262, zeroinitializer
  %264 = sub nsw <8 x i32> zeroinitializer, %262
  %265 = select <8 x i1> %263, <8 x i32> %264, <8 x i32> %262
  %266 = shufflevector <8 x i32> %265, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %267 = add <8 x i32> %265, %266
  %268 = shufflevector <8 x i32> %267, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %269 = add <8 x i32> %267, %268
  %270 = shufflevector <8 x i32> %269, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %271 = add <8 x i32> %269, %270
  %272 = extractelement <8 x i32> %271, i32 0
  %273 = add i32 %272, %239
  br label %274

274:                                              ; preds = %145, %16
  %275 = phi i32 [ %144, %16 ], [ %273, %145 ]
  ret i32 %275
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad8x4x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = bitcast i8* %5 to <8 x i8>*
  %15 = bitcast i8* %4 to <8 x i8>*
  %16 = bitcast i8* %0 to <8 x i8>*
  %17 = getelementptr inbounds i8, i8* %0, i64 %11
  %18 = getelementptr inbounds i8, i8* %4, i64 8
  %19 = getelementptr inbounds i8, i8* %5, i64 %13
  %20 = bitcast i8* %19 to <8 x i8>*
  %21 = bitcast i8* %18 to <8 x i8>*
  %22 = bitcast i8* %17 to <8 x i8>*
  %23 = getelementptr inbounds i8, i8* %17, i64 %11
  %24 = getelementptr inbounds i8, i8* %4, i64 16
  %25 = getelementptr inbounds i8, i8* %19, i64 %13
  %26 = bitcast i8* %25 to <8 x i8>*
  %27 = bitcast i8* %24 to <8 x i8>*
  %28 = bitcast i8* %23 to <8 x i8>*
  %29 = getelementptr inbounds i8, i8* %23, i64 %11
  %30 = getelementptr inbounds i8, i8* %4, i64 24
  %31 = getelementptr inbounds i8, i8* %25, i64 %13
  %32 = bitcast i8* %31 to <8 x i8>*
  %33 = bitcast i8* %30 to <8 x i8>*
  %34 = bitcast i8* %29 to <8 x i8>*
  br i1 %10, label %35, label %152

35:                                               ; preds = %9, %35
  %36 = phi i64 [ %150, %35 ], [ 0, %9 ]
  %37 = getelementptr inbounds i8*, i8** %2, i64 %36
  %38 = load i8*, i8** %37, align 8
  %39 = load <8 x i8>, <8 x i8>* %14, align 1
  %40 = zext <8 x i8> %39 to <8 x i32>
  %41 = bitcast i8* %38 to <8 x i8>*
  %42 = load <8 x i8>, <8 x i8>* %41, align 1
  %43 = zext <8 x i8> %42 to <8 x i32>
  %44 = mul nuw nsw <8 x i32> %43, %40
  %45 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %40
  %46 = load <8 x i8>, <8 x i8>* %15, align 1
  %47 = zext <8 x i8> %46 to <8 x i32>
  %48 = mul nsw <8 x i32> %45, %47
  %49 = add nuw nsw <8 x i32> %44, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = add nsw <8 x i32> %49, %48
  %51 = ashr <8 x i32> %50, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %52 = load <8 x i8>, <8 x i8>* %16, align 1
  %53 = zext <8 x i8> %52 to <8 x i32>
  %54 = sub nsw <8 x i32> %51, %53
  %55 = icmp slt <8 x i32> %54, zeroinitializer
  %56 = sub nsw <8 x i32> zeroinitializer, %54
  %57 = select <8 x i1> %55, <8 x i32> %56, <8 x i32> %54
  %58 = shufflevector <8 x i32> %57, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = add <8 x i32> %57, %58
  %60 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add <8 x i32> %59, %60
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = add <8 x i32> %61, %62
  %64 = extractelement <8 x i32> %63, i32 0
  %65 = getelementptr inbounds i8, i8* %38, i64 %12
  %66 = load <8 x i8>, <8 x i8>* %20, align 1
  %67 = zext <8 x i8> %66 to <8 x i32>
  %68 = bitcast i8* %65 to <8 x i8>*
  %69 = load <8 x i8>, <8 x i8>* %68, align 1
  %70 = zext <8 x i8> %69 to <8 x i32>
  %71 = mul nuw nsw <8 x i32> %70, %67
  %72 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %67
  %73 = load <8 x i8>, <8 x i8>* %21, align 1
  %74 = zext <8 x i8> %73 to <8 x i32>
  %75 = mul nsw <8 x i32> %72, %74
  %76 = add nuw nsw <8 x i32> %71, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %77 = add nsw <8 x i32> %76, %75
  %78 = ashr <8 x i32> %77, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %79 = load <8 x i8>, <8 x i8>* %22, align 1
  %80 = zext <8 x i8> %79 to <8 x i32>
  %81 = sub nsw <8 x i32> %78, %80
  %82 = icmp slt <8 x i32> %81, zeroinitializer
  %83 = sub nsw <8 x i32> zeroinitializer, %81
  %84 = select <8 x i1> %82, <8 x i32> %83, <8 x i32> %81
  %85 = shufflevector <8 x i32> %84, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = add <8 x i32> %84, %85
  %87 = shufflevector <8 x i32> %86, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = add <8 x i32> %86, %87
  %89 = shufflevector <8 x i32> %88, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add <8 x i32> %88, %89
  %91 = extractelement <8 x i32> %90, i32 0
  %92 = add i32 %91, %64
  %93 = getelementptr inbounds i8, i8* %65, i64 %12
  %94 = load <8 x i8>, <8 x i8>* %26, align 1
  %95 = zext <8 x i8> %94 to <8 x i32>
  %96 = bitcast i8* %93 to <8 x i8>*
  %97 = load <8 x i8>, <8 x i8>* %96, align 1
  %98 = zext <8 x i8> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %98, %95
  %100 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %95
  %101 = load <8 x i8>, <8 x i8>* %27, align 1
  %102 = zext <8 x i8> %101 to <8 x i32>
  %103 = mul nsw <8 x i32> %100, %102
  %104 = add nuw nsw <8 x i32> %99, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %105 = add nsw <8 x i32> %104, %103
  %106 = ashr <8 x i32> %105, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %107 = load <8 x i8>, <8 x i8>* %28, align 1
  %108 = zext <8 x i8> %107 to <8 x i32>
  %109 = sub nsw <8 x i32> %106, %108
  %110 = icmp slt <8 x i32> %109, zeroinitializer
  %111 = sub nsw <8 x i32> zeroinitializer, %109
  %112 = select <8 x i1> %110, <8 x i32> %111, <8 x i32> %109
  %113 = shufflevector <8 x i32> %112, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = add <8 x i32> %112, %113
  %115 = shufflevector <8 x i32> %114, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %116 = add <8 x i32> %114, %115
  %117 = shufflevector <8 x i32> %116, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = add <8 x i32> %116, %117
  %119 = extractelement <8 x i32> %118, i32 0
  %120 = add i32 %119, %92
  %121 = getelementptr inbounds i8, i8* %93, i64 %12
  %122 = load <8 x i8>, <8 x i8>* %32, align 1
  %123 = zext <8 x i8> %122 to <8 x i32>
  %124 = bitcast i8* %121 to <8 x i8>*
  %125 = load <8 x i8>, <8 x i8>* %124, align 1
  %126 = zext <8 x i8> %125 to <8 x i32>
  %127 = mul nuw nsw <8 x i32> %126, %123
  %128 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %123
  %129 = load <8 x i8>, <8 x i8>* %33, align 1
  %130 = zext <8 x i8> %129 to <8 x i32>
  %131 = mul nsw <8 x i32> %128, %130
  %132 = add nuw nsw <8 x i32> %127, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %133 = add nsw <8 x i32> %132, %131
  %134 = ashr <8 x i32> %133, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %135 = load <8 x i8>, <8 x i8>* %34, align 1
  %136 = zext <8 x i8> %135 to <8 x i32>
  %137 = sub nsw <8 x i32> %134, %136
  %138 = icmp slt <8 x i32> %137, zeroinitializer
  %139 = sub nsw <8 x i32> zeroinitializer, %137
  %140 = select <8 x i1> %138, <8 x i32> %139, <8 x i32> %137
  %141 = shufflevector <8 x i32> %140, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = add <8 x i32> %140, %141
  %143 = shufflevector <8 x i32> %142, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = add <8 x i32> %142, %143
  %145 = shufflevector <8 x i32> %144, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %146 = add <8 x i32> %144, %145
  %147 = extractelement <8 x i32> %146, i32 0
  %148 = add i32 %147, %120
  %149 = getelementptr inbounds i32, i32* %8, i64 %36
  store i32 %148, i32* %149, align 4
  %150 = add nuw nsw i64 %36, 1
  %151 = icmp eq i64 %150, 4
  br i1 %151, label %269, label %35

152:                                              ; preds = %9, %152
  %153 = phi i64 [ %267, %152 ], [ 0, %9 ]
  %154 = getelementptr inbounds i8*, i8** %2, i64 %153
  %155 = load i8*, i8** %154, align 8
  %156 = load <8 x i8>, <8 x i8>* %14, align 1
  %157 = zext <8 x i8> %156 to <8 x i32>
  %158 = load <8 x i8>, <8 x i8>* %15, align 1
  %159 = zext <8 x i8> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %159, %157
  %161 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %157
  %162 = bitcast i8* %155 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1
  %164 = zext <8 x i8> %163 to <8 x i32>
  %165 = mul nsw <8 x i32> %161, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %167 = add nsw <8 x i32> %166, %165
  %168 = ashr <8 x i32> %167, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %169 = load <8 x i8>, <8 x i8>* %16, align 1
  %170 = zext <8 x i8> %169 to <8 x i32>
  %171 = sub nsw <8 x i32> %168, %170
  %172 = icmp slt <8 x i32> %171, zeroinitializer
  %173 = sub nsw <8 x i32> zeroinitializer, %171
  %174 = select <8 x i1> %172, <8 x i32> %173, <8 x i32> %171
  %175 = shufflevector <8 x i32> %174, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %176 = add <8 x i32> %174, %175
  %177 = shufflevector <8 x i32> %176, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %178 = add <8 x i32> %176, %177
  %179 = shufflevector <8 x i32> %178, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %180 = add <8 x i32> %178, %179
  %181 = extractelement <8 x i32> %180, i32 0
  %182 = getelementptr inbounds i8, i8* %155, i64 %12
  %183 = load <8 x i8>, <8 x i8>* %20, align 1
  %184 = zext <8 x i8> %183 to <8 x i32>
  %185 = load <8 x i8>, <8 x i8>* %21, align 1
  %186 = zext <8 x i8> %185 to <8 x i32>
  %187 = mul nuw nsw <8 x i32> %186, %184
  %188 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %184
  %189 = bitcast i8* %182 to <8 x i8>*
  %190 = load <8 x i8>, <8 x i8>* %189, align 1
  %191 = zext <8 x i8> %190 to <8 x i32>
  %192 = mul nsw <8 x i32> %188, %191
  %193 = add nuw nsw <8 x i32> %187, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %194 = add nsw <8 x i32> %193, %192
  %195 = ashr <8 x i32> %194, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %196 = load <8 x i8>, <8 x i8>* %22, align 1
  %197 = zext <8 x i8> %196 to <8 x i32>
  %198 = sub nsw <8 x i32> %195, %197
  %199 = icmp slt <8 x i32> %198, zeroinitializer
  %200 = sub nsw <8 x i32> zeroinitializer, %198
  %201 = select <8 x i1> %199, <8 x i32> %200, <8 x i32> %198
  %202 = shufflevector <8 x i32> %201, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %203 = add <8 x i32> %201, %202
  %204 = shufflevector <8 x i32> %203, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = add <8 x i32> %203, %204
  %206 = shufflevector <8 x i32> %205, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %207 = add <8 x i32> %205, %206
  %208 = extractelement <8 x i32> %207, i32 0
  %209 = add i32 %208, %181
  %210 = getelementptr inbounds i8, i8* %182, i64 %12
  %211 = load <8 x i8>, <8 x i8>* %26, align 1
  %212 = zext <8 x i8> %211 to <8 x i32>
  %213 = load <8 x i8>, <8 x i8>* %27, align 1
  %214 = zext <8 x i8> %213 to <8 x i32>
  %215 = mul nuw nsw <8 x i32> %214, %212
  %216 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %212
  %217 = bitcast i8* %210 to <8 x i8>*
  %218 = load <8 x i8>, <8 x i8>* %217, align 1
  %219 = zext <8 x i8> %218 to <8 x i32>
  %220 = mul nsw <8 x i32> %216, %219
  %221 = add nuw nsw <8 x i32> %215, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %222 = add nsw <8 x i32> %221, %220
  %223 = ashr <8 x i32> %222, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %224 = load <8 x i8>, <8 x i8>* %28, align 1
  %225 = zext <8 x i8> %224 to <8 x i32>
  %226 = sub nsw <8 x i32> %223, %225
  %227 = icmp slt <8 x i32> %226, zeroinitializer
  %228 = sub nsw <8 x i32> zeroinitializer, %226
  %229 = select <8 x i1> %227, <8 x i32> %228, <8 x i32> %226
  %230 = shufflevector <8 x i32> %229, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %231 = add <8 x i32> %229, %230
  %232 = shufflevector <8 x i32> %231, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %233 = add <8 x i32> %231, %232
  %234 = shufflevector <8 x i32> %233, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %235 = add <8 x i32> %233, %234
  %236 = extractelement <8 x i32> %235, i32 0
  %237 = add i32 %236, %209
  %238 = getelementptr inbounds i8, i8* %210, i64 %12
  %239 = load <8 x i8>, <8 x i8>* %32, align 1
  %240 = zext <8 x i8> %239 to <8 x i32>
  %241 = load <8 x i8>, <8 x i8>* %33, align 1
  %242 = zext <8 x i8> %241 to <8 x i32>
  %243 = mul nuw nsw <8 x i32> %242, %240
  %244 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %240
  %245 = bitcast i8* %238 to <8 x i8>*
  %246 = load <8 x i8>, <8 x i8>* %245, align 1
  %247 = zext <8 x i8> %246 to <8 x i32>
  %248 = mul nsw <8 x i32> %244, %247
  %249 = add nuw nsw <8 x i32> %243, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %250 = add nsw <8 x i32> %249, %248
  %251 = ashr <8 x i32> %250, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %252 = load <8 x i8>, <8 x i8>* %34, align 1
  %253 = zext <8 x i8> %252 to <8 x i32>
  %254 = sub nsw <8 x i32> %251, %253
  %255 = icmp slt <8 x i32> %254, zeroinitializer
  %256 = sub nsw <8 x i32> zeroinitializer, %254
  %257 = select <8 x i1> %255, <8 x i32> %256, <8 x i32> %254
  %258 = shufflevector <8 x i32> %257, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %259 = add <8 x i32> %257, %258
  %260 = shufflevector <8 x i32> %259, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %261 = add <8 x i32> %259, %260
  %262 = shufflevector <8 x i32> %261, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %263 = add <8 x i32> %261, %262
  %264 = extractelement <8 x i32> %263, i32 0
  %265 = add i32 %264, %237
  %266 = getelementptr inbounds i32, i32* %8, i64 %153
  store i32 %265, i32* %266, align 4
  %267 = add nuw nsw i64 %153, 1
  %268 = icmp eq i64 %267, 4
  br i1 %268, label %269, label %152

269:                                              ; preds = %152, %35
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad4x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %54

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %48, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %47, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %52, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %49, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %50, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %51, %13 ], [ %5, %8 ]
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = bitcast i8* %17 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = mul nuw nsw <4 x i32> %25, %22
  %27 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %22
  %28 = bitcast i8* %18 to <4 x i8>*
  %29 = load <4 x i8>, <4 x i8>* %28, align 1
  %30 = zext <4 x i8> %29 to <4 x i32>
  %31 = mul nsw <4 x i32> %27, %30
  %32 = add nuw nsw <4 x i32> %26, <i32 32, i32 32, i32 32, i32 32>
  %33 = add nsw <4 x i32> %32, %31
  %34 = ashr <4 x i32> %33, <i32 6, i32 6, i32 6, i32 6>
  %35 = bitcast i8* %14 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = sub nsw <4 x i32> %34, %37
  %39 = icmp slt <4 x i32> %38, zeroinitializer
  %40 = sub nsw <4 x i32> zeroinitializer, %38
  %41 = select <4 x i1> %39, <4 x i32> %40, <4 x i32> %38
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %43 = add <4 x i32> %41, %42
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %45 = add <4 x i32> %43, %44
  %46 = extractelement <4 x i32> %45, i32 0
  %47 = add i32 %46, %15
  %48 = getelementptr inbounds i8, i8* %14, i64 %10
  %49 = getelementptr inbounds i8, i8* %17, i64 %11
  %50 = getelementptr inbounds i8, i8* %18, i64 4
  %51 = getelementptr inbounds i8, i8* %19, i64 %12
  %52 = add nuw nsw i32 %16, 1
  %53 = icmp eq i32 %52, 8
  br i1 %53, label %95, label %13

54:                                               ; preds = %8, %54
  %55 = phi i8* [ %89, %54 ], [ %0, %8 ]
  %56 = phi i32 [ %88, %54 ], [ 0, %8 ]
  %57 = phi i32 [ %93, %54 ], [ 0, %8 ]
  %58 = phi i8* [ %90, %54 ], [ %4, %8 ]
  %59 = phi i8* [ %91, %54 ], [ %2, %8 ]
  %60 = phi i8* [ %92, %54 ], [ %5, %8 ]
  %61 = bitcast i8* %60 to <4 x i8>*
  %62 = load <4 x i8>, <4 x i8>* %61, align 1
  %63 = zext <4 x i8> %62 to <4 x i32>
  %64 = bitcast i8* %58 to <4 x i8>*
  %65 = load <4 x i8>, <4 x i8>* %64, align 1
  %66 = zext <4 x i8> %65 to <4 x i32>
  %67 = mul nuw nsw <4 x i32> %66, %63
  %68 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %63
  %69 = bitcast i8* %59 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = zext <4 x i8> %70 to <4 x i32>
  %72 = mul nsw <4 x i32> %68, %71
  %73 = add nuw nsw <4 x i32> %67, <i32 32, i32 32, i32 32, i32 32>
  %74 = add nsw <4 x i32> %73, %72
  %75 = ashr <4 x i32> %74, <i32 6, i32 6, i32 6, i32 6>
  %76 = bitcast i8* %55 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = sub nsw <4 x i32> %75, %78
  %80 = icmp slt <4 x i32> %79, zeroinitializer
  %81 = sub nsw <4 x i32> zeroinitializer, %79
  %82 = select <4 x i1> %80, <4 x i32> %81, <4 x i32> %79
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %84 = add <4 x i32> %82, %83
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = add i32 %87, %56
  %89 = getelementptr inbounds i8, i8* %55, i64 %10
  %90 = getelementptr inbounds i8, i8* %58, i64 4
  %91 = getelementptr inbounds i8, i8* %59, i64 %11
  %92 = getelementptr inbounds i8, i8* %60, i64 %12
  %93 = add nuw nsw i32 %57, 1
  %94 = icmp eq i32 %93, 8
  br i1 %94, label %95, label %54

95:                                               ; preds = %54, %13
  %96 = phi i32 [ %47, %13 ], [ %88, %54 ]
  ret i32 %96
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad4x8x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %59

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %50, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %49, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %54, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %51, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %52, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %53, %15 ], [ %5, %9 ]
  %22 = bitcast i8* %21 to <4 x i8>*
  %23 = load <4 x i8>, <4 x i8>* %22, align 1
  %24 = zext <4 x i8> %23 to <4 x i32>
  %25 = bitcast i8* %19 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = mul nuw nsw <4 x i32> %27, %24
  %29 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %24
  %30 = bitcast i8* %20 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = mul nsw <4 x i32> %29, %32
  %34 = add nuw nsw <4 x i32> %28, <i32 32, i32 32, i32 32, i32 32>
  %35 = add nsw <4 x i32> %34, %33
  %36 = ashr <4 x i32> %35, <i32 6, i32 6, i32 6, i32 6>
  %37 = bitcast i8* %16 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %38 to <4 x i32>
  %40 = sub nsw <4 x i32> %36, %39
  %41 = icmp slt <4 x i32> %40, zeroinitializer
  %42 = sub nsw <4 x i32> zeroinitializer, %40
  %43 = select <4 x i1> %41, <4 x i32> %42, <4 x i32> %40
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %45 = add <4 x i32> %43, %44
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %47 = add <4 x i32> %45, %46
  %48 = extractelement <4 x i32> %47, i32 0
  %49 = add i32 %48, %17
  %50 = getelementptr inbounds i8, i8* %16, i64 %11
  %51 = getelementptr inbounds i8, i8* %19, i64 %12
  %52 = getelementptr inbounds i8, i8* %20, i64 4
  %53 = getelementptr inbounds i8, i8* %21, i64 %13
  %54 = add nuw nsw i32 %18, 1
  %55 = icmp eq i32 %54, 8
  br i1 %55, label %56, label %15

56:                                               ; preds = %15
  store i32 %49, i32* %8, align 4
  %57 = getelementptr inbounds i8*, i8** %2, i64 1
  %58 = load i8*, i8** %57, align 8
  br label %104

59:                                               ; preds = %9, %59
  %60 = phi i8* [ %94, %59 ], [ %0, %9 ]
  %61 = phi i32 [ %93, %59 ], [ 0, %9 ]
  %62 = phi i32 [ %98, %59 ], [ 0, %9 ]
  %63 = phi i8* [ %95, %59 ], [ %4, %9 ]
  %64 = phi i8* [ %96, %59 ], [ %14, %9 ]
  %65 = phi i8* [ %97, %59 ], [ %5, %9 ]
  %66 = bitcast i8* %65 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1
  %68 = zext <4 x i8> %67 to <4 x i32>
  %69 = bitcast i8* %63 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = zext <4 x i8> %70 to <4 x i32>
  %72 = mul nuw nsw <4 x i32> %71, %68
  %73 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %68
  %74 = bitcast i8* %64 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = mul nsw <4 x i32> %73, %76
  %78 = add nuw nsw <4 x i32> %72, <i32 32, i32 32, i32 32, i32 32>
  %79 = add nsw <4 x i32> %78, %77
  %80 = ashr <4 x i32> %79, <i32 6, i32 6, i32 6, i32 6>
  %81 = bitcast i8* %60 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 1
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = sub nsw <4 x i32> %80, %83
  %85 = icmp slt <4 x i32> %84, zeroinitializer
  %86 = sub nsw <4 x i32> zeroinitializer, %84
  %87 = select <4 x i1> %85, <4 x i32> %86, <4 x i32> %84
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %89 = add <4 x i32> %87, %88
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %91 = add <4 x i32> %89, %90
  %92 = extractelement <4 x i32> %91, i32 0
  %93 = add i32 %92, %61
  %94 = getelementptr inbounds i8, i8* %60, i64 %11
  %95 = getelementptr inbounds i8, i8* %63, i64 4
  %96 = getelementptr inbounds i8, i8* %64, i64 %12
  %97 = getelementptr inbounds i8, i8* %65, i64 %13
  %98 = add nuw nsw i32 %62, 1
  %99 = icmp eq i32 %98, 8
  br i1 %99, label %100, label %59

100:                                              ; preds = %59
  store i32 %93, i32* %8, align 4
  %101 = getelementptr inbounds i8*, i8** %2, i64 1
  %102 = load i8*, i8** %101, align 8
  br label %237

103:                                              ; preds = %368, %235
  ret void

104:                                              ; preds = %104, %56
  %105 = phi i8* [ %0, %56 ], [ %139, %104 ]
  %106 = phi i32 [ 0, %56 ], [ %138, %104 ]
  %107 = phi i32 [ 0, %56 ], [ %143, %104 ]
  %108 = phi i8* [ %58, %56 ], [ %140, %104 ]
  %109 = phi i8* [ %4, %56 ], [ %141, %104 ]
  %110 = phi i8* [ %5, %56 ], [ %142, %104 ]
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = bitcast i8* %108 to <4 x i8>*
  %115 = load <4 x i8>, <4 x i8>* %114, align 1
  %116 = zext <4 x i8> %115 to <4 x i32>
  %117 = mul nuw nsw <4 x i32> %116, %113
  %118 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %113
  %119 = bitcast i8* %109 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = mul nsw <4 x i32> %118, %121
  %123 = add nuw nsw <4 x i32> %117, <i32 32, i32 32, i32 32, i32 32>
  %124 = add nsw <4 x i32> %123, %122
  %125 = ashr <4 x i32> %124, <i32 6, i32 6, i32 6, i32 6>
  %126 = bitcast i8* %105 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1
  %128 = zext <4 x i8> %127 to <4 x i32>
  %129 = sub nsw <4 x i32> %125, %128
  %130 = icmp slt <4 x i32> %129, zeroinitializer
  %131 = sub nsw <4 x i32> zeroinitializer, %129
  %132 = select <4 x i1> %130, <4 x i32> %131, <4 x i32> %129
  %133 = shufflevector <4 x i32> %132, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %134 = add <4 x i32> %132, %133
  %135 = shufflevector <4 x i32> %134, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %136 = add <4 x i32> %134, %135
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = add i32 %137, %106
  %139 = getelementptr inbounds i8, i8* %105, i64 %11
  %140 = getelementptr inbounds i8, i8* %108, i64 %12
  %141 = getelementptr inbounds i8, i8* %109, i64 4
  %142 = getelementptr inbounds i8, i8* %110, i64 %13
  %143 = add nuw nsw i32 %107, 1
  %144 = icmp eq i32 %143, 8
  br i1 %144, label %145, label %104

145:                                              ; preds = %104
  %146 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %138, i32* %146, align 4
  %147 = getelementptr inbounds i8*, i8** %2, i64 2
  %148 = load i8*, i8** %147, align 8
  br label %149

149:                                              ; preds = %149, %145
  %150 = phi i8* [ %0, %145 ], [ %184, %149 ]
  %151 = phi i32 [ 0, %145 ], [ %183, %149 ]
  %152 = phi i32 [ 0, %145 ], [ %188, %149 ]
  %153 = phi i8* [ %148, %145 ], [ %185, %149 ]
  %154 = phi i8* [ %4, %145 ], [ %186, %149 ]
  %155 = phi i8* [ %5, %145 ], [ %187, %149 ]
  %156 = bitcast i8* %155 to <4 x i8>*
  %157 = load <4 x i8>, <4 x i8>* %156, align 1
  %158 = zext <4 x i8> %157 to <4 x i32>
  %159 = bitcast i8* %153 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = mul nuw nsw <4 x i32> %161, %158
  %163 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %158
  %164 = bitcast i8* %154 to <4 x i8>*
  %165 = load <4 x i8>, <4 x i8>* %164, align 1
  %166 = zext <4 x i8> %165 to <4 x i32>
  %167 = mul nsw <4 x i32> %163, %166
  %168 = add nuw nsw <4 x i32> %162, <i32 32, i32 32, i32 32, i32 32>
  %169 = add nsw <4 x i32> %168, %167
  %170 = ashr <4 x i32> %169, <i32 6, i32 6, i32 6, i32 6>
  %171 = bitcast i8* %150 to <4 x i8>*
  %172 = load <4 x i8>, <4 x i8>* %171, align 1
  %173 = zext <4 x i8> %172 to <4 x i32>
  %174 = sub nsw <4 x i32> %170, %173
  %175 = icmp slt <4 x i32> %174, zeroinitializer
  %176 = sub nsw <4 x i32> zeroinitializer, %174
  %177 = select <4 x i1> %175, <4 x i32> %176, <4 x i32> %174
  %178 = shufflevector <4 x i32> %177, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %179 = add <4 x i32> %177, %178
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %181 = add <4 x i32> %179, %180
  %182 = extractelement <4 x i32> %181, i32 0
  %183 = add i32 %182, %151
  %184 = getelementptr inbounds i8, i8* %150, i64 %11
  %185 = getelementptr inbounds i8, i8* %153, i64 %12
  %186 = getelementptr inbounds i8, i8* %154, i64 4
  %187 = getelementptr inbounds i8, i8* %155, i64 %13
  %188 = add nuw nsw i32 %152, 1
  %189 = icmp eq i32 %188, 8
  br i1 %189, label %190, label %149

190:                                              ; preds = %149
  %191 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %183, i32* %191, align 4
  %192 = getelementptr inbounds i8*, i8** %2, i64 3
  %193 = load i8*, i8** %192, align 8
  br label %194

194:                                              ; preds = %194, %190
  %195 = phi i8* [ %0, %190 ], [ %229, %194 ]
  %196 = phi i32 [ 0, %190 ], [ %228, %194 ]
  %197 = phi i32 [ 0, %190 ], [ %233, %194 ]
  %198 = phi i8* [ %193, %190 ], [ %230, %194 ]
  %199 = phi i8* [ %4, %190 ], [ %231, %194 ]
  %200 = phi i8* [ %5, %190 ], [ %232, %194 ]
  %201 = bitcast i8* %200 to <4 x i8>*
  %202 = load <4 x i8>, <4 x i8>* %201, align 1
  %203 = zext <4 x i8> %202 to <4 x i32>
  %204 = bitcast i8* %198 to <4 x i8>*
  %205 = load <4 x i8>, <4 x i8>* %204, align 1
  %206 = zext <4 x i8> %205 to <4 x i32>
  %207 = mul nuw nsw <4 x i32> %206, %203
  %208 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %203
  %209 = bitcast i8* %199 to <4 x i8>*
  %210 = load <4 x i8>, <4 x i8>* %209, align 1
  %211 = zext <4 x i8> %210 to <4 x i32>
  %212 = mul nsw <4 x i32> %208, %211
  %213 = add nuw nsw <4 x i32> %207, <i32 32, i32 32, i32 32, i32 32>
  %214 = add nsw <4 x i32> %213, %212
  %215 = ashr <4 x i32> %214, <i32 6, i32 6, i32 6, i32 6>
  %216 = bitcast i8* %195 to <4 x i8>*
  %217 = load <4 x i8>, <4 x i8>* %216, align 1
  %218 = zext <4 x i8> %217 to <4 x i32>
  %219 = sub nsw <4 x i32> %215, %218
  %220 = icmp slt <4 x i32> %219, zeroinitializer
  %221 = sub nsw <4 x i32> zeroinitializer, %219
  %222 = select <4 x i1> %220, <4 x i32> %221, <4 x i32> %219
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %224 = add <4 x i32> %222, %223
  %225 = shufflevector <4 x i32> %224, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %226 = add <4 x i32> %224, %225
  %227 = extractelement <4 x i32> %226, i32 0
  %228 = add i32 %227, %196
  %229 = getelementptr inbounds i8, i8* %195, i64 %11
  %230 = getelementptr inbounds i8, i8* %198, i64 %12
  %231 = getelementptr inbounds i8, i8* %199, i64 4
  %232 = getelementptr inbounds i8, i8* %200, i64 %13
  %233 = add nuw nsw i32 %197, 1
  %234 = icmp eq i32 %233, 8
  br i1 %234, label %235, label %194

235:                                              ; preds = %194
  %236 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %228, i32* %236, align 4
  br label %103

237:                                              ; preds = %237, %100
  %238 = phi i8* [ %0, %100 ], [ %272, %237 ]
  %239 = phi i32 [ 0, %100 ], [ %271, %237 ]
  %240 = phi i32 [ 0, %100 ], [ %276, %237 ]
  %241 = phi i8* [ %4, %100 ], [ %273, %237 ]
  %242 = phi i8* [ %102, %100 ], [ %274, %237 ]
  %243 = phi i8* [ %5, %100 ], [ %275, %237 ]
  %244 = bitcast i8* %243 to <4 x i8>*
  %245 = load <4 x i8>, <4 x i8>* %244, align 1
  %246 = zext <4 x i8> %245 to <4 x i32>
  %247 = bitcast i8* %241 to <4 x i8>*
  %248 = load <4 x i8>, <4 x i8>* %247, align 1
  %249 = zext <4 x i8> %248 to <4 x i32>
  %250 = mul nuw nsw <4 x i32> %249, %246
  %251 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %246
  %252 = bitcast i8* %242 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = mul nsw <4 x i32> %251, %254
  %256 = add nuw nsw <4 x i32> %250, <i32 32, i32 32, i32 32, i32 32>
  %257 = add nsw <4 x i32> %256, %255
  %258 = ashr <4 x i32> %257, <i32 6, i32 6, i32 6, i32 6>
  %259 = bitcast i8* %238 to <4 x i8>*
  %260 = load <4 x i8>, <4 x i8>* %259, align 1
  %261 = zext <4 x i8> %260 to <4 x i32>
  %262 = sub nsw <4 x i32> %258, %261
  %263 = icmp slt <4 x i32> %262, zeroinitializer
  %264 = sub nsw <4 x i32> zeroinitializer, %262
  %265 = select <4 x i1> %263, <4 x i32> %264, <4 x i32> %262
  %266 = shufflevector <4 x i32> %265, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %267 = add <4 x i32> %265, %266
  %268 = shufflevector <4 x i32> %267, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %269 = add <4 x i32> %267, %268
  %270 = extractelement <4 x i32> %269, i32 0
  %271 = add i32 %270, %239
  %272 = getelementptr inbounds i8, i8* %238, i64 %11
  %273 = getelementptr inbounds i8, i8* %241, i64 4
  %274 = getelementptr inbounds i8, i8* %242, i64 %12
  %275 = getelementptr inbounds i8, i8* %243, i64 %13
  %276 = add nuw nsw i32 %240, 1
  %277 = icmp eq i32 %276, 8
  br i1 %277, label %278, label %237

278:                                              ; preds = %237
  %279 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %271, i32* %279, align 4
  %280 = getelementptr inbounds i8*, i8** %2, i64 2
  %281 = load i8*, i8** %280, align 8
  br label %282

282:                                              ; preds = %282, %278
  %283 = phi i8* [ %0, %278 ], [ %317, %282 ]
  %284 = phi i32 [ 0, %278 ], [ %316, %282 ]
  %285 = phi i32 [ 0, %278 ], [ %321, %282 ]
  %286 = phi i8* [ %4, %278 ], [ %318, %282 ]
  %287 = phi i8* [ %281, %278 ], [ %319, %282 ]
  %288 = phi i8* [ %5, %278 ], [ %320, %282 ]
  %289 = bitcast i8* %288 to <4 x i8>*
  %290 = load <4 x i8>, <4 x i8>* %289, align 1
  %291 = zext <4 x i8> %290 to <4 x i32>
  %292 = bitcast i8* %286 to <4 x i8>*
  %293 = load <4 x i8>, <4 x i8>* %292, align 1
  %294 = zext <4 x i8> %293 to <4 x i32>
  %295 = mul nuw nsw <4 x i32> %294, %291
  %296 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %291
  %297 = bitcast i8* %287 to <4 x i8>*
  %298 = load <4 x i8>, <4 x i8>* %297, align 1
  %299 = zext <4 x i8> %298 to <4 x i32>
  %300 = mul nsw <4 x i32> %296, %299
  %301 = add nuw nsw <4 x i32> %295, <i32 32, i32 32, i32 32, i32 32>
  %302 = add nsw <4 x i32> %301, %300
  %303 = ashr <4 x i32> %302, <i32 6, i32 6, i32 6, i32 6>
  %304 = bitcast i8* %283 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = zext <4 x i8> %305 to <4 x i32>
  %307 = sub nsw <4 x i32> %303, %306
  %308 = icmp slt <4 x i32> %307, zeroinitializer
  %309 = sub nsw <4 x i32> zeroinitializer, %307
  %310 = select <4 x i1> %308, <4 x i32> %309, <4 x i32> %307
  %311 = shufflevector <4 x i32> %310, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %312 = add <4 x i32> %310, %311
  %313 = shufflevector <4 x i32> %312, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %314 = add <4 x i32> %312, %313
  %315 = extractelement <4 x i32> %314, i32 0
  %316 = add i32 %315, %284
  %317 = getelementptr inbounds i8, i8* %283, i64 %11
  %318 = getelementptr inbounds i8, i8* %286, i64 4
  %319 = getelementptr inbounds i8, i8* %287, i64 %12
  %320 = getelementptr inbounds i8, i8* %288, i64 %13
  %321 = add nuw nsw i32 %285, 1
  %322 = icmp eq i32 %321, 8
  br i1 %322, label %323, label %282

323:                                              ; preds = %282
  %324 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %316, i32* %324, align 4
  %325 = getelementptr inbounds i8*, i8** %2, i64 3
  %326 = load i8*, i8** %325, align 8
  br label %327

327:                                              ; preds = %327, %323
  %328 = phi i8* [ %0, %323 ], [ %362, %327 ]
  %329 = phi i32 [ 0, %323 ], [ %361, %327 ]
  %330 = phi i32 [ 0, %323 ], [ %366, %327 ]
  %331 = phi i8* [ %4, %323 ], [ %363, %327 ]
  %332 = phi i8* [ %326, %323 ], [ %364, %327 ]
  %333 = phi i8* [ %5, %323 ], [ %365, %327 ]
  %334 = bitcast i8* %333 to <4 x i8>*
  %335 = load <4 x i8>, <4 x i8>* %334, align 1
  %336 = zext <4 x i8> %335 to <4 x i32>
  %337 = bitcast i8* %331 to <4 x i8>*
  %338 = load <4 x i8>, <4 x i8>* %337, align 1
  %339 = zext <4 x i8> %338 to <4 x i32>
  %340 = mul nuw nsw <4 x i32> %339, %336
  %341 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %336
  %342 = bitcast i8* %332 to <4 x i8>*
  %343 = load <4 x i8>, <4 x i8>* %342, align 1
  %344 = zext <4 x i8> %343 to <4 x i32>
  %345 = mul nsw <4 x i32> %341, %344
  %346 = add nuw nsw <4 x i32> %340, <i32 32, i32 32, i32 32, i32 32>
  %347 = add nsw <4 x i32> %346, %345
  %348 = ashr <4 x i32> %347, <i32 6, i32 6, i32 6, i32 6>
  %349 = bitcast i8* %328 to <4 x i8>*
  %350 = load <4 x i8>, <4 x i8>* %349, align 1
  %351 = zext <4 x i8> %350 to <4 x i32>
  %352 = sub nsw <4 x i32> %348, %351
  %353 = icmp slt <4 x i32> %352, zeroinitializer
  %354 = sub nsw <4 x i32> zeroinitializer, %352
  %355 = select <4 x i1> %353, <4 x i32> %354, <4 x i32> %352
  %356 = shufflevector <4 x i32> %355, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %357 = add <4 x i32> %355, %356
  %358 = shufflevector <4 x i32> %357, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %359 = add <4 x i32> %357, %358
  %360 = extractelement <4 x i32> %359, i32 0
  %361 = add i32 %360, %329
  %362 = getelementptr inbounds i8, i8* %328, i64 %11
  %363 = getelementptr inbounds i8, i8* %331, i64 4
  %364 = getelementptr inbounds i8, i8* %332, i64 %12
  %365 = getelementptr inbounds i8, i8* %333, i64 %13
  %366 = add nuw nsw i32 %330, 1
  %367 = icmp eq i32 %366, 8
  br i1 %367, label %368, label %327

368:                                              ; preds = %327
  %369 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %361, i32* %369, align 4
  br label %103
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad4x4_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = bitcast i8* %5 to <4 x i8>*
  %14 = load <4 x i8>, <4 x i8>* %13, align 1
  %15 = zext <4 x i8> %14 to <4 x i32>
  br i1 %9, label %16, label %137

16:                                               ; preds = %8
  %17 = bitcast i8* %2 to <4 x i8>*
  %18 = load <4 x i8>, <4 x i8>* %17, align 1
  %19 = zext <4 x i8> %18 to <4 x i32>
  %20 = mul nuw nsw <4 x i32> %19, %15
  %21 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %15
  %22 = bitcast i8* %4 to <4 x i8>*
  %23 = load <4 x i8>, <4 x i8>* %22, align 1
  %24 = zext <4 x i8> %23 to <4 x i32>
  %25 = mul nsw <4 x i32> %21, %24
  %26 = add nuw nsw <4 x i32> %20, <i32 32, i32 32, i32 32, i32 32>
  %27 = add nsw <4 x i32> %26, %25
  %28 = ashr <4 x i32> %27, <i32 6, i32 6, i32 6, i32 6>
  %29 = bitcast i8* %0 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = sub nsw <4 x i32> %28, %31
  %33 = icmp slt <4 x i32> %32, zeroinitializer
  %34 = sub nsw <4 x i32> zeroinitializer, %32
  %35 = select <4 x i1> %33, <4 x i32> %34, <4 x i32> %32
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %37 = add <4 x i32> %35, %36
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %39 = add <4 x i32> %37, %38
  %40 = extractelement <4 x i32> %39, i32 0
  %41 = getelementptr inbounds i8, i8* %0, i64 %10
  %42 = getelementptr inbounds i8, i8* %2, i64 %11
  %43 = getelementptr inbounds i8, i8* %4, i64 4
  %44 = getelementptr inbounds i8, i8* %5, i64 %12
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = bitcast i8* %42 to <4 x i8>*
  %49 = load <4 x i8>, <4 x i8>* %48, align 1
  %50 = zext <4 x i8> %49 to <4 x i32>
  %51 = mul nuw nsw <4 x i32> %50, %47
  %52 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %47
  %53 = bitcast i8* %43 to <4 x i8>*
  %54 = load <4 x i8>, <4 x i8>* %53, align 1
  %55 = zext <4 x i8> %54 to <4 x i32>
  %56 = mul nsw <4 x i32> %52, %55
  %57 = add nuw nsw <4 x i32> %51, <i32 32, i32 32, i32 32, i32 32>
  %58 = add nsw <4 x i32> %57, %56
  %59 = ashr <4 x i32> %58, <i32 6, i32 6, i32 6, i32 6>
  %60 = bitcast i8* %41 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = sub nsw <4 x i32> %59, %62
  %64 = icmp slt <4 x i32> %63, zeroinitializer
  %65 = sub nsw <4 x i32> zeroinitializer, %63
  %66 = select <4 x i1> %64, <4 x i32> %65, <4 x i32> %63
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %68 = add <4 x i32> %66, %67
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %70 = add <4 x i32> %68, %69
  %71 = extractelement <4 x i32> %70, i32 0
  %72 = add i32 %71, %40
  %73 = getelementptr inbounds i8, i8* %41, i64 %10
  %74 = getelementptr inbounds i8, i8* %42, i64 %11
  %75 = getelementptr inbounds i8, i8* %4, i64 8
  %76 = getelementptr inbounds i8, i8* %44, i64 %12
  %77 = bitcast i8* %76 to <4 x i8>*
  %78 = load <4 x i8>, <4 x i8>* %77, align 1
  %79 = zext <4 x i8> %78 to <4 x i32>
  %80 = bitcast i8* %74 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = mul nuw nsw <4 x i32> %82, %79
  %84 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %79
  %85 = bitcast i8* %75 to <4 x i8>*
  %86 = load <4 x i8>, <4 x i8>* %85, align 1
  %87 = zext <4 x i8> %86 to <4 x i32>
  %88 = mul nsw <4 x i32> %84, %87
  %89 = add nuw nsw <4 x i32> %83, <i32 32, i32 32, i32 32, i32 32>
  %90 = add nsw <4 x i32> %89, %88
  %91 = ashr <4 x i32> %90, <i32 6, i32 6, i32 6, i32 6>
  %92 = bitcast i8* %73 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = sub nsw <4 x i32> %91, %94
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %100 = add <4 x i32> %98, %99
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %102 = add <4 x i32> %100, %101
  %103 = extractelement <4 x i32> %102, i32 0
  %104 = add i32 %103, %72
  %105 = getelementptr inbounds i8, i8* %73, i64 %10
  %106 = getelementptr inbounds i8, i8* %74, i64 %11
  %107 = getelementptr inbounds i8, i8* %4, i64 12
  %108 = getelementptr inbounds i8, i8* %76, i64 %12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = bitcast i8* %106 to <4 x i8>*
  %113 = load <4 x i8>, <4 x i8>* %112, align 1
  %114 = zext <4 x i8> %113 to <4 x i32>
  %115 = mul nuw nsw <4 x i32> %114, %111
  %116 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %111
  %117 = bitcast i8* %107 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = mul nsw <4 x i32> %116, %119
  %121 = add nuw nsw <4 x i32> %115, <i32 32, i32 32, i32 32, i32 32>
  %122 = add nsw <4 x i32> %121, %120
  %123 = ashr <4 x i32> %122, <i32 6, i32 6, i32 6, i32 6>
  %124 = bitcast i8* %105 to <4 x i8>*
  %125 = load <4 x i8>, <4 x i8>* %124, align 1
  %126 = zext <4 x i8> %125 to <4 x i32>
  %127 = sub nsw <4 x i32> %123, %126
  %128 = icmp slt <4 x i32> %127, zeroinitializer
  %129 = sub nsw <4 x i32> zeroinitializer, %127
  %130 = select <4 x i1> %128, <4 x i32> %129, <4 x i32> %127
  %131 = shufflevector <4 x i32> %130, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %132 = add <4 x i32> %130, %131
  %133 = shufflevector <4 x i32> %132, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %134 = add <4 x i32> %132, %133
  %135 = extractelement <4 x i32> %134, i32 0
  %136 = add i32 %135, %104
  br label %258

137:                                              ; preds = %8
  %138 = bitcast i8* %4 to <4 x i8>*
  %139 = load <4 x i8>, <4 x i8>* %138, align 1
  %140 = zext <4 x i8> %139 to <4 x i32>
  %141 = mul nuw nsw <4 x i32> %140, %15
  %142 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %15
  %143 = bitcast i8* %2 to <4 x i8>*
  %144 = load <4 x i8>, <4 x i8>* %143, align 1
  %145 = zext <4 x i8> %144 to <4 x i32>
  %146 = mul nsw <4 x i32> %142, %145
  %147 = add nuw nsw <4 x i32> %141, <i32 32, i32 32, i32 32, i32 32>
  %148 = add nsw <4 x i32> %147, %146
  %149 = ashr <4 x i32> %148, <i32 6, i32 6, i32 6, i32 6>
  %150 = bitcast i8* %0 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = zext <4 x i8> %151 to <4 x i32>
  %153 = sub nsw <4 x i32> %149, %152
  %154 = icmp slt <4 x i32> %153, zeroinitializer
  %155 = sub nsw <4 x i32> zeroinitializer, %153
  %156 = select <4 x i1> %154, <4 x i32> %155, <4 x i32> %153
  %157 = shufflevector <4 x i32> %156, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %158 = add <4 x i32> %156, %157
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %160 = add <4 x i32> %158, %159
  %161 = extractelement <4 x i32> %160, i32 0
  %162 = getelementptr inbounds i8, i8* %0, i64 %10
  %163 = getelementptr inbounds i8, i8* %4, i64 4
  %164 = getelementptr inbounds i8, i8* %2, i64 %11
  %165 = getelementptr inbounds i8, i8* %5, i64 %12
  %166 = bitcast i8* %165 to <4 x i8>*
  %167 = load <4 x i8>, <4 x i8>* %166, align 1
  %168 = zext <4 x i8> %167 to <4 x i32>
  %169 = bitcast i8* %163 to <4 x i8>*
  %170 = load <4 x i8>, <4 x i8>* %169, align 1
  %171 = zext <4 x i8> %170 to <4 x i32>
  %172 = mul nuw nsw <4 x i32> %171, %168
  %173 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %168
  %174 = bitcast i8* %164 to <4 x i8>*
  %175 = load <4 x i8>, <4 x i8>* %174, align 1
  %176 = zext <4 x i8> %175 to <4 x i32>
  %177 = mul nsw <4 x i32> %173, %176
  %178 = add nuw nsw <4 x i32> %172, <i32 32, i32 32, i32 32, i32 32>
  %179 = add nsw <4 x i32> %178, %177
  %180 = ashr <4 x i32> %179, <i32 6, i32 6, i32 6, i32 6>
  %181 = bitcast i8* %162 to <4 x i8>*
  %182 = load <4 x i8>, <4 x i8>* %181, align 1
  %183 = zext <4 x i8> %182 to <4 x i32>
  %184 = sub nsw <4 x i32> %180, %183
  %185 = icmp slt <4 x i32> %184, zeroinitializer
  %186 = sub nsw <4 x i32> zeroinitializer, %184
  %187 = select <4 x i1> %185, <4 x i32> %186, <4 x i32> %184
  %188 = shufflevector <4 x i32> %187, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %189 = add <4 x i32> %187, %188
  %190 = shufflevector <4 x i32> %189, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %191 = add <4 x i32> %189, %190
  %192 = extractelement <4 x i32> %191, i32 0
  %193 = add i32 %192, %161
  %194 = getelementptr inbounds i8, i8* %162, i64 %10
  %195 = getelementptr inbounds i8, i8* %4, i64 8
  %196 = getelementptr inbounds i8, i8* %164, i64 %11
  %197 = getelementptr inbounds i8, i8* %165, i64 %12
  %198 = bitcast i8* %197 to <4 x i8>*
  %199 = load <4 x i8>, <4 x i8>* %198, align 1
  %200 = zext <4 x i8> %199 to <4 x i32>
  %201 = bitcast i8* %195 to <4 x i8>*
  %202 = load <4 x i8>, <4 x i8>* %201, align 1
  %203 = zext <4 x i8> %202 to <4 x i32>
  %204 = mul nuw nsw <4 x i32> %203, %200
  %205 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %200
  %206 = bitcast i8* %196 to <4 x i8>*
  %207 = load <4 x i8>, <4 x i8>* %206, align 1
  %208 = zext <4 x i8> %207 to <4 x i32>
  %209 = mul nsw <4 x i32> %205, %208
  %210 = add nuw nsw <4 x i32> %204, <i32 32, i32 32, i32 32, i32 32>
  %211 = add nsw <4 x i32> %210, %209
  %212 = ashr <4 x i32> %211, <i32 6, i32 6, i32 6, i32 6>
  %213 = bitcast i8* %194 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = zext <4 x i8> %214 to <4 x i32>
  %216 = sub nsw <4 x i32> %212, %215
  %217 = icmp slt <4 x i32> %216, zeroinitializer
  %218 = sub nsw <4 x i32> zeroinitializer, %216
  %219 = select <4 x i1> %217, <4 x i32> %218, <4 x i32> %216
  %220 = shufflevector <4 x i32> %219, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %221 = add <4 x i32> %219, %220
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %223 = add <4 x i32> %221, %222
  %224 = extractelement <4 x i32> %223, i32 0
  %225 = add i32 %224, %193
  %226 = getelementptr inbounds i8, i8* %194, i64 %10
  %227 = getelementptr inbounds i8, i8* %4, i64 12
  %228 = getelementptr inbounds i8, i8* %196, i64 %11
  %229 = getelementptr inbounds i8, i8* %197, i64 %12
  %230 = bitcast i8* %229 to <4 x i8>*
  %231 = load <4 x i8>, <4 x i8>* %230, align 1
  %232 = zext <4 x i8> %231 to <4 x i32>
  %233 = bitcast i8* %227 to <4 x i8>*
  %234 = load <4 x i8>, <4 x i8>* %233, align 1
  %235 = zext <4 x i8> %234 to <4 x i32>
  %236 = mul nuw nsw <4 x i32> %235, %232
  %237 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %232
  %238 = bitcast i8* %228 to <4 x i8>*
  %239 = load <4 x i8>, <4 x i8>* %238, align 1
  %240 = zext <4 x i8> %239 to <4 x i32>
  %241 = mul nsw <4 x i32> %237, %240
  %242 = add nuw nsw <4 x i32> %236, <i32 32, i32 32, i32 32, i32 32>
  %243 = add nsw <4 x i32> %242, %241
  %244 = ashr <4 x i32> %243, <i32 6, i32 6, i32 6, i32 6>
  %245 = bitcast i8* %226 to <4 x i8>*
  %246 = load <4 x i8>, <4 x i8>* %245, align 1
  %247 = zext <4 x i8> %246 to <4 x i32>
  %248 = sub nsw <4 x i32> %244, %247
  %249 = icmp slt <4 x i32> %248, zeroinitializer
  %250 = sub nsw <4 x i32> zeroinitializer, %248
  %251 = select <4 x i1> %249, <4 x i32> %250, <4 x i32> %248
  %252 = shufflevector <4 x i32> %251, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %253 = add <4 x i32> %251, %252
  %254 = shufflevector <4 x i32> %253, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %255 = add <4 x i32> %253, %254
  %256 = extractelement <4 x i32> %255, i32 0
  %257 = add i32 %256, %225
  br label %258

258:                                              ; preds = %137, %16
  %259 = phi i32 [ %136, %16 ], [ %257, %137 ]
  ret i32 %259
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad4x4x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = bitcast i8* %5 to <4 x i8>*
  %15 = bitcast i8* %4 to <4 x i8>*
  %16 = bitcast i8* %0 to <4 x i8>*
  %17 = getelementptr inbounds i8, i8* %0, i64 %11
  %18 = getelementptr inbounds i8, i8* %4, i64 4
  %19 = getelementptr inbounds i8, i8* %5, i64 %13
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = bitcast i8* %18 to <4 x i8>*
  %22 = bitcast i8* %17 to <4 x i8>*
  %23 = getelementptr inbounds i8, i8* %17, i64 %11
  %24 = getelementptr inbounds i8, i8* %4, i64 8
  %25 = getelementptr inbounds i8, i8* %19, i64 %13
  %26 = bitcast i8* %25 to <4 x i8>*
  %27 = bitcast i8* %24 to <4 x i8>*
  %28 = bitcast i8* %23 to <4 x i8>*
  %29 = getelementptr inbounds i8, i8* %23, i64 %11
  %30 = getelementptr inbounds i8, i8* %4, i64 12
  %31 = getelementptr inbounds i8, i8* %25, i64 %13
  %32 = bitcast i8* %31 to <4 x i8>*
  %33 = bitcast i8* %30 to <4 x i8>*
  %34 = bitcast i8* %29 to <4 x i8>*
  br i1 %10, label %35, label %144

35:                                               ; preds = %9, %35
  %36 = phi i64 [ %142, %35 ], [ 0, %9 ]
  %37 = getelementptr inbounds i8*, i8** %2, i64 %36
  %38 = load i8*, i8** %37, align 8
  %39 = load <4 x i8>, <4 x i8>* %14, align 1
  %40 = zext <4 x i8> %39 to <4 x i32>
  %41 = bitcast i8* %38 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  %43 = zext <4 x i8> %42 to <4 x i32>
  %44 = mul nuw nsw <4 x i32> %43, %40
  %45 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %40
  %46 = load <4 x i8>, <4 x i8>* %15, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = mul nsw <4 x i32> %45, %47
  %49 = add nuw nsw <4 x i32> %44, <i32 32, i32 32, i32 32, i32 32>
  %50 = add nsw <4 x i32> %49, %48
  %51 = ashr <4 x i32> %50, <i32 6, i32 6, i32 6, i32 6>
  %52 = load <4 x i8>, <4 x i8>* %16, align 1
  %53 = zext <4 x i8> %52 to <4 x i32>
  %54 = sub nsw <4 x i32> %51, %53
  %55 = icmp slt <4 x i32> %54, zeroinitializer
  %56 = sub nsw <4 x i32> zeroinitializer, %54
  %57 = select <4 x i1> %55, <4 x i32> %56, <4 x i32> %54
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %59 = add <4 x i32> %57, %58
  %60 = shufflevector <4 x i32> %59, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %61 = add <4 x i32> %59, %60
  %62 = extractelement <4 x i32> %61, i32 0
  %63 = getelementptr inbounds i8, i8* %38, i64 %12
  %64 = load <4 x i8>, <4 x i8>* %20, align 1
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = bitcast i8* %63 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1
  %68 = zext <4 x i8> %67 to <4 x i32>
  %69 = mul nuw nsw <4 x i32> %68, %65
  %70 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %65
  %71 = load <4 x i8>, <4 x i8>* %21, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = mul nsw <4 x i32> %70, %72
  %74 = add nuw nsw <4 x i32> %69, <i32 32, i32 32, i32 32, i32 32>
  %75 = add nsw <4 x i32> %74, %73
  %76 = ashr <4 x i32> %75, <i32 6, i32 6, i32 6, i32 6>
  %77 = load <4 x i8>, <4 x i8>* %22, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = sub nsw <4 x i32> %76, %78
  %80 = icmp slt <4 x i32> %79, zeroinitializer
  %81 = sub nsw <4 x i32> zeroinitializer, %79
  %82 = select <4 x i1> %80, <4 x i32> %81, <4 x i32> %79
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %84 = add <4 x i32> %82, %83
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = add i32 %87, %62
  %89 = getelementptr inbounds i8, i8* %63, i64 %12
  %90 = load <4 x i8>, <4 x i8>* %26, align 1
  %91 = zext <4 x i8> %90 to <4 x i32>
  %92 = bitcast i8* %89 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = mul nuw nsw <4 x i32> %94, %91
  %96 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %91
  %97 = load <4 x i8>, <4 x i8>* %27, align 1
  %98 = zext <4 x i8> %97 to <4 x i32>
  %99 = mul nsw <4 x i32> %96, %98
  %100 = add nuw nsw <4 x i32> %95, <i32 32, i32 32, i32 32, i32 32>
  %101 = add nsw <4 x i32> %100, %99
  %102 = ashr <4 x i32> %101, <i32 6, i32 6, i32 6, i32 6>
  %103 = load <4 x i8>, <4 x i8>* %28, align 1
  %104 = zext <4 x i8> %103 to <4 x i32>
  %105 = sub nsw <4 x i32> %102, %104
  %106 = icmp slt <4 x i32> %105, zeroinitializer
  %107 = sub nsw <4 x i32> zeroinitializer, %105
  %108 = select <4 x i1> %106, <4 x i32> %107, <4 x i32> %105
  %109 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %110 = add <4 x i32> %108, %109
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %112 = add <4 x i32> %110, %111
  %113 = extractelement <4 x i32> %112, i32 0
  %114 = add i32 %113, %88
  %115 = getelementptr inbounds i8, i8* %89, i64 %12
  %116 = load <4 x i8>, <4 x i8>* %32, align 1
  %117 = zext <4 x i8> %116 to <4 x i32>
  %118 = bitcast i8* %115 to <4 x i8>*
  %119 = load <4 x i8>, <4 x i8>* %118, align 1
  %120 = zext <4 x i8> %119 to <4 x i32>
  %121 = mul nuw nsw <4 x i32> %120, %117
  %122 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %117
  %123 = load <4 x i8>, <4 x i8>* %33, align 1
  %124 = zext <4 x i8> %123 to <4 x i32>
  %125 = mul nsw <4 x i32> %122, %124
  %126 = add nuw nsw <4 x i32> %121, <i32 32, i32 32, i32 32, i32 32>
  %127 = add nsw <4 x i32> %126, %125
  %128 = ashr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %129 = load <4 x i8>, <4 x i8>* %34, align 1
  %130 = zext <4 x i8> %129 to <4 x i32>
  %131 = sub nsw <4 x i32> %128, %130
  %132 = icmp slt <4 x i32> %131, zeroinitializer
  %133 = sub nsw <4 x i32> zeroinitializer, %131
  %134 = select <4 x i1> %132, <4 x i32> %133, <4 x i32> %131
  %135 = shufflevector <4 x i32> %134, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %136 = add <4 x i32> %134, %135
  %137 = shufflevector <4 x i32> %136, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %138 = add <4 x i32> %136, %137
  %139 = extractelement <4 x i32> %138, i32 0
  %140 = add i32 %139, %114
  %141 = getelementptr inbounds i32, i32* %8, i64 %36
  store i32 %140, i32* %141, align 4
  %142 = add nuw nsw i64 %36, 1
  %143 = icmp eq i64 %142, 4
  br i1 %143, label %253, label %35

144:                                              ; preds = %9, %144
  %145 = phi i64 [ %251, %144 ], [ 0, %9 ]
  %146 = getelementptr inbounds i8*, i8** %2, i64 %145
  %147 = load i8*, i8** %146, align 8
  %148 = load <4 x i8>, <4 x i8>* %14, align 1
  %149 = zext <4 x i8> %148 to <4 x i32>
  %150 = load <4 x i8>, <4 x i8>* %15, align 1
  %151 = zext <4 x i8> %150 to <4 x i32>
  %152 = mul nuw nsw <4 x i32> %151, %149
  %153 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %149
  %154 = bitcast i8* %147 to <4 x i8>*
  %155 = load <4 x i8>, <4 x i8>* %154, align 1
  %156 = zext <4 x i8> %155 to <4 x i32>
  %157 = mul nsw <4 x i32> %153, %156
  %158 = add nuw nsw <4 x i32> %152, <i32 32, i32 32, i32 32, i32 32>
  %159 = add nsw <4 x i32> %158, %157
  %160 = ashr <4 x i32> %159, <i32 6, i32 6, i32 6, i32 6>
  %161 = load <4 x i8>, <4 x i8>* %16, align 1
  %162 = zext <4 x i8> %161 to <4 x i32>
  %163 = sub nsw <4 x i32> %160, %162
  %164 = icmp slt <4 x i32> %163, zeroinitializer
  %165 = sub nsw <4 x i32> zeroinitializer, %163
  %166 = select <4 x i1> %164, <4 x i32> %165, <4 x i32> %163
  %167 = shufflevector <4 x i32> %166, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %168 = add <4 x i32> %166, %167
  %169 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %170 = add <4 x i32> %168, %169
  %171 = extractelement <4 x i32> %170, i32 0
  %172 = getelementptr inbounds i8, i8* %147, i64 %12
  %173 = load <4 x i8>, <4 x i8>* %20, align 1
  %174 = zext <4 x i8> %173 to <4 x i32>
  %175 = load <4 x i8>, <4 x i8>* %21, align 1
  %176 = zext <4 x i8> %175 to <4 x i32>
  %177 = mul nuw nsw <4 x i32> %176, %174
  %178 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %174
  %179 = bitcast i8* %172 to <4 x i8>*
  %180 = load <4 x i8>, <4 x i8>* %179, align 1
  %181 = zext <4 x i8> %180 to <4 x i32>
  %182 = mul nsw <4 x i32> %178, %181
  %183 = add nuw nsw <4 x i32> %177, <i32 32, i32 32, i32 32, i32 32>
  %184 = add nsw <4 x i32> %183, %182
  %185 = ashr <4 x i32> %184, <i32 6, i32 6, i32 6, i32 6>
  %186 = load <4 x i8>, <4 x i8>* %22, align 1
  %187 = zext <4 x i8> %186 to <4 x i32>
  %188 = sub nsw <4 x i32> %185, %187
  %189 = icmp slt <4 x i32> %188, zeroinitializer
  %190 = sub nsw <4 x i32> zeroinitializer, %188
  %191 = select <4 x i1> %189, <4 x i32> %190, <4 x i32> %188
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %193 = add <4 x i32> %191, %192
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %195 = add <4 x i32> %193, %194
  %196 = extractelement <4 x i32> %195, i32 0
  %197 = add i32 %196, %171
  %198 = getelementptr inbounds i8, i8* %172, i64 %12
  %199 = load <4 x i8>, <4 x i8>* %26, align 1
  %200 = zext <4 x i8> %199 to <4 x i32>
  %201 = load <4 x i8>, <4 x i8>* %27, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = mul nuw nsw <4 x i32> %202, %200
  %204 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %200
  %205 = bitcast i8* %198 to <4 x i8>*
  %206 = load <4 x i8>, <4 x i8>* %205, align 1
  %207 = zext <4 x i8> %206 to <4 x i32>
  %208 = mul nsw <4 x i32> %204, %207
  %209 = add nuw nsw <4 x i32> %203, <i32 32, i32 32, i32 32, i32 32>
  %210 = add nsw <4 x i32> %209, %208
  %211 = ashr <4 x i32> %210, <i32 6, i32 6, i32 6, i32 6>
  %212 = load <4 x i8>, <4 x i8>* %28, align 1
  %213 = zext <4 x i8> %212 to <4 x i32>
  %214 = sub nsw <4 x i32> %211, %213
  %215 = icmp slt <4 x i32> %214, zeroinitializer
  %216 = sub nsw <4 x i32> zeroinitializer, %214
  %217 = select <4 x i1> %215, <4 x i32> %216, <4 x i32> %214
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %219 = add <4 x i32> %217, %218
  %220 = shufflevector <4 x i32> %219, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %221 = add <4 x i32> %219, %220
  %222 = extractelement <4 x i32> %221, i32 0
  %223 = add i32 %222, %197
  %224 = getelementptr inbounds i8, i8* %198, i64 %12
  %225 = load <4 x i8>, <4 x i8>* %32, align 1
  %226 = zext <4 x i8> %225 to <4 x i32>
  %227 = load <4 x i8>, <4 x i8>* %33, align 1
  %228 = zext <4 x i8> %227 to <4 x i32>
  %229 = mul nuw nsw <4 x i32> %228, %226
  %230 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %226
  %231 = bitcast i8* %224 to <4 x i8>*
  %232 = load <4 x i8>, <4 x i8>* %231, align 1
  %233 = zext <4 x i8> %232 to <4 x i32>
  %234 = mul nsw <4 x i32> %230, %233
  %235 = add nuw nsw <4 x i32> %229, <i32 32, i32 32, i32 32, i32 32>
  %236 = add nsw <4 x i32> %235, %234
  %237 = ashr <4 x i32> %236, <i32 6, i32 6, i32 6, i32 6>
  %238 = load <4 x i8>, <4 x i8>* %34, align 1
  %239 = zext <4 x i8> %238 to <4 x i32>
  %240 = sub nsw <4 x i32> %237, %239
  %241 = icmp slt <4 x i32> %240, zeroinitializer
  %242 = sub nsw <4 x i32> zeroinitializer, %240
  %243 = select <4 x i1> %241, <4 x i32> %242, <4 x i32> %240
  %244 = shufflevector <4 x i32> %243, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %245 = add <4 x i32> %243, %244
  %246 = shufflevector <4 x i32> %245, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %247 = add <4 x i32> %245, %246
  %248 = extractelement <4 x i32> %247, i32 0
  %249 = add i32 %248, %223
  %250 = getelementptr inbounds i32, i32* %8, i64 %145
  store i32 %249, i32* %250, align 4
  %251 = add nuw nsw i64 %145, 1
  %252 = icmp eq i64 %251, 4
  br i1 %252, label %253, label %144

253:                                              ; preds = %144, %35
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad4x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %54

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %48, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %47, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %52, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %49, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %50, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %51, %13 ], [ %5, %8 ]
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = bitcast i8* %17 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = mul nuw nsw <4 x i32> %25, %22
  %27 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %22
  %28 = bitcast i8* %18 to <4 x i8>*
  %29 = load <4 x i8>, <4 x i8>* %28, align 1
  %30 = zext <4 x i8> %29 to <4 x i32>
  %31 = mul nsw <4 x i32> %27, %30
  %32 = add nuw nsw <4 x i32> %26, <i32 32, i32 32, i32 32, i32 32>
  %33 = add nsw <4 x i32> %32, %31
  %34 = ashr <4 x i32> %33, <i32 6, i32 6, i32 6, i32 6>
  %35 = bitcast i8* %14 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = sub nsw <4 x i32> %34, %37
  %39 = icmp slt <4 x i32> %38, zeroinitializer
  %40 = sub nsw <4 x i32> zeroinitializer, %38
  %41 = select <4 x i1> %39, <4 x i32> %40, <4 x i32> %38
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %43 = add <4 x i32> %41, %42
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %45 = add <4 x i32> %43, %44
  %46 = extractelement <4 x i32> %45, i32 0
  %47 = add i32 %46, %15
  %48 = getelementptr inbounds i8, i8* %14, i64 %10
  %49 = getelementptr inbounds i8, i8* %17, i64 %11
  %50 = getelementptr inbounds i8, i8* %18, i64 4
  %51 = getelementptr inbounds i8, i8* %19, i64 %12
  %52 = add nuw nsw i32 %16, 1
  %53 = icmp eq i32 %52, 16
  br i1 %53, label %95, label %13

54:                                               ; preds = %8, %54
  %55 = phi i8* [ %89, %54 ], [ %0, %8 ]
  %56 = phi i32 [ %88, %54 ], [ 0, %8 ]
  %57 = phi i32 [ %93, %54 ], [ 0, %8 ]
  %58 = phi i8* [ %90, %54 ], [ %4, %8 ]
  %59 = phi i8* [ %91, %54 ], [ %2, %8 ]
  %60 = phi i8* [ %92, %54 ], [ %5, %8 ]
  %61 = bitcast i8* %60 to <4 x i8>*
  %62 = load <4 x i8>, <4 x i8>* %61, align 1
  %63 = zext <4 x i8> %62 to <4 x i32>
  %64 = bitcast i8* %58 to <4 x i8>*
  %65 = load <4 x i8>, <4 x i8>* %64, align 1
  %66 = zext <4 x i8> %65 to <4 x i32>
  %67 = mul nuw nsw <4 x i32> %66, %63
  %68 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %63
  %69 = bitcast i8* %59 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = zext <4 x i8> %70 to <4 x i32>
  %72 = mul nsw <4 x i32> %68, %71
  %73 = add nuw nsw <4 x i32> %67, <i32 32, i32 32, i32 32, i32 32>
  %74 = add nsw <4 x i32> %73, %72
  %75 = ashr <4 x i32> %74, <i32 6, i32 6, i32 6, i32 6>
  %76 = bitcast i8* %55 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = sub nsw <4 x i32> %75, %78
  %80 = icmp slt <4 x i32> %79, zeroinitializer
  %81 = sub nsw <4 x i32> zeroinitializer, %79
  %82 = select <4 x i1> %80, <4 x i32> %81, <4 x i32> %79
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %84 = add <4 x i32> %82, %83
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = add i32 %87, %56
  %89 = getelementptr inbounds i8, i8* %55, i64 %10
  %90 = getelementptr inbounds i8, i8* %58, i64 4
  %91 = getelementptr inbounds i8, i8* %59, i64 %11
  %92 = getelementptr inbounds i8, i8* %60, i64 %12
  %93 = add nuw nsw i32 %57, 1
  %94 = icmp eq i32 %93, 16
  br i1 %94, label %95, label %54

95:                                               ; preds = %54, %13
  %96 = phi i32 [ %47, %13 ], [ %88, %54 ]
  ret i32 %96
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad4x16x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %59

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %50, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %49, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %54, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %51, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %52, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %53, %15 ], [ %5, %9 ]
  %22 = bitcast i8* %21 to <4 x i8>*
  %23 = load <4 x i8>, <4 x i8>* %22, align 1
  %24 = zext <4 x i8> %23 to <4 x i32>
  %25 = bitcast i8* %19 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = mul nuw nsw <4 x i32> %27, %24
  %29 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %24
  %30 = bitcast i8* %20 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = mul nsw <4 x i32> %29, %32
  %34 = add nuw nsw <4 x i32> %28, <i32 32, i32 32, i32 32, i32 32>
  %35 = add nsw <4 x i32> %34, %33
  %36 = ashr <4 x i32> %35, <i32 6, i32 6, i32 6, i32 6>
  %37 = bitcast i8* %16 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %38 to <4 x i32>
  %40 = sub nsw <4 x i32> %36, %39
  %41 = icmp slt <4 x i32> %40, zeroinitializer
  %42 = sub nsw <4 x i32> zeroinitializer, %40
  %43 = select <4 x i1> %41, <4 x i32> %42, <4 x i32> %40
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %45 = add <4 x i32> %43, %44
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %47 = add <4 x i32> %45, %46
  %48 = extractelement <4 x i32> %47, i32 0
  %49 = add i32 %48, %17
  %50 = getelementptr inbounds i8, i8* %16, i64 %11
  %51 = getelementptr inbounds i8, i8* %19, i64 %12
  %52 = getelementptr inbounds i8, i8* %20, i64 4
  %53 = getelementptr inbounds i8, i8* %21, i64 %13
  %54 = add nuw nsw i32 %18, 1
  %55 = icmp eq i32 %54, 16
  br i1 %55, label %56, label %15

56:                                               ; preds = %15
  store i32 %49, i32* %8, align 4
  %57 = getelementptr inbounds i8*, i8** %2, i64 1
  %58 = load i8*, i8** %57, align 8
  br label %104

59:                                               ; preds = %9, %59
  %60 = phi i8* [ %94, %59 ], [ %0, %9 ]
  %61 = phi i32 [ %93, %59 ], [ 0, %9 ]
  %62 = phi i32 [ %98, %59 ], [ 0, %9 ]
  %63 = phi i8* [ %95, %59 ], [ %4, %9 ]
  %64 = phi i8* [ %96, %59 ], [ %14, %9 ]
  %65 = phi i8* [ %97, %59 ], [ %5, %9 ]
  %66 = bitcast i8* %65 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1
  %68 = zext <4 x i8> %67 to <4 x i32>
  %69 = bitcast i8* %63 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = zext <4 x i8> %70 to <4 x i32>
  %72 = mul nuw nsw <4 x i32> %71, %68
  %73 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %68
  %74 = bitcast i8* %64 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = mul nsw <4 x i32> %73, %76
  %78 = add nuw nsw <4 x i32> %72, <i32 32, i32 32, i32 32, i32 32>
  %79 = add nsw <4 x i32> %78, %77
  %80 = ashr <4 x i32> %79, <i32 6, i32 6, i32 6, i32 6>
  %81 = bitcast i8* %60 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 1
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = sub nsw <4 x i32> %80, %83
  %85 = icmp slt <4 x i32> %84, zeroinitializer
  %86 = sub nsw <4 x i32> zeroinitializer, %84
  %87 = select <4 x i1> %85, <4 x i32> %86, <4 x i32> %84
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %89 = add <4 x i32> %87, %88
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %91 = add <4 x i32> %89, %90
  %92 = extractelement <4 x i32> %91, i32 0
  %93 = add i32 %92, %61
  %94 = getelementptr inbounds i8, i8* %60, i64 %11
  %95 = getelementptr inbounds i8, i8* %63, i64 4
  %96 = getelementptr inbounds i8, i8* %64, i64 %12
  %97 = getelementptr inbounds i8, i8* %65, i64 %13
  %98 = add nuw nsw i32 %62, 1
  %99 = icmp eq i32 %98, 16
  br i1 %99, label %100, label %59

100:                                              ; preds = %59
  store i32 %93, i32* %8, align 4
  %101 = getelementptr inbounds i8*, i8** %2, i64 1
  %102 = load i8*, i8** %101, align 8
  br label %237

103:                                              ; preds = %368, %235
  ret void

104:                                              ; preds = %104, %56
  %105 = phi i8* [ %0, %56 ], [ %139, %104 ]
  %106 = phi i32 [ 0, %56 ], [ %138, %104 ]
  %107 = phi i32 [ 0, %56 ], [ %143, %104 ]
  %108 = phi i8* [ %58, %56 ], [ %140, %104 ]
  %109 = phi i8* [ %4, %56 ], [ %141, %104 ]
  %110 = phi i8* [ %5, %56 ], [ %142, %104 ]
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = bitcast i8* %108 to <4 x i8>*
  %115 = load <4 x i8>, <4 x i8>* %114, align 1
  %116 = zext <4 x i8> %115 to <4 x i32>
  %117 = mul nuw nsw <4 x i32> %116, %113
  %118 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %113
  %119 = bitcast i8* %109 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = mul nsw <4 x i32> %118, %121
  %123 = add nuw nsw <4 x i32> %117, <i32 32, i32 32, i32 32, i32 32>
  %124 = add nsw <4 x i32> %123, %122
  %125 = ashr <4 x i32> %124, <i32 6, i32 6, i32 6, i32 6>
  %126 = bitcast i8* %105 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1
  %128 = zext <4 x i8> %127 to <4 x i32>
  %129 = sub nsw <4 x i32> %125, %128
  %130 = icmp slt <4 x i32> %129, zeroinitializer
  %131 = sub nsw <4 x i32> zeroinitializer, %129
  %132 = select <4 x i1> %130, <4 x i32> %131, <4 x i32> %129
  %133 = shufflevector <4 x i32> %132, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %134 = add <4 x i32> %132, %133
  %135 = shufflevector <4 x i32> %134, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %136 = add <4 x i32> %134, %135
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = add i32 %137, %106
  %139 = getelementptr inbounds i8, i8* %105, i64 %11
  %140 = getelementptr inbounds i8, i8* %108, i64 %12
  %141 = getelementptr inbounds i8, i8* %109, i64 4
  %142 = getelementptr inbounds i8, i8* %110, i64 %13
  %143 = add nuw nsw i32 %107, 1
  %144 = icmp eq i32 %143, 16
  br i1 %144, label %145, label %104

145:                                              ; preds = %104
  %146 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %138, i32* %146, align 4
  %147 = getelementptr inbounds i8*, i8** %2, i64 2
  %148 = load i8*, i8** %147, align 8
  br label %149

149:                                              ; preds = %149, %145
  %150 = phi i8* [ %0, %145 ], [ %184, %149 ]
  %151 = phi i32 [ 0, %145 ], [ %183, %149 ]
  %152 = phi i32 [ 0, %145 ], [ %188, %149 ]
  %153 = phi i8* [ %148, %145 ], [ %185, %149 ]
  %154 = phi i8* [ %4, %145 ], [ %186, %149 ]
  %155 = phi i8* [ %5, %145 ], [ %187, %149 ]
  %156 = bitcast i8* %155 to <4 x i8>*
  %157 = load <4 x i8>, <4 x i8>* %156, align 1
  %158 = zext <4 x i8> %157 to <4 x i32>
  %159 = bitcast i8* %153 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = mul nuw nsw <4 x i32> %161, %158
  %163 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %158
  %164 = bitcast i8* %154 to <4 x i8>*
  %165 = load <4 x i8>, <4 x i8>* %164, align 1
  %166 = zext <4 x i8> %165 to <4 x i32>
  %167 = mul nsw <4 x i32> %163, %166
  %168 = add nuw nsw <4 x i32> %162, <i32 32, i32 32, i32 32, i32 32>
  %169 = add nsw <4 x i32> %168, %167
  %170 = ashr <4 x i32> %169, <i32 6, i32 6, i32 6, i32 6>
  %171 = bitcast i8* %150 to <4 x i8>*
  %172 = load <4 x i8>, <4 x i8>* %171, align 1
  %173 = zext <4 x i8> %172 to <4 x i32>
  %174 = sub nsw <4 x i32> %170, %173
  %175 = icmp slt <4 x i32> %174, zeroinitializer
  %176 = sub nsw <4 x i32> zeroinitializer, %174
  %177 = select <4 x i1> %175, <4 x i32> %176, <4 x i32> %174
  %178 = shufflevector <4 x i32> %177, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %179 = add <4 x i32> %177, %178
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %181 = add <4 x i32> %179, %180
  %182 = extractelement <4 x i32> %181, i32 0
  %183 = add i32 %182, %151
  %184 = getelementptr inbounds i8, i8* %150, i64 %11
  %185 = getelementptr inbounds i8, i8* %153, i64 %12
  %186 = getelementptr inbounds i8, i8* %154, i64 4
  %187 = getelementptr inbounds i8, i8* %155, i64 %13
  %188 = add nuw nsw i32 %152, 1
  %189 = icmp eq i32 %188, 16
  br i1 %189, label %190, label %149

190:                                              ; preds = %149
  %191 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %183, i32* %191, align 4
  %192 = getelementptr inbounds i8*, i8** %2, i64 3
  %193 = load i8*, i8** %192, align 8
  br label %194

194:                                              ; preds = %194, %190
  %195 = phi i8* [ %0, %190 ], [ %229, %194 ]
  %196 = phi i32 [ 0, %190 ], [ %228, %194 ]
  %197 = phi i32 [ 0, %190 ], [ %233, %194 ]
  %198 = phi i8* [ %193, %190 ], [ %230, %194 ]
  %199 = phi i8* [ %4, %190 ], [ %231, %194 ]
  %200 = phi i8* [ %5, %190 ], [ %232, %194 ]
  %201 = bitcast i8* %200 to <4 x i8>*
  %202 = load <4 x i8>, <4 x i8>* %201, align 1
  %203 = zext <4 x i8> %202 to <4 x i32>
  %204 = bitcast i8* %198 to <4 x i8>*
  %205 = load <4 x i8>, <4 x i8>* %204, align 1
  %206 = zext <4 x i8> %205 to <4 x i32>
  %207 = mul nuw nsw <4 x i32> %206, %203
  %208 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %203
  %209 = bitcast i8* %199 to <4 x i8>*
  %210 = load <4 x i8>, <4 x i8>* %209, align 1
  %211 = zext <4 x i8> %210 to <4 x i32>
  %212 = mul nsw <4 x i32> %208, %211
  %213 = add nuw nsw <4 x i32> %207, <i32 32, i32 32, i32 32, i32 32>
  %214 = add nsw <4 x i32> %213, %212
  %215 = ashr <4 x i32> %214, <i32 6, i32 6, i32 6, i32 6>
  %216 = bitcast i8* %195 to <4 x i8>*
  %217 = load <4 x i8>, <4 x i8>* %216, align 1
  %218 = zext <4 x i8> %217 to <4 x i32>
  %219 = sub nsw <4 x i32> %215, %218
  %220 = icmp slt <4 x i32> %219, zeroinitializer
  %221 = sub nsw <4 x i32> zeroinitializer, %219
  %222 = select <4 x i1> %220, <4 x i32> %221, <4 x i32> %219
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %224 = add <4 x i32> %222, %223
  %225 = shufflevector <4 x i32> %224, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %226 = add <4 x i32> %224, %225
  %227 = extractelement <4 x i32> %226, i32 0
  %228 = add i32 %227, %196
  %229 = getelementptr inbounds i8, i8* %195, i64 %11
  %230 = getelementptr inbounds i8, i8* %198, i64 %12
  %231 = getelementptr inbounds i8, i8* %199, i64 4
  %232 = getelementptr inbounds i8, i8* %200, i64 %13
  %233 = add nuw nsw i32 %197, 1
  %234 = icmp eq i32 %233, 16
  br i1 %234, label %235, label %194

235:                                              ; preds = %194
  %236 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %228, i32* %236, align 4
  br label %103

237:                                              ; preds = %237, %100
  %238 = phi i8* [ %0, %100 ], [ %272, %237 ]
  %239 = phi i32 [ 0, %100 ], [ %271, %237 ]
  %240 = phi i32 [ 0, %100 ], [ %276, %237 ]
  %241 = phi i8* [ %4, %100 ], [ %273, %237 ]
  %242 = phi i8* [ %102, %100 ], [ %274, %237 ]
  %243 = phi i8* [ %5, %100 ], [ %275, %237 ]
  %244 = bitcast i8* %243 to <4 x i8>*
  %245 = load <4 x i8>, <4 x i8>* %244, align 1
  %246 = zext <4 x i8> %245 to <4 x i32>
  %247 = bitcast i8* %241 to <4 x i8>*
  %248 = load <4 x i8>, <4 x i8>* %247, align 1
  %249 = zext <4 x i8> %248 to <4 x i32>
  %250 = mul nuw nsw <4 x i32> %249, %246
  %251 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %246
  %252 = bitcast i8* %242 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = mul nsw <4 x i32> %251, %254
  %256 = add nuw nsw <4 x i32> %250, <i32 32, i32 32, i32 32, i32 32>
  %257 = add nsw <4 x i32> %256, %255
  %258 = ashr <4 x i32> %257, <i32 6, i32 6, i32 6, i32 6>
  %259 = bitcast i8* %238 to <4 x i8>*
  %260 = load <4 x i8>, <4 x i8>* %259, align 1
  %261 = zext <4 x i8> %260 to <4 x i32>
  %262 = sub nsw <4 x i32> %258, %261
  %263 = icmp slt <4 x i32> %262, zeroinitializer
  %264 = sub nsw <4 x i32> zeroinitializer, %262
  %265 = select <4 x i1> %263, <4 x i32> %264, <4 x i32> %262
  %266 = shufflevector <4 x i32> %265, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %267 = add <4 x i32> %265, %266
  %268 = shufflevector <4 x i32> %267, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %269 = add <4 x i32> %267, %268
  %270 = extractelement <4 x i32> %269, i32 0
  %271 = add i32 %270, %239
  %272 = getelementptr inbounds i8, i8* %238, i64 %11
  %273 = getelementptr inbounds i8, i8* %241, i64 4
  %274 = getelementptr inbounds i8, i8* %242, i64 %12
  %275 = getelementptr inbounds i8, i8* %243, i64 %13
  %276 = add nuw nsw i32 %240, 1
  %277 = icmp eq i32 %276, 16
  br i1 %277, label %278, label %237

278:                                              ; preds = %237
  %279 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %271, i32* %279, align 4
  %280 = getelementptr inbounds i8*, i8** %2, i64 2
  %281 = load i8*, i8** %280, align 8
  br label %282

282:                                              ; preds = %282, %278
  %283 = phi i8* [ %0, %278 ], [ %317, %282 ]
  %284 = phi i32 [ 0, %278 ], [ %316, %282 ]
  %285 = phi i32 [ 0, %278 ], [ %321, %282 ]
  %286 = phi i8* [ %4, %278 ], [ %318, %282 ]
  %287 = phi i8* [ %281, %278 ], [ %319, %282 ]
  %288 = phi i8* [ %5, %278 ], [ %320, %282 ]
  %289 = bitcast i8* %288 to <4 x i8>*
  %290 = load <4 x i8>, <4 x i8>* %289, align 1
  %291 = zext <4 x i8> %290 to <4 x i32>
  %292 = bitcast i8* %286 to <4 x i8>*
  %293 = load <4 x i8>, <4 x i8>* %292, align 1
  %294 = zext <4 x i8> %293 to <4 x i32>
  %295 = mul nuw nsw <4 x i32> %294, %291
  %296 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %291
  %297 = bitcast i8* %287 to <4 x i8>*
  %298 = load <4 x i8>, <4 x i8>* %297, align 1
  %299 = zext <4 x i8> %298 to <4 x i32>
  %300 = mul nsw <4 x i32> %296, %299
  %301 = add nuw nsw <4 x i32> %295, <i32 32, i32 32, i32 32, i32 32>
  %302 = add nsw <4 x i32> %301, %300
  %303 = ashr <4 x i32> %302, <i32 6, i32 6, i32 6, i32 6>
  %304 = bitcast i8* %283 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = zext <4 x i8> %305 to <4 x i32>
  %307 = sub nsw <4 x i32> %303, %306
  %308 = icmp slt <4 x i32> %307, zeroinitializer
  %309 = sub nsw <4 x i32> zeroinitializer, %307
  %310 = select <4 x i1> %308, <4 x i32> %309, <4 x i32> %307
  %311 = shufflevector <4 x i32> %310, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %312 = add <4 x i32> %310, %311
  %313 = shufflevector <4 x i32> %312, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %314 = add <4 x i32> %312, %313
  %315 = extractelement <4 x i32> %314, i32 0
  %316 = add i32 %315, %284
  %317 = getelementptr inbounds i8, i8* %283, i64 %11
  %318 = getelementptr inbounds i8, i8* %286, i64 4
  %319 = getelementptr inbounds i8, i8* %287, i64 %12
  %320 = getelementptr inbounds i8, i8* %288, i64 %13
  %321 = add nuw nsw i32 %285, 1
  %322 = icmp eq i32 %321, 16
  br i1 %322, label %323, label %282

323:                                              ; preds = %282
  %324 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %316, i32* %324, align 4
  %325 = getelementptr inbounds i8*, i8** %2, i64 3
  %326 = load i8*, i8** %325, align 8
  br label %327

327:                                              ; preds = %327, %323
  %328 = phi i8* [ %0, %323 ], [ %362, %327 ]
  %329 = phi i32 [ 0, %323 ], [ %361, %327 ]
  %330 = phi i32 [ 0, %323 ], [ %366, %327 ]
  %331 = phi i8* [ %4, %323 ], [ %363, %327 ]
  %332 = phi i8* [ %326, %323 ], [ %364, %327 ]
  %333 = phi i8* [ %5, %323 ], [ %365, %327 ]
  %334 = bitcast i8* %333 to <4 x i8>*
  %335 = load <4 x i8>, <4 x i8>* %334, align 1
  %336 = zext <4 x i8> %335 to <4 x i32>
  %337 = bitcast i8* %331 to <4 x i8>*
  %338 = load <4 x i8>, <4 x i8>* %337, align 1
  %339 = zext <4 x i8> %338 to <4 x i32>
  %340 = mul nuw nsw <4 x i32> %339, %336
  %341 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %336
  %342 = bitcast i8* %332 to <4 x i8>*
  %343 = load <4 x i8>, <4 x i8>* %342, align 1
  %344 = zext <4 x i8> %343 to <4 x i32>
  %345 = mul nsw <4 x i32> %341, %344
  %346 = add nuw nsw <4 x i32> %340, <i32 32, i32 32, i32 32, i32 32>
  %347 = add nsw <4 x i32> %346, %345
  %348 = ashr <4 x i32> %347, <i32 6, i32 6, i32 6, i32 6>
  %349 = bitcast i8* %328 to <4 x i8>*
  %350 = load <4 x i8>, <4 x i8>* %349, align 1
  %351 = zext <4 x i8> %350 to <4 x i32>
  %352 = sub nsw <4 x i32> %348, %351
  %353 = icmp slt <4 x i32> %352, zeroinitializer
  %354 = sub nsw <4 x i32> zeroinitializer, %352
  %355 = select <4 x i1> %353, <4 x i32> %354, <4 x i32> %352
  %356 = shufflevector <4 x i32> %355, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %357 = add <4 x i32> %355, %356
  %358 = shufflevector <4 x i32> %357, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %359 = add <4 x i32> %357, %358
  %360 = extractelement <4 x i32> %359, i32 0
  %361 = add i32 %360, %329
  %362 = getelementptr inbounds i8, i8* %328, i64 %11
  %363 = getelementptr inbounds i8, i8* %331, i64 4
  %364 = getelementptr inbounds i8, i8* %332, i64 %12
  %365 = getelementptr inbounds i8, i8* %333, i64 %13
  %366 = add nuw nsw i32 %330, 1
  %367 = icmp eq i32 %366, 16
  br i1 %367, label %368, label %327

368:                                              ; preds = %327
  %369 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %361, i32* %369, align 4
  br label %103
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x4_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = bitcast i8* %5 to <4 x i8>*
  %14 = load <4 x i8>, <4 x i8>* %13, align 1
  %15 = zext <4 x i8> %14 to <4 x i32>
  br i1 %9, label %456, label %16

16:                                               ; preds = %8
  %17 = bitcast i8* %4 to <4 x i8>*
  %18 = load <4 x i8>, <4 x i8>* %17, align 1
  %19 = zext <4 x i8> %18 to <4 x i32>
  %20 = mul nuw nsw <4 x i32> %19, %15
  %21 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %15
  %22 = bitcast i8* %2 to <4 x i8>*
  %23 = load <4 x i8>, <4 x i8>* %22, align 1
  %24 = zext <4 x i8> %23 to <4 x i32>
  %25 = mul nsw <4 x i32> %21, %24
  %26 = add nuw nsw <4 x i32> %20, <i32 32, i32 32, i32 32, i32 32>
  %27 = add nsw <4 x i32> %26, %25
  %28 = ashr <4 x i32> %27, <i32 6, i32 6, i32 6, i32 6>
  %29 = bitcast i8* %0 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = sub nsw <4 x i32> %28, %31
  %33 = icmp slt <4 x i32> %32, zeroinitializer
  %34 = sub nsw <4 x i32> zeroinitializer, %32
  %35 = select <4 x i1> %33, <4 x i32> %34, <4 x i32> %32
  %36 = getelementptr inbounds i8, i8* %5, i64 4
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %38 to <4 x i32>
  %40 = getelementptr inbounds i8, i8* %4, i64 4
  %41 = bitcast i8* %40 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  %43 = zext <4 x i8> %42 to <4 x i32>
  %44 = mul nuw nsw <4 x i32> %43, %39
  %45 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %39
  %46 = getelementptr inbounds i8, i8* %2, i64 4
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = zext <4 x i8> %48 to <4 x i32>
  %50 = mul nsw <4 x i32> %45, %49
  %51 = add nuw nsw <4 x i32> %44, <i32 32, i32 32, i32 32, i32 32>
  %52 = add nsw <4 x i32> %51, %50
  %53 = ashr <4 x i32> %52, <i32 6, i32 6, i32 6, i32 6>
  %54 = getelementptr inbounds i8, i8* %0, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = sub nsw <4 x i32> %53, %57
  %59 = icmp slt <4 x i32> %58, zeroinitializer
  %60 = sub nsw <4 x i32> zeroinitializer, %58
  %61 = select <4 x i1> %59, <4 x i32> %60, <4 x i32> %58
  %62 = add nuw nsw <4 x i32> %61, %35
  %63 = getelementptr inbounds i8, i8* %5, i64 8
  %64 = bitcast i8* %63 to <4 x i8>*
  %65 = load <4 x i8>, <4 x i8>* %64, align 1
  %66 = zext <4 x i8> %65 to <4 x i32>
  %67 = getelementptr inbounds i8, i8* %4, i64 8
  %68 = bitcast i8* %67 to <4 x i8>*
  %69 = load <4 x i8>, <4 x i8>* %68, align 1
  %70 = zext <4 x i8> %69 to <4 x i32>
  %71 = mul nuw nsw <4 x i32> %70, %66
  %72 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %66
  %73 = getelementptr inbounds i8, i8* %2, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = mul nsw <4 x i32> %72, %76
  %78 = add nuw nsw <4 x i32> %71, <i32 32, i32 32, i32 32, i32 32>
  %79 = add nsw <4 x i32> %78, %77
  %80 = ashr <4 x i32> %79, <i32 6, i32 6, i32 6, i32 6>
  %81 = getelementptr inbounds i8, i8* %0, i64 8
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = sub nsw <4 x i32> %80, %84
  %86 = icmp slt <4 x i32> %85, zeroinitializer
  %87 = sub nsw <4 x i32> zeroinitializer, %85
  %88 = select <4 x i1> %86, <4 x i32> %87, <4 x i32> %85
  %89 = add nuw nsw <4 x i32> %88, %62
  %90 = getelementptr inbounds i8, i8* %5, i64 12
  %91 = bitcast i8* %90 to <4 x i8>*
  %92 = load <4 x i8>, <4 x i8>* %91, align 1
  %93 = zext <4 x i8> %92 to <4 x i32>
  %94 = getelementptr inbounds i8, i8* %4, i64 12
  %95 = bitcast i8* %94 to <4 x i8>*
  %96 = load <4 x i8>, <4 x i8>* %95, align 1
  %97 = zext <4 x i8> %96 to <4 x i32>
  %98 = mul nuw nsw <4 x i32> %97, %93
  %99 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %93
  %100 = getelementptr inbounds i8, i8* %2, i64 12
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = zext <4 x i8> %102 to <4 x i32>
  %104 = mul nsw <4 x i32> %99, %103
  %105 = add nuw nsw <4 x i32> %98, <i32 32, i32 32, i32 32, i32 32>
  %106 = add nsw <4 x i32> %105, %104
  %107 = ashr <4 x i32> %106, <i32 6, i32 6, i32 6, i32 6>
  %108 = getelementptr inbounds i8, i8* %0, i64 12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = sub nsw <4 x i32> %107, %111
  %113 = icmp slt <4 x i32> %112, zeroinitializer
  %114 = sub nsw <4 x i32> zeroinitializer, %112
  %115 = select <4 x i1> %113, <4 x i32> %114, <4 x i32> %112
  %116 = add nuw nsw <4 x i32> %115, %89
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %118 = add <4 x i32> %116, %117
  %119 = getelementptr inbounds i8, i8* %0, i64 %10
  %120 = getelementptr inbounds i8, i8* %2, i64 %11
  %121 = getelementptr inbounds i8, i8* %5, i64 %12
  %122 = getelementptr inbounds i8, i8* %4, i64 16
  %123 = shufflevector <4 x i32> %118, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %124 = add <4 x i32> %118, %123
  %125 = shufflevector <4 x i32> %124, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %126 = bitcast i8* %121 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1
  %128 = zext <4 x i8> %127 to <4 x i32>
  %129 = bitcast i8* %122 to <4 x i8>*
  %130 = load <4 x i8>, <4 x i8>* %129, align 1
  %131 = zext <4 x i8> %130 to <4 x i32>
  %132 = mul nuw nsw <4 x i32> %131, %128
  %133 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %128
  %134 = bitcast i8* %120 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1
  %136 = zext <4 x i8> %135 to <4 x i32>
  %137 = mul nsw <4 x i32> %133, %136
  %138 = add nuw nsw <4 x i32> %132, <i32 32, i32 32, i32 32, i32 32>
  %139 = add nsw <4 x i32> %138, %137
  %140 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %141 = bitcast i8* %119 to <4 x i8>*
  %142 = load <4 x i8>, <4 x i8>* %141, align 1
  %143 = zext <4 x i8> %142 to <4 x i32>
  %144 = sub nsw <4 x i32> %140, %143
  %145 = icmp slt <4 x i32> %144, zeroinitializer
  %146 = sub nsw <4 x i32> zeroinitializer, %144
  %147 = select <4 x i1> %145, <4 x i32> %146, <4 x i32> %144
  %148 = add <4 x i32> %147, %125
  %149 = getelementptr inbounds i8, i8* %121, i64 4
  %150 = bitcast i8* %149 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = zext <4 x i8> %151 to <4 x i32>
  %153 = getelementptr inbounds i8, i8* %4, i64 20
  %154 = bitcast i8* %153 to <4 x i8>*
  %155 = load <4 x i8>, <4 x i8>* %154, align 1
  %156 = zext <4 x i8> %155 to <4 x i32>
  %157 = mul nuw nsw <4 x i32> %156, %152
  %158 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %152
  %159 = getelementptr inbounds i8, i8* %120, i64 4
  %160 = bitcast i8* %159 to <4 x i8>*
  %161 = load <4 x i8>, <4 x i8>* %160, align 1
  %162 = zext <4 x i8> %161 to <4 x i32>
  %163 = mul nsw <4 x i32> %158, %162
  %164 = add nuw nsw <4 x i32> %157, <i32 32, i32 32, i32 32, i32 32>
  %165 = add nsw <4 x i32> %164, %163
  %166 = ashr <4 x i32> %165, <i32 6, i32 6, i32 6, i32 6>
  %167 = getelementptr inbounds i8, i8* %119, i64 4
  %168 = bitcast i8* %167 to <4 x i8>*
  %169 = load <4 x i8>, <4 x i8>* %168, align 1
  %170 = zext <4 x i8> %169 to <4 x i32>
  %171 = sub nsw <4 x i32> %166, %170
  %172 = icmp slt <4 x i32> %171, zeroinitializer
  %173 = sub nsw <4 x i32> zeroinitializer, %171
  %174 = select <4 x i1> %172, <4 x i32> %173, <4 x i32> %171
  %175 = add <4 x i32> %174, %148
  %176 = getelementptr inbounds i8, i8* %121, i64 8
  %177 = bitcast i8* %176 to <4 x i8>*
  %178 = load <4 x i8>, <4 x i8>* %177, align 1
  %179 = zext <4 x i8> %178 to <4 x i32>
  %180 = getelementptr inbounds i8, i8* %4, i64 24
  %181 = bitcast i8* %180 to <4 x i8>*
  %182 = load <4 x i8>, <4 x i8>* %181, align 1
  %183 = zext <4 x i8> %182 to <4 x i32>
  %184 = mul nuw nsw <4 x i32> %183, %179
  %185 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %179
  %186 = getelementptr inbounds i8, i8* %120, i64 8
  %187 = bitcast i8* %186 to <4 x i8>*
  %188 = load <4 x i8>, <4 x i8>* %187, align 1
  %189 = zext <4 x i8> %188 to <4 x i32>
  %190 = mul nsw <4 x i32> %185, %189
  %191 = add nuw nsw <4 x i32> %184, <i32 32, i32 32, i32 32, i32 32>
  %192 = add nsw <4 x i32> %191, %190
  %193 = ashr <4 x i32> %192, <i32 6, i32 6, i32 6, i32 6>
  %194 = getelementptr inbounds i8, i8* %119, i64 8
  %195 = bitcast i8* %194 to <4 x i8>*
  %196 = load <4 x i8>, <4 x i8>* %195, align 1
  %197 = zext <4 x i8> %196 to <4 x i32>
  %198 = sub nsw <4 x i32> %193, %197
  %199 = icmp slt <4 x i32> %198, zeroinitializer
  %200 = sub nsw <4 x i32> zeroinitializer, %198
  %201 = select <4 x i1> %199, <4 x i32> %200, <4 x i32> %198
  %202 = add <4 x i32> %201, %175
  %203 = getelementptr inbounds i8, i8* %121, i64 12
  %204 = bitcast i8* %203 to <4 x i8>*
  %205 = load <4 x i8>, <4 x i8>* %204, align 1
  %206 = zext <4 x i8> %205 to <4 x i32>
  %207 = getelementptr inbounds i8, i8* %4, i64 28
  %208 = bitcast i8* %207 to <4 x i8>*
  %209 = load <4 x i8>, <4 x i8>* %208, align 1
  %210 = zext <4 x i8> %209 to <4 x i32>
  %211 = mul nuw nsw <4 x i32> %210, %206
  %212 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %206
  %213 = getelementptr inbounds i8, i8* %120, i64 12
  %214 = bitcast i8* %213 to <4 x i8>*
  %215 = load <4 x i8>, <4 x i8>* %214, align 1
  %216 = zext <4 x i8> %215 to <4 x i32>
  %217 = mul nsw <4 x i32> %212, %216
  %218 = add nuw nsw <4 x i32> %211, <i32 32, i32 32, i32 32, i32 32>
  %219 = add nsw <4 x i32> %218, %217
  %220 = ashr <4 x i32> %219, <i32 6, i32 6, i32 6, i32 6>
  %221 = getelementptr inbounds i8, i8* %119, i64 12
  %222 = bitcast i8* %221 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1
  %224 = zext <4 x i8> %223 to <4 x i32>
  %225 = sub nsw <4 x i32> %220, %224
  %226 = icmp slt <4 x i32> %225, zeroinitializer
  %227 = sub nsw <4 x i32> zeroinitializer, %225
  %228 = select <4 x i1> %226, <4 x i32> %227, <4 x i32> %225
  %229 = add <4 x i32> %228, %202
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %231 = add <4 x i32> %229, %230
  %232 = getelementptr inbounds i8, i8* %119, i64 %10
  %233 = getelementptr inbounds i8, i8* %120, i64 %11
  %234 = getelementptr inbounds i8, i8* %121, i64 %12
  %235 = getelementptr inbounds i8, i8* %4, i64 32
  %236 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %237 = add <4 x i32> %231, %236
  %238 = shufflevector <4 x i32> %237, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %239 = bitcast i8* %234 to <4 x i8>*
  %240 = load <4 x i8>, <4 x i8>* %239, align 1
  %241 = zext <4 x i8> %240 to <4 x i32>
  %242 = bitcast i8* %235 to <4 x i8>*
  %243 = load <4 x i8>, <4 x i8>* %242, align 1
  %244 = zext <4 x i8> %243 to <4 x i32>
  %245 = mul nuw nsw <4 x i32> %244, %241
  %246 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %241
  %247 = bitcast i8* %233 to <4 x i8>*
  %248 = load <4 x i8>, <4 x i8>* %247, align 1
  %249 = zext <4 x i8> %248 to <4 x i32>
  %250 = mul nsw <4 x i32> %246, %249
  %251 = add nuw nsw <4 x i32> %245, <i32 32, i32 32, i32 32, i32 32>
  %252 = add nsw <4 x i32> %251, %250
  %253 = ashr <4 x i32> %252, <i32 6, i32 6, i32 6, i32 6>
  %254 = bitcast i8* %232 to <4 x i8>*
  %255 = load <4 x i8>, <4 x i8>* %254, align 1
  %256 = zext <4 x i8> %255 to <4 x i32>
  %257 = sub nsw <4 x i32> %253, %256
  %258 = icmp slt <4 x i32> %257, zeroinitializer
  %259 = sub nsw <4 x i32> zeroinitializer, %257
  %260 = select <4 x i1> %258, <4 x i32> %259, <4 x i32> %257
  %261 = add <4 x i32> %260, %238
  %262 = getelementptr inbounds i8, i8* %234, i64 4
  %263 = bitcast i8* %262 to <4 x i8>*
  %264 = load <4 x i8>, <4 x i8>* %263, align 1
  %265 = zext <4 x i8> %264 to <4 x i32>
  %266 = getelementptr inbounds i8, i8* %4, i64 36
  %267 = bitcast i8* %266 to <4 x i8>*
  %268 = load <4 x i8>, <4 x i8>* %267, align 1
  %269 = zext <4 x i8> %268 to <4 x i32>
  %270 = mul nuw nsw <4 x i32> %269, %265
  %271 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %265
  %272 = getelementptr inbounds i8, i8* %233, i64 4
  %273 = bitcast i8* %272 to <4 x i8>*
  %274 = load <4 x i8>, <4 x i8>* %273, align 1
  %275 = zext <4 x i8> %274 to <4 x i32>
  %276 = mul nsw <4 x i32> %271, %275
  %277 = add nuw nsw <4 x i32> %270, <i32 32, i32 32, i32 32, i32 32>
  %278 = add nsw <4 x i32> %277, %276
  %279 = ashr <4 x i32> %278, <i32 6, i32 6, i32 6, i32 6>
  %280 = getelementptr inbounds i8, i8* %232, i64 4
  %281 = bitcast i8* %280 to <4 x i8>*
  %282 = load <4 x i8>, <4 x i8>* %281, align 1
  %283 = zext <4 x i8> %282 to <4 x i32>
  %284 = sub nsw <4 x i32> %279, %283
  %285 = icmp slt <4 x i32> %284, zeroinitializer
  %286 = sub nsw <4 x i32> zeroinitializer, %284
  %287 = select <4 x i1> %285, <4 x i32> %286, <4 x i32> %284
  %288 = add <4 x i32> %287, %261
  %289 = getelementptr inbounds i8, i8* %234, i64 8
  %290 = bitcast i8* %289 to <4 x i8>*
  %291 = load <4 x i8>, <4 x i8>* %290, align 1
  %292 = zext <4 x i8> %291 to <4 x i32>
  %293 = getelementptr inbounds i8, i8* %4, i64 40
  %294 = bitcast i8* %293 to <4 x i8>*
  %295 = load <4 x i8>, <4 x i8>* %294, align 1
  %296 = zext <4 x i8> %295 to <4 x i32>
  %297 = mul nuw nsw <4 x i32> %296, %292
  %298 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %292
  %299 = getelementptr inbounds i8, i8* %233, i64 8
  %300 = bitcast i8* %299 to <4 x i8>*
  %301 = load <4 x i8>, <4 x i8>* %300, align 1
  %302 = zext <4 x i8> %301 to <4 x i32>
  %303 = mul nsw <4 x i32> %298, %302
  %304 = add nuw nsw <4 x i32> %297, <i32 32, i32 32, i32 32, i32 32>
  %305 = add nsw <4 x i32> %304, %303
  %306 = ashr <4 x i32> %305, <i32 6, i32 6, i32 6, i32 6>
  %307 = getelementptr inbounds i8, i8* %232, i64 8
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = zext <4 x i8> %309 to <4 x i32>
  %311 = sub nsw <4 x i32> %306, %310
  %312 = icmp slt <4 x i32> %311, zeroinitializer
  %313 = sub nsw <4 x i32> zeroinitializer, %311
  %314 = select <4 x i1> %312, <4 x i32> %313, <4 x i32> %311
  %315 = add <4 x i32> %314, %288
  %316 = getelementptr inbounds i8, i8* %234, i64 12
  %317 = bitcast i8* %316 to <4 x i8>*
  %318 = load <4 x i8>, <4 x i8>* %317, align 1
  %319 = zext <4 x i8> %318 to <4 x i32>
  %320 = getelementptr inbounds i8, i8* %4, i64 44
  %321 = bitcast i8* %320 to <4 x i8>*
  %322 = load <4 x i8>, <4 x i8>* %321, align 1
  %323 = zext <4 x i8> %322 to <4 x i32>
  %324 = mul nuw nsw <4 x i32> %323, %319
  %325 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %319
  %326 = getelementptr inbounds i8, i8* %233, i64 12
  %327 = bitcast i8* %326 to <4 x i8>*
  %328 = load <4 x i8>, <4 x i8>* %327, align 1
  %329 = zext <4 x i8> %328 to <4 x i32>
  %330 = mul nsw <4 x i32> %325, %329
  %331 = add nuw nsw <4 x i32> %324, <i32 32, i32 32, i32 32, i32 32>
  %332 = add nsw <4 x i32> %331, %330
  %333 = ashr <4 x i32> %332, <i32 6, i32 6, i32 6, i32 6>
  %334 = getelementptr inbounds i8, i8* %232, i64 12
  %335 = bitcast i8* %334 to <4 x i8>*
  %336 = load <4 x i8>, <4 x i8>* %335, align 1
  %337 = zext <4 x i8> %336 to <4 x i32>
  %338 = sub nsw <4 x i32> %333, %337
  %339 = icmp slt <4 x i32> %338, zeroinitializer
  %340 = sub nsw <4 x i32> zeroinitializer, %338
  %341 = select <4 x i1> %339, <4 x i32> %340, <4 x i32> %338
  %342 = add <4 x i32> %341, %315
  %343 = shufflevector <4 x i32> %342, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %344 = add <4 x i32> %342, %343
  %345 = getelementptr inbounds i8, i8* %232, i64 %10
  %346 = getelementptr inbounds i8, i8* %233, i64 %11
  %347 = getelementptr inbounds i8, i8* %234, i64 %12
  %348 = getelementptr inbounds i8, i8* %4, i64 48
  %349 = shufflevector <4 x i32> %344, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %350 = add <4 x i32> %344, %349
  %351 = shufflevector <4 x i32> %350, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %352 = bitcast i8* %347 to <4 x i8>*
  %353 = load <4 x i8>, <4 x i8>* %352, align 1
  %354 = zext <4 x i8> %353 to <4 x i32>
  %355 = bitcast i8* %348 to <4 x i8>*
  %356 = load <4 x i8>, <4 x i8>* %355, align 1
  %357 = zext <4 x i8> %356 to <4 x i32>
  %358 = mul nuw nsw <4 x i32> %357, %354
  %359 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %354
  %360 = bitcast i8* %346 to <4 x i8>*
  %361 = load <4 x i8>, <4 x i8>* %360, align 1
  %362 = zext <4 x i8> %361 to <4 x i32>
  %363 = mul nsw <4 x i32> %359, %362
  %364 = add nuw nsw <4 x i32> %358, <i32 32, i32 32, i32 32, i32 32>
  %365 = add nsw <4 x i32> %364, %363
  %366 = ashr <4 x i32> %365, <i32 6, i32 6, i32 6, i32 6>
  %367 = bitcast i8* %345 to <4 x i8>*
  %368 = load <4 x i8>, <4 x i8>* %367, align 1
  %369 = zext <4 x i8> %368 to <4 x i32>
  %370 = sub nsw <4 x i32> %366, %369
  %371 = icmp slt <4 x i32> %370, zeroinitializer
  %372 = sub nsw <4 x i32> zeroinitializer, %370
  %373 = select <4 x i1> %371, <4 x i32> %372, <4 x i32> %370
  %374 = add <4 x i32> %373, %351
  %375 = getelementptr inbounds i8, i8* %347, i64 4
  %376 = bitcast i8* %375 to <4 x i8>*
  %377 = load <4 x i8>, <4 x i8>* %376, align 1
  %378 = zext <4 x i8> %377 to <4 x i32>
  %379 = getelementptr inbounds i8, i8* %4, i64 52
  %380 = bitcast i8* %379 to <4 x i8>*
  %381 = load <4 x i8>, <4 x i8>* %380, align 1
  %382 = zext <4 x i8> %381 to <4 x i32>
  %383 = mul nuw nsw <4 x i32> %382, %378
  %384 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %378
  %385 = getelementptr inbounds i8, i8* %346, i64 4
  %386 = bitcast i8* %385 to <4 x i8>*
  %387 = load <4 x i8>, <4 x i8>* %386, align 1
  %388 = zext <4 x i8> %387 to <4 x i32>
  %389 = mul nsw <4 x i32> %384, %388
  %390 = add nuw nsw <4 x i32> %383, <i32 32, i32 32, i32 32, i32 32>
  %391 = add nsw <4 x i32> %390, %389
  %392 = ashr <4 x i32> %391, <i32 6, i32 6, i32 6, i32 6>
  %393 = getelementptr inbounds i8, i8* %345, i64 4
  %394 = bitcast i8* %393 to <4 x i8>*
  %395 = load <4 x i8>, <4 x i8>* %394, align 1
  %396 = zext <4 x i8> %395 to <4 x i32>
  %397 = sub nsw <4 x i32> %392, %396
  %398 = icmp slt <4 x i32> %397, zeroinitializer
  %399 = sub nsw <4 x i32> zeroinitializer, %397
  %400 = select <4 x i1> %398, <4 x i32> %399, <4 x i32> %397
  %401 = add <4 x i32> %400, %374
  %402 = getelementptr inbounds i8, i8* %347, i64 8
  %403 = bitcast i8* %402 to <4 x i8>*
  %404 = load <4 x i8>, <4 x i8>* %403, align 1
  %405 = zext <4 x i8> %404 to <4 x i32>
  %406 = getelementptr inbounds i8, i8* %4, i64 56
  %407 = bitcast i8* %406 to <4 x i8>*
  %408 = load <4 x i8>, <4 x i8>* %407, align 1
  %409 = zext <4 x i8> %408 to <4 x i32>
  %410 = mul nuw nsw <4 x i32> %409, %405
  %411 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %405
  %412 = getelementptr inbounds i8, i8* %346, i64 8
  %413 = bitcast i8* %412 to <4 x i8>*
  %414 = load <4 x i8>, <4 x i8>* %413, align 1
  %415 = zext <4 x i8> %414 to <4 x i32>
  %416 = mul nsw <4 x i32> %411, %415
  %417 = add nuw nsw <4 x i32> %410, <i32 32, i32 32, i32 32, i32 32>
  %418 = add nsw <4 x i32> %417, %416
  %419 = ashr <4 x i32> %418, <i32 6, i32 6, i32 6, i32 6>
  %420 = getelementptr inbounds i8, i8* %345, i64 8
  %421 = bitcast i8* %420 to <4 x i8>*
  %422 = load <4 x i8>, <4 x i8>* %421, align 1
  %423 = zext <4 x i8> %422 to <4 x i32>
  %424 = sub nsw <4 x i32> %419, %423
  %425 = icmp slt <4 x i32> %424, zeroinitializer
  %426 = sub nsw <4 x i32> zeroinitializer, %424
  %427 = select <4 x i1> %425, <4 x i32> %426, <4 x i32> %424
  %428 = add <4 x i32> %427, %401
  %429 = getelementptr inbounds i8, i8* %347, i64 12
  %430 = bitcast i8* %429 to <4 x i8>*
  %431 = load <4 x i8>, <4 x i8>* %430, align 1
  %432 = zext <4 x i8> %431 to <4 x i32>
  %433 = getelementptr inbounds i8, i8* %4, i64 60
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = zext <4 x i8> %435 to <4 x i32>
  %437 = mul nuw nsw <4 x i32> %436, %432
  %438 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %432
  %439 = getelementptr inbounds i8, i8* %346, i64 12
  %440 = bitcast i8* %439 to <4 x i8>*
  %441 = load <4 x i8>, <4 x i8>* %440, align 1
  %442 = zext <4 x i8> %441 to <4 x i32>
  %443 = mul nsw <4 x i32> %438, %442
  %444 = add nuw nsw <4 x i32> %437, <i32 32, i32 32, i32 32, i32 32>
  %445 = add nsw <4 x i32> %444, %443
  %446 = ashr <4 x i32> %445, <i32 6, i32 6, i32 6, i32 6>
  %447 = getelementptr inbounds i8, i8* %345, i64 12
  %448 = bitcast i8* %447 to <4 x i8>*
  %449 = load <4 x i8>, <4 x i8>* %448, align 1
  %450 = zext <4 x i8> %449 to <4 x i32>
  %451 = sub nsw <4 x i32> %446, %450
  %452 = icmp slt <4 x i32> %451, zeroinitializer
  %453 = sub nsw <4 x i32> zeroinitializer, %451
  %454 = select <4 x i1> %452, <4 x i32> %453, <4 x i32> %451
  %455 = add <4 x i32> %454, %428
  br label %896

456:                                              ; preds = %8
  %457 = bitcast i8* %2 to <4 x i8>*
  %458 = load <4 x i8>, <4 x i8>* %457, align 1
  %459 = zext <4 x i8> %458 to <4 x i32>
  %460 = mul nuw nsw <4 x i32> %459, %15
  %461 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %15
  %462 = bitcast i8* %4 to <4 x i8>*
  %463 = load <4 x i8>, <4 x i8>* %462, align 1
  %464 = zext <4 x i8> %463 to <4 x i32>
  %465 = mul nsw <4 x i32> %461, %464
  %466 = add nuw nsw <4 x i32> %460, <i32 32, i32 32, i32 32, i32 32>
  %467 = add nsw <4 x i32> %466, %465
  %468 = ashr <4 x i32> %467, <i32 6, i32 6, i32 6, i32 6>
  %469 = bitcast i8* %0 to <4 x i8>*
  %470 = load <4 x i8>, <4 x i8>* %469, align 1
  %471 = zext <4 x i8> %470 to <4 x i32>
  %472 = sub nsw <4 x i32> %468, %471
  %473 = icmp slt <4 x i32> %472, zeroinitializer
  %474 = sub nsw <4 x i32> zeroinitializer, %472
  %475 = select <4 x i1> %473, <4 x i32> %474, <4 x i32> %472
  %476 = getelementptr inbounds i8, i8* %5, i64 4
  %477 = bitcast i8* %476 to <4 x i8>*
  %478 = load <4 x i8>, <4 x i8>* %477, align 1
  %479 = zext <4 x i8> %478 to <4 x i32>
  %480 = getelementptr inbounds i8, i8* %2, i64 4
  %481 = bitcast i8* %480 to <4 x i8>*
  %482 = load <4 x i8>, <4 x i8>* %481, align 1
  %483 = zext <4 x i8> %482 to <4 x i32>
  %484 = mul nuw nsw <4 x i32> %483, %479
  %485 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %479
  %486 = getelementptr inbounds i8, i8* %4, i64 4
  %487 = bitcast i8* %486 to <4 x i8>*
  %488 = load <4 x i8>, <4 x i8>* %487, align 1
  %489 = zext <4 x i8> %488 to <4 x i32>
  %490 = mul nsw <4 x i32> %485, %489
  %491 = add nuw nsw <4 x i32> %484, <i32 32, i32 32, i32 32, i32 32>
  %492 = add nsw <4 x i32> %491, %490
  %493 = ashr <4 x i32> %492, <i32 6, i32 6, i32 6, i32 6>
  %494 = getelementptr inbounds i8, i8* %0, i64 4
  %495 = bitcast i8* %494 to <4 x i8>*
  %496 = load <4 x i8>, <4 x i8>* %495, align 1
  %497 = zext <4 x i8> %496 to <4 x i32>
  %498 = sub nsw <4 x i32> %493, %497
  %499 = icmp slt <4 x i32> %498, zeroinitializer
  %500 = sub nsw <4 x i32> zeroinitializer, %498
  %501 = select <4 x i1> %499, <4 x i32> %500, <4 x i32> %498
  %502 = add nuw nsw <4 x i32> %501, %475
  %503 = getelementptr inbounds i8, i8* %5, i64 8
  %504 = bitcast i8* %503 to <4 x i8>*
  %505 = load <4 x i8>, <4 x i8>* %504, align 1
  %506 = zext <4 x i8> %505 to <4 x i32>
  %507 = getelementptr inbounds i8, i8* %2, i64 8
  %508 = bitcast i8* %507 to <4 x i8>*
  %509 = load <4 x i8>, <4 x i8>* %508, align 1
  %510 = zext <4 x i8> %509 to <4 x i32>
  %511 = mul nuw nsw <4 x i32> %510, %506
  %512 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %506
  %513 = getelementptr inbounds i8, i8* %4, i64 8
  %514 = bitcast i8* %513 to <4 x i8>*
  %515 = load <4 x i8>, <4 x i8>* %514, align 1
  %516 = zext <4 x i8> %515 to <4 x i32>
  %517 = mul nsw <4 x i32> %512, %516
  %518 = add nuw nsw <4 x i32> %511, <i32 32, i32 32, i32 32, i32 32>
  %519 = add nsw <4 x i32> %518, %517
  %520 = ashr <4 x i32> %519, <i32 6, i32 6, i32 6, i32 6>
  %521 = getelementptr inbounds i8, i8* %0, i64 8
  %522 = bitcast i8* %521 to <4 x i8>*
  %523 = load <4 x i8>, <4 x i8>* %522, align 1
  %524 = zext <4 x i8> %523 to <4 x i32>
  %525 = sub nsw <4 x i32> %520, %524
  %526 = icmp slt <4 x i32> %525, zeroinitializer
  %527 = sub nsw <4 x i32> zeroinitializer, %525
  %528 = select <4 x i1> %526, <4 x i32> %527, <4 x i32> %525
  %529 = add nuw nsw <4 x i32> %528, %502
  %530 = getelementptr inbounds i8, i8* %5, i64 12
  %531 = bitcast i8* %530 to <4 x i8>*
  %532 = load <4 x i8>, <4 x i8>* %531, align 1
  %533 = zext <4 x i8> %532 to <4 x i32>
  %534 = getelementptr inbounds i8, i8* %2, i64 12
  %535 = bitcast i8* %534 to <4 x i8>*
  %536 = load <4 x i8>, <4 x i8>* %535, align 1
  %537 = zext <4 x i8> %536 to <4 x i32>
  %538 = mul nuw nsw <4 x i32> %537, %533
  %539 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %533
  %540 = getelementptr inbounds i8, i8* %4, i64 12
  %541 = bitcast i8* %540 to <4 x i8>*
  %542 = load <4 x i8>, <4 x i8>* %541, align 1
  %543 = zext <4 x i8> %542 to <4 x i32>
  %544 = mul nsw <4 x i32> %539, %543
  %545 = add nuw nsw <4 x i32> %538, <i32 32, i32 32, i32 32, i32 32>
  %546 = add nsw <4 x i32> %545, %544
  %547 = ashr <4 x i32> %546, <i32 6, i32 6, i32 6, i32 6>
  %548 = getelementptr inbounds i8, i8* %0, i64 12
  %549 = bitcast i8* %548 to <4 x i8>*
  %550 = load <4 x i8>, <4 x i8>* %549, align 1
  %551 = zext <4 x i8> %550 to <4 x i32>
  %552 = sub nsw <4 x i32> %547, %551
  %553 = icmp slt <4 x i32> %552, zeroinitializer
  %554 = sub nsw <4 x i32> zeroinitializer, %552
  %555 = select <4 x i1> %553, <4 x i32> %554, <4 x i32> %552
  %556 = add nuw nsw <4 x i32> %555, %529
  %557 = shufflevector <4 x i32> %556, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %558 = add <4 x i32> %556, %557
  %559 = getelementptr inbounds i8, i8* %0, i64 %10
  %560 = getelementptr inbounds i8, i8* %2, i64 %11
  %561 = getelementptr inbounds i8, i8* %5, i64 %12
  %562 = getelementptr inbounds i8, i8* %4, i64 16
  %563 = shufflevector <4 x i32> %558, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %564 = add <4 x i32> %558, %563
  %565 = shufflevector <4 x i32> %564, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %566 = bitcast i8* %561 to <4 x i8>*
  %567 = load <4 x i8>, <4 x i8>* %566, align 1
  %568 = zext <4 x i8> %567 to <4 x i32>
  %569 = bitcast i8* %560 to <4 x i8>*
  %570 = load <4 x i8>, <4 x i8>* %569, align 1
  %571 = zext <4 x i8> %570 to <4 x i32>
  %572 = mul nuw nsw <4 x i32> %571, %568
  %573 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %568
  %574 = bitcast i8* %562 to <4 x i8>*
  %575 = load <4 x i8>, <4 x i8>* %574, align 1
  %576 = zext <4 x i8> %575 to <4 x i32>
  %577 = mul nsw <4 x i32> %573, %576
  %578 = add nuw nsw <4 x i32> %572, <i32 32, i32 32, i32 32, i32 32>
  %579 = add nsw <4 x i32> %578, %577
  %580 = ashr <4 x i32> %579, <i32 6, i32 6, i32 6, i32 6>
  %581 = bitcast i8* %559 to <4 x i8>*
  %582 = load <4 x i8>, <4 x i8>* %581, align 1
  %583 = zext <4 x i8> %582 to <4 x i32>
  %584 = sub nsw <4 x i32> %580, %583
  %585 = icmp slt <4 x i32> %584, zeroinitializer
  %586 = sub nsw <4 x i32> zeroinitializer, %584
  %587 = select <4 x i1> %585, <4 x i32> %586, <4 x i32> %584
  %588 = add <4 x i32> %587, %565
  %589 = getelementptr inbounds i8, i8* %561, i64 4
  %590 = bitcast i8* %589 to <4 x i8>*
  %591 = load <4 x i8>, <4 x i8>* %590, align 1
  %592 = zext <4 x i8> %591 to <4 x i32>
  %593 = getelementptr inbounds i8, i8* %560, i64 4
  %594 = bitcast i8* %593 to <4 x i8>*
  %595 = load <4 x i8>, <4 x i8>* %594, align 1
  %596 = zext <4 x i8> %595 to <4 x i32>
  %597 = mul nuw nsw <4 x i32> %596, %592
  %598 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %592
  %599 = getelementptr inbounds i8, i8* %4, i64 20
  %600 = bitcast i8* %599 to <4 x i8>*
  %601 = load <4 x i8>, <4 x i8>* %600, align 1
  %602 = zext <4 x i8> %601 to <4 x i32>
  %603 = mul nsw <4 x i32> %598, %602
  %604 = add nuw nsw <4 x i32> %597, <i32 32, i32 32, i32 32, i32 32>
  %605 = add nsw <4 x i32> %604, %603
  %606 = ashr <4 x i32> %605, <i32 6, i32 6, i32 6, i32 6>
  %607 = getelementptr inbounds i8, i8* %559, i64 4
  %608 = bitcast i8* %607 to <4 x i8>*
  %609 = load <4 x i8>, <4 x i8>* %608, align 1
  %610 = zext <4 x i8> %609 to <4 x i32>
  %611 = sub nsw <4 x i32> %606, %610
  %612 = icmp slt <4 x i32> %611, zeroinitializer
  %613 = sub nsw <4 x i32> zeroinitializer, %611
  %614 = select <4 x i1> %612, <4 x i32> %613, <4 x i32> %611
  %615 = add <4 x i32> %614, %588
  %616 = getelementptr inbounds i8, i8* %561, i64 8
  %617 = bitcast i8* %616 to <4 x i8>*
  %618 = load <4 x i8>, <4 x i8>* %617, align 1
  %619 = zext <4 x i8> %618 to <4 x i32>
  %620 = getelementptr inbounds i8, i8* %560, i64 8
  %621 = bitcast i8* %620 to <4 x i8>*
  %622 = load <4 x i8>, <4 x i8>* %621, align 1
  %623 = zext <4 x i8> %622 to <4 x i32>
  %624 = mul nuw nsw <4 x i32> %623, %619
  %625 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %619
  %626 = getelementptr inbounds i8, i8* %4, i64 24
  %627 = bitcast i8* %626 to <4 x i8>*
  %628 = load <4 x i8>, <4 x i8>* %627, align 1
  %629 = zext <4 x i8> %628 to <4 x i32>
  %630 = mul nsw <4 x i32> %625, %629
  %631 = add nuw nsw <4 x i32> %624, <i32 32, i32 32, i32 32, i32 32>
  %632 = add nsw <4 x i32> %631, %630
  %633 = ashr <4 x i32> %632, <i32 6, i32 6, i32 6, i32 6>
  %634 = getelementptr inbounds i8, i8* %559, i64 8
  %635 = bitcast i8* %634 to <4 x i8>*
  %636 = load <4 x i8>, <4 x i8>* %635, align 1
  %637 = zext <4 x i8> %636 to <4 x i32>
  %638 = sub nsw <4 x i32> %633, %637
  %639 = icmp slt <4 x i32> %638, zeroinitializer
  %640 = sub nsw <4 x i32> zeroinitializer, %638
  %641 = select <4 x i1> %639, <4 x i32> %640, <4 x i32> %638
  %642 = add <4 x i32> %641, %615
  %643 = getelementptr inbounds i8, i8* %561, i64 12
  %644 = bitcast i8* %643 to <4 x i8>*
  %645 = load <4 x i8>, <4 x i8>* %644, align 1
  %646 = zext <4 x i8> %645 to <4 x i32>
  %647 = getelementptr inbounds i8, i8* %560, i64 12
  %648 = bitcast i8* %647 to <4 x i8>*
  %649 = load <4 x i8>, <4 x i8>* %648, align 1
  %650 = zext <4 x i8> %649 to <4 x i32>
  %651 = mul nuw nsw <4 x i32> %650, %646
  %652 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %646
  %653 = getelementptr inbounds i8, i8* %4, i64 28
  %654 = bitcast i8* %653 to <4 x i8>*
  %655 = load <4 x i8>, <4 x i8>* %654, align 1
  %656 = zext <4 x i8> %655 to <4 x i32>
  %657 = mul nsw <4 x i32> %652, %656
  %658 = add nuw nsw <4 x i32> %651, <i32 32, i32 32, i32 32, i32 32>
  %659 = add nsw <4 x i32> %658, %657
  %660 = ashr <4 x i32> %659, <i32 6, i32 6, i32 6, i32 6>
  %661 = getelementptr inbounds i8, i8* %559, i64 12
  %662 = bitcast i8* %661 to <4 x i8>*
  %663 = load <4 x i8>, <4 x i8>* %662, align 1
  %664 = zext <4 x i8> %663 to <4 x i32>
  %665 = sub nsw <4 x i32> %660, %664
  %666 = icmp slt <4 x i32> %665, zeroinitializer
  %667 = sub nsw <4 x i32> zeroinitializer, %665
  %668 = select <4 x i1> %666, <4 x i32> %667, <4 x i32> %665
  %669 = add <4 x i32> %668, %642
  %670 = shufflevector <4 x i32> %669, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %671 = add <4 x i32> %669, %670
  %672 = getelementptr inbounds i8, i8* %559, i64 %10
  %673 = getelementptr inbounds i8, i8* %560, i64 %11
  %674 = getelementptr inbounds i8, i8* %561, i64 %12
  %675 = getelementptr inbounds i8, i8* %4, i64 32
  %676 = shufflevector <4 x i32> %671, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %677 = add <4 x i32> %671, %676
  %678 = shufflevector <4 x i32> %677, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %679 = bitcast i8* %674 to <4 x i8>*
  %680 = load <4 x i8>, <4 x i8>* %679, align 1
  %681 = zext <4 x i8> %680 to <4 x i32>
  %682 = bitcast i8* %673 to <4 x i8>*
  %683 = load <4 x i8>, <4 x i8>* %682, align 1
  %684 = zext <4 x i8> %683 to <4 x i32>
  %685 = mul nuw nsw <4 x i32> %684, %681
  %686 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %681
  %687 = bitcast i8* %675 to <4 x i8>*
  %688 = load <4 x i8>, <4 x i8>* %687, align 1
  %689 = zext <4 x i8> %688 to <4 x i32>
  %690 = mul nsw <4 x i32> %686, %689
  %691 = add nuw nsw <4 x i32> %685, <i32 32, i32 32, i32 32, i32 32>
  %692 = add nsw <4 x i32> %691, %690
  %693 = ashr <4 x i32> %692, <i32 6, i32 6, i32 6, i32 6>
  %694 = bitcast i8* %672 to <4 x i8>*
  %695 = load <4 x i8>, <4 x i8>* %694, align 1
  %696 = zext <4 x i8> %695 to <4 x i32>
  %697 = sub nsw <4 x i32> %693, %696
  %698 = icmp slt <4 x i32> %697, zeroinitializer
  %699 = sub nsw <4 x i32> zeroinitializer, %697
  %700 = select <4 x i1> %698, <4 x i32> %699, <4 x i32> %697
  %701 = add <4 x i32> %700, %678
  %702 = getelementptr inbounds i8, i8* %674, i64 4
  %703 = bitcast i8* %702 to <4 x i8>*
  %704 = load <4 x i8>, <4 x i8>* %703, align 1
  %705 = zext <4 x i8> %704 to <4 x i32>
  %706 = getelementptr inbounds i8, i8* %673, i64 4
  %707 = bitcast i8* %706 to <4 x i8>*
  %708 = load <4 x i8>, <4 x i8>* %707, align 1
  %709 = zext <4 x i8> %708 to <4 x i32>
  %710 = mul nuw nsw <4 x i32> %709, %705
  %711 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %705
  %712 = getelementptr inbounds i8, i8* %4, i64 36
  %713 = bitcast i8* %712 to <4 x i8>*
  %714 = load <4 x i8>, <4 x i8>* %713, align 1
  %715 = zext <4 x i8> %714 to <4 x i32>
  %716 = mul nsw <4 x i32> %711, %715
  %717 = add nuw nsw <4 x i32> %710, <i32 32, i32 32, i32 32, i32 32>
  %718 = add nsw <4 x i32> %717, %716
  %719 = ashr <4 x i32> %718, <i32 6, i32 6, i32 6, i32 6>
  %720 = getelementptr inbounds i8, i8* %672, i64 4
  %721 = bitcast i8* %720 to <4 x i8>*
  %722 = load <4 x i8>, <4 x i8>* %721, align 1
  %723 = zext <4 x i8> %722 to <4 x i32>
  %724 = sub nsw <4 x i32> %719, %723
  %725 = icmp slt <4 x i32> %724, zeroinitializer
  %726 = sub nsw <4 x i32> zeroinitializer, %724
  %727 = select <4 x i1> %725, <4 x i32> %726, <4 x i32> %724
  %728 = add <4 x i32> %727, %701
  %729 = getelementptr inbounds i8, i8* %674, i64 8
  %730 = bitcast i8* %729 to <4 x i8>*
  %731 = load <4 x i8>, <4 x i8>* %730, align 1
  %732 = zext <4 x i8> %731 to <4 x i32>
  %733 = getelementptr inbounds i8, i8* %673, i64 8
  %734 = bitcast i8* %733 to <4 x i8>*
  %735 = load <4 x i8>, <4 x i8>* %734, align 1
  %736 = zext <4 x i8> %735 to <4 x i32>
  %737 = mul nuw nsw <4 x i32> %736, %732
  %738 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %732
  %739 = getelementptr inbounds i8, i8* %4, i64 40
  %740 = bitcast i8* %739 to <4 x i8>*
  %741 = load <4 x i8>, <4 x i8>* %740, align 1
  %742 = zext <4 x i8> %741 to <4 x i32>
  %743 = mul nsw <4 x i32> %738, %742
  %744 = add nuw nsw <4 x i32> %737, <i32 32, i32 32, i32 32, i32 32>
  %745 = add nsw <4 x i32> %744, %743
  %746 = ashr <4 x i32> %745, <i32 6, i32 6, i32 6, i32 6>
  %747 = getelementptr inbounds i8, i8* %672, i64 8
  %748 = bitcast i8* %747 to <4 x i8>*
  %749 = load <4 x i8>, <4 x i8>* %748, align 1
  %750 = zext <4 x i8> %749 to <4 x i32>
  %751 = sub nsw <4 x i32> %746, %750
  %752 = icmp slt <4 x i32> %751, zeroinitializer
  %753 = sub nsw <4 x i32> zeroinitializer, %751
  %754 = select <4 x i1> %752, <4 x i32> %753, <4 x i32> %751
  %755 = add <4 x i32> %754, %728
  %756 = getelementptr inbounds i8, i8* %674, i64 12
  %757 = bitcast i8* %756 to <4 x i8>*
  %758 = load <4 x i8>, <4 x i8>* %757, align 1
  %759 = zext <4 x i8> %758 to <4 x i32>
  %760 = getelementptr inbounds i8, i8* %673, i64 12
  %761 = bitcast i8* %760 to <4 x i8>*
  %762 = load <4 x i8>, <4 x i8>* %761, align 1
  %763 = zext <4 x i8> %762 to <4 x i32>
  %764 = mul nuw nsw <4 x i32> %763, %759
  %765 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %759
  %766 = getelementptr inbounds i8, i8* %4, i64 44
  %767 = bitcast i8* %766 to <4 x i8>*
  %768 = load <4 x i8>, <4 x i8>* %767, align 1
  %769 = zext <4 x i8> %768 to <4 x i32>
  %770 = mul nsw <4 x i32> %765, %769
  %771 = add nuw nsw <4 x i32> %764, <i32 32, i32 32, i32 32, i32 32>
  %772 = add nsw <4 x i32> %771, %770
  %773 = ashr <4 x i32> %772, <i32 6, i32 6, i32 6, i32 6>
  %774 = getelementptr inbounds i8, i8* %672, i64 12
  %775 = bitcast i8* %774 to <4 x i8>*
  %776 = load <4 x i8>, <4 x i8>* %775, align 1
  %777 = zext <4 x i8> %776 to <4 x i32>
  %778 = sub nsw <4 x i32> %773, %777
  %779 = icmp slt <4 x i32> %778, zeroinitializer
  %780 = sub nsw <4 x i32> zeroinitializer, %778
  %781 = select <4 x i1> %779, <4 x i32> %780, <4 x i32> %778
  %782 = add <4 x i32> %781, %755
  %783 = shufflevector <4 x i32> %782, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %784 = add <4 x i32> %782, %783
  %785 = getelementptr inbounds i8, i8* %672, i64 %10
  %786 = getelementptr inbounds i8, i8* %673, i64 %11
  %787 = getelementptr inbounds i8, i8* %674, i64 %12
  %788 = getelementptr inbounds i8, i8* %4, i64 48
  %789 = shufflevector <4 x i32> %784, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %790 = add <4 x i32> %784, %789
  %791 = shufflevector <4 x i32> %790, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %792 = bitcast i8* %787 to <4 x i8>*
  %793 = load <4 x i8>, <4 x i8>* %792, align 1
  %794 = zext <4 x i8> %793 to <4 x i32>
  %795 = bitcast i8* %786 to <4 x i8>*
  %796 = load <4 x i8>, <4 x i8>* %795, align 1
  %797 = zext <4 x i8> %796 to <4 x i32>
  %798 = mul nuw nsw <4 x i32> %797, %794
  %799 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %794
  %800 = bitcast i8* %788 to <4 x i8>*
  %801 = load <4 x i8>, <4 x i8>* %800, align 1
  %802 = zext <4 x i8> %801 to <4 x i32>
  %803 = mul nsw <4 x i32> %799, %802
  %804 = add nuw nsw <4 x i32> %798, <i32 32, i32 32, i32 32, i32 32>
  %805 = add nsw <4 x i32> %804, %803
  %806 = ashr <4 x i32> %805, <i32 6, i32 6, i32 6, i32 6>
  %807 = bitcast i8* %785 to <4 x i8>*
  %808 = load <4 x i8>, <4 x i8>* %807, align 1
  %809 = zext <4 x i8> %808 to <4 x i32>
  %810 = sub nsw <4 x i32> %806, %809
  %811 = icmp slt <4 x i32> %810, zeroinitializer
  %812 = sub nsw <4 x i32> zeroinitializer, %810
  %813 = select <4 x i1> %811, <4 x i32> %812, <4 x i32> %810
  %814 = add <4 x i32> %813, %791
  %815 = getelementptr inbounds i8, i8* %787, i64 4
  %816 = bitcast i8* %815 to <4 x i8>*
  %817 = load <4 x i8>, <4 x i8>* %816, align 1
  %818 = zext <4 x i8> %817 to <4 x i32>
  %819 = getelementptr inbounds i8, i8* %786, i64 4
  %820 = bitcast i8* %819 to <4 x i8>*
  %821 = load <4 x i8>, <4 x i8>* %820, align 1
  %822 = zext <4 x i8> %821 to <4 x i32>
  %823 = mul nuw nsw <4 x i32> %822, %818
  %824 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %818
  %825 = getelementptr inbounds i8, i8* %4, i64 52
  %826 = bitcast i8* %825 to <4 x i8>*
  %827 = load <4 x i8>, <4 x i8>* %826, align 1
  %828 = zext <4 x i8> %827 to <4 x i32>
  %829 = mul nsw <4 x i32> %824, %828
  %830 = add nuw nsw <4 x i32> %823, <i32 32, i32 32, i32 32, i32 32>
  %831 = add nsw <4 x i32> %830, %829
  %832 = ashr <4 x i32> %831, <i32 6, i32 6, i32 6, i32 6>
  %833 = getelementptr inbounds i8, i8* %785, i64 4
  %834 = bitcast i8* %833 to <4 x i8>*
  %835 = load <4 x i8>, <4 x i8>* %834, align 1
  %836 = zext <4 x i8> %835 to <4 x i32>
  %837 = sub nsw <4 x i32> %832, %836
  %838 = icmp slt <4 x i32> %837, zeroinitializer
  %839 = sub nsw <4 x i32> zeroinitializer, %837
  %840 = select <4 x i1> %838, <4 x i32> %839, <4 x i32> %837
  %841 = add <4 x i32> %840, %814
  %842 = getelementptr inbounds i8, i8* %787, i64 8
  %843 = bitcast i8* %842 to <4 x i8>*
  %844 = load <4 x i8>, <4 x i8>* %843, align 1
  %845 = zext <4 x i8> %844 to <4 x i32>
  %846 = getelementptr inbounds i8, i8* %786, i64 8
  %847 = bitcast i8* %846 to <4 x i8>*
  %848 = load <4 x i8>, <4 x i8>* %847, align 1
  %849 = zext <4 x i8> %848 to <4 x i32>
  %850 = mul nuw nsw <4 x i32> %849, %845
  %851 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %845
  %852 = getelementptr inbounds i8, i8* %4, i64 56
  %853 = bitcast i8* %852 to <4 x i8>*
  %854 = load <4 x i8>, <4 x i8>* %853, align 1
  %855 = zext <4 x i8> %854 to <4 x i32>
  %856 = mul nsw <4 x i32> %851, %855
  %857 = add nuw nsw <4 x i32> %850, <i32 32, i32 32, i32 32, i32 32>
  %858 = add nsw <4 x i32> %857, %856
  %859 = ashr <4 x i32> %858, <i32 6, i32 6, i32 6, i32 6>
  %860 = getelementptr inbounds i8, i8* %785, i64 8
  %861 = bitcast i8* %860 to <4 x i8>*
  %862 = load <4 x i8>, <4 x i8>* %861, align 1
  %863 = zext <4 x i8> %862 to <4 x i32>
  %864 = sub nsw <4 x i32> %859, %863
  %865 = icmp slt <4 x i32> %864, zeroinitializer
  %866 = sub nsw <4 x i32> zeroinitializer, %864
  %867 = select <4 x i1> %865, <4 x i32> %866, <4 x i32> %864
  %868 = add <4 x i32> %867, %841
  %869 = getelementptr inbounds i8, i8* %787, i64 12
  %870 = bitcast i8* %869 to <4 x i8>*
  %871 = load <4 x i8>, <4 x i8>* %870, align 1
  %872 = zext <4 x i8> %871 to <4 x i32>
  %873 = getelementptr inbounds i8, i8* %786, i64 12
  %874 = bitcast i8* %873 to <4 x i8>*
  %875 = load <4 x i8>, <4 x i8>* %874, align 1
  %876 = zext <4 x i8> %875 to <4 x i32>
  %877 = mul nuw nsw <4 x i32> %876, %872
  %878 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %872
  %879 = getelementptr inbounds i8, i8* %4, i64 60
  %880 = bitcast i8* %879 to <4 x i8>*
  %881 = load <4 x i8>, <4 x i8>* %880, align 1
  %882 = zext <4 x i8> %881 to <4 x i32>
  %883 = mul nsw <4 x i32> %878, %882
  %884 = add nuw nsw <4 x i32> %877, <i32 32, i32 32, i32 32, i32 32>
  %885 = add nsw <4 x i32> %884, %883
  %886 = ashr <4 x i32> %885, <i32 6, i32 6, i32 6, i32 6>
  %887 = getelementptr inbounds i8, i8* %785, i64 12
  %888 = bitcast i8* %887 to <4 x i8>*
  %889 = load <4 x i8>, <4 x i8>* %888, align 1
  %890 = zext <4 x i8> %889 to <4 x i32>
  %891 = sub nsw <4 x i32> %886, %890
  %892 = icmp slt <4 x i32> %891, zeroinitializer
  %893 = sub nsw <4 x i32> zeroinitializer, %891
  %894 = select <4 x i1> %892, <4 x i32> %893, <4 x i32> %891
  %895 = add <4 x i32> %894, %868
  br label %896

896:                                              ; preds = %16, %456
  %897 = phi <4 x i32> [ %895, %456 ], [ %455, %16 ]
  %898 = shufflevector <4 x i32> %897, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %899 = add <4 x i32> %897, %898
  %900 = shufflevector <4 x i32> %899, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %901 = add <4 x i32> %899, %900
  %902 = extractelement <4 x i32> %901, i32 0
  ret i32 %902
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad16x4x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = getelementptr inbounds i8, i8* %0, i64 %11
  %15 = getelementptr inbounds i8, i8* %4, i64 16
  %16 = getelementptr inbounds i8, i8* %5, i64 %13
  %17 = getelementptr inbounds i8, i8* %14, i64 %11
  %18 = getelementptr inbounds i8, i8* %4, i64 32
  %19 = getelementptr inbounds i8, i8* %16, i64 %13
  %20 = getelementptr inbounds i8, i8* %17, i64 %11
  %21 = getelementptr inbounds i8, i8* %4, i64 48
  %22 = getelementptr inbounds i8, i8* %19, i64 %13
  %23 = bitcast i8* %22 to <4 x i8>*
  %24 = bitcast i8* %5 to <4 x i8>*
  %25 = bitcast i8* %4 to <4 x i8>*
  %26 = bitcast i8* %0 to <4 x i8>*
  %27 = getelementptr inbounds i8, i8* %5, i64 4
  %28 = bitcast i8* %27 to <4 x i8>*
  %29 = getelementptr inbounds i8, i8* %4, i64 4
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = getelementptr inbounds i8, i8* %0, i64 4
  %32 = bitcast i8* %31 to <4 x i8>*
  %33 = getelementptr inbounds i8, i8* %5, i64 8
  %34 = bitcast i8* %33 to <4 x i8>*
  %35 = getelementptr inbounds i8, i8* %4, i64 8
  %36 = bitcast i8* %35 to <4 x i8>*
  %37 = getelementptr inbounds i8, i8* %0, i64 8
  %38 = bitcast i8* %37 to <4 x i8>*
  %39 = getelementptr inbounds i8, i8* %5, i64 12
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = getelementptr inbounds i8, i8* %4, i64 12
  %42 = bitcast i8* %41 to <4 x i8>*
  %43 = getelementptr inbounds i8, i8* %0, i64 12
  %44 = bitcast i8* %43 to <4 x i8>*
  %45 = bitcast i8* %16 to <4 x i8>*
  %46 = bitcast i8* %15 to <4 x i8>*
  %47 = bitcast i8* %14 to <4 x i8>*
  %48 = getelementptr inbounds i8, i8* %16, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = getelementptr inbounds i8, i8* %4, i64 20
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = getelementptr inbounds i8, i8* %14, i64 4
  %53 = bitcast i8* %52 to <4 x i8>*
  %54 = getelementptr inbounds i8, i8* %16, i64 8
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = getelementptr inbounds i8, i8* %4, i64 24
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = getelementptr inbounds i8, i8* %14, i64 8
  %59 = bitcast i8* %58 to <4 x i8>*
  %60 = getelementptr inbounds i8, i8* %16, i64 12
  %61 = bitcast i8* %60 to <4 x i8>*
  %62 = getelementptr inbounds i8, i8* %4, i64 28
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = getelementptr inbounds i8, i8* %14, i64 12
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = bitcast i8* %19 to <4 x i8>*
  %67 = bitcast i8* %18 to <4 x i8>*
  %68 = bitcast i8* %17 to <4 x i8>*
  %69 = getelementptr inbounds i8, i8* %19, i64 4
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = getelementptr inbounds i8, i8* %4, i64 36
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = getelementptr inbounds i8, i8* %17, i64 4
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = getelementptr inbounds i8, i8* %19, i64 8
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = getelementptr inbounds i8, i8* %4, i64 40
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = getelementptr inbounds i8, i8* %17, i64 8
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = getelementptr inbounds i8, i8* %19, i64 12
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = getelementptr inbounds i8, i8* %4, i64 44
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = getelementptr inbounds i8, i8* %17, i64 12
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = bitcast i8* %21 to <4 x i8>*
  %88 = bitcast i8* %20 to <4 x i8>*
  %89 = getelementptr inbounds i8, i8* %22, i64 4
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = getelementptr inbounds i8, i8* %4, i64 52
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = getelementptr inbounds i8, i8* %20, i64 4
  %94 = bitcast i8* %93 to <4 x i8>*
  %95 = getelementptr inbounds i8, i8* %22, i64 8
  %96 = bitcast i8* %95 to <4 x i8>*
  %97 = getelementptr inbounds i8, i8* %4, i64 56
  %98 = bitcast i8* %97 to <4 x i8>*
  %99 = getelementptr inbounds i8, i8* %20, i64 8
  %100 = bitcast i8* %99 to <4 x i8>*
  %101 = getelementptr inbounds i8, i8* %22, i64 12
  %102 = bitcast i8* %101 to <4 x i8>*
  %103 = getelementptr inbounds i8, i8* %4, i64 60
  %104 = bitcast i8* %103 to <4 x i8>*
  %105 = getelementptr inbounds i8, i8* %20, i64 12
  %106 = bitcast i8* %105 to <4 x i8>*
  br i1 %10, label %107, label %468

107:                                              ; preds = %9, %107
  %108 = phi i64 [ %466, %107 ], [ 0, %9 ]
  %109 = getelementptr inbounds i8*, i8** %2, i64 %108
  %110 = load i8*, i8** %109, align 8
  %111 = load <4 x i8>, <4 x i8>* %24, align 1
  %112 = zext <4 x i8> %111 to <4 x i32>
  %113 = bitcast i8* %110 to <4 x i8>*
  %114 = load <4 x i8>, <4 x i8>* %113, align 1
  %115 = zext <4 x i8> %114 to <4 x i32>
  %116 = mul nuw nsw <4 x i32> %115, %112
  %117 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %112
  %118 = load <4 x i8>, <4 x i8>* %25, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = mul nsw <4 x i32> %117, %119
  %121 = add nuw nsw <4 x i32> %116, <i32 32, i32 32, i32 32, i32 32>
  %122 = add nsw <4 x i32> %121, %120
  %123 = ashr <4 x i32> %122, <i32 6, i32 6, i32 6, i32 6>
  %124 = load <4 x i8>, <4 x i8>* %26, align 1
  %125 = zext <4 x i8> %124 to <4 x i32>
  %126 = sub nsw <4 x i32> %123, %125
  %127 = icmp slt <4 x i32> %126, zeroinitializer
  %128 = sub nsw <4 x i32> zeroinitializer, %126
  %129 = select <4 x i1> %127, <4 x i32> %128, <4 x i32> %126
  %130 = load <4 x i8>, <4 x i8>* %28, align 1
  %131 = zext <4 x i8> %130 to <4 x i32>
  %132 = getelementptr inbounds i8, i8* %110, i64 4
  %133 = bitcast i8* %132 to <4 x i8>*
  %134 = load <4 x i8>, <4 x i8>* %133, align 1
  %135 = zext <4 x i8> %134 to <4 x i32>
  %136 = mul nuw nsw <4 x i32> %135, %131
  %137 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %131
  %138 = load <4 x i8>, <4 x i8>* %30, align 1
  %139 = zext <4 x i8> %138 to <4 x i32>
  %140 = mul nsw <4 x i32> %137, %139
  %141 = add nuw nsw <4 x i32> %136, <i32 32, i32 32, i32 32, i32 32>
  %142 = add nsw <4 x i32> %141, %140
  %143 = ashr <4 x i32> %142, <i32 6, i32 6, i32 6, i32 6>
  %144 = load <4 x i8>, <4 x i8>* %32, align 1
  %145 = zext <4 x i8> %144 to <4 x i32>
  %146 = sub nsw <4 x i32> %143, %145
  %147 = icmp slt <4 x i32> %146, zeroinitializer
  %148 = sub nsw <4 x i32> zeroinitializer, %146
  %149 = select <4 x i1> %147, <4 x i32> %148, <4 x i32> %146
  %150 = add nuw nsw <4 x i32> %149, %129
  %151 = load <4 x i8>, <4 x i8>* %34, align 1
  %152 = zext <4 x i8> %151 to <4 x i32>
  %153 = getelementptr inbounds i8, i8* %110, i64 8
  %154 = bitcast i8* %153 to <4 x i8>*
  %155 = load <4 x i8>, <4 x i8>* %154, align 1
  %156 = zext <4 x i8> %155 to <4 x i32>
  %157 = mul nuw nsw <4 x i32> %156, %152
  %158 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %152
  %159 = load <4 x i8>, <4 x i8>* %36, align 1
  %160 = zext <4 x i8> %159 to <4 x i32>
  %161 = mul nsw <4 x i32> %158, %160
  %162 = add nuw nsw <4 x i32> %157, <i32 32, i32 32, i32 32, i32 32>
  %163 = add nsw <4 x i32> %162, %161
  %164 = ashr <4 x i32> %163, <i32 6, i32 6, i32 6, i32 6>
  %165 = load <4 x i8>, <4 x i8>* %38, align 1
  %166 = zext <4 x i8> %165 to <4 x i32>
  %167 = sub nsw <4 x i32> %164, %166
  %168 = icmp slt <4 x i32> %167, zeroinitializer
  %169 = sub nsw <4 x i32> zeroinitializer, %167
  %170 = select <4 x i1> %168, <4 x i32> %169, <4 x i32> %167
  %171 = add nuw nsw <4 x i32> %170, %150
  %172 = load <4 x i8>, <4 x i8>* %40, align 1
  %173 = zext <4 x i8> %172 to <4 x i32>
  %174 = getelementptr inbounds i8, i8* %110, i64 12
  %175 = bitcast i8* %174 to <4 x i8>*
  %176 = load <4 x i8>, <4 x i8>* %175, align 1
  %177 = zext <4 x i8> %176 to <4 x i32>
  %178 = mul nuw nsw <4 x i32> %177, %173
  %179 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %173
  %180 = load <4 x i8>, <4 x i8>* %42, align 1
  %181 = zext <4 x i8> %180 to <4 x i32>
  %182 = mul nsw <4 x i32> %179, %181
  %183 = add nuw nsw <4 x i32> %178, <i32 32, i32 32, i32 32, i32 32>
  %184 = add nsw <4 x i32> %183, %182
  %185 = ashr <4 x i32> %184, <i32 6, i32 6, i32 6, i32 6>
  %186 = load <4 x i8>, <4 x i8>* %44, align 1
  %187 = zext <4 x i8> %186 to <4 x i32>
  %188 = sub nsw <4 x i32> %185, %187
  %189 = icmp slt <4 x i32> %188, zeroinitializer
  %190 = sub nsw <4 x i32> zeroinitializer, %188
  %191 = select <4 x i1> %189, <4 x i32> %190, <4 x i32> %188
  %192 = add nuw nsw <4 x i32> %191, %171
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %194 = add <4 x i32> %192, %193
  %195 = getelementptr inbounds i8, i8* %110, i64 %12
  %196 = shufflevector <4 x i32> %194, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %197 = add <4 x i32> %194, %196
  %198 = shufflevector <4 x i32> %197, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %199 = load <4 x i8>, <4 x i8>* %45, align 1
  %200 = zext <4 x i8> %199 to <4 x i32>
  %201 = bitcast i8* %195 to <4 x i8>*
  %202 = load <4 x i8>, <4 x i8>* %201, align 1
  %203 = zext <4 x i8> %202 to <4 x i32>
  %204 = mul nuw nsw <4 x i32> %203, %200
  %205 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %200
  %206 = load <4 x i8>, <4 x i8>* %46, align 1
  %207 = zext <4 x i8> %206 to <4 x i32>
  %208 = mul nsw <4 x i32> %205, %207
  %209 = add nuw nsw <4 x i32> %204, <i32 32, i32 32, i32 32, i32 32>
  %210 = add nsw <4 x i32> %209, %208
  %211 = ashr <4 x i32> %210, <i32 6, i32 6, i32 6, i32 6>
  %212 = load <4 x i8>, <4 x i8>* %47, align 1
  %213 = zext <4 x i8> %212 to <4 x i32>
  %214 = sub nsw <4 x i32> %211, %213
  %215 = icmp slt <4 x i32> %214, zeroinitializer
  %216 = sub nsw <4 x i32> zeroinitializer, %214
  %217 = select <4 x i1> %215, <4 x i32> %216, <4 x i32> %214
  %218 = add <4 x i32> %217, %198
  %219 = load <4 x i8>, <4 x i8>* %49, align 1
  %220 = zext <4 x i8> %219 to <4 x i32>
  %221 = getelementptr inbounds i8, i8* %195, i64 4
  %222 = bitcast i8* %221 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1
  %224 = zext <4 x i8> %223 to <4 x i32>
  %225 = mul nuw nsw <4 x i32> %224, %220
  %226 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %220
  %227 = load <4 x i8>, <4 x i8>* %51, align 1
  %228 = zext <4 x i8> %227 to <4 x i32>
  %229 = mul nsw <4 x i32> %226, %228
  %230 = add nuw nsw <4 x i32> %225, <i32 32, i32 32, i32 32, i32 32>
  %231 = add nsw <4 x i32> %230, %229
  %232 = ashr <4 x i32> %231, <i32 6, i32 6, i32 6, i32 6>
  %233 = load <4 x i8>, <4 x i8>* %53, align 1
  %234 = zext <4 x i8> %233 to <4 x i32>
  %235 = sub nsw <4 x i32> %232, %234
  %236 = icmp slt <4 x i32> %235, zeroinitializer
  %237 = sub nsw <4 x i32> zeroinitializer, %235
  %238 = select <4 x i1> %236, <4 x i32> %237, <4 x i32> %235
  %239 = add <4 x i32> %238, %218
  %240 = load <4 x i8>, <4 x i8>* %55, align 1
  %241 = zext <4 x i8> %240 to <4 x i32>
  %242 = getelementptr inbounds i8, i8* %195, i64 8
  %243 = bitcast i8* %242 to <4 x i8>*
  %244 = load <4 x i8>, <4 x i8>* %243, align 1
  %245 = zext <4 x i8> %244 to <4 x i32>
  %246 = mul nuw nsw <4 x i32> %245, %241
  %247 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %241
  %248 = load <4 x i8>, <4 x i8>* %57, align 1
  %249 = zext <4 x i8> %248 to <4 x i32>
  %250 = mul nsw <4 x i32> %247, %249
  %251 = add nuw nsw <4 x i32> %246, <i32 32, i32 32, i32 32, i32 32>
  %252 = add nsw <4 x i32> %251, %250
  %253 = ashr <4 x i32> %252, <i32 6, i32 6, i32 6, i32 6>
  %254 = load <4 x i8>, <4 x i8>* %59, align 1
  %255 = zext <4 x i8> %254 to <4 x i32>
  %256 = sub nsw <4 x i32> %253, %255
  %257 = icmp slt <4 x i32> %256, zeroinitializer
  %258 = sub nsw <4 x i32> zeroinitializer, %256
  %259 = select <4 x i1> %257, <4 x i32> %258, <4 x i32> %256
  %260 = add <4 x i32> %259, %239
  %261 = load <4 x i8>, <4 x i8>* %61, align 1
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = getelementptr inbounds i8, i8* %195, i64 12
  %264 = bitcast i8* %263 to <4 x i8>*
  %265 = load <4 x i8>, <4 x i8>* %264, align 1
  %266 = zext <4 x i8> %265 to <4 x i32>
  %267 = mul nuw nsw <4 x i32> %266, %262
  %268 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %262
  %269 = load <4 x i8>, <4 x i8>* %63, align 1
  %270 = zext <4 x i8> %269 to <4 x i32>
  %271 = mul nsw <4 x i32> %268, %270
  %272 = add nuw nsw <4 x i32> %267, <i32 32, i32 32, i32 32, i32 32>
  %273 = add nsw <4 x i32> %272, %271
  %274 = ashr <4 x i32> %273, <i32 6, i32 6, i32 6, i32 6>
  %275 = load <4 x i8>, <4 x i8>* %65, align 1
  %276 = zext <4 x i8> %275 to <4 x i32>
  %277 = sub nsw <4 x i32> %274, %276
  %278 = icmp slt <4 x i32> %277, zeroinitializer
  %279 = sub nsw <4 x i32> zeroinitializer, %277
  %280 = select <4 x i1> %278, <4 x i32> %279, <4 x i32> %277
  %281 = add <4 x i32> %280, %260
  %282 = shufflevector <4 x i32> %281, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %283 = add <4 x i32> %281, %282
  %284 = getelementptr inbounds i8, i8* %195, i64 %12
  %285 = shufflevector <4 x i32> %283, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %286 = add <4 x i32> %283, %285
  %287 = shufflevector <4 x i32> %286, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %288 = load <4 x i8>, <4 x i8>* %66, align 1
  %289 = zext <4 x i8> %288 to <4 x i32>
  %290 = bitcast i8* %284 to <4 x i8>*
  %291 = load <4 x i8>, <4 x i8>* %290, align 1
  %292 = zext <4 x i8> %291 to <4 x i32>
  %293 = mul nuw nsw <4 x i32> %292, %289
  %294 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %289
  %295 = load <4 x i8>, <4 x i8>* %67, align 1
  %296 = zext <4 x i8> %295 to <4 x i32>
  %297 = mul nsw <4 x i32> %294, %296
  %298 = add nuw nsw <4 x i32> %293, <i32 32, i32 32, i32 32, i32 32>
  %299 = add nsw <4 x i32> %298, %297
  %300 = ashr <4 x i32> %299, <i32 6, i32 6, i32 6, i32 6>
  %301 = load <4 x i8>, <4 x i8>* %68, align 1
  %302 = zext <4 x i8> %301 to <4 x i32>
  %303 = sub nsw <4 x i32> %300, %302
  %304 = icmp slt <4 x i32> %303, zeroinitializer
  %305 = sub nsw <4 x i32> zeroinitializer, %303
  %306 = select <4 x i1> %304, <4 x i32> %305, <4 x i32> %303
  %307 = add <4 x i32> %306, %287
  %308 = load <4 x i8>, <4 x i8>* %70, align 1
  %309 = zext <4 x i8> %308 to <4 x i32>
  %310 = getelementptr inbounds i8, i8* %284, i64 4
  %311 = bitcast i8* %310 to <4 x i8>*
  %312 = load <4 x i8>, <4 x i8>* %311, align 1
  %313 = zext <4 x i8> %312 to <4 x i32>
  %314 = mul nuw nsw <4 x i32> %313, %309
  %315 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %309
  %316 = load <4 x i8>, <4 x i8>* %72, align 1
  %317 = zext <4 x i8> %316 to <4 x i32>
  %318 = mul nsw <4 x i32> %315, %317
  %319 = add nuw nsw <4 x i32> %314, <i32 32, i32 32, i32 32, i32 32>
  %320 = add nsw <4 x i32> %319, %318
  %321 = ashr <4 x i32> %320, <i32 6, i32 6, i32 6, i32 6>
  %322 = load <4 x i8>, <4 x i8>* %74, align 1
  %323 = zext <4 x i8> %322 to <4 x i32>
  %324 = sub nsw <4 x i32> %321, %323
  %325 = icmp slt <4 x i32> %324, zeroinitializer
  %326 = sub nsw <4 x i32> zeroinitializer, %324
  %327 = select <4 x i1> %325, <4 x i32> %326, <4 x i32> %324
  %328 = add <4 x i32> %327, %307
  %329 = load <4 x i8>, <4 x i8>* %76, align 1
  %330 = zext <4 x i8> %329 to <4 x i32>
  %331 = getelementptr inbounds i8, i8* %284, i64 8
  %332 = bitcast i8* %331 to <4 x i8>*
  %333 = load <4 x i8>, <4 x i8>* %332, align 1
  %334 = zext <4 x i8> %333 to <4 x i32>
  %335 = mul nuw nsw <4 x i32> %334, %330
  %336 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %330
  %337 = load <4 x i8>, <4 x i8>* %78, align 1
  %338 = zext <4 x i8> %337 to <4 x i32>
  %339 = mul nsw <4 x i32> %336, %338
  %340 = add nuw nsw <4 x i32> %335, <i32 32, i32 32, i32 32, i32 32>
  %341 = add nsw <4 x i32> %340, %339
  %342 = ashr <4 x i32> %341, <i32 6, i32 6, i32 6, i32 6>
  %343 = load <4 x i8>, <4 x i8>* %80, align 1
  %344 = zext <4 x i8> %343 to <4 x i32>
  %345 = sub nsw <4 x i32> %342, %344
  %346 = icmp slt <4 x i32> %345, zeroinitializer
  %347 = sub nsw <4 x i32> zeroinitializer, %345
  %348 = select <4 x i1> %346, <4 x i32> %347, <4 x i32> %345
  %349 = add <4 x i32> %348, %328
  %350 = load <4 x i8>, <4 x i8>* %82, align 1
  %351 = zext <4 x i8> %350 to <4 x i32>
  %352 = getelementptr inbounds i8, i8* %284, i64 12
  %353 = bitcast i8* %352 to <4 x i8>*
  %354 = load <4 x i8>, <4 x i8>* %353, align 1
  %355 = zext <4 x i8> %354 to <4 x i32>
  %356 = mul nuw nsw <4 x i32> %355, %351
  %357 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %351
  %358 = load <4 x i8>, <4 x i8>* %84, align 1
  %359 = zext <4 x i8> %358 to <4 x i32>
  %360 = mul nsw <4 x i32> %357, %359
  %361 = add nuw nsw <4 x i32> %356, <i32 32, i32 32, i32 32, i32 32>
  %362 = add nsw <4 x i32> %361, %360
  %363 = ashr <4 x i32> %362, <i32 6, i32 6, i32 6, i32 6>
  %364 = load <4 x i8>, <4 x i8>* %86, align 1
  %365 = zext <4 x i8> %364 to <4 x i32>
  %366 = sub nsw <4 x i32> %363, %365
  %367 = icmp slt <4 x i32> %366, zeroinitializer
  %368 = sub nsw <4 x i32> zeroinitializer, %366
  %369 = select <4 x i1> %367, <4 x i32> %368, <4 x i32> %366
  %370 = add <4 x i32> %369, %349
  %371 = shufflevector <4 x i32> %370, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %372 = add <4 x i32> %370, %371
  %373 = getelementptr inbounds i8, i8* %284, i64 %12
  %374 = shufflevector <4 x i32> %372, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %375 = add <4 x i32> %372, %374
  %376 = shufflevector <4 x i32> %375, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %377 = load <4 x i8>, <4 x i8>* %23, align 1
  %378 = zext <4 x i8> %377 to <4 x i32>
  %379 = bitcast i8* %373 to <4 x i8>*
  %380 = load <4 x i8>, <4 x i8>* %379, align 1
  %381 = zext <4 x i8> %380 to <4 x i32>
  %382 = mul nuw nsw <4 x i32> %381, %378
  %383 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %378
  %384 = load <4 x i8>, <4 x i8>* %87, align 1
  %385 = zext <4 x i8> %384 to <4 x i32>
  %386 = mul nsw <4 x i32> %383, %385
  %387 = add nuw nsw <4 x i32> %382, <i32 32, i32 32, i32 32, i32 32>
  %388 = add nsw <4 x i32> %387, %386
  %389 = ashr <4 x i32> %388, <i32 6, i32 6, i32 6, i32 6>
  %390 = load <4 x i8>, <4 x i8>* %88, align 1
  %391 = zext <4 x i8> %390 to <4 x i32>
  %392 = sub nsw <4 x i32> %389, %391
  %393 = icmp slt <4 x i32> %392, zeroinitializer
  %394 = sub nsw <4 x i32> zeroinitializer, %392
  %395 = select <4 x i1> %393, <4 x i32> %394, <4 x i32> %392
  %396 = add <4 x i32> %395, %376
  %397 = load <4 x i8>, <4 x i8>* %90, align 1
  %398 = zext <4 x i8> %397 to <4 x i32>
  %399 = getelementptr inbounds i8, i8* %373, i64 4
  %400 = bitcast i8* %399 to <4 x i8>*
  %401 = load <4 x i8>, <4 x i8>* %400, align 1
  %402 = zext <4 x i8> %401 to <4 x i32>
  %403 = mul nuw nsw <4 x i32> %402, %398
  %404 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %398
  %405 = load <4 x i8>, <4 x i8>* %92, align 1
  %406 = zext <4 x i8> %405 to <4 x i32>
  %407 = mul nsw <4 x i32> %404, %406
  %408 = add nuw nsw <4 x i32> %403, <i32 32, i32 32, i32 32, i32 32>
  %409 = add nsw <4 x i32> %408, %407
  %410 = ashr <4 x i32> %409, <i32 6, i32 6, i32 6, i32 6>
  %411 = load <4 x i8>, <4 x i8>* %94, align 1
  %412 = zext <4 x i8> %411 to <4 x i32>
  %413 = sub nsw <4 x i32> %410, %412
  %414 = icmp slt <4 x i32> %413, zeroinitializer
  %415 = sub nsw <4 x i32> zeroinitializer, %413
  %416 = select <4 x i1> %414, <4 x i32> %415, <4 x i32> %413
  %417 = add <4 x i32> %416, %396
  %418 = load <4 x i8>, <4 x i8>* %96, align 1
  %419 = zext <4 x i8> %418 to <4 x i32>
  %420 = getelementptr inbounds i8, i8* %373, i64 8
  %421 = bitcast i8* %420 to <4 x i8>*
  %422 = load <4 x i8>, <4 x i8>* %421, align 1
  %423 = zext <4 x i8> %422 to <4 x i32>
  %424 = mul nuw nsw <4 x i32> %423, %419
  %425 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %419
  %426 = load <4 x i8>, <4 x i8>* %98, align 1
  %427 = zext <4 x i8> %426 to <4 x i32>
  %428 = mul nsw <4 x i32> %425, %427
  %429 = add nuw nsw <4 x i32> %424, <i32 32, i32 32, i32 32, i32 32>
  %430 = add nsw <4 x i32> %429, %428
  %431 = ashr <4 x i32> %430, <i32 6, i32 6, i32 6, i32 6>
  %432 = load <4 x i8>, <4 x i8>* %100, align 1
  %433 = zext <4 x i8> %432 to <4 x i32>
  %434 = sub nsw <4 x i32> %431, %433
  %435 = icmp slt <4 x i32> %434, zeroinitializer
  %436 = sub nsw <4 x i32> zeroinitializer, %434
  %437 = select <4 x i1> %435, <4 x i32> %436, <4 x i32> %434
  %438 = add <4 x i32> %437, %417
  %439 = load <4 x i8>, <4 x i8>* %102, align 1
  %440 = zext <4 x i8> %439 to <4 x i32>
  %441 = getelementptr inbounds i8, i8* %373, i64 12
  %442 = bitcast i8* %441 to <4 x i8>*
  %443 = load <4 x i8>, <4 x i8>* %442, align 1
  %444 = zext <4 x i8> %443 to <4 x i32>
  %445 = mul nuw nsw <4 x i32> %444, %440
  %446 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %440
  %447 = load <4 x i8>, <4 x i8>* %104, align 1
  %448 = zext <4 x i8> %447 to <4 x i32>
  %449 = mul nsw <4 x i32> %446, %448
  %450 = add nuw nsw <4 x i32> %445, <i32 32, i32 32, i32 32, i32 32>
  %451 = add nsw <4 x i32> %450, %449
  %452 = ashr <4 x i32> %451, <i32 6, i32 6, i32 6, i32 6>
  %453 = load <4 x i8>, <4 x i8>* %106, align 1
  %454 = zext <4 x i8> %453 to <4 x i32>
  %455 = sub nsw <4 x i32> %452, %454
  %456 = icmp slt <4 x i32> %455, zeroinitializer
  %457 = sub nsw <4 x i32> zeroinitializer, %455
  %458 = select <4 x i1> %456, <4 x i32> %457, <4 x i32> %455
  %459 = add <4 x i32> %458, %438
  %460 = shufflevector <4 x i32> %459, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %461 = add <4 x i32> %459, %460
  %462 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %463 = add <4 x i32> %461, %462
  %464 = extractelement <4 x i32> %463, i32 0
  %465 = getelementptr inbounds i32, i32* %8, i64 %108
  store i32 %464, i32* %465, align 4
  %466 = add nuw nsw i64 %108, 1
  %467 = icmp eq i64 %466, 4
  br i1 %467, label %829, label %107

468:                                              ; preds = %9, %468
  %469 = phi i64 [ %827, %468 ], [ 0, %9 ]
  %470 = getelementptr inbounds i8*, i8** %2, i64 %469
  %471 = load i8*, i8** %470, align 8
  %472 = load <4 x i8>, <4 x i8>* %24, align 1
  %473 = zext <4 x i8> %472 to <4 x i32>
  %474 = load <4 x i8>, <4 x i8>* %25, align 1
  %475 = zext <4 x i8> %474 to <4 x i32>
  %476 = mul nuw nsw <4 x i32> %475, %473
  %477 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %473
  %478 = bitcast i8* %471 to <4 x i8>*
  %479 = load <4 x i8>, <4 x i8>* %478, align 1
  %480 = zext <4 x i8> %479 to <4 x i32>
  %481 = mul nsw <4 x i32> %477, %480
  %482 = add nuw nsw <4 x i32> %476, <i32 32, i32 32, i32 32, i32 32>
  %483 = add nsw <4 x i32> %482, %481
  %484 = ashr <4 x i32> %483, <i32 6, i32 6, i32 6, i32 6>
  %485 = load <4 x i8>, <4 x i8>* %26, align 1
  %486 = zext <4 x i8> %485 to <4 x i32>
  %487 = sub nsw <4 x i32> %484, %486
  %488 = icmp slt <4 x i32> %487, zeroinitializer
  %489 = sub nsw <4 x i32> zeroinitializer, %487
  %490 = select <4 x i1> %488, <4 x i32> %489, <4 x i32> %487
  %491 = load <4 x i8>, <4 x i8>* %28, align 1
  %492 = zext <4 x i8> %491 to <4 x i32>
  %493 = load <4 x i8>, <4 x i8>* %30, align 1
  %494 = zext <4 x i8> %493 to <4 x i32>
  %495 = mul nuw nsw <4 x i32> %494, %492
  %496 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %492
  %497 = getelementptr inbounds i8, i8* %471, i64 4
  %498 = bitcast i8* %497 to <4 x i8>*
  %499 = load <4 x i8>, <4 x i8>* %498, align 1
  %500 = zext <4 x i8> %499 to <4 x i32>
  %501 = mul nsw <4 x i32> %496, %500
  %502 = add nuw nsw <4 x i32> %495, <i32 32, i32 32, i32 32, i32 32>
  %503 = add nsw <4 x i32> %502, %501
  %504 = ashr <4 x i32> %503, <i32 6, i32 6, i32 6, i32 6>
  %505 = load <4 x i8>, <4 x i8>* %32, align 1
  %506 = zext <4 x i8> %505 to <4 x i32>
  %507 = sub nsw <4 x i32> %504, %506
  %508 = icmp slt <4 x i32> %507, zeroinitializer
  %509 = sub nsw <4 x i32> zeroinitializer, %507
  %510 = select <4 x i1> %508, <4 x i32> %509, <4 x i32> %507
  %511 = add nuw nsw <4 x i32> %510, %490
  %512 = load <4 x i8>, <4 x i8>* %34, align 1
  %513 = zext <4 x i8> %512 to <4 x i32>
  %514 = load <4 x i8>, <4 x i8>* %36, align 1
  %515 = zext <4 x i8> %514 to <4 x i32>
  %516 = mul nuw nsw <4 x i32> %515, %513
  %517 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %513
  %518 = getelementptr inbounds i8, i8* %471, i64 8
  %519 = bitcast i8* %518 to <4 x i8>*
  %520 = load <4 x i8>, <4 x i8>* %519, align 1
  %521 = zext <4 x i8> %520 to <4 x i32>
  %522 = mul nsw <4 x i32> %517, %521
  %523 = add nuw nsw <4 x i32> %516, <i32 32, i32 32, i32 32, i32 32>
  %524 = add nsw <4 x i32> %523, %522
  %525 = ashr <4 x i32> %524, <i32 6, i32 6, i32 6, i32 6>
  %526 = load <4 x i8>, <4 x i8>* %38, align 1
  %527 = zext <4 x i8> %526 to <4 x i32>
  %528 = sub nsw <4 x i32> %525, %527
  %529 = icmp slt <4 x i32> %528, zeroinitializer
  %530 = sub nsw <4 x i32> zeroinitializer, %528
  %531 = select <4 x i1> %529, <4 x i32> %530, <4 x i32> %528
  %532 = add nuw nsw <4 x i32> %531, %511
  %533 = load <4 x i8>, <4 x i8>* %40, align 1
  %534 = zext <4 x i8> %533 to <4 x i32>
  %535 = load <4 x i8>, <4 x i8>* %42, align 1
  %536 = zext <4 x i8> %535 to <4 x i32>
  %537 = mul nuw nsw <4 x i32> %536, %534
  %538 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %534
  %539 = getelementptr inbounds i8, i8* %471, i64 12
  %540 = bitcast i8* %539 to <4 x i8>*
  %541 = load <4 x i8>, <4 x i8>* %540, align 1
  %542 = zext <4 x i8> %541 to <4 x i32>
  %543 = mul nsw <4 x i32> %538, %542
  %544 = add nuw nsw <4 x i32> %537, <i32 32, i32 32, i32 32, i32 32>
  %545 = add nsw <4 x i32> %544, %543
  %546 = ashr <4 x i32> %545, <i32 6, i32 6, i32 6, i32 6>
  %547 = load <4 x i8>, <4 x i8>* %44, align 1
  %548 = zext <4 x i8> %547 to <4 x i32>
  %549 = sub nsw <4 x i32> %546, %548
  %550 = icmp slt <4 x i32> %549, zeroinitializer
  %551 = sub nsw <4 x i32> zeroinitializer, %549
  %552 = select <4 x i1> %550, <4 x i32> %551, <4 x i32> %549
  %553 = add nuw nsw <4 x i32> %552, %532
  %554 = shufflevector <4 x i32> %553, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %555 = add <4 x i32> %553, %554
  %556 = getelementptr inbounds i8, i8* %471, i64 %12
  %557 = shufflevector <4 x i32> %555, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %558 = add <4 x i32> %555, %557
  %559 = shufflevector <4 x i32> %558, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %560 = load <4 x i8>, <4 x i8>* %45, align 1
  %561 = zext <4 x i8> %560 to <4 x i32>
  %562 = load <4 x i8>, <4 x i8>* %46, align 1
  %563 = zext <4 x i8> %562 to <4 x i32>
  %564 = mul nuw nsw <4 x i32> %563, %561
  %565 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %561
  %566 = bitcast i8* %556 to <4 x i8>*
  %567 = load <4 x i8>, <4 x i8>* %566, align 1
  %568 = zext <4 x i8> %567 to <4 x i32>
  %569 = mul nsw <4 x i32> %565, %568
  %570 = add nuw nsw <4 x i32> %564, <i32 32, i32 32, i32 32, i32 32>
  %571 = add nsw <4 x i32> %570, %569
  %572 = ashr <4 x i32> %571, <i32 6, i32 6, i32 6, i32 6>
  %573 = load <4 x i8>, <4 x i8>* %47, align 1
  %574 = zext <4 x i8> %573 to <4 x i32>
  %575 = sub nsw <4 x i32> %572, %574
  %576 = icmp slt <4 x i32> %575, zeroinitializer
  %577 = sub nsw <4 x i32> zeroinitializer, %575
  %578 = select <4 x i1> %576, <4 x i32> %577, <4 x i32> %575
  %579 = add <4 x i32> %578, %559
  %580 = load <4 x i8>, <4 x i8>* %49, align 1
  %581 = zext <4 x i8> %580 to <4 x i32>
  %582 = load <4 x i8>, <4 x i8>* %51, align 1
  %583 = zext <4 x i8> %582 to <4 x i32>
  %584 = mul nuw nsw <4 x i32> %583, %581
  %585 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %581
  %586 = getelementptr inbounds i8, i8* %556, i64 4
  %587 = bitcast i8* %586 to <4 x i8>*
  %588 = load <4 x i8>, <4 x i8>* %587, align 1
  %589 = zext <4 x i8> %588 to <4 x i32>
  %590 = mul nsw <4 x i32> %585, %589
  %591 = add nuw nsw <4 x i32> %584, <i32 32, i32 32, i32 32, i32 32>
  %592 = add nsw <4 x i32> %591, %590
  %593 = ashr <4 x i32> %592, <i32 6, i32 6, i32 6, i32 6>
  %594 = load <4 x i8>, <4 x i8>* %53, align 1
  %595 = zext <4 x i8> %594 to <4 x i32>
  %596 = sub nsw <4 x i32> %593, %595
  %597 = icmp slt <4 x i32> %596, zeroinitializer
  %598 = sub nsw <4 x i32> zeroinitializer, %596
  %599 = select <4 x i1> %597, <4 x i32> %598, <4 x i32> %596
  %600 = add <4 x i32> %599, %579
  %601 = load <4 x i8>, <4 x i8>* %55, align 1
  %602 = zext <4 x i8> %601 to <4 x i32>
  %603 = load <4 x i8>, <4 x i8>* %57, align 1
  %604 = zext <4 x i8> %603 to <4 x i32>
  %605 = mul nuw nsw <4 x i32> %604, %602
  %606 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %602
  %607 = getelementptr inbounds i8, i8* %556, i64 8
  %608 = bitcast i8* %607 to <4 x i8>*
  %609 = load <4 x i8>, <4 x i8>* %608, align 1
  %610 = zext <4 x i8> %609 to <4 x i32>
  %611 = mul nsw <4 x i32> %606, %610
  %612 = add nuw nsw <4 x i32> %605, <i32 32, i32 32, i32 32, i32 32>
  %613 = add nsw <4 x i32> %612, %611
  %614 = ashr <4 x i32> %613, <i32 6, i32 6, i32 6, i32 6>
  %615 = load <4 x i8>, <4 x i8>* %59, align 1
  %616 = zext <4 x i8> %615 to <4 x i32>
  %617 = sub nsw <4 x i32> %614, %616
  %618 = icmp slt <4 x i32> %617, zeroinitializer
  %619 = sub nsw <4 x i32> zeroinitializer, %617
  %620 = select <4 x i1> %618, <4 x i32> %619, <4 x i32> %617
  %621 = add <4 x i32> %620, %600
  %622 = load <4 x i8>, <4 x i8>* %61, align 1
  %623 = zext <4 x i8> %622 to <4 x i32>
  %624 = load <4 x i8>, <4 x i8>* %63, align 1
  %625 = zext <4 x i8> %624 to <4 x i32>
  %626 = mul nuw nsw <4 x i32> %625, %623
  %627 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %623
  %628 = getelementptr inbounds i8, i8* %556, i64 12
  %629 = bitcast i8* %628 to <4 x i8>*
  %630 = load <4 x i8>, <4 x i8>* %629, align 1
  %631 = zext <4 x i8> %630 to <4 x i32>
  %632 = mul nsw <4 x i32> %627, %631
  %633 = add nuw nsw <4 x i32> %626, <i32 32, i32 32, i32 32, i32 32>
  %634 = add nsw <4 x i32> %633, %632
  %635 = ashr <4 x i32> %634, <i32 6, i32 6, i32 6, i32 6>
  %636 = load <4 x i8>, <4 x i8>* %65, align 1
  %637 = zext <4 x i8> %636 to <4 x i32>
  %638 = sub nsw <4 x i32> %635, %637
  %639 = icmp slt <4 x i32> %638, zeroinitializer
  %640 = sub nsw <4 x i32> zeroinitializer, %638
  %641 = select <4 x i1> %639, <4 x i32> %640, <4 x i32> %638
  %642 = add <4 x i32> %641, %621
  %643 = shufflevector <4 x i32> %642, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %644 = add <4 x i32> %642, %643
  %645 = getelementptr inbounds i8, i8* %556, i64 %12
  %646 = shufflevector <4 x i32> %644, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %647 = add <4 x i32> %644, %646
  %648 = shufflevector <4 x i32> %647, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %649 = load <4 x i8>, <4 x i8>* %66, align 1
  %650 = zext <4 x i8> %649 to <4 x i32>
  %651 = load <4 x i8>, <4 x i8>* %67, align 1
  %652 = zext <4 x i8> %651 to <4 x i32>
  %653 = mul nuw nsw <4 x i32> %652, %650
  %654 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %650
  %655 = bitcast i8* %645 to <4 x i8>*
  %656 = load <4 x i8>, <4 x i8>* %655, align 1
  %657 = zext <4 x i8> %656 to <4 x i32>
  %658 = mul nsw <4 x i32> %654, %657
  %659 = add nuw nsw <4 x i32> %653, <i32 32, i32 32, i32 32, i32 32>
  %660 = add nsw <4 x i32> %659, %658
  %661 = ashr <4 x i32> %660, <i32 6, i32 6, i32 6, i32 6>
  %662 = load <4 x i8>, <4 x i8>* %68, align 1
  %663 = zext <4 x i8> %662 to <4 x i32>
  %664 = sub nsw <4 x i32> %661, %663
  %665 = icmp slt <4 x i32> %664, zeroinitializer
  %666 = sub nsw <4 x i32> zeroinitializer, %664
  %667 = select <4 x i1> %665, <4 x i32> %666, <4 x i32> %664
  %668 = add <4 x i32> %667, %648
  %669 = load <4 x i8>, <4 x i8>* %70, align 1
  %670 = zext <4 x i8> %669 to <4 x i32>
  %671 = load <4 x i8>, <4 x i8>* %72, align 1
  %672 = zext <4 x i8> %671 to <4 x i32>
  %673 = mul nuw nsw <4 x i32> %672, %670
  %674 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %670
  %675 = getelementptr inbounds i8, i8* %645, i64 4
  %676 = bitcast i8* %675 to <4 x i8>*
  %677 = load <4 x i8>, <4 x i8>* %676, align 1
  %678 = zext <4 x i8> %677 to <4 x i32>
  %679 = mul nsw <4 x i32> %674, %678
  %680 = add nuw nsw <4 x i32> %673, <i32 32, i32 32, i32 32, i32 32>
  %681 = add nsw <4 x i32> %680, %679
  %682 = ashr <4 x i32> %681, <i32 6, i32 6, i32 6, i32 6>
  %683 = load <4 x i8>, <4 x i8>* %74, align 1
  %684 = zext <4 x i8> %683 to <4 x i32>
  %685 = sub nsw <4 x i32> %682, %684
  %686 = icmp slt <4 x i32> %685, zeroinitializer
  %687 = sub nsw <4 x i32> zeroinitializer, %685
  %688 = select <4 x i1> %686, <4 x i32> %687, <4 x i32> %685
  %689 = add <4 x i32> %688, %668
  %690 = load <4 x i8>, <4 x i8>* %76, align 1
  %691 = zext <4 x i8> %690 to <4 x i32>
  %692 = load <4 x i8>, <4 x i8>* %78, align 1
  %693 = zext <4 x i8> %692 to <4 x i32>
  %694 = mul nuw nsw <4 x i32> %693, %691
  %695 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %691
  %696 = getelementptr inbounds i8, i8* %645, i64 8
  %697 = bitcast i8* %696 to <4 x i8>*
  %698 = load <4 x i8>, <4 x i8>* %697, align 1
  %699 = zext <4 x i8> %698 to <4 x i32>
  %700 = mul nsw <4 x i32> %695, %699
  %701 = add nuw nsw <4 x i32> %694, <i32 32, i32 32, i32 32, i32 32>
  %702 = add nsw <4 x i32> %701, %700
  %703 = ashr <4 x i32> %702, <i32 6, i32 6, i32 6, i32 6>
  %704 = load <4 x i8>, <4 x i8>* %80, align 1
  %705 = zext <4 x i8> %704 to <4 x i32>
  %706 = sub nsw <4 x i32> %703, %705
  %707 = icmp slt <4 x i32> %706, zeroinitializer
  %708 = sub nsw <4 x i32> zeroinitializer, %706
  %709 = select <4 x i1> %707, <4 x i32> %708, <4 x i32> %706
  %710 = add <4 x i32> %709, %689
  %711 = load <4 x i8>, <4 x i8>* %82, align 1
  %712 = zext <4 x i8> %711 to <4 x i32>
  %713 = load <4 x i8>, <4 x i8>* %84, align 1
  %714 = zext <4 x i8> %713 to <4 x i32>
  %715 = mul nuw nsw <4 x i32> %714, %712
  %716 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %712
  %717 = getelementptr inbounds i8, i8* %645, i64 12
  %718 = bitcast i8* %717 to <4 x i8>*
  %719 = load <4 x i8>, <4 x i8>* %718, align 1
  %720 = zext <4 x i8> %719 to <4 x i32>
  %721 = mul nsw <4 x i32> %716, %720
  %722 = add nuw nsw <4 x i32> %715, <i32 32, i32 32, i32 32, i32 32>
  %723 = add nsw <4 x i32> %722, %721
  %724 = ashr <4 x i32> %723, <i32 6, i32 6, i32 6, i32 6>
  %725 = load <4 x i8>, <4 x i8>* %86, align 1
  %726 = zext <4 x i8> %725 to <4 x i32>
  %727 = sub nsw <4 x i32> %724, %726
  %728 = icmp slt <4 x i32> %727, zeroinitializer
  %729 = sub nsw <4 x i32> zeroinitializer, %727
  %730 = select <4 x i1> %728, <4 x i32> %729, <4 x i32> %727
  %731 = add <4 x i32> %730, %710
  %732 = shufflevector <4 x i32> %731, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %733 = add <4 x i32> %731, %732
  %734 = getelementptr inbounds i8, i8* %645, i64 %12
  %735 = shufflevector <4 x i32> %733, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %736 = add <4 x i32> %733, %735
  %737 = shufflevector <4 x i32> %736, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %738 = load <4 x i8>, <4 x i8>* %23, align 1
  %739 = zext <4 x i8> %738 to <4 x i32>
  %740 = load <4 x i8>, <4 x i8>* %87, align 1
  %741 = zext <4 x i8> %740 to <4 x i32>
  %742 = mul nuw nsw <4 x i32> %741, %739
  %743 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %739
  %744 = bitcast i8* %734 to <4 x i8>*
  %745 = load <4 x i8>, <4 x i8>* %744, align 1
  %746 = zext <4 x i8> %745 to <4 x i32>
  %747 = mul nsw <4 x i32> %743, %746
  %748 = add nuw nsw <4 x i32> %742, <i32 32, i32 32, i32 32, i32 32>
  %749 = add nsw <4 x i32> %748, %747
  %750 = ashr <4 x i32> %749, <i32 6, i32 6, i32 6, i32 6>
  %751 = load <4 x i8>, <4 x i8>* %88, align 1
  %752 = zext <4 x i8> %751 to <4 x i32>
  %753 = sub nsw <4 x i32> %750, %752
  %754 = icmp slt <4 x i32> %753, zeroinitializer
  %755 = sub nsw <4 x i32> zeroinitializer, %753
  %756 = select <4 x i1> %754, <4 x i32> %755, <4 x i32> %753
  %757 = add <4 x i32> %756, %737
  %758 = load <4 x i8>, <4 x i8>* %90, align 1
  %759 = zext <4 x i8> %758 to <4 x i32>
  %760 = load <4 x i8>, <4 x i8>* %92, align 1
  %761 = zext <4 x i8> %760 to <4 x i32>
  %762 = mul nuw nsw <4 x i32> %761, %759
  %763 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %759
  %764 = getelementptr inbounds i8, i8* %734, i64 4
  %765 = bitcast i8* %764 to <4 x i8>*
  %766 = load <4 x i8>, <4 x i8>* %765, align 1
  %767 = zext <4 x i8> %766 to <4 x i32>
  %768 = mul nsw <4 x i32> %763, %767
  %769 = add nuw nsw <4 x i32> %762, <i32 32, i32 32, i32 32, i32 32>
  %770 = add nsw <4 x i32> %769, %768
  %771 = ashr <4 x i32> %770, <i32 6, i32 6, i32 6, i32 6>
  %772 = load <4 x i8>, <4 x i8>* %94, align 1
  %773 = zext <4 x i8> %772 to <4 x i32>
  %774 = sub nsw <4 x i32> %771, %773
  %775 = icmp slt <4 x i32> %774, zeroinitializer
  %776 = sub nsw <4 x i32> zeroinitializer, %774
  %777 = select <4 x i1> %775, <4 x i32> %776, <4 x i32> %774
  %778 = add <4 x i32> %777, %757
  %779 = load <4 x i8>, <4 x i8>* %96, align 1
  %780 = zext <4 x i8> %779 to <4 x i32>
  %781 = load <4 x i8>, <4 x i8>* %98, align 1
  %782 = zext <4 x i8> %781 to <4 x i32>
  %783 = mul nuw nsw <4 x i32> %782, %780
  %784 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %780
  %785 = getelementptr inbounds i8, i8* %734, i64 8
  %786 = bitcast i8* %785 to <4 x i8>*
  %787 = load <4 x i8>, <4 x i8>* %786, align 1
  %788 = zext <4 x i8> %787 to <4 x i32>
  %789 = mul nsw <4 x i32> %784, %788
  %790 = add nuw nsw <4 x i32> %783, <i32 32, i32 32, i32 32, i32 32>
  %791 = add nsw <4 x i32> %790, %789
  %792 = ashr <4 x i32> %791, <i32 6, i32 6, i32 6, i32 6>
  %793 = load <4 x i8>, <4 x i8>* %100, align 1
  %794 = zext <4 x i8> %793 to <4 x i32>
  %795 = sub nsw <4 x i32> %792, %794
  %796 = icmp slt <4 x i32> %795, zeroinitializer
  %797 = sub nsw <4 x i32> zeroinitializer, %795
  %798 = select <4 x i1> %796, <4 x i32> %797, <4 x i32> %795
  %799 = add <4 x i32> %798, %778
  %800 = load <4 x i8>, <4 x i8>* %102, align 1
  %801 = zext <4 x i8> %800 to <4 x i32>
  %802 = load <4 x i8>, <4 x i8>* %104, align 1
  %803 = zext <4 x i8> %802 to <4 x i32>
  %804 = mul nuw nsw <4 x i32> %803, %801
  %805 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %801
  %806 = getelementptr inbounds i8, i8* %734, i64 12
  %807 = bitcast i8* %806 to <4 x i8>*
  %808 = load <4 x i8>, <4 x i8>* %807, align 1
  %809 = zext <4 x i8> %808 to <4 x i32>
  %810 = mul nsw <4 x i32> %805, %809
  %811 = add nuw nsw <4 x i32> %804, <i32 32, i32 32, i32 32, i32 32>
  %812 = add nsw <4 x i32> %811, %810
  %813 = ashr <4 x i32> %812, <i32 6, i32 6, i32 6, i32 6>
  %814 = load <4 x i8>, <4 x i8>* %106, align 1
  %815 = zext <4 x i8> %814 to <4 x i32>
  %816 = sub nsw <4 x i32> %813, %815
  %817 = icmp slt <4 x i32> %816, zeroinitializer
  %818 = sub nsw <4 x i32> zeroinitializer, %816
  %819 = select <4 x i1> %817, <4 x i32> %818, <4 x i32> %816
  %820 = add <4 x i32> %819, %799
  %821 = shufflevector <4 x i32> %820, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %822 = add <4 x i32> %820, %821
  %823 = shufflevector <4 x i32> %822, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %824 = add <4 x i32> %822, %823
  %825 = extractelement <4 x i32> %824, i32 0
  %826 = getelementptr inbounds i32, i32* %8, i64 %469
  store i32 %825, i32* %826, align 4
  %827 = add nuw nsw i64 %469, 1
  %828 = icmp eq i64 %827, 4
  br i1 %828, label %829, label %468

829:                                              ; preds = %468, %107
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad8x32_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %56

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %50, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %49, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %54, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %51, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %52, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %53, %13 ], [ %5, %8 ]
  %20 = bitcast i8* %19 to <8 x i8>*
  %21 = load <8 x i8>, <8 x i8>* %20, align 1
  %22 = zext <8 x i8> %21 to <8 x i32>
  %23 = bitcast i8* %17 to <8 x i8>*
  %24 = load <8 x i8>, <8 x i8>* %23, align 1
  %25 = zext <8 x i8> %24 to <8 x i32>
  %26 = mul nuw nsw <8 x i32> %25, %22
  %27 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %22
  %28 = bitcast i8* %18 to <8 x i8>*
  %29 = load <8 x i8>, <8 x i8>* %28, align 1
  %30 = zext <8 x i8> %29 to <8 x i32>
  %31 = mul nsw <8 x i32> %27, %30
  %32 = add nuw nsw <8 x i32> %26, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %33 = add nsw <8 x i32> %32, %31
  %34 = ashr <8 x i32> %33, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %35 = bitcast i8* %14 to <8 x i8>*
  %36 = load <8 x i8>, <8 x i8>* %35, align 1
  %37 = zext <8 x i8> %36 to <8 x i32>
  %38 = sub nsw <8 x i32> %34, %37
  %39 = icmp slt <8 x i32> %38, zeroinitializer
  %40 = sub nsw <8 x i32> zeroinitializer, %38
  %41 = select <8 x i1> %39, <8 x i32> %40, <8 x i32> %38
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = add <8 x i32> %41, %42
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add <8 x i32> %43, %44
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = add <8 x i32> %45, %46
  %48 = extractelement <8 x i32> %47, i32 0
  %49 = add i32 %48, %15
  %50 = getelementptr inbounds i8, i8* %14, i64 %10
  %51 = getelementptr inbounds i8, i8* %17, i64 %11
  %52 = getelementptr inbounds i8, i8* %18, i64 8
  %53 = getelementptr inbounds i8, i8* %19, i64 %12
  %54 = add nuw nsw i32 %16, 1
  %55 = icmp eq i32 %54, 32
  br i1 %55, label %99, label %13

56:                                               ; preds = %8, %56
  %57 = phi i8* [ %93, %56 ], [ %0, %8 ]
  %58 = phi i32 [ %92, %56 ], [ 0, %8 ]
  %59 = phi i32 [ %97, %56 ], [ 0, %8 ]
  %60 = phi i8* [ %94, %56 ], [ %4, %8 ]
  %61 = phi i8* [ %95, %56 ], [ %2, %8 ]
  %62 = phi i8* [ %96, %56 ], [ %5, %8 ]
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = bitcast i8* %60 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %68, %65
  %70 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %65
  %71 = bitcast i8* %61 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1
  %73 = zext <8 x i8> %72 to <8 x i32>
  %74 = mul nsw <8 x i32> %70, %73
  %75 = add nuw nsw <8 x i32> %69, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %76 = add nsw <8 x i32> %75, %74
  %77 = ashr <8 x i32> %76, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %78 = bitcast i8* %57 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1
  %80 = zext <8 x i8> %79 to <8 x i32>
  %81 = sub nsw <8 x i32> %77, %80
  %82 = icmp slt <8 x i32> %81, zeroinitializer
  %83 = sub nsw <8 x i32> zeroinitializer, %81
  %84 = select <8 x i1> %82, <8 x i32> %83, <8 x i32> %81
  %85 = shufflevector <8 x i32> %84, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = add <8 x i32> %84, %85
  %87 = shufflevector <8 x i32> %86, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = add <8 x i32> %86, %87
  %89 = shufflevector <8 x i32> %88, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add <8 x i32> %88, %89
  %91 = extractelement <8 x i32> %90, i32 0
  %92 = add i32 %91, %58
  %93 = getelementptr inbounds i8, i8* %57, i64 %10
  %94 = getelementptr inbounds i8, i8* %60, i64 8
  %95 = getelementptr inbounds i8, i8* %61, i64 %11
  %96 = getelementptr inbounds i8, i8* %62, i64 %12
  %97 = add nuw nsw i32 %59, 1
  %98 = icmp eq i32 %97, 32
  br i1 %98, label %99, label %56

99:                                               ; preds = %56, %13
  %100 = phi i32 [ %49, %13 ], [ %92, %56 ]
  ret i32 %100
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad8x32x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %61

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %52, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %51, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %56, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %53, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %54, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %55, %15 ], [ %5, %9 ]
  %22 = bitcast i8* %21 to <8 x i8>*
  %23 = load <8 x i8>, <8 x i8>* %22, align 1
  %24 = zext <8 x i8> %23 to <8 x i32>
  %25 = bitcast i8* %19 to <8 x i8>*
  %26 = load <8 x i8>, <8 x i8>* %25, align 1
  %27 = zext <8 x i8> %26 to <8 x i32>
  %28 = mul nuw nsw <8 x i32> %27, %24
  %29 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %24
  %30 = bitcast i8* %20 to <8 x i8>*
  %31 = load <8 x i8>, <8 x i8>* %30, align 1
  %32 = zext <8 x i8> %31 to <8 x i32>
  %33 = mul nsw <8 x i32> %29, %32
  %34 = add nuw nsw <8 x i32> %28, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %35 = add nsw <8 x i32> %34, %33
  %36 = ashr <8 x i32> %35, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %37 = bitcast i8* %16 to <8 x i8>*
  %38 = load <8 x i8>, <8 x i8>* %37, align 1
  %39 = zext <8 x i8> %38 to <8 x i32>
  %40 = sub nsw <8 x i32> %36, %39
  %41 = icmp slt <8 x i32> %40, zeroinitializer
  %42 = sub nsw <8 x i32> zeroinitializer, %40
  %43 = select <8 x i1> %41, <8 x i32> %42, <8 x i32> %40
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add <8 x i32> %43, %44
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = add <8 x i32> %45, %46
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = add <8 x i32> %47, %48
  %50 = extractelement <8 x i32> %49, i32 0
  %51 = add i32 %50, %17
  %52 = getelementptr inbounds i8, i8* %16, i64 %11
  %53 = getelementptr inbounds i8, i8* %19, i64 %12
  %54 = getelementptr inbounds i8, i8* %20, i64 8
  %55 = getelementptr inbounds i8, i8* %21, i64 %13
  %56 = add nuw nsw i32 %18, 1
  %57 = icmp eq i32 %56, 32
  br i1 %57, label %58, label %15

58:                                               ; preds = %15
  store i32 %51, i32* %8, align 4
  %59 = getelementptr inbounds i8*, i8** %2, i64 1
  %60 = load i8*, i8** %59, align 8
  br label %108

61:                                               ; preds = %9, %61
  %62 = phi i8* [ %98, %61 ], [ %0, %9 ]
  %63 = phi i32 [ %97, %61 ], [ 0, %9 ]
  %64 = phi i32 [ %102, %61 ], [ 0, %9 ]
  %65 = phi i8* [ %99, %61 ], [ %4, %9 ]
  %66 = phi i8* [ %100, %61 ], [ %14, %9 ]
  %67 = phi i8* [ %101, %61 ], [ %5, %9 ]
  %68 = bitcast i8* %67 to <8 x i8>*
  %69 = load <8 x i8>, <8 x i8>* %68, align 1
  %70 = zext <8 x i8> %69 to <8 x i32>
  %71 = bitcast i8* %65 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1
  %73 = zext <8 x i8> %72 to <8 x i32>
  %74 = mul nuw nsw <8 x i32> %73, %70
  %75 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %70
  %76 = bitcast i8* %66 to <8 x i8>*
  %77 = load <8 x i8>, <8 x i8>* %76, align 1
  %78 = zext <8 x i8> %77 to <8 x i32>
  %79 = mul nsw <8 x i32> %75, %78
  %80 = add nuw nsw <8 x i32> %74, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %81 = add nsw <8 x i32> %80, %79
  %82 = ashr <8 x i32> %81, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %83 = bitcast i8* %62 to <8 x i8>*
  %84 = load <8 x i8>, <8 x i8>* %83, align 1
  %85 = zext <8 x i8> %84 to <8 x i32>
  %86 = sub nsw <8 x i32> %82, %85
  %87 = icmp slt <8 x i32> %86, zeroinitializer
  %88 = sub nsw <8 x i32> zeroinitializer, %86
  %89 = select <8 x i1> %87, <8 x i32> %88, <8 x i32> %86
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add <8 x i32> %89, %90
  %92 = shufflevector <8 x i32> %91, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add <8 x i32> %91, %92
  %94 = shufflevector <8 x i32> %93, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add <8 x i32> %93, %94
  %96 = extractelement <8 x i32> %95, i32 0
  %97 = add i32 %96, %63
  %98 = getelementptr inbounds i8, i8* %62, i64 %11
  %99 = getelementptr inbounds i8, i8* %65, i64 8
  %100 = getelementptr inbounds i8, i8* %66, i64 %12
  %101 = getelementptr inbounds i8, i8* %67, i64 %13
  %102 = add nuw nsw i32 %64, 1
  %103 = icmp eq i32 %102, 32
  br i1 %103, label %104, label %61

104:                                              ; preds = %61
  store i32 %97, i32* %8, align 4
  %105 = getelementptr inbounds i8*, i8** %2, i64 1
  %106 = load i8*, i8** %105, align 8
  br label %247

107:                                              ; preds = %384, %245
  ret void

108:                                              ; preds = %108, %58
  %109 = phi i8* [ %0, %58 ], [ %145, %108 ]
  %110 = phi i32 [ 0, %58 ], [ %144, %108 ]
  %111 = phi i32 [ 0, %58 ], [ %149, %108 ]
  %112 = phi i8* [ %60, %58 ], [ %146, %108 ]
  %113 = phi i8* [ %4, %58 ], [ %147, %108 ]
  %114 = phi i8* [ %5, %58 ], [ %148, %108 ]
  %115 = bitcast i8* %114 to <8 x i8>*
  %116 = load <8 x i8>, <8 x i8>* %115, align 1
  %117 = zext <8 x i8> %116 to <8 x i32>
  %118 = bitcast i8* %112 to <8 x i8>*
  %119 = load <8 x i8>, <8 x i8>* %118, align 1
  %120 = zext <8 x i8> %119 to <8 x i32>
  %121 = mul nuw nsw <8 x i32> %120, %117
  %122 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %117
  %123 = bitcast i8* %113 to <8 x i8>*
  %124 = load <8 x i8>, <8 x i8>* %123, align 1
  %125 = zext <8 x i8> %124 to <8 x i32>
  %126 = mul nsw <8 x i32> %122, %125
  %127 = add nuw nsw <8 x i32> %121, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %128 = add nsw <8 x i32> %127, %126
  %129 = ashr <8 x i32> %128, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %130 = bitcast i8* %109 to <8 x i8>*
  %131 = load <8 x i8>, <8 x i8>* %130, align 1
  %132 = zext <8 x i8> %131 to <8 x i32>
  %133 = sub nsw <8 x i32> %129, %132
  %134 = icmp slt <8 x i32> %133, zeroinitializer
  %135 = sub nsw <8 x i32> zeroinitializer, %133
  %136 = select <8 x i1> %134, <8 x i32> %135, <8 x i32> %133
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %138 = add <8 x i32> %136, %137
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = add <8 x i32> %138, %139
  %141 = shufflevector <8 x i32> %140, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = add <8 x i32> %140, %141
  %143 = extractelement <8 x i32> %142, i32 0
  %144 = add i32 %143, %110
  %145 = getelementptr inbounds i8, i8* %109, i64 %11
  %146 = getelementptr inbounds i8, i8* %112, i64 %12
  %147 = getelementptr inbounds i8, i8* %113, i64 8
  %148 = getelementptr inbounds i8, i8* %114, i64 %13
  %149 = add nuw nsw i32 %111, 1
  %150 = icmp eq i32 %149, 32
  br i1 %150, label %151, label %108

151:                                              ; preds = %108
  %152 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %144, i32* %152, align 4
  %153 = getelementptr inbounds i8*, i8** %2, i64 2
  %154 = load i8*, i8** %153, align 8
  br label %155

155:                                              ; preds = %155, %151
  %156 = phi i8* [ %0, %151 ], [ %192, %155 ]
  %157 = phi i32 [ 0, %151 ], [ %191, %155 ]
  %158 = phi i32 [ 0, %151 ], [ %196, %155 ]
  %159 = phi i8* [ %154, %151 ], [ %193, %155 ]
  %160 = phi i8* [ %4, %151 ], [ %194, %155 ]
  %161 = phi i8* [ %5, %151 ], [ %195, %155 ]
  %162 = bitcast i8* %161 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1
  %164 = zext <8 x i8> %163 to <8 x i32>
  %165 = bitcast i8* %159 to <8 x i8>*
  %166 = load <8 x i8>, <8 x i8>* %165, align 1
  %167 = zext <8 x i8> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %167, %164
  %169 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %164
  %170 = bitcast i8* %160 to <8 x i8>*
  %171 = load <8 x i8>, <8 x i8>* %170, align 1
  %172 = zext <8 x i8> %171 to <8 x i32>
  %173 = mul nsw <8 x i32> %169, %172
  %174 = add nuw nsw <8 x i32> %168, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %175 = add nsw <8 x i32> %174, %173
  %176 = ashr <8 x i32> %175, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %177 = bitcast i8* %156 to <8 x i8>*
  %178 = load <8 x i8>, <8 x i8>* %177, align 1
  %179 = zext <8 x i8> %178 to <8 x i32>
  %180 = sub nsw <8 x i32> %176, %179
  %181 = icmp slt <8 x i32> %180, zeroinitializer
  %182 = sub nsw <8 x i32> zeroinitializer, %180
  %183 = select <8 x i1> %181, <8 x i32> %182, <8 x i32> %180
  %184 = shufflevector <8 x i32> %183, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %185 = add <8 x i32> %183, %184
  %186 = shufflevector <8 x i32> %185, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = add <8 x i32> %185, %186
  %188 = shufflevector <8 x i32> %187, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %189 = add <8 x i32> %187, %188
  %190 = extractelement <8 x i32> %189, i32 0
  %191 = add i32 %190, %157
  %192 = getelementptr inbounds i8, i8* %156, i64 %11
  %193 = getelementptr inbounds i8, i8* %159, i64 %12
  %194 = getelementptr inbounds i8, i8* %160, i64 8
  %195 = getelementptr inbounds i8, i8* %161, i64 %13
  %196 = add nuw nsw i32 %158, 1
  %197 = icmp eq i32 %196, 32
  br i1 %197, label %198, label %155

198:                                              ; preds = %155
  %199 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %191, i32* %199, align 4
  %200 = getelementptr inbounds i8*, i8** %2, i64 3
  %201 = load i8*, i8** %200, align 8
  br label %202

202:                                              ; preds = %202, %198
  %203 = phi i8* [ %0, %198 ], [ %239, %202 ]
  %204 = phi i32 [ 0, %198 ], [ %238, %202 ]
  %205 = phi i32 [ 0, %198 ], [ %243, %202 ]
  %206 = phi i8* [ %201, %198 ], [ %240, %202 ]
  %207 = phi i8* [ %4, %198 ], [ %241, %202 ]
  %208 = phi i8* [ %5, %198 ], [ %242, %202 ]
  %209 = bitcast i8* %208 to <8 x i8>*
  %210 = load <8 x i8>, <8 x i8>* %209, align 1
  %211 = zext <8 x i8> %210 to <8 x i32>
  %212 = bitcast i8* %206 to <8 x i8>*
  %213 = load <8 x i8>, <8 x i8>* %212, align 1
  %214 = zext <8 x i8> %213 to <8 x i32>
  %215 = mul nuw nsw <8 x i32> %214, %211
  %216 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %211
  %217 = bitcast i8* %207 to <8 x i8>*
  %218 = load <8 x i8>, <8 x i8>* %217, align 1
  %219 = zext <8 x i8> %218 to <8 x i32>
  %220 = mul nsw <8 x i32> %216, %219
  %221 = add nuw nsw <8 x i32> %215, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %222 = add nsw <8 x i32> %221, %220
  %223 = ashr <8 x i32> %222, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %224 = bitcast i8* %203 to <8 x i8>*
  %225 = load <8 x i8>, <8 x i8>* %224, align 1
  %226 = zext <8 x i8> %225 to <8 x i32>
  %227 = sub nsw <8 x i32> %223, %226
  %228 = icmp slt <8 x i32> %227, zeroinitializer
  %229 = sub nsw <8 x i32> zeroinitializer, %227
  %230 = select <8 x i1> %228, <8 x i32> %229, <8 x i32> %227
  %231 = shufflevector <8 x i32> %230, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %232 = add <8 x i32> %230, %231
  %233 = shufflevector <8 x i32> %232, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %234 = add <8 x i32> %232, %233
  %235 = shufflevector <8 x i32> %234, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %236 = add <8 x i32> %234, %235
  %237 = extractelement <8 x i32> %236, i32 0
  %238 = add i32 %237, %204
  %239 = getelementptr inbounds i8, i8* %203, i64 %11
  %240 = getelementptr inbounds i8, i8* %206, i64 %12
  %241 = getelementptr inbounds i8, i8* %207, i64 8
  %242 = getelementptr inbounds i8, i8* %208, i64 %13
  %243 = add nuw nsw i32 %205, 1
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %245, label %202

245:                                              ; preds = %202
  %246 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %238, i32* %246, align 4
  br label %107

247:                                              ; preds = %247, %104
  %248 = phi i8* [ %0, %104 ], [ %284, %247 ]
  %249 = phi i32 [ 0, %104 ], [ %283, %247 ]
  %250 = phi i32 [ 0, %104 ], [ %288, %247 ]
  %251 = phi i8* [ %4, %104 ], [ %285, %247 ]
  %252 = phi i8* [ %106, %104 ], [ %286, %247 ]
  %253 = phi i8* [ %5, %104 ], [ %287, %247 ]
  %254 = bitcast i8* %253 to <8 x i8>*
  %255 = load <8 x i8>, <8 x i8>* %254, align 1
  %256 = zext <8 x i8> %255 to <8 x i32>
  %257 = bitcast i8* %251 to <8 x i8>*
  %258 = load <8 x i8>, <8 x i8>* %257, align 1
  %259 = zext <8 x i8> %258 to <8 x i32>
  %260 = mul nuw nsw <8 x i32> %259, %256
  %261 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %256
  %262 = bitcast i8* %252 to <8 x i8>*
  %263 = load <8 x i8>, <8 x i8>* %262, align 1
  %264 = zext <8 x i8> %263 to <8 x i32>
  %265 = mul nsw <8 x i32> %261, %264
  %266 = add nuw nsw <8 x i32> %260, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %267 = add nsw <8 x i32> %266, %265
  %268 = ashr <8 x i32> %267, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %269 = bitcast i8* %248 to <8 x i8>*
  %270 = load <8 x i8>, <8 x i8>* %269, align 1
  %271 = zext <8 x i8> %270 to <8 x i32>
  %272 = sub nsw <8 x i32> %268, %271
  %273 = icmp slt <8 x i32> %272, zeroinitializer
  %274 = sub nsw <8 x i32> zeroinitializer, %272
  %275 = select <8 x i1> %273, <8 x i32> %274, <8 x i32> %272
  %276 = shufflevector <8 x i32> %275, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %277 = add <8 x i32> %275, %276
  %278 = shufflevector <8 x i32> %277, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %279 = add <8 x i32> %277, %278
  %280 = shufflevector <8 x i32> %279, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = add <8 x i32> %279, %280
  %282 = extractelement <8 x i32> %281, i32 0
  %283 = add i32 %282, %249
  %284 = getelementptr inbounds i8, i8* %248, i64 %11
  %285 = getelementptr inbounds i8, i8* %251, i64 8
  %286 = getelementptr inbounds i8, i8* %252, i64 %12
  %287 = getelementptr inbounds i8, i8* %253, i64 %13
  %288 = add nuw nsw i32 %250, 1
  %289 = icmp eq i32 %288, 32
  br i1 %289, label %290, label %247

290:                                              ; preds = %247
  %291 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %283, i32* %291, align 4
  %292 = getelementptr inbounds i8*, i8** %2, i64 2
  %293 = load i8*, i8** %292, align 8
  br label %294

294:                                              ; preds = %294, %290
  %295 = phi i8* [ %0, %290 ], [ %331, %294 ]
  %296 = phi i32 [ 0, %290 ], [ %330, %294 ]
  %297 = phi i32 [ 0, %290 ], [ %335, %294 ]
  %298 = phi i8* [ %4, %290 ], [ %332, %294 ]
  %299 = phi i8* [ %293, %290 ], [ %333, %294 ]
  %300 = phi i8* [ %5, %290 ], [ %334, %294 ]
  %301 = bitcast i8* %300 to <8 x i8>*
  %302 = load <8 x i8>, <8 x i8>* %301, align 1
  %303 = zext <8 x i8> %302 to <8 x i32>
  %304 = bitcast i8* %298 to <8 x i8>*
  %305 = load <8 x i8>, <8 x i8>* %304, align 1
  %306 = zext <8 x i8> %305 to <8 x i32>
  %307 = mul nuw nsw <8 x i32> %306, %303
  %308 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %303
  %309 = bitcast i8* %299 to <8 x i8>*
  %310 = load <8 x i8>, <8 x i8>* %309, align 1
  %311 = zext <8 x i8> %310 to <8 x i32>
  %312 = mul nsw <8 x i32> %308, %311
  %313 = add nuw nsw <8 x i32> %307, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %314 = add nsw <8 x i32> %313, %312
  %315 = ashr <8 x i32> %314, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %316 = bitcast i8* %295 to <8 x i8>*
  %317 = load <8 x i8>, <8 x i8>* %316, align 1
  %318 = zext <8 x i8> %317 to <8 x i32>
  %319 = sub nsw <8 x i32> %315, %318
  %320 = icmp slt <8 x i32> %319, zeroinitializer
  %321 = sub nsw <8 x i32> zeroinitializer, %319
  %322 = select <8 x i1> %320, <8 x i32> %321, <8 x i32> %319
  %323 = shufflevector <8 x i32> %322, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %324 = add <8 x i32> %322, %323
  %325 = shufflevector <8 x i32> %324, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %326 = add <8 x i32> %324, %325
  %327 = shufflevector <8 x i32> %326, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %328 = add <8 x i32> %326, %327
  %329 = extractelement <8 x i32> %328, i32 0
  %330 = add i32 %329, %296
  %331 = getelementptr inbounds i8, i8* %295, i64 %11
  %332 = getelementptr inbounds i8, i8* %298, i64 8
  %333 = getelementptr inbounds i8, i8* %299, i64 %12
  %334 = getelementptr inbounds i8, i8* %300, i64 %13
  %335 = add nuw nsw i32 %297, 1
  %336 = icmp eq i32 %335, 32
  br i1 %336, label %337, label %294

337:                                              ; preds = %294
  %338 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %330, i32* %338, align 4
  %339 = getelementptr inbounds i8*, i8** %2, i64 3
  %340 = load i8*, i8** %339, align 8
  br label %341

341:                                              ; preds = %341, %337
  %342 = phi i8* [ %0, %337 ], [ %378, %341 ]
  %343 = phi i32 [ 0, %337 ], [ %377, %341 ]
  %344 = phi i32 [ 0, %337 ], [ %382, %341 ]
  %345 = phi i8* [ %4, %337 ], [ %379, %341 ]
  %346 = phi i8* [ %340, %337 ], [ %380, %341 ]
  %347 = phi i8* [ %5, %337 ], [ %381, %341 ]
  %348 = bitcast i8* %347 to <8 x i8>*
  %349 = load <8 x i8>, <8 x i8>* %348, align 1
  %350 = zext <8 x i8> %349 to <8 x i32>
  %351 = bitcast i8* %345 to <8 x i8>*
  %352 = load <8 x i8>, <8 x i8>* %351, align 1
  %353 = zext <8 x i8> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %353, %350
  %355 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %350
  %356 = bitcast i8* %346 to <8 x i8>*
  %357 = load <8 x i8>, <8 x i8>* %356, align 1
  %358 = zext <8 x i8> %357 to <8 x i32>
  %359 = mul nsw <8 x i32> %355, %358
  %360 = add nuw nsw <8 x i32> %354, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %361 = add nsw <8 x i32> %360, %359
  %362 = ashr <8 x i32> %361, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %363 = bitcast i8* %342 to <8 x i8>*
  %364 = load <8 x i8>, <8 x i8>* %363, align 1
  %365 = zext <8 x i8> %364 to <8 x i32>
  %366 = sub nsw <8 x i32> %362, %365
  %367 = icmp slt <8 x i32> %366, zeroinitializer
  %368 = sub nsw <8 x i32> zeroinitializer, %366
  %369 = select <8 x i1> %367, <8 x i32> %368, <8 x i32> %366
  %370 = shufflevector <8 x i32> %369, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %371 = add <8 x i32> %369, %370
  %372 = shufflevector <8 x i32> %371, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %373 = add <8 x i32> %371, %372
  %374 = shufflevector <8 x i32> %373, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %375 = add <8 x i32> %373, %374
  %376 = extractelement <8 x i32> %375, i32 0
  %377 = add i32 %376, %343
  %378 = getelementptr inbounds i8, i8* %342, i64 %11
  %379 = getelementptr inbounds i8, i8* %345, i64 8
  %380 = getelementptr inbounds i8, i8* %346, i64 %12
  %381 = getelementptr inbounds i8, i8* %347, i64 %13
  %382 = add nuw nsw i32 %344, 1
  %383 = icmp eq i32 %382, 32
  br i1 %383, label %384, label %341

384:                                              ; preds = %341
  %385 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %377, i32* %385, align 4
  br label %107
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad32x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %244

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %238, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %237, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %242, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %239, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %240, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %241, %13 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %21 = bitcast i8* %19 to <4 x i8>*
  %22 = load <4 x i8>, <4 x i8>* %21, align 1
  %23 = zext <4 x i8> %22 to <4 x i32>
  %24 = bitcast i8* %17 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1
  %26 = zext <4 x i8> %25 to <4 x i32>
  %27 = mul nuw nsw <4 x i32> %26, %23
  %28 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %23
  %29 = bitcast i8* %18 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nsw <4 x i32> %28, %31
  %33 = add nuw nsw <4 x i32> %27, <i32 32, i32 32, i32 32, i32 32>
  %34 = add nsw <4 x i32> %33, %32
  %35 = ashr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %36 = bitcast i8* %14 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = zext <4 x i8> %37 to <4 x i32>
  %39 = sub nsw <4 x i32> %35, %38
  %40 = icmp slt <4 x i32> %39, zeroinitializer
  %41 = sub nsw <4 x i32> zeroinitializer, %39
  %42 = select <4 x i1> %40, <4 x i32> %41, <4 x i32> %39
  %43 = add <4 x i32> %42, %20
  %44 = getelementptr inbounds i8, i8* %19, i64 4
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = getelementptr inbounds i8, i8* %17, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %50 to <4 x i32>
  %52 = mul nuw nsw <4 x i32> %51, %47
  %53 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %47
  %54 = getelementptr inbounds i8, i8* %18, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = mul nsw <4 x i32> %53, %57
  %59 = add nuw nsw <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %60 = add nsw <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %62 = getelementptr inbounds i8, i8* %14, i64 4
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = sub nsw <4 x i32> %61, %65
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add <4 x i32> %69, %43
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = zext <4 x i8> %73 to <4 x i32>
  %75 = getelementptr inbounds i8, i8* %17, i64 8
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = mul nuw nsw <4 x i32> %78, %74
  %80 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %74
  %81 = getelementptr inbounds i8, i8* %18, i64 8
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = mul nsw <4 x i32> %80, %84
  %86 = add nuw nsw <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %87 = add nsw <4 x i32> %86, %85
  %88 = ashr <4 x i32> %87, <i32 6, i32 6, i32 6, i32 6>
  %89 = getelementptr inbounds i8, i8* %14, i64 8
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = sub nsw <4 x i32> %88, %92
  %94 = icmp slt <4 x i32> %93, zeroinitializer
  %95 = sub nsw <4 x i32> zeroinitializer, %93
  %96 = select <4 x i1> %94, <4 x i32> %95, <4 x i32> %93
  %97 = add <4 x i32> %96, %70
  %98 = getelementptr inbounds i8, i8* %19, i64 12
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = getelementptr inbounds i8, i8* %17, i64 12
  %103 = bitcast i8* %102 to <4 x i8>*
  %104 = load <4 x i8>, <4 x i8>* %103, align 1
  %105 = zext <4 x i8> %104 to <4 x i32>
  %106 = mul nuw nsw <4 x i32> %105, %101
  %107 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %101
  %108 = getelementptr inbounds i8, i8* %18, i64 12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = mul nsw <4 x i32> %107, %111
  %113 = add nuw nsw <4 x i32> %106, <i32 32, i32 32, i32 32, i32 32>
  %114 = add nsw <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = getelementptr inbounds i8, i8* %14, i64 12
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = sub nsw <4 x i32> %115, %119
  %121 = icmp slt <4 x i32> %120, zeroinitializer
  %122 = sub nsw <4 x i32> zeroinitializer, %120
  %123 = select <4 x i1> %121, <4 x i32> %122, <4 x i32> %120
  %124 = add <4 x i32> %123, %97
  %125 = getelementptr inbounds i8, i8* %19, i64 16
  %126 = bitcast i8* %125 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1
  %128 = zext <4 x i8> %127 to <4 x i32>
  %129 = getelementptr inbounds i8, i8* %17, i64 16
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1
  %132 = zext <4 x i8> %131 to <4 x i32>
  %133 = mul nuw nsw <4 x i32> %132, %128
  %134 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %128
  %135 = getelementptr inbounds i8, i8* %18, i64 16
  %136 = bitcast i8* %135 to <4 x i8>*
  %137 = load <4 x i8>, <4 x i8>* %136, align 1
  %138 = zext <4 x i8> %137 to <4 x i32>
  %139 = mul nsw <4 x i32> %134, %138
  %140 = add nuw nsw <4 x i32> %133, <i32 32, i32 32, i32 32, i32 32>
  %141 = add nsw <4 x i32> %140, %139
  %142 = ashr <4 x i32> %141, <i32 6, i32 6, i32 6, i32 6>
  %143 = getelementptr inbounds i8, i8* %14, i64 16
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = sub nsw <4 x i32> %142, %146
  %148 = icmp slt <4 x i32> %147, zeroinitializer
  %149 = sub nsw <4 x i32> zeroinitializer, %147
  %150 = select <4 x i1> %148, <4 x i32> %149, <4 x i32> %147
  %151 = add <4 x i32> %150, %124
  %152 = getelementptr inbounds i8, i8* %19, i64 20
  %153 = bitcast i8* %152 to <4 x i8>*
  %154 = load <4 x i8>, <4 x i8>* %153, align 1
  %155 = zext <4 x i8> %154 to <4 x i32>
  %156 = getelementptr inbounds i8, i8* %17, i64 20
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = zext <4 x i8> %158 to <4 x i32>
  %160 = mul nuw nsw <4 x i32> %159, %155
  %161 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %155
  %162 = getelementptr inbounds i8, i8* %18, i64 20
  %163 = bitcast i8* %162 to <4 x i8>*
  %164 = load <4 x i8>, <4 x i8>* %163, align 1
  %165 = zext <4 x i8> %164 to <4 x i32>
  %166 = mul nsw <4 x i32> %161, %165
  %167 = add nuw nsw <4 x i32> %160, <i32 32, i32 32, i32 32, i32 32>
  %168 = add nsw <4 x i32> %167, %166
  %169 = ashr <4 x i32> %168, <i32 6, i32 6, i32 6, i32 6>
  %170 = getelementptr inbounds i8, i8* %14, i64 20
  %171 = bitcast i8* %170 to <4 x i8>*
  %172 = load <4 x i8>, <4 x i8>* %171, align 1
  %173 = zext <4 x i8> %172 to <4 x i32>
  %174 = sub nsw <4 x i32> %169, %173
  %175 = icmp slt <4 x i32> %174, zeroinitializer
  %176 = sub nsw <4 x i32> zeroinitializer, %174
  %177 = select <4 x i1> %175, <4 x i32> %176, <4 x i32> %174
  %178 = add <4 x i32> %177, %151
  %179 = getelementptr inbounds i8, i8* %19, i64 24
  %180 = bitcast i8* %179 to <4 x i8>*
  %181 = load <4 x i8>, <4 x i8>* %180, align 1
  %182 = zext <4 x i8> %181 to <4 x i32>
  %183 = getelementptr inbounds i8, i8* %17, i64 24
  %184 = bitcast i8* %183 to <4 x i8>*
  %185 = load <4 x i8>, <4 x i8>* %184, align 1
  %186 = zext <4 x i8> %185 to <4 x i32>
  %187 = mul nuw nsw <4 x i32> %186, %182
  %188 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %182
  %189 = getelementptr inbounds i8, i8* %18, i64 24
  %190 = bitcast i8* %189 to <4 x i8>*
  %191 = load <4 x i8>, <4 x i8>* %190, align 1
  %192 = zext <4 x i8> %191 to <4 x i32>
  %193 = mul nsw <4 x i32> %188, %192
  %194 = add nuw nsw <4 x i32> %187, <i32 32, i32 32, i32 32, i32 32>
  %195 = add nsw <4 x i32> %194, %193
  %196 = ashr <4 x i32> %195, <i32 6, i32 6, i32 6, i32 6>
  %197 = getelementptr inbounds i8, i8* %14, i64 24
  %198 = bitcast i8* %197 to <4 x i8>*
  %199 = load <4 x i8>, <4 x i8>* %198, align 1
  %200 = zext <4 x i8> %199 to <4 x i32>
  %201 = sub nsw <4 x i32> %196, %200
  %202 = icmp slt <4 x i32> %201, zeroinitializer
  %203 = sub nsw <4 x i32> zeroinitializer, %201
  %204 = select <4 x i1> %202, <4 x i32> %203, <4 x i32> %201
  %205 = add <4 x i32> %204, %178
  %206 = getelementptr inbounds i8, i8* %19, i64 28
  %207 = bitcast i8* %206 to <4 x i8>*
  %208 = load <4 x i8>, <4 x i8>* %207, align 1
  %209 = zext <4 x i8> %208 to <4 x i32>
  %210 = getelementptr inbounds i8, i8* %17, i64 28
  %211 = bitcast i8* %210 to <4 x i8>*
  %212 = load <4 x i8>, <4 x i8>* %211, align 1
  %213 = zext <4 x i8> %212 to <4 x i32>
  %214 = mul nuw nsw <4 x i32> %213, %209
  %215 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %209
  %216 = getelementptr inbounds i8, i8* %18, i64 28
  %217 = bitcast i8* %216 to <4 x i8>*
  %218 = load <4 x i8>, <4 x i8>* %217, align 1
  %219 = zext <4 x i8> %218 to <4 x i32>
  %220 = mul nsw <4 x i32> %215, %219
  %221 = add nuw nsw <4 x i32> %214, <i32 32, i32 32, i32 32, i32 32>
  %222 = add nsw <4 x i32> %221, %220
  %223 = ashr <4 x i32> %222, <i32 6, i32 6, i32 6, i32 6>
  %224 = getelementptr inbounds i8, i8* %14, i64 28
  %225 = bitcast i8* %224 to <4 x i8>*
  %226 = load <4 x i8>, <4 x i8>* %225, align 1
  %227 = zext <4 x i8> %226 to <4 x i32>
  %228 = sub nsw <4 x i32> %223, %227
  %229 = icmp slt <4 x i32> %228, zeroinitializer
  %230 = sub nsw <4 x i32> zeroinitializer, %228
  %231 = select <4 x i1> %229, <4 x i32> %230, <4 x i32> %228
  %232 = add <4 x i32> %231, %205
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %234 = add <4 x i32> %232, %233
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %236 = add <4 x i32> %234, %235
  %237 = extractelement <4 x i32> %236, i32 0
  %238 = getelementptr inbounds i8, i8* %14, i64 %10
  %239 = getelementptr inbounds i8, i8* %17, i64 %11
  %240 = getelementptr inbounds i8, i8* %18, i64 32
  %241 = getelementptr inbounds i8, i8* %19, i64 %12
  %242 = add nuw nsw i32 %16, 1
  %243 = icmp eq i32 %242, 8
  br i1 %243, label %475, label %13

244:                                              ; preds = %8, %244
  %245 = phi i8* [ %469, %244 ], [ %0, %8 ]
  %246 = phi i32 [ %468, %244 ], [ 0, %8 ]
  %247 = phi i32 [ %473, %244 ], [ 0, %8 ]
  %248 = phi i8* [ %470, %244 ], [ %4, %8 ]
  %249 = phi i8* [ %471, %244 ], [ %2, %8 ]
  %250 = phi i8* [ %472, %244 ], [ %5, %8 ]
  %251 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %246, i32 0
  %252 = bitcast i8* %250 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = bitcast i8* %248 to <4 x i8>*
  %256 = load <4 x i8>, <4 x i8>* %255, align 1
  %257 = zext <4 x i8> %256 to <4 x i32>
  %258 = mul nuw nsw <4 x i32> %257, %254
  %259 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %254
  %260 = bitcast i8* %249 to <4 x i8>*
  %261 = load <4 x i8>, <4 x i8>* %260, align 1
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = mul nsw <4 x i32> %259, %262
  %264 = add nuw nsw <4 x i32> %258, <i32 32, i32 32, i32 32, i32 32>
  %265 = add nsw <4 x i32> %264, %263
  %266 = ashr <4 x i32> %265, <i32 6, i32 6, i32 6, i32 6>
  %267 = bitcast i8* %245 to <4 x i8>*
  %268 = load <4 x i8>, <4 x i8>* %267, align 1
  %269 = zext <4 x i8> %268 to <4 x i32>
  %270 = sub nsw <4 x i32> %266, %269
  %271 = icmp slt <4 x i32> %270, zeroinitializer
  %272 = sub nsw <4 x i32> zeroinitializer, %270
  %273 = select <4 x i1> %271, <4 x i32> %272, <4 x i32> %270
  %274 = add <4 x i32> %273, %251
  %275 = getelementptr inbounds i8, i8* %250, i64 4
  %276 = bitcast i8* %275 to <4 x i8>*
  %277 = load <4 x i8>, <4 x i8>* %276, align 1
  %278 = zext <4 x i8> %277 to <4 x i32>
  %279 = getelementptr inbounds i8, i8* %248, i64 4
  %280 = bitcast i8* %279 to <4 x i8>*
  %281 = load <4 x i8>, <4 x i8>* %280, align 1
  %282 = zext <4 x i8> %281 to <4 x i32>
  %283 = mul nuw nsw <4 x i32> %282, %278
  %284 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %278
  %285 = getelementptr inbounds i8, i8* %249, i64 4
  %286 = bitcast i8* %285 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 1
  %288 = zext <4 x i8> %287 to <4 x i32>
  %289 = mul nsw <4 x i32> %284, %288
  %290 = add nuw nsw <4 x i32> %283, <i32 32, i32 32, i32 32, i32 32>
  %291 = add nsw <4 x i32> %290, %289
  %292 = ashr <4 x i32> %291, <i32 6, i32 6, i32 6, i32 6>
  %293 = getelementptr inbounds i8, i8* %245, i64 4
  %294 = bitcast i8* %293 to <4 x i8>*
  %295 = load <4 x i8>, <4 x i8>* %294, align 1
  %296 = zext <4 x i8> %295 to <4 x i32>
  %297 = sub nsw <4 x i32> %292, %296
  %298 = icmp slt <4 x i32> %297, zeroinitializer
  %299 = sub nsw <4 x i32> zeroinitializer, %297
  %300 = select <4 x i1> %298, <4 x i32> %299, <4 x i32> %297
  %301 = add <4 x i32> %300, %274
  %302 = getelementptr inbounds i8, i8* %250, i64 8
  %303 = bitcast i8* %302 to <4 x i8>*
  %304 = load <4 x i8>, <4 x i8>* %303, align 1
  %305 = zext <4 x i8> %304 to <4 x i32>
  %306 = getelementptr inbounds i8, i8* %248, i64 8
  %307 = bitcast i8* %306 to <4 x i8>*
  %308 = load <4 x i8>, <4 x i8>* %307, align 1
  %309 = zext <4 x i8> %308 to <4 x i32>
  %310 = mul nuw nsw <4 x i32> %309, %305
  %311 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %305
  %312 = getelementptr inbounds i8, i8* %249, i64 8
  %313 = bitcast i8* %312 to <4 x i8>*
  %314 = load <4 x i8>, <4 x i8>* %313, align 1
  %315 = zext <4 x i8> %314 to <4 x i32>
  %316 = mul nsw <4 x i32> %311, %315
  %317 = add nuw nsw <4 x i32> %310, <i32 32, i32 32, i32 32, i32 32>
  %318 = add nsw <4 x i32> %317, %316
  %319 = ashr <4 x i32> %318, <i32 6, i32 6, i32 6, i32 6>
  %320 = getelementptr inbounds i8, i8* %245, i64 8
  %321 = bitcast i8* %320 to <4 x i8>*
  %322 = load <4 x i8>, <4 x i8>* %321, align 1
  %323 = zext <4 x i8> %322 to <4 x i32>
  %324 = sub nsw <4 x i32> %319, %323
  %325 = icmp slt <4 x i32> %324, zeroinitializer
  %326 = sub nsw <4 x i32> zeroinitializer, %324
  %327 = select <4 x i1> %325, <4 x i32> %326, <4 x i32> %324
  %328 = add <4 x i32> %327, %301
  %329 = getelementptr inbounds i8, i8* %250, i64 12
  %330 = bitcast i8* %329 to <4 x i8>*
  %331 = load <4 x i8>, <4 x i8>* %330, align 1
  %332 = zext <4 x i8> %331 to <4 x i32>
  %333 = getelementptr inbounds i8, i8* %248, i64 12
  %334 = bitcast i8* %333 to <4 x i8>*
  %335 = load <4 x i8>, <4 x i8>* %334, align 1
  %336 = zext <4 x i8> %335 to <4 x i32>
  %337 = mul nuw nsw <4 x i32> %336, %332
  %338 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %332
  %339 = getelementptr inbounds i8, i8* %249, i64 12
  %340 = bitcast i8* %339 to <4 x i8>*
  %341 = load <4 x i8>, <4 x i8>* %340, align 1
  %342 = zext <4 x i8> %341 to <4 x i32>
  %343 = mul nsw <4 x i32> %338, %342
  %344 = add nuw nsw <4 x i32> %337, <i32 32, i32 32, i32 32, i32 32>
  %345 = add nsw <4 x i32> %344, %343
  %346 = ashr <4 x i32> %345, <i32 6, i32 6, i32 6, i32 6>
  %347 = getelementptr inbounds i8, i8* %245, i64 12
  %348 = bitcast i8* %347 to <4 x i8>*
  %349 = load <4 x i8>, <4 x i8>* %348, align 1
  %350 = zext <4 x i8> %349 to <4 x i32>
  %351 = sub nsw <4 x i32> %346, %350
  %352 = icmp slt <4 x i32> %351, zeroinitializer
  %353 = sub nsw <4 x i32> zeroinitializer, %351
  %354 = select <4 x i1> %352, <4 x i32> %353, <4 x i32> %351
  %355 = add <4 x i32> %354, %328
  %356 = getelementptr inbounds i8, i8* %250, i64 16
  %357 = bitcast i8* %356 to <4 x i8>*
  %358 = load <4 x i8>, <4 x i8>* %357, align 1
  %359 = zext <4 x i8> %358 to <4 x i32>
  %360 = getelementptr inbounds i8, i8* %248, i64 16
  %361 = bitcast i8* %360 to <4 x i8>*
  %362 = load <4 x i8>, <4 x i8>* %361, align 1
  %363 = zext <4 x i8> %362 to <4 x i32>
  %364 = mul nuw nsw <4 x i32> %363, %359
  %365 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %359
  %366 = getelementptr inbounds i8, i8* %249, i64 16
  %367 = bitcast i8* %366 to <4 x i8>*
  %368 = load <4 x i8>, <4 x i8>* %367, align 1
  %369 = zext <4 x i8> %368 to <4 x i32>
  %370 = mul nsw <4 x i32> %365, %369
  %371 = add nuw nsw <4 x i32> %364, <i32 32, i32 32, i32 32, i32 32>
  %372 = add nsw <4 x i32> %371, %370
  %373 = ashr <4 x i32> %372, <i32 6, i32 6, i32 6, i32 6>
  %374 = getelementptr inbounds i8, i8* %245, i64 16
  %375 = bitcast i8* %374 to <4 x i8>*
  %376 = load <4 x i8>, <4 x i8>* %375, align 1
  %377 = zext <4 x i8> %376 to <4 x i32>
  %378 = sub nsw <4 x i32> %373, %377
  %379 = icmp slt <4 x i32> %378, zeroinitializer
  %380 = sub nsw <4 x i32> zeroinitializer, %378
  %381 = select <4 x i1> %379, <4 x i32> %380, <4 x i32> %378
  %382 = add <4 x i32> %381, %355
  %383 = getelementptr inbounds i8, i8* %250, i64 20
  %384 = bitcast i8* %383 to <4 x i8>*
  %385 = load <4 x i8>, <4 x i8>* %384, align 1
  %386 = zext <4 x i8> %385 to <4 x i32>
  %387 = getelementptr inbounds i8, i8* %248, i64 20
  %388 = bitcast i8* %387 to <4 x i8>*
  %389 = load <4 x i8>, <4 x i8>* %388, align 1
  %390 = zext <4 x i8> %389 to <4 x i32>
  %391 = mul nuw nsw <4 x i32> %390, %386
  %392 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %386
  %393 = getelementptr inbounds i8, i8* %249, i64 20
  %394 = bitcast i8* %393 to <4 x i8>*
  %395 = load <4 x i8>, <4 x i8>* %394, align 1
  %396 = zext <4 x i8> %395 to <4 x i32>
  %397 = mul nsw <4 x i32> %392, %396
  %398 = add nuw nsw <4 x i32> %391, <i32 32, i32 32, i32 32, i32 32>
  %399 = add nsw <4 x i32> %398, %397
  %400 = ashr <4 x i32> %399, <i32 6, i32 6, i32 6, i32 6>
  %401 = getelementptr inbounds i8, i8* %245, i64 20
  %402 = bitcast i8* %401 to <4 x i8>*
  %403 = load <4 x i8>, <4 x i8>* %402, align 1
  %404 = zext <4 x i8> %403 to <4 x i32>
  %405 = sub nsw <4 x i32> %400, %404
  %406 = icmp slt <4 x i32> %405, zeroinitializer
  %407 = sub nsw <4 x i32> zeroinitializer, %405
  %408 = select <4 x i1> %406, <4 x i32> %407, <4 x i32> %405
  %409 = add <4 x i32> %408, %382
  %410 = getelementptr inbounds i8, i8* %250, i64 24
  %411 = bitcast i8* %410 to <4 x i8>*
  %412 = load <4 x i8>, <4 x i8>* %411, align 1
  %413 = zext <4 x i8> %412 to <4 x i32>
  %414 = getelementptr inbounds i8, i8* %248, i64 24
  %415 = bitcast i8* %414 to <4 x i8>*
  %416 = load <4 x i8>, <4 x i8>* %415, align 1
  %417 = zext <4 x i8> %416 to <4 x i32>
  %418 = mul nuw nsw <4 x i32> %417, %413
  %419 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %413
  %420 = getelementptr inbounds i8, i8* %249, i64 24
  %421 = bitcast i8* %420 to <4 x i8>*
  %422 = load <4 x i8>, <4 x i8>* %421, align 1
  %423 = zext <4 x i8> %422 to <4 x i32>
  %424 = mul nsw <4 x i32> %419, %423
  %425 = add nuw nsw <4 x i32> %418, <i32 32, i32 32, i32 32, i32 32>
  %426 = add nsw <4 x i32> %425, %424
  %427 = ashr <4 x i32> %426, <i32 6, i32 6, i32 6, i32 6>
  %428 = getelementptr inbounds i8, i8* %245, i64 24
  %429 = bitcast i8* %428 to <4 x i8>*
  %430 = load <4 x i8>, <4 x i8>* %429, align 1
  %431 = zext <4 x i8> %430 to <4 x i32>
  %432 = sub nsw <4 x i32> %427, %431
  %433 = icmp slt <4 x i32> %432, zeroinitializer
  %434 = sub nsw <4 x i32> zeroinitializer, %432
  %435 = select <4 x i1> %433, <4 x i32> %434, <4 x i32> %432
  %436 = add <4 x i32> %435, %409
  %437 = getelementptr inbounds i8, i8* %250, i64 28
  %438 = bitcast i8* %437 to <4 x i8>*
  %439 = load <4 x i8>, <4 x i8>* %438, align 1
  %440 = zext <4 x i8> %439 to <4 x i32>
  %441 = getelementptr inbounds i8, i8* %248, i64 28
  %442 = bitcast i8* %441 to <4 x i8>*
  %443 = load <4 x i8>, <4 x i8>* %442, align 1
  %444 = zext <4 x i8> %443 to <4 x i32>
  %445 = mul nuw nsw <4 x i32> %444, %440
  %446 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %440
  %447 = getelementptr inbounds i8, i8* %249, i64 28
  %448 = bitcast i8* %447 to <4 x i8>*
  %449 = load <4 x i8>, <4 x i8>* %448, align 1
  %450 = zext <4 x i8> %449 to <4 x i32>
  %451 = mul nsw <4 x i32> %446, %450
  %452 = add nuw nsw <4 x i32> %445, <i32 32, i32 32, i32 32, i32 32>
  %453 = add nsw <4 x i32> %452, %451
  %454 = ashr <4 x i32> %453, <i32 6, i32 6, i32 6, i32 6>
  %455 = getelementptr inbounds i8, i8* %245, i64 28
  %456 = bitcast i8* %455 to <4 x i8>*
  %457 = load <4 x i8>, <4 x i8>* %456, align 1
  %458 = zext <4 x i8> %457 to <4 x i32>
  %459 = sub nsw <4 x i32> %454, %458
  %460 = icmp slt <4 x i32> %459, zeroinitializer
  %461 = sub nsw <4 x i32> zeroinitializer, %459
  %462 = select <4 x i1> %460, <4 x i32> %461, <4 x i32> %459
  %463 = add <4 x i32> %462, %436
  %464 = shufflevector <4 x i32> %463, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %465 = add <4 x i32> %463, %464
  %466 = shufflevector <4 x i32> %465, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %467 = add <4 x i32> %465, %466
  %468 = extractelement <4 x i32> %467, i32 0
  %469 = getelementptr inbounds i8, i8* %245, i64 %10
  %470 = getelementptr inbounds i8, i8* %248, i64 32
  %471 = getelementptr inbounds i8, i8* %249, i64 %11
  %472 = getelementptr inbounds i8, i8* %250, i64 %12
  %473 = add nuw nsw i32 %247, 1
  %474 = icmp eq i32 %473, 8
  br i1 %474, label %475, label %244

475:                                              ; preds = %244, %13
  %476 = phi i32 [ %237, %13 ], [ %468, %244 ]
  ret i32 %476
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad32x8x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %249

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %240, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %239, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %244, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %241, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %242, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %243, %15 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %23 = bitcast i8* %21 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = bitcast i8* %19 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = zext <4 x i8> %27 to <4 x i32>
  %29 = mul nuw nsw <4 x i32> %28, %25
  %30 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %25
  %31 = bitcast i8* %20 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nsw <4 x i32> %30, %33
  %35 = add nuw nsw <4 x i32> %29, <i32 32, i32 32, i32 32, i32 32>
  %36 = add nsw <4 x i32> %35, %34
  %37 = ashr <4 x i32> %36, <i32 6, i32 6, i32 6, i32 6>
  %38 = bitcast i8* %16 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = zext <4 x i8> %39 to <4 x i32>
  %41 = sub nsw <4 x i32> %37, %40
  %42 = icmp slt <4 x i32> %41, zeroinitializer
  %43 = sub nsw <4 x i32> zeroinitializer, %41
  %44 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %41
  %45 = add <4 x i32> %44, %22
  %46 = getelementptr inbounds i8, i8* %21, i64 4
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = zext <4 x i8> %48 to <4 x i32>
  %50 = getelementptr inbounds i8, i8* %19, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %52 to <4 x i32>
  %54 = mul nuw nsw <4 x i32> %53, %49
  %55 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %49
  %56 = getelementptr inbounds i8, i8* %20, i64 4
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1
  %59 = zext <4 x i8> %58 to <4 x i32>
  %60 = mul nsw <4 x i32> %55, %59
  %61 = add nuw nsw <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %62 = add nsw <4 x i32> %61, %60
  %63 = ashr <4 x i32> %62, <i32 6, i32 6, i32 6, i32 6>
  %64 = getelementptr inbounds i8, i8* %16, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = sub nsw <4 x i32> %63, %67
  %69 = icmp slt <4 x i32> %68, zeroinitializer
  %70 = sub nsw <4 x i32> zeroinitializer, %68
  %71 = select <4 x i1> %69, <4 x i32> %70, <4 x i32> %68
  %72 = add <4 x i32> %71, %45
  %73 = getelementptr inbounds i8, i8* %21, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = getelementptr inbounds i8, i8* %19, i64 8
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = mul nuw nsw <4 x i32> %80, %76
  %82 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %76
  %83 = getelementptr inbounds i8, i8* %20, i64 8
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = mul nsw <4 x i32> %82, %86
  %88 = add nuw nsw <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %89 = add nsw <4 x i32> %88, %87
  %90 = ashr <4 x i32> %89, <i32 6, i32 6, i32 6, i32 6>
  %91 = getelementptr inbounds i8, i8* %16, i64 8
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = sub nsw <4 x i32> %90, %94
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = add <4 x i32> %98, %72
  %100 = getelementptr inbounds i8, i8* %21, i64 12
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = zext <4 x i8> %102 to <4 x i32>
  %104 = getelementptr inbounds i8, i8* %19, i64 12
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = zext <4 x i8> %106 to <4 x i32>
  %108 = mul nuw nsw <4 x i32> %107, %103
  %109 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %103
  %110 = getelementptr inbounds i8, i8* %20, i64 12
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = mul nsw <4 x i32> %109, %113
  %115 = add nuw nsw <4 x i32> %108, <i32 32, i32 32, i32 32, i32 32>
  %116 = add nsw <4 x i32> %115, %114
  %117 = ashr <4 x i32> %116, <i32 6, i32 6, i32 6, i32 6>
  %118 = getelementptr inbounds i8, i8* %16, i64 12
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = sub nsw <4 x i32> %117, %121
  %123 = icmp slt <4 x i32> %122, zeroinitializer
  %124 = sub nsw <4 x i32> zeroinitializer, %122
  %125 = select <4 x i1> %123, <4 x i32> %124, <4 x i32> %122
  %126 = add <4 x i32> %125, %99
  %127 = getelementptr inbounds i8, i8* %21, i64 16
  %128 = bitcast i8* %127 to <4 x i8>*
  %129 = load <4 x i8>, <4 x i8>* %128, align 1
  %130 = zext <4 x i8> %129 to <4 x i32>
  %131 = getelementptr inbounds i8, i8* %19, i64 16
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = zext <4 x i8> %133 to <4 x i32>
  %135 = mul nuw nsw <4 x i32> %134, %130
  %136 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %130
  %137 = getelementptr inbounds i8, i8* %20, i64 16
  %138 = bitcast i8* %137 to <4 x i8>*
  %139 = load <4 x i8>, <4 x i8>* %138, align 1
  %140 = zext <4 x i8> %139 to <4 x i32>
  %141 = mul nsw <4 x i32> %136, %140
  %142 = add nuw nsw <4 x i32> %135, <i32 32, i32 32, i32 32, i32 32>
  %143 = add nsw <4 x i32> %142, %141
  %144 = ashr <4 x i32> %143, <i32 6, i32 6, i32 6, i32 6>
  %145 = getelementptr inbounds i8, i8* %16, i64 16
  %146 = bitcast i8* %145 to <4 x i8>*
  %147 = load <4 x i8>, <4 x i8>* %146, align 1
  %148 = zext <4 x i8> %147 to <4 x i32>
  %149 = sub nsw <4 x i32> %144, %148
  %150 = icmp slt <4 x i32> %149, zeroinitializer
  %151 = sub nsw <4 x i32> zeroinitializer, %149
  %152 = select <4 x i1> %150, <4 x i32> %151, <4 x i32> %149
  %153 = add <4 x i32> %152, %126
  %154 = getelementptr inbounds i8, i8* %21, i64 20
  %155 = bitcast i8* %154 to <4 x i8>*
  %156 = load <4 x i8>, <4 x i8>* %155, align 1
  %157 = zext <4 x i8> %156 to <4 x i32>
  %158 = getelementptr inbounds i8, i8* %19, i64 20
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = mul nuw nsw <4 x i32> %161, %157
  %163 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %157
  %164 = getelementptr inbounds i8, i8* %20, i64 20
  %165 = bitcast i8* %164 to <4 x i8>*
  %166 = load <4 x i8>, <4 x i8>* %165, align 1
  %167 = zext <4 x i8> %166 to <4 x i32>
  %168 = mul nsw <4 x i32> %163, %167
  %169 = add nuw nsw <4 x i32> %162, <i32 32, i32 32, i32 32, i32 32>
  %170 = add nsw <4 x i32> %169, %168
  %171 = ashr <4 x i32> %170, <i32 6, i32 6, i32 6, i32 6>
  %172 = getelementptr inbounds i8, i8* %16, i64 20
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = sub nsw <4 x i32> %171, %175
  %177 = icmp slt <4 x i32> %176, zeroinitializer
  %178 = sub nsw <4 x i32> zeroinitializer, %176
  %179 = select <4 x i1> %177, <4 x i32> %178, <4 x i32> %176
  %180 = add <4 x i32> %179, %153
  %181 = getelementptr inbounds i8, i8* %21, i64 24
  %182 = bitcast i8* %181 to <4 x i8>*
  %183 = load <4 x i8>, <4 x i8>* %182, align 1
  %184 = zext <4 x i8> %183 to <4 x i32>
  %185 = getelementptr inbounds i8, i8* %19, i64 24
  %186 = bitcast i8* %185 to <4 x i8>*
  %187 = load <4 x i8>, <4 x i8>* %186, align 1
  %188 = zext <4 x i8> %187 to <4 x i32>
  %189 = mul nuw nsw <4 x i32> %188, %184
  %190 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %184
  %191 = getelementptr inbounds i8, i8* %20, i64 24
  %192 = bitcast i8* %191 to <4 x i8>*
  %193 = load <4 x i8>, <4 x i8>* %192, align 1
  %194 = zext <4 x i8> %193 to <4 x i32>
  %195 = mul nsw <4 x i32> %190, %194
  %196 = add nuw nsw <4 x i32> %189, <i32 32, i32 32, i32 32, i32 32>
  %197 = add nsw <4 x i32> %196, %195
  %198 = ashr <4 x i32> %197, <i32 6, i32 6, i32 6, i32 6>
  %199 = getelementptr inbounds i8, i8* %16, i64 24
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = sub nsw <4 x i32> %198, %202
  %204 = icmp slt <4 x i32> %203, zeroinitializer
  %205 = sub nsw <4 x i32> zeroinitializer, %203
  %206 = select <4 x i1> %204, <4 x i32> %205, <4 x i32> %203
  %207 = add <4 x i32> %206, %180
  %208 = getelementptr inbounds i8, i8* %21, i64 28
  %209 = bitcast i8* %208 to <4 x i8>*
  %210 = load <4 x i8>, <4 x i8>* %209, align 1
  %211 = zext <4 x i8> %210 to <4 x i32>
  %212 = getelementptr inbounds i8, i8* %19, i64 28
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = zext <4 x i8> %214 to <4 x i32>
  %216 = mul nuw nsw <4 x i32> %215, %211
  %217 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %211
  %218 = getelementptr inbounds i8, i8* %20, i64 28
  %219 = bitcast i8* %218 to <4 x i8>*
  %220 = load <4 x i8>, <4 x i8>* %219, align 1
  %221 = zext <4 x i8> %220 to <4 x i32>
  %222 = mul nsw <4 x i32> %217, %221
  %223 = add nuw nsw <4 x i32> %216, <i32 32, i32 32, i32 32, i32 32>
  %224 = add nsw <4 x i32> %223, %222
  %225 = ashr <4 x i32> %224, <i32 6, i32 6, i32 6, i32 6>
  %226 = getelementptr inbounds i8, i8* %16, i64 28
  %227 = bitcast i8* %226 to <4 x i8>*
  %228 = load <4 x i8>, <4 x i8>* %227, align 1
  %229 = zext <4 x i8> %228 to <4 x i32>
  %230 = sub nsw <4 x i32> %225, %229
  %231 = icmp slt <4 x i32> %230, zeroinitializer
  %232 = sub nsw <4 x i32> zeroinitializer, %230
  %233 = select <4 x i1> %231, <4 x i32> %232, <4 x i32> %230
  %234 = add <4 x i32> %233, %207
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %236 = add <4 x i32> %234, %235
  %237 = shufflevector <4 x i32> %236, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %238 = add <4 x i32> %236, %237
  %239 = extractelement <4 x i32> %238, i32 0
  %240 = getelementptr inbounds i8, i8* %16, i64 %11
  %241 = getelementptr inbounds i8, i8* %19, i64 %12
  %242 = getelementptr inbounds i8, i8* %20, i64 32
  %243 = getelementptr inbounds i8, i8* %21, i64 %13
  %244 = add nuw nsw i32 %18, 1
  %245 = icmp eq i32 %244, 8
  br i1 %245, label %246, label %15

246:                                              ; preds = %15
  store i32 %239, i32* %8, align 4
  %247 = getelementptr inbounds i8*, i8** %2, i64 1
  %248 = load i8*, i8** %247, align 8
  br label %486

249:                                              ; preds = %9, %249
  %250 = phi i8* [ %474, %249 ], [ %0, %9 ]
  %251 = phi i32 [ %473, %249 ], [ 0, %9 ]
  %252 = phi i32 [ %478, %249 ], [ 0, %9 ]
  %253 = phi i8* [ %475, %249 ], [ %4, %9 ]
  %254 = phi i8* [ %476, %249 ], [ %14, %9 ]
  %255 = phi i8* [ %477, %249 ], [ %5, %9 ]
  %256 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %251, i32 0
  %257 = bitcast i8* %255 to <4 x i8>*
  %258 = load <4 x i8>, <4 x i8>* %257, align 1
  %259 = zext <4 x i8> %258 to <4 x i32>
  %260 = bitcast i8* %253 to <4 x i8>*
  %261 = load <4 x i8>, <4 x i8>* %260, align 1
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = mul nuw nsw <4 x i32> %262, %259
  %264 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %259
  %265 = bitcast i8* %254 to <4 x i8>*
  %266 = load <4 x i8>, <4 x i8>* %265, align 1
  %267 = zext <4 x i8> %266 to <4 x i32>
  %268 = mul nsw <4 x i32> %264, %267
  %269 = add nuw nsw <4 x i32> %263, <i32 32, i32 32, i32 32, i32 32>
  %270 = add nsw <4 x i32> %269, %268
  %271 = ashr <4 x i32> %270, <i32 6, i32 6, i32 6, i32 6>
  %272 = bitcast i8* %250 to <4 x i8>*
  %273 = load <4 x i8>, <4 x i8>* %272, align 1
  %274 = zext <4 x i8> %273 to <4 x i32>
  %275 = sub nsw <4 x i32> %271, %274
  %276 = icmp slt <4 x i32> %275, zeroinitializer
  %277 = sub nsw <4 x i32> zeroinitializer, %275
  %278 = select <4 x i1> %276, <4 x i32> %277, <4 x i32> %275
  %279 = add <4 x i32> %278, %256
  %280 = getelementptr inbounds i8, i8* %255, i64 4
  %281 = bitcast i8* %280 to <4 x i8>*
  %282 = load <4 x i8>, <4 x i8>* %281, align 1
  %283 = zext <4 x i8> %282 to <4 x i32>
  %284 = getelementptr inbounds i8, i8* %253, i64 4
  %285 = bitcast i8* %284 to <4 x i8>*
  %286 = load <4 x i8>, <4 x i8>* %285, align 1
  %287 = zext <4 x i8> %286 to <4 x i32>
  %288 = mul nuw nsw <4 x i32> %287, %283
  %289 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %283
  %290 = getelementptr inbounds i8, i8* %254, i64 4
  %291 = bitcast i8* %290 to <4 x i8>*
  %292 = load <4 x i8>, <4 x i8>* %291, align 1
  %293 = zext <4 x i8> %292 to <4 x i32>
  %294 = mul nsw <4 x i32> %289, %293
  %295 = add nuw nsw <4 x i32> %288, <i32 32, i32 32, i32 32, i32 32>
  %296 = add nsw <4 x i32> %295, %294
  %297 = ashr <4 x i32> %296, <i32 6, i32 6, i32 6, i32 6>
  %298 = getelementptr inbounds i8, i8* %250, i64 4
  %299 = bitcast i8* %298 to <4 x i8>*
  %300 = load <4 x i8>, <4 x i8>* %299, align 1
  %301 = zext <4 x i8> %300 to <4 x i32>
  %302 = sub nsw <4 x i32> %297, %301
  %303 = icmp slt <4 x i32> %302, zeroinitializer
  %304 = sub nsw <4 x i32> zeroinitializer, %302
  %305 = select <4 x i1> %303, <4 x i32> %304, <4 x i32> %302
  %306 = add <4 x i32> %305, %279
  %307 = getelementptr inbounds i8, i8* %255, i64 8
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = zext <4 x i8> %309 to <4 x i32>
  %311 = getelementptr inbounds i8, i8* %253, i64 8
  %312 = bitcast i8* %311 to <4 x i8>*
  %313 = load <4 x i8>, <4 x i8>* %312, align 1
  %314 = zext <4 x i8> %313 to <4 x i32>
  %315 = mul nuw nsw <4 x i32> %314, %310
  %316 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %310
  %317 = getelementptr inbounds i8, i8* %254, i64 8
  %318 = bitcast i8* %317 to <4 x i8>*
  %319 = load <4 x i8>, <4 x i8>* %318, align 1
  %320 = zext <4 x i8> %319 to <4 x i32>
  %321 = mul nsw <4 x i32> %316, %320
  %322 = add nuw nsw <4 x i32> %315, <i32 32, i32 32, i32 32, i32 32>
  %323 = add nsw <4 x i32> %322, %321
  %324 = ashr <4 x i32> %323, <i32 6, i32 6, i32 6, i32 6>
  %325 = getelementptr inbounds i8, i8* %250, i64 8
  %326 = bitcast i8* %325 to <4 x i8>*
  %327 = load <4 x i8>, <4 x i8>* %326, align 1
  %328 = zext <4 x i8> %327 to <4 x i32>
  %329 = sub nsw <4 x i32> %324, %328
  %330 = icmp slt <4 x i32> %329, zeroinitializer
  %331 = sub nsw <4 x i32> zeroinitializer, %329
  %332 = select <4 x i1> %330, <4 x i32> %331, <4 x i32> %329
  %333 = add <4 x i32> %332, %306
  %334 = getelementptr inbounds i8, i8* %255, i64 12
  %335 = bitcast i8* %334 to <4 x i8>*
  %336 = load <4 x i8>, <4 x i8>* %335, align 1
  %337 = zext <4 x i8> %336 to <4 x i32>
  %338 = getelementptr inbounds i8, i8* %253, i64 12
  %339 = bitcast i8* %338 to <4 x i8>*
  %340 = load <4 x i8>, <4 x i8>* %339, align 1
  %341 = zext <4 x i8> %340 to <4 x i32>
  %342 = mul nuw nsw <4 x i32> %341, %337
  %343 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %337
  %344 = getelementptr inbounds i8, i8* %254, i64 12
  %345 = bitcast i8* %344 to <4 x i8>*
  %346 = load <4 x i8>, <4 x i8>* %345, align 1
  %347 = zext <4 x i8> %346 to <4 x i32>
  %348 = mul nsw <4 x i32> %343, %347
  %349 = add nuw nsw <4 x i32> %342, <i32 32, i32 32, i32 32, i32 32>
  %350 = add nsw <4 x i32> %349, %348
  %351 = ashr <4 x i32> %350, <i32 6, i32 6, i32 6, i32 6>
  %352 = getelementptr inbounds i8, i8* %250, i64 12
  %353 = bitcast i8* %352 to <4 x i8>*
  %354 = load <4 x i8>, <4 x i8>* %353, align 1
  %355 = zext <4 x i8> %354 to <4 x i32>
  %356 = sub nsw <4 x i32> %351, %355
  %357 = icmp slt <4 x i32> %356, zeroinitializer
  %358 = sub nsw <4 x i32> zeroinitializer, %356
  %359 = select <4 x i1> %357, <4 x i32> %358, <4 x i32> %356
  %360 = add <4 x i32> %359, %333
  %361 = getelementptr inbounds i8, i8* %255, i64 16
  %362 = bitcast i8* %361 to <4 x i8>*
  %363 = load <4 x i8>, <4 x i8>* %362, align 1
  %364 = zext <4 x i8> %363 to <4 x i32>
  %365 = getelementptr inbounds i8, i8* %253, i64 16
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1
  %368 = zext <4 x i8> %367 to <4 x i32>
  %369 = mul nuw nsw <4 x i32> %368, %364
  %370 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %364
  %371 = getelementptr inbounds i8, i8* %254, i64 16
  %372 = bitcast i8* %371 to <4 x i8>*
  %373 = load <4 x i8>, <4 x i8>* %372, align 1
  %374 = zext <4 x i8> %373 to <4 x i32>
  %375 = mul nsw <4 x i32> %370, %374
  %376 = add nuw nsw <4 x i32> %369, <i32 32, i32 32, i32 32, i32 32>
  %377 = add nsw <4 x i32> %376, %375
  %378 = ashr <4 x i32> %377, <i32 6, i32 6, i32 6, i32 6>
  %379 = getelementptr inbounds i8, i8* %250, i64 16
  %380 = bitcast i8* %379 to <4 x i8>*
  %381 = load <4 x i8>, <4 x i8>* %380, align 1
  %382 = zext <4 x i8> %381 to <4 x i32>
  %383 = sub nsw <4 x i32> %378, %382
  %384 = icmp slt <4 x i32> %383, zeroinitializer
  %385 = sub nsw <4 x i32> zeroinitializer, %383
  %386 = select <4 x i1> %384, <4 x i32> %385, <4 x i32> %383
  %387 = add <4 x i32> %386, %360
  %388 = getelementptr inbounds i8, i8* %255, i64 20
  %389 = bitcast i8* %388 to <4 x i8>*
  %390 = load <4 x i8>, <4 x i8>* %389, align 1
  %391 = zext <4 x i8> %390 to <4 x i32>
  %392 = getelementptr inbounds i8, i8* %253, i64 20
  %393 = bitcast i8* %392 to <4 x i8>*
  %394 = load <4 x i8>, <4 x i8>* %393, align 1
  %395 = zext <4 x i8> %394 to <4 x i32>
  %396 = mul nuw nsw <4 x i32> %395, %391
  %397 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %391
  %398 = getelementptr inbounds i8, i8* %254, i64 20
  %399 = bitcast i8* %398 to <4 x i8>*
  %400 = load <4 x i8>, <4 x i8>* %399, align 1
  %401 = zext <4 x i8> %400 to <4 x i32>
  %402 = mul nsw <4 x i32> %397, %401
  %403 = add nuw nsw <4 x i32> %396, <i32 32, i32 32, i32 32, i32 32>
  %404 = add nsw <4 x i32> %403, %402
  %405 = ashr <4 x i32> %404, <i32 6, i32 6, i32 6, i32 6>
  %406 = getelementptr inbounds i8, i8* %250, i64 20
  %407 = bitcast i8* %406 to <4 x i8>*
  %408 = load <4 x i8>, <4 x i8>* %407, align 1
  %409 = zext <4 x i8> %408 to <4 x i32>
  %410 = sub nsw <4 x i32> %405, %409
  %411 = icmp slt <4 x i32> %410, zeroinitializer
  %412 = sub nsw <4 x i32> zeroinitializer, %410
  %413 = select <4 x i1> %411, <4 x i32> %412, <4 x i32> %410
  %414 = add <4 x i32> %413, %387
  %415 = getelementptr inbounds i8, i8* %255, i64 24
  %416 = bitcast i8* %415 to <4 x i8>*
  %417 = load <4 x i8>, <4 x i8>* %416, align 1
  %418 = zext <4 x i8> %417 to <4 x i32>
  %419 = getelementptr inbounds i8, i8* %253, i64 24
  %420 = bitcast i8* %419 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = mul nuw nsw <4 x i32> %422, %418
  %424 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %418
  %425 = getelementptr inbounds i8, i8* %254, i64 24
  %426 = bitcast i8* %425 to <4 x i8>*
  %427 = load <4 x i8>, <4 x i8>* %426, align 1
  %428 = zext <4 x i8> %427 to <4 x i32>
  %429 = mul nsw <4 x i32> %424, %428
  %430 = add nuw nsw <4 x i32> %423, <i32 32, i32 32, i32 32, i32 32>
  %431 = add nsw <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 6, i32 6, i32 6, i32 6>
  %433 = getelementptr inbounds i8, i8* %250, i64 24
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = zext <4 x i8> %435 to <4 x i32>
  %437 = sub nsw <4 x i32> %432, %436
  %438 = icmp slt <4 x i32> %437, zeroinitializer
  %439 = sub nsw <4 x i32> zeroinitializer, %437
  %440 = select <4 x i1> %438, <4 x i32> %439, <4 x i32> %437
  %441 = add <4 x i32> %440, %414
  %442 = getelementptr inbounds i8, i8* %255, i64 28
  %443 = bitcast i8* %442 to <4 x i8>*
  %444 = load <4 x i8>, <4 x i8>* %443, align 1
  %445 = zext <4 x i8> %444 to <4 x i32>
  %446 = getelementptr inbounds i8, i8* %253, i64 28
  %447 = bitcast i8* %446 to <4 x i8>*
  %448 = load <4 x i8>, <4 x i8>* %447, align 1
  %449 = zext <4 x i8> %448 to <4 x i32>
  %450 = mul nuw nsw <4 x i32> %449, %445
  %451 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %445
  %452 = getelementptr inbounds i8, i8* %254, i64 28
  %453 = bitcast i8* %452 to <4 x i8>*
  %454 = load <4 x i8>, <4 x i8>* %453, align 1
  %455 = zext <4 x i8> %454 to <4 x i32>
  %456 = mul nsw <4 x i32> %451, %455
  %457 = add nuw nsw <4 x i32> %450, <i32 32, i32 32, i32 32, i32 32>
  %458 = add nsw <4 x i32> %457, %456
  %459 = ashr <4 x i32> %458, <i32 6, i32 6, i32 6, i32 6>
  %460 = getelementptr inbounds i8, i8* %250, i64 28
  %461 = bitcast i8* %460 to <4 x i8>*
  %462 = load <4 x i8>, <4 x i8>* %461, align 1
  %463 = zext <4 x i8> %462 to <4 x i32>
  %464 = sub nsw <4 x i32> %459, %463
  %465 = icmp slt <4 x i32> %464, zeroinitializer
  %466 = sub nsw <4 x i32> zeroinitializer, %464
  %467 = select <4 x i1> %465, <4 x i32> %466, <4 x i32> %464
  %468 = add <4 x i32> %467, %441
  %469 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %470 = add <4 x i32> %468, %469
  %471 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %472 = add <4 x i32> %470, %471
  %473 = extractelement <4 x i32> %472, i32 0
  %474 = getelementptr inbounds i8, i8* %250, i64 %11
  %475 = getelementptr inbounds i8, i8* %253, i64 32
  %476 = getelementptr inbounds i8, i8* %254, i64 %12
  %477 = getelementptr inbounds i8, i8* %255, i64 %13
  %478 = add nuw nsw i32 %252, 1
  %479 = icmp eq i32 %478, 8
  br i1 %479, label %480, label %249

480:                                              ; preds = %249
  store i32 %473, i32* %8, align 4
  %481 = getelementptr inbounds i8*, i8** %2, i64 1
  %482 = load i8*, i8** %481, align 8
  br label %1187

483:                                              ; preds = %1657, %956
  %484 = phi i32 [ %1180, %956 ], [ %1881, %1657 ]
  %485 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %484, i32* %485, align 4
  ret void

486:                                              ; preds = %246, %486
  %487 = phi i8* [ %0, %246 ], [ %711, %486 ]
  %488 = phi i32 [ 0, %246 ], [ %710, %486 ]
  %489 = phi i32 [ 0, %246 ], [ %715, %486 ]
  %490 = phi i8* [ %248, %246 ], [ %712, %486 ]
  %491 = phi i8* [ %4, %246 ], [ %713, %486 ]
  %492 = phi i8* [ %5, %246 ], [ %714, %486 ]
  %493 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %488, i32 0
  %494 = bitcast i8* %492 to <4 x i8>*
  %495 = load <4 x i8>, <4 x i8>* %494, align 1
  %496 = zext <4 x i8> %495 to <4 x i32>
  %497 = bitcast i8* %490 to <4 x i8>*
  %498 = load <4 x i8>, <4 x i8>* %497, align 1
  %499 = zext <4 x i8> %498 to <4 x i32>
  %500 = mul nuw nsw <4 x i32> %499, %496
  %501 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %496
  %502 = bitcast i8* %491 to <4 x i8>*
  %503 = load <4 x i8>, <4 x i8>* %502, align 1
  %504 = zext <4 x i8> %503 to <4 x i32>
  %505 = mul nsw <4 x i32> %501, %504
  %506 = add nuw nsw <4 x i32> %500, <i32 32, i32 32, i32 32, i32 32>
  %507 = add nsw <4 x i32> %506, %505
  %508 = ashr <4 x i32> %507, <i32 6, i32 6, i32 6, i32 6>
  %509 = bitcast i8* %487 to <4 x i8>*
  %510 = load <4 x i8>, <4 x i8>* %509, align 1
  %511 = zext <4 x i8> %510 to <4 x i32>
  %512 = sub nsw <4 x i32> %508, %511
  %513 = icmp slt <4 x i32> %512, zeroinitializer
  %514 = sub nsw <4 x i32> zeroinitializer, %512
  %515 = select <4 x i1> %513, <4 x i32> %514, <4 x i32> %512
  %516 = add <4 x i32> %515, %493
  %517 = getelementptr inbounds i8, i8* %492, i64 4
  %518 = bitcast i8* %517 to <4 x i8>*
  %519 = load <4 x i8>, <4 x i8>* %518, align 1
  %520 = zext <4 x i8> %519 to <4 x i32>
  %521 = getelementptr inbounds i8, i8* %490, i64 4
  %522 = bitcast i8* %521 to <4 x i8>*
  %523 = load <4 x i8>, <4 x i8>* %522, align 1
  %524 = zext <4 x i8> %523 to <4 x i32>
  %525 = mul nuw nsw <4 x i32> %524, %520
  %526 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %520
  %527 = getelementptr inbounds i8, i8* %491, i64 4
  %528 = bitcast i8* %527 to <4 x i8>*
  %529 = load <4 x i8>, <4 x i8>* %528, align 1
  %530 = zext <4 x i8> %529 to <4 x i32>
  %531 = mul nsw <4 x i32> %526, %530
  %532 = add nuw nsw <4 x i32> %525, <i32 32, i32 32, i32 32, i32 32>
  %533 = add nsw <4 x i32> %532, %531
  %534 = ashr <4 x i32> %533, <i32 6, i32 6, i32 6, i32 6>
  %535 = getelementptr inbounds i8, i8* %487, i64 4
  %536 = bitcast i8* %535 to <4 x i8>*
  %537 = load <4 x i8>, <4 x i8>* %536, align 1
  %538 = zext <4 x i8> %537 to <4 x i32>
  %539 = sub nsw <4 x i32> %534, %538
  %540 = icmp slt <4 x i32> %539, zeroinitializer
  %541 = sub nsw <4 x i32> zeroinitializer, %539
  %542 = select <4 x i1> %540, <4 x i32> %541, <4 x i32> %539
  %543 = add <4 x i32> %542, %516
  %544 = getelementptr inbounds i8, i8* %492, i64 8
  %545 = bitcast i8* %544 to <4 x i8>*
  %546 = load <4 x i8>, <4 x i8>* %545, align 1
  %547 = zext <4 x i8> %546 to <4 x i32>
  %548 = getelementptr inbounds i8, i8* %490, i64 8
  %549 = bitcast i8* %548 to <4 x i8>*
  %550 = load <4 x i8>, <4 x i8>* %549, align 1
  %551 = zext <4 x i8> %550 to <4 x i32>
  %552 = mul nuw nsw <4 x i32> %551, %547
  %553 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %547
  %554 = getelementptr inbounds i8, i8* %491, i64 8
  %555 = bitcast i8* %554 to <4 x i8>*
  %556 = load <4 x i8>, <4 x i8>* %555, align 1
  %557 = zext <4 x i8> %556 to <4 x i32>
  %558 = mul nsw <4 x i32> %553, %557
  %559 = add nuw nsw <4 x i32> %552, <i32 32, i32 32, i32 32, i32 32>
  %560 = add nsw <4 x i32> %559, %558
  %561 = ashr <4 x i32> %560, <i32 6, i32 6, i32 6, i32 6>
  %562 = getelementptr inbounds i8, i8* %487, i64 8
  %563 = bitcast i8* %562 to <4 x i8>*
  %564 = load <4 x i8>, <4 x i8>* %563, align 1
  %565 = zext <4 x i8> %564 to <4 x i32>
  %566 = sub nsw <4 x i32> %561, %565
  %567 = icmp slt <4 x i32> %566, zeroinitializer
  %568 = sub nsw <4 x i32> zeroinitializer, %566
  %569 = select <4 x i1> %567, <4 x i32> %568, <4 x i32> %566
  %570 = add <4 x i32> %569, %543
  %571 = getelementptr inbounds i8, i8* %492, i64 12
  %572 = bitcast i8* %571 to <4 x i8>*
  %573 = load <4 x i8>, <4 x i8>* %572, align 1
  %574 = zext <4 x i8> %573 to <4 x i32>
  %575 = getelementptr inbounds i8, i8* %490, i64 12
  %576 = bitcast i8* %575 to <4 x i8>*
  %577 = load <4 x i8>, <4 x i8>* %576, align 1
  %578 = zext <4 x i8> %577 to <4 x i32>
  %579 = mul nuw nsw <4 x i32> %578, %574
  %580 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %574
  %581 = getelementptr inbounds i8, i8* %491, i64 12
  %582 = bitcast i8* %581 to <4 x i8>*
  %583 = load <4 x i8>, <4 x i8>* %582, align 1
  %584 = zext <4 x i8> %583 to <4 x i32>
  %585 = mul nsw <4 x i32> %580, %584
  %586 = add nuw nsw <4 x i32> %579, <i32 32, i32 32, i32 32, i32 32>
  %587 = add nsw <4 x i32> %586, %585
  %588 = ashr <4 x i32> %587, <i32 6, i32 6, i32 6, i32 6>
  %589 = getelementptr inbounds i8, i8* %487, i64 12
  %590 = bitcast i8* %589 to <4 x i8>*
  %591 = load <4 x i8>, <4 x i8>* %590, align 1
  %592 = zext <4 x i8> %591 to <4 x i32>
  %593 = sub nsw <4 x i32> %588, %592
  %594 = icmp slt <4 x i32> %593, zeroinitializer
  %595 = sub nsw <4 x i32> zeroinitializer, %593
  %596 = select <4 x i1> %594, <4 x i32> %595, <4 x i32> %593
  %597 = add <4 x i32> %596, %570
  %598 = getelementptr inbounds i8, i8* %492, i64 16
  %599 = bitcast i8* %598 to <4 x i8>*
  %600 = load <4 x i8>, <4 x i8>* %599, align 1
  %601 = zext <4 x i8> %600 to <4 x i32>
  %602 = getelementptr inbounds i8, i8* %490, i64 16
  %603 = bitcast i8* %602 to <4 x i8>*
  %604 = load <4 x i8>, <4 x i8>* %603, align 1
  %605 = zext <4 x i8> %604 to <4 x i32>
  %606 = mul nuw nsw <4 x i32> %605, %601
  %607 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %601
  %608 = getelementptr inbounds i8, i8* %491, i64 16
  %609 = bitcast i8* %608 to <4 x i8>*
  %610 = load <4 x i8>, <4 x i8>* %609, align 1
  %611 = zext <4 x i8> %610 to <4 x i32>
  %612 = mul nsw <4 x i32> %607, %611
  %613 = add nuw nsw <4 x i32> %606, <i32 32, i32 32, i32 32, i32 32>
  %614 = add nsw <4 x i32> %613, %612
  %615 = ashr <4 x i32> %614, <i32 6, i32 6, i32 6, i32 6>
  %616 = getelementptr inbounds i8, i8* %487, i64 16
  %617 = bitcast i8* %616 to <4 x i8>*
  %618 = load <4 x i8>, <4 x i8>* %617, align 1
  %619 = zext <4 x i8> %618 to <4 x i32>
  %620 = sub nsw <4 x i32> %615, %619
  %621 = icmp slt <4 x i32> %620, zeroinitializer
  %622 = sub nsw <4 x i32> zeroinitializer, %620
  %623 = select <4 x i1> %621, <4 x i32> %622, <4 x i32> %620
  %624 = add <4 x i32> %623, %597
  %625 = getelementptr inbounds i8, i8* %492, i64 20
  %626 = bitcast i8* %625 to <4 x i8>*
  %627 = load <4 x i8>, <4 x i8>* %626, align 1
  %628 = zext <4 x i8> %627 to <4 x i32>
  %629 = getelementptr inbounds i8, i8* %490, i64 20
  %630 = bitcast i8* %629 to <4 x i8>*
  %631 = load <4 x i8>, <4 x i8>* %630, align 1
  %632 = zext <4 x i8> %631 to <4 x i32>
  %633 = mul nuw nsw <4 x i32> %632, %628
  %634 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %628
  %635 = getelementptr inbounds i8, i8* %491, i64 20
  %636 = bitcast i8* %635 to <4 x i8>*
  %637 = load <4 x i8>, <4 x i8>* %636, align 1
  %638 = zext <4 x i8> %637 to <4 x i32>
  %639 = mul nsw <4 x i32> %634, %638
  %640 = add nuw nsw <4 x i32> %633, <i32 32, i32 32, i32 32, i32 32>
  %641 = add nsw <4 x i32> %640, %639
  %642 = ashr <4 x i32> %641, <i32 6, i32 6, i32 6, i32 6>
  %643 = getelementptr inbounds i8, i8* %487, i64 20
  %644 = bitcast i8* %643 to <4 x i8>*
  %645 = load <4 x i8>, <4 x i8>* %644, align 1
  %646 = zext <4 x i8> %645 to <4 x i32>
  %647 = sub nsw <4 x i32> %642, %646
  %648 = icmp slt <4 x i32> %647, zeroinitializer
  %649 = sub nsw <4 x i32> zeroinitializer, %647
  %650 = select <4 x i1> %648, <4 x i32> %649, <4 x i32> %647
  %651 = add <4 x i32> %650, %624
  %652 = getelementptr inbounds i8, i8* %492, i64 24
  %653 = bitcast i8* %652 to <4 x i8>*
  %654 = load <4 x i8>, <4 x i8>* %653, align 1
  %655 = zext <4 x i8> %654 to <4 x i32>
  %656 = getelementptr inbounds i8, i8* %490, i64 24
  %657 = bitcast i8* %656 to <4 x i8>*
  %658 = load <4 x i8>, <4 x i8>* %657, align 1
  %659 = zext <4 x i8> %658 to <4 x i32>
  %660 = mul nuw nsw <4 x i32> %659, %655
  %661 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %655
  %662 = getelementptr inbounds i8, i8* %491, i64 24
  %663 = bitcast i8* %662 to <4 x i8>*
  %664 = load <4 x i8>, <4 x i8>* %663, align 1
  %665 = zext <4 x i8> %664 to <4 x i32>
  %666 = mul nsw <4 x i32> %661, %665
  %667 = add nuw nsw <4 x i32> %660, <i32 32, i32 32, i32 32, i32 32>
  %668 = add nsw <4 x i32> %667, %666
  %669 = ashr <4 x i32> %668, <i32 6, i32 6, i32 6, i32 6>
  %670 = getelementptr inbounds i8, i8* %487, i64 24
  %671 = bitcast i8* %670 to <4 x i8>*
  %672 = load <4 x i8>, <4 x i8>* %671, align 1
  %673 = zext <4 x i8> %672 to <4 x i32>
  %674 = sub nsw <4 x i32> %669, %673
  %675 = icmp slt <4 x i32> %674, zeroinitializer
  %676 = sub nsw <4 x i32> zeroinitializer, %674
  %677 = select <4 x i1> %675, <4 x i32> %676, <4 x i32> %674
  %678 = add <4 x i32> %677, %651
  %679 = getelementptr inbounds i8, i8* %492, i64 28
  %680 = bitcast i8* %679 to <4 x i8>*
  %681 = load <4 x i8>, <4 x i8>* %680, align 1
  %682 = zext <4 x i8> %681 to <4 x i32>
  %683 = getelementptr inbounds i8, i8* %490, i64 28
  %684 = bitcast i8* %683 to <4 x i8>*
  %685 = load <4 x i8>, <4 x i8>* %684, align 1
  %686 = zext <4 x i8> %685 to <4 x i32>
  %687 = mul nuw nsw <4 x i32> %686, %682
  %688 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %682
  %689 = getelementptr inbounds i8, i8* %491, i64 28
  %690 = bitcast i8* %689 to <4 x i8>*
  %691 = load <4 x i8>, <4 x i8>* %690, align 1
  %692 = zext <4 x i8> %691 to <4 x i32>
  %693 = mul nsw <4 x i32> %688, %692
  %694 = add nuw nsw <4 x i32> %687, <i32 32, i32 32, i32 32, i32 32>
  %695 = add nsw <4 x i32> %694, %693
  %696 = ashr <4 x i32> %695, <i32 6, i32 6, i32 6, i32 6>
  %697 = getelementptr inbounds i8, i8* %487, i64 28
  %698 = bitcast i8* %697 to <4 x i8>*
  %699 = load <4 x i8>, <4 x i8>* %698, align 1
  %700 = zext <4 x i8> %699 to <4 x i32>
  %701 = sub nsw <4 x i32> %696, %700
  %702 = icmp slt <4 x i32> %701, zeroinitializer
  %703 = sub nsw <4 x i32> zeroinitializer, %701
  %704 = select <4 x i1> %702, <4 x i32> %703, <4 x i32> %701
  %705 = add <4 x i32> %704, %678
  %706 = shufflevector <4 x i32> %705, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %707 = add <4 x i32> %705, %706
  %708 = shufflevector <4 x i32> %707, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %709 = add <4 x i32> %707, %708
  %710 = extractelement <4 x i32> %709, i32 0
  %711 = getelementptr inbounds i8, i8* %487, i64 %11
  %712 = getelementptr inbounds i8, i8* %490, i64 %12
  %713 = getelementptr inbounds i8, i8* %491, i64 32
  %714 = getelementptr inbounds i8, i8* %492, i64 %13
  %715 = add nuw nsw i32 %489, 1
  %716 = icmp eq i32 %715, 8
  br i1 %716, label %717, label %486

717:                                              ; preds = %486
  %718 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %710, i32* %718, align 4
  %719 = getelementptr inbounds i8*, i8** %2, i64 2
  %720 = load i8*, i8** %719, align 8
  br label %721

721:                                              ; preds = %717, %721
  %722 = phi i8* [ %0, %717 ], [ %946, %721 ]
  %723 = phi i32 [ 0, %717 ], [ %945, %721 ]
  %724 = phi i32 [ 0, %717 ], [ %950, %721 ]
  %725 = phi i8* [ %720, %717 ], [ %947, %721 ]
  %726 = phi i8* [ %4, %717 ], [ %948, %721 ]
  %727 = phi i8* [ %5, %717 ], [ %949, %721 ]
  %728 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %723, i32 0
  %729 = bitcast i8* %727 to <4 x i8>*
  %730 = load <4 x i8>, <4 x i8>* %729, align 1
  %731 = zext <4 x i8> %730 to <4 x i32>
  %732 = bitcast i8* %725 to <4 x i8>*
  %733 = load <4 x i8>, <4 x i8>* %732, align 1
  %734 = zext <4 x i8> %733 to <4 x i32>
  %735 = mul nuw nsw <4 x i32> %734, %731
  %736 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %731
  %737 = bitcast i8* %726 to <4 x i8>*
  %738 = load <4 x i8>, <4 x i8>* %737, align 1
  %739 = zext <4 x i8> %738 to <4 x i32>
  %740 = mul nsw <4 x i32> %736, %739
  %741 = add nuw nsw <4 x i32> %735, <i32 32, i32 32, i32 32, i32 32>
  %742 = add nsw <4 x i32> %741, %740
  %743 = ashr <4 x i32> %742, <i32 6, i32 6, i32 6, i32 6>
  %744 = bitcast i8* %722 to <4 x i8>*
  %745 = load <4 x i8>, <4 x i8>* %744, align 1
  %746 = zext <4 x i8> %745 to <4 x i32>
  %747 = sub nsw <4 x i32> %743, %746
  %748 = icmp slt <4 x i32> %747, zeroinitializer
  %749 = sub nsw <4 x i32> zeroinitializer, %747
  %750 = select <4 x i1> %748, <4 x i32> %749, <4 x i32> %747
  %751 = add <4 x i32> %750, %728
  %752 = getelementptr inbounds i8, i8* %727, i64 4
  %753 = bitcast i8* %752 to <4 x i8>*
  %754 = load <4 x i8>, <4 x i8>* %753, align 1
  %755 = zext <4 x i8> %754 to <4 x i32>
  %756 = getelementptr inbounds i8, i8* %725, i64 4
  %757 = bitcast i8* %756 to <4 x i8>*
  %758 = load <4 x i8>, <4 x i8>* %757, align 1
  %759 = zext <4 x i8> %758 to <4 x i32>
  %760 = mul nuw nsw <4 x i32> %759, %755
  %761 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %755
  %762 = getelementptr inbounds i8, i8* %726, i64 4
  %763 = bitcast i8* %762 to <4 x i8>*
  %764 = load <4 x i8>, <4 x i8>* %763, align 1
  %765 = zext <4 x i8> %764 to <4 x i32>
  %766 = mul nsw <4 x i32> %761, %765
  %767 = add nuw nsw <4 x i32> %760, <i32 32, i32 32, i32 32, i32 32>
  %768 = add nsw <4 x i32> %767, %766
  %769 = ashr <4 x i32> %768, <i32 6, i32 6, i32 6, i32 6>
  %770 = getelementptr inbounds i8, i8* %722, i64 4
  %771 = bitcast i8* %770 to <4 x i8>*
  %772 = load <4 x i8>, <4 x i8>* %771, align 1
  %773 = zext <4 x i8> %772 to <4 x i32>
  %774 = sub nsw <4 x i32> %769, %773
  %775 = icmp slt <4 x i32> %774, zeroinitializer
  %776 = sub nsw <4 x i32> zeroinitializer, %774
  %777 = select <4 x i1> %775, <4 x i32> %776, <4 x i32> %774
  %778 = add <4 x i32> %777, %751
  %779 = getelementptr inbounds i8, i8* %727, i64 8
  %780 = bitcast i8* %779 to <4 x i8>*
  %781 = load <4 x i8>, <4 x i8>* %780, align 1
  %782 = zext <4 x i8> %781 to <4 x i32>
  %783 = getelementptr inbounds i8, i8* %725, i64 8
  %784 = bitcast i8* %783 to <4 x i8>*
  %785 = load <4 x i8>, <4 x i8>* %784, align 1
  %786 = zext <4 x i8> %785 to <4 x i32>
  %787 = mul nuw nsw <4 x i32> %786, %782
  %788 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %782
  %789 = getelementptr inbounds i8, i8* %726, i64 8
  %790 = bitcast i8* %789 to <4 x i8>*
  %791 = load <4 x i8>, <4 x i8>* %790, align 1
  %792 = zext <4 x i8> %791 to <4 x i32>
  %793 = mul nsw <4 x i32> %788, %792
  %794 = add nuw nsw <4 x i32> %787, <i32 32, i32 32, i32 32, i32 32>
  %795 = add nsw <4 x i32> %794, %793
  %796 = ashr <4 x i32> %795, <i32 6, i32 6, i32 6, i32 6>
  %797 = getelementptr inbounds i8, i8* %722, i64 8
  %798 = bitcast i8* %797 to <4 x i8>*
  %799 = load <4 x i8>, <4 x i8>* %798, align 1
  %800 = zext <4 x i8> %799 to <4 x i32>
  %801 = sub nsw <4 x i32> %796, %800
  %802 = icmp slt <4 x i32> %801, zeroinitializer
  %803 = sub nsw <4 x i32> zeroinitializer, %801
  %804 = select <4 x i1> %802, <4 x i32> %803, <4 x i32> %801
  %805 = add <4 x i32> %804, %778
  %806 = getelementptr inbounds i8, i8* %727, i64 12
  %807 = bitcast i8* %806 to <4 x i8>*
  %808 = load <4 x i8>, <4 x i8>* %807, align 1
  %809 = zext <4 x i8> %808 to <4 x i32>
  %810 = getelementptr inbounds i8, i8* %725, i64 12
  %811 = bitcast i8* %810 to <4 x i8>*
  %812 = load <4 x i8>, <4 x i8>* %811, align 1
  %813 = zext <4 x i8> %812 to <4 x i32>
  %814 = mul nuw nsw <4 x i32> %813, %809
  %815 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %809
  %816 = getelementptr inbounds i8, i8* %726, i64 12
  %817 = bitcast i8* %816 to <4 x i8>*
  %818 = load <4 x i8>, <4 x i8>* %817, align 1
  %819 = zext <4 x i8> %818 to <4 x i32>
  %820 = mul nsw <4 x i32> %815, %819
  %821 = add nuw nsw <4 x i32> %814, <i32 32, i32 32, i32 32, i32 32>
  %822 = add nsw <4 x i32> %821, %820
  %823 = ashr <4 x i32> %822, <i32 6, i32 6, i32 6, i32 6>
  %824 = getelementptr inbounds i8, i8* %722, i64 12
  %825 = bitcast i8* %824 to <4 x i8>*
  %826 = load <4 x i8>, <4 x i8>* %825, align 1
  %827 = zext <4 x i8> %826 to <4 x i32>
  %828 = sub nsw <4 x i32> %823, %827
  %829 = icmp slt <4 x i32> %828, zeroinitializer
  %830 = sub nsw <4 x i32> zeroinitializer, %828
  %831 = select <4 x i1> %829, <4 x i32> %830, <4 x i32> %828
  %832 = add <4 x i32> %831, %805
  %833 = getelementptr inbounds i8, i8* %727, i64 16
  %834 = bitcast i8* %833 to <4 x i8>*
  %835 = load <4 x i8>, <4 x i8>* %834, align 1
  %836 = zext <4 x i8> %835 to <4 x i32>
  %837 = getelementptr inbounds i8, i8* %725, i64 16
  %838 = bitcast i8* %837 to <4 x i8>*
  %839 = load <4 x i8>, <4 x i8>* %838, align 1
  %840 = zext <4 x i8> %839 to <4 x i32>
  %841 = mul nuw nsw <4 x i32> %840, %836
  %842 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %836
  %843 = getelementptr inbounds i8, i8* %726, i64 16
  %844 = bitcast i8* %843 to <4 x i8>*
  %845 = load <4 x i8>, <4 x i8>* %844, align 1
  %846 = zext <4 x i8> %845 to <4 x i32>
  %847 = mul nsw <4 x i32> %842, %846
  %848 = add nuw nsw <4 x i32> %841, <i32 32, i32 32, i32 32, i32 32>
  %849 = add nsw <4 x i32> %848, %847
  %850 = ashr <4 x i32> %849, <i32 6, i32 6, i32 6, i32 6>
  %851 = getelementptr inbounds i8, i8* %722, i64 16
  %852 = bitcast i8* %851 to <4 x i8>*
  %853 = load <4 x i8>, <4 x i8>* %852, align 1
  %854 = zext <4 x i8> %853 to <4 x i32>
  %855 = sub nsw <4 x i32> %850, %854
  %856 = icmp slt <4 x i32> %855, zeroinitializer
  %857 = sub nsw <4 x i32> zeroinitializer, %855
  %858 = select <4 x i1> %856, <4 x i32> %857, <4 x i32> %855
  %859 = add <4 x i32> %858, %832
  %860 = getelementptr inbounds i8, i8* %727, i64 20
  %861 = bitcast i8* %860 to <4 x i8>*
  %862 = load <4 x i8>, <4 x i8>* %861, align 1
  %863 = zext <4 x i8> %862 to <4 x i32>
  %864 = getelementptr inbounds i8, i8* %725, i64 20
  %865 = bitcast i8* %864 to <4 x i8>*
  %866 = load <4 x i8>, <4 x i8>* %865, align 1
  %867 = zext <4 x i8> %866 to <4 x i32>
  %868 = mul nuw nsw <4 x i32> %867, %863
  %869 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %863
  %870 = getelementptr inbounds i8, i8* %726, i64 20
  %871 = bitcast i8* %870 to <4 x i8>*
  %872 = load <4 x i8>, <4 x i8>* %871, align 1
  %873 = zext <4 x i8> %872 to <4 x i32>
  %874 = mul nsw <4 x i32> %869, %873
  %875 = add nuw nsw <4 x i32> %868, <i32 32, i32 32, i32 32, i32 32>
  %876 = add nsw <4 x i32> %875, %874
  %877 = ashr <4 x i32> %876, <i32 6, i32 6, i32 6, i32 6>
  %878 = getelementptr inbounds i8, i8* %722, i64 20
  %879 = bitcast i8* %878 to <4 x i8>*
  %880 = load <4 x i8>, <4 x i8>* %879, align 1
  %881 = zext <4 x i8> %880 to <4 x i32>
  %882 = sub nsw <4 x i32> %877, %881
  %883 = icmp slt <4 x i32> %882, zeroinitializer
  %884 = sub nsw <4 x i32> zeroinitializer, %882
  %885 = select <4 x i1> %883, <4 x i32> %884, <4 x i32> %882
  %886 = add <4 x i32> %885, %859
  %887 = getelementptr inbounds i8, i8* %727, i64 24
  %888 = bitcast i8* %887 to <4 x i8>*
  %889 = load <4 x i8>, <4 x i8>* %888, align 1
  %890 = zext <4 x i8> %889 to <4 x i32>
  %891 = getelementptr inbounds i8, i8* %725, i64 24
  %892 = bitcast i8* %891 to <4 x i8>*
  %893 = load <4 x i8>, <4 x i8>* %892, align 1
  %894 = zext <4 x i8> %893 to <4 x i32>
  %895 = mul nuw nsw <4 x i32> %894, %890
  %896 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %890
  %897 = getelementptr inbounds i8, i8* %726, i64 24
  %898 = bitcast i8* %897 to <4 x i8>*
  %899 = load <4 x i8>, <4 x i8>* %898, align 1
  %900 = zext <4 x i8> %899 to <4 x i32>
  %901 = mul nsw <4 x i32> %896, %900
  %902 = add nuw nsw <4 x i32> %895, <i32 32, i32 32, i32 32, i32 32>
  %903 = add nsw <4 x i32> %902, %901
  %904 = ashr <4 x i32> %903, <i32 6, i32 6, i32 6, i32 6>
  %905 = getelementptr inbounds i8, i8* %722, i64 24
  %906 = bitcast i8* %905 to <4 x i8>*
  %907 = load <4 x i8>, <4 x i8>* %906, align 1
  %908 = zext <4 x i8> %907 to <4 x i32>
  %909 = sub nsw <4 x i32> %904, %908
  %910 = icmp slt <4 x i32> %909, zeroinitializer
  %911 = sub nsw <4 x i32> zeroinitializer, %909
  %912 = select <4 x i1> %910, <4 x i32> %911, <4 x i32> %909
  %913 = add <4 x i32> %912, %886
  %914 = getelementptr inbounds i8, i8* %727, i64 28
  %915 = bitcast i8* %914 to <4 x i8>*
  %916 = load <4 x i8>, <4 x i8>* %915, align 1
  %917 = zext <4 x i8> %916 to <4 x i32>
  %918 = getelementptr inbounds i8, i8* %725, i64 28
  %919 = bitcast i8* %918 to <4 x i8>*
  %920 = load <4 x i8>, <4 x i8>* %919, align 1
  %921 = zext <4 x i8> %920 to <4 x i32>
  %922 = mul nuw nsw <4 x i32> %921, %917
  %923 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %917
  %924 = getelementptr inbounds i8, i8* %726, i64 28
  %925 = bitcast i8* %924 to <4 x i8>*
  %926 = load <4 x i8>, <4 x i8>* %925, align 1
  %927 = zext <4 x i8> %926 to <4 x i32>
  %928 = mul nsw <4 x i32> %923, %927
  %929 = add nuw nsw <4 x i32> %922, <i32 32, i32 32, i32 32, i32 32>
  %930 = add nsw <4 x i32> %929, %928
  %931 = ashr <4 x i32> %930, <i32 6, i32 6, i32 6, i32 6>
  %932 = getelementptr inbounds i8, i8* %722, i64 28
  %933 = bitcast i8* %932 to <4 x i8>*
  %934 = load <4 x i8>, <4 x i8>* %933, align 1
  %935 = zext <4 x i8> %934 to <4 x i32>
  %936 = sub nsw <4 x i32> %931, %935
  %937 = icmp slt <4 x i32> %936, zeroinitializer
  %938 = sub nsw <4 x i32> zeroinitializer, %936
  %939 = select <4 x i1> %937, <4 x i32> %938, <4 x i32> %936
  %940 = add <4 x i32> %939, %913
  %941 = shufflevector <4 x i32> %940, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %942 = add <4 x i32> %940, %941
  %943 = shufflevector <4 x i32> %942, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %944 = add <4 x i32> %942, %943
  %945 = extractelement <4 x i32> %944, i32 0
  %946 = getelementptr inbounds i8, i8* %722, i64 %11
  %947 = getelementptr inbounds i8, i8* %725, i64 %12
  %948 = getelementptr inbounds i8, i8* %726, i64 32
  %949 = getelementptr inbounds i8, i8* %727, i64 %13
  %950 = add nuw nsw i32 %724, 1
  %951 = icmp eq i32 %950, 8
  br i1 %951, label %952, label %721

952:                                              ; preds = %721
  %953 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %945, i32* %953, align 4
  %954 = getelementptr inbounds i8*, i8** %2, i64 3
  %955 = load i8*, i8** %954, align 8
  br label %956

956:                                              ; preds = %952, %956
  %957 = phi i8* [ %0, %952 ], [ %1181, %956 ]
  %958 = phi i32 [ 0, %952 ], [ %1180, %956 ]
  %959 = phi i32 [ 0, %952 ], [ %1185, %956 ]
  %960 = phi i8* [ %955, %952 ], [ %1182, %956 ]
  %961 = phi i8* [ %4, %952 ], [ %1183, %956 ]
  %962 = phi i8* [ %5, %952 ], [ %1184, %956 ]
  %963 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %958, i32 0
  %964 = bitcast i8* %962 to <4 x i8>*
  %965 = load <4 x i8>, <4 x i8>* %964, align 1
  %966 = zext <4 x i8> %965 to <4 x i32>
  %967 = bitcast i8* %960 to <4 x i8>*
  %968 = load <4 x i8>, <4 x i8>* %967, align 1
  %969 = zext <4 x i8> %968 to <4 x i32>
  %970 = mul nuw nsw <4 x i32> %969, %966
  %971 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %966
  %972 = bitcast i8* %961 to <4 x i8>*
  %973 = load <4 x i8>, <4 x i8>* %972, align 1
  %974 = zext <4 x i8> %973 to <4 x i32>
  %975 = mul nsw <4 x i32> %971, %974
  %976 = add nuw nsw <4 x i32> %970, <i32 32, i32 32, i32 32, i32 32>
  %977 = add nsw <4 x i32> %976, %975
  %978 = ashr <4 x i32> %977, <i32 6, i32 6, i32 6, i32 6>
  %979 = bitcast i8* %957 to <4 x i8>*
  %980 = load <4 x i8>, <4 x i8>* %979, align 1
  %981 = zext <4 x i8> %980 to <4 x i32>
  %982 = sub nsw <4 x i32> %978, %981
  %983 = icmp slt <4 x i32> %982, zeroinitializer
  %984 = sub nsw <4 x i32> zeroinitializer, %982
  %985 = select <4 x i1> %983, <4 x i32> %984, <4 x i32> %982
  %986 = add <4 x i32> %985, %963
  %987 = getelementptr inbounds i8, i8* %962, i64 4
  %988 = bitcast i8* %987 to <4 x i8>*
  %989 = load <4 x i8>, <4 x i8>* %988, align 1
  %990 = zext <4 x i8> %989 to <4 x i32>
  %991 = getelementptr inbounds i8, i8* %960, i64 4
  %992 = bitcast i8* %991 to <4 x i8>*
  %993 = load <4 x i8>, <4 x i8>* %992, align 1
  %994 = zext <4 x i8> %993 to <4 x i32>
  %995 = mul nuw nsw <4 x i32> %994, %990
  %996 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %990
  %997 = getelementptr inbounds i8, i8* %961, i64 4
  %998 = bitcast i8* %997 to <4 x i8>*
  %999 = load <4 x i8>, <4 x i8>* %998, align 1
  %1000 = zext <4 x i8> %999 to <4 x i32>
  %1001 = mul nsw <4 x i32> %996, %1000
  %1002 = add nuw nsw <4 x i32> %995, <i32 32, i32 32, i32 32, i32 32>
  %1003 = add nsw <4 x i32> %1002, %1001
  %1004 = ashr <4 x i32> %1003, <i32 6, i32 6, i32 6, i32 6>
  %1005 = getelementptr inbounds i8, i8* %957, i64 4
  %1006 = bitcast i8* %1005 to <4 x i8>*
  %1007 = load <4 x i8>, <4 x i8>* %1006, align 1
  %1008 = zext <4 x i8> %1007 to <4 x i32>
  %1009 = sub nsw <4 x i32> %1004, %1008
  %1010 = icmp slt <4 x i32> %1009, zeroinitializer
  %1011 = sub nsw <4 x i32> zeroinitializer, %1009
  %1012 = select <4 x i1> %1010, <4 x i32> %1011, <4 x i32> %1009
  %1013 = add <4 x i32> %1012, %986
  %1014 = getelementptr inbounds i8, i8* %962, i64 8
  %1015 = bitcast i8* %1014 to <4 x i8>*
  %1016 = load <4 x i8>, <4 x i8>* %1015, align 1
  %1017 = zext <4 x i8> %1016 to <4 x i32>
  %1018 = getelementptr inbounds i8, i8* %960, i64 8
  %1019 = bitcast i8* %1018 to <4 x i8>*
  %1020 = load <4 x i8>, <4 x i8>* %1019, align 1
  %1021 = zext <4 x i8> %1020 to <4 x i32>
  %1022 = mul nuw nsw <4 x i32> %1021, %1017
  %1023 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1017
  %1024 = getelementptr inbounds i8, i8* %961, i64 8
  %1025 = bitcast i8* %1024 to <4 x i8>*
  %1026 = load <4 x i8>, <4 x i8>* %1025, align 1
  %1027 = zext <4 x i8> %1026 to <4 x i32>
  %1028 = mul nsw <4 x i32> %1023, %1027
  %1029 = add nuw nsw <4 x i32> %1022, <i32 32, i32 32, i32 32, i32 32>
  %1030 = add nsw <4 x i32> %1029, %1028
  %1031 = ashr <4 x i32> %1030, <i32 6, i32 6, i32 6, i32 6>
  %1032 = getelementptr inbounds i8, i8* %957, i64 8
  %1033 = bitcast i8* %1032 to <4 x i8>*
  %1034 = load <4 x i8>, <4 x i8>* %1033, align 1
  %1035 = zext <4 x i8> %1034 to <4 x i32>
  %1036 = sub nsw <4 x i32> %1031, %1035
  %1037 = icmp slt <4 x i32> %1036, zeroinitializer
  %1038 = sub nsw <4 x i32> zeroinitializer, %1036
  %1039 = select <4 x i1> %1037, <4 x i32> %1038, <4 x i32> %1036
  %1040 = add <4 x i32> %1039, %1013
  %1041 = getelementptr inbounds i8, i8* %962, i64 12
  %1042 = bitcast i8* %1041 to <4 x i8>*
  %1043 = load <4 x i8>, <4 x i8>* %1042, align 1
  %1044 = zext <4 x i8> %1043 to <4 x i32>
  %1045 = getelementptr inbounds i8, i8* %960, i64 12
  %1046 = bitcast i8* %1045 to <4 x i8>*
  %1047 = load <4 x i8>, <4 x i8>* %1046, align 1
  %1048 = zext <4 x i8> %1047 to <4 x i32>
  %1049 = mul nuw nsw <4 x i32> %1048, %1044
  %1050 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1044
  %1051 = getelementptr inbounds i8, i8* %961, i64 12
  %1052 = bitcast i8* %1051 to <4 x i8>*
  %1053 = load <4 x i8>, <4 x i8>* %1052, align 1
  %1054 = zext <4 x i8> %1053 to <4 x i32>
  %1055 = mul nsw <4 x i32> %1050, %1054
  %1056 = add nuw nsw <4 x i32> %1049, <i32 32, i32 32, i32 32, i32 32>
  %1057 = add nsw <4 x i32> %1056, %1055
  %1058 = ashr <4 x i32> %1057, <i32 6, i32 6, i32 6, i32 6>
  %1059 = getelementptr inbounds i8, i8* %957, i64 12
  %1060 = bitcast i8* %1059 to <4 x i8>*
  %1061 = load <4 x i8>, <4 x i8>* %1060, align 1
  %1062 = zext <4 x i8> %1061 to <4 x i32>
  %1063 = sub nsw <4 x i32> %1058, %1062
  %1064 = icmp slt <4 x i32> %1063, zeroinitializer
  %1065 = sub nsw <4 x i32> zeroinitializer, %1063
  %1066 = select <4 x i1> %1064, <4 x i32> %1065, <4 x i32> %1063
  %1067 = add <4 x i32> %1066, %1040
  %1068 = getelementptr inbounds i8, i8* %962, i64 16
  %1069 = bitcast i8* %1068 to <4 x i8>*
  %1070 = load <4 x i8>, <4 x i8>* %1069, align 1
  %1071 = zext <4 x i8> %1070 to <4 x i32>
  %1072 = getelementptr inbounds i8, i8* %960, i64 16
  %1073 = bitcast i8* %1072 to <4 x i8>*
  %1074 = load <4 x i8>, <4 x i8>* %1073, align 1
  %1075 = zext <4 x i8> %1074 to <4 x i32>
  %1076 = mul nuw nsw <4 x i32> %1075, %1071
  %1077 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1071
  %1078 = getelementptr inbounds i8, i8* %961, i64 16
  %1079 = bitcast i8* %1078 to <4 x i8>*
  %1080 = load <4 x i8>, <4 x i8>* %1079, align 1
  %1081 = zext <4 x i8> %1080 to <4 x i32>
  %1082 = mul nsw <4 x i32> %1077, %1081
  %1083 = add nuw nsw <4 x i32> %1076, <i32 32, i32 32, i32 32, i32 32>
  %1084 = add nsw <4 x i32> %1083, %1082
  %1085 = ashr <4 x i32> %1084, <i32 6, i32 6, i32 6, i32 6>
  %1086 = getelementptr inbounds i8, i8* %957, i64 16
  %1087 = bitcast i8* %1086 to <4 x i8>*
  %1088 = load <4 x i8>, <4 x i8>* %1087, align 1
  %1089 = zext <4 x i8> %1088 to <4 x i32>
  %1090 = sub nsw <4 x i32> %1085, %1089
  %1091 = icmp slt <4 x i32> %1090, zeroinitializer
  %1092 = sub nsw <4 x i32> zeroinitializer, %1090
  %1093 = select <4 x i1> %1091, <4 x i32> %1092, <4 x i32> %1090
  %1094 = add <4 x i32> %1093, %1067
  %1095 = getelementptr inbounds i8, i8* %962, i64 20
  %1096 = bitcast i8* %1095 to <4 x i8>*
  %1097 = load <4 x i8>, <4 x i8>* %1096, align 1
  %1098 = zext <4 x i8> %1097 to <4 x i32>
  %1099 = getelementptr inbounds i8, i8* %960, i64 20
  %1100 = bitcast i8* %1099 to <4 x i8>*
  %1101 = load <4 x i8>, <4 x i8>* %1100, align 1
  %1102 = zext <4 x i8> %1101 to <4 x i32>
  %1103 = mul nuw nsw <4 x i32> %1102, %1098
  %1104 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1098
  %1105 = getelementptr inbounds i8, i8* %961, i64 20
  %1106 = bitcast i8* %1105 to <4 x i8>*
  %1107 = load <4 x i8>, <4 x i8>* %1106, align 1
  %1108 = zext <4 x i8> %1107 to <4 x i32>
  %1109 = mul nsw <4 x i32> %1104, %1108
  %1110 = add nuw nsw <4 x i32> %1103, <i32 32, i32 32, i32 32, i32 32>
  %1111 = add nsw <4 x i32> %1110, %1109
  %1112 = ashr <4 x i32> %1111, <i32 6, i32 6, i32 6, i32 6>
  %1113 = getelementptr inbounds i8, i8* %957, i64 20
  %1114 = bitcast i8* %1113 to <4 x i8>*
  %1115 = load <4 x i8>, <4 x i8>* %1114, align 1
  %1116 = zext <4 x i8> %1115 to <4 x i32>
  %1117 = sub nsw <4 x i32> %1112, %1116
  %1118 = icmp slt <4 x i32> %1117, zeroinitializer
  %1119 = sub nsw <4 x i32> zeroinitializer, %1117
  %1120 = select <4 x i1> %1118, <4 x i32> %1119, <4 x i32> %1117
  %1121 = add <4 x i32> %1120, %1094
  %1122 = getelementptr inbounds i8, i8* %962, i64 24
  %1123 = bitcast i8* %1122 to <4 x i8>*
  %1124 = load <4 x i8>, <4 x i8>* %1123, align 1
  %1125 = zext <4 x i8> %1124 to <4 x i32>
  %1126 = getelementptr inbounds i8, i8* %960, i64 24
  %1127 = bitcast i8* %1126 to <4 x i8>*
  %1128 = load <4 x i8>, <4 x i8>* %1127, align 1
  %1129 = zext <4 x i8> %1128 to <4 x i32>
  %1130 = mul nuw nsw <4 x i32> %1129, %1125
  %1131 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1125
  %1132 = getelementptr inbounds i8, i8* %961, i64 24
  %1133 = bitcast i8* %1132 to <4 x i8>*
  %1134 = load <4 x i8>, <4 x i8>* %1133, align 1
  %1135 = zext <4 x i8> %1134 to <4 x i32>
  %1136 = mul nsw <4 x i32> %1131, %1135
  %1137 = add nuw nsw <4 x i32> %1130, <i32 32, i32 32, i32 32, i32 32>
  %1138 = add nsw <4 x i32> %1137, %1136
  %1139 = ashr <4 x i32> %1138, <i32 6, i32 6, i32 6, i32 6>
  %1140 = getelementptr inbounds i8, i8* %957, i64 24
  %1141 = bitcast i8* %1140 to <4 x i8>*
  %1142 = load <4 x i8>, <4 x i8>* %1141, align 1
  %1143 = zext <4 x i8> %1142 to <4 x i32>
  %1144 = sub nsw <4 x i32> %1139, %1143
  %1145 = icmp slt <4 x i32> %1144, zeroinitializer
  %1146 = sub nsw <4 x i32> zeroinitializer, %1144
  %1147 = select <4 x i1> %1145, <4 x i32> %1146, <4 x i32> %1144
  %1148 = add <4 x i32> %1147, %1121
  %1149 = getelementptr inbounds i8, i8* %962, i64 28
  %1150 = bitcast i8* %1149 to <4 x i8>*
  %1151 = load <4 x i8>, <4 x i8>* %1150, align 1
  %1152 = zext <4 x i8> %1151 to <4 x i32>
  %1153 = getelementptr inbounds i8, i8* %960, i64 28
  %1154 = bitcast i8* %1153 to <4 x i8>*
  %1155 = load <4 x i8>, <4 x i8>* %1154, align 1
  %1156 = zext <4 x i8> %1155 to <4 x i32>
  %1157 = mul nuw nsw <4 x i32> %1156, %1152
  %1158 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1152
  %1159 = getelementptr inbounds i8, i8* %961, i64 28
  %1160 = bitcast i8* %1159 to <4 x i8>*
  %1161 = load <4 x i8>, <4 x i8>* %1160, align 1
  %1162 = zext <4 x i8> %1161 to <4 x i32>
  %1163 = mul nsw <4 x i32> %1158, %1162
  %1164 = add nuw nsw <4 x i32> %1157, <i32 32, i32 32, i32 32, i32 32>
  %1165 = add nsw <4 x i32> %1164, %1163
  %1166 = ashr <4 x i32> %1165, <i32 6, i32 6, i32 6, i32 6>
  %1167 = getelementptr inbounds i8, i8* %957, i64 28
  %1168 = bitcast i8* %1167 to <4 x i8>*
  %1169 = load <4 x i8>, <4 x i8>* %1168, align 1
  %1170 = zext <4 x i8> %1169 to <4 x i32>
  %1171 = sub nsw <4 x i32> %1166, %1170
  %1172 = icmp slt <4 x i32> %1171, zeroinitializer
  %1173 = sub nsw <4 x i32> zeroinitializer, %1171
  %1174 = select <4 x i1> %1172, <4 x i32> %1173, <4 x i32> %1171
  %1175 = add <4 x i32> %1174, %1148
  %1176 = shufflevector <4 x i32> %1175, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1177 = add <4 x i32> %1175, %1176
  %1178 = shufflevector <4 x i32> %1177, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1179 = add <4 x i32> %1177, %1178
  %1180 = extractelement <4 x i32> %1179, i32 0
  %1181 = getelementptr inbounds i8, i8* %957, i64 %11
  %1182 = getelementptr inbounds i8, i8* %960, i64 %12
  %1183 = getelementptr inbounds i8, i8* %961, i64 32
  %1184 = getelementptr inbounds i8, i8* %962, i64 %13
  %1185 = add nuw nsw i32 %959, 1
  %1186 = icmp eq i32 %1185, 8
  br i1 %1186, label %483, label %956

1187:                                             ; preds = %480, %1187
  %1188 = phi i8* [ %0, %480 ], [ %1412, %1187 ]
  %1189 = phi i32 [ 0, %480 ], [ %1411, %1187 ]
  %1190 = phi i32 [ 0, %480 ], [ %1416, %1187 ]
  %1191 = phi i8* [ %4, %480 ], [ %1413, %1187 ]
  %1192 = phi i8* [ %482, %480 ], [ %1414, %1187 ]
  %1193 = phi i8* [ %5, %480 ], [ %1415, %1187 ]
  %1194 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1189, i32 0
  %1195 = bitcast i8* %1193 to <4 x i8>*
  %1196 = load <4 x i8>, <4 x i8>* %1195, align 1
  %1197 = zext <4 x i8> %1196 to <4 x i32>
  %1198 = bitcast i8* %1191 to <4 x i8>*
  %1199 = load <4 x i8>, <4 x i8>* %1198, align 1
  %1200 = zext <4 x i8> %1199 to <4 x i32>
  %1201 = mul nuw nsw <4 x i32> %1200, %1197
  %1202 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1197
  %1203 = bitcast i8* %1192 to <4 x i8>*
  %1204 = load <4 x i8>, <4 x i8>* %1203, align 1
  %1205 = zext <4 x i8> %1204 to <4 x i32>
  %1206 = mul nsw <4 x i32> %1202, %1205
  %1207 = add nuw nsw <4 x i32> %1201, <i32 32, i32 32, i32 32, i32 32>
  %1208 = add nsw <4 x i32> %1207, %1206
  %1209 = ashr <4 x i32> %1208, <i32 6, i32 6, i32 6, i32 6>
  %1210 = bitcast i8* %1188 to <4 x i8>*
  %1211 = load <4 x i8>, <4 x i8>* %1210, align 1
  %1212 = zext <4 x i8> %1211 to <4 x i32>
  %1213 = sub nsw <4 x i32> %1209, %1212
  %1214 = icmp slt <4 x i32> %1213, zeroinitializer
  %1215 = sub nsw <4 x i32> zeroinitializer, %1213
  %1216 = select <4 x i1> %1214, <4 x i32> %1215, <4 x i32> %1213
  %1217 = add <4 x i32> %1216, %1194
  %1218 = getelementptr inbounds i8, i8* %1193, i64 4
  %1219 = bitcast i8* %1218 to <4 x i8>*
  %1220 = load <4 x i8>, <4 x i8>* %1219, align 1
  %1221 = zext <4 x i8> %1220 to <4 x i32>
  %1222 = getelementptr inbounds i8, i8* %1191, i64 4
  %1223 = bitcast i8* %1222 to <4 x i8>*
  %1224 = load <4 x i8>, <4 x i8>* %1223, align 1
  %1225 = zext <4 x i8> %1224 to <4 x i32>
  %1226 = mul nuw nsw <4 x i32> %1225, %1221
  %1227 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1221
  %1228 = getelementptr inbounds i8, i8* %1192, i64 4
  %1229 = bitcast i8* %1228 to <4 x i8>*
  %1230 = load <4 x i8>, <4 x i8>* %1229, align 1
  %1231 = zext <4 x i8> %1230 to <4 x i32>
  %1232 = mul nsw <4 x i32> %1227, %1231
  %1233 = add nuw nsw <4 x i32> %1226, <i32 32, i32 32, i32 32, i32 32>
  %1234 = add nsw <4 x i32> %1233, %1232
  %1235 = ashr <4 x i32> %1234, <i32 6, i32 6, i32 6, i32 6>
  %1236 = getelementptr inbounds i8, i8* %1188, i64 4
  %1237 = bitcast i8* %1236 to <4 x i8>*
  %1238 = load <4 x i8>, <4 x i8>* %1237, align 1
  %1239 = zext <4 x i8> %1238 to <4 x i32>
  %1240 = sub nsw <4 x i32> %1235, %1239
  %1241 = icmp slt <4 x i32> %1240, zeroinitializer
  %1242 = sub nsw <4 x i32> zeroinitializer, %1240
  %1243 = select <4 x i1> %1241, <4 x i32> %1242, <4 x i32> %1240
  %1244 = add <4 x i32> %1243, %1217
  %1245 = getelementptr inbounds i8, i8* %1193, i64 8
  %1246 = bitcast i8* %1245 to <4 x i8>*
  %1247 = load <4 x i8>, <4 x i8>* %1246, align 1
  %1248 = zext <4 x i8> %1247 to <4 x i32>
  %1249 = getelementptr inbounds i8, i8* %1191, i64 8
  %1250 = bitcast i8* %1249 to <4 x i8>*
  %1251 = load <4 x i8>, <4 x i8>* %1250, align 1
  %1252 = zext <4 x i8> %1251 to <4 x i32>
  %1253 = mul nuw nsw <4 x i32> %1252, %1248
  %1254 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1248
  %1255 = getelementptr inbounds i8, i8* %1192, i64 8
  %1256 = bitcast i8* %1255 to <4 x i8>*
  %1257 = load <4 x i8>, <4 x i8>* %1256, align 1
  %1258 = zext <4 x i8> %1257 to <4 x i32>
  %1259 = mul nsw <4 x i32> %1254, %1258
  %1260 = add nuw nsw <4 x i32> %1253, <i32 32, i32 32, i32 32, i32 32>
  %1261 = add nsw <4 x i32> %1260, %1259
  %1262 = ashr <4 x i32> %1261, <i32 6, i32 6, i32 6, i32 6>
  %1263 = getelementptr inbounds i8, i8* %1188, i64 8
  %1264 = bitcast i8* %1263 to <4 x i8>*
  %1265 = load <4 x i8>, <4 x i8>* %1264, align 1
  %1266 = zext <4 x i8> %1265 to <4 x i32>
  %1267 = sub nsw <4 x i32> %1262, %1266
  %1268 = icmp slt <4 x i32> %1267, zeroinitializer
  %1269 = sub nsw <4 x i32> zeroinitializer, %1267
  %1270 = select <4 x i1> %1268, <4 x i32> %1269, <4 x i32> %1267
  %1271 = add <4 x i32> %1270, %1244
  %1272 = getelementptr inbounds i8, i8* %1193, i64 12
  %1273 = bitcast i8* %1272 to <4 x i8>*
  %1274 = load <4 x i8>, <4 x i8>* %1273, align 1
  %1275 = zext <4 x i8> %1274 to <4 x i32>
  %1276 = getelementptr inbounds i8, i8* %1191, i64 12
  %1277 = bitcast i8* %1276 to <4 x i8>*
  %1278 = load <4 x i8>, <4 x i8>* %1277, align 1
  %1279 = zext <4 x i8> %1278 to <4 x i32>
  %1280 = mul nuw nsw <4 x i32> %1279, %1275
  %1281 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1275
  %1282 = getelementptr inbounds i8, i8* %1192, i64 12
  %1283 = bitcast i8* %1282 to <4 x i8>*
  %1284 = load <4 x i8>, <4 x i8>* %1283, align 1
  %1285 = zext <4 x i8> %1284 to <4 x i32>
  %1286 = mul nsw <4 x i32> %1281, %1285
  %1287 = add nuw nsw <4 x i32> %1280, <i32 32, i32 32, i32 32, i32 32>
  %1288 = add nsw <4 x i32> %1287, %1286
  %1289 = ashr <4 x i32> %1288, <i32 6, i32 6, i32 6, i32 6>
  %1290 = getelementptr inbounds i8, i8* %1188, i64 12
  %1291 = bitcast i8* %1290 to <4 x i8>*
  %1292 = load <4 x i8>, <4 x i8>* %1291, align 1
  %1293 = zext <4 x i8> %1292 to <4 x i32>
  %1294 = sub nsw <4 x i32> %1289, %1293
  %1295 = icmp slt <4 x i32> %1294, zeroinitializer
  %1296 = sub nsw <4 x i32> zeroinitializer, %1294
  %1297 = select <4 x i1> %1295, <4 x i32> %1296, <4 x i32> %1294
  %1298 = add <4 x i32> %1297, %1271
  %1299 = getelementptr inbounds i8, i8* %1193, i64 16
  %1300 = bitcast i8* %1299 to <4 x i8>*
  %1301 = load <4 x i8>, <4 x i8>* %1300, align 1
  %1302 = zext <4 x i8> %1301 to <4 x i32>
  %1303 = getelementptr inbounds i8, i8* %1191, i64 16
  %1304 = bitcast i8* %1303 to <4 x i8>*
  %1305 = load <4 x i8>, <4 x i8>* %1304, align 1
  %1306 = zext <4 x i8> %1305 to <4 x i32>
  %1307 = mul nuw nsw <4 x i32> %1306, %1302
  %1308 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1302
  %1309 = getelementptr inbounds i8, i8* %1192, i64 16
  %1310 = bitcast i8* %1309 to <4 x i8>*
  %1311 = load <4 x i8>, <4 x i8>* %1310, align 1
  %1312 = zext <4 x i8> %1311 to <4 x i32>
  %1313 = mul nsw <4 x i32> %1308, %1312
  %1314 = add nuw nsw <4 x i32> %1307, <i32 32, i32 32, i32 32, i32 32>
  %1315 = add nsw <4 x i32> %1314, %1313
  %1316 = ashr <4 x i32> %1315, <i32 6, i32 6, i32 6, i32 6>
  %1317 = getelementptr inbounds i8, i8* %1188, i64 16
  %1318 = bitcast i8* %1317 to <4 x i8>*
  %1319 = load <4 x i8>, <4 x i8>* %1318, align 1
  %1320 = zext <4 x i8> %1319 to <4 x i32>
  %1321 = sub nsw <4 x i32> %1316, %1320
  %1322 = icmp slt <4 x i32> %1321, zeroinitializer
  %1323 = sub nsw <4 x i32> zeroinitializer, %1321
  %1324 = select <4 x i1> %1322, <4 x i32> %1323, <4 x i32> %1321
  %1325 = add <4 x i32> %1324, %1298
  %1326 = getelementptr inbounds i8, i8* %1193, i64 20
  %1327 = bitcast i8* %1326 to <4 x i8>*
  %1328 = load <4 x i8>, <4 x i8>* %1327, align 1
  %1329 = zext <4 x i8> %1328 to <4 x i32>
  %1330 = getelementptr inbounds i8, i8* %1191, i64 20
  %1331 = bitcast i8* %1330 to <4 x i8>*
  %1332 = load <4 x i8>, <4 x i8>* %1331, align 1
  %1333 = zext <4 x i8> %1332 to <4 x i32>
  %1334 = mul nuw nsw <4 x i32> %1333, %1329
  %1335 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1329
  %1336 = getelementptr inbounds i8, i8* %1192, i64 20
  %1337 = bitcast i8* %1336 to <4 x i8>*
  %1338 = load <4 x i8>, <4 x i8>* %1337, align 1
  %1339 = zext <4 x i8> %1338 to <4 x i32>
  %1340 = mul nsw <4 x i32> %1335, %1339
  %1341 = add nuw nsw <4 x i32> %1334, <i32 32, i32 32, i32 32, i32 32>
  %1342 = add nsw <4 x i32> %1341, %1340
  %1343 = ashr <4 x i32> %1342, <i32 6, i32 6, i32 6, i32 6>
  %1344 = getelementptr inbounds i8, i8* %1188, i64 20
  %1345 = bitcast i8* %1344 to <4 x i8>*
  %1346 = load <4 x i8>, <4 x i8>* %1345, align 1
  %1347 = zext <4 x i8> %1346 to <4 x i32>
  %1348 = sub nsw <4 x i32> %1343, %1347
  %1349 = icmp slt <4 x i32> %1348, zeroinitializer
  %1350 = sub nsw <4 x i32> zeroinitializer, %1348
  %1351 = select <4 x i1> %1349, <4 x i32> %1350, <4 x i32> %1348
  %1352 = add <4 x i32> %1351, %1325
  %1353 = getelementptr inbounds i8, i8* %1193, i64 24
  %1354 = bitcast i8* %1353 to <4 x i8>*
  %1355 = load <4 x i8>, <4 x i8>* %1354, align 1
  %1356 = zext <4 x i8> %1355 to <4 x i32>
  %1357 = getelementptr inbounds i8, i8* %1191, i64 24
  %1358 = bitcast i8* %1357 to <4 x i8>*
  %1359 = load <4 x i8>, <4 x i8>* %1358, align 1
  %1360 = zext <4 x i8> %1359 to <4 x i32>
  %1361 = mul nuw nsw <4 x i32> %1360, %1356
  %1362 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1356
  %1363 = getelementptr inbounds i8, i8* %1192, i64 24
  %1364 = bitcast i8* %1363 to <4 x i8>*
  %1365 = load <4 x i8>, <4 x i8>* %1364, align 1
  %1366 = zext <4 x i8> %1365 to <4 x i32>
  %1367 = mul nsw <4 x i32> %1362, %1366
  %1368 = add nuw nsw <4 x i32> %1361, <i32 32, i32 32, i32 32, i32 32>
  %1369 = add nsw <4 x i32> %1368, %1367
  %1370 = ashr <4 x i32> %1369, <i32 6, i32 6, i32 6, i32 6>
  %1371 = getelementptr inbounds i8, i8* %1188, i64 24
  %1372 = bitcast i8* %1371 to <4 x i8>*
  %1373 = load <4 x i8>, <4 x i8>* %1372, align 1
  %1374 = zext <4 x i8> %1373 to <4 x i32>
  %1375 = sub nsw <4 x i32> %1370, %1374
  %1376 = icmp slt <4 x i32> %1375, zeroinitializer
  %1377 = sub nsw <4 x i32> zeroinitializer, %1375
  %1378 = select <4 x i1> %1376, <4 x i32> %1377, <4 x i32> %1375
  %1379 = add <4 x i32> %1378, %1352
  %1380 = getelementptr inbounds i8, i8* %1193, i64 28
  %1381 = bitcast i8* %1380 to <4 x i8>*
  %1382 = load <4 x i8>, <4 x i8>* %1381, align 1
  %1383 = zext <4 x i8> %1382 to <4 x i32>
  %1384 = getelementptr inbounds i8, i8* %1191, i64 28
  %1385 = bitcast i8* %1384 to <4 x i8>*
  %1386 = load <4 x i8>, <4 x i8>* %1385, align 1
  %1387 = zext <4 x i8> %1386 to <4 x i32>
  %1388 = mul nuw nsw <4 x i32> %1387, %1383
  %1389 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1383
  %1390 = getelementptr inbounds i8, i8* %1192, i64 28
  %1391 = bitcast i8* %1390 to <4 x i8>*
  %1392 = load <4 x i8>, <4 x i8>* %1391, align 1
  %1393 = zext <4 x i8> %1392 to <4 x i32>
  %1394 = mul nsw <4 x i32> %1389, %1393
  %1395 = add nuw nsw <4 x i32> %1388, <i32 32, i32 32, i32 32, i32 32>
  %1396 = add nsw <4 x i32> %1395, %1394
  %1397 = ashr <4 x i32> %1396, <i32 6, i32 6, i32 6, i32 6>
  %1398 = getelementptr inbounds i8, i8* %1188, i64 28
  %1399 = bitcast i8* %1398 to <4 x i8>*
  %1400 = load <4 x i8>, <4 x i8>* %1399, align 1
  %1401 = zext <4 x i8> %1400 to <4 x i32>
  %1402 = sub nsw <4 x i32> %1397, %1401
  %1403 = icmp slt <4 x i32> %1402, zeroinitializer
  %1404 = sub nsw <4 x i32> zeroinitializer, %1402
  %1405 = select <4 x i1> %1403, <4 x i32> %1404, <4 x i32> %1402
  %1406 = add <4 x i32> %1405, %1379
  %1407 = shufflevector <4 x i32> %1406, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1408 = add <4 x i32> %1406, %1407
  %1409 = shufflevector <4 x i32> %1408, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1410 = add <4 x i32> %1408, %1409
  %1411 = extractelement <4 x i32> %1410, i32 0
  %1412 = getelementptr inbounds i8, i8* %1188, i64 %11
  %1413 = getelementptr inbounds i8, i8* %1191, i64 32
  %1414 = getelementptr inbounds i8, i8* %1192, i64 %12
  %1415 = getelementptr inbounds i8, i8* %1193, i64 %13
  %1416 = add nuw nsw i32 %1190, 1
  %1417 = icmp eq i32 %1416, 8
  br i1 %1417, label %1418, label %1187

1418:                                             ; preds = %1187
  %1419 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %1411, i32* %1419, align 4
  %1420 = getelementptr inbounds i8*, i8** %2, i64 2
  %1421 = load i8*, i8** %1420, align 8
  br label %1422

1422:                                             ; preds = %1418, %1422
  %1423 = phi i8* [ %0, %1418 ], [ %1647, %1422 ]
  %1424 = phi i32 [ 0, %1418 ], [ %1646, %1422 ]
  %1425 = phi i32 [ 0, %1418 ], [ %1651, %1422 ]
  %1426 = phi i8* [ %4, %1418 ], [ %1648, %1422 ]
  %1427 = phi i8* [ %1421, %1418 ], [ %1649, %1422 ]
  %1428 = phi i8* [ %5, %1418 ], [ %1650, %1422 ]
  %1429 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1424, i32 0
  %1430 = bitcast i8* %1428 to <4 x i8>*
  %1431 = load <4 x i8>, <4 x i8>* %1430, align 1
  %1432 = zext <4 x i8> %1431 to <4 x i32>
  %1433 = bitcast i8* %1426 to <4 x i8>*
  %1434 = load <4 x i8>, <4 x i8>* %1433, align 1
  %1435 = zext <4 x i8> %1434 to <4 x i32>
  %1436 = mul nuw nsw <4 x i32> %1435, %1432
  %1437 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1432
  %1438 = bitcast i8* %1427 to <4 x i8>*
  %1439 = load <4 x i8>, <4 x i8>* %1438, align 1
  %1440 = zext <4 x i8> %1439 to <4 x i32>
  %1441 = mul nsw <4 x i32> %1437, %1440
  %1442 = add nuw nsw <4 x i32> %1436, <i32 32, i32 32, i32 32, i32 32>
  %1443 = add nsw <4 x i32> %1442, %1441
  %1444 = ashr <4 x i32> %1443, <i32 6, i32 6, i32 6, i32 6>
  %1445 = bitcast i8* %1423 to <4 x i8>*
  %1446 = load <4 x i8>, <4 x i8>* %1445, align 1
  %1447 = zext <4 x i8> %1446 to <4 x i32>
  %1448 = sub nsw <4 x i32> %1444, %1447
  %1449 = icmp slt <4 x i32> %1448, zeroinitializer
  %1450 = sub nsw <4 x i32> zeroinitializer, %1448
  %1451 = select <4 x i1> %1449, <4 x i32> %1450, <4 x i32> %1448
  %1452 = add <4 x i32> %1451, %1429
  %1453 = getelementptr inbounds i8, i8* %1428, i64 4
  %1454 = bitcast i8* %1453 to <4 x i8>*
  %1455 = load <4 x i8>, <4 x i8>* %1454, align 1
  %1456 = zext <4 x i8> %1455 to <4 x i32>
  %1457 = getelementptr inbounds i8, i8* %1426, i64 4
  %1458 = bitcast i8* %1457 to <4 x i8>*
  %1459 = load <4 x i8>, <4 x i8>* %1458, align 1
  %1460 = zext <4 x i8> %1459 to <4 x i32>
  %1461 = mul nuw nsw <4 x i32> %1460, %1456
  %1462 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1456
  %1463 = getelementptr inbounds i8, i8* %1427, i64 4
  %1464 = bitcast i8* %1463 to <4 x i8>*
  %1465 = load <4 x i8>, <4 x i8>* %1464, align 1
  %1466 = zext <4 x i8> %1465 to <4 x i32>
  %1467 = mul nsw <4 x i32> %1462, %1466
  %1468 = add nuw nsw <4 x i32> %1461, <i32 32, i32 32, i32 32, i32 32>
  %1469 = add nsw <4 x i32> %1468, %1467
  %1470 = ashr <4 x i32> %1469, <i32 6, i32 6, i32 6, i32 6>
  %1471 = getelementptr inbounds i8, i8* %1423, i64 4
  %1472 = bitcast i8* %1471 to <4 x i8>*
  %1473 = load <4 x i8>, <4 x i8>* %1472, align 1
  %1474 = zext <4 x i8> %1473 to <4 x i32>
  %1475 = sub nsw <4 x i32> %1470, %1474
  %1476 = icmp slt <4 x i32> %1475, zeroinitializer
  %1477 = sub nsw <4 x i32> zeroinitializer, %1475
  %1478 = select <4 x i1> %1476, <4 x i32> %1477, <4 x i32> %1475
  %1479 = add <4 x i32> %1478, %1452
  %1480 = getelementptr inbounds i8, i8* %1428, i64 8
  %1481 = bitcast i8* %1480 to <4 x i8>*
  %1482 = load <4 x i8>, <4 x i8>* %1481, align 1
  %1483 = zext <4 x i8> %1482 to <4 x i32>
  %1484 = getelementptr inbounds i8, i8* %1426, i64 8
  %1485 = bitcast i8* %1484 to <4 x i8>*
  %1486 = load <4 x i8>, <4 x i8>* %1485, align 1
  %1487 = zext <4 x i8> %1486 to <4 x i32>
  %1488 = mul nuw nsw <4 x i32> %1487, %1483
  %1489 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1483
  %1490 = getelementptr inbounds i8, i8* %1427, i64 8
  %1491 = bitcast i8* %1490 to <4 x i8>*
  %1492 = load <4 x i8>, <4 x i8>* %1491, align 1
  %1493 = zext <4 x i8> %1492 to <4 x i32>
  %1494 = mul nsw <4 x i32> %1489, %1493
  %1495 = add nuw nsw <4 x i32> %1488, <i32 32, i32 32, i32 32, i32 32>
  %1496 = add nsw <4 x i32> %1495, %1494
  %1497 = ashr <4 x i32> %1496, <i32 6, i32 6, i32 6, i32 6>
  %1498 = getelementptr inbounds i8, i8* %1423, i64 8
  %1499 = bitcast i8* %1498 to <4 x i8>*
  %1500 = load <4 x i8>, <4 x i8>* %1499, align 1
  %1501 = zext <4 x i8> %1500 to <4 x i32>
  %1502 = sub nsw <4 x i32> %1497, %1501
  %1503 = icmp slt <4 x i32> %1502, zeroinitializer
  %1504 = sub nsw <4 x i32> zeroinitializer, %1502
  %1505 = select <4 x i1> %1503, <4 x i32> %1504, <4 x i32> %1502
  %1506 = add <4 x i32> %1505, %1479
  %1507 = getelementptr inbounds i8, i8* %1428, i64 12
  %1508 = bitcast i8* %1507 to <4 x i8>*
  %1509 = load <4 x i8>, <4 x i8>* %1508, align 1
  %1510 = zext <4 x i8> %1509 to <4 x i32>
  %1511 = getelementptr inbounds i8, i8* %1426, i64 12
  %1512 = bitcast i8* %1511 to <4 x i8>*
  %1513 = load <4 x i8>, <4 x i8>* %1512, align 1
  %1514 = zext <4 x i8> %1513 to <4 x i32>
  %1515 = mul nuw nsw <4 x i32> %1514, %1510
  %1516 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1510
  %1517 = getelementptr inbounds i8, i8* %1427, i64 12
  %1518 = bitcast i8* %1517 to <4 x i8>*
  %1519 = load <4 x i8>, <4 x i8>* %1518, align 1
  %1520 = zext <4 x i8> %1519 to <4 x i32>
  %1521 = mul nsw <4 x i32> %1516, %1520
  %1522 = add nuw nsw <4 x i32> %1515, <i32 32, i32 32, i32 32, i32 32>
  %1523 = add nsw <4 x i32> %1522, %1521
  %1524 = ashr <4 x i32> %1523, <i32 6, i32 6, i32 6, i32 6>
  %1525 = getelementptr inbounds i8, i8* %1423, i64 12
  %1526 = bitcast i8* %1525 to <4 x i8>*
  %1527 = load <4 x i8>, <4 x i8>* %1526, align 1
  %1528 = zext <4 x i8> %1527 to <4 x i32>
  %1529 = sub nsw <4 x i32> %1524, %1528
  %1530 = icmp slt <4 x i32> %1529, zeroinitializer
  %1531 = sub nsw <4 x i32> zeroinitializer, %1529
  %1532 = select <4 x i1> %1530, <4 x i32> %1531, <4 x i32> %1529
  %1533 = add <4 x i32> %1532, %1506
  %1534 = getelementptr inbounds i8, i8* %1428, i64 16
  %1535 = bitcast i8* %1534 to <4 x i8>*
  %1536 = load <4 x i8>, <4 x i8>* %1535, align 1
  %1537 = zext <4 x i8> %1536 to <4 x i32>
  %1538 = getelementptr inbounds i8, i8* %1426, i64 16
  %1539 = bitcast i8* %1538 to <4 x i8>*
  %1540 = load <4 x i8>, <4 x i8>* %1539, align 1
  %1541 = zext <4 x i8> %1540 to <4 x i32>
  %1542 = mul nuw nsw <4 x i32> %1541, %1537
  %1543 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1537
  %1544 = getelementptr inbounds i8, i8* %1427, i64 16
  %1545 = bitcast i8* %1544 to <4 x i8>*
  %1546 = load <4 x i8>, <4 x i8>* %1545, align 1
  %1547 = zext <4 x i8> %1546 to <4 x i32>
  %1548 = mul nsw <4 x i32> %1543, %1547
  %1549 = add nuw nsw <4 x i32> %1542, <i32 32, i32 32, i32 32, i32 32>
  %1550 = add nsw <4 x i32> %1549, %1548
  %1551 = ashr <4 x i32> %1550, <i32 6, i32 6, i32 6, i32 6>
  %1552 = getelementptr inbounds i8, i8* %1423, i64 16
  %1553 = bitcast i8* %1552 to <4 x i8>*
  %1554 = load <4 x i8>, <4 x i8>* %1553, align 1
  %1555 = zext <4 x i8> %1554 to <4 x i32>
  %1556 = sub nsw <4 x i32> %1551, %1555
  %1557 = icmp slt <4 x i32> %1556, zeroinitializer
  %1558 = sub nsw <4 x i32> zeroinitializer, %1556
  %1559 = select <4 x i1> %1557, <4 x i32> %1558, <4 x i32> %1556
  %1560 = add <4 x i32> %1559, %1533
  %1561 = getelementptr inbounds i8, i8* %1428, i64 20
  %1562 = bitcast i8* %1561 to <4 x i8>*
  %1563 = load <4 x i8>, <4 x i8>* %1562, align 1
  %1564 = zext <4 x i8> %1563 to <4 x i32>
  %1565 = getelementptr inbounds i8, i8* %1426, i64 20
  %1566 = bitcast i8* %1565 to <4 x i8>*
  %1567 = load <4 x i8>, <4 x i8>* %1566, align 1
  %1568 = zext <4 x i8> %1567 to <4 x i32>
  %1569 = mul nuw nsw <4 x i32> %1568, %1564
  %1570 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1564
  %1571 = getelementptr inbounds i8, i8* %1427, i64 20
  %1572 = bitcast i8* %1571 to <4 x i8>*
  %1573 = load <4 x i8>, <4 x i8>* %1572, align 1
  %1574 = zext <4 x i8> %1573 to <4 x i32>
  %1575 = mul nsw <4 x i32> %1570, %1574
  %1576 = add nuw nsw <4 x i32> %1569, <i32 32, i32 32, i32 32, i32 32>
  %1577 = add nsw <4 x i32> %1576, %1575
  %1578 = ashr <4 x i32> %1577, <i32 6, i32 6, i32 6, i32 6>
  %1579 = getelementptr inbounds i8, i8* %1423, i64 20
  %1580 = bitcast i8* %1579 to <4 x i8>*
  %1581 = load <4 x i8>, <4 x i8>* %1580, align 1
  %1582 = zext <4 x i8> %1581 to <4 x i32>
  %1583 = sub nsw <4 x i32> %1578, %1582
  %1584 = icmp slt <4 x i32> %1583, zeroinitializer
  %1585 = sub nsw <4 x i32> zeroinitializer, %1583
  %1586 = select <4 x i1> %1584, <4 x i32> %1585, <4 x i32> %1583
  %1587 = add <4 x i32> %1586, %1560
  %1588 = getelementptr inbounds i8, i8* %1428, i64 24
  %1589 = bitcast i8* %1588 to <4 x i8>*
  %1590 = load <4 x i8>, <4 x i8>* %1589, align 1
  %1591 = zext <4 x i8> %1590 to <4 x i32>
  %1592 = getelementptr inbounds i8, i8* %1426, i64 24
  %1593 = bitcast i8* %1592 to <4 x i8>*
  %1594 = load <4 x i8>, <4 x i8>* %1593, align 1
  %1595 = zext <4 x i8> %1594 to <4 x i32>
  %1596 = mul nuw nsw <4 x i32> %1595, %1591
  %1597 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1591
  %1598 = getelementptr inbounds i8, i8* %1427, i64 24
  %1599 = bitcast i8* %1598 to <4 x i8>*
  %1600 = load <4 x i8>, <4 x i8>* %1599, align 1
  %1601 = zext <4 x i8> %1600 to <4 x i32>
  %1602 = mul nsw <4 x i32> %1597, %1601
  %1603 = add nuw nsw <4 x i32> %1596, <i32 32, i32 32, i32 32, i32 32>
  %1604 = add nsw <4 x i32> %1603, %1602
  %1605 = ashr <4 x i32> %1604, <i32 6, i32 6, i32 6, i32 6>
  %1606 = getelementptr inbounds i8, i8* %1423, i64 24
  %1607 = bitcast i8* %1606 to <4 x i8>*
  %1608 = load <4 x i8>, <4 x i8>* %1607, align 1
  %1609 = zext <4 x i8> %1608 to <4 x i32>
  %1610 = sub nsw <4 x i32> %1605, %1609
  %1611 = icmp slt <4 x i32> %1610, zeroinitializer
  %1612 = sub nsw <4 x i32> zeroinitializer, %1610
  %1613 = select <4 x i1> %1611, <4 x i32> %1612, <4 x i32> %1610
  %1614 = add <4 x i32> %1613, %1587
  %1615 = getelementptr inbounds i8, i8* %1428, i64 28
  %1616 = bitcast i8* %1615 to <4 x i8>*
  %1617 = load <4 x i8>, <4 x i8>* %1616, align 1
  %1618 = zext <4 x i8> %1617 to <4 x i32>
  %1619 = getelementptr inbounds i8, i8* %1426, i64 28
  %1620 = bitcast i8* %1619 to <4 x i8>*
  %1621 = load <4 x i8>, <4 x i8>* %1620, align 1
  %1622 = zext <4 x i8> %1621 to <4 x i32>
  %1623 = mul nuw nsw <4 x i32> %1622, %1618
  %1624 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1618
  %1625 = getelementptr inbounds i8, i8* %1427, i64 28
  %1626 = bitcast i8* %1625 to <4 x i8>*
  %1627 = load <4 x i8>, <4 x i8>* %1626, align 1
  %1628 = zext <4 x i8> %1627 to <4 x i32>
  %1629 = mul nsw <4 x i32> %1624, %1628
  %1630 = add nuw nsw <4 x i32> %1623, <i32 32, i32 32, i32 32, i32 32>
  %1631 = add nsw <4 x i32> %1630, %1629
  %1632 = ashr <4 x i32> %1631, <i32 6, i32 6, i32 6, i32 6>
  %1633 = getelementptr inbounds i8, i8* %1423, i64 28
  %1634 = bitcast i8* %1633 to <4 x i8>*
  %1635 = load <4 x i8>, <4 x i8>* %1634, align 1
  %1636 = zext <4 x i8> %1635 to <4 x i32>
  %1637 = sub nsw <4 x i32> %1632, %1636
  %1638 = icmp slt <4 x i32> %1637, zeroinitializer
  %1639 = sub nsw <4 x i32> zeroinitializer, %1637
  %1640 = select <4 x i1> %1638, <4 x i32> %1639, <4 x i32> %1637
  %1641 = add <4 x i32> %1640, %1614
  %1642 = shufflevector <4 x i32> %1641, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1643 = add <4 x i32> %1641, %1642
  %1644 = shufflevector <4 x i32> %1643, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1645 = add <4 x i32> %1643, %1644
  %1646 = extractelement <4 x i32> %1645, i32 0
  %1647 = getelementptr inbounds i8, i8* %1423, i64 %11
  %1648 = getelementptr inbounds i8, i8* %1426, i64 32
  %1649 = getelementptr inbounds i8, i8* %1427, i64 %12
  %1650 = getelementptr inbounds i8, i8* %1428, i64 %13
  %1651 = add nuw nsw i32 %1425, 1
  %1652 = icmp eq i32 %1651, 8
  br i1 %1652, label %1653, label %1422

1653:                                             ; preds = %1422
  %1654 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %1646, i32* %1654, align 4
  %1655 = getelementptr inbounds i8*, i8** %2, i64 3
  %1656 = load i8*, i8** %1655, align 8
  br label %1657

1657:                                             ; preds = %1653, %1657
  %1658 = phi i8* [ %0, %1653 ], [ %1882, %1657 ]
  %1659 = phi i32 [ 0, %1653 ], [ %1881, %1657 ]
  %1660 = phi i32 [ 0, %1653 ], [ %1886, %1657 ]
  %1661 = phi i8* [ %4, %1653 ], [ %1883, %1657 ]
  %1662 = phi i8* [ %1656, %1653 ], [ %1884, %1657 ]
  %1663 = phi i8* [ %5, %1653 ], [ %1885, %1657 ]
  %1664 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1659, i32 0
  %1665 = bitcast i8* %1663 to <4 x i8>*
  %1666 = load <4 x i8>, <4 x i8>* %1665, align 1
  %1667 = zext <4 x i8> %1666 to <4 x i32>
  %1668 = bitcast i8* %1661 to <4 x i8>*
  %1669 = load <4 x i8>, <4 x i8>* %1668, align 1
  %1670 = zext <4 x i8> %1669 to <4 x i32>
  %1671 = mul nuw nsw <4 x i32> %1670, %1667
  %1672 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1667
  %1673 = bitcast i8* %1662 to <4 x i8>*
  %1674 = load <4 x i8>, <4 x i8>* %1673, align 1
  %1675 = zext <4 x i8> %1674 to <4 x i32>
  %1676 = mul nsw <4 x i32> %1672, %1675
  %1677 = add nuw nsw <4 x i32> %1671, <i32 32, i32 32, i32 32, i32 32>
  %1678 = add nsw <4 x i32> %1677, %1676
  %1679 = ashr <4 x i32> %1678, <i32 6, i32 6, i32 6, i32 6>
  %1680 = bitcast i8* %1658 to <4 x i8>*
  %1681 = load <4 x i8>, <4 x i8>* %1680, align 1
  %1682 = zext <4 x i8> %1681 to <4 x i32>
  %1683 = sub nsw <4 x i32> %1679, %1682
  %1684 = icmp slt <4 x i32> %1683, zeroinitializer
  %1685 = sub nsw <4 x i32> zeroinitializer, %1683
  %1686 = select <4 x i1> %1684, <4 x i32> %1685, <4 x i32> %1683
  %1687 = add <4 x i32> %1686, %1664
  %1688 = getelementptr inbounds i8, i8* %1663, i64 4
  %1689 = bitcast i8* %1688 to <4 x i8>*
  %1690 = load <4 x i8>, <4 x i8>* %1689, align 1
  %1691 = zext <4 x i8> %1690 to <4 x i32>
  %1692 = getelementptr inbounds i8, i8* %1661, i64 4
  %1693 = bitcast i8* %1692 to <4 x i8>*
  %1694 = load <4 x i8>, <4 x i8>* %1693, align 1
  %1695 = zext <4 x i8> %1694 to <4 x i32>
  %1696 = mul nuw nsw <4 x i32> %1695, %1691
  %1697 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1691
  %1698 = getelementptr inbounds i8, i8* %1662, i64 4
  %1699 = bitcast i8* %1698 to <4 x i8>*
  %1700 = load <4 x i8>, <4 x i8>* %1699, align 1
  %1701 = zext <4 x i8> %1700 to <4 x i32>
  %1702 = mul nsw <4 x i32> %1697, %1701
  %1703 = add nuw nsw <4 x i32> %1696, <i32 32, i32 32, i32 32, i32 32>
  %1704 = add nsw <4 x i32> %1703, %1702
  %1705 = ashr <4 x i32> %1704, <i32 6, i32 6, i32 6, i32 6>
  %1706 = getelementptr inbounds i8, i8* %1658, i64 4
  %1707 = bitcast i8* %1706 to <4 x i8>*
  %1708 = load <4 x i8>, <4 x i8>* %1707, align 1
  %1709 = zext <4 x i8> %1708 to <4 x i32>
  %1710 = sub nsw <4 x i32> %1705, %1709
  %1711 = icmp slt <4 x i32> %1710, zeroinitializer
  %1712 = sub nsw <4 x i32> zeroinitializer, %1710
  %1713 = select <4 x i1> %1711, <4 x i32> %1712, <4 x i32> %1710
  %1714 = add <4 x i32> %1713, %1687
  %1715 = getelementptr inbounds i8, i8* %1663, i64 8
  %1716 = bitcast i8* %1715 to <4 x i8>*
  %1717 = load <4 x i8>, <4 x i8>* %1716, align 1
  %1718 = zext <4 x i8> %1717 to <4 x i32>
  %1719 = getelementptr inbounds i8, i8* %1661, i64 8
  %1720 = bitcast i8* %1719 to <4 x i8>*
  %1721 = load <4 x i8>, <4 x i8>* %1720, align 1
  %1722 = zext <4 x i8> %1721 to <4 x i32>
  %1723 = mul nuw nsw <4 x i32> %1722, %1718
  %1724 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1718
  %1725 = getelementptr inbounds i8, i8* %1662, i64 8
  %1726 = bitcast i8* %1725 to <4 x i8>*
  %1727 = load <4 x i8>, <4 x i8>* %1726, align 1
  %1728 = zext <4 x i8> %1727 to <4 x i32>
  %1729 = mul nsw <4 x i32> %1724, %1728
  %1730 = add nuw nsw <4 x i32> %1723, <i32 32, i32 32, i32 32, i32 32>
  %1731 = add nsw <4 x i32> %1730, %1729
  %1732 = ashr <4 x i32> %1731, <i32 6, i32 6, i32 6, i32 6>
  %1733 = getelementptr inbounds i8, i8* %1658, i64 8
  %1734 = bitcast i8* %1733 to <4 x i8>*
  %1735 = load <4 x i8>, <4 x i8>* %1734, align 1
  %1736 = zext <4 x i8> %1735 to <4 x i32>
  %1737 = sub nsw <4 x i32> %1732, %1736
  %1738 = icmp slt <4 x i32> %1737, zeroinitializer
  %1739 = sub nsw <4 x i32> zeroinitializer, %1737
  %1740 = select <4 x i1> %1738, <4 x i32> %1739, <4 x i32> %1737
  %1741 = add <4 x i32> %1740, %1714
  %1742 = getelementptr inbounds i8, i8* %1663, i64 12
  %1743 = bitcast i8* %1742 to <4 x i8>*
  %1744 = load <4 x i8>, <4 x i8>* %1743, align 1
  %1745 = zext <4 x i8> %1744 to <4 x i32>
  %1746 = getelementptr inbounds i8, i8* %1661, i64 12
  %1747 = bitcast i8* %1746 to <4 x i8>*
  %1748 = load <4 x i8>, <4 x i8>* %1747, align 1
  %1749 = zext <4 x i8> %1748 to <4 x i32>
  %1750 = mul nuw nsw <4 x i32> %1749, %1745
  %1751 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1745
  %1752 = getelementptr inbounds i8, i8* %1662, i64 12
  %1753 = bitcast i8* %1752 to <4 x i8>*
  %1754 = load <4 x i8>, <4 x i8>* %1753, align 1
  %1755 = zext <4 x i8> %1754 to <4 x i32>
  %1756 = mul nsw <4 x i32> %1751, %1755
  %1757 = add nuw nsw <4 x i32> %1750, <i32 32, i32 32, i32 32, i32 32>
  %1758 = add nsw <4 x i32> %1757, %1756
  %1759 = ashr <4 x i32> %1758, <i32 6, i32 6, i32 6, i32 6>
  %1760 = getelementptr inbounds i8, i8* %1658, i64 12
  %1761 = bitcast i8* %1760 to <4 x i8>*
  %1762 = load <4 x i8>, <4 x i8>* %1761, align 1
  %1763 = zext <4 x i8> %1762 to <4 x i32>
  %1764 = sub nsw <4 x i32> %1759, %1763
  %1765 = icmp slt <4 x i32> %1764, zeroinitializer
  %1766 = sub nsw <4 x i32> zeroinitializer, %1764
  %1767 = select <4 x i1> %1765, <4 x i32> %1766, <4 x i32> %1764
  %1768 = add <4 x i32> %1767, %1741
  %1769 = getelementptr inbounds i8, i8* %1663, i64 16
  %1770 = bitcast i8* %1769 to <4 x i8>*
  %1771 = load <4 x i8>, <4 x i8>* %1770, align 1
  %1772 = zext <4 x i8> %1771 to <4 x i32>
  %1773 = getelementptr inbounds i8, i8* %1661, i64 16
  %1774 = bitcast i8* %1773 to <4 x i8>*
  %1775 = load <4 x i8>, <4 x i8>* %1774, align 1
  %1776 = zext <4 x i8> %1775 to <4 x i32>
  %1777 = mul nuw nsw <4 x i32> %1776, %1772
  %1778 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1772
  %1779 = getelementptr inbounds i8, i8* %1662, i64 16
  %1780 = bitcast i8* %1779 to <4 x i8>*
  %1781 = load <4 x i8>, <4 x i8>* %1780, align 1
  %1782 = zext <4 x i8> %1781 to <4 x i32>
  %1783 = mul nsw <4 x i32> %1778, %1782
  %1784 = add nuw nsw <4 x i32> %1777, <i32 32, i32 32, i32 32, i32 32>
  %1785 = add nsw <4 x i32> %1784, %1783
  %1786 = ashr <4 x i32> %1785, <i32 6, i32 6, i32 6, i32 6>
  %1787 = getelementptr inbounds i8, i8* %1658, i64 16
  %1788 = bitcast i8* %1787 to <4 x i8>*
  %1789 = load <4 x i8>, <4 x i8>* %1788, align 1
  %1790 = zext <4 x i8> %1789 to <4 x i32>
  %1791 = sub nsw <4 x i32> %1786, %1790
  %1792 = icmp slt <4 x i32> %1791, zeroinitializer
  %1793 = sub nsw <4 x i32> zeroinitializer, %1791
  %1794 = select <4 x i1> %1792, <4 x i32> %1793, <4 x i32> %1791
  %1795 = add <4 x i32> %1794, %1768
  %1796 = getelementptr inbounds i8, i8* %1663, i64 20
  %1797 = bitcast i8* %1796 to <4 x i8>*
  %1798 = load <4 x i8>, <4 x i8>* %1797, align 1
  %1799 = zext <4 x i8> %1798 to <4 x i32>
  %1800 = getelementptr inbounds i8, i8* %1661, i64 20
  %1801 = bitcast i8* %1800 to <4 x i8>*
  %1802 = load <4 x i8>, <4 x i8>* %1801, align 1
  %1803 = zext <4 x i8> %1802 to <4 x i32>
  %1804 = mul nuw nsw <4 x i32> %1803, %1799
  %1805 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1799
  %1806 = getelementptr inbounds i8, i8* %1662, i64 20
  %1807 = bitcast i8* %1806 to <4 x i8>*
  %1808 = load <4 x i8>, <4 x i8>* %1807, align 1
  %1809 = zext <4 x i8> %1808 to <4 x i32>
  %1810 = mul nsw <4 x i32> %1805, %1809
  %1811 = add nuw nsw <4 x i32> %1804, <i32 32, i32 32, i32 32, i32 32>
  %1812 = add nsw <4 x i32> %1811, %1810
  %1813 = ashr <4 x i32> %1812, <i32 6, i32 6, i32 6, i32 6>
  %1814 = getelementptr inbounds i8, i8* %1658, i64 20
  %1815 = bitcast i8* %1814 to <4 x i8>*
  %1816 = load <4 x i8>, <4 x i8>* %1815, align 1
  %1817 = zext <4 x i8> %1816 to <4 x i32>
  %1818 = sub nsw <4 x i32> %1813, %1817
  %1819 = icmp slt <4 x i32> %1818, zeroinitializer
  %1820 = sub nsw <4 x i32> zeroinitializer, %1818
  %1821 = select <4 x i1> %1819, <4 x i32> %1820, <4 x i32> %1818
  %1822 = add <4 x i32> %1821, %1795
  %1823 = getelementptr inbounds i8, i8* %1663, i64 24
  %1824 = bitcast i8* %1823 to <4 x i8>*
  %1825 = load <4 x i8>, <4 x i8>* %1824, align 1
  %1826 = zext <4 x i8> %1825 to <4 x i32>
  %1827 = getelementptr inbounds i8, i8* %1661, i64 24
  %1828 = bitcast i8* %1827 to <4 x i8>*
  %1829 = load <4 x i8>, <4 x i8>* %1828, align 1
  %1830 = zext <4 x i8> %1829 to <4 x i32>
  %1831 = mul nuw nsw <4 x i32> %1830, %1826
  %1832 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1826
  %1833 = getelementptr inbounds i8, i8* %1662, i64 24
  %1834 = bitcast i8* %1833 to <4 x i8>*
  %1835 = load <4 x i8>, <4 x i8>* %1834, align 1
  %1836 = zext <4 x i8> %1835 to <4 x i32>
  %1837 = mul nsw <4 x i32> %1832, %1836
  %1838 = add nuw nsw <4 x i32> %1831, <i32 32, i32 32, i32 32, i32 32>
  %1839 = add nsw <4 x i32> %1838, %1837
  %1840 = ashr <4 x i32> %1839, <i32 6, i32 6, i32 6, i32 6>
  %1841 = getelementptr inbounds i8, i8* %1658, i64 24
  %1842 = bitcast i8* %1841 to <4 x i8>*
  %1843 = load <4 x i8>, <4 x i8>* %1842, align 1
  %1844 = zext <4 x i8> %1843 to <4 x i32>
  %1845 = sub nsw <4 x i32> %1840, %1844
  %1846 = icmp slt <4 x i32> %1845, zeroinitializer
  %1847 = sub nsw <4 x i32> zeroinitializer, %1845
  %1848 = select <4 x i1> %1846, <4 x i32> %1847, <4 x i32> %1845
  %1849 = add <4 x i32> %1848, %1822
  %1850 = getelementptr inbounds i8, i8* %1663, i64 28
  %1851 = bitcast i8* %1850 to <4 x i8>*
  %1852 = load <4 x i8>, <4 x i8>* %1851, align 1
  %1853 = zext <4 x i8> %1852 to <4 x i32>
  %1854 = getelementptr inbounds i8, i8* %1661, i64 28
  %1855 = bitcast i8* %1854 to <4 x i8>*
  %1856 = load <4 x i8>, <4 x i8>* %1855, align 1
  %1857 = zext <4 x i8> %1856 to <4 x i32>
  %1858 = mul nuw nsw <4 x i32> %1857, %1853
  %1859 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %1853
  %1860 = getelementptr inbounds i8, i8* %1662, i64 28
  %1861 = bitcast i8* %1860 to <4 x i8>*
  %1862 = load <4 x i8>, <4 x i8>* %1861, align 1
  %1863 = zext <4 x i8> %1862 to <4 x i32>
  %1864 = mul nsw <4 x i32> %1859, %1863
  %1865 = add nuw nsw <4 x i32> %1858, <i32 32, i32 32, i32 32, i32 32>
  %1866 = add nsw <4 x i32> %1865, %1864
  %1867 = ashr <4 x i32> %1866, <i32 6, i32 6, i32 6, i32 6>
  %1868 = getelementptr inbounds i8, i8* %1658, i64 28
  %1869 = bitcast i8* %1868 to <4 x i8>*
  %1870 = load <4 x i8>, <4 x i8>* %1869, align 1
  %1871 = zext <4 x i8> %1870 to <4 x i32>
  %1872 = sub nsw <4 x i32> %1867, %1871
  %1873 = icmp slt <4 x i32> %1872, zeroinitializer
  %1874 = sub nsw <4 x i32> zeroinitializer, %1872
  %1875 = select <4 x i1> %1873, <4 x i32> %1874, <4 x i32> %1872
  %1876 = add <4 x i32> %1875, %1849
  %1877 = shufflevector <4 x i32> %1876, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1878 = add <4 x i32> %1876, %1877
  %1879 = shufflevector <4 x i32> %1878, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1880 = add <4 x i32> %1878, %1879
  %1881 = extractelement <4 x i32> %1880, i32 0
  %1882 = getelementptr inbounds i8, i8* %1658, i64 %11
  %1883 = getelementptr inbounds i8, i8* %1661, i64 32
  %1884 = getelementptr inbounds i8, i8* %1662, i64 %12
  %1885 = getelementptr inbounds i8, i8* %1663, i64 %13
  %1886 = add nuw nsw i32 %1660, 1
  %1887 = icmp eq i32 %1886, 8
  br i1 %1887, label %483, label %1657
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad16x64_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %136

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %130, %13 ], [ %0, %8 ]
  %15 = phi i32 [ %129, %13 ], [ 0, %8 ]
  %16 = phi i32 [ %134, %13 ], [ 0, %8 ]
  %17 = phi i8* [ %131, %13 ], [ %2, %8 ]
  %18 = phi i8* [ %132, %13 ], [ %4, %8 ]
  %19 = phi i8* [ %133, %13 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %21 = bitcast i8* %19 to <4 x i8>*
  %22 = load <4 x i8>, <4 x i8>* %21, align 1
  %23 = zext <4 x i8> %22 to <4 x i32>
  %24 = bitcast i8* %17 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1
  %26 = zext <4 x i8> %25 to <4 x i32>
  %27 = mul nuw nsw <4 x i32> %26, %23
  %28 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %23
  %29 = bitcast i8* %18 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nsw <4 x i32> %28, %31
  %33 = add nuw nsw <4 x i32> %27, <i32 32, i32 32, i32 32, i32 32>
  %34 = add nsw <4 x i32> %33, %32
  %35 = ashr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %36 = bitcast i8* %14 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = zext <4 x i8> %37 to <4 x i32>
  %39 = sub nsw <4 x i32> %35, %38
  %40 = icmp slt <4 x i32> %39, zeroinitializer
  %41 = sub nsw <4 x i32> zeroinitializer, %39
  %42 = select <4 x i1> %40, <4 x i32> %41, <4 x i32> %39
  %43 = add <4 x i32> %42, %20
  %44 = getelementptr inbounds i8, i8* %19, i64 4
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = getelementptr inbounds i8, i8* %17, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %50 to <4 x i32>
  %52 = mul nuw nsw <4 x i32> %51, %47
  %53 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %47
  %54 = getelementptr inbounds i8, i8* %18, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = mul nsw <4 x i32> %53, %57
  %59 = add nuw nsw <4 x i32> %52, <i32 32, i32 32, i32 32, i32 32>
  %60 = add nsw <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 6, i32 6, i32 6, i32 6>
  %62 = getelementptr inbounds i8, i8* %14, i64 4
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = sub nsw <4 x i32> %61, %65
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add <4 x i32> %69, %43
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = zext <4 x i8> %73 to <4 x i32>
  %75 = getelementptr inbounds i8, i8* %17, i64 8
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = mul nuw nsw <4 x i32> %78, %74
  %80 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %74
  %81 = getelementptr inbounds i8, i8* %18, i64 8
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = mul nsw <4 x i32> %80, %84
  %86 = add nuw nsw <4 x i32> %79, <i32 32, i32 32, i32 32, i32 32>
  %87 = add nsw <4 x i32> %86, %85
  %88 = ashr <4 x i32> %87, <i32 6, i32 6, i32 6, i32 6>
  %89 = getelementptr inbounds i8, i8* %14, i64 8
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = sub nsw <4 x i32> %88, %92
  %94 = icmp slt <4 x i32> %93, zeroinitializer
  %95 = sub nsw <4 x i32> zeroinitializer, %93
  %96 = select <4 x i1> %94, <4 x i32> %95, <4 x i32> %93
  %97 = add <4 x i32> %96, %70
  %98 = getelementptr inbounds i8, i8* %19, i64 12
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = getelementptr inbounds i8, i8* %17, i64 12
  %103 = bitcast i8* %102 to <4 x i8>*
  %104 = load <4 x i8>, <4 x i8>* %103, align 1
  %105 = zext <4 x i8> %104 to <4 x i32>
  %106 = mul nuw nsw <4 x i32> %105, %101
  %107 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %101
  %108 = getelementptr inbounds i8, i8* %18, i64 12
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = mul nsw <4 x i32> %107, %111
  %113 = add nuw nsw <4 x i32> %106, <i32 32, i32 32, i32 32, i32 32>
  %114 = add nsw <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 6, i32 6, i32 6, i32 6>
  %116 = getelementptr inbounds i8, i8* %14, i64 12
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = zext <4 x i8> %118 to <4 x i32>
  %120 = sub nsw <4 x i32> %115, %119
  %121 = icmp slt <4 x i32> %120, zeroinitializer
  %122 = sub nsw <4 x i32> zeroinitializer, %120
  %123 = select <4 x i1> %121, <4 x i32> %122, <4 x i32> %120
  %124 = add <4 x i32> %123, %97
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %126 = add <4 x i32> %124, %125
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %128 = add <4 x i32> %126, %127
  %129 = extractelement <4 x i32> %128, i32 0
  %130 = getelementptr inbounds i8, i8* %14, i64 %10
  %131 = getelementptr inbounds i8, i8* %17, i64 %11
  %132 = getelementptr inbounds i8, i8* %18, i64 16
  %133 = getelementptr inbounds i8, i8* %19, i64 %12
  %134 = add nuw nsw i32 %16, 1
  %135 = icmp eq i32 %134, 64
  br i1 %135, label %259, label %13

136:                                              ; preds = %8, %136
  %137 = phi i8* [ %253, %136 ], [ %0, %8 ]
  %138 = phi i32 [ %252, %136 ], [ 0, %8 ]
  %139 = phi i32 [ %257, %136 ], [ 0, %8 ]
  %140 = phi i8* [ %254, %136 ], [ %4, %8 ]
  %141 = phi i8* [ %255, %136 ], [ %2, %8 ]
  %142 = phi i8* [ %256, %136 ], [ %5, %8 ]
  %143 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %138, i32 0
  %144 = bitcast i8* %142 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = bitcast i8* %140 to <4 x i8>*
  %148 = load <4 x i8>, <4 x i8>* %147, align 1
  %149 = zext <4 x i8> %148 to <4 x i32>
  %150 = mul nuw nsw <4 x i32> %149, %146
  %151 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %146
  %152 = bitcast i8* %141 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1
  %154 = zext <4 x i8> %153 to <4 x i32>
  %155 = mul nsw <4 x i32> %151, %154
  %156 = add nuw nsw <4 x i32> %150, <i32 32, i32 32, i32 32, i32 32>
  %157 = add nsw <4 x i32> %156, %155
  %158 = ashr <4 x i32> %157, <i32 6, i32 6, i32 6, i32 6>
  %159 = bitcast i8* %137 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = sub nsw <4 x i32> %158, %161
  %163 = icmp slt <4 x i32> %162, zeroinitializer
  %164 = sub nsw <4 x i32> zeroinitializer, %162
  %165 = select <4 x i1> %163, <4 x i32> %164, <4 x i32> %162
  %166 = add <4 x i32> %165, %143
  %167 = getelementptr inbounds i8, i8* %142, i64 4
  %168 = bitcast i8* %167 to <4 x i8>*
  %169 = load <4 x i8>, <4 x i8>* %168, align 1
  %170 = zext <4 x i8> %169 to <4 x i32>
  %171 = getelementptr inbounds i8, i8* %140, i64 4
  %172 = bitcast i8* %171 to <4 x i8>*
  %173 = load <4 x i8>, <4 x i8>* %172, align 1
  %174 = zext <4 x i8> %173 to <4 x i32>
  %175 = mul nuw nsw <4 x i32> %174, %170
  %176 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %170
  %177 = getelementptr inbounds i8, i8* %141, i64 4
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %180 = zext <4 x i8> %179 to <4 x i32>
  %181 = mul nsw <4 x i32> %176, %180
  %182 = add nuw nsw <4 x i32> %175, <i32 32, i32 32, i32 32, i32 32>
  %183 = add nsw <4 x i32> %182, %181
  %184 = ashr <4 x i32> %183, <i32 6, i32 6, i32 6, i32 6>
  %185 = getelementptr inbounds i8, i8* %137, i64 4
  %186 = bitcast i8* %185 to <4 x i8>*
  %187 = load <4 x i8>, <4 x i8>* %186, align 1
  %188 = zext <4 x i8> %187 to <4 x i32>
  %189 = sub nsw <4 x i32> %184, %188
  %190 = icmp slt <4 x i32> %189, zeroinitializer
  %191 = sub nsw <4 x i32> zeroinitializer, %189
  %192 = select <4 x i1> %190, <4 x i32> %191, <4 x i32> %189
  %193 = add <4 x i32> %192, %166
  %194 = getelementptr inbounds i8, i8* %142, i64 8
  %195 = bitcast i8* %194 to <4 x i8>*
  %196 = load <4 x i8>, <4 x i8>* %195, align 1
  %197 = zext <4 x i8> %196 to <4 x i32>
  %198 = getelementptr inbounds i8, i8* %140, i64 8
  %199 = bitcast i8* %198 to <4 x i8>*
  %200 = load <4 x i8>, <4 x i8>* %199, align 1
  %201 = zext <4 x i8> %200 to <4 x i32>
  %202 = mul nuw nsw <4 x i32> %201, %197
  %203 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %197
  %204 = getelementptr inbounds i8, i8* %141, i64 8
  %205 = bitcast i8* %204 to <4 x i8>*
  %206 = load <4 x i8>, <4 x i8>* %205, align 1
  %207 = zext <4 x i8> %206 to <4 x i32>
  %208 = mul nsw <4 x i32> %203, %207
  %209 = add nuw nsw <4 x i32> %202, <i32 32, i32 32, i32 32, i32 32>
  %210 = add nsw <4 x i32> %209, %208
  %211 = ashr <4 x i32> %210, <i32 6, i32 6, i32 6, i32 6>
  %212 = getelementptr inbounds i8, i8* %137, i64 8
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = zext <4 x i8> %214 to <4 x i32>
  %216 = sub nsw <4 x i32> %211, %215
  %217 = icmp slt <4 x i32> %216, zeroinitializer
  %218 = sub nsw <4 x i32> zeroinitializer, %216
  %219 = select <4 x i1> %217, <4 x i32> %218, <4 x i32> %216
  %220 = add <4 x i32> %219, %193
  %221 = getelementptr inbounds i8, i8* %142, i64 12
  %222 = bitcast i8* %221 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1
  %224 = zext <4 x i8> %223 to <4 x i32>
  %225 = getelementptr inbounds i8, i8* %140, i64 12
  %226 = bitcast i8* %225 to <4 x i8>*
  %227 = load <4 x i8>, <4 x i8>* %226, align 1
  %228 = zext <4 x i8> %227 to <4 x i32>
  %229 = mul nuw nsw <4 x i32> %228, %224
  %230 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %224
  %231 = getelementptr inbounds i8, i8* %141, i64 12
  %232 = bitcast i8* %231 to <4 x i8>*
  %233 = load <4 x i8>, <4 x i8>* %232, align 1
  %234 = zext <4 x i8> %233 to <4 x i32>
  %235 = mul nsw <4 x i32> %230, %234
  %236 = add nuw nsw <4 x i32> %229, <i32 32, i32 32, i32 32, i32 32>
  %237 = add nsw <4 x i32> %236, %235
  %238 = ashr <4 x i32> %237, <i32 6, i32 6, i32 6, i32 6>
  %239 = getelementptr inbounds i8, i8* %137, i64 12
  %240 = bitcast i8* %239 to <4 x i8>*
  %241 = load <4 x i8>, <4 x i8>* %240, align 1
  %242 = zext <4 x i8> %241 to <4 x i32>
  %243 = sub nsw <4 x i32> %238, %242
  %244 = icmp slt <4 x i32> %243, zeroinitializer
  %245 = sub nsw <4 x i32> zeroinitializer, %243
  %246 = select <4 x i1> %244, <4 x i32> %245, <4 x i32> %243
  %247 = add <4 x i32> %246, %220
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %249 = add <4 x i32> %247, %248
  %250 = shufflevector <4 x i32> %249, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %251 = add <4 x i32> %249, %250
  %252 = extractelement <4 x i32> %251, i32 0
  %253 = getelementptr inbounds i8, i8* %137, i64 %10
  %254 = getelementptr inbounds i8, i8* %140, i64 16
  %255 = getelementptr inbounds i8, i8* %141, i64 %11
  %256 = getelementptr inbounds i8, i8* %142, i64 %12
  %257 = add nuw nsw i32 %139, 1
  %258 = icmp eq i32 %257, 64
  br i1 %258, label %259, label %136

259:                                              ; preds = %136, %13
  %260 = phi i32 [ %129, %13 ], [ %252, %136 ]
  ret i32 %260
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad16x64x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %141

15:                                               ; preds = %9, %15
  %16 = phi i8* [ %132, %15 ], [ %0, %9 ]
  %17 = phi i32 [ %131, %15 ], [ 0, %9 ]
  %18 = phi i32 [ %136, %15 ], [ 0, %9 ]
  %19 = phi i8* [ %133, %15 ], [ %14, %9 ]
  %20 = phi i8* [ %134, %15 ], [ %4, %9 ]
  %21 = phi i8* [ %135, %15 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %23 = bitcast i8* %21 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = zext <4 x i8> %24 to <4 x i32>
  %26 = bitcast i8* %19 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = zext <4 x i8> %27 to <4 x i32>
  %29 = mul nuw nsw <4 x i32> %28, %25
  %30 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %25
  %31 = bitcast i8* %20 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nsw <4 x i32> %30, %33
  %35 = add nuw nsw <4 x i32> %29, <i32 32, i32 32, i32 32, i32 32>
  %36 = add nsw <4 x i32> %35, %34
  %37 = ashr <4 x i32> %36, <i32 6, i32 6, i32 6, i32 6>
  %38 = bitcast i8* %16 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = zext <4 x i8> %39 to <4 x i32>
  %41 = sub nsw <4 x i32> %37, %40
  %42 = icmp slt <4 x i32> %41, zeroinitializer
  %43 = sub nsw <4 x i32> zeroinitializer, %41
  %44 = select <4 x i1> %42, <4 x i32> %43, <4 x i32> %41
  %45 = add <4 x i32> %44, %22
  %46 = getelementptr inbounds i8, i8* %21, i64 4
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = zext <4 x i8> %48 to <4 x i32>
  %50 = getelementptr inbounds i8, i8* %19, i64 4
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = zext <4 x i8> %52 to <4 x i32>
  %54 = mul nuw nsw <4 x i32> %53, %49
  %55 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %49
  %56 = getelementptr inbounds i8, i8* %20, i64 4
  %57 = bitcast i8* %56 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1
  %59 = zext <4 x i8> %58 to <4 x i32>
  %60 = mul nsw <4 x i32> %55, %59
  %61 = add nuw nsw <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %62 = add nsw <4 x i32> %61, %60
  %63 = ashr <4 x i32> %62, <i32 6, i32 6, i32 6, i32 6>
  %64 = getelementptr inbounds i8, i8* %16, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = sub nsw <4 x i32> %63, %67
  %69 = icmp slt <4 x i32> %68, zeroinitializer
  %70 = sub nsw <4 x i32> zeroinitializer, %68
  %71 = select <4 x i1> %69, <4 x i32> %70, <4 x i32> %68
  %72 = add <4 x i32> %71, %45
  %73 = getelementptr inbounds i8, i8* %21, i64 8
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = getelementptr inbounds i8, i8* %19, i64 8
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = mul nuw nsw <4 x i32> %80, %76
  %82 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %76
  %83 = getelementptr inbounds i8, i8* %20, i64 8
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = mul nsw <4 x i32> %82, %86
  %88 = add nuw nsw <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %89 = add nsw <4 x i32> %88, %87
  %90 = ashr <4 x i32> %89, <i32 6, i32 6, i32 6, i32 6>
  %91 = getelementptr inbounds i8, i8* %16, i64 8
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = sub nsw <4 x i32> %90, %94
  %96 = icmp slt <4 x i32> %95, zeroinitializer
  %97 = sub nsw <4 x i32> zeroinitializer, %95
  %98 = select <4 x i1> %96, <4 x i32> %97, <4 x i32> %95
  %99 = add <4 x i32> %98, %72
  %100 = getelementptr inbounds i8, i8* %21, i64 12
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = zext <4 x i8> %102 to <4 x i32>
  %104 = getelementptr inbounds i8, i8* %19, i64 12
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = zext <4 x i8> %106 to <4 x i32>
  %108 = mul nuw nsw <4 x i32> %107, %103
  %109 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %103
  %110 = getelementptr inbounds i8, i8* %20, i64 12
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = zext <4 x i8> %112 to <4 x i32>
  %114 = mul nsw <4 x i32> %109, %113
  %115 = add nuw nsw <4 x i32> %108, <i32 32, i32 32, i32 32, i32 32>
  %116 = add nsw <4 x i32> %115, %114
  %117 = ashr <4 x i32> %116, <i32 6, i32 6, i32 6, i32 6>
  %118 = getelementptr inbounds i8, i8* %16, i64 12
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = sub nsw <4 x i32> %117, %121
  %123 = icmp slt <4 x i32> %122, zeroinitializer
  %124 = sub nsw <4 x i32> zeroinitializer, %122
  %125 = select <4 x i1> %123, <4 x i32> %124, <4 x i32> %122
  %126 = add <4 x i32> %125, %99
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %128 = add <4 x i32> %126, %127
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %130 = add <4 x i32> %128, %129
  %131 = extractelement <4 x i32> %130, i32 0
  %132 = getelementptr inbounds i8, i8* %16, i64 %11
  %133 = getelementptr inbounds i8, i8* %19, i64 %12
  %134 = getelementptr inbounds i8, i8* %20, i64 16
  %135 = getelementptr inbounds i8, i8* %21, i64 %13
  %136 = add nuw nsw i32 %18, 1
  %137 = icmp eq i32 %136, 64
  br i1 %137, label %138, label %15

138:                                              ; preds = %15
  store i32 %131, i32* %8, align 4
  %139 = getelementptr inbounds i8*, i8** %2, i64 1
  %140 = load i8*, i8** %139, align 8
  br label %270

141:                                              ; preds = %9, %141
  %142 = phi i8* [ %258, %141 ], [ %0, %9 ]
  %143 = phi i32 [ %257, %141 ], [ 0, %9 ]
  %144 = phi i32 [ %262, %141 ], [ 0, %9 ]
  %145 = phi i8* [ %259, %141 ], [ %4, %9 ]
  %146 = phi i8* [ %260, %141 ], [ %14, %9 ]
  %147 = phi i8* [ %261, %141 ], [ %5, %9 ]
  %148 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %143, i32 0
  %149 = bitcast i8* %147 to <4 x i8>*
  %150 = load <4 x i8>, <4 x i8>* %149, align 1
  %151 = zext <4 x i8> %150 to <4 x i32>
  %152 = bitcast i8* %145 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1
  %154 = zext <4 x i8> %153 to <4 x i32>
  %155 = mul nuw nsw <4 x i32> %154, %151
  %156 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %151
  %157 = bitcast i8* %146 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = zext <4 x i8> %158 to <4 x i32>
  %160 = mul nsw <4 x i32> %156, %159
  %161 = add nuw nsw <4 x i32> %155, <i32 32, i32 32, i32 32, i32 32>
  %162 = add nsw <4 x i32> %161, %160
  %163 = ashr <4 x i32> %162, <i32 6, i32 6, i32 6, i32 6>
  %164 = bitcast i8* %142 to <4 x i8>*
  %165 = load <4 x i8>, <4 x i8>* %164, align 1
  %166 = zext <4 x i8> %165 to <4 x i32>
  %167 = sub nsw <4 x i32> %163, %166
  %168 = icmp slt <4 x i32> %167, zeroinitializer
  %169 = sub nsw <4 x i32> zeroinitializer, %167
  %170 = select <4 x i1> %168, <4 x i32> %169, <4 x i32> %167
  %171 = add <4 x i32> %170, %148
  %172 = getelementptr inbounds i8, i8* %147, i64 4
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = getelementptr inbounds i8, i8* %145, i64 4
  %177 = bitcast i8* %176 to <4 x i8>*
  %178 = load <4 x i8>, <4 x i8>* %177, align 1
  %179 = zext <4 x i8> %178 to <4 x i32>
  %180 = mul nuw nsw <4 x i32> %179, %175
  %181 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %175
  %182 = getelementptr inbounds i8, i8* %146, i64 4
  %183 = bitcast i8* %182 to <4 x i8>*
  %184 = load <4 x i8>, <4 x i8>* %183, align 1
  %185 = zext <4 x i8> %184 to <4 x i32>
  %186 = mul nsw <4 x i32> %181, %185
  %187 = add nuw nsw <4 x i32> %180, <i32 32, i32 32, i32 32, i32 32>
  %188 = add nsw <4 x i32> %187, %186
  %189 = ashr <4 x i32> %188, <i32 6, i32 6, i32 6, i32 6>
  %190 = getelementptr inbounds i8, i8* %142, i64 4
  %191 = bitcast i8* %190 to <4 x i8>*
  %192 = load <4 x i8>, <4 x i8>* %191, align 1
  %193 = zext <4 x i8> %192 to <4 x i32>
  %194 = sub nsw <4 x i32> %189, %193
  %195 = icmp slt <4 x i32> %194, zeroinitializer
  %196 = sub nsw <4 x i32> zeroinitializer, %194
  %197 = select <4 x i1> %195, <4 x i32> %196, <4 x i32> %194
  %198 = add <4 x i32> %197, %171
  %199 = getelementptr inbounds i8, i8* %147, i64 8
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = getelementptr inbounds i8, i8* %145, i64 8
  %204 = bitcast i8* %203 to <4 x i8>*
  %205 = load <4 x i8>, <4 x i8>* %204, align 1
  %206 = zext <4 x i8> %205 to <4 x i32>
  %207 = mul nuw nsw <4 x i32> %206, %202
  %208 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %202
  %209 = getelementptr inbounds i8, i8* %146, i64 8
  %210 = bitcast i8* %209 to <4 x i8>*
  %211 = load <4 x i8>, <4 x i8>* %210, align 1
  %212 = zext <4 x i8> %211 to <4 x i32>
  %213 = mul nsw <4 x i32> %208, %212
  %214 = add nuw nsw <4 x i32> %207, <i32 32, i32 32, i32 32, i32 32>
  %215 = add nsw <4 x i32> %214, %213
  %216 = ashr <4 x i32> %215, <i32 6, i32 6, i32 6, i32 6>
  %217 = getelementptr inbounds i8, i8* %142, i64 8
  %218 = bitcast i8* %217 to <4 x i8>*
  %219 = load <4 x i8>, <4 x i8>* %218, align 1
  %220 = zext <4 x i8> %219 to <4 x i32>
  %221 = sub nsw <4 x i32> %216, %220
  %222 = icmp slt <4 x i32> %221, zeroinitializer
  %223 = sub nsw <4 x i32> zeroinitializer, %221
  %224 = select <4 x i1> %222, <4 x i32> %223, <4 x i32> %221
  %225 = add <4 x i32> %224, %198
  %226 = getelementptr inbounds i8, i8* %147, i64 12
  %227 = bitcast i8* %226 to <4 x i8>*
  %228 = load <4 x i8>, <4 x i8>* %227, align 1
  %229 = zext <4 x i8> %228 to <4 x i32>
  %230 = getelementptr inbounds i8, i8* %145, i64 12
  %231 = bitcast i8* %230 to <4 x i8>*
  %232 = load <4 x i8>, <4 x i8>* %231, align 1
  %233 = zext <4 x i8> %232 to <4 x i32>
  %234 = mul nuw nsw <4 x i32> %233, %229
  %235 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %229
  %236 = getelementptr inbounds i8, i8* %146, i64 12
  %237 = bitcast i8* %236 to <4 x i8>*
  %238 = load <4 x i8>, <4 x i8>* %237, align 1
  %239 = zext <4 x i8> %238 to <4 x i32>
  %240 = mul nsw <4 x i32> %235, %239
  %241 = add nuw nsw <4 x i32> %234, <i32 32, i32 32, i32 32, i32 32>
  %242 = add nsw <4 x i32> %241, %240
  %243 = ashr <4 x i32> %242, <i32 6, i32 6, i32 6, i32 6>
  %244 = getelementptr inbounds i8, i8* %142, i64 12
  %245 = bitcast i8* %244 to <4 x i8>*
  %246 = load <4 x i8>, <4 x i8>* %245, align 1
  %247 = zext <4 x i8> %246 to <4 x i32>
  %248 = sub nsw <4 x i32> %243, %247
  %249 = icmp slt <4 x i32> %248, zeroinitializer
  %250 = sub nsw <4 x i32> zeroinitializer, %248
  %251 = select <4 x i1> %249, <4 x i32> %250, <4 x i32> %248
  %252 = add <4 x i32> %251, %225
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %254 = add <4 x i32> %252, %253
  %255 = shufflevector <4 x i32> %254, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %256 = add <4 x i32> %254, %255
  %257 = extractelement <4 x i32> %256, i32 0
  %258 = getelementptr inbounds i8, i8* %142, i64 %11
  %259 = getelementptr inbounds i8, i8* %145, i64 16
  %260 = getelementptr inbounds i8, i8* %146, i64 %12
  %261 = getelementptr inbounds i8, i8* %147, i64 %13
  %262 = add nuw nsw i32 %144, 1
  %263 = icmp eq i32 %262, 64
  br i1 %263, label %264, label %141

264:                                              ; preds = %141
  store i32 %257, i32* %8, align 4
  %265 = getelementptr inbounds i8*, i8** %2, i64 1
  %266 = load i8*, i8** %265, align 8
  br label %647

267:                                              ; preds = %901, %524
  %268 = phi i32 [ %640, %524 ], [ %1017, %901 ]
  %269 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %268, i32* %269, align 4
  ret void

270:                                              ; preds = %138, %270
  %271 = phi i8* [ %0, %138 ], [ %387, %270 ]
  %272 = phi i32 [ 0, %138 ], [ %386, %270 ]
  %273 = phi i32 [ 0, %138 ], [ %391, %270 ]
  %274 = phi i8* [ %140, %138 ], [ %388, %270 ]
  %275 = phi i8* [ %4, %138 ], [ %389, %270 ]
  %276 = phi i8* [ %5, %138 ], [ %390, %270 ]
  %277 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %272, i32 0
  %278 = bitcast i8* %276 to <4 x i8>*
  %279 = load <4 x i8>, <4 x i8>* %278, align 1
  %280 = zext <4 x i8> %279 to <4 x i32>
  %281 = bitcast i8* %274 to <4 x i8>*
  %282 = load <4 x i8>, <4 x i8>* %281, align 1
  %283 = zext <4 x i8> %282 to <4 x i32>
  %284 = mul nuw nsw <4 x i32> %283, %280
  %285 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %280
  %286 = bitcast i8* %275 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 1
  %288 = zext <4 x i8> %287 to <4 x i32>
  %289 = mul nsw <4 x i32> %285, %288
  %290 = add nuw nsw <4 x i32> %284, <i32 32, i32 32, i32 32, i32 32>
  %291 = add nsw <4 x i32> %290, %289
  %292 = ashr <4 x i32> %291, <i32 6, i32 6, i32 6, i32 6>
  %293 = bitcast i8* %271 to <4 x i8>*
  %294 = load <4 x i8>, <4 x i8>* %293, align 1
  %295 = zext <4 x i8> %294 to <4 x i32>
  %296 = sub nsw <4 x i32> %292, %295
  %297 = icmp slt <4 x i32> %296, zeroinitializer
  %298 = sub nsw <4 x i32> zeroinitializer, %296
  %299 = select <4 x i1> %297, <4 x i32> %298, <4 x i32> %296
  %300 = add <4 x i32> %299, %277
  %301 = getelementptr inbounds i8, i8* %276, i64 4
  %302 = bitcast i8* %301 to <4 x i8>*
  %303 = load <4 x i8>, <4 x i8>* %302, align 1
  %304 = zext <4 x i8> %303 to <4 x i32>
  %305 = getelementptr inbounds i8, i8* %274, i64 4
  %306 = bitcast i8* %305 to <4 x i8>*
  %307 = load <4 x i8>, <4 x i8>* %306, align 1
  %308 = zext <4 x i8> %307 to <4 x i32>
  %309 = mul nuw nsw <4 x i32> %308, %304
  %310 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %304
  %311 = getelementptr inbounds i8, i8* %275, i64 4
  %312 = bitcast i8* %311 to <4 x i8>*
  %313 = load <4 x i8>, <4 x i8>* %312, align 1
  %314 = zext <4 x i8> %313 to <4 x i32>
  %315 = mul nsw <4 x i32> %310, %314
  %316 = add nuw nsw <4 x i32> %309, <i32 32, i32 32, i32 32, i32 32>
  %317 = add nsw <4 x i32> %316, %315
  %318 = ashr <4 x i32> %317, <i32 6, i32 6, i32 6, i32 6>
  %319 = getelementptr inbounds i8, i8* %271, i64 4
  %320 = bitcast i8* %319 to <4 x i8>*
  %321 = load <4 x i8>, <4 x i8>* %320, align 1
  %322 = zext <4 x i8> %321 to <4 x i32>
  %323 = sub nsw <4 x i32> %318, %322
  %324 = icmp slt <4 x i32> %323, zeroinitializer
  %325 = sub nsw <4 x i32> zeroinitializer, %323
  %326 = select <4 x i1> %324, <4 x i32> %325, <4 x i32> %323
  %327 = add <4 x i32> %326, %300
  %328 = getelementptr inbounds i8, i8* %276, i64 8
  %329 = bitcast i8* %328 to <4 x i8>*
  %330 = load <4 x i8>, <4 x i8>* %329, align 1
  %331 = zext <4 x i8> %330 to <4 x i32>
  %332 = getelementptr inbounds i8, i8* %274, i64 8
  %333 = bitcast i8* %332 to <4 x i8>*
  %334 = load <4 x i8>, <4 x i8>* %333, align 1
  %335 = zext <4 x i8> %334 to <4 x i32>
  %336 = mul nuw nsw <4 x i32> %335, %331
  %337 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %331
  %338 = getelementptr inbounds i8, i8* %275, i64 8
  %339 = bitcast i8* %338 to <4 x i8>*
  %340 = load <4 x i8>, <4 x i8>* %339, align 1
  %341 = zext <4 x i8> %340 to <4 x i32>
  %342 = mul nsw <4 x i32> %337, %341
  %343 = add nuw nsw <4 x i32> %336, <i32 32, i32 32, i32 32, i32 32>
  %344 = add nsw <4 x i32> %343, %342
  %345 = ashr <4 x i32> %344, <i32 6, i32 6, i32 6, i32 6>
  %346 = getelementptr inbounds i8, i8* %271, i64 8
  %347 = bitcast i8* %346 to <4 x i8>*
  %348 = load <4 x i8>, <4 x i8>* %347, align 1
  %349 = zext <4 x i8> %348 to <4 x i32>
  %350 = sub nsw <4 x i32> %345, %349
  %351 = icmp slt <4 x i32> %350, zeroinitializer
  %352 = sub nsw <4 x i32> zeroinitializer, %350
  %353 = select <4 x i1> %351, <4 x i32> %352, <4 x i32> %350
  %354 = add <4 x i32> %353, %327
  %355 = getelementptr inbounds i8, i8* %276, i64 12
  %356 = bitcast i8* %355 to <4 x i8>*
  %357 = load <4 x i8>, <4 x i8>* %356, align 1
  %358 = zext <4 x i8> %357 to <4 x i32>
  %359 = getelementptr inbounds i8, i8* %274, i64 12
  %360 = bitcast i8* %359 to <4 x i8>*
  %361 = load <4 x i8>, <4 x i8>* %360, align 1
  %362 = zext <4 x i8> %361 to <4 x i32>
  %363 = mul nuw nsw <4 x i32> %362, %358
  %364 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %358
  %365 = getelementptr inbounds i8, i8* %275, i64 12
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1
  %368 = zext <4 x i8> %367 to <4 x i32>
  %369 = mul nsw <4 x i32> %364, %368
  %370 = add nuw nsw <4 x i32> %363, <i32 32, i32 32, i32 32, i32 32>
  %371 = add nsw <4 x i32> %370, %369
  %372 = ashr <4 x i32> %371, <i32 6, i32 6, i32 6, i32 6>
  %373 = getelementptr inbounds i8, i8* %271, i64 12
  %374 = bitcast i8* %373 to <4 x i8>*
  %375 = load <4 x i8>, <4 x i8>* %374, align 1
  %376 = zext <4 x i8> %375 to <4 x i32>
  %377 = sub nsw <4 x i32> %372, %376
  %378 = icmp slt <4 x i32> %377, zeroinitializer
  %379 = sub nsw <4 x i32> zeroinitializer, %377
  %380 = select <4 x i1> %378, <4 x i32> %379, <4 x i32> %377
  %381 = add <4 x i32> %380, %354
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %383 = add <4 x i32> %381, %382
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %385 = add <4 x i32> %383, %384
  %386 = extractelement <4 x i32> %385, i32 0
  %387 = getelementptr inbounds i8, i8* %271, i64 %11
  %388 = getelementptr inbounds i8, i8* %274, i64 %12
  %389 = getelementptr inbounds i8, i8* %275, i64 16
  %390 = getelementptr inbounds i8, i8* %276, i64 %13
  %391 = add nuw nsw i32 %273, 1
  %392 = icmp eq i32 %391, 64
  br i1 %392, label %393, label %270

393:                                              ; preds = %270
  %394 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %386, i32* %394, align 4
  %395 = getelementptr inbounds i8*, i8** %2, i64 2
  %396 = load i8*, i8** %395, align 8
  br label %397

397:                                              ; preds = %393, %397
  %398 = phi i8* [ %0, %393 ], [ %514, %397 ]
  %399 = phi i32 [ 0, %393 ], [ %513, %397 ]
  %400 = phi i32 [ 0, %393 ], [ %518, %397 ]
  %401 = phi i8* [ %396, %393 ], [ %515, %397 ]
  %402 = phi i8* [ %4, %393 ], [ %516, %397 ]
  %403 = phi i8* [ %5, %393 ], [ %517, %397 ]
  %404 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %399, i32 0
  %405 = bitcast i8* %403 to <4 x i8>*
  %406 = load <4 x i8>, <4 x i8>* %405, align 1
  %407 = zext <4 x i8> %406 to <4 x i32>
  %408 = bitcast i8* %401 to <4 x i8>*
  %409 = load <4 x i8>, <4 x i8>* %408, align 1
  %410 = zext <4 x i8> %409 to <4 x i32>
  %411 = mul nuw nsw <4 x i32> %410, %407
  %412 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %407
  %413 = bitcast i8* %402 to <4 x i8>*
  %414 = load <4 x i8>, <4 x i8>* %413, align 1
  %415 = zext <4 x i8> %414 to <4 x i32>
  %416 = mul nsw <4 x i32> %412, %415
  %417 = add nuw nsw <4 x i32> %411, <i32 32, i32 32, i32 32, i32 32>
  %418 = add nsw <4 x i32> %417, %416
  %419 = ashr <4 x i32> %418, <i32 6, i32 6, i32 6, i32 6>
  %420 = bitcast i8* %398 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = sub nsw <4 x i32> %419, %422
  %424 = icmp slt <4 x i32> %423, zeroinitializer
  %425 = sub nsw <4 x i32> zeroinitializer, %423
  %426 = select <4 x i1> %424, <4 x i32> %425, <4 x i32> %423
  %427 = add <4 x i32> %426, %404
  %428 = getelementptr inbounds i8, i8* %403, i64 4
  %429 = bitcast i8* %428 to <4 x i8>*
  %430 = load <4 x i8>, <4 x i8>* %429, align 1
  %431 = zext <4 x i8> %430 to <4 x i32>
  %432 = getelementptr inbounds i8, i8* %401, i64 4
  %433 = bitcast i8* %432 to <4 x i8>*
  %434 = load <4 x i8>, <4 x i8>* %433, align 1
  %435 = zext <4 x i8> %434 to <4 x i32>
  %436 = mul nuw nsw <4 x i32> %435, %431
  %437 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %431
  %438 = getelementptr inbounds i8, i8* %402, i64 4
  %439 = bitcast i8* %438 to <4 x i8>*
  %440 = load <4 x i8>, <4 x i8>* %439, align 1
  %441 = zext <4 x i8> %440 to <4 x i32>
  %442 = mul nsw <4 x i32> %437, %441
  %443 = add nuw nsw <4 x i32> %436, <i32 32, i32 32, i32 32, i32 32>
  %444 = add nsw <4 x i32> %443, %442
  %445 = ashr <4 x i32> %444, <i32 6, i32 6, i32 6, i32 6>
  %446 = getelementptr inbounds i8, i8* %398, i64 4
  %447 = bitcast i8* %446 to <4 x i8>*
  %448 = load <4 x i8>, <4 x i8>* %447, align 1
  %449 = zext <4 x i8> %448 to <4 x i32>
  %450 = sub nsw <4 x i32> %445, %449
  %451 = icmp slt <4 x i32> %450, zeroinitializer
  %452 = sub nsw <4 x i32> zeroinitializer, %450
  %453 = select <4 x i1> %451, <4 x i32> %452, <4 x i32> %450
  %454 = add <4 x i32> %453, %427
  %455 = getelementptr inbounds i8, i8* %403, i64 8
  %456 = bitcast i8* %455 to <4 x i8>*
  %457 = load <4 x i8>, <4 x i8>* %456, align 1
  %458 = zext <4 x i8> %457 to <4 x i32>
  %459 = getelementptr inbounds i8, i8* %401, i64 8
  %460 = bitcast i8* %459 to <4 x i8>*
  %461 = load <4 x i8>, <4 x i8>* %460, align 1
  %462 = zext <4 x i8> %461 to <4 x i32>
  %463 = mul nuw nsw <4 x i32> %462, %458
  %464 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %458
  %465 = getelementptr inbounds i8, i8* %402, i64 8
  %466 = bitcast i8* %465 to <4 x i8>*
  %467 = load <4 x i8>, <4 x i8>* %466, align 1
  %468 = zext <4 x i8> %467 to <4 x i32>
  %469 = mul nsw <4 x i32> %464, %468
  %470 = add nuw nsw <4 x i32> %463, <i32 32, i32 32, i32 32, i32 32>
  %471 = add nsw <4 x i32> %470, %469
  %472 = ashr <4 x i32> %471, <i32 6, i32 6, i32 6, i32 6>
  %473 = getelementptr inbounds i8, i8* %398, i64 8
  %474 = bitcast i8* %473 to <4 x i8>*
  %475 = load <4 x i8>, <4 x i8>* %474, align 1
  %476 = zext <4 x i8> %475 to <4 x i32>
  %477 = sub nsw <4 x i32> %472, %476
  %478 = icmp slt <4 x i32> %477, zeroinitializer
  %479 = sub nsw <4 x i32> zeroinitializer, %477
  %480 = select <4 x i1> %478, <4 x i32> %479, <4 x i32> %477
  %481 = add <4 x i32> %480, %454
  %482 = getelementptr inbounds i8, i8* %403, i64 12
  %483 = bitcast i8* %482 to <4 x i8>*
  %484 = load <4 x i8>, <4 x i8>* %483, align 1
  %485 = zext <4 x i8> %484 to <4 x i32>
  %486 = getelementptr inbounds i8, i8* %401, i64 12
  %487 = bitcast i8* %486 to <4 x i8>*
  %488 = load <4 x i8>, <4 x i8>* %487, align 1
  %489 = zext <4 x i8> %488 to <4 x i32>
  %490 = mul nuw nsw <4 x i32> %489, %485
  %491 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %485
  %492 = getelementptr inbounds i8, i8* %402, i64 12
  %493 = bitcast i8* %492 to <4 x i8>*
  %494 = load <4 x i8>, <4 x i8>* %493, align 1
  %495 = zext <4 x i8> %494 to <4 x i32>
  %496 = mul nsw <4 x i32> %491, %495
  %497 = add nuw nsw <4 x i32> %490, <i32 32, i32 32, i32 32, i32 32>
  %498 = add nsw <4 x i32> %497, %496
  %499 = ashr <4 x i32> %498, <i32 6, i32 6, i32 6, i32 6>
  %500 = getelementptr inbounds i8, i8* %398, i64 12
  %501 = bitcast i8* %500 to <4 x i8>*
  %502 = load <4 x i8>, <4 x i8>* %501, align 1
  %503 = zext <4 x i8> %502 to <4 x i32>
  %504 = sub nsw <4 x i32> %499, %503
  %505 = icmp slt <4 x i32> %504, zeroinitializer
  %506 = sub nsw <4 x i32> zeroinitializer, %504
  %507 = select <4 x i1> %505, <4 x i32> %506, <4 x i32> %504
  %508 = add <4 x i32> %507, %481
  %509 = shufflevector <4 x i32> %508, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %510 = add <4 x i32> %508, %509
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %512 = add <4 x i32> %510, %511
  %513 = extractelement <4 x i32> %512, i32 0
  %514 = getelementptr inbounds i8, i8* %398, i64 %11
  %515 = getelementptr inbounds i8, i8* %401, i64 %12
  %516 = getelementptr inbounds i8, i8* %402, i64 16
  %517 = getelementptr inbounds i8, i8* %403, i64 %13
  %518 = add nuw nsw i32 %400, 1
  %519 = icmp eq i32 %518, 64
  br i1 %519, label %520, label %397

520:                                              ; preds = %397
  %521 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %513, i32* %521, align 4
  %522 = getelementptr inbounds i8*, i8** %2, i64 3
  %523 = load i8*, i8** %522, align 8
  br label %524

524:                                              ; preds = %520, %524
  %525 = phi i8* [ %0, %520 ], [ %641, %524 ]
  %526 = phi i32 [ 0, %520 ], [ %640, %524 ]
  %527 = phi i32 [ 0, %520 ], [ %645, %524 ]
  %528 = phi i8* [ %523, %520 ], [ %642, %524 ]
  %529 = phi i8* [ %4, %520 ], [ %643, %524 ]
  %530 = phi i8* [ %5, %520 ], [ %644, %524 ]
  %531 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %526, i32 0
  %532 = bitcast i8* %530 to <4 x i8>*
  %533 = load <4 x i8>, <4 x i8>* %532, align 1
  %534 = zext <4 x i8> %533 to <4 x i32>
  %535 = bitcast i8* %528 to <4 x i8>*
  %536 = load <4 x i8>, <4 x i8>* %535, align 1
  %537 = zext <4 x i8> %536 to <4 x i32>
  %538 = mul nuw nsw <4 x i32> %537, %534
  %539 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %534
  %540 = bitcast i8* %529 to <4 x i8>*
  %541 = load <4 x i8>, <4 x i8>* %540, align 1
  %542 = zext <4 x i8> %541 to <4 x i32>
  %543 = mul nsw <4 x i32> %539, %542
  %544 = add nuw nsw <4 x i32> %538, <i32 32, i32 32, i32 32, i32 32>
  %545 = add nsw <4 x i32> %544, %543
  %546 = ashr <4 x i32> %545, <i32 6, i32 6, i32 6, i32 6>
  %547 = bitcast i8* %525 to <4 x i8>*
  %548 = load <4 x i8>, <4 x i8>* %547, align 1
  %549 = zext <4 x i8> %548 to <4 x i32>
  %550 = sub nsw <4 x i32> %546, %549
  %551 = icmp slt <4 x i32> %550, zeroinitializer
  %552 = sub nsw <4 x i32> zeroinitializer, %550
  %553 = select <4 x i1> %551, <4 x i32> %552, <4 x i32> %550
  %554 = add <4 x i32> %553, %531
  %555 = getelementptr inbounds i8, i8* %530, i64 4
  %556 = bitcast i8* %555 to <4 x i8>*
  %557 = load <4 x i8>, <4 x i8>* %556, align 1
  %558 = zext <4 x i8> %557 to <4 x i32>
  %559 = getelementptr inbounds i8, i8* %528, i64 4
  %560 = bitcast i8* %559 to <4 x i8>*
  %561 = load <4 x i8>, <4 x i8>* %560, align 1
  %562 = zext <4 x i8> %561 to <4 x i32>
  %563 = mul nuw nsw <4 x i32> %562, %558
  %564 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %558
  %565 = getelementptr inbounds i8, i8* %529, i64 4
  %566 = bitcast i8* %565 to <4 x i8>*
  %567 = load <4 x i8>, <4 x i8>* %566, align 1
  %568 = zext <4 x i8> %567 to <4 x i32>
  %569 = mul nsw <4 x i32> %564, %568
  %570 = add nuw nsw <4 x i32> %563, <i32 32, i32 32, i32 32, i32 32>
  %571 = add nsw <4 x i32> %570, %569
  %572 = ashr <4 x i32> %571, <i32 6, i32 6, i32 6, i32 6>
  %573 = getelementptr inbounds i8, i8* %525, i64 4
  %574 = bitcast i8* %573 to <4 x i8>*
  %575 = load <4 x i8>, <4 x i8>* %574, align 1
  %576 = zext <4 x i8> %575 to <4 x i32>
  %577 = sub nsw <4 x i32> %572, %576
  %578 = icmp slt <4 x i32> %577, zeroinitializer
  %579 = sub nsw <4 x i32> zeroinitializer, %577
  %580 = select <4 x i1> %578, <4 x i32> %579, <4 x i32> %577
  %581 = add <4 x i32> %580, %554
  %582 = getelementptr inbounds i8, i8* %530, i64 8
  %583 = bitcast i8* %582 to <4 x i8>*
  %584 = load <4 x i8>, <4 x i8>* %583, align 1
  %585 = zext <4 x i8> %584 to <4 x i32>
  %586 = getelementptr inbounds i8, i8* %528, i64 8
  %587 = bitcast i8* %586 to <4 x i8>*
  %588 = load <4 x i8>, <4 x i8>* %587, align 1
  %589 = zext <4 x i8> %588 to <4 x i32>
  %590 = mul nuw nsw <4 x i32> %589, %585
  %591 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %585
  %592 = getelementptr inbounds i8, i8* %529, i64 8
  %593 = bitcast i8* %592 to <4 x i8>*
  %594 = load <4 x i8>, <4 x i8>* %593, align 1
  %595 = zext <4 x i8> %594 to <4 x i32>
  %596 = mul nsw <4 x i32> %591, %595
  %597 = add nuw nsw <4 x i32> %590, <i32 32, i32 32, i32 32, i32 32>
  %598 = add nsw <4 x i32> %597, %596
  %599 = ashr <4 x i32> %598, <i32 6, i32 6, i32 6, i32 6>
  %600 = getelementptr inbounds i8, i8* %525, i64 8
  %601 = bitcast i8* %600 to <4 x i8>*
  %602 = load <4 x i8>, <4 x i8>* %601, align 1
  %603 = zext <4 x i8> %602 to <4 x i32>
  %604 = sub nsw <4 x i32> %599, %603
  %605 = icmp slt <4 x i32> %604, zeroinitializer
  %606 = sub nsw <4 x i32> zeroinitializer, %604
  %607 = select <4 x i1> %605, <4 x i32> %606, <4 x i32> %604
  %608 = add <4 x i32> %607, %581
  %609 = getelementptr inbounds i8, i8* %530, i64 12
  %610 = bitcast i8* %609 to <4 x i8>*
  %611 = load <4 x i8>, <4 x i8>* %610, align 1
  %612 = zext <4 x i8> %611 to <4 x i32>
  %613 = getelementptr inbounds i8, i8* %528, i64 12
  %614 = bitcast i8* %613 to <4 x i8>*
  %615 = load <4 x i8>, <4 x i8>* %614, align 1
  %616 = zext <4 x i8> %615 to <4 x i32>
  %617 = mul nuw nsw <4 x i32> %616, %612
  %618 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %612
  %619 = getelementptr inbounds i8, i8* %529, i64 12
  %620 = bitcast i8* %619 to <4 x i8>*
  %621 = load <4 x i8>, <4 x i8>* %620, align 1
  %622 = zext <4 x i8> %621 to <4 x i32>
  %623 = mul nsw <4 x i32> %618, %622
  %624 = add nuw nsw <4 x i32> %617, <i32 32, i32 32, i32 32, i32 32>
  %625 = add nsw <4 x i32> %624, %623
  %626 = ashr <4 x i32> %625, <i32 6, i32 6, i32 6, i32 6>
  %627 = getelementptr inbounds i8, i8* %525, i64 12
  %628 = bitcast i8* %627 to <4 x i8>*
  %629 = load <4 x i8>, <4 x i8>* %628, align 1
  %630 = zext <4 x i8> %629 to <4 x i32>
  %631 = sub nsw <4 x i32> %626, %630
  %632 = icmp slt <4 x i32> %631, zeroinitializer
  %633 = sub nsw <4 x i32> zeroinitializer, %631
  %634 = select <4 x i1> %632, <4 x i32> %633, <4 x i32> %631
  %635 = add <4 x i32> %634, %608
  %636 = shufflevector <4 x i32> %635, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %637 = add <4 x i32> %635, %636
  %638 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %639 = add <4 x i32> %637, %638
  %640 = extractelement <4 x i32> %639, i32 0
  %641 = getelementptr inbounds i8, i8* %525, i64 %11
  %642 = getelementptr inbounds i8, i8* %528, i64 %12
  %643 = getelementptr inbounds i8, i8* %529, i64 16
  %644 = getelementptr inbounds i8, i8* %530, i64 %13
  %645 = add nuw nsw i32 %527, 1
  %646 = icmp eq i32 %645, 64
  br i1 %646, label %267, label %524

647:                                              ; preds = %264, %647
  %648 = phi i8* [ %0, %264 ], [ %764, %647 ]
  %649 = phi i32 [ 0, %264 ], [ %763, %647 ]
  %650 = phi i32 [ 0, %264 ], [ %768, %647 ]
  %651 = phi i8* [ %4, %264 ], [ %765, %647 ]
  %652 = phi i8* [ %266, %264 ], [ %766, %647 ]
  %653 = phi i8* [ %5, %264 ], [ %767, %647 ]
  %654 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %649, i32 0
  %655 = bitcast i8* %653 to <4 x i8>*
  %656 = load <4 x i8>, <4 x i8>* %655, align 1
  %657 = zext <4 x i8> %656 to <4 x i32>
  %658 = bitcast i8* %651 to <4 x i8>*
  %659 = load <4 x i8>, <4 x i8>* %658, align 1
  %660 = zext <4 x i8> %659 to <4 x i32>
  %661 = mul nuw nsw <4 x i32> %660, %657
  %662 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %657
  %663 = bitcast i8* %652 to <4 x i8>*
  %664 = load <4 x i8>, <4 x i8>* %663, align 1
  %665 = zext <4 x i8> %664 to <4 x i32>
  %666 = mul nsw <4 x i32> %662, %665
  %667 = add nuw nsw <4 x i32> %661, <i32 32, i32 32, i32 32, i32 32>
  %668 = add nsw <4 x i32> %667, %666
  %669 = ashr <4 x i32> %668, <i32 6, i32 6, i32 6, i32 6>
  %670 = bitcast i8* %648 to <4 x i8>*
  %671 = load <4 x i8>, <4 x i8>* %670, align 1
  %672 = zext <4 x i8> %671 to <4 x i32>
  %673 = sub nsw <4 x i32> %669, %672
  %674 = icmp slt <4 x i32> %673, zeroinitializer
  %675 = sub nsw <4 x i32> zeroinitializer, %673
  %676 = select <4 x i1> %674, <4 x i32> %675, <4 x i32> %673
  %677 = add <4 x i32> %676, %654
  %678 = getelementptr inbounds i8, i8* %653, i64 4
  %679 = bitcast i8* %678 to <4 x i8>*
  %680 = load <4 x i8>, <4 x i8>* %679, align 1
  %681 = zext <4 x i8> %680 to <4 x i32>
  %682 = getelementptr inbounds i8, i8* %651, i64 4
  %683 = bitcast i8* %682 to <4 x i8>*
  %684 = load <4 x i8>, <4 x i8>* %683, align 1
  %685 = zext <4 x i8> %684 to <4 x i32>
  %686 = mul nuw nsw <4 x i32> %685, %681
  %687 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %681
  %688 = getelementptr inbounds i8, i8* %652, i64 4
  %689 = bitcast i8* %688 to <4 x i8>*
  %690 = load <4 x i8>, <4 x i8>* %689, align 1
  %691 = zext <4 x i8> %690 to <4 x i32>
  %692 = mul nsw <4 x i32> %687, %691
  %693 = add nuw nsw <4 x i32> %686, <i32 32, i32 32, i32 32, i32 32>
  %694 = add nsw <4 x i32> %693, %692
  %695 = ashr <4 x i32> %694, <i32 6, i32 6, i32 6, i32 6>
  %696 = getelementptr inbounds i8, i8* %648, i64 4
  %697 = bitcast i8* %696 to <4 x i8>*
  %698 = load <4 x i8>, <4 x i8>* %697, align 1
  %699 = zext <4 x i8> %698 to <4 x i32>
  %700 = sub nsw <4 x i32> %695, %699
  %701 = icmp slt <4 x i32> %700, zeroinitializer
  %702 = sub nsw <4 x i32> zeroinitializer, %700
  %703 = select <4 x i1> %701, <4 x i32> %702, <4 x i32> %700
  %704 = add <4 x i32> %703, %677
  %705 = getelementptr inbounds i8, i8* %653, i64 8
  %706 = bitcast i8* %705 to <4 x i8>*
  %707 = load <4 x i8>, <4 x i8>* %706, align 1
  %708 = zext <4 x i8> %707 to <4 x i32>
  %709 = getelementptr inbounds i8, i8* %651, i64 8
  %710 = bitcast i8* %709 to <4 x i8>*
  %711 = load <4 x i8>, <4 x i8>* %710, align 1
  %712 = zext <4 x i8> %711 to <4 x i32>
  %713 = mul nuw nsw <4 x i32> %712, %708
  %714 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %708
  %715 = getelementptr inbounds i8, i8* %652, i64 8
  %716 = bitcast i8* %715 to <4 x i8>*
  %717 = load <4 x i8>, <4 x i8>* %716, align 1
  %718 = zext <4 x i8> %717 to <4 x i32>
  %719 = mul nsw <4 x i32> %714, %718
  %720 = add nuw nsw <4 x i32> %713, <i32 32, i32 32, i32 32, i32 32>
  %721 = add nsw <4 x i32> %720, %719
  %722 = ashr <4 x i32> %721, <i32 6, i32 6, i32 6, i32 6>
  %723 = getelementptr inbounds i8, i8* %648, i64 8
  %724 = bitcast i8* %723 to <4 x i8>*
  %725 = load <4 x i8>, <4 x i8>* %724, align 1
  %726 = zext <4 x i8> %725 to <4 x i32>
  %727 = sub nsw <4 x i32> %722, %726
  %728 = icmp slt <4 x i32> %727, zeroinitializer
  %729 = sub nsw <4 x i32> zeroinitializer, %727
  %730 = select <4 x i1> %728, <4 x i32> %729, <4 x i32> %727
  %731 = add <4 x i32> %730, %704
  %732 = getelementptr inbounds i8, i8* %653, i64 12
  %733 = bitcast i8* %732 to <4 x i8>*
  %734 = load <4 x i8>, <4 x i8>* %733, align 1
  %735 = zext <4 x i8> %734 to <4 x i32>
  %736 = getelementptr inbounds i8, i8* %651, i64 12
  %737 = bitcast i8* %736 to <4 x i8>*
  %738 = load <4 x i8>, <4 x i8>* %737, align 1
  %739 = zext <4 x i8> %738 to <4 x i32>
  %740 = mul nuw nsw <4 x i32> %739, %735
  %741 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %735
  %742 = getelementptr inbounds i8, i8* %652, i64 12
  %743 = bitcast i8* %742 to <4 x i8>*
  %744 = load <4 x i8>, <4 x i8>* %743, align 1
  %745 = zext <4 x i8> %744 to <4 x i32>
  %746 = mul nsw <4 x i32> %741, %745
  %747 = add nuw nsw <4 x i32> %740, <i32 32, i32 32, i32 32, i32 32>
  %748 = add nsw <4 x i32> %747, %746
  %749 = ashr <4 x i32> %748, <i32 6, i32 6, i32 6, i32 6>
  %750 = getelementptr inbounds i8, i8* %648, i64 12
  %751 = bitcast i8* %750 to <4 x i8>*
  %752 = load <4 x i8>, <4 x i8>* %751, align 1
  %753 = zext <4 x i8> %752 to <4 x i32>
  %754 = sub nsw <4 x i32> %749, %753
  %755 = icmp slt <4 x i32> %754, zeroinitializer
  %756 = sub nsw <4 x i32> zeroinitializer, %754
  %757 = select <4 x i1> %755, <4 x i32> %756, <4 x i32> %754
  %758 = add <4 x i32> %757, %731
  %759 = shufflevector <4 x i32> %758, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %760 = add <4 x i32> %758, %759
  %761 = shufflevector <4 x i32> %760, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %762 = add <4 x i32> %760, %761
  %763 = extractelement <4 x i32> %762, i32 0
  %764 = getelementptr inbounds i8, i8* %648, i64 %11
  %765 = getelementptr inbounds i8, i8* %651, i64 16
  %766 = getelementptr inbounds i8, i8* %652, i64 %12
  %767 = getelementptr inbounds i8, i8* %653, i64 %13
  %768 = add nuw nsw i32 %650, 1
  %769 = icmp eq i32 %768, 64
  br i1 %769, label %770, label %647

770:                                              ; preds = %647
  %771 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %763, i32* %771, align 4
  %772 = getelementptr inbounds i8*, i8** %2, i64 2
  %773 = load i8*, i8** %772, align 8
  br label %774

774:                                              ; preds = %770, %774
  %775 = phi i8* [ %0, %770 ], [ %891, %774 ]
  %776 = phi i32 [ 0, %770 ], [ %890, %774 ]
  %777 = phi i32 [ 0, %770 ], [ %895, %774 ]
  %778 = phi i8* [ %4, %770 ], [ %892, %774 ]
  %779 = phi i8* [ %773, %770 ], [ %893, %774 ]
  %780 = phi i8* [ %5, %770 ], [ %894, %774 ]
  %781 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %776, i32 0
  %782 = bitcast i8* %780 to <4 x i8>*
  %783 = load <4 x i8>, <4 x i8>* %782, align 1
  %784 = zext <4 x i8> %783 to <4 x i32>
  %785 = bitcast i8* %778 to <4 x i8>*
  %786 = load <4 x i8>, <4 x i8>* %785, align 1
  %787 = zext <4 x i8> %786 to <4 x i32>
  %788 = mul nuw nsw <4 x i32> %787, %784
  %789 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %784
  %790 = bitcast i8* %779 to <4 x i8>*
  %791 = load <4 x i8>, <4 x i8>* %790, align 1
  %792 = zext <4 x i8> %791 to <4 x i32>
  %793 = mul nsw <4 x i32> %789, %792
  %794 = add nuw nsw <4 x i32> %788, <i32 32, i32 32, i32 32, i32 32>
  %795 = add nsw <4 x i32> %794, %793
  %796 = ashr <4 x i32> %795, <i32 6, i32 6, i32 6, i32 6>
  %797 = bitcast i8* %775 to <4 x i8>*
  %798 = load <4 x i8>, <4 x i8>* %797, align 1
  %799 = zext <4 x i8> %798 to <4 x i32>
  %800 = sub nsw <4 x i32> %796, %799
  %801 = icmp slt <4 x i32> %800, zeroinitializer
  %802 = sub nsw <4 x i32> zeroinitializer, %800
  %803 = select <4 x i1> %801, <4 x i32> %802, <4 x i32> %800
  %804 = add <4 x i32> %803, %781
  %805 = getelementptr inbounds i8, i8* %780, i64 4
  %806 = bitcast i8* %805 to <4 x i8>*
  %807 = load <4 x i8>, <4 x i8>* %806, align 1
  %808 = zext <4 x i8> %807 to <4 x i32>
  %809 = getelementptr inbounds i8, i8* %778, i64 4
  %810 = bitcast i8* %809 to <4 x i8>*
  %811 = load <4 x i8>, <4 x i8>* %810, align 1
  %812 = zext <4 x i8> %811 to <4 x i32>
  %813 = mul nuw nsw <4 x i32> %812, %808
  %814 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %808
  %815 = getelementptr inbounds i8, i8* %779, i64 4
  %816 = bitcast i8* %815 to <4 x i8>*
  %817 = load <4 x i8>, <4 x i8>* %816, align 1
  %818 = zext <4 x i8> %817 to <4 x i32>
  %819 = mul nsw <4 x i32> %814, %818
  %820 = add nuw nsw <4 x i32> %813, <i32 32, i32 32, i32 32, i32 32>
  %821 = add nsw <4 x i32> %820, %819
  %822 = ashr <4 x i32> %821, <i32 6, i32 6, i32 6, i32 6>
  %823 = getelementptr inbounds i8, i8* %775, i64 4
  %824 = bitcast i8* %823 to <4 x i8>*
  %825 = load <4 x i8>, <4 x i8>* %824, align 1
  %826 = zext <4 x i8> %825 to <4 x i32>
  %827 = sub nsw <4 x i32> %822, %826
  %828 = icmp slt <4 x i32> %827, zeroinitializer
  %829 = sub nsw <4 x i32> zeroinitializer, %827
  %830 = select <4 x i1> %828, <4 x i32> %829, <4 x i32> %827
  %831 = add <4 x i32> %830, %804
  %832 = getelementptr inbounds i8, i8* %780, i64 8
  %833 = bitcast i8* %832 to <4 x i8>*
  %834 = load <4 x i8>, <4 x i8>* %833, align 1
  %835 = zext <4 x i8> %834 to <4 x i32>
  %836 = getelementptr inbounds i8, i8* %778, i64 8
  %837 = bitcast i8* %836 to <4 x i8>*
  %838 = load <4 x i8>, <4 x i8>* %837, align 1
  %839 = zext <4 x i8> %838 to <4 x i32>
  %840 = mul nuw nsw <4 x i32> %839, %835
  %841 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %835
  %842 = getelementptr inbounds i8, i8* %779, i64 8
  %843 = bitcast i8* %842 to <4 x i8>*
  %844 = load <4 x i8>, <4 x i8>* %843, align 1
  %845 = zext <4 x i8> %844 to <4 x i32>
  %846 = mul nsw <4 x i32> %841, %845
  %847 = add nuw nsw <4 x i32> %840, <i32 32, i32 32, i32 32, i32 32>
  %848 = add nsw <4 x i32> %847, %846
  %849 = ashr <4 x i32> %848, <i32 6, i32 6, i32 6, i32 6>
  %850 = getelementptr inbounds i8, i8* %775, i64 8
  %851 = bitcast i8* %850 to <4 x i8>*
  %852 = load <4 x i8>, <4 x i8>* %851, align 1
  %853 = zext <4 x i8> %852 to <4 x i32>
  %854 = sub nsw <4 x i32> %849, %853
  %855 = icmp slt <4 x i32> %854, zeroinitializer
  %856 = sub nsw <4 x i32> zeroinitializer, %854
  %857 = select <4 x i1> %855, <4 x i32> %856, <4 x i32> %854
  %858 = add <4 x i32> %857, %831
  %859 = getelementptr inbounds i8, i8* %780, i64 12
  %860 = bitcast i8* %859 to <4 x i8>*
  %861 = load <4 x i8>, <4 x i8>* %860, align 1
  %862 = zext <4 x i8> %861 to <4 x i32>
  %863 = getelementptr inbounds i8, i8* %778, i64 12
  %864 = bitcast i8* %863 to <4 x i8>*
  %865 = load <4 x i8>, <4 x i8>* %864, align 1
  %866 = zext <4 x i8> %865 to <4 x i32>
  %867 = mul nuw nsw <4 x i32> %866, %862
  %868 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %862
  %869 = getelementptr inbounds i8, i8* %779, i64 12
  %870 = bitcast i8* %869 to <4 x i8>*
  %871 = load <4 x i8>, <4 x i8>* %870, align 1
  %872 = zext <4 x i8> %871 to <4 x i32>
  %873 = mul nsw <4 x i32> %868, %872
  %874 = add nuw nsw <4 x i32> %867, <i32 32, i32 32, i32 32, i32 32>
  %875 = add nsw <4 x i32> %874, %873
  %876 = ashr <4 x i32> %875, <i32 6, i32 6, i32 6, i32 6>
  %877 = getelementptr inbounds i8, i8* %775, i64 12
  %878 = bitcast i8* %877 to <4 x i8>*
  %879 = load <4 x i8>, <4 x i8>* %878, align 1
  %880 = zext <4 x i8> %879 to <4 x i32>
  %881 = sub nsw <4 x i32> %876, %880
  %882 = icmp slt <4 x i32> %881, zeroinitializer
  %883 = sub nsw <4 x i32> zeroinitializer, %881
  %884 = select <4 x i1> %882, <4 x i32> %883, <4 x i32> %881
  %885 = add <4 x i32> %884, %858
  %886 = shufflevector <4 x i32> %885, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %887 = add <4 x i32> %885, %886
  %888 = shufflevector <4 x i32> %887, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %889 = add <4 x i32> %887, %888
  %890 = extractelement <4 x i32> %889, i32 0
  %891 = getelementptr inbounds i8, i8* %775, i64 %11
  %892 = getelementptr inbounds i8, i8* %778, i64 16
  %893 = getelementptr inbounds i8, i8* %779, i64 %12
  %894 = getelementptr inbounds i8, i8* %780, i64 %13
  %895 = add nuw nsw i32 %777, 1
  %896 = icmp eq i32 %895, 64
  br i1 %896, label %897, label %774

897:                                              ; preds = %774
  %898 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %890, i32* %898, align 4
  %899 = getelementptr inbounds i8*, i8** %2, i64 3
  %900 = load i8*, i8** %899, align 8
  br label %901

901:                                              ; preds = %897, %901
  %902 = phi i8* [ %0, %897 ], [ %1018, %901 ]
  %903 = phi i32 [ 0, %897 ], [ %1017, %901 ]
  %904 = phi i32 [ 0, %897 ], [ %1022, %901 ]
  %905 = phi i8* [ %4, %897 ], [ %1019, %901 ]
  %906 = phi i8* [ %900, %897 ], [ %1020, %901 ]
  %907 = phi i8* [ %5, %897 ], [ %1021, %901 ]
  %908 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %903, i32 0
  %909 = bitcast i8* %907 to <4 x i8>*
  %910 = load <4 x i8>, <4 x i8>* %909, align 1
  %911 = zext <4 x i8> %910 to <4 x i32>
  %912 = bitcast i8* %905 to <4 x i8>*
  %913 = load <4 x i8>, <4 x i8>* %912, align 1
  %914 = zext <4 x i8> %913 to <4 x i32>
  %915 = mul nuw nsw <4 x i32> %914, %911
  %916 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %911
  %917 = bitcast i8* %906 to <4 x i8>*
  %918 = load <4 x i8>, <4 x i8>* %917, align 1
  %919 = zext <4 x i8> %918 to <4 x i32>
  %920 = mul nsw <4 x i32> %916, %919
  %921 = add nuw nsw <4 x i32> %915, <i32 32, i32 32, i32 32, i32 32>
  %922 = add nsw <4 x i32> %921, %920
  %923 = ashr <4 x i32> %922, <i32 6, i32 6, i32 6, i32 6>
  %924 = bitcast i8* %902 to <4 x i8>*
  %925 = load <4 x i8>, <4 x i8>* %924, align 1
  %926 = zext <4 x i8> %925 to <4 x i32>
  %927 = sub nsw <4 x i32> %923, %926
  %928 = icmp slt <4 x i32> %927, zeroinitializer
  %929 = sub nsw <4 x i32> zeroinitializer, %927
  %930 = select <4 x i1> %928, <4 x i32> %929, <4 x i32> %927
  %931 = add <4 x i32> %930, %908
  %932 = getelementptr inbounds i8, i8* %907, i64 4
  %933 = bitcast i8* %932 to <4 x i8>*
  %934 = load <4 x i8>, <4 x i8>* %933, align 1
  %935 = zext <4 x i8> %934 to <4 x i32>
  %936 = getelementptr inbounds i8, i8* %905, i64 4
  %937 = bitcast i8* %936 to <4 x i8>*
  %938 = load <4 x i8>, <4 x i8>* %937, align 1
  %939 = zext <4 x i8> %938 to <4 x i32>
  %940 = mul nuw nsw <4 x i32> %939, %935
  %941 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %935
  %942 = getelementptr inbounds i8, i8* %906, i64 4
  %943 = bitcast i8* %942 to <4 x i8>*
  %944 = load <4 x i8>, <4 x i8>* %943, align 1
  %945 = zext <4 x i8> %944 to <4 x i32>
  %946 = mul nsw <4 x i32> %941, %945
  %947 = add nuw nsw <4 x i32> %940, <i32 32, i32 32, i32 32, i32 32>
  %948 = add nsw <4 x i32> %947, %946
  %949 = ashr <4 x i32> %948, <i32 6, i32 6, i32 6, i32 6>
  %950 = getelementptr inbounds i8, i8* %902, i64 4
  %951 = bitcast i8* %950 to <4 x i8>*
  %952 = load <4 x i8>, <4 x i8>* %951, align 1
  %953 = zext <4 x i8> %952 to <4 x i32>
  %954 = sub nsw <4 x i32> %949, %953
  %955 = icmp slt <4 x i32> %954, zeroinitializer
  %956 = sub nsw <4 x i32> zeroinitializer, %954
  %957 = select <4 x i1> %955, <4 x i32> %956, <4 x i32> %954
  %958 = add <4 x i32> %957, %931
  %959 = getelementptr inbounds i8, i8* %907, i64 8
  %960 = bitcast i8* %959 to <4 x i8>*
  %961 = load <4 x i8>, <4 x i8>* %960, align 1
  %962 = zext <4 x i8> %961 to <4 x i32>
  %963 = getelementptr inbounds i8, i8* %905, i64 8
  %964 = bitcast i8* %963 to <4 x i8>*
  %965 = load <4 x i8>, <4 x i8>* %964, align 1
  %966 = zext <4 x i8> %965 to <4 x i32>
  %967 = mul nuw nsw <4 x i32> %966, %962
  %968 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %962
  %969 = getelementptr inbounds i8, i8* %906, i64 8
  %970 = bitcast i8* %969 to <4 x i8>*
  %971 = load <4 x i8>, <4 x i8>* %970, align 1
  %972 = zext <4 x i8> %971 to <4 x i32>
  %973 = mul nsw <4 x i32> %968, %972
  %974 = add nuw nsw <4 x i32> %967, <i32 32, i32 32, i32 32, i32 32>
  %975 = add nsw <4 x i32> %974, %973
  %976 = ashr <4 x i32> %975, <i32 6, i32 6, i32 6, i32 6>
  %977 = getelementptr inbounds i8, i8* %902, i64 8
  %978 = bitcast i8* %977 to <4 x i8>*
  %979 = load <4 x i8>, <4 x i8>* %978, align 1
  %980 = zext <4 x i8> %979 to <4 x i32>
  %981 = sub nsw <4 x i32> %976, %980
  %982 = icmp slt <4 x i32> %981, zeroinitializer
  %983 = sub nsw <4 x i32> zeroinitializer, %981
  %984 = select <4 x i1> %982, <4 x i32> %983, <4 x i32> %981
  %985 = add <4 x i32> %984, %958
  %986 = getelementptr inbounds i8, i8* %907, i64 12
  %987 = bitcast i8* %986 to <4 x i8>*
  %988 = load <4 x i8>, <4 x i8>* %987, align 1
  %989 = zext <4 x i8> %988 to <4 x i32>
  %990 = getelementptr inbounds i8, i8* %905, i64 12
  %991 = bitcast i8* %990 to <4 x i8>*
  %992 = load <4 x i8>, <4 x i8>* %991, align 1
  %993 = zext <4 x i8> %992 to <4 x i32>
  %994 = mul nuw nsw <4 x i32> %993, %989
  %995 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %989
  %996 = getelementptr inbounds i8, i8* %906, i64 12
  %997 = bitcast i8* %996 to <4 x i8>*
  %998 = load <4 x i8>, <4 x i8>* %997, align 1
  %999 = zext <4 x i8> %998 to <4 x i32>
  %1000 = mul nsw <4 x i32> %995, %999
  %1001 = add nuw nsw <4 x i32> %994, <i32 32, i32 32, i32 32, i32 32>
  %1002 = add nsw <4 x i32> %1001, %1000
  %1003 = ashr <4 x i32> %1002, <i32 6, i32 6, i32 6, i32 6>
  %1004 = getelementptr inbounds i8, i8* %902, i64 12
  %1005 = bitcast i8* %1004 to <4 x i8>*
  %1006 = load <4 x i8>, <4 x i8>* %1005, align 1
  %1007 = zext <4 x i8> %1006 to <4 x i32>
  %1008 = sub nsw <4 x i32> %1003, %1007
  %1009 = icmp slt <4 x i32> %1008, zeroinitializer
  %1010 = sub nsw <4 x i32> zeroinitializer, %1008
  %1011 = select <4 x i1> %1009, <4 x i32> %1010, <4 x i32> %1008
  %1012 = add <4 x i32> %1011, %985
  %1013 = shufflevector <4 x i32> %1012, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1014 = add <4 x i32> %1012, %1013
  %1015 = shufflevector <4 x i32> %1014, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1016 = add <4 x i32> %1014, %1015
  %1017 = extractelement <4 x i32> %1016, i32 0
  %1018 = getelementptr inbounds i8, i8* %902, i64 %11
  %1019 = getelementptr inbounds i8, i8* %905, i64 16
  %1020 = getelementptr inbounds i8, i8* %906, i64 %12
  %1021 = getelementptr inbounds i8, i8* %907, i64 %13
  %1022 = add nuw nsw i32 %904, 1
  %1023 = icmp eq i32 %1022, 64
  br i1 %1023, label %267, label %901
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_masked_sad64x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %7, 0
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  br i1 %9, label %13, label %65

13:                                               ; preds = %8, %53
  %14 = phi i8* [ %59, %53 ], [ %0, %8 ]
  %15 = phi i32 [ %58, %53 ], [ 0, %8 ]
  %16 = phi i32 [ %63, %53 ], [ 0, %8 ]
  %17 = phi i8* [ %60, %53 ], [ %2, %8 ]
  %18 = phi i8* [ %61, %53 ], [ %4, %8 ]
  %19 = phi i8* [ %62, %53 ], [ %5, %8 ]
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  br label %21

21:                                               ; preds = %21, %13
  %22 = phi i64 [ 0, %13 ], [ %51, %21 ]
  %23 = phi <4 x i32> [ %20, %13 ], [ %50, %21 ]
  %24 = getelementptr inbounds i8, i8* %19, i64 %22
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = getelementptr inbounds i8, i8* %17, i64 %22
  %29 = bitcast i8* %28 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = zext <4 x i8> %30 to <4 x i32>
  %32 = mul nuw nsw <4 x i32> %31, %27
  %33 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %27
  %34 = getelementptr inbounds i8, i8* %18, i64 %22
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = mul nsw <4 x i32> %33, %37
  %39 = add nuw nsw <4 x i32> %32, <i32 32, i32 32, i32 32, i32 32>
  %40 = add nsw <4 x i32> %39, %38
  %41 = ashr <4 x i32> %40, <i32 6, i32 6, i32 6, i32 6>
  %42 = getelementptr inbounds i8, i8* %14, i64 %22
  %43 = bitcast i8* %42 to <4 x i8>*
  %44 = load <4 x i8>, <4 x i8>* %43, align 1
  %45 = zext <4 x i8> %44 to <4 x i32>
  %46 = sub nsw <4 x i32> %41, %45
  %47 = icmp slt <4 x i32> %46, zeroinitializer
  %48 = sub nsw <4 x i32> zeroinitializer, %46
  %49 = select <4 x i1> %47, <4 x i32> %48, <4 x i32> %46
  %50 = add <4 x i32> %49, %23
  %51 = add i64 %22, 4
  %52 = icmp eq i64 %51, 64
  br i1 %52, label %53, label %21, !llvm.loop !53

53:                                               ; preds = %21
  %54 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %55 = add <4 x i32> %50, %54
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %57 = add <4 x i32> %55, %56
  %58 = extractelement <4 x i32> %57, i32 0
  %59 = getelementptr inbounds i8, i8* %14, i64 %10
  %60 = getelementptr inbounds i8, i8* %17, i64 %11
  %61 = getelementptr inbounds i8, i8* %18, i64 64
  %62 = getelementptr inbounds i8, i8* %19, i64 %12
  %63 = add nuw nsw i32 %16, 1
  %64 = icmp eq i32 %63, 16
  br i1 %64, label %117, label %13

65:                                               ; preds = %8, %105
  %66 = phi i8* [ %111, %105 ], [ %0, %8 ]
  %67 = phi i32 [ %110, %105 ], [ 0, %8 ]
  %68 = phi i32 [ %115, %105 ], [ 0, %8 ]
  %69 = phi i8* [ %112, %105 ], [ %4, %8 ]
  %70 = phi i8* [ %113, %105 ], [ %2, %8 ]
  %71 = phi i8* [ %114, %105 ], [ %5, %8 ]
  %72 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %67, i32 0
  br label %73

73:                                               ; preds = %73, %65
  %74 = phi i64 [ 0, %65 ], [ %103, %73 ]
  %75 = phi <4 x i32> [ %72, %65 ], [ %102, %73 ]
  %76 = getelementptr inbounds i8, i8* %71, i64 %74
  %77 = bitcast i8* %76 to <4 x i8>*
  %78 = load <4 x i8>, <4 x i8>* %77, align 1
  %79 = zext <4 x i8> %78 to <4 x i32>
  %80 = getelementptr inbounds i8, i8* %69, i64 %74
  %81 = bitcast i8* %80 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 1
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = mul nuw nsw <4 x i32> %83, %79
  %85 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %79
  %86 = getelementptr inbounds i8, i8* %70, i64 %74
  %87 = bitcast i8* %86 to <4 x i8>*
  %88 = load <4 x i8>, <4 x i8>* %87, align 1
  %89 = zext <4 x i8> %88 to <4 x i32>
  %90 = mul nsw <4 x i32> %85, %89
  %91 = add nuw nsw <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %92 = add nsw <4 x i32> %91, %90
  %93 = ashr <4 x i32> %92, <i32 6, i32 6, i32 6, i32 6>
  %94 = getelementptr inbounds i8, i8* %66, i64 %74
  %95 = bitcast i8* %94 to <4 x i8>*
  %96 = load <4 x i8>, <4 x i8>* %95, align 1
  %97 = zext <4 x i8> %96 to <4 x i32>
  %98 = sub nsw <4 x i32> %93, %97
  %99 = icmp slt <4 x i32> %98, zeroinitializer
  %100 = sub nsw <4 x i32> zeroinitializer, %98
  %101 = select <4 x i1> %99, <4 x i32> %100, <4 x i32> %98
  %102 = add <4 x i32> %101, %75
  %103 = add i64 %74, 4
  %104 = icmp eq i64 %103, 64
  br i1 %104, label %105, label %73, !llvm.loop !54

105:                                              ; preds = %73
  %106 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %107 = add <4 x i32> %102, %106
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %109 = add <4 x i32> %107, %108
  %110 = extractelement <4 x i32> %109, i32 0
  %111 = getelementptr inbounds i8, i8* %66, i64 %10
  %112 = getelementptr inbounds i8, i8* %69, i64 64
  %113 = getelementptr inbounds i8, i8* %70, i64 %11
  %114 = getelementptr inbounds i8, i8* %71, i64 %12
  %115 = add nuw nsw i32 %68, 1
  %116 = icmp eq i32 %115, 16
  br i1 %116, label %117, label %65

117:                                              ; preds = %105, %53
  %118 = phi i32 [ %58, %53 ], [ %110, %105 ]
  ret i32 %118
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_masked_sad64x16x4d_c(i8* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #1 {
  %10 = icmp eq i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %6 to i64
  %14 = load i8*, i8** %2, align 8
  br i1 %10, label %15, label %70

15:                                               ; preds = %9, %55
  %16 = phi i8* [ %61, %55 ], [ %0, %9 ]
  %17 = phi i32 [ %60, %55 ], [ 0, %9 ]
  %18 = phi i32 [ %65, %55 ], [ 0, %9 ]
  %19 = phi i8* [ %62, %55 ], [ %14, %9 ]
  %20 = phi i8* [ %63, %55 ], [ %4, %9 ]
  %21 = phi i8* [ %64, %55 ], [ %5, %9 ]
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  br label %23

23:                                               ; preds = %23, %15
  %24 = phi i64 [ 0, %15 ], [ %53, %23 ]
  %25 = phi <4 x i32> [ %22, %15 ], [ %52, %23 ]
  %26 = getelementptr inbounds i8, i8* %21, i64 %24
  %27 = bitcast i8* %26 to <4 x i8>*
  %28 = load <4 x i8>, <4 x i8>* %27, align 1
  %29 = zext <4 x i8> %28 to <4 x i32>
  %30 = getelementptr inbounds i8, i8* %19, i64 %24
  %31 = bitcast i8* %30 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = zext <4 x i8> %32 to <4 x i32>
  %34 = mul nuw nsw <4 x i32> %33, %29
  %35 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %29
  %36 = getelementptr inbounds i8, i8* %20, i64 %24
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %38 to <4 x i32>
  %40 = mul nsw <4 x i32> %35, %39
  %41 = add nuw nsw <4 x i32> %34, <i32 32, i32 32, i32 32, i32 32>
  %42 = add nsw <4 x i32> %41, %40
  %43 = ashr <4 x i32> %42, <i32 6, i32 6, i32 6, i32 6>
  %44 = getelementptr inbounds i8, i8* %16, i64 %24
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = sub nsw <4 x i32> %43, %47
  %49 = icmp slt <4 x i32> %48, zeroinitializer
  %50 = sub nsw <4 x i32> zeroinitializer, %48
  %51 = select <4 x i1> %49, <4 x i32> %50, <4 x i32> %48
  %52 = add <4 x i32> %51, %25
  %53 = add i64 %24, 4
  %54 = icmp eq i64 %53, 64
  br i1 %54, label %55, label %23, !llvm.loop !55

55:                                               ; preds = %23
  %56 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %57 = add <4 x i32> %52, %56
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %59 = add <4 x i32> %57, %58
  %60 = extractelement <4 x i32> %59, i32 0
  %61 = getelementptr inbounds i8, i8* %16, i64 %11
  %62 = getelementptr inbounds i8, i8* %19, i64 %12
  %63 = getelementptr inbounds i8, i8* %20, i64 64
  %64 = getelementptr inbounds i8, i8* %21, i64 %13
  %65 = add nuw nsw i32 %18, 1
  %66 = icmp eq i32 %65, 16
  br i1 %66, label %67, label %15

67:                                               ; preds = %55
  store i32 %60, i32* %8, align 4
  %68 = getelementptr inbounds i8*, i8** %2, i64 1
  %69 = load i8*, i8** %68, align 8
  br label %128

70:                                               ; preds = %9, %110
  %71 = phi i8* [ %116, %110 ], [ %0, %9 ]
  %72 = phi i32 [ %115, %110 ], [ 0, %9 ]
  %73 = phi i32 [ %120, %110 ], [ 0, %9 ]
  %74 = phi i8* [ %117, %110 ], [ %4, %9 ]
  %75 = phi i8* [ %118, %110 ], [ %14, %9 ]
  %76 = phi i8* [ %119, %110 ], [ %5, %9 ]
  %77 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %72, i32 0
  br label %78

78:                                               ; preds = %78, %70
  %79 = phi i64 [ 0, %70 ], [ %108, %78 ]
  %80 = phi <4 x i32> [ %77, %70 ], [ %107, %78 ]
  %81 = getelementptr inbounds i8, i8* %76, i64 %79
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = getelementptr inbounds i8, i8* %74, i64 %79
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 1
  %88 = zext <4 x i8> %87 to <4 x i32>
  %89 = mul nuw nsw <4 x i32> %88, %84
  %90 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %84
  %91 = getelementptr inbounds i8, i8* %75, i64 %79
  %92 = bitcast i8* %91 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = mul nsw <4 x i32> %90, %94
  %96 = add nuw nsw <4 x i32> %89, <i32 32, i32 32, i32 32, i32 32>
  %97 = add nsw <4 x i32> %96, %95
  %98 = ashr <4 x i32> %97, <i32 6, i32 6, i32 6, i32 6>
  %99 = getelementptr inbounds i8, i8* %71, i64 %79
  %100 = bitcast i8* %99 to <4 x i8>*
  %101 = load <4 x i8>, <4 x i8>* %100, align 1
  %102 = zext <4 x i8> %101 to <4 x i32>
  %103 = sub nsw <4 x i32> %98, %102
  %104 = icmp slt <4 x i32> %103, zeroinitializer
  %105 = sub nsw <4 x i32> zeroinitializer, %103
  %106 = select <4 x i1> %104, <4 x i32> %105, <4 x i32> %103
  %107 = add <4 x i32> %106, %80
  %108 = add i64 %79, 4
  %109 = icmp eq i64 %108, 64
  br i1 %109, label %110, label %78, !llvm.loop !56

110:                                              ; preds = %78
  %111 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %112 = add <4 x i32> %107, %111
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %114 = add <4 x i32> %112, %113
  %115 = extractelement <4 x i32> %114, i32 0
  %116 = getelementptr inbounds i8, i8* %71, i64 %11
  %117 = getelementptr inbounds i8, i8* %74, i64 64
  %118 = getelementptr inbounds i8, i8* %75, i64 %12
  %119 = getelementptr inbounds i8, i8* %76, i64 %13
  %120 = add nuw nsw i32 %73, 1
  %121 = icmp eq i32 %120, 16
  br i1 %121, label %122, label %70

122:                                              ; preds = %110
  store i32 %115, i32* %8, align 4
  %123 = getelementptr inbounds i8*, i8** %2, i64 1
  %124 = load i8*, i8** %123, align 8
  br label %292

125:                                              ; preds = %444, %280
  %126 = phi i32 [ %285, %280 ], [ %449, %444 ]
  %127 = getelementptr inbounds i32, i32* %8, i64 3
  store i32 %126, i32* %127, align 4
  ret void

128:                                              ; preds = %67, %168
  %129 = phi i8* [ %0, %67 ], [ %174, %168 ]
  %130 = phi i32 [ 0, %67 ], [ %173, %168 ]
  %131 = phi i32 [ 0, %67 ], [ %178, %168 ]
  %132 = phi i8* [ %69, %67 ], [ %175, %168 ]
  %133 = phi i8* [ %4, %67 ], [ %176, %168 ]
  %134 = phi i8* [ %5, %67 ], [ %177, %168 ]
  %135 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %130, i32 0
  br label %136

136:                                              ; preds = %136, %128
  %137 = phi i64 [ 0, %128 ], [ %166, %136 ]
  %138 = phi <4 x i32> [ %135, %128 ], [ %165, %136 ]
  %139 = getelementptr inbounds i8, i8* %134, i64 %137
  %140 = bitcast i8* %139 to <4 x i8>*
  %141 = load <4 x i8>, <4 x i8>* %140, align 1
  %142 = zext <4 x i8> %141 to <4 x i32>
  %143 = getelementptr inbounds i8, i8* %132, i64 %137
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = mul nuw nsw <4 x i32> %146, %142
  %148 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %142
  %149 = getelementptr inbounds i8, i8* %133, i64 %137
  %150 = bitcast i8* %149 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = zext <4 x i8> %151 to <4 x i32>
  %153 = mul nsw <4 x i32> %148, %152
  %154 = add nuw nsw <4 x i32> %147, <i32 32, i32 32, i32 32, i32 32>
  %155 = add nsw <4 x i32> %154, %153
  %156 = ashr <4 x i32> %155, <i32 6, i32 6, i32 6, i32 6>
  %157 = getelementptr inbounds i8, i8* %129, i64 %137
  %158 = bitcast i8* %157 to <4 x i8>*
  %159 = load <4 x i8>, <4 x i8>* %158, align 1
  %160 = zext <4 x i8> %159 to <4 x i32>
  %161 = sub nsw <4 x i32> %156, %160
  %162 = icmp slt <4 x i32> %161, zeroinitializer
  %163 = sub nsw <4 x i32> zeroinitializer, %161
  %164 = select <4 x i1> %162, <4 x i32> %163, <4 x i32> %161
  %165 = add <4 x i32> %164, %138
  %166 = add i64 %137, 4
  %167 = icmp eq i64 %166, 64
  br i1 %167, label %168, label %136, !llvm.loop !57

168:                                              ; preds = %136
  %169 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %170 = add <4 x i32> %165, %169
  %171 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %172 = add <4 x i32> %170, %171
  %173 = extractelement <4 x i32> %172, i32 0
  %174 = getelementptr inbounds i8, i8* %129, i64 %11
  %175 = getelementptr inbounds i8, i8* %132, i64 %12
  %176 = getelementptr inbounds i8, i8* %133, i64 64
  %177 = getelementptr inbounds i8, i8* %134, i64 %13
  %178 = add nuw nsw i32 %131, 1
  %179 = icmp eq i32 %178, 16
  br i1 %179, label %180, label %128

180:                                              ; preds = %168
  %181 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %173, i32* %181, align 4
  %182 = getelementptr inbounds i8*, i8** %2, i64 2
  %183 = load i8*, i8** %182, align 8
  br label %184

184:                                              ; preds = %180, %224
  %185 = phi i8* [ %0, %180 ], [ %230, %224 ]
  %186 = phi i32 [ 0, %180 ], [ %229, %224 ]
  %187 = phi i32 [ 0, %180 ], [ %234, %224 ]
  %188 = phi i8* [ %183, %180 ], [ %231, %224 ]
  %189 = phi i8* [ %4, %180 ], [ %232, %224 ]
  %190 = phi i8* [ %5, %180 ], [ %233, %224 ]
  %191 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %186, i32 0
  br label %192

192:                                              ; preds = %192, %184
  %193 = phi i64 [ 0, %184 ], [ %222, %192 ]
  %194 = phi <4 x i32> [ %191, %184 ], [ %221, %192 ]
  %195 = getelementptr inbounds i8, i8* %190, i64 %193
  %196 = bitcast i8* %195 to <4 x i8>*
  %197 = load <4 x i8>, <4 x i8>* %196, align 1
  %198 = zext <4 x i8> %197 to <4 x i32>
  %199 = getelementptr inbounds i8, i8* %188, i64 %193
  %200 = bitcast i8* %199 to <4 x i8>*
  %201 = load <4 x i8>, <4 x i8>* %200, align 1
  %202 = zext <4 x i8> %201 to <4 x i32>
  %203 = mul nuw nsw <4 x i32> %202, %198
  %204 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %198
  %205 = getelementptr inbounds i8, i8* %189, i64 %193
  %206 = bitcast i8* %205 to <4 x i8>*
  %207 = load <4 x i8>, <4 x i8>* %206, align 1
  %208 = zext <4 x i8> %207 to <4 x i32>
  %209 = mul nsw <4 x i32> %204, %208
  %210 = add nuw nsw <4 x i32> %203, <i32 32, i32 32, i32 32, i32 32>
  %211 = add nsw <4 x i32> %210, %209
  %212 = ashr <4 x i32> %211, <i32 6, i32 6, i32 6, i32 6>
  %213 = getelementptr inbounds i8, i8* %185, i64 %193
  %214 = bitcast i8* %213 to <4 x i8>*
  %215 = load <4 x i8>, <4 x i8>* %214, align 1
  %216 = zext <4 x i8> %215 to <4 x i32>
  %217 = sub nsw <4 x i32> %212, %216
  %218 = icmp slt <4 x i32> %217, zeroinitializer
  %219 = sub nsw <4 x i32> zeroinitializer, %217
  %220 = select <4 x i1> %218, <4 x i32> %219, <4 x i32> %217
  %221 = add <4 x i32> %220, %194
  %222 = add i64 %193, 4
  %223 = icmp eq i64 %222, 64
  br i1 %223, label %224, label %192, !llvm.loop !58

224:                                              ; preds = %192
  %225 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %226 = add <4 x i32> %221, %225
  %227 = shufflevector <4 x i32> %226, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %228 = add <4 x i32> %226, %227
  %229 = extractelement <4 x i32> %228, i32 0
  %230 = getelementptr inbounds i8, i8* %185, i64 %11
  %231 = getelementptr inbounds i8, i8* %188, i64 %12
  %232 = getelementptr inbounds i8, i8* %189, i64 64
  %233 = getelementptr inbounds i8, i8* %190, i64 %13
  %234 = add nuw nsw i32 %187, 1
  %235 = icmp eq i32 %234, 16
  br i1 %235, label %236, label %184

236:                                              ; preds = %224
  %237 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %229, i32* %237, align 4
  %238 = getelementptr inbounds i8*, i8** %2, i64 3
  %239 = load i8*, i8** %238, align 8
  br label %240

240:                                              ; preds = %236, %280
  %241 = phi i8* [ %0, %236 ], [ %286, %280 ]
  %242 = phi i32 [ 0, %236 ], [ %285, %280 ]
  %243 = phi i32 [ 0, %236 ], [ %290, %280 ]
  %244 = phi i8* [ %239, %236 ], [ %287, %280 ]
  %245 = phi i8* [ %4, %236 ], [ %288, %280 ]
  %246 = phi i8* [ %5, %236 ], [ %289, %280 ]
  %247 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %242, i32 0
  br label %248

248:                                              ; preds = %248, %240
  %249 = phi i64 [ 0, %240 ], [ %278, %248 ]
  %250 = phi <4 x i32> [ %247, %240 ], [ %277, %248 ]
  %251 = getelementptr inbounds i8, i8* %246, i64 %249
  %252 = bitcast i8* %251 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %253 to <4 x i32>
  %255 = getelementptr inbounds i8, i8* %244, i64 %249
  %256 = bitcast i8* %255 to <4 x i8>*
  %257 = load <4 x i8>, <4 x i8>* %256, align 1
  %258 = zext <4 x i8> %257 to <4 x i32>
  %259 = mul nuw nsw <4 x i32> %258, %254
  %260 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %254
  %261 = getelementptr inbounds i8, i8* %245, i64 %249
  %262 = bitcast i8* %261 to <4 x i8>*
  %263 = load <4 x i8>, <4 x i8>* %262, align 1
  %264 = zext <4 x i8> %263 to <4 x i32>
  %265 = mul nsw <4 x i32> %260, %264
  %266 = add nuw nsw <4 x i32> %259, <i32 32, i32 32, i32 32, i32 32>
  %267 = add nsw <4 x i32> %266, %265
  %268 = ashr <4 x i32> %267, <i32 6, i32 6, i32 6, i32 6>
  %269 = getelementptr inbounds i8, i8* %241, i64 %249
  %270 = bitcast i8* %269 to <4 x i8>*
  %271 = load <4 x i8>, <4 x i8>* %270, align 1
  %272 = zext <4 x i8> %271 to <4 x i32>
  %273 = sub nsw <4 x i32> %268, %272
  %274 = icmp slt <4 x i32> %273, zeroinitializer
  %275 = sub nsw <4 x i32> zeroinitializer, %273
  %276 = select <4 x i1> %274, <4 x i32> %275, <4 x i32> %273
  %277 = add <4 x i32> %276, %250
  %278 = add i64 %249, 4
  %279 = icmp eq i64 %278, 64
  br i1 %279, label %280, label %248, !llvm.loop !59

280:                                              ; preds = %248
  %281 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %282 = add <4 x i32> %277, %281
  %283 = shufflevector <4 x i32> %282, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %284 = add <4 x i32> %282, %283
  %285 = extractelement <4 x i32> %284, i32 0
  %286 = getelementptr inbounds i8, i8* %241, i64 %11
  %287 = getelementptr inbounds i8, i8* %244, i64 %12
  %288 = getelementptr inbounds i8, i8* %245, i64 64
  %289 = getelementptr inbounds i8, i8* %246, i64 %13
  %290 = add nuw nsw i32 %243, 1
  %291 = icmp eq i32 %290, 16
  br i1 %291, label %125, label %240

292:                                              ; preds = %122, %332
  %293 = phi i8* [ %0, %122 ], [ %338, %332 ]
  %294 = phi i32 [ 0, %122 ], [ %337, %332 ]
  %295 = phi i32 [ 0, %122 ], [ %342, %332 ]
  %296 = phi i8* [ %4, %122 ], [ %339, %332 ]
  %297 = phi i8* [ %124, %122 ], [ %340, %332 ]
  %298 = phi i8* [ %5, %122 ], [ %341, %332 ]
  %299 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %294, i32 0
  br label %300

300:                                              ; preds = %300, %292
  %301 = phi i64 [ 0, %292 ], [ %330, %300 ]
  %302 = phi <4 x i32> [ %299, %292 ], [ %329, %300 ]
  %303 = getelementptr inbounds i8, i8* %298, i64 %301
  %304 = bitcast i8* %303 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = zext <4 x i8> %305 to <4 x i32>
  %307 = getelementptr inbounds i8, i8* %296, i64 %301
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = zext <4 x i8> %309 to <4 x i32>
  %311 = mul nuw nsw <4 x i32> %310, %306
  %312 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %306
  %313 = getelementptr inbounds i8, i8* %297, i64 %301
  %314 = bitcast i8* %313 to <4 x i8>*
  %315 = load <4 x i8>, <4 x i8>* %314, align 1
  %316 = zext <4 x i8> %315 to <4 x i32>
  %317 = mul nsw <4 x i32> %312, %316
  %318 = add nuw nsw <4 x i32> %311, <i32 32, i32 32, i32 32, i32 32>
  %319 = add nsw <4 x i32> %318, %317
  %320 = ashr <4 x i32> %319, <i32 6, i32 6, i32 6, i32 6>
  %321 = getelementptr inbounds i8, i8* %293, i64 %301
  %322 = bitcast i8* %321 to <4 x i8>*
  %323 = load <4 x i8>, <4 x i8>* %322, align 1
  %324 = zext <4 x i8> %323 to <4 x i32>
  %325 = sub nsw <4 x i32> %320, %324
  %326 = icmp slt <4 x i32> %325, zeroinitializer
  %327 = sub nsw <4 x i32> zeroinitializer, %325
  %328 = select <4 x i1> %326, <4 x i32> %327, <4 x i32> %325
  %329 = add <4 x i32> %328, %302
  %330 = add i64 %301, 4
  %331 = icmp eq i64 %330, 64
  br i1 %331, label %332, label %300, !llvm.loop !60

332:                                              ; preds = %300
  %333 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %334 = add <4 x i32> %329, %333
  %335 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %336 = add <4 x i32> %334, %335
  %337 = extractelement <4 x i32> %336, i32 0
  %338 = getelementptr inbounds i8, i8* %293, i64 %11
  %339 = getelementptr inbounds i8, i8* %296, i64 64
  %340 = getelementptr inbounds i8, i8* %297, i64 %12
  %341 = getelementptr inbounds i8, i8* %298, i64 %13
  %342 = add nuw nsw i32 %295, 1
  %343 = icmp eq i32 %342, 16
  br i1 %343, label %344, label %292

344:                                              ; preds = %332
  %345 = getelementptr inbounds i32, i32* %8, i64 1
  store i32 %337, i32* %345, align 4
  %346 = getelementptr inbounds i8*, i8** %2, i64 2
  %347 = load i8*, i8** %346, align 8
  br label %348

348:                                              ; preds = %344, %388
  %349 = phi i8* [ %0, %344 ], [ %394, %388 ]
  %350 = phi i32 [ 0, %344 ], [ %393, %388 ]
  %351 = phi i32 [ 0, %344 ], [ %398, %388 ]
  %352 = phi i8* [ %4, %344 ], [ %395, %388 ]
  %353 = phi i8* [ %347, %344 ], [ %396, %388 ]
  %354 = phi i8* [ %5, %344 ], [ %397, %388 ]
  %355 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %350, i32 0
  br label %356

356:                                              ; preds = %356, %348
  %357 = phi i64 [ 0, %348 ], [ %386, %356 ]
  %358 = phi <4 x i32> [ %355, %348 ], [ %385, %356 ]
  %359 = getelementptr inbounds i8, i8* %354, i64 %357
  %360 = bitcast i8* %359 to <4 x i8>*
  %361 = load <4 x i8>, <4 x i8>* %360, align 1
  %362 = zext <4 x i8> %361 to <4 x i32>
  %363 = getelementptr inbounds i8, i8* %352, i64 %357
  %364 = bitcast i8* %363 to <4 x i8>*
  %365 = load <4 x i8>, <4 x i8>* %364, align 1
  %366 = zext <4 x i8> %365 to <4 x i32>
  %367 = mul nuw nsw <4 x i32> %366, %362
  %368 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %362
  %369 = getelementptr inbounds i8, i8* %353, i64 %357
  %370 = bitcast i8* %369 to <4 x i8>*
  %371 = load <4 x i8>, <4 x i8>* %370, align 1
  %372 = zext <4 x i8> %371 to <4 x i32>
  %373 = mul nsw <4 x i32> %368, %372
  %374 = add nuw nsw <4 x i32> %367, <i32 32, i32 32, i32 32, i32 32>
  %375 = add nsw <4 x i32> %374, %373
  %376 = ashr <4 x i32> %375, <i32 6, i32 6, i32 6, i32 6>
  %377 = getelementptr inbounds i8, i8* %349, i64 %357
  %378 = bitcast i8* %377 to <4 x i8>*
  %379 = load <4 x i8>, <4 x i8>* %378, align 1
  %380 = zext <4 x i8> %379 to <4 x i32>
  %381 = sub nsw <4 x i32> %376, %380
  %382 = icmp slt <4 x i32> %381, zeroinitializer
  %383 = sub nsw <4 x i32> zeroinitializer, %381
  %384 = select <4 x i1> %382, <4 x i32> %383, <4 x i32> %381
  %385 = add <4 x i32> %384, %358
  %386 = add i64 %357, 4
  %387 = icmp eq i64 %386, 64
  br i1 %387, label %388, label %356, !llvm.loop !61

388:                                              ; preds = %356
  %389 = shufflevector <4 x i32> %385, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %390 = add <4 x i32> %385, %389
  %391 = shufflevector <4 x i32> %390, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %392 = add <4 x i32> %390, %391
  %393 = extractelement <4 x i32> %392, i32 0
  %394 = getelementptr inbounds i8, i8* %349, i64 %11
  %395 = getelementptr inbounds i8, i8* %352, i64 64
  %396 = getelementptr inbounds i8, i8* %353, i64 %12
  %397 = getelementptr inbounds i8, i8* %354, i64 %13
  %398 = add nuw nsw i32 %351, 1
  %399 = icmp eq i32 %398, 16
  br i1 %399, label %400, label %348

400:                                              ; preds = %388
  %401 = getelementptr inbounds i32, i32* %8, i64 2
  store i32 %393, i32* %401, align 4
  %402 = getelementptr inbounds i8*, i8** %2, i64 3
  %403 = load i8*, i8** %402, align 8
  br label %404

404:                                              ; preds = %400, %444
  %405 = phi i8* [ %0, %400 ], [ %450, %444 ]
  %406 = phi i32 [ 0, %400 ], [ %449, %444 ]
  %407 = phi i32 [ 0, %400 ], [ %454, %444 ]
  %408 = phi i8* [ %4, %400 ], [ %451, %444 ]
  %409 = phi i8* [ %403, %400 ], [ %452, %444 ]
  %410 = phi i8* [ %5, %400 ], [ %453, %444 ]
  %411 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %406, i32 0
  br label %412

412:                                              ; preds = %412, %404
  %413 = phi i64 [ 0, %404 ], [ %442, %412 ]
  %414 = phi <4 x i32> [ %411, %404 ], [ %441, %412 ]
  %415 = getelementptr inbounds i8, i8* %410, i64 %413
  %416 = bitcast i8* %415 to <4 x i8>*
  %417 = load <4 x i8>, <4 x i8>* %416, align 1
  %418 = zext <4 x i8> %417 to <4 x i32>
  %419 = getelementptr inbounds i8, i8* %408, i64 %413
  %420 = bitcast i8* %419 to <4 x i8>*
  %421 = load <4 x i8>, <4 x i8>* %420, align 1
  %422 = zext <4 x i8> %421 to <4 x i32>
  %423 = mul nuw nsw <4 x i32> %422, %418
  %424 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %418
  %425 = getelementptr inbounds i8, i8* %409, i64 %413
  %426 = bitcast i8* %425 to <4 x i8>*
  %427 = load <4 x i8>, <4 x i8>* %426, align 1
  %428 = zext <4 x i8> %427 to <4 x i32>
  %429 = mul nsw <4 x i32> %424, %428
  %430 = add nuw nsw <4 x i32> %423, <i32 32, i32 32, i32 32, i32 32>
  %431 = add nsw <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 6, i32 6, i32 6, i32 6>
  %433 = getelementptr inbounds i8, i8* %405, i64 %413
  %434 = bitcast i8* %433 to <4 x i8>*
  %435 = load <4 x i8>, <4 x i8>* %434, align 1
  %436 = zext <4 x i8> %435 to <4 x i32>
  %437 = sub nsw <4 x i32> %432, %436
  %438 = icmp slt <4 x i32> %437, zeroinitializer
  %439 = sub nsw <4 x i32> zeroinitializer, %437
  %440 = select <4 x i1> %438, <4 x i32> %439, <4 x i32> %437
  %441 = add <4 x i32> %440, %414
  %442 = add i64 %413, 4
  %443 = icmp eq i64 %442, 64
  br i1 %443, label %444, label %412, !llvm.loop !62

444:                                              ; preds = %412
  %445 = shufflevector <4 x i32> %441, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %446 = add <4 x i32> %441, %445
  %447 = shufflevector <4 x i32> %446, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %448 = add <4 x i32> %446, %447
  %449 = extractelement <4 x i32> %448, i32 0
  %450 = getelementptr inbounds i8, i8* %405, i64 %11
  %451 = getelementptr inbounds i8, i8* %408, i64 64
  %452 = getelementptr inbounds i8, i8* %409, i64 %12
  %453 = getelementptr inbounds i8, i8* %410, i64 %13
  %454 = add nuw nsw i32 %407, 1
  %455 = icmp eq i32 %454, 16
  br i1 %455, label %125, label %404
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !3}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !3}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !3}
!45 = distinct !{!45, !3}
!46 = distinct !{!46, !3}
!47 = distinct !{!47, !3}
!48 = distinct !{!48, !3}
!49 = distinct !{!49, !3}
!50 = distinct !{!50, !3}
!51 = distinct !{!51, !3}
!52 = distinct !{!52, !3}
!53 = distinct !{!53, !3}
!54 = distinct !{!54, !3}
!55 = distinct !{!55, !3}
!56 = distinct !{!56, !3}
!57 = distinct !{!57, !3}
!58 = distinct !{!58, !3}
!59 = distinct !{!59, !3}
!60 = distinct !{!60, !3}
!61 = distinct !{!61, !3}
!62 = distinct !{!62, !3}
