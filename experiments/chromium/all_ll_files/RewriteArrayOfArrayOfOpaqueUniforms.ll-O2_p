; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteArrayOfArrayOfOpaqueUniforms.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteArrayOfArrayOfOpaqueUniforms.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.66", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.97", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.130", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.124", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.124" = type { %"class.std::__1::__vector_base.125" }
%"class.std::__1::__vector_base.125" = type { i32*, i32*, %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.53" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.46" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.37, i32 }
%union.anon.37 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type { %"class.std::__1::vector.23" }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { i32*, i32*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.28"*, i64, i32, %"class.std::__1::basic_string.29" }
%"class.sh::TVector.28" = type opaque
%"class.std::__1::basic_string.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.32 }
%union.anon.32 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { i32*, i32*, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { i32* }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.58", %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { i64 }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.68" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.73", %"class.std::__1::vector.80", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.88", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"class.std::__1::unique_ptr.82"*, %"class.std::__1::unique_ptr.82"*, %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::unique_ptr.82" = type opaque
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.std::__1::unique_ptr.82"* }
%"class.std::__1::map.88" = type { %"class.std::__1::__tree.89" }
%"class.std::__1::__tree.89" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.90", %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"class.std::__1::map.97" = type { %"class.std::__1::__tree.98" }
%"class.std::__1::__tree.98" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.99", %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.108", %"class.std::__1::map", %"class.std::__1::vector.46", %"class.std::__1::vector.117" }
%"class.std::__1::map.108" = type { %"class.std::__1::__tree.109" }
%"class.std::__1::__tree.109" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.110", %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.124" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::map.130" = type { %"class.std::__1::__tree.131" }
%"class.std::__1::__tree.131" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.132", %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.38", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.38" = type { %"class.std::__1::vector.39" }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.sh::TIntermNode"** }
%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TCompiler"*, %"class.absl::flat_hash_map" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.141", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.148", %"class.std::__1::vector.155", %"class.sh::TVector.38", %"class.std::__1::vector.162" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.143" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.38" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.148" = type { %"class.std::__1::__vector_base.149" }
%"class.std::__1::__vector_base.149" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.150" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.38", %"class.sh::TVector.38" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.155" = type { %"class.std::__1::__vector_base.156" }
%"class.std::__1::__vector_base.156" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.157" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.162" = type { %"class.std::__1::__vector_base.163" }
%"class.std::__1::__vector_base.163" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.164" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.sh::TVariable"*, %"struct.sh::(anonymous namespace)::UniformData" }
%"struct.sh::(anonymous namespace)::UniformData" = type { %"class.sh::TVariable"*, %"class.sh::TVector.22" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.176", i8, [7 x i8] }>
%"class.sh::TVector.176" = type { %"class.std::__1::vector.177" }
%"class.std::__1::vector.177" = type { %"class.std::__1::__vector_base.178" }
%"class.std::__1::__vector_base.178" = type { i32*, i32*, %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.38", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.38" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::(anonymous namespace)::RewriteExpressionTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TCompiler"*, %"class.absl::flat_hash_map"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZNSt3__16vectorIj14pool_allocatorIjEE8__appendEm = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@_ZTVN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*)* @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*)* @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8
@_ZTVN2sh12_GLOBAL__N_126RewriteExpressionTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*)* @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh35RewriteArrayOfArrayOfOpaqueUniformsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", align 8
  %5 = bitcast %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 200, i1 false)
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %4, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %6, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #7
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %4, i64 0, i32 1
  store %"class.sh::TCompiler"* %0, %"class.sh::TCompiler"** %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %9, align 8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %4, i64 0, i32 2, i32 0, i32 0, i32 1
  %11 = bitcast %"union.absl::container_internal::map_slot_type"** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false) #7
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %6) #7
  %12 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %13 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %6, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %12) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %4, i64 0, i32 2, i32 0, i32 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %40, label %19

17:                                               ; preds = %36
  %18 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %18) #15
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %9, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false) #7
  br label %40

19:                                               ; preds = %3, %36
  %20 = phi i64 [ %37, %36 ], [ %15, %3 ]
  %21 = phi i64 [ %38, %36 ], [ 0, %3 ]
  %22 = load i8*, i8** %9, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp sgt i8 %24, -1
  br i1 %25, label %26, label %36

26:                                               ; preds = %19
  %27 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %10, align 8
  %28 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %27, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %29 = load i32*, i32** %28, align 8
  %30 = icmp eq i32* %29, null
  br i1 %30, label %36, label %31

31:                                               ; preds = %26
  %32 = ptrtoint i32* %29 to i64
  %33 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %27, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %34 = bitcast i32** %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = load i64, i64* %14, align 8
  br label %36

36:                                               ; preds = %31, %26, %19
  %37 = phi i64 [ %35, %31 ], [ %20, %26 ], [ %20, %19 ]
  %38 = add i64 %21, 1
  %39 = icmp eq i64 %38, %37
  br i1 %39, label %17, label %19

40:                                               ; preds = %3, %17
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %5) #7
  ret i1 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverserD2Ev(%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %33, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  br label %12

9:                                                ; preds = %29
  %10 = load i8*, i8** %7, align 8
  tail call void @_ZdlPv(i8* %10) #15
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %7, align 8
  %11 = bitcast %"union.absl::container_internal::map_slot_type"** %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false) #7
  br label %33

12:                                               ; preds = %29, %6
  %13 = phi i64 [ %4, %6 ], [ %30, %29 ]
  %14 = phi i64 [ 0, %6 ], [ %31, %29 ]
  %15 = load i8*, i8** %7, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = icmp sgt i8 %17, -1
  br i1 %18, label %19, label %29

19:                                               ; preds = %12
  %20 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %8, align 8
  %21 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %20, i64 %14, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = icmp eq i32* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %19
  %25 = ptrtoint i32* %22 to i64
  %26 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %20, i64 %14, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %27 = bitcast i32** %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = load i64, i64* %3, align 8
  br label %29

29:                                               ; preds = %24, %19, %12
  %30 = phi i64 [ %28, %24 ], [ %13, %19 ], [ %13, %12 ]
  %31 = add i64 %14, 1
  %32 = icmp eq i64 %31, %30
  br i1 %32, label %9, label %12

33:                                               ; preds = %1, %9
  %34 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %34) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverserD0Ev(%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %33, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  br label %12

9:                                                ; preds = %29
  %10 = load i8*, i8** %7, align 8
  tail call void @_ZdlPv(i8* %10) #15
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %7, align 8
  %11 = bitcast %"union.absl::container_internal::map_slot_type"** %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false) #7
  br label %33

12:                                               ; preds = %29, %6
  %13 = phi i64 [ %4, %6 ], [ %30, %29 ]
  %14 = phi i64 [ 0, %6 ], [ %31, %29 ]
  %15 = load i8*, i8** %7, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = icmp sgt i8 %17, -1
  br i1 %18, label %19, label %29

19:                                               ; preds = %12
  %20 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %8, align 8
  %21 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %20, i64 %14, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = icmp eq i32* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %19
  %25 = ptrtoint i32* %22 to i64
  %26 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %20, i64 %14, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %27 = bitcast i32** %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = load i64, i64* %3, align 8
  br label %29

29:                                               ; preds = %24, %19, %12
  %30 = phi i64 [ %28, %24 ], [ %13, %19 ], [ %13, %12 ]
  %31 = add i64 %14, 1
  %32 = icmp eq i64 %31, %30
  br i1 %32, label %9, label %12

33:                                               ; preds = %1, %9
  %34 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %34) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* nocapture, %"class.sh::TIntermSymbol"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 1
  %5 = load %"class.sh::TCompiler"*, %"class.sh::TCompiler"** %4, align 8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 2
  %7 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_138RewriteArrayOfArraySubscriptExpressionEPNS_9TCompilerEPNS_13TIntermBinaryERKN4absl13flat_hash_mapIPKNS_9TVariableENS0_11UniformDataENS5_18container_internal6HashEqIS9_vE4HashENSD_2EqENSt3__19allocatorINSG_4pairIKS9_SA_EEEEEE(%"class.sh::TCompiler"* %5, %"class.sh::TIntermBinary"* %2, %"class.absl::flat_hash_map"* dereferenceable(40) %6)
  %8 = icmp eq %"class.sh::TIntermTyped"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 0
  %11 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %7, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %10, %"class.sh::TIntermNode"* %11, i32 1) #7
  br label %12

12:                                               ; preds = %3, %9
  %13 = phi i1 [ false, %9 ], [ true, %3 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* nocapture readonly, i32, %"class.sh::TIntermFunctionDefinition"* nocapture readnone) unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp ne i64 %5, 0
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_144RewriteArrayOfArrayOfOpaqueUniformsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVariable"*, align 8
  %5 = alloca %"class.sh::ImmutableString", align 8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 0, i32 6
  %8 = load i8, i8* %7, align 4, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %134, label %10

10:                                               ; preds = %3
  %11 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)***
  %12 = load %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)** %12, i64 27
  %14 = load %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)** %13, align 8
  %15 = tail call %"class.sh::TVector.38"* %14(%"class.sh::TIntermDeclaration"* %2) #7
  %16 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %15, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %16, align 8
  %18 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %17, align 8
  %19 = bitcast %"class.sh::TIntermNode"* %18 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %20 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %20, i64 4
  %22 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %21, align 8
  %23 = tail call %"class.sh::TIntermTyped"* %22(%"class.sh::TIntermNode"* %18) #7
  %24 = bitcast %"class.sh::TIntermTyped"* %23 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %25 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %24, align 8
  %26 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %25, i64 31
  %27 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %26, align 8
  %28 = tail call dereferenceable(184) %"class.sh::TType"* %27(%"class.sh::TIntermTyped"* %23) #7
  %29 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %28, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 6
  br i1 %31, label %32, label %134

32:                                               ; preds = %10
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %28, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = add i32 %34, -8
  %36 = icmp ult i32 %35, 43
  %37 = add i32 %34, -51
  %38 = icmp ult i32 %37, 33
  %39 = or i1 %36, %38
  %40 = icmp eq i32 %34, 6
  %41 = or i1 %40, %39
  %42 = add i32 %34, -84
  %43 = icmp ult i32 %42, 6
  %44 = or i1 %43, %41
  br i1 %44, label %45, label %134

45:                                               ; preds = %32
  %46 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %28, i64 0, i32 10, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = icmp ugt i64 %47, 1
  br i1 %48, label %49, label %134

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %23, i64 0, i32 0
  %51 = bitcast %"class.sh::TIntermTyped"* %23 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %52 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %51, align 8
  %53 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %52, i64 19
  %54 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %53, align 8
  %55 = tail call %"class.sh::TIntermSymbol"* %54(%"class.sh::TIntermNode"* %50) #7
  %56 = bitcast %"class.sh::TVariable"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #7
  %57 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %55, i64 0, i32 1
  %58 = bitcast %"class.sh::TVariable"** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %"class.sh::TVariable"** %4 to i64*
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 2, i32 0
  %62 = call fastcc dereferenceable(32) %"struct.sh::(anonymous namespace)::UniformData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"* %61, %"class.sh::TVariable"** nonnull dereferenceable(8) %4)
  %63 = call fastcc dereferenceable(32) %"struct.sh::(anonymous namespace)::UniformData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"* %61, %"class.sh::TVariable"** nonnull dereferenceable(8) %4)
  %64 = getelementptr inbounds %"struct.sh::(anonymous namespace)::UniformData", %"struct.sh::(anonymous namespace)::UniformData"* %63, i64 0, i32 1, i32 0
  %65 = load i64, i64* %46, align 8
  %66 = getelementptr inbounds %"struct.sh::(anonymous namespace)::UniformData", %"struct.sh::(anonymous namespace)::UniformData"* %63, i64 0, i32 1, i32 0, i32 0, i32 1
  %67 = bitcast i32** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::vector.23"* %64 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %68, %70
  %72 = ashr exact i64 %71, 2
  %73 = icmp ugt i64 %65, %72
  %74 = inttoptr i64 %70 to i32*
  %75 = inttoptr i64 %59 to %"class.sh::TSymbol"*
  br i1 %73, label %76, label %78

76:                                               ; preds = %49
  %77 = sub i64 %65, %72
  tail call void @_ZNSt3__16vectorIj14pool_allocatorIjEE8__appendEm(%"class.std::__1::vector.23"* %64, i64 %77) #7
  br label %82

78:                                               ; preds = %49
  %79 = icmp ult i64 %65, %72
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = getelementptr inbounds i32, i32* %74, i64 %65
  store i32* %81, i32** %66, align 8
  br label %82

82:                                               ; preds = %76, %78, %80
  %83 = load i64, i64* %46, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %88, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"struct.sh::(anonymous namespace)::UniformData", %"struct.sh::(anonymous namespace)::UniformData"* %62, i64 0, i32 1, i32 0, i32 0, i32 0
  %87 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %28, i64 0, i32 10, i32 0
  br label %122

88:                                               ; preds = %122, %82
  %89 = phi i32 [ 1, %82 ], [ %130, %122 ]
  %90 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %91 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %90, i64 184) #7
  %92 = bitcast i8* %91 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %92, %"class.sh::TType"* dereferenceable(184) %28) #7
  tail call void @_ZN2sh5TType15toArrayBaseTypeEv(%"class.sh::TType"* %92) #7
  tail call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %92, i32 %89) #7
  %93 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %94 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %93, i64 40) #7
  %95 = bitcast i8* %94 to %"class.sh::TVariable"*
  %96 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser", %"class.sh::(anonymous namespace)::RewriteArrayOfArrayOfOpaqueUniformsTraverser"* %0, i64 0, i32 0, i32 8
  %97 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %96, align 8
  %98 = bitcast %"class.sh::ImmutableString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %98) #7
  %99 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %75) #7
  %100 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 0
  %101 = extractvalue { i8*, i64 } %99, 0
  store i8* %101, i8** %100, align 8
  %102 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 1
  %103 = extractvalue { i8*, i64 } %99, 1
  store i64 %103, i64* %102, align 8
  %104 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %75, i64 0, i32 2
  %105 = load i8, i8* %104, align 4
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %95, %"class.sh::TSymbolTable"* %97, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %5, %"class.sh::TType"* %92, i8 zeroext %105, i8 zeroext 0) #7
  %106 = getelementptr inbounds %"struct.sh::(anonymous namespace)::UniformData", %"struct.sh::(anonymous namespace)::UniformData"* %62, i64 0, i32 0
  %107 = bitcast %"struct.sh::(anonymous namespace)::UniformData"* %62 to i8**
  store i8* %94, i8** %107, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %98) #7
  %108 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %109 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %108, i64 56) #7
  %110 = bitcast i8* %109 to %"class.sh::TIntermDeclaration"*
  %111 = bitcast i8* %109 to i32 (...)***
  %112 = getelementptr inbounds i8, i8* %109, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 16, i1 false) #7
  %113 = getelementptr inbounds i8, i8* %109, i64 24
  %114 = bitcast i8* %113 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %111, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %114, align 8
  %115 = getelementptr inbounds i8, i8* %109, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %115, i8 0, i64 24, i1 false) #7
  %116 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %117 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %116, i64 32) #7
  %118 = bitcast i8* %117 to %"class.sh::TIntermSymbol"*
  %119 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %106, align 8
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %118, %"class.sh::TVariable"* %119) #7
  %120 = bitcast i8* %117 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %110, %"class.sh::TIntermTyped"* %120) #7
  %121 = bitcast i8* %109 to %"class.sh::TIntermNode"*
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %6, %"class.sh::TIntermNode"* %121, i32 1) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #7
  br label %134

122:                                              ; preds = %85, %122
  %123 = phi i64 [ 0, %85 ], [ %131, %122 ]
  %124 = phi i32 [ 1, %85 ], [ %130, %122 ]
  %125 = load i32*, i32** %86, align 8
  %126 = getelementptr inbounds i32, i32* %125, i64 %123
  store i32 %124, i32* %126, align 4
  %127 = load i32*, i32** %87, align 8
  %128 = getelementptr inbounds i32, i32* %127, i64 %123
  %129 = load i32, i32* %128, align 4
  %130 = mul i32 %129, %124
  %131 = add nuw i64 %123, 1
  %132 = load i64, i64* %46, align 8
  %133 = icmp ult i64 %131, %132
  br i1 %133, label %122, label %88

134:                                              ; preds = %32, %88, %10, %45, %3
  %135 = phi i1 [ true, %3 ], [ false, %45 ], [ false, %10 ], [ false, %88 ], [ false, %32 ]
  ret i1 %135
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_138RewriteArrayOfArraySubscriptExpressionEPNS_9TCompilerEPNS_13TIntermBinaryERKN4absl13flat_hash_mapIPKNS_9TVariableENS0_11UniformDataENS5_18container_internal6HashEqIS9_vE4HashENSD_2EqENSt3__19allocatorINSG_4pairIKS9_SA_EEEEEE(%"class.sh::TCompiler"*, %"class.sh::TIntermBinary"*, %"class.absl::flat_hash_map"* dereferenceable(40)) unnamed_addr #6 {
  %4 = alloca %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", align 8
  %5 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 0, i32 0
  %6 = bitcast %"class.sh::TIntermBinary"* %1 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %7, i64 31
  %9 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %8, align 8
  %10 = tail call dereferenceable(184) %"class.sh::TType"* %9(%"class.sh::TIntermExpression"* %5) #7
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, -8
  %14 = icmp ult i32 %13, 43
  %15 = add i32 %12, -51
  %16 = icmp ult i32 %15, 33
  %17 = or i1 %14, %16
  %18 = icmp eq i32 %12, 6
  %19 = or i1 %18, %17
  %20 = add i32 %12, -84
  %21 = icmp ult i32 %20, 6
  %22 = or i1 %21, %19
  br i1 %22, label %23, label %223

23:                                               ; preds = %3, %23
  %24 = phi %"class.sh::TIntermBinary"* [ %39, %23 ], [ %1, %3 ]
  %25 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %24, i64 0, i32 2
  %26 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %26, i64 0, i32 0
  %28 = bitcast %"class.sh::TIntermTyped"* %26 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %29 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %29, i64 19
  %31 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %30, align 8
  %32 = tail call %"class.sh::TIntermSymbol"* %31(%"class.sh::TIntermNode"* %27) #7
  %33 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %25, align 8
  %34 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %33, i64 0, i32 0
  %35 = bitcast %"class.sh::TIntermTyped"* %33 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %36 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %35, align 8
  %37 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %36, i64 13
  %38 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %37, align 8
  %39 = tail call %"class.sh::TIntermBinary"* %38(%"class.sh::TIntermNode"* %34) #7
  %40 = icmp eq %"class.sh::TIntermSymbol"* %32, null
  br i1 %40, label %23, label %41

41:                                               ; preds = %23
  %42 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %32, i64 0, i32 1
  %43 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %42, align 8
  %44 = ptrtoint %"class.sh::TVariable"* %43 to i64
  %45 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %46 = add i64 %45, %44
  %47 = zext i64 %46 to i128
  %48 = mul nuw i128 %47, 11376068507788127593
  %49 = lshr i128 %48, 64
  %50 = xor i128 %49, %48
  %51 = trunc i128 %50 to i64
  %52 = add i64 %51, %44
  %53 = zext i64 %52 to i128
  %54 = mul nuw i128 %53, 11376068507788127593
  %55 = lshr i128 %54, 64
  %56 = xor i128 %55, %54
  %57 = trunc i128 %56 to i64
  %58 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %2, i64 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %2, i64 0, i32 0, i32 0, i32 3
  %61 = load i64, i64* %60, align 8
  %62 = lshr i64 %57, 7
  %63 = ptrtoint i8* %59 to i64
  %64 = lshr i64 %63, 12
  %65 = xor i64 %62, %64
  %66 = trunc i128 %56 to i8
  %67 = and i8 %66, 127
  %68 = insertelement <16 x i8> undef, i8 %67, i32 0
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> zeroinitializer
  %70 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %2, i64 0, i32 0, i32 0, i32 1
  %71 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %70, align 8
  br label %72

72:                                               ; preds = %101, %41
  %73 = phi i64 [ %65, %41 ], [ %103, %101 ]
  %74 = phi i64 [ 0, %41 ], [ %102, %101 ]
  %75 = and i64 %73, %61
  %76 = getelementptr inbounds i8, i8* %59, i64 %75
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = icmp eq <16 x i8> %69, %78
  %80 = bitcast <16 x i1> %79 to i16
  %81 = icmp eq i16 %80, 0
  br i1 %81, label %97, label %82

82:                                               ; preds = %72
  %83 = zext i16 %80 to i32
  br label %84

84:                                               ; preds = %93, %82
  %85 = phi i32 [ %83, %82 ], [ %95, %93 ]
  %86 = tail call i32 @llvm.cttz.i32(i32 %85, i1 false) #7, !range !3
  %87 = zext i32 %86 to i64
  %88 = add i64 %75, %87
  %89 = and i64 %88, %61
  %90 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %71, i64 %89, i32 0, i32 0
  %91 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %90, align 8
  %92 = icmp eq %"class.sh::TVariable"* %91, %43
  br i1 %92, label %104, label %93, !prof !4

93:                                               ; preds = %84
  %94 = add i32 %85, -1
  %95 = and i32 %94, %85
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %84

97:                                               ; preds = %93, %72
  %98 = icmp eq <16 x i8> %78, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %99 = bitcast <16 x i1> %98 to i16
  %100 = icmp eq i16 %99, 0
  br i1 %100, label %101, label %223, !prof !5

101:                                              ; preds = %97
  %102 = add i64 %74, 16
  %103 = add i64 %102, %75
  br label %72

104:                                              ; preds = %84
  %105 = getelementptr inbounds i8, i8* %59, i64 %89
  %106 = icmp ne i8* %105, null
  tail call void @llvm.assume(i1 %106) #7
  %107 = load i8, i8* %105, align 1
  %108 = icmp sgt i8 %107, -1
  br i1 %108, label %110, label %109, !prof !4

109:                                              ; preds = %104
  tail call void @llvm.trap() #7
  unreachable

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %71, i64 %89, i32 0, i32 1, i32 1, i32 0
  %112 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %71, i64 %89, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.std::__1::vector.23"* %111 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = icmp eq i64 %114, %116
  br i1 %117, label %118, label %121

118:                                              ; preds = %110
  %119 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 0) #7
  %120 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %119, i64 0, i32 0, i32 0
  br label %210

121:                                              ; preds = %110
  %122 = bitcast %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %4 to i8*
  %123 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %4, i64 0, i32 0
  %124 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %4, i64 0, i32 0, i32 0
  %125 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %4, i64 0, i32 1
  %126 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %4, i64 0, i32 2
  br label %131

127:                                              ; preds = %185
  %128 = icmp eq i32 %186, 0
  %129 = icmp ne %"class.sh::TIntermTyped"* %187, null
  %130 = and i1 %128, %129
  br i1 %130, label %210, label %202

131:                                              ; preds = %121, %185
  %132 = phi i64 [ %116, %121 ], [ %198, %185 ]
  %133 = phi i64 [ 0, %121 ], [ %196, %185 ]
  %134 = phi %"class.sh::TIntermTyped"* [ null, %121 ], [ %187, %185 ]
  %135 = phi i32 [ 0, %121 ], [ %186, %185 ]
  %136 = phi %"class.sh::TIntermBinary"* [ %1, %121 ], [ %195, %185 ]
  %137 = inttoptr i64 %132 to i32*
  %138 = getelementptr inbounds i32, i32* %137, i64 %133
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %136, i64 0, i32 0, i32 1
  %141 = load i8, i8* %140, align 8
  switch i8 %141, label %185 [
    i8 44, label %142
    i8 45, label %160
  ]

142:                                              ; preds = %131
  %143 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %136, i64 0, i32 3
  %144 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %143, align 8
  %145 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %144, i64 0, i32 0
  %146 = bitcast %"class.sh::TIntermTyped"* %144 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %147 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %146, align 8
  %148 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %147, i64 5
  %149 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %148, align 8
  %150 = call %"class.sh::TIntermConstantUnion"* %149(%"class.sh::TIntermNode"* %145) #7
  %151 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %150, i64 0, i32 1
  %152 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %151, align 8
  %153 = icmp eq %"class.sh::TConstantUnion"* %152, null
  br i1 %153, label %156, label %154

154:                                              ; preds = %142
  %155 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %152) #7
  br label %156

156:                                              ; preds = %142, %154
  %157 = phi i32 [ %155, %154 ], [ 0, %142 ]
  %158 = mul i32 %157, %139
  %159 = add i32 %158, %135
  br label %185

160:                                              ; preds = %131
  %161 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %136, i64 0, i32 3
  %162 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %161, align 8
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %122) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %122, i8 -86, i64 168, i1 false) #7
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %123, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_126RewriteExpressionTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %124, align 8
  store %"class.sh::TCompiler"* %0, %"class.sh::TCompiler"** %125, align 8
  store %"class.absl::flat_hash_map"* %2, %"class.absl::flat_hash_map"** %126, align 8
  %163 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %162, i64 0, i32 0
  %164 = bitcast %"class.sh::TIntermTyped"* %162 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %165 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %164, align 8
  %166 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %165, i64 2
  %167 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %166, align 8
  call void %167(%"class.sh::TIntermNode"* %163, %"class.sh::TIntermTraverser"* nonnull %123) #7
  %168 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %123, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %163) #7
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %123) #7
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %122) #7
  %169 = icmp eq i32 %139, 1
  br i1 %169, label %177, label %170

170:                                              ; preds = %160
  %171 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %172 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %171, i64 240) #7
  %173 = bitcast i8* %172 to %"class.sh::TIntermBinary"*
  %174 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %139) #7
  %175 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %174, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %173, i8 zeroext 15, %"class.sh::TIntermTyped"* %162, %"class.sh::TIntermTyped"* %175) #7
  %176 = bitcast i8* %172 to %"class.sh::TIntermTyped"*
  br label %177

177:                                              ; preds = %160, %170
  %178 = phi %"class.sh::TIntermTyped"* [ %176, %170 ], [ %162, %160 ]
  %179 = icmp eq %"class.sh::TIntermTyped"* %134, null
  br i1 %179, label %185, label %180

180:                                              ; preds = %177
  %181 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %182 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %181, i64 240) #7
  %183 = bitcast i8* %182 to %"class.sh::TIntermBinary"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %183, i8 zeroext 13, %"class.sh::TIntermTyped"* nonnull %134, %"class.sh::TIntermTyped"* %178) #7
  %184 = bitcast i8* %182 to %"class.sh::TIntermTyped"*
  br label %185

185:                                              ; preds = %180, %177, %131, %156
  %186 = phi i32 [ %135, %131 ], [ %159, %156 ], [ %135, %177 ], [ %135, %180 ]
  %187 = phi %"class.sh::TIntermTyped"* [ %134, %131 ], [ %134, %156 ], [ %178, %177 ], [ %184, %180 ]
  %188 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %136, i64 0, i32 2
  %189 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %188, align 8
  %190 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %189, i64 0, i32 0
  %191 = bitcast %"class.sh::TIntermTyped"* %189 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %192 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %191, align 8
  %193 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %192, i64 13
  %194 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %193, align 8
  %195 = call %"class.sh::TIntermBinary"* %194(%"class.sh::TIntermNode"* %190) #7
  %196 = add nuw i64 %133, 1
  %197 = load i64, i64* %113, align 8
  %198 = load i64, i64* %115, align 8
  %199 = sub i64 %197, %198
  %200 = ashr exact i64 %199, 2
  %201 = icmp ult i64 %196, %200
  br i1 %201, label %131, label %127

202:                                              ; preds = %127
  %203 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %186) #7
  %204 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %203, i64 0, i32 0, i32 0
  br i1 %129, label %205, label %210

205:                                              ; preds = %202
  %206 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %207 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %206, i64 240) #7
  %208 = bitcast i8* %207 to %"class.sh::TIntermBinary"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %208, i8 zeroext 13, %"class.sh::TIntermTyped"* %204, %"class.sh::TIntermTyped"* nonnull %187) #7
  %209 = bitcast i8* %207 to %"class.sh::TIntermTyped"*
  br label %210

210:                                              ; preds = %205, %127, %118, %202
  %211 = phi %"class.sh::TIntermTyped"* [ %120, %118 ], [ %204, %202 ], [ %209, %205 ], [ %187, %127 ]
  %212 = phi i8 [ 44, %118 ], [ 44, %202 ], [ 45, %205 ], [ 45, %127 ]
  %213 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %214 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %213, i64 240) #7
  %215 = bitcast i8* %214 to %"class.sh::TIntermBinary"*
  %216 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %217 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %216, i64 32) #7
  %218 = bitcast i8* %217 to %"class.sh::TIntermSymbol"*
  %219 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %71, i64 %89, i32 0, i32 1, i32 0
  %220 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %219, align 8
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %218, %"class.sh::TVariable"* %220) #7
  %221 = bitcast i8* %217 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %215, i8 zeroext %212, %"class.sh::TIntermTyped"* %221, %"class.sh::TIntermTyped"* %211) #7
  %222 = bitcast i8* %214 to %"class.sh::TIntermTyped"*
  br label %223

223:                                              ; preds = %97, %3, %210
  %224 = phi %"class.sh::TIntermTyped"* [ %222, %210 ], [ null, %3 ], [ null, %97 ]
  ret %"class.sh::TIntermTyped"* %224
}

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #10

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverserD0Ev(%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* nocapture, %"class.sh::TIntermSymbol"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_126RewriteExpressionTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::RewriteExpressionTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 1
  %5 = load %"class.sh::TCompiler"*, %"class.sh::TCompiler"** %4, align 8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 2
  %7 = load %"class.absl::flat_hash_map"*, %"class.absl::flat_hash_map"** %6, align 8
  %8 = tail call fastcc %"class.sh::TIntermTyped"* @_ZN2sh12_GLOBAL__N_138RewriteArrayOfArraySubscriptExpressionEPNS_9TCompilerEPNS_13TIntermBinaryERKN4absl13flat_hash_mapIPKNS_9TVariableENS0_11UniformDataENS5_18container_internal6HashEqIS9_vE4HashENSD_2EqENSt3__19allocatorINSG_4pairIKS9_SA_EEEEEE(%"class.sh::TCompiler"* %5, %"class.sh::TIntermBinary"* %2, %"class.absl::flat_hash_map"* dereferenceable(40) %7)
  %9 = icmp eq %"class.sh::TIntermTyped"* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteExpressionTraverser", %"class.sh::(anonymous namespace)::RewriteExpressionTraverser"* %0, i64 0, i32 0
  %12 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %8, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %11, %"class.sh::TIntermNode"* %12, i32 1) #7
  br label %13

13:                                               ; preds = %3, %10
  %14 = phi i1 [ false, %10 ], [ true, %3 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc dereferenceable(32) %"struct.sh::(anonymous namespace)::UniformData"* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEEixIS6_S9_EEDTclsrT0_5valueclL_ZNSE_9addressofISI_EEPT_RSO_EclL_ZNSE_7declvalIRSI_EEDTclsr3std3__1E9__declvalISO_ELi0EEEvEEEEERKSO_(%"class.absl::container_internal::raw_hash_map"*, %"class.sh::TVariable"** nocapture readonly dereferenceable(8)) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0
  %4 = bitcast %"class.sh::TVariable"** %1 to i64*
  %5 = load i64, i64* %4, align 8, !noalias !6
  %6 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8, !noalias !6
  %7 = add i64 %6, %5
  %8 = zext i64 %7 to i128
  %9 = mul nuw i128 %8, 11376068507788127593
  %10 = lshr i128 %9, 64
  %11 = xor i128 %10, %9
  %12 = trunc i128 %11 to i64
  %13 = add i64 %5, %12
  %14 = zext i64 %13 to i128
  %15 = mul nuw i128 %14, 11376068507788127593
  %16 = lshr i128 %15, 64
  %17 = xor i128 %16, %15
  %18 = trunc i128 %17 to i64
  %19 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8, !noalias !6
  %21 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 3
  %22 = load i64, i64* %21, align 8, !noalias !6
  %23 = lshr i64 %18, 7
  %24 = ptrtoint i8* %20 to i64
  %25 = lshr i64 %24, 12
  %26 = xor i64 %23, %25
  %27 = trunc i128 %17 to i8
  %28 = and i8 %27, 127
  %29 = insertelement <16 x i8> undef, i8 %28, i32 0
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> zeroinitializer
  %31 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 1
  %32 = inttoptr i64 %5 to %"class.sh::TVariable"*
  br label %33

33:                                               ; preds = %63, %2
  %34 = phi i64 [ %26, %2 ], [ %65, %63 ]
  %35 = phi i64 [ 0, %2 ], [ %64, %63 ]
  %36 = and i64 %34, %22
  %37 = getelementptr inbounds i8, i8* %20, i64 %36
  %38 = bitcast i8* %37 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1, !noalias !6
  %40 = icmp eq <16 x i8> %30, %39
  %41 = bitcast <16 x i1> %40 to i16
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %33
  %44 = zext i16 %41 to i32
  %45 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %31, align 8, !noalias !6
  br label %46

46:                                               ; preds = %55, %43
  %47 = phi i32 [ %44, %43 ], [ %57, %55 ]
  %48 = tail call i32 @llvm.cttz.i32(i32 %47, i1 false) #7, !range !3
  %49 = zext i32 %48 to i64
  %50 = add i64 %36, %49
  %51 = and i64 %50, %22
  %52 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %45, i64 %51, i32 0, i32 0
  %53 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %52, align 8, !noalias !6
  %54 = icmp eq %"class.sh::TVariable"* %53, %32
  br i1 %54, label %76, label %55, !prof !4

55:                                               ; preds = %46
  %56 = add i32 %47, -1
  %57 = and i32 %56, %47
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %46

59:                                               ; preds = %55, %33
  %60 = icmp eq <16 x i8> %39, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %61 = bitcast <16 x i1> %60 to i16
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %63, label %66, !prof !5

63:                                               ; preds = %59
  %64 = add i64 %35, 16
  %65 = add i64 %64, %36
  br label %33

66:                                               ; preds = %59
  %67 = tail call fastcc i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %3, i64 %18) #7, !noalias !6
  %68 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %31, align 8, !noalias !6
  %69 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %68, i64 %67
  %70 = load i64, i64* %4, align 8, !noalias !6
  %71 = bitcast %"union.absl::container_internal::map_slot_type"* %69 to i64*
  store i64 %70, i64* %71, align 8, !noalias !6
  %72 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %68, i64 %67, i32 0, i32 1
  %73 = bitcast %"struct.sh::(anonymous namespace)::UniformData"* %72 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 32, i1 false) #7, !noalias !6
  %74 = load i8*, i8** %19, align 8, !noalias !6
  %75 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %31, align 8, !noalias !6
  br label %76

76:                                               ; preds = %46, %66
  %77 = phi %"union.absl::container_internal::map_slot_type"* [ %75, %66 ], [ %45, %46 ]
  %78 = phi i8* [ %74, %66 ], [ %20, %46 ]
  %79 = phi i64 [ %67, %66 ], [ %51, %46 ]
  %80 = getelementptr inbounds i8, i8* %78, i64 %79
  %81 = icmp ne i8* %80, null
  tail call void @llvm.assume(i1 %81) #7, !noalias !6
  %82 = load i8, i8* %80, align 1
  %83 = icmp sgt i8 %82, -1
  br i1 %83, label %85, label %84, !prof !4

84:                                               ; preds = %76
  tail call void @llvm.trap() #7
  unreachable

85:                                               ; preds = %76
  %86 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %77, i64 %79, i32 0, i32 1
  ret %"struct.sh::(anonymous namespace)::UniformData"* %86
}

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

declare void @_ZN2sh5TType15toArrayBaseTypeEv(%"class.sh::TType"*) local_unnamed_addr #2

declare void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"*, i32) local_unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) unnamed_addr #11 align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #7, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !4

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #7
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #7
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #7
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #7, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 40
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #15
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #7
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %122, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %118
  br i1 %24, label %122, label %121

28:                                               ; preds = %25, %118
  %29 = phi i64 [ 0, %25 ], [ %119, %118 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %118

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = add i64 %36, %42
  %44 = zext i64 %43 to i128
  %45 = mul nuw i128 %44, 11376068507788127593
  %46 = lshr i128 %45, 64
  %47 = xor i128 %46, %45
  %48 = trunc i128 %47 to i64
  %49 = load i8*, i8** %3, align 8
  %50 = load i64, i64* %7, align 8
  %51 = lshr i64 %48, 7
  %52 = ptrtoint i8* %49 to i64
  %53 = lshr i64 %52, 12
  %54 = xor i64 %51, %53
  %55 = and i64 %54, %50
  %56 = getelementptr inbounds i8, i8* %49, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %33, %62
  %63 = phi i64 [ %67, %62 ], [ %55, %33 ]
  %64 = phi i64 [ %65, %62 ], [ 0, %33 ]
  %65 = add i64 %64, 16
  %66 = add i64 %65, %63
  %67 = and i64 %66, %50
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = icmp slt <16 x i8> %70, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %72 = bitcast <16 x i1> %71 to i16
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %33
  %75 = phi i64 [ %55, %33 ], [ %67, %62 ]
  %76 = phi i16 [ %60, %33 ], [ %72, %62 ]
  %77 = zext i16 %76 to i32
  %78 = tail call i32 @llvm.cttz.i32(i32 %77, i1 false) #7, !range !3
  %79 = zext i32 %78 to i64
  %80 = add i64 %75, %79
  %81 = and i64 %80, %50
  %82 = trunc i128 %47 to i8
  %83 = and i8 %82, 127
  %84 = getelementptr inbounds i8, i8* %49, i64 %81
  store i8 %83, i8* %84, align 1
  %85 = load i8*, i8** %3, align 8
  %86 = add i64 %81, -15
  %87 = load i64, i64* %7, align 8
  %88 = and i64 %86, %87
  %89 = and i64 %87, 15
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %83, i8* %91, align 1
  %92 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81
  %94 = load i64, i64* %35, align 8
  %95 = bitcast %"union.absl::container_internal::map_slot_type"* %93 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1
  %97 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1
  %98 = bitcast %"struct.sh::(anonymous namespace)::UniformData"* %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"struct.sh::(anonymous namespace)::UniformData"* %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 1
  %102 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 1
  %103 = bitcast %"class.sh::TVector.22"* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 24, i1 false) #7
  %104 = bitcast %"class.sh::TVector.22"* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %"class.sh::TVector.22"* %101 to i64*
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %111 = bitcast i32** %110 to i64*
  store i64 %109, i64* %111, align 8
  %112 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %116 = bitcast i32** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast %"class.sh::TVector.22"* %102 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 24, i1 false) #7
  br label %118

118:                                              ; preds = %28, %74
  %119 = add nuw i64 %29, 1
  %120 = icmp eq i64 %119, %8
  br i1 %120, label %27, label %28

121:                                              ; preds = %27
  tail call void @_ZdlPv(i8* %4) #15
  br label %122

122:                                              ; preds = %2, %27, %121
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) unnamed_addr #11 align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #7
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %189, %1
  %12 = phi i64 [ 0, %1 ], [ %191, %189 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %189
  %20 = phi i64 [ %6, %8 ], [ %192, %189 ]
  %21 = phi i64 [ 0, %8 ], [ %191, %189 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %189

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %21, i32 0
  %30 = bitcast %"struct.std::__1::pair"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = add i64 %31, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = lshr i64 %43, 7
  %45 = lshr i64 %27, 12
  %46 = xor i64 %44, %45
  %47 = and i64 %46, %20
  %48 = getelementptr inbounds i8, i8* %22, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = icmp slt <16 x i8> %50, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = bitcast <16 x i1> %51 to i16
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %26, %54
  %55 = phi i64 [ %59, %54 ], [ %47, %26 ]
  %56 = phi i64 [ %57, %54 ], [ 0, %26 ]
  %57 = add i64 %56, 16
  %58 = add i64 %57, %55
  %59 = and i64 %58, %20
  %60 = getelementptr inbounds i8, i8* %22, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = icmp slt <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %64 = bitcast <16 x i1> %63 to i16
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %54, label %66

66:                                               ; preds = %54, %26
  %67 = phi i64 [ %47, %26 ], [ %59, %54 ]
  %68 = phi i16 [ %52, %26 ], [ %64, %54 ]
  %69 = zext i16 %68 to i32
  %70 = tail call i32 @llvm.cttz.i32(i32 %69, i1 false) #7, !range !3
  %71 = zext i32 %70 to i64
  %72 = add i64 %67, %71
  %73 = and i64 %72, %20
  %74 = sub i64 %73, %47
  %75 = sub i64 %21, %47
  %76 = xor i64 %74, %75
  %77 = and i64 %76, %20
  %78 = icmp ult i64 %77, 16
  br i1 %78, label %79, label %89, !prof !4

79:                                               ; preds = %66
  %80 = trunc i128 %42 to i8
  %81 = and i8 %80, 127
  store i8 %81, i8* %23, align 1
  %82 = load i8*, i8** %2, align 8
  %83 = add i64 %21, -15
  %84 = load i64, i64* %4, align 8
  %85 = and i64 %84, %83
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %81, i8* %88, align 1
  br label %189

89:                                               ; preds = %66
  %90 = getelementptr inbounds i8, i8* %22, i64 %73
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -128
  %93 = trunc i128 %42 to i8
  %94 = and i8 %93, 127
  store i8 %94, i8* %90, align 1
  %95 = load i8*, i8** %2, align 8
  %96 = add i64 %73, -15
  %97 = load i64, i64* %4, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %94, i8* %101, align 1
  %102 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  br i1 %92, label %103, label %140

103:                                              ; preds = %89
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %106 = bitcast %"union.absl::container_internal::map_slot_type"* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"union.absl::container_internal::map_slot_type"* %104 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73, i32 0, i32 1
  %110 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1
  %111 = bitcast %"struct.sh::(anonymous namespace)::UniformData"* %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast %"struct.sh::(anonymous namespace)::UniformData"* %109 to i64*
  store i64 %112, i64* %113, align 8
  %114 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73, i32 0, i32 1, i32 1
  %115 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1
  %116 = bitcast %"class.sh::TVector.22"* %114 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 0, i64 24, i1 false) #7
  %117 = bitcast %"class.sh::TVector.22"* %115 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.sh::TVector.22"* %114 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %121 = bitcast i32** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %124 = bitcast i32** %123 to i64*
  store i64 %122, i64* %124, align 8
  %125 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %126 = bitcast i32** %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %129 = bitcast i32** %128 to i64*
  store i64 %127, i64* %129, align 8
  %130 = bitcast %"class.sh::TVector.22"* %115 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %130, i8 0, i64 24, i1 false) #7
  %131 = load i8*, i8** %2, align 8
  %132 = getelementptr inbounds i8, i8* %131, i64 %21
  store i8 -128, i8* %132, align 1
  %133 = load i8*, i8** %2, align 8
  %134 = add i64 %21, -15
  %135 = load i64, i64* %4, align 8
  %136 = and i64 %135, %134
  %137 = and i64 %135, 15
  %138 = add i64 %136, %137
  %139 = getelementptr inbounds i8, i8* %133, i64 %138
  store i8 -128, i8* %139, align 1
  br label %189

140:                                              ; preds = %89
  %141 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %142 = bitcast %"union.absl::container_internal::map_slot_type"* %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 8
  %144 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1
  %145 = bitcast %"class.sh::TVector.22"* %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 8
  %147 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %148 = bitcast i32** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %"class.sh::TVector.22"* %144 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %150, i8 0, i64 24, i1 false) #7
  %151 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %152 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21
  %153 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73
  %154 = bitcast %"union.absl::container_internal::map_slot_type"* %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"union.absl::container_internal::map_slot_type"* %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21, i32 0, i32 1
  %158 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73, i32 0, i32 1
  %159 = bitcast %"struct.sh::(anonymous namespace)::UniformData"* %158 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = bitcast %"struct.sh::(anonymous namespace)::UniformData"* %157 to i64*
  store i64 %160, i64* %161, align 8
  %162 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21, i32 0, i32 1, i32 1
  %163 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73, i32 0, i32 1, i32 1
  %164 = bitcast %"class.sh::TVector.22"* %162 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %164, i8 0, i64 24, i1 false) #7
  %165 = bitcast %"class.sh::TVector.22"* %163 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"class.sh::TVector.22"* %162 to i64*
  store i64 %166, i64* %167, align 8
  %168 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %169 = bitcast i32** %168 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %172 = bitcast i32** %171 to i64*
  store i64 %170, i64* %172, align 8
  %173 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %174 = bitcast i32** %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %151, i64 %21, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %177 = bitcast i32** %176 to i64*
  store i64 %175, i64* %177, align 8
  %178 = bitcast %"class.sh::TVector.22"* %163 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %178, i8 0, i64 24, i1 false) #7
  %179 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %180 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %179, i64 %73
  %181 = bitcast %"union.absl::container_internal::map_slot_type"* %180 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %181, align 8
  %182 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %179, i64 %73, i32 0, i32 1, i32 1
  %183 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %179, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %184 = bitcast i32** %183 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 16, i1 false) #7
  %185 = bitcast %"class.sh::TVector.22"* %182 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %185, align 8
  %186 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %179, i64 %73, i32 0, i32 1, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %187 = bitcast i32** %186 to i64*
  store i64 %149, i64* %187, align 8
  %188 = add i64 %21, -1
  br label %189

189:                                              ; preds = %79, %140, %103, %19
  %190 = phi i64 [ %21, %19 ], [ %21, %79 ], [ %21, %103 ], [ %188, %140 ]
  %191 = add i64 %190, 1
  %192 = load i64, i64* %4, align 8
  %193 = icmp eq i64 %191, %192
  br i1 %193, label %11, label %19
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #13

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIj14pool_allocatorIjEE8__appendEm(%"class.std::__1::vector.23"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #7
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  ret void

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.23"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.23"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #16
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 4611686018427387903, %38 ]
  %49 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %50 = shl i64 %48, 2
  %51 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %49, i64 %50) #7
  %52 = bitcast i8* %51 to i32*
  br label %53

53:                                               ; preds = %47, %42
  %54 = phi i64 [ %48, %47 ], [ 0, %42 ]
  %55 = phi i32* [ %52, %47 ], [ null, %42 ]
  %56 = getelementptr inbounds i32, i32* %55, i64 %33
  %57 = bitcast i32* %56 to i8*
  %58 = getelementptr inbounds i32, i32* %55, i64 %54
  %59 = getelementptr inbounds i32, i32* %56, i64 %1
  %60 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %57, i8 0, i64 %60, i1 false) #7
  %61 = ptrtoint i32* %58 to i64
  %62 = ptrtoint i32* %59 to i64
  %63 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 0
  %64 = load i32*, i32** %63, align 8
  %65 = ptrtoint i32* %64 to i64
  %66 = load i32*, i32** %6, align 8
  %67 = icmp eq i32* %66, %64
  br i1 %67, label %219, label %68

68:                                               ; preds = %53
  %69 = getelementptr i32, i32* %66, i64 -1
  %70 = ptrtoint i32* %69 to i64
  %71 = sub i64 %70, %65
  %72 = lshr i64 %71, 2
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp ult i64 %73, 8
  br i1 %74, label %167, label %75

75:                                               ; preds = %68
  %76 = getelementptr i32, i32* %66, i64 -1
  %77 = ptrtoint i32* %76 to i64
  %78 = sub i64 %77, %65
  %79 = lshr i64 %78, 2
  %80 = xor i64 %79, -1
  %81 = add nsw i64 %33, %80
  %82 = getelementptr i32, i32* %55, i64 %81
  %83 = xor i64 %79, -1
  %84 = getelementptr i32, i32* %66, i64 %83
  %85 = icmp ult i32* %82, %66
  %86 = icmp ult i32* %84, %56
  %87 = and i1 %85, %86
  br i1 %87, label %167, label %88

88:                                               ; preds = %75
  %89 = and i64 %73, 9223372036854775800
  %90 = sub nsw i64 0, %89
  %91 = getelementptr i32, i32* %56, i64 %90
  %92 = sub nsw i64 0, %89
  %93 = getelementptr i32, i32* %66, i64 %92
  %94 = add nsw i64 %89, -8
  %95 = lshr exact i64 %94, 3
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %94, 0
  br i1 %98, label %145, label %99

99:                                               ; preds = %88
  %100 = sub nuw nsw i64 %96, %97
  %101 = getelementptr i32, i32* %56, i64 -1
  %102 = getelementptr i32, i32* %66, i64 -1
  %103 = getelementptr i32, i32* %56, i64 -1
  %104 = getelementptr i32, i32* %66, i64 -1
  br label %105

105:                                              ; preds = %105, %99
  %106 = phi i64 [ 0, %99 ], [ %140, %105 ]
  %107 = phi i64 [ %100, %99 ], [ %141, %105 ]
  %108 = sub i64 0, %106
  %109 = sub i64 0, %106
  %110 = getelementptr inbounds i32, i32* %101, i64 %108
  %111 = getelementptr inbounds i32, i32* %102, i64 %109
  %112 = getelementptr inbounds i32, i32* %111, i64 -3
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !11
  %115 = getelementptr inbounds i32, i32* %111, i64 -4
  %116 = getelementptr inbounds i32, i32* %115, i64 -3
  %117 = bitcast i32* %116 to <4 x i32>*
  %118 = load <4 x i32>, <4 x i32>* %117, align 4, !alias.scope !11
  %119 = getelementptr inbounds i32, i32* %110, i64 -3
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %120, align 4, !alias.scope !14, !noalias !11
  %121 = getelementptr inbounds i32, i32* %110, i64 -4
  %122 = getelementptr inbounds i32, i32* %121, i64 -3
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %123, align 4, !alias.scope !14, !noalias !11
  %124 = sub nuw nsw i64 -8, %106
  %125 = sub nuw nsw i64 -8, %106
  %126 = getelementptr inbounds i32, i32* %103, i64 %124
  %127 = getelementptr inbounds i32, i32* %104, i64 %125
  %128 = getelementptr inbounds i32, i32* %127, i64 -3
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !alias.scope !11
  %131 = getelementptr inbounds i32, i32* %127, i64 -4
  %132 = getelementptr inbounds i32, i32* %131, i64 -3
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !alias.scope !11
  %135 = getelementptr inbounds i32, i32* %126, i64 -3
  %136 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %136, align 4, !alias.scope !14, !noalias !11
  %137 = getelementptr inbounds i32, i32* %126, i64 -4
  %138 = getelementptr inbounds i32, i32* %137, i64 -3
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %139, align 4, !alias.scope !14, !noalias !11
  %140 = add i64 %106, 16
  %141 = add i64 %107, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %105, !llvm.loop !16

143:                                              ; preds = %105
  %144 = sub nuw nsw i64 -16, %106
  br label %145

145:                                              ; preds = %143, %88
  %146 = phi i64 [ 0, %88 ], [ %144, %143 ]
  %147 = icmp eq i64 %97, 0
  br i1 %147, label %165, label %148

148:                                              ; preds = %145
  %149 = getelementptr i32, i32* %56, i64 -1
  %150 = getelementptr i32, i32* %66, i64 -1
  %151 = getelementptr inbounds i32, i32* %149, i64 %146
  %152 = getelementptr inbounds i32, i32* %150, i64 %146
  %153 = getelementptr inbounds i32, i32* %152, i64 -3
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !alias.scope !11
  %156 = getelementptr inbounds i32, i32* %152, i64 -4
  %157 = getelementptr inbounds i32, i32* %156, i64 -3
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4, !alias.scope !11
  %160 = getelementptr inbounds i32, i32* %151, i64 -3
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %161, align 4, !alias.scope !14, !noalias !11
  %162 = getelementptr inbounds i32, i32* %151, i64 -4
  %163 = getelementptr inbounds i32, i32* %162, i64 -3
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %164, align 4, !alias.scope !14, !noalias !11
  br label %165

165:                                              ; preds = %145, %148
  %166 = icmp eq i64 %73, %89
  br i1 %166, label %219, label %167

167:                                              ; preds = %165, %75, %68
  %168 = phi i32* [ %56, %75 ], [ %56, %68 ], [ %91, %165 ]
  %169 = phi i32* [ %66, %75 ], [ %66, %68 ], [ %93, %165 ]
  %170 = getelementptr i32, i32* %169, i64 -1
  %171 = ptrtoint i32* %170 to i64
  %172 = sub i64 %171, %65
  %173 = lshr i64 %172, 2
  %174 = add nuw nsw i64 %173, 1
  %175 = and i64 %174, 7
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %186, label %177

177:                                              ; preds = %167, %177
  %178 = phi i32* [ %181, %177 ], [ %168, %167 ]
  %179 = phi i32* [ %182, %177 ], [ %169, %167 ]
  %180 = phi i64 [ %184, %177 ], [ %175, %167 ]
  %181 = getelementptr inbounds i32, i32* %178, i64 -1
  %182 = getelementptr inbounds i32, i32* %179, i64 -1
  %183 = load i32, i32* %182, align 4
  store i32 %183, i32* %181, align 4
  %184 = add i64 %180, -1
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %177, !llvm.loop !18

186:                                              ; preds = %177, %167
  %187 = phi i32* [ undef, %167 ], [ %181, %177 ]
  %188 = phi i32* [ %168, %167 ], [ %181, %177 ]
  %189 = phi i32* [ %169, %167 ], [ %182, %177 ]
  %190 = icmp ult i64 %172, 28
  br i1 %190, label %219, label %191

191:                                              ; preds = %186, %191
  %192 = phi i32* [ %215, %191 ], [ %188, %186 ]
  %193 = phi i32* [ %216, %191 ], [ %189, %186 ]
  %194 = getelementptr inbounds i32, i32* %192, i64 -1
  %195 = getelementptr inbounds i32, i32* %193, i64 -1
  %196 = load i32, i32* %195, align 4
  store i32 %196, i32* %194, align 4
  %197 = getelementptr inbounds i32, i32* %192, i64 -2
  %198 = getelementptr inbounds i32, i32* %193, i64 -2
  %199 = load i32, i32* %198, align 4
  store i32 %199, i32* %197, align 4
  %200 = getelementptr inbounds i32, i32* %192, i64 -3
  %201 = getelementptr inbounds i32, i32* %193, i64 -3
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %200, align 4
  %203 = getelementptr inbounds i32, i32* %192, i64 -4
  %204 = getelementptr inbounds i32, i32* %193, i64 -4
  %205 = load i32, i32* %204, align 4
  store i32 %205, i32* %203, align 4
  %206 = getelementptr inbounds i32, i32* %192, i64 -5
  %207 = getelementptr inbounds i32, i32* %193, i64 -5
  %208 = load i32, i32* %207, align 4
  store i32 %208, i32* %206, align 4
  %209 = getelementptr inbounds i32, i32* %192, i64 -6
  %210 = getelementptr inbounds i32, i32* %193, i64 -6
  %211 = load i32, i32* %210, align 4
  store i32 %211, i32* %209, align 4
  %212 = getelementptr inbounds i32, i32* %192, i64 -7
  %213 = getelementptr inbounds i32, i32* %193, i64 -7
  %214 = load i32, i32* %213, align 4
  store i32 %214, i32* %212, align 4
  %215 = getelementptr inbounds i32, i32* %192, i64 -8
  %216 = getelementptr inbounds i32, i32* %193, i64 -8
  %217 = load i32, i32* %216, align 4
  store i32 %217, i32* %215, align 4
  %218 = icmp eq i32* %216, %64
  br i1 %218, label %219, label %191, !llvm.loop !20

219:                                              ; preds = %186, %191, %165, %53
  %220 = phi i32* [ %56, %53 ], [ %91, %165 ], [ %187, %186 ], [ %215, %191 ]
  %221 = ptrtoint i32* %220 to i64
  store i64 %221, i64* %30, align 8
  store i64 %62, i64* %7, align 8
  store i64 %61, i64* %4, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7, !9}
!7 = distinct !{!7, !8, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE16try_emplace_implIRSH_JEEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEEOT_DpOT0_: argument 0"}
!8 = distinct !{!8, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE16try_emplace_implIRSH_JEEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEEOT_DpOT0_"}
!9 = distinct !{!9, !10, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE11try_emplaceIS6_JELi0EEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEERKT_DpOT0_: argument 0"}
!10 = distinct !{!10, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableENS3_12_GLOBAL__N_111UniformDataEEENS0_6HashEqIS6_vE4HashENSB_2EqENSt3__19allocatorINSE_4pairIKS6_S8_EEEEE11try_emplaceIS6_JELi0EEENSG_INS0_12raw_hash_setIS9_SC_SD_SJ_E8iteratorEbEERKT_DpOT0_"}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !17}
