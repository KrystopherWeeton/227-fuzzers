; ModuleID = '../../third_party/skia/src/effects/SkDiscretePathEffect.cpp'
source_filename = "../../third_party/skia/src/effects/SkDiscretePathEffect.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.sk_sp = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.10 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.2*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.10*, %class.SkReadBuffer*)* }
%class.sk_sp.2 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp.2*, i8*, i64, i8*)*, i8* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkDiscretePathEffectImpl = type { %class.SkPathEffectBase.base, float, float, i32 }
%class.SkPathEffectBase.base = type { %class.SkPathEffect.base }
%class.SkPathEffect.base = type { %class.SkFlattenable.base }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.15*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.15*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.15*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.15 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.11", [7 x i8] }>
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.16, i32, i32 }
%class.sk_sp.16 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.17, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.17 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkPathEffectBase = type { %class.SkPathEffect.base, [4 x i8] }
%class.SkPath = type <{ %class.sk_sp.18, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp.18 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt.19, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.20, %class.SkTDArray.21, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt.19 = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.20 = type { i8*, i32, i32 }
%class.SkTDArray.21 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.22 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.22 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.11", [3 x i8] }
%class.SkStrokeRec = type { float, float, float, i32 }
%class.SkPathMeasure = type { %class.SkContourMeasureIter, %class.sk_sp.29 }
%class.SkContourMeasureIter = type { %"class.std::__1::unique_ptr.23" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.SkContourMeasureIter::Impl"* }
%"class.SkContourMeasureIter::Impl" = type opaque
%class.sk_sp.29 = type { %class.SkContourMeasure* }
%class.SkContourMeasure = type <{ %class.SkRefCnt.base, [4 x i8], %class.SkTDArray.30, %class.SkTDArray, float, i8, [3 x i8] }>
%class.SkTDArray.30 = type { %"struct.SkContourMeasure::Segment"*, i32, i32 }
%"struct.SkContourMeasure::Segment" = type { float, i32, i32 }
%"class.SkPathEffectBase::PointData" = type { i32, %struct.SkPoint*, i32, %struct.SkPoint, %struct.SkRect, [4 x i8], %class.SkPath, %class.SkPath, %class.SkPath }
%class.SkMatrix = type { [9 x float], i32 }
%"struct.SkPathEffect::DashInfo" = type { float*, i32, float }

$_ZN24SkDiscretePathEffectImpl10CreateProcER12SkReadBuffer = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

$_ZN24SkDiscretePathEffectImplD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK24SkDiscretePathEffectImpl10getFactoryEv = comdat any

$_ZNK24SkDiscretePathEffectImpl11getTypeNameEv = comdat any

$_ZNK24SkDiscretePathEffectImpl7flattenER13SkWriteBuffer = comdat any

$_ZNK16SkPathEffectBase18getFlattenableTypeEv = comdat any

$_ZNK24SkDiscretePathEffectImpl12onFilterPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRect = comdat any

$_ZNK16SkPathEffectBase10onAsPointsEPNS_9PointDataERK6SkPathRK11SkStrokeRecRK8SkMatrixPK6SkRect = comdat any

$_ZNK16SkPathEffectBase9onAsADashEPN12SkPathEffect8DashInfoE = comdat any

$_ZNK24SkDiscretePathEffectImpl17computeFastBoundsEP6SkRect = comdat any

$_ZTV24SkDiscretePathEffectImpl = comdat any

@.str = private unnamed_addr constant [21 x i8] c"SkDiscretePathEffect\00", align 1
@_ZTV24SkDiscretePathEffectImpl = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%class.SkDiscretePathEffectImpl*)* @_ZN24SkDiscretePathEffectImplD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.10*, %class.SkReadBuffer*)* (%class.SkDiscretePathEffectImpl*)* @_ZNK24SkDiscretePathEffectImpl10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkDiscretePathEffectImpl*)* @_ZNK24SkDiscretePathEffectImpl11getTypeNameEv to i8*), i8* bitcast (void (%class.SkDiscretePathEffectImpl*, %class.SkWriteBuffer*)* @_ZNK24SkDiscretePathEffectImpl7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkPathEffectBase*)* @_ZNK16SkPathEffectBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkDiscretePathEffectImpl*, %class.SkPath*, %class.SkPath*, %class.SkStrokeRec*, %struct.SkRect*)* @_ZNK24SkDiscretePathEffectImpl12onFilterPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRect to i8*), i8* bitcast (i1 (%class.SkPathEffectBase*, %"class.SkPathEffectBase::PointData"*, %class.SkPath*, %class.SkStrokeRec*, %class.SkMatrix*, %struct.SkRect*)* @_ZNK16SkPathEffectBase10onAsPointsEPNS_9PointDataERK6SkPathRK11SkStrokeRecRK8SkMatrixPK6SkRect to i8*), i8* bitcast (i32 (%class.SkPathEffectBase*, %"struct.SkPathEffect::DashInfo"*)* @_ZNK16SkPathEffectBase9onAsADashEPN12SkPathEffect8DashInfoE to i8*), i8* bitcast (i1 (%class.SkDiscretePathEffectImpl*, %struct.SkRect*)* @_ZNK24SkDiscretePathEffectImpl17computeFastBoundsEP6SkRect to i8*)] }, comdat, align 8

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN20SkDiscretePathEffect4MakeEffj(%class.sk_sp* noalias nocapture sret, float, float, i32) local_unnamed_addr #0 align 2 {
  %5 = bitcast float %1 to i32
  %6 = and i32 %5, 2139095040
  %7 = icmp eq i32 %6, 2139095040
  br i1 %7, label %12, label %8

8:                                                ; preds = %4
  %9 = bitcast float %2 to i32
  %10 = and i32 %9, 2139095040
  %11 = icmp eq i32 %10, 2139095040
  br i1 %11, label %12, label %14

12:                                               ; preds = %8, %4
  %13 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkPathEffect* null, %class.SkPathEffect** %13, align 8
  br label %30

14:                                               ; preds = %8
  %15 = fcmp ugt float %1, 0x3F30000000000000
  br i1 %15, label %18, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkPathEffect* null, %class.SkPathEffect** %17, align 8
  br label %30

18:                                               ; preds = %14
  %19 = tail call i8* @_Znwm(i64 24) #9
  %20 = getelementptr inbounds i8, i8* %19, i64 8
  %21 = bitcast i8* %20 to i32*
  store i32 1, i32* %21, align 4
  %22 = bitcast i8* %19 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV24SkDiscretePathEffectImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds i8, i8* %19, i64 12
  %24 = bitcast i8* %23 to float*
  store float %1, float* %24, align 4
  %25 = getelementptr inbounds i8, i8* %19, i64 16
  %26 = bitcast i8* %25 to float*
  store float %2, float* %26, align 8
  %27 = getelementptr inbounds i8, i8* %19, i64 20
  %28 = bitcast i8* %27 to i32*
  store i32 %3, i32* %28, align 4
  %29 = bitcast %class.sk_sp* %0 to i8**
  store i8* %19, i8** %29, align 8
  br label %30

30:                                               ; preds = %18, %16, %12
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20SkDiscretePathEffect20RegisterFlattenablesEv() local_unnamed_addr #2 align 2 {
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), void (%class.sk_sp.10*, %class.SkReadBuffer*)* nonnull @_ZN24SkDiscretePathEffectImpl10CreateProcER12SkReadBuffer) #10
  ret void
}

declare void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8*, void (%class.sk_sp.10*, %class.SkReadBuffer*)*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN24SkDiscretePathEffectImpl10CreateProcER12SkReadBuffer(%class.sk_sp.10* noalias sret, %class.SkReadBuffer* dereferenceable(136)) #2 comdat align 2 {
  %3 = tail call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #10
  %4 = tail call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #10
  %5 = tail call i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer* %1) #10
  %6 = bitcast float %3 to i32
  %7 = and i32 %6, 2139095040
  %8 = icmp eq i32 %7, 2139095040
  br i1 %8, label %27, label %9

9:                                                ; preds = %2
  %10 = bitcast float %4 to i32
  %11 = and i32 %10, 2139095040
  %12 = icmp ne i32 %11, 2139095040
  %13 = fcmp ugt float %3, 0x3F30000000000000
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = tail call i8* @_Znwm(i64 24) #9, !noalias !2
  %17 = getelementptr inbounds i8, i8* %16, i64 8
  %18 = bitcast i8* %17 to i32*
  store i32 1, i32* %18, align 4, !noalias !2
  %19 = bitcast i8* %16 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTV24SkDiscretePathEffectImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %19, align 8, !noalias !2
  %20 = getelementptr inbounds i8, i8* %16, i64 12
  %21 = bitcast i8* %20 to float*
  store float %3, float* %21, align 4, !noalias !2
  %22 = getelementptr inbounds i8, i8* %16, i64 16
  %23 = bitcast i8* %22 to float*
  store float %4, float* %23, align 8, !noalias !2
  %24 = getelementptr inbounds i8, i8* %16, i64 20
  %25 = bitcast i8* %24 to i32*
  store i32 %5, i32* %25, align 4, !noalias !2
  %26 = ptrtoint i8* %16 to i64
  br label %27

27:                                               ; preds = %9, %15, %2
  %28 = phi i64 [ %26, %15 ], [ 0, %9 ], [ 0, %2 ]
  %29 = bitcast %class.sk_sp.10* %0 to i64*
  store i64 %28, i64* %29, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN24SkDiscretePathEffectImplD0Ev(%class.SkDiscretePathEffectImpl*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %class.SkDiscretePathEffectImpl* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #2 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #10
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.10*, %class.SkReadBuffer*)* @_ZNK24SkDiscretePathEffectImpl10getFactoryEv(%class.SkDiscretePathEffectImpl*) unnamed_addr #2 comdat align 2 {
  ret void (%class.sk_sp.10*, %class.SkReadBuffer*)* @_ZN24SkDiscretePathEffectImpl10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK24SkDiscretePathEffectImpl11getTypeNameEv(%class.SkDiscretePathEffectImpl*) unnamed_addr #2 comdat align 2 {
  ret i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK24SkDiscretePathEffectImpl7flattenER13SkWriteBuffer(%class.SkDiscretePathEffectImpl*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %class.SkDiscretePathEffectImpl, %class.SkDiscretePathEffectImpl* %0, i64 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float)***
  %6 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %5, align 8
  %7 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %6, i64 5
  %8 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %7, align 8
  tail call void %8(%class.SkWriteBuffer* %1, float %4) #10
  %9 = getelementptr inbounds %class.SkDiscretePathEffectImpl, %class.SkDiscretePathEffectImpl* %0, i64 0, i32 2
  %10 = load float, float* %9, align 8
  %11 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %5, align 8
  %12 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %11, i64 5
  %13 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %12, align 8
  tail call void %13(%class.SkWriteBuffer* %1, float %10) #10
  %14 = getelementptr inbounds %class.SkDiscretePathEffectImpl, %class.SkDiscretePathEffectImpl* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i32)***
  %17 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %17, i64 9
  %19 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %18, align 8
  tail call void %19(%class.SkWriteBuffer* %1, i32 %15) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK16SkPathEffectBase18getFlattenableTypeEv(%class.SkPathEffectBase*) unnamed_addr #2 comdat align 2 {
  ret i32 5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK24SkDiscretePathEffectImpl12onFilterPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRect(%class.SkDiscretePathEffectImpl*, %class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec*, %struct.SkRect*) unnamed_addr #2 comdat align 2 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.SkPathMeasure, align 8
  %9 = alloca %struct.SkPoint, align 4
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.SkPoint*
  %12 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %3) #10
  %13 = icmp eq i32 %12, 1
  %14 = bitcast %class.SkPathMeasure* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #10
  %15 = bitcast %class.SkPathMeasure* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 16, i1 false)
  call void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure* nonnull %8, %class.SkPath* dereferenceable(16) %2, i1 zeroext %13, float 1.000000e+00) #10
  %16 = getelementptr inbounds %class.SkDiscretePathEffectImpl, %class.SkDiscretePathEffectImpl* %0, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = call float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure* nonnull %8) #10
  %19 = fadd float %18, 5.000000e-01
  %20 = call float @llvm.floor.f32(float %19)
  %21 = fcmp olt float %20, 0x41DFFFFFE0000000
  %22 = select i1 %21, float %20, float 0x41DFFFFFE0000000
  %23 = fcmp ogt float %22, 0xC1DFFFFFE0000000
  %24 = select i1 %23, float %22, float 0xC1DFFFFFE0000000
  %25 = fptosi float %24 to i32
  %26 = xor i32 %17, %25
  %27 = shl i32 %26, 16
  %28 = lshr i32 %26, 16
  %29 = or i32 %27, %28
  %30 = xor i32 %29, %26
  %31 = getelementptr inbounds %class.SkDiscretePathEffectImpl, %class.SkDiscretePathEffectImpl* %0, i64 0, i32 2
  %32 = load float, float* %31, align 8
  %33 = bitcast %struct.SkPoint* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #10
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %34, align 4
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %35, align 4
  %36 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #10
  %37 = bitcast i64* %10 to float*
  store float 0xFFFFFFFFE0000000, float* %37, align 8
  %38 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %11, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %38, align 4
  %39 = getelementptr inbounds %class.SkDiscretePathEffectImpl, %class.SkDiscretePathEffectImpl* %0, i64 0, i32 1
  %40 = select i1 %13, float 3.000000e+00, float 2.000000e+00
  %41 = bitcast i64* %6 to %struct.SkPoint*
  %42 = bitcast i64* %6 to i8*
  %43 = bitcast i64* %6 to float*
  %44 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %41, i64 0, i32 1
  %45 = bitcast i64* %6 to i32*
  %46 = bitcast i64* %7 to %struct.SkPoint*
  %47 = bitcast i64* %7 to i8*
  %48 = bitcast i64* %7 to float*
  %49 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %46, i64 0, i32 1
  %50 = bitcast i64* %7 to i32*
  br label %51

51:                                               ; preds = %141, %5
  %52 = phi i32 [ %30, %5 ], [ %142, %141 ]
  %53 = call float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure* nonnull %8) #10
  %54 = load float, float* %39, align 4
  %55 = fmul float %40, %54
  %56 = fcmp ogt float %55, %53
  br i1 %56, label %57, label %59

57:                                               ; preds = %51
  %58 = call zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure* nonnull %8, float 0.000000e+00, float %53, %class.SkPath* %1, i1 zeroext true) #10
  br label %141

59:                                               ; preds = %51
  %60 = fdiv float %53, %54
  %61 = fadd float %60, 5.000000e-01
  %62 = call float @llvm.floor.f32(float %61)
  %63 = fcmp olt float %62, 0x41DFFFFFE0000000
  %64 = select i1 %63, float %62, float 0x41DFFFFFE0000000
  %65 = fcmp ogt float %64, 0xC1DFFFFFE0000000
  %66 = select i1 %65, float %64, float 0xC1DFFFFFE0000000
  %67 = fptosi float %66 to i32
  %68 = icmp slt i32 %67, 100000
  %69 = select i1 %68, i32 %67, i32 100000
  %70 = sitofp i32 %69 to float
  %71 = fdiv float %53, %70
  %72 = call zeroext i1 @_ZN13SkPathMeasure8isClosedEv(%class.SkPathMeasure* nonnull %8) #10
  br i1 %72, label %73, label %77

73:                                               ; preds = %59
  %74 = add nsw i32 %69, -1
  %75 = fmul float %71, 5.000000e-01
  %76 = fadd float %75, 0.000000e+00
  br label %77

77:                                               ; preds = %73, %59
  %78 = phi i32 [ %74, %73 ], [ %69, %59 ]
  %79 = phi float [ %76, %73 ], [ 0.000000e+00, %59 ]
  %80 = call zeroext i1 @_ZN13SkPathMeasure9getPosTanEfP7SkPointS1_(%class.SkPathMeasure* nonnull %8, float %79, %struct.SkPoint* nonnull %9, %struct.SkPoint* nonnull %11) #10
  br i1 %80, label %81, label %102

81:                                               ; preds = %77
  %82 = mul i32 %52, 1664525
  %83 = add i32 %82, 1013904223
  %84 = ashr i32 %83, 15
  %85 = sitofp i32 %84 to float
  %86 = fmul float %85, 0x3EF0000000000000
  %87 = fmul float %32, %86
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #10
  %88 = load i64, i64* %10, align 8
  %89 = trunc i64 %88 to i32
  %90 = bitcast i32 %89 to float
  %91 = lshr i64 %88, 32
  %92 = trunc i64 %91 to i32
  store i32 %92, i32* %45, align 8
  %93 = fsub float -0.000000e+00, %90
  store float %93, float* %44, align 4
  %94 = call zeroext i1 @_ZN7SkPoint9setLengthEf(%struct.SkPoint* nonnull %41, float %87) #10
  %95 = load float, float* %43, align 8
  %96 = load float, float* %34, align 4
  %97 = fadd float %95, %96
  store float %97, float* %34, align 4
  %98 = load float, float* %44, align 4
  %99 = load float, float* %35, align 4
  %100 = fadd float %98, %99
  store float %100, float* %35, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #10
  %101 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %1, float %97, float %100) #10
  br label %102

102:                                              ; preds = %81, %77
  %103 = phi i32 [ %83, %81 ], [ %52, %77 ]
  %104 = icmp sgt i32 %78, 0
  br i1 %104, label %105, label %136

105:                                              ; preds = %102, %133
  %106 = phi i32 [ %109, %133 ], [ %78, %102 ]
  %107 = phi float [ %110, %133 ], [ %79, %102 ]
  %108 = phi i32 [ %134, %133 ], [ %103, %102 ]
  %109 = add nsw i32 %106, -1
  %110 = fadd float %71, %107
  %111 = call zeroext i1 @_ZN13SkPathMeasure9getPosTanEfP7SkPointS1_(%class.SkPathMeasure* nonnull %8, float %110, %struct.SkPoint* nonnull %9, %struct.SkPoint* nonnull %11) #10
  br i1 %111, label %112, label %133

112:                                              ; preds = %105
  %113 = mul i32 %108, 1664525
  %114 = add i32 %113, 1013904223
  %115 = ashr i32 %114, 15
  %116 = sitofp i32 %115 to float
  %117 = fmul float %116, 0x3EF0000000000000
  %118 = fmul float %32, %117
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  %119 = load i64, i64* %10, align 8
  %120 = trunc i64 %119 to i32
  %121 = bitcast i32 %120 to float
  %122 = lshr i64 %119, 32
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %50, align 8
  %124 = fsub float -0.000000e+00, %121
  store float %124, float* %49, align 4
  %125 = call zeroext i1 @_ZN7SkPoint9setLengthEf(%struct.SkPoint* nonnull %46, float %118) #10
  %126 = load float, float* %48, align 8
  %127 = load float, float* %34, align 4
  %128 = fadd float %126, %127
  store float %128, float* %34, align 4
  %129 = load float, float* %49, align 4
  %130 = load float, float* %35, align 4
  %131 = fadd float %129, %130
  store float %131, float* %35, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  %132 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* %1, float %128, float %131) #10
  br label %133

133:                                              ; preds = %112, %105
  %134 = phi i32 [ %114, %112 ], [ %108, %105 ]
  %135 = icmp sgt i32 %109, 0
  br i1 %135, label %105, label %136

136:                                              ; preds = %133, %102
  %137 = phi i32 [ %103, %102 ], [ %134, %133 ]
  %138 = call zeroext i1 @_ZN13SkPathMeasure8isClosedEv(%class.SkPathMeasure* nonnull %8) #10
  br i1 %138, label %139, label %141

139:                                              ; preds = %136
  %140 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* %1) #10
  br label %141

141:                                              ; preds = %136, %139, %57
  %142 = phi i32 [ %52, %57 ], [ %137, %139 ], [ %137, %136 ]
  %143 = call zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure* nonnull %8) #10
  br i1 %143, label %51, label %144

144:                                              ; preds = %141
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #10
  call void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #10
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK16SkPathEffectBase10onAsPointsEPNS_9PointDataERK6SkPathRK11SkStrokeRecRK8SkMatrixPK6SkRect(%class.SkPathEffectBase*, %"class.SkPathEffectBase::PointData"*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec* dereferenceable(16), %class.SkMatrix* dereferenceable(40), %struct.SkRect*) unnamed_addr #2 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK16SkPathEffectBase9onAsADashEPN12SkPathEffect8DashInfoE(%class.SkPathEffectBase*, %"struct.SkPathEffect::DashInfo"*) unnamed_addr #2 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK24SkDiscretePathEffectImpl17computeFastBoundsEP6SkRect(%class.SkDiscretePathEffectImpl*, %struct.SkRect*) unnamed_addr #2 comdat align 2 {
  %3 = icmp eq %struct.SkRect* %1, null
  br i1 %3, label %16, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.SkDiscretePathEffectImpl, %class.SkDiscretePathEffectImpl* %0, i64 0, i32 2
  %6 = load float, float* %5, align 8
  %7 = tail call float @llvm.fabs.f32(float %6)
  %8 = bitcast %struct.SkRect* %1 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 4
  %10 = insertelement <4 x float> undef, float %7, i32 0
  %11 = shufflevector <4 x float> %10, <4 x float> undef, <4 x i32> zeroinitializer
  %12 = fsub <4 x float> %9, %11
  %13 = fadd <4 x float> %9, %11
  %14 = shufflevector <4 x float> %12, <4 x float> %13, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %15 = bitcast %struct.SkRect* %1 to <4 x float>*
  store <4 x float> %14, <4 x float>* %15, align 4
  br label %16

16:                                               ; preds = %2, %4
  ret i1 true
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure*, %class.SkPath* dereferenceable(16), i1 zeroext, float) unnamed_addr #3

declare float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

declare zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure*, float, float, %class.SkPath*, i1 zeroext) local_unnamed_addr #3

declare zeroext i1 @_ZN13SkPathMeasure8isClosedEv(%class.SkPathMeasure*) local_unnamed_addr #3

declare zeroext i1 @_ZN13SkPathMeasure9getPosTanEfP7SkPointS1_(%class.SkPathMeasure*, float, %struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath*) local_unnamed_addr #3

declare zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure*) unnamed_addr #8

declare i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec*) local_unnamed_addr #3

declare zeroext i1 @_ZN7SkPoint9setLengthEf(%struct.SkPoint*, float) local_unnamed_addr #3

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath*, float, float) local_unnamed_addr #3

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath*, float, float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

declare float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer*) local_unnamed_addr #3

declare i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN20SkDiscretePathEffect4MakeEffj: argument 0"}
!4 = distinct !{!4, !"_ZN20SkDiscretePathEffect4MakeEffj"}
