; ModuleID = '../../third_party/ffmpeg/libavutil/random_seed.c'
source_filename = "../../third_party/ffmpeg/libavutil/random_seed.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVSHA = type opaque

@.str = private unnamed_addr constant [13 x i8] c"/dev/urandom\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"/dev/random\00", align 1
@get_generic_seed.i = internal unnamed_addr global i64 0, align 8
@get_generic_seed.buffer = internal global [512 x i32] zeroinitializer, align 16
@av_sha_size = external local_unnamed_addr constant i32, align 4
@.str.2 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"sizeof(tmp) >= av_sha_size\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"../../third_party/ffmpeg/libavutil/random_seed.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_get_random_seed() local_unnamed_addr #0 {
  %1 = alloca [15 x i64], align 16
  %2 = alloca [20 x i8], align 16
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #6
  store i32 -1431655766, i32* %3, align 4
  %5 = tail call i32 (i8*, i32, ...) @avpriv_open(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 0) #6
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %14, label %7

7:                                                ; preds = %0
  %8 = call i64 @read(i32 %5, i8* nonnull %4, i64 4) #6
  %9 = trunc i64 %8 to i32
  %10 = tail call i32 @close(i32 %5) #6
  %11 = icmp eq i32 %9, 4
  br i1 %11, label %12, label %14

12:                                               ; preds = %7
  %13 = load i32, i32* %3, align 4
  br label %96

14:                                               ; preds = %0, %7
  %15 = tail call i32 (i8*, i32, ...) @avpriv_open(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 0) #6
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %24, label %17

17:                                               ; preds = %14
  %18 = call i64 @read(i32 %15, i8* nonnull %4, i64 4) #6
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @close(i32 %15) #6
  %21 = icmp eq i32 %19, 4
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = load i32, i32* %3, align 4
  br label %96

24:                                               ; preds = %14, %17
  %25 = bitcast [15 x i64]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 120, i1 false) #6
  %26 = bitcast [15 x i64]* %1 to %struct.AVSHA*
  %27 = getelementptr inbounds [20 x i8], [20 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %27) #6
  %28 = getelementptr inbounds [20 x i8], [20 x i8]* %2, i64 0, i64 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 20, i1 false) #6
  %29 = load i64, i64* @get_generic_seed.i, align 8
  %30 = load i32, i32* @av_sha_size, align 4
  %31 = icmp ult i32 %30, 121
  br i1 %31, label %33, label %32

32:                                               ; preds = %24
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0), i32 77) #6
  tail call void @abort() #7
  unreachable

33:                                               ; preds = %24
  %34 = tail call { i32, i32 } asm sideeffect "lfence \0A\09rdtsc  \0A\09", "={ax},={dx},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !2
  %35 = extractvalue { i32, i32 } %34, 0
  %36 = load i32, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @get_generic_seed.buffer, i64 0, i64 13), align 4
  %37 = xor i32 %36, %35
  store i32 %37, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @get_generic_seed.buffer, i64 0, i64 13), align 4
  %38 = tail call { i32, i32 } asm sideeffect "lfence \0A\09rdtsc  \0A\09", "={ax},={dx},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !2
  %39 = extractvalue { i32, i32 } %38, 1
  %40 = load i32, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @get_generic_seed.buffer, i64 0, i64 41), align 4
  %41 = xor i32 %40, %39
  store i32 %41, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @get_generic_seed.buffer, i64 0, i64 41), align 4
  %42 = icmp ne i64 %29, 0
  br label %43

43:                                               ; preds = %80, %33
  %44 = phi i64 [ 0, %33 ], [ %47, %80 ]
  %45 = phi i64 [ 0, %33 ], [ %52, %80 ]
  %46 = phi i64 [ 0, %33 ], [ %82, %80 ]
  %47 = tail call i64 @clock() #6
  %48 = shl i64 %45, 1
  %49 = add i64 %44, 1
  %50 = add i64 %49, %48
  %51 = icmp slt i64 %50, %47
  %52 = sub nsw i64 %47, %44
  br i1 %51, label %63, label %53

53:                                               ; preds = %43
  %54 = load i64, i64* @get_generic_seed.i, align 8
  %55 = and i64 %54, 511
  %56 = getelementptr inbounds [512 x i32], [512 x i32]* @get_generic_seed.buffer, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = mul i32 %57, 1664525
  %59 = srem i64 %52, 3294638521
  %60 = trunc i64 %59 to i32
  %61 = add i32 %60, 1013904223
  %62 = add i32 %61, %58
  store i32 %62, i32* %56, align 4
  br label %80

63:                                               ; preds = %43
  %64 = srem i64 %52, 3294638521
  %65 = load i64, i64* @get_generic_seed.i, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* @get_generic_seed.i, align 8
  %67 = and i64 %66, 511
  %68 = getelementptr inbounds [512 x i32], [512 x i32]* @get_generic_seed.buffer, i64 0, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = trunc i64 %64 to i32
  %71 = add i32 %69, %70
  store i32 %71, i32* %68, align 4
  %72 = sub nsw i64 %47, %46
  %73 = icmp sgt i64 %72, 31249
  br i1 %73, label %74, label %80

74:                                               ; preds = %63
  %75 = sub i64 %66, %29
  %76 = icmp ugt i64 %75, 4
  %77 = and i1 %42, %76
  %78 = icmp ugt i64 %75, 64
  %79 = or i1 %78, %77
  br i1 %79, label %83, label %80

80:                                               ; preds = %74, %63, %53
  %81 = icmp eq i64 %46, 0
  %82 = select i1 %81, i64 %47, i64 %46
  br label %43

83:                                               ; preds = %74
  %84 = tail call { i32, i32 } asm sideeffect "lfence \0A\09rdtsc  \0A\09", "={ax},={dx},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !2
  %85 = extractvalue { i32, i32 } %84, 0
  %86 = load i32, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @get_generic_seed.buffer, i64 0, i64 111), align 4
  %87 = add i32 %86, %85
  store i32 %87, i32* getelementptr inbounds ([512 x i32], [512 x i32]* @get_generic_seed.buffer, i64 0, i64 111), align 4
  %88 = call i32 @av_sha_init(%struct.AVSHA* nonnull %26, i32 160) #6
  call void @av_sha_update(%struct.AVSHA* nonnull %26, i8* bitcast ([512 x i32]* @get_generic_seed.buffer to i8*), i32 2048) #6
  call void @av_sha_final(%struct.AVSHA* nonnull %26, i8* nonnull %27) #6
  %89 = bitcast [20 x i8]* %2 to i32*
  %90 = load i32, i32* %89, align 16
  %91 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %90) #8, !srcloc !3
  %92 = bitcast i8* %28 to i32*
  %93 = load i32, i32* %92, align 16
  %94 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %93) #8, !srcloc !3
  %95 = add i32 %94, %91
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %25) #6
  br label %96

96:                                               ; preds = %83, %22, %12
  %97 = phi i32 [ %13, %12 ], [ %23, %22 ], [ %95, %83 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #6
  ret i32 %97
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @avpriv_open(i8*, i32, ...) local_unnamed_addr #2

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #3

declare i32 @close(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nounwind
declare i64 @clock() local_unnamed_addr #5

declare i32 @av_sha_init(%struct.AVSHA*, i32) local_unnamed_addr #2

declare void @av_sha_update(%struct.AVSHA*, i8*, i32) local_unnamed_addr #2

declare void @av_sha_final(%struct.AVSHA*, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1415298, i32 1415308, i32 1415350}
!3 = !{i32 1620118}
