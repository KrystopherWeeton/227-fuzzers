; ModuleID = '../../third_party/pdfium/core/fxcrt/cfx_utf8encoder.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/cfx_utf8encoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_UTF8Encoder = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZZN15CFX_UTF8Encoder5InputEwE6prefix = internal unnamed_addr constant [5 x i8] c"\C0\E0\F0\F8\FC", align 1

@_ZN15CFX_UTF8EncoderC1Ev = hidden unnamed_addr alias void (%class.CFX_UTF8Encoder*), void (%class.CFX_UTF8Encoder*)* @_ZN15CFX_UTF8EncoderC2Ev
@_ZN15CFX_UTF8EncoderD1Ev = hidden unnamed_addr alias void (%class.CFX_UTF8Encoder*), void (%class.CFX_UTF8Encoder*)* @_ZN15CFX_UTF8EncoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFX_UTF8EncoderC2Ev(%class.CFX_UTF8Encoder* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CFX_UTF8Encoder* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFX_UTF8EncoderD2Ev(%class.CFX_UTF8Encoder* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_UTF8Encoder, %class.CFX_UTF8Encoder* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %class.CFX_UTF8Encoder, %class.CFX_UTF8Encoder* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %3) #4
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFX_UTF8Encoder5InputEw(%class.CFX_UTF8Encoder*, i32 signext) local_unnamed_addr #0 align 2 {
  %3 = icmp ult i32 %1, 128
  br i1 %3, label %4, label %171

4:                                                ; preds = %2
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds %class.CFX_UTF8Encoder, %class.CFX_UTF8Encoder* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %class.CFX_UTF8Encoder, %class.CFX_UTF8Encoder* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ult i8* %7, %9
  %11 = ptrtoint i8* %9 to i64
  br i1 %10, label %12, label %16

12:                                               ; preds = %4
  store i8 %5, i8* %7, align 1
  %13 = getelementptr inbounds i8, i8* %7, i64 1
  %14 = ptrtoint i8* %13 to i64
  %15 = bitcast i8** %6 to i64*
  store i64 %14, i64* %15, align 8
  br label %536

16:                                               ; preds = %4
  %17 = ptrtoint i8* %7 to i64
  %18 = bitcast i8** %6 to i64*
  %19 = bitcast %class.CFX_UTF8Encoder* %0 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = add i64 %21, 1
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %16
  %25 = bitcast %class.CFX_UTF8Encoder* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #5
  unreachable

26:                                               ; preds = %16
  %27 = bitcast i8** %8 to i64*
  %28 = sub i64 %11, %20
  %29 = icmp ult i64 %28, 4611686018427387903
  br i1 %29, label %30, label %35

30:                                               ; preds = %26
  %31 = shl i64 %28, 1
  %32 = icmp ult i64 %31, %22
  %33 = select i1 %32, i64 %22, i64 %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %30, %26
  %36 = phi i64 [ %33, %30 ], [ 9223372036854775807, %26 ]
  %37 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %36, i64 1) #4
  br label %38

38:                                               ; preds = %35, %30
  %39 = phi i64 [ %36, %35 ], [ 0, %30 ]
  %40 = phi i8* [ %37, %35 ], [ null, %30 ]
  %41 = getelementptr inbounds i8, i8* %40, i64 %21
  %42 = getelementptr inbounds i8, i8* %40, i64 %39
  %43 = ptrtoint i8* %42 to i64
  store i8 %5, i8* %41, align 1
  %44 = getelementptr inbounds i8, i8* %41, i64 1
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds %class.CFX_UTF8Encoder, %class.CFX_UTF8Encoder* %0, i64 0, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = ptrtoint i8* %47 to i64
  %49 = load i8*, i8** %6, align 8
  %50 = ptrtoint i8* %49 to i64
  %51 = icmp eq i8* %49, %47
  br i1 %51, label %164, label %52

52:                                               ; preds = %38
  %53 = ptrtoint i8* %49 to i64
  %54 = sub i64 %53, %48
  %55 = icmp ult i64 %54, 16
  br i1 %55, label %151, label %56

56:                                               ; preds = %52
  %57 = sub i64 %17, %50
  %58 = sub i64 %57, %20
  %59 = getelementptr i8, i8* %47, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = getelementptr i8, i8* %40, i64 %60
  %62 = icmp ult i8* %61, %49
  %63 = icmp ult i8* %47, %41
  %64 = and i1 %62, %63
  br i1 %64, label %151, label %65

65:                                               ; preds = %56
  %66 = and i64 %54, -16
  %67 = sub i64 0, %66
  %68 = getelementptr i8, i8* %41, i64 %67
  %69 = sub i64 0, %66
  %70 = getelementptr i8, i8* %49, i64 %69
  %71 = add i64 %66, -16
  %72 = lshr exact i64 %71, 4
  %73 = add nuw nsw i64 %72, 1
  %74 = and i64 %73, 3
  %75 = icmp ult i64 %71, 48
  br i1 %75, label %128, label %76

76:                                               ; preds = %65
  %77 = sub nsw i64 %73, %74
  %78 = getelementptr i8, i8* %41, i64 -1
  %79 = getelementptr inbounds i8, i8* %78, i64 -8
  %80 = getelementptr inbounds i8, i8* %49, i64 -16
  %81 = getelementptr inbounds i8, i8* %79, i64 -7
  %82 = getelementptr i8, i8* %41, i64 -1
  %83 = getelementptr inbounds i8, i8* %82, i64 -8
  %84 = getelementptr inbounds i8, i8* %49, i64 -16
  %85 = getelementptr inbounds i8, i8* %83, i64 -7
  %86 = getelementptr i8, i8* %41, i64 -1
  %87 = getelementptr inbounds i8, i8* %86, i64 -8
  %88 = getelementptr inbounds i8, i8* %49, i64 -16
  %89 = getelementptr inbounds i8, i8* %87, i64 -7
  %90 = getelementptr i8, i8* %41, i64 -1
  %91 = getelementptr inbounds i8, i8* %90, i64 -8
  %92 = getelementptr inbounds i8, i8* %49, i64 -16
  %93 = getelementptr inbounds i8, i8* %91, i64 -7
  br label %94

94:                                               ; preds = %94, %76
  %95 = phi i64 [ 0, %76 ], [ %125, %94 ]
  %96 = phi i64 [ %77, %76 ], [ %126, %94 ]
  %97 = sub i64 0, %95
  %98 = sub i64 0, %95
  %99 = getelementptr inbounds i8, i8* %80, i64 %98
  %100 = bitcast i8* %99 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 1, !alias.scope !2
  %102 = getelementptr inbounds i8, i8* %81, i64 %97
  %103 = bitcast i8* %102 to <2 x i64>*
  store <2 x i64> %101, <2 x i64>* %103, align 1, !alias.scope !5, !noalias !2
  %104 = sub nuw nsw i64 -16, %95
  %105 = sub nuw nsw i64 -16, %95
  %106 = getelementptr inbounds i8, i8* %84, i64 %105
  %107 = bitcast i8* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 1, !alias.scope !2
  %109 = getelementptr inbounds i8, i8* %85, i64 %104
  %110 = bitcast i8* %109 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %110, align 1, !alias.scope !5, !noalias !2
  %111 = sub nuw nsw i64 -32, %95
  %112 = sub nuw nsw i64 -32, %95
  %113 = getelementptr inbounds i8, i8* %88, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !2
  %116 = getelementptr inbounds i8, i8* %89, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !5, !noalias !2
  %118 = sub nuw nsw i64 -48, %95
  %119 = sub nuw nsw i64 -48, %95
  %120 = getelementptr inbounds i8, i8* %92, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !2
  %123 = getelementptr inbounds i8, i8* %93, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !5, !noalias !2
  %125 = add i64 %95, 64
  %126 = add i64 %96, -4
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %94, !llvm.loop !7

128:                                              ; preds = %94, %65
  %129 = phi i64 [ 0, %65 ], [ %125, %94 ]
  %130 = icmp eq i64 %74, 0
  br i1 %130, label %149, label %131

131:                                              ; preds = %128
  %132 = getelementptr i8, i8* %41, i64 -1
  %133 = getelementptr inbounds i8, i8* %132, i64 -8
  %134 = getelementptr inbounds i8, i8* %49, i64 -16
  %135 = getelementptr inbounds i8, i8* %133, i64 -7
  br label %136

136:                                              ; preds = %136, %131
  %137 = phi i64 [ %129, %131 ], [ %146, %136 ]
  %138 = phi i64 [ %74, %131 ], [ %147, %136 ]
  %139 = sub i64 0, %137
  %140 = sub i64 0, %137
  %141 = getelementptr inbounds i8, i8* %134, i64 %140
  %142 = bitcast i8* %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 1, !alias.scope !2
  %144 = getelementptr inbounds i8, i8* %135, i64 %139
  %145 = bitcast i8* %144 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %145, align 1, !alias.scope !5, !noalias !2
  %146 = add i64 %137, 16
  %147 = add i64 %138, -1
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %136, !llvm.loop !9

149:                                              ; preds = %136, %128
  %150 = icmp eq i64 %54, %66
  br i1 %150, label %161, label %151

151:                                              ; preds = %149, %56, %52
  %152 = phi i8* [ %41, %56 ], [ %41, %52 ], [ %68, %149 ]
  %153 = phi i8* [ %49, %56 ], [ %49, %52 ], [ %70, %149 ]
  br label %154

154:                                              ; preds = %151, %154
  %155 = phi i8* [ %157, %154 ], [ %152, %151 ]
  %156 = phi i8* [ %158, %154 ], [ %153, %151 ]
  %157 = getelementptr inbounds i8, i8* %155, i64 -1
  %158 = getelementptr inbounds i8, i8* %156, i64 -1
  %159 = load i8, i8* %158, align 1
  store i8 %159, i8* %157, align 1
  %160 = icmp eq i8* %158, %47
  br i1 %160, label %161, label %154, !llvm.loop !11

161:                                              ; preds = %154, %149
  %162 = phi i8* [ %68, %149 ], [ %157, %154 ]
  %163 = load i64, i64* %19, align 8
  br label %164

164:                                              ; preds = %38, %161
  %165 = phi i8* [ %162, %161 ], [ %41, %38 ]
  %166 = phi i64 [ %163, %161 ], [ %48, %38 ]
  %167 = ptrtoint i8* %165 to i64
  store i64 %167, i64* %19, align 8
  store i64 %45, i64* %18, align 8
  store i64 %43, i64* %27, align 8
  %168 = icmp eq i64 %166, 0
  br i1 %168, label %536, label %169

169:                                              ; preds = %164
  %170 = inttoptr i64 %166 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %170) #4
  br label %536

171:                                              ; preds = %2
  %172 = icmp slt i32 %1, 0
  br i1 %172, label %536, label %173

173:                                              ; preds = %171
  %174 = icmp ult i32 %1, 2048
  br i1 %174, label %182, label %175

175:                                              ; preds = %173
  %176 = icmp ult i32 %1, 65536
  br i1 %176, label %182, label %177

177:                                              ; preds = %175
  %178 = icmp ult i32 %1, 2097152
  br i1 %178, label %182, label %179

179:                                              ; preds = %177
  %180 = icmp ult i32 %1, 67108864
  %181 = select i1 %180, i32 5, i32 6
  br label %182

182:                                              ; preds = %179, %177, %175, %173
  %183 = phi i32 [ 2, %173 ], [ 3, %175 ], [ 4, %177 ], [ %181, %179 ]
  %184 = add nsw i32 %183, -1
  %185 = mul nsw i32 %184, 6
  %186 = shl i32 1, %185
  %187 = add nsw i32 %183, -2
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [5 x i8], [5 x i8]* @_ZZN15CFX_UTF8Encoder5InputEwE6prefix, i64 0, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = sdiv i32 %1, %186
  %192 = trunc i32 %191 to i8
  %193 = or i8 %190, %192
  %194 = getelementptr inbounds %class.CFX_UTF8Encoder, %class.CFX_UTF8Encoder* %0, i64 0, i32 0, i32 0, i32 1
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds %class.CFX_UTF8Encoder, %class.CFX_UTF8Encoder* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %197 = load i8*, i8** %196, align 8
  %198 = icmp ult i8* %195, %197
  %199 = ptrtoint i8* %197 to i64
  br i1 %198, label %200, label %204

200:                                              ; preds = %182
  store i8 %193, i8* %195, align 1
  %201 = getelementptr inbounds i8, i8* %195, i64 1
  %202 = ptrtoint i8* %201 to i64
  %203 = bitcast i8** %194 to i64*
  store i64 %202, i64* %203, align 8
  br label %361

204:                                              ; preds = %182
  %205 = ptrtoint i8* %195 to i64
  %206 = bitcast i8** %194 to i64*
  %207 = bitcast %class.CFX_UTF8Encoder* %0 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = sub i64 %205, %208
  %210 = add i64 %209, 1
  %211 = icmp slt i64 %210, 0
  br i1 %211, label %212, label %214

212:                                              ; preds = %204
  %213 = bitcast %class.CFX_UTF8Encoder* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %213) #5
  unreachable

214:                                              ; preds = %204
  %215 = bitcast i8** %196 to i64*
  %216 = sub i64 %199, %208
  %217 = icmp ult i64 %216, 4611686018427387903
  br i1 %217, label %218, label %223

218:                                              ; preds = %214
  %219 = shl i64 %216, 1
  %220 = icmp ult i64 %219, %210
  %221 = select i1 %220, i64 %210, i64 %219
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %226, label %223

223:                                              ; preds = %218, %214
  %224 = phi i64 [ %221, %218 ], [ 9223372036854775807, %214 ]
  %225 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %224, i64 1) #4
  br label %226

226:                                              ; preds = %223, %218
  %227 = phi i64 [ %224, %223 ], [ 0, %218 ]
  %228 = phi i8* [ %225, %223 ], [ null, %218 ]
  %229 = getelementptr inbounds i8, i8* %228, i64 %209
  %230 = getelementptr inbounds i8, i8* %228, i64 %227
  %231 = ptrtoint i8* %230 to i64
  store i8 %193, i8* %229, align 1
  %232 = getelementptr inbounds i8, i8* %229, i64 1
  %233 = ptrtoint i8* %232 to i64
  %234 = getelementptr inbounds %class.CFX_UTF8Encoder, %class.CFX_UTF8Encoder* %0, i64 0, i32 0, i32 0, i32 0
  %235 = load i8*, i8** %234, align 8
  %236 = ptrtoint i8* %235 to i64
  %237 = load i8*, i8** %194, align 8
  %238 = ptrtoint i8* %237 to i64
  %239 = icmp eq i8* %237, %235
  br i1 %239, label %352, label %240

240:                                              ; preds = %226
  %241 = ptrtoint i8* %237 to i64
  %242 = sub i64 %241, %236
  %243 = icmp ult i64 %242, 16
  br i1 %243, label %339, label %244

244:                                              ; preds = %240
  %245 = sub i64 %205, %238
  %246 = sub i64 %245, %208
  %247 = getelementptr i8, i8* %235, i64 %246
  %248 = ptrtoint i8* %247 to i64
  %249 = getelementptr i8, i8* %228, i64 %248
  %250 = icmp ult i8* %249, %237
  %251 = icmp ult i8* %235, %229
  %252 = and i1 %250, %251
  br i1 %252, label %339, label %253

253:                                              ; preds = %244
  %254 = and i64 %242, -16
  %255 = sub i64 0, %254
  %256 = getelementptr i8, i8* %229, i64 %255
  %257 = sub i64 0, %254
  %258 = getelementptr i8, i8* %237, i64 %257
  %259 = add i64 %254, -16
  %260 = lshr exact i64 %259, 4
  %261 = add nuw nsw i64 %260, 1
  %262 = and i64 %261, 3
  %263 = icmp ult i64 %259, 48
  br i1 %263, label %316, label %264

264:                                              ; preds = %253
  %265 = sub nsw i64 %261, %262
  %266 = getelementptr i8, i8* %229, i64 -1
  %267 = getelementptr inbounds i8, i8* %266, i64 -8
  %268 = getelementptr inbounds i8, i8* %237, i64 -16
  %269 = getelementptr inbounds i8, i8* %267, i64 -7
  %270 = getelementptr i8, i8* %229, i64 -1
  %271 = getelementptr inbounds i8, i8* %270, i64 -8
  %272 = getelementptr inbounds i8, i8* %237, i64 -16
  %273 = getelementptr inbounds i8, i8* %271, i64 -7
  %274 = getelementptr i8, i8* %229, i64 -1
  %275 = getelementptr inbounds i8, i8* %274, i64 -8
  %276 = getelementptr inbounds i8, i8* %237, i64 -16
  %277 = getelementptr inbounds i8, i8* %275, i64 -7
  %278 = getelementptr i8, i8* %229, i64 -1
  %279 = getelementptr inbounds i8, i8* %278, i64 -8
  %280 = getelementptr inbounds i8, i8* %237, i64 -16
  %281 = getelementptr inbounds i8, i8* %279, i64 -7
  br label %282

282:                                              ; preds = %282, %264
  %283 = phi i64 [ 0, %264 ], [ %313, %282 ]
  %284 = phi i64 [ %265, %264 ], [ %314, %282 ]
  %285 = sub i64 0, %283
  %286 = sub i64 0, %283
  %287 = getelementptr inbounds i8, i8* %268, i64 %286
  %288 = bitcast i8* %287 to <2 x i64>*
  %289 = load <2 x i64>, <2 x i64>* %288, align 1, !alias.scope !12
  %290 = getelementptr inbounds i8, i8* %269, i64 %285
  %291 = bitcast i8* %290 to <2 x i64>*
  store <2 x i64> %289, <2 x i64>* %291, align 1, !alias.scope !15, !noalias !12
  %292 = sub nuw nsw i64 -16, %283
  %293 = sub nuw nsw i64 -16, %283
  %294 = getelementptr inbounds i8, i8* %272, i64 %293
  %295 = bitcast i8* %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 1, !alias.scope !12
  %297 = getelementptr inbounds i8, i8* %273, i64 %292
  %298 = bitcast i8* %297 to <2 x i64>*
  store <2 x i64> %296, <2 x i64>* %298, align 1, !alias.scope !15, !noalias !12
  %299 = sub nuw nsw i64 -32, %283
  %300 = sub nuw nsw i64 -32, %283
  %301 = getelementptr inbounds i8, i8* %276, i64 %300
  %302 = bitcast i8* %301 to <2 x i64>*
  %303 = load <2 x i64>, <2 x i64>* %302, align 1, !alias.scope !12
  %304 = getelementptr inbounds i8, i8* %277, i64 %299
  %305 = bitcast i8* %304 to <2 x i64>*
  store <2 x i64> %303, <2 x i64>* %305, align 1, !alias.scope !15, !noalias !12
  %306 = sub nuw nsw i64 -48, %283
  %307 = sub nuw nsw i64 -48, %283
  %308 = getelementptr inbounds i8, i8* %280, i64 %307
  %309 = bitcast i8* %308 to <2 x i64>*
  %310 = load <2 x i64>, <2 x i64>* %309, align 1, !alias.scope !12
  %311 = getelementptr inbounds i8, i8* %281, i64 %306
  %312 = bitcast i8* %311 to <2 x i64>*
  store <2 x i64> %310, <2 x i64>* %312, align 1, !alias.scope !15, !noalias !12
  %313 = add i64 %283, 64
  %314 = add i64 %284, -4
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %282, !llvm.loop !17

316:                                              ; preds = %282, %253
  %317 = phi i64 [ 0, %253 ], [ %313, %282 ]
  %318 = icmp eq i64 %262, 0
  br i1 %318, label %337, label %319

319:                                              ; preds = %316
  %320 = getelementptr i8, i8* %229, i64 -1
  %321 = getelementptr inbounds i8, i8* %320, i64 -8
  %322 = getelementptr inbounds i8, i8* %237, i64 -16
  %323 = getelementptr inbounds i8, i8* %321, i64 -7
  br label %324

324:                                              ; preds = %324, %319
  %325 = phi i64 [ %317, %319 ], [ %334, %324 ]
  %326 = phi i64 [ %262, %319 ], [ %335, %324 ]
  %327 = sub i64 0, %325
  %328 = sub i64 0, %325
  %329 = getelementptr inbounds i8, i8* %322, i64 %328
  %330 = bitcast i8* %329 to <2 x i64>*
  %331 = load <2 x i64>, <2 x i64>* %330, align 1, !alias.scope !12
  %332 = getelementptr inbounds i8, i8* %323, i64 %327
  %333 = bitcast i8* %332 to <2 x i64>*
  store <2 x i64> %331, <2 x i64>* %333, align 1, !alias.scope !15, !noalias !12
  %334 = add i64 %325, 16
  %335 = add i64 %326, -1
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %324, !llvm.loop !18

337:                                              ; preds = %324, %316
  %338 = icmp eq i64 %242, %254
  br i1 %338, label %349, label %339

339:                                              ; preds = %337, %244, %240
  %340 = phi i8* [ %229, %244 ], [ %229, %240 ], [ %256, %337 ]
  %341 = phi i8* [ %237, %244 ], [ %237, %240 ], [ %258, %337 ]
  br label %342

342:                                              ; preds = %339, %342
  %343 = phi i8* [ %345, %342 ], [ %340, %339 ]
  %344 = phi i8* [ %346, %342 ], [ %341, %339 ]
  %345 = getelementptr inbounds i8, i8* %343, i64 -1
  %346 = getelementptr inbounds i8, i8* %344, i64 -1
  %347 = load i8, i8* %346, align 1
  store i8 %347, i8* %345, align 1
  %348 = icmp eq i8* %346, %235
  br i1 %348, label %349, label %342, !llvm.loop !19

349:                                              ; preds = %342, %337
  %350 = phi i8* [ %256, %337 ], [ %345, %342 ]
  %351 = load i64, i64* %207, align 8
  br label %352

352:                                              ; preds = %226, %349
  %353 = phi i8* [ %350, %349 ], [ %229, %226 ]
  %354 = phi i64 [ %351, %349 ], [ %236, %226 ]
  %355 = ptrtoint i8* %353 to i64
  store i64 %355, i64* %207, align 8
  store i64 %233, i64* %206, align 8
  store i64 %231, i64* %215, align 8
  %356 = icmp eq i64 %354, 0
  br i1 %356, label %359, label %357

357:                                              ; preds = %352
  %358 = inttoptr i64 %354 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %358) #4
  br label %359

359:                                              ; preds = %352, %357
  %360 = icmp sgt i32 %184, 0
  br i1 %360, label %361, label %536

361:                                              ; preds = %200, %359
  %362 = bitcast i8** %194 to i64*
  %363 = bitcast %class.CFX_UTF8Encoder* %0 to i64*
  %364 = bitcast i8** %196 to i64*
  %365 = getelementptr inbounds %class.CFX_UTF8Encoder, %class.CFX_UTF8Encoder* %0, i64 0, i32 0, i32 0, i32 0
  br label %366

366:                                              ; preds = %533, %361
  %367 = phi i32 [ 0, %361 ], [ %534, %533 ]
  %368 = phi i32 [ %1, %361 ], [ %370, %533 ]
  %369 = phi i32 [ %186, %361 ], [ %371, %533 ]
  %370 = srem i32 %368, %369
  %371 = ashr i32 %369, 6
  %372 = sdiv i32 %370, %371
  %373 = trunc i32 %372 to i8
  %374 = or i8 %373, -128
  %375 = load i8*, i8** %194, align 8
  %376 = load i8*, i8** %196, align 8
  %377 = icmp ult i8* %375, %376
  %378 = ptrtoint i8* %376 to i64
  br i1 %377, label %379, label %382

379:                                              ; preds = %366
  store i8 %374, i8* %375, align 1
  %380 = getelementptr inbounds i8, i8* %375, i64 1
  %381 = ptrtoint i8* %380 to i64
  store i64 %381, i64* %362, align 8
  br label %533

382:                                              ; preds = %366
  %383 = ptrtoint i8* %375 to i64
  %384 = load i64, i64* %363, align 8
  %385 = sub i64 %383, %384
  %386 = add i64 %385, 1
  %387 = icmp slt i64 %386, 0
  br i1 %387, label %388, label %390

388:                                              ; preds = %382
  %389 = bitcast %class.CFX_UTF8Encoder* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %389) #5
  unreachable

390:                                              ; preds = %382
  %391 = sub i64 %378, %384
  %392 = icmp ult i64 %391, 4611686018427387903
  br i1 %392, label %393, label %398

393:                                              ; preds = %390
  %394 = shl i64 %391, 1
  %395 = icmp ult i64 %394, %386
  %396 = select i1 %395, i64 %386, i64 %394
  %397 = icmp eq i64 %396, 0
  br i1 %397, label %401, label %398

398:                                              ; preds = %393, %390
  %399 = phi i64 [ %396, %393 ], [ 9223372036854775807, %390 ]
  %400 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %399, i64 1) #4
  br label %401

401:                                              ; preds = %398, %393
  %402 = phi i64 [ %399, %398 ], [ 0, %393 ]
  %403 = phi i8* [ %400, %398 ], [ null, %393 ]
  %404 = getelementptr inbounds i8, i8* %403, i64 %385
  %405 = getelementptr inbounds i8, i8* %403, i64 %402
  %406 = ptrtoint i8* %405 to i64
  store i8 %374, i8* %404, align 1
  %407 = getelementptr inbounds i8, i8* %404, i64 1
  %408 = ptrtoint i8* %407 to i64
  %409 = load i8*, i8** %365, align 8
  %410 = ptrtoint i8* %409 to i64
  %411 = load i8*, i8** %194, align 8
  %412 = ptrtoint i8* %411 to i64
  %413 = icmp eq i8* %411, %409
  br i1 %413, label %526, label %414

414:                                              ; preds = %401
  %415 = ptrtoint i8* %411 to i64
  %416 = sub i64 %415, %410
  %417 = icmp ult i64 %416, 16
  br i1 %417, label %513, label %418

418:                                              ; preds = %414
  %419 = sub i64 %383, %412
  %420 = sub i64 %419, %384
  %421 = getelementptr i8, i8* %409, i64 %420
  %422 = ptrtoint i8* %421 to i64
  %423 = getelementptr i8, i8* %403, i64 %422
  %424 = icmp ult i8* %423, %411
  %425 = icmp ult i8* %409, %404
  %426 = and i1 %424, %425
  br i1 %426, label %513, label %427

427:                                              ; preds = %418
  %428 = and i64 %416, -16
  %429 = sub i64 0, %428
  %430 = getelementptr i8, i8* %404, i64 %429
  %431 = sub i64 0, %428
  %432 = getelementptr i8, i8* %411, i64 %431
  %433 = add i64 %428, -16
  %434 = lshr exact i64 %433, 4
  %435 = add nuw nsw i64 %434, 1
  %436 = and i64 %435, 3
  %437 = icmp ult i64 %433, 48
  br i1 %437, label %490, label %438

438:                                              ; preds = %427
  %439 = sub nsw i64 %435, %436
  %440 = getelementptr i8, i8* %404, i64 -1
  %441 = getelementptr inbounds i8, i8* %440, i64 -8
  %442 = getelementptr inbounds i8, i8* %411, i64 -16
  %443 = getelementptr inbounds i8, i8* %441, i64 -7
  %444 = getelementptr i8, i8* %404, i64 -1
  %445 = getelementptr inbounds i8, i8* %444, i64 -8
  %446 = getelementptr inbounds i8, i8* %411, i64 -16
  %447 = getelementptr inbounds i8, i8* %445, i64 -7
  %448 = getelementptr i8, i8* %404, i64 -1
  %449 = getelementptr inbounds i8, i8* %448, i64 -8
  %450 = getelementptr inbounds i8, i8* %411, i64 -16
  %451 = getelementptr inbounds i8, i8* %449, i64 -7
  %452 = getelementptr i8, i8* %404, i64 -1
  %453 = getelementptr inbounds i8, i8* %452, i64 -8
  %454 = getelementptr inbounds i8, i8* %411, i64 -16
  %455 = getelementptr inbounds i8, i8* %453, i64 -7
  br label %456

456:                                              ; preds = %456, %438
  %457 = phi i64 [ 0, %438 ], [ %487, %456 ]
  %458 = phi i64 [ %439, %438 ], [ %488, %456 ]
  %459 = sub i64 0, %457
  %460 = sub i64 0, %457
  %461 = getelementptr inbounds i8, i8* %442, i64 %460
  %462 = bitcast i8* %461 to <2 x i64>*
  %463 = load <2 x i64>, <2 x i64>* %462, align 1, !alias.scope !20
  %464 = getelementptr inbounds i8, i8* %443, i64 %459
  %465 = bitcast i8* %464 to <2 x i64>*
  store <2 x i64> %463, <2 x i64>* %465, align 1, !alias.scope !23, !noalias !20
  %466 = sub nuw nsw i64 -16, %457
  %467 = sub nuw nsw i64 -16, %457
  %468 = getelementptr inbounds i8, i8* %446, i64 %467
  %469 = bitcast i8* %468 to <2 x i64>*
  %470 = load <2 x i64>, <2 x i64>* %469, align 1, !alias.scope !20
  %471 = getelementptr inbounds i8, i8* %447, i64 %466
  %472 = bitcast i8* %471 to <2 x i64>*
  store <2 x i64> %470, <2 x i64>* %472, align 1, !alias.scope !23, !noalias !20
  %473 = sub nuw nsw i64 -32, %457
  %474 = sub nuw nsw i64 -32, %457
  %475 = getelementptr inbounds i8, i8* %450, i64 %474
  %476 = bitcast i8* %475 to <2 x i64>*
  %477 = load <2 x i64>, <2 x i64>* %476, align 1, !alias.scope !20
  %478 = getelementptr inbounds i8, i8* %451, i64 %473
  %479 = bitcast i8* %478 to <2 x i64>*
  store <2 x i64> %477, <2 x i64>* %479, align 1, !alias.scope !23, !noalias !20
  %480 = sub nuw nsw i64 -48, %457
  %481 = sub nuw nsw i64 -48, %457
  %482 = getelementptr inbounds i8, i8* %454, i64 %481
  %483 = bitcast i8* %482 to <2 x i64>*
  %484 = load <2 x i64>, <2 x i64>* %483, align 1, !alias.scope !20
  %485 = getelementptr inbounds i8, i8* %455, i64 %480
  %486 = bitcast i8* %485 to <2 x i64>*
  store <2 x i64> %484, <2 x i64>* %486, align 1, !alias.scope !23, !noalias !20
  %487 = add i64 %457, 64
  %488 = add i64 %458, -4
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %490, label %456, !llvm.loop !25

490:                                              ; preds = %456, %427
  %491 = phi i64 [ 0, %427 ], [ %487, %456 ]
  %492 = icmp eq i64 %436, 0
  br i1 %492, label %511, label %493

493:                                              ; preds = %490
  %494 = getelementptr i8, i8* %404, i64 -1
  %495 = getelementptr inbounds i8, i8* %494, i64 -8
  %496 = getelementptr inbounds i8, i8* %411, i64 -16
  %497 = getelementptr inbounds i8, i8* %495, i64 -7
  br label %498

498:                                              ; preds = %498, %493
  %499 = phi i64 [ %491, %493 ], [ %508, %498 ]
  %500 = phi i64 [ %436, %493 ], [ %509, %498 ]
  %501 = sub i64 0, %499
  %502 = sub i64 0, %499
  %503 = getelementptr inbounds i8, i8* %496, i64 %502
  %504 = bitcast i8* %503 to <2 x i64>*
  %505 = load <2 x i64>, <2 x i64>* %504, align 1, !alias.scope !20
  %506 = getelementptr inbounds i8, i8* %497, i64 %501
  %507 = bitcast i8* %506 to <2 x i64>*
  store <2 x i64> %505, <2 x i64>* %507, align 1, !alias.scope !23, !noalias !20
  %508 = add i64 %499, 16
  %509 = add i64 %500, -1
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %511, label %498, !llvm.loop !26

511:                                              ; preds = %498, %490
  %512 = icmp eq i64 %416, %428
  br i1 %512, label %523, label %513

513:                                              ; preds = %511, %418, %414
  %514 = phi i8* [ %404, %418 ], [ %404, %414 ], [ %430, %511 ]
  %515 = phi i8* [ %411, %418 ], [ %411, %414 ], [ %432, %511 ]
  br label %516

516:                                              ; preds = %513, %516
  %517 = phi i8* [ %519, %516 ], [ %514, %513 ]
  %518 = phi i8* [ %520, %516 ], [ %515, %513 ]
  %519 = getelementptr inbounds i8, i8* %517, i64 -1
  %520 = getelementptr inbounds i8, i8* %518, i64 -1
  %521 = load i8, i8* %520, align 1
  store i8 %521, i8* %519, align 1
  %522 = icmp eq i8* %520, %409
  br i1 %522, label %523, label %516, !llvm.loop !27

523:                                              ; preds = %516, %511
  %524 = phi i8* [ %430, %511 ], [ %519, %516 ]
  %525 = load i64, i64* %363, align 8
  br label %526

526:                                              ; preds = %401, %523
  %527 = phi i8* [ %524, %523 ], [ %404, %401 ]
  %528 = phi i64 [ %525, %523 ], [ %410, %401 ]
  %529 = ptrtoint i8* %527 to i64
  store i64 %529, i64* %363, align 8
  store i64 %408, i64* %362, align 8
  store i64 %406, i64* %364, align 8
  %530 = icmp eq i64 %528, 0
  br i1 %530, label %533, label %531

531:                                              ; preds = %526
  %532 = inttoptr i64 %528 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %532) #4
  br label %533

533:                                              ; preds = %379, %526, %531
  %534 = add nuw nsw i32 %367, 1
  %535 = icmp eq i32 %534, %184
  br i1 %535, label %536, label %366

536:                                              ; preds = %533, %359, %169, %164, %12, %171
  ret void
}

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !8}
