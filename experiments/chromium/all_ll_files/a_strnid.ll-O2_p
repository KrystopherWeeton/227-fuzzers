; ModuleID = '../../third_party/boringssl/src/crypto/asn1/a_strnid.c'
source_filename = "../../third_party/boringssl/src/crypto/asn1/a_strnid.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.asn1_string_table_st = type { i32, i64, i64, i64, i64 }
%struct.stack_st_ASN1_STRING_TABLE = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }

@global_mask = internal unnamed_addr global i64 8192, align 8
@.str = private unnamed_addr constant [6 x i8] c"MASK:\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"nombstr\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"pkix\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"utf8only\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@tbl_standard = internal constant [19 x %struct.asn1_string_table_st] [%struct.asn1_string_table_st { i32 13, i64 1, i64 64, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 14, i64 2, i64 2, i64 2, i64 2 }, %struct.asn1_string_table_st { i32 15, i64 1, i64 128, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 16, i64 1, i64 128, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 17, i64 1, i64 64, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 18, i64 1, i64 64, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 48, i64 1, i64 128, i64 16, i64 2 }, %struct.asn1_string_table_st { i32 49, i64 1, i64 -1, i64 10262, i64 0 }, %struct.asn1_string_table_st { i32 54, i64 1, i64 -1, i64 10262, i64 0 }, %struct.asn1_string_table_st { i32 55, i64 1, i64 -1, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 99, i64 1, i64 32768, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 100, i64 1, i64 32768, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 101, i64 1, i64 32768, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 105, i64 1, i64 64, i64 2, i64 2 }, %struct.asn1_string_table_st { i32 156, i64 -1, i64 -1, i64 2048, i64 2 }, %struct.asn1_string_table_st { i32 173, i64 1, i64 32768, i64 10246, i64 0 }, %struct.asn1_string_table_st { i32 174, i64 -1, i64 -1, i64 2, i64 2 }, %struct.asn1_string_table_st { i32 391, i64 1, i64 -1, i64 16, i64 2 }, %struct.asn1_string_table_st { i32 417, i64 -1, i64 -1, i64 2048, i64 2 }], align 16
@stable = internal unnamed_addr global %struct.stack_st_ASN1_STRING_TABLE* null, align 8
@.str.5 = private unnamed_addr constant [55 x i8] c"../../third_party/boringssl/src/crypto/asn1/a_strnid.c\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @ASN1_STRING_set_default_mask(i64) local_unnamed_addr #0 {
  store i64 %0, i64* @global_mask, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @ASN1_STRING_get_default_mask() local_unnamed_addr #1 {
  %1 = load i64, i64* @global_mask, align 8
  ret i64 %1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_STRING_set_default_mask_asc(i8*) local_unnamed_addr #2 {
  %2 = alloca i8*, align 8
  %3 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #8
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %2, align 8
  %4 = tail call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = getelementptr inbounds i8, i8* %0, i64 5
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %29, label %10

10:                                               ; preds = %6
  %11 = call i64 @strtoul(i8* %7, i8** nonnull %2, i32 0) #8
  %12 = load i8*, i8** %2, align 8
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %27, label %29

15:                                               ; preds = %1
  %16 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0)) #9
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)) #9
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %27, label %21

21:                                               ; preds = %18
  %22 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0)) #9
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %21
  %25 = tail call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #9
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %24, %21, %18, %15, %10
  %28 = phi i64 [ %11, %10 ], [ -10241, %15 ], [ -5, %18 ], [ 8192, %21 ], [ 4294967295, %24 ]
  store i64 %28, i64* @global_mask, align 8
  br label %29

29:                                               ; preds = %24, %10, %6, %27
  %30 = phi i32 [ 1, %27 ], [ 0, %6 ], [ 0, %10 ], [ 0, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #8
  ret i32 %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @ASN1_STRING_set_by_NID(%struct.asn1_string_st**, i8*, i32, i32, i32) local_unnamed_addr #2 {
  %6 = alloca %struct.asn1_string_st*, align 8
  %7 = bitcast %struct.asn1_string_st** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  store %struct.asn1_string_st* null, %struct.asn1_string_st** %6, align 8
  %8 = icmp eq %struct.asn1_string_st** %0, null
  %9 = select i1 %8, %struct.asn1_string_st** %6, %struct.asn1_string_st** %0
  %10 = tail call %struct.asn1_string_table_st* @ASN1_STRING_TABLE_get(i32 %4)
  %11 = icmp eq %struct.asn1_string_table_st* %10, null
  br i1 %11, label %27, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %10, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %10, i64 0, i32 4
  %16 = load i64, i64* %15, align 8
  %17 = and i64 %16, 2
  %18 = icmp eq i64 %17, 0
  %19 = load i64, i64* @global_mask, align 8
  %20 = select i1 %18, i64 %19, i64 -1
  %21 = and i64 %20, %14
  %22 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %10, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %10, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = call i32 @ASN1_mbstring_ncopy(%struct.asn1_string_st** %9, i8* %1, i32 %2, i32 %3, i64 %21, i64 %23, i64 %25) #8
  br label %31

27:                                               ; preds = %5
  %28 = load i64, i64* @global_mask, align 8
  %29 = and i64 %28, 10246
  %30 = call i32 @ASN1_mbstring_copy(%struct.asn1_string_st** %9, i8* %1, i32 %2, i32 %3, i64 %29) #8
  br label %31

31:                                               ; preds = %27, %12
  %32 = phi i32 [ %26, %12 ], [ %30, %27 ]
  %33 = icmp slt i32 %32, 1
  br i1 %33, label %36, label %34

34:                                               ; preds = %31
  %35 = load %struct.asn1_string_st*, %struct.asn1_string_st** %9, align 8
  br label %36

36:                                               ; preds = %31, %34
  %37 = phi %struct.asn1_string_st* [ %35, %34 ], [ null, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  ret %struct.asn1_string_st* %37
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_table_st* @ASN1_STRING_TABLE_get(i32) local_unnamed_addr #2 {
  %2 = alloca i64, align 8
  %3 = alloca %struct.asn1_string_table_st, align 8
  %4 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #8
  store i64 -6148914691236517206, i64* %2, align 8
  %5 = bitcast %struct.asn1_string_table_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 40, i1 false)
  %6 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %3, i64 0, i32 0
  store i32 %0, i32* %6, align 8
  br label %7

7:                                                ; preds = %21, %1
  %8 = phi i64 [ %23, %21 ], [ 19, %1 ]
  %9 = phi i64 [ %22, %21 ], [ 0, %1 ]
  %10 = add i64 %9, %8
  %11 = lshr i64 %10, 1
  %12 = getelementptr [19 x %struct.asn1_string_table_st], [19 x %struct.asn1_string_table_st]* @tbl_standard, i64 0, i64 %11
  %13 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %12, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = sub nsw i32 %0, %14
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %7
  %18 = icmp eq i32 %15, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %17
  %20 = add nuw i64 %11, 1
  br label %21

21:                                               ; preds = %19, %7
  %22 = phi i64 [ %20, %19 ], [ %9, %7 ]
  %23 = phi i64 [ %8, %19 ], [ %11, %7 ]
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %7, label %27

25:                                               ; preds = %17
  %26 = icmp eq %struct.asn1_string_table_st* %12, null
  br i1 %26, label %27, label %40

27:                                               ; preds = %21, %25
  %28 = load %struct.stack_st_ASN1_STRING_TABLE*, %struct.stack_st_ASN1_STRING_TABLE** @stable, align 8
  %29 = icmp eq %struct.stack_st_ASN1_STRING_TABLE* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = bitcast %struct.stack_st_ASN1_STRING_TABLE* %28 to %struct.stack_st*
  tail call void @sk_sort(%struct.stack_st* nonnull %31) #8
  %32 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_ASN1_STRING_TABLE** @stable to %struct.stack_st**), align 8
  %33 = call i32 @sk_find(%struct.stack_st* %32, i64* nonnull %2, i8* nonnull %5, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_ASN1_STRING_TABLE_call_cmp_func) #8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %30
  %36 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_ASN1_STRING_TABLE** @stable to %struct.stack_st**), align 8
  %37 = load i64, i64* %2, align 8
  %38 = call i8* @sk_value(%struct.stack_st* %36, i64 %37) #8
  %39 = bitcast i8* %38 to %struct.asn1_string_table_st*
  br label %40

40:                                               ; preds = %25, %30, %27, %35
  %41 = phi %struct.asn1_string_table_st* [ %39, %35 ], [ null, %27 ], [ null, %30 ], [ %12, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #8
  ret %struct.asn1_string_table_st* %41
}

declare i32 @ASN1_mbstring_ncopy(%struct.asn1_string_st**, i8*, i32, i32, i64, i64, i64) local_unnamed_addr #6

declare i32 @ASN1_mbstring_copy(%struct.asn1_string_st**, i8*, i32, i32, i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_STRING_TABLE_add(i32, i64, i64, i64, i64) local_unnamed_addr #2 {
  %6 = and i64 %4, -2
  %7 = load %struct.stack_st_ASN1_STRING_TABLE*, %struct.stack_st_ASN1_STRING_TABLE** @stable, align 8
  %8 = icmp eq %struct.stack_st_ASN1_STRING_TABLE* %7, null
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  %10 = tail call %struct.stack_st* @sk_new(i32 (i8**, i8**)* bitcast (i32 (%struct.asn1_string_table_st**, %struct.asn1_string_table_st**)* @sk_table_cmp to i32 (i8**, i8**)*)) #8
  store %struct.stack_st* %10, %struct.stack_st** bitcast (%struct.stack_st_ASN1_STRING_TABLE** @stable to %struct.stack_st**), align 8
  %11 = icmp eq %struct.stack_st* %10, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 243) #8
  br label %49

13:                                               ; preds = %5, %9
  %14 = tail call %struct.asn1_string_table_st* @ASN1_STRING_TABLE_get(i32 %0)
  %15 = icmp eq %struct.asn1_string_table_st* %14, null
  br i1 %15, label %16, label %27

16:                                               ; preds = %13
  %17 = tail call i8* @OPENSSL_malloc(i64 40) #8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 249) #8
  br label %49

20:                                               ; preds = %16
  %21 = bitcast i8* %17 to %struct.asn1_string_table_st*
  %22 = or i64 %4, 1
  %23 = getelementptr inbounds i8, i8* %17, i64 32
  %24 = bitcast i8* %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = bitcast i8* %17 to i32*
  store i32 %0, i32* %25, align 8
  %26 = getelementptr inbounds i8, i8* %17, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 -1, i64 16, i1 false)
  br label %32

27:                                               ; preds = %13
  %28 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %14, i64 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, 1
  %31 = or i64 %30, %6
  store i64 %31, i64* %28, align 8
  br label %32

32:                                               ; preds = %27, %20
  %33 = phi %struct.asn1_string_table_st* [ %14, %27 ], [ %21, %20 ]
  %34 = phi i8 [ 0, %27 ], [ 1, %20 ]
  %35 = icmp eq i64 %1, -1
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %33, i64 0, i32 1
  store i64 %1, i64* %37, align 8
  br label %38

38:                                               ; preds = %32, %36
  %39 = icmp eq i64 %2, -1
  br i1 %39, label %42, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %33, i64 0, i32 2
  store i64 %2, i64* %41, align 8
  br label %42

42:                                               ; preds = %38, %40
  %43 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %33, i64 0, i32 3
  store i64 %3, i64* %43, align 8
  %44 = icmp eq i8 %34, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_ASN1_STRING_TABLE** @stable to %struct.stack_st**), align 8
  %47 = bitcast %struct.asn1_string_table_st* %33 to i8*
  %48 = tail call i64 @sk_push(%struct.stack_st* %46, i8* %47) #8
  br label %49

49:                                               ; preds = %45, %42, %19, %12
  %50 = phi i32 [ 0, %19 ], [ 0, %12 ], [ 1, %42 ], [ 1, %45 ]
  ret i32 %50
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @sk_table_cmp(%struct.asn1_string_table_st** nocapture readonly, %struct.asn1_string_table_st** nocapture readonly) #1 {
  %3 = load %struct.asn1_string_table_st*, %struct.asn1_string_table_st** %0, align 8
  %4 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.asn1_string_table_st*, %struct.asn1_string_table_st** %1, align 8
  %7 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = sub nsw i32 %5, %8
  ret i32 %9
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #6

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @ASN1_STRING_TABLE_cleanup() local_unnamed_addr #2 {
  %1 = load %struct.stack_st_ASN1_STRING_TABLE*, %struct.stack_st_ASN1_STRING_TABLE** @stable, align 8
  %2 = icmp eq %struct.stack_st_ASN1_STRING_TABLE* %1, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %0
  store %struct.stack_st_ASN1_STRING_TABLE* null, %struct.stack_st_ASN1_STRING_TABLE** @stable, align 8
  %4 = bitcast %struct.stack_st_ASN1_STRING_TABLE* %1 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %4, void (void (i8*)*, i8*)* nonnull @sk_ASN1_STRING_TABLE_call_free_func, void (i8*)* bitcast (void (%struct.asn1_string_table_st*)* @st_free to void (i8*)*)) #8
  br label %5

5:                                                ; preds = %0, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @st_free(%struct.asn1_string_table_st*) #2 {
  %2 = getelementptr inbounds %struct.asn1_string_table_st, %struct.asn1_string_table_st* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %struct.asn1_string_table_st* %0 to i8*
  tail call void @OPENSSL_free(i8* %7) #8
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

declare void @sk_sort(%struct.stack_st*) local_unnamed_addr #6

declare i32 @sk_find(%struct.stack_st*, i64*, i8*, i32 (i32 (i8**, i8**)*, i8**, i8**)*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @sk_ASN1_STRING_TABLE_call_cmp_func(i32 (i8**, i8**)* nocapture, i8** nocapture readonly, i8** nocapture readonly) #7 {
  %4 = alloca %struct.asn1_string_table_st*, align 8
  %5 = alloca %struct.asn1_string_table_st*, align 8
  %6 = bitcast %struct.asn1_string_table_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = bitcast i8** %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.asn1_string_table_st** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast %struct.asn1_string_table_st** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #8
  %11 = bitcast i8** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.asn1_string_table_st** %5 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast i32 (i8**, i8**)* %0 to i32 (%struct.asn1_string_table_st**, %struct.asn1_string_table_st**)*
  %15 = call i32 %14(%struct.asn1_string_table_st** nonnull %4, %struct.asn1_string_table_st** nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  ret i32 %15
}

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #6

declare %struct.stack_st* @sk_new(i32 (i8**, i8**)*) local_unnamed_addr #6

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #6

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_ASN1_STRING_TABLE_call_free_func(void (i8*)* nocapture, i8*) #7 {
  %3 = bitcast void (i8*)* %0 to void (%struct.asn1_string_table_st*)*
  %4 = bitcast i8* %1 to %struct.asn1_string_table_st*
  tail call void %3(%struct.asn1_string_table_st* %4) #8
  ret void
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
