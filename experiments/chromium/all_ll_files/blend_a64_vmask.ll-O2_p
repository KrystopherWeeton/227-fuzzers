; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/blend_a64_vmask.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/blend_a64_vmask.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_blend_a64_vmask_c(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %192

11:                                               ; preds = %9
  %12 = icmp sgt i32 %7, 0
  %13 = zext i32 %8 to i64
  %14 = zext i32 %7 to i64
  %15 = add nsw i64 %14, -1
  %16 = getelementptr i8, i8* %0, i64 %14
  %17 = getelementptr i8, i8* %2, i64 %14
  %18 = getelementptr i8, i8* %4, i64 %14
  %19 = icmp ult i32 %7, 16
  %20 = trunc i64 %15 to i32
  %21 = icmp ugt i64 %15, 4294967295
  %22 = trunc i64 %15 to i32
  %23 = icmp ugt i64 %15, 4294967295
  %24 = trunc i64 %15 to i32
  %25 = icmp ugt i64 %15, 4294967295
  %26 = and i64 %14, 4294967280
  %27 = icmp eq i64 %26, %14
  %28 = and i64 %14, 1
  %29 = icmp eq i64 %28, 0
  %30 = sub nsw i64 0, %14
  br label %31

31:                                               ; preds = %189, %11
  %32 = phi i64 [ 0, %11 ], [ %190, %189 ]
  %33 = trunc i64 %32 to i32
  %34 = mul i32 %33, %1
  %35 = zext i32 %34 to i64
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = getelementptr i8, i8* %16, i64 %35
  %38 = trunc i64 %32 to i32
  %39 = mul i32 %38, %3
  %40 = zext i32 %39 to i64
  %41 = getelementptr i8, i8* %2, i64 %40
  %42 = getelementptr i8, i8* %17, i64 %40
  %43 = trunc i64 %32 to i32
  %44 = mul i32 %43, %5
  %45 = zext i32 %44 to i64
  %46 = getelementptr i8, i8* %4, i64 %45
  %47 = getelementptr i8, i8* %18, i64 %45
  %48 = trunc i64 %32 to i32
  %49 = mul i32 %48, %1
  %50 = trunc i64 %32 to i32
  %51 = mul i32 %50, %3
  %52 = trunc i64 %32 to i32
  %53 = mul i32 %52, %5
  %54 = getelementptr inbounds i8, i8* %6, i64 %32
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  br i1 %12, label %57, label %189

57:                                               ; preds = %31
  %58 = trunc i64 %32 to i32
  %59 = mul i32 %58, %3
  %60 = sub nsw i32 64, %56
  %61 = mul i32 %58, %5
  %62 = mul i32 %58, %1
  br i1 %19, label %116, label %63

63:                                               ; preds = %57
  %64 = xor i32 %49, -1
  %65 = icmp ult i32 %64, %20
  %66 = or i1 %65, %21
  %67 = xor i32 %51, -1
  %68 = icmp ult i32 %67, %22
  %69 = or i1 %68, %23
  %70 = or i1 %66, %69
  %71 = xor i32 %53, -1
  %72 = icmp ult i32 %71, %24
  %73 = or i1 %72, %25
  %74 = or i1 %70, %73
  br i1 %74, label %116, label %75

75:                                               ; preds = %63
  %76 = icmp ult i8* %36, %42
  %77 = icmp ult i8* %41, %37
  %78 = and i1 %76, %77
  %79 = icmp ult i8* %36, %47
  %80 = icmp ult i8* %46, %37
  %81 = and i1 %79, %80
  %82 = or i1 %78, %81
  br i1 %82, label %116, label %83

83:                                               ; preds = %75
  %84 = insertelement <16 x i32> undef, i32 %56, i32 0
  %85 = shufflevector <16 x i32> %84, <16 x i32> undef, <16 x i32> zeroinitializer
  %86 = insertelement <16 x i32> undef, i32 %60, i32 0
  %87 = shufflevector <16 x i32> %86, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %88

88:                                               ; preds = %88, %83
  %89 = phi i64 [ 0, %83 ], [ %113, %88 ]
  %90 = trunc i64 %89 to i32
  %91 = add i32 %59, %90
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %2, i64 %92
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !2
  %96 = zext <16 x i8> %95 to <16 x i32>
  %97 = mul nuw nsw <16 x i32> %85, %96
  %98 = add i32 %61, %90
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %4, i64 %99
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1, !alias.scope !5
  %103 = zext <16 x i8> %102 to <16 x i32>
  %104 = mul nsw <16 x i32> %87, %103
  %105 = add nuw nsw <16 x i32> %97, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %106 = add nsw <16 x i32> %105, %104
  %107 = lshr <16 x i32> %106, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %108 = trunc <16 x i32> %107 to <16 x i8>
  %109 = add i32 %62, %90
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %0, i64 %110
  %112 = bitcast i8* %111 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %112, align 1, !alias.scope !7, !noalias !9
  %113 = add i64 %89, 16
  %114 = icmp eq i64 %113, %26
  br i1 %114, label %115, label %88, !llvm.loop !10

115:                                              ; preds = %88
  br i1 %27, label %189, label %116

116:                                              ; preds = %115, %75, %63, %57
  %117 = phi i64 [ 0, %75 ], [ 0, %63 ], [ 0, %57 ], [ %26, %115 ]
  %118 = xor i64 %117, -1
  br i1 %29, label %141, label %119

119:                                              ; preds = %116
  %120 = trunc i64 %117 to i32
  %121 = add i32 %59, %120
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %2, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = mul nuw nsw i32 %125, %56
  %127 = add i32 %61, %120
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %4, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = mul nsw i32 %60, %131
  %133 = add nuw nsw i32 %126, 32
  %134 = add nsw i32 %133, %132
  %135 = lshr i32 %134, 6
  %136 = trunc i32 %135 to i8
  %137 = add i32 %62, %120
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %0, i64 %138
  store i8 %136, i8* %139, align 1
  %140 = or i64 %117, 1
  br label %141

141:                                              ; preds = %119, %116
  %142 = phi i64 [ %140, %119 ], [ %117, %116 ]
  %143 = icmp eq i64 %118, %30
  br i1 %143, label %189, label %144

144:                                              ; preds = %141, %144
  %145 = phi i64 [ %187, %144 ], [ %142, %141 ]
  %146 = trunc i64 %145 to i32
  %147 = add i32 %59, %146
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %2, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = mul nuw nsw i32 %151, %56
  %153 = add i32 %61, %146
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %4, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = mul nsw i32 %60, %157
  %159 = add nuw nsw i32 %152, 32
  %160 = add nsw i32 %159, %158
  %161 = lshr i32 %160, 6
  %162 = trunc i32 %161 to i8
  %163 = add i32 %62, %146
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %0, i64 %164
  store i8 %162, i8* %165, align 1
  %166 = trunc i64 %145 to i32
  %167 = add i32 %166, 1
  %168 = add i32 %59, %167
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds i8, i8* %2, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = mul nuw nsw i32 %172, %56
  %174 = add i32 %61, %167
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %4, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = mul nsw i32 %60, %178
  %180 = add nuw nsw i32 %173, 32
  %181 = add nsw i32 %180, %179
  %182 = lshr i32 %181, 6
  %183 = trunc i32 %182 to i8
  %184 = add i32 %62, %167
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %0, i64 %185
  store i8 %183, i8* %186, align 1
  %187 = add nuw nsw i64 %145, 2
  %188 = icmp eq i64 %187, %14
  br i1 %188, label %189, label %144, !llvm.loop !12

189:                                              ; preds = %141, %144, %115, %31
  %190 = add nuw nsw i64 %32, 1
  %191 = icmp eq i64 %190, %13
  br i1 %191, label %192, label %31

192:                                              ; preds = %189, %9
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
