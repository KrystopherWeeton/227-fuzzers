; ModuleID = '../../components/sync/base/node_ordinal.cc'
source_filename = "../../components/sync/base/node_ordinal.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.syncer::Ordinal" = type <{ %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@.str.1 = private unnamed_addr constant [37 x i8] c"../../components/sync/base/ordinal.h\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"IsValid()\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6syncer18Int64ToNodeOrdinalEl(%"class.syncer::Ordinal"* noalias sret, i64) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = xor i64 %1, -9223372036854775808
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  store i8 8, i8* %9, align 1
  %11 = bitcast %"class.std::__1::basic_string"* %3 to i64*
  store i64 0, i64* %11, align 8
  %12 = bitcast i64* %7 to i8*
  store i8 0, i8* %12, align 8
  %13 = icmp eq i64 %4, 0
  br i1 %13, label %41, label %14

14:                                               ; preds = %2
  %15 = trunc i64 %1 to i8
  %16 = getelementptr inbounds i8, i8* %5, i64 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i64 %1, 8
  %18 = trunc i64 %17 to i8
  %19 = getelementptr inbounds i8, i8* %5, i64 6
  store i8 %18, i8* %19, align 2
  %20 = lshr i64 %1, 16
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds i8, i8* %5, i64 5
  store i8 %21, i8* %22, align 1
  %23 = lshr i64 %1, 24
  %24 = trunc i64 %23 to i8
  %25 = getelementptr inbounds i8, i8* %5, i64 4
  store i8 %24, i8* %25, align 4
  %26 = lshr i64 %1, 32
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds i8, i8* %5, i64 3
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %1, 40
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds i8, i8* %5, i64 2
  store i8 %30, i8* %31, align 2
  %32 = lshr i64 %1, 48
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 %33, i8* %34, align 1
  %35 = lshr i64 %4, 56
  %36 = trunc i64 %35 to i8
  store i8 %36, i8* %5, align 8
  %37 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %39 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 1
  %40 = bitcast %"class.syncer::Ordinal"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 -86, i64 32, i1 false)
  br label %48

41:                                               ; preds = %2
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %3, i8 signext -128) #5
  %42 = load i8, i8* %9, align 1
  %43 = icmp slt i8 %42, 0
  %44 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 1
  %47 = bitcast %"class.syncer::Ordinal"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 -86, i64 32, i1 false)
  br i1 %43, label %53, label %48

48:                                               ; preds = %14, %41
  %49 = phi i8* [ %39, %14 ], [ %46, %41 ]
  %50 = phi i64* [ %38, %14 ], [ %45, %41 ]
  %51 = phi i8** [ %37, %14 ], [ %44, %41 ]
  %52 = bitcast %"class.syncer::Ordinal"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* nonnull align 8 %5, i64 24, i1 false) #5
  br label %57

53:                                               ; preds = %41
  %54 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 0
  %55 = load i8*, i8** %6, align 8
  %56 = load i64, i64* %7, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %54, i8* %55, i64 %56) #5
  br label %57

57:                                               ; preds = %53, %48
  %58 = phi i8* [ %46, %53 ], [ %49, %48 ]
  %59 = phi i64* [ %45, %53 ], [ %50, %48 ]
  %60 = phi i8** [ %44, %53 ], [ %51, %48 ]
  %61 = bitcast %"class.syncer::Ordinal"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  %65 = load i64, i64* %59, align 8
  %66 = zext i8 %63 to i64
  %67 = select i1 %64, i64 %65, i64 %66
  %68 = icmp ult i64 %67, 8
  br i1 %68, label %129, label %69

69:                                               ; preds = %57
  %70 = load i8*, i8** %60, align 8
  %71 = bitcast %"class.syncer::Ordinal"* %0 to i8*
  %72 = select i1 %64, i8* %70, i8* %71
  %73 = add i64 %67, -1
  %74 = and i64 %67, 3
  %75 = icmp ult i64 %73, 3
  br i1 %75, label %101, label %76

76:                                               ; preds = %69
  %77 = sub i64 %67, %74
  br label %78

78:                                               ; preds = %78, %76
  %79 = phi i64 [ 0, %76 ], [ %98, %78 ]
  %80 = phi i8 [ 0, %76 ], [ %97, %78 ]
  %81 = phi i64 [ %77, %76 ], [ %99, %78 ]
  %82 = getelementptr inbounds i8, i8* %72, i64 %79
  %83 = load i8, i8* %82, align 1
  %84 = or i64 %79, 1
  %85 = getelementptr inbounds i8, i8* %72, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = or i8 %86, %83
  %88 = or i64 %79, 2
  %89 = getelementptr inbounds i8, i8* %72, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %90, %87
  %92 = or i64 %79, 3
  %93 = getelementptr inbounds i8, i8* %72, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %94, %91
  %96 = icmp eq i8 %95, 0
  %97 = select i1 %96, i8 %80, i8 1
  %98 = add nuw i64 %79, 4
  %99 = add i64 %81, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %78

101:                                              ; preds = %78, %69
  %102 = phi i8 [ undef, %69 ], [ %97, %78 ]
  %103 = phi i64 [ 0, %69 ], [ %98, %78 ]
  %104 = phi i8 [ 0, %69 ], [ %97, %78 ]
  %105 = icmp eq i64 %74, 0
  br i1 %105, label %117, label %106

106:                                              ; preds = %101, %106
  %107 = phi i64 [ %114, %106 ], [ %103, %101 ]
  %108 = phi i8 [ %113, %106 ], [ %104, %101 ]
  %109 = phi i64 [ %115, %106 ], [ %74, %101 ]
  %110 = getelementptr inbounds i8, i8* %72, i64 %107
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 0
  %113 = select i1 %112, i8 %108, i8 1
  %114 = add nuw i64 %107, 1
  %115 = add i64 %109, -1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %106, !llvm.loop !2

117:                                              ; preds = %106, %101
  %118 = phi i8 [ %102, %101 ], [ %113, %106 ]
  %119 = and i8 %118, 1
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %129, label %121

121:                                              ; preds = %117
  %122 = icmp ugt i64 %67, 8
  br i1 %122, label %123, label %128

123:                                              ; preds = %121
  %124 = add i64 %67, -1
  %125 = getelementptr inbounds i8, i8* %72, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %129, label %128

128:                                              ; preds = %123, %121
  br label %129

129:                                              ; preds = %57, %117, %123, %128
  %130 = phi i8 [ 0, %57 ], [ 1, %128 ], [ 0, %123 ], [ 0, %117 ]
  store i8 %130, i8* %58, align 8
  %131 = load i8, i8* %9, align 1
  %132 = icmp slt i8 %131, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %129
  %134 = load i8*, i8** %6, align 8
  call void @_ZdlPv(i8* %134) #6
  br label %135

135:                                              ; preds = %129, %133
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6syncer18NodeOrdinalToInt64ERKNS_7OrdinalINS_17NodeOrdinalTraitsEEE(%"class.syncer::Ordinal"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #5
  %5 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 1
  %6 = load i8, i8* %5, align 8, !range !4, !noalias !5
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5, !noalias !5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i32 367, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0)) #5
  %10 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5, !noalias !5
  br label %11

11:                                               ; preds = %8, %1
  %12 = bitcast %"class.syncer::Ordinal"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1, !noalias !5
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = bitcast %"class.syncer::Ordinal"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %17, i64 24, i1 false) #5
  br label %23

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8, !noalias !5
  %21 = getelementptr inbounds %"class.syncer::Ordinal", %"class.syncer::Ordinal"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8, !noalias !5
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %20, i64 %22) #5
  br label %23

23:                                               ; preds = %16, %18
  %24 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = zext i8 %26 to i64
  %31 = select i1 %27, i64 %29, i64 %30
  %32 = icmp ult i64 %31, 8
  br i1 %32, label %33, label %36

33:                                               ; preds = %23
  %34 = select i1 %27, i64 %29, i64 %30
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %85, label %36

36:                                               ; preds = %23, %33
  %37 = phi i64 [ %34, %33 ], [ 8, %23 ]
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = select i1 %27, i8* %39, i8* %4
  %41 = icmp ult i64 %37, 4
  br i1 %41, label %42, label %45

42:                                               ; preds = %76, %36
  %43 = phi i64 [ 0, %36 ], [ %80, %76 ]
  %44 = phi i64 [ 0, %36 ], [ %46, %76 ]
  br label %91

45:                                               ; preds = %36
  %46 = and i64 %37, -4
  br label %47

47:                                               ; preds = %47, %45
  %48 = phi i64 [ 0, %45 ], [ %73, %47 ]
  %49 = phi <2 x i64> [ zeroinitializer, %45 ], [ %71, %47 ]
  %50 = phi <2 x i64> [ zeroinitializer, %45 ], [ %72, %47 ]
  %51 = phi <2 x i64> [ <i64 0, i64 1>, %45 ], [ %74, %47 ]
  %52 = xor i64 %48, -1
  %53 = add i64 %37, %52
  %54 = getelementptr inbounds i8, i8* %40, i64 %53
  %55 = getelementptr inbounds i8, i8* %54, i64 -1
  %56 = bitcast i8* %55 to <2 x i8>*
  %57 = load <2 x i8>, <2 x i8>* %56, align 1
  %58 = shufflevector <2 x i8> %57, <2 x i8> undef, <2 x i32> <i32 1, i32 0>
  %59 = getelementptr inbounds i8, i8* %54, i64 -2
  %60 = getelementptr inbounds i8, i8* %59, i64 -1
  %61 = bitcast i8* %60 to <2 x i8>*
  %62 = load <2 x i8>, <2 x i8>* %61, align 1
  %63 = shufflevector <2 x i8> %62, <2 x i8> undef, <2 x i32> <i32 1, i32 0>
  %64 = zext <2 x i8> %58 to <2 x i64>
  %65 = zext <2 x i8> %63 to <2 x i64>
  %66 = shl <2 x i64> %51, <i64 3, i64 3>
  %67 = shl <2 x i64> %51, <i64 3, i64 3>
  %68 = add <2 x i64> %67, <i64 16, i64 16>
  %69 = shl <2 x i64> %64, %66
  %70 = shl <2 x i64> %65, %68
  %71 = or <2 x i64> %69, %49
  %72 = or <2 x i64> %70, %50
  %73 = add i64 %48, 4
  %74 = add <2 x i64> %51, <i64 4, i64 4>
  %75 = icmp eq i64 %73, %46
  br i1 %75, label %76, label %47, !llvm.loop !8

76:                                               ; preds = %47
  %77 = or <2 x i64> %72, %71
  %78 = shufflevector <2 x i64> %77, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %79 = or <2 x i64> %77, %78
  %80 = extractelement <2 x i64> %79, i32 0
  %81 = icmp eq i64 %37, %46
  br i1 %81, label %82, label %42

82:                                               ; preds = %91, %76
  %83 = phi i64 [ %80, %76 ], [ %101, %91 ]
  %84 = xor i64 %83, -9223372036854775808
  br label %85

85:                                               ; preds = %82, %33
  %86 = phi i64 [ -9223372036854775808, %33 ], [ %84, %82 ]
  br i1 %27, label %87, label %90

87:                                               ; preds = %85
  %88 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  call void @_ZdlPv(i8* %89) #6
  br label %90

90:                                               ; preds = %85, %87
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #5
  ret i64 %86

91:                                               ; preds = %42, %91
  %92 = phi i64 [ %101, %91 ], [ %43, %42 ]
  %93 = phi i64 [ %102, %91 ], [ %44, %42 ]
  %94 = xor i64 %93, -1
  %95 = add i64 %37, %94
  %96 = getelementptr inbounds i8, i8* %40, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i64
  %99 = shl i64 %93, 3
  %100 = shl i64 %98, %99
  %101 = or i64 %100, %92
  %102 = add nuw i64 %93, 1
  %103 = icmp eq i64 %102, %37
  br i1 %103, label %82, label %91, !llvm.loop !10
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i8 0, i8 2}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK6syncer7OrdinalINS_17NodeOrdinalTraitsEE15ToInternalValueEv: argument 0"}
!7 = distinct !{!7, !"_ZNK6syncer7OrdinalINS_17NodeOrdinalTraitsEE15ToInternalValueEv"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11, !9}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
