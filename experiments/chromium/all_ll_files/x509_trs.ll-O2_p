; ModuleID = '../../third_party/boringssl/src/crypto/x509/x509_trs.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/x509_trs.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type { %struct.asn1_string_st*, %struct.asn1_string_st* }
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type { %struct.X509_algor_st*, %struct.asn1_string_st*, %struct.evp_pkey_st* }
%struct.evp_pkey_st = type { i32, i32, %union.anon.0, %struct.evp_pkey_asn1_method_st* }
%union.anon.0 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type { %struct.stack_st_ASN1_OBJECT*, %struct.stack_st_ASN1_OBJECT*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_ALGOR* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.stack_st_X509_ALGOR = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.stack_st_X509_TRUST = type opaque
%struct.x509_trust_st = type { i32, i32, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)*, i8*, i32, i8* }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }

@default_trust = internal unnamed_addr global i32 (i32, %struct.x509_st*, i32)* @obj_trust, align 8
@trtable = internal unnamed_addr global %struct.stack_st_X509_TRUST* null, align 8
@trstandard = internal global [8 x %struct.x509_trust_st] [%struct.x509_trust_st { i32 1, i32 0, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)* @trust_compat, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i32 0, i8* null }, %struct.x509_trust_st { i32 2, i32 0, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)* @trust_1oidany, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 130, i8* null }, %struct.x509_trust_st { i32 3, i32 0, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)* @trust_1oidany, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i32 129, i8* null }, %struct.x509_trust_st { i32 4, i32 0, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)* @trust_1oidany, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), i32 132, i8* null }, %struct.x509_trust_st { i32 5, i32 0, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)* @trust_1oidany, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i32 131, i8* null }, %struct.x509_trust_st { i32 6, i32 0, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)* @trust_1oid, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i32 0, i32 0), i32 180, i8* null }, %struct.x509_trust_st { i32 7, i32 0, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)* @trust_1oid, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i32 178, i8* null }, %struct.x509_trust_st { i32 8, i32 0, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)* @trust_1oidany, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i32 133, i8* null }], align 16
@.str = private unnamed_addr constant [55 x i8] c"../../third_party/boringssl/src/crypto/x509/x509_trs.c\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"compatible\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"SSL Client\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"SSL Server\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"S/MIME email\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Object Signer\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"OCSP responder\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"OCSP request\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"TSA server\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 (i32, %struct.x509_st*, i32)* @X509_TRUST_set_default(i32 (i32, %struct.x509_st*, i32)*) local_unnamed_addr #0 {
  %2 = load i32 (i32, %struct.x509_st*, i32)*, i32 (i32, %struct.x509_st*, i32)** @default_trust, align 8
  store i32 (i32, %struct.x509_st*, i32)* %0, i32 (i32, %struct.x509_st*, i32)** @default_trust, align 8
  ret i32 (i32, %struct.x509_st*, i32)* %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_check_trust(%struct.x509_st*, i32, i32) local_unnamed_addr #2 {
  %4 = alloca %struct.x509_trust_st, align 8
  %5 = alloca i64, align 8
  switch i32 %1, label %18 [
    i32 -1, label %61
    i32 0, label %6
  ]

6:                                                ; preds = %3
  %7 = tail call i32 @obj_trust(i32 910, %struct.x509_st* %0, i32 0)
  %8 = icmp eq i32 %7, 3
  br i1 %8, label %9, label %61

9:                                                ; preds = %6
  %10 = tail call i32 @x509v3_cache_extensions(%struct.x509_st* %0) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %61, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %0, i64 0, i32 7
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, 8192
  %16 = icmp eq i64 %15, 0
  %17 = select i1 %16, i32 3, i32 1
  br label %61

18:                                               ; preds = %3
  %19 = bitcast %struct.x509_trust_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 40, i1 false) #6
  %20 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #6
  store i64 -6148914691236517206, i64* %5, align 8
  %21 = add i32 %1, -1
  %22 = icmp ult i32 %21, 8
  br i1 %22, label %23, label %24

23:                                               ; preds = %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #6
  br label %46

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %4, i64 0, i32 0
  store i32 %1, i32* %25, align 8
  %26 = load %struct.stack_st_X509_TRUST*, %struct.stack_st_X509_TRUST** @trtable, align 8
  %27 = icmp eq %struct.stack_st_X509_TRUST* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = bitcast %struct.stack_st_X509_TRUST* %26 to %struct.stack_st*
  tail call void @sk_sort(%struct.stack_st* nonnull %29) #6
  %30 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509_TRUST** @trtable to %struct.stack_st**), align 8
  %31 = call i32 @sk_find(%struct.stack_st* %30, i64* nonnull %5, i8* nonnull %19, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509_TRUST_call_cmp_func) #6
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %24, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #6
  br label %39

34:                                               ; preds = %28
  %35 = load i64, i64* %5, align 8
  %36 = trunc i64 %35 to i32
  %37 = add i32 %36, 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #6
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %42

39:                                               ; preds = %33, %34
  %40 = load i32 (i32, %struct.x509_st*, i32)*, i32 (i32, %struct.x509_st*, i32)** @default_trust, align 8
  %41 = call i32 %40(i32 %1, %struct.x509_st* %0, i32 %2) #6
  br label %61

42:                                               ; preds = %34
  %43 = icmp slt i32 %37, 0
  br i1 %43, label %56, label %44

44:                                               ; preds = %42
  %45 = icmp slt i32 %37, 8
  br i1 %45, label %46, label %50

46:                                               ; preds = %23, %44
  %47 = phi i32 [ %21, %23 ], [ %37, %44 ]
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [8 x %struct.x509_trust_st], [8 x %struct.x509_trust_st]* @trstandard, i64 0, i64 %48
  br label %56

50:                                               ; preds = %44
  %51 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509_TRUST** @trtable to %struct.stack_st**), align 8
  %52 = sext i32 %37 to i64
  %53 = add nsw i64 %52, -8
  %54 = call i8* @sk_value(%struct.stack_st* %51, i64 %53) #6
  %55 = bitcast i8* %54 to %struct.x509_trust_st*
  br label %56

56:                                               ; preds = %42, %46, %50
  %57 = phi %struct.x509_trust_st* [ %49, %46 ], [ %55, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %57, i64 0, i32 2
  %59 = load i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)*, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)** %58, align 8
  %60 = call i32 %59(%struct.x509_trust_st* %57, %struct.x509_st* %0, i32 %2) #6
  br label %61

61:                                               ; preds = %12, %9, %6, %3, %56, %39
  %62 = phi i32 [ %41, %39 ], [ %60, %56 ], [ 1, %3 ], [ %7, %6 ], [ 3, %9 ], [ %17, %12 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @obj_trust(i32, %struct.x509_st* nocapture readonly, i32) #2 {
  %4 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %1, i64 0, i32 18
  %5 = load %struct.x509_cert_aux_st*, %struct.x509_cert_aux_st** %4, align 8
  %6 = icmp eq %struct.x509_cert_aux_st* %5, null
  br i1 %6, label %49, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.x509_cert_aux_st, %struct.x509_cert_aux_st* %5, i64 0, i32 1
  %9 = load %struct.stack_st_ASN1_OBJECT*, %struct.stack_st_ASN1_OBJECT** %8, align 8
  %10 = icmp eq %struct.stack_st_ASN1_OBJECT* %9, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %7
  %12 = bitcast %struct.stack_st_ASN1_OBJECT* %9 to %struct.stack_st*
  %13 = bitcast %struct.stack_st_ASN1_OBJECT** %8 to %struct.stack_st**
  %14 = tail call i64 @sk_num(%struct.stack_st* nonnull %12) #6
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %28, label %20

16:                                               ; preds = %20
  %17 = load %struct.stack_st*, %struct.stack_st** %13, align 8
  %18 = tail call i64 @sk_num(%struct.stack_st* %17) #6
  %19 = icmp ult i64 %27, %18
  br i1 %19, label %20, label %28

20:                                               ; preds = %11, %16
  %21 = phi i64 [ %27, %16 ], [ 0, %11 ]
  %22 = load %struct.stack_st*, %struct.stack_st** %13, align 8
  %23 = tail call i8* @sk_value(%struct.stack_st* %22, i64 %21) #6
  %24 = bitcast i8* %23 to %struct.asn1_object_st*
  %25 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %24) #6
  %26 = icmp eq i32 %25, %0
  %27 = add nuw i64 %21, 1
  br i1 %26, label %49, label %16

28:                                               ; preds = %16, %11, %7
  %29 = getelementptr inbounds %struct.x509_cert_aux_st, %struct.x509_cert_aux_st* %5, i64 0, i32 0
  %30 = load %struct.stack_st_ASN1_OBJECT*, %struct.stack_st_ASN1_OBJECT** %29, align 8
  %31 = icmp eq %struct.stack_st_ASN1_OBJECT* %30, null
  br i1 %31, label %49, label %32

32:                                               ; preds = %28
  %33 = bitcast %struct.stack_st_ASN1_OBJECT* %30 to %struct.stack_st*
  %34 = bitcast %struct.x509_cert_aux_st* %5 to %struct.stack_st**
  %35 = tail call i64 @sk_num(%struct.stack_st* nonnull %33) #6
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %49, label %41

37:                                               ; preds = %41
  %38 = load %struct.stack_st*, %struct.stack_st** %34, align 8
  %39 = tail call i64 @sk_num(%struct.stack_st* %38) #6
  %40 = icmp ult i64 %48, %39
  br i1 %40, label %41, label %49

41:                                               ; preds = %32, %37
  %42 = phi i64 [ %48, %37 ], [ 0, %32 ]
  %43 = load %struct.stack_st*, %struct.stack_st** %34, align 8
  %44 = tail call i8* @sk_value(%struct.stack_st* %43, i64 %42) #6
  %45 = bitcast i8* %44 to %struct.asn1_object_st*
  %46 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %45) #6
  %47 = icmp eq i32 %46, %0
  %48 = add nuw i64 %42, 1
  br i1 %47, label %49, label %37

49:                                               ; preds = %20, %41, %37, %32, %28, %3
  %50 = phi i32 [ 3, %3 ], [ 3, %28 ], [ 3, %32 ], [ 1, %41 ], [ 3, %37 ], [ 2, %20 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @trust_compat(%struct.x509_trust_st* nocapture readnone, %struct.x509_st*, i32) #2 {
  %4 = tail call i32 @x509v3_cache_extensions(%struct.x509_st* %1) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %1, i64 0, i32 7
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 8192
  %10 = icmp eq i64 %9, 0
  %11 = select i1 %10, i32 3, i32 1
  br label %12

12:                                               ; preds = %6, %3
  %13 = phi i32 [ 3, %3 ], [ %11, %6 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_TRUST_get_by_id(i32) local_unnamed_addr #2 {
  %2 = alloca %struct.x509_trust_st, align 8
  %3 = alloca i64, align 8
  %4 = bitcast %struct.x509_trust_st* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 40, i1 false)
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  store i64 -6148914691236517206, i64* %3, align 8
  %6 = add i32 %0, -1
  %7 = icmp ult i32 %6, 8
  br i1 %7, label %21, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %2, i64 0, i32 0
  store i32 %0, i32* %9, align 8
  %10 = load %struct.stack_st_X509_TRUST*, %struct.stack_st_X509_TRUST** @trtable, align 8
  %11 = icmp eq %struct.stack_st_X509_TRUST* %10, null
  br i1 %11, label %21, label %12

12:                                               ; preds = %8
  %13 = bitcast %struct.stack_st_X509_TRUST* %10 to %struct.stack_st*
  tail call void @sk_sort(%struct.stack_st* nonnull %13) #6
  %14 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509_TRUST** @trtable to %struct.stack_st**), align 8
  %15 = call i32 @sk_find(%struct.stack_st* %14, i64* nonnull %3, i8* nonnull %4, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509_TRUST_call_cmp_func) #6
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %12
  %18 = load i64, i64* %3, align 8
  %19 = trunc i64 %18 to i32
  %20 = add i32 %19, 8
  br label %21

21:                                               ; preds = %1, %12, %8, %17
  %22 = phi i32 [ %20, %17 ], [ -1, %8 ], [ -1, %12 ], [ %6, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #6
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.x509_trust_st* @X509_TRUST_get0(i32) local_unnamed_addr #2 {
  %2 = icmp slt i32 %0, 0
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = icmp slt i32 %0, 8
  br i1 %4, label %5, label %8

5:                                                ; preds = %3
  %6 = sext i32 %0 to i64
  %7 = getelementptr inbounds [8 x %struct.x509_trust_st], [8 x %struct.x509_trust_st]* @trstandard, i64 0, i64 %6
  br label %14

8:                                                ; preds = %3
  %9 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509_TRUST** @trtable to %struct.stack_st**), align 8
  %10 = sext i32 %0 to i64
  %11 = add nsw i64 %10, -8
  %12 = tail call i8* @sk_value(%struct.stack_st* %9, i64 %11) #6
  %13 = bitcast i8* %12 to %struct.x509_trust_st*
  br label %14

14:                                               ; preds = %1, %8, %5
  %15 = phi %struct.x509_trust_st* [ %7, %5 ], [ %13, %8 ], [ null, %1 ]
  ret %struct.x509_trust_st* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_TRUST_get_count() local_unnamed_addr #2 {
  %1 = load %struct.stack_st_X509_TRUST*, %struct.stack_st_X509_TRUST** @trtable, align 8
  %2 = icmp eq %struct.stack_st_X509_TRUST* %1, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %0
  %4 = bitcast %struct.stack_st_X509_TRUST* %1 to %struct.stack_st*
  %5 = tail call i64 @sk_num(%struct.stack_st* nonnull %4) #6
  %6 = trunc i64 %5 to i32
  %7 = add i32 %6, 8
  br label %8

8:                                                ; preds = %0, %3
  %9 = phi i32 [ %7, %3 ], [ 8, %0 ]
  ret i32 %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_TRUST_set(i32* nocapture, i32) local_unnamed_addr #2 {
  %3 = alloca %struct.x509_trust_st, align 8
  %4 = alloca i64, align 8
  %5 = bitcast %struct.x509_trust_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 40, i1 false) #6
  %6 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  store i64 -6148914691236517206, i64* %4, align 8
  %7 = add i32 %1, -1
  %8 = icmp ult i32 %7, 8
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #6
  br label %25

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %3, i64 0, i32 0
  store i32 %1, i32* %11, align 8
  %12 = load %struct.stack_st_X509_TRUST*, %struct.stack_st_X509_TRUST** @trtable, align 8
  %13 = icmp eq %struct.stack_st_X509_TRUST* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = bitcast %struct.stack_st_X509_TRUST* %12 to %struct.stack_st*
  tail call void @sk_sort(%struct.stack_st* nonnull %15) #6
  %16 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509_TRUST** @trtable to %struct.stack_st**), align 8
  %17 = call i32 @sk_find(%struct.stack_st* %16, i64* nonnull %4, i8* nonnull %5, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509_TRUST_call_cmp_func) #6
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %10, %14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #6
  br label %24

20:                                               ; preds = %14
  %21 = load i64, i64* %4, align 8
  %22 = trunc i64 %21 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #6
  %23 = icmp eq i32 %22, -9
  br i1 %23, label %24, label %25

24:                                               ; preds = %19, %20
  call void @ERR_put_error(i32 11, i32 0, i32 113, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 174) #6
  br label %26

25:                                               ; preds = %9, %20
  store i32 %1, i32* %0, align 4
  br label %26

26:                                               ; preds = %25, %24
  %27 = phi i32 [ 0, %24 ], [ 1, %25 ]
  ret i32 %27
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_TRUST_add(i32, i32, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)*, i8*, i32, i8*) local_unnamed_addr #2 {
  %7 = alloca %struct.x509_trust_st, align 8
  %8 = alloca i64, align 8
  %9 = and i32 %1, -4
  %10 = bitcast %struct.x509_trust_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 40, i1 false) #6
  %11 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  store i64 -6148914691236517206, i64* %8, align 8
  %12 = add i32 %0, -1
  %13 = icmp ult i32 %12, 8
  br i1 %13, label %14, label %15

14:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #6
  br label %42

15:                                               ; preds = %6
  %16 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %7, i64 0, i32 0
  store i32 %0, i32* %16, align 8
  %17 = load %struct.stack_st_X509_TRUST*, %struct.stack_st_X509_TRUST** @trtable, align 8
  %18 = icmp eq %struct.stack_st_X509_TRUST* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = bitcast %struct.stack_st_X509_TRUST* %17 to %struct.stack_st*
  tail call void @sk_sort(%struct.stack_st* nonnull %20) #6
  %21 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509_TRUST** @trtable to %struct.stack_st**), align 8
  %22 = call i32 @sk_find(%struct.stack_st* %21, i64* nonnull %8, i8* nonnull %10, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509_TRUST_call_cmp_func) #6
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %15, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #6
  br label %30

25:                                               ; preds = %19
  %26 = load i64, i64* %8, align 8
  %27 = trunc i64 %26 to i32
  %28 = add i32 %27, 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #6
  %29 = icmp eq i32 %28, -1
  br i1 %29, label %30, label %38

30:                                               ; preds = %24, %25
  %31 = call i8* @OPENSSL_malloc(i64 40) #6
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 199) #6
  br label %116

34:                                               ; preds = %30
  %35 = bitcast i8* %31 to %struct.x509_trust_st*
  %36 = getelementptr inbounds i8, i8* %31, i64 4
  %37 = bitcast i8* %36 to i32*
  store i32 1, i32* %37, align 4
  br label %52

38:                                               ; preds = %25
  %39 = icmp slt i32 %28, 0
  br i1 %39, label %52, label %40

40:                                               ; preds = %38
  %41 = icmp slt i32 %28, 8
  br i1 %41, label %42, label %46

42:                                               ; preds = %14, %40
  %43 = phi i32 [ %12, %14 ], [ %28, %40 ]
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [8 x %struct.x509_trust_st], [8 x %struct.x509_trust_st]* @trstandard, i64 0, i64 %44
  br label %52

46:                                               ; preds = %40
  %47 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509_TRUST** @trtable to %struct.stack_st**), align 8
  %48 = sext i32 %28 to i64
  %49 = add nsw i64 %48, -8
  %50 = call i8* @sk_value(%struct.stack_st* %47, i64 %49) #6
  %51 = bitcast i8* %50 to %struct.x509_trust_st*
  br label %52

52:                                               ; preds = %46, %42, %38, %34
  %53 = phi i1 [ true, %34 ], [ false, %42 ], [ false, %46 ], [ false, %38 ]
  %54 = phi %struct.x509_trust_st* [ %35, %34 ], [ %45, %42 ], [ %51, %46 ], [ null, %38 ]
  %55 = call i8* @OPENSSL_strdup(i8* %3) #6
  %56 = icmp eq i8* %55, null
  br i1 %56, label %57, label %60

57:                                               ; preds = %52
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 209) #6
  br i1 %53, label %58, label %116

58:                                               ; preds = %57
  %59 = bitcast %struct.x509_trust_st* %54 to i8*
  call void @OPENSSL_free(i8* %59) #6
  br label %116

60:                                               ; preds = %52
  %61 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %54, i64 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %54, i64 0, i32 3
  %67 = load i8*, i8** %66, align 8
  call void @OPENSSL_free(i8* %67) #6
  %68 = load i32, i32* %61, align 4
  br label %69

69:                                               ; preds = %60, %65
  %70 = phi i32 [ %62, %60 ], [ %68, %65 ]
  %71 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %54, i64 0, i32 3
  store i8* %55, i8** %71, align 8
  %72 = and i32 %70, 1
  %73 = or i32 %9, %72
  %74 = or i32 %73, 2
  store i32 %74, i32* %61, align 4
  %75 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %54, i64 0, i32 0
  store i32 %0, i32* %75, align 8
  %76 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %54, i64 0, i32 2
  store i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)* %2, i32 (%struct.x509_trust_st*, %struct.x509_st*, i32)** %76, align 8
  %77 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %54, i64 0, i32 4
  store i32 %4, i32* %77, align 8
  %78 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %54, i64 0, i32 5
  store i8* %5, i8** %78, align 8
  br i1 %53, label %79, label %116

79:                                               ; preds = %69
  %80 = load %struct.stack_st_X509_TRUST*, %struct.stack_st_X509_TRUST** @trtable, align 8
  %81 = icmp eq %struct.stack_st_X509_TRUST* %80, null
  %82 = bitcast %struct.stack_st_X509_TRUST* %80 to %struct.stack_st*
  br i1 %81, label %83, label %99

83:                                               ; preds = %79
  %84 = call %struct.stack_st* @sk_new(i32 (i8**, i8**)* bitcast (i32 (%struct.x509_trust_st**, %struct.x509_trust_st**)* @tr_cmp to i32 (i8**, i8**)*)) #6
  store %struct.stack_st* %84, %struct.stack_st** bitcast (%struct.stack_st_X509_TRUST** @trtable to %struct.stack_st**), align 8
  %85 = icmp eq %struct.stack_st* %84, null
  br i1 %85, label %86, label %99

86:                                               ; preds = %83
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 232) #6
  %87 = icmp eq %struct.x509_trust_st* %54, null
  br i1 %87, label %116, label %88

88:                                               ; preds = %86
  %89 = load i32, i32* %61, align 4
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %116, label %92

92:                                               ; preds = %88
  %93 = and i32 %89, 2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %97, label %95

95:                                               ; preds = %92
  %96 = load i8*, i8** %71, align 8
  call void @OPENSSL_free(i8* %96) #6
  br label %97

97:                                               ; preds = %95, %92
  %98 = bitcast %struct.x509_trust_st* %54 to i8*
  call void @OPENSSL_free(i8* nonnull %98) #6
  br label %116

99:                                               ; preds = %83, %79
  %100 = phi %struct.stack_st* [ %84, %83 ], [ %82, %79 ]
  %101 = bitcast %struct.x509_trust_st* %54 to i8*
  %102 = call i64 @sk_push(%struct.stack_st* %100, i8* %101) #6
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %116

104:                                              ; preds = %99
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 237) #6
  %105 = icmp eq %struct.x509_trust_st* %54, null
  br i1 %105, label %116, label %106

106:                                              ; preds = %104
  %107 = load i32, i32* %61, align 4
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %116, label %110

110:                                              ; preds = %106
  %111 = and i32 %107, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %115, label %113

113:                                              ; preds = %110
  %114 = load i8*, i8** %71, align 8
  call void @OPENSSL_free(i8* %114) #6
  br label %115

115:                                              ; preds = %113, %110
  call void @OPENSSL_free(i8* nonnull %101) #6
  br label %116

116:                                              ; preds = %115, %106, %104, %97, %88, %86, %69, %99, %57, %58, %33
  %117 = phi i32 [ 0, %33 ], [ 0, %58 ], [ 0, %57 ], [ 1, %99 ], [ 1, %69 ], [ 0, %86 ], [ 0, %88 ], [ 0, %97 ], [ 0, %104 ], [ 0, %106 ], [ 0, %115 ]
  ret i32 %117
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #3

declare i8* @OPENSSL_strdup(i8*) local_unnamed_addr #3

declare void @OPENSSL_free(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @tr_cmp(%struct.x509_trust_st** nocapture readonly, %struct.x509_trust_st** nocapture readonly) #4 {
  %3 = load %struct.x509_trust_st*, %struct.x509_trust_st** %0, align 8
  %4 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.x509_trust_st*, %struct.x509_trust_st** %1, align 8
  %7 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = sub nsw i32 %5, %8
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal void @trtable_free(%struct.x509_trust_st*) #2 {
  %2 = icmp eq %struct.x509_trust_st* %0, null
  br i1 %2, label %16, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %3
  %9 = and i32 %5, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %0, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  tail call void @OPENSSL_free(i8* %13) #6
  br label %14

14:                                               ; preds = %8, %11
  %15 = bitcast %struct.x509_trust_st* %0 to i8*
  tail call void @OPENSSL_free(i8* nonnull %15) #6
  br label %16

16:                                               ; preds = %3, %1, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_TRUST_cleanup() local_unnamed_addr #2 {
  br label %1

1:                                                ; preds = %18, %0
  %2 = phi i64 [ 0, %0 ], [ %19, %18 ]
  %3 = getelementptr inbounds [8 x %struct.x509_trust_st], [8 x %struct.x509_trust_st]* @trstandard, i64 0, i64 %2
  %4 = icmp eq %struct.x509_trust_st* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds [8 x %struct.x509_trust_st], [8 x %struct.x509_trust_st]* @trstandard, i64 0, i64 %2, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %18, label %10

10:                                               ; preds = %5
  %11 = and i32 %7, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds [8 x %struct.x509_trust_st], [8 x %struct.x509_trust_st]* @trstandard, i64 0, i64 %2, i32 3
  %15 = load i8*, i8** %14, align 8
  tail call void @OPENSSL_free(i8* %15) #6
  br label %16

16:                                               ; preds = %13, %10
  %17 = bitcast %struct.x509_trust_st* %3 to i8*
  tail call void @OPENSSL_free(i8* nonnull %17) #6
  br label %18

18:                                               ; preds = %1, %5, %16
  %19 = add nuw nsw i64 %2, 1
  %20 = icmp eq i64 %19, 8
  br i1 %20, label %21, label %1

21:                                               ; preds = %18
  %22 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509_TRUST** @trtable to %struct.stack_st**), align 8
  tail call void @sk_pop_free_ex(%struct.stack_st* %22, void (void (i8*)*, i8*)* nonnull @sk_X509_TRUST_call_free_func, void (i8*)* bitcast (void (%struct.x509_trust_st*)* @trtable_free to void (i8*)*)) #6
  store %struct.stack_st_X509_TRUST* null, %struct.stack_st_X509_TRUST** @trtable, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @X509_TRUST_get_flags(%struct.x509_trust_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @X509_TRUST_get0_name(%struct.x509_trust_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @X509_TRUST_get_trust(%struct.x509_trust_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @trust_1oidany(%struct.x509_trust_st* nocapture readonly, %struct.x509_st*, i32) #2 {
  %4 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %1, i64 0, i32 18
  %5 = load %struct.x509_cert_aux_st*, %struct.x509_cert_aux_st** %4, align 8
  %6 = icmp eq %struct.x509_cert_aux_st* %5, null
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.x509_cert_aux_st, %struct.x509_cert_aux_st* %5, i64 0, i32 0
  %9 = load %struct.stack_st_ASN1_OBJECT*, %struct.stack_st_ASN1_OBJECT** %8, align 8
  %10 = icmp eq %struct.stack_st_ASN1_OBJECT* %9, null
  br i1 %10, label %11, label %15

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.x509_cert_aux_st, %struct.x509_cert_aux_st* %5, i64 0, i32 1
  %13 = load %struct.stack_st_ASN1_OBJECT*, %struct.stack_st_ASN1_OBJECT** %12, align 8
  %14 = icmp eq %struct.stack_st_ASN1_OBJECT* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %11, %7
  %16 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %0, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = tail call i32 @obj_trust(i32 %17, %struct.x509_st* %1, i32 %2)
  br label %28

19:                                               ; preds = %11, %3
  %20 = tail call i32 @x509v3_cache_extensions(%struct.x509_st* %1) #6
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %1, i64 0, i32 7
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, 8192
  %26 = icmp eq i64 %25, 0
  %27 = select i1 %26, i32 3, i32 1
  br label %28

28:                                               ; preds = %22, %19, %15
  %29 = phi i32 [ %18, %15 ], [ 3, %19 ], [ %27, %22 ]
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @trust_1oid(%struct.x509_trust_st* nocapture readonly, %struct.x509_st* nocapture readonly, i32) #2 {
  %4 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %1, i64 0, i32 18
  %5 = load %struct.x509_cert_aux_st*, %struct.x509_cert_aux_st** %4, align 8
  %6 = icmp eq %struct.x509_cert_aux_st* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.x509_trust_st, %struct.x509_trust_st* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = tail call i32 @obj_trust(i32 %9, %struct.x509_st* %1, i32 %2)
  br label %11

11:                                               ; preds = %3, %7
  %12 = phi i32 [ %10, %7 ], [ 3, %3 ]
  ret i32 %12
}

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #3

declare void @sk_sort(%struct.stack_st*) local_unnamed_addr #3

declare i32 @sk_find(%struct.stack_st*, i64*, i8*, i32 (i32 (i8**, i8**)*, i8**, i8**)*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @sk_X509_TRUST_call_cmp_func(i32 (i8**, i8**)* nocapture, i8** nocapture readonly, i8** nocapture readonly) #5 {
  %4 = alloca %struct.x509_trust_st*, align 8
  %5 = alloca %struct.x509_trust_st*, align 8
  %6 = bitcast %struct.x509_trust_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = bitcast i8** %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.x509_trust_st** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast %struct.x509_trust_st** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #6
  %11 = bitcast i8** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.x509_trust_st** %5 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast i32 (i8**, i8**)* %0 to i32 (%struct.x509_trust_st**, %struct.x509_trust_st**)*
  %15 = call i32 %14(%struct.x509_trust_st** nonnull %4, %struct.x509_trust_st** nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  ret i32 %15
}

declare %struct.stack_st* @sk_new(i32 (i8**, i8**)*) local_unnamed_addr #3

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #3

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_X509_TRUST_call_free_func(void (i8*)* nocapture, i8*) #5 {
  %3 = bitcast void (i8*)* %0 to void (%struct.x509_trust_st*)*
  %4 = bitcast i8* %1 to %struct.x509_trust_st*
  tail call void %3(%struct.x509_trust_st* %4) #6
  ret void
}

declare i32 @x509v3_cache_extensions(%struct.x509_st*) local_unnamed_addr #3

declare i32 @OBJ_obj2nid(%struct.asn1_object_st*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
