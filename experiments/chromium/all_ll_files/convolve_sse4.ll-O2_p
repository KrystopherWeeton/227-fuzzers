; ModuleID = '../../third_party/libgav1/src/src/dsp/x86/convolve_sse4.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/x86/convolve_sse4.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

@_ZN7libgav120kHalfSubPixelFiltersE = external local_unnamed_addr constant [6 x [16 x [8 x i8]]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp19ConvolveInit_SSE4_1Ev() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #7
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 0, i64 0, i64 0, i64 1
  %3 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %2 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_125ConvolveHorizontal_SSE4_1EPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123ConvolveVertical_SSE4_1EPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %3, align 8
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 0, i64 0, i64 1, i64 1
  %5 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %4 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_117Convolve2D_SSE4_1EPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_125ConvolveCompoundCopy_SSE4EPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %5, align 8
  %6 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 0, i64 1, i64 0, i64 1
  %7 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %6 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_133ConvolveCompoundHorizontal_SSE4_1EPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_131ConvolveCompoundVertical_SSE4_1EPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %7, align 8
  %8 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 0, i64 1, i64 1, i64 1
  store void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_125ConvolveCompound2D_SSE4_1EPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %8, align 8
  %9 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 1, i64 0, i64 0, i64 1
  %10 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %9 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_139ConvolveIntraBlockCopyHorizontal_SSE4_1EPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_137ConvolveIntraBlockCopyVertical_SSE4_1EPKvliiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %10, align 8
  %11 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 5, i64 1, i64 0, i64 1, i64 1
  store void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_131ConvolveIntraBlockCopy2D_SSE4_1EPKvliiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)** %11, align 8
  %12 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 6, i64 0
  %13 = bitcast void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)** %12 to <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_122ConvolveScale2D_SSE4_1ILb0EEEvPKvliiiiiiiiPvl, void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_122ConvolveScale2D_SSE4_1ILb1EEEvPKvliiiiiiiiPvl>, <2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*>* %13, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_125ConvolveHorizontal_SSE4_1EPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %6, 5
  br i1 %11, label %12, label %31

12:                                               ; preds = %10
  %13 = and i32 %2, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = getelementptr inbounds i8, i8* %0, i64 -3
  %17 = sext i32 %4 to i64
  %18 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 4, i64 %17, i64 0
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %20, i32 0
  br label %200

22:                                               ; preds = %12
  %23 = icmp eq i32 %2, 1
  br i1 %23, label %24, label %31

24:                                               ; preds = %22
  %25 = getelementptr inbounds i8, i8* %0, i64 -3
  %26 = sext i32 %4 to i64
  %27 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 5, i64 %26, i64 0
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %29, i32 0
  br label %277

31:                                               ; preds = %10, %22
  %32 = getelementptr inbounds i8, i8* %0, i64 -3
  %33 = sext i32 %2 to i64
  %34 = sext i32 %4 to i64
  %35 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %33, i64 %34, i64 0
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %37, i32 0
  switch i32 %2, label %354 [
    i32 2, label %39
    i32 1, label %96
    i32 0, label %148
    i32 4, label %200
    i32 5, label %277
  ]

39:                                               ; preds = %31
  %40 = bitcast <2 x i64> %38 to <8 x i16>
  %41 = icmp sgt i32 %6, 4
  br i1 %41, label %42, label %530

42:                                               ; preds = %39
  %43 = shufflevector <8 x i16> %40, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = bitcast <8 x i16> %43 to <2 x i64>
  %45 = shufflevector <2 x i64> %44, <2 x i64> undef, <2 x i32> zeroinitializer
  %46 = shufflevector <8 x i16> %40, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = bitcast <8 x i16> %46 to <2 x i64>
  %48 = shufflevector <2 x i64> %47, <2 x i64> undef, <2 x i32> zeroinitializer
  %49 = shufflevector <8 x i16> %40, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <8 x i16> %49 to <2 x i64>
  %51 = shufflevector <2 x i64> %50, <2 x i64> undef, <2 x i32> zeroinitializer
  %52 = shufflevector <8 x i16> %40, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  %54 = shufflevector <2 x i64> %53, <2 x i64> undef, <2 x i32> zeroinitializer
  %55 = sext i32 %6 to i64
  %56 = bitcast <2 x i64> %54 to <16 x i8>
  %57 = bitcast <2 x i64> %51 to <16 x i8>
  %58 = bitcast <2 x i64> %48 to <16 x i8>
  %59 = bitcast <2 x i64> %45 to <16 x i8>
  br label %60

60:                                               ; preds = %91, %42
  %61 = phi i8* [ %93, %91 ], [ %8, %42 ]
  %62 = phi i32 [ %94, %91 ], [ %7, %42 ]
  %63 = phi i8* [ %92, %91 ], [ %32, %42 ]
  br label %64

64:                                               ; preds = %64, %60
  %65 = phi i64 [ %89, %64 ], [ 0, %60 ]
  %66 = getelementptr inbounds i8, i8* %63, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %70 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %71 = shufflevector <16 x i8> %69, <16 x i8> %70, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %72 = shufflevector <16 x i8> %69, <16 x i8> %70, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %73 = shufflevector <16 x i8> %69, <16 x i8> %70, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %74 = shufflevector <16 x i8> %69, <16 x i8> %70, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %75 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %71, <16 x i8> %56) #7
  %76 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %72, <16 x i8> %57) #7
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %73, <16 x i8> %58) #7
  %78 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %74, <16 x i8> %59) #7
  %79 = add <8 x i16> %75, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %80 = add <8 x i16> %79, %76
  %81 = add <8 x i16> %80, %77
  %82 = add <8 x i16> %81, %78
  %83 = ashr <8 x i16> %82, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %84 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> undef) #7
  %85 = bitcast <16 x i8> %84 to <2 x i64>
  %86 = getelementptr inbounds i8, i8* %61, i64 %65
  %87 = extractelement <2 x i64> %85, i32 0
  %88 = bitcast i8* %86 to i64*
  store i64 %87, i64* %88, align 1
  %89 = add nuw nsw i64 %65, 8
  %90 = icmp slt i64 %89, %55
  br i1 %90, label %64, label %91

91:                                               ; preds = %64
  %92 = getelementptr inbounds i8, i8* %63, i64 %1
  %93 = getelementptr inbounds i8, i8* %61, i64 %9
  %94 = add nsw i32 %62, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %530, label %60

96:                                               ; preds = %31
  %97 = bitcast <2 x i64> %38 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %99 = bitcast <16 x i8> %98 to <8 x i16>
  %100 = icmp sgt i32 %6, 4
  br i1 %100, label %101, label %530

101:                                              ; preds = %96
  %102 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = bitcast <8 x i16> %102 to <2 x i64>
  %104 = shufflevector <2 x i64> %103, <2 x i64> undef, <2 x i32> zeroinitializer
  %105 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  %107 = shufflevector <2 x i64> %106, <2 x i64> undef, <2 x i32> zeroinitializer
  %108 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = bitcast <8 x i16> %108 to <2 x i64>
  %110 = shufflevector <2 x i64> %109, <2 x i64> undef, <2 x i32> zeroinitializer
  %111 = sext i32 %6 to i64
  %112 = bitcast <2 x i64> %110 to <16 x i8>
  %113 = bitcast <2 x i64> %107 to <16 x i8>
  %114 = bitcast <2 x i64> %104 to <16 x i8>
  br label %115

115:                                              ; preds = %143, %101
  %116 = phi i8* [ %145, %143 ], [ %8, %101 ]
  %117 = phi i32 [ %146, %143 ], [ %7, %101 ]
  %118 = phi i8* [ %144, %143 ], [ %32, %101 ]
  br label %119

119:                                              ; preds = %119, %115
  %120 = phi i64 [ %141, %119 ], [ 0, %115 ]
  %121 = getelementptr inbounds i8, i8* %118, i64 %120
  %122 = bitcast i8* %121 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 1
  %124 = shufflevector <16 x i8> %123, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %125 = shufflevector <16 x i8> %123, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %126 = shufflevector <16 x i8> %124, <16 x i8> %125, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %127 = shufflevector <16 x i8> %124, <16 x i8> %125, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %128 = shufflevector <16 x i8> %124, <16 x i8> %125, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %129 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %126, <16 x i8> %112) #7
  %130 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %127, <16 x i8> %113) #7
  %131 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %128, <16 x i8> %114) #7
  %132 = add <8 x i16> %129, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %133 = add <8 x i16> %132, %130
  %134 = add <8 x i16> %133, %131
  %135 = ashr <8 x i16> %134, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %136 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %135, <8 x i16> undef) #7
  %137 = bitcast <16 x i8> %136 to <2 x i64>
  %138 = getelementptr inbounds i8, i8* %116, i64 %120
  %139 = extractelement <2 x i64> %137, i32 0
  %140 = bitcast i8* %138 to i64*
  store i64 %139, i64* %140, align 1
  %141 = add nuw nsw i64 %120, 8
  %142 = icmp slt i64 %141, %111
  br i1 %142, label %119, label %143

143:                                              ; preds = %119
  %144 = getelementptr inbounds i8, i8* %118, i64 %1
  %145 = getelementptr inbounds i8, i8* %116, i64 %9
  %146 = add nsw i32 %117, -1
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %530, label %115

148:                                              ; preds = %31
  %149 = bitcast <2 x i64> %38 to <16 x i8>
  %150 = shufflevector <16 x i8> %149, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %151 = bitcast <16 x i8> %150 to <8 x i16>
  %152 = icmp sgt i32 %6, 4
  br i1 %152, label %153, label %530

153:                                              ; preds = %148
  %154 = shufflevector <8 x i16> %151, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = bitcast <8 x i16> %154 to <2 x i64>
  %156 = shufflevector <2 x i64> %155, <2 x i64> undef, <2 x i32> zeroinitializer
  %157 = shufflevector <8 x i16> %151, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = bitcast <8 x i16> %157 to <2 x i64>
  %159 = shufflevector <2 x i64> %158, <2 x i64> undef, <2 x i32> zeroinitializer
  %160 = shufflevector <8 x i16> %151, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = bitcast <8 x i16> %160 to <2 x i64>
  %162 = shufflevector <2 x i64> %161, <2 x i64> undef, <2 x i32> zeroinitializer
  %163 = sext i32 %6 to i64
  %164 = bitcast <2 x i64> %162 to <16 x i8>
  %165 = bitcast <2 x i64> %159 to <16 x i8>
  %166 = bitcast <2 x i64> %156 to <16 x i8>
  br label %167

167:                                              ; preds = %195, %153
  %168 = phi i8* [ %197, %195 ], [ %8, %153 ]
  %169 = phi i32 [ %198, %195 ], [ %7, %153 ]
  %170 = phi i8* [ %196, %195 ], [ %32, %153 ]
  br label %171

171:                                              ; preds = %171, %167
  %172 = phi i64 [ %193, %171 ], [ 0, %167 ]
  %173 = getelementptr inbounds i8, i8* %170, i64 %172
  %174 = bitcast i8* %173 to <16 x i8>*
  %175 = load <16 x i8>, <16 x i8>* %174, align 1
  %176 = shufflevector <16 x i8> %175, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %177 = shufflevector <16 x i8> %175, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %178 = shufflevector <16 x i8> %176, <16 x i8> %177, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %179 = shufflevector <16 x i8> %176, <16 x i8> %177, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %180 = shufflevector <16 x i8> %176, <16 x i8> %177, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %181 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %178, <16 x i8> %164) #7
  %182 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %179, <16 x i8> %165) #7
  %183 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %180, <16 x i8> %166) #7
  %184 = add <8 x i16> %181, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %185 = add <8 x i16> %184, %182
  %186 = add <8 x i16> %185, %183
  %187 = ashr <8 x i16> %186, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %188 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %187, <8 x i16> undef) #7
  %189 = bitcast <16 x i8> %188 to <2 x i64>
  %190 = getelementptr inbounds i8, i8* %168, i64 %172
  %191 = extractelement <2 x i64> %189, i32 0
  %192 = bitcast i8* %190 to i64*
  store i64 %191, i64* %192, align 1
  %193 = add nuw nsw i64 %172, 8
  %194 = icmp slt i64 %193, %163
  br i1 %194, label %171, label %195

195:                                              ; preds = %171
  %196 = getelementptr inbounds i8, i8* %170, i64 %1
  %197 = getelementptr inbounds i8, i8* %168, i64 %9
  %198 = add nsw i32 %169, -1
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %530, label %167

200:                                              ; preds = %15, %31
  %201 = phi <2 x i64> [ %21, %15 ], [ %38, %31 ]
  %202 = phi i8* [ %16, %15 ], [ %32, %31 ]
  %203 = bitcast <2 x i64> %201 to <8 x i16>
  %204 = shufflevector <8 x i16> %203, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = shufflevector <8 x i16> %203, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %206 = bitcast <8 x i16> %204 to <2 x i64>
  %207 = shufflevector <2 x i64> %206, <2 x i64> undef, <2 x i32> zeroinitializer
  %208 = bitcast <8 x i16> %205 to <2 x i64>
  %209 = shufflevector <2 x i64> %208, <2 x i64> undef, <2 x i32> zeroinitializer
  %210 = icmp eq i32 %6, 4
  br i1 %210, label %211, label %214

211:                                              ; preds = %200
  %212 = bitcast <2 x i64> %207 to <16 x i8>
  %213 = bitcast <2 x i64> %209 to <16 x i8>
  br label %218

214:                                              ; preds = %200
  %215 = shl i64 %1, 1
  %216 = bitcast <2 x i64> %207 to <16 x i8>
  %217 = bitcast <2 x i64> %209 to <16 x i8>
  br label %241

218:                                              ; preds = %218, %211
  %219 = phi i32 [ %239, %218 ], [ %7, %211 ]
  %220 = phi i8* [ %238, %218 ], [ %8, %211 ]
  %221 = phi i8* [ %237, %218 ], [ %202, %211 ]
  %222 = bitcast i8* %221 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1
  %224 = shufflevector <16 x i8> %223, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %225 = shufflevector <16 x i8> %223, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %226 = shufflevector <16 x i8> %224, <16 x i8> %225, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %227 = shufflevector <16 x i8> %224, <16 x i8> %225, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %228 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %226, <16 x i8> %212) #7
  %229 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %227, <16 x i8> %213) #7
  %230 = add <8 x i16> %228, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %231 = add <8 x i16> %230, %229
  %232 = ashr <8 x i16> %231, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %233 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %232, <8 x i16> undef) #7
  %234 = bitcast <16 x i8> %233 to <4 x i32>
  %235 = extractelement <4 x i32> %234, i32 0
  %236 = bitcast i8* %220 to i32*
  store i32 %235, i32* %236, align 1
  %237 = getelementptr inbounds i8, i8* %221, i64 %1
  %238 = getelementptr inbounds i8, i8* %220, i64 %9
  %239 = add nsw i32 %219, -1
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %530, label %218

241:                                              ; preds = %241, %214
  %242 = phi i8* [ %273, %241 ], [ %8, %214 ]
  %243 = phi i32 [ %275, %241 ], [ %7, %214 ]
  %244 = phi i8* [ %274, %241 ], [ %202, %214 ]
  %245 = bitcast i8* %244 to i64*
  %246 = load i64, i64* %245, align 1
  %247 = insertelement <2 x i64> undef, i64 %246, i32 0
  %248 = getelementptr inbounds i8, i8* %244, i64 %1
  %249 = bitcast <2 x i64> %247 to <4 x float>
  %250 = bitcast i8* %248 to <2 x float>*
  %251 = load <2 x float>, <2 x float>* %250, align 1
  %252 = shufflevector <2 x float> %251, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %253 = shufflevector <4 x float> %249, <4 x float> %252, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %254 = bitcast <4 x float> %253 to <16 x i8>
  %255 = shufflevector <16 x i8> %254, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %256 = shufflevector <16 x i8> %254, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 16, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 16>
  %257 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %255, <16 x i8> %216) #7
  %258 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %256, <16 x i8> %217) #7
  %259 = add <8 x i16> %257, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %260 = add <8 x i16> %259, %258
  %261 = ashr <8 x i16> %260, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %262 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %261, <8 x i16> %261) #7
  %263 = bitcast <16 x i8> %262 to <4 x i32>
  %264 = extractelement <4 x i32> %263, i32 0
  %265 = bitcast i8* %242 to i16*
  %266 = trunc i32 %264 to i16
  store i16 %266, i16* %265, align 1
  %267 = getelementptr inbounds i8, i8* %242, i64 %9
  %268 = shufflevector <16 x i8> %262, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %269 = bitcast <16 x i8> %268 to <4 x i32>
  %270 = extractelement <4 x i32> %269, i32 0
  %271 = bitcast i8* %267 to i16*
  %272 = trunc i32 %270 to i16
  store i16 %272, i16* %271, align 1
  %273 = getelementptr inbounds i8, i8* %267, i64 %9
  %274 = getelementptr inbounds i8, i8* %244, i64 %215
  %275 = add nsw i32 %243, -2
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %530, label %241

277:                                              ; preds = %24, %31
  %278 = phi <2 x i64> [ %30, %24 ], [ %38, %31 ]
  %279 = phi i8* [ %25, %24 ], [ %32, %31 ]
  %280 = bitcast <2 x i64> %278 to <8 x i16>
  %281 = shufflevector <8 x i16> %280, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %282 = shufflevector <8 x i16> %280, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %283 = bitcast <8 x i16> %281 to <2 x i64>
  %284 = shufflevector <2 x i64> %283, <2 x i64> undef, <2 x i32> zeroinitializer
  %285 = bitcast <8 x i16> %282 to <2 x i64>
  %286 = shufflevector <2 x i64> %285, <2 x i64> undef, <2 x i32> zeroinitializer
  %287 = icmp eq i32 %6, 4
  br i1 %287, label %288, label %291

288:                                              ; preds = %277
  %289 = bitcast <2 x i64> %284 to <16 x i8>
  %290 = bitcast <2 x i64> %286 to <16 x i8>
  br label %295

291:                                              ; preds = %277
  %292 = shl i64 %1, 1
  %293 = bitcast <2 x i64> %284 to <16 x i8>
  %294 = bitcast <2 x i64> %286 to <16 x i8>
  br label %318

295:                                              ; preds = %295, %288
  %296 = phi i32 [ %316, %295 ], [ %7, %288 ]
  %297 = phi i8* [ %315, %295 ], [ %8, %288 ]
  %298 = phi i8* [ %314, %295 ], [ %279, %288 ]
  %299 = bitcast i8* %298 to <16 x i8>*
  %300 = load <16 x i8>, <16 x i8>* %299, align 1
  %301 = shufflevector <16 x i8> %300, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %302 = shufflevector <16 x i8> %300, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %303 = shufflevector <16 x i8> %301, <16 x i8> %302, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %304 = shufflevector <16 x i8> %301, <16 x i8> %302, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %305 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %303, <16 x i8> %289) #7
  %306 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %304, <16 x i8> %290) #7
  %307 = add <8 x i16> %305, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %308 = add <8 x i16> %307, %306
  %309 = ashr <8 x i16> %308, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %310 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %309, <8 x i16> undef) #7
  %311 = bitcast <16 x i8> %310 to <4 x i32>
  %312 = extractelement <4 x i32> %311, i32 0
  %313 = bitcast i8* %297 to i32*
  store i32 %312, i32* %313, align 1
  %314 = getelementptr inbounds i8, i8* %298, i64 %1
  %315 = getelementptr inbounds i8, i8* %297, i64 %9
  %316 = add nsw i32 %296, -1
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %530, label %295

318:                                              ; preds = %318, %291
  %319 = phi i8* [ %350, %318 ], [ %8, %291 ]
  %320 = phi i32 [ %352, %318 ], [ %7, %291 ]
  %321 = phi i8* [ %351, %318 ], [ %279, %291 ]
  %322 = bitcast i8* %321 to i64*
  %323 = load i64, i64* %322, align 1
  %324 = insertelement <2 x i64> undef, i64 %323, i32 0
  %325 = getelementptr inbounds i8, i8* %321, i64 %1
  %326 = bitcast <2 x i64> %324 to <4 x float>
  %327 = bitcast i8* %325 to <2 x float>*
  %328 = load <2 x float>, <2 x float>* %327, align 1
  %329 = shufflevector <2 x float> %328, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %330 = shufflevector <4 x float> %326, <4 x float> %329, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %331 = bitcast <4 x float> %330 to <16 x i8>
  %332 = shufflevector <16 x i8> %331, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %333 = shufflevector <16 x i8> %331, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 16, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 16>
  %334 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %332, <16 x i8> %293) #7
  %335 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %333, <16 x i8> %294) #7
  %336 = add <8 x i16> %334, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %337 = add <8 x i16> %336, %335
  %338 = ashr <8 x i16> %337, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %339 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %338, <8 x i16> %338) #7
  %340 = bitcast <16 x i8> %339 to <4 x i32>
  %341 = extractelement <4 x i32> %340, i32 0
  %342 = bitcast i8* %319 to i16*
  %343 = trunc i32 %341 to i16
  store i16 %343, i16* %342, align 1
  %344 = getelementptr inbounds i8, i8* %319, i64 %9
  %345 = shufflevector <16 x i8> %339, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %346 = bitcast <16 x i8> %345 to <4 x i32>
  %347 = extractelement <4 x i32> %346, i32 0
  %348 = bitcast i8* %344 to i16*
  %349 = trunc i32 %347 to i16
  store i16 %349, i16* %348, align 1
  %350 = getelementptr inbounds i8, i8* %344, i64 %9
  %351 = getelementptr inbounds i8, i8* %321, i64 %292
  %352 = add nsw i32 %320, -2
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %530, label %318

354:                                              ; preds = %31
  %355 = bitcast <2 x i64> %38 to <16 x i8>
  %356 = shufflevector <16 x i8> %355, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %357 = bitcast <16 x i8> %356 to <8 x i16>
  %358 = shufflevector <8 x i16> %357, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %359 = bitcast <8 x i16> %358 to <2 x i64>
  %360 = shufflevector <2 x i64> %359, <2 x i64> undef, <2 x i32> zeroinitializer
  %361 = icmp sgt i32 %6, 4
  br i1 %361, label %362, label %433

362:                                              ; preds = %354
  %363 = sext i32 %6 to i64
  %364 = bitcast <2 x i64> %360 to <16 x i8>
  %365 = add nsw i64 %363, -1
  %366 = lshr i64 %365, 3
  %367 = add nuw nsw i64 %366, 1
  %368 = and i64 %367, 1
  %369 = icmp eq i64 %366, 0
  %370 = sub nuw nsw i64 %367, %368
  %371 = icmp eq i64 %368, 0
  br label %372

372:                                              ; preds = %428, %362
  %373 = phi i32 [ %431, %428 ], [ %7, %362 ]
  %374 = phi i8* [ %430, %428 ], [ %8, %362 ]
  %375 = phi i8* [ %429, %428 ], [ %32, %362 ]
  br i1 %369, label %411, label %376

376:                                              ; preds = %372, %376
  %377 = phi i64 [ %408, %376 ], [ 0, %372 ]
  %378 = phi i64 [ %409, %376 ], [ %370, %372 ]
  %379 = getelementptr inbounds i8, i8* %375, i64 %377
  %380 = bitcast i8* %379 to <16 x i8>*
  %381 = load <16 x i8>, <16 x i8>* %380, align 1
  %382 = shufflevector <16 x i8> %381, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %383 = shufflevector <16 x i8> %381, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %384 = shufflevector <16 x i8> %382, <16 x i8> %383, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %385 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %384, <16 x i8> %364) #7
  %386 = add <8 x i16> %385, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %387 = ashr <8 x i16> %386, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %388 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %387, <8 x i16> undef) #7
  %389 = bitcast <16 x i8> %388 to <2 x i64>
  %390 = getelementptr inbounds i8, i8* %374, i64 %377
  %391 = extractelement <2 x i64> %389, i32 0
  %392 = bitcast i8* %390 to i64*
  store i64 %391, i64* %392, align 1
  %393 = or i64 %377, 8
  %394 = getelementptr inbounds i8, i8* %375, i64 %393
  %395 = bitcast i8* %394 to <16 x i8>*
  %396 = load <16 x i8>, <16 x i8>* %395, align 1
  %397 = shufflevector <16 x i8> %396, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %398 = shufflevector <16 x i8> %396, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %399 = shufflevector <16 x i8> %397, <16 x i8> %398, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %400 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %399, <16 x i8> %364) #7
  %401 = add <8 x i16> %400, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %402 = ashr <8 x i16> %401, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %403 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %402, <8 x i16> undef) #7
  %404 = bitcast <16 x i8> %403 to <2 x i64>
  %405 = getelementptr inbounds i8, i8* %374, i64 %393
  %406 = extractelement <2 x i64> %404, i32 0
  %407 = bitcast i8* %405 to i64*
  store i64 %406, i64* %407, align 1
  %408 = add nuw nsw i64 %377, 16
  %409 = add i64 %378, -2
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %411, label %376

411:                                              ; preds = %376, %372
  %412 = phi i64 [ 0, %372 ], [ %408, %376 ]
  br i1 %371, label %428, label %413

413:                                              ; preds = %411
  %414 = getelementptr inbounds i8, i8* %375, i64 %412
  %415 = bitcast i8* %414 to <16 x i8>*
  %416 = load <16 x i8>, <16 x i8>* %415, align 1
  %417 = shufflevector <16 x i8> %416, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %418 = shufflevector <16 x i8> %416, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %419 = shufflevector <16 x i8> %417, <16 x i8> %418, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %420 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %419, <16 x i8> %364) #7
  %421 = add <8 x i16> %420, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %422 = ashr <8 x i16> %421, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %423 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %422, <8 x i16> undef) #7
  %424 = bitcast <16 x i8> %423 to <2 x i64>
  %425 = getelementptr inbounds i8, i8* %374, i64 %412
  %426 = extractelement <2 x i64> %424, i32 0
  %427 = bitcast i8* %425 to i64*
  store i64 %426, i64* %427, align 1
  br label %428

428:                                              ; preds = %411, %413
  %429 = getelementptr inbounds i8, i8* %375, i64 %1
  %430 = getelementptr inbounds i8, i8* %374, i64 %9
  %431 = add nsw i32 %373, -1
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %530, label %372

433:                                              ; preds = %354
  %434 = icmp eq i32 %6, 4
  br i1 %434, label %435, label %460

435:                                              ; preds = %433
  %436 = bitcast <2 x i64> %360 to <16 x i8>
  %437 = and i32 %7, 1
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %455, label %439

439:                                              ; preds = %435
  %440 = bitcast i8* %32 to <16 x i8>*
  %441 = load <16 x i8>, <16 x i8>* %440, align 1
  %442 = shufflevector <16 x i8> %441, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %443 = shufflevector <16 x i8> %441, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %444 = shufflevector <16 x i8> %442, <16 x i8> %443, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %445 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %444, <16 x i8> %436) #7
  %446 = add <8 x i16> %445, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %447 = ashr <8 x i16> %446, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %448 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %447, <8 x i16> undef) #7
  %449 = bitcast <16 x i8> %448 to <4 x i32>
  %450 = extractelement <4 x i32> %449, i32 0
  %451 = bitcast i8* %8 to i32*
  store i32 %450, i32* %451, align 1
  %452 = getelementptr inbounds i8, i8* %32, i64 %1
  %453 = getelementptr inbounds i8, i8* %8, i64 %9
  %454 = add nsw i32 %7, -1
  br label %455

455:                                              ; preds = %435, %439
  %456 = phi i32 [ %7, %435 ], [ %454, %439 ]
  %457 = phi i8* [ %8, %435 ], [ %453, %439 ]
  %458 = phi i8* [ %32, %435 ], [ %452, %439 ]
  %459 = icmp eq i32 %7, 1
  br i1 %459, label %530, label %463

460:                                              ; preds = %433
  %461 = shl i64 %1, 1
  %462 = bitcast <2 x i64> %360 to <16 x i8>
  br label %497

463:                                              ; preds = %455, %463
  %464 = phi i32 [ %495, %463 ], [ %456, %455 ]
  %465 = phi i8* [ %494, %463 ], [ %457, %455 ]
  %466 = phi i8* [ %493, %463 ], [ %458, %455 ]
  %467 = bitcast i8* %466 to <16 x i8>*
  %468 = load <16 x i8>, <16 x i8>* %467, align 1
  %469 = shufflevector <16 x i8> %468, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %470 = shufflevector <16 x i8> %468, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %471 = shufflevector <16 x i8> %469, <16 x i8> %470, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %472 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %471, <16 x i8> %436) #7
  %473 = add <8 x i16> %472, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %474 = ashr <8 x i16> %473, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %475 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %474, <8 x i16> undef) #7
  %476 = bitcast <16 x i8> %475 to <4 x i32>
  %477 = extractelement <4 x i32> %476, i32 0
  %478 = bitcast i8* %465 to i32*
  store i32 %477, i32* %478, align 1
  %479 = getelementptr inbounds i8, i8* %466, i64 %1
  %480 = getelementptr inbounds i8, i8* %465, i64 %9
  %481 = bitcast i8* %479 to <16 x i8>*
  %482 = load <16 x i8>, <16 x i8>* %481, align 1
  %483 = shufflevector <16 x i8> %482, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %484 = shufflevector <16 x i8> %482, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %485 = shufflevector <16 x i8> %483, <16 x i8> %484, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %486 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %485, <16 x i8> %436) #7
  %487 = add <8 x i16> %486, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %488 = ashr <8 x i16> %487, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %489 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %488, <8 x i16> undef) #7
  %490 = bitcast <16 x i8> %489 to <4 x i32>
  %491 = extractelement <4 x i32> %490, i32 0
  %492 = bitcast i8* %480 to i32*
  store i32 %491, i32* %492, align 1
  %493 = getelementptr inbounds i8, i8* %479, i64 %1
  %494 = getelementptr inbounds i8, i8* %480, i64 %9
  %495 = add nsw i32 %464, -2
  %496 = icmp eq i32 %495, 0
  br i1 %496, label %530, label %463

497:                                              ; preds = %497, %460
  %498 = phi i8* [ %526, %497 ], [ %8, %460 ]
  %499 = phi i32 [ %528, %497 ], [ %7, %460 ]
  %500 = phi i8* [ %527, %497 ], [ %32, %460 ]
  %501 = bitcast i8* %500 to i64*
  %502 = load i64, i64* %501, align 1
  %503 = insertelement <2 x i64> undef, i64 %502, i32 0
  %504 = getelementptr inbounds i8, i8* %500, i64 %1
  %505 = bitcast <2 x i64> %503 to <4 x float>
  %506 = bitcast i8* %504 to <2 x float>*
  %507 = load <2 x float>, <2 x float>* %506, align 1
  %508 = shufflevector <2 x float> %507, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %509 = shufflevector <4 x float> %505, <4 x float> %508, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %510 = bitcast <4 x float> %509 to <16 x i8>
  %511 = shufflevector <16 x i8> %510, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15>
  %512 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %511, <16 x i8> %462) #7
  %513 = add <8 x i16> %512, <i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34>
  %514 = ashr <8 x i16> %513, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %515 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %514, <8 x i16> %514) #7
  %516 = bitcast <16 x i8> %515 to <4 x i32>
  %517 = extractelement <4 x i32> %516, i32 0
  %518 = bitcast i8* %498 to i16*
  %519 = trunc i32 %517 to i16
  store i16 %519, i16* %518, align 1
  %520 = getelementptr inbounds i8, i8* %498, i64 %9
  %521 = shufflevector <16 x i8> %515, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %522 = bitcast <16 x i8> %521 to <4 x i32>
  %523 = extractelement <4 x i32> %522, i32 0
  %524 = bitcast i8* %520 to i16*
  %525 = trunc i32 %523 to i16
  store i16 %525, i16* %524, align 1
  %526 = getelementptr inbounds i8, i8* %520, i64 %9
  %527 = getelementptr inbounds i8, i8* %500, i64 %461
  %528 = add nsw i32 %499, -2
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %530, label %497

530:                                              ; preds = %195, %143, %91, %497, %455, %463, %428, %318, %295, %241, %218, %39, %96, %148
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123ConvolveVertical_SSE4_1EPKvliiiiiiPvl(i8* readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #4 {
  %11 = icmp slt i32 %7, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %3, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %3, 1
  br i1 %16, label %22, label %17

17:                                               ; preds = %10, %15
  %18 = icmp slt i32 %3, 2
  br i1 %18, label %22, label %19

19:                                               ; preds = %17
  switch i32 %3, label %21 [
    i32 3, label %22
    i32 2, label %20
  ]

20:                                               ; preds = %19
  br label %22

21:                                               ; preds = %19
  br label %22

22:                                               ; preds = %19, %21, %12, %15, %20, %17
  %23 = phi i1 [ true, %17 ], [ false, %20 ], [ false, %15 ], [ false, %12 ], [ false, %19 ], [ false, %21 ]
  %24 = phi i32 [ %3, %17 ], [ 2, %20 ], [ 5, %15 ], [ 4, %12 ], [ %3, %19 ], [ %3, %21 ]
  %25 = phi i64 [ 2, %17 ], [ 3, %20 ], [ 1, %15 ], [ 1, %12 ], [ 0, %19 ], [ 1, %21 ]
  %26 = mul i64 %25, %1
  %27 = sub i64 0, %26
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = sext i32 %24 to i64
  %30 = sext i32 %5 to i64
  %31 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %29, i64 %30, i64 0
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %33, i32 0
  br i1 %23, label %35, label %300

35:                                               ; preds = %22
  %36 = bitcast <2 x i64> %34 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %38 = bitcast <16 x i8> %37 to <8 x i16>
  %39 = shufflevector <8 x i16> %38, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = shufflevector <8 x i16> %38, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = shufflevector <8 x i16> %38, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <8 x i16> %39 to <2 x i64>
  %43 = shufflevector <2 x i64> %42, <2 x i64> undef, <2 x i32> zeroinitializer
  %44 = bitcast <8 x i16> %40 to <2 x i64>
  %45 = shufflevector <2 x i64> %44, <2 x i64> undef, <2 x i32> zeroinitializer
  %46 = bitcast <8 x i16> %41 to <2 x i64>
  %47 = shufflevector <2 x i64> %46, <2 x i64> undef, <2 x i32> zeroinitializer
  switch i32 %6, label %233 [
    i32 2, label %48
    i32 4, label %155
  ]

48:                                               ; preds = %35
  %49 = bitcast i8* %28 to i16*
  %50 = load i16, i16* %49, align 1
  %51 = sext i16 %50 to i32
  %52 = insertelement <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, i32 %51, i32 0
  %53 = getelementptr inbounds i8, i8* %28, i64 %1
  %54 = bitcast i8* %53 to i16*
  %55 = load i16, i16* %54, align 1
  %56 = bitcast <4 x i32> %52 to <8 x i16>
  %57 = insertelement <8 x i16> %56, i16 %55, i64 1
  %58 = getelementptr inbounds i8, i8* %53, i64 %1
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 1
  %61 = insertelement <8 x i16> %57, i16 %60, i64 2
  %62 = getelementptr inbounds i8, i8* %58, i64 %1
  %63 = bitcast i8* %62 to i16*
  %64 = load i16, i16* %63, align 1
  %65 = insertelement <8 x i16> %61, i16 %64, i64 3
  %66 = bitcast <8 x i16> %65 to <2 x i64>
  %67 = getelementptr inbounds i8, i8* %62, i64 %1
  %68 = bitcast i8* %67 to i16*
  %69 = load i16, i16* %68, align 1
  %70 = sext i16 %69 to i32
  %71 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %70, i32 0
  %72 = bitcast <4 x i32> %71 to <2 x i64>
  %73 = shufflevector <2 x i64> %66, <2 x i64> %72, <2 x i32> <i32 0, i32 2>
  %74 = bitcast <2 x i64> %73 to <16 x i8>
  %75 = shufflevector <16 x i8> %74, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %76 = bitcast <2 x i64> %43 to <16 x i8>
  %77 = bitcast <2 x i64> %45 to <16 x i8>
  %78 = bitcast <2 x i64> %47 to <16 x i8>
  br label %79

79:                                               ; preds = %79, %48
  %80 = phi <8 x i16> [ zeroinitializer, %48 ], [ %108, %79 ]
  %81 = phi <2 x i64> [ %72, %48 ], [ %109, %79 ]
  %82 = phi <16 x i8> [ %75, %48 ], [ %116, %79 ]
  %83 = phi <2 x i64> [ %66, %48 ], [ %104, %79 ]
  %84 = phi i32 [ %7, %48 ], [ %153, %79 ]
  %85 = phi i8* [ %8, %48 ], [ %152, %79 ]
  %86 = phi i8* [ %28, %48 ], [ %90, %79 ]
  %87 = getelementptr inbounds i8, i8* %86, i64 %1
  %88 = getelementptr inbounds i8, i8* %87, i64 %1
  %89 = getelementptr inbounds i8, i8* %88, i64 %1
  %90 = getelementptr inbounds i8, i8* %89, i64 %1
  %91 = getelementptr inbounds i8, i8* %90, i64 %1
  %92 = bitcast i8* %91 to i16*
  %93 = load i16, i16* %92, align 1
  %94 = bitcast <2 x i64> %81 to <8 x i16>
  %95 = insertelement <8 x i16> %94, i16 %93, i64 1
  %96 = getelementptr inbounds i8, i8* %91, i64 %1
  %97 = bitcast i8* %96 to i16*
  %98 = load i16, i16* %97, align 1
  %99 = insertelement <8 x i16> %95, i16 %98, i64 2
  %100 = getelementptr inbounds i8, i8* %96, i64 %1
  %101 = bitcast i8* %100 to i16*
  %102 = load i16, i16* %101, align 1
  %103 = insertelement <8 x i16> %99, i16 %102, i64 3
  %104 = bitcast <8 x i16> %103 to <2 x i64>
  %105 = getelementptr inbounds i8, i8* %100, i64 %1
  %106 = bitcast i8* %105 to i16*
  %107 = load i16, i16* %106, align 1
  %108 = insertelement <8 x i16> %80, i16 %107, i64 0
  %109 = bitcast <8 x i16> %108 to <2 x i64>
  %110 = shufflevector <2 x i64> %83, <2 x i64> %104, <2 x i32> <i32 0, i32 2>
  %111 = bitcast <2 x i64> %110 to <16 x i8>
  %112 = shufflevector <16 x i8> %111, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = shufflevector <16 x i8> %111, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = shufflevector <2 x i64> %104, <2 x i64> %109, <2 x i32> <i32 0, i32 2>
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %117 = bitcast <2 x i64> %83 to <16 x i8>
  %118 = shufflevector <16 x i8> %117, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %119 = shufflevector <16 x i8> %112, <16 x i8> %113, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = bitcast <8 x i16> %103 to <16 x i8>
  %121 = shufflevector <16 x i8> %120, <16 x i8> %116, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %122 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %118, <16 x i8> %76) #7
  %123 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %77) #7
  %124 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %121, <16 x i8> %78) #7
  %125 = add <8 x i16> %122, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %126 = add <8 x i16> %125, %123
  %127 = add <8 x i16> %126, %124
  %128 = ashr <8 x i16> %127, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %129 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %128, <8 x i16> %128) #7
  %130 = bitcast <16 x i8> %129 to <4 x i32>
  %131 = extractelement <4 x i32> %130, i32 0
  %132 = bitcast i8* %85 to i16*
  %133 = trunc i32 %131 to i16
  store i16 %133, i16* %132, align 1
  %134 = getelementptr inbounds i8, i8* %85, i64 %9
  %135 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %136 = bitcast <16 x i8> %135 to <4 x i32>
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = bitcast i8* %134 to i16*
  %139 = trunc i32 %137 to i16
  store i16 %139, i16* %138, align 1
  %140 = getelementptr inbounds i8, i8* %134, i64 %9
  %141 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = bitcast <16 x i8> %141 to <4 x i32>
  %143 = extractelement <4 x i32> %142, i32 0
  %144 = bitcast i8* %140 to i16*
  %145 = trunc i32 %143 to i16
  store i16 %145, i16* %144, align 1
  %146 = getelementptr inbounds i8, i8* %140, i64 %9
  %147 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = bitcast <16 x i8> %147 to <4 x i32>
  %149 = extractelement <4 x i32> %148, i32 0
  %150 = bitcast i8* %146 to i16*
  %151 = trunc i32 %149 to i16
  store i16 %151, i16* %150, align 1
  %152 = getelementptr inbounds i8, i8* %146, i64 %9
  %153 = add nsw i32 %84, -4
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %1207, label %79

155:                                              ; preds = %35
  %156 = bitcast i8* %28 to i32*
  %157 = load i32, i32* %156, align 1
  %158 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %157, i32 0
  %159 = getelementptr inbounds i8, i8* %28, i64 %1
  %160 = bitcast i8* %159 to i32*
  %161 = load i32, i32* %160, align 1
  %162 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %161, i32 0
  %163 = shufflevector <4 x i32> %158, <4 x i32> %162, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %164 = getelementptr inbounds i8, i8* %159, i64 %1
  %165 = bitcast i8* %164 to i32*
  %166 = load i32, i32* %165, align 1
  %167 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %166, i32 0
  %168 = getelementptr inbounds i8, i8* %164, i64 %1
  %169 = shufflevector <4 x i32> %162, <4 x i32> %167, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %170 = bitcast i8* %168 to i32*
  %171 = load i32, i32* %170, align 1
  %172 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %171, i32 0
  %173 = shufflevector <4 x i32> %167, <4 x i32> %172, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %174 = getelementptr inbounds i8, i8* %168, i64 %1
  %175 = bitcast i8* %174 to i32*
  %176 = load i32, i32* %175, align 1
  %177 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %176, i32 0
  %178 = shufflevector <4 x i32> %172, <4 x i32> %177, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %179 = bitcast <2 x i64> %43 to <16 x i8>
  %180 = bitcast <2 x i64> %45 to <16 x i8>
  %181 = bitcast <2 x i64> %47 to <16 x i8>
  br label %182

182:                                              ; preds = %182, %155
  %183 = phi <4 x i32> [ %177, %155 ], [ %203, %182 ]
  %184 = phi <4 x i32> [ %178, %155 ], [ %204, %182 ]
  %185 = phi <4 x i32> [ %173, %155 ], [ %199, %182 ]
  %186 = phi <4 x i32> [ %169, %155 ], [ %184, %182 ]
  %187 = phi <4 x i32> [ %163, %155 ], [ %185, %182 ]
  %188 = phi i32 [ %7, %155 ], [ %231, %182 ]
  %189 = phi i8* [ %8, %155 ], [ %230, %182 ]
  %190 = phi i8* [ %28, %155 ], [ %192, %182 ]
  %191 = getelementptr inbounds i8, i8* %190, i64 %1
  %192 = getelementptr inbounds i8, i8* %191, i64 %1
  %193 = getelementptr inbounds i8, i8* %192, i64 %1
  %194 = getelementptr inbounds i8, i8* %193, i64 %1
  %195 = getelementptr inbounds i8, i8* %194, i64 %1
  %196 = bitcast i8* %195 to i32*
  %197 = load i32, i32* %196, align 1
  %198 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %197, i32 0
  %199 = shufflevector <4 x i32> %183, <4 x i32> %198, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %200 = getelementptr inbounds i8, i8* %195, i64 %1
  %201 = bitcast i8* %200 to i32*
  %202 = load i32, i32* %201, align 1
  %203 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %202, i32 0
  %204 = shufflevector <4 x i32> %198, <4 x i32> %203, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %205 = bitcast <4 x i32> %187 to <16 x i8>
  %206 = bitcast <4 x i32> %186 to <16 x i8>
  %207 = shufflevector <16 x i8> %205, <16 x i8> %206, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %208 = bitcast <4 x i32> %185 to <16 x i8>
  %209 = bitcast <4 x i32> %184 to <16 x i8>
  %210 = shufflevector <16 x i8> %208, <16 x i8> %209, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %211 = bitcast <4 x i32> %199 to <16 x i8>
  %212 = bitcast <4 x i32> %204 to <16 x i8>
  %213 = shufflevector <16 x i8> %211, <16 x i8> %212, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %214 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %207, <16 x i8> %179) #7
  %215 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %210, <16 x i8> %180) #7
  %216 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %213, <16 x i8> %181) #7
  %217 = add <8 x i16> %214, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %218 = add <8 x i16> %217, %215
  %219 = add <8 x i16> %218, %216
  %220 = ashr <8 x i16> %219, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %221 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %220, <8 x i16> %220) #7
  %222 = bitcast <16 x i8> %221 to <4 x i32>
  %223 = extractelement <4 x i32> %222, i32 0
  %224 = bitcast i8* %189 to i32*
  store i32 %223, i32* %224, align 1
  %225 = getelementptr inbounds i8, i8* %189, i64 %9
  %226 = shufflevector <16 x i8> %221, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %227 = bitcast <16 x i8> %226 to <4 x i32>
  %228 = extractelement <4 x i32> %227, i32 0
  %229 = bitcast i8* %225 to i32*
  store i32 %228, i32* %229, align 1
  %230 = getelementptr inbounds i8, i8* %225, i64 %9
  %231 = add nsw i32 %188, -2
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %1207, label %182

233:                                              ; preds = %35
  %234 = sext i32 %6 to i64
  %235 = bitcast <2 x i64> %43 to <16 x i8>
  %236 = bitcast <2 x i64> %45 to <16 x i8>
  %237 = bitcast <2 x i64> %47 to <16 x i8>
  br label %238

238:                                              ; preds = %297, %233
  %239 = phi i64 [ 0, %233 ], [ %298, %297 ]
  %240 = getelementptr inbounds i8, i8* %28, i64 %239
  %241 = bitcast i8* %240 to i64*
  %242 = load i64, i64* %241, align 1
  %243 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %242, i32 0
  %244 = getelementptr inbounds i8, i8* %240, i64 %1
  %245 = bitcast i8* %244 to i64*
  %246 = load i64, i64* %245, align 1
  %247 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %246, i32 0
  %248 = getelementptr inbounds i8, i8* %244, i64 %1
  %249 = bitcast i8* %248 to i64*
  %250 = load i64, i64* %249, align 1
  %251 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %250, i32 0
  %252 = getelementptr inbounds i8, i8* %248, i64 %1
  %253 = bitcast i8* %252 to i64*
  %254 = load i64, i64* %253, align 1
  %255 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %254, i32 0
  %256 = getelementptr inbounds i8, i8* %252, i64 %1
  %257 = bitcast i8* %256 to i64*
  %258 = load i64, i64* %257, align 1
  %259 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %258, i32 0
  %260 = getelementptr inbounds i8, i8* %8, i64 %239
  br label %261

261:                                              ; preds = %261, %238
  %262 = phi <2 x i64> [ %259, %238 ], [ %278, %261 ]
  %263 = phi <2 x i64> [ %255, %238 ], [ %262, %261 ]
  %264 = phi <2 x i64> [ %251, %238 ], [ %263, %261 ]
  %265 = phi <2 x i64> [ %247, %238 ], [ %264, %261 ]
  %266 = phi <2 x i64> [ %243, %238 ], [ %265, %261 ]
  %267 = phi i8* [ %256, %238 ], [ %275, %261 ]
  %268 = phi i8* [ %260, %238 ], [ %294, %261 ]
  %269 = phi i32 [ %7, %238 ], [ %295, %261 ]
  %270 = bitcast <2 x i64> %262 to <16 x i8>
  %271 = bitcast <2 x i64> %263 to <16 x i8>
  %272 = bitcast <2 x i64> %264 to <16 x i8>
  %273 = bitcast <2 x i64> %265 to <16 x i8>
  %274 = bitcast <2 x i64> %266 to <16 x i8>
  %275 = getelementptr inbounds i8, i8* %267, i64 %1
  %276 = bitcast i8* %275 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %277, i32 0
  %279 = shufflevector <16 x i8> %274, <16 x i8> %273, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %280 = shufflevector <16 x i8> %272, <16 x i8> %271, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %281 = bitcast <2 x i64> %278 to <16 x i8>
  %282 = shufflevector <16 x i8> %270, <16 x i8> %281, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %283 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %279, <16 x i8> %235) #7
  %284 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %280, <16 x i8> %236) #7
  %285 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %282, <16 x i8> %237) #7
  %286 = add <8 x i16> %283, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %287 = add <8 x i16> %286, %284
  %288 = add <8 x i16> %287, %285
  %289 = ashr <8 x i16> %288, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %290 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %289, <8 x i16> undef) #7
  %291 = bitcast <16 x i8> %290 to <2 x i64>
  %292 = extractelement <2 x i64> %291, i32 0
  %293 = bitcast i8* %268 to i64*
  store i64 %292, i64* %293, align 1
  %294 = getelementptr inbounds i8, i8* %268, i64 %9
  %295 = add nsw i32 %269, -1
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %297, label %261

297:                                              ; preds = %261
  %298 = add nuw nsw i64 %239, 8
  %299 = icmp slt i64 %298, %234
  br i1 %299, label %238, label %1207

300:                                              ; preds = %22
  switch i32 %24, label %807 [
    i32 2, label %301
    i32 3, label %619
  ]

301:                                              ; preds = %300
  %302 = bitcast <2 x i64> %34 to <8 x i16>
  %303 = shufflevector <8 x i16> %302, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %304 = shufflevector <8 x i16> %302, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %305 = shufflevector <8 x i16> %302, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %306 = shufflevector <8 x i16> %302, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %307 = bitcast <8 x i16> %303 to <2 x i64>
  %308 = shufflevector <2 x i64> %307, <2 x i64> undef, <2 x i32> zeroinitializer
  %309 = bitcast <8 x i16> %304 to <2 x i64>
  %310 = shufflevector <2 x i64> %309, <2 x i64> undef, <2 x i32> zeroinitializer
  %311 = bitcast <8 x i16> %305 to <2 x i64>
  %312 = shufflevector <2 x i64> %311, <2 x i64> undef, <2 x i32> zeroinitializer
  %313 = bitcast <8 x i16> %306 to <2 x i64>
  %314 = shufflevector <2 x i64> %313, <2 x i64> undef, <2 x i32> zeroinitializer
  switch i32 %6, label %536 [
    i32 2, label %315
    i32 4, label %438
  ]

315:                                              ; preds = %301
  %316 = bitcast i8* %28 to i16*
  %317 = load i16, i16* %316, align 1
  %318 = sext i16 %317 to i32
  %319 = insertelement <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, i32 %318, i32 0
  %320 = getelementptr inbounds i8, i8* %28, i64 %1
  %321 = bitcast i8* %320 to i16*
  %322 = load i16, i16* %321, align 1
  %323 = bitcast <4 x i32> %319 to <8 x i16>
  %324 = insertelement <8 x i16> %323, i16 %322, i64 1
  %325 = getelementptr inbounds i8, i8* %320, i64 %1
  %326 = bitcast i8* %325 to i16*
  %327 = load i16, i16* %326, align 1
  %328 = insertelement <8 x i16> %324, i16 %327, i64 2
  %329 = getelementptr inbounds i8, i8* %325, i64 %1
  %330 = bitcast i8* %329 to i16*
  %331 = load i16, i16* %330, align 1
  %332 = insertelement <8 x i16> %328, i16 %331, i64 3
  %333 = bitcast <8 x i16> %332 to <2 x i64>
  %334 = getelementptr inbounds i8, i8* %329, i64 %1
  %335 = bitcast i8* %334 to i16*
  %336 = load i16, i16* %335, align 1
  %337 = sext i16 %336 to i32
  %338 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %337, i32 0
  %339 = getelementptr inbounds i8, i8* %334, i64 %1
  %340 = bitcast i8* %339 to i16*
  %341 = load i16, i16* %340, align 1
  %342 = bitcast <4 x i32> %338 to <8 x i16>
  %343 = insertelement <8 x i16> %342, i16 %341, i64 1
  %344 = getelementptr inbounds i8, i8* %339, i64 %1
  %345 = bitcast i8* %344 to i16*
  %346 = load i16, i16* %345, align 1
  %347 = insertelement <8 x i16> %343, i16 %346, i64 2
  %348 = bitcast <8 x i16> %347 to <2 x i64>
  %349 = shufflevector <2 x i64> %333, <2 x i64> %348, <2 x i32> <i32 0, i32 2>
  %350 = bitcast <2 x i64> %349 to <16 x i8>
  %351 = shufflevector <16 x i8> %350, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %352 = shufflevector <16 x i8> %350, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %353 = shufflevector <16 x i8> %350, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %354 = bitcast <2 x i64> %308 to <16 x i8>
  %355 = bitcast <2 x i64> %310 to <16 x i8>
  %356 = bitcast <2 x i64> %312 to <16 x i8>
  %357 = bitcast <2 x i64> %314 to <16 x i8>
  br label %358

358:                                              ; preds = %358, %315
  %359 = phi <8 x i16> [ zeroinitializer, %315 ], [ %390, %358 ]
  %360 = phi <8 x i16> [ %347, %315 ], [ %390, %358 ]
  %361 = phi <16 x i8> [ %353, %315 ], [ %396, %358 ]
  %362 = phi <16 x i8> [ %352, %315 ], [ %395, %358 ]
  %363 = phi <16 x i8> [ %351, %315 ], [ %394, %358 ]
  %364 = phi <2 x i64> [ %333, %315 ], [ %378, %358 ]
  %365 = phi i32 [ %7, %315 ], [ %436, %358 ]
  %366 = phi i8* [ %8, %315 ], [ %435, %358 ]
  %367 = phi i8* [ %28, %315 ], [ %371, %358 ]
  %368 = getelementptr inbounds i8, i8* %367, i64 %1
  %369 = getelementptr inbounds i8, i8* %368, i64 %1
  %370 = getelementptr inbounds i8, i8* %369, i64 %1
  %371 = getelementptr inbounds i8, i8* %370, i64 %1
  %372 = getelementptr inbounds i8, i8* %371, i64 %1
  %373 = getelementptr inbounds i8, i8* %372, i64 %1
  %374 = getelementptr inbounds i8, i8* %373, i64 %1
  %375 = bitcast i8* %374 to i16*
  %376 = load i16, i16* %375, align 1
  %377 = insertelement <8 x i16> %360, i16 %376, i64 3
  %378 = bitcast <8 x i16> %377 to <2 x i64>
  %379 = getelementptr inbounds i8, i8* %374, i64 %1
  %380 = bitcast i8* %379 to i16*
  %381 = load i16, i16* %380, align 1
  %382 = insertelement <8 x i16> %359, i16 %381, i64 0
  %383 = getelementptr inbounds i8, i8* %379, i64 %1
  %384 = bitcast i8* %383 to i16*
  %385 = load i16, i16* %384, align 1
  %386 = insertelement <8 x i16> %382, i16 %385, i64 1
  %387 = getelementptr inbounds i8, i8* %383, i64 %1
  %388 = bitcast i8* %387 to i16*
  %389 = load i16, i16* %388, align 1
  %390 = insertelement <8 x i16> %386, i16 %389, i64 2
  %391 = bitcast <8 x i16> %390 to <2 x i64>
  %392 = shufflevector <2 x i64> %378, <2 x i64> %391, <2 x i32> <i32 0, i32 2>
  %393 = bitcast <2 x i64> %392 to <16 x i8>
  %394 = shufflevector <16 x i8> %393, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %395 = shufflevector <16 x i8> %393, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %396 = shufflevector <16 x i8> %393, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %397 = bitcast <2 x i64> %364 to <16 x i8>
  %398 = shufflevector <16 x i8> %397, <16 x i8> %363, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %399 = shufflevector <16 x i8> %362, <16 x i8> %361, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %400 = bitcast <8 x i16> %377 to <16 x i8>
  %401 = shufflevector <16 x i8> %400, <16 x i8> %394, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %402 = shufflevector <16 x i8> %395, <16 x i8> %396, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %403 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %398, <16 x i8> %354) #7
  %404 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %399, <16 x i8> %355) #7
  %405 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %401, <16 x i8> %356) #7
  %406 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %402, <16 x i8> %357) #7
  %407 = add <8 x i16> %403, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %408 = add <8 x i16> %407, %404
  %409 = add <8 x i16> %408, %405
  %410 = add <8 x i16> %409, %406
  %411 = ashr <8 x i16> %410, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %412 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %411, <8 x i16> %411) #7
  %413 = bitcast <16 x i8> %412 to <4 x i32>
  %414 = extractelement <4 x i32> %413, i32 0
  %415 = bitcast i8* %366 to i16*
  %416 = trunc i32 %414 to i16
  store i16 %416, i16* %415, align 1
  %417 = getelementptr inbounds i8, i8* %366, i64 %9
  %418 = shufflevector <16 x i8> %412, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %419 = bitcast <16 x i8> %418 to <4 x i32>
  %420 = extractelement <4 x i32> %419, i32 0
  %421 = bitcast i8* %417 to i16*
  %422 = trunc i32 %420 to i16
  store i16 %422, i16* %421, align 1
  %423 = getelementptr inbounds i8, i8* %417, i64 %9
  %424 = shufflevector <16 x i8> %412, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %425 = bitcast <16 x i8> %424 to <4 x i32>
  %426 = extractelement <4 x i32> %425, i32 0
  %427 = bitcast i8* %423 to i16*
  %428 = trunc i32 %426 to i16
  store i16 %428, i16* %427, align 1
  %429 = getelementptr inbounds i8, i8* %423, i64 %9
  %430 = shufflevector <16 x i8> %412, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %431 = bitcast <16 x i8> %430 to <4 x i32>
  %432 = extractelement <4 x i32> %431, i32 0
  %433 = bitcast i8* %429 to i16*
  %434 = trunc i32 %432 to i16
  store i16 %434, i16* %433, align 1
  %435 = getelementptr inbounds i8, i8* %429, i64 %9
  %436 = add nsw i32 %365, -4
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %1207, label %358

438:                                              ; preds = %301
  %439 = bitcast i8* %28 to i32*
  %440 = load i32, i32* %439, align 1
  %441 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %440, i32 0
  %442 = getelementptr inbounds i8, i8* %28, i64 %1
  %443 = bitcast i8* %442 to i32*
  %444 = load i32, i32* %443, align 1
  %445 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %444, i32 0
  %446 = shufflevector <4 x i32> %441, <4 x i32> %445, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %447 = getelementptr inbounds i8, i8* %442, i64 %1
  %448 = bitcast i8* %447 to i32*
  %449 = load i32, i32* %448, align 1
  %450 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %449, i32 0
  %451 = getelementptr inbounds i8, i8* %447, i64 %1
  %452 = shufflevector <4 x i32> %445, <4 x i32> %450, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %453 = bitcast i8* %451 to i32*
  %454 = load i32, i32* %453, align 1
  %455 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %454, i32 0
  %456 = shufflevector <4 x i32> %450, <4 x i32> %455, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %457 = getelementptr inbounds i8, i8* %451, i64 %1
  %458 = bitcast i8* %457 to i32*
  %459 = load i32, i32* %458, align 1
  %460 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %459, i32 0
  %461 = getelementptr inbounds i8, i8* %457, i64 %1
  %462 = shufflevector <4 x i32> %455, <4 x i32> %460, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %463 = bitcast i8* %461 to i32*
  %464 = load i32, i32* %463, align 1
  %465 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %464, i32 0
  %466 = shufflevector <4 x i32> %460, <4 x i32> %465, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %467 = getelementptr inbounds i8, i8* %461, i64 %1
  %468 = bitcast i8* %467 to i32*
  %469 = load i32, i32* %468, align 1
  %470 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %469, i32 0
  %471 = shufflevector <4 x i32> %465, <4 x i32> %470, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %472 = bitcast <2 x i64> %308 to <16 x i8>
  %473 = bitcast <2 x i64> %310 to <16 x i8>
  %474 = bitcast <2 x i64> %312 to <16 x i8>
  %475 = bitcast <2 x i64> %314 to <16 x i8>
  br label %476

476:                                              ; preds = %476, %438
  %477 = phi <4 x i32> [ %470, %438 ], [ %501, %476 ]
  %478 = phi <4 x i32> [ %471, %438 ], [ %502, %476 ]
  %479 = phi <4 x i32> [ %466, %438 ], [ %497, %476 ]
  %480 = phi <4 x i32> [ %462, %438 ], [ %478, %476 ]
  %481 = phi <4 x i32> [ %456, %438 ], [ %479, %476 ]
  %482 = phi <4 x i32> [ %452, %438 ], [ %480, %476 ]
  %483 = phi <4 x i32> [ %446, %438 ], [ %481, %476 ]
  %484 = phi i32 [ %7, %438 ], [ %534, %476 ]
  %485 = phi i8* [ %8, %438 ], [ %533, %476 ]
  %486 = phi i8* [ %28, %438 ], [ %488, %476 ]
  %487 = getelementptr inbounds i8, i8* %486, i64 %1
  %488 = getelementptr inbounds i8, i8* %487, i64 %1
  %489 = getelementptr inbounds i8, i8* %488, i64 %1
  %490 = getelementptr inbounds i8, i8* %489, i64 %1
  %491 = getelementptr inbounds i8, i8* %490, i64 %1
  %492 = getelementptr inbounds i8, i8* %491, i64 %1
  %493 = getelementptr inbounds i8, i8* %492, i64 %1
  %494 = bitcast i8* %493 to i32*
  %495 = load i32, i32* %494, align 1
  %496 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %495, i32 0
  %497 = shufflevector <4 x i32> %477, <4 x i32> %496, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %498 = getelementptr inbounds i8, i8* %493, i64 %1
  %499 = bitcast i8* %498 to i32*
  %500 = load i32, i32* %499, align 1
  %501 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %500, i32 0
  %502 = shufflevector <4 x i32> %496, <4 x i32> %501, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %503 = bitcast <4 x i32> %483 to <16 x i8>
  %504 = bitcast <4 x i32> %482 to <16 x i8>
  %505 = shufflevector <16 x i8> %503, <16 x i8> %504, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %506 = bitcast <4 x i32> %481 to <16 x i8>
  %507 = bitcast <4 x i32> %480 to <16 x i8>
  %508 = shufflevector <16 x i8> %506, <16 x i8> %507, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %509 = bitcast <4 x i32> %479 to <16 x i8>
  %510 = bitcast <4 x i32> %478 to <16 x i8>
  %511 = shufflevector <16 x i8> %509, <16 x i8> %510, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %512 = bitcast <4 x i32> %497 to <16 x i8>
  %513 = bitcast <4 x i32> %502 to <16 x i8>
  %514 = shufflevector <16 x i8> %512, <16 x i8> %513, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %515 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %505, <16 x i8> %472) #7
  %516 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %508, <16 x i8> %473) #7
  %517 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %511, <16 x i8> %474) #7
  %518 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %514, <16 x i8> %475) #7
  %519 = add <8 x i16> %515, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %520 = add <8 x i16> %519, %516
  %521 = add <8 x i16> %520, %517
  %522 = add <8 x i16> %521, %518
  %523 = ashr <8 x i16> %522, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %524 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %523, <8 x i16> %523) #7
  %525 = bitcast <16 x i8> %524 to <4 x i32>
  %526 = extractelement <4 x i32> %525, i32 0
  %527 = bitcast i8* %485 to i32*
  store i32 %526, i32* %527, align 1
  %528 = getelementptr inbounds i8, i8* %485, i64 %9
  %529 = shufflevector <16 x i8> %524, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %530 = bitcast <16 x i8> %529 to <4 x i32>
  %531 = extractelement <4 x i32> %530, i32 0
  %532 = bitcast i8* %528 to i32*
  store i32 %531, i32* %532, align 1
  %533 = getelementptr inbounds i8, i8* %528, i64 %9
  %534 = add nsw i32 %484, -2
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %1207, label %476

536:                                              ; preds = %301
  %537 = sext i32 %6 to i64
  %538 = bitcast <2 x i64> %308 to <16 x i8>
  %539 = bitcast <2 x i64> %310 to <16 x i8>
  %540 = bitcast <2 x i64> %312 to <16 x i8>
  %541 = bitcast <2 x i64> %314 to <16 x i8>
  br label %542

542:                                              ; preds = %616, %536
  %543 = phi i64 [ %617, %616 ], [ 0, %536 ]
  %544 = getelementptr inbounds i8, i8* %28, i64 %543
  %545 = bitcast i8* %544 to i64*
  %546 = load i64, i64* %545, align 1
  %547 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %546, i32 0
  %548 = getelementptr inbounds i8, i8* %544, i64 %1
  %549 = bitcast i8* %548 to i64*
  %550 = load i64, i64* %549, align 1
  %551 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %550, i32 0
  %552 = getelementptr inbounds i8, i8* %548, i64 %1
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 1
  %555 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %554, i32 0
  %556 = getelementptr inbounds i8, i8* %552, i64 %1
  %557 = bitcast i8* %556 to i64*
  %558 = load i64, i64* %557, align 1
  %559 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %558, i32 0
  %560 = getelementptr inbounds i8, i8* %556, i64 %1
  %561 = bitcast i8* %560 to i64*
  %562 = load i64, i64* %561, align 1
  %563 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %562, i32 0
  %564 = getelementptr inbounds i8, i8* %560, i64 %1
  %565 = bitcast i8* %564 to i64*
  %566 = load i64, i64* %565, align 1
  %567 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %566, i32 0
  %568 = getelementptr inbounds i8, i8* %564, i64 %1
  %569 = bitcast i8* %568 to i64*
  %570 = load i64, i64* %569, align 1
  %571 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %570, i32 0
  %572 = getelementptr inbounds i8, i8* %8, i64 %543
  br label %573

573:                                              ; preds = %573, %542
  %574 = phi <2 x i64> [ %571, %542 ], [ %594, %573 ]
  %575 = phi <2 x i64> [ %567, %542 ], [ %574, %573 ]
  %576 = phi <2 x i64> [ %563, %542 ], [ %575, %573 ]
  %577 = phi <2 x i64> [ %559, %542 ], [ %576, %573 ]
  %578 = phi <2 x i64> [ %555, %542 ], [ %577, %573 ]
  %579 = phi <2 x i64> [ %551, %542 ], [ %578, %573 ]
  %580 = phi <2 x i64> [ %547, %542 ], [ %579, %573 ]
  %581 = phi i8* [ %568, %542 ], [ %591, %573 ]
  %582 = phi i8* [ %572, %542 ], [ %613, %573 ]
  %583 = phi i32 [ %7, %542 ], [ %614, %573 ]
  %584 = bitcast <2 x i64> %574 to <16 x i8>
  %585 = bitcast <2 x i64> %575 to <16 x i8>
  %586 = bitcast <2 x i64> %576 to <16 x i8>
  %587 = bitcast <2 x i64> %577 to <16 x i8>
  %588 = bitcast <2 x i64> %578 to <16 x i8>
  %589 = bitcast <2 x i64> %579 to <16 x i8>
  %590 = bitcast <2 x i64> %580 to <16 x i8>
  %591 = getelementptr inbounds i8, i8* %581, i64 %1
  %592 = bitcast i8* %591 to i64*
  %593 = load i64, i64* %592, align 1
  %594 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %593, i32 0
  %595 = shufflevector <16 x i8> %590, <16 x i8> %589, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %596 = shufflevector <16 x i8> %588, <16 x i8> %587, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %597 = shufflevector <16 x i8> %586, <16 x i8> %585, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %598 = bitcast <2 x i64> %594 to <16 x i8>
  %599 = shufflevector <16 x i8> %584, <16 x i8> %598, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %600 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %595, <16 x i8> %538) #7
  %601 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %596, <16 x i8> %539) #7
  %602 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %597, <16 x i8> %540) #7
  %603 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %599, <16 x i8> %541) #7
  %604 = add <8 x i16> %600, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %605 = add <8 x i16> %604, %601
  %606 = add <8 x i16> %605, %602
  %607 = add <8 x i16> %606, %603
  %608 = ashr <8 x i16> %607, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %609 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %608, <8 x i16> undef) #7
  %610 = bitcast <16 x i8> %609 to <2 x i64>
  %611 = extractelement <2 x i64> %610, i32 0
  %612 = bitcast i8* %582 to i64*
  store i64 %611, i64* %612, align 1
  %613 = getelementptr inbounds i8, i8* %582, i64 %9
  %614 = add nsw i32 %583, -1
  %615 = icmp eq i32 %614, 0
  br i1 %615, label %616, label %573

616:                                              ; preds = %573
  %617 = add nuw nsw i64 %543, 8
  %618 = icmp slt i64 %617, %537
  br i1 %618, label %542, label %1207

619:                                              ; preds = %300
  %620 = bitcast <2 x i64> %34 to <16 x i8>
  %621 = shufflevector <16 x i8> %620, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %622 = bitcast <16 x i8> %621 to <8 x i16>
  %623 = shufflevector <8 x i16> %622, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %624 = bitcast <8 x i16> %623 to <2 x i64>
  %625 = shufflevector <2 x i64> %624, <2 x i64> undef, <2 x i32> zeroinitializer
  switch i32 %6, label %732 [
    i32 2, label %626
    i32 4, label %694
  ]

626:                                              ; preds = %619
  %627 = bitcast i8* %28 to i16*
  %628 = load i16, i16* %627, align 1
  %629 = sext i16 %628 to i32
  %630 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %629, i32 0
  %631 = bitcast <4 x i32> %630 to <2 x i64>
  %632 = icmp eq i32 %7, 2
  %633 = bitcast <2 x i64> %625 to <16 x i8>
  br label %634

634:                                              ; preds = %678, %626
  %635 = phi <8 x i16> [ zeroinitializer, %626 ], [ %657, %678 ]
  %636 = phi <2 x i64> [ %631, %626 ], [ %658, %678 ]
  %637 = phi i32 [ %7, %626 ], [ %692, %678 ]
  %638 = phi i8* [ %8, %626 ], [ %691, %678 ]
  %639 = phi i8* [ %28, %626 ], [ %654, %678 ]
  %640 = getelementptr inbounds i8, i8* %639, i64 %1
  %641 = bitcast i8* %640 to i16*
  %642 = load i16, i16* %641, align 1
  %643 = bitcast <2 x i64> %636 to <8 x i16>
  %644 = insertelement <8 x i16> %643, i16 %642, i64 1
  %645 = getelementptr inbounds i8, i8* %640, i64 %1
  %646 = bitcast i8* %645 to i16*
  %647 = load i16, i16* %646, align 1
  %648 = insertelement <8 x i16> %644, i16 %647, i64 2
  %649 = getelementptr inbounds i8, i8* %645, i64 %1
  %650 = bitcast i8* %649 to i16*
  %651 = load i16, i16* %650, align 1
  %652 = insertelement <8 x i16> %648, i16 %651, i64 3
  %653 = bitcast <8 x i16> %652 to <2 x i64>
  %654 = getelementptr inbounds i8, i8* %649, i64 %1
  %655 = bitcast i8* %654 to i16*
  %656 = load i16, i16* %655, align 1
  %657 = insertelement <8 x i16> %635, i16 %656, i64 0
  %658 = bitcast <8 x i16> %657 to <2 x i64>
  %659 = shufflevector <2 x i64> %653, <2 x i64> %658, <2 x i32> <i32 0, i32 2>
  %660 = bitcast <2 x i64> %659 to <16 x i8>
  %661 = shufflevector <16 x i8> %660, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %662 = bitcast <8 x i16> %652 to <16 x i8>
  %663 = shufflevector <16 x i8> %662, <16 x i8> %661, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %664 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %663, <16 x i8> %633) #7
  %665 = add <8 x i16> %664, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %666 = ashr <8 x i16> %665, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %667 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %666, <8 x i16> %666) #7
  %668 = bitcast <16 x i8> %667 to <4 x i32>
  %669 = extractelement <4 x i32> %668, i32 0
  %670 = bitcast i8* %638 to i16*
  %671 = trunc i32 %669 to i16
  store i16 %671, i16* %670, align 1
  %672 = getelementptr inbounds i8, i8* %638, i64 %9
  %673 = shufflevector <16 x i8> %667, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %674 = bitcast <16 x i8> %673 to <4 x i32>
  %675 = extractelement <4 x i32> %674, i32 0
  %676 = bitcast i8* %672 to i16*
  %677 = trunc i32 %675 to i16
  store i16 %677, i16* %676, align 1
  br i1 %632, label %1207, label %678

678:                                              ; preds = %634
  %679 = getelementptr inbounds i8, i8* %672, i64 %9
  %680 = shufflevector <16 x i8> %667, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %681 = bitcast <16 x i8> %680 to <4 x i32>
  %682 = extractelement <4 x i32> %681, i32 0
  %683 = bitcast i8* %679 to i16*
  %684 = trunc i32 %682 to i16
  store i16 %684, i16* %683, align 1
  %685 = getelementptr inbounds i8, i8* %679, i64 %9
  %686 = shufflevector <16 x i8> %667, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %687 = bitcast <16 x i8> %686 to <4 x i32>
  %688 = extractelement <4 x i32> %687, i32 0
  %689 = bitcast i8* %685 to i16*
  %690 = trunc i32 %688 to i16
  store i16 %690, i16* %689, align 1
  %691 = getelementptr inbounds i8, i8* %685, i64 %9
  %692 = add nsw i32 %637, -4
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %1207, label %634

694:                                              ; preds = %619
  %695 = bitcast i8* %28 to i32*
  %696 = load i32, i32* %695, align 1
  %697 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %696, i32 0
  %698 = bitcast <2 x i64> %625 to <16 x i8>
  br label %699

699:                                              ; preds = %699, %694
  %700 = phi <4 x i32> [ %697, %694 ], [ %712, %699 ]
  %701 = phi i32 [ %7, %694 ], [ %730, %699 ]
  %702 = phi i8* [ %8, %694 ], [ %729, %699 ]
  %703 = phi i8* [ %28, %694 ], [ %709, %699 ]
  %704 = getelementptr inbounds i8, i8* %703, i64 %1
  %705 = bitcast i8* %704 to i32*
  %706 = load i32, i32* %705, align 1
  %707 = insertelement <4 x i32> undef, i32 %706, i32 0
  %708 = insertelement <4 x i32> %700, i32 %706, i32 1
  %709 = getelementptr inbounds i8, i8* %704, i64 %1
  %710 = bitcast i8* %709 to i32*
  %711 = load i32, i32* %710, align 1
  %712 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %711, i32 0
  %713 = insertelement <4 x i32> %707, i32 %711, i32 1
  %714 = bitcast <4 x i32> %708 to <16 x i8>
  %715 = bitcast <4 x i32> %713 to <16 x i8>
  %716 = shufflevector <16 x i8> %714, <16 x i8> %715, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %717 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %716, <16 x i8> %698) #7
  %718 = add <8 x i16> %717, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %719 = ashr <8 x i16> %718, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %720 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %719, <8 x i16> %719) #7
  %721 = bitcast <16 x i8> %720 to <4 x i32>
  %722 = extractelement <4 x i32> %721, i32 0
  %723 = bitcast i8* %702 to i32*
  store i32 %722, i32* %723, align 1
  %724 = getelementptr inbounds i8, i8* %702, i64 %9
  %725 = shufflevector <16 x i8> %720, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %726 = bitcast <16 x i8> %725 to <4 x i32>
  %727 = extractelement <4 x i32> %726, i32 0
  %728 = bitcast i8* %724 to i32*
  store i32 %727, i32* %728, align 1
  %729 = getelementptr inbounds i8, i8* %724, i64 %9
  %730 = add nsw i32 %701, -2
  %731 = icmp eq i32 %730, 0
  br i1 %731, label %1207, label %699

732:                                              ; preds = %619
  %733 = sext i32 %6 to i64
  %734 = bitcast <2 x i64> %625 to <16 x i8>
  %735 = and i32 %7, 1
  %736 = icmp eq i32 %735, 0
  %737 = add nsw i32 %7, -1
  %738 = icmp eq i32 %7, 1
  br label %739

739:                                              ; preds = %804, %732
  %740 = phi i64 [ 0, %732 ], [ %805, %804 ]
  %741 = getelementptr inbounds i8, i8* %28, i64 %740
  %742 = bitcast i8* %741 to i64*
  %743 = load i64, i64* %742, align 1
  %744 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %743, i32 0
  %745 = getelementptr inbounds i8, i8* %8, i64 %740
  br i1 %736, label %762, label %746

746:                                              ; preds = %739
  %747 = bitcast <2 x i64> %744 to <16 x i8>
  %748 = getelementptr inbounds i8, i8* %741, i64 %1
  %749 = bitcast i8* %748 to i64*
  %750 = load i64, i64* %749, align 1
  %751 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %750, i32 0
  %752 = bitcast <2 x i64> %751 to <16 x i8>
  %753 = shufflevector <16 x i8> %747, <16 x i8> %752, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %754 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %753, <16 x i8> %734) #7
  %755 = add <8 x i16> %754, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %756 = ashr <8 x i16> %755, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %757 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %756, <8 x i16> undef) #7
  %758 = bitcast <16 x i8> %757 to <2 x i64>
  %759 = extractelement <2 x i64> %758, i32 0
  %760 = bitcast i8* %745 to i64*
  store i64 %759, i64* %760, align 1
  %761 = getelementptr inbounds i8, i8* %745, i64 %9
  br label %762

762:                                              ; preds = %746, %739
  %763 = phi <2 x i64> [ %751, %746 ], [ %744, %739 ]
  %764 = phi i8* [ %748, %746 ], [ %741, %739 ]
  %765 = phi i8* [ %761, %746 ], [ %745, %739 ]
  %766 = phi i32 [ %737, %746 ], [ %7, %739 ]
  br i1 %738, label %804, label %767

767:                                              ; preds = %762, %767
  %768 = phi <2 x i64> [ %791, %767 ], [ %763, %762 ]
  %769 = phi i8* [ %788, %767 ], [ %764, %762 ]
  %770 = phi i8* [ %801, %767 ], [ %765, %762 ]
  %771 = phi i32 [ %802, %767 ], [ %766, %762 ]
  %772 = bitcast <2 x i64> %768 to <16 x i8>
  %773 = getelementptr inbounds i8, i8* %769, i64 %1
  %774 = bitcast i8* %773 to i64*
  %775 = load i64, i64* %774, align 1
  %776 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %775, i32 0
  %777 = bitcast <2 x i64> %776 to <16 x i8>
  %778 = shufflevector <16 x i8> %772, <16 x i8> %777, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %779 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %778, <16 x i8> %734) #7
  %780 = add <8 x i16> %779, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %781 = ashr <8 x i16> %780, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %782 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %781, <8 x i16> undef) #7
  %783 = bitcast <16 x i8> %782 to <2 x i64>
  %784 = extractelement <2 x i64> %783, i32 0
  %785 = bitcast i8* %770 to i64*
  store i64 %784, i64* %785, align 1
  %786 = getelementptr inbounds i8, i8* %770, i64 %9
  %787 = bitcast <2 x i64> %776 to <16 x i8>
  %788 = getelementptr inbounds i8, i8* %773, i64 %1
  %789 = bitcast i8* %788 to i64*
  %790 = load i64, i64* %789, align 1
  %791 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %790, i32 0
  %792 = bitcast <2 x i64> %791 to <16 x i8>
  %793 = shufflevector <16 x i8> %787, <16 x i8> %792, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %794 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %793, <16 x i8> %734) #7
  %795 = add <8 x i16> %794, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %796 = ashr <8 x i16> %795, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %797 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %796, <8 x i16> undef) #7
  %798 = bitcast <16 x i8> %797 to <2 x i64>
  %799 = extractelement <2 x i64> %798, i32 0
  %800 = bitcast i8* %786 to i64*
  store i64 %799, i64* %800, align 1
  %801 = getelementptr inbounds i8, i8* %786, i64 %9
  %802 = add nsw i32 %771, -2
  %803 = icmp eq i32 %802, 0
  br i1 %803, label %804, label %767

804:                                              ; preds = %767, %762
  %805 = add nuw nsw i64 %740, 8
  %806 = icmp slt i64 %805, %733
  br i1 %806, label %739, label %1207

807:                                              ; preds = %300
  %808 = icmp eq i32 %24, 4
  %809 = bitcast <2 x i64> %34 to <8 x i16>
  %810 = shufflevector <8 x i16> %809, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %811 = shufflevector <8 x i16> %809, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %812 = bitcast <8 x i16> %810 to <2 x i64>
  %813 = shufflevector <2 x i64> %812, <2 x i64> undef, <2 x i32> zeroinitializer
  %814 = bitcast <8 x i16> %811 to <2 x i64>
  %815 = shufflevector <2 x i64> %814, <2 x i64> undef, <2 x i32> zeroinitializer
  %816 = icmp eq i32 %6, 2
  br i1 %808, label %817, label %1012

817:                                              ; preds = %807
  br i1 %816, label %818, label %901

818:                                              ; preds = %817
  %819 = bitcast i8* %28 to i16*
  %820 = load i16, i16* %819, align 1
  %821 = sext i16 %820 to i32
  %822 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %821, i32 0
  %823 = getelementptr inbounds i8, i8* %28, i64 %1
  %824 = bitcast i8* %823 to i16*
  %825 = load i16, i16* %824, align 1
  %826 = bitcast <4 x i32> %822 to <8 x i16>
  %827 = insertelement <8 x i16> %826, i16 %825, i64 1
  %828 = getelementptr inbounds i8, i8* %823, i64 %1
  %829 = bitcast i8* %828 to i16*
  %830 = load i16, i16* %829, align 1
  %831 = insertelement <8 x i16> %827, i16 %830, i64 2
  %832 = icmp eq i32 %7, 2
  %833 = bitcast <2 x i64> %813 to <16 x i8>
  %834 = bitcast <2 x i64> %815 to <16 x i8>
  br label %835

835:                                              ; preds = %885, %818
  %836 = phi <8 x i16> [ zeroinitializer, %818 ], [ %859, %885 ]
  %837 = phi <8 x i16> [ %831, %818 ], [ %859, %885 ]
  %838 = phi i32 [ %7, %818 ], [ %899, %885 ]
  %839 = phi i8* [ %8, %818 ], [ %898, %885 ]
  %840 = phi i8* [ %28, %818 ], [ %848, %885 ]
  %841 = getelementptr inbounds i8, i8* %840, i64 %1
  %842 = getelementptr inbounds i8, i8* %841, i64 %1
  %843 = getelementptr inbounds i8, i8* %842, i64 %1
  %844 = bitcast i8* %843 to i16*
  %845 = load i16, i16* %844, align 1
  %846 = insertelement <8 x i16> %837, i16 %845, i64 3
  %847 = bitcast <8 x i16> %846 to <2 x i64>
  %848 = getelementptr inbounds i8, i8* %843, i64 %1
  %849 = bitcast i8* %848 to i16*
  %850 = load i16, i16* %849, align 1
  %851 = insertelement <8 x i16> %836, i16 %850, i64 0
  %852 = getelementptr inbounds i8, i8* %848, i64 %1
  %853 = bitcast i8* %852 to i16*
  %854 = load i16, i16* %853, align 1
  %855 = insertelement <8 x i16> %851, i16 %854, i64 1
  %856 = getelementptr inbounds i8, i8* %852, i64 %1
  %857 = bitcast i8* %856 to i16*
  %858 = load i16, i16* %857, align 1
  %859 = insertelement <8 x i16> %855, i16 %858, i64 2
  %860 = bitcast <8 x i16> %859 to <2 x i64>
  %861 = shufflevector <2 x i64> %847, <2 x i64> %860, <2 x i32> <i32 0, i32 2>
  %862 = bitcast <2 x i64> %861 to <16 x i8>
  %863 = shufflevector <16 x i8> %862, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %864 = shufflevector <16 x i8> %862, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %865 = shufflevector <16 x i8> %862, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %866 = bitcast <8 x i16> %846 to <16 x i8>
  %867 = shufflevector <16 x i8> %866, <16 x i8> %863, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %868 = shufflevector <16 x i8> %864, <16 x i8> %865, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %869 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %867, <16 x i8> %833) #7
  %870 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %868, <16 x i8> %834) #7
  %871 = add <8 x i16> %869, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %872 = add <8 x i16> %871, %870
  %873 = ashr <8 x i16> %872, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %874 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %873, <8 x i16> %873) #7
  %875 = bitcast <16 x i8> %874 to <4 x i32>
  %876 = extractelement <4 x i32> %875, i32 0
  %877 = bitcast i8* %839 to i16*
  %878 = trunc i32 %876 to i16
  store i16 %878, i16* %877, align 1
  %879 = getelementptr inbounds i8, i8* %839, i64 %9
  %880 = shufflevector <16 x i8> %874, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %881 = bitcast <16 x i8> %880 to <4 x i32>
  %882 = extractelement <4 x i32> %881, i32 0
  %883 = bitcast i8* %879 to i16*
  %884 = trunc i32 %882 to i16
  store i16 %884, i16* %883, align 1
  br i1 %832, label %1207, label %885

885:                                              ; preds = %835
  %886 = getelementptr inbounds i8, i8* %879, i64 %9
  %887 = shufflevector <16 x i8> %874, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %888 = bitcast <16 x i8> %887 to <4 x i32>
  %889 = extractelement <4 x i32> %888, i32 0
  %890 = bitcast i8* %886 to i16*
  %891 = trunc i32 %889 to i16
  store i16 %891, i16* %890, align 1
  %892 = getelementptr inbounds i8, i8* %886, i64 %9
  %893 = shufflevector <16 x i8> %874, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %894 = bitcast <16 x i8> %893 to <4 x i32>
  %895 = extractelement <4 x i32> %894, i32 0
  %896 = bitcast i8* %892 to i16*
  %897 = trunc i32 %895 to i16
  store i16 %897, i16* %896, align 1
  %898 = getelementptr inbounds i8, i8* %892, i64 %9
  %899 = add nsw i32 %838, -4
  %900 = icmp eq i32 %899, 0
  br i1 %900, label %1207, label %835

901:                                              ; preds = %817
  %902 = icmp eq i32 %6, 4
  br i1 %902, label %903, label %961

903:                                              ; preds = %901
  %904 = bitcast i8* %28 to i32*
  %905 = load i32, i32* %904, align 1
  %906 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %905, i32 0
  %907 = getelementptr inbounds i8, i8* %28, i64 %1
  %908 = bitcast i8* %907 to i32*
  %909 = load i32, i32* %908, align 1
  %910 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %909, i32 0
  %911 = shufflevector <4 x i32> %906, <4 x i32> %910, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %912 = getelementptr inbounds i8, i8* %907, i64 %1
  %913 = bitcast i8* %912 to i32*
  %914 = load i32, i32* %913, align 1
  %915 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %914, i32 0
  %916 = shufflevector <4 x i32> %910, <4 x i32> %915, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %917 = bitcast <2 x i64> %813 to <16 x i8>
  %918 = bitcast <2 x i64> %815 to <16 x i8>
  br label %919

919:                                              ; preds = %919, %903
  %920 = phi <4 x i32> [ %915, %903 ], [ %936, %919 ]
  %921 = phi <4 x i32> [ %916, %903 ], [ %937, %919 ]
  %922 = phi <4 x i32> [ %911, %903 ], [ %932, %919 ]
  %923 = phi i32 [ %7, %903 ], [ %959, %919 ]
  %924 = phi i8* [ %8, %903 ], [ %958, %919 ]
  %925 = phi i8* [ %28, %903 ], [ %927, %919 ]
  %926 = getelementptr inbounds i8, i8* %925, i64 %1
  %927 = getelementptr inbounds i8, i8* %926, i64 %1
  %928 = getelementptr inbounds i8, i8* %927, i64 %1
  %929 = bitcast i8* %928 to i32*
  %930 = load i32, i32* %929, align 1
  %931 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %930, i32 0
  %932 = shufflevector <4 x i32> %920, <4 x i32> %931, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %933 = getelementptr inbounds i8, i8* %928, i64 %1
  %934 = bitcast i8* %933 to i32*
  %935 = load i32, i32* %934, align 1
  %936 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %935, i32 0
  %937 = shufflevector <4 x i32> %931, <4 x i32> %936, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %938 = bitcast <4 x i32> %922 to <16 x i8>
  %939 = bitcast <4 x i32> %921 to <16 x i8>
  %940 = shufflevector <16 x i8> %938, <16 x i8> %939, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %941 = bitcast <4 x i32> %932 to <16 x i8>
  %942 = bitcast <4 x i32> %937 to <16 x i8>
  %943 = shufflevector <16 x i8> %941, <16 x i8> %942, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %944 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %940, <16 x i8> %917) #7
  %945 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %943, <16 x i8> %918) #7
  %946 = add <8 x i16> %944, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %947 = add <8 x i16> %946, %945
  %948 = ashr <8 x i16> %947, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %949 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %948, <8 x i16> %948) #7
  %950 = bitcast <16 x i8> %949 to <4 x i32>
  %951 = extractelement <4 x i32> %950, i32 0
  %952 = bitcast i8* %924 to i32*
  store i32 %951, i32* %952, align 1
  %953 = getelementptr inbounds i8, i8* %924, i64 %9
  %954 = shufflevector <16 x i8> %949, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %955 = bitcast <16 x i8> %954 to <4 x i32>
  %956 = extractelement <4 x i32> %955, i32 0
  %957 = bitcast i8* %953 to i32*
  store i32 %956, i32* %957, align 1
  %958 = getelementptr inbounds i8, i8* %953, i64 %9
  %959 = add nsw i32 %923, -2
  %960 = icmp eq i32 %959, 0
  br i1 %960, label %1207, label %919

961:                                              ; preds = %901
  %962 = sext i32 %6 to i64
  %963 = bitcast <2 x i64> %813 to <16 x i8>
  %964 = bitcast <2 x i64> %815 to <16 x i8>
  br label %965

965:                                              ; preds = %1009, %961
  %966 = phi i64 [ %1010, %1009 ], [ 0, %961 ]
  %967 = getelementptr inbounds i8, i8* %28, i64 %966
  %968 = bitcast i8* %967 to i64*
  %969 = load i64, i64* %968, align 1
  %970 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %969, i32 0
  %971 = getelementptr inbounds i8, i8* %967, i64 %1
  %972 = bitcast i8* %971 to i64*
  %973 = load i64, i64* %972, align 1
  %974 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %973, i32 0
  %975 = getelementptr inbounds i8, i8* %971, i64 %1
  %976 = bitcast i8* %975 to i64*
  %977 = load i64, i64* %976, align 1
  %978 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %977, i32 0
  %979 = getelementptr inbounds i8, i8* %8, i64 %966
  br label %980

980:                                              ; preds = %980, %965
  %981 = phi <2 x i64> [ %978, %965 ], [ %993, %980 ]
  %982 = phi <2 x i64> [ %974, %965 ], [ %981, %980 ]
  %983 = phi <2 x i64> [ %970, %965 ], [ %982, %980 ]
  %984 = phi i8* [ %975, %965 ], [ %990, %980 ]
  %985 = phi i8* [ %979, %965 ], [ %1006, %980 ]
  %986 = phi i32 [ %7, %965 ], [ %1007, %980 ]
  %987 = bitcast <2 x i64> %981 to <16 x i8>
  %988 = bitcast <2 x i64> %982 to <16 x i8>
  %989 = bitcast <2 x i64> %983 to <16 x i8>
  %990 = getelementptr inbounds i8, i8* %984, i64 %1
  %991 = bitcast i8* %990 to i64*
  %992 = load i64, i64* %991, align 1
  %993 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %992, i32 0
  %994 = shufflevector <16 x i8> %989, <16 x i8> %988, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %995 = bitcast <2 x i64> %993 to <16 x i8>
  %996 = shufflevector <16 x i8> %987, <16 x i8> %995, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %997 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %994, <16 x i8> %963) #7
  %998 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %996, <16 x i8> %964) #7
  %999 = add <8 x i16> %997, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1000 = add <8 x i16> %999, %998
  %1001 = ashr <8 x i16> %1000, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %1002 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1001, <8 x i16> undef) #7
  %1003 = bitcast <16 x i8> %1002 to <2 x i64>
  %1004 = extractelement <2 x i64> %1003, i32 0
  %1005 = bitcast i8* %985 to i64*
  store i64 %1004, i64* %1005, align 1
  %1006 = getelementptr inbounds i8, i8* %985, i64 %9
  %1007 = add nsw i32 %986, -1
  %1008 = icmp eq i32 %1007, 0
  br i1 %1008, label %1009, label %980

1009:                                             ; preds = %980
  %1010 = add nuw nsw i64 %966, 8
  %1011 = icmp slt i64 %1010, %962
  br i1 %1011, label %965, label %1207

1012:                                             ; preds = %807
  br i1 %816, label %1013, label %1096

1013:                                             ; preds = %1012
  %1014 = bitcast i8* %28 to i16*
  %1015 = load i16, i16* %1014, align 1
  %1016 = sext i16 %1015 to i32
  %1017 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1016, i32 0
  %1018 = getelementptr inbounds i8, i8* %28, i64 %1
  %1019 = bitcast i8* %1018 to i16*
  %1020 = load i16, i16* %1019, align 1
  %1021 = bitcast <4 x i32> %1017 to <8 x i16>
  %1022 = insertelement <8 x i16> %1021, i16 %1020, i64 1
  %1023 = getelementptr inbounds i8, i8* %1018, i64 %1
  %1024 = bitcast i8* %1023 to i16*
  %1025 = load i16, i16* %1024, align 1
  %1026 = insertelement <8 x i16> %1022, i16 %1025, i64 2
  %1027 = icmp eq i32 %7, 2
  %1028 = bitcast <2 x i64> %813 to <16 x i8>
  %1029 = bitcast <2 x i64> %815 to <16 x i8>
  br label %1030

1030:                                             ; preds = %1080, %1013
  %1031 = phi <8 x i16> [ zeroinitializer, %1013 ], [ %1054, %1080 ]
  %1032 = phi <8 x i16> [ %1026, %1013 ], [ %1054, %1080 ]
  %1033 = phi i32 [ %7, %1013 ], [ %1094, %1080 ]
  %1034 = phi i8* [ %8, %1013 ], [ %1093, %1080 ]
  %1035 = phi i8* [ %28, %1013 ], [ %1043, %1080 ]
  %1036 = getelementptr inbounds i8, i8* %1035, i64 %1
  %1037 = getelementptr inbounds i8, i8* %1036, i64 %1
  %1038 = getelementptr inbounds i8, i8* %1037, i64 %1
  %1039 = bitcast i8* %1038 to i16*
  %1040 = load i16, i16* %1039, align 1
  %1041 = insertelement <8 x i16> %1032, i16 %1040, i64 3
  %1042 = bitcast <8 x i16> %1041 to <2 x i64>
  %1043 = getelementptr inbounds i8, i8* %1038, i64 %1
  %1044 = bitcast i8* %1043 to i16*
  %1045 = load i16, i16* %1044, align 1
  %1046 = insertelement <8 x i16> %1031, i16 %1045, i64 0
  %1047 = getelementptr inbounds i8, i8* %1043, i64 %1
  %1048 = bitcast i8* %1047 to i16*
  %1049 = load i16, i16* %1048, align 1
  %1050 = insertelement <8 x i16> %1046, i16 %1049, i64 1
  %1051 = getelementptr inbounds i8, i8* %1047, i64 %1
  %1052 = bitcast i8* %1051 to i16*
  %1053 = load i16, i16* %1052, align 1
  %1054 = insertelement <8 x i16> %1050, i16 %1053, i64 2
  %1055 = bitcast <8 x i16> %1054 to <2 x i64>
  %1056 = shufflevector <2 x i64> %1042, <2 x i64> %1055, <2 x i32> <i32 0, i32 2>
  %1057 = bitcast <2 x i64> %1056 to <16 x i8>
  %1058 = shufflevector <16 x i8> %1057, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1059 = shufflevector <16 x i8> %1057, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1060 = shufflevector <16 x i8> %1057, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1061 = bitcast <8 x i16> %1041 to <16 x i8>
  %1062 = shufflevector <16 x i8> %1061, <16 x i8> %1058, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1063 = shufflevector <16 x i8> %1059, <16 x i8> %1060, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1064 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %1062, <16 x i8> %1028) #7
  %1065 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %1063, <16 x i8> %1029) #7
  %1066 = add <8 x i16> %1064, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1067 = add <8 x i16> %1066, %1065
  %1068 = ashr <8 x i16> %1067, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %1069 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1068, <8 x i16> %1068) #7
  %1070 = bitcast <16 x i8> %1069 to <4 x i32>
  %1071 = extractelement <4 x i32> %1070, i32 0
  %1072 = bitcast i8* %1034 to i16*
  %1073 = trunc i32 %1071 to i16
  store i16 %1073, i16* %1072, align 1
  %1074 = getelementptr inbounds i8, i8* %1034, i64 %9
  %1075 = shufflevector <16 x i8> %1069, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1076 = bitcast <16 x i8> %1075 to <4 x i32>
  %1077 = extractelement <4 x i32> %1076, i32 0
  %1078 = bitcast i8* %1074 to i16*
  %1079 = trunc i32 %1077 to i16
  store i16 %1079, i16* %1078, align 1
  br i1 %1027, label %1207, label %1080

1080:                                             ; preds = %1030
  %1081 = getelementptr inbounds i8, i8* %1074, i64 %9
  %1082 = shufflevector <16 x i8> %1069, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1083 = bitcast <16 x i8> %1082 to <4 x i32>
  %1084 = extractelement <4 x i32> %1083, i32 0
  %1085 = bitcast i8* %1081 to i16*
  %1086 = trunc i32 %1084 to i16
  store i16 %1086, i16* %1085, align 1
  %1087 = getelementptr inbounds i8, i8* %1081, i64 %9
  %1088 = shufflevector <16 x i8> %1069, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1089 = bitcast <16 x i8> %1088 to <4 x i32>
  %1090 = extractelement <4 x i32> %1089, i32 0
  %1091 = bitcast i8* %1087 to i16*
  %1092 = trunc i32 %1090 to i16
  store i16 %1092, i16* %1091, align 1
  %1093 = getelementptr inbounds i8, i8* %1087, i64 %9
  %1094 = add nsw i32 %1033, -4
  %1095 = icmp eq i32 %1094, 0
  br i1 %1095, label %1207, label %1030

1096:                                             ; preds = %1012
  %1097 = icmp eq i32 %6, 4
  br i1 %1097, label %1098, label %1156

1098:                                             ; preds = %1096
  %1099 = bitcast i8* %28 to i32*
  %1100 = load i32, i32* %1099, align 1
  %1101 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1100, i32 0
  %1102 = getelementptr inbounds i8, i8* %28, i64 %1
  %1103 = bitcast i8* %1102 to i32*
  %1104 = load i32, i32* %1103, align 1
  %1105 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1104, i32 0
  %1106 = shufflevector <4 x i32> %1101, <4 x i32> %1105, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1107 = getelementptr inbounds i8, i8* %1102, i64 %1
  %1108 = bitcast i8* %1107 to i32*
  %1109 = load i32, i32* %1108, align 1
  %1110 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1109, i32 0
  %1111 = shufflevector <4 x i32> %1105, <4 x i32> %1110, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1112 = bitcast <2 x i64> %813 to <16 x i8>
  %1113 = bitcast <2 x i64> %815 to <16 x i8>
  br label %1114

1114:                                             ; preds = %1114, %1098
  %1115 = phi <4 x i32> [ %1110, %1098 ], [ %1131, %1114 ]
  %1116 = phi <4 x i32> [ %1111, %1098 ], [ %1132, %1114 ]
  %1117 = phi <4 x i32> [ %1106, %1098 ], [ %1127, %1114 ]
  %1118 = phi i32 [ %7, %1098 ], [ %1154, %1114 ]
  %1119 = phi i8* [ %8, %1098 ], [ %1153, %1114 ]
  %1120 = phi i8* [ %28, %1098 ], [ %1122, %1114 ]
  %1121 = getelementptr inbounds i8, i8* %1120, i64 %1
  %1122 = getelementptr inbounds i8, i8* %1121, i64 %1
  %1123 = getelementptr inbounds i8, i8* %1122, i64 %1
  %1124 = bitcast i8* %1123 to i32*
  %1125 = load i32, i32* %1124, align 1
  %1126 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1125, i32 0
  %1127 = shufflevector <4 x i32> %1115, <4 x i32> %1126, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1128 = getelementptr inbounds i8, i8* %1123, i64 %1
  %1129 = bitcast i8* %1128 to i32*
  %1130 = load i32, i32* %1129, align 1
  %1131 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1130, i32 0
  %1132 = shufflevector <4 x i32> %1126, <4 x i32> %1131, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1133 = bitcast <4 x i32> %1117 to <16 x i8>
  %1134 = bitcast <4 x i32> %1116 to <16 x i8>
  %1135 = shufflevector <16 x i8> %1133, <16 x i8> %1134, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1136 = bitcast <4 x i32> %1127 to <16 x i8>
  %1137 = bitcast <4 x i32> %1132 to <16 x i8>
  %1138 = shufflevector <16 x i8> %1136, <16 x i8> %1137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1139 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %1135, <16 x i8> %1112) #7
  %1140 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %1138, <16 x i8> %1113) #7
  %1141 = add <8 x i16> %1139, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1142 = add <8 x i16> %1141, %1140
  %1143 = ashr <8 x i16> %1142, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %1144 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1143, <8 x i16> %1143) #7
  %1145 = bitcast <16 x i8> %1144 to <4 x i32>
  %1146 = extractelement <4 x i32> %1145, i32 0
  %1147 = bitcast i8* %1119 to i32*
  store i32 %1146, i32* %1147, align 1
  %1148 = getelementptr inbounds i8, i8* %1119, i64 %9
  %1149 = shufflevector <16 x i8> %1144, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1150 = bitcast <16 x i8> %1149 to <4 x i32>
  %1151 = extractelement <4 x i32> %1150, i32 0
  %1152 = bitcast i8* %1148 to i32*
  store i32 %1151, i32* %1152, align 1
  %1153 = getelementptr inbounds i8, i8* %1148, i64 %9
  %1154 = add nsw i32 %1118, -2
  %1155 = icmp eq i32 %1154, 0
  br i1 %1155, label %1207, label %1114

1156:                                             ; preds = %1096
  %1157 = sext i32 %6 to i64
  %1158 = bitcast <2 x i64> %813 to <16 x i8>
  %1159 = bitcast <2 x i64> %815 to <16 x i8>
  br label %1160

1160:                                             ; preds = %1204, %1156
  %1161 = phi i64 [ %1205, %1204 ], [ 0, %1156 ]
  %1162 = getelementptr inbounds i8, i8* %28, i64 %1161
  %1163 = bitcast i8* %1162 to i64*
  %1164 = load i64, i64* %1163, align 1
  %1165 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %1164, i32 0
  %1166 = getelementptr inbounds i8, i8* %1162, i64 %1
  %1167 = bitcast i8* %1166 to i64*
  %1168 = load i64, i64* %1167, align 1
  %1169 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %1168, i32 0
  %1170 = getelementptr inbounds i8, i8* %1166, i64 %1
  %1171 = bitcast i8* %1170 to i64*
  %1172 = load i64, i64* %1171, align 1
  %1173 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %1172, i32 0
  %1174 = getelementptr inbounds i8, i8* %8, i64 %1161
  br label %1175

1175:                                             ; preds = %1175, %1160
  %1176 = phi <2 x i64> [ %1173, %1160 ], [ %1188, %1175 ]
  %1177 = phi <2 x i64> [ %1169, %1160 ], [ %1176, %1175 ]
  %1178 = phi <2 x i64> [ %1165, %1160 ], [ %1177, %1175 ]
  %1179 = phi i8* [ %1170, %1160 ], [ %1185, %1175 ]
  %1180 = phi i8* [ %1174, %1160 ], [ %1201, %1175 ]
  %1181 = phi i32 [ %7, %1160 ], [ %1202, %1175 ]
  %1182 = bitcast <2 x i64> %1176 to <16 x i8>
  %1183 = bitcast <2 x i64> %1177 to <16 x i8>
  %1184 = bitcast <2 x i64> %1178 to <16 x i8>
  %1185 = getelementptr inbounds i8, i8* %1179, i64 %1
  %1186 = bitcast i8* %1185 to i64*
  %1187 = load i64, i64* %1186, align 1
  %1188 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %1187, i32 0
  %1189 = shufflevector <16 x i8> %1184, <16 x i8> %1183, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1190 = bitcast <2 x i64> %1188 to <16 x i8>
  %1191 = shufflevector <16 x i8> %1182, <16 x i8> %1190, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1192 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %1189, <16 x i8> %1158) #7
  %1193 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %1191, <16 x i8> %1159) #7
  %1194 = add <8 x i16> %1192, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1195 = add <8 x i16> %1194, %1193
  %1196 = ashr <8 x i16> %1195, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %1197 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1196, <8 x i16> undef) #7
  %1198 = bitcast <16 x i8> %1197 to <2 x i64>
  %1199 = extractelement <2 x i64> %1198, i32 0
  %1200 = bitcast i8* %1180 to i64*
  store i64 %1199, i64* %1200, align 1
  %1201 = getelementptr inbounds i8, i8* %1180, i64 %9
  %1202 = add nsw i32 %1181, -1
  %1203 = icmp eq i32 %1202, 0
  br i1 %1203, label %1204, label %1175

1204:                                             ; preds = %1175
  %1205 = add nuw nsw i64 %1161, 8
  %1206 = icmp slt i64 %1205, %1157
  br i1 %1206, label %1160, label %1207

1207:                                             ; preds = %699, %678, %634, %804, %476, %358, %616, %1204, %1114, %1080, %1030, %1009, %919, %885, %835, %182, %79, %297
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_117Convolve2D_SSE4_1EPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #4 {
  %11 = alloca [17280 x i16], align 16
  %12 = icmp slt i32 %6, 5
  br i1 %12, label %13, label %18

13:                                               ; preds = %10
  %14 = and i32 %2, -3
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %13
  %17 = icmp eq i32 %2, 1
  br i1 %17, label %19, label %18

18:                                               ; preds = %16, %10
  br label %19

19:                                               ; preds = %13, %16, %18
  %20 = phi i32 [ %2, %18 ], [ 4, %13 ], [ 5, %16 ]
  %21 = icmp slt i32 %7, 5
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  %23 = and i32 %3, -3
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %22
  %26 = icmp eq i32 %3, 1
  br i1 %26, label %32, label %27

27:                                               ; preds = %19, %25
  %28 = icmp slt i32 %3, 2
  br i1 %28, label %32, label %29

29:                                               ; preds = %27
  switch i32 %3, label %31 [
    i32 3, label %32
    i32 2, label %30
  ]

30:                                               ; preds = %29
  br label %32

31:                                               ; preds = %29
  br label %32

32:                                               ; preds = %29, %31, %25, %22, %30, %27
  %33 = phi i32 [ %3, %27 ], [ 2, %30 ], [ 5, %25 ], [ 4, %22 ], [ %3, %29 ], [ %3, %31 ]
  %34 = phi i32 [ 6, %27 ], [ 8, %30 ], [ 4, %25 ], [ 4, %22 ], [ 2, %29 ], [ 4, %31 ]
  %35 = bitcast [17280 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %35) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 -86, i64 34560, i1 false)
  %36 = add nsw i32 %34, %7
  %37 = add nsw i32 %36, -1
  %38 = lshr exact i32 %34, 1
  %39 = add nsw i32 %38, -1
  %40 = sext i32 %39 to i64
  %41 = mul i64 %40, %1
  %42 = sub i64 0, %41
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  %44 = getelementptr inbounds i8, i8* %43, i64 -3
  %45 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 0
  %46 = sext i32 %6 to i64
  %47 = sext i32 %20 to i64
  %48 = sext i32 %4 to i64
  %49 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %47, i64 %48, i64 0
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %51, i32 0
  switch i32 %20, label %382 [
    i32 2, label %53
    i32 1, label %106
    i32 0, label %154
    i32 4, label %202
    i32 5, label %292
  ]

53:                                               ; preds = %32
  %54 = bitcast <2 x i64> %52 to <8 x i16>
  %55 = icmp sgt i32 %6, 4
  br i1 %55, label %56, label %559

56:                                               ; preds = %53
  %57 = shufflevector <8 x i16> %54, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <8 x i16> %57 to <2 x i64>
  %59 = shufflevector <2 x i64> %58, <2 x i64> undef, <2 x i32> zeroinitializer
  %60 = shufflevector <8 x i16> %54, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = bitcast <8 x i16> %60 to <2 x i64>
  %62 = shufflevector <2 x i64> %61, <2 x i64> undef, <2 x i32> zeroinitializer
  %63 = shufflevector <8 x i16> %54, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %64 = bitcast <8 x i16> %63 to <2 x i64>
  %65 = shufflevector <2 x i64> %64, <2 x i64> undef, <2 x i32> zeroinitializer
  %66 = shufflevector <8 x i16> %54, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = bitcast <8 x i16> %66 to <2 x i64>
  %68 = shufflevector <2 x i64> %67, <2 x i64> undef, <2 x i32> zeroinitializer
  %69 = bitcast <2 x i64> %68 to <16 x i8>
  %70 = bitcast <2 x i64> %65 to <16 x i8>
  %71 = bitcast <2 x i64> %62 to <16 x i8>
  %72 = bitcast <2 x i64> %59 to <16 x i8>
  br label %73

73:                                               ; preds = %101, %56
  %74 = phi i16* [ %45, %56 ], [ %103, %101 ]
  %75 = phi i32 [ %37, %56 ], [ %104, %101 ]
  %76 = phi i8* [ %44, %56 ], [ %102, %101 ]
  br label %77

77:                                               ; preds = %77, %73
  %78 = phi i64 [ %99, %77 ], [ 0, %73 ]
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %83 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %84 = shufflevector <16 x i8> %82, <16 x i8> %83, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %85 = shufflevector <16 x i8> %82, <16 x i8> %83, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %86 = shufflevector <16 x i8> %82, <16 x i8> %83, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %87 = shufflevector <16 x i8> %82, <16 x i8> %83, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %88 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %84, <16 x i8> %69) #7
  %89 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %85, <16 x i8> %70) #7
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %86, <16 x i8> %71) #7
  %91 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %87, <16 x i8> %72) #7
  %92 = add <8 x i16> %88, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %93 = add <8 x i16> %92, %89
  %94 = add <8 x i16> %93, %90
  %95 = add <8 x i16> %94, %91
  %96 = ashr <8 x i16> %95, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %97 = getelementptr inbounds i16, i16* %74, i64 %78
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %98, align 16
  %99 = add nuw nsw i64 %78, 8
  %100 = icmp slt i64 %99, %46
  br i1 %100, label %77, label %101

101:                                              ; preds = %77
  %102 = getelementptr inbounds i8, i8* %76, i64 %1
  %103 = getelementptr inbounds i16, i16* %74, i64 %46
  %104 = add nsw i32 %75, -1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %559, label %73

106:                                              ; preds = %32
  %107 = bitcast <2 x i64> %52 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %109 = bitcast <16 x i8> %108 to <8 x i16>
  %110 = icmp sgt i32 %6, 4
  br i1 %110, label %111, label %559

111:                                              ; preds = %106
  %112 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = bitcast <8 x i16> %112 to <2 x i64>
  %114 = shufflevector <2 x i64> %113, <2 x i64> undef, <2 x i32> zeroinitializer
  %115 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %116 = bitcast <8 x i16> %115 to <2 x i64>
  %117 = shufflevector <2 x i64> %116, <2 x i64> undef, <2 x i32> zeroinitializer
  %118 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %119 = bitcast <8 x i16> %118 to <2 x i64>
  %120 = shufflevector <2 x i64> %119, <2 x i64> undef, <2 x i32> zeroinitializer
  %121 = bitcast <2 x i64> %120 to <16 x i8>
  %122 = bitcast <2 x i64> %117 to <16 x i8>
  %123 = bitcast <2 x i64> %114 to <16 x i8>
  br label %124

124:                                              ; preds = %149, %111
  %125 = phi i16* [ %45, %111 ], [ %151, %149 ]
  %126 = phi i32 [ %37, %111 ], [ %152, %149 ]
  %127 = phi i8* [ %44, %111 ], [ %150, %149 ]
  br label %128

128:                                              ; preds = %128, %124
  %129 = phi i64 [ %147, %128 ], [ 0, %124 ]
  %130 = getelementptr inbounds i8, i8* %127, i64 %129
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1
  %133 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %134 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %135 = shufflevector <16 x i8> %133, <16 x i8> %134, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %136 = shufflevector <16 x i8> %133, <16 x i8> %134, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %137 = shufflevector <16 x i8> %133, <16 x i8> %134, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %138 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %135, <16 x i8> %121) #7
  %139 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %136, <16 x i8> %122) #7
  %140 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %137, <16 x i8> %123) #7
  %141 = add <8 x i16> %138, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %142 = add <8 x i16> %141, %139
  %143 = add <8 x i16> %142, %140
  %144 = ashr <8 x i16> %143, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %145 = getelementptr inbounds i16, i16* %125, i64 %129
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %146, align 16
  %147 = add nuw nsw i64 %129, 8
  %148 = icmp slt i64 %147, %46
  br i1 %148, label %128, label %149

149:                                              ; preds = %128
  %150 = getelementptr inbounds i8, i8* %127, i64 %1
  %151 = getelementptr inbounds i16, i16* %125, i64 %46
  %152 = add nsw i32 %126, -1
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %559, label %124

154:                                              ; preds = %32
  %155 = bitcast <2 x i64> %52 to <16 x i8>
  %156 = shufflevector <16 x i8> %155, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %157 = bitcast <16 x i8> %156 to <8 x i16>
  %158 = icmp sgt i32 %6, 4
  br i1 %158, label %159, label %559

159:                                              ; preds = %154
  %160 = shufflevector <8 x i16> %157, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = bitcast <8 x i16> %160 to <2 x i64>
  %162 = shufflevector <2 x i64> %161, <2 x i64> undef, <2 x i32> zeroinitializer
  %163 = shufflevector <8 x i16> %157, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %164 = bitcast <8 x i16> %163 to <2 x i64>
  %165 = shufflevector <2 x i64> %164, <2 x i64> undef, <2 x i32> zeroinitializer
  %166 = shufflevector <8 x i16> %157, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %167 = bitcast <8 x i16> %166 to <2 x i64>
  %168 = shufflevector <2 x i64> %167, <2 x i64> undef, <2 x i32> zeroinitializer
  %169 = bitcast <2 x i64> %168 to <16 x i8>
  %170 = bitcast <2 x i64> %165 to <16 x i8>
  %171 = bitcast <2 x i64> %162 to <16 x i8>
  br label %172

172:                                              ; preds = %197, %159
  %173 = phi i16* [ %45, %159 ], [ %199, %197 ]
  %174 = phi i32 [ %37, %159 ], [ %200, %197 ]
  %175 = phi i8* [ %44, %159 ], [ %198, %197 ]
  br label %176

176:                                              ; preds = %176, %172
  %177 = phi i64 [ %195, %176 ], [ 0, %172 ]
  %178 = getelementptr inbounds i8, i8* %175, i64 %177
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1
  %181 = shufflevector <16 x i8> %180, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %182 = shufflevector <16 x i8> %180, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %183 = shufflevector <16 x i8> %181, <16 x i8> %182, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %184 = shufflevector <16 x i8> %181, <16 x i8> %182, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %185 = shufflevector <16 x i8> %181, <16 x i8> %182, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %186 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %183, <16 x i8> %169) #7
  %187 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %184, <16 x i8> %170) #7
  %188 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %185, <16 x i8> %171) #7
  %189 = add <8 x i16> %186, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %190 = add <8 x i16> %189, %187
  %191 = add <8 x i16> %190, %188
  %192 = ashr <8 x i16> %191, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %193 = getelementptr inbounds i16, i16* %173, i64 %177
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %194, align 16
  %195 = add nuw nsw i64 %177, 8
  %196 = icmp slt i64 %195, %46
  br i1 %196, label %176, label %197

197:                                              ; preds = %176
  %198 = getelementptr inbounds i8, i8* %175, i64 %1
  %199 = getelementptr inbounds i16, i16* %173, i64 %46
  %200 = add nsw i32 %174, -1
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %559, label %172

202:                                              ; preds = %32
  %203 = bitcast <2 x i64> %52 to <8 x i16>
  %204 = shufflevector <8 x i16> %203, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = shufflevector <8 x i16> %203, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %206 = bitcast <8 x i16> %204 to <2 x i64>
  %207 = shufflevector <2 x i64> %206, <2 x i64> undef, <2 x i32> zeroinitializer
  %208 = bitcast <8 x i16> %205 to <2 x i64>
  %209 = shufflevector <2 x i64> %208, <2 x i64> undef, <2 x i32> zeroinitializer
  %210 = icmp eq i32 %6, 4
  br i1 %210, label %211, label %236

211:                                              ; preds = %202
  %212 = bitcast <2 x i64> %207 to <16 x i8>
  %213 = bitcast <2 x i64> %209 to <16 x i8>
  br label %214

214:                                              ; preds = %214, %211
  %215 = phi i32 [ %234, %214 ], [ %37, %211 ]
  %216 = phi i16* [ %233, %214 ], [ %45, %211 ]
  %217 = phi i8* [ %232, %214 ], [ %44, %211 ]
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = shufflevector <16 x i8> %219, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %221 = shufflevector <16 x i8> %219, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %222 = shufflevector <16 x i8> %220, <16 x i8> %221, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %223 = shufflevector <16 x i8> %220, <16 x i8> %221, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %224 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %222, <16 x i8> %212) #7
  %225 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %223, <16 x i8> %213) #7
  %226 = add <8 x i16> %224, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %227 = add <8 x i16> %226, %225
  %228 = ashr <8 x i16> %227, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %229 = bitcast <8 x i16> %228 to <2 x i64>
  %230 = extractelement <2 x i64> %229, i32 0
  %231 = bitcast i16* %216 to i64*
  store i64 %230, i64* %231, align 1
  %232 = getelementptr inbounds i8, i8* %217, i64 %1
  %233 = getelementptr inbounds i16, i16* %216, i64 %46
  %234 = add nsw i32 %215, -1
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %559, label %214

236:                                              ; preds = %202
  %237 = add nsw i32 %36, -2
  %238 = shl i64 %1, 1
  %239 = bitcast <2 x i64> %207 to <16 x i8>
  %240 = bitcast <2 x i64> %209 to <16 x i8>
  br label %241

241:                                              ; preds = %241, %236
  %242 = phi i32 [ %237, %236 ], [ %273, %241 ]
  %243 = phi i16* [ %45, %236 ], [ %271, %241 ]
  %244 = phi i8* [ %44, %236 ], [ %272, %241 ]
  %245 = bitcast i8* %244 to i64*
  %246 = load i64, i64* %245, align 1
  %247 = insertelement <2 x i64> undef, i64 %246, i32 0
  %248 = getelementptr inbounds i8, i8* %244, i64 %1
  %249 = bitcast <2 x i64> %247 to <4 x float>
  %250 = bitcast i8* %248 to <2 x float>*
  %251 = load <2 x float>, <2 x float>* %250, align 1
  %252 = shufflevector <2 x float> %251, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %253 = shufflevector <4 x float> %249, <4 x float> %252, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %254 = bitcast <4 x float> %253 to <16 x i8>
  %255 = shufflevector <16 x i8> %254, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %256 = shufflevector <16 x i8> %254, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 16, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 16>
  %257 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %255, <16 x i8> %239) #7
  %258 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %256, <16 x i8> %240) #7
  %259 = add <8 x i16> %257, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %260 = add <8 x i16> %259, %258
  %261 = ashr <8 x i16> %260, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %262 = bitcast <8 x i16> %261 to <4 x i32>
  %263 = extractelement <4 x i32> %262, i32 0
  %264 = bitcast i16* %243 to i32*
  store i32 %263, i32* %264, align 1
  %265 = getelementptr inbounds i16, i16* %243, i64 %46
  %266 = bitcast <8 x i16> %261 to <16 x i8>
  %267 = shufflevector <16 x i8> %266, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %268 = bitcast <16 x i8> %267 to <4 x i32>
  %269 = extractelement <4 x i32> %268, i32 0
  %270 = bitcast i16* %265 to i32*
  store i32 %269, i32* %270, align 1
  %271 = getelementptr inbounds i16, i16* %265, i64 %46
  %272 = getelementptr inbounds i8, i8* %244, i64 %238
  %273 = add nsw i32 %242, -2
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %241

275:                                              ; preds = %241
  %276 = getelementptr inbounds i8, i8* %272, i64 2
  %277 = bitcast i8* %276 to i64*
  %278 = load i64, i64* %277, align 1
  %279 = insertelement <2 x i64> undef, i64 %278, i32 0
  %280 = bitcast <2 x i64> %279 to <16 x i8>
  %281 = shufflevector <16 x i8> %280, <16 x i8> undef, <16 x i32> <i32 undef, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %282 = shufflevector <16 x i8> %281, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %283 = shufflevector <16 x i8> %282, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %284 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %282, <16 x i8> %239) #7
  %285 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %283, <16 x i8> %240) #7
  %286 = add <8 x i16> %284, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %287 = add <8 x i16> %286, %285
  %288 = ashr <8 x i16> %287, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %289 = bitcast <8 x i16> %288 to <4 x i32>
  %290 = extractelement <4 x i32> %289, i32 0
  %291 = bitcast i16* %271 to i32*
  store i32 %290, i32* %291, align 1
  br label %559

292:                                              ; preds = %32
  %293 = bitcast <2 x i64> %52 to <8 x i16>
  %294 = shufflevector <8 x i16> %293, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %295 = shufflevector <8 x i16> %293, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %296 = bitcast <8 x i16> %294 to <2 x i64>
  %297 = shufflevector <2 x i64> %296, <2 x i64> undef, <2 x i32> zeroinitializer
  %298 = bitcast <8 x i16> %295 to <2 x i64>
  %299 = shufflevector <2 x i64> %298, <2 x i64> undef, <2 x i32> zeroinitializer
  %300 = icmp eq i32 %6, 4
  br i1 %300, label %301, label %326

301:                                              ; preds = %292
  %302 = bitcast <2 x i64> %297 to <16 x i8>
  %303 = bitcast <2 x i64> %299 to <16 x i8>
  br label %304

304:                                              ; preds = %304, %301
  %305 = phi i32 [ %324, %304 ], [ %37, %301 ]
  %306 = phi i16* [ %323, %304 ], [ %45, %301 ]
  %307 = phi i8* [ %322, %304 ], [ %44, %301 ]
  %308 = bitcast i8* %307 to <16 x i8>*
  %309 = load <16 x i8>, <16 x i8>* %308, align 1
  %310 = shufflevector <16 x i8> %309, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %311 = shufflevector <16 x i8> %309, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %312 = shufflevector <16 x i8> %310, <16 x i8> %311, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %313 = shufflevector <16 x i8> %310, <16 x i8> %311, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %314 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %312, <16 x i8> %302) #7
  %315 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %313, <16 x i8> %303) #7
  %316 = add <8 x i16> %314, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %317 = add <8 x i16> %316, %315
  %318 = ashr <8 x i16> %317, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %319 = bitcast <8 x i16> %318 to <2 x i64>
  %320 = extractelement <2 x i64> %319, i32 0
  %321 = bitcast i16* %306 to i64*
  store i64 %320, i64* %321, align 1
  %322 = getelementptr inbounds i8, i8* %307, i64 %1
  %323 = getelementptr inbounds i16, i16* %306, i64 %46
  %324 = add nsw i32 %305, -1
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %559, label %304

326:                                              ; preds = %292
  %327 = add nsw i32 %36, -2
  %328 = shl i64 %1, 1
  %329 = bitcast <2 x i64> %297 to <16 x i8>
  %330 = bitcast <2 x i64> %299 to <16 x i8>
  br label %331

331:                                              ; preds = %331, %326
  %332 = phi i32 [ %327, %326 ], [ %363, %331 ]
  %333 = phi i16* [ %45, %326 ], [ %361, %331 ]
  %334 = phi i8* [ %44, %326 ], [ %362, %331 ]
  %335 = bitcast i8* %334 to i64*
  %336 = load i64, i64* %335, align 1
  %337 = insertelement <2 x i64> undef, i64 %336, i32 0
  %338 = getelementptr inbounds i8, i8* %334, i64 %1
  %339 = bitcast <2 x i64> %337 to <4 x float>
  %340 = bitcast i8* %338 to <2 x float>*
  %341 = load <2 x float>, <2 x float>* %340, align 1
  %342 = shufflevector <2 x float> %341, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %343 = shufflevector <4 x float> %339, <4 x float> %342, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %344 = bitcast <4 x float> %343 to <16 x i8>
  %345 = shufflevector <16 x i8> %344, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %346 = shufflevector <16 x i8> %344, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 16, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 16>
  %347 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %345, <16 x i8> %329) #7
  %348 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %346, <16 x i8> %330) #7
  %349 = add <8 x i16> %347, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %350 = add <8 x i16> %349, %348
  %351 = ashr <8 x i16> %350, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %352 = bitcast <8 x i16> %351 to <4 x i32>
  %353 = extractelement <4 x i32> %352, i32 0
  %354 = bitcast i16* %333 to i32*
  store i32 %353, i32* %354, align 1
  %355 = getelementptr inbounds i16, i16* %333, i64 %46
  %356 = bitcast <8 x i16> %351 to <16 x i8>
  %357 = shufflevector <16 x i8> %356, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %358 = bitcast <16 x i8> %357 to <4 x i32>
  %359 = extractelement <4 x i32> %358, i32 0
  %360 = bitcast i16* %355 to i32*
  store i32 %359, i32* %360, align 1
  %361 = getelementptr inbounds i16, i16* %355, i64 %46
  %362 = getelementptr inbounds i8, i8* %334, i64 %328
  %363 = add nsw i32 %332, -2
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %365, label %331

365:                                              ; preds = %331
  %366 = getelementptr inbounds i8, i8* %362, i64 2
  %367 = bitcast i8* %366 to i64*
  %368 = load i64, i64* %367, align 1
  %369 = insertelement <2 x i64> undef, i64 %368, i32 0
  %370 = bitcast <2 x i64> %369 to <16 x i8>
  %371 = shufflevector <16 x i8> %370, <16 x i8> undef, <16 x i32> <i32 undef, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %372 = shufflevector <16 x i8> %371, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %373 = shufflevector <16 x i8> %372, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %374 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %372, <16 x i8> %329) #7
  %375 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %373, <16 x i8> %330) #7
  %376 = add <8 x i16> %374, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %377 = add <8 x i16> %376, %375
  %378 = ashr <8 x i16> %377, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %379 = bitcast <8 x i16> %378 to <4 x i32>
  %380 = extractelement <4 x i32> %379, i32 0
  %381 = bitcast i16* %361 to i32*
  store i32 %380, i32* %381, align 1
  br label %559

382:                                              ; preds = %32
  %383 = bitcast <2 x i64> %52 to <16 x i8>
  %384 = shufflevector <16 x i8> %383, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %385 = bitcast <16 x i8> %384 to <8 x i16>
  %386 = shufflevector <8 x i16> %385, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %387 = bitcast <8 x i16> %386 to <2 x i64>
  %388 = shufflevector <2 x i64> %387, <2 x i64> undef, <2 x i32> zeroinitializer
  %389 = icmp sgt i32 %6, 4
  br i1 %389, label %390, label %451

390:                                              ; preds = %382
  %391 = bitcast <2 x i64> %388 to <16 x i8>
  %392 = add nsw i64 %46, -1
  %393 = lshr i64 %392, 3
  %394 = add nuw nsw i64 %393, 1
  %395 = and i64 %394, 1
  %396 = icmp eq i64 %393, 0
  %397 = sub nuw nsw i64 %394, %395
  %398 = icmp eq i64 %395, 0
  br label %399

399:                                              ; preds = %446, %390
  %400 = phi i32 [ %449, %446 ], [ %37, %390 ]
  %401 = phi i16* [ %448, %446 ], [ %45, %390 ]
  %402 = phi i8* [ %447, %446 ], [ %44, %390 ]
  br i1 %396, label %432, label %403

403:                                              ; preds = %399, %403
  %404 = phi i64 [ %429, %403 ], [ 0, %399 ]
  %405 = phi i64 [ %430, %403 ], [ %397, %399 ]
  %406 = getelementptr inbounds i8, i8* %402, i64 %404
  %407 = bitcast i8* %406 to <16 x i8>*
  %408 = load <16 x i8>, <16 x i8>* %407, align 1
  %409 = shufflevector <16 x i8> %408, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %410 = shufflevector <16 x i8> %408, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %411 = shufflevector <16 x i8> %409, <16 x i8> %410, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %412 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %411, <16 x i8> %391) #7
  %413 = add <8 x i16> %412, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %414 = ashr <8 x i16> %413, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %415 = getelementptr inbounds i16, i16* %401, i64 %404
  %416 = bitcast i16* %415 to <8 x i16>*
  store <8 x i16> %414, <8 x i16>* %416, align 16
  %417 = or i64 %404, 8
  %418 = getelementptr inbounds i8, i8* %402, i64 %417
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1
  %421 = shufflevector <16 x i8> %420, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %422 = shufflevector <16 x i8> %420, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %423 = shufflevector <16 x i8> %421, <16 x i8> %422, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %424 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %423, <16 x i8> %391) #7
  %425 = add <8 x i16> %424, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %426 = ashr <8 x i16> %425, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %427 = getelementptr inbounds i16, i16* %401, i64 %417
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %426, <8 x i16>* %428, align 16
  %429 = add nuw nsw i64 %404, 16
  %430 = add i64 %405, -2
  %431 = icmp eq i64 %430, 0
  br i1 %431, label %432, label %403

432:                                              ; preds = %403, %399
  %433 = phi i64 [ 0, %399 ], [ %429, %403 ]
  br i1 %398, label %446, label %434

434:                                              ; preds = %432
  %435 = getelementptr inbounds i8, i8* %402, i64 %433
  %436 = bitcast i8* %435 to <16 x i8>*
  %437 = load <16 x i8>, <16 x i8>* %436, align 1
  %438 = shufflevector <16 x i8> %437, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %439 = shufflevector <16 x i8> %437, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %440 = shufflevector <16 x i8> %438, <16 x i8> %439, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %441 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %440, <16 x i8> %391) #7
  %442 = add <8 x i16> %441, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %443 = ashr <8 x i16> %442, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %444 = getelementptr inbounds i16, i16* %401, i64 %433
  %445 = bitcast i16* %444 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %445, align 16
  br label %446

446:                                              ; preds = %432, %434
  %447 = getelementptr inbounds i8, i8* %402, i64 %1
  %448 = getelementptr inbounds i16, i16* %401, i64 %46
  %449 = add nsw i32 %400, -1
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %559, label %399

451:                                              ; preds = %382
  %452 = icmp eq i32 %6, 4
  br i1 %452, label %453, label %510

453:                                              ; preds = %451
  %454 = bitcast <2 x i64> %388 to <16 x i8>
  %455 = add i32 %34, %7
  %456 = and i32 %455, 1
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %473

458:                                              ; preds = %453
  %459 = bitcast i8* %44 to <16 x i8>*
  %460 = load <16 x i8>, <16 x i8>* %459, align 1
  %461 = shufflevector <16 x i8> %460, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %462 = shufflevector <16 x i8> %460, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %463 = shufflevector <16 x i8> %461, <16 x i8> %462, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %464 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %463, <16 x i8> %454) #7
  %465 = add <8 x i16> %464, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %466 = ashr <8 x i16> %465, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %467 = bitcast <8 x i16> %466 to <2 x i64>
  %468 = extractelement <2 x i64> %467, i32 0
  %469 = bitcast [17280 x i16]* %11 to i64*
  store i64 %468, i64* %469, align 16
  %470 = getelementptr inbounds i8, i8* %44, i64 %1
  %471 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %46
  %472 = add nsw i32 %36, -2
  br label %473

473:                                              ; preds = %458, %453
  %474 = phi i32 [ %37, %453 ], [ %472, %458 ]
  %475 = phi i16* [ %45, %453 ], [ %471, %458 ]
  %476 = phi i8* [ %44, %453 ], [ %470, %458 ]
  %477 = icmp eq i32 %455, 2
  br i1 %477, label %559, label %478

478:                                              ; preds = %473, %478
  %479 = phi i32 [ %508, %478 ], [ %474, %473 ]
  %480 = phi i16* [ %507, %478 ], [ %475, %473 ]
  %481 = phi i8* [ %506, %478 ], [ %476, %473 ]
  %482 = bitcast i8* %481 to <16 x i8>*
  %483 = load <16 x i8>, <16 x i8>* %482, align 1
  %484 = shufflevector <16 x i8> %483, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %485 = shufflevector <16 x i8> %483, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %486 = shufflevector <16 x i8> %484, <16 x i8> %485, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %487 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %486, <16 x i8> %454) #7
  %488 = add <8 x i16> %487, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %489 = ashr <8 x i16> %488, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %490 = bitcast <8 x i16> %489 to <2 x i64>
  %491 = extractelement <2 x i64> %490, i32 0
  %492 = bitcast i16* %480 to i64*
  store i64 %491, i64* %492, align 1
  %493 = getelementptr inbounds i8, i8* %481, i64 %1
  %494 = getelementptr inbounds i16, i16* %480, i64 %46
  %495 = bitcast i8* %493 to <16 x i8>*
  %496 = load <16 x i8>, <16 x i8>* %495, align 1
  %497 = shufflevector <16 x i8> %496, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %498 = shufflevector <16 x i8> %496, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %499 = shufflevector <16 x i8> %497, <16 x i8> %498, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %500 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %499, <16 x i8> %454) #7
  %501 = add <8 x i16> %500, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %502 = ashr <8 x i16> %501, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %503 = bitcast <8 x i16> %502 to <2 x i64>
  %504 = extractelement <2 x i64> %503, i32 0
  %505 = bitcast i16* %494 to i64*
  store i64 %504, i64* %505, align 1
  %506 = getelementptr inbounds i8, i8* %493, i64 %1
  %507 = getelementptr inbounds i16, i16* %494, i64 %46
  %508 = add nsw i32 %479, -2
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %559, label %478

510:                                              ; preds = %451
  %511 = add nsw i32 %36, -2
  %512 = shl i64 %1, 1
  %513 = bitcast <2 x i64> %388 to <16 x i8>
  br label %514

514:                                              ; preds = %514, %510
  %515 = phi i32 [ %511, %510 ], [ %543, %514 ]
  %516 = phi i16* [ %45, %510 ], [ %541, %514 ]
  %517 = phi i8* [ %44, %510 ], [ %542, %514 ]
  %518 = bitcast i8* %517 to i64*
  %519 = load i64, i64* %518, align 1
  %520 = insertelement <2 x i64> undef, i64 %519, i32 0
  %521 = getelementptr inbounds i8, i8* %517, i64 %1
  %522 = bitcast <2 x i64> %520 to <4 x float>
  %523 = bitcast i8* %521 to <2 x float>*
  %524 = load <2 x float>, <2 x float>* %523, align 1
  %525 = shufflevector <2 x float> %524, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %526 = shufflevector <4 x float> %522, <4 x float> %525, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %527 = bitcast <4 x float> %526 to <16 x i8>
  %528 = shufflevector <16 x i8> %527, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15>
  %529 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %528, <16 x i8> %513) #7
  %530 = add <8 x i16> %529, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %531 = ashr <8 x i16> %530, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %532 = bitcast <8 x i16> %531 to <4 x i32>
  %533 = extractelement <4 x i32> %532, i32 0
  %534 = bitcast i16* %516 to i32*
  store i32 %533, i32* %534, align 1
  %535 = getelementptr inbounds i16, i16* %516, i64 %46
  %536 = bitcast <8 x i16> %531 to <16 x i8>
  %537 = shufflevector <16 x i8> %536, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %538 = bitcast <16 x i8> %537 to <4 x i32>
  %539 = extractelement <4 x i32> %538, i32 0
  %540 = bitcast i16* %535 to i32*
  store i32 %539, i32* %540, align 1
  %541 = getelementptr inbounds i16, i16* %535, i64 %46
  %542 = getelementptr inbounds i8, i8* %517, i64 %512
  %543 = add nsw i32 %515, -2
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %545, label %514

545:                                              ; preds = %514
  %546 = getelementptr inbounds i8, i8* %542, i64 2
  %547 = bitcast i8* %546 to i64*
  %548 = load i64, i64* %547, align 1
  %549 = insertelement <2 x i64> undef, i64 %548, i32 0
  %550 = bitcast <2 x i64> %549 to <16 x i8>
  %551 = shufflevector <16 x i8> %550, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %552 = shufflevector <16 x i8> %551, <16 x i8> <i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %553 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %552, <16 x i8> %513) #7
  %554 = add <8 x i16> %553, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %555 = ashr <8 x i16> %554, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %556 = bitcast <8 x i16> %555 to <4 x i32>
  %557 = extractelement <4 x i32> %556, i32 0
  %558 = bitcast i16* %541 to i32*
  store i32 %557, i32* %558, align 1
  br label %559

559:                                              ; preds = %304, %214, %197, %149, %101, %473, %478, %446, %53, %106, %154, %275, %365, %545
  %560 = sext i32 %33 to i64
  %561 = sext i32 %5 to i64
  %562 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %560, i64 %561, i64 0
  %563 = bitcast i8* %562 to i64*
  %564 = load i64, i64* %563, align 8
  %565 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %564, i32 0
  switch i32 %34, label %1262 [
    i32 8, label %566
    i32 6, label %847
    i32 4, label %1082
  ]

566:                                              ; preds = %559
  %567 = bitcast <2 x i64> %565 to <8 x i16>
  %568 = shufflevector <8 x i16> %567, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %569 = shufflevector <8 x i16> %567, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %570 = shufflevector <8 x i16> %567, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %571 = shufflevector <8 x i16> %567, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %572 = bitcast <8 x i16> %568 to <16 x i8>
  %573 = shufflevector <16 x i8> %572, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %574 = sext <8 x i8> %573 to <8 x i16>
  %575 = bitcast <8 x i16> %569 to <16 x i8>
  %576 = shufflevector <16 x i8> %575, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %577 = sext <8 x i8> %576 to <8 x i16>
  %578 = bitcast <8 x i16> %570 to <16 x i8>
  %579 = shufflevector <16 x i8> %578, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %580 = sext <8 x i8> %579 to <8 x i16>
  %581 = bitcast <8 x i16> %571 to <16 x i8>
  %582 = shufflevector <16 x i8> %581, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %583 = sext <8 x i8> %582 to <8 x i16>
  switch i32 %6, label %764 [
    i32 2, label %584
    i32 4, label %674
  ]

584:                                              ; preds = %566
  %585 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %586 = load <2 x i64>, <2 x i64>* %585, align 16
  %587 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 8
  %588 = bitcast i16* %587 to <2 x i64>*
  %589 = load <2 x i64>, <2 x i64>* %588, align 16
  %590 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 16
  %591 = bitcast <2 x i64> %589 to <16 x i8>
  %592 = bitcast <2 x i64> %586 to <16 x i8>
  %593 = shufflevector <16 x i8> %592, <16 x i8> %591, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %594 = shufflevector <16 x i8> %592, <16 x i8> %591, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %595 = shufflevector <16 x i8> %592, <16 x i8> %591, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  br label %596

596:                                              ; preds = %596, %584
  %597 = phi <2 x i64> [ %589, %584 ], [ %606, %596 ]
  %598 = phi <16 x i8> [ %595, %584 ], [ %612, %596 ]
  %599 = phi <16 x i8> [ %594, %584 ], [ %611, %596 ]
  %600 = phi <16 x i8> [ %593, %584 ], [ %610, %596 ]
  %601 = phi <2 x i64> [ %586, %584 ], [ %597, %596 ]
  %602 = phi i32 [ %7, %584 ], [ %672, %596 ]
  %603 = phi i8* [ %8, %584 ], [ %671, %596 ]
  %604 = phi i16* [ %590, %584 ], [ %607, %596 ]
  %605 = bitcast i16* %604 to <2 x i64>*
  %606 = load <2 x i64>, <2 x i64>* %605, align 16
  %607 = getelementptr inbounds i16, i16* %604, i64 8
  %608 = bitcast <2 x i64> %606 to <16 x i8>
  %609 = bitcast <2 x i64> %597 to <16 x i8>
  %610 = shufflevector <16 x i8> %609, <16 x i8> %608, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %611 = shufflevector <16 x i8> %609, <16 x i8> %608, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %612 = shufflevector <16 x i8> %609, <16 x i8> %608, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %613 = bitcast <2 x i64> %601 to <8 x i16>
  %614 = bitcast <16 x i8> %600 to <8 x i16>
  %615 = shufflevector <8 x i16> %613, <8 x i16> %614, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %616 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %615, <8 x i16> %574) #7
  %617 = shufflevector <8 x i16> %613, <8 x i16> %614, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %618 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %617, <8 x i16> %574) #7
  %619 = bitcast <16 x i8> %599 to <8 x i16>
  %620 = bitcast <16 x i8> %598 to <8 x i16>
  %621 = shufflevector <8 x i16> %619, <8 x i16> %620, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %622 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %621, <8 x i16> %577) #7
  %623 = shufflevector <8 x i16> %619, <8 x i16> %620, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %624 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %623, <8 x i16> %577) #7
  %625 = bitcast <2 x i64> %597 to <8 x i16>
  %626 = bitcast <16 x i8> %610 to <8 x i16>
  %627 = shufflevector <8 x i16> %625, <8 x i16> %626, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %628 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %627, <8 x i16> %580) #7
  %629 = shufflevector <8 x i16> %625, <8 x i16> %626, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %630 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %629, <8 x i16> %580) #7
  %631 = bitcast <16 x i8> %611 to <8 x i16>
  %632 = bitcast <16 x i8> %612 to <8 x i16>
  %633 = shufflevector <8 x i16> %631, <8 x i16> %632, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %634 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %633, <8 x i16> %583) #7
  %635 = shufflevector <8 x i16> %631, <8 x i16> %632, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %636 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %635, <8 x i16> %583) #7
  %637 = add <4 x i32> %616, <i32 512, i32 512, i32 512, i32 512>
  %638 = add <4 x i32> %637, %622
  %639 = add <4 x i32> %638, %628
  %640 = add <4 x i32> %639, %634
  %641 = ashr <4 x i32> %640, <i32 10, i32 10, i32 10, i32 10>
  %642 = add <4 x i32> %618, <i32 512, i32 512, i32 512, i32 512>
  %643 = add <4 x i32> %642, %624
  %644 = add <4 x i32> %643, %630
  %645 = add <4 x i32> %644, %636
  %646 = ashr <4 x i32> %645, <i32 10, i32 10, i32 10, i32 10>
  %647 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %641, <4 x i32> %646) #7
  %648 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %647, <8 x i16> %647) #7
  %649 = bitcast <16 x i8> %648 to <4 x i32>
  %650 = extractelement <4 x i32> %649, i32 0
  %651 = bitcast i8* %603 to i16*
  %652 = trunc i32 %650 to i16
  store i16 %652, i16* %651, align 1
  %653 = getelementptr inbounds i8, i8* %603, i64 %9
  %654 = shufflevector <16 x i8> %648, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %655 = bitcast <16 x i8> %654 to <4 x i32>
  %656 = extractelement <4 x i32> %655, i32 0
  %657 = bitcast i8* %653 to i16*
  %658 = trunc i32 %656 to i16
  store i16 %658, i16* %657, align 1
  %659 = getelementptr inbounds i8, i8* %653, i64 %9
  %660 = shufflevector <16 x i8> %648, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %661 = bitcast <16 x i8> %660 to <4 x i32>
  %662 = extractelement <4 x i32> %661, i32 0
  %663 = bitcast i8* %659 to i16*
  %664 = trunc i32 %662 to i16
  store i16 %664, i16* %663, align 1
  %665 = getelementptr inbounds i8, i8* %659, i64 %9
  %666 = shufflevector <16 x i8> %648, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %667 = bitcast <16 x i8> %666 to <4 x i32>
  %668 = extractelement <4 x i32> %667, i32 0
  %669 = bitcast i8* %665 to i16*
  %670 = trunc i32 %668 to i16
  store i16 %670, i16* %669, align 1
  %671 = getelementptr inbounds i8, i8* %665, i64 %9
  %672 = add nsw i32 %602, -4
  %673 = icmp eq i32 %672, 0
  br i1 %673, label %1396, label %596

674:                                              ; preds = %566
  %675 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %676 = load <2 x i64>, <2 x i64>* %675, align 16
  %677 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 8
  %678 = bitcast i16* %677 to <2 x i64>*
  %679 = load <2 x i64>, <2 x i64>* %678, align 16
  %680 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 16
  %681 = bitcast <2 x i64> %676 to <16 x i8>
  %682 = shufflevector <16 x i8> %681, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %683 = bitcast <16 x i8> %682 to <2 x i64>
  %684 = shufflevector <2 x i64> %683, <2 x i64> %679, <2 x i32> <i32 0, i32 2>
  %685 = bitcast i16* %680 to <2 x i64>*
  %686 = load <2 x i64>, <2 x i64>* %685, align 16
  %687 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 24
  %688 = bitcast <2 x i64> %679 to <16 x i8>
  %689 = shufflevector <16 x i8> %688, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %690 = bitcast <16 x i8> %689 to <2 x i64>
  %691 = shufflevector <2 x i64> %690, <2 x i64> %686, <2 x i32> <i32 0, i32 2>
  %692 = bitcast i16* %687 to <2 x i64>*
  %693 = load <2 x i64>, <2 x i64>* %692, align 16
  %694 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 32
  %695 = bitcast <2 x i64> %686 to <16 x i8>
  %696 = shufflevector <16 x i8> %695, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %697 = bitcast <16 x i8> %696 to <2 x i64>
  %698 = shufflevector <2 x i64> %697, <2 x i64> %693, <2 x i32> <i32 0, i32 2>
  br label %699

699:                                              ; preds = %699, %674
  %700 = phi <2 x i64> [ %693, %674 ], [ %711, %699 ]
  %701 = phi <2 x i64> [ %698, %674 ], [ %716, %699 ]
  %702 = phi <2 x i64> [ %686, %674 ], [ %700, %699 ]
  %703 = phi <2 x i64> [ %691, %674 ], [ %701, %699 ]
  %704 = phi <2 x i64> [ %679, %674 ], [ %702, %699 ]
  %705 = phi <2 x i64> [ %684, %674 ], [ %703, %699 ]
  %706 = phi <2 x i64> [ %676, %674 ], [ %704, %699 ]
  %707 = phi i32 [ %7, %674 ], [ %762, %699 ]
  %708 = phi i8* [ %8, %674 ], [ %761, %699 ]
  %709 = phi i16* [ %694, %674 ], [ %712, %699 ]
  %710 = bitcast i16* %709 to <2 x i64>*
  %711 = load <2 x i64>, <2 x i64>* %710, align 16
  %712 = getelementptr inbounds i16, i16* %709, i64 8
  %713 = bitcast <2 x i64> %700 to <16 x i8>
  %714 = shufflevector <16 x i8> %713, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %715 = bitcast <16 x i8> %714 to <2 x i64>
  %716 = shufflevector <2 x i64> %715, <2 x i64> %711, <2 x i32> <i32 0, i32 2>
  %717 = bitcast <2 x i64> %706 to <8 x i16>
  %718 = bitcast <2 x i64> %705 to <8 x i16>
  %719 = shufflevector <8 x i16> %717, <8 x i16> %718, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %720 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %719, <8 x i16> %574) #7
  %721 = shufflevector <8 x i16> %717, <8 x i16> %718, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %722 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %721, <8 x i16> %574) #7
  %723 = bitcast <2 x i64> %704 to <8 x i16>
  %724 = bitcast <2 x i64> %703 to <8 x i16>
  %725 = shufflevector <8 x i16> %723, <8 x i16> %724, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %726 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %725, <8 x i16> %577) #7
  %727 = shufflevector <8 x i16> %723, <8 x i16> %724, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %728 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %727, <8 x i16> %577) #7
  %729 = bitcast <2 x i64> %702 to <8 x i16>
  %730 = bitcast <2 x i64> %701 to <8 x i16>
  %731 = shufflevector <8 x i16> %729, <8 x i16> %730, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %732 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %731, <8 x i16> %580) #7
  %733 = shufflevector <8 x i16> %729, <8 x i16> %730, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %734 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %733, <8 x i16> %580) #7
  %735 = bitcast <2 x i64> %700 to <8 x i16>
  %736 = bitcast <2 x i64> %716 to <8 x i16>
  %737 = shufflevector <8 x i16> %735, <8 x i16> %736, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %738 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %737, <8 x i16> %583) #7
  %739 = shufflevector <8 x i16> %735, <8 x i16> %736, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %740 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %739, <8 x i16> %583) #7
  %741 = add <4 x i32> %720, <i32 512, i32 512, i32 512, i32 512>
  %742 = add <4 x i32> %741, %726
  %743 = add <4 x i32> %742, %732
  %744 = add <4 x i32> %743, %738
  %745 = ashr <4 x i32> %744, <i32 10, i32 10, i32 10, i32 10>
  %746 = add <4 x i32> %722, <i32 512, i32 512, i32 512, i32 512>
  %747 = add <4 x i32> %746, %728
  %748 = add <4 x i32> %747, %734
  %749 = add <4 x i32> %748, %740
  %750 = ashr <4 x i32> %749, <i32 10, i32 10, i32 10, i32 10>
  %751 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %745, <4 x i32> %750) #7
  %752 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %751, <8 x i16> %751) #7
  %753 = bitcast <16 x i8> %752 to <4 x i32>
  %754 = extractelement <4 x i32> %753, i32 0
  %755 = bitcast i8* %708 to i32*
  store i32 %754, i32* %755, align 1
  %756 = getelementptr inbounds i8, i8* %708, i64 %9
  %757 = shufflevector <16 x i8> %752, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %758 = bitcast <16 x i8> %757 to <4 x i32>
  %759 = extractelement <4 x i32> %758, i32 0
  %760 = bitcast i8* %756 to i32*
  store i32 %759, i32* %760, align 1
  %761 = getelementptr inbounds i8, i8* %756, i64 %9
  %762 = add nsw i32 %707, -2
  %763 = icmp eq i32 %762, 0
  br i1 %763, label %1396, label %699

764:                                              ; preds = %566, %844
  %765 = phi i64 [ %845, %844 ], [ 0, %566 ]
  %766 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %765
  %767 = bitcast i16* %766 to <2 x i64>*
  %768 = load <2 x i64>, <2 x i64>* %767, align 16
  %769 = getelementptr inbounds i16, i16* %766, i64 %46
  %770 = bitcast i16* %769 to <2 x i64>*
  %771 = load <2 x i64>, <2 x i64>* %770, align 16
  %772 = getelementptr inbounds i16, i16* %769, i64 %46
  %773 = bitcast i16* %772 to <2 x i64>*
  %774 = load <2 x i64>, <2 x i64>* %773, align 16
  %775 = getelementptr inbounds i16, i16* %772, i64 %46
  %776 = bitcast i16* %775 to <2 x i64>*
  %777 = load <2 x i64>, <2 x i64>* %776, align 16
  %778 = getelementptr inbounds i16, i16* %775, i64 %46
  %779 = bitcast i16* %778 to <2 x i64>*
  %780 = load <2 x i64>, <2 x i64>* %779, align 16
  %781 = getelementptr inbounds i16, i16* %778, i64 %46
  %782 = bitcast i16* %781 to <2 x i64>*
  %783 = load <2 x i64>, <2 x i64>* %782, align 16
  %784 = getelementptr inbounds i16, i16* %781, i64 %46
  %785 = bitcast i16* %784 to <2 x i64>*
  %786 = load <2 x i64>, <2 x i64>* %785, align 16
  %787 = getelementptr inbounds i8, i8* %8, i64 %765
  br label %788

788:                                              ; preds = %788, %764
  %789 = phi <2 x i64> [ %786, %764 ], [ %801, %788 ]
  %790 = phi <2 x i64> [ %783, %764 ], [ %789, %788 ]
  %791 = phi <2 x i64> [ %780, %764 ], [ %790, %788 ]
  %792 = phi <2 x i64> [ %777, %764 ], [ %791, %788 ]
  %793 = phi <2 x i64> [ %774, %764 ], [ %792, %788 ]
  %794 = phi <2 x i64> [ %771, %764 ], [ %793, %788 ]
  %795 = phi <2 x i64> [ %768, %764 ], [ %794, %788 ]
  %796 = phi i16* [ %784, %764 ], [ %799, %788 ]
  %797 = phi i8* [ %787, %764 ], [ %841, %788 ]
  %798 = phi i32 [ %7, %764 ], [ %842, %788 ]
  %799 = getelementptr inbounds i16, i16* %796, i64 %46
  %800 = bitcast i16* %799 to <2 x i64>*
  %801 = load <2 x i64>, <2 x i64>* %800, align 16
  %802 = bitcast <2 x i64> %795 to <8 x i16>
  %803 = bitcast <2 x i64> %794 to <8 x i16>
  %804 = shufflevector <8 x i16> %802, <8 x i16> %803, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %805 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %804, <8 x i16> %574) #7
  %806 = shufflevector <8 x i16> %802, <8 x i16> %803, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %807 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %806, <8 x i16> %574) #7
  %808 = bitcast <2 x i64> %793 to <8 x i16>
  %809 = bitcast <2 x i64> %792 to <8 x i16>
  %810 = shufflevector <8 x i16> %808, <8 x i16> %809, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %811 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %810, <8 x i16> %577) #7
  %812 = shufflevector <8 x i16> %808, <8 x i16> %809, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %813 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %812, <8 x i16> %577) #7
  %814 = bitcast <2 x i64> %791 to <8 x i16>
  %815 = bitcast <2 x i64> %790 to <8 x i16>
  %816 = shufflevector <8 x i16> %814, <8 x i16> %815, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %817 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %816, <8 x i16> %580) #7
  %818 = shufflevector <8 x i16> %814, <8 x i16> %815, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %819 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %818, <8 x i16> %580) #7
  %820 = bitcast <2 x i64> %789 to <8 x i16>
  %821 = bitcast <2 x i64> %801 to <8 x i16>
  %822 = shufflevector <8 x i16> %820, <8 x i16> %821, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %823 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %822, <8 x i16> %583) #7
  %824 = shufflevector <8 x i16> %820, <8 x i16> %821, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %825 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %824, <8 x i16> %583) #7
  %826 = add <4 x i32> %805, <i32 512, i32 512, i32 512, i32 512>
  %827 = add <4 x i32> %826, %811
  %828 = add <4 x i32> %827, %817
  %829 = add <4 x i32> %828, %823
  %830 = ashr <4 x i32> %829, <i32 10, i32 10, i32 10, i32 10>
  %831 = add <4 x i32> %807, <i32 512, i32 512, i32 512, i32 512>
  %832 = add <4 x i32> %831, %813
  %833 = add <4 x i32> %832, %819
  %834 = add <4 x i32> %833, %825
  %835 = ashr <4 x i32> %834, <i32 10, i32 10, i32 10, i32 10>
  %836 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %830, <4 x i32> %835) #7
  %837 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %836, <8 x i16> undef) #7
  %838 = bitcast <16 x i8> %837 to <2 x i64>
  %839 = extractelement <2 x i64> %838, i32 0
  %840 = bitcast i8* %797 to i64*
  store i64 %839, i64* %840, align 1
  %841 = getelementptr inbounds i8, i8* %797, i64 %9
  %842 = add nsw i32 %798, -1
  %843 = icmp eq i32 %842, 0
  br i1 %843, label %844, label %788

844:                                              ; preds = %788
  %845 = add nuw nsw i64 %765, 8
  %846 = icmp slt i64 %845, %46
  br i1 %846, label %764, label %1396

847:                                              ; preds = %559
  %848 = bitcast <2 x i64> %565 to <16 x i8>
  %849 = shufflevector <16 x i8> %848, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %850 = bitcast <16 x i8> %849 to <8 x i16>
  %851 = shufflevector <8 x i16> %850, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %852 = shufflevector <8 x i16> %850, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %853 = shufflevector <8 x i16> %850, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %854 = bitcast <8 x i16> %851 to <16 x i8>
  %855 = shufflevector <16 x i8> %854, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %856 = sext <8 x i8> %855 to <8 x i16>
  %857 = bitcast <8 x i16> %852 to <16 x i8>
  %858 = shufflevector <16 x i8> %857, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %859 = sext <8 x i8> %858 to <8 x i16>
  %860 = bitcast <8 x i16> %853 to <16 x i8>
  %861 = shufflevector <16 x i8> %860, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %862 = sext <8 x i8> %861 to <8 x i16>
  switch i32 %6, label %1015 [
    i32 2, label %863
    i32 4, label %942
  ]

863:                                              ; preds = %847
  %864 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %865 = load <2 x i64>, <2 x i64>* %864, align 16
  %866 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 8
  %867 = bitcast i16* %866 to <2 x i64>*
  %868 = load <2 x i64>, <2 x i64>* %867, align 16
  %869 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 16
  %870 = bitcast <2 x i64> %868 to <16 x i8>
  %871 = bitcast <2 x i64> %865 to <16 x i8>
  %872 = shufflevector <16 x i8> %871, <16 x i8> %870, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  br label %873

873:                                              ; preds = %873, %863
  %874 = phi <2 x i64> [ %868, %863 ], [ %881, %873 ]
  %875 = phi <16 x i8> [ %872, %863 ], [ %890, %873 ]
  %876 = phi <2 x i64> [ %865, %863 ], [ %874, %873 ]
  %877 = phi i32 [ %7, %863 ], [ %940, %873 ]
  %878 = phi i8* [ %8, %863 ], [ %939, %873 ]
  %879 = phi i16* [ %869, %863 ], [ %882, %873 ]
  %880 = bitcast i16* %879 to <2 x i64>*
  %881 = load <2 x i64>, <2 x i64>* %880, align 16
  %882 = getelementptr inbounds i16, i16* %879, i64 8
  %883 = bitcast <2 x i64> %874 to <16 x i8>
  %884 = bitcast <2 x i64> %876 to <16 x i8>
  %885 = shufflevector <16 x i8> %884, <16 x i8> %883, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %886 = bitcast <16 x i8> %885 to <8 x i16>
  %887 = shufflevector <16 x i8> %884, <16 x i8> %883, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %888 = bitcast <16 x i8> %887 to <8 x i16>
  %889 = bitcast <2 x i64> %881 to <16 x i8>
  %890 = shufflevector <16 x i8> %883, <16 x i8> %889, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %891 = bitcast <2 x i64> %876 to <8 x i16>
  %892 = bitcast <16 x i8> %875 to <8 x i16>
  %893 = shufflevector <8 x i16> %891, <8 x i16> %892, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %894 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %893, <8 x i16> %856) #7
  %895 = shufflevector <8 x i16> %891, <8 x i16> %892, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %896 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %895, <8 x i16> %856) #7
  %897 = shufflevector <8 x i16> %886, <8 x i16> %888, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %898 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %897, <8 x i16> %859) #7
  %899 = shufflevector <8 x i16> %886, <8 x i16> %888, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %900 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %899, <8 x i16> %859) #7
  %901 = bitcast <2 x i64> %874 to <8 x i16>
  %902 = bitcast <16 x i8> %890 to <8 x i16>
  %903 = shufflevector <8 x i16> %901, <8 x i16> %902, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %904 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %903, <8 x i16> %862) #7
  %905 = shufflevector <8 x i16> %901, <8 x i16> %902, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %906 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %905, <8 x i16> %862) #7
  %907 = add <4 x i32> %894, <i32 512, i32 512, i32 512, i32 512>
  %908 = add <4 x i32> %907, %898
  %909 = add <4 x i32> %908, %904
  %910 = ashr <4 x i32> %909, <i32 10, i32 10, i32 10, i32 10>
  %911 = add <4 x i32> %896, <i32 512, i32 512, i32 512, i32 512>
  %912 = add <4 x i32> %911, %900
  %913 = add <4 x i32> %912, %906
  %914 = ashr <4 x i32> %913, <i32 10, i32 10, i32 10, i32 10>
  %915 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %910, <4 x i32> %914) #7
  %916 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %915, <8 x i16> %915) #7
  %917 = bitcast <16 x i8> %916 to <4 x i32>
  %918 = extractelement <4 x i32> %917, i32 0
  %919 = bitcast i8* %878 to i16*
  %920 = trunc i32 %918 to i16
  store i16 %920, i16* %919, align 1
  %921 = getelementptr inbounds i8, i8* %878, i64 %9
  %922 = shufflevector <16 x i8> %916, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %923 = bitcast <16 x i8> %922 to <4 x i32>
  %924 = extractelement <4 x i32> %923, i32 0
  %925 = bitcast i8* %921 to i16*
  %926 = trunc i32 %924 to i16
  store i16 %926, i16* %925, align 1
  %927 = getelementptr inbounds i8, i8* %921, i64 %9
  %928 = shufflevector <16 x i8> %916, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %929 = bitcast <16 x i8> %928 to <4 x i32>
  %930 = extractelement <4 x i32> %929, i32 0
  %931 = bitcast i8* %927 to i16*
  %932 = trunc i32 %930 to i16
  store i16 %932, i16* %931, align 1
  %933 = getelementptr inbounds i8, i8* %927, i64 %9
  %934 = shufflevector <16 x i8> %916, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %935 = bitcast <16 x i8> %934 to <4 x i32>
  %936 = extractelement <4 x i32> %935, i32 0
  %937 = bitcast i8* %933 to i16*
  %938 = trunc i32 %936 to i16
  store i16 %938, i16* %937, align 1
  %939 = getelementptr inbounds i8, i8* %933, i64 %9
  %940 = add nsw i32 %877, -4
  %941 = icmp eq i32 %940, 0
  br i1 %941, label %1396, label %873

942:                                              ; preds = %847
  %943 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %944 = load <2 x i64>, <2 x i64>* %943, align 16
  %945 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 8
  %946 = bitcast i16* %945 to <2 x i64>*
  %947 = load <2 x i64>, <2 x i64>* %946, align 16
  %948 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 16
  %949 = bitcast <2 x i64> %944 to <16 x i8>
  %950 = shufflevector <16 x i8> %949, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %951 = bitcast <16 x i8> %950 to <2 x i64>
  %952 = shufflevector <2 x i64> %951, <2 x i64> %947, <2 x i32> <i32 0, i32 2>
  %953 = bitcast i16* %948 to <2 x i64>*
  %954 = load <2 x i64>, <2 x i64>* %953, align 16
  %955 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 24
  %956 = bitcast <2 x i64> %947 to <16 x i8>
  %957 = shufflevector <16 x i8> %956, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %958 = bitcast <16 x i8> %957 to <2 x i64>
  %959 = shufflevector <2 x i64> %958, <2 x i64> %954, <2 x i32> <i32 0, i32 2>
  br label %960

960:                                              ; preds = %960, %942
  %961 = phi <2 x i64> [ %954, %942 ], [ %970, %960 ]
  %962 = phi <2 x i64> [ %959, %942 ], [ %975, %960 ]
  %963 = phi <2 x i64> [ %947, %942 ], [ %961, %960 ]
  %964 = phi <2 x i64> [ %952, %942 ], [ %962, %960 ]
  %965 = phi <2 x i64> [ %944, %942 ], [ %963, %960 ]
  %966 = phi i32 [ %7, %942 ], [ %1013, %960 ]
  %967 = phi i8* [ %8, %942 ], [ %1012, %960 ]
  %968 = phi i16* [ %955, %942 ], [ %971, %960 ]
  %969 = bitcast i16* %968 to <2 x i64>*
  %970 = load <2 x i64>, <2 x i64>* %969, align 16
  %971 = getelementptr inbounds i16, i16* %968, i64 8
  %972 = bitcast <2 x i64> %961 to <16 x i8>
  %973 = shufflevector <16 x i8> %972, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %974 = bitcast <16 x i8> %973 to <2 x i64>
  %975 = shufflevector <2 x i64> %974, <2 x i64> %970, <2 x i32> <i32 0, i32 2>
  %976 = bitcast <2 x i64> %965 to <8 x i16>
  %977 = bitcast <2 x i64> %964 to <8 x i16>
  %978 = shufflevector <8 x i16> %976, <8 x i16> %977, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %979 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %978, <8 x i16> %856) #7
  %980 = shufflevector <8 x i16> %976, <8 x i16> %977, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %981 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %980, <8 x i16> %856) #7
  %982 = bitcast <2 x i64> %963 to <8 x i16>
  %983 = bitcast <2 x i64> %962 to <8 x i16>
  %984 = shufflevector <8 x i16> %982, <8 x i16> %983, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %985 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %984, <8 x i16> %859) #7
  %986 = shufflevector <8 x i16> %982, <8 x i16> %983, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %987 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %986, <8 x i16> %859) #7
  %988 = bitcast <2 x i64> %961 to <8 x i16>
  %989 = bitcast <2 x i64> %975 to <8 x i16>
  %990 = shufflevector <8 x i16> %988, <8 x i16> %989, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %991 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %990, <8 x i16> %862) #7
  %992 = shufflevector <8 x i16> %988, <8 x i16> %989, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %993 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %992, <8 x i16> %862) #7
  %994 = add <4 x i32> %979, <i32 512, i32 512, i32 512, i32 512>
  %995 = add <4 x i32> %994, %985
  %996 = add <4 x i32> %995, %991
  %997 = ashr <4 x i32> %996, <i32 10, i32 10, i32 10, i32 10>
  %998 = add <4 x i32> %981, <i32 512, i32 512, i32 512, i32 512>
  %999 = add <4 x i32> %998, %987
  %1000 = add <4 x i32> %999, %993
  %1001 = ashr <4 x i32> %1000, <i32 10, i32 10, i32 10, i32 10>
  %1002 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %997, <4 x i32> %1001) #7
  %1003 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1002, <8 x i16> %1002) #7
  %1004 = bitcast <16 x i8> %1003 to <4 x i32>
  %1005 = extractelement <4 x i32> %1004, i32 0
  %1006 = bitcast i8* %967 to i32*
  store i32 %1005, i32* %1006, align 1
  %1007 = getelementptr inbounds i8, i8* %967, i64 %9
  %1008 = shufflevector <16 x i8> %1003, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1009 = bitcast <16 x i8> %1008 to <4 x i32>
  %1010 = extractelement <4 x i32> %1009, i32 0
  %1011 = bitcast i8* %1007 to i32*
  store i32 %1010, i32* %1011, align 1
  %1012 = getelementptr inbounds i8, i8* %1007, i64 %9
  %1013 = add nsw i32 %966, -2
  %1014 = icmp eq i32 %1013, 0
  br i1 %1014, label %1396, label %960

1015:                                             ; preds = %847, %1079
  %1016 = phi i64 [ %1080, %1079 ], [ 0, %847 ]
  %1017 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %1016
  %1018 = bitcast i16* %1017 to <2 x i64>*
  %1019 = load <2 x i64>, <2 x i64>* %1018, align 16
  %1020 = getelementptr inbounds i16, i16* %1017, i64 %46
  %1021 = bitcast i16* %1020 to <2 x i64>*
  %1022 = load <2 x i64>, <2 x i64>* %1021, align 16
  %1023 = getelementptr inbounds i16, i16* %1020, i64 %46
  %1024 = bitcast i16* %1023 to <2 x i64>*
  %1025 = load <2 x i64>, <2 x i64>* %1024, align 16
  %1026 = getelementptr inbounds i16, i16* %1023, i64 %46
  %1027 = bitcast i16* %1026 to <2 x i64>*
  %1028 = load <2 x i64>, <2 x i64>* %1027, align 16
  %1029 = getelementptr inbounds i16, i16* %1026, i64 %46
  %1030 = bitcast i16* %1029 to <2 x i64>*
  %1031 = load <2 x i64>, <2 x i64>* %1030, align 16
  %1032 = getelementptr inbounds i8, i8* %8, i64 %1016
  br label %1033

1033:                                             ; preds = %1033, %1015
  %1034 = phi <2 x i64> [ %1031, %1015 ], [ %1044, %1033 ]
  %1035 = phi <2 x i64> [ %1028, %1015 ], [ %1034, %1033 ]
  %1036 = phi <2 x i64> [ %1025, %1015 ], [ %1035, %1033 ]
  %1037 = phi <2 x i64> [ %1022, %1015 ], [ %1036, %1033 ]
  %1038 = phi <2 x i64> [ %1019, %1015 ], [ %1037, %1033 ]
  %1039 = phi i16* [ %1029, %1015 ], [ %1042, %1033 ]
  %1040 = phi i8* [ %1032, %1015 ], [ %1076, %1033 ]
  %1041 = phi i32 [ %7, %1015 ], [ %1077, %1033 ]
  %1042 = getelementptr inbounds i16, i16* %1039, i64 %46
  %1043 = bitcast i16* %1042 to <2 x i64>*
  %1044 = load <2 x i64>, <2 x i64>* %1043, align 16
  %1045 = bitcast <2 x i64> %1038 to <8 x i16>
  %1046 = bitcast <2 x i64> %1037 to <8 x i16>
  %1047 = shufflevector <8 x i16> %1045, <8 x i16> %1046, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1048 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1047, <8 x i16> %856) #7
  %1049 = shufflevector <8 x i16> %1045, <8 x i16> %1046, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1050 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1049, <8 x i16> %856) #7
  %1051 = bitcast <2 x i64> %1036 to <8 x i16>
  %1052 = bitcast <2 x i64> %1035 to <8 x i16>
  %1053 = shufflevector <8 x i16> %1051, <8 x i16> %1052, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1054 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1053, <8 x i16> %859) #7
  %1055 = shufflevector <8 x i16> %1051, <8 x i16> %1052, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1056 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1055, <8 x i16> %859) #7
  %1057 = bitcast <2 x i64> %1034 to <8 x i16>
  %1058 = bitcast <2 x i64> %1044 to <8 x i16>
  %1059 = shufflevector <8 x i16> %1057, <8 x i16> %1058, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1060 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1059, <8 x i16> %862) #7
  %1061 = shufflevector <8 x i16> %1057, <8 x i16> %1058, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1062 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1061, <8 x i16> %862) #7
  %1063 = add <4 x i32> %1048, <i32 512, i32 512, i32 512, i32 512>
  %1064 = add <4 x i32> %1063, %1054
  %1065 = add <4 x i32> %1064, %1060
  %1066 = ashr <4 x i32> %1065, <i32 10, i32 10, i32 10, i32 10>
  %1067 = add <4 x i32> %1050, <i32 512, i32 512, i32 512, i32 512>
  %1068 = add <4 x i32> %1067, %1056
  %1069 = add <4 x i32> %1068, %1062
  %1070 = ashr <4 x i32> %1069, <i32 10, i32 10, i32 10, i32 10>
  %1071 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1066, <4 x i32> %1070) #7
  %1072 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1071, <8 x i16> undef) #7
  %1073 = bitcast <16 x i8> %1072 to <2 x i64>
  %1074 = extractelement <2 x i64> %1073, i32 0
  %1075 = bitcast i8* %1040 to i64*
  store i64 %1074, i64* %1075, align 1
  %1076 = getelementptr inbounds i8, i8* %1040, i64 %9
  %1077 = add nsw i32 %1041, -1
  %1078 = icmp eq i32 %1077, 0
  br i1 %1078, label %1079, label %1033

1079:                                             ; preds = %1033
  %1080 = add nuw nsw i64 %1016, 8
  %1081 = icmp slt i64 %1080, %46
  br i1 %1081, label %1015, label %1396

1082:                                             ; preds = %559
  %1083 = bitcast <2 x i64> %565 to <8 x i16>
  %1084 = shufflevector <8 x i16> %1083, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %1085 = shufflevector <8 x i16> %1083, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %1086 = bitcast <8 x i16> %1084 to <16 x i8>
  %1087 = shufflevector <16 x i8> %1086, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1088 = sext <8 x i8> %1087 to <8 x i16>
  %1089 = bitcast <8 x i16> %1085 to <16 x i8>
  %1090 = shufflevector <16 x i8> %1089, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1091 = sext <8 x i8> %1090 to <8 x i16>
  switch i32 %6, label %1211 [
    i32 2, label %1092
    i32 4, label %1155
  ]

1092:                                             ; preds = %1082
  %1093 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %1094 = load <2 x i64>, <2 x i64>* %1093, align 16
  %1095 = icmp eq i32 %7, 2
  br label %1096

1096:                                             ; preds = %1139, %1092
  %1097 = phi <2 x i64> [ %1094, %1092 ], [ %1103, %1139 ]
  %1098 = phi i8* [ %8, %1092 ], [ %1152, %1139 ]
  %1099 = phi i32 [ %7, %1092 ], [ %1153, %1139 ]
  %1100 = phi i16* [ %45, %1092 ], [ %1101, %1139 ]
  %1101 = getelementptr inbounds i16, i16* %1100, i64 8
  %1102 = bitcast i16* %1101 to <2 x i64>*
  %1103 = load <2 x i64>, <2 x i64>* %1102, align 16
  %1104 = bitcast <2 x i64> %1103 to <16 x i8>
  %1105 = bitcast <2 x i64> %1097 to <16 x i8>
  %1106 = shufflevector <16 x i8> %1105, <16 x i8> %1104, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %1107 = bitcast <16 x i8> %1106 to <8 x i16>
  %1108 = shufflevector <16 x i8> %1105, <16 x i8> %1104, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1109 = bitcast <16 x i8> %1108 to <8 x i16>
  %1110 = shufflevector <16 x i8> %1105, <16 x i8> %1104, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1111 = bitcast <16 x i8> %1110 to <8 x i16>
  %1112 = bitcast <2 x i64> %1097 to <8 x i16>
  %1113 = shufflevector <8 x i16> %1112, <8 x i16> %1107, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1114 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1113, <8 x i16> %1088) #7
  %1115 = shufflevector <8 x i16> %1112, <8 x i16> %1107, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1115, <8 x i16> %1088) #7
  %1117 = shufflevector <8 x i16> %1109, <8 x i16> %1111, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1117, <8 x i16> %1091) #7
  %1119 = shufflevector <8 x i16> %1109, <8 x i16> %1111, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1119, <8 x i16> %1091) #7
  %1121 = add <4 x i32> %1114, <i32 512, i32 512, i32 512, i32 512>
  %1122 = add <4 x i32> %1121, %1118
  %1123 = ashr <4 x i32> %1122, <i32 10, i32 10, i32 10, i32 10>
  %1124 = add <4 x i32> %1116, <i32 512, i32 512, i32 512, i32 512>
  %1125 = add <4 x i32> %1124, %1120
  %1126 = ashr <4 x i32> %1125, <i32 10, i32 10, i32 10, i32 10>
  %1127 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1123, <4 x i32> %1126) #7
  %1128 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1127, <8 x i16> %1127) #7
  %1129 = bitcast <16 x i8> %1128 to <4 x i32>
  %1130 = extractelement <4 x i32> %1129, i32 0
  %1131 = bitcast i8* %1098 to i16*
  %1132 = trunc i32 %1130 to i16
  store i16 %1132, i16* %1131, align 1
  %1133 = getelementptr inbounds i8, i8* %1098, i64 %9
  %1134 = shufflevector <16 x i8> %1128, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1135 = bitcast <16 x i8> %1134 to <4 x i32>
  %1136 = extractelement <4 x i32> %1135, i32 0
  %1137 = bitcast i8* %1133 to i16*
  %1138 = trunc i32 %1136 to i16
  store i16 %1138, i16* %1137, align 1
  br i1 %1095, label %1396, label %1139

1139:                                             ; preds = %1096
  %1140 = getelementptr inbounds i8, i8* %1133, i64 %9
  %1141 = shufflevector <16 x i8> %1128, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1142 = bitcast <16 x i8> %1141 to <4 x i32>
  %1143 = extractelement <4 x i32> %1142, i32 0
  %1144 = bitcast i8* %1140 to i16*
  %1145 = trunc i32 %1143 to i16
  store i16 %1145, i16* %1144, align 1
  %1146 = getelementptr inbounds i8, i8* %1140, i64 %9
  %1147 = shufflevector <16 x i8> %1128, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1148 = bitcast <16 x i8> %1147 to <4 x i32>
  %1149 = extractelement <4 x i32> %1148, i32 0
  %1150 = bitcast i8* %1146 to i16*
  %1151 = trunc i32 %1149 to i16
  store i16 %1151, i16* %1150, align 1
  %1152 = getelementptr inbounds i8, i8* %1146, i64 %9
  %1153 = add nsw i32 %1099, -4
  %1154 = icmp eq i32 %1153, 0
  br i1 %1154, label %1396, label %1096

1155:                                             ; preds = %1082
  %1156 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %1157 = load <2 x i64>, <2 x i64>* %1156, align 16
  %1158 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 8
  %1159 = bitcast i16* %1158 to <2 x i64>*
  %1160 = load <2 x i64>, <2 x i64>* %1159, align 16
  %1161 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 16
  %1162 = bitcast <2 x i64> %1157 to <16 x i8>
  %1163 = shufflevector <16 x i8> %1162, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1164 = bitcast <16 x i8> %1163 to <2 x i64>
  %1165 = shufflevector <2 x i64> %1164, <2 x i64> %1160, <2 x i32> <i32 0, i32 2>
  br label %1166

1166:                                             ; preds = %1166, %1155
  %1167 = phi <2 x i64> [ %1160, %1155 ], [ %1174, %1166 ]
  %1168 = phi <2 x i64> [ %1165, %1155 ], [ %1179, %1166 ]
  %1169 = phi <2 x i64> [ %1157, %1155 ], [ %1167, %1166 ]
  %1170 = phi i32 [ %7, %1155 ], [ %1209, %1166 ]
  %1171 = phi i8* [ %8, %1155 ], [ %1208, %1166 ]
  %1172 = phi i16* [ %1161, %1155 ], [ %1175, %1166 ]
  %1173 = bitcast i16* %1172 to <2 x i64>*
  %1174 = load <2 x i64>, <2 x i64>* %1173, align 16
  %1175 = getelementptr inbounds i16, i16* %1172, i64 8
  %1176 = bitcast <2 x i64> %1167 to <16 x i8>
  %1177 = shufflevector <16 x i8> %1176, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1178 = bitcast <16 x i8> %1177 to <2 x i64>
  %1179 = shufflevector <2 x i64> %1178, <2 x i64> %1174, <2 x i32> <i32 0, i32 2>
  %1180 = bitcast <2 x i64> %1169 to <8 x i16>
  %1181 = bitcast <2 x i64> %1168 to <8 x i16>
  %1182 = shufflevector <8 x i16> %1180, <8 x i16> %1181, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1183 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1182, <8 x i16> %1088) #7
  %1184 = shufflevector <8 x i16> %1180, <8 x i16> %1181, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1184, <8 x i16> %1088) #7
  %1186 = bitcast <2 x i64> %1167 to <8 x i16>
  %1187 = bitcast <2 x i64> %1179 to <8 x i16>
  %1188 = shufflevector <8 x i16> %1186, <8 x i16> %1187, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1189 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1188, <8 x i16> %1091) #7
  %1190 = shufflevector <8 x i16> %1186, <8 x i16> %1187, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1191 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1190, <8 x i16> %1091) #7
  %1192 = add <4 x i32> %1183, <i32 512, i32 512, i32 512, i32 512>
  %1193 = add <4 x i32> %1192, %1189
  %1194 = ashr <4 x i32> %1193, <i32 10, i32 10, i32 10, i32 10>
  %1195 = add <4 x i32> %1185, <i32 512, i32 512, i32 512, i32 512>
  %1196 = add <4 x i32> %1195, %1191
  %1197 = ashr <4 x i32> %1196, <i32 10, i32 10, i32 10, i32 10>
  %1198 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1194, <4 x i32> %1197) #7
  %1199 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1198, <8 x i16> %1198) #7
  %1200 = bitcast <16 x i8> %1199 to <4 x i32>
  %1201 = extractelement <4 x i32> %1200, i32 0
  %1202 = bitcast i8* %1171 to i32*
  store i32 %1201, i32* %1202, align 1
  %1203 = getelementptr inbounds i8, i8* %1171, i64 %9
  %1204 = shufflevector <16 x i8> %1199, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1205 = bitcast <16 x i8> %1204 to <4 x i32>
  %1206 = extractelement <4 x i32> %1205, i32 0
  %1207 = bitcast i8* %1203 to i32*
  store i32 %1206, i32* %1207, align 1
  %1208 = getelementptr inbounds i8, i8* %1203, i64 %9
  %1209 = add nsw i32 %1170, -2
  %1210 = icmp eq i32 %1209, 0
  br i1 %1210, label %1396, label %1166

1211:                                             ; preds = %1082, %1259
  %1212 = phi i64 [ %1260, %1259 ], [ 0, %1082 ]
  %1213 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %1212
  %1214 = bitcast i16* %1213 to <2 x i64>*
  %1215 = load <2 x i64>, <2 x i64>* %1214, align 16
  %1216 = getelementptr inbounds i16, i16* %1213, i64 %46
  %1217 = bitcast i16* %1216 to <2 x i64>*
  %1218 = load <2 x i64>, <2 x i64>* %1217, align 16
  %1219 = getelementptr inbounds i16, i16* %1216, i64 %46
  %1220 = bitcast i16* %1219 to <2 x i64>*
  %1221 = load <2 x i64>, <2 x i64>* %1220, align 16
  %1222 = getelementptr inbounds i8, i8* %8, i64 %1212
  br label %1223

1223:                                             ; preds = %1223, %1211
  %1224 = phi <2 x i64> [ %1221, %1211 ], [ %1232, %1223 ]
  %1225 = phi <2 x i64> [ %1218, %1211 ], [ %1224, %1223 ]
  %1226 = phi <2 x i64> [ %1215, %1211 ], [ %1225, %1223 ]
  %1227 = phi i16* [ %1219, %1211 ], [ %1230, %1223 ]
  %1228 = phi i8* [ %1222, %1211 ], [ %1256, %1223 ]
  %1229 = phi i32 [ %7, %1211 ], [ %1257, %1223 ]
  %1230 = getelementptr inbounds i16, i16* %1227, i64 %46
  %1231 = bitcast i16* %1230 to <2 x i64>*
  %1232 = load <2 x i64>, <2 x i64>* %1231, align 16
  %1233 = bitcast <2 x i64> %1226 to <8 x i16>
  %1234 = bitcast <2 x i64> %1225 to <8 x i16>
  %1235 = shufflevector <8 x i16> %1233, <8 x i16> %1234, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1236 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1235, <8 x i16> %1088) #7
  %1237 = shufflevector <8 x i16> %1233, <8 x i16> %1234, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1238 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1237, <8 x i16> %1088) #7
  %1239 = bitcast <2 x i64> %1224 to <8 x i16>
  %1240 = bitcast <2 x i64> %1232 to <8 x i16>
  %1241 = shufflevector <8 x i16> %1239, <8 x i16> %1240, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1242 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1241, <8 x i16> %1091) #7
  %1243 = shufflevector <8 x i16> %1239, <8 x i16> %1240, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1244 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1243, <8 x i16> %1091) #7
  %1245 = add <4 x i32> %1236, <i32 512, i32 512, i32 512, i32 512>
  %1246 = add <4 x i32> %1245, %1242
  %1247 = ashr <4 x i32> %1246, <i32 10, i32 10, i32 10, i32 10>
  %1248 = add <4 x i32> %1238, <i32 512, i32 512, i32 512, i32 512>
  %1249 = add <4 x i32> %1248, %1244
  %1250 = ashr <4 x i32> %1249, <i32 10, i32 10, i32 10, i32 10>
  %1251 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1247, <4 x i32> %1250) #7
  %1252 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1251, <8 x i16> undef) #7
  %1253 = bitcast <16 x i8> %1252 to <2 x i64>
  %1254 = extractelement <2 x i64> %1253, i32 0
  %1255 = bitcast i8* %1228 to i64*
  store i64 %1254, i64* %1255, align 1
  %1256 = getelementptr inbounds i8, i8* %1228, i64 %9
  %1257 = add nsw i32 %1229, -1
  %1258 = icmp eq i32 %1257, 0
  br i1 %1258, label %1259, label %1223

1259:                                             ; preds = %1223
  %1260 = add nuw nsw i64 %1212, 8
  %1261 = icmp slt i64 %1260, %46
  br i1 %1261, label %1211, label %1396

1262:                                             ; preds = %559
  %1263 = bitcast <2 x i64> %565 to <16 x i8>
  %1264 = shufflevector <16 x i8> %1263, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1265 = bitcast <16 x i8> %1264 to <8 x i16>
  %1266 = shufflevector <8 x i16> %1265, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %1267 = bitcast <8 x i16> %1266 to <16 x i8>
  %1268 = shufflevector <16 x i8> %1267, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1269 = sext <8 x i8> %1268 to <8 x i16>
  switch i32 %6, label %1361 [
    i32 2, label %1270
    i32 4, label %1323
  ]

1270:                                             ; preds = %1262
  %1271 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %1272 = load <2 x i64>, <2 x i64>* %1271, align 16
  %1273 = icmp eq i32 %7, 2
  br label %1274

1274:                                             ; preds = %1307, %1270
  %1275 = phi <2 x i64> [ %1272, %1270 ], [ %1281, %1307 ]
  %1276 = phi i8* [ %8, %1270 ], [ %1320, %1307 ]
  %1277 = phi i32 [ %7, %1270 ], [ %1321, %1307 ]
  %1278 = phi i16* [ %45, %1270 ], [ %1279, %1307 ]
  %1279 = getelementptr inbounds i16, i16* %1278, i64 8
  %1280 = bitcast i16* %1279 to <2 x i64>*
  %1281 = load <2 x i64>, <2 x i64>* %1280, align 16
  %1282 = bitcast <2 x i64> %1281 to <16 x i8>
  %1283 = bitcast <2 x i64> %1275 to <16 x i8>
  %1284 = shufflevector <16 x i8> %1283, <16 x i8> %1282, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %1285 = bitcast <16 x i8> %1284 to <8 x i16>
  %1286 = bitcast <2 x i64> %1275 to <8 x i16>
  %1287 = shufflevector <8 x i16> %1286, <8 x i16> %1285, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1288 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1287, <8 x i16> %1269) #7
  %1289 = shufflevector <8 x i16> %1286, <8 x i16> %1285, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1290 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1289, <8 x i16> %1269) #7
  %1291 = add <4 x i32> %1288, <i32 512, i32 512, i32 512, i32 512>
  %1292 = ashr <4 x i32> %1291, <i32 10, i32 10, i32 10, i32 10>
  %1293 = add <4 x i32> %1290, <i32 512, i32 512, i32 512, i32 512>
  %1294 = ashr <4 x i32> %1293, <i32 10, i32 10, i32 10, i32 10>
  %1295 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1292, <4 x i32> %1294) #7
  %1296 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1295, <8 x i16> %1295) #7
  %1297 = bitcast <16 x i8> %1296 to <4 x i32>
  %1298 = extractelement <4 x i32> %1297, i32 0
  %1299 = bitcast i8* %1276 to i16*
  %1300 = trunc i32 %1298 to i16
  store i16 %1300, i16* %1299, align 1
  %1301 = getelementptr inbounds i8, i8* %1276, i64 %9
  %1302 = shufflevector <16 x i8> %1296, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1303 = bitcast <16 x i8> %1302 to <4 x i32>
  %1304 = extractelement <4 x i32> %1303, i32 0
  %1305 = bitcast i8* %1301 to i16*
  %1306 = trunc i32 %1304 to i16
  store i16 %1306, i16* %1305, align 1
  br i1 %1273, label %1396, label %1307

1307:                                             ; preds = %1274
  %1308 = getelementptr inbounds i8, i8* %1301, i64 %9
  %1309 = shufflevector <16 x i8> %1296, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1310 = bitcast <16 x i8> %1309 to <4 x i32>
  %1311 = extractelement <4 x i32> %1310, i32 0
  %1312 = bitcast i8* %1308 to i16*
  %1313 = trunc i32 %1311 to i16
  store i16 %1313, i16* %1312, align 1
  %1314 = getelementptr inbounds i8, i8* %1308, i64 %9
  %1315 = shufflevector <16 x i8> %1296, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1316 = bitcast <16 x i8> %1315 to <4 x i32>
  %1317 = extractelement <4 x i32> %1316, i32 0
  %1318 = bitcast i8* %1314 to i16*
  %1319 = trunc i32 %1317 to i16
  store i16 %1319, i16* %1318, align 1
  %1320 = getelementptr inbounds i8, i8* %1314, i64 %9
  %1321 = add nsw i32 %1277, -4
  %1322 = icmp eq i32 %1321, 0
  br i1 %1322, label %1396, label %1274

1323:                                             ; preds = %1262
  %1324 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %1325 = load <2 x i64>, <2 x i64>* %1324, align 16
  br label %1326

1326:                                             ; preds = %1326, %1323
  %1327 = phi <2 x i64> [ %1325, %1323 ], [ %1333, %1326 ]
  %1328 = phi i32 [ %7, %1323 ], [ %1359, %1326 ]
  %1329 = phi i8* [ %8, %1323 ], [ %1358, %1326 ]
  %1330 = phi i16* [ %45, %1323 ], [ %1331, %1326 ]
  %1331 = getelementptr inbounds i16, i16* %1330, i64 8
  %1332 = bitcast i16* %1331 to <2 x i64>*
  %1333 = load <2 x i64>, <2 x i64>* %1332, align 16
  %1334 = bitcast <2 x i64> %1327 to <16 x i8>
  %1335 = shufflevector <16 x i8> %1334, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1336 = bitcast <16 x i8> %1335 to <2 x i64>
  %1337 = shufflevector <2 x i64> %1336, <2 x i64> %1333, <2 x i32> <i32 0, i32 2>
  %1338 = bitcast <2 x i64> %1327 to <8 x i16>
  %1339 = bitcast <2 x i64> %1337 to <8 x i16>
  %1340 = shufflevector <8 x i16> %1338, <8 x i16> %1339, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1341 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1340, <8 x i16> %1269) #7
  %1342 = shufflevector <8 x i16> %1338, <8 x i16> %1339, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1343 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1342, <8 x i16> %1269) #7
  %1344 = add <4 x i32> %1341, <i32 512, i32 512, i32 512, i32 512>
  %1345 = ashr <4 x i32> %1344, <i32 10, i32 10, i32 10, i32 10>
  %1346 = add <4 x i32> %1343, <i32 512, i32 512, i32 512, i32 512>
  %1347 = ashr <4 x i32> %1346, <i32 10, i32 10, i32 10, i32 10>
  %1348 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1345, <4 x i32> %1347) #7
  %1349 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1348, <8 x i16> %1348) #7
  %1350 = bitcast <16 x i8> %1349 to <4 x i32>
  %1351 = extractelement <4 x i32> %1350, i32 0
  %1352 = bitcast i8* %1329 to i32*
  store i32 %1351, i32* %1352, align 1
  %1353 = getelementptr inbounds i8, i8* %1329, i64 %9
  %1354 = shufflevector <16 x i8> %1349, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1355 = bitcast <16 x i8> %1354 to <4 x i32>
  %1356 = extractelement <4 x i32> %1355, i32 0
  %1357 = bitcast i8* %1353 to i32*
  store i32 %1356, i32* %1357, align 1
  %1358 = getelementptr inbounds i8, i8* %1353, i64 %9
  %1359 = add nsw i32 %1328, -2
  %1360 = icmp eq i32 %1359, 0
  br i1 %1360, label %1396, label %1326

1361:                                             ; preds = %1262, %1393
  %1362 = phi i64 [ %1394, %1393 ], [ 0, %1262 ]
  %1363 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %1362
  %1364 = bitcast i16* %1363 to <2 x i64>*
  %1365 = load <2 x i64>, <2 x i64>* %1364, align 16
  %1366 = getelementptr inbounds i8, i8* %8, i64 %1362
  br label %1367

1367:                                             ; preds = %1367, %1361
  %1368 = phi <2 x i64> [ %1365, %1361 ], [ %1374, %1367 ]
  %1369 = phi i16* [ %1363, %1361 ], [ %1372, %1367 ]
  %1370 = phi i8* [ %1366, %1361 ], [ %1390, %1367 ]
  %1371 = phi i32 [ %7, %1361 ], [ %1391, %1367 ]
  %1372 = getelementptr inbounds i16, i16* %1369, i64 %46
  %1373 = bitcast i16* %1372 to <2 x i64>*
  %1374 = load <2 x i64>, <2 x i64>* %1373, align 16
  %1375 = bitcast <2 x i64> %1368 to <8 x i16>
  %1376 = bitcast <2 x i64> %1374 to <8 x i16>
  %1377 = shufflevector <8 x i16> %1375, <8 x i16> %1376, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1378 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1377, <8 x i16> %1269) #7
  %1379 = shufflevector <8 x i16> %1375, <8 x i16> %1376, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1380 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1379, <8 x i16> %1269) #7
  %1381 = add <4 x i32> %1378, <i32 512, i32 512, i32 512, i32 512>
  %1382 = ashr <4 x i32> %1381, <i32 10, i32 10, i32 10, i32 10>
  %1383 = add <4 x i32> %1380, <i32 512, i32 512, i32 512, i32 512>
  %1384 = ashr <4 x i32> %1383, <i32 10, i32 10, i32 10, i32 10>
  %1385 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1382, <4 x i32> %1384) #7
  %1386 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1385, <8 x i16> undef) #7
  %1387 = bitcast <16 x i8> %1386 to <2 x i64>
  %1388 = extractelement <2 x i64> %1387, i32 0
  %1389 = bitcast i8* %1370 to i64*
  store i64 %1388, i64* %1389, align 1
  %1390 = getelementptr inbounds i8, i8* %1370, i64 %9
  %1391 = add nsw i32 %1371, -1
  %1392 = icmp eq i32 %1391, 0
  br i1 %1392, label %1393, label %1367

1393:                                             ; preds = %1367
  %1394 = add nuw nsw i64 %1362, 8
  %1395 = icmp slt i64 %1394, %46
  br i1 %1395, label %1361, label %1396

1396:                                             ; preds = %1166, %1139, %1096, %1259, %960, %873, %1079, %699, %596, %844, %1326, %1307, %1274, %1393
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %35) #7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_125ConvolveCompoundCopy_SSE4EPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #5 {
  %11 = bitcast i8* %8 to i16*
  %12 = icmp sgt i32 %6, 15
  br i1 %12, label %13, label %83

13:                                               ; preds = %10
  %14 = sext i32 %6 to i64
  %15 = add nsw i64 %14, -1
  %16 = lshr i64 %15, 4
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %16, 0
  %20 = sub nuw nsw i64 %17, %18
  %21 = icmp eq i64 %18, 0
  br label %22

22:                                               ; preds = %13, %78
  %23 = phi i32 [ %81, %78 ], [ %7, %13 ]
  %24 = phi i16* [ %80, %78 ], [ %11, %13 ]
  %25 = phi i8* [ %79, %78 ], [ %0, %13 ]
  br i1 %19, label %61, label %26

26:                                               ; preds = %22, %26
  %27 = phi i64 [ %58, %26 ], [ 0, %22 ]
  %28 = phi i64 [ %59, %26 ], [ %20, %22 ]
  %29 = getelementptr inbounds i8, i8* %25, i64 %27
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = shufflevector <16 x i8> %31, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %33 = zext <8 x i8> %32 to <8 x i16>
  %34 = shufflevector <16 x i8> %31, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35 = zext <8 x i8> %34 to <8 x i16>
  %36 = shl nuw nsw <8 x i16> %33, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %37 = shl nuw nsw <8 x i16> %35, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %38 = getelementptr inbounds i16, i16* %24, i64 %27
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %39, align 1
  %40 = or i64 %27, 8
  %41 = getelementptr inbounds i16, i16* %24, i64 %40
  %42 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %42, align 1
  %43 = or i64 %27, 16
  %44 = getelementptr inbounds i8, i8* %25, i64 %43
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = shufflevector <16 x i8> %46, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %48 = zext <8 x i8> %47 to <8 x i16>
  %49 = shufflevector <16 x i8> %46, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %50 = zext <8 x i8> %49 to <8 x i16>
  %51 = shl nuw nsw <8 x i16> %48, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %52 = shl nuw nsw <8 x i16> %50, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %53 = getelementptr inbounds i16, i16* %24, i64 %43
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %54, align 1
  %55 = or i64 %27, 24
  %56 = getelementptr inbounds i16, i16* %24, i64 %55
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %57, align 1
  %58 = add nuw nsw i64 %27, 32
  %59 = add i64 %28, -2
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %26

61:                                               ; preds = %26, %22
  %62 = phi i64 [ 0, %22 ], [ %58, %26 ]
  br i1 %21, label %78, label %63

63:                                               ; preds = %61
  %64 = getelementptr inbounds i8, i8* %25, i64 %62
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %68 = zext <8 x i8> %67 to <8 x i16>
  %69 = shufflevector <16 x i8> %66, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %70 = zext <8 x i8> %69 to <8 x i16>
  %71 = shl nuw nsw <8 x i16> %68, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %72 = shl nuw nsw <8 x i16> %70, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %73 = getelementptr inbounds i16, i16* %24, i64 %62
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %74, align 1
  %75 = or i64 %62, 8
  %76 = getelementptr inbounds i16, i16* %24, i64 %75
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %77, align 1
  br label %78

78:                                               ; preds = %61, %63
  %79 = getelementptr inbounds i8, i8* %25, i64 %1
  %80 = getelementptr inbounds i16, i16* %24, i64 %9
  %81 = add nsw i32 %23, -1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %160, label %22

83:                                               ; preds = %10
  %84 = icmp eq i32 %6, 8
  br i1 %84, label %85, label %105

85:                                               ; preds = %83
  %86 = and i32 %7, 1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %100, label %88

88:                                               ; preds = %85
  %89 = bitcast i8* %0 to i64*
  %90 = load i64, i64* %89, align 1
  %91 = insertelement <2 x i64> undef, i64 %90, i32 0
  %92 = bitcast <2 x i64> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %94 = zext <8 x i8> %93 to <8 x i16>
  %95 = shl nuw nsw <8 x i16> %94, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %96 = bitcast i8* %8 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %96, align 1
  %97 = getelementptr inbounds i8, i8* %0, i64 %1
  %98 = getelementptr inbounds i16, i16* %11, i64 %9
  %99 = add nsw i32 %7, -1
  br label %100

100:                                              ; preds = %85, %88
  %101 = phi i32 [ %7, %85 ], [ %99, %88 ]
  %102 = phi i16* [ %11, %85 ], [ %98, %88 ]
  %103 = phi i8* [ %0, %85 ], [ %97, %88 ]
  %104 = icmp eq i32 %7, 1
  br i1 %104, label %160, label %108

105:                                              ; preds = %83
  %106 = shl nsw i64 %1, 1
  %107 = shl nsw i64 %9, 1
  br label %134

108:                                              ; preds = %100, %108
  %109 = phi i32 [ %132, %108 ], [ %101, %100 ]
  %110 = phi i16* [ %131, %108 ], [ %102, %100 ]
  %111 = phi i8* [ %130, %108 ], [ %103, %100 ]
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %117 = zext <8 x i8> %116 to <8 x i16>
  %118 = shl nuw nsw <8 x i16> %117, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %119 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %119, align 1
  %120 = getelementptr inbounds i8, i8* %111, i64 %1
  %121 = getelementptr inbounds i16, i16* %110, i64 %9
  %122 = bitcast i8* %120 to i64*
  %123 = load i64, i64* %122, align 1
  %124 = insertelement <2 x i64> undef, i64 %123, i32 0
  %125 = bitcast <2 x i64> %124 to <16 x i8>
  %126 = shufflevector <16 x i8> %125, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %127 = zext <8 x i8> %126 to <8 x i16>
  %128 = shl nuw nsw <8 x i16> %127, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %129 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 1
  %130 = getelementptr inbounds i8, i8* %120, i64 %1
  %131 = getelementptr inbounds i16, i16* %121, i64 %9
  %132 = add nsw i32 %109, -2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %160, label %108

134:                                              ; preds = %105, %134
  %135 = phi i32 [ %158, %134 ], [ %7, %105 ]
  %136 = phi i16* [ %157, %134 ], [ %11, %105 ]
  %137 = phi i8* [ %156, %134 ], [ %0, %105 ]
  %138 = bitcast i8* %137 to i32*
  %139 = load i32, i32* %138, align 1
  %140 = insertelement <4 x i32> undef, i32 %139, i32 0
  %141 = getelementptr inbounds i8, i8* %137, i64 %1
  %142 = bitcast i8* %141 to i32*
  %143 = load i32, i32* %142, align 1
  %144 = insertelement <4 x i32> %140, i32 %143, i32 1
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %147 = zext <8 x i8> %146 to <8 x i16>
  %148 = shl nuw nsw <8 x i16> %147, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = extractelement <2 x i64> %149, i32 0
  %151 = bitcast i16* %136 to i64*
  store i64 %150, i64* %151, align 1
  %152 = getelementptr inbounds i16, i16* %136, i64 %9
  %153 = bitcast <8 x i16> %148 to <4 x float>
  %154 = shufflevector <4 x float> %153, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %155 = bitcast i16* %152 to <2 x float>*
  store <2 x float> %154, <2 x float>* %155, align 1
  %156 = getelementptr inbounds i8, i8* %137, i64 %106
  %157 = getelementptr inbounds i16, i16* %136, i64 %107
  %158 = add nsw i32 %135, -2
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %134

160:                                              ; preds = %134, %100, %108, %78
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_133ConvolveCompoundHorizontal_SSE4_1EPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  %11 = icmp slt i32 %6, 5
  br i1 %11, label %12, label %33

12:                                               ; preds = %10
  %13 = and i32 %2, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = getelementptr inbounds i8, i8* %0, i64 -3
  %17 = sext i32 %6 to i64
  %18 = sext i32 %4 to i64
  %19 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 4, i64 %18, i64 0
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %21, i32 0
  br label %194

23:                                               ; preds = %12
  %24 = icmp eq i32 %2, 1
  br i1 %24, label %25, label %33

25:                                               ; preds = %23
  %26 = getelementptr inbounds i8, i8* %0, i64 -3
  %27 = sext i32 %6 to i64
  %28 = sext i32 %4 to i64
  %29 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 5, i64 %28, i64 0
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %31, i32 0
  br label %232

33:                                               ; preds = %10, %23
  %34 = getelementptr inbounds i8, i8* %0, i64 -3
  %35 = sext i32 %6 to i64
  %36 = sext i32 %2 to i64
  %37 = sext i32 %4 to i64
  %38 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %36, i64 %37, i64 0
  %39 = bitcast i8* %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %40, i32 0
  switch i32 %2, label %270 [
    i32 2, label %42
    i32 1, label %96
    i32 0, label %145
    i32 4, label %194
    i32 5, label %232
  ]

42:                                               ; preds = %33
  %43 = bitcast <2 x i64> %41 to <8 x i16>
  %44 = icmp sgt i32 %6, 4
  br i1 %44, label %45, label %398

45:                                               ; preds = %42
  %46 = shufflevector <8 x i16> %43, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = bitcast <8 x i16> %46 to <2 x i64>
  %48 = shufflevector <2 x i64> %47, <2 x i64> undef, <2 x i32> zeroinitializer
  %49 = shufflevector <8 x i16> %43, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <8 x i16> %49 to <2 x i64>
  %51 = shufflevector <2 x i64> %50, <2 x i64> undef, <2 x i32> zeroinitializer
  %52 = shufflevector <8 x i16> %43, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  %54 = shufflevector <2 x i64> %53, <2 x i64> undef, <2 x i32> zeroinitializer
  %55 = shufflevector <8 x i16> %43, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = bitcast <8 x i16> %55 to <2 x i64>
  %57 = shufflevector <2 x i64> %56, <2 x i64> undef, <2 x i32> zeroinitializer
  %58 = bitcast i8* %8 to i16*
  %59 = bitcast <2 x i64> %57 to <16 x i8>
  %60 = bitcast <2 x i64> %54 to <16 x i8>
  %61 = bitcast <2 x i64> %51 to <16 x i8>
  %62 = bitcast <2 x i64> %48 to <16 x i8>
  br label %63

63:                                               ; preds = %91, %45
  %64 = phi i16* [ %58, %45 ], [ %93, %91 ]
  %65 = phi i32 [ %7, %45 ], [ %94, %91 ]
  %66 = phi i8* [ %34, %45 ], [ %92, %91 ]
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i64 [ %89, %67 ], [ 0, %63 ]
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = bitcast i8* %69 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %73 = shufflevector <16 x i8> %71, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %74 = shufflevector <16 x i8> %72, <16 x i8> %73, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %75 = shufflevector <16 x i8> %72, <16 x i8> %73, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %76 = shufflevector <16 x i8> %72, <16 x i8> %73, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %77 = shufflevector <16 x i8> %72, <16 x i8> %73, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %78 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %74, <16 x i8> %59) #7
  %79 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %60) #7
  %80 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %76, <16 x i8> %61) #7
  %81 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %77, <16 x i8> %62) #7
  %82 = add <8 x i16> %78, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %83 = add <8 x i16> %82, %79
  %84 = add <8 x i16> %83, %80
  %85 = add <8 x i16> %84, %81
  %86 = ashr <8 x i16> %85, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %87 = getelementptr inbounds i16, i16* %64, i64 %68
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %88, align 1
  %89 = add nuw nsw i64 %68, 8
  %90 = icmp slt i64 %89, %35
  br i1 %90, label %67, label %91

91:                                               ; preds = %67
  %92 = getelementptr inbounds i8, i8* %66, i64 %1
  %93 = getelementptr inbounds i16, i16* %64, i64 %35
  %94 = add nsw i32 %65, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %398, label %63

96:                                               ; preds = %33
  %97 = bitcast <2 x i64> %41 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %99 = bitcast <16 x i8> %98 to <8 x i16>
  %100 = icmp sgt i32 %6, 4
  br i1 %100, label %101, label %398

101:                                              ; preds = %96
  %102 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = bitcast <8 x i16> %102 to <2 x i64>
  %104 = shufflevector <2 x i64> %103, <2 x i64> undef, <2 x i32> zeroinitializer
  %105 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  %107 = shufflevector <2 x i64> %106, <2 x i64> undef, <2 x i32> zeroinitializer
  %108 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = bitcast <8 x i16> %108 to <2 x i64>
  %110 = shufflevector <2 x i64> %109, <2 x i64> undef, <2 x i32> zeroinitializer
  %111 = bitcast i8* %8 to i16*
  %112 = bitcast <2 x i64> %110 to <16 x i8>
  %113 = bitcast <2 x i64> %107 to <16 x i8>
  %114 = bitcast <2 x i64> %104 to <16 x i8>
  br label %115

115:                                              ; preds = %140, %101
  %116 = phi i16* [ %111, %101 ], [ %142, %140 ]
  %117 = phi i32 [ %7, %101 ], [ %143, %140 ]
  %118 = phi i8* [ %34, %101 ], [ %141, %140 ]
  br label %119

119:                                              ; preds = %119, %115
  %120 = phi i64 [ %138, %119 ], [ 0, %115 ]
  %121 = getelementptr inbounds i8, i8* %118, i64 %120
  %122 = bitcast i8* %121 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 1
  %124 = shufflevector <16 x i8> %123, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %125 = shufflevector <16 x i8> %123, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %126 = shufflevector <16 x i8> %124, <16 x i8> %125, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %127 = shufflevector <16 x i8> %124, <16 x i8> %125, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %128 = shufflevector <16 x i8> %124, <16 x i8> %125, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %129 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %126, <16 x i8> %112) #7
  %130 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %127, <16 x i8> %113) #7
  %131 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %128, <16 x i8> %114) #7
  %132 = add <8 x i16> %129, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %133 = add <8 x i16> %132, %130
  %134 = add <8 x i16> %133, %131
  %135 = ashr <8 x i16> %134, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %136 = getelementptr inbounds i16, i16* %116, i64 %120
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %137, align 1
  %138 = add nuw nsw i64 %120, 8
  %139 = icmp slt i64 %138, %35
  br i1 %139, label %119, label %140

140:                                              ; preds = %119
  %141 = getelementptr inbounds i8, i8* %118, i64 %1
  %142 = getelementptr inbounds i16, i16* %116, i64 %35
  %143 = add nsw i32 %117, -1
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %398, label %115

145:                                              ; preds = %33
  %146 = bitcast <2 x i64> %41 to <16 x i8>
  %147 = shufflevector <16 x i8> %146, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %148 = bitcast <16 x i8> %147 to <8 x i16>
  %149 = icmp sgt i32 %6, 4
  br i1 %149, label %150, label %398

150:                                              ; preds = %145
  %151 = shufflevector <8 x i16> %148, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = bitcast <8 x i16> %151 to <2 x i64>
  %153 = shufflevector <2 x i64> %152, <2 x i64> undef, <2 x i32> zeroinitializer
  %154 = shufflevector <8 x i16> %148, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = bitcast <8 x i16> %154 to <2 x i64>
  %156 = shufflevector <2 x i64> %155, <2 x i64> undef, <2 x i32> zeroinitializer
  %157 = shufflevector <8 x i16> %148, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = bitcast <8 x i16> %157 to <2 x i64>
  %159 = shufflevector <2 x i64> %158, <2 x i64> undef, <2 x i32> zeroinitializer
  %160 = bitcast i8* %8 to i16*
  %161 = bitcast <2 x i64> %159 to <16 x i8>
  %162 = bitcast <2 x i64> %156 to <16 x i8>
  %163 = bitcast <2 x i64> %153 to <16 x i8>
  br label %164

164:                                              ; preds = %189, %150
  %165 = phi i16* [ %160, %150 ], [ %191, %189 ]
  %166 = phi i32 [ %7, %150 ], [ %192, %189 ]
  %167 = phi i8* [ %34, %150 ], [ %190, %189 ]
  br label %168

168:                                              ; preds = %168, %164
  %169 = phi i64 [ %187, %168 ], [ 0, %164 ]
  %170 = getelementptr inbounds i8, i8* %167, i64 %169
  %171 = bitcast i8* %170 to <16 x i8>*
  %172 = load <16 x i8>, <16 x i8>* %171, align 1
  %173 = shufflevector <16 x i8> %172, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %174 = shufflevector <16 x i8> %172, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %175 = shufflevector <16 x i8> %173, <16 x i8> %174, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %176 = shufflevector <16 x i8> %173, <16 x i8> %174, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %177 = shufflevector <16 x i8> %173, <16 x i8> %174, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %178 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %175, <16 x i8> %161) #7
  %179 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %176, <16 x i8> %162) #7
  %180 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %177, <16 x i8> %163) #7
  %181 = add <8 x i16> %178, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %182 = add <8 x i16> %181, %179
  %183 = add <8 x i16> %182, %180
  %184 = ashr <8 x i16> %183, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %185 = getelementptr inbounds i16, i16* %165, i64 %169
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %186, align 1
  %187 = add nuw nsw i64 %169, 8
  %188 = icmp slt i64 %187, %35
  br i1 %188, label %168, label %189

189:                                              ; preds = %168
  %190 = getelementptr inbounds i8, i8* %167, i64 %1
  %191 = getelementptr inbounds i16, i16* %165, i64 %35
  %192 = add nsw i32 %166, -1
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %398, label %164

194:                                              ; preds = %15, %33
  %195 = phi <2 x i64> [ %22, %15 ], [ %41, %33 ]
  %196 = phi i64 [ %17, %15 ], [ %35, %33 ]
  %197 = phi i8* [ %16, %15 ], [ %34, %33 ]
  %198 = bitcast <2 x i64> %195 to <8 x i16>
  %199 = icmp eq i32 %6, 4
  br i1 %199, label %200, label %398

200:                                              ; preds = %194
  %201 = shufflevector <8 x i16> %198, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %202 = bitcast <8 x i16> %201 to <2 x i64>
  %203 = shufflevector <2 x i64> %202, <2 x i64> undef, <2 x i32> zeroinitializer
  %204 = shufflevector <8 x i16> %198, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = bitcast <8 x i16> %204 to <2 x i64>
  %206 = shufflevector <2 x i64> %205, <2 x i64> undef, <2 x i32> zeroinitializer
  %207 = bitcast i8* %8 to i16*
  %208 = bitcast <2 x i64> %206 to <16 x i8>
  %209 = bitcast <2 x i64> %203 to <16 x i8>
  br label %210

210:                                              ; preds = %210, %200
  %211 = phi i16* [ %207, %200 ], [ %229, %210 ]
  %212 = phi i32 [ %7, %200 ], [ %230, %210 ]
  %213 = phi i8* [ %197, %200 ], [ %228, %210 ]
  %214 = bitcast i8* %213 to <16 x i8>*
  %215 = load <16 x i8>, <16 x i8>* %214, align 1
  %216 = shufflevector <16 x i8> %215, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %217 = shufflevector <16 x i8> %215, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %218 = shufflevector <16 x i8> %216, <16 x i8> %217, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %219 = shufflevector <16 x i8> %216, <16 x i8> %217, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %220 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %218, <16 x i8> %208) #7
  %221 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %219, <16 x i8> %209) #7
  %222 = add <8 x i16> %220, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %223 = add <8 x i16> %222, %221
  %224 = ashr <8 x i16> %223, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %225 = bitcast <8 x i16> %224 to <2 x i64>
  %226 = extractelement <2 x i64> %225, i32 0
  %227 = bitcast i16* %211 to i64*
  store i64 %226, i64* %227, align 1
  %228 = getelementptr inbounds i8, i8* %213, i64 %1
  %229 = getelementptr inbounds i16, i16* %211, i64 %196
  %230 = add nsw i32 %212, -1
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %398, label %210

232:                                              ; preds = %25, %33
  %233 = phi <2 x i64> [ %32, %25 ], [ %41, %33 ]
  %234 = phi i64 [ %27, %25 ], [ %35, %33 ]
  %235 = phi i8* [ %26, %25 ], [ %34, %33 ]
  %236 = bitcast <2 x i64> %233 to <8 x i16>
  %237 = icmp eq i32 %6, 4
  br i1 %237, label %238, label %398

238:                                              ; preds = %232
  %239 = shufflevector <8 x i16> %236, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %240 = bitcast <8 x i16> %239 to <2 x i64>
  %241 = shufflevector <2 x i64> %240, <2 x i64> undef, <2 x i32> zeroinitializer
  %242 = shufflevector <8 x i16> %236, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %243 = bitcast <8 x i16> %242 to <2 x i64>
  %244 = shufflevector <2 x i64> %243, <2 x i64> undef, <2 x i32> zeroinitializer
  %245 = bitcast i8* %8 to i16*
  %246 = bitcast <2 x i64> %244 to <16 x i8>
  %247 = bitcast <2 x i64> %241 to <16 x i8>
  br label %248

248:                                              ; preds = %248, %238
  %249 = phi i16* [ %245, %238 ], [ %267, %248 ]
  %250 = phi i32 [ %7, %238 ], [ %268, %248 ]
  %251 = phi i8* [ %235, %238 ], [ %266, %248 ]
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1
  %254 = shufflevector <16 x i8> %253, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %255 = shufflevector <16 x i8> %253, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %256 = shufflevector <16 x i8> %254, <16 x i8> %255, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %257 = shufflevector <16 x i8> %254, <16 x i8> %255, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %258 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %256, <16 x i8> %246) #7
  %259 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %257, <16 x i8> %247) #7
  %260 = add <8 x i16> %258, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %261 = add <8 x i16> %260, %259
  %262 = ashr <8 x i16> %261, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %263 = bitcast <8 x i16> %262 to <2 x i64>
  %264 = extractelement <2 x i64> %263, i32 0
  %265 = bitcast i16* %249 to i64*
  store i64 %264, i64* %265, align 1
  %266 = getelementptr inbounds i8, i8* %251, i64 %1
  %267 = getelementptr inbounds i16, i16* %249, i64 %234
  %268 = add nsw i32 %250, -1
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %398, label %248

270:                                              ; preds = %33
  %271 = bitcast <2 x i64> %41 to <16 x i8>
  %272 = shufflevector <16 x i8> %271, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %273 = bitcast <16 x i8> %272 to <8 x i16>
  %274 = shufflevector <8 x i16> %273, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %275 = bitcast <8 x i16> %274 to <2 x i64>
  %276 = shufflevector <2 x i64> %275, <2 x i64> undef, <2 x i32> zeroinitializer
  %277 = bitcast i8* %8 to i16*
  %278 = icmp sgt i32 %6, 4
  br i1 %278, label %279, label %340

279:                                              ; preds = %270
  %280 = bitcast <2 x i64> %276 to <16 x i8>
  %281 = add nsw i64 %35, -1
  %282 = lshr i64 %281, 3
  %283 = add nuw nsw i64 %282, 1
  %284 = and i64 %283, 1
  %285 = icmp eq i64 %282, 0
  %286 = sub nuw nsw i64 %283, %284
  %287 = icmp eq i64 %284, 0
  br label %288

288:                                              ; preds = %335, %279
  %289 = phi i16* [ %337, %335 ], [ %277, %279 ]
  %290 = phi i32 [ %338, %335 ], [ %7, %279 ]
  %291 = phi i8* [ %336, %335 ], [ %34, %279 ]
  br i1 %285, label %321, label %292

292:                                              ; preds = %288, %292
  %293 = phi i64 [ %318, %292 ], [ 0, %288 ]
  %294 = phi i64 [ %319, %292 ], [ %286, %288 ]
  %295 = getelementptr inbounds i8, i8* %291, i64 %293
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1
  %298 = shufflevector <16 x i8> %297, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %299 = shufflevector <16 x i8> %297, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %300 = shufflevector <16 x i8> %298, <16 x i8> %299, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %301 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %300, <16 x i8> %280) #7
  %302 = add <8 x i16> %301, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %303 = ashr <8 x i16> %302, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %304 = getelementptr inbounds i16, i16* %289, i64 %293
  %305 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> %303, <8 x i16>* %305, align 1
  %306 = or i64 %293, 8
  %307 = getelementptr inbounds i8, i8* %291, i64 %306
  %308 = bitcast i8* %307 to <16 x i8>*
  %309 = load <16 x i8>, <16 x i8>* %308, align 1
  %310 = shufflevector <16 x i8> %309, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %311 = shufflevector <16 x i8> %309, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %312 = shufflevector <16 x i8> %310, <16 x i8> %311, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %313 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %312, <16 x i8> %280) #7
  %314 = add <8 x i16> %313, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %315 = ashr <8 x i16> %314, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %316 = getelementptr inbounds i16, i16* %289, i64 %306
  %317 = bitcast i16* %316 to <8 x i16>*
  store <8 x i16> %315, <8 x i16>* %317, align 1
  %318 = add nuw nsw i64 %293, 16
  %319 = add i64 %294, -2
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %292

321:                                              ; preds = %292, %288
  %322 = phi i64 [ 0, %288 ], [ %318, %292 ]
  br i1 %287, label %335, label %323

323:                                              ; preds = %321
  %324 = getelementptr inbounds i8, i8* %291, i64 %322
  %325 = bitcast i8* %324 to <16 x i8>*
  %326 = load <16 x i8>, <16 x i8>* %325, align 1
  %327 = shufflevector <16 x i8> %326, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %328 = shufflevector <16 x i8> %326, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %329 = shufflevector <16 x i8> %327, <16 x i8> %328, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %330 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %329, <16 x i8> %280) #7
  %331 = add <8 x i16> %330, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %332 = ashr <8 x i16> %331, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %333 = getelementptr inbounds i16, i16* %289, i64 %322
  %334 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %334, align 1
  br label %335

335:                                              ; preds = %321, %323
  %336 = getelementptr inbounds i8, i8* %291, i64 %1
  %337 = getelementptr inbounds i16, i16* %289, i64 %35
  %338 = add nsw i32 %290, -1
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %398, label %288

340:                                              ; preds = %270
  %341 = icmp eq i32 %6, 4
  br i1 %341, label %342, label %398

342:                                              ; preds = %340
  %343 = bitcast <2 x i64> %276 to <16 x i8>
  %344 = and i32 %7, 1
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %361, label %346

346:                                              ; preds = %342
  %347 = bitcast i8* %34 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1
  %349 = shufflevector <16 x i8> %348, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %350 = shufflevector <16 x i8> %348, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %351 = shufflevector <16 x i8> %349, <16 x i8> %350, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %352 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %351, <16 x i8> %343) #7
  %353 = add <8 x i16> %352, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %354 = ashr <8 x i16> %353, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %355 = bitcast <8 x i16> %354 to <2 x i64>
  %356 = extractelement <2 x i64> %355, i32 0
  %357 = bitcast i8* %8 to i64*
  store i64 %356, i64* %357, align 1
  %358 = getelementptr inbounds i8, i8* %34, i64 %1
  %359 = getelementptr inbounds i16, i16* %277, i64 %35
  %360 = add nsw i32 %7, -1
  br label %361

361:                                              ; preds = %342, %346
  %362 = phi i16* [ %277, %342 ], [ %359, %346 ]
  %363 = phi i32 [ %7, %342 ], [ %360, %346 ]
  %364 = phi i8* [ %34, %342 ], [ %358, %346 ]
  %365 = icmp eq i32 %7, 1
  br i1 %365, label %398, label %366

366:                                              ; preds = %361, %366
  %367 = phi i16* [ %395, %366 ], [ %362, %361 ]
  %368 = phi i32 [ %396, %366 ], [ %363, %361 ]
  %369 = phi i8* [ %394, %366 ], [ %364, %361 ]
  %370 = bitcast i8* %369 to <16 x i8>*
  %371 = load <16 x i8>, <16 x i8>* %370, align 1
  %372 = shufflevector <16 x i8> %371, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %373 = shufflevector <16 x i8> %371, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %374 = shufflevector <16 x i8> %372, <16 x i8> %373, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %375 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %374, <16 x i8> %343) #7
  %376 = add <8 x i16> %375, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %377 = ashr <8 x i16> %376, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %378 = bitcast <8 x i16> %377 to <2 x i64>
  %379 = extractelement <2 x i64> %378, i32 0
  %380 = bitcast i16* %367 to i64*
  store i64 %379, i64* %380, align 1
  %381 = getelementptr inbounds i8, i8* %369, i64 %1
  %382 = getelementptr inbounds i16, i16* %367, i64 %35
  %383 = bitcast i8* %381 to <16 x i8>*
  %384 = load <16 x i8>, <16 x i8>* %383, align 1
  %385 = shufflevector <16 x i8> %384, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %386 = shufflevector <16 x i8> %384, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %387 = shufflevector <16 x i8> %385, <16 x i8> %386, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %388 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %387, <16 x i8> %343) #7
  %389 = add <8 x i16> %388, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %390 = ashr <8 x i16> %389, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %391 = bitcast <8 x i16> %390 to <2 x i64>
  %392 = extractelement <2 x i64> %391, i32 0
  %393 = bitcast i16* %382 to i64*
  store i64 %392, i64* %393, align 1
  %394 = getelementptr inbounds i8, i8* %381, i64 %1
  %395 = getelementptr inbounds i16, i16* %382, i64 %35
  %396 = add nsw i32 %368, -2
  %397 = icmp eq i32 %396, 0
  br i1 %397, label %398, label %366

398:                                              ; preds = %189, %140, %91, %361, %366, %335, %248, %210, %42, %96, %145, %194, %232, %340
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_131ConvolveCompoundVertical_SSE4_1EPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #4 {
  %11 = icmp slt i32 %7, 5
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = and i32 %3, -3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %12
  %16 = icmp eq i32 %3, 1
  br i1 %16, label %22, label %17

17:                                               ; preds = %10, %15
  %18 = icmp slt i32 %3, 2
  br i1 %18, label %22, label %19

19:                                               ; preds = %17
  switch i32 %3, label %21 [
    i32 3, label %22
    i32 2, label %20
  ]

20:                                               ; preds = %19
  br label %22

21:                                               ; preds = %19
  br label %22

22:                                               ; preds = %19, %21, %12, %15, %20, %17
  %23 = phi i1 [ true, %17 ], [ false, %20 ], [ false, %15 ], [ false, %12 ], [ false, %19 ], [ false, %21 ]
  %24 = phi i32 [ %3, %17 ], [ 2, %20 ], [ 5, %15 ], [ 4, %12 ], [ %3, %19 ], [ %3, %21 ]
  %25 = phi i64 [ 2, %17 ], [ 3, %20 ], [ 1, %15 ], [ 1, %12 ], [ 0, %19 ], [ 1, %21 ]
  %26 = mul i64 %25, %1
  %27 = sub i64 0, %26
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = sext i32 %24 to i64
  %30 = sext i32 %5 to i64
  %31 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %29, i64 %30, i64 0
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %33, i32 0
  br i1 %23, label %35, label %185

35:                                               ; preds = %22
  %36 = bitcast <2 x i64> %34 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %38 = bitcast <16 x i8> %37 to <8 x i16>
  %39 = shufflevector <8 x i16> %38, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = shufflevector <8 x i16> %38, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = shufflevector <8 x i16> %38, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <8 x i16> %39 to <2 x i64>
  %43 = shufflevector <2 x i64> %42, <2 x i64> undef, <2 x i32> zeroinitializer
  %44 = bitcast <8 x i16> %40 to <2 x i64>
  %45 = shufflevector <2 x i64> %44, <2 x i64> undef, <2 x i32> zeroinitializer
  %46 = bitcast <8 x i16> %41 to <2 x i64>
  %47 = shufflevector <2 x i64> %46, <2 x i64> undef, <2 x i32> zeroinitializer
  %48 = icmp eq i32 %6, 4
  br i1 %48, label %49, label %120

49:                                               ; preds = %35
  %50 = bitcast i8* %8 to i16*
  %51 = bitcast i8* %28 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %52, i32 0
  %54 = getelementptr inbounds i8, i8* %28, i64 %1
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %56, i32 0
  %58 = shufflevector <4 x i32> %53, <4 x i32> %57, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %59 = getelementptr inbounds i8, i8* %54, i64 %1
  %60 = bitcast i8* %59 to i32*
  %61 = load i32, i32* %60, align 1
  %62 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %61, i32 0
  %63 = getelementptr inbounds i8, i8* %59, i64 %1
  %64 = shufflevector <4 x i32> %57, <4 x i32> %62, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %65 = bitcast i8* %63 to i32*
  %66 = load i32, i32* %65, align 1
  %67 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %66, i32 0
  %68 = shufflevector <4 x i32> %62, <4 x i32> %67, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %69 = getelementptr inbounds i8, i8* %63, i64 %1
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 1
  %72 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %71, i32 0
  %73 = shufflevector <4 x i32> %67, <4 x i32> %72, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %74 = bitcast <2 x i64> %43 to <16 x i8>
  %75 = bitcast <2 x i64> %45 to <16 x i8>
  %76 = bitcast <2 x i64> %47 to <16 x i8>
  br label %77

77:                                               ; preds = %77, %49
  %78 = phi <4 x i32> [ %72, %49 ], [ %98, %77 ]
  %79 = phi <4 x i32> [ %73, %49 ], [ %99, %77 ]
  %80 = phi <4 x i32> [ %68, %49 ], [ %94, %77 ]
  %81 = phi <4 x i32> [ %64, %49 ], [ %79, %77 ]
  %82 = phi <4 x i32> [ %58, %49 ], [ %80, %77 ]
  %83 = phi i32 [ %7, %49 ], [ %118, %77 ]
  %84 = phi i16* [ %50, %49 ], [ %117, %77 ]
  %85 = phi i8* [ %28, %49 ], [ %87, %77 ]
  %86 = getelementptr inbounds i8, i8* %85, i64 %1
  %87 = getelementptr inbounds i8, i8* %86, i64 %1
  %88 = getelementptr inbounds i8, i8* %87, i64 %1
  %89 = getelementptr inbounds i8, i8* %88, i64 %1
  %90 = getelementptr inbounds i8, i8* %89, i64 %1
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %91, align 1
  %93 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %92, i32 0
  %94 = shufflevector <4 x i32> %78, <4 x i32> %93, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %95 = getelementptr inbounds i8, i8* %90, i64 %1
  %96 = bitcast i8* %95 to i32*
  %97 = load i32, i32* %96, align 1
  %98 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %93, <4 x i32> %98, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %100 = bitcast <4 x i32> %82 to <16 x i8>
  %101 = bitcast <4 x i32> %81 to <16 x i8>
  %102 = shufflevector <16 x i8> %100, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = bitcast <4 x i32> %80 to <16 x i8>
  %104 = bitcast <4 x i32> %79 to <16 x i8>
  %105 = shufflevector <16 x i8> %103, <16 x i8> %104, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = bitcast <4 x i32> %94 to <16 x i8>
  %107 = bitcast <4 x i32> %99 to <16 x i8>
  %108 = shufflevector <16 x i8> %106, <16 x i8> %107, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %102, <16 x i8> %74) #7
  %110 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %105, <16 x i8> %75) #7
  %111 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %108, <16 x i8> %76) #7
  %112 = add <8 x i16> %109, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %113 = add <8 x i16> %112, %110
  %114 = add <8 x i16> %113, %111
  %115 = ashr <8 x i16> %114, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %116 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 1
  %117 = getelementptr inbounds i16, i16* %84, i64 8
  %118 = add nsw i32 %83, -2
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %691, label %77

120:                                              ; preds = %35
  %121 = sext i32 %6 to i64
  %122 = bitcast i8* %8 to i16*
  %123 = bitcast <2 x i64> %43 to <16 x i8>
  %124 = bitcast <2 x i64> %45 to <16 x i8>
  %125 = bitcast <2 x i64> %47 to <16 x i8>
  br label %126

126:                                              ; preds = %182, %120
  %127 = phi i64 [ 0, %120 ], [ %183, %182 ]
  %128 = getelementptr inbounds i8, i8* %28, i64 %127
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %130, i32 0
  %132 = getelementptr inbounds i8, i8* %128, i64 %1
  %133 = bitcast i8* %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %134, i32 0
  %136 = getelementptr inbounds i8, i8* %132, i64 %1
  %137 = bitcast i8* %136 to i64*
  %138 = load i64, i64* %137, align 1
  %139 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %138, i32 0
  %140 = getelementptr inbounds i8, i8* %136, i64 %1
  %141 = bitcast i8* %140 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %142, i32 0
  %144 = getelementptr inbounds i8, i8* %140, i64 %1
  %145 = bitcast i8* %144 to i64*
  %146 = load i64, i64* %145, align 1
  %147 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %146, i32 0
  %148 = getelementptr inbounds i16, i16* %122, i64 %127
  br label %149

149:                                              ; preds = %149, %126
  %150 = phi <2 x i64> [ %147, %126 ], [ %166, %149 ]
  %151 = phi <2 x i64> [ %143, %126 ], [ %150, %149 ]
  %152 = phi <2 x i64> [ %139, %126 ], [ %151, %149 ]
  %153 = phi <2 x i64> [ %135, %126 ], [ %152, %149 ]
  %154 = phi <2 x i64> [ %131, %126 ], [ %153, %149 ]
  %155 = phi i8* [ %144, %126 ], [ %163, %149 ]
  %156 = phi i16* [ %148, %126 ], [ %179, %149 ]
  %157 = phi i32 [ %7, %126 ], [ %180, %149 ]
  %158 = bitcast <2 x i64> %150 to <16 x i8>
  %159 = bitcast <2 x i64> %151 to <16 x i8>
  %160 = bitcast <2 x i64> %152 to <16 x i8>
  %161 = bitcast <2 x i64> %153 to <16 x i8>
  %162 = bitcast <2 x i64> %154 to <16 x i8>
  %163 = getelementptr inbounds i8, i8* %155, i64 %1
  %164 = bitcast i8* %163 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %165, i32 0
  %167 = shufflevector <16 x i8> %162, <16 x i8> %161, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = shufflevector <16 x i8> %160, <16 x i8> %159, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %169 = bitcast <2 x i64> %166 to <16 x i8>
  %170 = shufflevector <16 x i8> %158, <16 x i8> %169, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %171 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %167, <16 x i8> %123) #7
  %172 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %168, <16 x i8> %124) #7
  %173 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %170, <16 x i8> %125) #7
  %174 = add <8 x i16> %171, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %175 = add <8 x i16> %174, %172
  %176 = add <8 x i16> %175, %173
  %177 = ashr <8 x i16> %176, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %178 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %178, align 1
  %179 = getelementptr inbounds i16, i16* %156, i64 %121
  %180 = add nsw i32 %157, -1
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %149

182:                                              ; preds = %149
  %183 = add nuw nsw i64 %127, 8
  %184 = icmp slt i64 %183, %121
  br i1 %184, label %126, label %691

185:                                              ; preds = %22
  switch i32 %24, label %479 [
    i32 2, label %186
    i32 3, label %373
  ]

186:                                              ; preds = %185
  %187 = bitcast <2 x i64> %34 to <8 x i16>
  %188 = shufflevector <8 x i16> %187, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %189 = shufflevector <8 x i16> %187, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %190 = shufflevector <8 x i16> %187, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %191 = shufflevector <8 x i16> %187, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <8 x i16> %188 to <2 x i64>
  %193 = shufflevector <2 x i64> %192, <2 x i64> undef, <2 x i32> zeroinitializer
  %194 = bitcast <8 x i16> %189 to <2 x i64>
  %195 = shufflevector <2 x i64> %194, <2 x i64> undef, <2 x i32> zeroinitializer
  %196 = bitcast <8 x i16> %190 to <2 x i64>
  %197 = shufflevector <2 x i64> %196, <2 x i64> undef, <2 x i32> zeroinitializer
  %198 = bitcast <8 x i16> %191 to <2 x i64>
  %199 = shufflevector <2 x i64> %198, <2 x i64> undef, <2 x i32> zeroinitializer
  %200 = icmp eq i32 %6, 4
  br i1 %200, label %201, label %292

201:                                              ; preds = %186
  %202 = bitcast i8* %8 to i16*
  %203 = bitcast i8* %28 to i32*
  %204 = load i32, i32* %203, align 1
  %205 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %204, i32 0
  %206 = getelementptr inbounds i8, i8* %28, i64 %1
  %207 = bitcast i8* %206 to i32*
  %208 = load i32, i32* %207, align 1
  %209 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %208, i32 0
  %210 = shufflevector <4 x i32> %205, <4 x i32> %209, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %211 = getelementptr inbounds i8, i8* %206, i64 %1
  %212 = bitcast i8* %211 to i32*
  %213 = load i32, i32* %212, align 1
  %214 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %213, i32 0
  %215 = getelementptr inbounds i8, i8* %211, i64 %1
  %216 = shufflevector <4 x i32> %209, <4 x i32> %214, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %217 = bitcast i8* %215 to i32*
  %218 = load i32, i32* %217, align 1
  %219 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %218, i32 0
  %220 = shufflevector <4 x i32> %214, <4 x i32> %219, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %221 = getelementptr inbounds i8, i8* %215, i64 %1
  %222 = bitcast i8* %221 to i32*
  %223 = load i32, i32* %222, align 1
  %224 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %223, i32 0
  %225 = getelementptr inbounds i8, i8* %221, i64 %1
  %226 = shufflevector <4 x i32> %219, <4 x i32> %224, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %227 = bitcast i8* %225 to i32*
  %228 = load i32, i32* %227, align 1
  %229 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %228, i32 0
  %230 = shufflevector <4 x i32> %224, <4 x i32> %229, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %231 = getelementptr inbounds i8, i8* %225, i64 %1
  %232 = bitcast i8* %231 to i32*
  %233 = load i32, i32* %232, align 1
  %234 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %233, i32 0
  %235 = shufflevector <4 x i32> %229, <4 x i32> %234, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %236 = bitcast <2 x i64> %193 to <16 x i8>
  %237 = bitcast <2 x i64> %195 to <16 x i8>
  %238 = bitcast <2 x i64> %197 to <16 x i8>
  %239 = bitcast <2 x i64> %199 to <16 x i8>
  br label %240

240:                                              ; preds = %240, %201
  %241 = phi <4 x i32> [ %234, %201 ], [ %265, %240 ]
  %242 = phi <4 x i32> [ %235, %201 ], [ %266, %240 ]
  %243 = phi <4 x i32> [ %230, %201 ], [ %261, %240 ]
  %244 = phi <4 x i32> [ %226, %201 ], [ %242, %240 ]
  %245 = phi <4 x i32> [ %220, %201 ], [ %243, %240 ]
  %246 = phi <4 x i32> [ %216, %201 ], [ %244, %240 ]
  %247 = phi <4 x i32> [ %210, %201 ], [ %245, %240 ]
  %248 = phi i32 [ %7, %201 ], [ %290, %240 ]
  %249 = phi i16* [ %202, %201 ], [ %289, %240 ]
  %250 = phi i8* [ %28, %201 ], [ %252, %240 ]
  %251 = getelementptr inbounds i8, i8* %250, i64 %1
  %252 = getelementptr inbounds i8, i8* %251, i64 %1
  %253 = getelementptr inbounds i8, i8* %252, i64 %1
  %254 = getelementptr inbounds i8, i8* %253, i64 %1
  %255 = getelementptr inbounds i8, i8* %254, i64 %1
  %256 = getelementptr inbounds i8, i8* %255, i64 %1
  %257 = getelementptr inbounds i8, i8* %256, i64 %1
  %258 = bitcast i8* %257 to i32*
  %259 = load i32, i32* %258, align 1
  %260 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %259, i32 0
  %261 = shufflevector <4 x i32> %241, <4 x i32> %260, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %262 = getelementptr inbounds i8, i8* %257, i64 %1
  %263 = bitcast i8* %262 to i32*
  %264 = load i32, i32* %263, align 1
  %265 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %264, i32 0
  %266 = shufflevector <4 x i32> %260, <4 x i32> %265, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %267 = bitcast <4 x i32> %247 to <16 x i8>
  %268 = bitcast <4 x i32> %246 to <16 x i8>
  %269 = shufflevector <16 x i8> %267, <16 x i8> %268, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %270 = bitcast <4 x i32> %245 to <16 x i8>
  %271 = bitcast <4 x i32> %244 to <16 x i8>
  %272 = shufflevector <16 x i8> %270, <16 x i8> %271, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %273 = bitcast <4 x i32> %243 to <16 x i8>
  %274 = bitcast <4 x i32> %242 to <16 x i8>
  %275 = shufflevector <16 x i8> %273, <16 x i8> %274, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %276 = bitcast <4 x i32> %261 to <16 x i8>
  %277 = bitcast <4 x i32> %266 to <16 x i8>
  %278 = shufflevector <16 x i8> %276, <16 x i8> %277, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %279 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %269, <16 x i8> %236) #7
  %280 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %272, <16 x i8> %237) #7
  %281 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %275, <16 x i8> %238) #7
  %282 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %278, <16 x i8> %239) #7
  %283 = add <8 x i16> %279, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %284 = add <8 x i16> %283, %280
  %285 = add <8 x i16> %284, %281
  %286 = add <8 x i16> %285, %282
  %287 = ashr <8 x i16> %286, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %288 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %288, align 1
  %289 = getelementptr inbounds i16, i16* %249, i64 8
  %290 = add nsw i32 %248, -2
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %691, label %240

292:                                              ; preds = %186
  %293 = sext i32 %6 to i64
  %294 = bitcast i8* %8 to i16*
  %295 = bitcast <2 x i64> %193 to <16 x i8>
  %296 = bitcast <2 x i64> %195 to <16 x i8>
  %297 = bitcast <2 x i64> %197 to <16 x i8>
  %298 = bitcast <2 x i64> %199 to <16 x i8>
  br label %299

299:                                              ; preds = %370, %292
  %300 = phi i64 [ %371, %370 ], [ 0, %292 ]
  %301 = getelementptr inbounds i8, i8* %28, i64 %300
  %302 = bitcast i8* %301 to i64*
  %303 = load i64, i64* %302, align 1
  %304 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %303, i32 0
  %305 = getelementptr inbounds i8, i8* %301, i64 %1
  %306 = bitcast i8* %305 to i64*
  %307 = load i64, i64* %306, align 1
  %308 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %307, i32 0
  %309 = getelementptr inbounds i8, i8* %305, i64 %1
  %310 = bitcast i8* %309 to i64*
  %311 = load i64, i64* %310, align 1
  %312 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %311, i32 0
  %313 = getelementptr inbounds i8, i8* %309, i64 %1
  %314 = bitcast i8* %313 to i64*
  %315 = load i64, i64* %314, align 1
  %316 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %315, i32 0
  %317 = getelementptr inbounds i8, i8* %313, i64 %1
  %318 = bitcast i8* %317 to i64*
  %319 = load i64, i64* %318, align 1
  %320 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %319, i32 0
  %321 = getelementptr inbounds i8, i8* %317, i64 %1
  %322 = bitcast i8* %321 to i64*
  %323 = load i64, i64* %322, align 1
  %324 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %323, i32 0
  %325 = getelementptr inbounds i8, i8* %321, i64 %1
  %326 = bitcast i8* %325 to i64*
  %327 = load i64, i64* %326, align 1
  %328 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %327, i32 0
  %329 = getelementptr inbounds i16, i16* %294, i64 %300
  br label %330

330:                                              ; preds = %330, %299
  %331 = phi <2 x i64> [ %328, %299 ], [ %351, %330 ]
  %332 = phi <2 x i64> [ %324, %299 ], [ %331, %330 ]
  %333 = phi <2 x i64> [ %320, %299 ], [ %332, %330 ]
  %334 = phi <2 x i64> [ %316, %299 ], [ %333, %330 ]
  %335 = phi <2 x i64> [ %312, %299 ], [ %334, %330 ]
  %336 = phi <2 x i64> [ %308, %299 ], [ %335, %330 ]
  %337 = phi <2 x i64> [ %304, %299 ], [ %336, %330 ]
  %338 = phi i8* [ %325, %299 ], [ %348, %330 ]
  %339 = phi i16* [ %329, %299 ], [ %367, %330 ]
  %340 = phi i32 [ %7, %299 ], [ %368, %330 ]
  %341 = bitcast <2 x i64> %331 to <16 x i8>
  %342 = bitcast <2 x i64> %332 to <16 x i8>
  %343 = bitcast <2 x i64> %333 to <16 x i8>
  %344 = bitcast <2 x i64> %334 to <16 x i8>
  %345 = bitcast <2 x i64> %335 to <16 x i8>
  %346 = bitcast <2 x i64> %336 to <16 x i8>
  %347 = bitcast <2 x i64> %337 to <16 x i8>
  %348 = getelementptr inbounds i8, i8* %338, i64 %1
  %349 = bitcast i8* %348 to i64*
  %350 = load i64, i64* %349, align 1
  %351 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %350, i32 0
  %352 = shufflevector <16 x i8> %347, <16 x i8> %346, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %353 = shufflevector <16 x i8> %345, <16 x i8> %344, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %354 = shufflevector <16 x i8> %343, <16 x i8> %342, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %355 = bitcast <2 x i64> %351 to <16 x i8>
  %356 = shufflevector <16 x i8> %341, <16 x i8> %355, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %357 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %352, <16 x i8> %295) #7
  %358 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %353, <16 x i8> %296) #7
  %359 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %354, <16 x i8> %297) #7
  %360 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %356, <16 x i8> %298) #7
  %361 = add <8 x i16> %357, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %362 = add <8 x i16> %361, %358
  %363 = add <8 x i16> %362, %359
  %364 = add <8 x i16> %363, %360
  %365 = ashr <8 x i16> %364, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %366 = bitcast i16* %339 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %366, align 1
  %367 = getelementptr inbounds i16, i16* %339, i64 %293
  %368 = add nsw i32 %340, -1
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %370, label %330

370:                                              ; preds = %330
  %371 = add nuw nsw i64 %300, 8
  %372 = icmp slt i64 %371, %293
  br i1 %372, label %299, label %691

373:                                              ; preds = %185
  %374 = bitcast <2 x i64> %34 to <16 x i8>
  %375 = shufflevector <16 x i8> %374, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %376 = bitcast <16 x i8> %375 to <8 x i16>
  %377 = shufflevector <8 x i16> %376, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %378 = bitcast <8 x i16> %377 to <2 x i64>
  %379 = shufflevector <2 x i64> %378, <2 x i64> undef, <2 x i32> zeroinitializer
  %380 = icmp eq i32 %6, 4
  br i1 %380, label %381, label %412

381:                                              ; preds = %373
  %382 = bitcast i8* %8 to i16*
  %383 = bitcast i8* %28 to i32*
  %384 = load i32, i32* %383, align 1
  %385 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %384, i32 0
  %386 = bitcast <2 x i64> %379 to <16 x i8>
  br label %387

387:                                              ; preds = %387, %381
  %388 = phi <4 x i32> [ %385, %381 ], [ %400, %387 ]
  %389 = phi i32 [ %7, %381 ], [ %410, %387 ]
  %390 = phi i16* [ %382, %381 ], [ %409, %387 ]
  %391 = phi i8* [ %28, %381 ], [ %397, %387 ]
  %392 = getelementptr inbounds i8, i8* %391, i64 %1
  %393 = bitcast i8* %392 to i32*
  %394 = load i32, i32* %393, align 1
  %395 = insertelement <4 x i32> undef, i32 %394, i32 0
  %396 = insertelement <4 x i32> %388, i32 %394, i32 1
  %397 = getelementptr inbounds i8, i8* %392, i64 %1
  %398 = bitcast i8* %397 to i32*
  %399 = load i32, i32* %398, align 1
  %400 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %399, i32 0
  %401 = insertelement <4 x i32> %395, i32 %399, i32 1
  %402 = bitcast <4 x i32> %396 to <16 x i8>
  %403 = bitcast <4 x i32> %401 to <16 x i8>
  %404 = shufflevector <16 x i8> %402, <16 x i8> %403, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %405 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %404, <16 x i8> %386) #7
  %406 = add <8 x i16> %405, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %407 = ashr <8 x i16> %406, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %408 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %408, align 1
  %409 = getelementptr inbounds i16, i16* %390, i64 8
  %410 = add nsw i32 %389, -2
  %411 = icmp eq i32 %410, 0
  br i1 %411, label %691, label %387

412:                                              ; preds = %373
  %413 = sext i32 %6 to i64
  %414 = bitcast i8* %8 to i16*
  %415 = bitcast <2 x i64> %379 to <16 x i8>
  %416 = and i32 %7, 1
  %417 = icmp eq i32 %416, 0
  %418 = add nsw i32 %7, -1
  %419 = icmp eq i32 %7, 1
  br label %420

420:                                              ; preds = %476, %412
  %421 = phi i64 [ 0, %412 ], [ %477, %476 ]
  %422 = getelementptr inbounds i8, i8* %28, i64 %421
  %423 = bitcast i8* %422 to i64*
  %424 = load i64, i64* %423, align 1
  %425 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %424, i32 0
  %426 = getelementptr inbounds i16, i16* %414, i64 %421
  br i1 %417, label %440, label %427

427:                                              ; preds = %420
  %428 = bitcast <2 x i64> %425 to <16 x i8>
  %429 = getelementptr inbounds i8, i8* %422, i64 %1
  %430 = bitcast i8* %429 to i64*
  %431 = load i64, i64* %430, align 1
  %432 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %431, i32 0
  %433 = bitcast <2 x i64> %432 to <16 x i8>
  %434 = shufflevector <16 x i8> %428, <16 x i8> %433, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %435 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %434, <16 x i8> %415) #7
  %436 = add <8 x i16> %435, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %437 = ashr <8 x i16> %436, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %438 = bitcast i16* %426 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %438, align 1
  %439 = getelementptr inbounds i16, i16* %426, i64 %413
  br label %440

440:                                              ; preds = %427, %420
  %441 = phi <2 x i64> [ %432, %427 ], [ %425, %420 ]
  %442 = phi i8* [ %429, %427 ], [ %422, %420 ]
  %443 = phi i16* [ %439, %427 ], [ %426, %420 ]
  %444 = phi i32 [ %418, %427 ], [ %7, %420 ]
  br i1 %419, label %476, label %445

445:                                              ; preds = %440, %445
  %446 = phi <2 x i64> [ %466, %445 ], [ %441, %440 ]
  %447 = phi i8* [ %463, %445 ], [ %442, %440 ]
  %448 = phi i16* [ %473, %445 ], [ %443, %440 ]
  %449 = phi i32 [ %474, %445 ], [ %444, %440 ]
  %450 = bitcast <2 x i64> %446 to <16 x i8>
  %451 = getelementptr inbounds i8, i8* %447, i64 %1
  %452 = bitcast i8* %451 to i64*
  %453 = load i64, i64* %452, align 1
  %454 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %453, i32 0
  %455 = bitcast <2 x i64> %454 to <16 x i8>
  %456 = shufflevector <16 x i8> %450, <16 x i8> %455, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %457 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %456, <16 x i8> %415) #7
  %458 = add <8 x i16> %457, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %459 = ashr <8 x i16> %458, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %460 = bitcast i16* %448 to <8 x i16>*
  store <8 x i16> %459, <8 x i16>* %460, align 1
  %461 = getelementptr inbounds i16, i16* %448, i64 %413
  %462 = bitcast <2 x i64> %454 to <16 x i8>
  %463 = getelementptr inbounds i8, i8* %451, i64 %1
  %464 = bitcast i8* %463 to i64*
  %465 = load i64, i64* %464, align 1
  %466 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %465, i32 0
  %467 = bitcast <2 x i64> %466 to <16 x i8>
  %468 = shufflevector <16 x i8> %462, <16 x i8> %467, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %469 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %468, <16 x i8> %415) #7
  %470 = add <8 x i16> %469, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %471 = ashr <8 x i16> %470, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %472 = bitcast i16* %461 to <8 x i16>*
  store <8 x i16> %471, <8 x i16>* %472, align 1
  %473 = getelementptr inbounds i16, i16* %461, i64 %413
  %474 = add nsw i32 %449, -2
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %476, label %445

476:                                              ; preds = %445, %440
  %477 = add nuw nsw i64 %421, 8
  %478 = icmp slt i64 %477, %413
  br i1 %478, label %420, label %691

479:                                              ; preds = %185
  %480 = icmp eq i32 %24, 4
  %481 = bitcast <2 x i64> %34 to <8 x i16>
  %482 = shufflevector <8 x i16> %481, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %483 = shufflevector <8 x i16> %481, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %484 = bitcast <8 x i16> %482 to <2 x i64>
  %485 = shufflevector <2 x i64> %484, <2 x i64> undef, <2 x i32> zeroinitializer
  %486 = bitcast <8 x i16> %483 to <2 x i64>
  %487 = shufflevector <2 x i64> %486, <2 x i64> undef, <2 x i32> zeroinitializer
  %488 = icmp eq i32 %6, 4
  br i1 %480, label %489, label %590

489:                                              ; preds = %479
  br i1 %488, label %490, label %541

490:                                              ; preds = %489
  %491 = bitcast i8* %8 to i16*
  %492 = bitcast i8* %28 to i32*
  %493 = load i32, i32* %492, align 1
  %494 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %493, i32 0
  %495 = getelementptr inbounds i8, i8* %28, i64 %1
  %496 = bitcast i8* %495 to i32*
  %497 = load i32, i32* %496, align 1
  %498 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %497, i32 0
  %499 = shufflevector <4 x i32> %494, <4 x i32> %498, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %500 = getelementptr inbounds i8, i8* %495, i64 %1
  %501 = bitcast i8* %500 to i32*
  %502 = load i32, i32* %501, align 1
  %503 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %502, i32 0
  %504 = shufflevector <4 x i32> %498, <4 x i32> %503, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %505 = bitcast <2 x i64> %485 to <16 x i8>
  %506 = bitcast <2 x i64> %487 to <16 x i8>
  br label %507

507:                                              ; preds = %507, %490
  %508 = phi <4 x i32> [ %503, %490 ], [ %524, %507 ]
  %509 = phi <4 x i32> [ %504, %490 ], [ %525, %507 ]
  %510 = phi <4 x i32> [ %499, %490 ], [ %520, %507 ]
  %511 = phi i32 [ %7, %490 ], [ %539, %507 ]
  %512 = phi i16* [ %491, %490 ], [ %538, %507 ]
  %513 = phi i8* [ %28, %490 ], [ %515, %507 ]
  %514 = getelementptr inbounds i8, i8* %513, i64 %1
  %515 = getelementptr inbounds i8, i8* %514, i64 %1
  %516 = getelementptr inbounds i8, i8* %515, i64 %1
  %517 = bitcast i8* %516 to i32*
  %518 = load i32, i32* %517, align 1
  %519 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %518, i32 0
  %520 = shufflevector <4 x i32> %508, <4 x i32> %519, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %521 = getelementptr inbounds i8, i8* %516, i64 %1
  %522 = bitcast i8* %521 to i32*
  %523 = load i32, i32* %522, align 1
  %524 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %523, i32 0
  %525 = shufflevector <4 x i32> %519, <4 x i32> %524, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %526 = bitcast <4 x i32> %510 to <16 x i8>
  %527 = bitcast <4 x i32> %509 to <16 x i8>
  %528 = shufflevector <16 x i8> %526, <16 x i8> %527, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %529 = bitcast <4 x i32> %520 to <16 x i8>
  %530 = bitcast <4 x i32> %525 to <16 x i8>
  %531 = shufflevector <16 x i8> %529, <16 x i8> %530, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %532 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %528, <16 x i8> %505) #7
  %533 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %531, <16 x i8> %506) #7
  %534 = add <8 x i16> %532, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %535 = add <8 x i16> %534, %533
  %536 = ashr <8 x i16> %535, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %537 = bitcast i16* %512 to <8 x i16>*
  store <8 x i16> %536, <8 x i16>* %537, align 1
  %538 = getelementptr inbounds i16, i16* %512, i64 8
  %539 = add nsw i32 %511, -2
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %691, label %507

541:                                              ; preds = %489
  %542 = sext i32 %6 to i64
  %543 = bitcast i8* %8 to i16*
  %544 = bitcast <2 x i64> %485 to <16 x i8>
  %545 = bitcast <2 x i64> %487 to <16 x i8>
  br label %546

546:                                              ; preds = %587, %541
  %547 = phi i64 [ %588, %587 ], [ 0, %541 ]
  %548 = getelementptr inbounds i8, i8* %28, i64 %547
  %549 = bitcast i8* %548 to i64*
  %550 = load i64, i64* %549, align 1
  %551 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %550, i32 0
  %552 = getelementptr inbounds i8, i8* %548, i64 %1
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 1
  %555 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %554, i32 0
  %556 = getelementptr inbounds i8, i8* %552, i64 %1
  %557 = bitcast i8* %556 to i64*
  %558 = load i64, i64* %557, align 1
  %559 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %558, i32 0
  %560 = getelementptr inbounds i16, i16* %543, i64 %547
  br label %561

561:                                              ; preds = %561, %546
  %562 = phi <2 x i64> [ %559, %546 ], [ %574, %561 ]
  %563 = phi <2 x i64> [ %555, %546 ], [ %562, %561 ]
  %564 = phi <2 x i64> [ %551, %546 ], [ %563, %561 ]
  %565 = phi i8* [ %556, %546 ], [ %571, %561 ]
  %566 = phi i16* [ %560, %546 ], [ %584, %561 ]
  %567 = phi i32 [ %7, %546 ], [ %585, %561 ]
  %568 = bitcast <2 x i64> %562 to <16 x i8>
  %569 = bitcast <2 x i64> %563 to <16 x i8>
  %570 = bitcast <2 x i64> %564 to <16 x i8>
  %571 = getelementptr inbounds i8, i8* %565, i64 %1
  %572 = bitcast i8* %571 to i64*
  %573 = load i64, i64* %572, align 1
  %574 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %573, i32 0
  %575 = shufflevector <16 x i8> %570, <16 x i8> %569, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %576 = bitcast <2 x i64> %574 to <16 x i8>
  %577 = shufflevector <16 x i8> %568, <16 x i8> %576, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %578 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %575, <16 x i8> %544) #7
  %579 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %577, <16 x i8> %545) #7
  %580 = add <8 x i16> %578, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %581 = add <8 x i16> %580, %579
  %582 = ashr <8 x i16> %581, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %583 = bitcast i16* %566 to <8 x i16>*
  store <8 x i16> %582, <8 x i16>* %583, align 1
  %584 = getelementptr inbounds i16, i16* %566, i64 %542
  %585 = add nsw i32 %567, -1
  %586 = icmp eq i32 %585, 0
  br i1 %586, label %587, label %561

587:                                              ; preds = %561
  %588 = add nuw nsw i64 %547, 8
  %589 = icmp slt i64 %588, %542
  br i1 %589, label %546, label %691

590:                                              ; preds = %479
  br i1 %488, label %591, label %642

591:                                              ; preds = %590
  %592 = bitcast i8* %8 to i16*
  %593 = bitcast i8* %28 to i32*
  %594 = load i32, i32* %593, align 1
  %595 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %594, i32 0
  %596 = getelementptr inbounds i8, i8* %28, i64 %1
  %597 = bitcast i8* %596 to i32*
  %598 = load i32, i32* %597, align 1
  %599 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %598, i32 0
  %600 = shufflevector <4 x i32> %595, <4 x i32> %599, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %601 = getelementptr inbounds i8, i8* %596, i64 %1
  %602 = bitcast i8* %601 to i32*
  %603 = load i32, i32* %602, align 1
  %604 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %603, i32 0
  %605 = shufflevector <4 x i32> %599, <4 x i32> %604, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %606 = bitcast <2 x i64> %485 to <16 x i8>
  %607 = bitcast <2 x i64> %487 to <16 x i8>
  br label %608

608:                                              ; preds = %608, %591
  %609 = phi <4 x i32> [ %604, %591 ], [ %625, %608 ]
  %610 = phi <4 x i32> [ %605, %591 ], [ %626, %608 ]
  %611 = phi <4 x i32> [ %600, %591 ], [ %621, %608 ]
  %612 = phi i32 [ %7, %591 ], [ %640, %608 ]
  %613 = phi i16* [ %592, %591 ], [ %639, %608 ]
  %614 = phi i8* [ %28, %591 ], [ %616, %608 ]
  %615 = getelementptr inbounds i8, i8* %614, i64 %1
  %616 = getelementptr inbounds i8, i8* %615, i64 %1
  %617 = getelementptr inbounds i8, i8* %616, i64 %1
  %618 = bitcast i8* %617 to i32*
  %619 = load i32, i32* %618, align 1
  %620 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %619, i32 0
  %621 = shufflevector <4 x i32> %609, <4 x i32> %620, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %622 = getelementptr inbounds i8, i8* %617, i64 %1
  %623 = bitcast i8* %622 to i32*
  %624 = load i32, i32* %623, align 1
  %625 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %624, i32 0
  %626 = shufflevector <4 x i32> %620, <4 x i32> %625, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %627 = bitcast <4 x i32> %611 to <16 x i8>
  %628 = bitcast <4 x i32> %610 to <16 x i8>
  %629 = shufflevector <16 x i8> %627, <16 x i8> %628, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %630 = bitcast <4 x i32> %621 to <16 x i8>
  %631 = bitcast <4 x i32> %626 to <16 x i8>
  %632 = shufflevector <16 x i8> %630, <16 x i8> %631, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %633 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %629, <16 x i8> %606) #7
  %634 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %632, <16 x i8> %607) #7
  %635 = add <8 x i16> %633, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %636 = add <8 x i16> %635, %634
  %637 = ashr <8 x i16> %636, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %638 = bitcast i16* %613 to <8 x i16>*
  store <8 x i16> %637, <8 x i16>* %638, align 1
  %639 = getelementptr inbounds i16, i16* %613, i64 8
  %640 = add nsw i32 %612, -2
  %641 = icmp eq i32 %640, 0
  br i1 %641, label %691, label %608

642:                                              ; preds = %590
  %643 = sext i32 %6 to i64
  %644 = bitcast i8* %8 to i16*
  %645 = bitcast <2 x i64> %485 to <16 x i8>
  %646 = bitcast <2 x i64> %487 to <16 x i8>
  br label %647

647:                                              ; preds = %688, %642
  %648 = phi i64 [ %689, %688 ], [ 0, %642 ]
  %649 = getelementptr inbounds i8, i8* %28, i64 %648
  %650 = bitcast i8* %649 to i64*
  %651 = load i64, i64* %650, align 1
  %652 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %651, i32 0
  %653 = getelementptr inbounds i8, i8* %649, i64 %1
  %654 = bitcast i8* %653 to i64*
  %655 = load i64, i64* %654, align 1
  %656 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %655, i32 0
  %657 = getelementptr inbounds i8, i8* %653, i64 %1
  %658 = bitcast i8* %657 to i64*
  %659 = load i64, i64* %658, align 1
  %660 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %659, i32 0
  %661 = getelementptr inbounds i16, i16* %644, i64 %648
  br label %662

662:                                              ; preds = %662, %647
  %663 = phi <2 x i64> [ %660, %647 ], [ %675, %662 ]
  %664 = phi <2 x i64> [ %656, %647 ], [ %663, %662 ]
  %665 = phi <2 x i64> [ %652, %647 ], [ %664, %662 ]
  %666 = phi i8* [ %657, %647 ], [ %672, %662 ]
  %667 = phi i16* [ %661, %647 ], [ %685, %662 ]
  %668 = phi i32 [ %7, %647 ], [ %686, %662 ]
  %669 = bitcast <2 x i64> %663 to <16 x i8>
  %670 = bitcast <2 x i64> %664 to <16 x i8>
  %671 = bitcast <2 x i64> %665 to <16 x i8>
  %672 = getelementptr inbounds i8, i8* %666, i64 %1
  %673 = bitcast i8* %672 to i64*
  %674 = load i64, i64* %673, align 1
  %675 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %674, i32 0
  %676 = shufflevector <16 x i8> %671, <16 x i8> %670, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %677 = bitcast <2 x i64> %675 to <16 x i8>
  %678 = shufflevector <16 x i8> %669, <16 x i8> %677, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %679 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %676, <16 x i8> %645) #7
  %680 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %678, <16 x i8> %646) #7
  %681 = add <8 x i16> %679, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %682 = add <8 x i16> %681, %680
  %683 = ashr <8 x i16> %682, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %684 = bitcast i16* %667 to <8 x i16>*
  store <8 x i16> %683, <8 x i16>* %684, align 1
  %685 = getelementptr inbounds i16, i16* %667, i64 %643
  %686 = add nsw i32 %668, -1
  %687 = icmp eq i32 %686, 0
  br i1 %687, label %688, label %662

688:                                              ; preds = %662
  %689 = add nuw nsw i64 %648, 8
  %690 = icmp slt i64 %689, %643
  br i1 %690, label %647, label %691

691:                                              ; preds = %476, %387, %370, %240, %688, %608, %587, %507, %182, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_125ConvolveCompound2D_SSE4_1EPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #4 {
  %11 = alloca [17280 x i16], align 16
  %12 = bitcast [17280 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 34560, i1 false)
  %13 = icmp slt i32 %6, 5
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = and i32 %2, -3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %14
  %18 = icmp eq i32 %2, 1
  br i1 %18, label %20, label %19

19:                                               ; preds = %17, %10
  br label %20

20:                                               ; preds = %14, %17, %19
  %21 = phi i32 [ %2, %19 ], [ 4, %14 ], [ 5, %17 ]
  %22 = icmp slt i32 %7, 5
  br i1 %22, label %23, label %28

23:                                               ; preds = %20
  %24 = and i32 %3, -3
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %23
  %27 = icmp eq i32 %3, 1
  br i1 %27, label %33, label %28

28:                                               ; preds = %20, %26
  %29 = icmp slt i32 %3, 2
  br i1 %29, label %33, label %30

30:                                               ; preds = %28
  switch i32 %3, label %32 [
    i32 3, label %33
    i32 2, label %31
  ]

31:                                               ; preds = %30
  br label %33

32:                                               ; preds = %30
  br label %33

33:                                               ; preds = %30, %32, %26, %23, %31, %28
  %34 = phi i32 [ %3, %28 ], [ 2, %31 ], [ 5, %26 ], [ 4, %23 ], [ %3, %30 ], [ %3, %32 ]
  %35 = phi i32 [ 6, %28 ], [ 8, %31 ], [ 4, %26 ], [ 4, %23 ], [ 2, %30 ], [ 4, %32 ]
  %36 = add i32 %7, -1
  %37 = add i32 %36, %35
  %38 = lshr exact i32 %35, 1
  %39 = add nsw i32 %38, -1
  %40 = sext i32 %39 to i64
  %41 = mul i64 %40, %1
  %42 = sub i64 0, %41
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  %44 = getelementptr inbounds i8, i8* %43, i64 -3
  %45 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 0
  %46 = sext i32 %6 to i64
  %47 = sext i32 %21 to i64
  %48 = sext i32 %4 to i64
  %49 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %47, i64 %48, i64 0
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %51, i32 0
  switch i32 %21, label %270 [
    i32 2, label %53
    i32 1, label %106
    i32 0, label %154
    i32 4, label %202
    i32 5, label %236
  ]

53:                                               ; preds = %33
  %54 = bitcast <2 x i64> %52 to <8 x i16>
  %55 = icmp sgt i32 %6, 4
  br i1 %55, label %56, label %398

56:                                               ; preds = %53
  %57 = shufflevector <8 x i16> %54, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <8 x i16> %57 to <2 x i64>
  %59 = shufflevector <2 x i64> %58, <2 x i64> undef, <2 x i32> zeroinitializer
  %60 = shufflevector <8 x i16> %54, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = bitcast <8 x i16> %60 to <2 x i64>
  %62 = shufflevector <2 x i64> %61, <2 x i64> undef, <2 x i32> zeroinitializer
  %63 = shufflevector <8 x i16> %54, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %64 = bitcast <8 x i16> %63 to <2 x i64>
  %65 = shufflevector <2 x i64> %64, <2 x i64> undef, <2 x i32> zeroinitializer
  %66 = shufflevector <8 x i16> %54, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = bitcast <8 x i16> %66 to <2 x i64>
  %68 = shufflevector <2 x i64> %67, <2 x i64> undef, <2 x i32> zeroinitializer
  %69 = bitcast <2 x i64> %68 to <16 x i8>
  %70 = bitcast <2 x i64> %65 to <16 x i8>
  %71 = bitcast <2 x i64> %62 to <16 x i8>
  %72 = bitcast <2 x i64> %59 to <16 x i8>
  br label %73

73:                                               ; preds = %101, %56
  %74 = phi i16* [ %45, %56 ], [ %103, %101 ]
  %75 = phi i32 [ %37, %56 ], [ %104, %101 ]
  %76 = phi i8* [ %44, %56 ], [ %102, %101 ]
  br label %77

77:                                               ; preds = %77, %73
  %78 = phi i64 [ %99, %77 ], [ 0, %73 ]
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %83 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %84 = shufflevector <16 x i8> %82, <16 x i8> %83, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %85 = shufflevector <16 x i8> %82, <16 x i8> %83, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %86 = shufflevector <16 x i8> %82, <16 x i8> %83, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %87 = shufflevector <16 x i8> %82, <16 x i8> %83, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28>
  %88 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %84, <16 x i8> %69) #7
  %89 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %85, <16 x i8> %70) #7
  %90 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %86, <16 x i8> %71) #7
  %91 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %87, <16 x i8> %72) #7
  %92 = add <8 x i16> %88, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %93 = add <8 x i16> %92, %89
  %94 = add <8 x i16> %93, %90
  %95 = add <8 x i16> %94, %91
  %96 = ashr <8 x i16> %95, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %97 = getelementptr inbounds i16, i16* %74, i64 %78
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %98, align 16
  %99 = add nuw nsw i64 %78, 8
  %100 = icmp slt i64 %99, %46
  br i1 %100, label %77, label %101

101:                                              ; preds = %77
  %102 = getelementptr inbounds i8, i8* %76, i64 %1
  %103 = getelementptr inbounds i16, i16* %74, i64 %46
  %104 = add nsw i32 %75, -1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %398, label %73

106:                                              ; preds = %33
  %107 = bitcast <2 x i64> %52 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %109 = bitcast <16 x i8> %108 to <8 x i16>
  %110 = icmp sgt i32 %6, 4
  br i1 %110, label %111, label %398

111:                                              ; preds = %106
  %112 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = bitcast <8 x i16> %112 to <2 x i64>
  %114 = shufflevector <2 x i64> %113, <2 x i64> undef, <2 x i32> zeroinitializer
  %115 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %116 = bitcast <8 x i16> %115 to <2 x i64>
  %117 = shufflevector <2 x i64> %116, <2 x i64> undef, <2 x i32> zeroinitializer
  %118 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %119 = bitcast <8 x i16> %118 to <2 x i64>
  %120 = shufflevector <2 x i64> %119, <2 x i64> undef, <2 x i32> zeroinitializer
  %121 = bitcast <2 x i64> %120 to <16 x i8>
  %122 = bitcast <2 x i64> %117 to <16 x i8>
  %123 = bitcast <2 x i64> %114 to <16 x i8>
  br label %124

124:                                              ; preds = %149, %111
  %125 = phi i16* [ %45, %111 ], [ %151, %149 ]
  %126 = phi i32 [ %37, %111 ], [ %152, %149 ]
  %127 = phi i8* [ %44, %111 ], [ %150, %149 ]
  br label %128

128:                                              ; preds = %128, %124
  %129 = phi i64 [ %147, %128 ], [ 0, %124 ]
  %130 = getelementptr inbounds i8, i8* %127, i64 %129
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1
  %133 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %134 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %135 = shufflevector <16 x i8> %133, <16 x i8> %134, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %136 = shufflevector <16 x i8> %133, <16 x i8> %134, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %137 = shufflevector <16 x i8> %133, <16 x i8> %134, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %138 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %135, <16 x i8> %121) #7
  %139 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %136, <16 x i8> %122) #7
  %140 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %137, <16 x i8> %123) #7
  %141 = add <8 x i16> %138, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %142 = add <8 x i16> %141, %139
  %143 = add <8 x i16> %142, %140
  %144 = ashr <8 x i16> %143, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %145 = getelementptr inbounds i16, i16* %125, i64 %129
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %146, align 16
  %147 = add nuw nsw i64 %129, 8
  %148 = icmp slt i64 %147, %46
  br i1 %148, label %128, label %149

149:                                              ; preds = %128
  %150 = getelementptr inbounds i8, i8* %127, i64 %1
  %151 = getelementptr inbounds i16, i16* %125, i64 %46
  %152 = add nsw i32 %126, -1
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %398, label %124

154:                                              ; preds = %33
  %155 = bitcast <2 x i64> %52 to <16 x i8>
  %156 = shufflevector <16 x i8> %155, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %157 = bitcast <16 x i8> %156 to <8 x i16>
  %158 = icmp sgt i32 %6, 4
  br i1 %158, label %159, label %398

159:                                              ; preds = %154
  %160 = shufflevector <8 x i16> %157, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = bitcast <8 x i16> %160 to <2 x i64>
  %162 = shufflevector <2 x i64> %161, <2 x i64> undef, <2 x i32> zeroinitializer
  %163 = shufflevector <8 x i16> %157, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %164 = bitcast <8 x i16> %163 to <2 x i64>
  %165 = shufflevector <2 x i64> %164, <2 x i64> undef, <2 x i32> zeroinitializer
  %166 = shufflevector <8 x i16> %157, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %167 = bitcast <8 x i16> %166 to <2 x i64>
  %168 = shufflevector <2 x i64> %167, <2 x i64> undef, <2 x i32> zeroinitializer
  %169 = bitcast <2 x i64> %168 to <16 x i8>
  %170 = bitcast <2 x i64> %165 to <16 x i8>
  %171 = bitcast <2 x i64> %162 to <16 x i8>
  br label %172

172:                                              ; preds = %197, %159
  %173 = phi i16* [ %45, %159 ], [ %199, %197 ]
  %174 = phi i32 [ %37, %159 ], [ %200, %197 ]
  %175 = phi i8* [ %44, %159 ], [ %198, %197 ]
  br label %176

176:                                              ; preds = %176, %172
  %177 = phi i64 [ %195, %176 ], [ 0, %172 ]
  %178 = getelementptr inbounds i8, i8* %175, i64 %177
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1
  %181 = shufflevector <16 x i8> %180, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %182 = shufflevector <16 x i8> %180, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %183 = shufflevector <16 x i8> %181, <16 x i8> %182, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18>
  %184 = shufflevector <16 x i8> %181, <16 x i8> %182, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %185 = shufflevector <16 x i8> %181, <16 x i8> %182, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %186 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %183, <16 x i8> %169) #7
  %187 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %184, <16 x i8> %170) #7
  %188 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %185, <16 x i8> %171) #7
  %189 = add <8 x i16> %186, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %190 = add <8 x i16> %189, %187
  %191 = add <8 x i16> %190, %188
  %192 = ashr <8 x i16> %191, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %193 = getelementptr inbounds i16, i16* %173, i64 %177
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %194, align 16
  %195 = add nuw nsw i64 %177, 8
  %196 = icmp slt i64 %195, %46
  br i1 %196, label %176, label %197

197:                                              ; preds = %176
  %198 = getelementptr inbounds i8, i8* %175, i64 %1
  %199 = getelementptr inbounds i16, i16* %173, i64 %46
  %200 = add nsw i32 %174, -1
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %398, label %172

202:                                              ; preds = %33
  %203 = bitcast <2 x i64> %52 to <8 x i16>
  %204 = icmp eq i32 %6, 4
  br i1 %204, label %205, label %398

205:                                              ; preds = %202
  %206 = shufflevector <8 x i16> %203, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %207 = bitcast <8 x i16> %206 to <2 x i64>
  %208 = shufflevector <2 x i64> %207, <2 x i64> undef, <2 x i32> zeroinitializer
  %209 = shufflevector <8 x i16> %203, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %210 = bitcast <8 x i16> %209 to <2 x i64>
  %211 = shufflevector <2 x i64> %210, <2 x i64> undef, <2 x i32> zeroinitializer
  %212 = bitcast <2 x i64> %211 to <16 x i8>
  %213 = bitcast <2 x i64> %208 to <16 x i8>
  br label %214

214:                                              ; preds = %214, %205
  %215 = phi i16* [ %45, %205 ], [ %233, %214 ]
  %216 = phi i32 [ %37, %205 ], [ %234, %214 ]
  %217 = phi i8* [ %44, %205 ], [ %232, %214 ]
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = shufflevector <16 x i8> %219, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %221 = shufflevector <16 x i8> %219, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %222 = shufflevector <16 x i8> %220, <16 x i8> %221, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %223 = shufflevector <16 x i8> %220, <16 x i8> %221, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %224 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %222, <16 x i8> %212) #7
  %225 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %223, <16 x i8> %213) #7
  %226 = add <8 x i16> %224, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %227 = add <8 x i16> %226, %225
  %228 = ashr <8 x i16> %227, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %229 = bitcast <8 x i16> %228 to <2 x i64>
  %230 = extractelement <2 x i64> %229, i32 0
  %231 = bitcast i16* %215 to i64*
  store i64 %230, i64* %231, align 1
  %232 = getelementptr inbounds i8, i8* %217, i64 %1
  %233 = getelementptr inbounds i16, i16* %215, i64 %46
  %234 = add nsw i32 %216, -1
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %398, label %214

236:                                              ; preds = %33
  %237 = bitcast <2 x i64> %52 to <8 x i16>
  %238 = icmp eq i32 %6, 4
  br i1 %238, label %239, label %398

239:                                              ; preds = %236
  %240 = shufflevector <8 x i16> %237, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %241 = bitcast <8 x i16> %240 to <2 x i64>
  %242 = shufflevector <2 x i64> %241, <2 x i64> undef, <2 x i32> zeroinitializer
  %243 = shufflevector <8 x i16> %237, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %244 = bitcast <8 x i16> %243 to <2 x i64>
  %245 = shufflevector <2 x i64> %244, <2 x i64> undef, <2 x i32> zeroinitializer
  %246 = bitcast <2 x i64> %245 to <16 x i8>
  %247 = bitcast <2 x i64> %242 to <16 x i8>
  br label %248

248:                                              ; preds = %248, %239
  %249 = phi i16* [ %45, %239 ], [ %267, %248 ]
  %250 = phi i32 [ %37, %239 ], [ %268, %248 ]
  %251 = phi i8* [ %44, %239 ], [ %266, %248 ]
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1
  %254 = shufflevector <16 x i8> %253, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %255 = shufflevector <16 x i8> %253, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %256 = shufflevector <16 x i8> %254, <16 x i8> %255, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20>
  %257 = shufflevector <16 x i8> %254, <16 x i8> %255, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %258 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %256, <16 x i8> %246) #7
  %259 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %257, <16 x i8> %247) #7
  %260 = add <8 x i16> %258, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %261 = add <8 x i16> %260, %259
  %262 = ashr <8 x i16> %261, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %263 = bitcast <8 x i16> %262 to <2 x i64>
  %264 = extractelement <2 x i64> %263, i32 0
  %265 = bitcast i16* %249 to i64*
  store i64 %264, i64* %265, align 1
  %266 = getelementptr inbounds i8, i8* %251, i64 %1
  %267 = getelementptr inbounds i16, i16* %249, i64 %46
  %268 = add nsw i32 %250, -1
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %398, label %248

270:                                              ; preds = %33
  %271 = bitcast <2 x i64> %52 to <16 x i8>
  %272 = shufflevector <16 x i8> %271, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %273 = bitcast <16 x i8> %272 to <8 x i16>
  %274 = shufflevector <8 x i16> %273, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %275 = bitcast <8 x i16> %274 to <2 x i64>
  %276 = shufflevector <2 x i64> %275, <2 x i64> undef, <2 x i32> zeroinitializer
  %277 = icmp sgt i32 %6, 4
  br i1 %277, label %278, label %339

278:                                              ; preds = %270
  %279 = bitcast <2 x i64> %276 to <16 x i8>
  %280 = add nsw i64 %46, -1
  %281 = lshr i64 %280, 3
  %282 = add nuw nsw i64 %281, 1
  %283 = and i64 %282, 1
  %284 = icmp eq i64 %281, 0
  %285 = sub nuw nsw i64 %282, %283
  %286 = icmp eq i64 %283, 0
  br label %287

287:                                              ; preds = %334, %278
  %288 = phi i16* [ %336, %334 ], [ %45, %278 ]
  %289 = phi i32 [ %337, %334 ], [ %37, %278 ]
  %290 = phi i8* [ %335, %334 ], [ %44, %278 ]
  br i1 %284, label %320, label %291

291:                                              ; preds = %287, %291
  %292 = phi i64 [ %317, %291 ], [ 0, %287 ]
  %293 = phi i64 [ %318, %291 ], [ %285, %287 ]
  %294 = getelementptr inbounds i8, i8* %290, i64 %292
  %295 = bitcast i8* %294 to <16 x i8>*
  %296 = load <16 x i8>, <16 x i8>* %295, align 1
  %297 = shufflevector <16 x i8> %296, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %298 = shufflevector <16 x i8> %296, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %299 = shufflevector <16 x i8> %297, <16 x i8> %298, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %300 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %299, <16 x i8> %279) #7
  %301 = add <8 x i16> %300, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %302 = ashr <8 x i16> %301, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %303 = getelementptr inbounds i16, i16* %288, i64 %292
  %304 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %302, <8 x i16>* %304, align 16
  %305 = or i64 %292, 8
  %306 = getelementptr inbounds i8, i8* %290, i64 %305
  %307 = bitcast i8* %306 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1
  %309 = shufflevector <16 x i8> %308, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %310 = shufflevector <16 x i8> %308, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %311 = shufflevector <16 x i8> %309, <16 x i8> %310, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %312 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %311, <16 x i8> %279) #7
  %313 = add <8 x i16> %312, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %314 = ashr <8 x i16> %313, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %315 = getelementptr inbounds i16, i16* %288, i64 %305
  %316 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %314, <8 x i16>* %316, align 16
  %317 = add nuw nsw i64 %292, 16
  %318 = add i64 %293, -2
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %320, label %291

320:                                              ; preds = %291, %287
  %321 = phi i64 [ 0, %287 ], [ %317, %291 ]
  br i1 %286, label %334, label %322

322:                                              ; preds = %320
  %323 = getelementptr inbounds i8, i8* %290, i64 %321
  %324 = bitcast i8* %323 to <16 x i8>*
  %325 = load <16 x i8>, <16 x i8>* %324, align 1
  %326 = shufflevector <16 x i8> %325, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %327 = shufflevector <16 x i8> %325, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %328 = shufflevector <16 x i8> %326, <16 x i8> %327, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %329 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %328, <16 x i8> %279) #7
  %330 = add <8 x i16> %329, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %331 = ashr <8 x i16> %330, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %332 = getelementptr inbounds i16, i16* %288, i64 %321
  %333 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %333, align 16
  br label %334

334:                                              ; preds = %320, %322
  %335 = getelementptr inbounds i8, i8* %290, i64 %1
  %336 = getelementptr inbounds i16, i16* %288, i64 %46
  %337 = add nsw i32 %289, -1
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %398, label %287

339:                                              ; preds = %270
  %340 = icmp eq i32 %6, 4
  br i1 %340, label %341, label %398

341:                                              ; preds = %339
  %342 = bitcast <2 x i64> %276 to <16 x i8>
  %343 = add i32 %35, %7
  %344 = and i32 %37, 1
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %361, label %346

346:                                              ; preds = %341
  %347 = bitcast i8* %44 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1
  %349 = shufflevector <16 x i8> %348, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %350 = shufflevector <16 x i8> %348, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %351 = shufflevector <16 x i8> %349, <16 x i8> %350, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %352 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %351, <16 x i8> %342) #7
  %353 = add <8 x i16> %352, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %354 = ashr <8 x i16> %353, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %355 = bitcast <8 x i16> %354 to <2 x i64>
  %356 = extractelement <2 x i64> %355, i32 0
  %357 = bitcast [17280 x i16]* %11 to i64*
  store i64 %356, i64* %357, align 16
  %358 = getelementptr inbounds i8, i8* %44, i64 %1
  %359 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %46
  %360 = add nsw i32 %37, -1
  br label %361

361:                                              ; preds = %341, %346
  %362 = phi i16* [ %45, %341 ], [ %359, %346 ]
  %363 = phi i32 [ %37, %341 ], [ %360, %346 ]
  %364 = phi i8* [ %44, %341 ], [ %358, %346 ]
  %365 = icmp eq i32 %343, 2
  br i1 %365, label %398, label %366

366:                                              ; preds = %361, %366
  %367 = phi i16* [ %395, %366 ], [ %362, %361 ]
  %368 = phi i32 [ %396, %366 ], [ %363, %361 ]
  %369 = phi i8* [ %394, %366 ], [ %364, %361 ]
  %370 = bitcast i8* %369 to <16 x i8>*
  %371 = load <16 x i8>, <16 x i8>* %370, align 1
  %372 = shufflevector <16 x i8> %371, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %373 = shufflevector <16 x i8> %371, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %374 = shufflevector <16 x i8> %372, <16 x i8> %373, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %375 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %374, <16 x i8> %342) #7
  %376 = add <8 x i16> %375, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %377 = ashr <8 x i16> %376, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %378 = bitcast <8 x i16> %377 to <2 x i64>
  %379 = extractelement <2 x i64> %378, i32 0
  %380 = bitcast i16* %367 to i64*
  store i64 %379, i64* %380, align 1
  %381 = getelementptr inbounds i8, i8* %369, i64 %1
  %382 = getelementptr inbounds i16, i16* %367, i64 %46
  %383 = bitcast i8* %381 to <16 x i8>*
  %384 = load <16 x i8>, <16 x i8>* %383, align 1
  %385 = shufflevector <16 x i8> %384, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %386 = shufflevector <16 x i8> %384, <16 x i8> undef, <16 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %387 = shufflevector <16 x i8> %385, <16 x i8> %386, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22>
  %388 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %387, <16 x i8> %342) #7
  %389 = add <8 x i16> %388, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %390 = ashr <8 x i16> %389, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %391 = bitcast <8 x i16> %390 to <2 x i64>
  %392 = extractelement <2 x i64> %391, i32 0
  %393 = bitcast i16* %382 to i64*
  store i64 %392, i64* %393, align 1
  %394 = getelementptr inbounds i8, i8* %381, i64 %1
  %395 = getelementptr inbounds i16, i16* %382, i64 %46
  %396 = add nsw i32 %368, -2
  %397 = icmp eq i32 %396, 0
  br i1 %397, label %398, label %366

398:                                              ; preds = %248, %214, %197, %149, %101, %361, %366, %334, %53, %106, %154, %202, %236, %339
  %399 = sext i32 %34 to i64
  %400 = sext i32 %5 to i64
  %401 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %399, i64 %400, i64 0
  %402 = bitcast i8* %401 to i64*
  %403 = load i64, i64* %402, align 8
  %404 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %403, i32 0
  switch i32 %35, label %842 [
    i32 8, label %405
    i32 6, label %587
    i32 4, label %734
  ]

405:                                              ; preds = %398
  %406 = bitcast <2 x i64> %404 to <8 x i16>
  %407 = shufflevector <8 x i16> %406, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %408 = shufflevector <8 x i16> %406, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %409 = shufflevector <8 x i16> %406, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %410 = shufflevector <8 x i16> %406, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %411 = bitcast <8 x i16> %407 to <16 x i8>
  %412 = shufflevector <16 x i8> %411, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %413 = sext <8 x i8> %412 to <8 x i16>
  %414 = bitcast <8 x i16> %408 to <16 x i8>
  %415 = shufflevector <16 x i8> %414, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %416 = sext <8 x i8> %415 to <8 x i16>
  %417 = bitcast <8 x i16> %409 to <16 x i8>
  %418 = shufflevector <16 x i8> %417, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %419 = sext <8 x i8> %418 to <8 x i16>
  %420 = bitcast <8 x i16> %410 to <16 x i8>
  %421 = shufflevector <16 x i8> %420, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %422 = sext <8 x i8> %421 to <8 x i16>
  %423 = icmp eq i32 %6, 4
  %424 = bitcast i8* %8 to i16*
  br i1 %423, label %425, label %507

425:                                              ; preds = %405
  %426 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %427 = load <2 x i64>, <2 x i64>* %426, align 16
  %428 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 8
  %429 = bitcast i16* %428 to <2 x i64>*
  %430 = load <2 x i64>, <2 x i64>* %429, align 16
  %431 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 16
  %432 = bitcast <2 x i64> %427 to <16 x i8>
  %433 = shufflevector <16 x i8> %432, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %434 = bitcast <16 x i8> %433 to <2 x i64>
  %435 = shufflevector <2 x i64> %434, <2 x i64> %430, <2 x i32> <i32 0, i32 2>
  %436 = bitcast i16* %431 to <2 x i64>*
  %437 = load <2 x i64>, <2 x i64>* %436, align 16
  %438 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 24
  %439 = bitcast <2 x i64> %430 to <16 x i8>
  %440 = shufflevector <16 x i8> %439, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %441 = bitcast <16 x i8> %440 to <2 x i64>
  %442 = shufflevector <2 x i64> %441, <2 x i64> %437, <2 x i32> <i32 0, i32 2>
  %443 = bitcast i16* %438 to <2 x i64>*
  %444 = load <2 x i64>, <2 x i64>* %443, align 16
  %445 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 32
  %446 = bitcast <2 x i64> %437 to <16 x i8>
  %447 = shufflevector <16 x i8> %446, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %448 = bitcast <16 x i8> %447 to <2 x i64>
  %449 = shufflevector <2 x i64> %448, <2 x i64> %444, <2 x i32> <i32 0, i32 2>
  br label %450

450:                                              ; preds = %450, %425
  %451 = phi <2 x i64> [ %444, %425 ], [ %462, %450 ]
  %452 = phi <2 x i64> [ %449, %425 ], [ %467, %450 ]
  %453 = phi <2 x i64> [ %437, %425 ], [ %451, %450 ]
  %454 = phi <2 x i64> [ %442, %425 ], [ %452, %450 ]
  %455 = phi <2 x i64> [ %430, %425 ], [ %453, %450 ]
  %456 = phi <2 x i64> [ %435, %425 ], [ %454, %450 ]
  %457 = phi <2 x i64> [ %427, %425 ], [ %455, %450 ]
  %458 = phi i16* [ %424, %425 ], [ %504, %450 ]
  %459 = phi i32 [ %7, %425 ], [ %505, %450 ]
  %460 = phi i16* [ %445, %425 ], [ %463, %450 ]
  %461 = bitcast i16* %460 to <2 x i64>*
  %462 = load <2 x i64>, <2 x i64>* %461, align 16
  %463 = getelementptr inbounds i16, i16* %460, i64 8
  %464 = bitcast <2 x i64> %451 to <16 x i8>
  %465 = shufflevector <16 x i8> %464, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %466 = bitcast <16 x i8> %465 to <2 x i64>
  %467 = shufflevector <2 x i64> %466, <2 x i64> %462, <2 x i32> <i32 0, i32 2>
  %468 = bitcast <2 x i64> %457 to <8 x i16>
  %469 = bitcast <2 x i64> %456 to <8 x i16>
  %470 = shufflevector <8 x i16> %468, <8 x i16> %469, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %471 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %470, <8 x i16> %413) #7
  %472 = shufflevector <8 x i16> %468, <8 x i16> %469, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %473 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %472, <8 x i16> %413) #7
  %474 = bitcast <2 x i64> %455 to <8 x i16>
  %475 = bitcast <2 x i64> %454 to <8 x i16>
  %476 = shufflevector <8 x i16> %474, <8 x i16> %475, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %477 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %476, <8 x i16> %416) #7
  %478 = shufflevector <8 x i16> %474, <8 x i16> %475, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %479 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %478, <8 x i16> %416) #7
  %480 = bitcast <2 x i64> %453 to <8 x i16>
  %481 = bitcast <2 x i64> %452 to <8 x i16>
  %482 = shufflevector <8 x i16> %480, <8 x i16> %481, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %483 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %482, <8 x i16> %419) #7
  %484 = shufflevector <8 x i16> %480, <8 x i16> %481, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %485 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %484, <8 x i16> %419) #7
  %486 = bitcast <2 x i64> %451 to <8 x i16>
  %487 = bitcast <2 x i64> %467 to <8 x i16>
  %488 = shufflevector <8 x i16> %486, <8 x i16> %487, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %489 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %488, <8 x i16> %422) #7
  %490 = shufflevector <8 x i16> %486, <8 x i16> %487, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %491 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %490, <8 x i16> %422) #7
  %492 = add <4 x i32> %471, <i32 32, i32 32, i32 32, i32 32>
  %493 = add <4 x i32> %492, %477
  %494 = add <4 x i32> %493, %483
  %495 = add <4 x i32> %494, %489
  %496 = ashr <4 x i32> %495, <i32 6, i32 6, i32 6, i32 6>
  %497 = add <4 x i32> %473, <i32 32, i32 32, i32 32, i32 32>
  %498 = add <4 x i32> %497, %479
  %499 = add <4 x i32> %498, %485
  %500 = add <4 x i32> %499, %491
  %501 = ashr <4 x i32> %500, <i32 6, i32 6, i32 6, i32 6>
  %502 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %496, <4 x i32> %501) #7
  %503 = bitcast i16* %458 to <8 x i16>*
  store <8 x i16> %502, <8 x i16>* %503, align 1
  %504 = getelementptr inbounds i16, i16* %458, i64 8
  %505 = add nsw i32 %459, -2
  %506 = icmp eq i32 %505, 0
  br i1 %506, label %914, label %450

507:                                              ; preds = %405, %584
  %508 = phi i64 [ %585, %584 ], [ 0, %405 ]
  %509 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %508
  %510 = bitcast i16* %509 to <2 x i64>*
  %511 = load <2 x i64>, <2 x i64>* %510, align 16
  %512 = getelementptr inbounds i16, i16* %509, i64 %46
  %513 = bitcast i16* %512 to <2 x i64>*
  %514 = load <2 x i64>, <2 x i64>* %513, align 16
  %515 = getelementptr inbounds i16, i16* %512, i64 %46
  %516 = bitcast i16* %515 to <2 x i64>*
  %517 = load <2 x i64>, <2 x i64>* %516, align 16
  %518 = getelementptr inbounds i16, i16* %515, i64 %46
  %519 = bitcast i16* %518 to <2 x i64>*
  %520 = load <2 x i64>, <2 x i64>* %519, align 16
  %521 = getelementptr inbounds i16, i16* %518, i64 %46
  %522 = bitcast i16* %521 to <2 x i64>*
  %523 = load <2 x i64>, <2 x i64>* %522, align 16
  %524 = getelementptr inbounds i16, i16* %521, i64 %46
  %525 = bitcast i16* %524 to <2 x i64>*
  %526 = load <2 x i64>, <2 x i64>* %525, align 16
  %527 = getelementptr inbounds i16, i16* %524, i64 %46
  %528 = bitcast i16* %527 to <2 x i64>*
  %529 = load <2 x i64>, <2 x i64>* %528, align 16
  %530 = getelementptr inbounds i16, i16* %424, i64 %508
  br label %531

531:                                              ; preds = %531, %507
  %532 = phi <2 x i64> [ %529, %507 ], [ %544, %531 ]
  %533 = phi <2 x i64> [ %526, %507 ], [ %532, %531 ]
  %534 = phi <2 x i64> [ %523, %507 ], [ %533, %531 ]
  %535 = phi <2 x i64> [ %520, %507 ], [ %534, %531 ]
  %536 = phi <2 x i64> [ %517, %507 ], [ %535, %531 ]
  %537 = phi <2 x i64> [ %514, %507 ], [ %536, %531 ]
  %538 = phi <2 x i64> [ %511, %507 ], [ %537, %531 ]
  %539 = phi i16* [ %527, %507 ], [ %542, %531 ]
  %540 = phi i16* [ %530, %507 ], [ %581, %531 ]
  %541 = phi i32 [ %7, %507 ], [ %582, %531 ]
  %542 = getelementptr inbounds i16, i16* %539, i64 %46
  %543 = bitcast i16* %542 to <2 x i64>*
  %544 = load <2 x i64>, <2 x i64>* %543, align 16
  %545 = bitcast <2 x i64> %538 to <8 x i16>
  %546 = bitcast <2 x i64> %537 to <8 x i16>
  %547 = shufflevector <8 x i16> %545, <8 x i16> %546, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %548 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %547, <8 x i16> %413) #7
  %549 = shufflevector <8 x i16> %545, <8 x i16> %546, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %550 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %549, <8 x i16> %413) #7
  %551 = bitcast <2 x i64> %536 to <8 x i16>
  %552 = bitcast <2 x i64> %535 to <8 x i16>
  %553 = shufflevector <8 x i16> %551, <8 x i16> %552, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %554 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %553, <8 x i16> %416) #7
  %555 = shufflevector <8 x i16> %551, <8 x i16> %552, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %556 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %555, <8 x i16> %416) #7
  %557 = bitcast <2 x i64> %534 to <8 x i16>
  %558 = bitcast <2 x i64> %533 to <8 x i16>
  %559 = shufflevector <8 x i16> %557, <8 x i16> %558, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %560 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %559, <8 x i16> %419) #7
  %561 = shufflevector <8 x i16> %557, <8 x i16> %558, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %562 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %561, <8 x i16> %419) #7
  %563 = bitcast <2 x i64> %532 to <8 x i16>
  %564 = bitcast <2 x i64> %544 to <8 x i16>
  %565 = shufflevector <8 x i16> %563, <8 x i16> %564, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %566 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %565, <8 x i16> %422) #7
  %567 = shufflevector <8 x i16> %563, <8 x i16> %564, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %568 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %567, <8 x i16> %422) #7
  %569 = add <4 x i32> %548, <i32 32, i32 32, i32 32, i32 32>
  %570 = add <4 x i32> %569, %554
  %571 = add <4 x i32> %570, %560
  %572 = add <4 x i32> %571, %566
  %573 = ashr <4 x i32> %572, <i32 6, i32 6, i32 6, i32 6>
  %574 = add <4 x i32> %550, <i32 32, i32 32, i32 32, i32 32>
  %575 = add <4 x i32> %574, %556
  %576 = add <4 x i32> %575, %562
  %577 = add <4 x i32> %576, %568
  %578 = ashr <4 x i32> %577, <i32 6, i32 6, i32 6, i32 6>
  %579 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %573, <4 x i32> %578) #7
  %580 = bitcast i16* %540 to <8 x i16>*
  store <8 x i16> %579, <8 x i16>* %580, align 1
  %581 = getelementptr inbounds i16, i16* %540, i64 %46
  %582 = add nsw i32 %541, -1
  %583 = icmp eq i32 %582, 0
  br i1 %583, label %584, label %531

584:                                              ; preds = %531
  %585 = add nuw nsw i64 %508, 8
  %586 = icmp slt i64 %585, %46
  br i1 %586, label %507, label %914

587:                                              ; preds = %398
  %588 = bitcast <2 x i64> %404 to <16 x i8>
  %589 = shufflevector <16 x i8> %588, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %590 = bitcast <16 x i8> %589 to <8 x i16>
  %591 = shufflevector <8 x i16> %590, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %592 = shufflevector <8 x i16> %590, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %593 = shufflevector <8 x i16> %590, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %594 = bitcast <8 x i16> %591 to <16 x i8>
  %595 = shufflevector <16 x i8> %594, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %596 = sext <8 x i8> %595 to <8 x i16>
  %597 = bitcast <8 x i16> %592 to <16 x i8>
  %598 = shufflevector <16 x i8> %597, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %599 = sext <8 x i8> %598 to <8 x i16>
  %600 = bitcast <8 x i16> %593 to <16 x i8>
  %601 = shufflevector <16 x i8> %600, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %602 = sext <8 x i8> %601 to <8 x i16>
  %603 = icmp eq i32 %6, 4
  %604 = bitcast i8* %8 to i16*
  br i1 %603, label %605, label %670

605:                                              ; preds = %587
  %606 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %607 = load <2 x i64>, <2 x i64>* %606, align 16
  %608 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 8
  %609 = bitcast i16* %608 to <2 x i64>*
  %610 = load <2 x i64>, <2 x i64>* %609, align 16
  %611 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 16
  %612 = bitcast <2 x i64> %607 to <16 x i8>
  %613 = shufflevector <16 x i8> %612, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %614 = bitcast <16 x i8> %613 to <2 x i64>
  %615 = shufflevector <2 x i64> %614, <2 x i64> %610, <2 x i32> <i32 0, i32 2>
  %616 = bitcast i16* %611 to <2 x i64>*
  %617 = load <2 x i64>, <2 x i64>* %616, align 16
  %618 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 24
  %619 = bitcast <2 x i64> %610 to <16 x i8>
  %620 = shufflevector <16 x i8> %619, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %621 = bitcast <16 x i8> %620 to <2 x i64>
  %622 = shufflevector <2 x i64> %621, <2 x i64> %617, <2 x i32> <i32 0, i32 2>
  br label %623

623:                                              ; preds = %623, %605
  %624 = phi <2 x i64> [ %617, %605 ], [ %633, %623 ]
  %625 = phi <2 x i64> [ %622, %605 ], [ %638, %623 ]
  %626 = phi <2 x i64> [ %610, %605 ], [ %624, %623 ]
  %627 = phi <2 x i64> [ %615, %605 ], [ %625, %623 ]
  %628 = phi <2 x i64> [ %607, %605 ], [ %626, %623 ]
  %629 = phi i16* [ %604, %605 ], [ %667, %623 ]
  %630 = phi i32 [ %7, %605 ], [ %668, %623 ]
  %631 = phi i16* [ %618, %605 ], [ %634, %623 ]
  %632 = bitcast i16* %631 to <2 x i64>*
  %633 = load <2 x i64>, <2 x i64>* %632, align 16
  %634 = getelementptr inbounds i16, i16* %631, i64 8
  %635 = bitcast <2 x i64> %624 to <16 x i8>
  %636 = shufflevector <16 x i8> %635, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %637 = bitcast <16 x i8> %636 to <2 x i64>
  %638 = shufflevector <2 x i64> %637, <2 x i64> %633, <2 x i32> <i32 0, i32 2>
  %639 = bitcast <2 x i64> %628 to <8 x i16>
  %640 = bitcast <2 x i64> %627 to <8 x i16>
  %641 = shufflevector <8 x i16> %639, <8 x i16> %640, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %642 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %641, <8 x i16> %596) #7
  %643 = shufflevector <8 x i16> %639, <8 x i16> %640, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %644 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %643, <8 x i16> %596) #7
  %645 = bitcast <2 x i64> %626 to <8 x i16>
  %646 = bitcast <2 x i64> %625 to <8 x i16>
  %647 = shufflevector <8 x i16> %645, <8 x i16> %646, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %648 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %647, <8 x i16> %599) #7
  %649 = shufflevector <8 x i16> %645, <8 x i16> %646, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %650 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %649, <8 x i16> %599) #7
  %651 = bitcast <2 x i64> %624 to <8 x i16>
  %652 = bitcast <2 x i64> %638 to <8 x i16>
  %653 = shufflevector <8 x i16> %651, <8 x i16> %652, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %654 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %653, <8 x i16> %602) #7
  %655 = shufflevector <8 x i16> %651, <8 x i16> %652, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %656 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %655, <8 x i16> %602) #7
  %657 = add <4 x i32> %642, <i32 32, i32 32, i32 32, i32 32>
  %658 = add <4 x i32> %657, %648
  %659 = add <4 x i32> %658, %654
  %660 = ashr <4 x i32> %659, <i32 6, i32 6, i32 6, i32 6>
  %661 = add <4 x i32> %644, <i32 32, i32 32, i32 32, i32 32>
  %662 = add <4 x i32> %661, %650
  %663 = add <4 x i32> %662, %656
  %664 = ashr <4 x i32> %663, <i32 6, i32 6, i32 6, i32 6>
  %665 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %660, <4 x i32> %664) #7
  %666 = bitcast i16* %629 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %666, align 1
  %667 = getelementptr inbounds i16, i16* %629, i64 8
  %668 = add nsw i32 %630, -2
  %669 = icmp eq i32 %668, 0
  br i1 %669, label %914, label %623

670:                                              ; preds = %587, %731
  %671 = phi i64 [ %732, %731 ], [ 0, %587 ]
  %672 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %671
  %673 = bitcast i16* %672 to <2 x i64>*
  %674 = load <2 x i64>, <2 x i64>* %673, align 16
  %675 = getelementptr inbounds i16, i16* %672, i64 %46
  %676 = bitcast i16* %675 to <2 x i64>*
  %677 = load <2 x i64>, <2 x i64>* %676, align 16
  %678 = getelementptr inbounds i16, i16* %675, i64 %46
  %679 = bitcast i16* %678 to <2 x i64>*
  %680 = load <2 x i64>, <2 x i64>* %679, align 16
  %681 = getelementptr inbounds i16, i16* %678, i64 %46
  %682 = bitcast i16* %681 to <2 x i64>*
  %683 = load <2 x i64>, <2 x i64>* %682, align 16
  %684 = getelementptr inbounds i16, i16* %681, i64 %46
  %685 = bitcast i16* %684 to <2 x i64>*
  %686 = load <2 x i64>, <2 x i64>* %685, align 16
  %687 = getelementptr inbounds i16, i16* %604, i64 %671
  br label %688

688:                                              ; preds = %688, %670
  %689 = phi <2 x i64> [ %686, %670 ], [ %699, %688 ]
  %690 = phi <2 x i64> [ %683, %670 ], [ %689, %688 ]
  %691 = phi <2 x i64> [ %680, %670 ], [ %690, %688 ]
  %692 = phi <2 x i64> [ %677, %670 ], [ %691, %688 ]
  %693 = phi <2 x i64> [ %674, %670 ], [ %692, %688 ]
  %694 = phi i16* [ %684, %670 ], [ %697, %688 ]
  %695 = phi i16* [ %687, %670 ], [ %728, %688 ]
  %696 = phi i32 [ %7, %670 ], [ %729, %688 ]
  %697 = getelementptr inbounds i16, i16* %694, i64 %46
  %698 = bitcast i16* %697 to <2 x i64>*
  %699 = load <2 x i64>, <2 x i64>* %698, align 16
  %700 = bitcast <2 x i64> %693 to <8 x i16>
  %701 = bitcast <2 x i64> %692 to <8 x i16>
  %702 = shufflevector <8 x i16> %700, <8 x i16> %701, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %703 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %702, <8 x i16> %596) #7
  %704 = shufflevector <8 x i16> %700, <8 x i16> %701, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %705 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %704, <8 x i16> %596) #7
  %706 = bitcast <2 x i64> %691 to <8 x i16>
  %707 = bitcast <2 x i64> %690 to <8 x i16>
  %708 = shufflevector <8 x i16> %706, <8 x i16> %707, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %709 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %708, <8 x i16> %599) #7
  %710 = shufflevector <8 x i16> %706, <8 x i16> %707, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %711 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %710, <8 x i16> %599) #7
  %712 = bitcast <2 x i64> %689 to <8 x i16>
  %713 = bitcast <2 x i64> %699 to <8 x i16>
  %714 = shufflevector <8 x i16> %712, <8 x i16> %713, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %715 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %714, <8 x i16> %602) #7
  %716 = shufflevector <8 x i16> %712, <8 x i16> %713, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %717 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %716, <8 x i16> %602) #7
  %718 = add <4 x i32> %703, <i32 32, i32 32, i32 32, i32 32>
  %719 = add <4 x i32> %718, %709
  %720 = add <4 x i32> %719, %715
  %721 = ashr <4 x i32> %720, <i32 6, i32 6, i32 6, i32 6>
  %722 = add <4 x i32> %705, <i32 32, i32 32, i32 32, i32 32>
  %723 = add <4 x i32> %722, %711
  %724 = add <4 x i32> %723, %717
  %725 = ashr <4 x i32> %724, <i32 6, i32 6, i32 6, i32 6>
  %726 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %721, <4 x i32> %725) #7
  %727 = bitcast i16* %695 to <8 x i16>*
  store <8 x i16> %726, <8 x i16>* %727, align 1
  %728 = getelementptr inbounds i16, i16* %695, i64 %46
  %729 = add nsw i32 %696, -1
  %730 = icmp eq i32 %729, 0
  br i1 %730, label %731, label %688

731:                                              ; preds = %688
  %732 = add nuw nsw i64 %671, 8
  %733 = icmp slt i64 %732, %46
  br i1 %733, label %670, label %914

734:                                              ; preds = %398
  %735 = bitcast <2 x i64> %404 to <8 x i16>
  %736 = shufflevector <8 x i16> %735, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %737 = shufflevector <8 x i16> %735, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 undef>
  %738 = bitcast <8 x i16> %736 to <16 x i8>
  %739 = shufflevector <16 x i8> %738, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %740 = sext <8 x i8> %739 to <8 x i16>
  %741 = bitcast <8 x i16> %737 to <16 x i8>
  %742 = shufflevector <16 x i8> %741, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %743 = sext <8 x i8> %742 to <8 x i16>
  %744 = icmp eq i32 %6, 4
  %745 = bitcast i8* %8 to i16*
  br i1 %744, label %746, label %794

746:                                              ; preds = %734
  %747 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %748 = load <2 x i64>, <2 x i64>* %747, align 16
  %749 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 8
  %750 = bitcast i16* %749 to <2 x i64>*
  %751 = load <2 x i64>, <2 x i64>* %750, align 16
  %752 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 16
  %753 = bitcast <2 x i64> %748 to <16 x i8>
  %754 = shufflevector <16 x i8> %753, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %755 = bitcast <16 x i8> %754 to <2 x i64>
  %756 = shufflevector <2 x i64> %755, <2 x i64> %751, <2 x i32> <i32 0, i32 2>
  br label %757

757:                                              ; preds = %757, %746
  %758 = phi <2 x i64> [ %751, %746 ], [ %765, %757 ]
  %759 = phi <2 x i64> [ %756, %746 ], [ %770, %757 ]
  %760 = phi <2 x i64> [ %748, %746 ], [ %758, %757 ]
  %761 = phi i16* [ %745, %746 ], [ %791, %757 ]
  %762 = phi i32 [ %7, %746 ], [ %792, %757 ]
  %763 = phi i16* [ %752, %746 ], [ %766, %757 ]
  %764 = bitcast i16* %763 to <2 x i64>*
  %765 = load <2 x i64>, <2 x i64>* %764, align 16
  %766 = getelementptr inbounds i16, i16* %763, i64 8
  %767 = bitcast <2 x i64> %758 to <16 x i8>
  %768 = shufflevector <16 x i8> %767, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %769 = bitcast <16 x i8> %768 to <2 x i64>
  %770 = shufflevector <2 x i64> %769, <2 x i64> %765, <2 x i32> <i32 0, i32 2>
  %771 = bitcast <2 x i64> %760 to <8 x i16>
  %772 = bitcast <2 x i64> %759 to <8 x i16>
  %773 = shufflevector <8 x i16> %771, <8 x i16> %772, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %774 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %773, <8 x i16> %740) #7
  %775 = shufflevector <8 x i16> %771, <8 x i16> %772, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %776 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %775, <8 x i16> %740) #7
  %777 = bitcast <2 x i64> %758 to <8 x i16>
  %778 = bitcast <2 x i64> %770 to <8 x i16>
  %779 = shufflevector <8 x i16> %777, <8 x i16> %778, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %780 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %779, <8 x i16> %743) #7
  %781 = shufflevector <8 x i16> %777, <8 x i16> %778, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %782 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %781, <8 x i16> %743) #7
  %783 = add <4 x i32> %774, <i32 32, i32 32, i32 32, i32 32>
  %784 = add <4 x i32> %783, %780
  %785 = ashr <4 x i32> %784, <i32 6, i32 6, i32 6, i32 6>
  %786 = add <4 x i32> %776, <i32 32, i32 32, i32 32, i32 32>
  %787 = add <4 x i32> %786, %782
  %788 = ashr <4 x i32> %787, <i32 6, i32 6, i32 6, i32 6>
  %789 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %785, <4 x i32> %788) #7
  %790 = bitcast i16* %761 to <8 x i16>*
  store <8 x i16> %789, <8 x i16>* %790, align 1
  %791 = getelementptr inbounds i16, i16* %761, i64 8
  %792 = add nsw i32 %762, -2
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %914, label %757

794:                                              ; preds = %734, %839
  %795 = phi i64 [ %840, %839 ], [ 0, %734 ]
  %796 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %795
  %797 = bitcast i16* %796 to <2 x i64>*
  %798 = load <2 x i64>, <2 x i64>* %797, align 16
  %799 = getelementptr inbounds i16, i16* %796, i64 %46
  %800 = bitcast i16* %799 to <2 x i64>*
  %801 = load <2 x i64>, <2 x i64>* %800, align 16
  %802 = getelementptr inbounds i16, i16* %799, i64 %46
  %803 = bitcast i16* %802 to <2 x i64>*
  %804 = load <2 x i64>, <2 x i64>* %803, align 16
  %805 = getelementptr inbounds i16, i16* %745, i64 %795
  br label %806

806:                                              ; preds = %806, %794
  %807 = phi <2 x i64> [ %804, %794 ], [ %815, %806 ]
  %808 = phi <2 x i64> [ %801, %794 ], [ %807, %806 ]
  %809 = phi <2 x i64> [ %798, %794 ], [ %808, %806 ]
  %810 = phi i16* [ %802, %794 ], [ %813, %806 ]
  %811 = phi i16* [ %805, %794 ], [ %836, %806 ]
  %812 = phi i32 [ %7, %794 ], [ %837, %806 ]
  %813 = getelementptr inbounds i16, i16* %810, i64 %46
  %814 = bitcast i16* %813 to <2 x i64>*
  %815 = load <2 x i64>, <2 x i64>* %814, align 16
  %816 = bitcast <2 x i64> %809 to <8 x i16>
  %817 = bitcast <2 x i64> %808 to <8 x i16>
  %818 = shufflevector <8 x i16> %816, <8 x i16> %817, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %819 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %818, <8 x i16> %740) #7
  %820 = shufflevector <8 x i16> %816, <8 x i16> %817, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %821 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %820, <8 x i16> %740) #7
  %822 = bitcast <2 x i64> %807 to <8 x i16>
  %823 = bitcast <2 x i64> %815 to <8 x i16>
  %824 = shufflevector <8 x i16> %822, <8 x i16> %823, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %825 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %824, <8 x i16> %743) #7
  %826 = shufflevector <8 x i16> %822, <8 x i16> %823, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %827 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %826, <8 x i16> %743) #7
  %828 = add <4 x i32> %819, <i32 32, i32 32, i32 32, i32 32>
  %829 = add <4 x i32> %828, %825
  %830 = ashr <4 x i32> %829, <i32 6, i32 6, i32 6, i32 6>
  %831 = add <4 x i32> %821, <i32 32, i32 32, i32 32, i32 32>
  %832 = add <4 x i32> %831, %827
  %833 = ashr <4 x i32> %832, <i32 6, i32 6, i32 6, i32 6>
  %834 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %830, <4 x i32> %833) #7
  %835 = bitcast i16* %811 to <8 x i16>*
  store <8 x i16> %834, <8 x i16>* %835, align 1
  %836 = getelementptr inbounds i16, i16* %811, i64 %46
  %837 = add nsw i32 %812, -1
  %838 = icmp eq i32 %837, 0
  br i1 %838, label %839, label %806

839:                                              ; preds = %806
  %840 = add nuw nsw i64 %795, 8
  %841 = icmp slt i64 %840, %46
  br i1 %841, label %794, label %914

842:                                              ; preds = %398
  %843 = bitcast <2 x i64> %404 to <16 x i8>
  %844 = shufflevector <16 x i8> %843, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %845 = bitcast <16 x i8> %844 to <8 x i16>
  %846 = shufflevector <8 x i16> %845, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %847 = bitcast <8 x i16> %846 to <16 x i8>
  %848 = shufflevector <16 x i8> %847, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %849 = sext <8 x i8> %848 to <8 x i16>
  %850 = icmp eq i32 %6, 4
  %851 = bitcast i8* %8 to i16*
  br i1 %850, label %852, label %882

852:                                              ; preds = %842
  %853 = bitcast [17280 x i16]* %11 to <2 x i64>*
  %854 = load <2 x i64>, <2 x i64>* %853, align 16
  br label %855

855:                                              ; preds = %855, %852
  %856 = phi <2 x i64> [ %854, %852 ], [ %862, %855 ]
  %857 = phi i16* [ %851, %852 ], [ %879, %855 ]
  %858 = phi i32 [ %7, %852 ], [ %880, %855 ]
  %859 = phi i16* [ %45, %852 ], [ %860, %855 ]
  %860 = getelementptr inbounds i16, i16* %859, i64 8
  %861 = bitcast i16* %860 to <2 x i64>*
  %862 = load <2 x i64>, <2 x i64>* %861, align 16
  %863 = bitcast <2 x i64> %856 to <16 x i8>
  %864 = shufflevector <16 x i8> %863, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %865 = bitcast <16 x i8> %864 to <2 x i64>
  %866 = shufflevector <2 x i64> %865, <2 x i64> %862, <2 x i32> <i32 0, i32 2>
  %867 = bitcast <2 x i64> %856 to <8 x i16>
  %868 = bitcast <2 x i64> %866 to <8 x i16>
  %869 = shufflevector <8 x i16> %867, <8 x i16> %868, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %870 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %869, <8 x i16> %849) #7
  %871 = shufflevector <8 x i16> %867, <8 x i16> %868, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %872 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %871, <8 x i16> %849) #7
  %873 = add <4 x i32> %870, <i32 32, i32 32, i32 32, i32 32>
  %874 = ashr <4 x i32> %873, <i32 6, i32 6, i32 6, i32 6>
  %875 = add <4 x i32> %872, <i32 32, i32 32, i32 32, i32 32>
  %876 = ashr <4 x i32> %875, <i32 6, i32 6, i32 6, i32 6>
  %877 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %874, <4 x i32> %876) #7
  %878 = bitcast i16* %857 to <8 x i16>*
  store <8 x i16> %877, <8 x i16>* %878, align 1
  %879 = getelementptr inbounds i16, i16* %857, i64 8
  %880 = add nsw i32 %858, -2
  %881 = icmp eq i32 %880, 0
  br i1 %881, label %914, label %855

882:                                              ; preds = %842, %911
  %883 = phi i64 [ %912, %911 ], [ 0, %842 ]
  %884 = getelementptr inbounds [17280 x i16], [17280 x i16]* %11, i64 0, i64 %883
  %885 = bitcast i16* %884 to <2 x i64>*
  %886 = load <2 x i64>, <2 x i64>* %885, align 16
  %887 = getelementptr inbounds i16, i16* %851, i64 %883
  br label %888

888:                                              ; preds = %888, %882
  %889 = phi <2 x i64> [ %886, %882 ], [ %895, %888 ]
  %890 = phi i16* [ %884, %882 ], [ %893, %888 ]
  %891 = phi i16* [ %887, %882 ], [ %908, %888 ]
  %892 = phi i32 [ %7, %882 ], [ %909, %888 ]
  %893 = getelementptr inbounds i16, i16* %890, i64 %46
  %894 = bitcast i16* %893 to <2 x i64>*
  %895 = load <2 x i64>, <2 x i64>* %894, align 16
  %896 = bitcast <2 x i64> %889 to <8 x i16>
  %897 = bitcast <2 x i64> %895 to <8 x i16>
  %898 = shufflevector <8 x i16> %896, <8 x i16> %897, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %899 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %898, <8 x i16> %849) #7
  %900 = shufflevector <8 x i16> %896, <8 x i16> %897, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %901 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %900, <8 x i16> %849) #7
  %902 = add <4 x i32> %899, <i32 32, i32 32, i32 32, i32 32>
  %903 = ashr <4 x i32> %902, <i32 6, i32 6, i32 6, i32 6>
  %904 = add <4 x i32> %901, <i32 32, i32 32, i32 32, i32 32>
  %905 = ashr <4 x i32> %904, <i32 6, i32 6, i32 6, i32 6>
  %906 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %903, <4 x i32> %905) #7
  %907 = bitcast i16* %891 to <8 x i16>*
  store <8 x i16> %906, <8 x i16>* %907, align 1
  %908 = getelementptr inbounds i16, i16* %891, i64 %46
  %909 = add nsw i32 %892, -1
  %910 = icmp eq i32 %909, 0
  br i1 %910, label %911, label %888

911:                                              ; preds = %888
  %912 = add nuw nsw i64 %883, 8
  %913 = icmp slt i64 %912, %46
  br i1 %913, label %882, label %914

914:                                              ; preds = %839, %757, %731, %623, %584, %450, %911, %855
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %12) #7
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_139ConvolveIntraBlockCopyHorizontal_SSE4_1EPKvliiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  switch i32 %6, label %366 [
    i32 128, label %90
    i32 64, label %168
    i32 32, label %62
    i32 16, label %36
    i32 8, label %11
    i32 4, label %330
  ]

11:                                               ; preds = %10
  %12 = and i32 %7, 1
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %31, label %14

14:                                               ; preds = %11
  %15 = bitcast i8* %0 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %16, i32 0
  %18 = getelementptr inbounds i8, i8* %0, i64 1
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %20, i32 0
  %22 = bitcast <2 x i64> %17 to <16 x i8>
  %23 = bitcast <2 x i64> %21 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %22, <16 x i8> %23) #7
  %25 = bitcast <16 x i8> %24 to <2 x i64>
  %26 = extractelement <2 x i64> %25, i32 0
  %27 = bitcast i8* %8 to i64*
  store i64 %26, i64* %27, align 1
  %28 = getelementptr inbounds i8, i8* %0, i64 %1
  %29 = getelementptr inbounds i8, i8* %8, i64 %9
  %30 = add nsw i32 %7, -1
  br label %31

31:                                               ; preds = %11, %14
  %32 = phi i32 [ %7, %11 ], [ %30, %14 ]
  %33 = phi i8* [ %8, %11 ], [ %29, %14 ]
  %34 = phi i8* [ %0, %11 ], [ %28, %14 ]
  %35 = icmp eq i32 %7, 1
  br i1 %35, label %404, label %294

36:                                               ; preds = %10
  %37 = add nsw i32 %7, -1
  %38 = and i32 %7, 3
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %57, label %40

40:                                               ; preds = %36, %40
  %41 = phi i8* [ %53, %40 ], [ %8, %36 ]
  %42 = phi i8* [ %52, %40 ], [ %0, %36 ]
  %43 = phi i32 [ %54, %40 ], [ %7, %36 ]
  %44 = phi i32 [ %55, %40 ], [ %38, %36 ]
  %45 = bitcast i8* %42 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = getelementptr inbounds i8, i8* %42, i64 1
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1
  %50 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %46, <16 x i8> %49) #7
  %51 = bitcast i8* %41 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %42, i64 %1
  %53 = getelementptr inbounds i8, i8* %41, i64 %9
  %54 = add nsw i32 %43, -1
  %55 = add i32 %44, -1
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %40, !llvm.loop !2

57:                                               ; preds = %40, %36
  %58 = phi i8* [ %8, %36 ], [ %53, %40 ]
  %59 = phi i8* [ %0, %36 ], [ %52, %40 ]
  %60 = phi i32 [ %7, %36 ], [ %54, %40 ]
  %61 = icmp ult i32 %37, 3
  br i1 %61, label %404, label %252

62:                                               ; preds = %10
  %63 = and i32 %7, 1
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %85, label %65

65:                                               ; preds = %62
  %66 = bitcast i8* %0 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 1
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %67, <16 x i8> %70) #7
  %72 = bitcast i8* %8 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %0, i64 16
  %74 = getelementptr inbounds i8, i8* %8, i64 16
  %75 = bitcast i8* %73 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = getelementptr inbounds i8, i8* %0, i64 17
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %76, <16 x i8> %79) #7
  %81 = bitcast i8* %74 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %81, align 1
  %82 = getelementptr inbounds i8, i8* %0, i64 %1
  %83 = getelementptr inbounds i8, i8* %8, i64 %9
  %84 = add nsw i32 %7, -1
  br label %85

85:                                               ; preds = %62, %65
  %86 = phi i8* [ %8, %62 ], [ %83, %65 ]
  %87 = phi i8* [ %0, %62 ], [ %82, %65 ]
  %88 = phi i32 [ %7, %62 ], [ %84, %65 ]
  %89 = icmp eq i32 %7, 1
  br i1 %89, label %404, label %210

90:                                               ; preds = %10, %90
  %91 = phi i8* [ %165, %90 ], [ %8, %10 ]
  %92 = phi i8* [ %164, %90 ], [ %0, %10 ]
  %93 = phi i32 [ %166, %90 ], [ %7, %10 ]
  %94 = bitcast i8* %92 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = getelementptr inbounds i8, i8* %92, i64 1
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %95, <16 x i8> %98) #7
  %100 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %99, <16 x i8>* %100, align 1
  %101 = getelementptr inbounds i8, i8* %92, i64 16
  %102 = getelementptr inbounds i8, i8* %91, i64 16
  %103 = bitcast i8* %101 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1
  %105 = getelementptr inbounds i8, i8* %92, i64 17
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1
  %108 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %104, <16 x i8> %107) #7
  %109 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %109, align 1
  %110 = getelementptr inbounds i8, i8* %92, i64 32
  %111 = getelementptr inbounds i8, i8* %91, i64 32
  %112 = bitcast i8* %110 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = getelementptr inbounds i8, i8* %92, i64 33
  %115 = bitcast i8* %114 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 1
  %117 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %113, <16 x i8> %116) #7
  %118 = bitcast i8* %111 to <16 x i8>*
  store <16 x i8> %117, <16 x i8>* %118, align 1
  %119 = getelementptr inbounds i8, i8* %92, i64 48
  %120 = getelementptr inbounds i8, i8* %91, i64 48
  %121 = bitcast i8* %119 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 1
  %123 = getelementptr inbounds i8, i8* %92, i64 49
  %124 = bitcast i8* %123 to <16 x i8>*
  %125 = load <16 x i8>, <16 x i8>* %124, align 1
  %126 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %122, <16 x i8> %125) #7
  %127 = bitcast i8* %120 to <16 x i8>*
  store <16 x i8> %126, <16 x i8>* %127, align 1
  %128 = getelementptr inbounds i8, i8* %92, i64 64
  %129 = getelementptr inbounds i8, i8* %91, i64 64
  %130 = bitcast i8* %128 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1
  %132 = getelementptr inbounds i8, i8* %92, i64 65
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1
  %135 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %131, <16 x i8> %134) #7
  %136 = bitcast i8* %129 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %136, align 1
  %137 = getelementptr inbounds i8, i8* %92, i64 80
  %138 = getelementptr inbounds i8, i8* %91, i64 80
  %139 = bitcast i8* %137 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = getelementptr inbounds i8, i8* %92, i64 81
  %142 = bitcast i8* %141 to <16 x i8>*
  %143 = load <16 x i8>, <16 x i8>* %142, align 1
  %144 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %140, <16 x i8> %143) #7
  %145 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %144, <16 x i8>* %145, align 1
  %146 = getelementptr inbounds i8, i8* %92, i64 96
  %147 = getelementptr inbounds i8, i8* %91, i64 96
  %148 = bitcast i8* %146 to <16 x i8>*
  %149 = load <16 x i8>, <16 x i8>* %148, align 1
  %150 = getelementptr inbounds i8, i8* %92, i64 97
  %151 = bitcast i8* %150 to <16 x i8>*
  %152 = load <16 x i8>, <16 x i8>* %151, align 1
  %153 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %149, <16 x i8> %152) #7
  %154 = bitcast i8* %147 to <16 x i8>*
  store <16 x i8> %153, <16 x i8>* %154, align 1
  %155 = getelementptr inbounds i8, i8* %92, i64 112
  %156 = getelementptr inbounds i8, i8* %91, i64 112
  %157 = bitcast i8* %155 to <16 x i8>*
  %158 = load <16 x i8>, <16 x i8>* %157, align 1
  %159 = getelementptr inbounds i8, i8* %92, i64 113
  %160 = bitcast i8* %159 to <16 x i8>*
  %161 = load <16 x i8>, <16 x i8>* %160, align 1
  %162 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %158, <16 x i8> %161) #7
  %163 = bitcast i8* %156 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %163, align 1
  %164 = getelementptr inbounds i8, i8* %92, i64 %1
  %165 = getelementptr inbounds i8, i8* %91, i64 %9
  %166 = add nsw i32 %93, -1
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %404, label %90

168:                                              ; preds = %10, %168
  %169 = phi i8* [ %207, %168 ], [ %8, %10 ]
  %170 = phi i8* [ %206, %168 ], [ %0, %10 ]
  %171 = phi i32 [ %208, %168 ], [ %7, %10 ]
  %172 = bitcast i8* %170 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 1
  %174 = getelementptr inbounds i8, i8* %170, i64 1
  %175 = bitcast i8* %174 to <16 x i8>*
  %176 = load <16 x i8>, <16 x i8>* %175, align 1
  %177 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %173, <16 x i8> %176) #7
  %178 = bitcast i8* %169 to <16 x i8>*
  store <16 x i8> %177, <16 x i8>* %178, align 1
  %179 = getelementptr inbounds i8, i8* %170, i64 16
  %180 = getelementptr inbounds i8, i8* %169, i64 16
  %181 = bitcast i8* %179 to <16 x i8>*
  %182 = load <16 x i8>, <16 x i8>* %181, align 1
  %183 = getelementptr inbounds i8, i8* %170, i64 17
  %184 = bitcast i8* %183 to <16 x i8>*
  %185 = load <16 x i8>, <16 x i8>* %184, align 1
  %186 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %182, <16 x i8> %185) #7
  %187 = bitcast i8* %180 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %187, align 1
  %188 = getelementptr inbounds i8, i8* %170, i64 32
  %189 = getelementptr inbounds i8, i8* %169, i64 32
  %190 = bitcast i8* %188 to <16 x i8>*
  %191 = load <16 x i8>, <16 x i8>* %190, align 1
  %192 = getelementptr inbounds i8, i8* %170, i64 33
  %193 = bitcast i8* %192 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1
  %195 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %191, <16 x i8> %194) #7
  %196 = bitcast i8* %189 to <16 x i8>*
  store <16 x i8> %195, <16 x i8>* %196, align 1
  %197 = getelementptr inbounds i8, i8* %170, i64 48
  %198 = getelementptr inbounds i8, i8* %169, i64 48
  %199 = bitcast i8* %197 to <16 x i8>*
  %200 = load <16 x i8>, <16 x i8>* %199, align 1
  %201 = getelementptr inbounds i8, i8* %170, i64 49
  %202 = bitcast i8* %201 to <16 x i8>*
  %203 = load <16 x i8>, <16 x i8>* %202, align 1
  %204 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %200, <16 x i8> %203) #7
  %205 = bitcast i8* %198 to <16 x i8>*
  store <16 x i8> %204, <16 x i8>* %205, align 1
  %206 = getelementptr inbounds i8, i8* %170, i64 %1
  %207 = getelementptr inbounds i8, i8* %169, i64 %9
  %208 = add nsw i32 %171, -1
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %404, label %168

210:                                              ; preds = %85, %210
  %211 = phi i8* [ %249, %210 ], [ %86, %85 ]
  %212 = phi i8* [ %248, %210 ], [ %87, %85 ]
  %213 = phi i32 [ %250, %210 ], [ %88, %85 ]
  %214 = bitcast i8* %212 to <16 x i8>*
  %215 = load <16 x i8>, <16 x i8>* %214, align 1
  %216 = getelementptr inbounds i8, i8* %212, i64 1
  %217 = bitcast i8* %216 to <16 x i8>*
  %218 = load <16 x i8>, <16 x i8>* %217, align 1
  %219 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %215, <16 x i8> %218) #7
  %220 = bitcast i8* %211 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %220, align 1
  %221 = getelementptr inbounds i8, i8* %212, i64 16
  %222 = getelementptr inbounds i8, i8* %211, i64 16
  %223 = bitcast i8* %221 to <16 x i8>*
  %224 = load <16 x i8>, <16 x i8>* %223, align 1
  %225 = getelementptr inbounds i8, i8* %212, i64 17
  %226 = bitcast i8* %225 to <16 x i8>*
  %227 = load <16 x i8>, <16 x i8>* %226, align 1
  %228 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %224, <16 x i8> %227) #7
  %229 = bitcast i8* %222 to <16 x i8>*
  store <16 x i8> %228, <16 x i8>* %229, align 1
  %230 = getelementptr inbounds i8, i8* %212, i64 %1
  %231 = getelementptr inbounds i8, i8* %211, i64 %9
  %232 = bitcast i8* %230 to <16 x i8>*
  %233 = load <16 x i8>, <16 x i8>* %232, align 1
  %234 = getelementptr inbounds i8, i8* %230, i64 1
  %235 = bitcast i8* %234 to <16 x i8>*
  %236 = load <16 x i8>, <16 x i8>* %235, align 1
  %237 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %233, <16 x i8> %236) #7
  %238 = bitcast i8* %231 to <16 x i8>*
  store <16 x i8> %237, <16 x i8>* %238, align 1
  %239 = getelementptr inbounds i8, i8* %230, i64 16
  %240 = getelementptr inbounds i8, i8* %231, i64 16
  %241 = bitcast i8* %239 to <16 x i8>*
  %242 = load <16 x i8>, <16 x i8>* %241, align 1
  %243 = getelementptr inbounds i8, i8* %230, i64 17
  %244 = bitcast i8* %243 to <16 x i8>*
  %245 = load <16 x i8>, <16 x i8>* %244, align 1
  %246 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %242, <16 x i8> %245) #7
  %247 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %246, <16 x i8>* %247, align 1
  %248 = getelementptr inbounds i8, i8* %230, i64 %1
  %249 = getelementptr inbounds i8, i8* %231, i64 %9
  %250 = add nsw i32 %213, -2
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %404, label %210

252:                                              ; preds = %57, %252
  %253 = phi i8* [ %291, %252 ], [ %58, %57 ]
  %254 = phi i8* [ %290, %252 ], [ %59, %57 ]
  %255 = phi i32 [ %292, %252 ], [ %60, %57 ]
  %256 = bitcast i8* %254 to <16 x i8>*
  %257 = load <16 x i8>, <16 x i8>* %256, align 1
  %258 = getelementptr inbounds i8, i8* %254, i64 1
  %259 = bitcast i8* %258 to <16 x i8>*
  %260 = load <16 x i8>, <16 x i8>* %259, align 1
  %261 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %257, <16 x i8> %260) #7
  %262 = bitcast i8* %253 to <16 x i8>*
  store <16 x i8> %261, <16 x i8>* %262, align 1
  %263 = getelementptr inbounds i8, i8* %254, i64 %1
  %264 = getelementptr inbounds i8, i8* %253, i64 %9
  %265 = bitcast i8* %263 to <16 x i8>*
  %266 = load <16 x i8>, <16 x i8>* %265, align 1
  %267 = getelementptr inbounds i8, i8* %263, i64 1
  %268 = bitcast i8* %267 to <16 x i8>*
  %269 = load <16 x i8>, <16 x i8>* %268, align 1
  %270 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %266, <16 x i8> %269) #7
  %271 = bitcast i8* %264 to <16 x i8>*
  store <16 x i8> %270, <16 x i8>* %271, align 1
  %272 = getelementptr inbounds i8, i8* %263, i64 %1
  %273 = getelementptr inbounds i8, i8* %264, i64 %9
  %274 = bitcast i8* %272 to <16 x i8>*
  %275 = load <16 x i8>, <16 x i8>* %274, align 1
  %276 = getelementptr inbounds i8, i8* %272, i64 1
  %277 = bitcast i8* %276 to <16 x i8>*
  %278 = load <16 x i8>, <16 x i8>* %277, align 1
  %279 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %275, <16 x i8> %278) #7
  %280 = bitcast i8* %273 to <16 x i8>*
  store <16 x i8> %279, <16 x i8>* %280, align 1
  %281 = getelementptr inbounds i8, i8* %272, i64 %1
  %282 = getelementptr inbounds i8, i8* %273, i64 %9
  %283 = bitcast i8* %281 to <16 x i8>*
  %284 = load <16 x i8>, <16 x i8>* %283, align 1
  %285 = getelementptr inbounds i8, i8* %281, i64 1
  %286 = bitcast i8* %285 to <16 x i8>*
  %287 = load <16 x i8>, <16 x i8>* %286, align 1
  %288 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %284, <16 x i8> %287) #7
  %289 = bitcast i8* %282 to <16 x i8>*
  store <16 x i8> %288, <16 x i8>* %289, align 1
  %290 = getelementptr inbounds i8, i8* %281, i64 %1
  %291 = getelementptr inbounds i8, i8* %282, i64 %9
  %292 = add nsw i32 %255, -4
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %404, label %252

294:                                              ; preds = %31, %294
  %295 = phi i32 [ %328, %294 ], [ %32, %31 ]
  %296 = phi i8* [ %327, %294 ], [ %33, %31 ]
  %297 = phi i8* [ %326, %294 ], [ %34, %31 ]
  %298 = bitcast i8* %297 to i64*
  %299 = load i64, i64* %298, align 1
  %300 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %299, i32 0
  %301 = getelementptr inbounds i8, i8* %297, i64 1
  %302 = bitcast i8* %301 to i64*
  %303 = load i64, i64* %302, align 1
  %304 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %303, i32 0
  %305 = bitcast <2 x i64> %300 to <16 x i8>
  %306 = bitcast <2 x i64> %304 to <16 x i8>
  %307 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %305, <16 x i8> %306) #7
  %308 = bitcast <16 x i8> %307 to <2 x i64>
  %309 = extractelement <2 x i64> %308, i32 0
  %310 = bitcast i8* %296 to i64*
  store i64 %309, i64* %310, align 1
  %311 = getelementptr inbounds i8, i8* %297, i64 %1
  %312 = getelementptr inbounds i8, i8* %296, i64 %9
  %313 = bitcast i8* %311 to i64*
  %314 = load i64, i64* %313, align 1
  %315 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %314, i32 0
  %316 = getelementptr inbounds i8, i8* %311, i64 1
  %317 = bitcast i8* %316 to i64*
  %318 = load i64, i64* %317, align 1
  %319 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %318, i32 0
  %320 = bitcast <2 x i64> %315 to <16 x i8>
  %321 = bitcast <2 x i64> %319 to <16 x i8>
  %322 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %320, <16 x i8> %321) #7
  %323 = bitcast <16 x i8> %322 to <2 x i64>
  %324 = extractelement <2 x i64> %323, i32 0
  %325 = bitcast i8* %312 to i64*
  store i64 %324, i64* %325, align 1
  %326 = getelementptr inbounds i8, i8* %311, i64 %1
  %327 = getelementptr inbounds i8, i8* %312, i64 %9
  %328 = add nsw i32 %295, -2
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %404, label %294

330:                                              ; preds = %10, %330
  %331 = phi i32 [ %364, %330 ], [ %7, %10 ]
  %332 = phi i8* [ %363, %330 ], [ %8, %10 ]
  %333 = phi i8* [ %351, %330 ], [ %0, %10 ]
  %334 = bitcast i8* %333 to i32*
  %335 = load i32, i32* %334, align 1
  %336 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %335, i32 0
  %337 = getelementptr inbounds i8, i8* %333, i64 1
  %338 = bitcast i8* %337 to i32*
  %339 = load i32, i32* %338, align 1
  %340 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %339, i32 0
  %341 = getelementptr inbounds i8, i8* %333, i64 %1
  %342 = bitcast i8* %341 to i32*
  %343 = load i32, i32* %342, align 1
  %344 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %343, i32 0
  %345 = shufflevector <4 x i32> %336, <4 x i32> %344, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %346 = getelementptr inbounds i8, i8* %341, i64 1
  %347 = bitcast i8* %346 to i32*
  %348 = load i32, i32* %347, align 1
  %349 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %348, i32 0
  %350 = shufflevector <4 x i32> %340, <4 x i32> %349, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %351 = getelementptr inbounds i8, i8* %341, i64 %1
  %352 = bitcast <4 x i32> %345 to <16 x i8>
  %353 = bitcast <4 x i32> %350 to <16 x i8>
  %354 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %352, <16 x i8> %353) #7
  %355 = bitcast <16 x i8> %354 to <4 x i32>
  %356 = extractelement <4 x i32> %355, i32 0
  %357 = bitcast i8* %332 to i32*
  store i32 %356, i32* %357, align 1
  %358 = getelementptr inbounds i8, i8* %332, i64 %9
  %359 = shufflevector <16 x i8> %354, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %360 = bitcast <16 x i8> %359 to <4 x i32>
  %361 = extractelement <4 x i32> %360, i32 0
  %362 = bitcast i8* %358 to i32*
  store i32 %361, i32* %362, align 1
  %363 = getelementptr inbounds i8, i8* %358, i64 %9
  %364 = add nsw i32 %331, -2
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %404, label %330

366:                                              ; preds = %10, %366
  %367 = phi i8* [ %401, %366 ], [ %8, %10 ]
  %368 = phi <8 x i16> [ %382, %366 ], [ zeroinitializer, %10 ]
  %369 = phi <8 x i16> [ %386, %366 ], [ zeroinitializer, %10 ]
  %370 = phi i32 [ %402, %366 ], [ %7, %10 ]
  %371 = phi i8* [ %387, %366 ], [ %0, %10 ]
  %372 = bitcast i8* %371 to i16*
  %373 = load i16, i16* %372, align 1
  %374 = insertelement <8 x i16> %368, i16 %373, i64 0
  %375 = getelementptr inbounds i8, i8* %371, i64 1
  %376 = bitcast i8* %375 to i16*
  %377 = load i16, i16* %376, align 1
  %378 = insertelement <8 x i16> %369, i16 %377, i64 0
  %379 = getelementptr inbounds i8, i8* %371, i64 %1
  %380 = bitcast i8* %379 to i16*
  %381 = load i16, i16* %380, align 1
  %382 = insertelement <8 x i16> %374, i16 %381, i64 1
  %383 = getelementptr inbounds i8, i8* %379, i64 1
  %384 = bitcast i8* %383 to i16*
  %385 = load i16, i16* %384, align 1
  %386 = insertelement <8 x i16> %378, i16 %385, i64 1
  %387 = getelementptr inbounds i8, i8* %379, i64 %1
  %388 = bitcast <8 x i16> %382 to <16 x i8>
  %389 = bitcast <8 x i16> %386 to <16 x i8>
  %390 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %388, <16 x i8> %389) #7
  %391 = bitcast <16 x i8> %390 to <4 x i32>
  %392 = extractelement <4 x i32> %391, i32 0
  %393 = bitcast i8* %367 to i16*
  %394 = trunc i32 %392 to i16
  store i16 %394, i16* %393, align 1
  %395 = getelementptr inbounds i8, i8* %367, i64 %9
  %396 = shufflevector <16 x i8> %390, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %397 = bitcast <16 x i8> %396 to <4 x i32>
  %398 = extractelement <4 x i32> %397, i32 0
  %399 = bitcast i8* %395 to i16*
  %400 = trunc i32 %398 to i16
  store i16 %400, i16* %399, align 1
  %401 = getelementptr inbounds i8, i8* %395, i64 %9
  %402 = add nsw i32 %370, -2
  %403 = icmp eq i32 %402, 0
  br i1 %403, label %404, label %366

404:                                              ; preds = %330, %31, %294, %57, %252, %85, %210, %168, %90, %366
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_137ConvolveIntraBlockCopyVertical_SSE4_1EPKvliiiiiiPvl(i8* readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  switch i32 %6, label %416 [
    i32 128, label %11
    i32 64, label %113
    i32 32, label %167
    i32 16, label %240
    i32 8, label %308
    i32 4, label %362
  ]

11:                                               ; preds = %10
  %12 = bitcast i8* %0 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  %17 = getelementptr inbounds i8, i8* %0, i64 32
  %18 = bitcast i8* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = getelementptr inbounds i8, i8* %0, i64 48
  %21 = bitcast i8* %20 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 1
  %23 = getelementptr inbounds i8, i8* %0, i64 64
  %24 = bitcast i8* %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = getelementptr inbounds i8, i8* %0, i64 80
  %27 = bitcast i8* %26 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 1
  %29 = getelementptr inbounds i8, i8* %0, i64 96
  %30 = bitcast i8* %29 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %0, i64 112
  %33 = bitcast i8* %32 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 1
  br label %35

35:                                               ; preds = %35, %11
  %36 = phi i8* [ %8, %11 ], [ %110, %35 ]
  %37 = phi i8* [ %0, %11 ], [ %47, %35 ]
  %38 = phi <2 x i64> [ %34, %11 ], [ %70, %35 ]
  %39 = phi <2 x i64> [ %31, %11 ], [ %67, %35 ]
  %40 = phi <2 x i64> [ %28, %11 ], [ %64, %35 ]
  %41 = phi <2 x i64> [ %25, %11 ], [ %61, %35 ]
  %42 = phi <2 x i64> [ %22, %11 ], [ %58, %35 ]
  %43 = phi <2 x i64> [ %19, %11 ], [ %55, %35 ]
  %44 = phi <2 x i64> [ %16, %11 ], [ %52, %35 ]
  %45 = phi <2 x i64> [ %13, %11 ], [ %49, %35 ]
  %46 = phi i32 [ %7, %11 ], [ %111, %35 ]
  %47 = getelementptr inbounds i8, i8* %37, i64 %1
  %48 = bitcast i8* %47 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 1
  %50 = getelementptr inbounds i8, i8* %47, i64 16
  %51 = bitcast i8* %50 to <2 x i64>*
  %52 = load <2 x i64>, <2 x i64>* %51, align 1
  %53 = getelementptr inbounds i8, i8* %47, i64 32
  %54 = bitcast i8* %53 to <2 x i64>*
  %55 = load <2 x i64>, <2 x i64>* %54, align 1
  %56 = getelementptr inbounds i8, i8* %47, i64 48
  %57 = bitcast i8* %56 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 1
  %59 = getelementptr inbounds i8, i8* %47, i64 64
  %60 = bitcast i8* %59 to <2 x i64>*
  %61 = load <2 x i64>, <2 x i64>* %60, align 1
  %62 = getelementptr inbounds i8, i8* %47, i64 80
  %63 = bitcast i8* %62 to <2 x i64>*
  %64 = load <2 x i64>, <2 x i64>* %63, align 1
  %65 = getelementptr inbounds i8, i8* %47, i64 96
  %66 = bitcast i8* %65 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 1
  %68 = getelementptr inbounds i8, i8* %47, i64 112
  %69 = bitcast i8* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 1
  %71 = bitcast <2 x i64> %45 to <16 x i8>
  %72 = bitcast <2 x i64> %49 to <16 x i8>
  %73 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %71, <16 x i8> %72) #7
  %74 = bitcast i8* %36 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %36, i64 16
  %76 = bitcast <2 x i64> %44 to <16 x i8>
  %77 = bitcast <2 x i64> %52 to <16 x i8>
  %78 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %76, <16 x i8> %77) #7
  %79 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %79, align 1
  %80 = getelementptr inbounds i8, i8* %36, i64 32
  %81 = bitcast <2 x i64> %43 to <16 x i8>
  %82 = bitcast <2 x i64> %55 to <16 x i8>
  %83 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %81, <16 x i8> %82) #7
  %84 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %83, <16 x i8>* %84, align 1
  %85 = getelementptr inbounds i8, i8* %36, i64 48
  %86 = bitcast <2 x i64> %42 to <16 x i8>
  %87 = bitcast <2 x i64> %58 to <16 x i8>
  %88 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %86, <16 x i8> %87) #7
  %89 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %89, align 1
  %90 = getelementptr inbounds i8, i8* %36, i64 64
  %91 = bitcast <2 x i64> %41 to <16 x i8>
  %92 = bitcast <2 x i64> %61 to <16 x i8>
  %93 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %91, <16 x i8> %92) #7
  %94 = bitcast i8* %90 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %94, align 1
  %95 = getelementptr inbounds i8, i8* %36, i64 80
  %96 = bitcast <2 x i64> %40 to <16 x i8>
  %97 = bitcast <2 x i64> %64 to <16 x i8>
  %98 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %96, <16 x i8> %97) #7
  %99 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %98, <16 x i8>* %99, align 1
  %100 = getelementptr inbounds i8, i8* %36, i64 96
  %101 = bitcast <2 x i64> %39 to <16 x i8>
  %102 = bitcast <2 x i64> %67 to <16 x i8>
  %103 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %101, <16 x i8> %102) #7
  %104 = bitcast i8* %100 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %104, align 1
  %105 = getelementptr inbounds i8, i8* %36, i64 112
  %106 = bitcast <2 x i64> %38 to <16 x i8>
  %107 = bitcast <2 x i64> %70 to <16 x i8>
  %108 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %106, <16 x i8> %107) #7
  %109 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %109, align 1
  %110 = getelementptr inbounds i8, i8* %36, i64 %9
  %111 = add nsw i32 %46, -1
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %479, label %35

113:                                              ; preds = %10
  %114 = bitcast i8* %0 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1
  %116 = getelementptr inbounds i8, i8* %0, i64 16
  %117 = bitcast i8* %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 1
  %119 = getelementptr inbounds i8, i8* %0, i64 32
  %120 = bitcast i8* %119 to <2 x i64>*
  %121 = load <2 x i64>, <2 x i64>* %120, align 1
  %122 = getelementptr inbounds i8, i8* %0, i64 48
  %123 = bitcast i8* %122 to <2 x i64>*
  %124 = load <2 x i64>, <2 x i64>* %123, align 1
  br label %125

125:                                              ; preds = %125, %113
  %126 = phi i8* [ %8, %113 ], [ %164, %125 ]
  %127 = phi i8* [ %0, %113 ], [ %133, %125 ]
  %128 = phi <2 x i64> [ %124, %113 ], [ %144, %125 ]
  %129 = phi <2 x i64> [ %121, %113 ], [ %141, %125 ]
  %130 = phi <2 x i64> [ %118, %113 ], [ %138, %125 ]
  %131 = phi <2 x i64> [ %115, %113 ], [ %135, %125 ]
  %132 = phi i32 [ %7, %113 ], [ %165, %125 ]
  %133 = getelementptr inbounds i8, i8* %127, i64 %1
  %134 = bitcast i8* %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 1
  %136 = getelementptr inbounds i8, i8* %133, i64 16
  %137 = bitcast i8* %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 1
  %139 = getelementptr inbounds i8, i8* %133, i64 32
  %140 = bitcast i8* %139 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 1
  %142 = getelementptr inbounds i8, i8* %133, i64 48
  %143 = bitcast i8* %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 1
  %145 = bitcast <2 x i64> %131 to <16 x i8>
  %146 = bitcast <2 x i64> %135 to <16 x i8>
  %147 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %145, <16 x i8> %146) #7
  %148 = bitcast i8* %126 to <16 x i8>*
  store <16 x i8> %147, <16 x i8>* %148, align 1
  %149 = getelementptr inbounds i8, i8* %126, i64 16
  %150 = bitcast <2 x i64> %130 to <16 x i8>
  %151 = bitcast <2 x i64> %138 to <16 x i8>
  %152 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %150, <16 x i8> %151) #7
  %153 = bitcast i8* %149 to <16 x i8>*
  store <16 x i8> %152, <16 x i8>* %153, align 1
  %154 = getelementptr inbounds i8, i8* %126, i64 32
  %155 = bitcast <2 x i64> %129 to <16 x i8>
  %156 = bitcast <2 x i64> %141 to <16 x i8>
  %157 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %155, <16 x i8> %156) #7
  %158 = bitcast i8* %154 to <16 x i8>*
  store <16 x i8> %157, <16 x i8>* %158, align 1
  %159 = getelementptr inbounds i8, i8* %126, i64 48
  %160 = bitcast <2 x i64> %128 to <16 x i8>
  %161 = bitcast <2 x i64> %144 to <16 x i8>
  %162 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %160, <16 x i8> %161) #7
  %163 = bitcast i8* %159 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %163, align 1
  %164 = getelementptr inbounds i8, i8* %126, i64 %9
  %165 = add nsw i32 %132, -1
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %479, label %125

167:                                              ; preds = %10
  %168 = bitcast i8* %0 to <2 x i64>*
  %169 = load <2 x i64>, <2 x i64>* %168, align 1
  %170 = getelementptr inbounds i8, i8* %0, i64 16
  %171 = bitcast i8* %170 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 1
  %173 = and i32 %7, 1
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %193, label %175

175:                                              ; preds = %167
  %176 = getelementptr inbounds i8, i8* %0, i64 %1
  %177 = bitcast i8* %176 to <2 x i64>*
  %178 = load <2 x i64>, <2 x i64>* %177, align 1
  %179 = getelementptr inbounds i8, i8* %176, i64 16
  %180 = bitcast i8* %179 to <2 x i64>*
  %181 = load <2 x i64>, <2 x i64>* %180, align 1
  %182 = bitcast <2 x i64> %169 to <16 x i8>
  %183 = bitcast <2 x i64> %178 to <16 x i8>
  %184 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %182, <16 x i8> %183) #7
  %185 = bitcast i8* %8 to <16 x i8>*
  store <16 x i8> %184, <16 x i8>* %185, align 1
  %186 = getelementptr inbounds i8, i8* %8, i64 16
  %187 = bitcast <2 x i64> %172 to <16 x i8>
  %188 = bitcast <2 x i64> %181 to <16 x i8>
  %189 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %187, <16 x i8> %188) #7
  %190 = bitcast i8* %186 to <16 x i8>*
  store <16 x i8> %189, <16 x i8>* %190, align 1
  %191 = getelementptr inbounds i8, i8* %8, i64 %9
  %192 = add nsw i32 %7, -1
  br label %193

193:                                              ; preds = %167, %175
  %194 = phi i8* [ %8, %167 ], [ %191, %175 ]
  %195 = phi i8* [ %0, %167 ], [ %176, %175 ]
  %196 = phi <2 x i64> [ %172, %167 ], [ %181, %175 ]
  %197 = phi <2 x i64> [ %169, %167 ], [ %178, %175 ]
  %198 = phi i32 [ %7, %167 ], [ %192, %175 ]
  %199 = icmp eq i32 %7, 1
  br i1 %199, label %479, label %200

200:                                              ; preds = %193, %200
  %201 = phi i8* [ %237, %200 ], [ %194, %193 ]
  %202 = phi i8* [ %222, %200 ], [ %195, %193 ]
  %203 = phi <2 x i64> [ %227, %200 ], [ %196, %193 ]
  %204 = phi <2 x i64> [ %224, %200 ], [ %197, %193 ]
  %205 = phi i32 [ %238, %200 ], [ %198, %193 ]
  %206 = getelementptr inbounds i8, i8* %202, i64 %1
  %207 = bitcast i8* %206 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 1
  %209 = getelementptr inbounds i8, i8* %206, i64 16
  %210 = bitcast i8* %209 to <2 x i64>*
  %211 = load <2 x i64>, <2 x i64>* %210, align 1
  %212 = bitcast <2 x i64> %204 to <16 x i8>
  %213 = bitcast <2 x i64> %208 to <16 x i8>
  %214 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %212, <16 x i8> %213) #7
  %215 = bitcast i8* %201 to <16 x i8>*
  store <16 x i8> %214, <16 x i8>* %215, align 1
  %216 = getelementptr inbounds i8, i8* %201, i64 16
  %217 = bitcast <2 x i64> %203 to <16 x i8>
  %218 = bitcast <2 x i64> %211 to <16 x i8>
  %219 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %217, <16 x i8> %218) #7
  %220 = bitcast i8* %216 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %220, align 1
  %221 = getelementptr inbounds i8, i8* %201, i64 %9
  %222 = getelementptr inbounds i8, i8* %206, i64 %1
  %223 = bitcast i8* %222 to <2 x i64>*
  %224 = load <2 x i64>, <2 x i64>* %223, align 1
  %225 = getelementptr inbounds i8, i8* %222, i64 16
  %226 = bitcast i8* %225 to <2 x i64>*
  %227 = load <2 x i64>, <2 x i64>* %226, align 1
  %228 = bitcast <2 x i64> %208 to <16 x i8>
  %229 = bitcast <2 x i64> %224 to <16 x i8>
  %230 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %228, <16 x i8> %229) #7
  %231 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %230, <16 x i8>* %231, align 1
  %232 = getelementptr inbounds i8, i8* %221, i64 16
  %233 = bitcast <2 x i64> %211 to <16 x i8>
  %234 = bitcast <2 x i64> %227 to <16 x i8>
  %235 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %233, <16 x i8> %234) #7
  %236 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %236, align 1
  %237 = getelementptr inbounds i8, i8* %221, i64 %9
  %238 = add nsw i32 %205, -2
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %479, label %200

240:                                              ; preds = %10
  %241 = bitcast i8* %0 to <2 x i64>*
  %242 = load <2 x i64>, <2 x i64>* %241, align 1
  %243 = add nsw i32 %7, -1
  %244 = and i32 %7, 3
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %263, label %246

246:                                              ; preds = %240, %246
  %247 = phi i8* [ %259, %246 ], [ %8, %240 ]
  %248 = phi i8* [ %252, %246 ], [ %0, %240 ]
  %249 = phi <2 x i64> [ %254, %246 ], [ %242, %240 ]
  %250 = phi i32 [ %260, %246 ], [ %7, %240 ]
  %251 = phi i32 [ %261, %246 ], [ %244, %240 ]
  %252 = getelementptr inbounds i8, i8* %248, i64 %1
  %253 = bitcast i8* %252 to <2 x i64>*
  %254 = load <2 x i64>, <2 x i64>* %253, align 1
  %255 = bitcast <2 x i64> %249 to <16 x i8>
  %256 = bitcast <2 x i64> %254 to <16 x i8>
  %257 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %255, <16 x i8> %256) #7
  %258 = bitcast i8* %247 to <16 x i8>*
  store <16 x i8> %257, <16 x i8>* %258, align 1
  %259 = getelementptr inbounds i8, i8* %247, i64 %9
  %260 = add nsw i32 %250, -1
  %261 = add i32 %251, -1
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %246, !llvm.loop !4

263:                                              ; preds = %246, %240
  %264 = phi i8* [ %8, %240 ], [ %259, %246 ]
  %265 = phi i8* [ %0, %240 ], [ %252, %246 ]
  %266 = phi <2 x i64> [ %242, %240 ], [ %254, %246 ]
  %267 = phi i32 [ %7, %240 ], [ %260, %246 ]
  %268 = icmp ult i32 %243, 3
  br i1 %268, label %479, label %269

269:                                              ; preds = %263, %269
  %270 = phi i8* [ %305, %269 ], [ %264, %263 ]
  %271 = phi i8* [ %298, %269 ], [ %265, %263 ]
  %272 = phi <2 x i64> [ %300, %269 ], [ %266, %263 ]
  %273 = phi i32 [ %306, %269 ], [ %267, %263 ]
  %274 = getelementptr inbounds i8, i8* %271, i64 %1
  %275 = bitcast i8* %274 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 1
  %277 = bitcast <2 x i64> %272 to <16 x i8>
  %278 = bitcast <2 x i64> %276 to <16 x i8>
  %279 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %277, <16 x i8> %278) #7
  %280 = bitcast i8* %270 to <16 x i8>*
  store <16 x i8> %279, <16 x i8>* %280, align 1
  %281 = getelementptr inbounds i8, i8* %270, i64 %9
  %282 = getelementptr inbounds i8, i8* %274, i64 %1
  %283 = bitcast i8* %282 to <2 x i64>*
  %284 = load <2 x i64>, <2 x i64>* %283, align 1
  %285 = bitcast <2 x i64> %276 to <16 x i8>
  %286 = bitcast <2 x i64> %284 to <16 x i8>
  %287 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %285, <16 x i8> %286) #7
  %288 = bitcast i8* %281 to <16 x i8>*
  store <16 x i8> %287, <16 x i8>* %288, align 1
  %289 = getelementptr inbounds i8, i8* %281, i64 %9
  %290 = getelementptr inbounds i8, i8* %282, i64 %1
  %291 = bitcast i8* %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 1
  %293 = bitcast <2 x i64> %284 to <16 x i8>
  %294 = bitcast <2 x i64> %292 to <16 x i8>
  %295 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %293, <16 x i8> %294) #7
  %296 = bitcast i8* %289 to <16 x i8>*
  store <16 x i8> %295, <16 x i8>* %296, align 1
  %297 = getelementptr inbounds i8, i8* %289, i64 %9
  %298 = getelementptr inbounds i8, i8* %290, i64 %1
  %299 = bitcast i8* %298 to <2 x i64>*
  %300 = load <2 x i64>, <2 x i64>* %299, align 1
  %301 = bitcast <2 x i64> %292 to <16 x i8>
  %302 = bitcast <2 x i64> %300 to <16 x i8>
  %303 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %301, <16 x i8> %302) #7
  %304 = bitcast i8* %297 to <16 x i8>*
  store <16 x i8> %303, <16 x i8>* %304, align 1
  %305 = getelementptr inbounds i8, i8* %297, i64 %9
  %306 = add nsw i32 %273, -4
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %479, label %269

308:                                              ; preds = %10
  %309 = bitcast i8* %0 to i64*
  %310 = load i64, i64* %309, align 1
  %311 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %310, i32 0
  %312 = and i32 %7, 1
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %327, label %314

314:                                              ; preds = %308
  %315 = getelementptr inbounds i8, i8* %0, i64 %1
  %316 = bitcast i8* %315 to i64*
  %317 = load i64, i64* %316, align 1
  %318 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %317, i32 0
  %319 = bitcast <2 x i64> %311 to <16 x i8>
  %320 = bitcast <2 x i64> %318 to <16 x i8>
  %321 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %319, <16 x i8> %320) #7
  %322 = bitcast <16 x i8> %321 to <2 x i64>
  %323 = extractelement <2 x i64> %322, i32 0
  %324 = bitcast i8* %8 to i64*
  store i64 %323, i64* %324, align 1
  %325 = getelementptr inbounds i8, i8* %8, i64 %9
  %326 = add nsw i32 %7, -1
  br label %327

327:                                              ; preds = %308, %314
  %328 = phi i8* [ %8, %308 ], [ %325, %314 ]
  %329 = phi <2 x i64> [ %311, %308 ], [ %318, %314 ]
  %330 = phi i32 [ %7, %308 ], [ %326, %314 ]
  %331 = phi i8* [ %0, %308 ], [ %315, %314 ]
  %332 = icmp eq i32 %7, 1
  br i1 %332, label %479, label %333

333:                                              ; preds = %327, %333
  %334 = phi i8* [ %359, %333 ], [ %328, %327 ]
  %335 = phi <2 x i64> [ %352, %333 ], [ %329, %327 ]
  %336 = phi i32 [ %360, %333 ], [ %330, %327 ]
  %337 = phi i8* [ %349, %333 ], [ %331, %327 ]
  %338 = getelementptr inbounds i8, i8* %337, i64 %1
  %339 = bitcast i8* %338 to i64*
  %340 = load i64, i64* %339, align 1
  %341 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %340, i32 0
  %342 = bitcast <2 x i64> %335 to <16 x i8>
  %343 = bitcast <2 x i64> %341 to <16 x i8>
  %344 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %342, <16 x i8> %343) #7
  %345 = bitcast <16 x i8> %344 to <2 x i64>
  %346 = extractelement <2 x i64> %345, i32 0
  %347 = bitcast i8* %334 to i64*
  store i64 %346, i64* %347, align 1
  %348 = getelementptr inbounds i8, i8* %334, i64 %9
  %349 = getelementptr inbounds i8, i8* %338, i64 %1
  %350 = bitcast i8* %349 to i64*
  %351 = load i64, i64* %350, align 1
  %352 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %351, i32 0
  %353 = bitcast <2 x i64> %341 to <16 x i8>
  %354 = bitcast <2 x i64> %352 to <16 x i8>
  %355 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %353, <16 x i8> %354) #7
  %356 = bitcast <16 x i8> %355 to <2 x i64>
  %357 = extractelement <2 x i64> %356, i32 0
  %358 = bitcast i8* %348 to i64*
  store i64 %357, i64* %358, align 1
  %359 = getelementptr inbounds i8, i8* %348, i64 %9
  %360 = add nsw i32 %336, -2
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %479, label %333

362:                                              ; preds = %10
  %363 = bitcast i8* %0 to i32*
  %364 = load i32, i32* %363, align 1
  %365 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %364, i32 0
  %366 = and i32 %7, 1
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %381, label %368

368:                                              ; preds = %362
  %369 = getelementptr inbounds i8, i8* %0, i64 %1
  %370 = bitcast i8* %369 to i32*
  %371 = load i32, i32* %370, align 1
  %372 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %371, i32 0
  %373 = bitcast <4 x i32> %365 to <16 x i8>
  %374 = bitcast <4 x i32> %372 to <16 x i8>
  %375 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %373, <16 x i8> %374) #7
  %376 = bitcast <16 x i8> %375 to <4 x i32>
  %377 = extractelement <4 x i32> %376, i32 0
  %378 = bitcast i8* %8 to i32*
  store i32 %377, i32* %378, align 1
  %379 = getelementptr inbounds i8, i8* %8, i64 %9
  %380 = add nsw i32 %7, -1
  br label %381

381:                                              ; preds = %362, %368
  %382 = phi i8* [ %8, %362 ], [ %379, %368 ]
  %383 = phi <4 x i32> [ %365, %362 ], [ %372, %368 ]
  %384 = phi i32 [ %7, %362 ], [ %380, %368 ]
  %385 = phi i8* [ %0, %362 ], [ %369, %368 ]
  %386 = icmp eq i32 %7, 1
  br i1 %386, label %479, label %387

387:                                              ; preds = %381, %387
  %388 = phi i8* [ %413, %387 ], [ %382, %381 ]
  %389 = phi <4 x i32> [ %406, %387 ], [ %383, %381 ]
  %390 = phi i32 [ %414, %387 ], [ %384, %381 ]
  %391 = phi i8* [ %403, %387 ], [ %385, %381 ]
  %392 = getelementptr inbounds i8, i8* %391, i64 %1
  %393 = bitcast i8* %392 to i32*
  %394 = load i32, i32* %393, align 1
  %395 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %394, i32 0
  %396 = bitcast <4 x i32> %389 to <16 x i8>
  %397 = bitcast <4 x i32> %395 to <16 x i8>
  %398 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %396, <16 x i8> %397) #7
  %399 = bitcast <16 x i8> %398 to <4 x i32>
  %400 = extractelement <4 x i32> %399, i32 0
  %401 = bitcast i8* %388 to i32*
  store i32 %400, i32* %401, align 1
  %402 = getelementptr inbounds i8, i8* %388, i64 %9
  %403 = getelementptr inbounds i8, i8* %392, i64 %1
  %404 = bitcast i8* %403 to i32*
  %405 = load i32, i32* %404, align 1
  %406 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %405, i32 0
  %407 = bitcast <4 x i32> %395 to <16 x i8>
  %408 = bitcast <4 x i32> %406 to <16 x i8>
  %409 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %407, <16 x i8> %408) #7
  %410 = bitcast <16 x i8> %409 to <4 x i32>
  %411 = extractelement <4 x i32> %410, i32 0
  %412 = bitcast i8* %402 to i32*
  store i32 %411, i32* %412, align 1
  %413 = getelementptr inbounds i8, i8* %402, i64 %9
  %414 = add nsw i32 %390, -2
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %479, label %387

416:                                              ; preds = %10
  %417 = bitcast i8* %0 to i16*
  %418 = load i16, i16* %417, align 1
  %419 = sext i16 %418 to i32
  %420 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %419, i32 0
  %421 = bitcast <4 x i32> %420 to <2 x i64>
  %422 = and i32 %7, 1
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %439, label %424

424:                                              ; preds = %416
  %425 = getelementptr inbounds i8, i8* %0, i64 %1
  %426 = bitcast i8* %425 to i16*
  %427 = load i16, i16* %426, align 1
  %428 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %427, i64 0
  %429 = bitcast <8 x i16> %428 to <2 x i64>
  %430 = bitcast <4 x i32> %420 to <16 x i8>
  %431 = bitcast <8 x i16> %428 to <16 x i8>
  %432 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %430, <16 x i8> %431) #7
  %433 = bitcast <16 x i8> %432 to <4 x i32>
  %434 = extractelement <4 x i32> %433, i32 0
  %435 = bitcast i8* %8 to i16*
  %436 = trunc i32 %434 to i16
  store i16 %436, i16* %435, align 1
  %437 = getelementptr inbounds i8, i8* %8, i64 %9
  %438 = add nsw i32 %7, -1
  br label %439

439:                                              ; preds = %416, %424
  %440 = phi i8* [ %8, %416 ], [ %437, %424 ]
  %441 = phi i8* [ %0, %416 ], [ %425, %424 ]
  %442 = phi <2 x i64> [ %421, %416 ], [ %429, %424 ]
  %443 = phi <8 x i16> [ zeroinitializer, %416 ], [ %428, %424 ]
  %444 = phi i32 [ %7, %416 ], [ %438, %424 ]
  %445 = icmp eq i32 %7, 1
  br i1 %445, label %479, label %446

446:                                              ; preds = %439, %446
  %447 = phi i8* [ %476, %446 ], [ %440, %439 ]
  %448 = phi i8* [ %464, %446 ], [ %441, %439 ]
  %449 = phi <2 x i64> [ %468, %446 ], [ %442, %439 ]
  %450 = phi <8 x i16> [ %467, %446 ], [ %443, %439 ]
  %451 = phi i32 [ %477, %446 ], [ %444, %439 ]
  %452 = getelementptr inbounds i8, i8* %448, i64 %1
  %453 = bitcast i8* %452 to i16*
  %454 = load i16, i16* %453, align 1
  %455 = insertelement <8 x i16> %450, i16 %454, i64 0
  %456 = bitcast <2 x i64> %449 to <16 x i8>
  %457 = bitcast <8 x i16> %455 to <16 x i8>
  %458 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %456, <16 x i8> %457) #7
  %459 = bitcast <16 x i8> %458 to <4 x i32>
  %460 = extractelement <4 x i32> %459, i32 0
  %461 = bitcast i8* %447 to i16*
  %462 = trunc i32 %460 to i16
  store i16 %462, i16* %461, align 1
  %463 = getelementptr inbounds i8, i8* %447, i64 %9
  %464 = getelementptr inbounds i8, i8* %452, i64 %1
  %465 = bitcast i8* %464 to i16*
  %466 = load i16, i16* %465, align 1
  %467 = insertelement <8 x i16> %455, i16 %466, i64 0
  %468 = bitcast <8 x i16> %467 to <2 x i64>
  %469 = bitcast <8 x i16> %455 to <16 x i8>
  %470 = bitcast <8 x i16> %467 to <16 x i8>
  %471 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %469, <16 x i8> %470) #7
  %472 = bitcast <16 x i8> %471 to <4 x i32>
  %473 = extractelement <4 x i32> %472, i32 0
  %474 = bitcast i8* %463 to i16*
  %475 = trunc i32 %473 to i16
  store i16 %475, i16* %474, align 1
  %476 = getelementptr inbounds i8, i8* %463, i64 %9
  %477 = add nsw i32 %451, -2
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %479, label %446

479:                                              ; preds = %381, %387, %327, %333, %263, %269, %193, %200, %125, %35, %439, %446
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_131ConvolveIntraBlockCopy2D_SSE4_1EPKvliiiiiiPvl(i8* readonly, i64, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #3 {
  switch i32 %6, label %1315 [
    i32 128, label %11
    i32 64, label %641
    i32 32, label %959
    i32 16, label %1121
    i32 8, label %1205
    i32 4, label %1250
  ]

11:                                               ; preds = %10
  %12 = getelementptr inbounds i8, i8* %0, i64 1
  %13 = bitcast i8* %0 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <16 x i8>
  %17 = shufflevector <16 x i8> %16, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18 = zext <8 x i8> %17 to <8 x i16>
  %19 = bitcast i8* %12 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = bitcast <2 x i64> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %24 = zext <8 x i8> %23 to <8 x i16>
  %25 = add nuw nsw <8 x i16> %24, %18
  %26 = getelementptr inbounds i8, i8* %0, i64 8
  %27 = getelementptr inbounds i8, i8* %0, i64 9
  %28 = bitcast i8* %26 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %33 = zext <8 x i8> %32 to <8 x i16>
  %34 = bitcast i8* %27 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = bitcast <2 x i64> %36 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %39 = zext <8 x i8> %38 to <8 x i16>
  %40 = add nuw nsw <8 x i16> %39, %33
  %41 = getelementptr inbounds i8, i8* %0, i64 16
  %42 = getelementptr inbounds i8, i8* %0, i64 17
  %43 = bitcast i8* %41 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %48 = zext <8 x i8> %47 to <8 x i16>
  %49 = bitcast i8* %42 to i64*
  %50 = load i64, i64* %49, align 1
  %51 = insertelement <2 x i64> undef, i64 %50, i32 0
  %52 = bitcast <2 x i64> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %54 = zext <8 x i8> %53 to <8 x i16>
  %55 = add nuw nsw <8 x i16> %54, %48
  %56 = getelementptr inbounds i8, i8* %0, i64 24
  %57 = getelementptr inbounds i8, i8* %0, i64 25
  %58 = bitcast i8* %56 to i64*
  %59 = load i64, i64* %58, align 1
  %60 = insertelement <2 x i64> undef, i64 %59, i32 0
  %61 = bitcast <2 x i64> %60 to <16 x i8>
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %63 = zext <8 x i8> %62 to <8 x i16>
  %64 = bitcast i8* %57 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = insertelement <2 x i64> undef, i64 %65, i32 0
  %67 = bitcast <2 x i64> %66 to <16 x i8>
  %68 = shufflevector <16 x i8> %67, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %69 = zext <8 x i8> %68 to <8 x i16>
  %70 = add nuw nsw <8 x i16> %69, %63
  %71 = getelementptr inbounds i8, i8* %0, i64 32
  %72 = getelementptr inbounds i8, i8* %0, i64 33
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %78 = zext <8 x i8> %77 to <8 x i16>
  %79 = bitcast i8* %72 to i64*
  %80 = load i64, i64* %79, align 1
  %81 = insertelement <2 x i64> undef, i64 %80, i32 0
  %82 = bitcast <2 x i64> %81 to <16 x i8>
  %83 = shufflevector <16 x i8> %82, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %84 = zext <8 x i8> %83 to <8 x i16>
  %85 = add nuw nsw <8 x i16> %84, %78
  %86 = getelementptr inbounds i8, i8* %0, i64 40
  %87 = getelementptr inbounds i8, i8* %0, i64 41
  %88 = bitcast i8* %86 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = insertelement <2 x i64> undef, i64 %89, i32 0
  %91 = bitcast <2 x i64> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %93 = zext <8 x i8> %92 to <8 x i16>
  %94 = bitcast i8* %87 to i64*
  %95 = load i64, i64* %94, align 1
  %96 = insertelement <2 x i64> undef, i64 %95, i32 0
  %97 = bitcast <2 x i64> %96 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %99 = zext <8 x i8> %98 to <8 x i16>
  %100 = add nuw nsw <8 x i16> %99, %93
  %101 = getelementptr inbounds i8, i8* %0, i64 48
  %102 = getelementptr inbounds i8, i8* %0, i64 49
  %103 = bitcast i8* %101 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = insertelement <2 x i64> undef, i64 %104, i32 0
  %106 = bitcast <2 x i64> %105 to <16 x i8>
  %107 = shufflevector <16 x i8> %106, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %108 = zext <8 x i8> %107 to <8 x i16>
  %109 = bitcast i8* %102 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = insertelement <2 x i64> undef, i64 %110, i32 0
  %112 = bitcast <2 x i64> %111 to <16 x i8>
  %113 = shufflevector <16 x i8> %112, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %114 = zext <8 x i8> %113 to <8 x i16>
  %115 = add nuw nsw <8 x i16> %114, %108
  %116 = getelementptr inbounds i8, i8* %0, i64 56
  %117 = getelementptr inbounds i8, i8* %0, i64 57
  %118 = bitcast i8* %116 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = insertelement <2 x i64> undef, i64 %119, i32 0
  %121 = bitcast <2 x i64> %120 to <16 x i8>
  %122 = shufflevector <16 x i8> %121, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %123 = zext <8 x i8> %122 to <8 x i16>
  %124 = bitcast i8* %117 to i64*
  %125 = load i64, i64* %124, align 1
  %126 = insertelement <2 x i64> undef, i64 %125, i32 0
  %127 = bitcast <2 x i64> %126 to <16 x i8>
  %128 = shufflevector <16 x i8> %127, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %129 = zext <8 x i8> %128 to <8 x i16>
  %130 = add nuw nsw <8 x i16> %129, %123
  %131 = getelementptr inbounds i8, i8* %0, i64 64
  %132 = getelementptr inbounds i8, i8* %0, i64 65
  %133 = bitcast i8* %131 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = insertelement <2 x i64> undef, i64 %134, i32 0
  %136 = bitcast <2 x i64> %135 to <16 x i8>
  %137 = shufflevector <16 x i8> %136, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %138 = zext <8 x i8> %137 to <8 x i16>
  %139 = bitcast i8* %132 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = insertelement <2 x i64> undef, i64 %140, i32 0
  %142 = bitcast <2 x i64> %141 to <16 x i8>
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %144 = zext <8 x i8> %143 to <8 x i16>
  %145 = add nuw nsw <8 x i16> %144, %138
  %146 = getelementptr inbounds i8, i8* %0, i64 72
  %147 = getelementptr inbounds i8, i8* %0, i64 73
  %148 = bitcast i8* %146 to i64*
  %149 = load i64, i64* %148, align 1
  %150 = insertelement <2 x i64> undef, i64 %149, i32 0
  %151 = bitcast <2 x i64> %150 to <16 x i8>
  %152 = shufflevector <16 x i8> %151, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %153 = zext <8 x i8> %152 to <8 x i16>
  %154 = bitcast i8* %147 to i64*
  %155 = load i64, i64* %154, align 1
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = bitcast <2 x i64> %156 to <16 x i8>
  %158 = shufflevector <16 x i8> %157, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %159 = zext <8 x i8> %158 to <8 x i16>
  %160 = add nuw nsw <8 x i16> %159, %153
  %161 = getelementptr inbounds i8, i8* %0, i64 80
  %162 = getelementptr inbounds i8, i8* %0, i64 81
  %163 = bitcast i8* %161 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = insertelement <2 x i64> undef, i64 %164, i32 0
  %166 = bitcast <2 x i64> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %168 = zext <8 x i8> %167 to <8 x i16>
  %169 = bitcast i8* %162 to i64*
  %170 = load i64, i64* %169, align 1
  %171 = insertelement <2 x i64> undef, i64 %170, i32 0
  %172 = bitcast <2 x i64> %171 to <16 x i8>
  %173 = shufflevector <16 x i8> %172, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %174 = zext <8 x i8> %173 to <8 x i16>
  %175 = add nuw nsw <8 x i16> %174, %168
  %176 = getelementptr inbounds i8, i8* %0, i64 88
  %177 = getelementptr inbounds i8, i8* %0, i64 89
  %178 = bitcast i8* %176 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = insertelement <2 x i64> undef, i64 %179, i32 0
  %181 = bitcast <2 x i64> %180 to <16 x i8>
  %182 = shufflevector <16 x i8> %181, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %183 = zext <8 x i8> %182 to <8 x i16>
  %184 = bitcast i8* %177 to i64*
  %185 = load i64, i64* %184, align 1
  %186 = insertelement <2 x i64> undef, i64 %185, i32 0
  %187 = bitcast <2 x i64> %186 to <16 x i8>
  %188 = shufflevector <16 x i8> %187, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %189 = zext <8 x i8> %188 to <8 x i16>
  %190 = add nuw nsw <8 x i16> %189, %183
  %191 = getelementptr inbounds i8, i8* %0, i64 96
  %192 = getelementptr inbounds i8, i8* %0, i64 97
  %193 = bitcast i8* %191 to i64*
  %194 = load i64, i64* %193, align 1
  %195 = insertelement <2 x i64> undef, i64 %194, i32 0
  %196 = bitcast <2 x i64> %195 to <16 x i8>
  %197 = shufflevector <16 x i8> %196, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %198 = zext <8 x i8> %197 to <8 x i16>
  %199 = bitcast i8* %192 to i64*
  %200 = load i64, i64* %199, align 1
  %201 = insertelement <2 x i64> undef, i64 %200, i32 0
  %202 = bitcast <2 x i64> %201 to <16 x i8>
  %203 = shufflevector <16 x i8> %202, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %204 = zext <8 x i8> %203 to <8 x i16>
  %205 = add nuw nsw <8 x i16> %204, %198
  %206 = getelementptr inbounds i8, i8* %0, i64 104
  %207 = getelementptr inbounds i8, i8* %0, i64 105
  %208 = bitcast i8* %206 to i64*
  %209 = load i64, i64* %208, align 1
  %210 = insertelement <2 x i64> undef, i64 %209, i32 0
  %211 = bitcast <2 x i64> %210 to <16 x i8>
  %212 = shufflevector <16 x i8> %211, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %213 = zext <8 x i8> %212 to <8 x i16>
  %214 = bitcast i8* %207 to i64*
  %215 = load i64, i64* %214, align 1
  %216 = insertelement <2 x i64> undef, i64 %215, i32 0
  %217 = bitcast <2 x i64> %216 to <16 x i8>
  %218 = shufflevector <16 x i8> %217, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %219 = zext <8 x i8> %218 to <8 x i16>
  %220 = add nuw nsw <8 x i16> %219, %213
  %221 = getelementptr inbounds i8, i8* %0, i64 112
  %222 = getelementptr inbounds i8, i8* %0, i64 113
  %223 = bitcast i8* %221 to i64*
  %224 = load i64, i64* %223, align 1
  %225 = insertelement <2 x i64> undef, i64 %224, i32 0
  %226 = bitcast <2 x i64> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %228 = zext <8 x i8> %227 to <8 x i16>
  %229 = bitcast i8* %222 to i64*
  %230 = load i64, i64* %229, align 1
  %231 = insertelement <2 x i64> undef, i64 %230, i32 0
  %232 = bitcast <2 x i64> %231 to <16 x i8>
  %233 = shufflevector <16 x i8> %232, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %234 = zext <8 x i8> %233 to <8 x i16>
  %235 = add nuw nsw <8 x i16> %234, %228
  %236 = getelementptr inbounds i8, i8* %0, i64 120
  %237 = getelementptr inbounds i8, i8* %0, i64 121
  %238 = bitcast i8* %236 to i64*
  %239 = load i64, i64* %238, align 1
  %240 = insertelement <2 x i64> undef, i64 %239, i32 0
  %241 = bitcast <2 x i64> %240 to <16 x i8>
  %242 = shufflevector <16 x i8> %241, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %243 = zext <8 x i8> %242 to <8 x i16>
  %244 = bitcast i8* %237 to i64*
  %245 = load i64, i64* %244, align 1
  %246 = insertelement <2 x i64> undef, i64 %245, i32 0
  %247 = bitcast <2 x i64> %246 to <16 x i8>
  %248 = shufflevector <16 x i8> %247, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %249 = zext <8 x i8> %248 to <8 x i16>
  %250 = add nuw nsw <8 x i16> %249, %243
  br label %251

251:                                              ; preds = %251, %11
  %252 = phi <8 x i16> [ %70, %11 ], [ %354, %251 ]
  %253 = phi <8 x i16> [ %55, %11 ], [ %331, %251 ]
  %254 = phi <8 x i16> [ %40, %11 ], [ %308, %251 ]
  %255 = phi <8 x i16> [ %25, %11 ], [ %285, %251 ]
  %256 = phi i32 [ %7, %11 ], [ %639, %251 ]
  %257 = phi <8 x i16> [ %85, %11 ], [ %377, %251 ]
  %258 = phi <8 x i16> [ %100, %11 ], [ %400, %251 ]
  %259 = phi <8 x i16> [ %115, %11 ], [ %423, %251 ]
  %260 = phi <8 x i16> [ %130, %11 ], [ %446, %251 ]
  %261 = phi <8 x i16> [ %145, %11 ], [ %469, %251 ]
  %262 = phi <8 x i16> [ %160, %11 ], [ %492, %251 ]
  %263 = phi <8 x i16> [ %175, %11 ], [ %515, %251 ]
  %264 = phi <8 x i16> [ %190, %11 ], [ %538, %251 ]
  %265 = phi <8 x i16> [ %205, %11 ], [ %561, %251 ]
  %266 = phi <8 x i16> [ %220, %11 ], [ %584, %251 ]
  %267 = phi <8 x i16> [ %235, %11 ], [ %607, %251 ]
  %268 = phi <8 x i16> [ %250, %11 ], [ %630, %251 ]
  %269 = phi i8* [ %8, %11 ], [ %638, %251 ]
  %270 = phi i8* [ %0, %11 ], [ %271, %251 ]
  %271 = getelementptr inbounds i8, i8* %270, i64 %1
  %272 = getelementptr inbounds i8, i8* %271, i64 1
  %273 = bitcast i8* %271 to i64*
  %274 = load i64, i64* %273, align 1
  %275 = insertelement <2 x i64> undef, i64 %274, i32 0
  %276 = bitcast <2 x i64> %275 to <16 x i8>
  %277 = shufflevector <16 x i8> %276, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %278 = zext <8 x i8> %277 to <8 x i16>
  %279 = bitcast i8* %272 to i64*
  %280 = load i64, i64* %279, align 1
  %281 = insertelement <2 x i64> undef, i64 %280, i32 0
  %282 = bitcast <2 x i64> %281 to <16 x i8>
  %283 = shufflevector <16 x i8> %282, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %284 = zext <8 x i8> %283 to <8 x i16>
  %285 = add nuw nsw <8 x i16> %284, %278
  %286 = add nsw <8 x i16> %285, %255
  %287 = lshr <8 x i16> %286, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %288 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %287, <8 x i16> zeroinitializer) #7
  %289 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %288, <8 x i16> undef) #7
  %290 = bitcast <16 x i8> %289 to <2 x i64>
  %291 = extractelement <2 x i64> %290, i32 0
  %292 = bitcast i8* %269 to i64*
  store i64 %291, i64* %292, align 1
  %293 = getelementptr inbounds i8, i8* %271, i64 8
  %294 = getelementptr inbounds i8, i8* %269, i64 8
  %295 = getelementptr inbounds i8, i8* %271, i64 9
  %296 = bitcast i8* %293 to i64*
  %297 = load i64, i64* %296, align 1
  %298 = insertelement <2 x i64> undef, i64 %297, i32 0
  %299 = bitcast <2 x i64> %298 to <16 x i8>
  %300 = shufflevector <16 x i8> %299, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %301 = zext <8 x i8> %300 to <8 x i16>
  %302 = bitcast i8* %295 to i64*
  %303 = load i64, i64* %302, align 1
  %304 = insertelement <2 x i64> undef, i64 %303, i32 0
  %305 = bitcast <2 x i64> %304 to <16 x i8>
  %306 = shufflevector <16 x i8> %305, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %307 = zext <8 x i8> %306 to <8 x i16>
  %308 = add nuw nsw <8 x i16> %307, %301
  %309 = add nsw <8 x i16> %308, %254
  %310 = lshr <8 x i16> %309, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %311 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %310, <8 x i16> zeroinitializer) #7
  %312 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %311, <8 x i16> undef) #7
  %313 = bitcast <16 x i8> %312 to <2 x i64>
  %314 = extractelement <2 x i64> %313, i32 0
  %315 = bitcast i8* %294 to i64*
  store i64 %314, i64* %315, align 1
  %316 = getelementptr inbounds i8, i8* %271, i64 16
  %317 = getelementptr inbounds i8, i8* %269, i64 16
  %318 = getelementptr inbounds i8, i8* %271, i64 17
  %319 = bitcast i8* %316 to i64*
  %320 = load i64, i64* %319, align 1
  %321 = insertelement <2 x i64> undef, i64 %320, i32 0
  %322 = bitcast <2 x i64> %321 to <16 x i8>
  %323 = shufflevector <16 x i8> %322, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %324 = zext <8 x i8> %323 to <8 x i16>
  %325 = bitcast i8* %318 to i64*
  %326 = load i64, i64* %325, align 1
  %327 = insertelement <2 x i64> undef, i64 %326, i32 0
  %328 = bitcast <2 x i64> %327 to <16 x i8>
  %329 = shufflevector <16 x i8> %328, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %330 = zext <8 x i8> %329 to <8 x i16>
  %331 = add nuw nsw <8 x i16> %330, %324
  %332 = add nsw <8 x i16> %331, %253
  %333 = lshr <8 x i16> %332, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %334 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %333, <8 x i16> zeroinitializer) #7
  %335 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %334, <8 x i16> undef) #7
  %336 = bitcast <16 x i8> %335 to <2 x i64>
  %337 = extractelement <2 x i64> %336, i32 0
  %338 = bitcast i8* %317 to i64*
  store i64 %337, i64* %338, align 1
  %339 = getelementptr inbounds i8, i8* %271, i64 24
  %340 = getelementptr inbounds i8, i8* %269, i64 24
  %341 = getelementptr inbounds i8, i8* %271, i64 25
  %342 = bitcast i8* %339 to i64*
  %343 = load i64, i64* %342, align 1
  %344 = insertelement <2 x i64> undef, i64 %343, i32 0
  %345 = bitcast <2 x i64> %344 to <16 x i8>
  %346 = shufflevector <16 x i8> %345, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %347 = zext <8 x i8> %346 to <8 x i16>
  %348 = bitcast i8* %341 to i64*
  %349 = load i64, i64* %348, align 1
  %350 = insertelement <2 x i64> undef, i64 %349, i32 0
  %351 = bitcast <2 x i64> %350 to <16 x i8>
  %352 = shufflevector <16 x i8> %351, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %353 = zext <8 x i8> %352 to <8 x i16>
  %354 = add nuw nsw <8 x i16> %353, %347
  %355 = add nsw <8 x i16> %354, %252
  %356 = lshr <8 x i16> %355, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %357 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %356, <8 x i16> zeroinitializer) #7
  %358 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %357, <8 x i16> undef) #7
  %359 = bitcast <16 x i8> %358 to <2 x i64>
  %360 = extractelement <2 x i64> %359, i32 0
  %361 = bitcast i8* %340 to i64*
  store i64 %360, i64* %361, align 1
  %362 = getelementptr inbounds i8, i8* %271, i64 32
  %363 = getelementptr inbounds i8, i8* %269, i64 32
  %364 = getelementptr inbounds i8, i8* %271, i64 33
  %365 = bitcast i8* %362 to i64*
  %366 = load i64, i64* %365, align 1
  %367 = insertelement <2 x i64> undef, i64 %366, i32 0
  %368 = bitcast <2 x i64> %367 to <16 x i8>
  %369 = shufflevector <16 x i8> %368, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %370 = zext <8 x i8> %369 to <8 x i16>
  %371 = bitcast i8* %364 to i64*
  %372 = load i64, i64* %371, align 1
  %373 = insertelement <2 x i64> undef, i64 %372, i32 0
  %374 = bitcast <2 x i64> %373 to <16 x i8>
  %375 = shufflevector <16 x i8> %374, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %376 = zext <8 x i8> %375 to <8 x i16>
  %377 = add nuw nsw <8 x i16> %376, %370
  %378 = add nsw <8 x i16> %377, %257
  %379 = lshr <8 x i16> %378, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %380 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %379, <8 x i16> zeroinitializer) #7
  %381 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %380, <8 x i16> undef) #7
  %382 = bitcast <16 x i8> %381 to <2 x i64>
  %383 = extractelement <2 x i64> %382, i32 0
  %384 = bitcast i8* %363 to i64*
  store i64 %383, i64* %384, align 1
  %385 = getelementptr inbounds i8, i8* %271, i64 40
  %386 = getelementptr inbounds i8, i8* %269, i64 40
  %387 = getelementptr inbounds i8, i8* %271, i64 41
  %388 = bitcast i8* %385 to i64*
  %389 = load i64, i64* %388, align 1
  %390 = insertelement <2 x i64> undef, i64 %389, i32 0
  %391 = bitcast <2 x i64> %390 to <16 x i8>
  %392 = shufflevector <16 x i8> %391, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %393 = zext <8 x i8> %392 to <8 x i16>
  %394 = bitcast i8* %387 to i64*
  %395 = load i64, i64* %394, align 1
  %396 = insertelement <2 x i64> undef, i64 %395, i32 0
  %397 = bitcast <2 x i64> %396 to <16 x i8>
  %398 = shufflevector <16 x i8> %397, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %399 = zext <8 x i8> %398 to <8 x i16>
  %400 = add nuw nsw <8 x i16> %399, %393
  %401 = add nsw <8 x i16> %400, %258
  %402 = lshr <8 x i16> %401, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %403 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %402, <8 x i16> zeroinitializer) #7
  %404 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %403, <8 x i16> undef) #7
  %405 = bitcast <16 x i8> %404 to <2 x i64>
  %406 = extractelement <2 x i64> %405, i32 0
  %407 = bitcast i8* %386 to i64*
  store i64 %406, i64* %407, align 1
  %408 = getelementptr inbounds i8, i8* %271, i64 48
  %409 = getelementptr inbounds i8, i8* %269, i64 48
  %410 = getelementptr inbounds i8, i8* %271, i64 49
  %411 = bitcast i8* %408 to i64*
  %412 = load i64, i64* %411, align 1
  %413 = insertelement <2 x i64> undef, i64 %412, i32 0
  %414 = bitcast <2 x i64> %413 to <16 x i8>
  %415 = shufflevector <16 x i8> %414, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %416 = zext <8 x i8> %415 to <8 x i16>
  %417 = bitcast i8* %410 to i64*
  %418 = load i64, i64* %417, align 1
  %419 = insertelement <2 x i64> undef, i64 %418, i32 0
  %420 = bitcast <2 x i64> %419 to <16 x i8>
  %421 = shufflevector <16 x i8> %420, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %422 = zext <8 x i8> %421 to <8 x i16>
  %423 = add nuw nsw <8 x i16> %422, %416
  %424 = add nsw <8 x i16> %423, %259
  %425 = lshr <8 x i16> %424, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %426 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %425, <8 x i16> zeroinitializer) #7
  %427 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %426, <8 x i16> undef) #7
  %428 = bitcast <16 x i8> %427 to <2 x i64>
  %429 = extractelement <2 x i64> %428, i32 0
  %430 = bitcast i8* %409 to i64*
  store i64 %429, i64* %430, align 1
  %431 = getelementptr inbounds i8, i8* %271, i64 56
  %432 = getelementptr inbounds i8, i8* %269, i64 56
  %433 = getelementptr inbounds i8, i8* %271, i64 57
  %434 = bitcast i8* %431 to i64*
  %435 = load i64, i64* %434, align 1
  %436 = insertelement <2 x i64> undef, i64 %435, i32 0
  %437 = bitcast <2 x i64> %436 to <16 x i8>
  %438 = shufflevector <16 x i8> %437, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %439 = zext <8 x i8> %438 to <8 x i16>
  %440 = bitcast i8* %433 to i64*
  %441 = load i64, i64* %440, align 1
  %442 = insertelement <2 x i64> undef, i64 %441, i32 0
  %443 = bitcast <2 x i64> %442 to <16 x i8>
  %444 = shufflevector <16 x i8> %443, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %445 = zext <8 x i8> %444 to <8 x i16>
  %446 = add nuw nsw <8 x i16> %445, %439
  %447 = add nsw <8 x i16> %446, %260
  %448 = lshr <8 x i16> %447, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %449 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %448, <8 x i16> zeroinitializer) #7
  %450 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %449, <8 x i16> undef) #7
  %451 = bitcast <16 x i8> %450 to <2 x i64>
  %452 = extractelement <2 x i64> %451, i32 0
  %453 = bitcast i8* %432 to i64*
  store i64 %452, i64* %453, align 1
  %454 = getelementptr inbounds i8, i8* %271, i64 64
  %455 = getelementptr inbounds i8, i8* %269, i64 64
  %456 = getelementptr inbounds i8, i8* %271, i64 65
  %457 = bitcast i8* %454 to i64*
  %458 = load i64, i64* %457, align 1
  %459 = insertelement <2 x i64> undef, i64 %458, i32 0
  %460 = bitcast <2 x i64> %459 to <16 x i8>
  %461 = shufflevector <16 x i8> %460, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %462 = zext <8 x i8> %461 to <8 x i16>
  %463 = bitcast i8* %456 to i64*
  %464 = load i64, i64* %463, align 1
  %465 = insertelement <2 x i64> undef, i64 %464, i32 0
  %466 = bitcast <2 x i64> %465 to <16 x i8>
  %467 = shufflevector <16 x i8> %466, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %468 = zext <8 x i8> %467 to <8 x i16>
  %469 = add nuw nsw <8 x i16> %468, %462
  %470 = add nsw <8 x i16> %469, %261
  %471 = lshr <8 x i16> %470, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %472 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %471, <8 x i16> zeroinitializer) #7
  %473 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %472, <8 x i16> undef) #7
  %474 = bitcast <16 x i8> %473 to <2 x i64>
  %475 = extractelement <2 x i64> %474, i32 0
  %476 = bitcast i8* %455 to i64*
  store i64 %475, i64* %476, align 1
  %477 = getelementptr inbounds i8, i8* %271, i64 72
  %478 = getelementptr inbounds i8, i8* %269, i64 72
  %479 = getelementptr inbounds i8, i8* %271, i64 73
  %480 = bitcast i8* %477 to i64*
  %481 = load i64, i64* %480, align 1
  %482 = insertelement <2 x i64> undef, i64 %481, i32 0
  %483 = bitcast <2 x i64> %482 to <16 x i8>
  %484 = shufflevector <16 x i8> %483, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %485 = zext <8 x i8> %484 to <8 x i16>
  %486 = bitcast i8* %479 to i64*
  %487 = load i64, i64* %486, align 1
  %488 = insertelement <2 x i64> undef, i64 %487, i32 0
  %489 = bitcast <2 x i64> %488 to <16 x i8>
  %490 = shufflevector <16 x i8> %489, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %491 = zext <8 x i8> %490 to <8 x i16>
  %492 = add nuw nsw <8 x i16> %491, %485
  %493 = add nsw <8 x i16> %492, %262
  %494 = lshr <8 x i16> %493, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %495 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %494, <8 x i16> zeroinitializer) #7
  %496 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %495, <8 x i16> undef) #7
  %497 = bitcast <16 x i8> %496 to <2 x i64>
  %498 = extractelement <2 x i64> %497, i32 0
  %499 = bitcast i8* %478 to i64*
  store i64 %498, i64* %499, align 1
  %500 = getelementptr inbounds i8, i8* %271, i64 80
  %501 = getelementptr inbounds i8, i8* %269, i64 80
  %502 = getelementptr inbounds i8, i8* %271, i64 81
  %503 = bitcast i8* %500 to i64*
  %504 = load i64, i64* %503, align 1
  %505 = insertelement <2 x i64> undef, i64 %504, i32 0
  %506 = bitcast <2 x i64> %505 to <16 x i8>
  %507 = shufflevector <16 x i8> %506, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %508 = zext <8 x i8> %507 to <8 x i16>
  %509 = bitcast i8* %502 to i64*
  %510 = load i64, i64* %509, align 1
  %511 = insertelement <2 x i64> undef, i64 %510, i32 0
  %512 = bitcast <2 x i64> %511 to <16 x i8>
  %513 = shufflevector <16 x i8> %512, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %514 = zext <8 x i8> %513 to <8 x i16>
  %515 = add nuw nsw <8 x i16> %514, %508
  %516 = add nsw <8 x i16> %515, %263
  %517 = lshr <8 x i16> %516, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %518 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %517, <8 x i16> zeroinitializer) #7
  %519 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %518, <8 x i16> undef) #7
  %520 = bitcast <16 x i8> %519 to <2 x i64>
  %521 = extractelement <2 x i64> %520, i32 0
  %522 = bitcast i8* %501 to i64*
  store i64 %521, i64* %522, align 1
  %523 = getelementptr inbounds i8, i8* %271, i64 88
  %524 = getelementptr inbounds i8, i8* %269, i64 88
  %525 = getelementptr inbounds i8, i8* %271, i64 89
  %526 = bitcast i8* %523 to i64*
  %527 = load i64, i64* %526, align 1
  %528 = insertelement <2 x i64> undef, i64 %527, i32 0
  %529 = bitcast <2 x i64> %528 to <16 x i8>
  %530 = shufflevector <16 x i8> %529, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %531 = zext <8 x i8> %530 to <8 x i16>
  %532 = bitcast i8* %525 to i64*
  %533 = load i64, i64* %532, align 1
  %534 = insertelement <2 x i64> undef, i64 %533, i32 0
  %535 = bitcast <2 x i64> %534 to <16 x i8>
  %536 = shufflevector <16 x i8> %535, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %537 = zext <8 x i8> %536 to <8 x i16>
  %538 = add nuw nsw <8 x i16> %537, %531
  %539 = add nsw <8 x i16> %538, %264
  %540 = lshr <8 x i16> %539, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %541 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %540, <8 x i16> zeroinitializer) #7
  %542 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %541, <8 x i16> undef) #7
  %543 = bitcast <16 x i8> %542 to <2 x i64>
  %544 = extractelement <2 x i64> %543, i32 0
  %545 = bitcast i8* %524 to i64*
  store i64 %544, i64* %545, align 1
  %546 = getelementptr inbounds i8, i8* %271, i64 96
  %547 = getelementptr inbounds i8, i8* %269, i64 96
  %548 = getelementptr inbounds i8, i8* %271, i64 97
  %549 = bitcast i8* %546 to i64*
  %550 = load i64, i64* %549, align 1
  %551 = insertelement <2 x i64> undef, i64 %550, i32 0
  %552 = bitcast <2 x i64> %551 to <16 x i8>
  %553 = shufflevector <16 x i8> %552, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %554 = zext <8 x i8> %553 to <8 x i16>
  %555 = bitcast i8* %548 to i64*
  %556 = load i64, i64* %555, align 1
  %557 = insertelement <2 x i64> undef, i64 %556, i32 0
  %558 = bitcast <2 x i64> %557 to <16 x i8>
  %559 = shufflevector <16 x i8> %558, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %560 = zext <8 x i8> %559 to <8 x i16>
  %561 = add nuw nsw <8 x i16> %560, %554
  %562 = add nsw <8 x i16> %561, %265
  %563 = lshr <8 x i16> %562, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %564 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %563, <8 x i16> zeroinitializer) #7
  %565 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %564, <8 x i16> undef) #7
  %566 = bitcast <16 x i8> %565 to <2 x i64>
  %567 = extractelement <2 x i64> %566, i32 0
  %568 = bitcast i8* %547 to i64*
  store i64 %567, i64* %568, align 1
  %569 = getelementptr inbounds i8, i8* %271, i64 104
  %570 = getelementptr inbounds i8, i8* %269, i64 104
  %571 = getelementptr inbounds i8, i8* %271, i64 105
  %572 = bitcast i8* %569 to i64*
  %573 = load i64, i64* %572, align 1
  %574 = insertelement <2 x i64> undef, i64 %573, i32 0
  %575 = bitcast <2 x i64> %574 to <16 x i8>
  %576 = shufflevector <16 x i8> %575, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %577 = zext <8 x i8> %576 to <8 x i16>
  %578 = bitcast i8* %571 to i64*
  %579 = load i64, i64* %578, align 1
  %580 = insertelement <2 x i64> undef, i64 %579, i32 0
  %581 = bitcast <2 x i64> %580 to <16 x i8>
  %582 = shufflevector <16 x i8> %581, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %583 = zext <8 x i8> %582 to <8 x i16>
  %584 = add nuw nsw <8 x i16> %583, %577
  %585 = add nsw <8 x i16> %584, %266
  %586 = lshr <8 x i16> %585, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %587 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %586, <8 x i16> zeroinitializer) #7
  %588 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %587, <8 x i16> undef) #7
  %589 = bitcast <16 x i8> %588 to <2 x i64>
  %590 = extractelement <2 x i64> %589, i32 0
  %591 = bitcast i8* %570 to i64*
  store i64 %590, i64* %591, align 1
  %592 = getelementptr inbounds i8, i8* %271, i64 112
  %593 = getelementptr inbounds i8, i8* %269, i64 112
  %594 = getelementptr inbounds i8, i8* %271, i64 113
  %595 = bitcast i8* %592 to i64*
  %596 = load i64, i64* %595, align 1
  %597 = insertelement <2 x i64> undef, i64 %596, i32 0
  %598 = bitcast <2 x i64> %597 to <16 x i8>
  %599 = shufflevector <16 x i8> %598, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %600 = zext <8 x i8> %599 to <8 x i16>
  %601 = bitcast i8* %594 to i64*
  %602 = load i64, i64* %601, align 1
  %603 = insertelement <2 x i64> undef, i64 %602, i32 0
  %604 = bitcast <2 x i64> %603 to <16 x i8>
  %605 = shufflevector <16 x i8> %604, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %606 = zext <8 x i8> %605 to <8 x i16>
  %607 = add nuw nsw <8 x i16> %606, %600
  %608 = add nsw <8 x i16> %607, %267
  %609 = lshr <8 x i16> %608, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %610 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %609, <8 x i16> zeroinitializer) #7
  %611 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %610, <8 x i16> undef) #7
  %612 = bitcast <16 x i8> %611 to <2 x i64>
  %613 = extractelement <2 x i64> %612, i32 0
  %614 = bitcast i8* %593 to i64*
  store i64 %613, i64* %614, align 1
  %615 = getelementptr inbounds i8, i8* %271, i64 120
  %616 = getelementptr inbounds i8, i8* %269, i64 120
  %617 = getelementptr inbounds i8, i8* %271, i64 121
  %618 = bitcast i8* %615 to i64*
  %619 = load i64, i64* %618, align 1
  %620 = insertelement <2 x i64> undef, i64 %619, i32 0
  %621 = bitcast <2 x i64> %620 to <16 x i8>
  %622 = shufflevector <16 x i8> %621, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %623 = zext <8 x i8> %622 to <8 x i16>
  %624 = bitcast i8* %617 to i64*
  %625 = load i64, i64* %624, align 1
  %626 = insertelement <2 x i64> undef, i64 %625, i32 0
  %627 = bitcast <2 x i64> %626 to <16 x i8>
  %628 = shufflevector <16 x i8> %627, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %629 = zext <8 x i8> %628 to <8 x i16>
  %630 = add nuw nsw <8 x i16> %629, %623
  %631 = add nsw <8 x i16> %630, %268
  %632 = lshr <8 x i16> %631, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %633 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %632, <8 x i16> zeroinitializer) #7
  %634 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %633, <8 x i16> undef) #7
  %635 = bitcast <16 x i8> %634 to <2 x i64>
  %636 = extractelement <2 x i64> %635, i32 0
  %637 = bitcast i8* %616 to i64*
  store i64 %636, i64* %637, align 1
  %638 = getelementptr inbounds i8, i8* %269, i64 %9
  %639 = add nsw i32 %256, -1
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %1392, label %251

641:                                              ; preds = %10
  %642 = getelementptr inbounds i8, i8* %0, i64 1
  %643 = bitcast i8* %0 to i64*
  %644 = load i64, i64* %643, align 1
  %645 = insertelement <2 x i64> undef, i64 %644, i32 0
  %646 = bitcast <2 x i64> %645 to <16 x i8>
  %647 = shufflevector <16 x i8> %646, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %648 = zext <8 x i8> %647 to <8 x i16>
  %649 = bitcast i8* %642 to i64*
  %650 = load i64, i64* %649, align 1
  %651 = insertelement <2 x i64> undef, i64 %650, i32 0
  %652 = bitcast <2 x i64> %651 to <16 x i8>
  %653 = shufflevector <16 x i8> %652, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %654 = zext <8 x i8> %653 to <8 x i16>
  %655 = add nuw nsw <8 x i16> %654, %648
  %656 = getelementptr inbounds i8, i8* %0, i64 8
  %657 = getelementptr inbounds i8, i8* %0, i64 9
  %658 = bitcast i8* %656 to i64*
  %659 = load i64, i64* %658, align 1
  %660 = insertelement <2 x i64> undef, i64 %659, i32 0
  %661 = bitcast <2 x i64> %660 to <16 x i8>
  %662 = shufflevector <16 x i8> %661, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %663 = zext <8 x i8> %662 to <8 x i16>
  %664 = bitcast i8* %657 to i64*
  %665 = load i64, i64* %664, align 1
  %666 = insertelement <2 x i64> undef, i64 %665, i32 0
  %667 = bitcast <2 x i64> %666 to <16 x i8>
  %668 = shufflevector <16 x i8> %667, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %669 = zext <8 x i8> %668 to <8 x i16>
  %670 = add nuw nsw <8 x i16> %669, %663
  %671 = getelementptr inbounds i8, i8* %0, i64 16
  %672 = getelementptr inbounds i8, i8* %0, i64 17
  %673 = bitcast i8* %671 to i64*
  %674 = load i64, i64* %673, align 1
  %675 = insertelement <2 x i64> undef, i64 %674, i32 0
  %676 = bitcast <2 x i64> %675 to <16 x i8>
  %677 = shufflevector <16 x i8> %676, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %678 = zext <8 x i8> %677 to <8 x i16>
  %679 = bitcast i8* %672 to i64*
  %680 = load i64, i64* %679, align 1
  %681 = insertelement <2 x i64> undef, i64 %680, i32 0
  %682 = bitcast <2 x i64> %681 to <16 x i8>
  %683 = shufflevector <16 x i8> %682, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %684 = zext <8 x i8> %683 to <8 x i16>
  %685 = add nuw nsw <8 x i16> %684, %678
  %686 = getelementptr inbounds i8, i8* %0, i64 24
  %687 = getelementptr inbounds i8, i8* %0, i64 25
  %688 = bitcast i8* %686 to i64*
  %689 = load i64, i64* %688, align 1
  %690 = insertelement <2 x i64> undef, i64 %689, i32 0
  %691 = bitcast <2 x i64> %690 to <16 x i8>
  %692 = shufflevector <16 x i8> %691, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %693 = zext <8 x i8> %692 to <8 x i16>
  %694 = bitcast i8* %687 to i64*
  %695 = load i64, i64* %694, align 1
  %696 = insertelement <2 x i64> undef, i64 %695, i32 0
  %697 = bitcast <2 x i64> %696 to <16 x i8>
  %698 = shufflevector <16 x i8> %697, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %699 = zext <8 x i8> %698 to <8 x i16>
  %700 = add nuw nsw <8 x i16> %699, %693
  %701 = getelementptr inbounds i8, i8* %0, i64 32
  %702 = getelementptr inbounds i8, i8* %0, i64 33
  %703 = bitcast i8* %701 to i64*
  %704 = load i64, i64* %703, align 1
  %705 = insertelement <2 x i64> undef, i64 %704, i32 0
  %706 = bitcast <2 x i64> %705 to <16 x i8>
  %707 = shufflevector <16 x i8> %706, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %708 = zext <8 x i8> %707 to <8 x i16>
  %709 = bitcast i8* %702 to i64*
  %710 = load i64, i64* %709, align 1
  %711 = insertelement <2 x i64> undef, i64 %710, i32 0
  %712 = bitcast <2 x i64> %711 to <16 x i8>
  %713 = shufflevector <16 x i8> %712, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %714 = zext <8 x i8> %713 to <8 x i16>
  %715 = add nuw nsw <8 x i16> %714, %708
  %716 = getelementptr inbounds i8, i8* %0, i64 40
  %717 = getelementptr inbounds i8, i8* %0, i64 41
  %718 = bitcast i8* %716 to i64*
  %719 = load i64, i64* %718, align 1
  %720 = insertelement <2 x i64> undef, i64 %719, i32 0
  %721 = bitcast <2 x i64> %720 to <16 x i8>
  %722 = shufflevector <16 x i8> %721, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %723 = zext <8 x i8> %722 to <8 x i16>
  %724 = bitcast i8* %717 to i64*
  %725 = load i64, i64* %724, align 1
  %726 = insertelement <2 x i64> undef, i64 %725, i32 0
  %727 = bitcast <2 x i64> %726 to <16 x i8>
  %728 = shufflevector <16 x i8> %727, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %729 = zext <8 x i8> %728 to <8 x i16>
  %730 = add nuw nsw <8 x i16> %729, %723
  %731 = getelementptr inbounds i8, i8* %0, i64 48
  %732 = getelementptr inbounds i8, i8* %0, i64 49
  %733 = bitcast i8* %731 to i64*
  %734 = load i64, i64* %733, align 1
  %735 = insertelement <2 x i64> undef, i64 %734, i32 0
  %736 = bitcast <2 x i64> %735 to <16 x i8>
  %737 = shufflevector <16 x i8> %736, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %738 = zext <8 x i8> %737 to <8 x i16>
  %739 = bitcast i8* %732 to i64*
  %740 = load i64, i64* %739, align 1
  %741 = insertelement <2 x i64> undef, i64 %740, i32 0
  %742 = bitcast <2 x i64> %741 to <16 x i8>
  %743 = shufflevector <16 x i8> %742, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %744 = zext <8 x i8> %743 to <8 x i16>
  %745 = add nuw nsw <8 x i16> %744, %738
  %746 = getelementptr inbounds i8, i8* %0, i64 56
  %747 = getelementptr inbounds i8, i8* %0, i64 57
  %748 = bitcast i8* %746 to i64*
  %749 = load i64, i64* %748, align 1
  %750 = insertelement <2 x i64> undef, i64 %749, i32 0
  %751 = bitcast <2 x i64> %750 to <16 x i8>
  %752 = shufflevector <16 x i8> %751, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %753 = zext <8 x i8> %752 to <8 x i16>
  %754 = bitcast i8* %747 to i64*
  %755 = load i64, i64* %754, align 1
  %756 = insertelement <2 x i64> undef, i64 %755, i32 0
  %757 = bitcast <2 x i64> %756 to <16 x i8>
  %758 = shufflevector <16 x i8> %757, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %759 = zext <8 x i8> %758 to <8 x i16>
  %760 = add nuw nsw <8 x i16> %759, %753
  br label %761

761:                                              ; preds = %761, %641
  %762 = phi <8 x i16> [ %700, %641 ], [ %856, %761 ]
  %763 = phi <8 x i16> [ %685, %641 ], [ %833, %761 ]
  %764 = phi <8 x i16> [ %670, %641 ], [ %810, %761 ]
  %765 = phi <8 x i16> [ %655, %641 ], [ %787, %761 ]
  %766 = phi i32 [ %7, %641 ], [ %957, %761 ]
  %767 = phi <8 x i16> [ %715, %641 ], [ %879, %761 ]
  %768 = phi <8 x i16> [ %730, %641 ], [ %902, %761 ]
  %769 = phi <8 x i16> [ %745, %641 ], [ %925, %761 ]
  %770 = phi <8 x i16> [ %760, %641 ], [ %948, %761 ]
  %771 = phi i8* [ %8, %641 ], [ %956, %761 ]
  %772 = phi i8* [ %0, %641 ], [ %773, %761 ]
  %773 = getelementptr inbounds i8, i8* %772, i64 %1
  %774 = getelementptr inbounds i8, i8* %773, i64 1
  %775 = bitcast i8* %773 to i64*
  %776 = load i64, i64* %775, align 1
  %777 = insertelement <2 x i64> undef, i64 %776, i32 0
  %778 = bitcast <2 x i64> %777 to <16 x i8>
  %779 = shufflevector <16 x i8> %778, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %780 = zext <8 x i8> %779 to <8 x i16>
  %781 = bitcast i8* %774 to i64*
  %782 = load i64, i64* %781, align 1
  %783 = insertelement <2 x i64> undef, i64 %782, i32 0
  %784 = bitcast <2 x i64> %783 to <16 x i8>
  %785 = shufflevector <16 x i8> %784, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %786 = zext <8 x i8> %785 to <8 x i16>
  %787 = add nuw nsw <8 x i16> %786, %780
  %788 = add nsw <8 x i16> %787, %765
  %789 = lshr <8 x i16> %788, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %790 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %789, <8 x i16> zeroinitializer) #7
  %791 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %790, <8 x i16> undef) #7
  %792 = bitcast <16 x i8> %791 to <2 x i64>
  %793 = extractelement <2 x i64> %792, i32 0
  %794 = bitcast i8* %771 to i64*
  store i64 %793, i64* %794, align 1
  %795 = getelementptr inbounds i8, i8* %773, i64 8
  %796 = getelementptr inbounds i8, i8* %771, i64 8
  %797 = getelementptr inbounds i8, i8* %773, i64 9
  %798 = bitcast i8* %795 to i64*
  %799 = load i64, i64* %798, align 1
  %800 = insertelement <2 x i64> undef, i64 %799, i32 0
  %801 = bitcast <2 x i64> %800 to <16 x i8>
  %802 = shufflevector <16 x i8> %801, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %803 = zext <8 x i8> %802 to <8 x i16>
  %804 = bitcast i8* %797 to i64*
  %805 = load i64, i64* %804, align 1
  %806 = insertelement <2 x i64> undef, i64 %805, i32 0
  %807 = bitcast <2 x i64> %806 to <16 x i8>
  %808 = shufflevector <16 x i8> %807, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %809 = zext <8 x i8> %808 to <8 x i16>
  %810 = add nuw nsw <8 x i16> %809, %803
  %811 = add nsw <8 x i16> %810, %764
  %812 = lshr <8 x i16> %811, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %813 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %812, <8 x i16> zeroinitializer) #7
  %814 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %813, <8 x i16> undef) #7
  %815 = bitcast <16 x i8> %814 to <2 x i64>
  %816 = extractelement <2 x i64> %815, i32 0
  %817 = bitcast i8* %796 to i64*
  store i64 %816, i64* %817, align 1
  %818 = getelementptr inbounds i8, i8* %773, i64 16
  %819 = getelementptr inbounds i8, i8* %771, i64 16
  %820 = getelementptr inbounds i8, i8* %773, i64 17
  %821 = bitcast i8* %818 to i64*
  %822 = load i64, i64* %821, align 1
  %823 = insertelement <2 x i64> undef, i64 %822, i32 0
  %824 = bitcast <2 x i64> %823 to <16 x i8>
  %825 = shufflevector <16 x i8> %824, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %826 = zext <8 x i8> %825 to <8 x i16>
  %827 = bitcast i8* %820 to i64*
  %828 = load i64, i64* %827, align 1
  %829 = insertelement <2 x i64> undef, i64 %828, i32 0
  %830 = bitcast <2 x i64> %829 to <16 x i8>
  %831 = shufflevector <16 x i8> %830, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %832 = zext <8 x i8> %831 to <8 x i16>
  %833 = add nuw nsw <8 x i16> %832, %826
  %834 = add nsw <8 x i16> %833, %763
  %835 = lshr <8 x i16> %834, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %836 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %835, <8 x i16> zeroinitializer) #7
  %837 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %836, <8 x i16> undef) #7
  %838 = bitcast <16 x i8> %837 to <2 x i64>
  %839 = extractelement <2 x i64> %838, i32 0
  %840 = bitcast i8* %819 to i64*
  store i64 %839, i64* %840, align 1
  %841 = getelementptr inbounds i8, i8* %773, i64 24
  %842 = getelementptr inbounds i8, i8* %771, i64 24
  %843 = getelementptr inbounds i8, i8* %773, i64 25
  %844 = bitcast i8* %841 to i64*
  %845 = load i64, i64* %844, align 1
  %846 = insertelement <2 x i64> undef, i64 %845, i32 0
  %847 = bitcast <2 x i64> %846 to <16 x i8>
  %848 = shufflevector <16 x i8> %847, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %849 = zext <8 x i8> %848 to <8 x i16>
  %850 = bitcast i8* %843 to i64*
  %851 = load i64, i64* %850, align 1
  %852 = insertelement <2 x i64> undef, i64 %851, i32 0
  %853 = bitcast <2 x i64> %852 to <16 x i8>
  %854 = shufflevector <16 x i8> %853, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %855 = zext <8 x i8> %854 to <8 x i16>
  %856 = add nuw nsw <8 x i16> %855, %849
  %857 = add nsw <8 x i16> %856, %762
  %858 = lshr <8 x i16> %857, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %859 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %858, <8 x i16> zeroinitializer) #7
  %860 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %859, <8 x i16> undef) #7
  %861 = bitcast <16 x i8> %860 to <2 x i64>
  %862 = extractelement <2 x i64> %861, i32 0
  %863 = bitcast i8* %842 to i64*
  store i64 %862, i64* %863, align 1
  %864 = getelementptr inbounds i8, i8* %773, i64 32
  %865 = getelementptr inbounds i8, i8* %771, i64 32
  %866 = getelementptr inbounds i8, i8* %773, i64 33
  %867 = bitcast i8* %864 to i64*
  %868 = load i64, i64* %867, align 1
  %869 = insertelement <2 x i64> undef, i64 %868, i32 0
  %870 = bitcast <2 x i64> %869 to <16 x i8>
  %871 = shufflevector <16 x i8> %870, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %872 = zext <8 x i8> %871 to <8 x i16>
  %873 = bitcast i8* %866 to i64*
  %874 = load i64, i64* %873, align 1
  %875 = insertelement <2 x i64> undef, i64 %874, i32 0
  %876 = bitcast <2 x i64> %875 to <16 x i8>
  %877 = shufflevector <16 x i8> %876, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %878 = zext <8 x i8> %877 to <8 x i16>
  %879 = add nuw nsw <8 x i16> %878, %872
  %880 = add nsw <8 x i16> %879, %767
  %881 = lshr <8 x i16> %880, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %882 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %881, <8 x i16> zeroinitializer) #7
  %883 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %882, <8 x i16> undef) #7
  %884 = bitcast <16 x i8> %883 to <2 x i64>
  %885 = extractelement <2 x i64> %884, i32 0
  %886 = bitcast i8* %865 to i64*
  store i64 %885, i64* %886, align 1
  %887 = getelementptr inbounds i8, i8* %773, i64 40
  %888 = getelementptr inbounds i8, i8* %771, i64 40
  %889 = getelementptr inbounds i8, i8* %773, i64 41
  %890 = bitcast i8* %887 to i64*
  %891 = load i64, i64* %890, align 1
  %892 = insertelement <2 x i64> undef, i64 %891, i32 0
  %893 = bitcast <2 x i64> %892 to <16 x i8>
  %894 = shufflevector <16 x i8> %893, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %895 = zext <8 x i8> %894 to <8 x i16>
  %896 = bitcast i8* %889 to i64*
  %897 = load i64, i64* %896, align 1
  %898 = insertelement <2 x i64> undef, i64 %897, i32 0
  %899 = bitcast <2 x i64> %898 to <16 x i8>
  %900 = shufflevector <16 x i8> %899, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %901 = zext <8 x i8> %900 to <8 x i16>
  %902 = add nuw nsw <8 x i16> %901, %895
  %903 = add nsw <8 x i16> %902, %768
  %904 = lshr <8 x i16> %903, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %905 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %904, <8 x i16> zeroinitializer) #7
  %906 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %905, <8 x i16> undef) #7
  %907 = bitcast <16 x i8> %906 to <2 x i64>
  %908 = extractelement <2 x i64> %907, i32 0
  %909 = bitcast i8* %888 to i64*
  store i64 %908, i64* %909, align 1
  %910 = getelementptr inbounds i8, i8* %773, i64 48
  %911 = getelementptr inbounds i8, i8* %771, i64 48
  %912 = getelementptr inbounds i8, i8* %773, i64 49
  %913 = bitcast i8* %910 to i64*
  %914 = load i64, i64* %913, align 1
  %915 = insertelement <2 x i64> undef, i64 %914, i32 0
  %916 = bitcast <2 x i64> %915 to <16 x i8>
  %917 = shufflevector <16 x i8> %916, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %918 = zext <8 x i8> %917 to <8 x i16>
  %919 = bitcast i8* %912 to i64*
  %920 = load i64, i64* %919, align 1
  %921 = insertelement <2 x i64> undef, i64 %920, i32 0
  %922 = bitcast <2 x i64> %921 to <16 x i8>
  %923 = shufflevector <16 x i8> %922, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %924 = zext <8 x i8> %923 to <8 x i16>
  %925 = add nuw nsw <8 x i16> %924, %918
  %926 = add nsw <8 x i16> %925, %769
  %927 = lshr <8 x i16> %926, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %928 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %927, <8 x i16> zeroinitializer) #7
  %929 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %928, <8 x i16> undef) #7
  %930 = bitcast <16 x i8> %929 to <2 x i64>
  %931 = extractelement <2 x i64> %930, i32 0
  %932 = bitcast i8* %911 to i64*
  store i64 %931, i64* %932, align 1
  %933 = getelementptr inbounds i8, i8* %773, i64 56
  %934 = getelementptr inbounds i8, i8* %771, i64 56
  %935 = getelementptr inbounds i8, i8* %773, i64 57
  %936 = bitcast i8* %933 to i64*
  %937 = load i64, i64* %936, align 1
  %938 = insertelement <2 x i64> undef, i64 %937, i32 0
  %939 = bitcast <2 x i64> %938 to <16 x i8>
  %940 = shufflevector <16 x i8> %939, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %941 = zext <8 x i8> %940 to <8 x i16>
  %942 = bitcast i8* %935 to i64*
  %943 = load i64, i64* %942, align 1
  %944 = insertelement <2 x i64> undef, i64 %943, i32 0
  %945 = bitcast <2 x i64> %944 to <16 x i8>
  %946 = shufflevector <16 x i8> %945, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %947 = zext <8 x i8> %946 to <8 x i16>
  %948 = add nuw nsw <8 x i16> %947, %941
  %949 = add nsw <8 x i16> %948, %770
  %950 = lshr <8 x i16> %949, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %951 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %950, <8 x i16> zeroinitializer) #7
  %952 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %951, <8 x i16> undef) #7
  %953 = bitcast <16 x i8> %952 to <2 x i64>
  %954 = extractelement <2 x i64> %953, i32 0
  %955 = bitcast i8* %934 to i64*
  store i64 %954, i64* %955, align 1
  %956 = getelementptr inbounds i8, i8* %771, i64 %9
  %957 = add nsw i32 %766, -1
  %958 = icmp eq i32 %957, 0
  br i1 %958, label %1392, label %761

959:                                              ; preds = %10
  %960 = getelementptr inbounds i8, i8* %0, i64 1
  %961 = bitcast i8* %0 to i64*
  %962 = load i64, i64* %961, align 1
  %963 = insertelement <2 x i64> undef, i64 %962, i32 0
  %964 = bitcast <2 x i64> %963 to <16 x i8>
  %965 = shufflevector <16 x i8> %964, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %966 = zext <8 x i8> %965 to <8 x i16>
  %967 = bitcast i8* %960 to i64*
  %968 = load i64, i64* %967, align 1
  %969 = insertelement <2 x i64> undef, i64 %968, i32 0
  %970 = bitcast <2 x i64> %969 to <16 x i8>
  %971 = shufflevector <16 x i8> %970, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %972 = zext <8 x i8> %971 to <8 x i16>
  %973 = add nuw nsw <8 x i16> %972, %966
  %974 = getelementptr inbounds i8, i8* %0, i64 8
  %975 = getelementptr inbounds i8, i8* %0, i64 9
  %976 = bitcast i8* %974 to i64*
  %977 = load i64, i64* %976, align 1
  %978 = insertelement <2 x i64> undef, i64 %977, i32 0
  %979 = bitcast <2 x i64> %978 to <16 x i8>
  %980 = shufflevector <16 x i8> %979, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %981 = zext <8 x i8> %980 to <8 x i16>
  %982 = bitcast i8* %975 to i64*
  %983 = load i64, i64* %982, align 1
  %984 = insertelement <2 x i64> undef, i64 %983, i32 0
  %985 = bitcast <2 x i64> %984 to <16 x i8>
  %986 = shufflevector <16 x i8> %985, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %987 = zext <8 x i8> %986 to <8 x i16>
  %988 = add nuw nsw <8 x i16> %987, %981
  %989 = getelementptr inbounds i8, i8* %0, i64 16
  %990 = getelementptr inbounds i8, i8* %0, i64 17
  %991 = bitcast i8* %989 to i64*
  %992 = load i64, i64* %991, align 1
  %993 = insertelement <2 x i64> undef, i64 %992, i32 0
  %994 = bitcast <2 x i64> %993 to <16 x i8>
  %995 = shufflevector <16 x i8> %994, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %996 = zext <8 x i8> %995 to <8 x i16>
  %997 = bitcast i8* %990 to i64*
  %998 = load i64, i64* %997, align 1
  %999 = insertelement <2 x i64> undef, i64 %998, i32 0
  %1000 = bitcast <2 x i64> %999 to <16 x i8>
  %1001 = shufflevector <16 x i8> %1000, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1002 = zext <8 x i8> %1001 to <8 x i16>
  %1003 = add nuw nsw <8 x i16> %1002, %996
  %1004 = getelementptr inbounds i8, i8* %0, i64 24
  %1005 = getelementptr inbounds i8, i8* %0, i64 25
  %1006 = bitcast i8* %1004 to i64*
  %1007 = load i64, i64* %1006, align 1
  %1008 = insertelement <2 x i64> undef, i64 %1007, i32 0
  %1009 = bitcast <2 x i64> %1008 to <16 x i8>
  %1010 = shufflevector <16 x i8> %1009, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1011 = zext <8 x i8> %1010 to <8 x i16>
  %1012 = bitcast i8* %1005 to i64*
  %1013 = load i64, i64* %1012, align 1
  %1014 = insertelement <2 x i64> undef, i64 %1013, i32 0
  %1015 = bitcast <2 x i64> %1014 to <16 x i8>
  %1016 = shufflevector <16 x i8> %1015, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1017 = zext <8 x i8> %1016 to <8 x i16>
  %1018 = add nuw nsw <8 x i16> %1017, %1011
  br label %1019

1019:                                             ; preds = %1019, %959
  %1020 = phi <8 x i16> [ %1018, %959 ], [ %1110, %1019 ]
  %1021 = phi <8 x i16> [ %1003, %959 ], [ %1087, %1019 ]
  %1022 = phi <8 x i16> [ %988, %959 ], [ %1064, %1019 ]
  %1023 = phi <8 x i16> [ %973, %959 ], [ %1041, %1019 ]
  %1024 = phi i32 [ %7, %959 ], [ %1119, %1019 ]
  %1025 = phi i8* [ %8, %959 ], [ %1118, %1019 ]
  %1026 = phi i8* [ %0, %959 ], [ %1027, %1019 ]
  %1027 = getelementptr inbounds i8, i8* %1026, i64 %1
  %1028 = getelementptr inbounds i8, i8* %1027, i64 1
  %1029 = bitcast i8* %1027 to i64*
  %1030 = load i64, i64* %1029, align 1
  %1031 = insertelement <2 x i64> undef, i64 %1030, i32 0
  %1032 = bitcast <2 x i64> %1031 to <16 x i8>
  %1033 = shufflevector <16 x i8> %1032, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1034 = zext <8 x i8> %1033 to <8 x i16>
  %1035 = bitcast i8* %1028 to i64*
  %1036 = load i64, i64* %1035, align 1
  %1037 = insertelement <2 x i64> undef, i64 %1036, i32 0
  %1038 = bitcast <2 x i64> %1037 to <16 x i8>
  %1039 = shufflevector <16 x i8> %1038, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1040 = zext <8 x i8> %1039 to <8 x i16>
  %1041 = add nuw nsw <8 x i16> %1040, %1034
  %1042 = add nsw <8 x i16> %1041, %1023
  %1043 = lshr <8 x i16> %1042, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1044 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %1043, <8 x i16> zeroinitializer) #7
  %1045 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1044, <8 x i16> undef) #7
  %1046 = bitcast <16 x i8> %1045 to <2 x i64>
  %1047 = extractelement <2 x i64> %1046, i32 0
  %1048 = bitcast i8* %1025 to i64*
  store i64 %1047, i64* %1048, align 1
  %1049 = getelementptr inbounds i8, i8* %1027, i64 8
  %1050 = getelementptr inbounds i8, i8* %1025, i64 8
  %1051 = getelementptr inbounds i8, i8* %1027, i64 9
  %1052 = bitcast i8* %1049 to i64*
  %1053 = load i64, i64* %1052, align 1
  %1054 = insertelement <2 x i64> undef, i64 %1053, i32 0
  %1055 = bitcast <2 x i64> %1054 to <16 x i8>
  %1056 = shufflevector <16 x i8> %1055, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1057 = zext <8 x i8> %1056 to <8 x i16>
  %1058 = bitcast i8* %1051 to i64*
  %1059 = load i64, i64* %1058, align 1
  %1060 = insertelement <2 x i64> undef, i64 %1059, i32 0
  %1061 = bitcast <2 x i64> %1060 to <16 x i8>
  %1062 = shufflevector <16 x i8> %1061, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1063 = zext <8 x i8> %1062 to <8 x i16>
  %1064 = add nuw nsw <8 x i16> %1063, %1057
  %1065 = add nsw <8 x i16> %1064, %1022
  %1066 = lshr <8 x i16> %1065, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1067 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %1066, <8 x i16> zeroinitializer) #7
  %1068 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1067, <8 x i16> undef) #7
  %1069 = bitcast <16 x i8> %1068 to <2 x i64>
  %1070 = extractelement <2 x i64> %1069, i32 0
  %1071 = bitcast i8* %1050 to i64*
  store i64 %1070, i64* %1071, align 1
  %1072 = getelementptr inbounds i8, i8* %1027, i64 16
  %1073 = getelementptr inbounds i8, i8* %1025, i64 16
  %1074 = getelementptr inbounds i8, i8* %1027, i64 17
  %1075 = bitcast i8* %1072 to i64*
  %1076 = load i64, i64* %1075, align 1
  %1077 = insertelement <2 x i64> undef, i64 %1076, i32 0
  %1078 = bitcast <2 x i64> %1077 to <16 x i8>
  %1079 = shufflevector <16 x i8> %1078, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1080 = zext <8 x i8> %1079 to <8 x i16>
  %1081 = bitcast i8* %1074 to i64*
  %1082 = load i64, i64* %1081, align 1
  %1083 = insertelement <2 x i64> undef, i64 %1082, i32 0
  %1084 = bitcast <2 x i64> %1083 to <16 x i8>
  %1085 = shufflevector <16 x i8> %1084, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1086 = zext <8 x i8> %1085 to <8 x i16>
  %1087 = add nuw nsw <8 x i16> %1086, %1080
  %1088 = add nsw <8 x i16> %1087, %1021
  %1089 = lshr <8 x i16> %1088, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1090 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %1089, <8 x i16> zeroinitializer) #7
  %1091 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1090, <8 x i16> undef) #7
  %1092 = bitcast <16 x i8> %1091 to <2 x i64>
  %1093 = extractelement <2 x i64> %1092, i32 0
  %1094 = bitcast i8* %1073 to i64*
  store i64 %1093, i64* %1094, align 1
  %1095 = getelementptr inbounds i8, i8* %1027, i64 24
  %1096 = getelementptr inbounds i8, i8* %1025, i64 24
  %1097 = getelementptr inbounds i8, i8* %1027, i64 25
  %1098 = bitcast i8* %1095 to i64*
  %1099 = load i64, i64* %1098, align 1
  %1100 = insertelement <2 x i64> undef, i64 %1099, i32 0
  %1101 = bitcast <2 x i64> %1100 to <16 x i8>
  %1102 = shufflevector <16 x i8> %1101, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1103 = zext <8 x i8> %1102 to <8 x i16>
  %1104 = bitcast i8* %1097 to i64*
  %1105 = load i64, i64* %1104, align 1
  %1106 = insertelement <2 x i64> undef, i64 %1105, i32 0
  %1107 = bitcast <2 x i64> %1106 to <16 x i8>
  %1108 = shufflevector <16 x i8> %1107, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1109 = zext <8 x i8> %1108 to <8 x i16>
  %1110 = add nuw nsw <8 x i16> %1109, %1103
  %1111 = add nsw <8 x i16> %1110, %1020
  %1112 = lshr <8 x i16> %1111, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1113 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %1112, <8 x i16> zeroinitializer) #7
  %1114 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1113, <8 x i16> undef) #7
  %1115 = bitcast <16 x i8> %1114 to <2 x i64>
  %1116 = extractelement <2 x i64> %1115, i32 0
  %1117 = bitcast i8* %1096 to i64*
  store i64 %1116, i64* %1117, align 1
  %1118 = getelementptr inbounds i8, i8* %1025, i64 %9
  %1119 = add nsw i32 %1024, -1
  %1120 = icmp eq i32 %1119, 0
  br i1 %1120, label %1392, label %1019

1121:                                             ; preds = %10
  %1122 = getelementptr inbounds i8, i8* %0, i64 1
  %1123 = bitcast i8* %0 to i64*
  %1124 = load i64, i64* %1123, align 1
  %1125 = insertelement <2 x i64> undef, i64 %1124, i32 0
  %1126 = bitcast <2 x i64> %1125 to <16 x i8>
  %1127 = shufflevector <16 x i8> %1126, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1128 = zext <8 x i8> %1127 to <8 x i16>
  %1129 = bitcast i8* %1122 to i64*
  %1130 = load i64, i64* %1129, align 1
  %1131 = insertelement <2 x i64> undef, i64 %1130, i32 0
  %1132 = bitcast <2 x i64> %1131 to <16 x i8>
  %1133 = shufflevector <16 x i8> %1132, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1134 = zext <8 x i8> %1133 to <8 x i16>
  %1135 = add nuw nsw <8 x i16> %1134, %1128
  %1136 = getelementptr inbounds i8, i8* %0, i64 8
  %1137 = getelementptr inbounds i8, i8* %0, i64 9
  %1138 = bitcast i8* %1136 to i64*
  %1139 = load i64, i64* %1138, align 1
  %1140 = insertelement <2 x i64> undef, i64 %1139, i32 0
  %1141 = bitcast <2 x i64> %1140 to <16 x i8>
  %1142 = shufflevector <16 x i8> %1141, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1143 = zext <8 x i8> %1142 to <8 x i16>
  %1144 = bitcast i8* %1137 to i64*
  %1145 = load i64, i64* %1144, align 1
  %1146 = insertelement <2 x i64> undef, i64 %1145, i32 0
  %1147 = bitcast <2 x i64> %1146 to <16 x i8>
  %1148 = shufflevector <16 x i8> %1147, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1149 = zext <8 x i8> %1148 to <8 x i16>
  %1150 = add nuw nsw <8 x i16> %1149, %1143
  br label %1151

1151:                                             ; preds = %1151, %1121
  %1152 = phi <8 x i16> [ %1150, %1121 ], [ %1194, %1151 ]
  %1153 = phi <8 x i16> [ %1135, %1121 ], [ %1171, %1151 ]
  %1154 = phi i32 [ %7, %1121 ], [ %1203, %1151 ]
  %1155 = phi i8* [ %8, %1121 ], [ %1202, %1151 ]
  %1156 = phi i8* [ %0, %1121 ], [ %1157, %1151 ]
  %1157 = getelementptr inbounds i8, i8* %1156, i64 %1
  %1158 = getelementptr inbounds i8, i8* %1157, i64 1
  %1159 = bitcast i8* %1157 to i64*
  %1160 = load i64, i64* %1159, align 1
  %1161 = insertelement <2 x i64> undef, i64 %1160, i32 0
  %1162 = bitcast <2 x i64> %1161 to <16 x i8>
  %1163 = shufflevector <16 x i8> %1162, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1164 = zext <8 x i8> %1163 to <8 x i16>
  %1165 = bitcast i8* %1158 to i64*
  %1166 = load i64, i64* %1165, align 1
  %1167 = insertelement <2 x i64> undef, i64 %1166, i32 0
  %1168 = bitcast <2 x i64> %1167 to <16 x i8>
  %1169 = shufflevector <16 x i8> %1168, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1170 = zext <8 x i8> %1169 to <8 x i16>
  %1171 = add nuw nsw <8 x i16> %1170, %1164
  %1172 = add nsw <8 x i16> %1171, %1153
  %1173 = lshr <8 x i16> %1172, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1174 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %1173, <8 x i16> zeroinitializer) #7
  %1175 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1174, <8 x i16> undef) #7
  %1176 = bitcast <16 x i8> %1175 to <2 x i64>
  %1177 = extractelement <2 x i64> %1176, i32 0
  %1178 = bitcast i8* %1155 to i64*
  store i64 %1177, i64* %1178, align 1
  %1179 = getelementptr inbounds i8, i8* %1157, i64 8
  %1180 = getelementptr inbounds i8, i8* %1155, i64 8
  %1181 = getelementptr inbounds i8, i8* %1157, i64 9
  %1182 = bitcast i8* %1179 to i64*
  %1183 = load i64, i64* %1182, align 1
  %1184 = insertelement <2 x i64> undef, i64 %1183, i32 0
  %1185 = bitcast <2 x i64> %1184 to <16 x i8>
  %1186 = shufflevector <16 x i8> %1185, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1187 = zext <8 x i8> %1186 to <8 x i16>
  %1188 = bitcast i8* %1181 to i64*
  %1189 = load i64, i64* %1188, align 1
  %1190 = insertelement <2 x i64> undef, i64 %1189, i32 0
  %1191 = bitcast <2 x i64> %1190 to <16 x i8>
  %1192 = shufflevector <16 x i8> %1191, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1193 = zext <8 x i8> %1192 to <8 x i16>
  %1194 = add nuw nsw <8 x i16> %1193, %1187
  %1195 = add nsw <8 x i16> %1194, %1152
  %1196 = lshr <8 x i16> %1195, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1197 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %1196, <8 x i16> zeroinitializer) #7
  %1198 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1197, <8 x i16> undef) #7
  %1199 = bitcast <16 x i8> %1198 to <2 x i64>
  %1200 = extractelement <2 x i64> %1199, i32 0
  %1201 = bitcast i8* %1180 to i64*
  store i64 %1200, i64* %1201, align 1
  %1202 = getelementptr inbounds i8, i8* %1155, i64 %9
  %1203 = add nsw i32 %1154, -1
  %1204 = icmp eq i32 %1203, 0
  br i1 %1204, label %1392, label %1151

1205:                                             ; preds = %10
  %1206 = getelementptr inbounds i8, i8* %0, i64 1
  %1207 = bitcast i8* %0 to i64*
  %1208 = load i64, i64* %1207, align 1
  %1209 = insertelement <2 x i64> undef, i64 %1208, i32 0
  %1210 = bitcast <2 x i64> %1209 to <16 x i8>
  %1211 = shufflevector <16 x i8> %1210, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1212 = zext <8 x i8> %1211 to <8 x i16>
  %1213 = bitcast i8* %1206 to i64*
  %1214 = load i64, i64* %1213, align 1
  %1215 = insertelement <2 x i64> undef, i64 %1214, i32 0
  %1216 = bitcast <2 x i64> %1215 to <16 x i8>
  %1217 = shufflevector <16 x i8> %1216, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1218 = zext <8 x i8> %1217 to <8 x i16>
  %1219 = add nuw nsw <8 x i16> %1218, %1212
  br label %1220

1220:                                             ; preds = %1220, %1205
  %1221 = phi i8* [ %8, %1205 ], [ %1247, %1220 ]
  %1222 = phi <8 x i16> [ %1219, %1205 ], [ %1239, %1220 ]
  %1223 = phi i32 [ %7, %1205 ], [ %1248, %1220 ]
  %1224 = phi i8* [ %0, %1205 ], [ %1225, %1220 ]
  %1225 = getelementptr inbounds i8, i8* %1224, i64 %1
  %1226 = getelementptr inbounds i8, i8* %1225, i64 1
  %1227 = bitcast i8* %1225 to i64*
  %1228 = load i64, i64* %1227, align 1
  %1229 = insertelement <2 x i64> undef, i64 %1228, i32 0
  %1230 = bitcast <2 x i64> %1229 to <16 x i8>
  %1231 = shufflevector <16 x i8> %1230, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1232 = zext <8 x i8> %1231 to <8 x i16>
  %1233 = bitcast i8* %1226 to i64*
  %1234 = load i64, i64* %1233, align 1
  %1235 = insertelement <2 x i64> undef, i64 %1234, i32 0
  %1236 = bitcast <2 x i64> %1235 to <16 x i8>
  %1237 = shufflevector <16 x i8> %1236, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1238 = zext <8 x i8> %1237 to <8 x i16>
  %1239 = add nuw nsw <8 x i16> %1238, %1232
  %1240 = add nsw <8 x i16> %1239, %1222
  %1241 = lshr <8 x i16> %1240, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1242 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %1241, <8 x i16> zeroinitializer) #7
  %1243 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1242, <8 x i16> undef) #7
  %1244 = bitcast <16 x i8> %1243 to <2 x i64>
  %1245 = extractelement <2 x i64> %1244, i32 0
  %1246 = bitcast i8* %1221 to i64*
  store i64 %1245, i64* %1246, align 1
  %1247 = getelementptr inbounds i8, i8* %1221, i64 %9
  %1248 = add nsw i32 %1223, -1
  %1249 = icmp eq i32 %1248, 0
  br i1 %1249, label %1392, label %1220

1250:                                             ; preds = %10
  %1251 = bitcast i8* %0 to i32*
  %1252 = load i32, i32* %1251, align 1
  %1253 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1252, i32 0
  %1254 = bitcast <4 x i32> %1253 to <16 x i8>
  %1255 = shufflevector <16 x i8> %1254, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1256 = zext <8 x i8> %1255 to <8 x i16>
  %1257 = getelementptr inbounds i8, i8* %0, i64 1
  %1258 = bitcast i8* %1257 to i32*
  %1259 = load i32, i32* %1258, align 1
  %1260 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1259, i32 0
  %1261 = bitcast <4 x i32> %1260 to <16 x i8>
  %1262 = shufflevector <16 x i8> %1261, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1263 = zext <8 x i8> %1262 to <8 x i16>
  %1264 = add nuw nsw <8 x i16> %1263, %1256
  %1265 = bitcast <8 x i16> %1264 to <2 x i64>
  br label %1266

1266:                                             ; preds = %1266, %1250
  %1267 = phi <2 x i64> [ %1265, %1250 ], [ %1312, %1266 ]
  %1268 = phi i32 [ %7, %1250 ], [ %1313, %1266 ]
  %1269 = phi i8* [ %8, %1250 ], [ %1309, %1266 ]
  %1270 = phi i8* [ %0, %1250 ], [ %1279, %1266 ]
  %1271 = getelementptr inbounds i8, i8* %1270, i64 %1
  %1272 = bitcast i8* %1271 to i32*
  %1273 = load i32, i32* %1272, align 1
  %1274 = insertelement <4 x i32> undef, i32 %1273, i32 0
  %1275 = getelementptr inbounds i8, i8* %1271, i64 1
  %1276 = bitcast i8* %1275 to i32*
  %1277 = load i32, i32* %1276, align 1
  %1278 = insertelement <4 x i32> undef, i32 %1277, i32 0
  %1279 = getelementptr inbounds i8, i8* %1271, i64 %1
  %1280 = bitcast i8* %1279 to i32*
  %1281 = load i32, i32* %1280, align 1
  %1282 = insertelement <4 x i32> %1274, i32 %1281, i32 1
  %1283 = getelementptr inbounds i8, i8* %1279, i64 1
  %1284 = bitcast i8* %1283 to i32*
  %1285 = load i32, i32* %1284, align 1
  %1286 = insertelement <4 x i32> %1278, i32 %1285, i32 1
  %1287 = bitcast <4 x i32> %1282 to <16 x i8>
  %1288 = shufflevector <16 x i8> %1287, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1289 = zext <8 x i8> %1288 to <8 x i16>
  %1290 = bitcast <4 x i32> %1286 to <16 x i8>
  %1291 = shufflevector <16 x i8> %1290, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1292 = zext <8 x i8> %1291 to <8 x i16>
  %1293 = add nuw nsw <8 x i16> %1292, %1289
  %1294 = bitcast <8 x i16> %1293 to <2 x i64>
  %1295 = shufflevector <2 x i64> %1267, <2 x i64> %1294, <2 x i32> <i32 0, i32 2>
  %1296 = bitcast <2 x i64> %1295 to <8 x i16>
  %1297 = add <8 x i16> %1293, %1296
  %1298 = lshr <8 x i16> %1297, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1299 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %1298, <8 x i16> zeroinitializer) #7
  %1300 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1299, <8 x i16> %1299) #7
  %1301 = bitcast <16 x i8> %1300 to <4 x i32>
  %1302 = extractelement <4 x i32> %1301, i32 0
  %1303 = bitcast i8* %1269 to i32*
  store i32 %1302, i32* %1303, align 1
  %1304 = getelementptr inbounds i8, i8* %1269, i64 %9
  %1305 = shufflevector <16 x i8> %1300, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1306 = bitcast <16 x i8> %1305 to <4 x i32>
  %1307 = extractelement <4 x i32> %1306, i32 0
  %1308 = bitcast i8* %1304 to i32*
  store i32 %1307, i32* %1308, align 1
  %1309 = getelementptr inbounds i8, i8* %1304, i64 %9
  %1310 = bitcast <8 x i16> %1293 to <16 x i8>
  %1311 = shufflevector <16 x i8> %1310, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1312 = bitcast <16 x i8> %1311 to <2 x i64>
  %1313 = add nsw i32 %1268, -2
  %1314 = icmp eq i32 %1313, 0
  br i1 %1314, label %1392, label %1266

1315:                                             ; preds = %10
  %1316 = bitcast i8* %0 to i16*
  %1317 = load i16, i16* %1316, align 1
  %1318 = sext i16 %1317 to i32
  %1319 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1318, i32 0
  %1320 = bitcast <4 x i32> %1319 to <2 x i64>
  %1321 = getelementptr inbounds i8, i8* %0, i64 1
  %1322 = bitcast i8* %1321 to i16*
  %1323 = load i16, i16* %1322, align 1
  %1324 = sext i16 %1323 to i32
  %1325 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1324, i32 0
  %1326 = bitcast <4 x i32> %1325 to <2 x i64>
  %1327 = bitcast <4 x i32> %1319 to <16 x i8>
  %1328 = shufflevector <16 x i8> %1327, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1329 = zext <8 x i8> %1328 to <8 x i16>
  %1330 = bitcast <4 x i32> %1325 to <16 x i8>
  %1331 = shufflevector <16 x i8> %1330, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1332 = zext <8 x i8> %1331 to <8 x i16>
  %1333 = add nuw nsw <8 x i16> %1332, %1329
  %1334 = bitcast <8 x i16> %1333 to <2 x i64>
  br label %1335

1335:                                             ; preds = %1335, %1315
  %1336 = phi <2 x i64> [ %1320, %1315 ], [ %1356, %1335 ]
  %1337 = phi <2 x i64> [ %1326, %1315 ], [ %1361, %1335 ]
  %1338 = phi <2 x i64> [ %1334, %1315 ], [ %1389, %1335 ]
  %1339 = phi i32 [ %7, %1315 ], [ %1390, %1335 ]
  %1340 = phi i8* [ %8, %1315 ], [ %1386, %1335 ]
  %1341 = phi i8* [ %0, %1315 ], [ %1352, %1335 ]
  %1342 = getelementptr inbounds i8, i8* %1341, i64 %1
  %1343 = bitcast i8* %1342 to i16*
  %1344 = load i16, i16* %1343, align 1
  %1345 = bitcast <2 x i64> %1336 to <8 x i16>
  %1346 = insertelement <8 x i16> %1345, i16 %1344, i64 0
  %1347 = getelementptr inbounds i8, i8* %1342, i64 1
  %1348 = bitcast i8* %1347 to i16*
  %1349 = load i16, i16* %1348, align 1
  %1350 = bitcast <2 x i64> %1337 to <8 x i16>
  %1351 = insertelement <8 x i16> %1350, i16 %1349, i64 0
  %1352 = getelementptr inbounds i8, i8* %1342, i64 %1
  %1353 = bitcast i8* %1352 to i16*
  %1354 = load i16, i16* %1353, align 1
  %1355 = insertelement <8 x i16> %1346, i16 %1354, i64 2
  %1356 = bitcast <8 x i16> %1355 to <2 x i64>
  %1357 = getelementptr inbounds i8, i8* %1352, i64 1
  %1358 = bitcast i8* %1357 to i16*
  %1359 = load i16, i16* %1358, align 1
  %1360 = insertelement <8 x i16> %1351, i16 %1359, i64 2
  %1361 = bitcast <8 x i16> %1360 to <2 x i64>
  %1362 = bitcast <8 x i16> %1355 to <16 x i8>
  %1363 = shufflevector <16 x i8> %1362, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1364 = zext <8 x i8> %1363 to <8 x i16>
  %1365 = bitcast <8 x i16> %1360 to <16 x i8>
  %1366 = shufflevector <16 x i8> %1365, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1367 = zext <8 x i8> %1366 to <8 x i16>
  %1368 = add nuw nsw <8 x i16> %1367, %1364
  %1369 = bitcast <8 x i16> %1368 to <2 x i64>
  %1370 = shufflevector <2 x i64> %1338, <2 x i64> %1369, <2 x i32> <i32 0, i32 2>
  %1371 = bitcast <2 x i64> %1370 to <8 x i16>
  %1372 = add <8 x i16> %1368, %1371
  %1373 = lshr <8 x i16> %1372, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1374 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %1373, <8 x i16> zeroinitializer) #7
  %1375 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1374, <8 x i16> %1374) #7
  %1376 = bitcast <16 x i8> %1375 to <4 x i32>
  %1377 = extractelement <4 x i32> %1376, i32 0
  %1378 = bitcast i8* %1340 to i16*
  %1379 = trunc i32 %1377 to i16
  store i16 %1379, i16* %1378, align 1
  %1380 = getelementptr inbounds i8, i8* %1340, i64 %9
  %1381 = shufflevector <16 x i8> %1375, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1382 = bitcast <16 x i8> %1381 to <4 x i32>
  %1383 = extractelement <4 x i32> %1382, i32 0
  %1384 = bitcast i8* %1380 to i16*
  %1385 = trunc i32 %1383 to i16
  store i16 %1385, i16* %1384, align 1
  %1386 = getelementptr inbounds i8, i8* %1380, i64 %9
  %1387 = bitcast <8 x i16> %1368 to <16 x i8>
  %1388 = shufflevector <16 x i8> %1387, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1389 = bitcast <16 x i8> %1388 to <2 x i64>
  %1390 = add nsw i32 %1339, -2
  %1391 = icmp eq i32 %1390, 0
  br i1 %1391, label %1392, label %1335

1392:                                             ; preds = %1266, %1220, %1151, %1019, %761, %251, %1335
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_122ConvolveScale2D_SSE4_1ILb0EEEvPKvliiiiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #4 {
  %13 = alloca [33792 x i16], align 16
  %14 = icmp slt i32 %8, 5
  br i1 %14, label %15, label %20

15:                                               ; preds = %12
  %16 = and i32 %2, -3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = icmp eq i32 %2, 1
  br i1 %19, label %21, label %20

20:                                               ; preds = %18, %12
  br label %21

21:                                               ; preds = %15, %18, %20
  %22 = phi i32 [ %2, %20 ], [ 4, %15 ], [ 5, %18 ]
  %23 = icmp slt i32 %9, 5
  br i1 %23, label %24, label %32

24:                                               ; preds = %21
  %25 = and i32 %3, -3
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  %28 = icmp eq i32 %3, 1
  br i1 %28, label %29, label %32

29:                                               ; preds = %24, %27
  %30 = phi i32 [ 5, %27 ], [ 4, %24 ]
  %31 = bitcast [33792 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67584, i8* nonnull %31) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -86, i64 67584, i1 false)
  br label %35

32:                                               ; preds = %21, %27
  %33 = bitcast [33792 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67584, i8* nonnull %33) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 67584, i1 false)
  %34 = icmp slt i32 %3, 2
  br i1 %34, label %42, label %35

35:                                               ; preds = %29, %32
  %36 = phi i8* [ %31, %29 ], [ %33, %32 ]
  %37 = phi i32 [ %30, %29 ], [ %3, %32 ]
  %38 = icmp eq i32 %37, 3
  %39 = select i1 %38, i32 2, i32 4
  %40 = icmp eq i32 %37, 2
  %41 = select i1 %40, i32 8, i32 %39
  br label %42

42:                                               ; preds = %32, %35
  %43 = phi i8* [ %33, %32 ], [ %36, %35 ]
  %44 = phi i32 [ %3, %32 ], [ %37, %35 ]
  %45 = phi i32 [ 6, %32 ], [ %41, %35 ]
  %46 = add nsw i32 %9, -1
  %47 = mul nsw i32 %46, %7
  %48 = add nsw i32 %47, 1023
  %49 = ashr i32 %48, 10
  %50 = add nsw i32 %45, %49
  %51 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 0
  %52 = sub nuw nsw i32 8, %45
  %53 = sdiv i32 %52, 2
  %54 = sext i32 %53 to i64
  %55 = mul nsw i64 %54, %1
  %56 = getelementptr inbounds i8, i8* %0, i64 %55
  %57 = icmp slt i32 %22, 2
  br i1 %57, label %63, label %58

58:                                               ; preds = %42
  %59 = icmp eq i32 %22, 3
  %60 = select i1 %59, i32 2048, i32 4096
  %61 = icmp eq i32 %22, 2
  %62 = select i1 %61, i32 8192, i32 %60
  br label %63

63:                                               ; preds = %42, %58
  %64 = phi i32 [ 6144, %42 ], [ %62, %58 ]
  %65 = sub nuw nsw i32 16384, %64
  %66 = sdiv i32 %65, 7
  switch i32 %22, label %835 [
    i32 0, label %67
    i32 1, label %194
    i32 2, label %321
    i32 3, label %461
    i32 4, label %750
  ]

67:                                               ; preds = %63
  %68 = icmp slt i32 %66, %6
  %69 = ashr i32 %4, 10
  %70 = shl i32 %6, 3
  %71 = trunc i32 %6 to i16
  %72 = insertelement <8 x i16> undef, i16 %71, i32 0
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <8 x i32> zeroinitializer
  %74 = mul <8 x i16> %73, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %75 = sub nsw i32 1, %69
  %76 = sext i32 %8 to i64
  br i1 %68, label %77, label %138

77:                                               ; preds = %67, %134
  %78 = phi i64 [ %135, %134 ], [ 0, %67 ]
  %79 = phi i32 [ %136, %134 ], [ %4, %67 ]
  %80 = ashr i32 %79, 10
  %81 = add nsw i32 %80, %75
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %56, i64 %82
  %84 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %78
  %85 = trunc i32 %79 to i16
  %86 = and i16 %85, 1023
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = add <8 x i16> %88, %74
  %90 = lshr <8 x i16> %89, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %91 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %90, <8 x i16> %90) #7
  %92 = and <16 x i8> %91, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %93 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 0>, <16 x i8> %92) #7
  %94 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -3, i8 -5, i8 -6, i8 -7, i8 -7, i8 -8, i8 -7, i8 -7, i8 -6, i8 -6, i8 -6, i8 -5, i8 -4, i8 -2, i8 -1>, <16 x i8> %92) #7
  %95 = shufflevector <16 x i8> %93, <16 x i8> %94, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %96 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 61, i8 58, i8 55, i8 51, i8 47, i8 42, i8 38, i8 33, i8 29, i8 24, i8 19, i8 14, i8 9, i8 4>, <16 x i8> %92) #7
  %97 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 9, i8 14, i8 19, i8 24, i8 29, i8 33, i8 38, i8 42, i8 47, i8 51, i8 55, i8 58, i8 61, i8 63>, <16 x i8> %92) #7
  %98 = shufflevector <16 x i8> %96, <16 x i8> %97, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -2, i8 -4, i8 -5, i8 -6, i8 -6, i8 -6, i8 -7, i8 -7, i8 -8, i8 -7, i8 -7, i8 -6, i8 -5, i8 -3>, <16 x i8> %92) #7
  %100 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <16 x i8> %92) #7
  %101 = shufflevector <16 x i8> %99, <16 x i8> %100, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = lshr <8 x i16> %89, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %103 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %102, <8 x i16> %102) #7
  %104 = add <16 x i8> %103, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %105 = shufflevector <16 x i8> %103, <16 x i8> %104, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %106

106:                                              ; preds = %106, %77
  %107 = phi i8* [ %83, %77 ], [ %130, %106 ]
  %108 = phi i16* [ %84, %77 ], [ %131, %106 ]
  %109 = phi i32 [ %50, %77 ], [ %132, %106 ]
  %110 = bitcast i8* %107 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %111, <16 x i8> %105) #7
  %113 = getelementptr inbounds i8, i8* %107, i64 16
  %114 = bitcast i8* %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %115, i32 0
  %117 = bitcast <2 x i64> %116 to <16 x i8>
  %118 = shufflevector <16 x i8> %111, <16 x i8> %117, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %119 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %118, <16 x i8> %105) #7
  %120 = shufflevector <16 x i8> %111, <16 x i8> %117, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %121 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %120, <16 x i8> %105) #7
  %122 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %112, <16 x i8> %95) #7
  %123 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %98) #7
  %124 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %121, <16 x i8> %101) #7
  %125 = add <8 x i16> %122, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %126 = add <8 x i16> %125, %123
  %127 = add <8 x i16> %126, %124
  %128 = ashr <8 x i16> %127, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %129 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 16
  %130 = getelementptr inbounds i8, i8* %107, i64 %1
  %131 = getelementptr inbounds i16, i16* %108, i64 128
  %132 = add nsw i32 %109, -1
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %106

134:                                              ; preds = %106
  %135 = add nuw nsw i64 %78, 8
  %136 = add nsw i32 %79, %70
  %137 = icmp slt i64 %135, %76
  br i1 %137, label %77, label %920

138:                                              ; preds = %67, %190
  %139 = phi i64 [ %191, %190 ], [ 0, %67 ]
  %140 = phi i32 [ %192, %190 ], [ %4, %67 ]
  %141 = ashr i32 %140, 10
  %142 = add nsw i32 %141, %75
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %56, i64 %143
  %145 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %139
  %146 = trunc i32 %140 to i16
  %147 = and i16 %146, 1023
  %148 = insertelement <8 x i16> undef, i16 %147, i32 0
  %149 = shufflevector <8 x i16> %148, <8 x i16> undef, <8 x i32> zeroinitializer
  %150 = add <8 x i16> %149, %74
  %151 = lshr <8 x i16> %150, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %152 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %151, <8 x i16> %151) #7
  %153 = and <16 x i8> %152, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %154 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 0>, <16 x i8> %153) #7
  %155 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -3, i8 -5, i8 -6, i8 -7, i8 -7, i8 -8, i8 -7, i8 -7, i8 -6, i8 -6, i8 -6, i8 -5, i8 -4, i8 -2, i8 -1>, <16 x i8> %153) #7
  %156 = shufflevector <16 x i8> %154, <16 x i8> %155, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 61, i8 58, i8 55, i8 51, i8 47, i8 42, i8 38, i8 33, i8 29, i8 24, i8 19, i8 14, i8 9, i8 4>, <16 x i8> %153) #7
  %158 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 9, i8 14, i8 19, i8 24, i8 29, i8 33, i8 38, i8 42, i8 47, i8 51, i8 55, i8 58, i8 61, i8 63>, <16 x i8> %153) #7
  %159 = shufflevector <16 x i8> %157, <16 x i8> %158, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %160 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -2, i8 -4, i8 -5, i8 -6, i8 -6, i8 -6, i8 -7, i8 -7, i8 -8, i8 -7, i8 -7, i8 -6, i8 -5, i8 -3>, <16 x i8> %153) #7
  %161 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <16 x i8> %153) #7
  %162 = shufflevector <16 x i8> %160, <16 x i8> %161, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %163 = lshr <8 x i16> %150, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %164 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %163, <8 x i16> %163) #7
  %165 = add <16 x i8> %164, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %166 = shufflevector <16 x i8> %164, <16 x i8> %165, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %167

167:                                              ; preds = %167, %138
  %168 = phi i8* [ %144, %138 ], [ %186, %167 ]
  %169 = phi i16* [ %145, %138 ], [ %187, %167 ]
  %170 = phi i32 [ %50, %138 ], [ %188, %167 ]
  %171 = bitcast i8* %168 to <16 x i8>*
  %172 = load <16 x i8>, <16 x i8>* %171, align 1
  %173 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %172, <16 x i8> %166) #7
  %174 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %175 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %174, <16 x i8> %166) #7
  %176 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %177 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %176, <16 x i8> %166) #7
  %178 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %173, <16 x i8> %156) #7
  %179 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %175, <16 x i8> %159) #7
  %180 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %177, <16 x i8> %162) #7
  %181 = add <8 x i16> %178, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %182 = add <8 x i16> %181, %179
  %183 = add <8 x i16> %182, %180
  %184 = ashr <8 x i16> %183, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %185 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds i8, i8* %168, i64 %1
  %187 = getelementptr inbounds i16, i16* %169, i64 128
  %188 = add nsw i32 %170, -1
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %167

190:                                              ; preds = %167
  %191 = add nuw nsw i64 %139, 8
  %192 = add nsw i32 %140, %70
  %193 = icmp slt i64 %191, %76
  br i1 %193, label %138, label %920

194:                                              ; preds = %63
  %195 = icmp slt i32 %66, %6
  %196 = ashr i32 %4, 10
  %197 = shl i32 %6, 3
  %198 = trunc i32 %6 to i16
  %199 = insertelement <8 x i16> undef, i16 %198, i32 0
  %200 = shufflevector <8 x i16> %199, <8 x i16> undef, <8 x i32> zeroinitializer
  %201 = mul <8 x i16> %200, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %202 = sub nsw i32 1, %196
  %203 = sext i32 %8 to i64
  br i1 %195, label %204, label %265

204:                                              ; preds = %194, %261
  %205 = phi i64 [ %262, %261 ], [ 0, %194 ]
  %206 = phi i32 [ %263, %261 ], [ %4, %194 ]
  %207 = ashr i32 %206, 10
  %208 = add nsw i32 %207, %202
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %56, i64 %209
  %211 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %205
  %212 = trunc i32 %206 to i16
  %213 = and i16 %212, 1023
  %214 = insertelement <8 x i16> undef, i16 %213, i32 0
  %215 = shufflevector <8 x i16> %214, <8 x i16> undef, <8 x i32> zeroinitializer
  %216 = add <8 x i16> %215, %201
  %217 = lshr <8 x i16> %216, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %218 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %217, <8 x i16> %217) #7
  %219 = and <16 x i8> %218, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %220 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %219) #7
  %221 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 14, i8 13, i8 11, i8 10, i8 9, i8 8, i8 8, i8 7, i8 6, i8 5, i8 4, i8 3, i8 2, i8 2, i8 1>, <16 x i8> %219) #7
  %222 = shufflevector <16 x i8> %220, <16 x i8> %221, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %223 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 31, i8 31, i8 31, i8 30, i8 29, i8 28, i8 27, i8 26, i8 24, i8 23, i8 22, i8 21, i8 20, i8 18, i8 17>, <16 x i8> %219) #7
  %224 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 17, i8 18, i8 20, i8 21, i8 22, i8 23, i8 24, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31, i8 31, i8 31>, <16 x i8> %219) #7
  %225 = shufflevector <16 x i8> %223, <16 x i8> %224, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %226 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 8, i8 9, i8 10, i8 11, i8 13, i8 14>, <16 x i8> %219) #7
  %227 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 1>, <16 x i8> %219) #7
  %228 = shufflevector <16 x i8> %226, <16 x i8> %227, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = lshr <8 x i16> %216, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %230 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %229, <8 x i16> %229) #7
  %231 = add <16 x i8> %230, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %232 = shufflevector <16 x i8> %230, <16 x i8> %231, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %233

233:                                              ; preds = %233, %204
  %234 = phi i8* [ %210, %204 ], [ %257, %233 ]
  %235 = phi i16* [ %211, %204 ], [ %258, %233 ]
  %236 = phi i32 [ %50, %204 ], [ %259, %233 ]
  %237 = bitcast i8* %234 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1
  %239 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %238, <16 x i8> %232) #7
  %240 = getelementptr inbounds i8, i8* %234, i64 16
  %241 = bitcast i8* %240 to i64*
  %242 = load i64, i64* %241, align 1
  %243 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %242, i32 0
  %244 = bitcast <2 x i64> %243 to <16 x i8>
  %245 = shufflevector <16 x i8> %238, <16 x i8> %244, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %246 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %245, <16 x i8> %232) #7
  %247 = shufflevector <16 x i8> %238, <16 x i8> %244, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %248 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %247, <16 x i8> %232) #7
  %249 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %239, <16 x i8> %222) #7
  %250 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %246, <16 x i8> %225) #7
  %251 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %248, <16 x i8> %228) #7
  %252 = add <8 x i16> %249, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %253 = add <8 x i16> %252, %250
  %254 = add <8 x i16> %253, %251
  %255 = ashr <8 x i16> %254, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %256 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %256, align 16
  %257 = getelementptr inbounds i8, i8* %234, i64 %1
  %258 = getelementptr inbounds i16, i16* %235, i64 128
  %259 = add nsw i32 %236, -1
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %233

261:                                              ; preds = %233
  %262 = add nuw nsw i64 %205, 8
  %263 = add nsw i32 %206, %197
  %264 = icmp slt i64 %262, %203
  br i1 %264, label %204, label %920

265:                                              ; preds = %194, %317
  %266 = phi i64 [ %318, %317 ], [ 0, %194 ]
  %267 = phi i32 [ %319, %317 ], [ %4, %194 ]
  %268 = ashr i32 %267, 10
  %269 = add nsw i32 %268, %202
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %56, i64 %270
  %272 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %266
  %273 = trunc i32 %267 to i16
  %274 = and i16 %273, 1023
  %275 = insertelement <8 x i16> undef, i16 %274, i32 0
  %276 = shufflevector <8 x i16> %275, <8 x i16> undef, <8 x i32> zeroinitializer
  %277 = add <8 x i16> %276, %201
  %278 = lshr <8 x i16> %277, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %279 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %278, <8 x i16> %278) #7
  %280 = and <16 x i8> %279, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %281 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %280) #7
  %282 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 14, i8 13, i8 11, i8 10, i8 9, i8 8, i8 8, i8 7, i8 6, i8 5, i8 4, i8 3, i8 2, i8 2, i8 1>, <16 x i8> %280) #7
  %283 = shufflevector <16 x i8> %281, <16 x i8> %282, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %284 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 31, i8 31, i8 31, i8 30, i8 29, i8 28, i8 27, i8 26, i8 24, i8 23, i8 22, i8 21, i8 20, i8 18, i8 17>, <16 x i8> %280) #7
  %285 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 17, i8 18, i8 20, i8 21, i8 22, i8 23, i8 24, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31, i8 31, i8 31>, <16 x i8> %280) #7
  %286 = shufflevector <16 x i8> %284, <16 x i8> %285, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %287 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 8, i8 9, i8 10, i8 11, i8 13, i8 14>, <16 x i8> %280) #7
  %288 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 1>, <16 x i8> %280) #7
  %289 = shufflevector <16 x i8> %287, <16 x i8> %288, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %290 = lshr <8 x i16> %277, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %291 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %290, <8 x i16> %290) #7
  %292 = add <16 x i8> %291, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %293 = shufflevector <16 x i8> %291, <16 x i8> %292, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %294

294:                                              ; preds = %294, %265
  %295 = phi i8* [ %271, %265 ], [ %313, %294 ]
  %296 = phi i16* [ %272, %265 ], [ %314, %294 ]
  %297 = phi i32 [ %50, %265 ], [ %315, %294 ]
  %298 = bitcast i8* %295 to <16 x i8>*
  %299 = load <16 x i8>, <16 x i8>* %298, align 1
  %300 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %299, <16 x i8> %293) #7
  %301 = shufflevector <16 x i8> %299, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %302 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %301, <16 x i8> %293) #7
  %303 = shufflevector <16 x i8> %299, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %304 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %303, <16 x i8> %293) #7
  %305 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %300, <16 x i8> %283) #7
  %306 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %302, <16 x i8> %286) #7
  %307 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %304, <16 x i8> %289) #7
  %308 = add <8 x i16> %305, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %309 = add <8 x i16> %308, %306
  %310 = add <8 x i16> %309, %307
  %311 = ashr <8 x i16> %310, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %312 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %311, <8 x i16>* %312, align 16
  %313 = getelementptr inbounds i8, i8* %295, i64 %1
  %314 = getelementptr inbounds i16, i16* %296, i64 128
  %315 = add nsw i32 %297, -1
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %317, label %294

317:                                              ; preds = %294
  %318 = add nuw nsw i64 %266, 8
  %319 = add nsw i32 %267, %197
  %320 = icmp slt i64 %318, %203
  br i1 %320, label %265, label %920

321:                                              ; preds = %63
  %322 = icmp slt i32 %66, %6
  %323 = ashr i32 %4, 10
  %324 = shl i32 %6, 3
  %325 = trunc i32 %6 to i16
  %326 = insertelement <8 x i16> undef, i16 %325, i32 0
  %327 = shufflevector <8 x i16> %326, <8 x i16> undef, <8 x i32> zeroinitializer
  %328 = mul <8 x i16> %327, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %329 = sext i32 %8 to i64
  br i1 %322, label %330, label %398

330:                                              ; preds = %321, %394
  %331 = phi i64 [ %395, %394 ], [ 0, %321 ]
  %332 = phi i32 [ %396, %394 ], [ %4, %321 ]
  %333 = ashr i32 %332, 10
  %334 = sub nsw i32 %333, %323
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds i8, i8* %56, i64 %335
  %337 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %331
  %338 = trunc i32 %332 to i16
  %339 = and i16 %338, 1023
  %340 = insertelement <8 x i16> undef, i16 %339, i32 0
  %341 = shufflevector <8 x i16> %340, <8 x i16> undef, <8 x i32> zeroinitializer
  %342 = add <8 x i16> %341, %328
  %343 = lshr <8 x i16> %342, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %344 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %343, <8 x i16> %343) #7
  %345 = and <16 x i8> %344, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %346 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -1, i8 -1, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 0>, <16 x i8> %345) #7
  %347 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 3, i8 4, i8 5, i8 5, i8 5, i8 5, i8 6, i8 5, i8 4, i8 4, i8 3, i8 3, i8 2, i8 1>, <16 x i8> %345) #7
  %348 = shufflevector <16 x i8> %346, <16 x i8> %347, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %349 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -3, i8 -6, i8 -9, i8 -11, i8 -11, i8 -12, i8 -12, i8 -12, i8 -11, i8 -10, i8 -9, i8 -7, i8 -5, i8 -3, i8 -1>, <16 x i8> %345) #7
  %350 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 62, i8 60, i8 58, i8 54, i8 50, i8 45, i8 40, i8 35, i8 30, i8 24, i8 19, i8 13, i8 8, i8 4>, <16 x i8> %345) #7
  %351 = shufflevector <16 x i8> %349, <16 x i8> %350, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %352 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 13, i8 19, i8 24, i8 30, i8 35, i8 40, i8 45, i8 50, i8 54, i8 58, i8 60, i8 62, i8 63>, <16 x i8> %345) #7
  %353 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -3, i8 -5, i8 -7, i8 -9, i8 -10, i8 -11, i8 -12, i8 -12, i8 -12, i8 -11, i8 -11, i8 -9, i8 -6, i8 -3>, <16 x i8> %345) #7
  %354 = shufflevector <16 x i8> %352, <16 x i8> %353, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %355 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 3, i8 4, i8 4, i8 5, i8 6, i8 5, i8 5, i8 5, i8 5, i8 4, i8 3, i8 1>, <16 x i8> %345) #7
  %356 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %345) #7
  %357 = shufflevector <16 x i8> %355, <16 x i8> %356, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %358 = lshr <8 x i16> %342, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %359 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %358, <8 x i16> %358) #7
  %360 = add <16 x i8> %359, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %361 = shufflevector <16 x i8> %359, <16 x i8> %360, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %362

362:                                              ; preds = %362, %330
  %363 = phi i8* [ %336, %330 ], [ %390, %362 ]
  %364 = phi i16* [ %337, %330 ], [ %391, %362 ]
  %365 = phi i32 [ %50, %330 ], [ %392, %362 ]
  %366 = bitcast i8* %363 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 1
  %368 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %367, <16 x i8> %361) #7
  %369 = getelementptr inbounds i8, i8* %363, i64 16
  %370 = bitcast i8* %369 to i64*
  %371 = load i64, i64* %370, align 1
  %372 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %371, i32 0
  %373 = bitcast <2 x i64> %372 to <16 x i8>
  %374 = shufflevector <16 x i8> %367, <16 x i8> %373, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %375 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %374, <16 x i8> %361) #7
  %376 = shufflevector <16 x i8> %367, <16 x i8> %373, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %377 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %376, <16 x i8> %361) #7
  %378 = shufflevector <16 x i8> %367, <16 x i8> %373, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %379 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %378, <16 x i8> %361) #7
  %380 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %368, <16 x i8> %348) #7
  %381 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %375, <16 x i8> %351) #7
  %382 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %377, <16 x i8> %354) #7
  %383 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %379, <16 x i8> %357) #7
  %384 = add <8 x i16> %380, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %385 = add <8 x i16> %384, %381
  %386 = add <8 x i16> %385, %382
  %387 = add <8 x i16> %386, %383
  %388 = ashr <8 x i16> %387, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %389 = bitcast i16* %364 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %389, align 16
  %390 = getelementptr inbounds i8, i8* %363, i64 %1
  %391 = getelementptr inbounds i16, i16* %364, i64 128
  %392 = add nsw i32 %365, -1
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %394, label %362

394:                                              ; preds = %362
  %395 = add nuw nsw i64 %331, 8
  %396 = add nsw i32 %332, %324
  %397 = icmp slt i64 %395, %329
  br i1 %397, label %330, label %920

398:                                              ; preds = %321, %457
  %399 = phi i64 [ %458, %457 ], [ 0, %321 ]
  %400 = phi i32 [ %459, %457 ], [ %4, %321 ]
  %401 = ashr i32 %400, 10
  %402 = sub nsw i32 %401, %323
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds i8, i8* %56, i64 %403
  %405 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %399
  %406 = trunc i32 %400 to i16
  %407 = and i16 %406, 1023
  %408 = insertelement <8 x i16> undef, i16 %407, i32 0
  %409 = shufflevector <8 x i16> %408, <8 x i16> undef, <8 x i32> zeroinitializer
  %410 = add <8 x i16> %409, %328
  %411 = lshr <8 x i16> %410, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %412 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %411, <8 x i16> %411) #7
  %413 = and <16 x i8> %412, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %414 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -1, i8 -1, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 0>, <16 x i8> %413) #7
  %415 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 3, i8 4, i8 5, i8 5, i8 5, i8 5, i8 6, i8 5, i8 4, i8 4, i8 3, i8 3, i8 2, i8 1>, <16 x i8> %413) #7
  %416 = shufflevector <16 x i8> %414, <16 x i8> %415, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %417 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -3, i8 -6, i8 -9, i8 -11, i8 -11, i8 -12, i8 -12, i8 -12, i8 -11, i8 -10, i8 -9, i8 -7, i8 -5, i8 -3, i8 -1>, <16 x i8> %413) #7
  %418 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 62, i8 60, i8 58, i8 54, i8 50, i8 45, i8 40, i8 35, i8 30, i8 24, i8 19, i8 13, i8 8, i8 4>, <16 x i8> %413) #7
  %419 = shufflevector <16 x i8> %417, <16 x i8> %418, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %420 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 13, i8 19, i8 24, i8 30, i8 35, i8 40, i8 45, i8 50, i8 54, i8 58, i8 60, i8 62, i8 63>, <16 x i8> %413) #7
  %421 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -3, i8 -5, i8 -7, i8 -9, i8 -10, i8 -11, i8 -12, i8 -12, i8 -12, i8 -11, i8 -11, i8 -9, i8 -6, i8 -3>, <16 x i8> %413) #7
  %422 = shufflevector <16 x i8> %420, <16 x i8> %421, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %423 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 3, i8 4, i8 4, i8 5, i8 6, i8 5, i8 5, i8 5, i8 5, i8 4, i8 3, i8 1>, <16 x i8> %413) #7
  %424 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %413) #7
  %425 = shufflevector <16 x i8> %423, <16 x i8> %424, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %426 = lshr <8 x i16> %410, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %427 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %426, <8 x i16> %426) #7
  %428 = add <16 x i8> %427, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %429 = shufflevector <16 x i8> %427, <16 x i8> %428, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %430

430:                                              ; preds = %430, %398
  %431 = phi i8* [ %404, %398 ], [ %453, %430 ]
  %432 = phi i16* [ %405, %398 ], [ %454, %430 ]
  %433 = phi i32 [ %50, %398 ], [ %455, %430 ]
  %434 = bitcast i8* %431 to <16 x i8>*
  %435 = load <16 x i8>, <16 x i8>* %434, align 1
  %436 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %435, <16 x i8> %429) #7
  %437 = shufflevector <16 x i8> %435, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %438 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %437, <16 x i8> %429) #7
  %439 = shufflevector <16 x i8> %435, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %440 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %439, <16 x i8> %429) #7
  %441 = shufflevector <16 x i8> %435, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %442 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %441, <16 x i8> %429) #7
  %443 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %436, <16 x i8> %416) #7
  %444 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %438, <16 x i8> %419) #7
  %445 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %440, <16 x i8> %422) #7
  %446 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %442, <16 x i8> %425) #7
  %447 = add <8 x i16> %443, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %448 = add <8 x i16> %447, %444
  %449 = add <8 x i16> %448, %445
  %450 = add <8 x i16> %449, %446
  %451 = ashr <8 x i16> %450, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %452 = bitcast i16* %432 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %452, align 16
  %453 = getelementptr inbounds i8, i8* %431, i64 %1
  %454 = getelementptr inbounds i16, i16* %432, i64 128
  %455 = add nsw i32 %433, -1
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %457, label %430

457:                                              ; preds = %430
  %458 = add nuw nsw i64 %399, 8
  %459 = add nsw i32 %400, %324
  %460 = icmp slt i64 %458, %329
  br i1 %460, label %398, label %920

461:                                              ; preds = %63
  %462 = icmp slt i32 %66, %6
  %463 = shl i32 %6, 3
  %464 = trunc i32 %6 to i16
  %465 = insertelement <8 x i16> undef, i16 %464, i32 0
  %466 = shufflevector <8 x i16> %465, <8 x i16> undef, <8 x i32> zeroinitializer
  %467 = mul <8 x i16> %466, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br i1 %462, label %468, label %609

468:                                              ; preds = %461
  br i1 %14, label %478, label %469

469:                                              ; preds = %468
  %470 = ashr i32 %4, 10
  %471 = sub nsw i32 3, %470
  %472 = sext i32 %8 to i64
  %473 = add nsw i32 %45, %49
  %474 = and i32 %473, 1
  %475 = icmp eq i32 %474, 0
  %476 = add nsw i32 %50, -1
  %477 = icmp eq i32 %473, 1
  br label %544

478:                                              ; preds = %468
  %479 = getelementptr inbounds i8, i8* %56, i64 3
  %480 = trunc i32 %4 to i16
  %481 = and i16 %480, 1023
  %482 = insertelement <8 x i16> undef, i16 %481, i32 0
  %483 = shufflevector <8 x i16> %482, <8 x i16> undef, <8 x i32> zeroinitializer
  %484 = add <8 x i16> %467, %483
  %485 = lshr <8 x i16> %484, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %486 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %485, <8 x i16> %485) #7
  %487 = and <16 x i8> %486, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %488 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 60, i8 56, i8 52, i8 48, i8 44, i8 40, i8 36, i8 32, i8 28, i8 24, i8 20, i8 16, i8 12, i8 8, i8 4>, <16 x i8> %487) #7
  %489 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 12, i8 16, i8 20, i8 24, i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60>, <16 x i8> %487) #7
  %490 = shufflevector <16 x i8> %488, <16 x i8> %489, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %491 = lshr <8 x i16> %484, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %492 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %491, <8 x i16> %491) #7
  %493 = add <16 x i8> %492, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %494 = shufflevector <16 x i8> %492, <16 x i8> %493, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %495 = add nsw i32 %45, %49
  %496 = and i32 %495, 1
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %511, label %498

498:                                              ; preds = %478
  %499 = bitcast i8* %479 to <16 x i8>*
  %500 = load <16 x i8>, <16 x i8>* %499, align 1
  %501 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %500, <16 x i8> %494) #7
  %502 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %501, <16 x i8> %490) #7
  %503 = add <8 x i16> %502, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %504 = ashr <8 x i16> %503, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %505 = bitcast <8 x i16> %504 to <2 x i64>
  %506 = extractelement <2 x i64> %505, i32 0
  %507 = bitcast [33792 x i16]* %13 to i64*
  store i64 %506, i64* %507, align 16
  %508 = getelementptr inbounds i8, i8* %479, i64 %1
  %509 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 128
  %510 = add nsw i32 %50, -1
  br label %511

511:                                              ; preds = %478, %498
  %512 = phi i8* [ %479, %478 ], [ %508, %498 ]
  %513 = phi i32 [ %50, %478 ], [ %510, %498 ]
  %514 = phi i16* [ %51, %478 ], [ %509, %498 ]
  %515 = icmp eq i32 %495, 1
  br i1 %515, label %920, label %516

516:                                              ; preds = %511, %516
  %517 = phi i8* [ %540, %516 ], [ %512, %511 ]
  %518 = phi i32 [ %542, %516 ], [ %513, %511 ]
  %519 = phi i16* [ %541, %516 ], [ %514, %511 ]
  %520 = bitcast i8* %517 to <16 x i8>*
  %521 = load <16 x i8>, <16 x i8>* %520, align 1
  %522 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %521, <16 x i8> %494) #7
  %523 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %522, <16 x i8> %490) #7
  %524 = add <8 x i16> %523, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %525 = ashr <8 x i16> %524, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %526 = bitcast <8 x i16> %525 to <2 x i64>
  %527 = extractelement <2 x i64> %526, i32 0
  %528 = bitcast i16* %519 to i64*
  store i64 %527, i64* %528, align 1
  %529 = getelementptr inbounds i8, i8* %517, i64 %1
  %530 = getelementptr inbounds i16, i16* %519, i64 128
  %531 = bitcast i8* %529 to <16 x i8>*
  %532 = load <16 x i8>, <16 x i8>* %531, align 1
  %533 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %532, <16 x i8> %494) #7
  %534 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %533, <16 x i8> %490) #7
  %535 = add <8 x i16> %534, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %536 = ashr <8 x i16> %535, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %537 = bitcast <8 x i16> %536 to <2 x i64>
  %538 = extractelement <2 x i64> %537, i32 0
  %539 = bitcast i16* %530 to i64*
  store i64 %538, i64* %539, align 1
  %540 = getelementptr inbounds i8, i8* %529, i64 %1
  %541 = getelementptr inbounds i16, i16* %519, i64 256
  %542 = add nsw i32 %518, -2
  %543 = icmp eq i32 %542, 0
  br i1 %543, label %920, label %516

544:                                              ; preds = %605, %469
  %545 = phi i64 [ 0, %469 ], [ %606, %605 ]
  %546 = phi i32 [ %4, %469 ], [ %607, %605 ]
  %547 = ashr i32 %546, 10
  %548 = add nsw i32 %471, %547
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds i8, i8* %56, i64 %549
  %551 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %545
  %552 = trunc i32 %546 to i16
  %553 = and i16 %552, 1023
  %554 = insertelement <8 x i16> undef, i16 %553, i32 0
  %555 = shufflevector <8 x i16> %554, <8 x i16> undef, <8 x i32> zeroinitializer
  %556 = add <8 x i16> %555, %467
  %557 = lshr <8 x i16> %556, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %558 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %557, <8 x i16> %557) #7
  %559 = and <16 x i8> %558, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %560 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 60, i8 56, i8 52, i8 48, i8 44, i8 40, i8 36, i8 32, i8 28, i8 24, i8 20, i8 16, i8 12, i8 8, i8 4>, <16 x i8> %559) #7
  %561 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 12, i8 16, i8 20, i8 24, i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60>, <16 x i8> %559) #7
  %562 = shufflevector <16 x i8> %560, <16 x i8> %561, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %563 = lshr <8 x i16> %556, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %564 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %563, <8 x i16> %563) #7
  %565 = add <16 x i8> %564, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %566 = shufflevector <16 x i8> %564, <16 x i8> %565, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br i1 %475, label %577, label %567

567:                                              ; preds = %544
  %568 = bitcast i8* %550 to <16 x i8>*
  %569 = load <16 x i8>, <16 x i8>* %568, align 1
  %570 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %569, <16 x i8> %566) #7
  %571 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %570, <16 x i8> %562) #7
  %572 = add <8 x i16> %571, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %573 = ashr <8 x i16> %572, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %574 = bitcast i16* %551 to <8 x i16>*
  store <8 x i16> %573, <8 x i16>* %574, align 16
  %575 = getelementptr inbounds i8, i8* %550, i64 %1
  %576 = getelementptr inbounds i16, i16* %551, i64 128
  br label %577

577:                                              ; preds = %567, %544
  %578 = phi i8* [ %575, %567 ], [ %550, %544 ]
  %579 = phi i16* [ %576, %567 ], [ %551, %544 ]
  %580 = phi i32 [ %476, %567 ], [ %50, %544 ]
  br i1 %477, label %605, label %581

581:                                              ; preds = %577, %581
  %582 = phi i8* [ %601, %581 ], [ %578, %577 ]
  %583 = phi i16* [ %602, %581 ], [ %579, %577 ]
  %584 = phi i32 [ %603, %581 ], [ %580, %577 ]
  %585 = bitcast i8* %582 to <16 x i8>*
  %586 = load <16 x i8>, <16 x i8>* %585, align 1
  %587 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %586, <16 x i8> %566) #7
  %588 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %587, <16 x i8> %562) #7
  %589 = add <8 x i16> %588, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %590 = ashr <8 x i16> %589, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %591 = bitcast i16* %583 to <8 x i16>*
  store <8 x i16> %590, <8 x i16>* %591, align 16
  %592 = getelementptr inbounds i8, i8* %582, i64 %1
  %593 = getelementptr inbounds i16, i16* %583, i64 128
  %594 = bitcast i8* %592 to <16 x i8>*
  %595 = load <16 x i8>, <16 x i8>* %594, align 1
  %596 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %595, <16 x i8> %566) #7
  %597 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %596, <16 x i8> %562) #7
  %598 = add <8 x i16> %597, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %599 = ashr <8 x i16> %598, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %600 = bitcast i16* %593 to <8 x i16>*
  store <8 x i16> %599, <8 x i16>* %600, align 16
  %601 = getelementptr inbounds i8, i8* %592, i64 %1
  %602 = getelementptr inbounds i16, i16* %583, i64 256
  %603 = add nsw i32 %584, -2
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %605, label %581

605:                                              ; preds = %581, %577
  %606 = add nuw nsw i64 %545, 8
  %607 = add nsw i32 %546, %463
  %608 = icmp slt i64 %606, %472
  br i1 %608, label %544, label %920

609:                                              ; preds = %461
  br i1 %14, label %619, label %610

610:                                              ; preds = %609
  %611 = ashr i32 %4, 10
  %612 = sub nsw i32 3, %611
  %613 = sext i32 %8 to i64
  %614 = add nsw i32 %45, %49
  %615 = and i32 %614, 1
  %616 = icmp eq i32 %615, 0
  %617 = add nsw i32 %50, -1
  %618 = icmp eq i32 %614, 1
  br label %685

619:                                              ; preds = %609
  %620 = getelementptr inbounds i8, i8* %56, i64 3
  %621 = trunc i32 %4 to i16
  %622 = and i16 %621, 1023
  %623 = insertelement <8 x i16> undef, i16 %622, i32 0
  %624 = shufflevector <8 x i16> %623, <8 x i16> undef, <8 x i32> zeroinitializer
  %625 = add <8 x i16> %467, %624
  %626 = lshr <8 x i16> %625, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %627 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %626, <8 x i16> %626) #7
  %628 = and <16 x i8> %627, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %629 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 60, i8 56, i8 52, i8 48, i8 44, i8 40, i8 36, i8 32, i8 28, i8 24, i8 20, i8 16, i8 12, i8 8, i8 4>, <16 x i8> %628) #7
  %630 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 12, i8 16, i8 20, i8 24, i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60>, <16 x i8> %628) #7
  %631 = shufflevector <16 x i8> %629, <16 x i8> %630, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %632 = lshr <8 x i16> %625, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %633 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %632, <8 x i16> %632) #7
  %634 = add <16 x i8> %633, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %635 = shufflevector <16 x i8> %633, <16 x i8> %634, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %636 = add nsw i32 %45, %49
  %637 = and i32 %636, 1
  %638 = icmp eq i32 %637, 0
  br i1 %638, label %652, label %639

639:                                              ; preds = %619
  %640 = bitcast i8* %620 to <16 x i8>*
  %641 = load <16 x i8>, <16 x i8>* %640, align 1
  %642 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %641, <16 x i8> %635) #7
  %643 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %642, <16 x i8> %631) #7
  %644 = add <8 x i16> %643, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %645 = ashr <8 x i16> %644, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %646 = bitcast <8 x i16> %645 to <2 x i64>
  %647 = extractelement <2 x i64> %646, i32 0
  %648 = bitcast [33792 x i16]* %13 to i64*
  store i64 %647, i64* %648, align 16
  %649 = getelementptr inbounds i8, i8* %620, i64 %1
  %650 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 128
  %651 = add nsw i32 %50, -1
  br label %652

652:                                              ; preds = %619, %639
  %653 = phi i8* [ %620, %619 ], [ %649, %639 ]
  %654 = phi i32 [ %50, %619 ], [ %651, %639 ]
  %655 = phi i16* [ %51, %619 ], [ %650, %639 ]
  %656 = icmp eq i32 %636, 1
  br i1 %656, label %920, label %657

657:                                              ; preds = %652, %657
  %658 = phi i8* [ %681, %657 ], [ %653, %652 ]
  %659 = phi i32 [ %683, %657 ], [ %654, %652 ]
  %660 = phi i16* [ %682, %657 ], [ %655, %652 ]
  %661 = bitcast i8* %658 to <16 x i8>*
  %662 = load <16 x i8>, <16 x i8>* %661, align 1
  %663 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %662, <16 x i8> %635) #7
  %664 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %663, <16 x i8> %631) #7
  %665 = add <8 x i16> %664, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %666 = ashr <8 x i16> %665, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %667 = bitcast <8 x i16> %666 to <2 x i64>
  %668 = extractelement <2 x i64> %667, i32 0
  %669 = bitcast i16* %660 to i64*
  store i64 %668, i64* %669, align 1
  %670 = getelementptr inbounds i8, i8* %658, i64 %1
  %671 = getelementptr inbounds i16, i16* %660, i64 128
  %672 = bitcast i8* %670 to <16 x i8>*
  %673 = load <16 x i8>, <16 x i8>* %672, align 1
  %674 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %673, <16 x i8> %635) #7
  %675 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %674, <16 x i8> %631) #7
  %676 = add <8 x i16> %675, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %677 = ashr <8 x i16> %676, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %678 = bitcast <8 x i16> %677 to <2 x i64>
  %679 = extractelement <2 x i64> %678, i32 0
  %680 = bitcast i16* %671 to i64*
  store i64 %679, i64* %680, align 1
  %681 = getelementptr inbounds i8, i8* %670, i64 %1
  %682 = getelementptr inbounds i16, i16* %660, i64 256
  %683 = add nsw i32 %659, -2
  %684 = icmp eq i32 %683, 0
  br i1 %684, label %920, label %657

685:                                              ; preds = %746, %610
  %686 = phi i64 [ 0, %610 ], [ %747, %746 ]
  %687 = phi i32 [ %4, %610 ], [ %748, %746 ]
  %688 = ashr i32 %687, 10
  %689 = add nsw i32 %612, %688
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds i8, i8* %56, i64 %690
  %692 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %686
  %693 = trunc i32 %687 to i16
  %694 = and i16 %693, 1023
  %695 = insertelement <8 x i16> undef, i16 %694, i32 0
  %696 = shufflevector <8 x i16> %695, <8 x i16> undef, <8 x i32> zeroinitializer
  %697 = add <8 x i16> %696, %467
  %698 = lshr <8 x i16> %697, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %699 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %698, <8 x i16> %698) #7
  %700 = and <16 x i8> %699, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %701 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 60, i8 56, i8 52, i8 48, i8 44, i8 40, i8 36, i8 32, i8 28, i8 24, i8 20, i8 16, i8 12, i8 8, i8 4>, <16 x i8> %700) #7
  %702 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 12, i8 16, i8 20, i8 24, i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60>, <16 x i8> %700) #7
  %703 = shufflevector <16 x i8> %701, <16 x i8> %702, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %704 = lshr <8 x i16> %697, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %705 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %704, <8 x i16> %704) #7
  %706 = add <16 x i8> %705, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %707 = shufflevector <16 x i8> %705, <16 x i8> %706, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br i1 %616, label %718, label %708

708:                                              ; preds = %685
  %709 = bitcast i8* %691 to <16 x i8>*
  %710 = load <16 x i8>, <16 x i8>* %709, align 1
  %711 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %710, <16 x i8> %707) #7
  %712 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %711, <16 x i8> %703) #7
  %713 = add <8 x i16> %712, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %714 = ashr <8 x i16> %713, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %715 = bitcast i16* %692 to <8 x i16>*
  store <8 x i16> %714, <8 x i16>* %715, align 16
  %716 = getelementptr inbounds i8, i8* %691, i64 %1
  %717 = getelementptr inbounds i16, i16* %692, i64 128
  br label %718

718:                                              ; preds = %708, %685
  %719 = phi i8* [ %716, %708 ], [ %691, %685 ]
  %720 = phi i16* [ %717, %708 ], [ %692, %685 ]
  %721 = phi i32 [ %617, %708 ], [ %50, %685 ]
  br i1 %618, label %746, label %722

722:                                              ; preds = %718, %722
  %723 = phi i8* [ %742, %722 ], [ %719, %718 ]
  %724 = phi i16* [ %743, %722 ], [ %720, %718 ]
  %725 = phi i32 [ %744, %722 ], [ %721, %718 ]
  %726 = bitcast i8* %723 to <16 x i8>*
  %727 = load <16 x i8>, <16 x i8>* %726, align 1
  %728 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %727, <16 x i8> %707) #7
  %729 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %728, <16 x i8> %703) #7
  %730 = add <8 x i16> %729, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %731 = ashr <8 x i16> %730, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %732 = bitcast i16* %724 to <8 x i16>*
  store <8 x i16> %731, <8 x i16>* %732, align 16
  %733 = getelementptr inbounds i8, i8* %723, i64 %1
  %734 = getelementptr inbounds i16, i16* %724, i64 128
  %735 = bitcast i8* %733 to <16 x i8>*
  %736 = load <16 x i8>, <16 x i8>* %735, align 1
  %737 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %736, <16 x i8> %707) #7
  %738 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %737, <16 x i8> %703) #7
  %739 = add <8 x i16> %738, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %740 = ashr <8 x i16> %739, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %741 = bitcast i16* %734 to <8 x i16>*
  store <8 x i16> %740, <8 x i16>* %741, align 16
  %742 = getelementptr inbounds i8, i8* %733, i64 %1
  %743 = getelementptr inbounds i16, i16* %724, i64 256
  %744 = add nsw i32 %725, -2
  %745 = icmp eq i32 %744, 0
  br i1 %745, label %746, label %722

746:                                              ; preds = %722, %718
  %747 = add nuw nsw i64 %686, 8
  %748 = add nsw i32 %687, %463
  %749 = icmp slt i64 %747, %613
  br i1 %749, label %685, label %920

750:                                              ; preds = %63
  %751 = trunc i32 %6 to i16
  %752 = insertelement <8 x i16> undef, i16 %751, i32 0
  %753 = shufflevector <8 x i16> %752, <8 x i16> undef, <8 x i32> zeroinitializer
  %754 = mul <8 x i16> %753, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %755 = getelementptr inbounds i8, i8* %56, i64 2
  %756 = trunc i32 %4 to i16
  %757 = and i16 %756, 1023
  %758 = insertelement <8 x i16> undef, i16 %757, i32 0
  %759 = shufflevector <8 x i16> %758, <8 x i16> undef, <8 x i32> zeroinitializer
  %760 = add <8 x i16> %754, %759
  %761 = lshr <8 x i16> %760, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %762 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %761, <8 x i16> %761) #7
  %763 = and <16 x i8> %762, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %764 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -2, i8 -4, i8 -5, i8 -6, i8 -6, i8 -7, i8 -6, i8 -6, i8 -5, i8 -5, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8> %763) #7
  %765 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 61, i8 58, i8 55, i8 51, i8 47, i8 42, i8 38, i8 33, i8 29, i8 24, i8 19, i8 14, i8 9, i8 4>, <16 x i8> %763) #7
  %766 = shufflevector <16 x i8> %764, <16 x i8> %765, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %767 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 9, i8 14, i8 19, i8 24, i8 29, i8 33, i8 38, i8 42, i8 47, i8 51, i8 55, i8 58, i8 61, i8 63>, <16 x i8> %763) #7
  %768 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -2, i8 -3, i8 -4, i8 -5, i8 -5, i8 -5, i8 -6, i8 -6, i8 -7, i8 -6, i8 -6, i8 -5, i8 -4, i8 -2>, <16 x i8> %763) #7
  %769 = shufflevector <16 x i8> %767, <16 x i8> %768, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %770 = lshr <8 x i16> %760, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %771 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %770, <8 x i16> %770) #7
  %772 = add <16 x i8> %771, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %773 = shufflevector <16 x i8> %771, <16 x i8> %772, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %774 = add nsw i32 %45, %49
  %775 = and i32 %774, 1
  %776 = icmp eq i32 %775, 0
  br i1 %776, label %794, label %777

777:                                              ; preds = %750
  %778 = bitcast i8* %755 to <16 x i8>*
  %779 = load <16 x i8>, <16 x i8>* %778, align 1
  %780 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %779, <16 x i8> %773) #7
  %781 = shufflevector <16 x i8> %779, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %782 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %781, <16 x i8> %773) #7
  %783 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %780, <16 x i8> %766) #7
  %784 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %782, <16 x i8> %769) #7
  %785 = add <8 x i16> %783, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %786 = add <8 x i16> %785, %784
  %787 = ashr <8 x i16> %786, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %788 = bitcast <8 x i16> %787 to <2 x i64>
  %789 = extractelement <2 x i64> %788, i32 0
  %790 = bitcast [33792 x i16]* %13 to i64*
  store i64 %789, i64* %790, align 16
  %791 = getelementptr inbounds i8, i8* %755, i64 %1
  %792 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 128
  %793 = add nsw i32 %50, -1
  br label %794

794:                                              ; preds = %750, %777
  %795 = phi i8* [ %755, %750 ], [ %791, %777 ]
  %796 = phi i16* [ %51, %750 ], [ %792, %777 ]
  %797 = phi i32 [ %50, %750 ], [ %793, %777 ]
  %798 = icmp eq i32 %774, 1
  br i1 %798, label %920, label %799

799:                                              ; preds = %794, %799
  %800 = phi i8* [ %831, %799 ], [ %795, %794 ]
  %801 = phi i16* [ %832, %799 ], [ %796, %794 ]
  %802 = phi i32 [ %833, %799 ], [ %797, %794 ]
  %803 = bitcast i8* %800 to <16 x i8>*
  %804 = load <16 x i8>, <16 x i8>* %803, align 1
  %805 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %804, <16 x i8> %773) #7
  %806 = shufflevector <16 x i8> %804, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %807 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %806, <16 x i8> %773) #7
  %808 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %805, <16 x i8> %766) #7
  %809 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %807, <16 x i8> %769) #7
  %810 = add <8 x i16> %808, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %811 = add <8 x i16> %810, %809
  %812 = ashr <8 x i16> %811, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %813 = bitcast <8 x i16> %812 to <2 x i64>
  %814 = extractelement <2 x i64> %813, i32 0
  %815 = bitcast i16* %801 to i64*
  store i64 %814, i64* %815, align 1
  %816 = getelementptr inbounds i8, i8* %800, i64 %1
  %817 = getelementptr inbounds i16, i16* %801, i64 128
  %818 = bitcast i8* %816 to <16 x i8>*
  %819 = load <16 x i8>, <16 x i8>* %818, align 1
  %820 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %819, <16 x i8> %773) #7
  %821 = shufflevector <16 x i8> %819, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %822 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %821, <16 x i8> %773) #7
  %823 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %820, <16 x i8> %766) #7
  %824 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %822, <16 x i8> %769) #7
  %825 = add <8 x i16> %823, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %826 = add <8 x i16> %825, %824
  %827 = ashr <8 x i16> %826, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %828 = bitcast <8 x i16> %827 to <2 x i64>
  %829 = extractelement <2 x i64> %828, i32 0
  %830 = bitcast i16* %817 to i64*
  store i64 %829, i64* %830, align 1
  %831 = getelementptr inbounds i8, i8* %816, i64 %1
  %832 = getelementptr inbounds i16, i16* %801, i64 256
  %833 = add nsw i32 %802, -2
  %834 = icmp eq i32 %833, 0
  br i1 %834, label %920, label %799

835:                                              ; preds = %63
  %836 = trunc i32 %6 to i16
  %837 = insertelement <8 x i16> undef, i16 %836, i32 0
  %838 = shufflevector <8 x i16> %837, <8 x i16> undef, <8 x i32> zeroinitializer
  %839 = mul <8 x i16> %838, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %840 = getelementptr inbounds i8, i8* %56, i64 2
  %841 = trunc i32 %4 to i16
  %842 = and i16 %841, 1023
  %843 = insertelement <8 x i16> undef, i16 %842, i32 0
  %844 = shufflevector <8 x i16> %843, <8 x i16> undef, <8 x i32> zeroinitializer
  %845 = add <8 x i16> %839, %844
  %846 = lshr <8 x i16> %845, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %847 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %846, <8 x i16> %846) #7
  %848 = and <16 x i8> %847, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %849 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 15, i8 13, i8 11, i8 10, i8 9, i8 8, i8 7, i8 6, i8 6, i8 5, i8 4, i8 3, i8 2, i8 2, i8 1>, <16 x i8> %848) #7
  %850 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 31, i8 31, i8 31, i8 30, i8 29, i8 28, i8 27, i8 26, i8 24, i8 23, i8 22, i8 21, i8 20, i8 18, i8 17>, <16 x i8> %848) #7
  %851 = shufflevector <16 x i8> %849, <16 x i8> %850, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %852 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 17, i8 18, i8 20, i8 21, i8 22, i8 23, i8 24, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31, i8 31, i8 31>, <16 x i8> %848) #7
  %853 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 2, i8 3, i8 4, i8 5, i8 6, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 13, i8 15>, <16 x i8> %848) #7
  %854 = shufflevector <16 x i8> %852, <16 x i8> %853, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %855 = lshr <8 x i16> %845, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %856 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %855, <8 x i16> %855) #7
  %857 = add <16 x i8> %856, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %858 = shufflevector <16 x i8> %856, <16 x i8> %857, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %859 = add nsw i32 %45, %49
  %860 = and i32 %859, 1
  %861 = icmp eq i32 %860, 0
  br i1 %861, label %879, label %862

862:                                              ; preds = %835
  %863 = bitcast i8* %840 to <16 x i8>*
  %864 = load <16 x i8>, <16 x i8>* %863, align 1
  %865 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %864, <16 x i8> %858) #7
  %866 = shufflevector <16 x i8> %864, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %867 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %866, <16 x i8> %858) #7
  %868 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %865, <16 x i8> %851) #7
  %869 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %867, <16 x i8> %854) #7
  %870 = add <8 x i16> %868, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %871 = add <8 x i16> %870, %869
  %872 = ashr <8 x i16> %871, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %873 = bitcast <8 x i16> %872 to <2 x i64>
  %874 = extractelement <2 x i64> %873, i32 0
  %875 = bitcast [33792 x i16]* %13 to i64*
  store i64 %874, i64* %875, align 16
  %876 = getelementptr inbounds i8, i8* %840, i64 %1
  %877 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 128
  %878 = add nsw i32 %50, -1
  br label %879

879:                                              ; preds = %835, %862
  %880 = phi i8* [ %840, %835 ], [ %876, %862 ]
  %881 = phi i16* [ %51, %835 ], [ %877, %862 ]
  %882 = phi i32 [ %50, %835 ], [ %878, %862 ]
  %883 = icmp eq i32 %859, 1
  br i1 %883, label %920, label %884

884:                                              ; preds = %879, %884
  %885 = phi i8* [ %916, %884 ], [ %880, %879 ]
  %886 = phi i16* [ %917, %884 ], [ %881, %879 ]
  %887 = phi i32 [ %918, %884 ], [ %882, %879 ]
  %888 = bitcast i8* %885 to <16 x i8>*
  %889 = load <16 x i8>, <16 x i8>* %888, align 1
  %890 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %889, <16 x i8> %858) #7
  %891 = shufflevector <16 x i8> %889, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %892 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %891, <16 x i8> %858) #7
  %893 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %890, <16 x i8> %851) #7
  %894 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %892, <16 x i8> %854) #7
  %895 = add <8 x i16> %893, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %896 = add <8 x i16> %895, %894
  %897 = ashr <8 x i16> %896, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %898 = bitcast <8 x i16> %897 to <2 x i64>
  %899 = extractelement <2 x i64> %898, i32 0
  %900 = bitcast i16* %886 to i64*
  store i64 %899, i64* %900, align 1
  %901 = getelementptr inbounds i8, i8* %885, i64 %1
  %902 = getelementptr inbounds i16, i16* %886, i64 128
  %903 = bitcast i8* %901 to <16 x i8>*
  %904 = load <16 x i8>, <16 x i8>* %903, align 1
  %905 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %904, <16 x i8> %858) #7
  %906 = shufflevector <16 x i8> %904, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %907 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %906, <16 x i8> %858) #7
  %908 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %905, <16 x i8> %851) #7
  %909 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %907, <16 x i8> %854) #7
  %910 = add <8 x i16> %908, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %911 = add <8 x i16> %910, %909
  %912 = ashr <8 x i16> %911, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %913 = bitcast <8 x i16> %912 to <2 x i64>
  %914 = extractelement <2 x i64> %913, i32 0
  %915 = bitcast i16* %902 to i64*
  store i64 %914, i64* %915, align 1
  %916 = getelementptr inbounds i8, i8* %901, i64 %1
  %917 = getelementptr inbounds i16, i16* %886, i64 256
  %918 = add nsw i32 %887, -2
  %919 = icmp eq i32 %918, 0
  br i1 %919, label %920, label %884

920:                                              ; preds = %794, %799, %746, %652, %657, %605, %511, %516, %457, %394, %317, %261, %190, %134, %879, %884
  switch i32 %44, label %1989 [
    i32 0, label %921
    i32 1, label %921
    i32 2, label %1305
    i32 3, label %1764
  ]

921:                                              ; preds = %920, %920
  switch i32 %8, label %1222 [
    i32 2, label %922
    i32 4, label %1073
  ]

922:                                              ; preds = %921
  %923 = and i32 %5, 1023
  %924 = sext i32 %44 to i64
  br label %925

925:                                              ; preds = %925, %922
  %926 = phi i32 [ %9, %922 ], [ %1071, %925 ]
  %927 = phi i32 [ %923, %922 ], [ %1021, %925 ]
  %928 = phi i8* [ %10, %922 ], [ %1070, %925 ]
  %929 = phi i16* [ %51, %922 ], [ %1025, %925 ]
  %930 = bitcast i16* %929 to i64*
  %931 = load i64, i64* %930, align 1
  %932 = insertelement <2 x i64> undef, i64 %931, i32 0
  %933 = getelementptr inbounds i16, i16* %929, i64 128
  %934 = bitcast i16* %933 to i64*
  %935 = load i64, i64* %934, align 1
  %936 = insertelement <2 x i64> undef, i64 %935, i32 0
  %937 = getelementptr inbounds i16, i16* %929, i64 256
  %938 = bitcast i16* %937 to i64*
  %939 = load i64, i64* %938, align 1
  %940 = insertelement <2 x i64> undef, i64 %939, i32 0
  %941 = getelementptr inbounds i16, i16* %929, i64 384
  %942 = bitcast i16* %941 to i64*
  %943 = load i64, i64* %942, align 1
  %944 = insertelement <2 x i64> undef, i64 %943, i32 0
  %945 = getelementptr inbounds i16, i16* %929, i64 512
  %946 = bitcast i16* %945 to i64*
  %947 = load i64, i64* %946, align 1
  %948 = insertelement <2 x i64> undef, i64 %947, i32 0
  %949 = getelementptr inbounds i16, i16* %929, i64 640
  %950 = bitcast i16* %949 to i64*
  %951 = load i64, i64* %950, align 1
  %952 = insertelement <2 x i64> undef, i64 %951, i32 0
  %953 = lshr i32 %927, 6
  %954 = and i32 %953, 15
  %955 = zext i32 %954 to i64
  %956 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %924, i64 %955, i64 1
  %957 = bitcast i8* %956 to i64*
  %958 = load i64, i64* %957, align 1
  %959 = insertelement <2 x i64> undef, i64 %958, i32 0
  %960 = bitcast <2 x i64> %959 to <16 x i8>
  %961 = shufflevector <16 x i8> %960, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %962 = sext <8 x i8> %961 to <8 x i16>
  %963 = bitcast <8 x i16> %962 to <4 x i32>
  %964 = shufflevector <4 x i32> %963, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %965 = add nsw i32 %927, %7
  %966 = ashr i32 %965, 10
  %967 = sext i32 %966 to i64
  %968 = shl nsw i64 %967, 7
  %969 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %968
  %970 = bitcast <2 x i64> %932 to <4 x float>
  %971 = bitcast i16* %969 to <2 x float>*
  %972 = load <2 x float>, <2 x float>* %971, align 16
  %973 = shufflevector <2 x float> %972, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %974 = shufflevector <4 x float> %970, <4 x float> %973, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %975 = bitcast <2 x i64> %936 to <4 x float>
  %976 = getelementptr inbounds i16, i16* %969, i64 128
  %977 = bitcast i16* %976 to <2 x float>*
  %978 = load <2 x float>, <2 x float>* %977, align 16
  %979 = shufflevector <2 x float> %978, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %980 = shufflevector <4 x float> %975, <4 x float> %979, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %981 = bitcast <2 x i64> %940 to <4 x float>
  %982 = getelementptr inbounds i16, i16* %969, i64 256
  %983 = bitcast i16* %982 to <2 x float>*
  %984 = load <2 x float>, <2 x float>* %983, align 16
  %985 = shufflevector <2 x float> %984, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %986 = shufflevector <4 x float> %981, <4 x float> %985, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %987 = bitcast <2 x i64> %944 to <4 x float>
  %988 = getelementptr inbounds i16, i16* %969, i64 384
  %989 = bitcast i16* %988 to <2 x float>*
  %990 = load <2 x float>, <2 x float>* %989, align 16
  %991 = shufflevector <2 x float> %990, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %992 = shufflevector <4 x float> %987, <4 x float> %991, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %993 = bitcast <2 x i64> %948 to <4 x float>
  %994 = getelementptr inbounds i16, i16* %969, i64 512
  %995 = bitcast i16* %994 to <2 x float>*
  %996 = load <2 x float>, <2 x float>* %995, align 16
  %997 = shufflevector <2 x float> %996, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %998 = shufflevector <4 x float> %993, <4 x float> %997, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %999 = bitcast <2 x i64> %952 to <4 x float>
  %1000 = getelementptr inbounds i16, i16* %969, i64 640
  %1001 = bitcast i16* %1000 to <2 x float>*
  %1002 = load <2 x float>, <2 x float>* %1001, align 16
  %1003 = shufflevector <2 x float> %1002, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1004 = shufflevector <4 x float> %999, <4 x float> %1003, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1005 = shufflevector <4 x i32> %963, <4 x i32> undef, <4 x i32> zeroinitializer
  %1006 = shufflevector <4 x i32> %963, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1007 = lshr i32 %965, 6
  %1008 = and i32 %1007, 15
  %1009 = zext i32 %1008 to i64
  %1010 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %924, i64 %1009, i64 1
  %1011 = bitcast i8* %1010 to i64*
  %1012 = load i64, i64* %1011, align 1
  %1013 = insertelement <2 x i64> undef, i64 %1012, i32 0
  %1014 = bitcast <2 x i64> %1013 to <16 x i8>
  %1015 = shufflevector <16 x i8> %1014, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1016 = sext <8 x i8> %1015 to <8 x i16>
  %1017 = bitcast <8 x i16> %1016 to <4 x i32>
  %1018 = shufflevector <4 x i32> %1017, <4 x i32> undef, <4 x i32> zeroinitializer
  %1019 = shufflevector <4 x i32> %1017, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1020 = shufflevector <4 x i32> %1017, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1021 = add nsw i32 %965, %7
  %1022 = ashr i32 %1021, 10
  %1023 = sext i32 %1022 to i64
  %1024 = shl nsw i64 %1023, 7
  %1025 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1024
  %1026 = bitcast <4 x float> %974 to <8 x i16>
  %1027 = bitcast <4 x float> %980 to <8 x i16>
  %1028 = shufflevector <8 x i16> %1026, <8 x i16> %1027, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1029 = bitcast <4 x i32> %1005 to <8 x i16>
  %1030 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1028, <8 x i16> %1029) #7
  %1031 = shufflevector <8 x i16> %1026, <8 x i16> %1027, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1032 = bitcast <4 x i32> %1018 to <8 x i16>
  %1033 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1031, <8 x i16> %1032) #7
  %1034 = bitcast <4 x float> %986 to <8 x i16>
  %1035 = bitcast <4 x float> %992 to <8 x i16>
  %1036 = shufflevector <8 x i16> %1034, <8 x i16> %1035, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1037 = bitcast <4 x i32> %964 to <8 x i16>
  %1038 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1036, <8 x i16> %1037) #7
  %1039 = shufflevector <8 x i16> %1034, <8 x i16> %1035, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1040 = bitcast <4 x i32> %1019 to <8 x i16>
  %1041 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1039, <8 x i16> %1040) #7
  %1042 = bitcast <4 x float> %998 to <8 x i16>
  %1043 = bitcast <4 x float> %1004 to <8 x i16>
  %1044 = shufflevector <8 x i16> %1042, <8 x i16> %1043, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1045 = bitcast <4 x i32> %1006 to <8 x i16>
  %1046 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1044, <8 x i16> %1045) #7
  %1047 = shufflevector <8 x i16> %1042, <8 x i16> %1043, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1048 = bitcast <4 x i32> %1020 to <8 x i16>
  %1049 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1047, <8 x i16> %1048) #7
  %1050 = add <4 x i32> %1030, <i32 512, i32 512, i32 512, i32 512>
  %1051 = add <4 x i32> %1050, %1038
  %1052 = add <4 x i32> %1051, %1046
  %1053 = ashr <4 x i32> %1052, <i32 10, i32 10, i32 10, i32 10>
  %1054 = add <4 x i32> %1033, <i32 512, i32 512, i32 512, i32 512>
  %1055 = add <4 x i32> %1054, %1041
  %1056 = add <4 x i32> %1055, %1049
  %1057 = ashr <4 x i32> %1056, <i32 10, i32 10, i32 10, i32 10>
  %1058 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1053, <4 x i32> %1057) #7
  %1059 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1058, <8 x i16> %1058) #7
  %1060 = bitcast <16 x i8> %1059 to <4 x i32>
  %1061 = extractelement <4 x i32> %1060, i32 0
  %1062 = bitcast i8* %928 to i16*
  %1063 = trunc i32 %1061 to i16
  store i16 %1063, i16* %1062, align 1
  %1064 = getelementptr inbounds i8, i8* %928, i64 %11
  %1065 = shufflevector <16 x i8> %1059, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1066 = bitcast <16 x i8> %1065 to <4 x i32>
  %1067 = extractelement <4 x i32> %1066, i32 0
  %1068 = bitcast i8* %1064 to i16*
  %1069 = trunc i32 %1067 to i16
  store i16 %1069, i16* %1068, align 1
  %1070 = getelementptr inbounds i8, i8* %1064, i64 %11
  %1071 = add nsw i32 %926, -2
  %1072 = icmp eq i32 %1071, 0
  br i1 %1072, label %2295, label %925

1073:                                             ; preds = %921
  %1074 = and i32 %5, 1023
  %1075 = sext i32 %44 to i64
  br label %1076

1076:                                             ; preds = %1076, %1073
  %1077 = phi i32 [ %9, %1073 ], [ %1220, %1076 ]
  %1078 = phi i32 [ %1074, %1073 ], [ %1172, %1076 ]
  %1079 = phi i8* [ %10, %1073 ], [ %1219, %1076 ]
  %1080 = phi i16* [ %51, %1073 ], [ %1176, %1076 ]
  %1081 = bitcast i16* %1080 to i64*
  %1082 = load i64, i64* %1081, align 1
  %1083 = insertelement <2 x i64> undef, i64 %1082, i32 0
  %1084 = getelementptr inbounds i16, i16* %1080, i64 128
  %1085 = bitcast i16* %1084 to i64*
  %1086 = load i64, i64* %1085, align 1
  %1087 = insertelement <2 x i64> undef, i64 %1086, i32 0
  %1088 = getelementptr inbounds i16, i16* %1080, i64 256
  %1089 = bitcast i16* %1088 to i64*
  %1090 = load i64, i64* %1089, align 1
  %1091 = insertelement <2 x i64> undef, i64 %1090, i32 0
  %1092 = getelementptr inbounds i16, i16* %1080, i64 384
  %1093 = bitcast i16* %1092 to i64*
  %1094 = load i64, i64* %1093, align 1
  %1095 = insertelement <2 x i64> undef, i64 %1094, i32 0
  %1096 = getelementptr inbounds i16, i16* %1080, i64 512
  %1097 = bitcast i16* %1096 to i64*
  %1098 = load i64, i64* %1097, align 1
  %1099 = insertelement <2 x i64> undef, i64 %1098, i32 0
  %1100 = getelementptr inbounds i16, i16* %1080, i64 640
  %1101 = bitcast i16* %1100 to i64*
  %1102 = load i64, i64* %1101, align 1
  %1103 = insertelement <2 x i64> undef, i64 %1102, i32 0
  %1104 = lshr i32 %1078, 6
  %1105 = and i32 %1104, 15
  %1106 = zext i32 %1105 to i64
  %1107 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %1075, i64 %1106, i64 1
  %1108 = bitcast i8* %1107 to i64*
  %1109 = load i64, i64* %1108, align 1
  %1110 = insertelement <2 x i64> undef, i64 %1109, i32 0
  %1111 = bitcast <2 x i64> %1110 to <16 x i8>
  %1112 = shufflevector <16 x i8> %1111, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1113 = sext <8 x i8> %1112 to <8 x i16>
  %1114 = bitcast <8 x i16> %1113 to <4 x i32>
  %1115 = shufflevector <4 x i32> %1114, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1116 = add nsw i32 %1078, %7
  %1117 = ashr i32 %1116, 10
  %1118 = sext i32 %1117 to i64
  %1119 = shl nsw i64 %1118, 7
  %1120 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1119
  %1121 = bitcast <2 x i64> %1083 to <4 x float>
  %1122 = bitcast i16* %1120 to <2 x float>*
  %1123 = load <2 x float>, <2 x float>* %1122, align 16
  %1124 = shufflevector <2 x float> %1123, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1125 = shufflevector <4 x float> %1121, <4 x float> %1124, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1126 = bitcast <2 x i64> %1087 to <4 x float>
  %1127 = getelementptr inbounds i16, i16* %1120, i64 128
  %1128 = bitcast i16* %1127 to <2 x float>*
  %1129 = load <2 x float>, <2 x float>* %1128, align 16
  %1130 = shufflevector <2 x float> %1129, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1131 = shufflevector <4 x float> %1126, <4 x float> %1130, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1132 = bitcast <2 x i64> %1091 to <4 x float>
  %1133 = getelementptr inbounds i16, i16* %1120, i64 256
  %1134 = bitcast i16* %1133 to <2 x float>*
  %1135 = load <2 x float>, <2 x float>* %1134, align 16
  %1136 = shufflevector <2 x float> %1135, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1137 = shufflevector <4 x float> %1132, <4 x float> %1136, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1138 = bitcast <2 x i64> %1095 to <4 x float>
  %1139 = getelementptr inbounds i16, i16* %1120, i64 384
  %1140 = bitcast i16* %1139 to <2 x float>*
  %1141 = load <2 x float>, <2 x float>* %1140, align 16
  %1142 = shufflevector <2 x float> %1141, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1143 = shufflevector <4 x float> %1138, <4 x float> %1142, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1144 = bitcast <2 x i64> %1099 to <4 x float>
  %1145 = getelementptr inbounds i16, i16* %1120, i64 512
  %1146 = bitcast i16* %1145 to <2 x float>*
  %1147 = load <2 x float>, <2 x float>* %1146, align 16
  %1148 = shufflevector <2 x float> %1147, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1149 = shufflevector <4 x float> %1144, <4 x float> %1148, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1150 = bitcast <2 x i64> %1103 to <4 x float>
  %1151 = getelementptr inbounds i16, i16* %1120, i64 640
  %1152 = bitcast i16* %1151 to <2 x float>*
  %1153 = load <2 x float>, <2 x float>* %1152, align 16
  %1154 = shufflevector <2 x float> %1153, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1155 = shufflevector <4 x float> %1150, <4 x float> %1154, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1156 = shufflevector <4 x i32> %1114, <4 x i32> undef, <4 x i32> zeroinitializer
  %1157 = shufflevector <4 x i32> %1114, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1158 = lshr i32 %1116, 6
  %1159 = and i32 %1158, 15
  %1160 = zext i32 %1159 to i64
  %1161 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %1075, i64 %1160, i64 1
  %1162 = bitcast i8* %1161 to i64*
  %1163 = load i64, i64* %1162, align 1
  %1164 = insertelement <2 x i64> undef, i64 %1163, i32 0
  %1165 = bitcast <2 x i64> %1164 to <16 x i8>
  %1166 = shufflevector <16 x i8> %1165, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1167 = sext <8 x i8> %1166 to <8 x i16>
  %1168 = bitcast <8 x i16> %1167 to <4 x i32>
  %1169 = shufflevector <4 x i32> %1168, <4 x i32> undef, <4 x i32> zeroinitializer
  %1170 = shufflevector <4 x i32> %1168, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1171 = shufflevector <4 x i32> %1168, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1172 = add nsw i32 %1116, %7
  %1173 = ashr i32 %1172, 10
  %1174 = sext i32 %1173 to i64
  %1175 = shl nsw i64 %1174, 7
  %1176 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1175
  %1177 = bitcast <4 x float> %1125 to <8 x i16>
  %1178 = bitcast <4 x float> %1131 to <8 x i16>
  %1179 = shufflevector <8 x i16> %1177, <8 x i16> %1178, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1180 = bitcast <4 x i32> %1156 to <8 x i16>
  %1181 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1179, <8 x i16> %1180) #7
  %1182 = shufflevector <8 x i16> %1177, <8 x i16> %1178, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1183 = bitcast <4 x i32> %1169 to <8 x i16>
  %1184 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1182, <8 x i16> %1183) #7
  %1185 = bitcast <4 x float> %1137 to <8 x i16>
  %1186 = bitcast <4 x float> %1143 to <8 x i16>
  %1187 = shufflevector <8 x i16> %1185, <8 x i16> %1186, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1188 = bitcast <4 x i32> %1115 to <8 x i16>
  %1189 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1187, <8 x i16> %1188) #7
  %1190 = shufflevector <8 x i16> %1185, <8 x i16> %1186, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1191 = bitcast <4 x i32> %1170 to <8 x i16>
  %1192 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1190, <8 x i16> %1191) #7
  %1193 = bitcast <4 x float> %1149 to <8 x i16>
  %1194 = bitcast <4 x float> %1155 to <8 x i16>
  %1195 = shufflevector <8 x i16> %1193, <8 x i16> %1194, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1196 = bitcast <4 x i32> %1157 to <8 x i16>
  %1197 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1195, <8 x i16> %1196) #7
  %1198 = shufflevector <8 x i16> %1193, <8 x i16> %1194, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1199 = bitcast <4 x i32> %1171 to <8 x i16>
  %1200 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1198, <8 x i16> %1199) #7
  %1201 = add <4 x i32> %1181, <i32 512, i32 512, i32 512, i32 512>
  %1202 = add <4 x i32> %1201, %1189
  %1203 = add <4 x i32> %1202, %1197
  %1204 = ashr <4 x i32> %1203, <i32 10, i32 10, i32 10, i32 10>
  %1205 = add <4 x i32> %1184, <i32 512, i32 512, i32 512, i32 512>
  %1206 = add <4 x i32> %1205, %1192
  %1207 = add <4 x i32> %1206, %1200
  %1208 = ashr <4 x i32> %1207, <i32 10, i32 10, i32 10, i32 10>
  %1209 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1204, <4 x i32> %1208) #7
  %1210 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1209, <8 x i16> %1209) #7
  %1211 = bitcast <16 x i8> %1210 to <4 x i32>
  %1212 = extractelement <4 x i32> %1211, i32 0
  %1213 = bitcast i8* %1079 to i32*
  store i32 %1212, i32* %1213, align 1
  %1214 = getelementptr inbounds i8, i8* %1079, i64 %11
  %1215 = shufflevector <16 x i8> %1210, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1216 = bitcast <16 x i8> %1215 to <4 x i32>
  %1217 = extractelement <4 x i32> %1216, i32 0
  %1218 = bitcast i8* %1214 to i32*
  store i32 %1217, i32* %1218, align 1
  %1219 = getelementptr inbounds i8, i8* %1214, i64 %11
  %1220 = add nsw i32 %1077, -2
  %1221 = icmp eq i32 %1220, 0
  br i1 %1221, label %2295, label %1076

1222:                                             ; preds = %921
  %1223 = and i32 %5, 1023
  %1224 = sext i32 %44 to i64
  %1225 = sext i32 %8 to i64
  br label %1226

1226:                                             ; preds = %1300, %1222
  %1227 = phi i32 [ %1223, %1222 ], [ %1301, %1300 ]
  %1228 = phi i32 [ %9, %1222 ], [ %1303, %1300 ]
  %1229 = phi i8* [ %10, %1222 ], [ %1302, %1300 ]
  %1230 = ashr i32 %1227, 10
  %1231 = sext i32 %1230 to i64
  %1232 = shl nsw i64 %1231, 7
  %1233 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1232
  %1234 = lshr i32 %1227, 6
  %1235 = and i32 %1234, 15
  %1236 = zext i32 %1235 to i64
  %1237 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %1224, i64 %1236, i64 1
  %1238 = bitcast i8* %1237 to i64*
  %1239 = load i64, i64* %1238, align 1
  %1240 = insertelement <2 x i64> undef, i64 %1239, i32 0
  %1241 = bitcast <2 x i64> %1240 to <16 x i8>
  %1242 = shufflevector <16 x i8> %1241, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1243 = sext <8 x i8> %1242 to <8 x i16>
  %1244 = bitcast <8 x i16> %1243 to <4 x i32>
  %1245 = shufflevector <4 x i32> %1244, <4 x i32> undef, <4 x i32> zeroinitializer
  %1246 = shufflevector <4 x i32> %1244, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1247 = shufflevector <4 x i32> %1244, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1248 = bitcast <4 x i32> %1245 to <8 x i16>
  %1249 = bitcast <4 x i32> %1246 to <8 x i16>
  %1250 = bitcast <4 x i32> %1247 to <8 x i16>
  br label %1251

1251:                                             ; preds = %1251, %1226
  %1252 = phi i64 [ %1297, %1251 ], [ 0, %1226 ]
  %1253 = phi i16* [ %1298, %1251 ], [ %1233, %1226 ]
  %1254 = bitcast i16* %1253 to <8 x i16>*
  %1255 = load <8 x i16>, <8 x i16>* %1254, align 1
  %1256 = getelementptr inbounds i16, i16* %1253, i64 128
  %1257 = bitcast i16* %1256 to <8 x i16>*
  %1258 = load <8 x i16>, <8 x i16>* %1257, align 1
  %1259 = getelementptr inbounds i16, i16* %1253, i64 256
  %1260 = bitcast i16* %1259 to <8 x i16>*
  %1261 = load <8 x i16>, <8 x i16>* %1260, align 1
  %1262 = getelementptr inbounds i16, i16* %1253, i64 384
  %1263 = bitcast i16* %1262 to <8 x i16>*
  %1264 = load <8 x i16>, <8 x i16>* %1263, align 1
  %1265 = getelementptr inbounds i16, i16* %1253, i64 512
  %1266 = bitcast i16* %1265 to <8 x i16>*
  %1267 = load <8 x i16>, <8 x i16>* %1266, align 1
  %1268 = getelementptr inbounds i16, i16* %1253, i64 640
  %1269 = bitcast i16* %1268 to <8 x i16>*
  %1270 = load <8 x i16>, <8 x i16>* %1269, align 1
  %1271 = shufflevector <8 x i16> %1255, <8 x i16> %1258, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1272 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1271, <8 x i16> %1248) #7
  %1273 = shufflevector <8 x i16> %1255, <8 x i16> %1258, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1274 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1273, <8 x i16> %1248) #7
  %1275 = shufflevector <8 x i16> %1261, <8 x i16> %1264, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1276 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1275, <8 x i16> %1249) #7
  %1277 = shufflevector <8 x i16> %1261, <8 x i16> %1264, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1278 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1277, <8 x i16> %1249) #7
  %1279 = shufflevector <8 x i16> %1267, <8 x i16> %1270, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1280 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1279, <8 x i16> %1250) #7
  %1281 = shufflevector <8 x i16> %1267, <8 x i16> %1270, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1282 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1281, <8 x i16> %1250) #7
  %1283 = add <4 x i32> %1272, <i32 512, i32 512, i32 512, i32 512>
  %1284 = add <4 x i32> %1283, %1276
  %1285 = add <4 x i32> %1284, %1280
  %1286 = ashr <4 x i32> %1285, <i32 10, i32 10, i32 10, i32 10>
  %1287 = add <4 x i32> %1274, <i32 512, i32 512, i32 512, i32 512>
  %1288 = add <4 x i32> %1287, %1278
  %1289 = add <4 x i32> %1288, %1282
  %1290 = ashr <4 x i32> %1289, <i32 10, i32 10, i32 10, i32 10>
  %1291 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1286, <4 x i32> %1290) #7
  %1292 = getelementptr inbounds i8, i8* %1229, i64 %1252
  %1293 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1291, <8 x i16> undef) #7
  %1294 = bitcast <16 x i8> %1293 to <2 x i64>
  %1295 = extractelement <2 x i64> %1294, i32 0
  %1296 = bitcast i8* %1292 to i64*
  store i64 %1295, i64* %1296, align 1
  %1297 = add nuw nsw i64 %1252, 8
  %1298 = getelementptr inbounds i16, i16* %1253, i64 8
  %1299 = icmp slt i64 %1297, %1225
  br i1 %1299, label %1251, label %1300

1300:                                             ; preds = %1251
  %1301 = add nsw i32 %1227, %7
  %1302 = getelementptr inbounds i8, i8* %1229, i64 %11
  %1303 = add nsw i32 %1228, -1
  %1304 = icmp eq i32 %1303, 0
  br i1 %1304, label %2295, label %1226

1305:                                             ; preds = %920
  switch i32 %8, label %1668 [
    i32 2, label %1306
    i32 4, label %1488
  ]

1306:                                             ; preds = %1305
  %1307 = and i32 %5, 1023
  br label %1308

1308:                                             ; preds = %1308, %1306
  %1309 = phi i32 [ %9, %1306 ], [ %1486, %1308 ]
  %1310 = phi i32 [ %1307, %1306 ], [ %1426, %1308 ]
  %1311 = phi i8* [ %10, %1306 ], [ %1485, %1308 ]
  %1312 = phi i16* [ %51, %1306 ], [ %1430, %1308 ]
  %1313 = bitcast i16* %1312 to i64*
  %1314 = load i64, i64* %1313, align 1
  %1315 = insertelement <2 x i64> undef, i64 %1314, i32 0
  %1316 = getelementptr inbounds i16, i16* %1312, i64 128
  %1317 = bitcast i16* %1316 to i64*
  %1318 = load i64, i64* %1317, align 1
  %1319 = insertelement <2 x i64> undef, i64 %1318, i32 0
  %1320 = getelementptr inbounds i16, i16* %1312, i64 256
  %1321 = bitcast i16* %1320 to i64*
  %1322 = load i64, i64* %1321, align 1
  %1323 = insertelement <2 x i64> undef, i64 %1322, i32 0
  %1324 = getelementptr inbounds i16, i16* %1312, i64 384
  %1325 = bitcast i16* %1324 to i64*
  %1326 = load i64, i64* %1325, align 1
  %1327 = insertelement <2 x i64> undef, i64 %1326, i32 0
  %1328 = getelementptr inbounds i16, i16* %1312, i64 512
  %1329 = bitcast i16* %1328 to i64*
  %1330 = load i64, i64* %1329, align 1
  %1331 = insertelement <2 x i64> undef, i64 %1330, i32 0
  %1332 = getelementptr inbounds i16, i16* %1312, i64 640
  %1333 = bitcast i16* %1332 to i64*
  %1334 = load i64, i64* %1333, align 1
  %1335 = insertelement <2 x i64> undef, i64 %1334, i32 0
  %1336 = getelementptr inbounds i16, i16* %1312, i64 768
  %1337 = bitcast i16* %1336 to i64*
  %1338 = load i64, i64* %1337, align 1
  %1339 = insertelement <2 x i64> undef, i64 %1338, i32 0
  %1340 = getelementptr inbounds i16, i16* %1312, i64 896
  %1341 = bitcast i16* %1340 to i64*
  %1342 = load i64, i64* %1341, align 1
  %1343 = insertelement <2 x i64> undef, i64 %1342, i32 0
  %1344 = lshr i32 %1310, 6
  %1345 = and i32 %1344, 15
  %1346 = zext i32 %1345 to i64
  %1347 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 2, i64 %1346, i64 0
  %1348 = bitcast i8* %1347 to i64*
  %1349 = load i64, i64* %1348, align 8
  %1350 = insertelement <2 x i64> undef, i64 %1349, i32 0
  %1351 = bitcast <2 x i64> %1350 to <16 x i8>
  %1352 = shufflevector <16 x i8> %1351, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1353 = sext <8 x i8> %1352 to <8 x i16>
  %1354 = bitcast <8 x i16> %1353 to <4 x i32>
  %1355 = shufflevector <4 x i32> %1354, <4 x i32> undef, <4 x i32> zeroinitializer
  %1356 = shufflevector <4 x i32> %1354, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1357 = add nsw i32 %1310, %7
  %1358 = ashr i32 %1357, 10
  %1359 = sext i32 %1358 to i64
  %1360 = shl nsw i64 %1359, 7
  %1361 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1360
  %1362 = bitcast <2 x i64> %1315 to <4 x float>
  %1363 = bitcast i16* %1361 to <2 x float>*
  %1364 = load <2 x float>, <2 x float>* %1363, align 16
  %1365 = shufflevector <2 x float> %1364, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1366 = shufflevector <4 x float> %1362, <4 x float> %1365, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1367 = bitcast <2 x i64> %1319 to <4 x float>
  %1368 = getelementptr inbounds i16, i16* %1361, i64 128
  %1369 = bitcast i16* %1368 to <2 x float>*
  %1370 = load <2 x float>, <2 x float>* %1369, align 16
  %1371 = shufflevector <2 x float> %1370, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1372 = shufflevector <4 x float> %1367, <4 x float> %1371, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1373 = bitcast <2 x i64> %1323 to <4 x float>
  %1374 = getelementptr inbounds i16, i16* %1361, i64 256
  %1375 = bitcast i16* %1374 to <2 x float>*
  %1376 = load <2 x float>, <2 x float>* %1375, align 16
  %1377 = shufflevector <2 x float> %1376, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1378 = shufflevector <4 x float> %1373, <4 x float> %1377, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1379 = bitcast <2 x i64> %1327 to <4 x float>
  %1380 = getelementptr inbounds i16, i16* %1361, i64 384
  %1381 = bitcast i16* %1380 to <2 x float>*
  %1382 = load <2 x float>, <2 x float>* %1381, align 16
  %1383 = shufflevector <2 x float> %1382, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1384 = shufflevector <4 x float> %1379, <4 x float> %1383, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1385 = bitcast <2 x i64> %1331 to <4 x float>
  %1386 = getelementptr inbounds i16, i16* %1361, i64 512
  %1387 = bitcast i16* %1386 to <2 x float>*
  %1388 = load <2 x float>, <2 x float>* %1387, align 16
  %1389 = shufflevector <2 x float> %1388, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1390 = shufflevector <4 x float> %1385, <4 x float> %1389, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1391 = bitcast <2 x i64> %1335 to <4 x float>
  %1392 = getelementptr inbounds i16, i16* %1361, i64 640
  %1393 = bitcast i16* %1392 to <2 x float>*
  %1394 = load <2 x float>, <2 x float>* %1393, align 16
  %1395 = shufflevector <2 x float> %1394, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1396 = shufflevector <4 x float> %1391, <4 x float> %1395, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1397 = bitcast <2 x i64> %1339 to <4 x float>
  %1398 = getelementptr inbounds i16, i16* %1361, i64 768
  %1399 = bitcast i16* %1398 to <2 x float>*
  %1400 = load <2 x float>, <2 x float>* %1399, align 16
  %1401 = shufflevector <2 x float> %1400, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1402 = shufflevector <4 x float> %1397, <4 x float> %1401, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1403 = bitcast <2 x i64> %1343 to <4 x float>
  %1404 = getelementptr inbounds i16, i16* %1361, i64 896
  %1405 = bitcast i16* %1404 to <2 x float>*
  %1406 = load <2 x float>, <2 x float>* %1405, align 16
  %1407 = shufflevector <2 x float> %1406, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1408 = shufflevector <4 x float> %1403, <4 x float> %1407, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1409 = shufflevector <4 x i32> %1354, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1410 = shufflevector <4 x i32> %1354, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1411 = lshr i32 %1357, 6
  %1412 = and i32 %1411, 15
  %1413 = zext i32 %1412 to i64
  %1414 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 2, i64 %1413, i64 0
  %1415 = bitcast i8* %1414 to i64*
  %1416 = load i64, i64* %1415, align 8
  %1417 = insertelement <2 x i64> undef, i64 %1416, i32 0
  %1418 = bitcast <2 x i64> %1417 to <16 x i8>
  %1419 = shufflevector <16 x i8> %1418, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1420 = sext <8 x i8> %1419 to <8 x i16>
  %1421 = bitcast <8 x i16> %1420 to <4 x i32>
  %1422 = shufflevector <4 x i32> %1421, <4 x i32> undef, <4 x i32> zeroinitializer
  %1423 = shufflevector <4 x i32> %1421, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1424 = shufflevector <4 x i32> %1421, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1425 = shufflevector <4 x i32> %1421, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1426 = add nsw i32 %1357, %7
  %1427 = ashr i32 %1426, 10
  %1428 = sext i32 %1427 to i64
  %1429 = shl nsw i64 %1428, 7
  %1430 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1429
  %1431 = bitcast <4 x float> %1366 to <8 x i16>
  %1432 = bitcast <4 x float> %1372 to <8 x i16>
  %1433 = shufflevector <8 x i16> %1431, <8 x i16> %1432, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1434 = bitcast <4 x i32> %1355 to <8 x i16>
  %1435 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1433, <8 x i16> %1434) #7
  %1436 = shufflevector <8 x i16> %1431, <8 x i16> %1432, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1437 = bitcast <4 x i32> %1422 to <8 x i16>
  %1438 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1436, <8 x i16> %1437) #7
  %1439 = bitcast <4 x float> %1378 to <8 x i16>
  %1440 = bitcast <4 x float> %1384 to <8 x i16>
  %1441 = shufflevector <8 x i16> %1439, <8 x i16> %1440, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1442 = bitcast <4 x i32> %1409 to <8 x i16>
  %1443 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1441, <8 x i16> %1442) #7
  %1444 = shufflevector <8 x i16> %1439, <8 x i16> %1440, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1445 = bitcast <4 x i32> %1423 to <8 x i16>
  %1446 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1444, <8 x i16> %1445) #7
  %1447 = bitcast <4 x float> %1390 to <8 x i16>
  %1448 = bitcast <4 x float> %1396 to <8 x i16>
  %1449 = shufflevector <8 x i16> %1447, <8 x i16> %1448, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1450 = bitcast <4 x i32> %1356 to <8 x i16>
  %1451 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1449, <8 x i16> %1450) #7
  %1452 = shufflevector <8 x i16> %1447, <8 x i16> %1448, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1453 = bitcast <4 x i32> %1424 to <8 x i16>
  %1454 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1452, <8 x i16> %1453) #7
  %1455 = bitcast <4 x float> %1402 to <8 x i16>
  %1456 = bitcast <4 x float> %1408 to <8 x i16>
  %1457 = shufflevector <8 x i16> %1455, <8 x i16> %1456, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1458 = bitcast <4 x i32> %1410 to <8 x i16>
  %1459 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1457, <8 x i16> %1458) #7
  %1460 = shufflevector <8 x i16> %1455, <8 x i16> %1456, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1461 = bitcast <4 x i32> %1425 to <8 x i16>
  %1462 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1460, <8 x i16> %1461) #7
  %1463 = add <4 x i32> %1435, <i32 512, i32 512, i32 512, i32 512>
  %1464 = add <4 x i32> %1463, %1443
  %1465 = add <4 x i32> %1464, %1451
  %1466 = add <4 x i32> %1465, %1459
  %1467 = ashr <4 x i32> %1466, <i32 10, i32 10, i32 10, i32 10>
  %1468 = add <4 x i32> %1438, <i32 512, i32 512, i32 512, i32 512>
  %1469 = add <4 x i32> %1468, %1446
  %1470 = add <4 x i32> %1469, %1454
  %1471 = add <4 x i32> %1470, %1462
  %1472 = ashr <4 x i32> %1471, <i32 10, i32 10, i32 10, i32 10>
  %1473 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1467, <4 x i32> %1472) #7
  %1474 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1473, <8 x i16> %1473) #7
  %1475 = bitcast <16 x i8> %1474 to <4 x i32>
  %1476 = extractelement <4 x i32> %1475, i32 0
  %1477 = bitcast i8* %1311 to i16*
  %1478 = trunc i32 %1476 to i16
  store i16 %1478, i16* %1477, align 1
  %1479 = getelementptr inbounds i8, i8* %1311, i64 %11
  %1480 = shufflevector <16 x i8> %1474, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1481 = bitcast <16 x i8> %1480 to <4 x i32>
  %1482 = extractelement <4 x i32> %1481, i32 0
  %1483 = bitcast i8* %1479 to i16*
  %1484 = trunc i32 %1482 to i16
  store i16 %1484, i16* %1483, align 1
  %1485 = getelementptr inbounds i8, i8* %1479, i64 %11
  %1486 = add nsw i32 %1309, -2
  %1487 = icmp eq i32 %1486, 0
  br i1 %1487, label %2295, label %1308

1488:                                             ; preds = %1305
  %1489 = and i32 %5, 1023
  br label %1490

1490:                                             ; preds = %1490, %1488
  %1491 = phi i32 [ %9, %1488 ], [ %1666, %1490 ]
  %1492 = phi i32 [ %1489, %1488 ], [ %1608, %1490 ]
  %1493 = phi i8* [ %10, %1488 ], [ %1665, %1490 ]
  %1494 = phi i16* [ %51, %1488 ], [ %1612, %1490 ]
  %1495 = bitcast i16* %1494 to i64*
  %1496 = load i64, i64* %1495, align 1
  %1497 = insertelement <2 x i64> undef, i64 %1496, i32 0
  %1498 = getelementptr inbounds i16, i16* %1494, i64 128
  %1499 = bitcast i16* %1498 to i64*
  %1500 = load i64, i64* %1499, align 1
  %1501 = insertelement <2 x i64> undef, i64 %1500, i32 0
  %1502 = getelementptr inbounds i16, i16* %1494, i64 256
  %1503 = bitcast i16* %1502 to i64*
  %1504 = load i64, i64* %1503, align 1
  %1505 = insertelement <2 x i64> undef, i64 %1504, i32 0
  %1506 = getelementptr inbounds i16, i16* %1494, i64 384
  %1507 = bitcast i16* %1506 to i64*
  %1508 = load i64, i64* %1507, align 1
  %1509 = insertelement <2 x i64> undef, i64 %1508, i32 0
  %1510 = getelementptr inbounds i16, i16* %1494, i64 512
  %1511 = bitcast i16* %1510 to i64*
  %1512 = load i64, i64* %1511, align 1
  %1513 = insertelement <2 x i64> undef, i64 %1512, i32 0
  %1514 = getelementptr inbounds i16, i16* %1494, i64 640
  %1515 = bitcast i16* %1514 to i64*
  %1516 = load i64, i64* %1515, align 1
  %1517 = insertelement <2 x i64> undef, i64 %1516, i32 0
  %1518 = getelementptr inbounds i16, i16* %1494, i64 768
  %1519 = bitcast i16* %1518 to i64*
  %1520 = load i64, i64* %1519, align 1
  %1521 = insertelement <2 x i64> undef, i64 %1520, i32 0
  %1522 = getelementptr inbounds i16, i16* %1494, i64 896
  %1523 = bitcast i16* %1522 to i64*
  %1524 = load i64, i64* %1523, align 1
  %1525 = insertelement <2 x i64> undef, i64 %1524, i32 0
  %1526 = lshr i32 %1492, 6
  %1527 = and i32 %1526, 15
  %1528 = zext i32 %1527 to i64
  %1529 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 2, i64 %1528, i64 0
  %1530 = bitcast i8* %1529 to i64*
  %1531 = load i64, i64* %1530, align 8
  %1532 = insertelement <2 x i64> undef, i64 %1531, i32 0
  %1533 = bitcast <2 x i64> %1532 to <16 x i8>
  %1534 = shufflevector <16 x i8> %1533, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1535 = sext <8 x i8> %1534 to <8 x i16>
  %1536 = bitcast <8 x i16> %1535 to <4 x i32>
  %1537 = shufflevector <4 x i32> %1536, <4 x i32> undef, <4 x i32> zeroinitializer
  %1538 = shufflevector <4 x i32> %1536, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1539 = add nsw i32 %1492, %7
  %1540 = ashr i32 %1539, 10
  %1541 = sext i32 %1540 to i64
  %1542 = shl nsw i64 %1541, 7
  %1543 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1542
  %1544 = bitcast <2 x i64> %1497 to <4 x float>
  %1545 = bitcast i16* %1543 to <2 x float>*
  %1546 = load <2 x float>, <2 x float>* %1545, align 16
  %1547 = shufflevector <2 x float> %1546, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1548 = shufflevector <4 x float> %1544, <4 x float> %1547, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1549 = bitcast <2 x i64> %1501 to <4 x float>
  %1550 = getelementptr inbounds i16, i16* %1543, i64 128
  %1551 = bitcast i16* %1550 to <2 x float>*
  %1552 = load <2 x float>, <2 x float>* %1551, align 16
  %1553 = shufflevector <2 x float> %1552, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1554 = shufflevector <4 x float> %1549, <4 x float> %1553, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1555 = bitcast <2 x i64> %1505 to <4 x float>
  %1556 = getelementptr inbounds i16, i16* %1543, i64 256
  %1557 = bitcast i16* %1556 to <2 x float>*
  %1558 = load <2 x float>, <2 x float>* %1557, align 16
  %1559 = shufflevector <2 x float> %1558, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1560 = shufflevector <4 x float> %1555, <4 x float> %1559, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1561 = bitcast <2 x i64> %1509 to <4 x float>
  %1562 = getelementptr inbounds i16, i16* %1543, i64 384
  %1563 = bitcast i16* %1562 to <2 x float>*
  %1564 = load <2 x float>, <2 x float>* %1563, align 16
  %1565 = shufflevector <2 x float> %1564, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1566 = shufflevector <4 x float> %1561, <4 x float> %1565, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1567 = bitcast <2 x i64> %1513 to <4 x float>
  %1568 = getelementptr inbounds i16, i16* %1543, i64 512
  %1569 = bitcast i16* %1568 to <2 x float>*
  %1570 = load <2 x float>, <2 x float>* %1569, align 16
  %1571 = shufflevector <2 x float> %1570, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1572 = shufflevector <4 x float> %1567, <4 x float> %1571, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1573 = bitcast <2 x i64> %1517 to <4 x float>
  %1574 = getelementptr inbounds i16, i16* %1543, i64 640
  %1575 = bitcast i16* %1574 to <2 x float>*
  %1576 = load <2 x float>, <2 x float>* %1575, align 16
  %1577 = shufflevector <2 x float> %1576, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1578 = shufflevector <4 x float> %1573, <4 x float> %1577, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1579 = bitcast <2 x i64> %1521 to <4 x float>
  %1580 = getelementptr inbounds i16, i16* %1543, i64 768
  %1581 = bitcast i16* %1580 to <2 x float>*
  %1582 = load <2 x float>, <2 x float>* %1581, align 16
  %1583 = shufflevector <2 x float> %1582, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1584 = shufflevector <4 x float> %1579, <4 x float> %1583, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1585 = bitcast <2 x i64> %1525 to <4 x float>
  %1586 = getelementptr inbounds i16, i16* %1543, i64 896
  %1587 = bitcast i16* %1586 to <2 x float>*
  %1588 = load <2 x float>, <2 x float>* %1587, align 16
  %1589 = shufflevector <2 x float> %1588, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1590 = shufflevector <4 x float> %1585, <4 x float> %1589, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1591 = shufflevector <4 x i32> %1536, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1592 = shufflevector <4 x i32> %1536, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1593 = lshr i32 %1539, 6
  %1594 = and i32 %1593, 15
  %1595 = zext i32 %1594 to i64
  %1596 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 2, i64 %1595, i64 0
  %1597 = bitcast i8* %1596 to i64*
  %1598 = load i64, i64* %1597, align 8
  %1599 = insertelement <2 x i64> undef, i64 %1598, i32 0
  %1600 = bitcast <2 x i64> %1599 to <16 x i8>
  %1601 = shufflevector <16 x i8> %1600, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1602 = sext <8 x i8> %1601 to <8 x i16>
  %1603 = bitcast <8 x i16> %1602 to <4 x i32>
  %1604 = shufflevector <4 x i32> %1603, <4 x i32> undef, <4 x i32> zeroinitializer
  %1605 = shufflevector <4 x i32> %1603, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1606 = shufflevector <4 x i32> %1603, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1607 = shufflevector <4 x i32> %1603, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1608 = add nsw i32 %1539, %7
  %1609 = ashr i32 %1608, 10
  %1610 = sext i32 %1609 to i64
  %1611 = shl nsw i64 %1610, 7
  %1612 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1611
  %1613 = bitcast <4 x float> %1548 to <8 x i16>
  %1614 = bitcast <4 x float> %1554 to <8 x i16>
  %1615 = shufflevector <8 x i16> %1613, <8 x i16> %1614, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1616 = bitcast <4 x i32> %1537 to <8 x i16>
  %1617 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1615, <8 x i16> %1616) #7
  %1618 = shufflevector <8 x i16> %1613, <8 x i16> %1614, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1619 = bitcast <4 x i32> %1604 to <8 x i16>
  %1620 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1618, <8 x i16> %1619) #7
  %1621 = bitcast <4 x float> %1560 to <8 x i16>
  %1622 = bitcast <4 x float> %1566 to <8 x i16>
  %1623 = shufflevector <8 x i16> %1621, <8 x i16> %1622, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1624 = bitcast <4 x i32> %1591 to <8 x i16>
  %1625 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1623, <8 x i16> %1624) #7
  %1626 = shufflevector <8 x i16> %1621, <8 x i16> %1622, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1627 = bitcast <4 x i32> %1605 to <8 x i16>
  %1628 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1626, <8 x i16> %1627) #7
  %1629 = bitcast <4 x float> %1572 to <8 x i16>
  %1630 = bitcast <4 x float> %1578 to <8 x i16>
  %1631 = shufflevector <8 x i16> %1629, <8 x i16> %1630, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1632 = bitcast <4 x i32> %1538 to <8 x i16>
  %1633 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1631, <8 x i16> %1632) #7
  %1634 = shufflevector <8 x i16> %1629, <8 x i16> %1630, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1635 = bitcast <4 x i32> %1606 to <8 x i16>
  %1636 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1634, <8 x i16> %1635) #7
  %1637 = bitcast <4 x float> %1584 to <8 x i16>
  %1638 = bitcast <4 x float> %1590 to <8 x i16>
  %1639 = shufflevector <8 x i16> %1637, <8 x i16> %1638, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1640 = bitcast <4 x i32> %1592 to <8 x i16>
  %1641 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1639, <8 x i16> %1640) #7
  %1642 = shufflevector <8 x i16> %1637, <8 x i16> %1638, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1643 = bitcast <4 x i32> %1607 to <8 x i16>
  %1644 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1642, <8 x i16> %1643) #7
  %1645 = add <4 x i32> %1617, <i32 512, i32 512, i32 512, i32 512>
  %1646 = add <4 x i32> %1645, %1625
  %1647 = add <4 x i32> %1646, %1633
  %1648 = add <4 x i32> %1647, %1641
  %1649 = ashr <4 x i32> %1648, <i32 10, i32 10, i32 10, i32 10>
  %1650 = add <4 x i32> %1620, <i32 512, i32 512, i32 512, i32 512>
  %1651 = add <4 x i32> %1650, %1628
  %1652 = add <4 x i32> %1651, %1636
  %1653 = add <4 x i32> %1652, %1644
  %1654 = ashr <4 x i32> %1653, <i32 10, i32 10, i32 10, i32 10>
  %1655 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1649, <4 x i32> %1654) #7
  %1656 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1655, <8 x i16> %1655) #7
  %1657 = bitcast <16 x i8> %1656 to <4 x i32>
  %1658 = extractelement <4 x i32> %1657, i32 0
  %1659 = bitcast i8* %1493 to i32*
  store i32 %1658, i32* %1659, align 1
  %1660 = getelementptr inbounds i8, i8* %1493, i64 %11
  %1661 = shufflevector <16 x i8> %1656, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1662 = bitcast <16 x i8> %1661 to <4 x i32>
  %1663 = extractelement <4 x i32> %1662, i32 0
  %1664 = bitcast i8* %1660 to i32*
  store i32 %1663, i32* %1664, align 1
  %1665 = getelementptr inbounds i8, i8* %1660, i64 %11
  %1666 = add nsw i32 %1491, -2
  %1667 = icmp eq i32 %1666, 0
  br i1 %1667, label %2295, label %1490

1668:                                             ; preds = %1305
  %1669 = and i32 %5, 1023
  %1670 = sext i32 %8 to i64
  br label %1671

1671:                                             ; preds = %1759, %1668
  %1672 = phi i32 [ %1669, %1668 ], [ %1760, %1759 ]
  %1673 = phi i32 [ %9, %1668 ], [ %1762, %1759 ]
  %1674 = phi i8* [ %10, %1668 ], [ %1761, %1759 ]
  %1675 = ashr i32 %1672, 10
  %1676 = sext i32 %1675 to i64
  %1677 = shl nsw i64 %1676, 7
  %1678 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1677
  %1679 = lshr i32 %1672, 6
  %1680 = and i32 %1679, 15
  %1681 = zext i32 %1680 to i64
  %1682 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 2, i64 %1681, i64 0
  %1683 = bitcast i8* %1682 to i64*
  %1684 = load i64, i64* %1683, align 8
  %1685 = insertelement <2 x i64> undef, i64 %1684, i32 0
  %1686 = bitcast <2 x i64> %1685 to <16 x i8>
  %1687 = shufflevector <16 x i8> %1686, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1688 = sext <8 x i8> %1687 to <8 x i16>
  %1689 = bitcast <8 x i16> %1688 to <4 x i32>
  %1690 = shufflevector <4 x i32> %1689, <4 x i32> undef, <4 x i32> zeroinitializer
  %1691 = shufflevector <4 x i32> %1689, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1692 = shufflevector <4 x i32> %1689, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1693 = shufflevector <4 x i32> %1689, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1694 = bitcast <4 x i32> %1690 to <8 x i16>
  %1695 = bitcast <4 x i32> %1691 to <8 x i16>
  %1696 = bitcast <4 x i32> %1692 to <8 x i16>
  %1697 = bitcast <4 x i32> %1693 to <8 x i16>
  br label %1698

1698:                                             ; preds = %1698, %1671
  %1699 = phi i64 [ %1756, %1698 ], [ 0, %1671 ]
  %1700 = phi i16* [ %1757, %1698 ], [ %1678, %1671 ]
  %1701 = bitcast i16* %1700 to <8 x i16>*
  %1702 = load <8 x i16>, <8 x i16>* %1701, align 1
  %1703 = getelementptr inbounds i16, i16* %1700, i64 128
  %1704 = bitcast i16* %1703 to <8 x i16>*
  %1705 = load <8 x i16>, <8 x i16>* %1704, align 1
  %1706 = getelementptr inbounds i16, i16* %1700, i64 256
  %1707 = bitcast i16* %1706 to <8 x i16>*
  %1708 = load <8 x i16>, <8 x i16>* %1707, align 1
  %1709 = getelementptr inbounds i16, i16* %1700, i64 384
  %1710 = bitcast i16* %1709 to <8 x i16>*
  %1711 = load <8 x i16>, <8 x i16>* %1710, align 1
  %1712 = getelementptr inbounds i16, i16* %1700, i64 512
  %1713 = bitcast i16* %1712 to <8 x i16>*
  %1714 = load <8 x i16>, <8 x i16>* %1713, align 1
  %1715 = getelementptr inbounds i16, i16* %1700, i64 640
  %1716 = bitcast i16* %1715 to <8 x i16>*
  %1717 = load <8 x i16>, <8 x i16>* %1716, align 1
  %1718 = getelementptr inbounds i16, i16* %1700, i64 768
  %1719 = bitcast i16* %1718 to <8 x i16>*
  %1720 = load <8 x i16>, <8 x i16>* %1719, align 1
  %1721 = getelementptr inbounds i16, i16* %1700, i64 896
  %1722 = bitcast i16* %1721 to <8 x i16>*
  %1723 = load <8 x i16>, <8 x i16>* %1722, align 1
  %1724 = shufflevector <8 x i16> %1702, <8 x i16> %1705, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1725 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1724, <8 x i16> %1694) #7
  %1726 = shufflevector <8 x i16> %1702, <8 x i16> %1705, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1727 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1726, <8 x i16> %1694) #7
  %1728 = shufflevector <8 x i16> %1708, <8 x i16> %1711, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1729 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1728, <8 x i16> %1695) #7
  %1730 = shufflevector <8 x i16> %1708, <8 x i16> %1711, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1731 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1730, <8 x i16> %1695) #7
  %1732 = shufflevector <8 x i16> %1714, <8 x i16> %1717, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1733 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1732, <8 x i16> %1696) #7
  %1734 = shufflevector <8 x i16> %1714, <8 x i16> %1717, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1735 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1734, <8 x i16> %1696) #7
  %1736 = shufflevector <8 x i16> %1720, <8 x i16> %1723, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1737 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1736, <8 x i16> %1697) #7
  %1738 = shufflevector <8 x i16> %1720, <8 x i16> %1723, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1739 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1738, <8 x i16> %1697) #7
  %1740 = add <4 x i32> %1725, <i32 512, i32 512, i32 512, i32 512>
  %1741 = add <4 x i32> %1740, %1729
  %1742 = add <4 x i32> %1741, %1733
  %1743 = add <4 x i32> %1742, %1737
  %1744 = ashr <4 x i32> %1743, <i32 10, i32 10, i32 10, i32 10>
  %1745 = add <4 x i32> %1727, <i32 512, i32 512, i32 512, i32 512>
  %1746 = add <4 x i32> %1745, %1731
  %1747 = add <4 x i32> %1746, %1735
  %1748 = add <4 x i32> %1747, %1739
  %1749 = ashr <4 x i32> %1748, <i32 10, i32 10, i32 10, i32 10>
  %1750 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1744, <4 x i32> %1749) #7
  %1751 = getelementptr inbounds i8, i8* %1674, i64 %1699
  %1752 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1750, <8 x i16> undef) #7
  %1753 = bitcast <16 x i8> %1752 to <2 x i64>
  %1754 = extractelement <2 x i64> %1753, i32 0
  %1755 = bitcast i8* %1751 to i64*
  store i64 %1754, i64* %1755, align 1
  %1756 = add nuw nsw i64 %1699, 8
  %1757 = getelementptr inbounds i16, i16* %1700, i64 8
  %1758 = icmp slt i64 %1756, %1670
  br i1 %1758, label %1698, label %1759

1759:                                             ; preds = %1698
  %1760 = add nsw i32 %1672, %7
  %1761 = getelementptr inbounds i8, i8* %1674, i64 %11
  %1762 = add nsw i32 %1673, -1
  %1763 = icmp eq i32 %1762, 0
  br i1 %1763, label %2295, label %1671

1764:                                             ; preds = %920
  switch i32 %8, label %1935 [
    i32 2, label %1765
    i32 4, label %1851
  ]

1765:                                             ; preds = %1764
  %1766 = and i32 %5, 1023
  br label %1767

1767:                                             ; preds = %1767, %1765
  %1768 = phi i32 [ %9, %1765 ], [ %1849, %1767 ]
  %1769 = phi i32 [ %1766, %1765 ], [ %1819, %1767 ]
  %1770 = phi i8* [ %10, %1765 ], [ %1848, %1767 ]
  %1771 = phi i16* [ %51, %1765 ], [ %1823, %1767 ]
  %1772 = bitcast i16* %1771 to i64*
  %1773 = load i64, i64* %1772, align 1
  %1774 = insertelement <2 x i64> undef, i64 %1773, i32 0
  %1775 = getelementptr inbounds i16, i16* %1771, i64 128
  %1776 = bitcast i16* %1775 to i64*
  %1777 = load i64, i64* %1776, align 1
  %1778 = insertelement <2 x i64> undef, i64 %1777, i32 0
  %1779 = lshr i32 %1769, 6
  %1780 = and i32 %1779, 15
  %1781 = zext i32 %1780 to i64
  %1782 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 3, i64 %1781, i64 3
  %1783 = bitcast i8* %1782 to i32*
  %1784 = load i32, i32* %1783, align 1
  %1785 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1784, i32 0
  %1786 = bitcast <4 x i32> %1785 to <16 x i8>
  %1787 = shufflevector <16 x i8> %1786, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1788 = sext <8 x i8> %1787 to <8 x i16>
  %1789 = bitcast <8 x i16> %1788 to <4 x i32>
  %1790 = add nsw i32 %1769, %7
  %1791 = ashr i32 %1790, 10
  %1792 = sext i32 %1791 to i64
  %1793 = shl nsw i64 %1792, 7
  %1794 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1793
  %1795 = bitcast <2 x i64> %1774 to <4 x float>
  %1796 = bitcast i16* %1794 to <2 x float>*
  %1797 = load <2 x float>, <2 x float>* %1796, align 16
  %1798 = shufflevector <2 x float> %1797, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1799 = shufflevector <4 x float> %1795, <4 x float> %1798, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1800 = bitcast <2 x i64> %1778 to <4 x float>
  %1801 = getelementptr inbounds i16, i16* %1794, i64 128
  %1802 = bitcast i16* %1801 to <2 x float>*
  %1803 = load <2 x float>, <2 x float>* %1802, align 16
  %1804 = shufflevector <2 x float> %1803, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1805 = shufflevector <4 x float> %1800, <4 x float> %1804, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1806 = shufflevector <4 x i32> %1789, <4 x i32> undef, <4 x i32> zeroinitializer
  %1807 = lshr i32 %1790, 6
  %1808 = and i32 %1807, 15
  %1809 = zext i32 %1808 to i64
  %1810 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 3, i64 %1809, i64 3
  %1811 = bitcast i8* %1810 to i32*
  %1812 = load i32, i32* %1811, align 1
  %1813 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1812, i32 0
  %1814 = bitcast <4 x i32> %1813 to <16 x i8>
  %1815 = shufflevector <16 x i8> %1814, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1816 = sext <8 x i8> %1815 to <8 x i16>
  %1817 = bitcast <8 x i16> %1816 to <4 x i32>
  %1818 = shufflevector <4 x i32> %1817, <4 x i32> undef, <4 x i32> zeroinitializer
  %1819 = add nsw i32 %1790, %7
  %1820 = ashr i32 %1819, 10
  %1821 = sext i32 %1820 to i64
  %1822 = shl nsw i64 %1821, 7
  %1823 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1822
  %1824 = bitcast <4 x float> %1799 to <8 x i16>
  %1825 = bitcast <4 x float> %1805 to <8 x i16>
  %1826 = shufflevector <8 x i16> %1824, <8 x i16> %1825, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1827 = bitcast <4 x i32> %1806 to <8 x i16>
  %1828 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1826, <8 x i16> %1827) #7
  %1829 = shufflevector <8 x i16> %1824, <8 x i16> %1825, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1830 = bitcast <4 x i32> %1818 to <8 x i16>
  %1831 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1829, <8 x i16> %1830) #7
  %1832 = add <4 x i32> %1828, <i32 512, i32 512, i32 512, i32 512>
  %1833 = ashr <4 x i32> %1832, <i32 10, i32 10, i32 10, i32 10>
  %1834 = add <4 x i32> %1831, <i32 512, i32 512, i32 512, i32 512>
  %1835 = ashr <4 x i32> %1834, <i32 10, i32 10, i32 10, i32 10>
  %1836 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1833, <4 x i32> %1835) #7
  %1837 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1836, <8 x i16> %1836) #7
  %1838 = bitcast <16 x i8> %1837 to <4 x i32>
  %1839 = extractelement <4 x i32> %1838, i32 0
  %1840 = bitcast i8* %1770 to i16*
  %1841 = trunc i32 %1839 to i16
  store i16 %1841, i16* %1840, align 1
  %1842 = getelementptr inbounds i8, i8* %1770, i64 %11
  %1843 = shufflevector <16 x i8> %1837, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1844 = bitcast <16 x i8> %1843 to <4 x i32>
  %1845 = extractelement <4 x i32> %1844, i32 0
  %1846 = bitcast i8* %1842 to i16*
  %1847 = trunc i32 %1845 to i16
  store i16 %1847, i16* %1846, align 1
  %1848 = getelementptr inbounds i8, i8* %1842, i64 %11
  %1849 = add nsw i32 %1768, -2
  %1850 = icmp eq i32 %1849, 0
  br i1 %1850, label %2295, label %1767

1851:                                             ; preds = %1764
  %1852 = and i32 %5, 1023
  br label %1853

1853:                                             ; preds = %1853, %1851
  %1854 = phi i32 [ %9, %1851 ], [ %1933, %1853 ]
  %1855 = phi i32 [ %1852, %1851 ], [ %1905, %1853 ]
  %1856 = phi i8* [ %10, %1851 ], [ %1932, %1853 ]
  %1857 = phi i16* [ %51, %1851 ], [ %1909, %1853 ]
  %1858 = bitcast i16* %1857 to i64*
  %1859 = load i64, i64* %1858, align 1
  %1860 = insertelement <2 x i64> undef, i64 %1859, i32 0
  %1861 = getelementptr inbounds i16, i16* %1857, i64 128
  %1862 = bitcast i16* %1861 to i64*
  %1863 = load i64, i64* %1862, align 1
  %1864 = insertelement <2 x i64> undef, i64 %1863, i32 0
  %1865 = lshr i32 %1855, 6
  %1866 = and i32 %1865, 15
  %1867 = zext i32 %1866 to i64
  %1868 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 3, i64 %1867, i64 3
  %1869 = bitcast i8* %1868 to i32*
  %1870 = load i32, i32* %1869, align 1
  %1871 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1870, i32 0
  %1872 = bitcast <4 x i32> %1871 to <16 x i8>
  %1873 = shufflevector <16 x i8> %1872, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1874 = sext <8 x i8> %1873 to <8 x i16>
  %1875 = bitcast <8 x i16> %1874 to <4 x i32>
  %1876 = add nsw i32 %1855, %7
  %1877 = ashr i32 %1876, 10
  %1878 = sext i32 %1877 to i64
  %1879 = shl nsw i64 %1878, 7
  %1880 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1879
  %1881 = bitcast <2 x i64> %1860 to <4 x float>
  %1882 = bitcast i16* %1880 to <2 x float>*
  %1883 = load <2 x float>, <2 x float>* %1882, align 16
  %1884 = shufflevector <2 x float> %1883, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1885 = shufflevector <4 x float> %1881, <4 x float> %1884, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1886 = bitcast <2 x i64> %1864 to <4 x float>
  %1887 = getelementptr inbounds i16, i16* %1880, i64 128
  %1888 = bitcast i16* %1887 to <2 x float>*
  %1889 = load <2 x float>, <2 x float>* %1888, align 16
  %1890 = shufflevector <2 x float> %1889, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1891 = shufflevector <4 x float> %1886, <4 x float> %1890, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1892 = shufflevector <4 x i32> %1875, <4 x i32> undef, <4 x i32> zeroinitializer
  %1893 = lshr i32 %1876, 6
  %1894 = and i32 %1893, 15
  %1895 = zext i32 %1894 to i64
  %1896 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 3, i64 %1895, i64 3
  %1897 = bitcast i8* %1896 to i32*
  %1898 = load i32, i32* %1897, align 1
  %1899 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1898, i32 0
  %1900 = bitcast <4 x i32> %1899 to <16 x i8>
  %1901 = shufflevector <16 x i8> %1900, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1902 = sext <8 x i8> %1901 to <8 x i16>
  %1903 = bitcast <8 x i16> %1902 to <4 x i32>
  %1904 = shufflevector <4 x i32> %1903, <4 x i32> undef, <4 x i32> zeroinitializer
  %1905 = add nsw i32 %1876, %7
  %1906 = ashr i32 %1905, 10
  %1907 = sext i32 %1906 to i64
  %1908 = shl nsw i64 %1907, 7
  %1909 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1908
  %1910 = bitcast <4 x float> %1885 to <8 x i16>
  %1911 = bitcast <4 x float> %1891 to <8 x i16>
  %1912 = shufflevector <8 x i16> %1910, <8 x i16> %1911, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1913 = bitcast <4 x i32> %1892 to <8 x i16>
  %1914 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1912, <8 x i16> %1913) #7
  %1915 = shufflevector <8 x i16> %1910, <8 x i16> %1911, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1916 = bitcast <4 x i32> %1904 to <8 x i16>
  %1917 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1915, <8 x i16> %1916) #7
  %1918 = add <4 x i32> %1914, <i32 512, i32 512, i32 512, i32 512>
  %1919 = ashr <4 x i32> %1918, <i32 10, i32 10, i32 10, i32 10>
  %1920 = add <4 x i32> %1917, <i32 512, i32 512, i32 512, i32 512>
  %1921 = ashr <4 x i32> %1920, <i32 10, i32 10, i32 10, i32 10>
  %1922 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1919, <4 x i32> %1921) #7
  %1923 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1922, <8 x i16> %1922) #7
  %1924 = bitcast <16 x i8> %1923 to <4 x i32>
  %1925 = extractelement <4 x i32> %1924, i32 0
  %1926 = bitcast i8* %1856 to i32*
  store i32 %1925, i32* %1926, align 1
  %1927 = getelementptr inbounds i8, i8* %1856, i64 %11
  %1928 = shufflevector <16 x i8> %1923, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1929 = bitcast <16 x i8> %1928 to <4 x i32>
  %1930 = extractelement <4 x i32> %1929, i32 0
  %1931 = bitcast i8* %1927 to i32*
  store i32 %1930, i32* %1931, align 1
  %1932 = getelementptr inbounds i8, i8* %1927, i64 %11
  %1933 = add nsw i32 %1854, -2
  %1934 = icmp eq i32 %1933, 0
  br i1 %1934, label %2295, label %1853

1935:                                             ; preds = %1764
  %1936 = and i32 %5, 1023
  %1937 = sext i32 %8 to i64
  br label %1938

1938:                                             ; preds = %1984, %1935
  %1939 = phi i32 [ %1936, %1935 ], [ %1985, %1984 ]
  %1940 = phi i32 [ %9, %1935 ], [ %1987, %1984 ]
  %1941 = phi i8* [ %10, %1935 ], [ %1986, %1984 ]
  %1942 = ashr i32 %1939, 10
  %1943 = sext i32 %1942 to i64
  %1944 = shl nsw i64 %1943, 7
  %1945 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1944
  %1946 = lshr i32 %1939, 6
  %1947 = and i32 %1946, 15
  %1948 = zext i32 %1947 to i64
  %1949 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 3, i64 %1948, i64 3
  %1950 = bitcast i8* %1949 to i32*
  %1951 = load i32, i32* %1950, align 1
  %1952 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1951, i32 0
  %1953 = bitcast <4 x i32> %1952 to <16 x i8>
  %1954 = shufflevector <16 x i8> %1953, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1955 = sext <8 x i8> %1954 to <8 x i16>
  %1956 = bitcast <8 x i16> %1955 to <4 x i32>
  %1957 = shufflevector <4 x i32> %1956, <4 x i32> undef, <4 x i32> zeroinitializer
  %1958 = bitcast <4 x i32> %1957 to <8 x i16>
  br label %1959

1959:                                             ; preds = %1959, %1938
  %1960 = phi i64 [ %1981, %1959 ], [ 0, %1938 ]
  %1961 = phi i16* [ %1982, %1959 ], [ %1945, %1938 ]
  %1962 = bitcast i16* %1961 to <8 x i16>*
  %1963 = load <8 x i16>, <8 x i16>* %1962, align 1
  %1964 = getelementptr inbounds i16, i16* %1961, i64 128
  %1965 = bitcast i16* %1964 to <8 x i16>*
  %1966 = load <8 x i16>, <8 x i16>* %1965, align 1
  %1967 = shufflevector <8 x i16> %1963, <8 x i16> %1966, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1968 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1967, <8 x i16> %1958) #7
  %1969 = shufflevector <8 x i16> %1963, <8 x i16> %1966, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1970 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1969, <8 x i16> %1958) #7
  %1971 = add <4 x i32> %1968, <i32 512, i32 512, i32 512, i32 512>
  %1972 = ashr <4 x i32> %1971, <i32 10, i32 10, i32 10, i32 10>
  %1973 = add <4 x i32> %1970, <i32 512, i32 512, i32 512, i32 512>
  %1974 = ashr <4 x i32> %1973, <i32 10, i32 10, i32 10, i32 10>
  %1975 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1972, <4 x i32> %1974) #7
  %1976 = getelementptr inbounds i8, i8* %1941, i64 %1960
  %1977 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1975, <8 x i16> undef) #7
  %1978 = bitcast <16 x i8> %1977 to <2 x i64>
  %1979 = extractelement <2 x i64> %1978, i32 0
  %1980 = bitcast i8* %1976 to i64*
  store i64 %1979, i64* %1980, align 1
  %1981 = add nuw nsw i64 %1960, 8
  %1982 = getelementptr inbounds i16, i16* %1961, i64 8
  %1983 = icmp slt i64 %1981, %1937
  br i1 %1983, label %1959, label %1984

1984:                                             ; preds = %1959
  %1985 = add nsw i32 %1939, %7
  %1986 = getelementptr inbounds i8, i8* %1941, i64 %11
  %1987 = add nsw i32 %1940, -1
  %1988 = icmp eq i32 %1987, 0
  br i1 %1988, label %2295, label %1938

1989:                                             ; preds = %920
  switch i32 %8, label %2226 [
    i32 2, label %1990
    i32 4, label %2109
  ]

1990:                                             ; preds = %1989
  %1991 = and i32 %5, 1023
  %1992 = sext i32 %44 to i64
  br label %1993

1993:                                             ; preds = %1993, %1990
  %1994 = phi i32 [ %9, %1990 ], [ %2107, %1993 ]
  %1995 = phi i32 [ %1991, %1990 ], [ %2067, %1993 ]
  %1996 = phi i8* [ %10, %1990 ], [ %2106, %1993 ]
  %1997 = phi i16* [ %51, %1990 ], [ %2071, %1993 ]
  %1998 = bitcast i16* %1997 to i64*
  %1999 = load i64, i64* %1998, align 1
  %2000 = insertelement <2 x i64> undef, i64 %1999, i32 0
  %2001 = getelementptr inbounds i16, i16* %1997, i64 128
  %2002 = bitcast i16* %2001 to i64*
  %2003 = load i64, i64* %2002, align 1
  %2004 = insertelement <2 x i64> undef, i64 %2003, i32 0
  %2005 = getelementptr inbounds i16, i16* %1997, i64 256
  %2006 = bitcast i16* %2005 to i64*
  %2007 = load i64, i64* %2006, align 1
  %2008 = insertelement <2 x i64> undef, i64 %2007, i32 0
  %2009 = getelementptr inbounds i16, i16* %1997, i64 384
  %2010 = bitcast i16* %2009 to i64*
  %2011 = load i64, i64* %2010, align 1
  %2012 = insertelement <2 x i64> undef, i64 %2011, i32 0
  %2013 = lshr i32 %1995, 6
  %2014 = and i32 %2013, 15
  %2015 = zext i32 %2014 to i64
  %2016 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %1992, i64 %2015, i64 2
  %2017 = bitcast i8* %2016 to i32*
  %2018 = load i32, i32* %2017, align 2
  %2019 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %2018, i32 0
  %2020 = bitcast <4 x i32> %2019 to <16 x i8>
  %2021 = shufflevector <16 x i8> %2020, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2022 = sext <8 x i8> %2021 to <8 x i16>
  %2023 = bitcast <8 x i16> %2022 to <4 x i32>
  %2024 = shufflevector <4 x i32> %2023, <4 x i32> undef, <4 x i32> zeroinitializer
  %2025 = add nsw i32 %1995, %7
  %2026 = ashr i32 %2025, 10
  %2027 = sext i32 %2026 to i64
  %2028 = shl nsw i64 %2027, 7
  %2029 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %2028
  %2030 = bitcast <2 x i64> %2000 to <4 x float>
  %2031 = bitcast i16* %2029 to <2 x float>*
  %2032 = load <2 x float>, <2 x float>* %2031, align 16
  %2033 = shufflevector <2 x float> %2032, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2034 = shufflevector <4 x float> %2030, <4 x float> %2033, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2035 = bitcast <2 x i64> %2004 to <4 x float>
  %2036 = getelementptr inbounds i16, i16* %2029, i64 128
  %2037 = bitcast i16* %2036 to <2 x float>*
  %2038 = load <2 x float>, <2 x float>* %2037, align 16
  %2039 = shufflevector <2 x float> %2038, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2040 = shufflevector <4 x float> %2035, <4 x float> %2039, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2041 = bitcast <2 x i64> %2008 to <4 x float>
  %2042 = getelementptr inbounds i16, i16* %2029, i64 256
  %2043 = bitcast i16* %2042 to <2 x float>*
  %2044 = load <2 x float>, <2 x float>* %2043, align 16
  %2045 = shufflevector <2 x float> %2044, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2046 = shufflevector <4 x float> %2041, <4 x float> %2045, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2047 = bitcast <2 x i64> %2012 to <4 x float>
  %2048 = getelementptr inbounds i16, i16* %2029, i64 384
  %2049 = bitcast i16* %2048 to <2 x float>*
  %2050 = load <2 x float>, <2 x float>* %2049, align 16
  %2051 = shufflevector <2 x float> %2050, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2052 = shufflevector <4 x float> %2047, <4 x float> %2051, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2053 = shufflevector <4 x i32> %2023, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %2054 = lshr i32 %2025, 6
  %2055 = and i32 %2054, 15
  %2056 = zext i32 %2055 to i64
  %2057 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %1992, i64 %2056, i64 2
  %2058 = bitcast i8* %2057 to i32*
  %2059 = load i32, i32* %2058, align 2
  %2060 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %2059, i32 0
  %2061 = bitcast <4 x i32> %2060 to <16 x i8>
  %2062 = shufflevector <16 x i8> %2061, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2063 = sext <8 x i8> %2062 to <8 x i16>
  %2064 = bitcast <8 x i16> %2063 to <4 x i32>
  %2065 = shufflevector <4 x i32> %2064, <4 x i32> undef, <4 x i32> zeroinitializer
  %2066 = shufflevector <4 x i32> %2064, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %2067 = add nsw i32 %2025, %7
  %2068 = ashr i32 %2067, 10
  %2069 = sext i32 %2068 to i64
  %2070 = shl nsw i64 %2069, 7
  %2071 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %2070
  %2072 = bitcast <4 x float> %2034 to <8 x i16>
  %2073 = bitcast <4 x float> %2040 to <8 x i16>
  %2074 = shufflevector <8 x i16> %2072, <8 x i16> %2073, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2075 = bitcast <4 x i32> %2024 to <8 x i16>
  %2076 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2074, <8 x i16> %2075) #7
  %2077 = shufflevector <8 x i16> %2072, <8 x i16> %2073, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2078 = bitcast <4 x i32> %2065 to <8 x i16>
  %2079 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2077, <8 x i16> %2078) #7
  %2080 = bitcast <4 x float> %2046 to <8 x i16>
  %2081 = bitcast <4 x float> %2052 to <8 x i16>
  %2082 = shufflevector <8 x i16> %2080, <8 x i16> %2081, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2083 = bitcast <4 x i32> %2053 to <8 x i16>
  %2084 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2082, <8 x i16> %2083) #7
  %2085 = shufflevector <8 x i16> %2080, <8 x i16> %2081, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2086 = bitcast <4 x i32> %2066 to <8 x i16>
  %2087 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2085, <8 x i16> %2086) #7
  %2088 = add <4 x i32> %2076, <i32 512, i32 512, i32 512, i32 512>
  %2089 = add <4 x i32> %2088, %2084
  %2090 = ashr <4 x i32> %2089, <i32 10, i32 10, i32 10, i32 10>
  %2091 = add <4 x i32> %2079, <i32 512, i32 512, i32 512, i32 512>
  %2092 = add <4 x i32> %2091, %2087
  %2093 = ashr <4 x i32> %2092, <i32 10, i32 10, i32 10, i32 10>
  %2094 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %2090, <4 x i32> %2093) #7
  %2095 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2094, <8 x i16> %2094) #7
  %2096 = bitcast <16 x i8> %2095 to <4 x i32>
  %2097 = extractelement <4 x i32> %2096, i32 0
  %2098 = bitcast i8* %1996 to i16*
  %2099 = trunc i32 %2097 to i16
  store i16 %2099, i16* %2098, align 1
  %2100 = getelementptr inbounds i8, i8* %1996, i64 %11
  %2101 = shufflevector <16 x i8> %2095, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2102 = bitcast <16 x i8> %2101 to <4 x i32>
  %2103 = extractelement <4 x i32> %2102, i32 0
  %2104 = bitcast i8* %2100 to i16*
  %2105 = trunc i32 %2103 to i16
  store i16 %2105, i16* %2104, align 1
  %2106 = getelementptr inbounds i8, i8* %2100, i64 %11
  %2107 = add nsw i32 %1994, -2
  %2108 = icmp eq i32 %2107, 0
  br i1 %2108, label %2295, label %1993

2109:                                             ; preds = %1989
  %2110 = and i32 %5, 1023
  %2111 = sext i32 %44 to i64
  br label %2112

2112:                                             ; preds = %2112, %2109
  %2113 = phi i32 [ %9, %2109 ], [ %2224, %2112 ]
  %2114 = phi i32 [ %2110, %2109 ], [ %2186, %2112 ]
  %2115 = phi i8* [ %10, %2109 ], [ %2223, %2112 ]
  %2116 = phi i16* [ %51, %2109 ], [ %2190, %2112 ]
  %2117 = bitcast i16* %2116 to i64*
  %2118 = load i64, i64* %2117, align 1
  %2119 = insertelement <2 x i64> undef, i64 %2118, i32 0
  %2120 = getelementptr inbounds i16, i16* %2116, i64 128
  %2121 = bitcast i16* %2120 to i64*
  %2122 = load i64, i64* %2121, align 1
  %2123 = insertelement <2 x i64> undef, i64 %2122, i32 0
  %2124 = getelementptr inbounds i16, i16* %2116, i64 256
  %2125 = bitcast i16* %2124 to i64*
  %2126 = load i64, i64* %2125, align 1
  %2127 = insertelement <2 x i64> undef, i64 %2126, i32 0
  %2128 = getelementptr inbounds i16, i16* %2116, i64 384
  %2129 = bitcast i16* %2128 to i64*
  %2130 = load i64, i64* %2129, align 1
  %2131 = insertelement <2 x i64> undef, i64 %2130, i32 0
  %2132 = lshr i32 %2114, 6
  %2133 = and i32 %2132, 15
  %2134 = zext i32 %2133 to i64
  %2135 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %2111, i64 %2134, i64 2
  %2136 = bitcast i8* %2135 to i32*
  %2137 = load i32, i32* %2136, align 2
  %2138 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %2137, i32 0
  %2139 = bitcast <4 x i32> %2138 to <16 x i8>
  %2140 = shufflevector <16 x i8> %2139, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2141 = sext <8 x i8> %2140 to <8 x i16>
  %2142 = bitcast <8 x i16> %2141 to <4 x i32>
  %2143 = shufflevector <4 x i32> %2142, <4 x i32> undef, <4 x i32> zeroinitializer
  %2144 = add nsw i32 %2114, %7
  %2145 = ashr i32 %2144, 10
  %2146 = sext i32 %2145 to i64
  %2147 = shl nsw i64 %2146, 7
  %2148 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %2147
  %2149 = bitcast <2 x i64> %2119 to <4 x float>
  %2150 = bitcast i16* %2148 to <2 x float>*
  %2151 = load <2 x float>, <2 x float>* %2150, align 16
  %2152 = shufflevector <2 x float> %2151, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2153 = shufflevector <4 x float> %2149, <4 x float> %2152, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2154 = bitcast <2 x i64> %2123 to <4 x float>
  %2155 = getelementptr inbounds i16, i16* %2148, i64 128
  %2156 = bitcast i16* %2155 to <2 x float>*
  %2157 = load <2 x float>, <2 x float>* %2156, align 16
  %2158 = shufflevector <2 x float> %2157, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2159 = shufflevector <4 x float> %2154, <4 x float> %2158, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2160 = bitcast <2 x i64> %2127 to <4 x float>
  %2161 = getelementptr inbounds i16, i16* %2148, i64 256
  %2162 = bitcast i16* %2161 to <2 x float>*
  %2163 = load <2 x float>, <2 x float>* %2162, align 16
  %2164 = shufflevector <2 x float> %2163, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2165 = shufflevector <4 x float> %2160, <4 x float> %2164, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2166 = bitcast <2 x i64> %2131 to <4 x float>
  %2167 = getelementptr inbounds i16, i16* %2148, i64 384
  %2168 = bitcast i16* %2167 to <2 x float>*
  %2169 = load <2 x float>, <2 x float>* %2168, align 16
  %2170 = shufflevector <2 x float> %2169, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2171 = shufflevector <4 x float> %2166, <4 x float> %2170, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2172 = shufflevector <4 x i32> %2142, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %2173 = lshr i32 %2144, 6
  %2174 = and i32 %2173, 15
  %2175 = zext i32 %2174 to i64
  %2176 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %2111, i64 %2175, i64 2
  %2177 = bitcast i8* %2176 to i32*
  %2178 = load i32, i32* %2177, align 2
  %2179 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %2178, i32 0
  %2180 = bitcast <4 x i32> %2179 to <16 x i8>
  %2181 = shufflevector <16 x i8> %2180, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2182 = sext <8 x i8> %2181 to <8 x i16>
  %2183 = bitcast <8 x i16> %2182 to <4 x i32>
  %2184 = shufflevector <4 x i32> %2183, <4 x i32> undef, <4 x i32> zeroinitializer
  %2185 = shufflevector <4 x i32> %2183, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %2186 = add nsw i32 %2144, %7
  %2187 = ashr i32 %2186, 10
  %2188 = sext i32 %2187 to i64
  %2189 = shl nsw i64 %2188, 7
  %2190 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %2189
  %2191 = bitcast <4 x float> %2153 to <8 x i16>
  %2192 = bitcast <4 x float> %2159 to <8 x i16>
  %2193 = shufflevector <8 x i16> %2191, <8 x i16> %2192, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2194 = bitcast <4 x i32> %2143 to <8 x i16>
  %2195 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2193, <8 x i16> %2194) #7
  %2196 = shufflevector <8 x i16> %2191, <8 x i16> %2192, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2197 = bitcast <4 x i32> %2184 to <8 x i16>
  %2198 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2196, <8 x i16> %2197) #7
  %2199 = bitcast <4 x float> %2165 to <8 x i16>
  %2200 = bitcast <4 x float> %2171 to <8 x i16>
  %2201 = shufflevector <8 x i16> %2199, <8 x i16> %2200, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2202 = bitcast <4 x i32> %2172 to <8 x i16>
  %2203 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2201, <8 x i16> %2202) #7
  %2204 = shufflevector <8 x i16> %2199, <8 x i16> %2200, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2205 = bitcast <4 x i32> %2185 to <8 x i16>
  %2206 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2204, <8 x i16> %2205) #7
  %2207 = add <4 x i32> %2195, <i32 512, i32 512, i32 512, i32 512>
  %2208 = add <4 x i32> %2207, %2203
  %2209 = ashr <4 x i32> %2208, <i32 10, i32 10, i32 10, i32 10>
  %2210 = add <4 x i32> %2198, <i32 512, i32 512, i32 512, i32 512>
  %2211 = add <4 x i32> %2210, %2206
  %2212 = ashr <4 x i32> %2211, <i32 10, i32 10, i32 10, i32 10>
  %2213 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %2209, <4 x i32> %2212) #7
  %2214 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2213, <8 x i16> %2213) #7
  %2215 = bitcast <16 x i8> %2214 to <4 x i32>
  %2216 = extractelement <4 x i32> %2215, i32 0
  %2217 = bitcast i8* %2115 to i32*
  store i32 %2216, i32* %2217, align 1
  %2218 = getelementptr inbounds i8, i8* %2115, i64 %11
  %2219 = shufflevector <16 x i8> %2214, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2220 = bitcast <16 x i8> %2219 to <4 x i32>
  %2221 = extractelement <4 x i32> %2220, i32 0
  %2222 = bitcast i8* %2218 to i32*
  store i32 %2221, i32* %2222, align 1
  %2223 = getelementptr inbounds i8, i8* %2218, i64 %11
  %2224 = add nsw i32 %2113, -2
  %2225 = icmp eq i32 %2224, 0
  br i1 %2225, label %2295, label %2112

2226:                                             ; preds = %1989
  %2227 = and i32 %5, 1023
  %2228 = sext i32 %44 to i64
  %2229 = sext i32 %8 to i64
  br label %2230

2230:                                             ; preds = %2290, %2226
  %2231 = phi i32 [ %2227, %2226 ], [ %2291, %2290 ]
  %2232 = phi i32 [ %9, %2226 ], [ %2293, %2290 ]
  %2233 = phi i8* [ %10, %2226 ], [ %2292, %2290 ]
  %2234 = ashr i32 %2231, 10
  %2235 = sext i32 %2234 to i64
  %2236 = shl nsw i64 %2235, 7
  %2237 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %2236
  %2238 = lshr i32 %2231, 6
  %2239 = and i32 %2238, 15
  %2240 = zext i32 %2239 to i64
  %2241 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %2228, i64 %2240, i64 2
  %2242 = bitcast i8* %2241 to i32*
  %2243 = load i32, i32* %2242, align 2
  %2244 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %2243, i32 0
  %2245 = bitcast <4 x i32> %2244 to <16 x i8>
  %2246 = shufflevector <16 x i8> %2245, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2247 = sext <8 x i8> %2246 to <8 x i16>
  %2248 = bitcast <8 x i16> %2247 to <4 x i32>
  %2249 = shufflevector <4 x i32> %2248, <4 x i32> undef, <4 x i32> zeroinitializer
  %2250 = shufflevector <4 x i32> %2248, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %2251 = bitcast <4 x i32> %2249 to <8 x i16>
  %2252 = bitcast <4 x i32> %2250 to <8 x i16>
  br label %2253

2253:                                             ; preds = %2253, %2230
  %2254 = phi i64 [ %2287, %2253 ], [ 0, %2230 ]
  %2255 = phi i16* [ %2288, %2253 ], [ %2237, %2230 ]
  %2256 = bitcast i16* %2255 to <8 x i16>*
  %2257 = load <8 x i16>, <8 x i16>* %2256, align 1
  %2258 = getelementptr inbounds i16, i16* %2255, i64 128
  %2259 = bitcast i16* %2258 to <8 x i16>*
  %2260 = load <8 x i16>, <8 x i16>* %2259, align 1
  %2261 = getelementptr inbounds i16, i16* %2255, i64 256
  %2262 = bitcast i16* %2261 to <8 x i16>*
  %2263 = load <8 x i16>, <8 x i16>* %2262, align 1
  %2264 = getelementptr inbounds i16, i16* %2255, i64 384
  %2265 = bitcast i16* %2264 to <8 x i16>*
  %2266 = load <8 x i16>, <8 x i16>* %2265, align 1
  %2267 = shufflevector <8 x i16> %2257, <8 x i16> %2260, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2268 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2267, <8 x i16> %2251) #7
  %2269 = shufflevector <8 x i16> %2257, <8 x i16> %2260, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2270 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2269, <8 x i16> %2251) #7
  %2271 = shufflevector <8 x i16> %2263, <8 x i16> %2266, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2272 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2271, <8 x i16> %2252) #7
  %2273 = shufflevector <8 x i16> %2263, <8 x i16> %2266, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2274 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %2273, <8 x i16> %2252) #7
  %2275 = add <4 x i32> %2268, <i32 512, i32 512, i32 512, i32 512>
  %2276 = add <4 x i32> %2275, %2272
  %2277 = ashr <4 x i32> %2276, <i32 10, i32 10, i32 10, i32 10>
  %2278 = add <4 x i32> %2270, <i32 512, i32 512, i32 512, i32 512>
  %2279 = add <4 x i32> %2278, %2274
  %2280 = ashr <4 x i32> %2279, <i32 10, i32 10, i32 10, i32 10>
  %2281 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %2277, <4 x i32> %2280) #7
  %2282 = getelementptr inbounds i8, i8* %2233, i64 %2254
  %2283 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2281, <8 x i16> undef) #7
  %2284 = bitcast <16 x i8> %2283 to <2 x i64>
  %2285 = extractelement <2 x i64> %2284, i32 0
  %2286 = bitcast i8* %2282 to i64*
  store i64 %2285, i64* %2286, align 1
  %2287 = add nuw nsw i64 %2254, 8
  %2288 = getelementptr inbounds i16, i16* %2255, i64 8
  %2289 = icmp slt i64 %2287, %2229
  br i1 %2289, label %2253, label %2290

2290:                                             ; preds = %2253
  %2291 = add nsw i32 %2231, %7
  %2292 = getelementptr inbounds i8, i8* %2233, i64 %11
  %2293 = add nsw i32 %2232, -1
  %2294 = icmp eq i32 %2293, 0
  br i1 %2294, label %2295, label %2230

2295:                                             ; preds = %1853, %1767, %1984, %1490, %1308, %1759, %1076, %925, %1300, %2112, %1993, %2290
  call void @llvm.lifetime.end.p0i8(i64 67584, i8* nonnull %43) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_122ConvolveScale2D_SSE4_1ILb1EEEvPKvliiiiiiiiPvl(i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8* nocapture, i64) #4 {
  %13 = alloca [33792 x i16], align 16
  %14 = icmp slt i32 %8, 5
  br i1 %14, label %15, label %20

15:                                               ; preds = %12
  %16 = and i32 %2, -3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = icmp eq i32 %2, 1
  br i1 %19, label %21, label %20

20:                                               ; preds = %18, %12
  br label %21

21:                                               ; preds = %15, %18, %20
  %22 = phi i32 [ %2, %20 ], [ 4, %15 ], [ 5, %18 ]
  %23 = icmp slt i32 %9, 5
  br i1 %23, label %24, label %32

24:                                               ; preds = %21
  %25 = and i32 %3, -3
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  %28 = icmp eq i32 %3, 1
  br i1 %28, label %29, label %32

29:                                               ; preds = %24, %27
  %30 = phi i32 [ 5, %27 ], [ 4, %24 ]
  %31 = bitcast [33792 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67584, i8* nonnull %31) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -86, i64 67584, i1 false)
  br label %35

32:                                               ; preds = %21, %27
  %33 = bitcast [33792 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67584, i8* nonnull %33) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 67584, i1 false)
  %34 = icmp slt i32 %3, 2
  br i1 %34, label %42, label %35

35:                                               ; preds = %29, %32
  %36 = phi i8* [ %31, %29 ], [ %33, %32 ]
  %37 = phi i32 [ %30, %29 ], [ %3, %32 ]
  %38 = icmp eq i32 %37, 3
  %39 = select i1 %38, i32 2, i32 4
  %40 = icmp eq i32 %37, 2
  %41 = select i1 %40, i32 8, i32 %39
  br label %42

42:                                               ; preds = %32, %35
  %43 = phi i8* [ %33, %32 ], [ %36, %35 ]
  %44 = phi i32 [ %3, %32 ], [ %37, %35 ]
  %45 = phi i32 [ 6, %32 ], [ %41, %35 ]
  %46 = add nsw i32 %9, -1
  %47 = mul nsw i32 %46, %7
  %48 = add nsw i32 %47, 1023
  %49 = ashr i32 %48, 10
  %50 = add nsw i32 %45, %49
  %51 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 0
  %52 = sub nuw nsw i32 8, %45
  %53 = sdiv i32 %52, 2
  %54 = sext i32 %53 to i64
  %55 = mul nsw i64 %54, %1
  %56 = getelementptr inbounds i8, i8* %0, i64 %55
  %57 = icmp slt i32 %22, 2
  br i1 %57, label %63, label %58

58:                                               ; preds = %42
  %59 = icmp eq i32 %22, 3
  %60 = select i1 %59, i32 2048, i32 4096
  %61 = icmp eq i32 %22, 2
  %62 = select i1 %61, i32 8192, i32 %60
  br label %63

63:                                               ; preds = %42, %58
  %64 = phi i32 [ 6144, %42 ], [ %62, %58 ]
  %65 = sub nuw nsw i32 16384, %64
  %66 = sdiv i32 %65, 7
  switch i32 %22, label %835 [
    i32 0, label %67
    i32 1, label %194
    i32 2, label %321
    i32 3, label %461
    i32 4, label %750
  ]

67:                                               ; preds = %63
  %68 = icmp slt i32 %66, %6
  %69 = ashr i32 %4, 10
  %70 = shl i32 %6, 3
  %71 = trunc i32 %6 to i16
  %72 = insertelement <8 x i16> undef, i16 %71, i32 0
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <8 x i32> zeroinitializer
  %74 = mul <8 x i16> %73, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %75 = sub nsw i32 1, %69
  %76 = sext i32 %8 to i64
  br i1 %68, label %77, label %138

77:                                               ; preds = %67, %134
  %78 = phi i64 [ %135, %134 ], [ 0, %67 ]
  %79 = phi i32 [ %136, %134 ], [ %4, %67 ]
  %80 = ashr i32 %79, 10
  %81 = add nsw i32 %80, %75
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %56, i64 %82
  %84 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %78
  %85 = trunc i32 %79 to i16
  %86 = and i16 %85, 1023
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = add <8 x i16> %88, %74
  %90 = lshr <8 x i16> %89, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %91 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %90, <8 x i16> %90) #7
  %92 = and <16 x i8> %91, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %93 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 0>, <16 x i8> %92) #7
  %94 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -3, i8 -5, i8 -6, i8 -7, i8 -7, i8 -8, i8 -7, i8 -7, i8 -6, i8 -6, i8 -6, i8 -5, i8 -4, i8 -2, i8 -1>, <16 x i8> %92) #7
  %95 = shufflevector <16 x i8> %93, <16 x i8> %94, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %96 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 61, i8 58, i8 55, i8 51, i8 47, i8 42, i8 38, i8 33, i8 29, i8 24, i8 19, i8 14, i8 9, i8 4>, <16 x i8> %92) #7
  %97 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 9, i8 14, i8 19, i8 24, i8 29, i8 33, i8 38, i8 42, i8 47, i8 51, i8 55, i8 58, i8 61, i8 63>, <16 x i8> %92) #7
  %98 = shufflevector <16 x i8> %96, <16 x i8> %97, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -2, i8 -4, i8 -5, i8 -6, i8 -6, i8 -6, i8 -7, i8 -7, i8 -8, i8 -7, i8 -7, i8 -6, i8 -5, i8 -3>, <16 x i8> %92) #7
  %100 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <16 x i8> %92) #7
  %101 = shufflevector <16 x i8> %99, <16 x i8> %100, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = lshr <8 x i16> %89, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %103 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %102, <8 x i16> %102) #7
  %104 = add <16 x i8> %103, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %105 = shufflevector <16 x i8> %103, <16 x i8> %104, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %106

106:                                              ; preds = %106, %77
  %107 = phi i8* [ %83, %77 ], [ %130, %106 ]
  %108 = phi i16* [ %84, %77 ], [ %131, %106 ]
  %109 = phi i32 [ %50, %77 ], [ %132, %106 ]
  %110 = bitcast i8* %107 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %111, <16 x i8> %105) #7
  %113 = getelementptr inbounds i8, i8* %107, i64 16
  %114 = bitcast i8* %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %115, i32 0
  %117 = bitcast <2 x i64> %116 to <16 x i8>
  %118 = shufflevector <16 x i8> %111, <16 x i8> %117, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %119 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %118, <16 x i8> %105) #7
  %120 = shufflevector <16 x i8> %111, <16 x i8> %117, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %121 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %120, <16 x i8> %105) #7
  %122 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %112, <16 x i8> %95) #7
  %123 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %98) #7
  %124 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %121, <16 x i8> %101) #7
  %125 = add <8 x i16> %122, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %126 = add <8 x i16> %125, %123
  %127 = add <8 x i16> %126, %124
  %128 = ashr <8 x i16> %127, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %129 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 16
  %130 = getelementptr inbounds i8, i8* %107, i64 %1
  %131 = getelementptr inbounds i16, i16* %108, i64 128
  %132 = add nsw i32 %109, -1
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %106

134:                                              ; preds = %106
  %135 = add nuw nsw i64 %78, 8
  %136 = add nsw i32 %79, %70
  %137 = icmp slt i64 %135, %76
  br i1 %137, label %77, label %920

138:                                              ; preds = %67, %190
  %139 = phi i64 [ %191, %190 ], [ 0, %67 ]
  %140 = phi i32 [ %192, %190 ], [ %4, %67 ]
  %141 = ashr i32 %140, 10
  %142 = add nsw i32 %141, %75
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %56, i64 %143
  %145 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %139
  %146 = trunc i32 %140 to i16
  %147 = and i16 %146, 1023
  %148 = insertelement <8 x i16> undef, i16 %147, i32 0
  %149 = shufflevector <8 x i16> %148, <8 x i16> undef, <8 x i32> zeroinitializer
  %150 = add <8 x i16> %149, %74
  %151 = lshr <8 x i16> %150, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %152 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %151, <8 x i16> %151) #7
  %153 = and <16 x i8> %152, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %154 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 0>, <16 x i8> %153) #7
  %155 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -3, i8 -5, i8 -6, i8 -7, i8 -7, i8 -8, i8 -7, i8 -7, i8 -6, i8 -6, i8 -6, i8 -5, i8 -4, i8 -2, i8 -1>, <16 x i8> %153) #7
  %156 = shufflevector <16 x i8> %154, <16 x i8> %155, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 61, i8 58, i8 55, i8 51, i8 47, i8 42, i8 38, i8 33, i8 29, i8 24, i8 19, i8 14, i8 9, i8 4>, <16 x i8> %153) #7
  %158 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 9, i8 14, i8 19, i8 24, i8 29, i8 33, i8 38, i8 42, i8 47, i8 51, i8 55, i8 58, i8 61, i8 63>, <16 x i8> %153) #7
  %159 = shufflevector <16 x i8> %157, <16 x i8> %158, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %160 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -2, i8 -4, i8 -5, i8 -6, i8 -6, i8 -6, i8 -7, i8 -7, i8 -8, i8 -7, i8 -7, i8 -6, i8 -5, i8 -3>, <16 x i8> %153) #7
  %161 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, <16 x i8> %153) #7
  %162 = shufflevector <16 x i8> %160, <16 x i8> %161, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %163 = lshr <8 x i16> %150, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %164 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %163, <8 x i16> %163) #7
  %165 = add <16 x i8> %164, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %166 = shufflevector <16 x i8> %164, <16 x i8> %165, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %167

167:                                              ; preds = %167, %138
  %168 = phi i8* [ %144, %138 ], [ %186, %167 ]
  %169 = phi i16* [ %145, %138 ], [ %187, %167 ]
  %170 = phi i32 [ %50, %138 ], [ %188, %167 ]
  %171 = bitcast i8* %168 to <16 x i8>*
  %172 = load <16 x i8>, <16 x i8>* %171, align 1
  %173 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %172, <16 x i8> %166) #7
  %174 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %175 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %174, <16 x i8> %166) #7
  %176 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %177 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %176, <16 x i8> %166) #7
  %178 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %173, <16 x i8> %156) #7
  %179 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %175, <16 x i8> %159) #7
  %180 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %177, <16 x i8> %162) #7
  %181 = add <8 x i16> %178, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %182 = add <8 x i16> %181, %179
  %183 = add <8 x i16> %182, %180
  %184 = ashr <8 x i16> %183, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %185 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds i8, i8* %168, i64 %1
  %187 = getelementptr inbounds i16, i16* %169, i64 128
  %188 = add nsw i32 %170, -1
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %167

190:                                              ; preds = %167
  %191 = add nuw nsw i64 %139, 8
  %192 = add nsw i32 %140, %70
  %193 = icmp slt i64 %191, %76
  br i1 %193, label %138, label %920

194:                                              ; preds = %63
  %195 = icmp slt i32 %66, %6
  %196 = ashr i32 %4, 10
  %197 = shl i32 %6, 3
  %198 = trunc i32 %6 to i16
  %199 = insertelement <8 x i16> undef, i16 %198, i32 0
  %200 = shufflevector <8 x i16> %199, <8 x i16> undef, <8 x i32> zeroinitializer
  %201 = mul <8 x i16> %200, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %202 = sub nsw i32 1, %196
  %203 = sext i32 %8 to i64
  br i1 %195, label %204, label %265

204:                                              ; preds = %194, %261
  %205 = phi i64 [ %262, %261 ], [ 0, %194 ]
  %206 = phi i32 [ %263, %261 ], [ %4, %194 ]
  %207 = ashr i32 %206, 10
  %208 = add nsw i32 %207, %202
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %56, i64 %209
  %211 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %205
  %212 = trunc i32 %206 to i16
  %213 = and i16 %212, 1023
  %214 = insertelement <8 x i16> undef, i16 %213, i32 0
  %215 = shufflevector <8 x i16> %214, <8 x i16> undef, <8 x i32> zeroinitializer
  %216 = add <8 x i16> %215, %201
  %217 = lshr <8 x i16> %216, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %218 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %217, <8 x i16> %217) #7
  %219 = and <16 x i8> %218, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %220 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %219) #7
  %221 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 14, i8 13, i8 11, i8 10, i8 9, i8 8, i8 8, i8 7, i8 6, i8 5, i8 4, i8 3, i8 2, i8 2, i8 1>, <16 x i8> %219) #7
  %222 = shufflevector <16 x i8> %220, <16 x i8> %221, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %223 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 31, i8 31, i8 31, i8 30, i8 29, i8 28, i8 27, i8 26, i8 24, i8 23, i8 22, i8 21, i8 20, i8 18, i8 17>, <16 x i8> %219) #7
  %224 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 17, i8 18, i8 20, i8 21, i8 22, i8 23, i8 24, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31, i8 31, i8 31>, <16 x i8> %219) #7
  %225 = shufflevector <16 x i8> %223, <16 x i8> %224, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %226 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 8, i8 9, i8 10, i8 11, i8 13, i8 14>, <16 x i8> %219) #7
  %227 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 1>, <16 x i8> %219) #7
  %228 = shufflevector <16 x i8> %226, <16 x i8> %227, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = lshr <8 x i16> %216, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %230 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %229, <8 x i16> %229) #7
  %231 = add <16 x i8> %230, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %232 = shufflevector <16 x i8> %230, <16 x i8> %231, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %233

233:                                              ; preds = %233, %204
  %234 = phi i8* [ %210, %204 ], [ %257, %233 ]
  %235 = phi i16* [ %211, %204 ], [ %258, %233 ]
  %236 = phi i32 [ %50, %204 ], [ %259, %233 ]
  %237 = bitcast i8* %234 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1
  %239 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %238, <16 x i8> %232) #7
  %240 = getelementptr inbounds i8, i8* %234, i64 16
  %241 = bitcast i8* %240 to i64*
  %242 = load i64, i64* %241, align 1
  %243 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %242, i32 0
  %244 = bitcast <2 x i64> %243 to <16 x i8>
  %245 = shufflevector <16 x i8> %238, <16 x i8> %244, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %246 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %245, <16 x i8> %232) #7
  %247 = shufflevector <16 x i8> %238, <16 x i8> %244, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %248 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %247, <16 x i8> %232) #7
  %249 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %239, <16 x i8> %222) #7
  %250 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %246, <16 x i8> %225) #7
  %251 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %248, <16 x i8> %228) #7
  %252 = add <8 x i16> %249, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %253 = add <8 x i16> %252, %250
  %254 = add <8 x i16> %253, %251
  %255 = ashr <8 x i16> %254, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %256 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %256, align 16
  %257 = getelementptr inbounds i8, i8* %234, i64 %1
  %258 = getelementptr inbounds i16, i16* %235, i64 128
  %259 = add nsw i32 %236, -1
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %233

261:                                              ; preds = %233
  %262 = add nuw nsw i64 %205, 8
  %263 = add nsw i32 %206, %197
  %264 = icmp slt i64 %262, %203
  br i1 %264, label %204, label %920

265:                                              ; preds = %194, %317
  %266 = phi i64 [ %318, %317 ], [ 0, %194 ]
  %267 = phi i32 [ %319, %317 ], [ %4, %194 ]
  %268 = ashr i32 %267, 10
  %269 = add nsw i32 %268, %202
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %56, i64 %270
  %272 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %266
  %273 = trunc i32 %267 to i16
  %274 = and i16 %273, 1023
  %275 = insertelement <8 x i16> undef, i16 %274, i32 0
  %276 = shufflevector <8 x i16> %275, <8 x i16> undef, <8 x i32> zeroinitializer
  %277 = add <8 x i16> %276, %201
  %278 = lshr <8 x i16> %277, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %279 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %278, <8 x i16> %278) #7
  %280 = and <16 x i8> %279, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %281 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %280) #7
  %282 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 14, i8 13, i8 11, i8 10, i8 9, i8 8, i8 8, i8 7, i8 6, i8 5, i8 4, i8 3, i8 2, i8 2, i8 1>, <16 x i8> %280) #7
  %283 = shufflevector <16 x i8> %281, <16 x i8> %282, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %284 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 31, i8 31, i8 31, i8 30, i8 29, i8 28, i8 27, i8 26, i8 24, i8 23, i8 22, i8 21, i8 20, i8 18, i8 17>, <16 x i8> %280) #7
  %285 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 17, i8 18, i8 20, i8 21, i8 22, i8 23, i8 24, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31, i8 31, i8 31>, <16 x i8> %280) #7
  %286 = shufflevector <16 x i8> %284, <16 x i8> %285, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %287 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 8, i8 9, i8 10, i8 11, i8 13, i8 14>, <16 x i8> %280) #7
  %288 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 1>, <16 x i8> %280) #7
  %289 = shufflevector <16 x i8> %287, <16 x i8> %288, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %290 = lshr <8 x i16> %277, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %291 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %290, <8 x i16> %290) #7
  %292 = add <16 x i8> %291, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %293 = shufflevector <16 x i8> %291, <16 x i8> %292, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %294

294:                                              ; preds = %294, %265
  %295 = phi i8* [ %271, %265 ], [ %313, %294 ]
  %296 = phi i16* [ %272, %265 ], [ %314, %294 ]
  %297 = phi i32 [ %50, %265 ], [ %315, %294 ]
  %298 = bitcast i8* %295 to <16 x i8>*
  %299 = load <16 x i8>, <16 x i8>* %298, align 1
  %300 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %299, <16 x i8> %293) #7
  %301 = shufflevector <16 x i8> %299, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %302 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %301, <16 x i8> %293) #7
  %303 = shufflevector <16 x i8> %299, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %304 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %303, <16 x i8> %293) #7
  %305 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %300, <16 x i8> %283) #7
  %306 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %302, <16 x i8> %286) #7
  %307 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %304, <16 x i8> %289) #7
  %308 = add <8 x i16> %305, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %309 = add <8 x i16> %308, %306
  %310 = add <8 x i16> %309, %307
  %311 = ashr <8 x i16> %310, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %312 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %311, <8 x i16>* %312, align 16
  %313 = getelementptr inbounds i8, i8* %295, i64 %1
  %314 = getelementptr inbounds i16, i16* %296, i64 128
  %315 = add nsw i32 %297, -1
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %317, label %294

317:                                              ; preds = %294
  %318 = add nuw nsw i64 %266, 8
  %319 = add nsw i32 %267, %197
  %320 = icmp slt i64 %318, %203
  br i1 %320, label %265, label %920

321:                                              ; preds = %63
  %322 = icmp slt i32 %66, %6
  %323 = ashr i32 %4, 10
  %324 = shl i32 %6, 3
  %325 = trunc i32 %6 to i16
  %326 = insertelement <8 x i16> undef, i16 %325, i32 0
  %327 = shufflevector <8 x i16> %326, <8 x i16> undef, <8 x i32> zeroinitializer
  %328 = mul <8 x i16> %327, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %329 = sext i32 %8 to i64
  br i1 %322, label %330, label %398

330:                                              ; preds = %321, %394
  %331 = phi i64 [ %395, %394 ], [ 0, %321 ]
  %332 = phi i32 [ %396, %394 ], [ %4, %321 ]
  %333 = ashr i32 %332, 10
  %334 = sub nsw i32 %333, %323
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds i8, i8* %56, i64 %335
  %337 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %331
  %338 = trunc i32 %332 to i16
  %339 = and i16 %338, 1023
  %340 = insertelement <8 x i16> undef, i16 %339, i32 0
  %341 = shufflevector <8 x i16> %340, <8 x i16> undef, <8 x i32> zeroinitializer
  %342 = add <8 x i16> %341, %328
  %343 = lshr <8 x i16> %342, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %344 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %343, <8 x i16> %343) #7
  %345 = and <16 x i8> %344, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %346 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -1, i8 -1, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 0>, <16 x i8> %345) #7
  %347 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 3, i8 4, i8 5, i8 5, i8 5, i8 5, i8 6, i8 5, i8 4, i8 4, i8 3, i8 3, i8 2, i8 1>, <16 x i8> %345) #7
  %348 = shufflevector <16 x i8> %346, <16 x i8> %347, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %349 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -3, i8 -6, i8 -9, i8 -11, i8 -11, i8 -12, i8 -12, i8 -12, i8 -11, i8 -10, i8 -9, i8 -7, i8 -5, i8 -3, i8 -1>, <16 x i8> %345) #7
  %350 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 62, i8 60, i8 58, i8 54, i8 50, i8 45, i8 40, i8 35, i8 30, i8 24, i8 19, i8 13, i8 8, i8 4>, <16 x i8> %345) #7
  %351 = shufflevector <16 x i8> %349, <16 x i8> %350, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %352 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 13, i8 19, i8 24, i8 30, i8 35, i8 40, i8 45, i8 50, i8 54, i8 58, i8 60, i8 62, i8 63>, <16 x i8> %345) #7
  %353 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -3, i8 -5, i8 -7, i8 -9, i8 -10, i8 -11, i8 -12, i8 -12, i8 -12, i8 -11, i8 -11, i8 -9, i8 -6, i8 -3>, <16 x i8> %345) #7
  %354 = shufflevector <16 x i8> %352, <16 x i8> %353, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %355 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 3, i8 4, i8 4, i8 5, i8 6, i8 5, i8 5, i8 5, i8 5, i8 4, i8 3, i8 1>, <16 x i8> %345) #7
  %356 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %345) #7
  %357 = shufflevector <16 x i8> %355, <16 x i8> %356, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %358 = lshr <8 x i16> %342, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %359 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %358, <8 x i16> %358) #7
  %360 = add <16 x i8> %359, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %361 = shufflevector <16 x i8> %359, <16 x i8> %360, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %362

362:                                              ; preds = %362, %330
  %363 = phi i8* [ %336, %330 ], [ %390, %362 ]
  %364 = phi i16* [ %337, %330 ], [ %391, %362 ]
  %365 = phi i32 [ %50, %330 ], [ %392, %362 ]
  %366 = bitcast i8* %363 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 1
  %368 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %367, <16 x i8> %361) #7
  %369 = getelementptr inbounds i8, i8* %363, i64 16
  %370 = bitcast i8* %369 to i64*
  %371 = load i64, i64* %370, align 1
  %372 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %371, i32 0
  %373 = bitcast <2 x i64> %372 to <16 x i8>
  %374 = shufflevector <16 x i8> %367, <16 x i8> %373, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %375 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %374, <16 x i8> %361) #7
  %376 = shufflevector <16 x i8> %367, <16 x i8> %373, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %377 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %376, <16 x i8> %361) #7
  %378 = shufflevector <16 x i8> %367, <16 x i8> %373, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %379 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %378, <16 x i8> %361) #7
  %380 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %368, <16 x i8> %348) #7
  %381 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %375, <16 x i8> %351) #7
  %382 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %377, <16 x i8> %354) #7
  %383 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %379, <16 x i8> %357) #7
  %384 = add <8 x i16> %380, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %385 = add <8 x i16> %384, %381
  %386 = add <8 x i16> %385, %382
  %387 = add <8 x i16> %386, %383
  %388 = ashr <8 x i16> %387, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %389 = bitcast i16* %364 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %389, align 16
  %390 = getelementptr inbounds i8, i8* %363, i64 %1
  %391 = getelementptr inbounds i16, i16* %364, i64 128
  %392 = add nsw i32 %365, -1
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %394, label %362

394:                                              ; preds = %362
  %395 = add nuw nsw i64 %331, 8
  %396 = add nsw i32 %332, %324
  %397 = icmp slt i64 %395, %329
  br i1 %397, label %330, label %920

398:                                              ; preds = %321, %457
  %399 = phi i64 [ %458, %457 ], [ 0, %321 ]
  %400 = phi i32 [ %459, %457 ], [ %4, %321 ]
  %401 = ashr i32 %400, 10
  %402 = sub nsw i32 %401, %323
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds i8, i8* %56, i64 %403
  %405 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %399
  %406 = trunc i32 %400 to i16
  %407 = and i16 %406, 1023
  %408 = insertelement <8 x i16> undef, i16 %407, i32 0
  %409 = shufflevector <8 x i16> %408, <8 x i16> undef, <8 x i32> zeroinitializer
  %410 = add <8 x i16> %409, %328
  %411 = lshr <8 x i16> %410, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %412 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %411, <8 x i16> %411) #7
  %413 = and <16 x i8> %412, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %414 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -1, i8 -1, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 0>, <16 x i8> %413) #7
  %415 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 3, i8 4, i8 5, i8 5, i8 5, i8 5, i8 6, i8 5, i8 4, i8 4, i8 3, i8 3, i8 2, i8 1>, <16 x i8> %413) #7
  %416 = shufflevector <16 x i8> %414, <16 x i8> %415, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %417 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -3, i8 -6, i8 -9, i8 -11, i8 -11, i8 -12, i8 -12, i8 -12, i8 -11, i8 -10, i8 -9, i8 -7, i8 -5, i8 -3, i8 -1>, <16 x i8> %413) #7
  %418 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 62, i8 60, i8 58, i8 54, i8 50, i8 45, i8 40, i8 35, i8 30, i8 24, i8 19, i8 13, i8 8, i8 4>, <16 x i8> %413) #7
  %419 = shufflevector <16 x i8> %417, <16 x i8> %418, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %420 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 13, i8 19, i8 24, i8 30, i8 35, i8 40, i8 45, i8 50, i8 54, i8 58, i8 60, i8 62, i8 63>, <16 x i8> %413) #7
  %421 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -3, i8 -5, i8 -7, i8 -9, i8 -10, i8 -11, i8 -12, i8 -12, i8 -12, i8 -11, i8 -11, i8 -9, i8 -6, i8 -3>, <16 x i8> %413) #7
  %422 = shufflevector <16 x i8> %420, <16 x i8> %421, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %423 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 3, i8 4, i8 4, i8 5, i8 6, i8 5, i8 5, i8 5, i8 5, i8 4, i8 3, i8 1>, <16 x i8> %413) #7
  %424 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -2, i8 -2, i8 -2, i8 -2, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %413) #7
  %425 = shufflevector <16 x i8> %423, <16 x i8> %424, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %426 = lshr <8 x i16> %410, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %427 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %426, <8 x i16> %426) #7
  %428 = add <16 x i8> %427, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %429 = shufflevector <16 x i8> %427, <16 x i8> %428, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %430

430:                                              ; preds = %430, %398
  %431 = phi i8* [ %404, %398 ], [ %453, %430 ]
  %432 = phi i16* [ %405, %398 ], [ %454, %430 ]
  %433 = phi i32 [ %50, %398 ], [ %455, %430 ]
  %434 = bitcast i8* %431 to <16 x i8>*
  %435 = load <16 x i8>, <16 x i8>* %434, align 1
  %436 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %435, <16 x i8> %429) #7
  %437 = shufflevector <16 x i8> %435, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %438 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %437, <16 x i8> %429) #7
  %439 = shufflevector <16 x i8> %435, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %440 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %439, <16 x i8> %429) #7
  %441 = shufflevector <16 x i8> %435, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %442 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %441, <16 x i8> %429) #7
  %443 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %436, <16 x i8> %416) #7
  %444 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %438, <16 x i8> %419) #7
  %445 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %440, <16 x i8> %422) #7
  %446 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %442, <16 x i8> %425) #7
  %447 = add <8 x i16> %443, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %448 = add <8 x i16> %447, %444
  %449 = add <8 x i16> %448, %445
  %450 = add <8 x i16> %449, %446
  %451 = ashr <8 x i16> %450, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %452 = bitcast i16* %432 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %452, align 16
  %453 = getelementptr inbounds i8, i8* %431, i64 %1
  %454 = getelementptr inbounds i16, i16* %432, i64 128
  %455 = add nsw i32 %433, -1
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %457, label %430

457:                                              ; preds = %430
  %458 = add nuw nsw i64 %399, 8
  %459 = add nsw i32 %400, %324
  %460 = icmp slt i64 %458, %329
  br i1 %460, label %398, label %920

461:                                              ; preds = %63
  %462 = icmp slt i32 %66, %6
  %463 = shl i32 %6, 3
  %464 = trunc i32 %6 to i16
  %465 = insertelement <8 x i16> undef, i16 %464, i32 0
  %466 = shufflevector <8 x i16> %465, <8 x i16> undef, <8 x i32> zeroinitializer
  %467 = mul <8 x i16> %466, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br i1 %462, label %468, label %609

468:                                              ; preds = %461
  br i1 %14, label %478, label %469

469:                                              ; preds = %468
  %470 = ashr i32 %4, 10
  %471 = sub nsw i32 3, %470
  %472 = sext i32 %8 to i64
  %473 = add nsw i32 %45, %49
  %474 = and i32 %473, 1
  %475 = icmp eq i32 %474, 0
  %476 = add nsw i32 %50, -1
  %477 = icmp eq i32 %473, 1
  br label %544

478:                                              ; preds = %468
  %479 = getelementptr inbounds i8, i8* %56, i64 3
  %480 = trunc i32 %4 to i16
  %481 = and i16 %480, 1023
  %482 = insertelement <8 x i16> undef, i16 %481, i32 0
  %483 = shufflevector <8 x i16> %482, <8 x i16> undef, <8 x i32> zeroinitializer
  %484 = add <8 x i16> %467, %483
  %485 = lshr <8 x i16> %484, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %486 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %485, <8 x i16> %485) #7
  %487 = and <16 x i8> %486, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %488 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 60, i8 56, i8 52, i8 48, i8 44, i8 40, i8 36, i8 32, i8 28, i8 24, i8 20, i8 16, i8 12, i8 8, i8 4>, <16 x i8> %487) #7
  %489 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 12, i8 16, i8 20, i8 24, i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60>, <16 x i8> %487) #7
  %490 = shufflevector <16 x i8> %488, <16 x i8> %489, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %491 = lshr <8 x i16> %484, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %492 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %491, <8 x i16> %491) #7
  %493 = add <16 x i8> %492, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %494 = shufflevector <16 x i8> %492, <16 x i8> %493, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %495 = add nsw i32 %45, %49
  %496 = and i32 %495, 1
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %511, label %498

498:                                              ; preds = %478
  %499 = bitcast i8* %479 to <16 x i8>*
  %500 = load <16 x i8>, <16 x i8>* %499, align 1
  %501 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %500, <16 x i8> %494) #7
  %502 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %501, <16 x i8> %490) #7
  %503 = add <8 x i16> %502, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %504 = ashr <8 x i16> %503, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %505 = bitcast <8 x i16> %504 to <2 x i64>
  %506 = extractelement <2 x i64> %505, i32 0
  %507 = bitcast [33792 x i16]* %13 to i64*
  store i64 %506, i64* %507, align 16
  %508 = getelementptr inbounds i8, i8* %479, i64 %1
  %509 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 128
  %510 = add nsw i32 %50, -1
  br label %511

511:                                              ; preds = %478, %498
  %512 = phi i8* [ %479, %478 ], [ %508, %498 ]
  %513 = phi i32 [ %50, %478 ], [ %510, %498 ]
  %514 = phi i16* [ %51, %478 ], [ %509, %498 ]
  %515 = icmp eq i32 %495, 1
  br i1 %515, label %920, label %516

516:                                              ; preds = %511, %516
  %517 = phi i8* [ %540, %516 ], [ %512, %511 ]
  %518 = phi i32 [ %542, %516 ], [ %513, %511 ]
  %519 = phi i16* [ %541, %516 ], [ %514, %511 ]
  %520 = bitcast i8* %517 to <16 x i8>*
  %521 = load <16 x i8>, <16 x i8>* %520, align 1
  %522 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %521, <16 x i8> %494) #7
  %523 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %522, <16 x i8> %490) #7
  %524 = add <8 x i16> %523, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %525 = ashr <8 x i16> %524, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %526 = bitcast <8 x i16> %525 to <2 x i64>
  %527 = extractelement <2 x i64> %526, i32 0
  %528 = bitcast i16* %519 to i64*
  store i64 %527, i64* %528, align 1
  %529 = getelementptr inbounds i8, i8* %517, i64 %1
  %530 = getelementptr inbounds i16, i16* %519, i64 128
  %531 = bitcast i8* %529 to <16 x i8>*
  %532 = load <16 x i8>, <16 x i8>* %531, align 1
  %533 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %532, <16 x i8> %494) #7
  %534 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %533, <16 x i8> %490) #7
  %535 = add <8 x i16> %534, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %536 = ashr <8 x i16> %535, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %537 = bitcast <8 x i16> %536 to <2 x i64>
  %538 = extractelement <2 x i64> %537, i32 0
  %539 = bitcast i16* %530 to i64*
  store i64 %538, i64* %539, align 1
  %540 = getelementptr inbounds i8, i8* %529, i64 %1
  %541 = getelementptr inbounds i16, i16* %519, i64 256
  %542 = add nsw i32 %518, -2
  %543 = icmp eq i32 %542, 0
  br i1 %543, label %920, label %516

544:                                              ; preds = %605, %469
  %545 = phi i64 [ 0, %469 ], [ %606, %605 ]
  %546 = phi i32 [ %4, %469 ], [ %607, %605 ]
  %547 = ashr i32 %546, 10
  %548 = add nsw i32 %471, %547
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds i8, i8* %56, i64 %549
  %551 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %545
  %552 = trunc i32 %546 to i16
  %553 = and i16 %552, 1023
  %554 = insertelement <8 x i16> undef, i16 %553, i32 0
  %555 = shufflevector <8 x i16> %554, <8 x i16> undef, <8 x i32> zeroinitializer
  %556 = add <8 x i16> %555, %467
  %557 = lshr <8 x i16> %556, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %558 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %557, <8 x i16> %557) #7
  %559 = and <16 x i8> %558, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %560 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 60, i8 56, i8 52, i8 48, i8 44, i8 40, i8 36, i8 32, i8 28, i8 24, i8 20, i8 16, i8 12, i8 8, i8 4>, <16 x i8> %559) #7
  %561 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 12, i8 16, i8 20, i8 24, i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60>, <16 x i8> %559) #7
  %562 = shufflevector <16 x i8> %560, <16 x i8> %561, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %563 = lshr <8 x i16> %556, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %564 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %563, <8 x i16> %563) #7
  %565 = add <16 x i8> %564, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %566 = shufflevector <16 x i8> %564, <16 x i8> %565, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br i1 %475, label %577, label %567

567:                                              ; preds = %544
  %568 = bitcast i8* %550 to <16 x i8>*
  %569 = load <16 x i8>, <16 x i8>* %568, align 1
  %570 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %569, <16 x i8> %566) #7
  %571 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %570, <16 x i8> %562) #7
  %572 = add <8 x i16> %571, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %573 = ashr <8 x i16> %572, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %574 = bitcast i16* %551 to <8 x i16>*
  store <8 x i16> %573, <8 x i16>* %574, align 16
  %575 = getelementptr inbounds i8, i8* %550, i64 %1
  %576 = getelementptr inbounds i16, i16* %551, i64 128
  br label %577

577:                                              ; preds = %567, %544
  %578 = phi i8* [ %575, %567 ], [ %550, %544 ]
  %579 = phi i16* [ %576, %567 ], [ %551, %544 ]
  %580 = phi i32 [ %476, %567 ], [ %50, %544 ]
  br i1 %477, label %605, label %581

581:                                              ; preds = %577, %581
  %582 = phi i8* [ %601, %581 ], [ %578, %577 ]
  %583 = phi i16* [ %602, %581 ], [ %579, %577 ]
  %584 = phi i32 [ %603, %581 ], [ %580, %577 ]
  %585 = bitcast i8* %582 to <16 x i8>*
  %586 = load <16 x i8>, <16 x i8>* %585, align 1
  %587 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %586, <16 x i8> %566) #7
  %588 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %587, <16 x i8> %562) #7
  %589 = add <8 x i16> %588, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %590 = ashr <8 x i16> %589, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %591 = bitcast i16* %583 to <8 x i16>*
  store <8 x i16> %590, <8 x i16>* %591, align 16
  %592 = getelementptr inbounds i8, i8* %582, i64 %1
  %593 = getelementptr inbounds i16, i16* %583, i64 128
  %594 = bitcast i8* %592 to <16 x i8>*
  %595 = load <16 x i8>, <16 x i8>* %594, align 1
  %596 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %595, <16 x i8> %566) #7
  %597 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %596, <16 x i8> %562) #7
  %598 = add <8 x i16> %597, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %599 = ashr <8 x i16> %598, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %600 = bitcast i16* %593 to <8 x i16>*
  store <8 x i16> %599, <8 x i16>* %600, align 16
  %601 = getelementptr inbounds i8, i8* %592, i64 %1
  %602 = getelementptr inbounds i16, i16* %583, i64 256
  %603 = add nsw i32 %584, -2
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %605, label %581

605:                                              ; preds = %581, %577
  %606 = add nuw nsw i64 %545, 8
  %607 = add nsw i32 %546, %463
  %608 = icmp slt i64 %606, %472
  br i1 %608, label %544, label %920

609:                                              ; preds = %461
  br i1 %14, label %619, label %610

610:                                              ; preds = %609
  %611 = ashr i32 %4, 10
  %612 = sub nsw i32 3, %611
  %613 = sext i32 %8 to i64
  %614 = add nsw i32 %45, %49
  %615 = and i32 %614, 1
  %616 = icmp eq i32 %615, 0
  %617 = add nsw i32 %50, -1
  %618 = icmp eq i32 %614, 1
  br label %685

619:                                              ; preds = %609
  %620 = getelementptr inbounds i8, i8* %56, i64 3
  %621 = trunc i32 %4 to i16
  %622 = and i16 %621, 1023
  %623 = insertelement <8 x i16> undef, i16 %622, i32 0
  %624 = shufflevector <8 x i16> %623, <8 x i16> undef, <8 x i32> zeroinitializer
  %625 = add <8 x i16> %467, %624
  %626 = lshr <8 x i16> %625, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %627 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %626, <8 x i16> %626) #7
  %628 = and <16 x i8> %627, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %629 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 60, i8 56, i8 52, i8 48, i8 44, i8 40, i8 36, i8 32, i8 28, i8 24, i8 20, i8 16, i8 12, i8 8, i8 4>, <16 x i8> %628) #7
  %630 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 12, i8 16, i8 20, i8 24, i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60>, <16 x i8> %628) #7
  %631 = shufflevector <16 x i8> %629, <16 x i8> %630, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %632 = lshr <8 x i16> %625, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %633 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %632, <8 x i16> %632) #7
  %634 = add <16 x i8> %633, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %635 = shufflevector <16 x i8> %633, <16 x i8> %634, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %636 = add nsw i32 %45, %49
  %637 = and i32 %636, 1
  %638 = icmp eq i32 %637, 0
  br i1 %638, label %652, label %639

639:                                              ; preds = %619
  %640 = bitcast i8* %620 to <16 x i8>*
  %641 = load <16 x i8>, <16 x i8>* %640, align 1
  %642 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %641, <16 x i8> %635) #7
  %643 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %642, <16 x i8> %631) #7
  %644 = add <8 x i16> %643, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %645 = ashr <8 x i16> %644, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %646 = bitcast <8 x i16> %645 to <2 x i64>
  %647 = extractelement <2 x i64> %646, i32 0
  %648 = bitcast [33792 x i16]* %13 to i64*
  store i64 %647, i64* %648, align 16
  %649 = getelementptr inbounds i8, i8* %620, i64 %1
  %650 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 128
  %651 = add nsw i32 %50, -1
  br label %652

652:                                              ; preds = %619, %639
  %653 = phi i8* [ %620, %619 ], [ %649, %639 ]
  %654 = phi i32 [ %50, %619 ], [ %651, %639 ]
  %655 = phi i16* [ %51, %619 ], [ %650, %639 ]
  %656 = icmp eq i32 %636, 1
  br i1 %656, label %920, label %657

657:                                              ; preds = %652, %657
  %658 = phi i8* [ %681, %657 ], [ %653, %652 ]
  %659 = phi i32 [ %683, %657 ], [ %654, %652 ]
  %660 = phi i16* [ %682, %657 ], [ %655, %652 ]
  %661 = bitcast i8* %658 to <16 x i8>*
  %662 = load <16 x i8>, <16 x i8>* %661, align 1
  %663 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %662, <16 x i8> %635) #7
  %664 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %663, <16 x i8> %631) #7
  %665 = add <8 x i16> %664, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %666 = ashr <8 x i16> %665, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %667 = bitcast <8 x i16> %666 to <2 x i64>
  %668 = extractelement <2 x i64> %667, i32 0
  %669 = bitcast i16* %660 to i64*
  store i64 %668, i64* %669, align 1
  %670 = getelementptr inbounds i8, i8* %658, i64 %1
  %671 = getelementptr inbounds i16, i16* %660, i64 128
  %672 = bitcast i8* %670 to <16 x i8>*
  %673 = load <16 x i8>, <16 x i8>* %672, align 1
  %674 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %673, <16 x i8> %635) #7
  %675 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %674, <16 x i8> %631) #7
  %676 = add <8 x i16> %675, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %677 = ashr <8 x i16> %676, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %678 = bitcast <8 x i16> %677 to <2 x i64>
  %679 = extractelement <2 x i64> %678, i32 0
  %680 = bitcast i16* %671 to i64*
  store i64 %679, i64* %680, align 1
  %681 = getelementptr inbounds i8, i8* %670, i64 %1
  %682 = getelementptr inbounds i16, i16* %660, i64 256
  %683 = add nsw i32 %659, -2
  %684 = icmp eq i32 %683, 0
  br i1 %684, label %920, label %657

685:                                              ; preds = %746, %610
  %686 = phi i64 [ 0, %610 ], [ %747, %746 ]
  %687 = phi i32 [ %4, %610 ], [ %748, %746 ]
  %688 = ashr i32 %687, 10
  %689 = add nsw i32 %612, %688
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds i8, i8* %56, i64 %690
  %692 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %686
  %693 = trunc i32 %687 to i16
  %694 = and i16 %693, 1023
  %695 = insertelement <8 x i16> undef, i16 %694, i32 0
  %696 = shufflevector <8 x i16> %695, <8 x i16> undef, <8 x i32> zeroinitializer
  %697 = add <8 x i16> %696, %467
  %698 = lshr <8 x i16> %697, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %699 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %698, <8 x i16> %698) #7
  %700 = and <16 x i8> %699, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %701 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 60, i8 56, i8 52, i8 48, i8 44, i8 40, i8 36, i8 32, i8 28, i8 24, i8 20, i8 16, i8 12, i8 8, i8 4>, <16 x i8> %700) #7
  %702 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 8, i8 12, i8 16, i8 20, i8 24, i8 28, i8 32, i8 36, i8 40, i8 44, i8 48, i8 52, i8 56, i8 60>, <16 x i8> %700) #7
  %703 = shufflevector <16 x i8> %701, <16 x i8> %702, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %704 = lshr <8 x i16> %697, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %705 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %704, <8 x i16> %704) #7
  %706 = add <16 x i8> %705, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %707 = shufflevector <16 x i8> %705, <16 x i8> %706, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br i1 %616, label %718, label %708

708:                                              ; preds = %685
  %709 = bitcast i8* %691 to <16 x i8>*
  %710 = load <16 x i8>, <16 x i8>* %709, align 1
  %711 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %710, <16 x i8> %707) #7
  %712 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %711, <16 x i8> %703) #7
  %713 = add <8 x i16> %712, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %714 = ashr <8 x i16> %713, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %715 = bitcast i16* %692 to <8 x i16>*
  store <8 x i16> %714, <8 x i16>* %715, align 16
  %716 = getelementptr inbounds i8, i8* %691, i64 %1
  %717 = getelementptr inbounds i16, i16* %692, i64 128
  br label %718

718:                                              ; preds = %708, %685
  %719 = phi i8* [ %716, %708 ], [ %691, %685 ]
  %720 = phi i16* [ %717, %708 ], [ %692, %685 ]
  %721 = phi i32 [ %617, %708 ], [ %50, %685 ]
  br i1 %618, label %746, label %722

722:                                              ; preds = %718, %722
  %723 = phi i8* [ %742, %722 ], [ %719, %718 ]
  %724 = phi i16* [ %743, %722 ], [ %720, %718 ]
  %725 = phi i32 [ %744, %722 ], [ %721, %718 ]
  %726 = bitcast i8* %723 to <16 x i8>*
  %727 = load <16 x i8>, <16 x i8>* %726, align 1
  %728 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %727, <16 x i8> %707) #7
  %729 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %728, <16 x i8> %703) #7
  %730 = add <8 x i16> %729, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %731 = ashr <8 x i16> %730, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %732 = bitcast i16* %724 to <8 x i16>*
  store <8 x i16> %731, <8 x i16>* %732, align 16
  %733 = getelementptr inbounds i8, i8* %723, i64 %1
  %734 = getelementptr inbounds i16, i16* %724, i64 128
  %735 = bitcast i8* %733 to <16 x i8>*
  %736 = load <16 x i8>, <16 x i8>* %735, align 1
  %737 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %736, <16 x i8> %707) #7
  %738 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %737, <16 x i8> %703) #7
  %739 = add <8 x i16> %738, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %740 = ashr <8 x i16> %739, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %741 = bitcast i16* %734 to <8 x i16>*
  store <8 x i16> %740, <8 x i16>* %741, align 16
  %742 = getelementptr inbounds i8, i8* %733, i64 %1
  %743 = getelementptr inbounds i16, i16* %724, i64 256
  %744 = add nsw i32 %725, -2
  %745 = icmp eq i32 %744, 0
  br i1 %745, label %746, label %722

746:                                              ; preds = %722, %718
  %747 = add nuw nsw i64 %686, 8
  %748 = add nsw i32 %687, %463
  %749 = icmp slt i64 %747, %613
  br i1 %749, label %685, label %920

750:                                              ; preds = %63
  %751 = trunc i32 %6 to i16
  %752 = insertelement <8 x i16> undef, i16 %751, i32 0
  %753 = shufflevector <8 x i16> %752, <8 x i16> undef, <8 x i32> zeroinitializer
  %754 = mul <8 x i16> %753, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %755 = getelementptr inbounds i8, i8* %56, i64 2
  %756 = trunc i32 %4 to i16
  %757 = and i16 %756, 1023
  %758 = insertelement <8 x i16> undef, i16 %757, i32 0
  %759 = shufflevector <8 x i16> %758, <8 x i16> undef, <8 x i32> zeroinitializer
  %760 = add <8 x i16> %754, %759
  %761 = lshr <8 x i16> %760, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %762 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %761, <8 x i16> %761) #7
  %763 = and <16 x i8> %762, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %764 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -2, i8 -4, i8 -5, i8 -6, i8 -6, i8 -7, i8 -6, i8 -6, i8 -5, i8 -5, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8> %763) #7
  %765 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 63, i8 61, i8 58, i8 55, i8 51, i8 47, i8 42, i8 38, i8 33, i8 29, i8 24, i8 19, i8 14, i8 9, i8 4>, <16 x i8> %763) #7
  %766 = shufflevector <16 x i8> %764, <16 x i8> %765, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %767 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 4, i8 9, i8 14, i8 19, i8 24, i8 29, i8 33, i8 38, i8 42, i8 47, i8 51, i8 55, i8 58, i8 61, i8 63>, <16 x i8> %763) #7
  %768 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 -1, i8 -2, i8 -3, i8 -4, i8 -5, i8 -5, i8 -5, i8 -6, i8 -6, i8 -7, i8 -6, i8 -6, i8 -5, i8 -4, i8 -2>, <16 x i8> %763) #7
  %769 = shufflevector <16 x i8> %767, <16 x i8> %768, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %770 = lshr <8 x i16> %760, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %771 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %770, <8 x i16> %770) #7
  %772 = add <16 x i8> %771, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %773 = shufflevector <16 x i8> %771, <16 x i8> %772, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %774 = add nsw i32 %45, %49
  %775 = and i32 %774, 1
  %776 = icmp eq i32 %775, 0
  br i1 %776, label %794, label %777

777:                                              ; preds = %750
  %778 = bitcast i8* %755 to <16 x i8>*
  %779 = load <16 x i8>, <16 x i8>* %778, align 1
  %780 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %779, <16 x i8> %773) #7
  %781 = shufflevector <16 x i8> %779, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %782 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %781, <16 x i8> %773) #7
  %783 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %780, <16 x i8> %766) #7
  %784 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %782, <16 x i8> %769) #7
  %785 = add <8 x i16> %783, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %786 = add <8 x i16> %785, %784
  %787 = ashr <8 x i16> %786, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %788 = bitcast <8 x i16> %787 to <2 x i64>
  %789 = extractelement <2 x i64> %788, i32 0
  %790 = bitcast [33792 x i16]* %13 to i64*
  store i64 %789, i64* %790, align 16
  %791 = getelementptr inbounds i8, i8* %755, i64 %1
  %792 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 128
  %793 = add nsw i32 %50, -1
  br label %794

794:                                              ; preds = %750, %777
  %795 = phi i8* [ %755, %750 ], [ %791, %777 ]
  %796 = phi i16* [ %51, %750 ], [ %792, %777 ]
  %797 = phi i32 [ %50, %750 ], [ %793, %777 ]
  %798 = icmp eq i32 %774, 1
  br i1 %798, label %920, label %799

799:                                              ; preds = %794, %799
  %800 = phi i8* [ %831, %799 ], [ %795, %794 ]
  %801 = phi i16* [ %832, %799 ], [ %796, %794 ]
  %802 = phi i32 [ %833, %799 ], [ %797, %794 ]
  %803 = bitcast i8* %800 to <16 x i8>*
  %804 = load <16 x i8>, <16 x i8>* %803, align 1
  %805 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %804, <16 x i8> %773) #7
  %806 = shufflevector <16 x i8> %804, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %807 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %806, <16 x i8> %773) #7
  %808 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %805, <16 x i8> %766) #7
  %809 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %807, <16 x i8> %769) #7
  %810 = add <8 x i16> %808, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %811 = add <8 x i16> %810, %809
  %812 = ashr <8 x i16> %811, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %813 = bitcast <8 x i16> %812 to <2 x i64>
  %814 = extractelement <2 x i64> %813, i32 0
  %815 = bitcast i16* %801 to i64*
  store i64 %814, i64* %815, align 1
  %816 = getelementptr inbounds i8, i8* %800, i64 %1
  %817 = getelementptr inbounds i16, i16* %801, i64 128
  %818 = bitcast i8* %816 to <16 x i8>*
  %819 = load <16 x i8>, <16 x i8>* %818, align 1
  %820 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %819, <16 x i8> %773) #7
  %821 = shufflevector <16 x i8> %819, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %822 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %821, <16 x i8> %773) #7
  %823 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %820, <16 x i8> %766) #7
  %824 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %822, <16 x i8> %769) #7
  %825 = add <8 x i16> %823, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %826 = add <8 x i16> %825, %824
  %827 = ashr <8 x i16> %826, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %828 = bitcast <8 x i16> %827 to <2 x i64>
  %829 = extractelement <2 x i64> %828, i32 0
  %830 = bitcast i16* %817 to i64*
  store i64 %829, i64* %830, align 1
  %831 = getelementptr inbounds i8, i8* %816, i64 %1
  %832 = getelementptr inbounds i16, i16* %801, i64 256
  %833 = add nsw i32 %802, -2
  %834 = icmp eq i32 %833, 0
  br i1 %834, label %920, label %799

835:                                              ; preds = %63
  %836 = trunc i32 %6 to i16
  %837 = insertelement <8 x i16> undef, i16 %836, i32 0
  %838 = shufflevector <8 x i16> %837, <8 x i16> undef, <8 x i32> zeroinitializer
  %839 = mul <8 x i16> %838, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %840 = getelementptr inbounds i8, i8* %56, i64 2
  %841 = trunc i32 %4 to i16
  %842 = and i16 %841, 1023
  %843 = insertelement <8 x i16> undef, i16 %842, i32 0
  %844 = shufflevector <8 x i16> %843, <8 x i16> undef, <8 x i32> zeroinitializer
  %845 = add <8 x i16> %839, %844
  %846 = lshr <8 x i16> %845, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %847 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %846, <8 x i16> %846) #7
  %848 = and <16 x i8> %847, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %849 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 15, i8 13, i8 11, i8 10, i8 9, i8 8, i8 7, i8 6, i8 6, i8 5, i8 4, i8 3, i8 2, i8 2, i8 1>, <16 x i8> %848) #7
  %850 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 64, i8 31, i8 31, i8 31, i8 30, i8 29, i8 28, i8 27, i8 26, i8 24, i8 23, i8 22, i8 21, i8 20, i8 18, i8 17>, <16 x i8> %848) #7
  %851 = shufflevector <16 x i8> %849, <16 x i8> %850, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %852 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 17, i8 18, i8 20, i8 21, i8 22, i8 23, i8 24, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31, i8 31, i8 31>, <16 x i8> %848) #7
  %853 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> <i8 0, i8 1, i8 2, i8 2, i8 3, i8 4, i8 5, i8 6, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 13, i8 15>, <16 x i8> %848) #7
  %854 = shufflevector <16 x i8> %852, <16 x i8> %853, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %855 = lshr <8 x i16> %845, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %856 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %855, <8 x i16> %855) #7
  %857 = add <16 x i8> %856, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %858 = shufflevector <16 x i8> %856, <16 x i8> %857, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %859 = add nsw i32 %45, %49
  %860 = and i32 %859, 1
  %861 = icmp eq i32 %860, 0
  br i1 %861, label %879, label %862

862:                                              ; preds = %835
  %863 = bitcast i8* %840 to <16 x i8>*
  %864 = load <16 x i8>, <16 x i8>* %863, align 1
  %865 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %864, <16 x i8> %858) #7
  %866 = shufflevector <16 x i8> %864, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %867 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %866, <16 x i8> %858) #7
  %868 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %865, <16 x i8> %851) #7
  %869 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %867, <16 x i8> %854) #7
  %870 = add <8 x i16> %868, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %871 = add <8 x i16> %870, %869
  %872 = ashr <8 x i16> %871, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %873 = bitcast <8 x i16> %872 to <2 x i64>
  %874 = extractelement <2 x i64> %873, i32 0
  %875 = bitcast [33792 x i16]* %13 to i64*
  store i64 %874, i64* %875, align 16
  %876 = getelementptr inbounds i8, i8* %840, i64 %1
  %877 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 128
  %878 = add nsw i32 %50, -1
  br label %879

879:                                              ; preds = %835, %862
  %880 = phi i8* [ %840, %835 ], [ %876, %862 ]
  %881 = phi i16* [ %51, %835 ], [ %877, %862 ]
  %882 = phi i32 [ %50, %835 ], [ %878, %862 ]
  %883 = icmp eq i32 %859, 1
  br i1 %883, label %920, label %884

884:                                              ; preds = %879, %884
  %885 = phi i8* [ %916, %884 ], [ %880, %879 ]
  %886 = phi i16* [ %917, %884 ], [ %881, %879 ]
  %887 = phi i32 [ %918, %884 ], [ %882, %879 ]
  %888 = bitcast i8* %885 to <16 x i8>*
  %889 = load <16 x i8>, <16 x i8>* %888, align 1
  %890 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %889, <16 x i8> %858) #7
  %891 = shufflevector <16 x i8> %889, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %892 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %891, <16 x i8> %858) #7
  %893 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %890, <16 x i8> %851) #7
  %894 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %892, <16 x i8> %854) #7
  %895 = add <8 x i16> %893, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %896 = add <8 x i16> %895, %894
  %897 = ashr <8 x i16> %896, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %898 = bitcast <8 x i16> %897 to <2 x i64>
  %899 = extractelement <2 x i64> %898, i32 0
  %900 = bitcast i16* %886 to i64*
  store i64 %899, i64* %900, align 1
  %901 = getelementptr inbounds i8, i8* %885, i64 %1
  %902 = getelementptr inbounds i16, i16* %886, i64 128
  %903 = bitcast i8* %901 to <16 x i8>*
  %904 = load <16 x i8>, <16 x i8>* %903, align 1
  %905 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %904, <16 x i8> %858) #7
  %906 = shufflevector <16 x i8> %904, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %907 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %906, <16 x i8> %858) #7
  %908 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %905, <16 x i8> %851) #7
  %909 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %907, <16 x i8> %854) #7
  %910 = add <8 x i16> %908, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %911 = add <8 x i16> %910, %909
  %912 = ashr <8 x i16> %911, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %913 = bitcast <8 x i16> %912 to <2 x i64>
  %914 = extractelement <2 x i64> %913, i32 0
  %915 = bitcast i16* %902 to i64*
  store i64 %914, i64* %915, align 1
  %916 = getelementptr inbounds i8, i8* %901, i64 %1
  %917 = getelementptr inbounds i16, i16* %886, i64 256
  %918 = add nsw i32 %887, -2
  %919 = icmp eq i32 %918, 0
  br i1 %919, label %920, label %884

920:                                              ; preds = %794, %799, %746, %652, %657, %605, %511, %516, %457, %394, %317, %261, %190, %134, %879, %884
  switch i32 %44, label %1554 [
    i32 0, label %921
    i32 1, label %921
    i32 2, label %1148
    i32 3, label %1420
  ]

921:                                              ; preds = %920, %920
  %922 = icmp eq i32 %8, 4
  %923 = bitcast i8* %10 to i16*
  %924 = and i32 %5, 1023
  %925 = sext i32 %44 to i64
  br i1 %922, label %926, label %1070

926:                                              ; preds = %921, %926
  %927 = phi i32 [ %1068, %926 ], [ %9, %921 ]
  %928 = phi i32 [ %1022, %926 ], [ %924, %921 ]
  %929 = phi i16* [ %1067, %926 ], [ %923, %921 ]
  %930 = phi i16* [ %1026, %926 ], [ %51, %921 ]
  %931 = bitcast i16* %930 to i64*
  %932 = load i64, i64* %931, align 1
  %933 = insertelement <2 x i64> undef, i64 %932, i32 0
  %934 = getelementptr inbounds i16, i16* %930, i64 128
  %935 = bitcast i16* %934 to i64*
  %936 = load i64, i64* %935, align 1
  %937 = insertelement <2 x i64> undef, i64 %936, i32 0
  %938 = getelementptr inbounds i16, i16* %930, i64 256
  %939 = bitcast i16* %938 to i64*
  %940 = load i64, i64* %939, align 1
  %941 = insertelement <2 x i64> undef, i64 %940, i32 0
  %942 = getelementptr inbounds i16, i16* %930, i64 384
  %943 = bitcast i16* %942 to i64*
  %944 = load i64, i64* %943, align 1
  %945 = insertelement <2 x i64> undef, i64 %944, i32 0
  %946 = getelementptr inbounds i16, i16* %930, i64 512
  %947 = bitcast i16* %946 to i64*
  %948 = load i64, i64* %947, align 1
  %949 = insertelement <2 x i64> undef, i64 %948, i32 0
  %950 = getelementptr inbounds i16, i16* %930, i64 640
  %951 = bitcast i16* %950 to i64*
  %952 = load i64, i64* %951, align 1
  %953 = insertelement <2 x i64> undef, i64 %952, i32 0
  %954 = lshr i32 %928, 6
  %955 = and i32 %954, 15
  %956 = zext i32 %955 to i64
  %957 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %925, i64 %956, i64 1
  %958 = bitcast i8* %957 to i64*
  %959 = load i64, i64* %958, align 1
  %960 = insertelement <2 x i64> undef, i64 %959, i32 0
  %961 = bitcast <2 x i64> %960 to <16 x i8>
  %962 = shufflevector <16 x i8> %961, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %963 = sext <8 x i8> %962 to <8 x i16>
  %964 = bitcast <8 x i16> %963 to <4 x i32>
  %965 = shufflevector <4 x i32> %964, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %966 = add nsw i32 %928, %7
  %967 = ashr i32 %966, 10
  %968 = sext i32 %967 to i64
  %969 = shl nsw i64 %968, 7
  %970 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %969
  %971 = bitcast <2 x i64> %933 to <4 x float>
  %972 = bitcast i16* %970 to <2 x float>*
  %973 = load <2 x float>, <2 x float>* %972, align 16
  %974 = shufflevector <2 x float> %973, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %975 = shufflevector <4 x float> %971, <4 x float> %974, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %976 = bitcast <2 x i64> %937 to <4 x float>
  %977 = getelementptr inbounds i16, i16* %970, i64 128
  %978 = bitcast i16* %977 to <2 x float>*
  %979 = load <2 x float>, <2 x float>* %978, align 16
  %980 = shufflevector <2 x float> %979, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %981 = shufflevector <4 x float> %976, <4 x float> %980, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %982 = bitcast <2 x i64> %941 to <4 x float>
  %983 = getelementptr inbounds i16, i16* %970, i64 256
  %984 = bitcast i16* %983 to <2 x float>*
  %985 = load <2 x float>, <2 x float>* %984, align 16
  %986 = shufflevector <2 x float> %985, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %987 = shufflevector <4 x float> %982, <4 x float> %986, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %988 = bitcast <2 x i64> %945 to <4 x float>
  %989 = getelementptr inbounds i16, i16* %970, i64 384
  %990 = bitcast i16* %989 to <2 x float>*
  %991 = load <2 x float>, <2 x float>* %990, align 16
  %992 = shufflevector <2 x float> %991, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %993 = shufflevector <4 x float> %988, <4 x float> %992, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %994 = bitcast <2 x i64> %949 to <4 x float>
  %995 = getelementptr inbounds i16, i16* %970, i64 512
  %996 = bitcast i16* %995 to <2 x float>*
  %997 = load <2 x float>, <2 x float>* %996, align 16
  %998 = shufflevector <2 x float> %997, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %999 = shufflevector <4 x float> %994, <4 x float> %998, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1000 = bitcast <2 x i64> %953 to <4 x float>
  %1001 = getelementptr inbounds i16, i16* %970, i64 640
  %1002 = bitcast i16* %1001 to <2 x float>*
  %1003 = load <2 x float>, <2 x float>* %1002, align 16
  %1004 = shufflevector <2 x float> %1003, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1005 = shufflevector <4 x float> %1000, <4 x float> %1004, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1006 = shufflevector <4 x i32> %964, <4 x i32> undef, <4 x i32> zeroinitializer
  %1007 = shufflevector <4 x i32> %964, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1008 = lshr i32 %966, 6
  %1009 = and i32 %1008, 15
  %1010 = zext i32 %1009 to i64
  %1011 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %925, i64 %1010, i64 1
  %1012 = bitcast i8* %1011 to i64*
  %1013 = load i64, i64* %1012, align 1
  %1014 = insertelement <2 x i64> undef, i64 %1013, i32 0
  %1015 = bitcast <2 x i64> %1014 to <16 x i8>
  %1016 = shufflevector <16 x i8> %1015, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1017 = sext <8 x i8> %1016 to <8 x i16>
  %1018 = bitcast <8 x i16> %1017 to <4 x i32>
  %1019 = shufflevector <4 x i32> %1018, <4 x i32> undef, <4 x i32> zeroinitializer
  %1020 = shufflevector <4 x i32> %1018, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1021 = shufflevector <4 x i32> %1018, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1022 = add nsw i32 %966, %7
  %1023 = ashr i32 %1022, 10
  %1024 = sext i32 %1023 to i64
  %1025 = shl nsw i64 %1024, 7
  %1026 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1025
  %1027 = bitcast <4 x float> %975 to <8 x i16>
  %1028 = bitcast <4 x float> %981 to <8 x i16>
  %1029 = shufflevector <8 x i16> %1027, <8 x i16> %1028, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1030 = bitcast <4 x i32> %1006 to <8 x i16>
  %1031 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1029, <8 x i16> %1030) #7
  %1032 = shufflevector <8 x i16> %1027, <8 x i16> %1028, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1033 = bitcast <4 x i32> %1019 to <8 x i16>
  %1034 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1032, <8 x i16> %1033) #7
  %1035 = bitcast <4 x float> %987 to <8 x i16>
  %1036 = bitcast <4 x float> %993 to <8 x i16>
  %1037 = shufflevector <8 x i16> %1035, <8 x i16> %1036, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1038 = bitcast <4 x i32> %965 to <8 x i16>
  %1039 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1037, <8 x i16> %1038) #7
  %1040 = shufflevector <8 x i16> %1035, <8 x i16> %1036, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1041 = bitcast <4 x i32> %1020 to <8 x i16>
  %1042 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1040, <8 x i16> %1041) #7
  %1043 = bitcast <4 x float> %999 to <8 x i16>
  %1044 = bitcast <4 x float> %1005 to <8 x i16>
  %1045 = shufflevector <8 x i16> %1043, <8 x i16> %1044, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1046 = bitcast <4 x i32> %1007 to <8 x i16>
  %1047 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1045, <8 x i16> %1046) #7
  %1048 = shufflevector <8 x i16> %1043, <8 x i16> %1044, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1049 = bitcast <4 x i32> %1021 to <8 x i16>
  %1050 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1048, <8 x i16> %1049) #7
  %1051 = add <4 x i32> %1031, <i32 32, i32 32, i32 32, i32 32>
  %1052 = add <4 x i32> %1051, %1039
  %1053 = add <4 x i32> %1052, %1047
  %1054 = ashr <4 x i32> %1053, <i32 6, i32 6, i32 6, i32 6>
  %1055 = add <4 x i32> %1034, <i32 32, i32 32, i32 32, i32 32>
  %1056 = add <4 x i32> %1055, %1042
  %1057 = add <4 x i32> %1056, %1050
  %1058 = ashr <4 x i32> %1057, <i32 6, i32 6, i32 6, i32 6>
  %1059 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1054, <4 x i32> %1058) #7
  %1060 = bitcast <8 x i16> %1059 to <2 x i64>
  %1061 = extractelement <2 x i64> %1060, i32 0
  %1062 = bitcast i16* %929 to i64*
  store i64 %1061, i64* %1062, align 1
  %1063 = getelementptr inbounds i16, i16* %929, i64 %11
  %1064 = bitcast <8 x i16> %1059 to <4 x float>
  %1065 = shufflevector <4 x float> %1064, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1066 = bitcast i16* %1063 to <2 x float>*
  store <2 x float> %1065, <2 x float>* %1066, align 1
  %1067 = getelementptr inbounds i16, i16* %1063, i64 %11
  %1068 = add nsw i32 %927, -2
  %1069 = icmp eq i32 %1068, 0
  br i1 %1069, label %1735, label %926

1070:                                             ; preds = %921
  %1071 = sext i32 %8 to i64
  br label %1072

1072:                                             ; preds = %1143, %1070
  %1073 = phi i32 [ %924, %1070 ], [ %1144, %1143 ]
  %1074 = phi i32 [ %9, %1070 ], [ %1146, %1143 ]
  %1075 = phi i16* [ %923, %1070 ], [ %1145, %1143 ]
  %1076 = ashr i32 %1073, 10
  %1077 = sext i32 %1076 to i64
  %1078 = shl nsw i64 %1077, 7
  %1079 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1078
  %1080 = lshr i32 %1073, 6
  %1081 = and i32 %1080, 15
  %1082 = zext i32 %1081 to i64
  %1083 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %925, i64 %1082, i64 1
  %1084 = bitcast i8* %1083 to i64*
  %1085 = load i64, i64* %1084, align 1
  %1086 = insertelement <2 x i64> undef, i64 %1085, i32 0
  %1087 = bitcast <2 x i64> %1086 to <16 x i8>
  %1088 = shufflevector <16 x i8> %1087, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1089 = sext <8 x i8> %1088 to <8 x i16>
  %1090 = bitcast <8 x i16> %1089 to <4 x i32>
  %1091 = shufflevector <4 x i32> %1090, <4 x i32> undef, <4 x i32> zeroinitializer
  %1092 = shufflevector <4 x i32> %1090, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1093 = shufflevector <4 x i32> %1090, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1094 = bitcast <4 x i32> %1091 to <8 x i16>
  %1095 = bitcast <4 x i32> %1092 to <8 x i16>
  %1096 = bitcast <4 x i32> %1093 to <8 x i16>
  br label %1097

1097:                                             ; preds = %1097, %1072
  %1098 = phi i64 [ %1140, %1097 ], [ 0, %1072 ]
  %1099 = phi i16* [ %1141, %1097 ], [ %1079, %1072 ]
  %1100 = bitcast i16* %1099 to <8 x i16>*
  %1101 = load <8 x i16>, <8 x i16>* %1100, align 1
  %1102 = getelementptr inbounds i16, i16* %1099, i64 128
  %1103 = bitcast i16* %1102 to <8 x i16>*
  %1104 = load <8 x i16>, <8 x i16>* %1103, align 1
  %1105 = getelementptr inbounds i16, i16* %1099, i64 256
  %1106 = bitcast i16* %1105 to <8 x i16>*
  %1107 = load <8 x i16>, <8 x i16>* %1106, align 1
  %1108 = getelementptr inbounds i16, i16* %1099, i64 384
  %1109 = bitcast i16* %1108 to <8 x i16>*
  %1110 = load <8 x i16>, <8 x i16>* %1109, align 1
  %1111 = getelementptr inbounds i16, i16* %1099, i64 512
  %1112 = bitcast i16* %1111 to <8 x i16>*
  %1113 = load <8 x i16>, <8 x i16>* %1112, align 1
  %1114 = getelementptr inbounds i16, i16* %1099, i64 640
  %1115 = bitcast i16* %1114 to <8 x i16>*
  %1116 = load <8 x i16>, <8 x i16>* %1115, align 1
  %1117 = shufflevector <8 x i16> %1101, <8 x i16> %1104, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1117, <8 x i16> %1094) #7
  %1119 = shufflevector <8 x i16> %1101, <8 x i16> %1104, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1119, <8 x i16> %1094) #7
  %1121 = shufflevector <8 x i16> %1107, <8 x i16> %1110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1121, <8 x i16> %1095) #7
  %1123 = shufflevector <8 x i16> %1107, <8 x i16> %1110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1124 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1123, <8 x i16> %1095) #7
  %1125 = shufflevector <8 x i16> %1113, <8 x i16> %1116, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1125, <8 x i16> %1096) #7
  %1127 = shufflevector <8 x i16> %1113, <8 x i16> %1116, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1127, <8 x i16> %1096) #7
  %1129 = add <4 x i32> %1118, <i32 32, i32 32, i32 32, i32 32>
  %1130 = add <4 x i32> %1129, %1122
  %1131 = add <4 x i32> %1130, %1126
  %1132 = ashr <4 x i32> %1131, <i32 6, i32 6, i32 6, i32 6>
  %1133 = add <4 x i32> %1120, <i32 32, i32 32, i32 32, i32 32>
  %1134 = add <4 x i32> %1133, %1124
  %1135 = add <4 x i32> %1134, %1128
  %1136 = ashr <4 x i32> %1135, <i32 6, i32 6, i32 6, i32 6>
  %1137 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1132, <4 x i32> %1136) #7
  %1138 = getelementptr inbounds i16, i16* %1075, i64 %1098
  %1139 = bitcast i16* %1138 to <8 x i16>*
  store <8 x i16> %1137, <8 x i16>* %1139, align 1
  %1140 = add nuw nsw i64 %1098, 8
  %1141 = getelementptr inbounds i16, i16* %1099, i64 8
  %1142 = icmp slt i64 %1140, %1071
  br i1 %1142, label %1097, label %1143

1143:                                             ; preds = %1097
  %1144 = add nsw i32 %1073, %7
  %1145 = getelementptr inbounds i16, i16* %1075, i64 %11
  %1146 = add nsw i32 %1074, -1
  %1147 = icmp eq i32 %1146, 0
  br i1 %1147, label %1735, label %1072

1148:                                             ; preds = %920
  %1149 = icmp eq i32 %8, 4
  %1150 = bitcast i8* %10 to i16*
  %1151 = and i32 %5, 1023
  br i1 %1149, label %1152, label %1328

1152:                                             ; preds = %1148, %1152
  %1153 = phi i32 [ %1326, %1152 ], [ %9, %1148 ]
  %1154 = phi i32 [ %1270, %1152 ], [ %1151, %1148 ]
  %1155 = phi i16* [ %1325, %1152 ], [ %1150, %1148 ]
  %1156 = phi i16* [ %1274, %1152 ], [ %51, %1148 ]
  %1157 = bitcast i16* %1156 to i64*
  %1158 = load i64, i64* %1157, align 1
  %1159 = insertelement <2 x i64> undef, i64 %1158, i32 0
  %1160 = getelementptr inbounds i16, i16* %1156, i64 128
  %1161 = bitcast i16* %1160 to i64*
  %1162 = load i64, i64* %1161, align 1
  %1163 = insertelement <2 x i64> undef, i64 %1162, i32 0
  %1164 = getelementptr inbounds i16, i16* %1156, i64 256
  %1165 = bitcast i16* %1164 to i64*
  %1166 = load i64, i64* %1165, align 1
  %1167 = insertelement <2 x i64> undef, i64 %1166, i32 0
  %1168 = getelementptr inbounds i16, i16* %1156, i64 384
  %1169 = bitcast i16* %1168 to i64*
  %1170 = load i64, i64* %1169, align 1
  %1171 = insertelement <2 x i64> undef, i64 %1170, i32 0
  %1172 = getelementptr inbounds i16, i16* %1156, i64 512
  %1173 = bitcast i16* %1172 to i64*
  %1174 = load i64, i64* %1173, align 1
  %1175 = insertelement <2 x i64> undef, i64 %1174, i32 0
  %1176 = getelementptr inbounds i16, i16* %1156, i64 640
  %1177 = bitcast i16* %1176 to i64*
  %1178 = load i64, i64* %1177, align 1
  %1179 = insertelement <2 x i64> undef, i64 %1178, i32 0
  %1180 = getelementptr inbounds i16, i16* %1156, i64 768
  %1181 = bitcast i16* %1180 to i64*
  %1182 = load i64, i64* %1181, align 1
  %1183 = insertelement <2 x i64> undef, i64 %1182, i32 0
  %1184 = getelementptr inbounds i16, i16* %1156, i64 896
  %1185 = bitcast i16* %1184 to i64*
  %1186 = load i64, i64* %1185, align 1
  %1187 = insertelement <2 x i64> undef, i64 %1186, i32 0
  %1188 = lshr i32 %1154, 6
  %1189 = and i32 %1188, 15
  %1190 = zext i32 %1189 to i64
  %1191 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 2, i64 %1190, i64 0
  %1192 = bitcast i8* %1191 to i64*
  %1193 = load i64, i64* %1192, align 8
  %1194 = insertelement <2 x i64> undef, i64 %1193, i32 0
  %1195 = bitcast <2 x i64> %1194 to <16 x i8>
  %1196 = shufflevector <16 x i8> %1195, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1197 = sext <8 x i8> %1196 to <8 x i16>
  %1198 = bitcast <8 x i16> %1197 to <4 x i32>
  %1199 = shufflevector <4 x i32> %1198, <4 x i32> undef, <4 x i32> zeroinitializer
  %1200 = shufflevector <4 x i32> %1198, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1201 = add nsw i32 %1154, %7
  %1202 = ashr i32 %1201, 10
  %1203 = sext i32 %1202 to i64
  %1204 = shl nsw i64 %1203, 7
  %1205 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1204
  %1206 = bitcast <2 x i64> %1159 to <4 x float>
  %1207 = bitcast i16* %1205 to <2 x float>*
  %1208 = load <2 x float>, <2 x float>* %1207, align 16
  %1209 = shufflevector <2 x float> %1208, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1210 = shufflevector <4 x float> %1206, <4 x float> %1209, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1211 = bitcast <2 x i64> %1163 to <4 x float>
  %1212 = getelementptr inbounds i16, i16* %1205, i64 128
  %1213 = bitcast i16* %1212 to <2 x float>*
  %1214 = load <2 x float>, <2 x float>* %1213, align 16
  %1215 = shufflevector <2 x float> %1214, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1216 = shufflevector <4 x float> %1211, <4 x float> %1215, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1217 = bitcast <2 x i64> %1167 to <4 x float>
  %1218 = getelementptr inbounds i16, i16* %1205, i64 256
  %1219 = bitcast i16* %1218 to <2 x float>*
  %1220 = load <2 x float>, <2 x float>* %1219, align 16
  %1221 = shufflevector <2 x float> %1220, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1222 = shufflevector <4 x float> %1217, <4 x float> %1221, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1223 = bitcast <2 x i64> %1171 to <4 x float>
  %1224 = getelementptr inbounds i16, i16* %1205, i64 384
  %1225 = bitcast i16* %1224 to <2 x float>*
  %1226 = load <2 x float>, <2 x float>* %1225, align 16
  %1227 = shufflevector <2 x float> %1226, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1228 = shufflevector <4 x float> %1223, <4 x float> %1227, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1229 = bitcast <2 x i64> %1175 to <4 x float>
  %1230 = getelementptr inbounds i16, i16* %1205, i64 512
  %1231 = bitcast i16* %1230 to <2 x float>*
  %1232 = load <2 x float>, <2 x float>* %1231, align 16
  %1233 = shufflevector <2 x float> %1232, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1234 = shufflevector <4 x float> %1229, <4 x float> %1233, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1235 = bitcast <2 x i64> %1179 to <4 x float>
  %1236 = getelementptr inbounds i16, i16* %1205, i64 640
  %1237 = bitcast i16* %1236 to <2 x float>*
  %1238 = load <2 x float>, <2 x float>* %1237, align 16
  %1239 = shufflevector <2 x float> %1238, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1240 = shufflevector <4 x float> %1235, <4 x float> %1239, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1241 = bitcast <2 x i64> %1183 to <4 x float>
  %1242 = getelementptr inbounds i16, i16* %1205, i64 768
  %1243 = bitcast i16* %1242 to <2 x float>*
  %1244 = load <2 x float>, <2 x float>* %1243, align 16
  %1245 = shufflevector <2 x float> %1244, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1246 = shufflevector <4 x float> %1241, <4 x float> %1245, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1247 = bitcast <2 x i64> %1187 to <4 x float>
  %1248 = getelementptr inbounds i16, i16* %1205, i64 896
  %1249 = bitcast i16* %1248 to <2 x float>*
  %1250 = load <2 x float>, <2 x float>* %1249, align 16
  %1251 = shufflevector <2 x float> %1250, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1252 = shufflevector <4 x float> %1247, <4 x float> %1251, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1253 = shufflevector <4 x i32> %1198, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1254 = shufflevector <4 x i32> %1198, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1255 = lshr i32 %1201, 6
  %1256 = and i32 %1255, 15
  %1257 = zext i32 %1256 to i64
  %1258 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 2, i64 %1257, i64 0
  %1259 = bitcast i8* %1258 to i64*
  %1260 = load i64, i64* %1259, align 8
  %1261 = insertelement <2 x i64> undef, i64 %1260, i32 0
  %1262 = bitcast <2 x i64> %1261 to <16 x i8>
  %1263 = shufflevector <16 x i8> %1262, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1264 = sext <8 x i8> %1263 to <8 x i16>
  %1265 = bitcast <8 x i16> %1264 to <4 x i32>
  %1266 = shufflevector <4 x i32> %1265, <4 x i32> undef, <4 x i32> zeroinitializer
  %1267 = shufflevector <4 x i32> %1265, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1268 = shufflevector <4 x i32> %1265, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1269 = shufflevector <4 x i32> %1265, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1270 = add nsw i32 %1201, %7
  %1271 = ashr i32 %1270, 10
  %1272 = sext i32 %1271 to i64
  %1273 = shl nsw i64 %1272, 7
  %1274 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1273
  %1275 = bitcast <4 x float> %1210 to <8 x i16>
  %1276 = bitcast <4 x float> %1216 to <8 x i16>
  %1277 = shufflevector <8 x i16> %1275, <8 x i16> %1276, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1278 = bitcast <4 x i32> %1199 to <8 x i16>
  %1279 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1277, <8 x i16> %1278) #7
  %1280 = shufflevector <8 x i16> %1275, <8 x i16> %1276, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1281 = bitcast <4 x i32> %1266 to <8 x i16>
  %1282 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1280, <8 x i16> %1281) #7
  %1283 = bitcast <4 x float> %1222 to <8 x i16>
  %1284 = bitcast <4 x float> %1228 to <8 x i16>
  %1285 = shufflevector <8 x i16> %1283, <8 x i16> %1284, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1286 = bitcast <4 x i32> %1253 to <8 x i16>
  %1287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1285, <8 x i16> %1286) #7
  %1288 = shufflevector <8 x i16> %1283, <8 x i16> %1284, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1289 = bitcast <4 x i32> %1267 to <8 x i16>
  %1290 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1288, <8 x i16> %1289) #7
  %1291 = bitcast <4 x float> %1234 to <8 x i16>
  %1292 = bitcast <4 x float> %1240 to <8 x i16>
  %1293 = shufflevector <8 x i16> %1291, <8 x i16> %1292, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1294 = bitcast <4 x i32> %1200 to <8 x i16>
  %1295 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1293, <8 x i16> %1294) #7
  %1296 = shufflevector <8 x i16> %1291, <8 x i16> %1292, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1297 = bitcast <4 x i32> %1268 to <8 x i16>
  %1298 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1296, <8 x i16> %1297) #7
  %1299 = bitcast <4 x float> %1246 to <8 x i16>
  %1300 = bitcast <4 x float> %1252 to <8 x i16>
  %1301 = shufflevector <8 x i16> %1299, <8 x i16> %1300, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1302 = bitcast <4 x i32> %1254 to <8 x i16>
  %1303 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1301, <8 x i16> %1302) #7
  %1304 = shufflevector <8 x i16> %1299, <8 x i16> %1300, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1305 = bitcast <4 x i32> %1269 to <8 x i16>
  %1306 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1304, <8 x i16> %1305) #7
  %1307 = add <4 x i32> %1279, <i32 32, i32 32, i32 32, i32 32>
  %1308 = add <4 x i32> %1307, %1287
  %1309 = add <4 x i32> %1308, %1295
  %1310 = add <4 x i32> %1309, %1303
  %1311 = ashr <4 x i32> %1310, <i32 6, i32 6, i32 6, i32 6>
  %1312 = add <4 x i32> %1282, <i32 32, i32 32, i32 32, i32 32>
  %1313 = add <4 x i32> %1312, %1290
  %1314 = add <4 x i32> %1313, %1298
  %1315 = add <4 x i32> %1314, %1306
  %1316 = ashr <4 x i32> %1315, <i32 6, i32 6, i32 6, i32 6>
  %1317 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1311, <4 x i32> %1316) #7
  %1318 = bitcast <8 x i16> %1317 to <2 x i64>
  %1319 = extractelement <2 x i64> %1318, i32 0
  %1320 = bitcast i16* %1155 to i64*
  store i64 %1319, i64* %1320, align 1
  %1321 = getelementptr inbounds i16, i16* %1155, i64 %11
  %1322 = bitcast <8 x i16> %1317 to <4 x float>
  %1323 = shufflevector <4 x float> %1322, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1324 = bitcast i16* %1321 to <2 x float>*
  store <2 x float> %1323, <2 x float>* %1324, align 1
  %1325 = getelementptr inbounds i16, i16* %1321, i64 %11
  %1326 = add nsw i32 %1153, -2
  %1327 = icmp eq i32 %1326, 0
  br i1 %1327, label %1735, label %1152

1328:                                             ; preds = %1148
  %1329 = sext i32 %8 to i64
  br label %1330

1330:                                             ; preds = %1415, %1328
  %1331 = phi i32 [ %1151, %1328 ], [ %1416, %1415 ]
  %1332 = phi i32 [ %9, %1328 ], [ %1418, %1415 ]
  %1333 = phi i16* [ %1150, %1328 ], [ %1417, %1415 ]
  %1334 = ashr i32 %1331, 10
  %1335 = sext i32 %1334 to i64
  %1336 = shl nsw i64 %1335, 7
  %1337 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1336
  %1338 = lshr i32 %1331, 6
  %1339 = and i32 %1338, 15
  %1340 = zext i32 %1339 to i64
  %1341 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 2, i64 %1340, i64 0
  %1342 = bitcast i8* %1341 to i64*
  %1343 = load i64, i64* %1342, align 8
  %1344 = insertelement <2 x i64> undef, i64 %1343, i32 0
  %1345 = bitcast <2 x i64> %1344 to <16 x i8>
  %1346 = shufflevector <16 x i8> %1345, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1347 = sext <8 x i8> %1346 to <8 x i16>
  %1348 = bitcast <8 x i16> %1347 to <4 x i32>
  %1349 = shufflevector <4 x i32> %1348, <4 x i32> undef, <4 x i32> zeroinitializer
  %1350 = shufflevector <4 x i32> %1348, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1351 = shufflevector <4 x i32> %1348, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %1352 = shufflevector <4 x i32> %1348, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1353 = bitcast <4 x i32> %1349 to <8 x i16>
  %1354 = bitcast <4 x i32> %1350 to <8 x i16>
  %1355 = bitcast <4 x i32> %1351 to <8 x i16>
  %1356 = bitcast <4 x i32> %1352 to <8 x i16>
  br label %1357

1357:                                             ; preds = %1357, %1330
  %1358 = phi i64 [ %1412, %1357 ], [ 0, %1330 ]
  %1359 = phi i16* [ %1413, %1357 ], [ %1337, %1330 ]
  %1360 = bitcast i16* %1359 to <8 x i16>*
  %1361 = load <8 x i16>, <8 x i16>* %1360, align 1
  %1362 = getelementptr inbounds i16, i16* %1359, i64 128
  %1363 = bitcast i16* %1362 to <8 x i16>*
  %1364 = load <8 x i16>, <8 x i16>* %1363, align 1
  %1365 = getelementptr inbounds i16, i16* %1359, i64 256
  %1366 = bitcast i16* %1365 to <8 x i16>*
  %1367 = load <8 x i16>, <8 x i16>* %1366, align 1
  %1368 = getelementptr inbounds i16, i16* %1359, i64 384
  %1369 = bitcast i16* %1368 to <8 x i16>*
  %1370 = load <8 x i16>, <8 x i16>* %1369, align 1
  %1371 = getelementptr inbounds i16, i16* %1359, i64 512
  %1372 = bitcast i16* %1371 to <8 x i16>*
  %1373 = load <8 x i16>, <8 x i16>* %1372, align 1
  %1374 = getelementptr inbounds i16, i16* %1359, i64 640
  %1375 = bitcast i16* %1374 to <8 x i16>*
  %1376 = load <8 x i16>, <8 x i16>* %1375, align 1
  %1377 = getelementptr inbounds i16, i16* %1359, i64 768
  %1378 = bitcast i16* %1377 to <8 x i16>*
  %1379 = load <8 x i16>, <8 x i16>* %1378, align 1
  %1380 = getelementptr inbounds i16, i16* %1359, i64 896
  %1381 = bitcast i16* %1380 to <8 x i16>*
  %1382 = load <8 x i16>, <8 x i16>* %1381, align 1
  %1383 = shufflevector <8 x i16> %1361, <8 x i16> %1364, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1384 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1383, <8 x i16> %1353) #7
  %1385 = shufflevector <8 x i16> %1361, <8 x i16> %1364, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1386 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1385, <8 x i16> %1353) #7
  %1387 = shufflevector <8 x i16> %1367, <8 x i16> %1370, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1388 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1387, <8 x i16> %1354) #7
  %1389 = shufflevector <8 x i16> %1367, <8 x i16> %1370, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1390 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1389, <8 x i16> %1354) #7
  %1391 = shufflevector <8 x i16> %1373, <8 x i16> %1376, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1392 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1391, <8 x i16> %1355) #7
  %1393 = shufflevector <8 x i16> %1373, <8 x i16> %1376, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1394 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1393, <8 x i16> %1355) #7
  %1395 = shufflevector <8 x i16> %1379, <8 x i16> %1382, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1396 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1395, <8 x i16> %1356) #7
  %1397 = shufflevector <8 x i16> %1379, <8 x i16> %1382, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1398 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1397, <8 x i16> %1356) #7
  %1399 = add <4 x i32> %1384, <i32 32, i32 32, i32 32, i32 32>
  %1400 = add <4 x i32> %1399, %1388
  %1401 = add <4 x i32> %1400, %1392
  %1402 = add <4 x i32> %1401, %1396
  %1403 = ashr <4 x i32> %1402, <i32 6, i32 6, i32 6, i32 6>
  %1404 = add <4 x i32> %1386, <i32 32, i32 32, i32 32, i32 32>
  %1405 = add <4 x i32> %1404, %1390
  %1406 = add <4 x i32> %1405, %1394
  %1407 = add <4 x i32> %1406, %1398
  %1408 = ashr <4 x i32> %1407, <i32 6, i32 6, i32 6, i32 6>
  %1409 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1403, <4 x i32> %1408) #7
  %1410 = getelementptr inbounds i16, i16* %1333, i64 %1358
  %1411 = bitcast i16* %1410 to <8 x i16>*
  store <8 x i16> %1409, <8 x i16>* %1411, align 1
  %1412 = add nuw nsw i64 %1358, 8
  %1413 = getelementptr inbounds i16, i16* %1359, i64 8
  %1414 = icmp slt i64 %1412, %1329
  br i1 %1414, label %1357, label %1415

1415:                                             ; preds = %1357
  %1416 = add nsw i32 %1331, %7
  %1417 = getelementptr inbounds i16, i16* %1333, i64 %11
  %1418 = add nsw i32 %1332, -1
  %1419 = icmp eq i32 %1418, 0
  br i1 %1419, label %1735, label %1330

1420:                                             ; preds = %920
  %1421 = icmp eq i32 %8, 4
  %1422 = bitcast i8* %10 to i16*
  %1423 = and i32 %5, 1023
  br i1 %1421, label %1424, label %1504

1424:                                             ; preds = %1420, %1424
  %1425 = phi i32 [ %1502, %1424 ], [ %9, %1420 ]
  %1426 = phi i32 [ %1476, %1424 ], [ %1423, %1420 ]
  %1427 = phi i16* [ %1501, %1424 ], [ %1422, %1420 ]
  %1428 = phi i16* [ %1480, %1424 ], [ %51, %1420 ]
  %1429 = bitcast i16* %1428 to i64*
  %1430 = load i64, i64* %1429, align 1
  %1431 = insertelement <2 x i64> undef, i64 %1430, i32 0
  %1432 = getelementptr inbounds i16, i16* %1428, i64 128
  %1433 = bitcast i16* %1432 to i64*
  %1434 = load i64, i64* %1433, align 1
  %1435 = insertelement <2 x i64> undef, i64 %1434, i32 0
  %1436 = lshr i32 %1426, 6
  %1437 = and i32 %1436, 15
  %1438 = zext i32 %1437 to i64
  %1439 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 3, i64 %1438, i64 3
  %1440 = bitcast i8* %1439 to i32*
  %1441 = load i32, i32* %1440, align 1
  %1442 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1441, i32 0
  %1443 = bitcast <4 x i32> %1442 to <16 x i8>
  %1444 = shufflevector <16 x i8> %1443, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1445 = sext <8 x i8> %1444 to <8 x i16>
  %1446 = bitcast <8 x i16> %1445 to <4 x i32>
  %1447 = add nsw i32 %1426, %7
  %1448 = ashr i32 %1447, 10
  %1449 = sext i32 %1448 to i64
  %1450 = shl nsw i64 %1449, 7
  %1451 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1450
  %1452 = bitcast <2 x i64> %1431 to <4 x float>
  %1453 = bitcast i16* %1451 to <2 x float>*
  %1454 = load <2 x float>, <2 x float>* %1453, align 16
  %1455 = shufflevector <2 x float> %1454, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1456 = shufflevector <4 x float> %1452, <4 x float> %1455, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1457 = bitcast <2 x i64> %1435 to <4 x float>
  %1458 = getelementptr inbounds i16, i16* %1451, i64 128
  %1459 = bitcast i16* %1458 to <2 x float>*
  %1460 = load <2 x float>, <2 x float>* %1459, align 16
  %1461 = shufflevector <2 x float> %1460, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1462 = shufflevector <4 x float> %1457, <4 x float> %1461, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1463 = shufflevector <4 x i32> %1446, <4 x i32> undef, <4 x i32> zeroinitializer
  %1464 = lshr i32 %1447, 6
  %1465 = and i32 %1464, 15
  %1466 = zext i32 %1465 to i64
  %1467 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 3, i64 %1466, i64 3
  %1468 = bitcast i8* %1467 to i32*
  %1469 = load i32, i32* %1468, align 1
  %1470 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1469, i32 0
  %1471 = bitcast <4 x i32> %1470 to <16 x i8>
  %1472 = shufflevector <16 x i8> %1471, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1473 = sext <8 x i8> %1472 to <8 x i16>
  %1474 = bitcast <8 x i16> %1473 to <4 x i32>
  %1475 = shufflevector <4 x i32> %1474, <4 x i32> undef, <4 x i32> zeroinitializer
  %1476 = add nsw i32 %1447, %7
  %1477 = ashr i32 %1476, 10
  %1478 = sext i32 %1477 to i64
  %1479 = shl nsw i64 %1478, 7
  %1480 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1479
  %1481 = bitcast <4 x float> %1456 to <8 x i16>
  %1482 = bitcast <4 x float> %1462 to <8 x i16>
  %1483 = shufflevector <8 x i16> %1481, <8 x i16> %1482, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1484 = bitcast <4 x i32> %1463 to <8 x i16>
  %1485 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1483, <8 x i16> %1484) #7
  %1486 = shufflevector <8 x i16> %1481, <8 x i16> %1482, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1487 = bitcast <4 x i32> %1475 to <8 x i16>
  %1488 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1486, <8 x i16> %1487) #7
  %1489 = add <4 x i32> %1485, <i32 32, i32 32, i32 32, i32 32>
  %1490 = ashr <4 x i32> %1489, <i32 6, i32 6, i32 6, i32 6>
  %1491 = add <4 x i32> %1488, <i32 32, i32 32, i32 32, i32 32>
  %1492 = ashr <4 x i32> %1491, <i32 6, i32 6, i32 6, i32 6>
  %1493 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1490, <4 x i32> %1492) #7
  %1494 = bitcast <8 x i16> %1493 to <2 x i64>
  %1495 = extractelement <2 x i64> %1494, i32 0
  %1496 = bitcast i16* %1427 to i64*
  store i64 %1495, i64* %1496, align 1
  %1497 = getelementptr inbounds i16, i16* %1427, i64 %11
  %1498 = bitcast <8 x i16> %1493 to <4 x float>
  %1499 = shufflevector <4 x float> %1498, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1500 = bitcast i16* %1497 to <2 x float>*
  store <2 x float> %1499, <2 x float>* %1500, align 1
  %1501 = getelementptr inbounds i16, i16* %1497, i64 %11
  %1502 = add nsw i32 %1425, -2
  %1503 = icmp eq i32 %1502, 0
  br i1 %1503, label %1735, label %1424

1504:                                             ; preds = %1420
  %1505 = sext i32 %8 to i64
  br label %1506

1506:                                             ; preds = %1549, %1504
  %1507 = phi i32 [ %1423, %1504 ], [ %1550, %1549 ]
  %1508 = phi i32 [ %9, %1504 ], [ %1552, %1549 ]
  %1509 = phi i16* [ %1422, %1504 ], [ %1551, %1549 ]
  %1510 = ashr i32 %1507, 10
  %1511 = sext i32 %1510 to i64
  %1512 = shl nsw i64 %1511, 7
  %1513 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1512
  %1514 = lshr i32 %1507, 6
  %1515 = and i32 %1514, 15
  %1516 = zext i32 %1515 to i64
  %1517 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 3, i64 %1516, i64 3
  %1518 = bitcast i8* %1517 to i32*
  %1519 = load i32, i32* %1518, align 1
  %1520 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1519, i32 0
  %1521 = bitcast <4 x i32> %1520 to <16 x i8>
  %1522 = shufflevector <16 x i8> %1521, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1523 = sext <8 x i8> %1522 to <8 x i16>
  %1524 = bitcast <8 x i16> %1523 to <4 x i32>
  %1525 = shufflevector <4 x i32> %1524, <4 x i32> undef, <4 x i32> zeroinitializer
  %1526 = bitcast <4 x i32> %1525 to <8 x i16>
  br label %1527

1527:                                             ; preds = %1527, %1506
  %1528 = phi i64 [ %1546, %1527 ], [ 0, %1506 ]
  %1529 = phi i16* [ %1547, %1527 ], [ %1513, %1506 ]
  %1530 = bitcast i16* %1529 to <8 x i16>*
  %1531 = load <8 x i16>, <8 x i16>* %1530, align 1
  %1532 = getelementptr inbounds i16, i16* %1529, i64 128
  %1533 = bitcast i16* %1532 to <8 x i16>*
  %1534 = load <8 x i16>, <8 x i16>* %1533, align 1
  %1535 = shufflevector <8 x i16> %1531, <8 x i16> %1534, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1536 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1535, <8 x i16> %1526) #7
  %1537 = shufflevector <8 x i16> %1531, <8 x i16> %1534, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1538 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1537, <8 x i16> %1526) #7
  %1539 = add <4 x i32> %1536, <i32 32, i32 32, i32 32, i32 32>
  %1540 = ashr <4 x i32> %1539, <i32 6, i32 6, i32 6, i32 6>
  %1541 = add <4 x i32> %1538, <i32 32, i32 32, i32 32, i32 32>
  %1542 = ashr <4 x i32> %1541, <i32 6, i32 6, i32 6, i32 6>
  %1543 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1540, <4 x i32> %1542) #7
  %1544 = getelementptr inbounds i16, i16* %1509, i64 %1528
  %1545 = bitcast i16* %1544 to <8 x i16>*
  store <8 x i16> %1543, <8 x i16>* %1545, align 1
  %1546 = add nuw nsw i64 %1528, 8
  %1547 = getelementptr inbounds i16, i16* %1529, i64 8
  %1548 = icmp slt i64 %1546, %1505
  br i1 %1548, label %1527, label %1549

1549:                                             ; preds = %1527
  %1550 = add nsw i32 %1507, %7
  %1551 = getelementptr inbounds i16, i16* %1509, i64 %11
  %1552 = add nsw i32 %1508, -1
  %1553 = icmp eq i32 %1552, 0
  br i1 %1553, label %1735, label %1506

1554:                                             ; preds = %920
  %1555 = icmp eq i32 %8, 4
  %1556 = bitcast i8* %10 to i16*
  %1557 = and i32 %5, 1023
  %1558 = sext i32 %44 to i64
  br i1 %1555, label %1559, label %1671

1559:                                             ; preds = %1554, %1559
  %1560 = phi i32 [ %1669, %1559 ], [ %9, %1554 ]
  %1561 = phi i32 [ %1633, %1559 ], [ %1557, %1554 ]
  %1562 = phi i16* [ %1668, %1559 ], [ %1556, %1554 ]
  %1563 = phi i16* [ %1637, %1559 ], [ %51, %1554 ]
  %1564 = bitcast i16* %1563 to i64*
  %1565 = load i64, i64* %1564, align 1
  %1566 = insertelement <2 x i64> undef, i64 %1565, i32 0
  %1567 = getelementptr inbounds i16, i16* %1563, i64 128
  %1568 = bitcast i16* %1567 to i64*
  %1569 = load i64, i64* %1568, align 1
  %1570 = insertelement <2 x i64> undef, i64 %1569, i32 0
  %1571 = getelementptr inbounds i16, i16* %1563, i64 256
  %1572 = bitcast i16* %1571 to i64*
  %1573 = load i64, i64* %1572, align 1
  %1574 = insertelement <2 x i64> undef, i64 %1573, i32 0
  %1575 = getelementptr inbounds i16, i16* %1563, i64 384
  %1576 = bitcast i16* %1575 to i64*
  %1577 = load i64, i64* %1576, align 1
  %1578 = insertelement <2 x i64> undef, i64 %1577, i32 0
  %1579 = lshr i32 %1561, 6
  %1580 = and i32 %1579, 15
  %1581 = zext i32 %1580 to i64
  %1582 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %1558, i64 %1581, i64 2
  %1583 = bitcast i8* %1582 to i32*
  %1584 = load i32, i32* %1583, align 2
  %1585 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1584, i32 0
  %1586 = bitcast <4 x i32> %1585 to <16 x i8>
  %1587 = shufflevector <16 x i8> %1586, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1588 = sext <8 x i8> %1587 to <8 x i16>
  %1589 = bitcast <8 x i16> %1588 to <4 x i32>
  %1590 = shufflevector <4 x i32> %1589, <4 x i32> undef, <4 x i32> zeroinitializer
  %1591 = add nsw i32 %1561, %7
  %1592 = ashr i32 %1591, 10
  %1593 = sext i32 %1592 to i64
  %1594 = shl nsw i64 %1593, 7
  %1595 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1594
  %1596 = bitcast <2 x i64> %1566 to <4 x float>
  %1597 = bitcast i16* %1595 to <2 x float>*
  %1598 = load <2 x float>, <2 x float>* %1597, align 16
  %1599 = shufflevector <2 x float> %1598, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1600 = shufflevector <4 x float> %1596, <4 x float> %1599, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1601 = bitcast <2 x i64> %1570 to <4 x float>
  %1602 = getelementptr inbounds i16, i16* %1595, i64 128
  %1603 = bitcast i16* %1602 to <2 x float>*
  %1604 = load <2 x float>, <2 x float>* %1603, align 16
  %1605 = shufflevector <2 x float> %1604, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1606 = shufflevector <4 x float> %1601, <4 x float> %1605, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1607 = bitcast <2 x i64> %1574 to <4 x float>
  %1608 = getelementptr inbounds i16, i16* %1595, i64 256
  %1609 = bitcast i16* %1608 to <2 x float>*
  %1610 = load <2 x float>, <2 x float>* %1609, align 16
  %1611 = shufflevector <2 x float> %1610, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1612 = shufflevector <4 x float> %1607, <4 x float> %1611, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1613 = bitcast <2 x i64> %1578 to <4 x float>
  %1614 = getelementptr inbounds i16, i16* %1595, i64 384
  %1615 = bitcast i16* %1614 to <2 x float>*
  %1616 = load <2 x float>, <2 x float>* %1615, align 16
  %1617 = shufflevector <2 x float> %1616, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1618 = shufflevector <4 x float> %1613, <4 x float> %1617, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1619 = shufflevector <4 x i32> %1589, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1620 = lshr i32 %1591, 6
  %1621 = and i32 %1620, 15
  %1622 = zext i32 %1621 to i64
  %1623 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %1558, i64 %1622, i64 2
  %1624 = bitcast i8* %1623 to i32*
  %1625 = load i32, i32* %1624, align 2
  %1626 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1625, i32 0
  %1627 = bitcast <4 x i32> %1626 to <16 x i8>
  %1628 = shufflevector <16 x i8> %1627, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1629 = sext <8 x i8> %1628 to <8 x i16>
  %1630 = bitcast <8 x i16> %1629 to <4 x i32>
  %1631 = shufflevector <4 x i32> %1630, <4 x i32> undef, <4 x i32> zeroinitializer
  %1632 = shufflevector <4 x i32> %1630, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1633 = add nsw i32 %1591, %7
  %1634 = ashr i32 %1633, 10
  %1635 = sext i32 %1634 to i64
  %1636 = shl nsw i64 %1635, 7
  %1637 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1636
  %1638 = bitcast <4 x float> %1600 to <8 x i16>
  %1639 = bitcast <4 x float> %1606 to <8 x i16>
  %1640 = shufflevector <8 x i16> %1638, <8 x i16> %1639, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1641 = bitcast <4 x i32> %1590 to <8 x i16>
  %1642 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1640, <8 x i16> %1641) #7
  %1643 = shufflevector <8 x i16> %1638, <8 x i16> %1639, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1644 = bitcast <4 x i32> %1631 to <8 x i16>
  %1645 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1643, <8 x i16> %1644) #7
  %1646 = bitcast <4 x float> %1612 to <8 x i16>
  %1647 = bitcast <4 x float> %1618 to <8 x i16>
  %1648 = shufflevector <8 x i16> %1646, <8 x i16> %1647, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1649 = bitcast <4 x i32> %1619 to <8 x i16>
  %1650 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1648, <8 x i16> %1649) #7
  %1651 = shufflevector <8 x i16> %1646, <8 x i16> %1647, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1652 = bitcast <4 x i32> %1632 to <8 x i16>
  %1653 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1651, <8 x i16> %1652) #7
  %1654 = add <4 x i32> %1642, <i32 32, i32 32, i32 32, i32 32>
  %1655 = add <4 x i32> %1654, %1650
  %1656 = ashr <4 x i32> %1655, <i32 6, i32 6, i32 6, i32 6>
  %1657 = add <4 x i32> %1645, <i32 32, i32 32, i32 32, i32 32>
  %1658 = add <4 x i32> %1657, %1653
  %1659 = ashr <4 x i32> %1658, <i32 6, i32 6, i32 6, i32 6>
  %1660 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1656, <4 x i32> %1659) #7
  %1661 = bitcast <8 x i16> %1660 to <2 x i64>
  %1662 = extractelement <2 x i64> %1661, i32 0
  %1663 = bitcast i16* %1562 to i64*
  store i64 %1662, i64* %1663, align 1
  %1664 = getelementptr inbounds i16, i16* %1562, i64 %11
  %1665 = bitcast <8 x i16> %1660 to <4 x float>
  %1666 = shufflevector <4 x float> %1665, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1667 = bitcast i16* %1664 to <2 x float>*
  store <2 x float> %1666, <2 x float>* %1667, align 1
  %1668 = getelementptr inbounds i16, i16* %1664, i64 %11
  %1669 = add nsw i32 %1560, -2
  %1670 = icmp eq i32 %1669, 0
  br i1 %1670, label %1735, label %1559

1671:                                             ; preds = %1554
  %1672 = sext i32 %8 to i64
  br label %1673

1673:                                             ; preds = %1730, %1671
  %1674 = phi i32 [ %1557, %1671 ], [ %1731, %1730 ]
  %1675 = phi i32 [ %9, %1671 ], [ %1733, %1730 ]
  %1676 = phi i16* [ %1556, %1671 ], [ %1732, %1730 ]
  %1677 = ashr i32 %1674, 10
  %1678 = sext i32 %1677 to i64
  %1679 = shl nsw i64 %1678, 7
  %1680 = getelementptr inbounds [33792 x i16], [33792 x i16]* %13, i64 0, i64 %1679
  %1681 = lshr i32 %1674, 6
  %1682 = and i32 %1681, 15
  %1683 = zext i32 %1682 to i64
  %1684 = getelementptr inbounds [6 x [16 x [8 x i8]]], [6 x [16 x [8 x i8]]]* @_ZN7libgav120kHalfSubPixelFiltersE, i64 0, i64 %1558, i64 %1683, i64 2
  %1685 = bitcast i8* %1684 to i32*
  %1686 = load i32, i32* %1685, align 2
  %1687 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %1686, i32 0
  %1688 = bitcast <4 x i32> %1687 to <16 x i8>
  %1689 = shufflevector <16 x i8> %1688, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1690 = sext <8 x i8> %1689 to <8 x i16>
  %1691 = bitcast <8 x i16> %1690 to <4 x i32>
  %1692 = shufflevector <4 x i32> %1691, <4 x i32> undef, <4 x i32> zeroinitializer
  %1693 = shufflevector <4 x i32> %1691, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %1694 = bitcast <4 x i32> %1692 to <8 x i16>
  %1695 = bitcast <4 x i32> %1693 to <8 x i16>
  br label %1696

1696:                                             ; preds = %1696, %1673
  %1697 = phi i64 [ %1727, %1696 ], [ 0, %1673 ]
  %1698 = phi i16* [ %1728, %1696 ], [ %1680, %1673 ]
  %1699 = bitcast i16* %1698 to <8 x i16>*
  %1700 = load <8 x i16>, <8 x i16>* %1699, align 1
  %1701 = getelementptr inbounds i16, i16* %1698, i64 128
  %1702 = bitcast i16* %1701 to <8 x i16>*
  %1703 = load <8 x i16>, <8 x i16>* %1702, align 1
  %1704 = getelementptr inbounds i16, i16* %1698, i64 256
  %1705 = bitcast i16* %1704 to <8 x i16>*
  %1706 = load <8 x i16>, <8 x i16>* %1705, align 1
  %1707 = getelementptr inbounds i16, i16* %1698, i64 384
  %1708 = bitcast i16* %1707 to <8 x i16>*
  %1709 = load <8 x i16>, <8 x i16>* %1708, align 1
  %1710 = shufflevector <8 x i16> %1700, <8 x i16> %1703, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1711 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1710, <8 x i16> %1694) #7
  %1712 = shufflevector <8 x i16> %1700, <8 x i16> %1703, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1713 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1712, <8 x i16> %1694) #7
  %1714 = shufflevector <8 x i16> %1706, <8 x i16> %1709, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1715 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1714, <8 x i16> %1695) #7
  %1716 = shufflevector <8 x i16> %1706, <8 x i16> %1709, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1717 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %1716, <8 x i16> %1695) #7
  %1718 = add <4 x i32> %1711, <i32 32, i32 32, i32 32, i32 32>
  %1719 = add <4 x i32> %1718, %1715
  %1720 = ashr <4 x i32> %1719, <i32 6, i32 6, i32 6, i32 6>
  %1721 = add <4 x i32> %1713, <i32 32, i32 32, i32 32, i32 32>
  %1722 = add <4 x i32> %1721, %1717
  %1723 = ashr <4 x i32> %1722, <i32 6, i32 6, i32 6, i32 6>
  %1724 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1720, <4 x i32> %1723) #7
  %1725 = getelementptr inbounds i16, i16* %1676, i64 %1697
  %1726 = bitcast i16* %1725 to <8 x i16>*
  store <8 x i16> %1724, <8 x i16>* %1726, align 1
  %1727 = add nuw nsw i64 %1697, 8
  %1728 = getelementptr inbounds i16, i16* %1698, i64 8
  %1729 = icmp slt i64 %1727, %1672
  br i1 %1729, label %1696, label %1730

1730:                                             ; preds = %1696
  %1731 = add nsw i32 %1674, %7
  %1732 = getelementptr inbounds i16, i16* %1676, i64 %11
  %1733 = add nsw i32 %1675, -1
  %1734 = icmp eq i32 %1733, 0
  br i1 %1734, label %1735, label %1673

1735:                                             ; preds = %1549, %1424, %1415, %1152, %1143, %926, %1730, %1559
  call void @llvm.lifetime.end.p0i8(i64 67584, i8* nonnull %43) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #6

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8>, <16 x i8>) #6

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #6

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
