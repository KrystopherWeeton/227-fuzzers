; ModuleID = '../../third_party/skia/src/core/SkPathMeasure.cpp'
source_filename = "../../third_party/skia/src/core/SkPathMeasure.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPathMeasure = type { %class.SkContourMeasureIter, %class.sk_sp }
%class.SkContourMeasureIter = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkContourMeasureIter::Impl"* }
%"class.SkContourMeasureIter::Impl" = type opaque
%class.sk_sp = type { %class.SkContourMeasure* }
%class.SkContourMeasure = type <{ %class.SkRefCnt.base, [4 x i8], %class.SkTDArray, %class.SkTDArray.2, float, i8, [3 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkTDArray = type { %"struct.SkContourMeasure::Segment"*, i32, i32 }
%"struct.SkContourMeasure::Segment" = type { float, i32, i32 }
%class.SkTDArray.2 = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkPath = type <{ %class.sk_sp.3, i32, %"struct.std::__1::atomic.6", %"struct.std::__1::atomic.6", i8, i8 }>
%class.sk_sp.3 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray.2, %class.SkTDArray.4, %class.SkTDArray.5, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray.4 = type { i8*, i32, i32 }
%class.SkTDArray.5 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.11 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.6" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.11 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.12", [3 x i8] }
%"struct.std::__1::atomic.12" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl.14" }
%"struct.std::__1::__cxx_atomic_impl.14" = type { %"struct.std::__1::__cxx_atomic_base_impl.15" }
%"struct.std::__1::__cxx_atomic_base_impl.15" = type { i8 }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i8 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }

@_ZN13SkPathMeasureC1Ev = hidden unnamed_addr alias void (%class.SkPathMeasure*), void (%class.SkPathMeasure*)* @_ZN13SkPathMeasureC2Ev
@_ZN13SkPathMeasureC1ERK6SkPathbf = hidden unnamed_addr alias void (%class.SkPathMeasure*, %class.SkPath*, i1, float), void (%class.SkPathMeasure*, %class.SkPath*, i1, float)* @_ZN13SkPathMeasureC2ERK6SkPathbf
@_ZN13SkPathMeasureD1Ev = hidden unnamed_addr alias void (%class.SkPathMeasure*), void (%class.SkPathMeasure*)* @_ZN13SkPathMeasureD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkPathMeasureC2Ev(%class.SkPathMeasure*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 0
  tail call void @_ZN20SkContourMeasureIterC1Ev(%class.SkContourMeasureIter* %2) #5
  %3 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1, i32 0
  store %class.SkContourMeasure* null, %class.SkContourMeasure** %3, align 8
  ret void
}

declare void @_ZN20SkContourMeasureIterC1Ev(%class.SkContourMeasureIter*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkPathMeasureC2ERK6SkPathbf(%class.SkPathMeasure*, %class.SkPath* dereferenceable(16), i1 zeroext, float) unnamed_addr #0 align 2 {
  %5 = alloca %class.sk_sp, align 8
  %6 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 0
  tail call void @_ZN20SkContourMeasureIterC1ERK6SkPathbf(%class.SkContourMeasureIter* %6, %class.SkPath* dereferenceable(16) %1, i1 zeroext %2, float %3) #5
  %7 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1
  %8 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %7, i64 0, i32 0
  store %class.SkContourMeasure* null, %class.SkContourMeasure** %8, align 8
  %9 = bitcast %class.sk_sp* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  call void @_ZN20SkContourMeasureIter4nextEv(%class.sk_sp* nonnull sret %5, %class.SkContourMeasureIter* %6) #5
  %10 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %5, i64 0, i32 0
  %11 = bitcast %class.sk_sp* %5 to i64*
  %12 = load i64, i64* %11, align 8
  store %class.SkContourMeasure* null, %class.SkContourMeasure** %10, align 8
  %13 = load %class.SkContourMeasure*, %class.SkContourMeasure** %8, align 8
  %14 = bitcast %class.sk_sp* %7 to i64*
  store i64 %12, i64* %14, align 8
  %15 = icmp eq %class.SkContourMeasure* %13, null
  br i1 %15, label %39, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %class.SkContourMeasure, %class.SkContourMeasure* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw add i32* %17, i32 -1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %26

20:                                               ; preds = %16
  %21 = bitcast %class.SkContourMeasure* %13 to %class.SkRefCntBase*
  %22 = bitcast %class.SkContourMeasure* %13 to void (%class.SkRefCntBase*)***
  %23 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %22, align 8
  %24 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %23, i64 2
  %25 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, align 8
  call void %25(%class.SkRefCntBase* nonnull %21) #5
  br label %26

26:                                               ; preds = %16, %20
  %27 = load %class.SkContourMeasure*, %class.SkContourMeasure** %10, align 8
  %28 = icmp eq %class.SkContourMeasure* %27, null
  br i1 %28, label %39, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %class.SkContourMeasure, %class.SkContourMeasure* %27, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = atomicrmw add i32* %30, i32 -1 acq_rel
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %39

33:                                               ; preds = %29
  %34 = bitcast %class.SkContourMeasure* %27 to %class.SkRefCntBase*
  %35 = bitcast %class.SkContourMeasure* %27 to void (%class.SkRefCntBase*)***
  %36 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %35, align 8
  %37 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %36, i64 2
  %38 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, align 8
  call void %38(%class.SkRefCntBase* nonnull %34) #5
  br label %39

39:                                               ; preds = %4, %26, %29, %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  ret void
}

declare void @_ZN20SkContourMeasureIterC1ERK6SkPathbf(%class.SkContourMeasureIter*, %class.SkPath* dereferenceable(16), i1 zeroext, float) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN20SkContourMeasureIter4nextEv(%class.sk_sp* sret, %class.SkContourMeasureIter*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkPathMeasureD2Ev(%class.SkPathMeasure*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1, i32 0
  %3 = load %class.SkContourMeasure*, %class.SkContourMeasure** %2, align 8
  %4 = icmp eq %class.SkContourMeasure* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkContourMeasure, %class.SkContourMeasure* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw add i32* %6, i32 -1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = bitcast %class.SkContourMeasure* %3 to %class.SkRefCntBase*
  %11 = bitcast %class.SkContourMeasure* %3 to void (%class.SkRefCntBase*)***
  %12 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %11, align 8
  %13 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %12, i64 2
  %14 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, align 8
  tail call void %14(%class.SkRefCntBase* nonnull %10) #5
  br label %15

15:                                               ; preds = %1, %5, %9
  %16 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 0
  tail call void @_ZN20SkContourMeasureIterD1Ev(%class.SkContourMeasureIter* %16) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN20SkContourMeasureIterD1Ev(%class.SkContourMeasureIter*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkPathMeasure7setPathEPK6SkPathb(%class.SkPathMeasure*, %class.SkPath*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkPath, align 8
  %5 = alloca %class.sk_sp, align 8
  %6 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 0
  %7 = bitcast %class.SkPath* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #5
  %8 = icmp eq %class.SkPath* %1, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %3
  call void @_ZN6SkPathC1ERKS_(%class.SkPath* nonnull %4, %class.SkPath* nonnull dereferenceable(16) %1) #5
  br label %11

10:                                               ; preds = %3
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %4) #5
  br label %11

11:                                               ; preds = %10, %9
  call void @_ZN20SkContourMeasureIter5resetERK6SkPathbf(%class.SkContourMeasureIter* %6, %class.SkPath* nonnull dereferenceable(16) %4, i1 zeroext %2, float 1.000000e+00) #5
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #5
  %12 = bitcast %class.sk_sp* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  call void @_ZN20SkContourMeasureIter4nextEv(%class.sk_sp* nonnull sret %5, %class.SkContourMeasureIter* %6) #5
  %13 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1
  %14 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %5, i64 0, i32 0
  %15 = bitcast %class.sk_sp* %5 to i64*
  %16 = load i64, i64* %15, align 8
  store %class.SkContourMeasure* null, %class.SkContourMeasure** %14, align 8
  %17 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %13, i64 0, i32 0
  %18 = load %class.SkContourMeasure*, %class.SkContourMeasure** %17, align 8
  %19 = bitcast %class.sk_sp* %13 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq %class.SkContourMeasure* %18, null
  br i1 %20, label %31, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %class.SkContourMeasure, %class.SkContourMeasure* %18, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw add i32* %22, i32 -1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %31

25:                                               ; preds = %21
  %26 = bitcast %class.SkContourMeasure* %18 to %class.SkRefCntBase*
  %27 = bitcast %class.SkContourMeasure* %18 to void (%class.SkRefCntBase*)***
  %28 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %27, align 8
  %29 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %28, i64 2
  %30 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %29, align 8
  call void %30(%class.SkRefCntBase* nonnull %26) #5
  br label %31

31:                                               ; preds = %11, %21, %25
  %32 = load %class.SkContourMeasure*, %class.SkContourMeasure** %14, align 8
  %33 = icmp eq %class.SkContourMeasure* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds %class.SkContourMeasure, %class.SkContourMeasure* %32, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw add i32* %35, i32 -1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = bitcast %class.SkContourMeasure* %32 to %class.SkRefCntBase*
  %40 = bitcast %class.SkContourMeasure* %32 to void (%class.SkRefCntBase*)***
  %41 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %40, align 8
  %42 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, i64 2
  %43 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %42, align 8
  call void %43(%class.SkRefCntBase* nonnull %39) #5
  br label %44

44:                                               ; preds = %31, %34, %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  ret void
}

declare void @_ZN20SkContourMeasureIter5resetERK6SkPathbf(%class.SkContourMeasureIter*, %class.SkPath* dereferenceable(16), i1 zeroext, float) local_unnamed_addr #1

declare void @_ZN6SkPathC1ERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) unnamed_addr #1

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1, i32 0
  %3 = load %class.SkContourMeasure*, %class.SkContourMeasure** %2, align 8
  %4 = icmp eq %class.SkContourMeasure* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkContourMeasure, %class.SkContourMeasure* %3, i64 0, i32 4
  %7 = load float, float* %6, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi float [ %7, %5 ], [ 0.000000e+00, %1 ]
  ret float %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13SkPathMeasure9getPosTanEfP7SkPointS1_(%class.SkPathMeasure* nocapture readonly, float, %struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1, i32 0
  %6 = load %class.SkContourMeasure*, %class.SkContourMeasure** %5, align 8
  %7 = icmp eq %class.SkContourMeasure* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = tail call zeroext i1 @_ZNK16SkContourMeasure9getPosTanEfP7SkPointS1_(%class.SkContourMeasure* nonnull %6, float %1, %struct.SkPoint* %2, %struct.SkPoint* %3) #5
  br label %10

10:                                               ; preds = %4, %8
  %11 = phi i1 [ false, %4 ], [ %9, %8 ]
  ret i1 %11
}

declare zeroext i1 @_ZNK16SkContourMeasure9getPosTanEfP7SkPointS1_(%class.SkContourMeasure*, float, %struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13SkPathMeasure9getMatrixEfP8SkMatrixNS_11MatrixFlagsE(%class.SkPathMeasure* nocapture readonly, float, %class.SkMatrix*, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1, i32 0
  %6 = load %class.SkContourMeasure*, %class.SkContourMeasure** %5, align 8
  %7 = icmp eq %class.SkContourMeasure* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = tail call zeroext i1 @_ZNK16SkContourMeasure9getMatrixEfP8SkMatrixNS_11MatrixFlagsE(%class.SkContourMeasure* nonnull %6, float %1, %class.SkMatrix* %2, i32 %3) #5
  br label %10

10:                                               ; preds = %4, %8
  %11 = phi i1 [ false, %4 ], [ %9, %8 ]
  ret i1 %11
}

declare zeroext i1 @_ZNK16SkContourMeasure9getMatrixEfP8SkMatrixNS_11MatrixFlagsE(%class.SkContourMeasure*, float, %class.SkMatrix*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure* nocapture readonly, float, float, %class.SkPath*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1, i32 0
  %7 = load %class.SkContourMeasure*, %class.SkContourMeasure** %6, align 8
  %8 = icmp eq %class.SkContourMeasure* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = tail call zeroext i1 @_ZNK16SkContourMeasure10getSegmentEffP6SkPathb(%class.SkContourMeasure* nonnull %7, float %1, float %2, %class.SkPath* %3, i1 zeroext %4) #5
  br label %11

11:                                               ; preds = %5, %9
  %12 = phi i1 [ false, %5 ], [ %10, %9 ]
  ret i1 %12
}

declare zeroext i1 @_ZNK16SkContourMeasure10getSegmentEffP6SkPathb(%class.SkContourMeasure*, float, float, %class.SkPath*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN13SkPathMeasure8isClosedEv(%class.SkPathMeasure* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1, i32 0
  %3 = load %class.SkContourMeasure*, %class.SkContourMeasure** %2, align 8
  %4 = icmp eq %class.SkContourMeasure* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkContourMeasure, %class.SkContourMeasure* %3, i64 0, i32 5
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = icmp ne i8 %7, 0
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp, align 8
  %3 = bitcast %class.sk_sp* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #5
  %4 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 0
  call void @_ZN20SkContourMeasureIter4nextEv(%class.sk_sp* nonnull sret %2, %class.SkContourMeasureIter* %4) #5
  %5 = getelementptr inbounds %class.SkPathMeasure, %class.SkPathMeasure* %0, i64 0, i32 1
  %6 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %7 = bitcast %class.sk_sp* %2 to i64*
  %8 = load i64, i64* %7, align 8
  store %class.SkContourMeasure* null, %class.SkContourMeasure** %6, align 8
  %9 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %5, i64 0, i32 0
  %10 = load %class.SkContourMeasure*, %class.SkContourMeasure** %9, align 8
  %11 = bitcast %class.sk_sp* %5 to i64*
  store i64 %8, i64* %11, align 8
  %12 = icmp eq %class.SkContourMeasure* %10, null
  br i1 %12, label %23, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %class.SkContourMeasure, %class.SkContourMeasure* %10, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 -1 acq_rel
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = bitcast %class.SkContourMeasure* %10 to %class.SkRefCntBase*
  %19 = bitcast %class.SkContourMeasure* %10 to void (%class.SkRefCntBase*)***
  %20 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %19, align 8
  %21 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %20, i64 2
  %22 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %21, align 8
  call void %22(%class.SkRefCntBase* nonnull %18) #5
  br label %23

23:                                               ; preds = %1, %13, %17
  %24 = load %class.SkContourMeasure*, %class.SkContourMeasure** %6, align 8
  %25 = icmp eq %class.SkContourMeasure* %24, null
  br i1 %25, label %36, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %class.SkContourMeasure, %class.SkContourMeasure* %24, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw add i32* %27, i32 -1 acq_rel
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %36

30:                                               ; preds = %26
  %31 = bitcast %class.SkContourMeasure* %24 to %class.SkRefCntBase*
  %32 = bitcast %class.SkContourMeasure* %24 to void (%class.SkRefCntBase*)***
  %33 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %32, align 8
  %34 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %33, i64 2
  %35 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %34, align 8
  call void %35(%class.SkRefCntBase* nonnull %31) #5
  br label %36

36:                                               ; preds = %23, %26, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #5
  %37 = load %class.SkContourMeasure*, %class.SkContourMeasure** %9, align 8
  %38 = icmp ne %class.SkContourMeasure* %37, null
  ret i1 %38
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
