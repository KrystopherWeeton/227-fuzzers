; ModuleID = '../../v8/src/base/cpu.cc'
source_filename = "../../v8/src/base/cpu.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.v8::base::CPU" = type <{ [13 x i8], [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8] }>

@_ZN2v84base3CPUC1Ev = hidden unnamed_addr alias void (%"class.v8::base::CPU"*), void (%"class.v8::base::CPU"*)* @_ZN2v84base3CPUC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v84base3CPUC2Ev(%"class.v8::base::CPU"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 4
  %5 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 5
  %6 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 6
  %7 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 7
  %8 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 10
  %9 = bitcast i32* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 32, i1 false)
  store i32 -1, i32* %8, align 4
  %10 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 11
  %11 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 14
  %12 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 15
  %13 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 16
  %14 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 17
  %15 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 18
  %16 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 19
  %17 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 20
  %18 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 21
  %19 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 22
  %20 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 23
  %21 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 24
  %22 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 25
  %23 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 26
  %24 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 27
  %25 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 28
  %26 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 29
  %27 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 30
  %28 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 31
  %29 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 32
  %30 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 41
  %31 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 42
  %32 = bitcast %"class.v8::base::CPU"* %0 to i64*
  %33 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %33, i8 0, i64 42, i1 false)
  store i64 31093567915781717, i64* %32, align 1
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0, i32 0) #2, !srcloc !2
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3
  %39 = bitcast %"class.v8::base::CPU"* %0 to i32*
  store i32 %36, i32* %39, align 1
  %40 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 0, i64 4
  %41 = bitcast i8* %40 to i32*
  store i32 %38, i32* %41, align 1
  %42 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 0, i64 8
  %43 = bitcast i8* %42 to i32*
  store i32 %37, i32* %43, align 1
  %44 = getelementptr inbounds %"class.v8::base::CPU", %"class.v8::base::CPU"* %0, i64 0, i32 0, i64 12
  store i8 0, i8* %44, align 4
  %45 = icmp eq i32 %35, 0
  br i1 %45, label %126, label %46

46:                                               ; preds = %1
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 1, i32 0) #2, !srcloc !2
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0
  %49 = extractvalue { i32, i32, i32, i32 } %47, 2
  %50 = extractvalue { i32, i32, i32, i32 } %47, 3
  %51 = icmp ugt i32 %35, 6
  br i1 %51, label %52, label %58

52:                                               ; preds = %46
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 7, i32 0) #2, !srcloc !2
  %54 = extractvalue { i32, i32, i32, i32 } %53, 1
  %55 = lshr i32 %54, 5
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  br label %58

58:                                               ; preds = %52, %46
  %59 = phi i8 [ %57, %52 ], [ 0, %46 ]
  %60 = and i32 %48, 15
  store i32 %60, i32* %2, align 4
  %61 = lshr i32 %48, 4
  %62 = and i32 %61, 15
  %63 = lshr i32 %48, 12
  %64 = and i32 %63, 240
  %65 = or i32 %62, %64
  store i32 %65, i32* %3, align 4
  %66 = lshr i32 %48, 8
  %67 = and i32 %66, 15
  store i32 %67, i32* %5, align 4
  %68 = and i32 %63, 3
  store i32 %68, i32* %7, align 4
  %69 = lshr i32 %48, 16
  %70 = and i32 %69, 15
  store i32 %70, i32* %4, align 4
  %71 = lshr i32 %48, 20
  %72 = and i32 %71, 255
  store i32 %72, i32* %6, align 4
  %73 = trunc i32 %50 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %11, align 4
  %75 = trunc i32 %50 to i16
  %76 = lshr i16 %75, 15
  %77 = trunc i16 %76 to i8
  store i8 %77, i8* %12, align 1
  %78 = lshr i32 %50, 23
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  store i8 %80, i8* %14, align 1
  %81 = lshr i32 %50, 25
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %15, align 4
  %84 = lshr i32 %50, 26
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  store i8 %86, i8* %16, align 1
  %87 = trunc i32 %49 to i8
  %88 = and i8 %87, 1
  store i8 %88, i8* %17, align 2
  %89 = lshr i32 %49, 9
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %18, align 1
  %92 = lshr i32 %49, 19
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %19, align 4
  %95 = lshr i32 %49, 20
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %20, align 1
  %98 = lshr i32 %49, 23
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %29, align 2
  %101 = lshr i32 %49, 27
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  store i8 %103, i8* %22, align 1
  %104 = lshr i32 %49, 28
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* %23, align 4
  store i8 %59, i8* %24, align 1
  %107 = lshr i32 %49, 12
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  store i8 %109, i8* %25, align 2
  %110 = lshr i32 %49, 31
  %111 = trunc i32 %110 to i8
  store i8 %111, i8* %31, align 4
  %112 = icmp eq i32 %67, 6
  br i1 %112, label %113, label %116

113:                                              ; preds = %58
  %114 = trunc i32 %65 to i8
  switch i8 %114, label %116 [
    i8 28, label %115
    i8 38, label %115
    i8 54, label %115
    i8 39, label %115
    i8 53, label %115
    i8 55, label %115
    i8 74, label %115
    i8 77, label %115
    i8 76, label %115
    i8 110, label %115
  ]

115:                                              ; preds = %113, %113, %113, %113, %113, %113, %113, %113, %113, %113
  store i8 1, i8* %21, align 2
  br label %116

116:                                              ; preds = %58, %115, %113
  br i1 %51, label %117, label %126

117:                                              ; preds = %116
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 7, i32 0) #2, !srcloc !2
  %119 = extractvalue { i32, i32, i32, i32 } %118, 1
  %120 = lshr i32 %119, 3
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1
  %123 = lshr i32 %119, 8
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  store i8 %125, i8* %27, align 4
  br label %126

126:                                              ; preds = %1, %117, %116
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 -2147483648, i32 0) #2, !srcloc !2
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0
  %129 = icmp ugt i32 %128, -2147483648
  br i1 %129, label %130, label %145

130:                                              ; preds = %126
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 -2147483647, i32 0) #2, !srcloc !2
  %132 = extractvalue { i32, i32, i32, i32 } %131, 2
  %133 = lshr i32 %132, 5
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  store i8 %135, i8* %28, align 1
  %136 = trunc i32 %132 to i8
  %137 = and i8 %136, 1
  store i8 %137, i8* %13, align 2
  %138 = icmp ugt i32 %128, -2147483642
  br i1 %138, label %139, label %145

139:                                              ; preds = %130
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 -2147483641, i32 0) #2, !srcloc !2
  %141 = extractvalue { i32, i32, i32, i32 } %140, 3
  %142 = lshr i32 %141, 8
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  store i8 %144, i8* %30, align 1
  br label %147

145:                                              ; preds = %126, %130
  %146 = load i8, i8* %30, align 1
  br label %147

147:                                              ; preds = %145, %139
  %148 = phi i8 [ %146, %145 ], [ %144, %139 ]
  %149 = icmp eq i8 %148, 0
  br i1 %149, label %150, label %164

150:                                              ; preds = %147
  %151 = load i8, i8* %31, align 4, !range !3
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %164, label %153

153:                                              ; preds = %150
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 1073741824, i32 0) #2, !srcloc !2
  %155 = extractvalue { i32, i32, i32, i32 } %154, 1
  %156 = extractvalue { i32, i32, i32, i32 } %154, 2
  %157 = extractvalue { i32, i32, i32, i32 } %154, 3
  %158 = icmp eq i32 %155, 1919117645
  %159 = icmp eq i32 %156, 1718580079
  %160 = and i1 %158, %159
  %161 = icmp eq i32 %157, 1984438388
  %162 = and i1 %161, %160
  br i1 %162, label %163, label %164

163:                                              ; preds = %153
  store i8 1, i8* %30, align 1
  br label %164

164:                                              ; preds = %153, %163, %150, %147
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1826, i32 1835}
!3 = !{i8 0, i8 2}
