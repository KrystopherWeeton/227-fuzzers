; ModuleID = '../../third_party/blink/renderer/core/html/parser/background_html_input_stream.cc'
source_filename = "../../third_party/blink/renderer/core/html/parser/background_html_input_stream.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::BackgroundHTMLInputStream" = type <{ %"class.blink::SegmentedString", %"class.WTF::Vector", %"class.WTF::Vector.5", i32, i32, i32, [4 x i8] }>
%"class.blink::SegmentedString" = type <{ %"class.blink::SegmentedSubstring", i32, i32, i32, [4 x i8], %"class.WTF::Deque", i8, i8, [6 x i8] }>
%"class.blink::SegmentedSubstring" = type { %union.anon, i8*, i8*, i8, i8, %"class.WTF::String" }
%union.anon = type { i8* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Deque" = type { %"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::SegmentedSubstring"*, i32, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.5" = type { %"class.WTF::VectorBuffer.6" }
%"class.WTF::VectorBuffer.6" = type { %"class.WTF::VectorBufferBase.7" }
%"class.WTF::VectorBufferBase.7" = type { %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, i32, i32 }
%"struct.blink::BackgroundHTMLInputStream::Checkpoint" = type { %"class.blink::SegmentedString", i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.14 }
%union.anon.14 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv = comdat any

$_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEC2ERKS4_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink25BackgroundHTMLInputStream10CheckpointEEEmm = comdat any

$_ZN3WTF11VectorMoverILb0EN5blink25BackgroundHTMLInputStream10CheckpointENS_18PartitionAllocatorEE4MoveEPS3_S6_S6_b = comdat any

$_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18SegmentedSubstringEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::SegmentedSubstring]\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink25BackgroundHTMLInputStream10CheckpointEEEPKcv = private unnamed_addr constant [92 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::BackgroundHTMLInputStream::Checkpoint]\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1

@_ZN5blink25BackgroundHTMLInputStreamC1Ev = hidden unnamed_addr alias void (%"class.blink::BackgroundHTMLInputStream"*), void (%"class.blink::BackgroundHTMLInputStream"*)* @_ZN5blink25BackgroundHTMLInputStreamC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink25BackgroundHTMLInputStreamC2Ev(%"class.blink::BackgroundHTMLInputStream"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 0, i32 3
  store i8 1, i8* %2, align 8
  %3 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 0, i32 4
  %4 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %4, align 8
  store i8 1, i8* %3, align 1
  %5 = bitcast %"class.blink::BackgroundHTMLInputStream"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #9
  %6 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 1
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 2
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 3
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 5
  %10 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 7
  %11 = bitcast %"class.WTF::Deque"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 25, i1 false) #9
  store i8 1, i8* %10, align 1
  %12 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::Vector"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 44, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink25BackgroundHTMLInputStream6AppendERKN3WTF6StringE(%"class.blink::BackgroundHTMLInputStream"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::SegmentedString", align 8
  %4 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0
  %5 = bitcast %"class.blink::SegmentedString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 3
  store i8 1, i8* %6, align 8
  %7 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 4
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %65, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %31

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #9
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #9
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %30, label %65, label %31

31:                                               ; preds = %12, %27
  %32 = phi %"class.WTF::StringImpl"* [ %29, %27 ], [ %9, %12 ]
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %65, label %36

36:                                               ; preds = %31
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %53, label %42

42:                                               ; preds = %36
  store i8 1, i8* %7, align 1
  %43 = icmp eq %"class.WTF::StringImpl"* %37, null
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 1
  %45 = bitcast %"class.WTF::StringImpl"* %44 to i8*
  %46 = select i1 %43, i8* null, i8* %45
  %47 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 0, i32 0
  store i8* %46, i8** %47, align 8
  %48 = zext i32 %34 to i64
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  %50 = getelementptr inbounds i8, i8* %49, i64 -1
  %51 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 2
  store i8* %50, i8** %51, align 8
  %52 = ptrtoint i8* %46 to i64
  br label %70

53:                                               ; preds = %36
  store i8 0, i8* %7, align 1
  %54 = icmp eq %"class.WTF::StringImpl"* %37, null
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 1
  %56 = bitcast %"class.WTF::StringImpl"* %55 to i16*
  %57 = select i1 %54, i16* null, i16* %56
  %58 = bitcast %"class.blink::SegmentedString"* %3 to i16**
  store i16* %57, i16** %58, align 8
  %59 = zext i32 %34 to i64
  %60 = getelementptr inbounds i16, i16* %57, i64 %59
  %61 = getelementptr inbounds i16, i16* %60, i64 -1
  %62 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 2
  %63 = bitcast i8** %62 to i16**
  store i16* %61, i16** %63, align 8
  %64 = ptrtoint i16* %57 to i64
  br label %70

65:                                               ; preds = %2, %31, %27
  %66 = phi i1 [ false, %31 ], [ true, %27 ], [ true, %2 ]
  %67 = phi %"class.WTF::StringImpl"* [ %32, %31 ], [ null, %27 ], [ null, %2 ]
  store i8 1, i8* %7, align 1
  %68 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %68, align 8
  %69 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 2
  store i8* null, i8** %69, align 8
  br label %70

70:                                               ; preds = %65, %53, %42
  %71 = phi i1 [ false, %42 ], [ false, %53 ], [ %66, %65 ]
  %72 = phi %"class.WTF::StringImpl"* [ %32, %42 ], [ %32, %53 ], [ %67, %65 ]
  %73 = phi i64 [ %52, %42 ], [ %64, %53 ], [ 0, %65 ]
  %74 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 1
  %75 = bitcast i8** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 1
  store i32 0, i32* %76, align 8
  %77 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 2
  store i32 0, i32* %77, align 4
  %78 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 3
  store i32 0, i32* %78, align 8
  %79 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 5
  %80 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 7
  %81 = bitcast %"class.WTF::Deque"* %79 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 25, i1 false) #9
  br i1 %71, label %87, label %82

82:                                               ; preds = %70
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 0
  %86 = zext i1 %85 to i8
  br label %87

87:                                               ; preds = %70, %82
  %88 = phi i8 [ %86, %82 ], [ 1, %70 ]
  store i8 %88, i8* %80, align 1
  call void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"* %4, %"class.blink::SegmentedString"* nonnull dereferenceable(88) %3) #9
  %89 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %79, i64 0, i32 0, i32 0, i32 0, i32 0
  %90 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %89, align 8
  %91 = icmp eq %"class.blink::SegmentedSubstring"* %90, null
  br i1 %91, label %104, label %92

92:                                               ; preds = %87
  %93 = bitcast %"class.blink::SegmentedSubstring"* %90 to i8*
  %94 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 5, i32 1
  %95 = load i32, i32* %94, align 8
  %96 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 5, i32 2
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %95, %97
  br i1 %98, label %102, label %99

99:                                               ; preds = %92
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %79) #9
  %100 = bitcast %"class.WTF::Deque"* %79 to i8**
  %101 = load i8*, i8** %100, align 8
  br label %102

102:                                              ; preds = %99, %92
  %103 = phi i8* [ %101, %99 ], [ %93, %92 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %103) #9
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %89, align 8
  br label %104

104:                                              ; preds = %102, %87
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %106 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %106, label %120, label %107

107:                                              ; preds = %104
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = load atomic i32, i32* %108 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %113 = load i32, i32* %112, align 4
  br i1 %111, label %114, label %116

114:                                              ; preds = %107
  %115 = add i32 %113, -1
  store i32 %115, i32* %112, align 4
  br label %116

116:                                              ; preds = %114, %107
  %117 = phi i32 [ %115, %114 ], [ %113, %107 ]
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %116
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %105) #9
  br label %120

120:                                              ; preds = %104, %116, %119
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %5) #9
  %121 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 1
  %122 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %123 = load i32, i32* %122, align 4
  %124 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %125 = load i32, i32* %124, align 8
  %126 = icmp eq i32 %123, %125
  br i1 %126, label %154, label %127, !prof !2

127:                                              ; preds = %120
  %128 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %121, i64 0, i32 0, i32 0, i32 0
  %129 = load %"class.WTF::String"*, %"class.WTF::String"** %128, align 8
  %130 = zext i32 %123 to i64
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %132 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %129, i64 %130, i32 0, i32 0
  store %"class.WTF::StringImpl"* %131, %"class.WTF::StringImpl"** %132, align 8
  %133 = icmp eq %"class.WTF::StringImpl"* %131, null
  br i1 %133, label %151, label %134

134:                                              ; preds = %127
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load atomic i32, i32* %135 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %151

139:                                              ; preds = %134
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %141 = load i32, i32* %140, align 4
  %142 = zext i32 %141 to i33
  %143 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %142, i33 1) #9
  %144 = extractvalue { i33, i1 } %143, 1
  %145 = extractvalue { i33, i1 } %143, 0
  %146 = icmp slt i33 %145, 0
  %147 = or i1 %144, %146
  br i1 %147, label %148, label %149, !prof !2

148:                                              ; preds = %139
  call void @llvm.trap() #9
  unreachable

149:                                              ; preds = %139
  %150 = trunc i33 %145 to i32
  store i32 %150, i32* %140, align 4
  br label %151

151:                                              ; preds = %149, %134, %127
  %152 = load i32, i32* %122, align 4
  %153 = add i32 %152, 1
  store i32 %153, i32* %122, align 4
  br label %155

154:                                              ; preds = %120
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %121, %"class.WTF::String"* dereferenceable(8) %1) #9
  br label %155

155:                                              ; preds = %151, %154
  ret void
}

declare void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"*, %"class.blink::SegmentedString"* dereferenceable(88)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink25BackgroundHTMLInputStream5CloseEv(%"class.blink::BackgroundHTMLInputStream"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0
  tail call void @_ZN5blink15SegmentedString5CloseEv(%"class.blink::SegmentedString"* %2) #9
  ret void
}

declare void @_ZN5blink15SegmentedString5CloseEv(%"class.blink::SegmentedString"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink25BackgroundHTMLInputStream16CreateCheckpointEj(%"class.blink::BackgroundHTMLInputStream"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.blink::BackgroundHTMLInputStream::Checkpoint", align 8
  %4 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = bitcast %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.blink::BackgroundHTMLInputStream"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %10, i64 26, i1 false) #9
  %11 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"** %13, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %14, label %32, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %32

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i33
  %24 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %23, i33 1) #9
  %25 = extractvalue { i33, i1 } %24, 1
  %26 = extractvalue { i33, i1 } %24, 0
  %27 = icmp slt i33 %26, 0
  %28 = or i1 %25, %27
  br i1 %28, label %29, label %30, !prof !2

29:                                               ; preds = %20
  tail call void @llvm.trap() #9
  unreachable

30:                                               ; preds = %20
  %31 = trunc i33 %26 to i32
  store i32 %31, i32* %21, align 4
  br label %32

32:                                               ; preds = %2, %15, %30
  %33 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 1
  %34 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 1
  %35 = bitcast i32* %33 to i8*
  %36 = bitcast i32* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 12, i1 false) #9
  %37 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 5
  %38 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 5
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Deque"* %37, %"class.WTF::Deque"* dereferenceable(24) %38) #9
  %39 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 6
  %40 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 6
  %41 = bitcast i8* %40 to i16*
  %42 = bitcast i8* %39 to i16*
  %43 = load i16, i16* %41, align 8
  store i16 %43, i16* %42, align 8
  %44 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 1
  store i32 %9, i32* %44, align 8
  %45 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 2
  store i32 %1, i32* %45, align 4
  %46 = load i32, i32* %5, align 4
  %47 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %46, %48
  br i1 %49, label %100, label %50, !prof !2

50:                                               ; preds = %32
  %51 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %4, i64 0, i32 0, i32 0, i32 0
  %52 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %51, align 8
  %53 = zext i32 %46 to i64
  %54 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53
  %55 = bitcast %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* nonnull align 8 %7, i64 26, i1 false) #9
  %56 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53, i32 0, i32 0, i32 5
  %57 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 0, i32 5
  %58 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %57, i64 0, i32 0, i32 0
  %59 = bitcast %"class.WTF::String"* %57 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = bitcast %"class.WTF::String"* %56 to i64*
  store i64 %60, i64* %61, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %58, align 8
  %62 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53, i32 0, i32 1
  %63 = bitcast i32* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %35, i64 12, i1 false) #9
  %64 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53, i32 0, i32 5
  %65 = bitcast %"class.WTF::Deque"* %64 to i8*
  %66 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53, i32 0, i32 5, i32 1
  %67 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53, i32 0, i32 5, i32 2
  %68 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53, i32 0, i32 5, i32 0, i32 0, i32 0, i32 2
  %69 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 5, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 24, i1 false) #9
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 5, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = icmp ugt i32 %70, %72
  %74 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %75 = load i32, i32* %74, align 8
  %76 = select i1 %73, i32 %75, i32 %72
  %77 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 2
  store i32 %76, i32* %77, align 4
  %78 = bitcast %"class.WTF::Deque"* %37 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.WTF::Deque"* %64 to i64*
  %81 = load i64, i64* %80, align 8
  store atomic i64 %81, i64* %78 monotonic, align 8
  store atomic i64 %79, i64* %80 monotonic, align 8
  %82 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53, i32 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = load i32, i32* %74, align 8
  store i32 %84, i32* %82, align 4
  store i32 %83, i32* %74, align 8
  %85 = load i32, i32* %68, align 4
  %86 = load i32, i32* %77, align 4
  store i32 %86, i32* %68, align 4
  store i32 %85, i32* %77, align 4
  %87 = load i32, i32* %66, align 4
  %88 = load i32, i32* %69, align 8
  store i32 %88, i32* %66, align 4
  store i32 %87, i32* %69, align 8
  %89 = load i32, i32* %67, align 4
  %90 = load i32, i32* %71, align 4
  store i32 %90, i32* %67, align 4
  store i32 %89, i32* %71, align 4
  %91 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53, i32 0, i32 6
  %92 = bitcast i8* %91 to i16*
  %93 = load i16, i16* %42, align 8
  store i16 %93, i16* %92, align 8
  %94 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %52, i64 %53, i32 1
  %95 = bitcast i32* %44 to i64*
  %96 = bitcast i32* %94 to i64*
  %97 = load i64, i64* %95, align 8
  store i64 %97, i64* %96, align 8
  %98 = load i32, i32* %5, align 4
  %99 = add i32 %98, 1
  store i32 %99, i32* %5, align 4
  br label %101

100:                                              ; preds = %32
  call void @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.5"* %4, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* nonnull dereferenceable(96) %3) #9
  br label %101

101:                                              ; preds = %50, %100
  %102 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %37, i64 0, i32 0, i32 0, i32 0, i32 0
  %103 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %102, align 8
  %104 = icmp eq %"class.blink::SegmentedSubstring"* %103, null
  br i1 %104, label %117, label %105

105:                                              ; preds = %101
  %106 = bitcast %"class.blink::SegmentedSubstring"* %103 to i8*
  %107 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 5, i32 1
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %3, i64 0, i32 0, i32 5, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %108, %110
  br i1 %111, label %115, label %112

112:                                              ; preds = %105
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %37) #9
  %113 = bitcast %"class.WTF::Deque"* %37 to i8**
  %114 = load i8*, i8** %113, align 8
  br label %115

115:                                              ; preds = %112, %105
  %116 = phi i8* [ %114, %112 ], [ %106, %105 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %116) #9
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %102, align 8
  br label %117

117:                                              ; preds = %115, %101
  %118 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %119 = icmp eq %"class.WTF::StringImpl"* %118, null
  br i1 %119, label %133, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = load atomic i32, i32* %121 monotonic, align 4
  %123 = and i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 0
  %126 = load i32, i32* %125, align 4
  br i1 %124, label %127, label %129

127:                                              ; preds = %120
  %128 = add i32 %126, -1
  store i32 %128, i32* %125, align 4
  br label %129

129:                                              ; preds = %127, %120
  %130 = phi i32 [ %128, %127 ], [ %126, %120 ]
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %129
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %118) #9
  br label %133

133:                                              ; preds = %117, %129, %132
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %7) #9
  %134 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 5
  %135 = load i32, i32* %134, align 8
  %136 = add i32 %135, %1
  store i32 %136, i32* %134, align 8
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink25BackgroundHTMLInputStream27InvalidateCheckpointsBeforeEj(%"class.blink::BackgroundHTMLInputStream"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %61, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2
  %8 = add i32 %1, -1
  %9 = tail call dereferenceable(96) %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"* %7, i32 %8) #9
  %10 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 4
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %9, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ult i32 %11, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 1
  br label %23

17:                                               ; preds = %43, %6
  %18 = phi i32 [ %13, %6 ], [ %45, %43 ]
  store i32 %18, i32* %10, align 4
  %19 = load i32, i32* %3, align 8
  %20 = icmp ult i32 %19, %1
  br i1 %20, label %21, label %47

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 5
  br label %48

23:                                               ; preds = %15, %43
  %24 = phi i32 [ %11, %15 ], [ %44, %43 ]
  %25 = tail call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %16, i32 %24) #9
  %26 = bitcast %"class.WTF::String"* %25 to i64*
  %27 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %25, i64 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  store i64 0, i64* %26, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #9
  br label %43

43:                                               ; preds = %42, %39, %23
  %44 = add nuw i32 %24, 1
  %45 = load i32, i32* %12, align 8
  %46 = icmp ult i32 %44, %45
  br i1 %46, label %23, label %17

47:                                               ; preds = %48, %17
  store i32 %1, i32* %3, align 8
  br label %61

48:                                               ; preds = %48, %21
  %49 = phi i32 [ %19, %21 ], [ %59, %48 ]
  %50 = tail call dereferenceable(96) %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"* %7, i32 %49) #9
  %51 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %50, i64 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = load i32, i32* %22, align 8
  %54 = sub i32 %53, %52
  store i32 %54, i32* %22, align 8
  %55 = tail call dereferenceable(96) %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"* %7, i32 %49) #9
  %56 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %55, i64 0, i32 0
  tail call void @_ZN5blink15SegmentedString5ClearEv(%"class.blink::SegmentedString"* %56) #9
  %57 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %55, i64 0, i32 1
  store i32 0, i32* %57, align 8
  %58 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %55, i64 0, i32 2
  store i32 0, i32* %58, align 4
  %59 = add i32 %49, 1
  %60 = icmp eq i32 %59, %1
  br i1 %60, label %47, label %48

61:                                               ; preds = %2, %47
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink25BackgroundHTMLInputStream8RewindToEjRKN3WTF6StringE(%"class.blink::BackgroundHTMLInputStream"*, i32, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::Deque", align 8
  %5 = alloca %"class.blink::SegmentedString", align 8
  %6 = alloca %"class.blink::SegmentedString", align 8
  %7 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2
  %8 = tail call dereferenceable(96) %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"* %7, i32 %1) #9
  %9 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0
  %10 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 6
  %11 = load i8, i8* %10, align 8, !range !3
  %12 = icmp eq i8 %11, 0
  %13 = bitcast %"class.blink::BackgroundHTMLInputStream"* %0 to i8*
  %14 = bitcast %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 26, i1 false) #9
  %15 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 0, i32 5
  %16 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %36, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %36

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i33
  %28 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %27, i33 1) #9
  %29 = extractvalue { i33, i1 } %28, 1
  %30 = extractvalue { i33, i1 } %28, 0
  %31 = icmp slt i33 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %33, label %34, !prof !2

33:                                               ; preds = %24
  tail call void @llvm.trap() #9
  unreachable

34:                                               ; preds = %24
  %35 = trunc i33 %30 to i32
  store i32 %35, i32* %25, align 4
  br label %36

36:                                               ; preds = %34, %19, %3
  %37 = ptrtoint %"class.WTF::StringImpl"* %17 to i64
  %38 = bitcast %"class.WTF::String"* %15 to i64*
  %39 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  store i64 %37, i64* %38, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %55, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #9
  br label %55

55:                                               ; preds = %36, %51, %54
  %56 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 1
  %57 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 1
  %58 = bitcast i32* %56 to i8*
  %59 = bitcast i32* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 12, i1 false) #9
  %60 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 5
  %61 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 5
  %62 = bitcast %"class.WTF::Deque"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #9
  %63 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %64 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %65 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %4, i64 0, i32 0, i32 0, i32 0, i32 2
  %66 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %4, i64 0, i32 1
  %67 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 -86, i64 24, i1 false) #9
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Deque"* nonnull %4, %"class.WTF::Deque"* dereferenceable(24) %61) #9
  %68 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 5, i32 1
  %69 = load i32, i32* %68, align 8
  %70 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 5, i32 2
  %71 = load i32, i32* %70, align 4
  %72 = icmp ugt i32 %69, %71
  %73 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 1
  br i1 %72, label %76, label %74

74:                                               ; preds = %55
  %75 = load i32, i32* %73, align 4
  br label %78

76:                                               ; preds = %55
  %77 = load i32, i32* %73, align 8
  br label %78

78:                                               ; preds = %76, %74
  %79 = phi i32 [ %77, %76 ], [ %75, %74 ]
  %80 = phi i32 [ %77, %76 ], [ %71, %74 ]
  %81 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 2
  %82 = load i32, i32* %66, align 8
  %83 = load i32, i32* %67, align 4
  %84 = icmp ugt i32 %82, %83
  %85 = load i32, i32* %64, align 8
  %86 = select i1 %84, i32 %85, i32 %83
  %87 = bitcast %"class.WTF::Deque"* %4 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = bitcast %"class.WTF::Deque"* %60 to i64*
  %90 = load i64, i64* %89, align 8
  store atomic i64 %90, i64* %87 monotonic, align 8
  store atomic i64 %88, i64* %89 monotonic, align 8
  store i32 %85, i32* %73, align 4
  store i32 %79, i32* %64, align 8
  store i32 %86, i32* %81, align 4
  store i32 %80, i32* %65, align 4
  store i32 %82, i32* %68, align 4
  store i32 %69, i32* %66, align 8
  store i32 %83, i32* %70, align 4
  store i32 %71, i32* %67, align 4
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %100, label %92

92:                                               ; preds = %78
  %93 = inttoptr i64 %90 to i8*
  %94 = icmp eq i32 %69, %71
  br i1 %94, label %98, label %95

95:                                               ; preds = %92
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* nonnull %4) #9
  %96 = bitcast %"class.WTF::Deque"* %4 to i8**
  %97 = load i8*, i8** %96, align 8
  br label %98

98:                                               ; preds = %95, %92
  %99 = phi i8* [ %97, %95 ], [ %93, %92 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %99) #9
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %63, align 8
  br label %100

100:                                              ; preds = %78, %98
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #9
  %101 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 6
  %102 = bitcast i8* %101 to i16*
  %103 = bitcast i8* %10 to i16*
  %104 = load i16, i16* %102, align 8
  store i16 %104, i16* %103, align 8
  %105 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 1
  %106 = load i32, i32* %105, align 8
  %107 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 1
  %108 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %109 = load i32, i32* %108, align 4
  %110 = icmp ult i32 %106, %109
  br i1 %110, label %111, label %132

111:                                              ; preds = %100
  %112 = bitcast %"class.blink::SegmentedString"* %5 to i8*
  %113 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 3
  %114 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 4
  %115 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 5, i32 0, i32 0
  %116 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 0, i32 0
  %117 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 2
  %118 = bitcast %"class.blink::SegmentedString"* %5 to i16**
  %119 = bitcast i8** %117 to i16**
  %120 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 1
  %121 = bitcast i8** %120 to i64*
  %122 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 1
  %123 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 2
  %124 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 3
  %125 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 5
  %126 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 7
  %127 = bitcast %"class.WTF::Deque"* %125 to i8*
  %128 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %125, i64 0, i32 0, i32 0, i32 0, i32 0
  %129 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 5, i32 1
  %130 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 5, i32 2
  %131 = bitcast %"class.WTF::Deque"* %125 to i8**
  br label %140

132:                                              ; preds = %233, %100
  %133 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %134 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %133, align 8
  %135 = icmp eq %"class.WTF::StringImpl"* %134, null
  br i1 %135, label %350, label %136

136:                                              ; preds = %132
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 1
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %350, label %237

140:                                              ; preds = %111, %233
  %141 = phi i32 [ %106, %111 ], [ %234, %233 ]
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %112) #9
  %142 = call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %107, i32 %141) #9
  store i8 1, i8* %113, align 8
  store i8 1, i8* %114, align 1
  %143 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %142, i64 0, i32 0, i32 0
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %143, align 8
  store %"class.WTF::StringImpl"* %144, %"class.WTF::StringImpl"** %115, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %163, label %146

146:                                              ; preds = %140
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load atomic i32, i32* %147 monotonic, align 4
  %149 = and i32 %148, 2
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %163

151:                                              ; preds = %146
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i33
  %155 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %154, i33 1) #9
  %156 = extractvalue { i33, i1 } %155, 1
  %157 = extractvalue { i33, i1 } %155, 0
  %158 = icmp slt i33 %157, 0
  %159 = or i1 %156, %158
  br i1 %159, label %160, label %161, !prof !2

160:                                              ; preds = %151
  call void @llvm.trap() #9
  unreachable

161:                                              ; preds = %151
  %162 = trunc i33 %157 to i32
  store i32 %162, i32* %152, align 4
  br label %163

163:                                              ; preds = %161, %146, %140
  %164 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %143, align 8
  %165 = icmp eq %"class.WTF::StringImpl"* %164, null
  br i1 %165, label %194, label %166

166:                                              ; preds = %163
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 1
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %194, label %170

170:                                              ; preds = %166
  %171 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %115, align 8
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %171, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %173 = load atomic i32, i32* %172 monotonic, align 4
  %174 = and i32 %173, 1
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %185, label %176

176:                                              ; preds = %170
  store i8 1, i8* %114, align 1
  %177 = icmp eq %"class.WTF::StringImpl"* %171, null
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %171, i64 1
  %179 = bitcast %"class.WTF::StringImpl"* %178 to i8*
  %180 = select i1 %177, i8* null, i8* %179
  store i8* %180, i8** %116, align 8
  %181 = zext i32 %168 to i64
  %182 = getelementptr inbounds i8, i8* %180, i64 -1
  %183 = getelementptr inbounds i8, i8* %182, i64 %181
  store i8* %183, i8** %117, align 8
  %184 = ptrtoint i8* %180 to i64
  br label %195

185:                                              ; preds = %170
  store i8 0, i8* %114, align 1
  %186 = icmp eq %"class.WTF::StringImpl"* %171, null
  %187 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %171, i64 1
  %188 = bitcast %"class.WTF::StringImpl"* %187 to i16*
  %189 = select i1 %186, i16* null, i16* %188
  store i16* %189, i16** %118, align 8
  %190 = zext i32 %168 to i64
  %191 = getelementptr inbounds i16, i16* %189, i64 -1
  %192 = getelementptr inbounds i16, i16* %191, i64 %190
  store i16* %192, i16** %119, align 8
  %193 = ptrtoint i16* %189 to i64
  br label %195

194:                                              ; preds = %166, %163
  store i8 1, i8* %114, align 1
  store i8* null, i8** %116, align 8
  store i8* null, i8** %117, align 8
  br label %195

195:                                              ; preds = %194, %185, %176
  %196 = phi i64 [ %184, %176 ], [ %193, %185 ], [ 0, %194 ]
  store i64 %196, i64* %121, align 8
  store i32 0, i32* %122, align 8
  store i32 0, i32* %123, align 4
  store i32 0, i32* %124, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %127, i8 0, i64 25, i1 false) #9
  %197 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %143, align 8
  %198 = icmp eq %"class.WTF::StringImpl"* %197, null
  br i1 %198, label %204, label %199

199:                                              ; preds = %195
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %197, i64 0, i32 1
  %201 = load i32, i32* %200, align 4
  %202 = icmp eq i32 %201, 0
  %203 = zext i1 %202 to i8
  br label %204

204:                                              ; preds = %195, %199
  %205 = phi i8 [ %203, %199 ], [ 1, %195 ]
  store i8 %205, i8* %126, align 1
  call void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"* %9, %"class.blink::SegmentedString"* nonnull dereferenceable(88) %5) #9
  %206 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %128, align 8
  %207 = icmp eq %"class.blink::SegmentedSubstring"* %206, null
  br i1 %207, label %217, label %208

208:                                              ; preds = %204
  %209 = bitcast %"class.blink::SegmentedSubstring"* %206 to i8*
  %210 = load i32, i32* %129, align 8
  %211 = load i32, i32* %130, align 4
  %212 = icmp eq i32 %210, %211
  br i1 %212, label %215, label %213

213:                                              ; preds = %208
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %125) #9
  %214 = load i8*, i8** %131, align 8
  br label %215

215:                                              ; preds = %213, %208
  %216 = phi i8* [ %214, %213 ], [ %209, %208 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %216) #9
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %128, align 8
  br label %217

217:                                              ; preds = %215, %204
  %218 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %115, align 8
  %219 = icmp eq %"class.WTF::StringImpl"* %218, null
  br i1 %219, label %233, label %220

220:                                              ; preds = %217
  %221 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %218, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %222 = load atomic i32, i32* %221 monotonic, align 4
  %223 = and i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %218, i64 0, i32 0
  %226 = load i32, i32* %225, align 4
  br i1 %224, label %227, label %229

227:                                              ; preds = %220
  %228 = add i32 %226, -1
  store i32 %228, i32* %225, align 4
  br label %229

229:                                              ; preds = %227, %220
  %230 = phi i32 [ %228, %227 ], [ %226, %220 ]
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %233

232:                                              ; preds = %229
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %218) #9
  br label %233

233:                                              ; preds = %217, %229, %232
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %112) #9
  %234 = add nuw i32 %141, 1
  %235 = load i32, i32* %108, align 4
  %236 = icmp ult i32 %234, %235
  br i1 %236, label %140, label %132

237:                                              ; preds = %136
  %238 = bitcast %"class.blink::SegmentedString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %238) #9
  %239 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 3
  store i8 1, i8* %239, align 8
  %240 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 4
  store i8 1, i8* %240, align 1
  %241 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %134, %"class.WTF::StringImpl"** %241, align 8
  %242 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %243 = load atomic i32, i32* %242 monotonic, align 4
  %244 = and i32 %243, 2
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %260

246:                                              ; preds = %237
  %247 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 0
  %248 = load i32, i32* %247, align 4
  %249 = zext i32 %248 to i33
  %250 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %249, i33 1) #9
  %251 = extractvalue { i33, i1 } %250, 1
  %252 = extractvalue { i33, i1 } %250, 0
  %253 = icmp slt i33 %252, 0
  %254 = or i1 %251, %253
  br i1 %254, label %255, label %256, !prof !2

255:                                              ; preds = %246
  call void @llvm.trap() #9
  unreachable

256:                                              ; preds = %246
  %257 = trunc i33 %252 to i32
  store i32 %257, i32* %247, align 4
  %258 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %133, align 8
  %259 = icmp eq %"class.WTF::StringImpl"* %258, null
  br i1 %259, label %294, label %260

260:                                              ; preds = %237, %256
  %261 = phi %"class.WTF::StringImpl"* [ %258, %256 ], [ %134, %237 ]
  %262 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %261, i64 0, i32 1
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %294, label %265

265:                                              ; preds = %260
  %266 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %241, align 8
  %267 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %268 = load atomic i32, i32* %267 monotonic, align 4
  %269 = and i32 %268, 1
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %282, label %271

271:                                              ; preds = %265
  store i8 1, i8* %240, align 1
  %272 = icmp eq %"class.WTF::StringImpl"* %266, null
  %273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 1
  %274 = bitcast %"class.WTF::StringImpl"* %273 to i8*
  %275 = select i1 %272, i8* null, i8* %274
  %276 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 0, i32 0
  store i8* %275, i8** %276, align 8
  %277 = zext i32 %263 to i64
  %278 = getelementptr inbounds i8, i8* %275, i64 %277
  %279 = getelementptr inbounds i8, i8* %278, i64 -1
  %280 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 2
  store i8* %279, i8** %280, align 8
  %281 = ptrtoint i8* %275 to i64
  br label %299

282:                                              ; preds = %265
  store i8 0, i8* %240, align 1
  %283 = icmp eq %"class.WTF::StringImpl"* %266, null
  %284 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %266, i64 1
  %285 = bitcast %"class.WTF::StringImpl"* %284 to i16*
  %286 = select i1 %283, i16* null, i16* %285
  %287 = bitcast %"class.blink::SegmentedString"* %6 to i16**
  store i16* %286, i16** %287, align 8
  %288 = zext i32 %263 to i64
  %289 = getelementptr inbounds i16, i16* %286, i64 %288
  %290 = getelementptr inbounds i16, i16* %289, i64 -1
  %291 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 2
  %292 = bitcast i8** %291 to i16**
  store i16* %290, i16** %292, align 8
  %293 = ptrtoint i16* %286 to i64
  br label %299

294:                                              ; preds = %260, %256
  %295 = phi i1 [ false, %260 ], [ true, %256 ]
  %296 = phi %"class.WTF::StringImpl"* [ %261, %260 ], [ null, %256 ]
  store i8 1, i8* %240, align 1
  %297 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %297, align 8
  %298 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 2
  store i8* null, i8** %298, align 8
  br label %299

299:                                              ; preds = %294, %282, %271
  %300 = phi i1 [ false, %271 ], [ false, %282 ], [ %295, %294 ]
  %301 = phi %"class.WTF::StringImpl"* [ %261, %271 ], [ %261, %282 ], [ %296, %294 ]
  %302 = phi i64 [ %281, %271 ], [ %293, %282 ], [ 0, %294 ]
  %303 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 1
  %304 = bitcast i8** %303 to i64*
  store i64 %302, i64* %304, align 8
  %305 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 1
  store i32 0, i32* %305, align 8
  %306 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 2
  store i32 0, i32* %306, align 4
  %307 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 3
  store i32 0, i32* %307, align 8
  %308 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 5
  %309 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 7
  %310 = bitcast %"class.WTF::Deque"* %308 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %310, i8 0, i64 25, i1 false) #9
  br i1 %300, label %316, label %311

311:                                              ; preds = %299
  %312 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %301, i64 0, i32 1
  %313 = load i32, i32* %312, align 4
  %314 = icmp eq i32 %313, 0
  %315 = zext i1 %314 to i8
  br label %316

316:                                              ; preds = %299, %311
  %317 = phi i8 [ %315, %311 ], [ 1, %299 ]
  store i8 %317, i8* %309, align 1
  call void @_ZN5blink15SegmentedString7PrependERKS0_NS0_11PrependTypeE(%"class.blink::SegmentedString"* %9, %"class.blink::SegmentedString"* nonnull dereferenceable(88) %6, i32 0) #9
  %318 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %308, i64 0, i32 0, i32 0, i32 0, i32 0
  %319 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %318, align 8
  %320 = icmp eq %"class.blink::SegmentedSubstring"* %319, null
  br i1 %320, label %333, label %321

321:                                              ; preds = %316
  %322 = bitcast %"class.blink::SegmentedSubstring"* %319 to i8*
  %323 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 5, i32 1
  %324 = load i32, i32* %323, align 8
  %325 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 5, i32 2
  %326 = load i32, i32* %325, align 4
  %327 = icmp eq i32 %324, %326
  br i1 %327, label %331, label %328

328:                                              ; preds = %321
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %308) #9
  %329 = bitcast %"class.WTF::Deque"* %308 to i8**
  %330 = load i8*, i8** %329, align 8
  br label %331

331:                                              ; preds = %328, %321
  %332 = phi i8* [ %330, %328 ], [ %322, %321 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %332) #9
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %318, align 8
  br label %333

333:                                              ; preds = %331, %316
  %334 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %241, align 8
  %335 = icmp eq %"class.WTF::StringImpl"* %334, null
  br i1 %335, label %349, label %336

336:                                              ; preds = %333
  %337 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %334, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %338 = load atomic i32, i32* %337 monotonic, align 4
  %339 = and i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %334, i64 0, i32 0
  %342 = load i32, i32* %341, align 4
  br i1 %340, label %343, label %345

343:                                              ; preds = %336
  %344 = add i32 %342, -1
  store i32 %344, i32* %341, align 4
  br label %345

345:                                              ; preds = %343, %336
  %346 = phi i32 [ %344, %343 ], [ %342, %336 ]
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %348, label %349

348:                                              ; preds = %345
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %334) #9
  br label %349

349:                                              ; preds = %333, %345, %348
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %238) #9
  br label %350

350:                                              ; preds = %132, %349, %136
  br i1 %12, label %355, label %351

351:                                              ; preds = %350
  %352 = load i8, i8* %10, align 8, !range !3
  %353 = icmp eq i8 %352, 0
  br i1 %353, label %354, label %355

354:                                              ; preds = %351
  call void @_ZN5blink15SegmentedString5CloseEv(%"class.blink::SegmentedString"* %9) #9
  br label %355

355:                                              ; preds = %351, %350, %354
  %356 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %357 = load i32, i32* %356, align 8
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %393, label %359

359:                                              ; preds = %355
  %360 = load i32, i32* %108, align 4
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %389, label %362

362:                                              ; preds = %359
  %363 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %107, i64 0, i32 0, i32 0, i32 0
  %364 = load %"class.WTF::String"*, %"class.WTF::String"** %363, align 8
  %365 = zext i32 %360 to i64
  %366 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %364, i64 %365
  br label %367

367:                                              ; preds = %385, %362
  %368 = phi %"class.WTF::String"* [ %386, %385 ], [ %364, %362 ]
  %369 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %368, i64 0, i32 0, i32 0
  %370 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %369, align 8
  %371 = icmp eq %"class.WTF::StringImpl"* %370, null
  br i1 %371, label %385, label %372

372:                                              ; preds = %367
  %373 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %370, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %374 = load atomic i32, i32* %373 monotonic, align 4
  %375 = and i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %370, i64 0, i32 0
  %378 = load i32, i32* %377, align 4
  br i1 %376, label %379, label %381

379:                                              ; preds = %372
  %380 = add i32 %378, -1
  store i32 %380, i32* %377, align 4
  br label %381

381:                                              ; preds = %379, %372
  %382 = phi i32 [ %380, %379 ], [ %378, %372 ]
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %384, label %385

384:                                              ; preds = %381
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %370) #9
  br label %385

385:                                              ; preds = %384, %381, %367
  %386 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %368, i64 1
  %387 = icmp eq %"class.WTF::String"* %386, %366
  br i1 %387, label %388, label %367

388:                                              ; preds = %385
  store i32 0, i32* %108, align 4
  br label %389

389:                                              ; preds = %388, %359
  %390 = bitcast %"class.WTF::Vector"* %107 to i8**
  %391 = load i8*, i8** %390, align 8
  %392 = bitcast %"class.WTF::Vector"* %107 to i64*
  store atomic i64 0, i64* %392 monotonic, align 8
  store i32 0, i32* %356, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %391) #9
  br label %393

393:                                              ; preds = %355, %389
  %394 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %395 = load i32, i32* %394, align 8
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %449, label %397

397:                                              ; preds = %393
  %398 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %399 = load i32, i32* %398, align 4
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %445, label %401

401:                                              ; preds = %397
  %402 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %7, i64 0, i32 0, i32 0, i32 0
  %403 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %402, align 8
  %404 = zext i32 %399 to i64
  %405 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %403, i64 %404
  br label %406

406:                                              ; preds = %441, %401
  %407 = phi %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* [ %442, %441 ], [ %403, %401 ]
  %408 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %407, i64 0, i32 0, i32 5
  %409 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %408, i64 0, i32 0, i32 0, i32 0, i32 0
  %410 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %409, align 8
  %411 = icmp eq %"class.blink::SegmentedSubstring"* %410, null
  br i1 %411, label %424, label %412

412:                                              ; preds = %406
  %413 = bitcast %"class.blink::SegmentedSubstring"* %410 to i8*
  %414 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %407, i64 0, i32 0, i32 5, i32 1
  %415 = load i32, i32* %414, align 8
  %416 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %407, i64 0, i32 0, i32 5, i32 2
  %417 = load i32, i32* %416, align 4
  %418 = icmp eq i32 %415, %417
  br i1 %418, label %422, label %419

419:                                              ; preds = %412
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %408) #9
  %420 = bitcast %"class.WTF::Deque"* %408 to i8**
  %421 = load i8*, i8** %420, align 8
  br label %422

422:                                              ; preds = %419, %412
  %423 = phi i8* [ %421, %419 ], [ %413, %412 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %423) #9
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %409, align 8
  br label %424

424:                                              ; preds = %422, %406
  %425 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %407, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %426 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %425, align 8
  %427 = icmp eq %"class.WTF::StringImpl"* %426, null
  br i1 %427, label %441, label %428

428:                                              ; preds = %424
  %429 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %426, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %430 = load atomic i32, i32* %429 monotonic, align 4
  %431 = and i32 %430, 2
  %432 = icmp eq i32 %431, 0
  %433 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %426, i64 0, i32 0
  %434 = load i32, i32* %433, align 4
  br i1 %432, label %435, label %437

435:                                              ; preds = %428
  %436 = add i32 %434, -1
  store i32 %436, i32* %433, align 4
  br label %437

437:                                              ; preds = %435, %428
  %438 = phi i32 [ %436, %435 ], [ %434, %428 ]
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %441

440:                                              ; preds = %437
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %426) #9
  br label %441

441:                                              ; preds = %440, %437, %424
  %442 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %407, i64 1
  %443 = icmp eq %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %442, %405
  br i1 %443, label %444, label %406

444:                                              ; preds = %441
  store i32 0, i32* %398, align 4
  br label %445

445:                                              ; preds = %444, %397
  %446 = bitcast %"class.WTF::Vector.5"* %7 to i8**
  %447 = load i8*, i8** %446, align 8
  %448 = bitcast %"class.WTF::Vector.5"* %7 to i64*
  store atomic i64 0, i64* %448 monotonic, align 8
  store i32 0, i32* %394, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %447) #9
  br label %449

449:                                              ; preds = %393, %445
  %450 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 3
  store i32 0, i32* %450, align 8
  %451 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 4
  store i32 0, i32* %451, align 4
  %452 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 5
  store i32 0, i32* %452, align 8
  %453 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %454 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %453, align 8
  %455 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %456 = load i32, i32* %455, align 4
  %457 = zext i32 %456 to i64
  %458 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %454, i64 %457
  %459 = icmp eq i32 %456, 0
  br i1 %459, label %468, label %460

460:                                              ; preds = %449, %460
  %461 = phi i32 [ %465, %460 ], [ 0, %449 ]
  %462 = phi %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* [ %466, %460 ], [ %454, %449 ]
  %463 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %462, i64 0, i32 2
  %464 = load i32, i32* %463, align 4
  %465 = add i32 %464, %461
  store i32 %465, i32* %452, align 8
  %466 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %462, i64 1
  %467 = icmp eq %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %466, %458
  br i1 %467, label %468, label %460

468:                                              ; preds = %460, %449
  ret void
}

declare void @_ZN5blink15SegmentedString7PrependERKS0_NS0_11PrependTypeE(%"class.blink::SegmentedString"*, %"class.blink::SegmentedString"* dereferenceable(88), i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink25BackgroundHTMLInputStream31UpdateTotalCheckpointTokenCountEv(%"class.blink::BackgroundHTMLInputStream"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 5
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::BackgroundHTMLInputStream", %"class.blink::BackgroundHTMLInputStream"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %4, i64 %7
  %9 = icmp eq i32 %6, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %11, %1
  ret void

11:                                               ; preds = %1, %11
  %12 = phi i32 [ %16, %11 ], [ 0, %1 ]
  %13 = phi %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* [ %17, %11 ], [ %4, %1 ]
  %14 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %13, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = add i32 %12, %15
  store i32 %16, i32* %2, align 8
  %17 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %13, i64 1
  %18 = icmp eq %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %17, %8
  br i1 %18, label %10, label %11
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"*) local_unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp ugt i32 %3, %5
  %7 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %9
  br i1 %6, label %37, label %11

11:                                               ; preds = %1
  %12 = icmp eq i32 %3, %5
  br i1 %12, label %95, label %13

13:                                               ; preds = %11
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %14
  br label %16

16:                                               ; preds = %13, %34
  %17 = phi %"class.blink::SegmentedSubstring"* [ %35, %34 ], [ %15, %13 ]
  %18 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 0, i32 5, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %21
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi i32 [ %29, %28 ], [ %27, %21 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #9
  br label %34

34:                                               ; preds = %33, %30, %16
  %35 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 1
  %36 = icmp eq %"class.blink::SegmentedSubstring"* %35, %10
  br i1 %36, label %95, label %16

37:                                               ; preds = %1
  %38 = icmp eq i32 %5, 0
  br i1 %38, label %63, label %39

39:                                               ; preds = %37, %57
  %40 = phi %"class.blink::SegmentedSubstring"* [ %58, %57 ], [ %8, %37 ]
  %41 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 0, i32 5, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #9
  br label %57

57:                                               ; preds = %56, %53, %39
  %58 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 1
  %59 = icmp eq %"class.blink::SegmentedSubstring"* %58, %10
  br i1 %59, label %60, label %39

60:                                               ; preds = %57
  %61 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %62 = load i32, i32* %2, align 8
  br label %63

63:                                               ; preds = %60, %37
  %64 = phi i32 [ %62, %60 ], [ %3, %37 ]
  %65 = phi %"class.blink::SegmentedSubstring"* [ %61, %60 ], [ %8, %37 ]
  %66 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %68
  %70 = icmp eq i32 %64, %67
  br i1 %70, label %95, label %71

71:                                               ; preds = %63
  %72 = zext i32 %64 to i64
  %73 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %72
  br label %74

74:                                               ; preds = %71, %92
  %75 = phi %"class.blink::SegmentedSubstring"* [ %93, %92 ], [ %73, %71 ]
  %76 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 0, i32 5, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %77) #9
  br label %92

92:                                               ; preds = %91, %88, %74
  %93 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 1
  %94 = icmp eq %"class.blink::SegmentedSubstring"* %93, %69
  br i1 %94, label %95, label %74

95:                                               ; preds = %34, %92, %63, %11
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Deque"*, %"class.WTF::Deque"* dereferenceable(24)) unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %5, align 8
  %6 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 0, i32* %6, align 8
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = zext i32 %4 to i64
  %10 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm(i64 %9) #9
  %11 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %10, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18SegmentedSubstringEEEPKcv, i64 0, i64 0)) #9
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast %"class.WTF::Deque"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = udiv i64 %10, 40
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %6, align 8
  %16 = bitcast i8* %11 to %"class.blink::SegmentedSubstring"*
  br label %17

17:                                               ; preds = %2, %8
  %18 = phi %"class.blink::SegmentedSubstring"* [ null, %2 ], [ %16, %8 ]
  %19 = phi i32 [ 0, %2 ], [ %15, %8 ]
  %20 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %21 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %1, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  store i32 %22, i32* %20, align 8
  %23 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %24 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %1, i64 0, i32 2
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %23, align 4
  %26 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %27 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %26, align 8
  %28 = icmp ugt i32 %22, %25
  br i1 %28, label %67, label %29

29:                                               ; preds = %17
  %30 = zext i32 %22 to i64
  %31 = zext i32 %25 to i64
  %32 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %31
  %33 = icmp eq i32 %22, %25
  br i1 %33, label %146, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %18, i64 %30
  %36 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %30
  br label %37

37:                                               ; preds = %34, %63
  %38 = phi %"class.blink::SegmentedSubstring"* [ %64, %63 ], [ %35, %34 ]
  %39 = phi %"class.blink::SegmentedSubstring"* [ %65, %63 ], [ %36, %34 ]
  %40 = bitcast %"class.blink::SegmentedSubstring"* %38 to i8*
  %41 = bitcast %"class.blink::SegmentedSubstring"* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 26, i1 false) #9
  %42 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %39, i64 0, i32 5, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %38, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %43, %"class.WTF::StringImpl"** %44, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %45, label %63, label %46

46:                                               ; preds = %37
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = zext i32 %53 to i33
  %55 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %54, i33 1) #9
  %56 = extractvalue { i33, i1 } %55, 1
  %57 = extractvalue { i33, i1 } %55, 0
  %58 = icmp slt i33 %57, 0
  %59 = or i1 %56, %58
  br i1 %59, label %60, label %61, !prof !2

60:                                               ; preds = %51
  tail call void @llvm.trap() #9
  unreachable

61:                                               ; preds = %51
  %62 = trunc i33 %57 to i32
  store i32 %62, i32* %52, align 4
  br label %63

63:                                               ; preds = %61, %46, %37
  %64 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %38, i64 1
  %65 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %39, i64 1
  %66 = icmp eq %"class.blink::SegmentedSubstring"* %65, %32
  br i1 %66, label %146, label %37

67:                                               ; preds = %17
  %68 = zext i32 %25 to i64
  %69 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %68
  %70 = icmp eq i32 %25, 0
  br i1 %70, label %105, label %71

71:                                               ; preds = %67, %97
  %72 = phi %"class.blink::SegmentedSubstring"* [ %98, %97 ], [ %18, %67 ]
  %73 = phi %"class.blink::SegmentedSubstring"* [ %99, %97 ], [ %27, %67 ]
  %74 = bitcast %"class.blink::SegmentedSubstring"* %72 to i8*
  %75 = bitcast %"class.blink::SegmentedSubstring"* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 26, i1 false) #9
  %76 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %73, i64 0, i32 5, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %72, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %77, %"class.WTF::StringImpl"** %78, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %79, label %97, label %80

80:                                               ; preds = %71
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %97

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = zext i32 %87 to i33
  %89 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %88, i33 1) #9
  %90 = extractvalue { i33, i1 } %89, 1
  %91 = extractvalue { i33, i1 } %89, 0
  %92 = icmp slt i33 %91, 0
  %93 = or i1 %90, %92
  br i1 %93, label %94, label %95, !prof !2

94:                                               ; preds = %85
  tail call void @llvm.trap() #9
  unreachable

95:                                               ; preds = %85
  %96 = trunc i33 %91 to i32
  store i32 %96, i32* %86, align 4
  br label %97

97:                                               ; preds = %95, %80, %71
  %98 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %72, i64 1
  %99 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %73, i64 1
  %100 = icmp eq %"class.blink::SegmentedSubstring"* %99, %69
  br i1 %100, label %101, label %71

101:                                              ; preds = %97
  %102 = load i32, i32* %20, align 8
  %103 = load i32, i32* %6, align 8
  %104 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %5, align 8
  br label %105

105:                                              ; preds = %101, %67
  %106 = phi %"class.blink::SegmentedSubstring"* [ %104, %101 ], [ %18, %67 ]
  %107 = phi i32 [ %103, %101 ], [ %19, %67 ]
  %108 = phi i32 [ %102, %101 ], [ %22, %67 ]
  %109 = zext i32 %108 to i64
  %110 = zext i32 %107 to i64
  %111 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %110
  %112 = icmp eq i32 %108, %107
  br i1 %112, label %146, label %113

113:                                              ; preds = %105
  %114 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %106, i64 %109
  %115 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %109
  br label %116

116:                                              ; preds = %113, %142
  %117 = phi %"class.blink::SegmentedSubstring"* [ %143, %142 ], [ %114, %113 ]
  %118 = phi %"class.blink::SegmentedSubstring"* [ %144, %142 ], [ %115, %113 ]
  %119 = bitcast %"class.blink::SegmentedSubstring"* %117 to i8*
  %120 = bitcast %"class.blink::SegmentedSubstring"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 26, i1 false) #9
  %121 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %118, i64 0, i32 5, i32 0, i32 0
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8
  %123 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %117, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %122, %"class.WTF::StringImpl"** %123, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %124, label %142, label %125

125:                                              ; preds = %116
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i33
  %134 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %133, i33 1) #9
  %135 = extractvalue { i33, i1 } %134, 1
  %136 = extractvalue { i33, i1 } %134, 0
  %137 = icmp slt i33 %136, 0
  %138 = or i1 %135, %137
  br i1 %138, label %139, label %140, !prof !2

139:                                              ; preds = %130
  tail call void @llvm.trap() #9
  unreachable

140:                                              ; preds = %130
  %141 = trunc i33 %136 to i32
  store i32 %141, i32* %131, align 4
  br label %142

142:                                              ; preds = %140, %125, %116
  %143 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %117, i64 1
  %144 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %118, i64 1
  %145 = icmp eq %"class.blink::SegmentedSubstring"* %144, %111
  br i1 %145, label %146, label %116

146:                                              ; preds = %63, %142, %105, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 53634662
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 53634662) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = mul i64 %0, 40
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare void @_ZN5blink15SegmentedString5ClearEv(%"class.blink::SegmentedString"*) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %106, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %107, label %125, label %108

108:                                              ; preds = %99
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #9
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !2

122:                                              ; preds = %113
  tail call void @llvm.trap() #9
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %99, %108, %123
  %126 = load i32, i32* %3, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.5"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* dereferenceable(96)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %6, align 8
  %8 = icmp ugt %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 %10
  %12 = icmp ugt %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink25BackgroundHTMLInputStream10CheckpointEEEmm(i64 %27) #9
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink25BackgroundHTMLInputStream10CheckpointEEEPKcv, i64 0, i64 0)) #9
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector.5"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = udiv i64 %28, 96
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.5"* %0, i32 %22) #9
  %36 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %1 to i64
  %39 = ptrtoint %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = sdiv exact i64 %40, 96
  %42 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !4

52:                                               ; preds = %37
  %53 = icmp eq %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink25BackgroundHTMLInputStream10CheckpointEEEmm(i64 %55) #9
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink25BackgroundHTMLInputStream10CheckpointEEEPKcv, i64 0, i64 0)) #9
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector.5"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = udiv i64 %56, 96
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.5"* %0, i32 %50) #9
  %64 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72
  %74 = bitcast %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %73 to i8*
  %75 = bitcast %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 26, i1 false) #9
  %76 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72, i32 0, i32 0, i32 5
  %77 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70, i64 0, i32 0, i32 0, i32 5
  %78 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %77, i64 0, i32 0, i32 0
  %79 = bitcast %"class.WTF::String"* %77 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %"class.WTF::String"* %76 to i64*
  store i64 %80, i64* %81, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %78, align 8
  %82 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72, i32 0, i32 1
  %83 = bitcast i32* %82 to i8*
  %84 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70, i64 0, i32 0, i32 1
  %85 = bitcast i32* %84 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %85, i64 12, i1 false) #9
  %86 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72, i32 0, i32 5
  %87 = bitcast %"class.WTF::Deque"* %86 to i8*
  %88 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70, i64 0, i32 0, i32 5
  %89 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72, i32 0, i32 5, i32 1
  %90 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72, i32 0, i32 5, i32 2
  %91 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72, i32 0, i32 5, i32 0, i32 0, i32 0, i32 2
  %92 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70, i64 0, i32 0, i32 5, i32 1
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 24, i1 false) #9
  %93 = load i32, i32* %92, align 8
  %94 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70, i64 0, i32 0, i32 5, i32 2
  %95 = load i32, i32* %94, align 4
  %96 = icmp ugt i32 %93, %95
  %97 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = select i1 %96, i32 %98, i32 %95
  %100 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 2
  store i32 %99, i32* %100, align 4
  %101 = bitcast %"class.WTF::Deque"* %88 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"class.WTF::Deque"* %86 to i64*
  %104 = load i64, i64* %103, align 8
  store atomic i64 %104, i64* %101 monotonic, align 8
  store atomic i64 %102, i64* %103 monotonic, align 8
  %105 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72, i32 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = load i32, i32* %97, align 4
  store i32 %107, i32* %105, align 4
  store i32 %106, i32* %97, align 4
  %108 = load i32, i32* %91, align 4
  %109 = load i32, i32* %100, align 4
  store i32 %109, i32* %91, align 4
  store i32 %108, i32* %100, align 4
  %110 = load i32, i32* %89, align 4
  %111 = load i32, i32* %92, align 4
  store i32 %111, i32* %89, align 4
  store i32 %110, i32* %92, align 4
  %112 = load i32, i32* %90, align 4
  %113 = load i32, i32* %94, align 4
  store i32 %113, i32* %90, align 4
  store i32 %112, i32* %94, align 4
  %114 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72, i32 0, i32 6
  %115 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70, i64 0, i32 0, i32 6
  %116 = bitcast i8* %115 to i16*
  %117 = bitcast i8* %114 to i16*
  %118 = load i16, i16* %116, align 8
  store i16 %118, i16* %117, align 8
  %119 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %69, i64 %72, i32 1
  %120 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %70, i64 0, i32 1
  %121 = bitcast i32* %120 to i64*
  %122 = bitcast i32* %119 to i64*
  %123 = load i64, i64* %121, align 8
  store i64 %123, i64* %122, align 8
  %124 = load i32, i32* %3, align 4
  %125 = add i32 %124, 1
  store i32 %125, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.5"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.5"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  tail call void @_ZN3WTF11VectorMoverILb0EN5blink25BackgroundHTMLInputStream10CheckpointENS_18PartitionAllocatorEE4MoveEPS3_S6_S6_b(%"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %6, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %10, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* null, i1 zeroext true) #9
  %13 = bitcast %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %13) #9
  br label %32

14:                                               ; preds = %2
  %15 = zext i32 %1 to i64
  %16 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink25BackgroundHTMLInputStream10CheckpointEEEmm(i64 %15) #9
  %17 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %16, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink25BackgroundHTMLInputStream10CheckpointEEEPKcv, i64 0, i64 0)) #9
  %18 = udiv i64 %16, 96
  %19 = bitcast i8* %17 to %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*
  %20 = ptrtoint i8* %17 to i64
  %21 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 0
  %22 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %21, align 8
  %23 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %22, i64 %25
  tail call void @_ZN3WTF11VectorMoverILb0EN5blink25BackgroundHTMLInputStream10CheckpointENS_18PartitionAllocatorEE4MoveEPS3_S6_S6_b(%"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %22, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %26, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %19, i1 zeroext false) #9
  %27 = bitcast %"class.WTF::Vector.5"* %0 to i8**
  %28 = load i8*, i8** %27, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %28) #9
  %29 = bitcast %"class.WTF::Vector.5"* %0 to i64*
  store atomic i64 %20, i64* %29 monotonic, align 8
  %30 = trunc i64 %18 to i32
  %31 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %30, i32* %31, align 8
  br label %32

32:                                               ; preds = %14, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink25BackgroundHTMLInputStream10CheckpointEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 22347776
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 22347776) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = mul i64 %0, 96
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF11VectorMoverILb0EN5blink25BackgroundHTMLInputStream10CheckpointENS_18PartitionAllocatorEE4MoveEPS3_S6_S6_b(%"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %5 = icmp eq %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %0, %1
  br i1 %5, label %93, label %6

6:                                                ; preds = %4, %89
  %7 = phi %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* [ %91, %89 ], [ %0, %4 ]
  %8 = phi %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* [ %90, %89 ], [ %2, %4 ]
  %9 = bitcast %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8 to i8*
  %10 = bitcast %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 26, i1 false) #9
  %11 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 0, i32 5
  %12 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 0, i32 0, i32 5
  %13 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  %14 = bitcast %"class.WTF::String"* %12 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.WTF::String"* %11 to i64*
  store i64 %15, i64* %16, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %13, align 8
  %17 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 1
  %18 = bitcast i32* %17 to i8*
  %19 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 0, i32 1
  %20 = bitcast i32* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %20, i64 12, i1 false) #9
  %21 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 5
  %22 = bitcast %"class.WTF::Deque"* %21 to i8*
  %23 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 0, i32 5
  %24 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 5, i32 1
  %25 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 5, i32 2
  %26 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 2
  %27 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 0, i32 5, i32 1
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #9
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 0, i32 5, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp ugt i32 %28, %30
  %32 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = select i1 %31, i32 %33, i32 %30
  %35 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 2
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.WTF::Deque"* %23 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.WTF::Deque"* %21 to i64*
  %39 = load i64, i64* %38, align 8
  store atomic i64 %39, i64* %36 monotonic, align 8
  store atomic i64 %37, i64* %38 monotonic, align 8
  %40 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = load i32, i32* %32, align 4
  store i32 %42, i32* %40, align 4
  store i32 %41, i32* %32, align 4
  %43 = load i32, i32* %26, align 4
  %44 = load i32, i32* %35, align 4
  store i32 %44, i32* %26, align 4
  store i32 %43, i32* %35, align 4
  %45 = load i32, i32* %24, align 4
  %46 = load i32, i32* %27, align 4
  store i32 %46, i32* %24, align 4
  store i32 %45, i32* %27, align 4
  %47 = load i32, i32* %25, align 4
  %48 = load i32, i32* %29, align 4
  store i32 %48, i32* %25, align 4
  store i32 %47, i32* %29, align 4
  %49 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 0, i32 6
  %50 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 0, i32 6
  %51 = bitcast i8* %50 to i16*
  %52 = bitcast i8* %49 to i16*
  %53 = load i16, i16* %51, align 8
  store i16 %53, i16* %52, align 8
  %54 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 0, i32 1
  %55 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 1
  %56 = bitcast i32* %55 to i64*
  %57 = bitcast i32* %54 to i64*
  %58 = load i64, i64* %56, align 8
  store i64 %58, i64* %57, align 8
  %59 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %59, align 8
  %61 = icmp eq %"class.blink::SegmentedSubstring"* %60, null
  br i1 %61, label %72, label %62

62:                                               ; preds = %6
  %63 = bitcast %"class.blink::SegmentedSubstring"* %60 to i8*
  %64 = load i32, i32* %27, align 8
  %65 = load i32, i32* %29, align 4
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %70, label %67

67:                                               ; preds = %62
  tail call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %23) #9
  %68 = bitcast %"class.WTF::Deque"* %23 to i8**
  %69 = load i8*, i8** %68, align 8
  br label %70

70:                                               ; preds = %67, %62
  %71 = phi i8* [ %69, %67 ], [ %63, %62 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %71) #9
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %59, align 8
  br label %72

72:                                               ; preds = %70, %6
  %73 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %75, label %89, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  br i1 %80, label %83, label %85

83:                                               ; preds = %76
  %84 = add i32 %82, -1
  store i32 %84, i32* %81, align 4
  br label %85

85:                                               ; preds = %83, %76
  %86 = phi i32 [ %84, %83 ], [ %82, %76 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %74) #9
  br label %89

89:                                               ; preds = %72, %85, %88
  %90 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %8, i64 1
  %91 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %7, i64 1
  %92 = icmp eq %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %91, %1
  br i1 %92, label %93, label %6

93:                                               ; preds = %89, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(96) %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* @_ZN3WTF6VectorIN5blink25BackgroundHTMLInputStream10CheckpointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.blink::BackgroundHTMLInputStream::Checkpoint"*, %"struct.blink::BackgroundHTMLInputStream::Checkpoint"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"struct.blink::BackgroundHTMLInputStream::Checkpoint", %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %24, i64 %25
  ret %"struct.blink::BackgroundHTMLInputStream::Checkpoint"* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::String"*, %"class.WTF::String"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %24, i64 %25
  ret %"class.WTF::String"* %26
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
