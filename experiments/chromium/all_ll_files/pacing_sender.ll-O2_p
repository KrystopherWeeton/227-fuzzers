; ModuleID = '../../net/third_party/quiche/src/quic/core/congestion_control/pacing_sender.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/congestion_control/pacing_sender.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::PacingSender" = type <{ %"class.quic::SendAlgorithmInterface"*, %"class.quic::QuicBandwidth", i32, [4 x i8], %"class.quic::QuicTime", i32, i32, %"class.quic::QuicTime::Delta", i8, [7 x i8] }>
%"class.quic::SendAlgorithmInterface" = type { i32 (...)** }
%"class.quic::QuicBandwidth" = type { i64 }
%"class.quic::QuicTime" = type { i64 }
%"class.quic::QuicTime::Delta" = type { i64 }
%"class.std::__1::vector" = type opaque
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.quic::LostPacket"*, %"struct.quic::LostPacket"*, %"class.std::__1::__compressed_pair" }
%"struct.quic::LostPacket" = type <{ %"class.quic::QuicPacketNumber", i16, [6 x i8] }>
%"class.quic::QuicPacketNumber" = type { i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.quic::LostPacket"* }

@FLAGS_quic_reloadable_flag_quic_donot_reset_ideal_next_packet_send_time = external local_unnamed_addr global i8, align 1
@FLAGS_quic_lumpy_pacing_size = external local_unnamed_addr global i32, align 4
@FLAGS_quic_lumpy_pacing_cwnd_fraction = external local_unnamed_addr global double, align 8

@_ZN4quic12PacingSenderC1Ev = hidden unnamed_addr alias void (%"class.quic::PacingSender"*), void (%"class.quic::PacingSender"*)* @_ZN4quic12PacingSenderC2Ev
@_ZN4quic12PacingSenderD1Ev = hidden unnamed_addr alias void (%"class.quic::PacingSender"*), void (%"class.quic::PacingSender"*)* @_ZN4quic12PacingSenderD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4quic12PacingSenderC2Ev(%"class.quic::PacingSender"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 2
  %3 = bitcast %"class.quic::PacingSender"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  store i32 10, i32* %2, align 8
  %4 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 4, i32 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 5
  store i32 10, i32* %5, align 8
  %6 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 6
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 7, i32 0
  store i64 1000, i64* %7, align 8
  %8 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 8
  store i8 0, i8* %8, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4quic12PacingSenderD2Ev(%"class.quic::PacingSender"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic12PacingSender10set_senderEPNS_22SendAlgorithmInterfaceE(%"class.quic::PacingSender"* nocapture, %"class.quic::SendAlgorithmInterface"*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 0
  store %"class.quic::SendAlgorithmInterface"* %1, %"class.quic::SendAlgorithmInterface"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic12PacingSender17OnCongestionEventEbmNS_8QuicTimeERKNSt3__16vectorINS_11AckedPacketENS2_9allocatorIS4_EEEERKNS3_INS_10LostPacketENS5_ISA_EEEE(%"class.quic::PacingSender"* nocapture, i1 zeroext, i64, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.0"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %7 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %5, i64 0, i32 0, i32 0
  %8 = load %"struct.quic::LostPacket"*, %"struct.quic::LostPacket"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %5, i64 0, i32 0, i32 1
  %10 = load %"struct.quic::LostPacket"*, %"struct.quic::LostPacket"** %9, align 8
  %11 = icmp eq %"struct.quic::LostPacket"* %8, %10
  br i1 %11, label %14, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 2
  store i32 0, i32* %13, align 8
  br label %14

14:                                               ; preds = %12, %6
  %15 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 0
  %16 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %15, align 8
  %17 = bitcast %"class.quic::SendAlgorithmInterface"* %16 to void (%"class.quic::SendAlgorithmInterface"*, i1, i64, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.0"*)***
  %18 = load void (%"class.quic::SendAlgorithmInterface"*, i1, i64, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.0"*)**, void (%"class.quic::SendAlgorithmInterface"*, i1, i64, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.0"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.quic::SendAlgorithmInterface"*, i1, i64, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.0"*)*, void (%"class.quic::SendAlgorithmInterface"*, i1, i64, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.0"*)** %18, i64 5
  %20 = load void (%"class.quic::SendAlgorithmInterface"*, i1, i64, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.0"*)*, void (%"class.quic::SendAlgorithmInterface"*, i1, i64, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.0"*)** %19, align 8
  tail call void %20(%"class.quic::SendAlgorithmInterface"* %16, i1 zeroext %1, i64 %2, i64 %3, %"class.std::__1::vector"* %4, %"class.std::__1::vector.0"* dereferenceable(24) %5) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic12PacingSender12OnPacketSentENS_8QuicTimeEmNS_16QuicPacketNumberEmNS_22HasRetransmittableDataE(%"class.quic::PacingSender"* nocapture, i64, i64, i64, i64, i8 zeroext) local_unnamed_addr #3 align 2 {
  %7 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 0
  %8 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %7, align 8
  %9 = bitcast %"class.quic::SendAlgorithmInterface"* %8 to void (%"class.quic::SendAlgorithmInterface"*, i64, i64, i64, i64, i8)***
  %10 = load void (%"class.quic::SendAlgorithmInterface"*, i64, i64, i64, i64, i8)**, void (%"class.quic::SendAlgorithmInterface"*, i64, i64, i64, i64, i8)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.quic::SendAlgorithmInterface"*, i64, i64, i64, i64, i8)*, void (%"class.quic::SendAlgorithmInterface"*, i64, i64, i64, i64, i8)** %10, i64 6
  %12 = load void (%"class.quic::SendAlgorithmInterface"*, i64, i64, i64, i64, i8)*, void (%"class.quic::SendAlgorithmInterface"*, i64, i64, i64, i64, i8)** %11, align 8
  tail call void %12(%"class.quic::SendAlgorithmInterface"* %8, i64 %1, i64 %2, i64 %3, i64 %4, i8 zeroext %5) #5
  %13 = icmp eq i8 %5, 1
  br i1 %13, label %14, label %129

14:                                               ; preds = %6
  %15 = icmp eq i64 %2, 0
  br i1 %15, label %16, label %37

16:                                               ; preds = %14
  %17 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %7, align 8
  %18 = bitcast %"class.quic::SendAlgorithmInterface"* %17 to i1 (%"class.quic::SendAlgorithmInterface"*)***
  %19 = load i1 (%"class.quic::SendAlgorithmInterface"*)**, i1 (%"class.quic::SendAlgorithmInterface"*)*** %18, align 8
  %20 = getelementptr inbounds i1 (%"class.quic::SendAlgorithmInterface"*)*, i1 (%"class.quic::SendAlgorithmInterface"*)** %19, i64 15
  %21 = load i1 (%"class.quic::SendAlgorithmInterface"*)*, i1 (%"class.quic::SendAlgorithmInterface"*)** %20, align 8
  %22 = tail call zeroext i1 %21(%"class.quic::SendAlgorithmInterface"* %17) #5
  br i1 %22, label %37, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 5
  %25 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %7, align 8
  %26 = bitcast %"class.quic::SendAlgorithmInterface"* %25 to i64 (%"class.quic::SendAlgorithmInterface"*)***
  %27 = load i64 (%"class.quic::SendAlgorithmInterface"*)**, i64 (%"class.quic::SendAlgorithmInterface"*)*** %26, align 8
  %28 = getelementptr inbounds i64 (%"class.quic::SendAlgorithmInterface"*)*, i64 (%"class.quic::SendAlgorithmInterface"*)** %27, i64 13
  %29 = load i64 (%"class.quic::SendAlgorithmInterface"*)*, i64 (%"class.quic::SendAlgorithmInterface"*)** %28, align 8
  %30 = tail call i64 %29(%"class.quic::SendAlgorithmInterface"* %25) #5
  %31 = udiv i64 %30, 1460
  %32 = trunc i64 %31 to i32
  %33 = load i32, i32* %24, align 4
  %34 = icmp ugt i32 %33, %32
  %35 = select i1 %34, i32 %32, i32 %33
  %36 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 2
  store i32 %35, i32* %36, align 8
  br label %37

37:                                               ; preds = %23, %16, %14
  %38 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %37
  %42 = add i32 %39, -1
  store i32 %42, i32* %38, align 8
  %43 = load i8, i8* @FLAGS_quic_reloadable_flag_quic_donot_reset_ideal_next_packet_send_time, align 1, !range !2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 4, i32 0
  store i64 0, i64* %46, align 8
  br label %47

47:                                               ; preds = %41, %45
  %48 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 8
  store i8 0, i8* %48, align 8
  br label %129

49:                                               ; preds = %37
  %50 = add i64 %4, %2
  %51 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 1, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = icmp eq i64 %52, 0
  %54 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %7, align 8
  %55 = bitcast %"class.quic::SendAlgorithmInterface"* %54 to i64 (%"class.quic::SendAlgorithmInterface"*, i64)***
  %56 = load i64 (%"class.quic::SendAlgorithmInterface"*, i64)**, i64 (%"class.quic::SendAlgorithmInterface"*, i64)*** %55, align 8
  %57 = getelementptr inbounds i64 (%"class.quic::SendAlgorithmInterface"*, i64)*, i64 (%"class.quic::SendAlgorithmInterface"*, i64)** %56, i64 11
  %58 = load i64 (%"class.quic::SendAlgorithmInterface"*, i64)*, i64 (%"class.quic::SendAlgorithmInterface"*, i64)** %57, align 8
  %59 = tail call i64 %58(%"class.quic::SendAlgorithmInterface"* %54, i64 %50) #5
  br i1 %53, label %64, label %60

60:                                               ; preds = %49
  %61 = icmp slt i64 %59, %52
  %62 = select i1 %61, i64 %59, i64 %52
  %63 = icmp sgt i64 %62, 0
  br i1 %63, label %66, label %70

64:                                               ; preds = %49
  %65 = icmp eq i64 %59, 0
  br i1 %65, label %70, label %66

66:                                               ; preds = %60, %64
  %67 = phi i64 [ %59, %64 ], [ %62, %60 ]
  %68 = mul i64 %4, 8000000
  %69 = udiv i64 %68, %67
  br label %70

70:                                               ; preds = %60, %64, %66
  %71 = phi i64 [ %69, %66 ], [ 0, %64 ], [ 0, %60 ]
  %72 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 8
  %73 = load i8, i8* %72, align 8, !range !2
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 6
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %107

79:                                               ; preds = %70, %75
  %80 = load i32, i32* @FLAGS_quic_lumpy_pacing_size, align 4
  %81 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %7, align 8
  %82 = bitcast %"class.quic::SendAlgorithmInterface"* %81 to i64 (%"class.quic::SendAlgorithmInterface"*)***
  %83 = load i64 (%"class.quic::SendAlgorithmInterface"*)**, i64 (%"class.quic::SendAlgorithmInterface"*)*** %82, align 8
  %84 = getelementptr inbounds i64 (%"class.quic::SendAlgorithmInterface"*)*, i64 (%"class.quic::SendAlgorithmInterface"*)** %83, i64 13
  %85 = load i64 (%"class.quic::SendAlgorithmInterface"*)*, i64 (%"class.quic::SendAlgorithmInterface"*)** %84, align 8
  %86 = tail call i64 %85(%"class.quic::SendAlgorithmInterface"* %81) #5
  %87 = uitofp i64 %86 to double
  %88 = load double, double* @FLAGS_quic_lumpy_pacing_cwnd_fraction, align 8
  %89 = fmul double %88, %87
  %90 = fdiv double %89, 1.460000e+03
  %91 = fptoui double %90 to i32
  %92 = icmp ugt i32 %80, %91
  %93 = select i1 %92, i32 %91, i32 %80
  %94 = icmp ugt i32 %93, 1
  %95 = select i1 %94, i32 %93, i32 1
  %96 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 6
  store i32 %95, i32* %96, align 4
  %97 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %7, align 8
  %98 = bitcast %"class.quic::SendAlgorithmInterface"* %97 to i64 (%"class.quic::SendAlgorithmInterface"*)***
  %99 = load i64 (%"class.quic::SendAlgorithmInterface"*)**, i64 (%"class.quic::SendAlgorithmInterface"*)*** %98, align 8
  %100 = getelementptr inbounds i64 (%"class.quic::SendAlgorithmInterface"*)*, i64 (%"class.quic::SendAlgorithmInterface"*)** %99, i64 12
  %101 = load i64 (%"class.quic::SendAlgorithmInterface"*)*, i64 (%"class.quic::SendAlgorithmInterface"*)** %100, align 8
  %102 = tail call i64 %101(%"class.quic::SendAlgorithmInterface"* %97) #5
  %103 = icmp slt i64 %102, 1200000
  br i1 %103, label %106, label %104

104:                                              ; preds = %79
  %105 = load i32, i32* %96, align 4
  br label %107

106:                                              ; preds = %79
  store i32 1, i32* %96, align 4
  br label %107

107:                                              ; preds = %104, %106, %75
  %108 = phi i32 [ %105, %104 ], [ 1, %106 ], [ %77, %75 ]
  %109 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 6
  %110 = add i32 %108, -1
  store i32 %110, i32* %109, align 4
  %111 = load i8, i8* %72, align 8, !range !2
  %112 = icmp eq i8 %111, 0
  %113 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 4, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = add nsw i64 %114, %71
  br i1 %112, label %116, label %120

116:                                              ; preds = %107
  %117 = add nsw i64 %71, %1
  %118 = icmp slt i64 %115, %117
  %119 = select i1 %118, i64 %117, i64 %115
  br label %120

120:                                              ; preds = %107, %116
  %121 = phi i64 [ %119, %116 ], [ %115, %107 ]
  store i64 %121, i64* %113, align 8
  %122 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %7, align 8
  %123 = bitcast %"class.quic::SendAlgorithmInterface"* %122 to i1 (%"class.quic::SendAlgorithmInterface"*, i64)***
  %124 = load i1 (%"class.quic::SendAlgorithmInterface"*, i64)**, i1 (%"class.quic::SendAlgorithmInterface"*, i64)*** %123, align 8
  %125 = getelementptr inbounds i1 (%"class.quic::SendAlgorithmInterface"*, i64)*, i1 (%"class.quic::SendAlgorithmInterface"*, i64)** %124, i64 10
  %126 = load i1 (%"class.quic::SendAlgorithmInterface"*, i64)*, i1 (%"class.quic::SendAlgorithmInterface"*, i64)** %125, align 8
  %127 = tail call zeroext i1 %126(%"class.quic::SendAlgorithmInterface"* %122, i64 %50) #5
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %72, align 8
  br label %129

129:                                              ; preds = %6, %120, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4quic12PacingSender10PacingRateEm(%"class.quic::PacingSender"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  %6 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 0
  %7 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %6, align 8
  %8 = bitcast %"class.quic::SendAlgorithmInterface"* %7 to i64 (%"class.quic::SendAlgorithmInterface"*, i64)***
  %9 = load i64 (%"class.quic::SendAlgorithmInterface"*, i64)**, i64 (%"class.quic::SendAlgorithmInterface"*, i64)*** %8, align 8
  %10 = getelementptr inbounds i64 (%"class.quic::SendAlgorithmInterface"*, i64)*, i64 (%"class.quic::SendAlgorithmInterface"*, i64)** %9, i64 11
  %11 = load i64 (%"class.quic::SendAlgorithmInterface"*, i64)*, i64 (%"class.quic::SendAlgorithmInterface"*, i64)** %10, align 8
  %12 = tail call i64 %11(%"class.quic::SendAlgorithmInterface"* %7, i64 %1) #5
  br i1 %5, label %18, label %13

13:                                               ; preds = %2
  %14 = icmp slt i64 %12, %4
  %15 = select i1 %14, i64 %12, i64 %4
  %16 = icmp sgt i64 %15, 0
  %17 = select i1 %16, i64 %15, i64 0
  br label %18

18:                                               ; preds = %2, %13
  %19 = phi i64 [ %17, %13 ], [ %12, %2 ]
  ret i64 %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic12PacingSender20OnApplicationLimitedEv(%"class.quic::PacingSender"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 8
  store i8 0, i8* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic12PacingSender14SetBurstTokensEj(%"class.quic::PacingSender"* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 5
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 0
  %5 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %4, align 8
  %6 = bitcast %"class.quic::SendAlgorithmInterface"* %5 to i64 (%"class.quic::SendAlgorithmInterface"*)***
  %7 = load i64 (%"class.quic::SendAlgorithmInterface"*)**, i64 (%"class.quic::SendAlgorithmInterface"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.quic::SendAlgorithmInterface"*)*, i64 (%"class.quic::SendAlgorithmInterface"*)** %7, i64 13
  %9 = load i64 (%"class.quic::SendAlgorithmInterface"*)*, i64 (%"class.quic::SendAlgorithmInterface"*)** %8, align 8
  %10 = tail call i64 %9(%"class.quic::SendAlgorithmInterface"* %5) #5
  %11 = udiv i64 %10, 1460
  %12 = trunc i64 %11 to i32
  %13 = load i32, i32* %3, align 4
  %14 = icmp ugt i32 %13, %12
  %15 = select i1 %14, i32 %12, i32 %13
  %16 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 2
  store i32 %15, i32* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4quic12PacingSender13TimeUntilSendENS_8QuicTimeEm(%"class.quic::PacingSender"* nocapture readonly, i64, i64) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 0
  %5 = load %"class.quic::SendAlgorithmInterface"*, %"class.quic::SendAlgorithmInterface"** %4, align 8
  %6 = bitcast %"class.quic::SendAlgorithmInterface"* %5 to i1 (%"class.quic::SendAlgorithmInterface"*, i64)***
  %7 = load i1 (%"class.quic::SendAlgorithmInterface"*, i64)**, i1 (%"class.quic::SendAlgorithmInterface"*, i64)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.quic::SendAlgorithmInterface"*, i64)*, i1 (%"class.quic::SendAlgorithmInterface"*, i64)** %7, i64 10
  %9 = load i1 (%"class.quic::SendAlgorithmInterface"*, i64)*, i1 (%"class.quic::SendAlgorithmInterface"*, i64)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.quic::SendAlgorithmInterface"* %5, i64 %2) #5
  br i1 %10, label %11, label %30

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = icmp ne i32 %13, 0
  %15 = icmp eq i64 %2, 0
  %16 = or i1 %15, %14
  br i1 %16, label %30, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 6
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %30

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 4, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.quic::PacingSender", %"class.quic::PacingSender"* %0, i64 0, i32 7, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = add nsw i64 %25, %1
  %27 = icmp slt i64 %26, %23
  %28 = sub nsw i64 %23, %1
  %29 = select i1 %27, i64 %28, i64 0
  ret i64 %29

30:                                               ; preds = %11, %17, %3
  %31 = phi i64 [ 9223372036854775807, %3 ], [ 0, %17 ], [ 0, %11 ]
  ret i64 %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
