; ModuleID = '../../media/cdm/cbcs_decryptor.cc'
source_filename = "../../media/cdm/cbcs_decryptor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::DecoderBuffer" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.std::__1::unique_ptr", %"class.base::TimeDelta", %"class.base::TimeDelta", i64, i64, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.14", %"struct.std::__1::pair", i8, [7 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.media::ReadOnlyUnalignedMapping"* }
%"class.media::ReadOnlyUnalignedMapping" = type { %"class.base::ReadOnlySharedMemoryMapping", i64, i64 }
%"class.base::ReadOnlySharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.media::UnalignedSharedMemory"* }
%"class.media::UnalignedSharedMemory" = type { %"class.base::subtle::PlatformSharedMemoryRegion", %"class.base::WritableSharedMemoryMapping", %"class.base::ReadOnlySharedMemoryMapping", i8, i64, i8* }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.media::DecryptConfig"* }
%"class.media::DecryptConfig" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.absl::optional", [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.media::SubsampleEntry"*, %"struct.media::SubsampleEntry"*, %"class.std::__1::__compressed_pair.20" }
%"struct.media::SubsampleEntry" = type { i32, i32 }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.media::SubsampleEntry"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.25 }
%union.anon.25 = type { %"class.media::EncryptionPattern" }
%"class.media::EncryptionPattern" = type { i32, i32 }
%"struct.std::__1::pair" = type { %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.crypto::SymmetricKey" = type { i32 (...)**, %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.media::AesCbcCrypto" = type { %struct.evp_cipher_ctx_st }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }

; Function Attrs: nounwind ssp uwtable
define hidden %"class.media::DecoderBuffer"* @_ZN5media17DecryptCbcsBufferERKNS_13DecoderBufferERKN6crypto12SymmetricKeyE(%"class.media::DecoderBuffer"* nocapture readonly dereferenceable(112), %"class.crypto::SymmetricKey"* dereferenceable(32)) local_unnamed_addr #0 {
  %3 = alloca %"class.media::EncryptionPattern", align 4
  %4 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 6
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %7 = load %"class.media::DecryptConfig"*, %"class.media::DecryptConfig"** %6, align 8
  %8 = bitcast %"class.media::EncryptionPattern"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #6
  %9 = getelementptr inbounds %"class.media::EncryptionPattern", %"class.media::EncryptionPattern"* %3, i64 0, i32 0
  store i32 -1431655766, i32* %9, align 4
  %10 = getelementptr inbounds %"class.media::EncryptionPattern", %"class.media::EncryptionPattern"* %3, i64 0, i32 1
  store i32 -1431655766, i32* %10, align 4
  %11 = getelementptr inbounds %"class.media::DecryptConfig", %"class.media::DecryptConfig"* %7, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 4, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %2
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #7
  unreachable

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.media::DecryptConfig", %"class.media::DecryptConfig"* %7, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN5media17EncryptionPatternC1ERKS0_(%"class.media::EncryptionPattern"* nonnull %3, %"class.media::EncryptionPattern"* dereferenceable(8) %16) #6
  %17 = call i8* @_Znwm(i64 112) #8
  %18 = bitcast i8* %17 to %"class.media::DecoderBuffer"*
  call void @_ZN5media13DecoderBufferC1Em(%"class.media::DecoderBuffer"* nonnull %18, i64 %5) #6
  %19 = getelementptr inbounds i8, i8* %17, i64 8
  %20 = bitcast i8* %19 to i32*
  %21 = atomicrmw add i32* %20, i32 1 monotonic
  %22 = ptrtoint i8* %17 to i64
  %23 = getelementptr inbounds i8, i8* %17, i64 16
  %24 = bitcast i8* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 4, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = bitcast i8* %17 to void (%"class.media::DecoderBuffer"*, i64)***
  %29 = load void (%"class.media::DecoderBuffer"*, i64)**, void (%"class.media::DecoderBuffer"*, i64)*** %28, align 8
  %30 = load void (%"class.media::DecoderBuffer"*, i64)*, void (%"class.media::DecoderBuffer"*, i64)** %29, align 8
  call void %30(%"class.media::DecoderBuffer"* nonnull %18, i64 %27) #6
  %31 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 5, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds i8, i8* %17, i64 32
  %34 = bitcast i8* %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 13
  %36 = load i8, i8* %35, align 8, !range !2
  %37 = getelementptr inbounds i8, i8* %17, i64 104
  store i8 %36, i8* %37, align 8
  %38 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 7
  %41 = load i64, i64* %40, align 8
  call void @_ZN5media13DecoderBuffer16CopySideDataFromEPKhm(%"class.media::DecoderBuffer"* nonnull %18, i8* %39, i64 %41) #6
  %42 = getelementptr inbounds %"class.media::DecryptConfig", %"class.media::DecryptConfig"* %7, i64 0, i32 4
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %42, i64 0, i32 0, i32 0
  %44 = load %"struct.media::SubsampleEntry"*, %"struct.media::SubsampleEntry"** %43, align 8
  %45 = getelementptr inbounds %"class.media::DecryptConfig", %"class.media::DecryptConfig"* %7, i64 0, i32 4, i32 0, i32 1
  %46 = load %"struct.media::SubsampleEntry"*, %"struct.media::SubsampleEntry"** %45, align 8
  %47 = icmp eq %"struct.media::SubsampleEntry"* %44, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %15
  %49 = getelementptr inbounds %"class.media::DecryptConfig", %"class.media::DecryptConfig"* %7, i64 0, i32 3
  %50 = bitcast %"class.std::__1::basic_string"* %49 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %50, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = bitcast %"class.std::__1::basic_string"* %49 to i8*
  %57 = select i1 %53, i8* %55, i8* %56
  %58 = getelementptr inbounds %"class.media::DecryptConfig", %"class.media::DecryptConfig"* %7, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = zext i8 %52 to i64
  %61 = select i1 %53, i64 %59, i64 %60
  %62 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %63 = load %"class.media::ReadOnlyUnalignedMapping"*, %"class.media::ReadOnlyUnalignedMapping"** %62, align 8
  %64 = icmp eq %"class.media::ReadOnlyUnalignedMapping"* %63, null
  br i1 %64, label %71, label %65

65:                                               ; preds = %48
  %66 = getelementptr inbounds %"class.media::ReadOnlyUnalignedMapping", %"class.media::ReadOnlyUnalignedMapping"* %63, i64 0, i32 0, i32 0, i32 1
  %67 = load i8*, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %65
  %70 = call i8* @_ZNK5media24ReadOnlyUnalignedMapping6memoryEv(%"class.media::ReadOnlyUnalignedMapping"* nonnull %63) #6
  br label %81

71:                                               ; preds = %65, %48
  %72 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %73 = load %"class.media::UnalignedSharedMemory"*, %"class.media::UnalignedSharedMemory"** %72, align 8
  %74 = icmp eq %"class.media::UnalignedSharedMemory"* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.media::UnalignedSharedMemory", %"class.media::UnalignedSharedMemory"* %73, i64 0, i32 5
  %77 = load i8*, i8** %76, align 8
  br label %81

78:                                               ; preds = %71
  %79 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  br label %81

81:                                               ; preds = %69, %75, %78
  %82 = phi i8* [ %70, %69 ], [ %77, %75 ], [ %80, %78 ]
  %83 = call fastcc zeroext i1 @_ZN5media12_GLOBAL__N_118DecryptWithPatternERKN6crypto12SymmetricKeyEN4base4spanIKhLm18446744073709551615EEERKNS_17EncryptionPatternES8_Ph(%"class.crypto::SymmetricKey"* dereferenceable(32) %1, i64 %61, i8* %57, %"class.media::EncryptionPattern"* nonnull dereferenceable(8) %3, i64 %5, i8* %82, i8* %25)
  br i1 %83, label %84, label %159

84:                                               ; preds = %81
  %85 = atomicrmw add i32* %20, i32 1 monotonic
  br label %159

86:                                               ; preds = %15
  %87 = call zeroext i1 @_ZN5media25VerifySubsamplesMatchSizeERKNSt3__16vectorINS_14SubsampleEntryENS0_9allocatorIS2_EEEEm(%"class.std::__1::vector"* dereferenceable(24) %42, i64 %5) #6
  br i1 %87, label %88, label %159

88:                                               ; preds = %86
  %89 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %90 = load %"class.media::ReadOnlyUnalignedMapping"*, %"class.media::ReadOnlyUnalignedMapping"** %89, align 8
  %91 = icmp eq %"class.media::ReadOnlyUnalignedMapping"* %90, null
  br i1 %91, label %98, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.media::ReadOnlyUnalignedMapping", %"class.media::ReadOnlyUnalignedMapping"* %90, i64 0, i32 0, i32 0, i32 1
  %94 = load i8*, i8** %93, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %92
  %97 = call i8* @_ZNK5media24ReadOnlyUnalignedMapping6memoryEv(%"class.media::ReadOnlyUnalignedMapping"* nonnull %90) #6
  br label %108

98:                                               ; preds = %92, %88
  %99 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %100 = load %"class.media::UnalignedSharedMemory"*, %"class.media::UnalignedSharedMemory"** %99, align 8
  %101 = icmp eq %"class.media::UnalignedSharedMemory"* %100, null
  br i1 %101, label %105, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.media::UnalignedSharedMemory", %"class.media::UnalignedSharedMemory"* %100, i64 0, i32 5
  %104 = load i8*, i8** %103, align 8
  br label %108

105:                                              ; preds = %98
  %106 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  br label %108

108:                                              ; preds = %96, %102, %105
  %109 = phi i8* [ %97, %96 ], [ %104, %102 ], [ %107, %105 ]
  %110 = load %"struct.media::SubsampleEntry"*, %"struct.media::SubsampleEntry"** %43, align 8
  %111 = load %"struct.media::SubsampleEntry"*, %"struct.media::SubsampleEntry"** %45, align 8
  %112 = icmp eq %"struct.media::SubsampleEntry"* %110, %111
  br i1 %112, label %168, label %113

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.media::DecryptConfig", %"class.media::DecryptConfig"* %7, i64 0, i32 3
  %115 = bitcast %"class.std::__1::basic_string"* %114 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %116 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %115, i64 0, i32 1, i32 0
  %117 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %114, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::basic_string"* %114 to i8*
  %119 = getelementptr inbounds %"class.media::DecryptConfig", %"class.media::DecryptConfig"* %7, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %120

120:                                              ; preds = %113, %154
  %121 = phi i8* [ %109, %113 ], [ %156, %154 ]
  %122 = phi i8* [ %25, %113 ], [ %155, %154 ]
  %123 = phi %"struct.media::SubsampleEntry"* [ %110, %113 ], [ %157, %154 ]
  %124 = getelementptr inbounds %"struct.media::SubsampleEntry", %"struct.media::SubsampleEntry"* %123, i64 0, i32 0
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %133, label %127

127:                                              ; preds = %120
  %128 = zext i32 %125 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %122, i8* align 1 %121, i64 %128, i1 false)
  %129 = load i32, i32* %124, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %121, i64 %130
  %132 = getelementptr inbounds i8, i8* %122, i64 %130
  br label %133

133:                                              ; preds = %120, %127
  %134 = phi i8* [ %132, %127 ], [ %122, %120 ]
  %135 = phi i8* [ %131, %127 ], [ %121, %120 ]
  %136 = getelementptr inbounds %"struct.media::SubsampleEntry", %"struct.media::SubsampleEntry"* %123, i64 0, i32 1
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %154, label %139

139:                                              ; preds = %133
  %140 = load i8, i8* %116, align 1
  %141 = icmp slt i8 %140, 0
  %142 = load i8*, i8** %117, align 8
  %143 = select i1 %141, i8* %142, i8* %118
  %144 = load i64, i64* %119, align 8
  %145 = zext i8 %140 to i64
  %146 = select i1 %141, i64 %144, i64 %145
  %147 = zext i32 %137 to i64
  %148 = call fastcc zeroext i1 @_ZN5media12_GLOBAL__N_118DecryptWithPatternERKN6crypto12SymmetricKeyEN4base4spanIKhLm18446744073709551615EEERKNS_17EncryptionPatternES8_Ph(%"class.crypto::SymmetricKey"* dereferenceable(32) %1, i64 %146, i8* %143, %"class.media::EncryptionPattern"* nonnull dereferenceable(8) %3, i64 %147, i8* %135, i8* %134)
  br i1 %148, label %149, label %159

149:                                              ; preds = %139
  %150 = load i32, i32* %136, align 4
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %135, i64 %151
  %153 = getelementptr inbounds i8, i8* %134, i64 %151
  br label %154

154:                                              ; preds = %133, %149
  %155 = phi i8* [ %134, %133 ], [ %153, %149 ]
  %156 = phi i8* [ %135, %133 ], [ %152, %149 ]
  %157 = getelementptr inbounds %"struct.media::SubsampleEntry", %"struct.media::SubsampleEntry"* %123, i64 1
  %158 = icmp eq %"struct.media::SubsampleEntry"* %157, %111
  br i1 %158, label %168, label %120

159:                                              ; preds = %139, %84, %81, %86
  %160 = phi i64 [ %22, %84 ], [ 0, %81 ], [ 0, %86 ], [ 0, %139 ]
  %161 = atomicrmw sub i32* %20, i32 1 acq_rel
  %162 = icmp eq i32 %161, 1
  br i1 %162, label %163, label %168

163:                                              ; preds = %159
  %164 = bitcast i8* %17 to void (%"class.media::DecoderBuffer"*)***
  %165 = load void (%"class.media::DecoderBuffer"*)**, void (%"class.media::DecoderBuffer"*)*** %164, align 8
  %166 = getelementptr inbounds void (%"class.media::DecoderBuffer"*)*, void (%"class.media::DecoderBuffer"*)** %165, i64 2
  %167 = load void (%"class.media::DecoderBuffer"*)*, void (%"class.media::DecoderBuffer"*)** %166, align 8
  call void %167(%"class.media::DecoderBuffer"* nonnull %18) #6
  br label %168

168:                                              ; preds = %154, %108, %159, %163
  %169 = phi i64 [ %160, %159 ], [ %160, %163 ], [ %22, %108 ], [ %22, %154 ]
  call void @_ZN5media17EncryptionPatternD1Ev(%"class.media::EncryptionPattern"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #6
  %170 = inttoptr i64 %169 to %"class.media::DecoderBuffer"*
  ret %"class.media::DecoderBuffer"* %170
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5media17EncryptionPatternC1ERKS0_(%"class.media::EncryptionPattern"*, %"class.media::EncryptionPattern"* dereferenceable(8)) unnamed_addr #2

declare void @_ZN5media13DecoderBuffer16CopySideDataFromEPKhm(%"class.media::DecoderBuffer"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5media12_GLOBAL__N_118DecryptWithPatternERKN6crypto12SymmetricKeyEN4base4spanIKhLm18446744073709551615EEERKNS_17EncryptionPatternES8_Ph(%"class.crypto::SymmetricKey"* dereferenceable(32), i64, i8*, %"class.media::EncryptionPattern"* nocapture readonly dereferenceable(8), i64, i8*, i8*) unnamed_addr #0 {
  %8 = alloca %"class.media::AesCbcCrypto", align 8
  %9 = bitcast %"class.media::AesCbcCrypto"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 144, i1 false)
  call void @_ZN5media12AesCbcCryptoC1Ev(%"class.media::AesCbcCrypto"* nonnull %8) #6
  %10 = call zeroext i1 @_ZN5media12AesCbcCrypto10InitializeERKN6crypto12SymmetricKeyEN4base4spanIKhLm18446744073709551615EEE(%"class.media::AesCbcCrypto"* nonnull %8, %"class.crypto::SymmetricKey"* dereferenceable(32) %0, i64 %1, i8* %2) #6
  br i1 %10, label %11, label %56

11:                                               ; preds = %7
  %12 = lshr i64 %4, 4
  %13 = and i64 %4, 15
  %14 = getelementptr inbounds %"class.media::EncryptionPattern", %"class.media::EncryptionPattern"* %3, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.media::EncryptionPattern", %"class.media::EncryptionPattern"* %3, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = or i32 %17, %15
  %20 = icmp ugt i32 %19, 15
  br i1 %20, label %56, label %21

21:                                               ; preds = %11
  %22 = zext i32 %15 to i64
  %23 = icmp eq i32 %19, 0
  %24 = select i1 %23, i64 %12, i64 %22
  %25 = icmp eq i64 %12, 0
  br i1 %25, label %51, label %26

26:                                               ; preds = %21, %46
  %27 = phi i1 [ %31, %46 ], [ false, %21 ]
  %28 = phi i8* [ %49, %46 ], [ %6, %21 ]
  %29 = phi i8* [ %48, %46 ], [ %5, %21 ]
  %30 = phi i64 [ %47, %46 ], [ 0, %21 ]
  %31 = xor i1 %27, true
  %32 = sub i64 %12, %30
  %33 = select i1 %27, i64 %18, i64 %24
  %34 = icmp ult i64 %32, %33
  %35 = select i1 %34, i64 %32, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %46, label %37

37:                                               ; preds = %26
  %38 = shl nuw i64 %35, 4
  br i1 %27, label %41, label %39

39:                                               ; preds = %37
  %40 = call zeroext i1 @_ZN5media12AesCbcCrypto7DecryptEN4base4spanIKhLm18446744073709551615EEEPh(%"class.media::AesCbcCrypto"* nonnull %8, i64 %38, i8* %29, i8* %28) #6
  br i1 %40, label %42, label %56

41:                                               ; preds = %37
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %29, i64 %38, i1 false)
  br label %42

42:                                               ; preds = %39, %41
  %43 = add i64 %35, %30
  %44 = getelementptr inbounds i8, i8* %29, i64 %38
  %45 = getelementptr inbounds i8, i8* %28, i64 %38
  br label %46

46:                                               ; preds = %42, %26
  %47 = phi i64 [ %30, %26 ], [ %43, %42 ]
  %48 = phi i8* [ %29, %26 ], [ %44, %42 ]
  %49 = phi i8* [ %28, %26 ], [ %45, %42 ]
  %50 = icmp ugt i64 %12, %47
  br i1 %50, label %26, label %51

51:                                               ; preds = %46, %21
  %52 = phi i8* [ %5, %21 ], [ %48, %46 ]
  %53 = phi i8* [ %6, %21 ], [ %49, %46 ]
  %54 = icmp eq i64 %13, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %51
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %52, i64 %13, i1 false)
  br label %56

56:                                               ; preds = %39, %11, %55, %51, %7
  %57 = phi i1 [ false, %7 ], [ false, %11 ], [ true, %51 ], [ true, %55 ], [ false, %39 ]
  call void @_ZN5media12AesCbcCryptoD1Ev(%"class.media::AesCbcCrypto"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %9) #6
  ret i1 %57
}

declare zeroext i1 @_ZN5media25VerifySubsamplesMatchSizeERKNSt3__16vectorINS_14SubsampleEntryENS0_9allocatorIS2_EEEEm(%"class.std::__1::vector"* dereferenceable(24), i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN5media17EncryptionPatternD1Ev(%"class.media::EncryptionPattern"*) unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN5media12AesCbcCryptoC1Ev(%"class.media::AesCbcCrypto"*) unnamed_addr #2

declare zeroext i1 @_ZN5media12AesCbcCrypto10InitializeERKN6crypto12SymmetricKeyEN4base4spanIKhLm18446744073709551615EEE(%"class.media::AesCbcCrypto"*, %"class.crypto::SymmetricKey"* dereferenceable(32), i64, i8*) local_unnamed_addr #2

declare zeroext i1 @_ZN5media12AesCbcCrypto7DecryptEN4base4spanIKhLm18446744073709551615EEEPh(%"class.media::AesCbcCrypto"*, i64, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5media12AesCbcCryptoD1Ev(%"class.media::AesCbcCrypto"*) unnamed_addr #3

declare i8* @_ZNK5media24ReadOnlyUnalignedMapping6memoryEv(%"class.media::ReadOnlyUnalignedMapping"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN5media13DecoderBufferC1Em(%"class.media::DecoderBuffer"*, i64) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
