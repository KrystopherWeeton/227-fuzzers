; ModuleID = '../../third_party/blink/renderer/platform/geometry/int_rect.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/int_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::IntRect"*, i32, i32 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.WTF::TextStream" = type { %"class.WTF::StringBuilder" }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.2, i32, i8, i8, [2 x i8] }>
%union.anon.2 = type { %"class.WTF::Vector.3" }
%"class.WTF::Vector.3" = type { %"class.WTF::VectorBuffer.4" }
%"class.WTF::VectorBuffer.4" = type { %"class.WTF::VectorBufferBase.5", [16 x i8] }
%"class.WTF::VectorBufferBase.5" = type { i8*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK3WTF6VectorIN5blink7IntRectELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"at (\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c") size \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.6 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7IntRect12ShiftXEdgeToEi(%"class.blink::IntRect"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  store i32 %1, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = sub i32 %4, %1
  %8 = add i32 %6, %7
  %9 = icmp sgt i32 %8, 0
  %10 = select i1 %9, i32 %8, i32 0
  store i32 %10, i32* %5, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7IntRect15ShiftMaxXEdgeToEi(%"class.blink::IntRect"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %6 = sub i32 %1, %4
  %7 = icmp sgt i32 %6, 0
  %8 = select i1 %7, i32 %6, i32 0
  store i32 %8, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7IntRect12ShiftYEdgeToEi(%"class.blink::IntRect"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  store i32 %1, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = sub i32 %4, %1
  %8 = add i32 %6, %7
  %9 = icmp sgt i32 %8, 0
  %10 = select i1 %9, i32 %8, i32 0
  store i32 %10, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7IntRect15ShiftMaxYEdgeToEi(%"class.blink::IntRect"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %6 = sub i32 %1, %4
  %7 = icmp sgt i32 %6, 0
  %8 = select i1 %7, i32 %6, i32 0
  store i32 %8, i32* %5, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink7IntRect10IntersectsERKS0_(%"class.blink::IntRect"* nocapture readonly, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %38, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %38, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %38, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %38, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 %22, %12
  %24 = icmp slt i32 %20, %23
  %25 = add nsw i32 %20, %4
  %26 = icmp slt i32 %22, %25
  %27 = and i1 %26, %24
  br i1 %27, label %28, label %38

28:                                               ; preds = %18
  %29 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %16, %32
  %34 = icmp slt i32 %30, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %28
  %36 = add nsw i32 %8, %30
  %37 = icmp slt i32 %32, %36
  br label %38

38:                                               ; preds = %10, %2, %35, %28, %18, %14, %6
  %39 = phi i1 [ false, %28 ], [ false, %18 ], [ false, %14 ], [ false, %6 ], [ %37, %35 ], [ false, %2 ], [ false, %10 ]
  ret i1 %39
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink7IntRect8ContainsERKS0_(%"class.blink::IntRect"* nocapture readonly, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %4, %6
  br i1 %7, label %30, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %4
  %12 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, %6
  %15 = icmp slt i32 %11, %14
  br i1 %15, label %30, label %16

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %18, %20
  br i1 %21, label %30, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, %18
  %26 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, %20
  %29 = icmp sge i32 %25, %28
  br label %30

30:                                               ; preds = %16, %8, %2, %22
  %31 = phi i1 [ false, %16 ], [ false, %8 ], [ false, %2 ], [ %29, %22 ]
  ret i1 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7IntRect9IntersectERKS0_(%"class.blink::IntRect"* nocapture, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %4, %6
  %8 = select i1 %7, i32 %6, i32 %4
  %9 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %10, %12
  %14 = select i1 %13, i32 %12, i32 %10
  %15 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, %4
  %18 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, %6
  %21 = icmp slt i32 %20, %17
  %22 = select i1 %21, i32 %20, i32 %17
  %23 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, %10
  %26 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, %12
  %29 = icmp slt i32 %28, %25
  %30 = select i1 %29, i32 %28, i32 %25
  %31 = icmp slt i32 %8, %22
  %32 = icmp slt i32 %14, %30
  %33 = and i1 %31, %32
  %34 = select i1 %33, i32 %8, i32 0
  %35 = select i1 %33, i32 %14, i32 0
  %36 = select i1 %33, i32 %22, i32 0
  %37 = select i1 %33, i32 %30, i32 0
  store i32 %34, i32* %3, align 4
  store i32 %35, i32* %9, align 4
  %38 = icmp sgt i32 %34, -1
  %39 = select i1 %38, i32 -2147483648, i32 2147483647
  %40 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %36, i32 %34) #9
  %41 = extractvalue { i32, i1 } %40, 1
  %42 = extractvalue { i32, i1 } %40, 0
  %43 = select i1 %41, i32 %39, i32 %42, !prof !2
  store i32 %43, i32* %15, align 4
  %44 = icmp sgt i32 %35, -1
  %45 = select i1 %44, i32 -2147483648, i32 2147483647
  %46 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %37, i32 %35) #9
  %47 = extractvalue { i32, i1 } %46, 1
  %48 = extractvalue { i32, i1 } %46, 0
  %49 = select i1 %47, i32 %45, i32 %48, !prof !2
  store i32 %49, i32* %23, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7IntRect5UniteERKS0_(%"class.blink::IntRect"* nocapture, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %54, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %54, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %18, label %21

18:                                               ; preds = %10, %14
  %19 = bitcast %"class.blink::IntRect"* %0 to i8*
  %20 = bitcast %"class.blink::IntRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 %20, i64 16, i1 false)
  br label %54

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, %23
  %27 = select i1 %26, i32 %25, i32 %23
  %28 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %29
  %33 = select i1 %32, i32 %31, i32 %29
  %34 = add nsw i32 %23, %12
  %35 = add nsw i32 %25, %4
  %36 = icmp slt i32 %34, %35
  %37 = select i1 %36, i32 %35, i32 %34
  %38 = add nsw i32 %16, %29
  %39 = add nsw i32 %8, %31
  %40 = icmp slt i32 %38, %39
  %41 = select i1 %40, i32 %39, i32 %38
  store i32 %27, i32* %22, align 4
  store i32 %33, i32* %28, align 4
  %42 = icmp sgt i32 %27, -1
  %43 = select i1 %42, i32 -2147483648, i32 2147483647
  %44 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %37, i32 %27) #9
  %45 = extractvalue { i32, i1 } %44, 1
  %46 = extractvalue { i32, i1 } %44, 0
  %47 = select i1 %45, i32 %43, i32 %46, !prof !2
  store i32 %47, i32* %11, align 4
  %48 = icmp sgt i32 %33, -1
  %49 = select i1 %48, i32 -2147483648, i32 2147483647
  %50 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %41, i32 %33) #9
  %51 = extractvalue { i32, i1 } %50, 1
  %52 = extractvalue { i32, i1 } %50, 0
  %53 = select i1 %51, i32 %49, i32 %52, !prof !2
  store i32 %53, i32* %15, align 4
  br label %54

54:                                               ; preds = %2, %6, %21, %18
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7IntRect16UniteEvenIfEmptyERKS0_(%"class.blink::IntRect"* nocapture, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, %4
  %8 = select i1 %7, i32 %6, i32 %4
  %9 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, %10
  %14 = select i1 %13, i32 %12, i32 %10
  %15 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, %4
  %18 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, %6
  %21 = icmp slt i32 %17, %20
  %22 = select i1 %21, i32 %20, i32 %17
  %23 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, %10
  %26 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, %12
  %29 = icmp slt i32 %25, %28
  %30 = select i1 %29, i32 %28, i32 %25
  store i32 %8, i32* %3, align 4
  store i32 %14, i32* %9, align 4
  %31 = icmp sgt i32 %8, -1
  %32 = select i1 %31, i32 -2147483648, i32 2147483647
  %33 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %22, i32 %8) #9
  %34 = extractvalue { i32, i1 } %33, 1
  %35 = extractvalue { i32, i1 } %33, 0
  %36 = select i1 %34, i32 %32, i32 %35, !prof !2
  store i32 %36, i32* %15, align 4
  %37 = icmp sgt i32 %14, -1
  %38 = select i1 %37, i32 -2147483648, i32 2147483647
  %39 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %30, i32 %14) #9
  %40 = extractvalue { i32, i1 } %39, 1
  %41 = extractvalue { i32, i1 } %39, 0
  %42 = select i1 %40, i32 %38, i32 %41, !prof !2
  store i32 %42, i32* %23, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink7IntRect14UniteIfNonZeroERKS0_(%"class.blink::IntRect"* nocapture, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %56, label %10

10:                                               ; preds = %6, %2
  %11 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = or i32 %12, %14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %10
  %18 = bitcast %"class.blink::IntRect"* %0 to i8*
  %19 = bitcast %"class.blink::IntRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 %19, i64 16, i1 false)
  br label %56

20:                                               ; preds = %10
  %21 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, %22
  %26 = select i1 %25, i32 %24, i32 %22
  %27 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, %28
  %32 = select i1 %31, i32 %30, i32 %28
  %33 = add nsw i32 %22, %12
  %34 = add nsw i32 %24, %4
  %35 = icmp slt i32 %33, %34
  %36 = select i1 %35, i32 %34, i32 %33
  %37 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %38 = add nsw i32 %14, %28
  %39 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = add nsw i32 %40, %30
  %42 = icmp slt i32 %38, %41
  %43 = select i1 %42, i32 %41, i32 %38
  store i32 %26, i32* %21, align 4
  store i32 %32, i32* %27, align 4
  %44 = icmp sgt i32 %26, -1
  %45 = select i1 %44, i32 -2147483648, i32 2147483647
  %46 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %36, i32 %26) #9
  %47 = extractvalue { i32, i1 } %46, 1
  %48 = extractvalue { i32, i1 } %46, 0
  %49 = select i1 %47, i32 %45, i32 %48, !prof !2
  store i32 %49, i32* %11, align 4
  %50 = icmp sgt i32 %32, -1
  %51 = select i1 %50, i32 -2147483648, i32 2147483647
  %52 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %43, i32 %32) #9
  %53 = extractvalue { i32, i1 } %52, 1
  %54 = extractvalue { i32, i1 } %52, 0
  %55 = select i1 %53, i32 %51, i32 %54, !prof !2
  store i32 %55, i32* %37, align 4
  br label %56

56:                                               ; preds = %6, %20, %17
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink7IntRect5ScaleEf(%"class.blink::IntRect"* nocapture, float) local_unnamed_addr #3 align 2 {
  %3 = bitcast %"class.blink::IntRect"* %0 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 4
  %5 = sitofp <4 x i32> %4 to <4 x float>
  %6 = insertelement <4 x float> undef, float %1, i32 0
  %7 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> zeroinitializer
  %8 = fmul <4 x float> %7, %5
  %9 = fptosi <4 x float> %8 to <4 x i32>
  %10 = bitcast %"class.blink::IntRect"* %0 to <4 x i32>*
  store <4 x i32> %9, <4 x i32>* %10, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink7IntRect17DifferenceToPointERKNS_8IntPointE(%"class.blink::IntRect"* nocapture readonly, %"class.blink::IntPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntPoint", %"class.blink::IntPoint"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, %6
  %10 = icmp sgt i32 %6, %4
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = sub nsw i32 %6, %4
  br label %17

13:                                               ; preds = %2
  %14 = icmp slt i32 %9, %4
  %15 = sub nsw i32 %9, %4
  %16 = select i1 %14, i32 %15, i32 0
  br label %17

17:                                               ; preds = %13, %11
  %18 = phi i32 [ %12, %11 ], [ %16, %13 ]
  %19 = getelementptr inbounds %"class.blink::IntPoint", %"class.blink::IntPoint"* %1, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, %22
  %26 = icmp sgt i32 %22, %20
  br i1 %26, label %27, label %29

27:                                               ; preds = %17
  %28 = sub nsw i32 %22, %20
  br label %33

29:                                               ; preds = %17
  %30 = icmp slt i32 %25, %20
  %31 = sub nsw i32 %25, %20
  %32 = select i1 %30, i32 %31, i32 0
  br label %33

33:                                               ; preds = %29, %27
  %34 = phi i32 [ %28, %27 ], [ %32, %29 ]
  %35 = zext i32 %34 to i64
  %36 = shl nuw i64 %35, 32
  %37 = zext i32 %18 to i64
  %38 = or i64 %36, %37
  ret i64 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN5blink9UnionRectERKN3WTF6VectorINS_7IntRectELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 %6
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %9, label %19

9:                                                ; preds = %80, %1
  %10 = phi i32 [ 0, %1 ], [ %81, %80 ]
  %11 = phi i32 [ 0, %1 ], [ %82, %80 ]
  %12 = phi i64 [ 0, %1 ], [ %83, %80 ]
  %13 = zext i32 %11 to i64
  %14 = shl nuw i64 %13, 32
  %15 = zext i32 %10 to i64
  %16 = or i64 %14, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %12, 1
  ret { i64, i64 } %18

19:                                               ; preds = %1, %80
  %20 = phi %"class.blink::IntRect"* [ %84, %80 ], [ %3, %1 ]
  %21 = phi i64 [ %83, %80 ], [ 0, %1 ]
  %22 = phi i32 [ %82, %80 ], [ 0, %1 ]
  %23 = phi i32 [ %81, %80 ], [ 0, %1 ]
  %24 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %20, i64 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 1
  br i1 %26, label %80, label %27

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %20, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 1
  br i1 %30, label %80, label %31

31:                                               ; preds = %27
  %32 = trunc i64 %21 to i32
  %33 = icmp slt i32 %32, 1
  br i1 %33, label %38, label %34

34:                                               ; preds = %31
  %35 = lshr i64 %21, 32
  %36 = trunc i64 %35 to i32
  %37 = icmp slt i32 %36, 1
  br i1 %37, label %38, label %47

38:                                               ; preds = %34, %31
  %39 = bitcast %"class.blink::IntRect"* %20 to i64*
  %40 = load i64, i64* %39, align 4
  %41 = trunc i64 %40 to i32
  %42 = lshr i64 %40, 32
  %43 = trunc i64 %42 to i32
  %44 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %20, i64 0, i32 1
  %45 = bitcast %"class.blink::IntSize"* %44 to i64*
  %46 = load i64, i64* %45, align 4
  br label %80

47:                                               ; preds = %34
  %48 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %20, i64 0, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = icmp slt i32 %49, %23
  %51 = select i1 %50, i32 %49, i32 %23
  %52 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %20, i64 0, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = icmp slt i32 %53, %22
  %55 = select i1 %54, i32 %53, i32 %22
  %56 = add nsw i32 %23, %32
  %57 = add nsw i32 %49, %25
  %58 = icmp slt i32 %56, %57
  %59 = select i1 %58, i32 %57, i32 %56
  %60 = add nsw i32 %22, %36
  %61 = add nsw i32 %53, %29
  %62 = icmp slt i32 %60, %61
  %63 = select i1 %62, i32 %61, i32 %60
  %64 = icmp sgt i32 %51, -1
  %65 = select i1 %64, i32 -2147483648, i32 2147483647
  %66 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %59, i32 %51) #9
  %67 = extractvalue { i32, i1 } %66, 1
  %68 = extractvalue { i32, i1 } %66, 0
  %69 = select i1 %67, i32 %65, i32 %68, !prof !2
  %70 = zext i32 %69 to i64
  %71 = icmp sgt i32 %55, -1
  %72 = select i1 %71, i32 -2147483648, i32 2147483647
  %73 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %63, i32 %55) #9
  %74 = extractvalue { i32, i1 } %73, 1
  %75 = extractvalue { i32, i1 } %73, 0
  %76 = select i1 %74, i32 %72, i32 %75, !prof !2
  %77 = zext i32 %76 to i64
  %78 = shl nuw i64 %77, 32
  %79 = or i64 %78, %70
  br label %80

80:                                               ; preds = %19, %27, %38, %47
  %81 = phi i32 [ %23, %19 ], [ %23, %27 ], [ %41, %38 ], [ %51, %47 ]
  %82 = phi i32 [ %22, %19 ], [ %22, %27 ], [ %43, %38 ], [ %55, %47 ]
  %83 = phi i64 [ %21, %19 ], [ %21, %27 ], [ %46, %38 ], [ %79, %47 ]
  %84 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %20, i64 1
  %85 = icmp eq %"class.blink::IntRect"* %84, %7
  br i1 %85, label %9, label %19
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN5blink20UnionRectEvenIfEmptyERKN3WTF6VectorINS_7IntRectELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %66, label %5

5:                                                ; preds = %1
  %6 = tail call dereferenceable(16) %"class.blink::IntRect"* @_ZNK3WTF6VectorIN5blink7IntRectELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 0) #9
  %7 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6, i64 0, i32 1, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %3, 1
  br i1 %15, label %16, label %25

16:                                               ; preds = %25, %5
  %17 = phi i32 [ %14, %5 ], [ %63, %25 ]
  %18 = phi i32 [ %12, %5 ], [ %57, %25 ]
  %19 = phi i32 [ %10, %5 ], [ %39, %25 ]
  %20 = phi i32 [ %8, %5 ], [ %35, %25 ]
  %21 = zext i32 %18 to i64
  %22 = zext i32 %17 to i64
  %23 = shl nuw i64 %22, 32
  %24 = or i64 %23, %21
  br label %66

25:                                               ; preds = %5, %25
  %26 = phi i32 [ %64, %25 ], [ 1, %5 ]
  %27 = phi i32 [ %35, %25 ], [ %8, %5 ]
  %28 = phi i32 [ %39, %25 ], [ %10, %5 ]
  %29 = phi i32 [ %57, %25 ], [ %12, %5 ]
  %30 = phi i32 [ %63, %25 ], [ %14, %5 ]
  %31 = tail call dereferenceable(16) %"class.blink::IntRect"* @_ZNK3WTF6VectorIN5blink7IntRectELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 %26) #9
  %32 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %31, i64 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %33, %27
  %35 = select i1 %34, i32 %33, i32 %27
  %36 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %31, i64 0, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %37, %28
  %39 = select i1 %38, i32 %37, i32 %28
  %40 = add nsw i32 %27, %29
  %41 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %31, i64 0, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = add nsw i32 %42, %33
  %44 = icmp slt i32 %40, %43
  %45 = select i1 %44, i32 %43, i32 %40
  %46 = add nsw i32 %28, %30
  %47 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %31, i64 0, i32 1, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %48, %37
  %50 = icmp slt i32 %46, %49
  %51 = select i1 %50, i32 %49, i32 %46
  %52 = icmp sgt i32 %35, -1
  %53 = select i1 %52, i32 -2147483648, i32 2147483647
  %54 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %45, i32 %35) #9
  %55 = extractvalue { i32, i1 } %54, 1
  %56 = extractvalue { i32, i1 } %54, 0
  %57 = select i1 %55, i32 %53, i32 %56, !prof !2
  %58 = icmp sgt i32 %39, -1
  %59 = select i1 %58, i32 -2147483648, i32 2147483647
  %60 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %51, i32 %39) #9
  %61 = extractvalue { i32, i1 } %60, 1
  %62 = extractvalue { i32, i1 } %60, 0
  %63 = select i1 %61, i32 %59, i32 %62, !prof !2
  %64 = add nuw i32 %26, 1
  %65 = icmp eq i32 %64, %3
  br i1 %65, label %16, label %25

66:                                               ; preds = %1, %16
  %67 = phi i32 [ %20, %16 ], [ 0, %1 ]
  %68 = phi i32 [ %19, %16 ], [ 0, %1 ]
  %69 = phi i64 [ %24, %16 ], [ 0, %1 ]
  %70 = zext i32 %68 to i64
  %71 = shl nuw i64 %70, 32
  %72 = zext i32 %67 to i64
  %73 = or i64 %71, %72
  %74 = insertvalue { i64, i64 } undef, i64 %73, 0
  %75 = insertvalue { i64, i64 } %74, i64 %69, 1
  ret { i64, i64 } %75
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_7IntRectE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #9
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink7IntRect8ToStringEv(%"class.blink::IntRect"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #9
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #9
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #9
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink7IntRect8ToStringEv(%"class.blink::IntRect"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to %"class.blink::IntPoint"*
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %"class.blink::IntSize"*
  %10 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #9
  %11 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #9
  %12 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #9
  %13 = bitcast %"class.blink::IntRect"* %0 to i64*
  %14 = load i64, i64* %13, align 4
  store i64 %14, i64* %4, align 8
  %15 = call %"class.WTF::StringImpl"* @_ZNK5blink8IntPoint8ToStringEv(%"class.blink::IntPoint"* nonnull %5) #9
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"** %16, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.WTF::String"* nonnull %3) #9
  %17 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = select i1 %20, i8* %22, i8* %10
  %24 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #9
  %25 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #9
  %26 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #9
  %27 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1
  %28 = bitcast %"class.blink::IntSize"* %27 to i64*
  %29 = load i64, i64* %28, align 4
  store i64 %29, i64* %8, align 8
  %30 = call %"class.WTF::StringImpl"* @_ZNK5blink7IntSize8ToStringEv(%"class.blink::IntSize"* nonnull %9) #9
  %31 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %31, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %6, %"class.WTF::String"* nonnull %7) #9
  %32 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %32, i64 0, i32 1, i32 0
  %34 = load i8, i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = select i1 %35, i8* %37, i8* %24
  %39 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* %23, i8* %38) #9
  %40 = load i8, i8* %33, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %1
  %43 = load i8*, i8** %36, align 8
  call void @_ZdlPv(i8* %43) #10
  br label %44

44:                                               ; preds = %1, %42
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  br i1 %51, label %54, label %56

54:                                               ; preds = %47
  %55 = add i32 %53, -1
  store i32 %55, i32* %52, align 4
  br label %56

56:                                               ; preds = %54, %47
  %57 = phi i32 [ %55, %54 ], [ %53, %47 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %45) #9
  br label %60

60:                                               ; preds = %44, %56, %59
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #9
  %61 = load i8, i8* %18, align 1
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = load i8*, i8** %21, align 8
  call void @_ZdlPv(i8* %64) #10
  br label %65

65:                                               ; preds = %60, %63
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %81, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %68
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi i32 [ %76, %75 ], [ %74, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %66) #9
  br label %81

81:                                               ; preds = %65, %77, %80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #9
  ret %"class.WTF::StringImpl"* %39
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZNK5blink8IntPoint8ToStringEv(%"class.blink::IntPoint"*) local_unnamed_addr #4

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZNK5blink7IntSize8ToStringEv(%"class.blink::IntSize"*) local_unnamed_addr #4

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink7IntRect7IsValidEv(%"class.blink::IntRect"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %3, i32 %5) #9
  %7 = extractvalue { i32, i1 } %6, 1
  br i1 %7, label %16, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %10, i32 %12) #9
  %14 = extractvalue { i32, i1 } %13, 1
  %15 = xor i1 %14, true
  br label %16

16:                                               ; preds = %1, %8
  %17 = phi i1 [ %15, %8 ], [ false, %1 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.WTF::TextStream"* @_ZN5blinklsERN3WTF10TextStreamERKNS_7IntRectE(%"class.WTF::TextStream"* dereferenceable(48), %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #9
  %4 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEi(%"class.WTF::TextStream"* %3, i32 %5) #9
  %7 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #9
  %8 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEi(%"class.WTF::TextStream"* %7, i32 %9) #9
  %11 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #9
  %12 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEi(%"class.WTF::TextStream"* %11, i32 %13) #9
  %15 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #9
  %16 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEi(%"class.WTF::TextStream"* %15, i32 %17) #9
  ret %"class.WTF::TextStream"* %18
}

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"*, i8*) local_unnamed_addr #4

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEi(%"class.WTF::TextStream"*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.blink::IntRect"* @_ZNK3WTF6VectorIN5blink7IntRectELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %24, i64 %25
  ret %"class.blink::IntRect"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
