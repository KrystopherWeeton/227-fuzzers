; ModuleID = '../../cc/benchmarks/micro_benchmark.cc'
source_filename = "../../cc/benchmarks/micro_benchmark.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::MicroBenchmark" = type { i32 (...)**, %"class.base::OnceCallback", i8, i8, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.cc::LayerTreeHost" = type opaque
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"union.absl::variant_internal::DestructibleUnionImpl.5" }
%"union.absl::variant_internal::DestructibleUnionImpl.5" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::Value"* }
%"class.cc::PictureLayer" = type opaque
%"class.cc::MicroBenchmarkImpl" = type { i32 (...)**, %"class.base::OnceCallback", i8, %class.scoped_refptr.34 }
%class.scoped_refptr.34 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.35" }>
%"class.base::RefCountedThreadSafe.35" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.35", [4 x i8] }>

@_ZTVN2cc14MicroBenchmarkE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::MicroBenchmark"*)* @_ZN2cc14MicroBenchmarkD2Ev to i8*), i8* bitcast (void (%"class.cc::MicroBenchmark"*)* @_ZN2cc14MicroBenchmarkD0Ev to i8*), i8* bitcast (void (%"class.cc::MicroBenchmark"*, %"class.cc::LayerTreeHost"*)* @_ZN2cc14MicroBenchmark15DidUpdateLayersEPNS_13LayerTreeHostE to i8*), i8* bitcast (void (%"class.cc::MicroBenchmark"*, %"class.cc::PictureLayer"*)* @_ZN2cc14MicroBenchmark10RunOnLayerEPNS_12PictureLayerE to i8*), i8* bitcast (i1 (%"class.cc::MicroBenchmark"*, %"class.base::Value"*)* @_ZN2cc14MicroBenchmark14ProcessMessageENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE to i8*), i8* bitcast (%"class.cc::MicroBenchmarkImpl"* (%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*)* @_ZN2cc14MicroBenchmark19CreateBenchmarkImplE13scoped_refptrIN4base22SingleThreadTaskRunnerEE to i8*)] }, align 8

@_ZN2cc14MicroBenchmarkC1EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE = hidden unnamed_addr alias void (%"class.cc::MicroBenchmark"*, %"class.base::OnceCallback"*), void (%"class.cc::MicroBenchmark"*, %"class.base::OnceCallback"*)* @_ZN2cc14MicroBenchmarkC2EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE
@_ZN2cc14MicroBenchmarkD1Ev = hidden unnamed_addr alias void (%"class.cc::MicroBenchmark"*), void (%"class.cc::MicroBenchmark"*)* @_ZN2cc14MicroBenchmarkD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc14MicroBenchmarkC2EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE(%"class.cc::MicroBenchmark"* nocapture, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2cc14MicroBenchmarkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %7, i64* %8, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  %9 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 2
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 3
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 4
  store i32 0, i32* %11, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc14MicroBenchmarkD2Ev(%"class.cc::MicroBenchmark"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2cc14MicroBenchmarkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc14MicroBenchmarkD0Ev(%"class.cc::MicroBenchmark"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2cc14MicroBenchmarkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #8
  %4 = bitcast %"class.cc::MicroBenchmark"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc14MicroBenchmark6IsDoneEv(%"class.cc::MicroBenchmark"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2cc14MicroBenchmark15DidUpdateLayersEPNS_13LayerTreeHostE(%"class.cc::MicroBenchmark"* nocapture, %"class.cc::LayerTreeHost"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc14MicroBenchmark10NotifyDoneENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::MicroBenchmark"* nocapture, %"class.base::Value"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 1
  %6 = bitcast %"class.std::__1::unique_ptr"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  %7 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.base::Value"* %1, %"class.base::Value"** %7, align 8
  %8 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #8
  %9 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.base::OnceCallback"* %5 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %11, i64* %12, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %9, align 8
  %13 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %14 = inttoptr i64 %11 to %"class.base::internal::BindStateBase"*
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %14, i64 0, i32 1
  %16 = bitcast void ()** %15 to void (%"class.base::internal::BindStateBase"*, %"class.std::__1::unique_ptr"*)**
  %17 = load void (%"class.base::internal::BindStateBase"*, %"class.std::__1::unique_ptr"*)*, void (%"class.base::internal::BindStateBase"*, %"class.std::__1::unique_ptr"*)** %16, align 8
  call void %17(%"class.base::internal::BindStateBase"* %14, %"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %3) #8
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #8
  %18 = load %"class.base::Value"*, %"class.base::Value"** %7, align 8
  store %"class.base::Value"* null, %"class.base::Value"** %7, align 8
  %19 = icmp eq %"class.base::Value"* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %2
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %18) #8
  %21 = bitcast %"class.base::Value"* %18 to i8*
  call void @_ZdlPv(i8* %21) #9
  br label %22

22:                                               ; preds = %20, %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6)
  %23 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 2
  store i8 1, i8* %23, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2cc14MicroBenchmark10RunOnLayerEPNS_12PictureLayerE(%"class.cc::MicroBenchmark"* nocapture, %"class.cc::PictureLayer"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2cc14MicroBenchmark14ProcessMessageENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::MicroBenchmark"* nocapture readnone, %"class.base::Value"*) unnamed_addr #1 align 2 {
  %3 = icmp eq %"class.base::Value"* %1, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %1) #8
  %5 = bitcast %"class.base::Value"* %1 to i8*
  tail call void @_ZdlPv(i8* %5) #9
  br label %6

6:                                                ; preds = %2, %4
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc14MicroBenchmark25ProcessedForBenchmarkImplEv(%"class.cc::MicroBenchmark"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::MicroBenchmarkImpl"* @_ZN2cc14MicroBenchmark16GetBenchmarkImplE13scoped_refptrIN4base22SingleThreadTaskRunnerEE(%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::MicroBenchmark", %"class.cc::MicroBenchmark"* %0, i64 0, i32 3
  store i8 1, i8* %3, align 1
  %4 = icmp eq %"class.base::SingleThreadTaskRunner"* %1, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw add i32* %6, i32 1 monotonic
  br label %8

8:                                                ; preds = %2, %5
  %9 = bitcast %"class.cc::MicroBenchmark"* %0 to %"class.cc::MicroBenchmarkImpl"* (%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*)***
  %10 = load %"class.cc::MicroBenchmarkImpl"* (%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*)**, %"class.cc::MicroBenchmarkImpl"* (%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl"* (%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*)*, %"class.cc::MicroBenchmarkImpl"* (%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*)** %10, i64 5
  %12 = load %"class.cc::MicroBenchmarkImpl"* (%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*)*, %"class.cc::MicroBenchmarkImpl"* (%"class.cc::MicroBenchmark"*, %"class.base::SingleThreadTaskRunner"*)** %11, align 8
  %13 = tail call %"class.cc::MicroBenchmarkImpl"* %12(%"class.cc::MicroBenchmark"* %0, %"class.base::SingleThreadTaskRunner"* %1) #8
  br i1 %4, label %22, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw sub i32* %16, i32 1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %22

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %15, i64 -2
  %21 = bitcast %"class.base::RefCountedThreadSafe.35"* %20 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %21) #8
  br label %22

22:                                               ; preds = %8, %14, %19
  ret %"class.cc::MicroBenchmarkImpl"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias %"class.cc::MicroBenchmarkImpl"* @_ZN2cc14MicroBenchmark19CreateBenchmarkImplE13scoped_refptrIN4base22SingleThreadTaskRunnerEE(%"class.cc::MicroBenchmark"* nocapture readnone, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #1 align 2 {
  %3 = icmp eq %"class.base::SingleThreadTaskRunner"* %1, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %12

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %5, i64 -2
  %11 = bitcast %"class.base::RefCountedThreadSafe.35"* %10 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %11) #8
  br label %12

12:                                               ; preds = %2, %4, %9
  ret %"class.cc::MicroBenchmarkImpl"* null
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #2

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #7

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
