; ModuleID = '../../media/cast/sender/fake_software_video_encoder.cc'
source_filename = "../../media/cast/sender/fake_software_video_encoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::cast::FakeSoftwareVideoEncoder" = type <{ %"class.media::cast::SoftwareVideoEncoder", %"struct.media::cast::FrameSenderConfig", %"class.gfx::Size", i8, [7 x i8], %"class.media::cast::FrameId", i32, [4 x i8] }>
%"class.media::cast::SoftwareVideoEncoder" = type { i32 (...)** }
%"struct.media::cast::FrameSenderConfig" = type <{ i32, i32, %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", i32, i8, [3 x i8], i32, i32, i32, i32, i32, [4 x i8], double, i32, [4 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"struct.media::cast::VideoCodecParams", [4 x i8] }>
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.media::cast::VideoCodecParams" = type { i32, i32, i32, i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.media::cast::FrameId" = type { %"class.media::cast::ExpandedValueBase" }
%"class.media::cast::ExpandedValueBase" = type { i64 }
%"class.media::VideoFrame" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.media::VideoFrameLayout", %class.scoped_refptr, i32, %"class.gfx::Rect", %"class.gfx::Size", [4 x i8*], [4 x %"struct.gpu::MailboxHolder"], %"class.base::OnceCallback", %"class.base::UnsafeSharedMemoryRegion"*, %"class.base::UnsafeSharedMemoryRegion", %"class.base::WritableSharedMemoryMapping", %"class.std::__1::unique_ptr", %class.scoped_refptr.12, %"class.std::__1::vector.13", %"class.base::TimeDelta", %"class.base::Lock", %"struct.gpu::SyncToken", %"struct.media::VideoFrameMetadata", i32, %"class.gfx::ColorSpace", %"class.absl::optional.57", [4 x i8], %"class.absl::optional.62", %"class.std::__1::unique_ptr.67" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.media::VideoFrameLayout" = type { i32, %"class.gfx::Size", %"class.std::__1::vector", i8, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.media::ColorPlaneLayout"*, %"struct.media::ColorPlaneLayout"*, %"class.std::__1::__compressed_pair.2" }
%"struct.media::ColorPlaneLayout" = type { i32, i64, i64 }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.media::ColorPlaneLayout"* }
%class.scoped_refptr = type { %"class.media::VideoFrame"* }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"struct.gpu::MailboxHolder" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", i32, [4 x i8] }>
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.7 }
%class.scoped_refptr.7 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.8", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.8" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::UnsafeSharedMemoryRegion" = type { %"class.base::subtle::PlatformSharedMemoryRegion" }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.gfx::GpuMemoryBuffer"* }
%"class.gfx::GpuMemoryBuffer" = type opaque
%class.scoped_refptr.12 = type { %"class.media::VideoFrame::DmabufHolder"* }
%"class.media::VideoFrame::DmabufHolder" = type opaque
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"class.base::OnceCallback.15"*, %"class.base::OnceCallback.15"*, %"class.std::__1::__compressed_pair.16" }
%"class.base::OnceCallback.15" = type opaque
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.base::OnceCallback.15"* }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType", i64 }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"struct.media::VideoFrameMetadata" = type { i8, %"class.absl::optional", %"class.absl::optional", %"class.absl::optional.22", %"class.absl::optional.27", %"class.absl::optional.32", i8, %"class.absl::optional.37", %"class.absl::optional.42", i8, %"class.absl::optional", i8, [3 x i8], %"class.absl::optional.47", i8, i8, i8, i8, i32, %"class.absl::optional.52", i8, %"class.absl::optional.42", %"class.absl::optional.42", %"class.absl::optional.42", %"class.absl::optional.42", %"class.absl::optional.42", %"class.absl::optional", %"class.absl::optional", %"class.absl::optional.37", %"class.absl::optional.42", %"class.absl::optional", %"class.absl::optional.37", %"class.absl::optional.22" }
%"class.absl::optional.27" = type { %"class.absl::optional_internal::optional_data.28" }
%"class.absl::optional_internal::optional_data.28" = type { %"class.absl::optional_internal::optional_data_base.29" }
%"class.absl::optional_internal::optional_data_base.29" = type { %"class.absl::optional_internal::optional_data_dtor_base.30" }
%"class.absl::optional_internal::optional_data_dtor_base.30" = type { i8, %union.anon.31 }
%union.anon.31 = type { %"class.gfx::Rect" }
%"class.absl::optional.32" = type { %"class.absl::optional_internal::optional_data.33" }
%"class.absl::optional_internal::optional_data.33" = type { %"class.absl::optional_internal::optional_data_base.34" }
%"class.absl::optional_internal::optional_data_base.34" = type { %"class.absl::optional_internal::optional_data_dtor_base.35" }
%"class.absl::optional_internal::optional_data_dtor_base.35" = type { i8, %union.anon.36 }
%union.anon.36 = type { i32 }
%"class.absl::optional.47" = type { %"class.absl::optional_internal::optional_data.48" }
%"class.absl::optional_internal::optional_data.48" = type { %"class.absl::optional_internal::optional_data_base.49" }
%"class.absl::optional_internal::optional_data_base.49" = type { %"class.absl::optional_internal::optional_data_dtor_base.50" }
%"class.absl::optional_internal::optional_data_dtor_base.50" = type { i8, [3 x i8], %union.anon.51 }
%union.anon.51 = type { %"struct.media::VideoTransformation" }
%"struct.media::VideoTransformation" = type <{ i32, i8, [3 x i8] }>
%"class.absl::optional.52" = type { %"class.absl::optional_internal::optional_data.53" }
%"class.absl::optional_internal::optional_data.53" = type { %"class.absl::optional_internal::optional_data_base.54" }
%"class.absl::optional_internal::optional_data_base.54" = type { %"class.absl::optional_internal::optional_data_dtor_base.55" }
%"class.absl::optional_internal::optional_data_dtor_base.55" = type { i8, %union.anon.56 }
%union.anon.56 = type { %"class.base::UnguessableToken" }
%"class.absl::optional.42" = type { %"class.absl::optional_internal::optional_data.43" }
%"class.absl::optional_internal::optional_data.43" = type { %"class.absl::optional_internal::optional_data_base.44" }
%"class.absl::optional_internal::optional_data_base.44" = type { %"class.absl::optional_internal::optional_data_dtor_base.45" }
%"class.absl::optional_internal::optional_data_dtor_base.45" = type { i8, %union.anon.46 }
%union.anon.46 = type { double }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.21 }
%union.anon.21 = type { %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.absl::optional.37" = type { %"class.absl::optional_internal::optional_data.38" }
%"class.absl::optional_internal::optional_data.38" = type { %"class.absl::optional_internal::optional_data_base.39" }
%"class.absl::optional_internal::optional_data_base.39" = type { %"class.absl::optional_internal::optional_data_dtor_base.40" }
%"class.absl::optional_internal::optional_data_dtor_base.40" = type { i8, %union.anon.41 }
%union.anon.41 = type { %"class.base::TimeDelta" }
%"class.absl::optional.22" = type { %"class.absl::optional_internal::optional_data.23" }
%"class.absl::optional_internal::optional_data.23" = type { %"class.absl::optional_internal::optional_data_base.24" }
%"class.absl::optional_internal::optional_data_base.24" = type { %"class.absl::optional_internal::optional_data_dtor_base.25" }
%"class.absl::optional_internal::optional_data_dtor_base.25" = type { i8, %union.anon.26 }
%union.anon.26 = type { i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional.57" = type { %"class.absl::optional_internal::optional_data.58" }
%"class.absl::optional_internal::optional_data.58" = type { %"class.absl::optional_internal::optional_data_base.59" }
%"class.absl::optional_internal::optional_data_base.59" = type { %"class.absl::optional_internal::optional_data_dtor_base.60" }
%"class.absl::optional_internal::optional_data_dtor_base.60" = type { i8, %union.anon.61 }
%union.anon.61 = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.gfx::PointF" = type { float, float }
%"class.absl::optional.62" = type { %"class.absl::optional_internal::optional_data.63" }
%"class.absl::optional_internal::optional_data.63" = type { %"class.absl::optional_internal::optional_data_base.64" }
%"class.absl::optional_internal::optional_data_base.64" = type { %"class.absl::optional_internal::optional_data_dtor_base.65" }
%"class.absl::optional_internal::optional_data_dtor_base.65" = type { i8, [7 x i8], %union.anon.66 }
%union.anon.66 = type { %"struct.gpu::VulkanYCbCrInfo" }
%"struct.gpu::VulkanYCbCrInfo" = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { i8* }
%"struct.media::cast::SenderEncodedFrame" = type { %"struct.media::cast::EncodedFrame", double, double, %"class.base::TimeTicks" }
%"struct.media::cast::EncodedFrame" = type { i32 (...)**, i32, %"class.media::cast::FrameId", %"class.media::cast::FrameId", %"class.media::cast::RtpTimeTicks", %"class.base::TimeTicks", i16, %"class.std::__1::basic_string" }
%"class.media::cast::RtpTimeTicks" = type { %"class.media::cast::ExpandedValueBase.71" }
%"class.media::cast::ExpandedValueBase.71" = type { i64 }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.72" }
%"union.absl::variant_internal::DestructibleUnionImpl.72" = type { %"union.absl::variant_internal::DestructibleUnionImpl.73" }
%"union.absl::variant_internal::DestructibleUnionImpl.73" = type { %"union.absl::variant_internal::DestructibleUnionImpl.74" }
%"union.absl::variant_internal::DestructibleUnionImpl.74" = type { %"union.absl::variant_internal::DestructibleUnionImpl.75" }
%"union.absl::variant_internal::DestructibleUnionImpl.75" = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZTVN5media4cast24FakeSoftwareVideoEncoderE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::cast::FakeSoftwareVideoEncoder"*)* @_ZN5media4cast24FakeSoftwareVideoEncoderD2Ev to i8*), i8* bitcast (void (%"class.media::cast::FakeSoftwareVideoEncoder"*)* @_ZN5media4cast24FakeSoftwareVideoEncoderD0Ev to i8*), i8* bitcast (void (%"class.media::cast::FakeSoftwareVideoEncoder"*)* @_ZN5media4cast24FakeSoftwareVideoEncoder10InitializeEv to i8*), i8* bitcast (void (%"class.media::cast::FakeSoftwareVideoEncoder"*, %"class.media::VideoFrame"*, %"class.base::TimeTicks"*, %"struct.media::cast::SenderEncodedFrame"*)* @_ZN5media4cast24FakeSoftwareVideoEncoder6EncodeE13scoped_refptrINS_10VideoFrameEERKN4base9TimeTicksEPNS0_18SenderEncodedFrameE to i8*), i8* bitcast (void (%"class.media::cast::FakeSoftwareVideoEncoder"*, i32)* @_ZN5media4cast24FakeSoftwareVideoEncoder11UpdateRatesEj to i8*), i8* bitcast (void (%"class.media::cast::FakeSoftwareVideoEncoder"*)* @_ZN5media4cast24FakeSoftwareVideoEncoder16GenerateKeyFrameEv to i8*)] }, align 8
@.str = private unnamed_addr constant [4 x i8] c"key\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"ref\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"id\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"size\00", align 1

@_ZN5media4cast24FakeSoftwareVideoEncoderC1ERKNS0_17FrameSenderConfigE = hidden unnamed_addr alias void (%"class.media::cast::FakeSoftwareVideoEncoder"*, %"struct.media::cast::FrameSenderConfig"*), void (%"class.media::cast::FakeSoftwareVideoEncoder"*, %"struct.media::cast::FrameSenderConfig"*)* @_ZN5media4cast24FakeSoftwareVideoEncoderC2ERKNS0_17FrameSenderConfigE
@_ZN5media4cast24FakeSoftwareVideoEncoderD1Ev = hidden unnamed_addr alias void (%"class.media::cast::FakeSoftwareVideoEncoder"*), void (%"class.media::cast::FakeSoftwareVideoEncoder"*)* @_ZN5media4cast24FakeSoftwareVideoEncoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast24FakeSoftwareVideoEncoderC2ERKNS0_17FrameSenderConfigE(%"class.media::cast::FakeSoftwareVideoEncoder"*, %"struct.media::cast::FrameSenderConfig"* dereferenceable(152)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5media4cast24FakeSoftwareVideoEncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 1
  tail call void @_ZN5media4cast17FrameSenderConfigC1ERKS1_(%"struct.media::cast::FrameSenderConfig"* %4, %"struct.media::cast::FrameSenderConfig"* dereferenceable(152) %1) #8
  %5 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 2, i32 0
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 2, i32 1
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 3
  store i8 1, i8* %7, align 8
  %8 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 5, i32 0, i32 0
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 6
  store i32 0, i32* %9, align 8
  ret void
}

declare void @_ZN5media4cast17FrameSenderConfigC1ERKS1_(%"struct.media::cast::FrameSenderConfig"*, %"struct.media::cast::FrameSenderConfig"* dereferenceable(152)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast24FakeSoftwareVideoEncoderD2Ev(%"class.media::cast::FakeSoftwareVideoEncoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5media4cast24FakeSoftwareVideoEncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 1
  tail call void @_ZN5media4cast17FrameSenderConfigD1Ev(%"struct.media::cast::FrameSenderConfig"* %3) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5media4cast17FrameSenderConfigD1Ev(%"struct.media::cast::FrameSenderConfig"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast24FakeSoftwareVideoEncoderD0Ev(%"class.media::cast::FakeSoftwareVideoEncoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5media4cast24FakeSoftwareVideoEncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 1
  tail call void @_ZN5media4cast17FrameSenderConfigD1Ev(%"struct.media::cast::FrameSenderConfig"* %3) #8
  %4 = bitcast %"class.media::cast::FakeSoftwareVideoEncoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media4cast24FakeSoftwareVideoEncoder10InitializeEv(%"class.media::cast::FakeSoftwareVideoEncoder"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast24FakeSoftwareVideoEncoder6EncodeE13scoped_refptrINS_10VideoFrameEERKN4base9TimeTicksEPNS0_18SenderEncodedFrameE(%"class.media::cast::FakeSoftwareVideoEncoder"* nocapture, %"class.media::VideoFrame"*, %"class.base::TimeTicks"* nocapture readonly dereferenceable(8), %"struct.media::cast::SenderEncodedFrame"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::DictionaryValue", align 8
  %6 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %1, i64 0, i32 5, i32 1
  %7 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %6, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %7, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %1, i64 0, i32 5, i32 1, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 2, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %24, label %19

19:                                               ; preds = %13, %4
  %20 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 3
  store i8 1, i8* %20, align 8
  %21 = bitcast %"class.gfx::Size"* %6 to i64*
  %22 = bitcast %"class.gfx::Size"* %7 to i64*
  %23 = load i64, i64* %21, align 4
  store i64 %23, i64* %22, align 8
  br label %24

24:                                               ; preds = %13, %19
  %25 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 5, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = add nsw i64 %26, 1
  store i64 %27, i64* %25, align 8
  %28 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 3
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  %32 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 0, i32 1
  br i1 %31, label %35, label %33

33:                                               ; preds = %24
  store i32 3, i32* %32, align 8
  %34 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 0, i32 3, i32 0, i32 0
  store i64 %26, i64* %34, align 8
  store i8 0, i8* %29, align 8
  br label %38

35:                                               ; preds = %24
  store i32 1, i32* %32, align 8
  %36 = add nsw i64 %26, -1
  %37 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 0, i32 3, i32 0, i32 0
  store i64 %36, i64* %37, align 8
  br label %38

38:                                               ; preds = %35, %33
  %39 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %1, i64 0, i32 16, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = tail call i64 @_ZN5media4cast12RtpTimeTicks13FromTimeDeltaEN4base9TimeDeltaEi(i64 %40, i32 90000) #8
  %42 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 0, i32 4, i32 0, i32 0
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %44 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 0, i32 5, i32 0, i32 0
  %45 = load i64, i64* %43, align 8
  store i64 %45, i64* %44, align 8
  %46 = bitcast %"class.base::DictionaryValue"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #8
  %47 = bitcast %"class.base::DictionaryValue"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 32, i1 false)
  call void @_ZN4base15DictionaryValueC1Ev(%"class.base::DictionaryValue"* nonnull %5) #8
  %48 = load i32, i32* %32, align 8
  %49 = icmp eq i32 %48, 3
  %50 = call %"class.base::Value"* @_ZN4base15DictionaryValue10SetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEb(%"class.base::DictionaryValue"* nonnull %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 zeroext %49) #8
  %51 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 0, i32 3, i32 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = trunc i64 %52 to i32
  %54 = call %"class.base::Value"* @_ZN4base15DictionaryValue10SetIntegerENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.base::DictionaryValue"* nonnull %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 3, i32 %53) #8
  %55 = load i64, i64* %28, align 8
  %56 = trunc i64 %55 to i32
  %57 = call %"class.base::Value"* @_ZN4base15DictionaryValue10SetIntegerENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.base::DictionaryValue"* nonnull %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i64 2, i32 %56) #8
  %58 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 6
  %59 = load i32, i32* %58, align 8
  %60 = call %"class.base::Value"* @_ZN4base15DictionaryValue10SetIntegerENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.base::DictionaryValue"* nonnull %5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i64 4, i32 %59) #8
  %61 = getelementptr inbounds %"class.base::DictionaryValue", %"class.base::DictionaryValue"* %5, i64 0, i32 0
  %62 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 0, i32 7
  %63 = call zeroext i1 @_ZN4base10JSONWriter5WriteERKNS_5ValueEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEm(%"class.base::Value"* nonnull dereferenceable(32) %61, %"class.std::__1::basic_string"* %62, i64 200) #8
  %64 = bitcast %"class.std::__1::basic_string"* %62 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %38
  %69 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  br label %73

71:                                               ; preds = %38
  %72 = zext i8 %66 to i64
  br label %73

73:                                               ; preds = %68, %71
  %74 = phi i64 [ %70, %68 ], [ %72, %71 ]
  %75 = load i32, i32* %58, align 8
  %76 = sext i32 %75 to i64
  %77 = icmp ult i64 %74, %76
  %78 = select i1 %77, i64 %76, i64 %74
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %62, i64 %78, i8 signext 32) #8
  %79 = load i32, i32* %32, align 8
  %80 = icmp eq i32 %79, 3
  %81 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 1
  %82 = select i1 %80, double 1.000000e+00, double 8.000000e-01
  %83 = select i1 %80, double 6.000000e+00, double 8.000000e-01
  store double %82, double* %81, align 8
  %84 = getelementptr inbounds %"struct.media::cast::SenderEncodedFrame", %"struct.media::cast::SenderEncodedFrame"* %3, i64 0, i32 2
  store double %83, double* %84, align 8
  call void @_ZN4base5ValueD2Ev(%"class.base::Value"* nonnull %61) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #8
  %85 = icmp eq %"class.media::VideoFrame"* %1, null
  br i1 %85, label %98, label %86

86:                                               ; preds = %73
  %87 = getelementptr inbounds %"class.media::VideoFrame", %"class.media::VideoFrame"* %1, i64 0, i32 1
  %88 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = atomicrmw sub i32* %88, i32 1 acq_rel
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %98

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %87, i64 -2
  %93 = bitcast %"class.base::RefCountedThreadSafe"* %92 to %"class.media::VideoFrame"*
  %94 = bitcast %"class.base::RefCountedThreadSafe"* %92 to void (%"class.media::VideoFrame"*)***
  %95 = load void (%"class.media::VideoFrame"*)**, void (%"class.media::VideoFrame"*)*** %94, align 8
  %96 = getelementptr inbounds void (%"class.media::VideoFrame"*)*, void (%"class.media::VideoFrame"*)** %95, i64 1
  %97 = load void (%"class.media::VideoFrame"*)*, void (%"class.media::VideoFrame"*)** %96, align 8
  call void %97(%"class.media::VideoFrame"* nonnull %93) #8
  br label %98

98:                                               ; preds = %73, %86, %91
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare i64 @_ZN5media4cast12RtpTimeTicks13FromTimeDeltaEN4base9TimeDeltaEi(i64, i32) local_unnamed_addr #1

declare void @_ZN4base15DictionaryValueC1Ev(%"class.base::DictionaryValue"*) unnamed_addr #1

declare %"class.base::Value"* @_ZN4base15DictionaryValue10SetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEb(%"class.base::DictionaryValue"*, i8*, i64, i1 zeroext) local_unnamed_addr #1

declare %"class.base::Value"* @_ZN4base15DictionaryValue10SetIntegerENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.base::DictionaryValue"*, i8*, i64, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN4base10JSONWriter5WriteERKNS_5ValueEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEm(%"class.base::Value"* dereferenceable(32), %"class.std::__1::basic_string"*, i64) local_unnamed_addr #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base5ValueD2Ev(%"class.base::Value"*) unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media4cast24FakeSoftwareVideoEncoder11UpdateRatesEj(%"class.media::cast::FakeSoftwareVideoEncoder"* nocapture, i32) unnamed_addr #6 align 2 {
  %3 = uitofp i32 %1 to double
  %4 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 1, i32 14
  %5 = load double, double* %4, align 8
  %6 = fdiv double %3, %5
  %7 = fmul double %6, 1.250000e-01
  %8 = fptosi double %7 to i32
  %9 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 6
  store i32 %8, i32* %9, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media4cast24FakeSoftwareVideoEncoder16GenerateKeyFrameEv(%"class.media::cast::FakeSoftwareVideoEncoder"* nocapture) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.media::cast::FakeSoftwareVideoEncoder", %"class.media::cast::FakeSoftwareVideoEncoder"* %0, i64 0, i32 3
  store i8 1, i8* %2, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
