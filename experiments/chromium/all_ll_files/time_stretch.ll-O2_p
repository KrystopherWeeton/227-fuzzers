; ModuleID = '../../third_party/webrtc/modules/audio_coding/neteq/time_stretch.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/neteq/time_stretch.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::TimeStretch" = type <{ i32 (...)**, i32, i32, i64, %"class.webrtc::BackgroundNoise"*, i16, [110 x i16], [51 x i16], [4 x i8] }>
%"class.webrtc::BackgroundNoise" = type <{ i32 (...)**, i64, %"class.std::__1::unique_ptr", i8, [7 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.webrtc::BackgroundNoise::ChannelParameters"* }
%"struct.webrtc::BackgroundNoise::ChannelParameters" = type { i32, i32, i32, i32, [8 x i16], [9 x i16], i16, i16, i16 }
%"class.webrtc::AudioMultiVector" = type { i32 (...)**, %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::AudioVector"**, %"class.webrtc::AudioVector"**, %"class.std::__1::__compressed_pair.7" }
%"class.webrtc::AudioVector" = type { i32 (...)**, %"class.std::__1::unique_ptr.1", i64, i64, i64 }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i16* }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.webrtc::AudioVector"** }

@WebRtcSpl_MaxAbsValueW16 = external local_unnamed_addr constant i16 (i16*, i64)*, align 8
@WebRtcSpl_MaxAbsValueW32 = external local_unnamed_addr constant i32 (i32*, i64)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc11TimeStretch7ProcessEPKsmbPNS_16AudioMultiVectorEPm(%"class.webrtc::TimeStretch"*, i16*, i64, i1 zeroext, %"class.webrtc::AudioMultiVector"*, i64* nocapture) local_unnamed_addr #0 align 2 {
  %7 = alloca [50 x i32], align 16
  %8 = alloca i64, align 8
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  %11 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = mul nsw i32 %12, 120
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 1
  br i1 %17, label %128, label %18

18:                                               ; preds = %6
  %19 = udiv i64 %2, %16
  %20 = shl nuw i64 %19, 1
  %21 = tail call i8* @_Znam(i64 %20) #7
  %22 = bitcast i8* %21 to i16*
  %23 = ptrtoint i8* %21 to i64
  %24 = icmp ugt i64 %16, %2
  br i1 %24, label %128, label %25

25:                                               ; preds = %18
  %26 = icmp ugt i64 %19, 1
  %27 = select i1 %26, i64 %19, i64 1
  %28 = icmp ugt i64 %27, 15
  %29 = icmp eq i64 %16, 1
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %116

31:                                               ; preds = %25
  %32 = and i64 %27, -16
  %33 = mul i64 %32, %16
  %34 = add i64 %32, -16
  %35 = lshr exact i64 %34, 4
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 3
  %38 = icmp ult i64 %34, 48
  br i1 %38, label %94, label %39

39:                                               ; preds = %31
  %40 = sub nsw i64 %36, %37
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ 0, %39 ], [ %91, %41 ]
  %43 = phi i64 [ %40, %39 ], [ %92, %41 ]
  %44 = mul i64 %42, %16
  %45 = getelementptr inbounds i16, i16* %1, i64 %44
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2
  %48 = getelementptr inbounds i16, i16* %45, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2
  %51 = getelementptr inbounds i16, i16* %22, i64 %42
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %51, i64 8
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %54, align 2
  %55 = or i64 %42, 16
  %56 = mul i64 %55, %16
  %57 = getelementptr inbounds i16, i16* %1, i64 %56
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2
  %60 = getelementptr inbounds i16, i16* %57, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = getelementptr inbounds i16, i16* %22, i64 %55
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds i16, i16* %63, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %66, align 2
  %67 = or i64 %42, 32
  %68 = mul i64 %67, %16
  %69 = getelementptr inbounds i16, i16* %1, i64 %68
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = getelementptr inbounds i16, i16* %69, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = getelementptr inbounds i16, i16* %22, i64 %67
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds i16, i16* %75, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %78, align 2
  %79 = or i64 %42, 48
  %80 = mul i64 %79, %16
  %81 = getelementptr inbounds i16, i16* %1, i64 %80
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2
  %84 = getelementptr inbounds i16, i16* %81, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2
  %87 = getelementptr inbounds i16, i16* %22, i64 %79
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %88, align 2
  %89 = getelementptr inbounds i16, i16* %87, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %90, align 2
  %91 = add i64 %42, 64
  %92 = add i64 %43, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %41, !llvm.loop !2

94:                                               ; preds = %41, %31
  %95 = phi i64 [ 0, %31 ], [ %91, %41 ]
  %96 = icmp eq i64 %37, 0
  br i1 %96, label %114, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %111, %97 ], [ %95, %94 ]
  %99 = phi i64 [ %112, %97 ], [ %37, %94 ]
  %100 = mul i64 %98, %16
  %101 = getelementptr inbounds i16, i16* %1, i64 %100
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2
  %104 = getelementptr inbounds i16, i16* %101, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2
  %107 = getelementptr inbounds i16, i16* %22, i64 %98
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %107, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %110, align 2
  %111 = add i64 %98, 16
  %112 = add i64 %99, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %97, !llvm.loop !4

114:                                              ; preds = %97, %94
  %115 = icmp eq i64 %27, %32
  br i1 %115, label %128, label %116

116:                                              ; preds = %25, %114
  %117 = phi i64 [ 0, %25 ], [ %33, %114 ]
  %118 = phi i64 [ 0, %25 ], [ %32, %114 ]
  br label %119

119:                                              ; preds = %116, %119
  %120 = phi i64 [ %125, %119 ], [ %117, %116 ]
  %121 = phi i64 [ %126, %119 ], [ %118, %116 ]
  %122 = getelementptr inbounds i16, i16* %1, i64 %120
  %123 = load i16, i16* %122, align 2
  %124 = getelementptr inbounds i16, i16* %22, i64 %121
  store i16 %123, i16* %124, align 2
  %125 = add i64 %16, %120
  %126 = add nuw i64 %121, 1
  %127 = icmp ult i64 %126, %19
  br i1 %127, label %119, label %128, !llvm.loop !6

128:                                              ; preds = %119, %114, %18, %6
  %129 = phi i64 [ 0, %6 ], [ %23, %18 ], [ %23, %114 ], [ %23, %119 ]
  %130 = phi i64 [ %2, %6 ], [ %19, %18 ], [ %19, %114 ], [ %19, %119 ]
  %131 = phi i16* [ %1, %6 ], [ %22, %18 ], [ %22, %114 ], [ %22, %119 ]
  %132 = load i16 (i16*, i64)*, i16 (i16*, i64)** @WebRtcSpl_MaxAbsValueW16, align 8
  %133 = tail call signext i16 %132(i16* %131, i64 %130) #8
  %134 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 5
  store i16 %133, i16* %134, align 8
  %135 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 1
  %136 = load i32, i32* %135, align 8
  %137 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 6, i64 0
  %138 = tail call i32 @_ZN6webrtc9DspHelper16DownsampleTo4kHzEPKsmmibPs(i16* %131, i64 %130, i64 110, i32 %136, i1 zeroext true, i16* %137) #8
  %139 = bitcast [50 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %139) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %139, i8 -86, i64 200, i1 false) #8
  %140 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 6, i64 60
  %141 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 6, i64 50
  %142 = getelementptr inbounds [50 x i32], [50 x i32]* %7, i64 0, i64 0
  %143 = call i32 @_ZN6webrtc29CrossCorrelationWithAutoShiftEPKsS1_mmiPi(i16* %140, i16* %141, i64 50, i64 50, i32 -1, i32* nonnull %142) #8
  %144 = load i32 (i32*, i64)*, i32 (i32*, i64)** @WebRtcSpl_MaxAbsValueW32, align 8
  %145 = call i32 %144(i32* nonnull %142, i64 50) #8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %153, label %147

147:                                              ; preds = %128
  %148 = ashr i32 %145, 31
  %149 = xor i32 %148, %145
  %150 = call i32 @llvm.ctlz.i32(i32 %149, i1 false) #8, !range !7
  %151 = sub nsw i32 18, %150
  %152 = icmp ugt i32 %149, 16383
  br i1 %152, label %153, label %155

153:                                              ; preds = %147, %128
  %154 = phi i32 [ %151, %147 ], [ 17, %128 ]
  br label %155

155:                                              ; preds = %147, %153
  %156 = phi i32 [ %154, %153 ], [ 0, %147 ]
  %157 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 7, i64 0
  call void @WebRtcSpl_VectorBitShiftW32ToW16(i16* %157, i64 50, i32* nonnull %142, i32 %156) #8
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %139) #8
  %158 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %158) #8
  store i64 -6148914691236517206, i64* %8, align 8
  %159 = bitcast i16* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %159) #8
  store i16 -21846, i16* %9, align 2
  %160 = load i32, i32* %11, align 4
  call void @_ZN6webrtc9DspHelper13PeakDetectionEPsmmiPmS1_(i16* %157, i64 50, i64 1, i32 %160, i64* nonnull %8, i16* nonnull %9) #8
  %161 = load i32, i32* %11, align 4
  %162 = sext i32 %161 to i64
  %163 = mul nsw i64 %162, 20
  %164 = load i64, i64* %8, align 8
  %165 = add i64 %163, %164
  store i64 %165, i64* %8, align 8
  %166 = load i16, i16* %134, align 8
  %167 = sext i16 %166 to i32
  %168 = mul nsw i32 %167, %167
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %173, label %170

170:                                              ; preds = %155
  %171 = call i32 @llvm.ctlz.i32(i32 %168, i1 false) #8, !range !7
  %172 = sub nuw nsw i32 32, %171
  br label %173

173:                                              ; preds = %155, %170
  %174 = phi i32 [ %172, %170 ], [ 31, %155 ]
  %175 = trunc i64 %165 to i32
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %182, label %177

177:                                              ; preds = %173
  %178 = ashr i32 %175, 31
  %179 = xor i32 %178, %175
  %180 = call i32 @llvm.ctlz.i32(i32 %179, i1 false) #8, !range !7
  %181 = add nsw i32 %180, -1
  br label %182

182:                                              ; preds = %173, %177
  %183 = phi i32 [ %181, %177 ], [ 0, %173 ]
  %184 = sub nsw i32 %174, %183
  %185 = icmp sgt i32 %184, 0
  %186 = select i1 %185, i32 %184, i32 0
  %187 = sub i64 %14, %165
  %188 = getelementptr inbounds i16, i16* %131, i64 %187
  %189 = getelementptr inbounds i16, i16* %131, i64 %14
  %190 = call i32 @WebRtcSpl_DotProductWithScale(i16* %188, i16* %188, i64 %165, i32 %186) #8
  %191 = load i64, i64* %8, align 8
  %192 = call i32 @WebRtcSpl_DotProductWithScale(i16* %189, i16* %189, i64 %191, i32 %186) #8
  %193 = load i64, i64* %8, align 8
  %194 = call i32 @WebRtcSpl_DotProductWithScale(i16* %188, i16* %189, i64 %193, i32 %186) #8
  %195 = load i64, i64* %8, align 8
  %196 = call zeroext i1 @_ZNK6webrtc11TimeStretch15SpeechDetectionEiimi(%"class.webrtc::TimeStretch"* %0, i32 %190, i32 %192, i64 %195, i32 %186)
  %197 = bitcast i16* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %197) #8
  store i16 -21846, i16* %10, align 2
  br i1 %196, label %204, label %198

198:                                              ; preds = %182
  %199 = bitcast %"class.webrtc::TimeStretch"* %0 to void (%"class.webrtc::TimeStretch"*, i64, i16*, i64*)***
  %200 = load void (%"class.webrtc::TimeStretch"*, i64, i16*, i64*)**, void (%"class.webrtc::TimeStretch"*, i64, i16*, i64*)*** %199, align 8
  %201 = getelementptr inbounds void (%"class.webrtc::TimeStretch"*, i64, i16*, i64*)*, void (%"class.webrtc::TimeStretch"*, i64, i16*, i64*)** %200, i64 2
  %202 = load void (%"class.webrtc::TimeStretch"*, i64, i16*, i64*)*, void (%"class.webrtc::TimeStretch"*, i64, i16*, i64*)** %201, align 8
  call void %202(%"class.webrtc::TimeStretch"* %0, i64 %130, i16* nonnull %10, i64* nonnull %8) #8
  %203 = load i16, i16* %10, align 2
  br label %253

204:                                              ; preds = %182
  %205 = icmp eq i32 %190, 0
  br i1 %205, label %212, label %206

206:                                              ; preds = %204
  %207 = ashr i32 %190, 31
  %208 = xor i32 %207, %190
  %209 = call i32 @llvm.ctlz.i32(i32 %208, i1 false) #8, !range !7
  %210 = sub nsw i32 17, %209
  %211 = icmp ugt i32 %208, 32767
  br i1 %211, label %212, label %214

212:                                              ; preds = %204, %206
  %213 = phi i32 [ %210, %206 ], [ 16, %204 ]
  br label %214

214:                                              ; preds = %206, %212
  %215 = phi i32 [ %213, %212 ], [ 0, %206 ]
  %216 = icmp eq i32 %192, 0
  br i1 %216, label %223, label %217

217:                                              ; preds = %214
  %218 = ashr i32 %192, 31
  %219 = xor i32 %218, %192
  %220 = call i32 @llvm.ctlz.i32(i32 %219, i1 false) #8, !range !7
  %221 = sub nsw i32 17, %220
  %222 = icmp ugt i32 %219, 32767
  br i1 %222, label %223, label %225

223:                                              ; preds = %214, %217
  %224 = phi i32 [ %221, %217 ], [ 16, %214 ]
  br label %225

225:                                              ; preds = %217, %223
  %226 = phi i32 [ %224, %223 ], [ 0, %217 ]
  %227 = add nuw nsw i32 %226, %215
  %228 = and i32 %227, 1
  %229 = add nuw nsw i32 %228, %215
  %230 = ashr i32 %190, %229
  %231 = ashr i32 %192, %226
  %232 = shl i32 %230, 16
  %233 = ashr exact i32 %232, 16
  %234 = shl i32 %231, 16
  %235 = ashr exact i32 %234, 16
  %236 = mul nsw i32 %233, %235
  %237 = call i32 @WebRtcSpl_SqrtFloor(i32 %236) #8
  %238 = trunc i32 %237 to i16
  %239 = add nuw nsw i32 %229, %226
  %240 = lshr i32 %239, 1
  %241 = sub nsw i32 14, %240
  %242 = icmp ult i32 %239, 30
  %243 = shl i32 %194, %241
  %244 = add nsw i32 %240, -14
  %245 = ashr i32 %194, %244
  %246 = select i1 %242, i32 %243, i32 %245
  %247 = icmp sgt i32 %246, 0
  %248 = select i1 %247, i32 %246, i32 0
  %249 = call i32 @WebRtcSpl_DivW32W16(i32 %248, i16 signext %238) #8
  %250 = trunc i32 %249 to i16
  %251 = icmp slt i16 %250, 16384
  %252 = select i1 %251, i16 %250, i16 16384
  store i16 %252, i16* %10, align 2
  br label %253

253:                                              ; preds = %225, %198
  %254 = phi i16 [ %252, %225 ], [ %203, %198 ]
  %255 = load i64, i64* %8, align 8
  %256 = bitcast %"class.webrtc::TimeStretch"* %0 to i32 (%"class.webrtc::TimeStretch"*, i16*, i64, i64, i16, i1, i1, %"class.webrtc::AudioMultiVector"*)***
  %257 = load i32 (%"class.webrtc::TimeStretch"*, i16*, i64, i64, i16, i1, i1, %"class.webrtc::AudioMultiVector"*)**, i32 (%"class.webrtc::TimeStretch"*, i16*, i64, i64, i16, i1, i1, %"class.webrtc::AudioMultiVector"*)*** %256, align 8
  %258 = getelementptr inbounds i32 (%"class.webrtc::TimeStretch"*, i16*, i64, i64, i16, i1, i1, %"class.webrtc::AudioMultiVector"*)*, i32 (%"class.webrtc::TimeStretch"*, i16*, i64, i64, i16, i1, i1, %"class.webrtc::AudioMultiVector"*)** %257, i64 3
  %259 = load i32 (%"class.webrtc::TimeStretch"*, i16*, i64, i64, i16, i1, i1, %"class.webrtc::AudioMultiVector"*)*, i32 (%"class.webrtc::TimeStretch"*, i16*, i64, i64, i16, i1, i1, %"class.webrtc::AudioMultiVector"*)** %258, align 8
  %260 = call i32 %259(%"class.webrtc::TimeStretch"* %0, i16* %1, i64 %2, i64 %255, i16 signext %254, i1 zeroext %196, i1 zeroext %3, %"class.webrtc::AudioMultiVector"* %4) #8
  switch i32 %260, label %267 [
    i32 0, label %261
    i32 1, label %263
    i32 2, label %265
    i32 -1, label %265
  ]

261:                                              ; preds = %253
  %262 = load i64, i64* %8, align 8
  br label %265

263:                                              ; preds = %253
  %264 = load i64, i64* %8, align 8
  br label %265

265:                                              ; preds = %253, %253, %261, %263
  %266 = phi i64 [ %264, %263 ], [ %262, %261 ], [ 0, %253 ], [ 0, %253 ]
  store i64 %266, i64* %5, align 8
  br label %267

267:                                              ; preds = %265, %253
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %197) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %159) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %158) #8
  %268 = icmp eq i64 %129, 0
  br i1 %268, label %271, label %269

269:                                              ; preds = %267
  %270 = inttoptr i64 %129 to i8*
  call void @_ZdaPv(i8* %270) #7
  br label %271

271:                                              ; preds = %267, %269
  ret i32 %260
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN6webrtc9DspHelper16DownsampleTo4kHzEPKsmmibPs(i16*, i64, i64, i32, i1 zeroext, i16*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc11TimeStretch15AutoCorrelationEv(%"class.webrtc::TimeStretch"*) local_unnamed_addr #0 align 2 {
  %2 = alloca [50 x i32], align 16
  %3 = bitcast [50 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %3) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 200, i1 false)
  %4 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 6, i64 60
  %5 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 6, i64 50
  %6 = getelementptr inbounds [50 x i32], [50 x i32]* %2, i64 0, i64 0
  %7 = call i32 @_ZN6webrtc29CrossCorrelationWithAutoShiftEPKsS1_mmiPi(i16* %4, i16* %5, i64 50, i64 50, i32 -1, i32* nonnull %6) #8
  %8 = load i32 (i32*, i64)*, i32 (i32*, i64)** @WebRtcSpl_MaxAbsValueW32, align 8
  %9 = call i32 %8(i32* nonnull %6, i64 50) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %1
  %12 = ashr i32 %9, 31
  %13 = xor i32 %12, %9
  %14 = call i32 @llvm.ctlz.i32(i32 %13, i1 false) #8, !range !7
  %15 = sub nsw i32 18, %14
  %16 = icmp ugt i32 %13, 16383
  br i1 %16, label %17, label %19

17:                                               ; preds = %1, %11
  %18 = phi i32 [ %15, %11 ], [ 17, %1 ]
  br label %19

19:                                               ; preds = %11, %17
  %20 = phi i32 [ %18, %17 ], [ 0, %11 ]
  %21 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 7, i64 0
  call void @WebRtcSpl_VectorBitShiftW32ToW16(i16* %21, i64 50, i32* nonnull %6, i32 %20) #8
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %3) #8
  ret void
}

declare void @_ZN6webrtc9DspHelper13PeakDetectionEPsmmiPmS1_(i16*, i64, i64, i32, i64*, i16*) local_unnamed_addr #3

declare i32 @WebRtcSpl_DotProductWithScale(i16*, i16*, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc11TimeStretch15SpeechDetectionEiimi(%"class.webrtc::TimeStretch"* nocapture readonly, i32, i32, i64, i32) local_unnamed_addr #0 align 2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %2 to i64
  %8 = add nsw i64 %7, %6
  %9 = icmp sgt i64 %8, 34359738367
  %10 = select i1 %9, i32 2, i32 0
  %11 = icmp slt i64 %8, -34359738383
  %12 = zext i1 %11 to i32
  %13 = or i32 %10, %12
  switch i32 %13, label %19 [
    i32 0, label %14
    i32 1, label %20
    i32 2, label %17
    i32 3, label %18
  ]

14:                                               ; preds = %5
  %15 = sdiv i64 %8, 16
  %16 = trunc i64 %15 to i32
  br label %20

17:                                               ; preds = %5
  br label %20

18:                                               ; preds = %5
  tail call void @_ZN3rtc18webrtc_checks_impl22UnreachableCodeReachedEv() #9
  unreachable

19:                                               ; preds = %5
  unreachable

20:                                               ; preds = %5, %14, %17
  %21 = phi i32 [ 2147483647, %17 ], [ %16, %14 ], [ -2147483648, %5 ]
  %22 = getelementptr inbounds %"class.webrtc::TimeStretch", %"class.webrtc::TimeStretch"* %0, i64 0, i32 4
  %23 = load %"class.webrtc::BackgroundNoise"*, %"class.webrtc::BackgroundNoise"** %22, align 8
  %24 = getelementptr inbounds %"class.webrtc::BackgroundNoise", %"class.webrtc::BackgroundNoise"* %23, i64 0, i32 3
  %25 = load i8, i8* %24, align 8, !range !8
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %20
  %28 = tail call i32 @_ZNK6webrtc15BackgroundNoise6EnergyEm(%"class.webrtc::BackgroundNoise"* %23, i64 0) #8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %37, label %30

30:                                               ; preds = %27, %20
  %31 = phi i32 [ %28, %27 ], [ 75000, %20 ]
  %32 = ashr i32 %31, 31
  %33 = xor i32 %32, %31
  %34 = tail call i32 @llvm.ctlz.i32(i32 %33, i1 false) #8, !range !7
  %35 = sub nsw i32 17, %34
  %36 = icmp ugt i32 %33, 32767
  br i1 %36, label %37, label %40

37:                                               ; preds = %27, %30
  %38 = phi i32 [ %35, %30 ], [ 16, %27 ]
  %39 = phi i32 [ %31, %30 ], [ 0, %27 ]
  br label %40

40:                                               ; preds = %30, %37
  %41 = phi i32 [ %39, %37 ], [ %31, %30 ]
  %42 = phi i32 [ %38, %37 ], [ 0, %30 ]
  %43 = ashr i32 %21, %42
  %44 = trunc i64 %3 to i32
  %45 = ashr i32 %41, %42
  %46 = mul nsw i32 %45, %44
  %47 = icmp eq i32 %43, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %40
  %49 = ashr i32 %43, 31
  %50 = xor i32 %49, %43
  %51 = tail call i32 @llvm.ctlz.i32(i32 %50, i1 false) #8, !range !7
  %52 = add nsw i32 %51, -1
  br label %53

53:                                               ; preds = %40, %48
  %54 = phi i32 [ %52, %48 ], [ 0, %40 ]
  %55 = shl nsw i32 %4, 1
  %56 = icmp sgt i32 %55, %54
  br i1 %56, label %57, label %67

57:                                               ; preds = %53
  br i1 %47, label %63, label %58

58:                                               ; preds = %57
  %59 = ashr i32 %43, 31
  %60 = xor i32 %59, %43
  %61 = tail call i32 @llvm.ctlz.i32(i32 %60, i1 false) #8, !range !7
  %62 = add nsw i32 %61, -1
  br label %63

63:                                               ; preds = %57, %58
  %64 = phi i32 [ %62, %58 ], [ 0, %57 ]
  %65 = sub nsw i32 %55, %64
  %66 = ashr i32 %46, %65
  br label %67

67:                                               ; preds = %53, %63
  %68 = phi i32 [ %66, %63 ], [ %46, %53 ]
  %69 = phi i32 [ %64, %63 ], [ %55, %53 ]
  %70 = shl i32 %43, %69
  %71 = icmp sgt i32 %70, %68
  ret i1 %71
}

declare i32 @WebRtcSpl_SqrtFloor(i32) local_unnamed_addr #3

declare i32 @WebRtcSpl_DivW32W16(i32, i16 signext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN6webrtc29CrossCorrelationWithAutoShiftEPKsS1_mmiPi(i16*, i16*, i64, i64, i32, i32*) local_unnamed_addr #3

declare void @WebRtcSpl_VectorBitShiftW32ToW16(i16*, i64, i32*, i32) local_unnamed_addr #3

declare i32 @_ZNK6webrtc15BackgroundNoise6EnergyEm(%"class.webrtc::BackgroundNoise"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl22UnreachableCodeReachedEv() local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !3}
!7 = !{i32 0, i32 33}
!8 = !{i8 0, i8 2}
