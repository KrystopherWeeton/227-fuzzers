; ModuleID = '../../net/reporting/reporting_policy.cc'
source_filename = "../../net/reporting/reporting_policy.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.net::ReportingPolicy" = type <{ i64, i64, i64, %"class.base::TimeDelta", %"struct.net::BackoffEntry::Policy", %"class.base::TimeDelta", i8, i8, [6 x i8], %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", i32, i8, i8, [2 x i8] }>
%"struct.net::BackoffEntry::Policy" = type { i32, i32, double, double, i64, i64, i8 }
%"class.base::TimeDelta" = type { i64 }
%"class.base::NoDestructor" = type { [128 x i8] }

@_ZN3net12_GLOBAL__N_118policy_for_testingE = internal unnamed_addr global %"struct.net::ReportingPolicy"* null, align 8
@_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy = internal global %"class.base::NoDestructor" zeroinitializer, align 16
@_ZGVZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy = internal global i64 0, align 8

@_ZN3net15ReportingPolicyC1Ev = hidden unnamed_addr alias void (%"struct.net::ReportingPolicy"*), void (%"struct.net::ReportingPolicy"*)* @_ZN3net15ReportingPolicyC2Ev
@_ZN3net15ReportingPolicyC1ERKS0_ = hidden unnamed_addr alias void (%"struct.net::ReportingPolicy"*, %"struct.net::ReportingPolicy"*), void (%"struct.net::ReportingPolicy"*, %"struct.net::ReportingPolicy"*)* @_ZN3net15ReportingPolicyC2ERKS0_
@_ZN3net15ReportingPolicyD1Ev = hidden unnamed_addr alias void (%"struct.net::ReportingPolicy"*), void (%"struct.net::ReportingPolicy"*)* @_ZN3net15ReportingPolicyD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull %"struct.net::ReportingPolicy"* @_ZN3net15ReportingPolicy6CreateEv() local_unnamed_addr #0 align 2 {
  %1 = load %"struct.net::ReportingPolicy"*, %"struct.net::ReportingPolicy"** @_ZN3net12_GLOBAL__N_118policy_for_testingE, align 8
  %2 = icmp eq %"struct.net::ReportingPolicy"* %1, null
  %3 = tail call i8* @_Znwm(i64 128) #6
  %4 = bitcast i8* %3 to %"struct.net::ReportingPolicy"*
  br i1 %2, label %7, label %5

5:                                                ; preds = %0
  %6 = bitcast %"struct.net::ReportingPolicy"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* nonnull align 8 %6, i64 126, i1 false) #7
  br label %33

7:                                                ; preds = %0
  %8 = bitcast i8* %3 to <2 x i64>*
  store <2 x i64> <i64 100, i64 1000>, <2 x i64>* %8, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 16
  %10 = bitcast i8* %9 to <2 x i64>*
  store <2 x i64> <i64 40, i64 60000000>, <2 x i64>* %10, align 8
  %11 = getelementptr inbounds i8, i8* %3, i64 80
  %12 = bitcast i8* %11 to i64*
  store i64 60000000, i64* %12, align 8
  %13 = getelementptr inbounds i8, i8* %3, i64 88
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds i8, i8* %3, i64 89
  store i8 1, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %3, i64 96
  %16 = bitcast i8* %15 to <2 x i64>*
  store <2 x i64> <i64 300000000, i64 900000000>, <2 x i64>* %16, align 8
  %17 = getelementptr inbounds i8, i8* %3, i64 112
  %18 = bitcast i8* %17 to i64*
  store i64 604800000000, i64* %18, align 8
  %19 = getelementptr inbounds i8, i8* %3, i64 120
  %20 = bitcast i8* %19 to i32*
  store i32 5, i32* %20, align 8
  %21 = getelementptr inbounds i8, i8* %3, i64 124
  store i8 0, i8* %21, align 4
  %22 = getelementptr inbounds i8, i8* %3, i64 125
  store i8 1, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %3, i64 32
  %24 = bitcast i8* %23 to i32*
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds i8, i8* %3, i64 36
  %26 = bitcast i8* %25 to i32*
  store i32 60000, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %3, i64 40
  %28 = bitcast i8* %27 to double*
  store double 2.000000e+00, double* %28, align 8
  %29 = getelementptr inbounds i8, i8* %3, i64 48
  %30 = bitcast i8* %29 to double*
  store double 1.000000e-01, double* %30, align 8
  %31 = getelementptr inbounds i8, i8* %3, i64 56
  %32 = getelementptr inbounds i8, i8* %3, i64 72
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 -1, i64 16, i1 false) #7
  store i8 0, i8* %32, align 8
  br label %33

33:                                               ; preds = %7, %5
  ret %"struct.net::ReportingPolicy"* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net15ReportingPolicy19UsePolicyForTestingERKS0_(%"struct.net::ReportingPolicy"* nocapture readonly dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !2

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy) #7
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  store <2 x i64> <i64 100, i64 1000>, <2 x i64>* bitcast (%"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy to <2 x i64>*), align 16
  store <2 x i64> <i64 40, i64 60000000>, <2 x i64>* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 16) to <2 x i64>*), align 16
  store i64 60000000, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 80) to i64*), align 16
  store i8 0, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 88), align 8
  store i8 1, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 89), align 1
  store <2 x i64> <i64 300000000, i64 900000000>, <2 x i64>* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 96) to <2 x i64>*), align 16
  store i64 604800000000, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 112) to i64*), align 16
  store i32 5, i32* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 120) to i32*), align 8
  store i8 0, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 124), align 4
  store i8 1, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 125), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 32) to i32*), align 16
  store i32 60000, i32* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 36) to i32*), align 4
  store double 2.000000e+00, double* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 40) to double*), align 8
  store double 1.000000e-01, double* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 48) to double*), align 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 56), i8 -1, i64 16, i1 false) #7
  store i8 0, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 72), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy) #7
  br label %8

8:                                                ; preds = %4, %7, %1
  store %"struct.net::ReportingPolicy"* bitcast (%"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy to %"struct.net::ReportingPolicy"*), %"struct.net::ReportingPolicy"** @_ZN3net12_GLOBAL__N_118policy_for_testingE, align 8
  %9 = bitcast %"struct.net::ReportingPolicy"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3net15ReportingPolicy19UsePolicyForTestingERKS0_E12owned_policy, i64 0, i32 0, i64 0), i8* align 8 %9, i64 126, i1 false)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net15ReportingPolicyC2Ev(%"struct.net::ReportingPolicy"* nocapture) unnamed_addr #3 align 2 {
  %2 = bitcast %"struct.net::ReportingPolicy"* %0 to <2 x i64>*
  store <2 x i64> <i64 100, i64 1000>, <2 x i64>* %2, align 8
  %3 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 2
  %4 = bitcast i64* %3 to <2 x i64>*
  store <2 x i64> <i64 40, i64 60000000>, <2 x i64>* %4, align 8
  %5 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 5, i32 0
  store i64 60000000, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 6
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 9, i32 0
  %9 = bitcast i64* %8 to <2 x i64>*
  store <2 x i64> <i64 300000000, i64 900000000>, <2 x i64>* %9, align 8
  %10 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 11, i32 0
  store i64 604800000000, i64* %10, align 8
  %11 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 12
  store i32 5, i32* %11, align 8
  %12 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 13
  store i8 0, i8* %12, align 4
  %13 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 14
  store i8 1, i8* %13, align 1
  %14 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 4, i32 0
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 4, i32 1
  store i32 60000, i32* %15, align 4
  %16 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 4, i32 2
  store double 2.000000e+00, double* %16, align 8
  %17 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 4, i32 3
  store double 1.000000e-01, double* %17, align 8
  %18 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 4, i32 4
  %19 = getelementptr inbounds %"struct.net::ReportingPolicy", %"struct.net::ReportingPolicy"* %0, i64 0, i32 4, i32 6
  %20 = bitcast i64* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 -1, i64 16, i1 false)
  store i8 0, i8* %19, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net15ReportingPolicyC2ERKS0_(%"struct.net::ReportingPolicy"* nocapture, %"struct.net::ReportingPolicy"* nocapture readonly dereferenceable(128)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.net::ReportingPolicy"* %0 to i8*
  %4 = bitcast %"struct.net::ReportingPolicy"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 126, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net15ReportingPolicyD2Ev(%"struct.net::ReportingPolicy"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
