; ModuleID = '../../third_party/blink/renderer/platform/exported/impression_conversions.cc'
source_filename = "../../third_party/blink/renderer/platform/exported/impression_conversions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::Impression" = type { %"class.url::Origin", %"class.absl::optional.12", i64, %"class.absl::optional.0", i64 }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.7" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.5 }
%union.anon.5 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional.7" = type { %"class.absl::optional_internal::optional_data.8" }
%"class.absl::optional_internal::optional_data.8" = type { %"class.absl::optional_internal::optional_data_base.9" }
%"class.absl::optional_internal::optional_data_base.9" = type { %"class.absl::optional_internal::optional_data_dtor_base.10" }
%"class.absl::optional_internal::optional_data_dtor_base.10" = type { i8, %union.anon.11 }
%union.anon.11 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.absl::optional.12" = type { %"class.absl::optional_internal::optional_data.13" }
%"class.absl::optional_internal::optional_data.13" = type { %"class.absl::optional_internal::optional_data_base.14" }
%"class.absl::optional_internal::optional_data_base.14" = type { %"class.absl::optional_internal::optional_data_dtor_base.15" }
%"class.absl::optional_internal::optional_data_dtor_base.15" = type { i8, %union.anon.16 }
%union.anon.16 = type { %"class.url::Origin" }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"struct.blink::WebImpression" = type { %"class.blink::WebSecurityOrigin", %"class.absl::optional", i64, %"class.absl::optional.0", i64 }
%"class.blink::WebSecurityOrigin" = type { %"class.blink::WebPrivatePtr" }
%"class.blink::WebPrivatePtr" = type { i8* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.blink::WebSecurityOrigin" }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink32ConvertWebImpressionToImpressionERKNS_13WebImpressionE(%"struct.blink::Impression"* noalias sret, %"struct.blink::WebImpression"* dereferenceable(56)) local_unnamed_addr #0 {
  %3 = alloca %"class.url::Origin", align 8
  %4 = alloca %"class.url::Origin", align 8
  %5 = bitcast %"struct.blink::Impression"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 -86, i64 200, i1 false)
  tail call void @_ZN5blink10ImpressionC1Ev(%"struct.blink::Impression"* %0) #4
  %6 = getelementptr inbounds %"struct.blink::WebImpression", %"struct.blink::WebImpression"* %1, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"struct.blink::Impression", %"struct.blink::Impression"* %0, i64 0, i32 2
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"struct.blink::Impression", %"struct.blink::Impression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.blink::WebImpression", %"struct.blink::WebImpression"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false)
  %11 = getelementptr inbounds %"struct.blink::Impression", %"struct.blink::Impression"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.blink::WebImpression", %"struct.blink::WebImpression"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"struct.blink::WebImpression", %"struct.blink::WebImpression"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %17 = getelementptr inbounds %"class.absl::optional.12", %"class.absl::optional.12"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8, i8* %17, align 8, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %15
  %21 = bitcast %"class.url::Origin"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %21) #4
  call void @_ZNK5blink17WebSecurityOrigincvN3url6OriginEEv(%"class.url::Origin"* nonnull sret %3, %"class.blink::WebSecurityOrigin"* %16) #4
  %22 = getelementptr inbounds %"struct.blink::Impression", %"struct.blink::Impression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %23 = call dereferenceable(80) %"class.url::Origin"* @_ZN3url6OriginaSEOS0_(%"class.url::Origin"* %22, %"class.url::Origin"* nonnull dereferenceable(80) %3) #4
  call void @_ZN3url6OriginD1Ev(%"class.url::Origin"* nonnull %3) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %21) #4
  br label %32

24:                                               ; preds = %15
  %25 = getelementptr inbounds %"struct.blink::Impression", %"struct.blink::Impression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZNK5blink17WebSecurityOrigincvN3url6OriginEEv(%"class.url::Origin"* sret %25, %"class.blink::WebSecurityOrigin"* %16) #4
  store i8 1, i8* %17, align 8
  br label %32

26:                                               ; preds = %2
  %27 = getelementptr inbounds %"class.absl::optional.12", %"class.absl::optional.12"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"struct.blink::Impression", %"struct.blink::Impression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN3url6OriginD1Ev(%"class.url::Origin"* %31) #4
  store i8 0, i8* %27, align 8
  br label %32

32:                                               ; preds = %24, %20, %26, %30
  %33 = bitcast %"class.url::Origin"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %33) #4
  %34 = getelementptr inbounds %"struct.blink::WebImpression", %"struct.blink::WebImpression"* %1, i64 0, i32 0
  call void @_ZNK5blink17WebSecurityOrigincvN3url6OriginEEv(%"class.url::Origin"* nonnull sret %4, %"class.blink::WebSecurityOrigin"* %34) #4
  %35 = getelementptr inbounds %"struct.blink::Impression", %"struct.blink::Impression"* %0, i64 0, i32 0
  %36 = call dereferenceable(80) %"class.url::Origin"* @_ZN3url6OriginaSEOS0_(%"class.url::Origin"* %35, %"class.url::Origin"* nonnull dereferenceable(80) %4) #4
  call void @_ZN3url6OriginD1Ev(%"class.url::Origin"* nonnull %4) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %33) #4
  %37 = getelementptr inbounds %"struct.blink::WebImpression", %"struct.blink::WebImpression"* %1, i64 0, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"struct.blink::Impression", %"struct.blink::Impression"* %0, i64 0, i32 4
  store i64 %38, i64* %39, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN5blink10ImpressionC1Ev(%"struct.blink::Impression"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK5blink17WebSecurityOrigincvN3url6OriginEEv(%"class.url::Origin"* sret, %"class.blink::WebSecurityOrigin"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare dereferenceable(80) %"class.url::Origin"* @_ZN3url6OriginaSEOS0_(%"class.url::Origin"*, %"class.url::Origin"* dereferenceable(80)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3url6OriginD1Ev(%"class.url::Origin"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
