; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/gl/RewriteRepeatedAssignToSwizzled.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/gl/RewriteRepeatedAssignToSwizzled.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser" = type <{ %"class.sh::TIntermTraverser", i8, [7 x i8] }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.1", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.sh::TVector", %"class.std::__1::vector.20" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.sh::TSymbolTable" = type opaque
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.22" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TVariable" = type opaque
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.27"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.27" = type opaque
%"class.sh::TInterfaceBlock" = type opaque
%"class.sh::TStructure" = type opaque
%"class.sh::TConstantUnion" = type { %union.anon, i32 }
%union.anon = type { i32 }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.28", i8, [7 x i8] }>
%"class.sh::TVector.28" = type { %"class.std::__1::vector.29" }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i32*, i32*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermOperator" = type <{ %"class.sh::TIntermExpression", i8, [7 x i8] }>
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.38", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.40" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::ImmutableString" = type { i8*, i64 }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_12TIntermBlockERPNS1_13TIntermBinaryENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

@_ZTVN2sh12_GLOBAL__N_132RewriteAssignToSwizzledTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"*)* @_ZN2sh12_GLOBAL__N_132RewriteAssignToSwizzledTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_132RewriteAssignToSwizzledTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh31RewriteRepeatedAssignToSwizzledEPNS_9TCompilerEPNS_12TIntermBlockE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*) local_unnamed_addr #0 {
  %3 = alloca %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", align 8
  %4 = bitcast %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 160, i1 false) #8
  %5 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %3, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %5, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %3, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_132RewriteAssignToSwizzledTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %3, i64 0, i32 1
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  br label %9

9:                                                ; preds = %11, %2
  store i8 0, i8* %7, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %5) #8
  %10 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %5, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %8) #8
  br i1 %10, label %11, label %14

11:                                               ; preds = %9
  %12 = load i8, i8* %7, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %9

14:                                               ; preds = %9, %11
  %15 = phi i1 [ false, %9 ], [ true, %11 ]
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %4) #8
  ret i1 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_132RewriteAssignToSwizzledTraverserD0Ev(%"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_132RewriteAssignToSwizzledTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermBinary"*, align 8
  %5 = alloca %"class.sh::TIntermBlock"*, align 8
  %6 = alloca %"class.sh::TVector", align 16
  store %"class.sh::TIntermBinary"* %2, %"class.sh::TIntermBinary"** %4, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 3
  %8 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %8, i64 0, i32 0
  %10 = bitcast %"class.sh::TIntermTyped"* %8 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %11 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %10, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %11, i64 13
  %13 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %12, align 8
  %14 = tail call %"class.sh::TIntermBinary"* %13(%"class.sh::TIntermNode"* %9) #8
  %15 = bitcast %"class.sh::TIntermBlock"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #8
  store %"class.sh::TIntermBlock"* inttoptr (i64 -6148914691236517206 to %"class.sh::TIntermBlock"*), %"class.sh::TIntermBlock"** %5, align 8
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %18 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::vector"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = ashr exact i64 %22, 3
  %24 = icmp ult i64 %23, 2
  %25 = bitcast %"class.sh::TIntermBinary"* %2 to %"class.sh::TIntermOperator"*
  br i1 %24, label %32, label %26

26:                                               ; preds = %3
  %27 = inttoptr i64 %21 to %"class.sh::TIntermNode"**
  %28 = add nsw i64 %23, -2
  %29 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %27, i64 %28
  %30 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, align 8
  %31 = bitcast %"class.sh::TIntermNode"* %30 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %32

32:                                               ; preds = %3, %26
  %33 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %31, %26 ], [ null, %3 ]
  %34 = phi %"class.sh::TIntermNode"* [ %30, %26 ], [ null, %3 ]
  %35 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %33, align 8
  %36 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %35, i64 8
  %37 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %36, align 8
  %38 = tail call %"class.sh::TIntermBlock"* %37(%"class.sh::TIntermNode"* %34) #8
  store %"class.sh::TIntermBlock"* %38, %"class.sh::TIntermBlock"** %5, align 8
  %39 = icmp eq %"class.sh::TIntermBlock"* %38, null
  br i1 %39, label %514, label %40

40:                                               ; preds = %32
  %41 = tail call zeroext i1 @_ZNK2sh15TIntermOperator12isAssignmentEv(%"class.sh::TIntermOperator"* %25) #8
  br i1 %41, label %42, label %514

42:                                               ; preds = %40
  %43 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 2
  %44 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %43, align 8
  %45 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %44, i64 0, i32 0
  %46 = bitcast %"class.sh::TIntermTyped"* %44 to %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)***
  %47 = load %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)** %47, i64 12
  %49 = load %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)** %48, align 8
  %50 = tail call %"class.sh::TIntermSwizzle"* %49(%"class.sh::TIntermNode"* %45) #8
  %51 = icmp ne %"class.sh::TIntermSwizzle"* %50, null
  %52 = icmp ne %"class.sh::TIntermBinary"* %14, null
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %514

54:                                               ; preds = %42
  %55 = bitcast %"class.sh::TIntermBinary"* %14 to %"class.sh::TIntermOperator"*
  %56 = tail call zeroext i1 @_ZNK2sh15TIntermOperator12isAssignmentEv(%"class.sh::TIntermOperator"* nonnull %55) #8
  br i1 %56, label %57, label %514

57:                                               ; preds = %54
  %58 = bitcast %"class.sh::TVector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %58) #8
  %59 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 0
  %60 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 1
  %61 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 0, i64 24, i1 false) #8
  %62 = ptrtoint %"class.sh::TIntermBinary"* %14 to i64
  %63 = bitcast %"class.sh::TIntermNode"*** %60 to i64*
  %64 = bitcast %"class.sh::TVector"* %6 to i64*
  %65 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  %66 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %67 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %66, i64 8) #8
  %68 = bitcast i8* %67 to %"class.sh::TIntermNode"**
  %69 = getelementptr inbounds i8, i8* %67, i64 8
  %70 = ptrtoint i8* %69 to i64
  %71 = bitcast i8* %67 to i64*
  store i64 %62, i64* %71, align 8
  %72 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %59, align 16
  %73 = ptrtoint %"class.sh::TIntermNode"** %72 to i64
  %74 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %60, align 8
  %75 = bitcast %"class.sh::TIntermNode"** %74 to i8*
  %76 = icmp eq %"class.sh::TIntermNode"** %74, %72
  br i1 %76, label %250, label %77

77:                                               ; preds = %57
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %79 = ptrtoint %"class.sh::TIntermNode"** %78 to i64
  %80 = sub i64 %79, %73
  %81 = lshr i64 %80, 3
  %82 = add nuw nsw i64 %81, 1
  %83 = icmp ult i64 %82, 4
  br i1 %83, label %180, label %84

84:                                               ; preds = %77
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %86 = ptrtoint %"class.sh::TIntermNode"** %85 to i64
  %87 = sub i64 %86, %73
  %88 = lshr i64 %87, 3
  %89 = and i64 %87, -8
  %90 = xor i64 %89, -8
  %91 = getelementptr i8, i8* %67, i64 %90
  %92 = xor i64 %88, -1
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 %92
  %94 = bitcast %"class.sh::TIntermNode"** %93 to i8*
  %95 = icmp ult i8* %91, %75
  %96 = icmp ugt i8* %67, %94
  %97 = and i1 %95, %96
  br i1 %97, label %180, label %98

98:                                               ; preds = %84
  %99 = and i64 %82, 4611686018427387900
  %100 = sub nsw i64 0, %99
  %101 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 %100
  %102 = sub nsw i64 0, %99
  %103 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 %102
  %104 = add nsw i64 %99, -4
  %105 = lshr exact i64 %104, 2
  %106 = add nuw nsw i64 %105, 1
  %107 = and i64 %106, 1
  %108 = icmp eq i64 %104, 0
  br i1 %108, label %155, label %109

109:                                              ; preds = %98
  %110 = sub nuw nsw i64 %106, %107
  %111 = getelementptr i8, i8* %67, i64 -8
  %112 = bitcast i8* %111 to %"class.sh::TIntermNode"**
  %113 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %114 = getelementptr i8, i8* %67, i64 -8
  %115 = bitcast i8* %114 to %"class.sh::TIntermNode"**
  %116 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  br label %117

117:                                              ; preds = %117, %109
  %118 = phi i64 [ 0, %109 ], [ %152, %117 ]
  %119 = phi i64 [ %110, %109 ], [ %153, %117 ]
  %120 = sub i64 0, %118
  %121 = sub i64 0, %118
  %122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 %120
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %113, i64 %121
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %123, i64 -1
  %125 = bitcast %"class.sh::TIntermNode"** %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !3
  %127 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %123, i64 -2
  %128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 -1
  %129 = bitcast %"class.sh::TIntermNode"** %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 8, !alias.scope !3
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 -1
  %132 = bitcast %"class.sh::TIntermNode"** %131 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %132, align 8, !alias.scope !6, !noalias !3
  %133 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 -2
  %134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %133, i64 -1
  %135 = bitcast %"class.sh::TIntermNode"** %134 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %135, align 8, !alias.scope !6, !noalias !3
  %136 = sub nuw nsw i64 -4, %118
  %137 = sub nuw nsw i64 -4, %118
  %138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 %136
  %139 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 %137
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 -1
  %141 = bitcast %"class.sh::TIntermNode"** %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 8, !alias.scope !3
  %143 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 -2
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 -1
  %145 = bitcast %"class.sh::TIntermNode"** %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 8, !alias.scope !3
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 -1
  %148 = bitcast %"class.sh::TIntermNode"** %147 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %148, align 8, !alias.scope !6, !noalias !3
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 -2
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 -1
  %151 = bitcast %"class.sh::TIntermNode"** %150 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %151, align 8, !alias.scope !6, !noalias !3
  %152 = add i64 %118, 8
  %153 = add i64 %119, -2
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %117, !llvm.loop !8

155:                                              ; preds = %117, %98
  %156 = phi i64 [ 0, %98 ], [ %152, %117 ]
  %157 = icmp eq i64 %107, 0
  br i1 %157, label %178, label %158

158:                                              ; preds = %155
  %159 = sub i64 0, %156
  %160 = getelementptr i8, i8* %67, i64 -8
  %161 = bitcast i8* %160 to %"class.sh::TIntermNode"**
  %162 = sub i64 0, %156
  %163 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 %159
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 %162
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %167 = bitcast %"class.sh::TIntermNode"** %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !3
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -2
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -1
  %171 = bitcast %"class.sh::TIntermNode"** %170 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 8, !alias.scope !3
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %174, align 8, !alias.scope !6, !noalias !3
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 -2
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %175, i64 -1
  %177 = bitcast %"class.sh::TIntermNode"** %176 to <2 x i64>*
  store <2 x i64> %172, <2 x i64>* %177, align 8, !alias.scope !6, !noalias !3
  br label %178

178:                                              ; preds = %155, %158
  %179 = icmp eq i64 %82, %99
  br i1 %179, label %250, label %180

180:                                              ; preds = %178, %84, %77
  %181 = phi %"class.sh::TIntermNode"** [ %68, %84 ], [ %68, %77 ], [ %101, %178 ]
  %182 = phi %"class.sh::TIntermNode"** [ %74, %84 ], [ %74, %77 ], [ %103, %178 ]
  %183 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -1
  %184 = ptrtoint %"class.sh::TIntermNode"** %183 to i64
  %185 = sub i64 %184, %73
  %186 = lshr i64 %185, 3
  %187 = add nuw nsw i64 %186, 1
  %188 = and i64 %187, 7
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %180, %190
  %191 = phi %"class.sh::TIntermNode"** [ %194, %190 ], [ %181, %180 ]
  %192 = phi %"class.sh::TIntermNode"** [ %195, %190 ], [ %182, %180 ]
  %193 = phi i64 [ %199, %190 ], [ %188, %180 ]
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %191, i64 -1
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %192, i64 -1
  %196 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = bitcast %"class.sh::TIntermNode"** %194 to i64*
  store i64 %197, i64* %198, align 8
  %199 = add i64 %193, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %190, !llvm.loop !10

201:                                              ; preds = %190, %180
  %202 = phi %"class.sh::TIntermNode"** [ undef, %180 ], [ %194, %190 ]
  %203 = phi %"class.sh::TIntermNode"** [ %181, %180 ], [ %194, %190 ]
  %204 = phi %"class.sh::TIntermNode"** [ %182, %180 ], [ %195, %190 ]
  %205 = icmp ult i64 %185, 56
  br i1 %205, label %250, label %206

206:                                              ; preds = %201, %206
  %207 = phi %"class.sh::TIntermNode"** [ %244, %206 ], [ %203, %201 ]
  %208 = phi %"class.sh::TIntermNode"** [ %245, %206 ], [ %204, %201 ]
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -1
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -1
  %211 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.sh::TIntermNode"** %209 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -2
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -2
  %216 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.sh::TIntermNode"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -3
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -3
  %221 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.sh::TIntermNode"** %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -4
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -4
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = bitcast %"class.sh::TIntermNode"** %224 to i64*
  store i64 %227, i64* %228, align 8
  %229 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -5
  %230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -5
  %231 = bitcast %"class.sh::TIntermNode"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = bitcast %"class.sh::TIntermNode"** %229 to i64*
  store i64 %232, i64* %233, align 8
  %234 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -6
  %235 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -6
  %236 = bitcast %"class.sh::TIntermNode"** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = bitcast %"class.sh::TIntermNode"** %234 to i64*
  store i64 %237, i64* %238, align 8
  %239 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -7
  %240 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -7
  %241 = bitcast %"class.sh::TIntermNode"** %240 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.sh::TIntermNode"** %239 to i64*
  store i64 %242, i64* %243, align 8
  %244 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -8
  %245 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 -8
  %246 = bitcast %"class.sh::TIntermNode"** %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = bitcast %"class.sh::TIntermNode"** %244 to i64*
  store i64 %247, i64* %248, align 8
  %249 = icmp eq %"class.sh::TIntermNode"** %245, %72
  br i1 %249, label %250, label %206, !llvm.loop !12

250:                                              ; preds = %201, %206, %178, %57
  %251 = phi %"class.sh::TIntermNode"** [ %68, %57 ], [ %101, %178 ], [ %202, %201 ], [ %244, %206 ]
  %252 = ptrtoint %"class.sh::TIntermNode"** %251 to i64
  store i64 %252, i64* %64, align 16
  store i64 %70, i64* %63, align 8
  store i64 %70, i64* %65, align 16
  %253 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %14, i64 0, i32 2
  %254 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %253, align 8
  %255 = bitcast %"class.sh::TIntermTyped"* %254 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %256 = load %"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"** %4, align 8
  %257 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %255, align 8
  %258 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %257, i64 23
  %259 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %258, align 8
  %260 = tail call %"class.sh::TIntermTyped"* %259(%"class.sh::TIntermTyped"* %254) #8
  %261 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %262 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %261, i64 240) #8
  %263 = bitcast i8* %262 to %"class.sh::TIntermBinary"*
  %264 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %256, i64 0, i32 2
  %265 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %264, align 8
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %263, i8 zeroext -118, %"class.sh::TIntermTyped"* %265, %"class.sh::TIntermTyped"* %260) #8
  %266 = ptrtoint i8* %262 to i64
  %267 = ptrtoint i8* %69 to i64
  %268 = bitcast %"class.sh::TIntermNode"*** %60 to i64*
  %269 = bitcast %"class.sh::TVector"* %6 to i64*
  %270 = sub i64 %267, %252
  %271 = ashr exact i64 %270, 3
  %272 = add nsw i64 %271, 1
  %273 = icmp ugt i64 %272, 2305843009213693951
  br i1 %273, label %274, label %276

274:                                              ; preds = %250
  %275 = bitcast %"class.sh::TVector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %275) #9
  unreachable

276:                                              ; preds = %250
  %277 = ptrtoint i8* %69 to i64
  %278 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  %279 = sub i64 %277, %252
  %280 = ashr exact i64 %279, 3
  %281 = icmp ult i64 %280, 1152921504606846975
  br i1 %281, label %282, label %287

282:                                              ; preds = %276
  %283 = ashr exact i64 %279, 2
  %284 = icmp ult i64 %283, %272
  %285 = select i1 %284, i64 %272, i64 %283
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %293, label %287

287:                                              ; preds = %282, %276
  %288 = phi i64 [ %285, %282 ], [ 2305843009213693951, %276 ]
  %289 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %290 = shl i64 %288, 3
  %291 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %289, i64 %290) #8
  %292 = bitcast i8* %291 to %"class.sh::TIntermNode"**
  br label %293

293:                                              ; preds = %287, %282
  %294 = phi i64 [ %288, %287 ], [ 0, %282 ]
  %295 = phi %"class.sh::TIntermNode"** [ %292, %287 ], [ null, %282 ]
  %296 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %295, i64 %271
  %297 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %295, i64 %294
  %298 = ptrtoint %"class.sh::TIntermNode"** %297 to i64
  %299 = bitcast %"class.sh::TIntermNode"** %296 to i64*
  store i64 %266, i64* %299, align 8
  %300 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 1
  %301 = ptrtoint %"class.sh::TIntermNode"** %300 to i64
  %302 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %59, align 16
  %303 = ptrtoint %"class.sh::TIntermNode"** %302 to i64
  %304 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %60, align 8
  %305 = icmp eq %"class.sh::TIntermNode"** %304, %302
  br i1 %305, label %475, label %306

306:                                              ; preds = %293
  %307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -1
  %308 = ptrtoint %"class.sh::TIntermNode"** %307 to i64
  %309 = sub i64 %308, %303
  %310 = lshr i64 %309, 3
  %311 = add nuw nsw i64 %310, 1
  %312 = icmp ult i64 %311, 4
  br i1 %312, label %405, label %313

313:                                              ; preds = %306
  %314 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -1
  %315 = ptrtoint %"class.sh::TIntermNode"** %314 to i64
  %316 = sub i64 %315, %303
  %317 = lshr i64 %316, 3
  %318 = xor i64 %317, -1
  %319 = add nsw i64 %271, %318
  %320 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %295, i64 %319
  %321 = xor i64 %317, -1
  %322 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 %321
  %323 = icmp ult %"class.sh::TIntermNode"** %320, %304
  %324 = icmp ult %"class.sh::TIntermNode"** %322, %296
  %325 = and i1 %323, %324
  br i1 %325, label %405, label %326

326:                                              ; preds = %313
  %327 = and i64 %311, 4611686018427387900
  %328 = sub nsw i64 0, %327
  %329 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 %328
  %330 = sub nsw i64 0, %327
  %331 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 %330
  %332 = add nsw i64 %327, -4
  %333 = lshr exact i64 %332, 2
  %334 = add nuw nsw i64 %333, 1
  %335 = and i64 %334, 1
  %336 = icmp eq i64 %332, 0
  br i1 %336, label %383, label %337

337:                                              ; preds = %326
  %338 = sub nuw nsw i64 %334, %335
  %339 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 -1
  %340 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -1
  %341 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 -1
  %342 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -1
  br label %343

343:                                              ; preds = %343, %337
  %344 = phi i64 [ 0, %337 ], [ %378, %343 ]
  %345 = phi i64 [ %338, %337 ], [ %379, %343 ]
  %346 = sub i64 0, %344
  %347 = sub i64 0, %344
  %348 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 %346
  %349 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 %347
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %349, i64 -1
  %351 = bitcast %"class.sh::TIntermNode"** %350 to <2 x i64>*
  %352 = load <2 x i64>, <2 x i64>* %351, align 8, !alias.scope !13
  %353 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %349, i64 -2
  %354 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %353, i64 -1
  %355 = bitcast %"class.sh::TIntermNode"** %354 to <2 x i64>*
  %356 = load <2 x i64>, <2 x i64>* %355, align 8, !alias.scope !13
  %357 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -1
  %358 = bitcast %"class.sh::TIntermNode"** %357 to <2 x i64>*
  store <2 x i64> %352, <2 x i64>* %358, align 8, !alias.scope !16, !noalias !13
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -2
  %360 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %359, i64 -1
  %361 = bitcast %"class.sh::TIntermNode"** %360 to <2 x i64>*
  store <2 x i64> %356, <2 x i64>* %361, align 8, !alias.scope !16, !noalias !13
  %362 = sub nuw nsw i64 -4, %344
  %363 = sub nuw nsw i64 -4, %344
  %364 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %341, i64 %362
  %365 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %342, i64 %363
  %366 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -1
  %367 = bitcast %"class.sh::TIntermNode"** %366 to <2 x i64>*
  %368 = load <2 x i64>, <2 x i64>* %367, align 8, !alias.scope !13
  %369 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -2
  %370 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %369, i64 -1
  %371 = bitcast %"class.sh::TIntermNode"** %370 to <2 x i64>*
  %372 = load <2 x i64>, <2 x i64>* %371, align 8, !alias.scope !13
  %373 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -1
  %374 = bitcast %"class.sh::TIntermNode"** %373 to <2 x i64>*
  store <2 x i64> %368, <2 x i64>* %374, align 8, !alias.scope !16, !noalias !13
  %375 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -2
  %376 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -1
  %377 = bitcast %"class.sh::TIntermNode"** %376 to <2 x i64>*
  store <2 x i64> %372, <2 x i64>* %377, align 8, !alias.scope !16, !noalias !13
  %378 = add i64 %344, 8
  %379 = add i64 %345, -2
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %381, label %343, !llvm.loop !18

381:                                              ; preds = %343
  %382 = sub nuw nsw i64 -8, %344
  br label %383

383:                                              ; preds = %381, %326
  %384 = phi i64 [ 0, %326 ], [ %382, %381 ]
  %385 = icmp eq i64 %335, 0
  br i1 %385, label %403, label %386

386:                                              ; preds = %383
  %387 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 -1
  %388 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %304, i64 -1
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %387, i64 %384
  %390 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 %384
  %391 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %390, i64 -1
  %392 = bitcast %"class.sh::TIntermNode"** %391 to <2 x i64>*
  %393 = load <2 x i64>, <2 x i64>* %392, align 8, !alias.scope !13
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %390, i64 -2
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %394, i64 -1
  %396 = bitcast %"class.sh::TIntermNode"** %395 to <2 x i64>*
  %397 = load <2 x i64>, <2 x i64>* %396, align 8, !alias.scope !13
  %398 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %389, i64 -1
  %399 = bitcast %"class.sh::TIntermNode"** %398 to <2 x i64>*
  store <2 x i64> %393, <2 x i64>* %399, align 8, !alias.scope !16, !noalias !13
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %389, i64 -2
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -1
  %402 = bitcast %"class.sh::TIntermNode"** %401 to <2 x i64>*
  store <2 x i64> %397, <2 x i64>* %402, align 8, !alias.scope !16, !noalias !13
  br label %403

403:                                              ; preds = %383, %386
  %404 = icmp eq i64 %311, %327
  br i1 %404, label %475, label %405

405:                                              ; preds = %403, %313, %306
  %406 = phi %"class.sh::TIntermNode"** [ %296, %313 ], [ %296, %306 ], [ %329, %403 ]
  %407 = phi %"class.sh::TIntermNode"** [ %304, %313 ], [ %304, %306 ], [ %331, %403 ]
  %408 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %407, i64 -1
  %409 = ptrtoint %"class.sh::TIntermNode"** %408 to i64
  %410 = sub i64 %409, %303
  %411 = lshr i64 %410, 3
  %412 = add nuw nsw i64 %411, 1
  %413 = and i64 %412, 7
  %414 = icmp eq i64 %413, 0
  br i1 %414, label %426, label %415

415:                                              ; preds = %405, %415
  %416 = phi %"class.sh::TIntermNode"** [ %419, %415 ], [ %406, %405 ]
  %417 = phi %"class.sh::TIntermNode"** [ %420, %415 ], [ %407, %405 ]
  %418 = phi i64 [ %424, %415 ], [ %413, %405 ]
  %419 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %416, i64 -1
  %420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 -1
  %421 = bitcast %"class.sh::TIntermNode"** %420 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = bitcast %"class.sh::TIntermNode"** %419 to i64*
  store i64 %422, i64* %423, align 8
  %424 = add i64 %418, -1
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %426, label %415, !llvm.loop !19

426:                                              ; preds = %415, %405
  %427 = phi %"class.sh::TIntermNode"** [ undef, %405 ], [ %419, %415 ]
  %428 = phi %"class.sh::TIntermNode"** [ %406, %405 ], [ %419, %415 ]
  %429 = phi %"class.sh::TIntermNode"** [ %407, %405 ], [ %420, %415 ]
  %430 = icmp ult i64 %410, 56
  br i1 %430, label %475, label %431

431:                                              ; preds = %426, %431
  %432 = phi %"class.sh::TIntermNode"** [ %469, %431 ], [ %428, %426 ]
  %433 = phi %"class.sh::TIntermNode"** [ %470, %431 ], [ %429, %426 ]
  %434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %432, i64 -1
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -1
  %436 = bitcast %"class.sh::TIntermNode"** %435 to i64*
  %437 = load i64, i64* %436, align 8
  %438 = bitcast %"class.sh::TIntermNode"** %434 to i64*
  store i64 %437, i64* %438, align 8
  %439 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %432, i64 -2
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -2
  %441 = bitcast %"class.sh::TIntermNode"** %440 to i64*
  %442 = load i64, i64* %441, align 8
  %443 = bitcast %"class.sh::TIntermNode"** %439 to i64*
  store i64 %442, i64* %443, align 8
  %444 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %432, i64 -3
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -3
  %446 = bitcast %"class.sh::TIntermNode"** %445 to i64*
  %447 = load i64, i64* %446, align 8
  %448 = bitcast %"class.sh::TIntermNode"** %444 to i64*
  store i64 %447, i64* %448, align 8
  %449 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %432, i64 -4
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -4
  %451 = bitcast %"class.sh::TIntermNode"** %450 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = bitcast %"class.sh::TIntermNode"** %449 to i64*
  store i64 %452, i64* %453, align 8
  %454 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %432, i64 -5
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -5
  %456 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  %457 = load i64, i64* %456, align 8
  %458 = bitcast %"class.sh::TIntermNode"** %454 to i64*
  store i64 %457, i64* %458, align 8
  %459 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %432, i64 -6
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -6
  %461 = bitcast %"class.sh::TIntermNode"** %460 to i64*
  %462 = load i64, i64* %461, align 8
  %463 = bitcast %"class.sh::TIntermNode"** %459 to i64*
  store i64 %462, i64* %463, align 8
  %464 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %432, i64 -7
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -7
  %466 = bitcast %"class.sh::TIntermNode"** %465 to i64*
  %467 = load i64, i64* %466, align 8
  %468 = bitcast %"class.sh::TIntermNode"** %464 to i64*
  store i64 %467, i64* %468, align 8
  %469 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %432, i64 -8
  %470 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -8
  %471 = bitcast %"class.sh::TIntermNode"** %470 to i64*
  %472 = load i64, i64* %471, align 8
  %473 = bitcast %"class.sh::TIntermNode"** %469 to i64*
  store i64 %472, i64* %473, align 8
  %474 = icmp eq %"class.sh::TIntermNode"** %470, %302
  br i1 %474, label %475, label %431, !llvm.loop !20

475:                                              ; preds = %426, %431, %403, %293
  %476 = phi %"class.sh::TIntermNode"** [ %296, %293 ], [ %329, %403 ], [ %427, %426 ], [ %469, %431 ]
  %477 = ptrtoint %"class.sh::TIntermNode"** %476 to i64
  store i64 %477, i64* %269, align 16
  store i64 %301, i64* %268, align 8
  store i64 %298, i64* %278, align 16
  %478 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %479 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %478, align 8
  %480 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %481 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %480, align 8
  %482 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %479, %481
  br i1 %482, label %483, label %505

483:                                              ; preds = %475
  %484 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %5, align 8
  %485 = icmp eq %"class.sh::TIntermBlock"* %484, null
  %486 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %484, i64 0, i32 1
  %487 = select i1 %485, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %486
  %488 = bitcast %"class.sh::TIntermBinary"** %4 to i64*
  %489 = load i64, i64* %488, align 8
  %490 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %479, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %487, %"class.sh::TIntermAggregateBase"** %490, align 8
  %491 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %479, i64 0, i32 1
  %492 = bitcast %"class.sh::TIntermNode"** %491 to i64*
  store i64 %489, i64* %492, align 8
  %493 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %479, i64 0, i32 2
  %494 = bitcast %"class.sh::TVector"* %6 to <2 x i64>*
  %495 = load <2 x i64>, <2 x i64>* %494, align 16
  %496 = bitcast %"class.sh::TVector"* %493 to <2 x i64>*
  store <2 x i64> %495, <2 x i64>* %496, align 8
  %497 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  %498 = load i64, i64* %497, align 16
  %499 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %479, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %500 = bitcast %"class.sh::TIntermNode"*** %499 to i64*
  store i64 %498, i64* %500, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 0, i64 24, i1 false) #8
  %501 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %479, i64 1
  %502 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %501 to i64
  %503 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %478 to i64*
  store i64 %502, i64* %503, align 8
  %504 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %0, i64 0, i32 1
  store i8 1, i8* %504, align 8
  br label %513

505:                                              ; preds = %475
  %506 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %0, i64 0, i32 0, i32 7
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_12TIntermBlockERPNS1_13TIntermBinaryENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.1"* %506, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %5, %"class.sh::TIntermBinary"** nonnull dereferenceable(8) %4, %"class.sh::TVector"* nonnull dereferenceable(24) %6) #8
  %507 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %59, align 16
  %508 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser", %"class.sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser"* %0, i64 0, i32 1
  store i8 1, i8* %508, align 8
  %509 = icmp eq %"class.sh::TIntermNode"** %507, null
  br i1 %509, label %513, label %510

510:                                              ; preds = %505
  %511 = ptrtoint %"class.sh::TIntermNode"** %507 to i64
  %512 = bitcast %"class.sh::TIntermNode"*** %60 to i64*
  store i64 %511, i64* %512, align 8
  br label %513

513:                                              ; preds = %483, %505, %510
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %58) #8
  br label %514

514:                                              ; preds = %40, %42, %54, %32, %513
  %515 = phi i1 [ false, %513 ], [ true, %32 ], [ true, %54 ], [ true, %42 ], [ true, %40 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #8
  ret i1 %515
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare zeroext i1 @_ZNK2sh15TIntermOperator12isAssignmentEv(%"class.sh::TIntermOperator"*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_12TIntermBlockERPNS1_13TIntermBinaryENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.1"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermBinary"** dereferenceable(8), %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #4 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #9
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #10
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermBinary"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #8
  %50 = bitcast %"class.sh::TVector"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #8
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #8
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #8
  %82 = bitcast %"class.sh::TVector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #8
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #10
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !9}
