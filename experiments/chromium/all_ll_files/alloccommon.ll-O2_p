; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/common/alloccommon.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/common/alloccommon.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%union.int_mv = type { i32 }
%union.b_mode_info = type { i32 }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.mv_context = type { [19 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }

@switch.table.vp8_setup_version = private unnamed_addr constant [4 x i32] [i32 0, i32 0, i32 1, i32 1], align 4
@switch.table.vp8_setup_version.1 = private unnamed_addr constant [4 x i32] [i32 0, i32 1, i32 0, i32 1], align 4
@switch.table.vp8_setup_version.2 = private unnamed_addr constant [4 x i32] [i32 0, i32 1, i32 1, i32 1], align 4
@switch.table.vp8_setup_version.3 = private unnamed_addr constant [4 x i32] [i32 0, i32 0, i32 0, i32 1], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_de_alloc_frame_buffers(%struct.VP8Common*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 0
  %3 = tail call i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config* %2) #4
  %4 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 1
  %5 = tail call i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config* %4) #4
  %6 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 2
  %7 = tail call i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config* %6) #4
  %8 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 3
  %9 = tail call i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config* %8) #4
  %10 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 17
  %11 = tail call i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config* %10) #4
  %12 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18
  %13 = tail call i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config* %12) #4
  %14 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 20
  %15 = load i32, i32* %14, align 16
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 19
  %19 = tail call i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config* %18) #4
  br label %20

20:                                               ; preds = %1, %17
  %21 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 21
  %22 = load i8*, i8** %21, align 8
  tail call void @vpx_free(i8* %22) #4
  store i8* null, i8** %21, align 8
  %23 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 5
  %24 = load i8*, i8** %23, align 8
  tail call void @vpx_free(i8* %24) #4
  store i8* null, i8** %23, align 8
  %25 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 56
  %26 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %25 to i8**
  %27 = load i8*, i8** %26, align 8
  tail call void @vpx_free(i8* %27) #4
  %28 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 40
  %29 = bitcast %struct.modeinfo** %28 to i8**
  %30 = load i8*, i8** %29, align 8
  tail call void @vpx_free(i8* %30) #4
  store %struct.ENTROPY_CONTEXT_PLANES* null, %struct.ENTROPY_CONTEXT_PLANES** %25, align 8
  store %struct.modeinfo* null, %struct.modeinfo** %28, align 8
  ret void
}

declare i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config*) local_unnamed_addr #1

declare void @vpx_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_alloc_frame_buffers(%struct.VP8Common*, i32, i32) local_unnamed_addr #0 {
  tail call void @vp8_de_alloc_frame_buffers(%struct.VP8Common* %0)
  %4 = and i32 %1, 15
  %5 = icmp eq i32 %4, 0
  %6 = sub nuw nsw i32 16, %4
  %7 = select i1 %5, i32 0, i32 %6
  %8 = add nsw i32 %7, %1
  %9 = and i32 %2, 15
  %10 = icmp eq i32 %9, 0
  %11 = sub nuw nsw i32 16, %9
  %12 = select i1 %10, i32 0, i32 %11
  %13 = add nsw i32 %12, %2
  %14 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 12, i64 0
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 0
  %16 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 0, i32 29
  store i32 0, i32* %16, align 8
  %17 = tail call i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config* %15, i32 %8, i32 %13, i32 32) #4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %75, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 12, i64 1
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 1
  %22 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 1, i32 29
  store i32 0, i32* %22, align 8
  %23 = tail call i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config* %21, i32 %8, i32 %13, i32 32) #4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %75, label %78

25:                                               ; preds = %90
  %26 = ashr i32 %13, 4
  %27 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 27
  store i32 %26, i32* %27, align 4
  %28 = ashr i32 %8, 4
  %29 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 28
  store i32 %28, i32* %29, align 8
  %30 = mul nsw i32 %26, %28
  %31 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 26
  store i32 %30, i32* %31, align 16
  %32 = add nsw i32 %28, 1
  %33 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 29
  store i32 %32, i32* %33, align 4
  %34 = add nsw i32 %26, 1
  %35 = mul nsw i32 %34, %32
  %36 = sext i32 %35 to i64
  %37 = tail call i8* @vpx_calloc(i64 %36, i64 76) #4
  %38 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 40
  %39 = bitcast %struct.modeinfo** %38 to i8**
  store i8* %37, i8** %39, align 8
  %40 = icmp eq i8* %37, null
  br i1 %40, label %75, label %41

41:                                               ; preds = %25
  %42 = bitcast i8* %37 to %struct.modeinfo*
  %43 = load i32, i32* %33, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %42, i64 %44
  %46 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %45, i64 1
  %47 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 41
  store %struct.modeinfo* %46, %struct.modeinfo** %47, align 16
  %48 = load i32, i32* %29, align 8
  %49 = sext i32 %48 to i64
  %50 = mul nsw i64 %49, 9
  %51 = tail call i8* @vpx_calloc(i64 %50, i64 1) #4
  %52 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 56
  %53 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %52 to i8**
  store i8* %51, i8** %53, align 8
  %54 = icmp eq i8* %51, null
  br i1 %54, label %75, label %55

55:                                               ; preds = %41
  %56 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18
  %57 = tail call i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config* %56, i32 %8, i32 %13, i32 32) #4
  %58 = icmp slt i32 %57, 0
  br i1 %58, label %75, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 20
  store i32 0, i32* %60, align 16
  %61 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64
  %62 = bitcast %struct.postproc_state* %61 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %62, i8 0, i64 32, i1 false)
  %63 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 17
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 20
  %66 = load i64, i64* %65, align 16
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 -128, i64 %66, i1 false)
  %67 = load i32, i32* %29, align 8
  %68 = add nsw i32 %67, 1
  %69 = and i32 %68, -2
  %70 = mul nsw i32 %69, 24
  %71 = sext i32 %70 to i64
  %72 = tail call i8* @vpx_memalign(i64 16, i64 %71) #4
  %73 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 21
  store i8* %72, i8** %73, align 8
  %74 = icmp eq i8* %72, null
  br i1 %74, label %75, label %76

75:                                               ; preds = %3, %19, %78, %84, %59, %41, %25, %55, %90
  tail call void @vp8_de_alloc_frame_buffers(%struct.VP8Common* %0)
  br label %76

76:                                               ; preds = %59, %75
  %77 = phi i32 [ 1, %75 ], [ 0, %59 ]
  ret i32 %77

78:                                               ; preds = %19
  %79 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 12, i64 2
  store i32 0, i32* %79, align 4
  %80 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 2
  %81 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 2, i32 29
  store i32 0, i32* %81, align 8
  %82 = tail call i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config* %80, i32 %8, i32 %13, i32 32) #4
  %83 = icmp slt i32 %82, 0
  br i1 %83, label %75, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 12, i64 3
  store i32 0, i32* %85, align 4
  %86 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 3
  %87 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 11, i64 3, i32 29
  store i32 0, i32* %87, align 8
  %88 = tail call i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config* %86, i32 %8, i32 %13, i32 32) #4
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %75, label %90

90:                                               ; preds = %84
  %91 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 13
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 2, i32 3>, <4 x i32>* %92, align 16
  %93 = bitcast i32* %14 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %93, align 16
  %94 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 17
  %95 = tail call i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config* %94, i32 %8, i32 16, i32 32) #4
  %96 = icmp slt i32 %95, 0
  br i1 %96, label %75, label %25
}

declare i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32) local_unnamed_addr #1

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_setup_version(%struct.VP8Common*) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 61
  %3 = load i32, i32* %2, align 16
  %4 = icmp ult i32 %3, 4
  br i1 %4, label %5, label %18

5:                                                ; preds = %1
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.vp8_setup_version, i64 0, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.vp8_setup_version.1, i64 0, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.vp8_setup_version.2, i64 0, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %3 to i64
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.vp8_setup_version.3, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  br label %18

18:                                               ; preds = %1, %5
  %19 = phi i32 [ %8, %5 ], [ 0, %1 ]
  %20 = phi i32 [ %11, %5 ], [ 0, %1 ]
  %21 = phi i32 [ %14, %5 ], [ 0, %1 ]
  %22 = phi i32 [ %17, %5 ], [ 0, %1 ]
  %23 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 31
  store i32 %19, i32* %23, align 4
  %24 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 43
  store i32 %20, i32* %24, align 16
  %25 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 32
  store i32 %21, i32* %25, align 8
  %26 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 33
  store i32 %22, i32* %26, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_create_common(%struct.VP8Common*) local_unnamed_addr #0 {
  tail call void @vp8_machine_specific_config(%struct.VP8Common* %0) #4
  tail call void @vp8_init_mbmode_probs(%struct.VP8Common* %0) #4
  %2 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 59, i32 0, i64 0
  tail call void @vp8_default_bmode_probs(i8* %2) #4
  %3 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 30
  %4 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 43
  store i32 0, i32* %4, align 16
  %5 = bitcast i32* %3 to <4 x i32>*
  store <4 x i32> <i32 1, i32 0, i32 0, i32 0>, <4 x i32>* %5, align 16
  %6 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 62
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 9
  store i32 0, i32* %7, align 16
  %8 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 55, i64 0
  %9 = bitcast i32* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 16, i1 false)
  %10 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 52
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 53
  store i32 0, i32* %11, align 4
  ret void
}

declare void @vp8_machine_specific_config(%struct.VP8Common*) local_unnamed_addr #1

declare void @vp8_init_mbmode_probs(%struct.VP8Common*) local_unnamed_addr #1

declare void @vp8_default_bmode_probs(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_remove_common(%struct.VP8Common*) local_unnamed_addr #0 {
  tail call void @vp8_de_alloc_frame_buffers(%struct.VP8Common* %0)
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
