; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/string_statics.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/string_statics.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZN3WTF18g_null_atomStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF11g_null_atomE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF18g_null_atomStorageE to %"class.WTF::AtomicString"*), align 8
@_ZN3WTF19g_empty_atomStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF12g_empty_atomE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF19g_empty_atomStorageE to %"class.WTF::AtomicString"*), align 8
@_ZN3WTF18g_star_atomStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF11g_star_atomE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF18g_star_atomStorageE to %"class.WTF::AtomicString"*), align 8
@_ZN3WTF17g_xml_atomStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF10g_xml_atomE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF17g_xml_atomStorageE to %"class.WTF::AtomicString"*), align 8
@_ZN3WTF19g_xmlns_atomStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF12g_xmlns_atomE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF19g_xmlns_atomStorageE to %"class.WTF::AtomicString"*), align 8
@_ZN3WTF19g_xlink_atomStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF12g_xlink_atomE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF19g_xlink_atomStorageE to %"class.WTF::AtomicString"*), align 8
@_ZN3WTF18g_http_atomStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF11g_http_atomE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF18g_http_atomStorageE to %"class.WTF::AtomicString"*), align 8
@_ZN3WTF19g_https_atomStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF12g_https_atomE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF19g_https_atomStorageE to %"class.WTF::AtomicString"*), align 8
@_ZN3WTF25g_xmlns_with_colonStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF18g_xmlns_with_colonE = hidden local_unnamed_addr constant %"class.WTF::String"* bitcast ([1 x i8*]* @_ZN3WTF25g_xmlns_with_colonStorageE to %"class.WTF::String"*), align 8
@_ZN3WTF21g_empty_stringStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF14g_empty_stringE = hidden local_unnamed_addr constant %"class.WTF::String"* bitcast ([1 x i8*]* @_ZN3WTF21g_empty_stringStorageE to %"class.WTF::String"*), align 8
@_ZN3WTF27g_empty_string16_bitStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN3WTF20g_empty_string16_bitE = hidden local_unnamed_addr constant %"class.WTF::String"* bitcast ([1 x i8*]* @_ZN3WTF27g_empty_string16_bitStorageE to %"class.WTF::String"*), align 8
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN3WTF10StringImpl12empty16_bit_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"xml\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"xmlns\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"xlink\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"xmlns:\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"http\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"https\00", align 1

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define hidden i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = and i32 %3, 1
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %5, label %88, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.WTF::StringImpl"* %6 to i8*
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = lshr i32 %10, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %77, label %15

15:                                               ; preds = %7
  %16 = add nsw i32 %13, -1
  %17 = zext i32 %16 to i64
  %18 = and i32 %13, 1
  %19 = icmp eq i32 %13, 1
  br i1 %19, label %54, label %20

20:                                               ; preds = %15
  %21 = sub nsw i32 %13, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i32 [ -1640531527, %20 ], [ %50, %22 ]
  %24 = phi i8* [ %8, %20 ], [ %51, %22 ]
  %25 = phi i32 [ %21, %20 ], [ %52, %22 ]
  %26 = load i8, i8* %24, align 1
  %27 = getelementptr inbounds i8, i8* %24, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %26 to i32
  %30 = add i32 %23, %29
  %31 = shl i32 %30, 16
  %32 = zext i8 %28 to i32
  %33 = shl nuw nsw i32 %32, 11
  %34 = xor i32 %33, %30
  %35 = xor i32 %34, %31
  %36 = lshr i32 %35, 11
  %37 = add i32 %36, %35
  %38 = getelementptr inbounds i8, i8* %24, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds i8, i8* %24, i64 3
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %39 to i32
  %43 = add i32 %37, %42
  %44 = shl i32 %43, 16
  %45 = zext i8 %41 to i32
  %46 = shl nuw nsw i32 %45, 11
  %47 = xor i32 %46, %43
  %48 = xor i32 %47, %44
  %49 = lshr i32 %48, 11
  %50 = add i32 %49, %48
  %51 = getelementptr inbounds i8, i8* %24, i64 4
  %52 = add i32 %25, -2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %22

54:                                               ; preds = %22, %15
  %55 = phi i32 [ undef, %15 ], [ %50, %22 ]
  %56 = phi i32 [ -1640531527, %15 ], [ %50, %22 ]
  %57 = phi i8* [ %8, %15 ], [ %51, %22 ]
  %58 = icmp eq i32 %18, 0
  br i1 %58, label %72, label %59

59:                                               ; preds = %54
  %60 = load i8, i8* %57, align 1
  %61 = getelementptr inbounds i8, i8* %57, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %60 to i32
  %64 = add i32 %56, %63
  %65 = shl i32 %64, 16
  %66 = zext i8 %62 to i32
  %67 = shl nuw nsw i32 %66, 11
  %68 = xor i32 %67, %64
  %69 = xor i32 %68, %65
  %70 = lshr i32 %69, 11
  %71 = add i32 %70, %69
  br label %72

72:                                               ; preds = %54, %59
  %73 = phi i32 [ %55, %54 ], [ %71, %59 ]
  %74 = shl nuw nsw i64 %17, 1
  %75 = add nuw nsw i64 %74, 2
  %76 = getelementptr i8, i8* %8, i64 %75
  br label %77

77:                                               ; preds = %72, %7
  %78 = phi i32 [ -1640531527, %7 ], [ %73, %72 ]
  %79 = phi i8* [ %8, %7 ], [ %76, %72 ]
  br i1 %12, label %169, label %80

80:                                               ; preds = %77
  %81 = load i8, i8* %79, align 1
  %82 = zext i8 %81 to i32
  %83 = add i32 %78, %82
  %84 = shl i32 %83, 11
  %85 = xor i32 %84, %83
  %86 = lshr i32 %85, 17
  %87 = add i32 %86, %85
  br label %169

88:                                               ; preds = %1
  %89 = bitcast %"class.WTF::StringImpl"* %6 to i16*
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %92, 0
  %94 = lshr i32 %91, 1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %158, label %96

96:                                               ; preds = %88
  %97 = add nsw i32 %94, -1
  %98 = zext i32 %97 to i64
  %99 = and i32 %94, 1
  %100 = icmp eq i32 %94, 1
  br i1 %100, label %135, label %101

101:                                              ; preds = %96
  %102 = sub nsw i32 %94, %99
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i32 [ -1640531527, %101 ], [ %131, %103 ]
  %105 = phi i16* [ %89, %101 ], [ %132, %103 ]
  %106 = phi i32 [ %102, %101 ], [ %133, %103 ]
  %107 = load i16, i16* %105, align 2
  %108 = getelementptr inbounds i16, i16* %105, i64 1
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %107 to i32
  %111 = add i32 %104, %110
  %112 = shl i32 %111, 16
  %113 = zext i16 %109 to i32
  %114 = shl nuw nsw i32 %113, 11
  %115 = xor i32 %114, %111
  %116 = xor i32 %115, %112
  %117 = lshr i32 %116, 11
  %118 = add i32 %117, %116
  %119 = getelementptr inbounds i16, i16* %105, i64 2
  %120 = load i16, i16* %119, align 2
  %121 = getelementptr inbounds i16, i16* %105, i64 3
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %120 to i32
  %124 = add i32 %118, %123
  %125 = shl i32 %124, 16
  %126 = zext i16 %122 to i32
  %127 = shl nuw nsw i32 %126, 11
  %128 = xor i32 %127, %124
  %129 = xor i32 %128, %125
  %130 = lshr i32 %129, 11
  %131 = add i32 %130, %129
  %132 = getelementptr inbounds i16, i16* %105, i64 4
  %133 = add i32 %106, -2
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %103

135:                                              ; preds = %103, %96
  %136 = phi i32 [ undef, %96 ], [ %131, %103 ]
  %137 = phi i32 [ -1640531527, %96 ], [ %131, %103 ]
  %138 = phi i16* [ %89, %96 ], [ %132, %103 ]
  %139 = icmp eq i32 %99, 0
  br i1 %139, label %153, label %140

140:                                              ; preds = %135
  %141 = load i16, i16* %138, align 2
  %142 = getelementptr inbounds i16, i16* %138, i64 1
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %141 to i32
  %145 = add i32 %137, %144
  %146 = shl i32 %145, 16
  %147 = zext i16 %143 to i32
  %148 = shl nuw nsw i32 %147, 11
  %149 = xor i32 %148, %145
  %150 = xor i32 %149, %146
  %151 = lshr i32 %150, 11
  %152 = add i32 %151, %150
  br label %153

153:                                              ; preds = %135, %140
  %154 = phi i32 [ %136, %135 ], [ %152, %140 ]
  %155 = shl nuw nsw i64 %98, 1
  %156 = add nuw nsw i64 %155, 2
  %157 = getelementptr i16, i16* %89, i64 %156
  br label %158

158:                                              ; preds = %153, %88
  %159 = phi i32 [ -1640531527, %88 ], [ %154, %153 ]
  %160 = phi i16* [ %89, %88 ], [ %157, %153 ]
  br i1 %93, label %169, label %161

161:                                              ; preds = %158
  %162 = load i16, i16* %160, align 2
  %163 = zext i16 %162 to i32
  %164 = add i32 %159, %163
  %165 = shl i32 %164, 11
  %166 = xor i32 %165, %164
  %167 = lshr i32 %166, 17
  %168 = add i32 %167, %166
  br label %169

169:                                              ; preds = %161, %158, %80, %77
  %170 = phi i32 [ %87, %80 ], [ %78, %77 ], [ %168, %161 ], [ %159, %158 ]
  %171 = shl i32 %170, 3
  %172 = xor i32 %171, %170
  %173 = lshr i32 %172, 5
  %174 = add i32 %173, %172
  %175 = shl i32 %174, 2
  %176 = xor i32 %175, %174
  %177 = lshr i32 %176, 15
  %178 = add i32 %177, %176
  %179 = shl i32 %178, 10
  %180 = xor i32 %179, %178
  %181 = and i32 %180, 16777215
  %182 = icmp eq i32 %181, 0
  %183 = shl i32 %180, 8
  %184 = select i1 %182, i32 -2147483648, i32 %183
  %185 = atomicrmw or i32* %2, i32 %184 monotonic
  %186 = load atomic i32, i32* %2 monotonic, align 4
  %187 = lshr i32 %186, 8
  ret i32 %187
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF12AtomicString4InitEv() local_unnamed_addr #1 align 2 {
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** bitcast ([1 x i8*]* @_ZN3WTF18g_null_atomStorageE to %"class.WTF::StringImpl"**), align 8
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF19g_empty_atomStorageE to %"class.WTF::AtomicString"*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF13StringStatics4InitEv() local_unnamed_addr #1 align 2 {
  tail call void @_ZN3WTF10StringImpl11InitStaticsEv() #5
  %1 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** bitcast ([1 x i8*]* @_ZN3WTF21g_empty_stringStorageE to %"class.WTF::StringImpl"**), align 8
  %2 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %2, label %20, label %3

3:                                                ; preds = %0
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 2
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %20

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i33
  %12 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %11, i33 1) #5
  %13 = extractvalue { i33, i1 } %12, 1
  %14 = extractvalue { i33, i1 } %12, 0
  %15 = icmp slt i33 %14, 0
  %16 = or i1 %13, %15
  br i1 %16, label %17, label %18, !prof !2

17:                                               ; preds = %8
  tail call void @llvm.trap() #5
  unreachable

18:                                               ; preds = %8
  %19 = trunc i33 %14 to i32
  store i32 %19, i32* %9, align 4
  br label %20

20:                                               ; preds = %0, %3, %18
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl12empty16_bit_E, align 8
  store %"class.WTF::StringImpl"* %21, %"class.WTF::StringImpl"** bitcast ([1 x i8*]* @_ZN3WTF27g_empty_string16_bitStorageE to %"class.WTF::StringImpl"**), align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %22, label %40, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %40

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i33
  %32 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %31, i33 1) #5
  %33 = extractvalue { i33, i1 } %32, 1
  %34 = extractvalue { i33, i1 } %32, 0
  %35 = icmp slt i33 %34, 0
  %36 = or i1 %33, %35
  br i1 %36, label %37, label %38, !prof !2

37:                                               ; preds = %28
  tail call void @llvm.trap() #5
  unreachable

38:                                               ; preds = %28
  %39 = trunc i33 %34 to i32
  store i32 %39, i32* %29, align 4
  br label %40

40:                                               ; preds = %20, %23, %38
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN3WTF18g_star_atomStorageE to %"class.WTF::AtomicString"*), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i64 1) #5
  %41 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 3, i32 10322861) #5
  %42 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %42, label %66, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 acquire, align 4
  %46 = and i32 %45, 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %43
  %49 = load atomic i32, i32* %44 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %67

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i33
  %56 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %55, i33 1) #5
  %57 = extractvalue { i33, i1 } %56, 1
  %58 = extractvalue { i33, i1 } %56, 0
  %59 = icmp slt i33 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %62, !prof !2

61:                                               ; preds = %52
  tail call void @llvm.trap() #5
  unreachable

62:                                               ; preds = %52
  %63 = trunc i33 %58 to i32
  store i32 %63, i32* %53, align 4
  br label %67

64:                                               ; preds = %43
  %65 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %41) #5
  br label %67

66:                                               ; preds = %40
  store i64 0, i64* bitcast ([1 x i8*]* @_ZN3WTF17g_xml_atomStorageE to i64*), align 8
  br label %81

67:                                               ; preds = %48, %62, %64
  %68 = phi %"class.WTF::StringImpl"* [ %41, %62 ], [ %41, %48 ], [ %65, %64 ]
  %69 = ptrtoint %"class.WTF::StringImpl"* %68 to i64
  store i64 %69, i64* bitcast ([1 x i8*]* @_ZN3WTF17g_xml_atomStorageE to i64*), align 8
  %70 = load atomic i32, i32* %44 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %67
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %67
  %78 = phi i32 [ %76, %75 ], [ %74, %67 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %41) #5
  br label %81

81:                                               ; preds = %66, %77, %80
  %82 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32 5, i32 171597) #5
  %83 = icmp eq %"class.WTF::StringImpl"* %82, null
  br i1 %83, label %107, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %82, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = load atomic i32, i32* %85 acquire, align 4
  %87 = and i32 %86, 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %105, label %89

89:                                               ; preds = %84
  %90 = load atomic i32, i32* %85 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %108

93:                                               ; preds = %89
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %82, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = zext i32 %95 to i33
  %97 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %96, i33 1) #5
  %98 = extractvalue { i33, i1 } %97, 1
  %99 = extractvalue { i33, i1 } %97, 0
  %100 = icmp slt i33 %99, 0
  %101 = or i1 %98, %100
  br i1 %101, label %102, label %103, !prof !2

102:                                              ; preds = %93
  tail call void @llvm.trap() #5
  unreachable

103:                                              ; preds = %93
  %104 = trunc i33 %99 to i32
  store i32 %104, i32* %94, align 4
  br label %108

105:                                              ; preds = %84
  %106 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %82) #5
  br label %108

107:                                              ; preds = %81
  store i64 0, i64* bitcast ([1 x i8*]* @_ZN3WTF19g_xmlns_atomStorageE to i64*), align 8
  br label %122

108:                                              ; preds = %89, %103, %105
  %109 = phi %"class.WTF::StringImpl"* [ %82, %103 ], [ %82, %89 ], [ %106, %105 ]
  %110 = ptrtoint %"class.WTF::StringImpl"* %109 to i64
  store i64 %110, i64* bitcast ([1 x i8*]* @_ZN3WTF19g_xmlns_atomStorageE to i64*), align 8
  %111 = load atomic i32, i32* %85 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %82, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %108
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %108
  %119 = phi i32 [ %117, %116 ], [ %115, %108 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %82) #5
  br label %122

122:                                              ; preds = %107, %118, %121
  %123 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i32 5, i32 10564364) #5
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %148, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 acquire, align 4
  %128 = and i32 %127, 4
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %146, label %130

130:                                              ; preds = %125
  %131 = load atomic i32, i32* %126 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %149

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i33
  %138 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %137, i33 1) #5
  %139 = extractvalue { i33, i1 } %138, 1
  %140 = extractvalue { i33, i1 } %138, 0
  %141 = icmp slt i33 %140, 0
  %142 = or i1 %139, %141
  br i1 %142, label %143, label %144, !prof !2

143:                                              ; preds = %134
  tail call void @llvm.trap() #5
  unreachable

144:                                              ; preds = %134
  %145 = trunc i33 %140 to i32
  store i32 %145, i32* %135, align 4
  br label %149

146:                                              ; preds = %125
  %147 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %123) #5
  br label %149

148:                                              ; preds = %122
  store i64 0, i64* bitcast ([1 x i8*]* @_ZN3WTF19g_xlink_atomStorageE to i64*), align 8
  br label %163

149:                                              ; preds = %130, %144, %146
  %150 = phi %"class.WTF::StringImpl"* [ %123, %144 ], [ %123, %130 ], [ %147, %146 ]
  %151 = ptrtoint %"class.WTF::StringImpl"* %150 to i64
  store i64 %151, i64* bitcast ([1 x i8*]* @_ZN3WTF19g_xlink_atomStorageE to i64*), align 8
  %152 = load atomic i32, i32* %126 monotonic, align 4
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %156 = load i32, i32* %155, align 4
  br i1 %154, label %157, label %159

157:                                              ; preds = %149
  %158 = add i32 %156, -1
  store i32 %158, i32* %155, align 4
  br label %159

159:                                              ; preds = %157, %149
  %160 = phi i32 [ %158, %157 ], [ %156, %149 ]
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %163

162:                                              ; preds = %159
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %123) #5
  br label %163

163:                                              ; preds = %148, %159, %162
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* bitcast ([1 x i8*]* @_ZN3WTF25g_xmlns_with_colonStorageE to %"class.WTF::String"*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i64 6) #5
  %164 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 4, i32 15068864) #5
  %165 = icmp eq %"class.WTF::StringImpl"* %164, null
  br i1 %165, label %189, label %166

166:                                              ; preds = %163
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %168 = load atomic i32, i32* %167 acquire, align 4
  %169 = and i32 %168, 4
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %187, label %171

171:                                              ; preds = %166
  %172 = load atomic i32, i32* %167 monotonic, align 4
  %173 = and i32 %172, 2
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %190

175:                                              ; preds = %171
  %176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 0
  %177 = load i32, i32* %176, align 4
  %178 = zext i32 %177 to i33
  %179 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %178, i33 1) #5
  %180 = extractvalue { i33, i1 } %179, 1
  %181 = extractvalue { i33, i1 } %179, 0
  %182 = icmp slt i33 %181, 0
  %183 = or i1 %180, %182
  br i1 %183, label %184, label %185, !prof !2

184:                                              ; preds = %175
  tail call void @llvm.trap() #5
  unreachable

185:                                              ; preds = %175
  %186 = trunc i33 %181 to i32
  store i32 %186, i32* %176, align 4
  br label %190

187:                                              ; preds = %166
  %188 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %164) #5
  br label %190

189:                                              ; preds = %163
  store i64 0, i64* bitcast ([1 x i8*]* @_ZN3WTF18g_http_atomStorageE to i64*), align 8
  br label %204

190:                                              ; preds = %171, %185, %187
  %191 = phi %"class.WTF::StringImpl"* [ %164, %185 ], [ %164, %171 ], [ %188, %187 ]
  %192 = ptrtoint %"class.WTF::StringImpl"* %191 to i64
  store i64 %192, i64* bitcast ([1 x i8*]* @_ZN3WTF18g_http_atomStorageE to i64*), align 8
  %193 = load atomic i32, i32* %167 monotonic, align 4
  %194 = and i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 0
  %197 = load i32, i32* %196, align 4
  br i1 %195, label %198, label %200

198:                                              ; preds = %190
  %199 = add i32 %197, -1
  store i32 %199, i32* %196, align 4
  br label %200

200:                                              ; preds = %198, %190
  %201 = phi i32 [ %199, %198 ], [ %197, %190 ]
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %204

203:                                              ; preds = %200
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %164) #5
  br label %204

204:                                              ; preds = %189, %200, %203
  %205 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i32 5, i32 12600269) #5
  %206 = icmp eq %"class.WTF::StringImpl"* %205, null
  br i1 %206, label %230, label %207

207:                                              ; preds = %204
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %205, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %209 = load atomic i32, i32* %208 acquire, align 4
  %210 = and i32 %209, 4
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %228, label %212

212:                                              ; preds = %207
  %213 = load atomic i32, i32* %208 monotonic, align 4
  %214 = and i32 %213, 2
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %216, label %231

216:                                              ; preds = %212
  %217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %205, i64 0, i32 0
  %218 = load i32, i32* %217, align 4
  %219 = zext i32 %218 to i33
  %220 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %219, i33 1) #5
  %221 = extractvalue { i33, i1 } %220, 1
  %222 = extractvalue { i33, i1 } %220, 0
  %223 = icmp slt i33 %222, 0
  %224 = or i1 %221, %223
  br i1 %224, label %225, label %226, !prof !2

225:                                              ; preds = %216
  tail call void @llvm.trap() #5
  unreachable

226:                                              ; preds = %216
  %227 = trunc i33 %222 to i32
  store i32 %227, i32* %217, align 4
  br label %231

228:                                              ; preds = %207
  %229 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %205) #5
  br label %231

230:                                              ; preds = %204
  store i64 0, i64* bitcast ([1 x i8*]* @_ZN3WTF19g_https_atomStorageE to i64*), align 8
  br label %245

231:                                              ; preds = %212, %226, %228
  %232 = phi %"class.WTF::StringImpl"* [ %205, %226 ], [ %205, %212 ], [ %229, %228 ]
  %233 = ptrtoint %"class.WTF::StringImpl"* %232 to i64
  store i64 %233, i64* bitcast ([1 x i8*]* @_ZN3WTF19g_https_atomStorageE to i64*), align 8
  %234 = load atomic i32, i32* %208 monotonic, align 4
  %235 = and i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %205, i64 0, i32 0
  %238 = load i32, i32* %237, align 4
  br i1 %236, label %239, label %241

239:                                              ; preds = %231
  %240 = add i32 %238, -1
  store i32 %240, i32* %237, align 4
  br label %241

241:                                              ; preds = %239, %231
  %242 = phi i32 [ %240, %239 ], [ %238, %231 ]
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %245

244:                                              ; preds = %241
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %205) #5
  br label %245

245:                                              ; preds = %230, %241, %244
  ret void
}

declare void @_ZN3WTF10StringImpl11InitStaticsEv() local_unnamed_addr #2

declare void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8*, i32, i32) local_unnamed_addr #2

attributes #0 = { nofree noinline norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
