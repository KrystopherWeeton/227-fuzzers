; ModuleID = '../../third_party/abseil-cpp/absl/strings/internal/escaping.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/internal/escaping.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_ZN4absl16strings_internal12kBase64CharsE = hidden local_unnamed_addr constant [65 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\00", align 16
@.str = private unnamed_addr constant [63 x i8] c"../../third_party/abseil-cpp/absl/strings/internal/escaping.cc\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"Logic problem? szsrc = %zu\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4absl16strings_internal33CalculateBase64EscapedLenInternalEmb(i64, i1 zeroext) local_unnamed_addr #0 {
  %3 = udiv i64 %0, 3
  %4 = shl i64 %3, 2
  %5 = urem i64 %0, 3
  switch i64 %5, label %10 [
    i64 0, label %14
    i64 1, label %6
  ]

6:                                                ; preds = %2
  %7 = or i64 %4, 2
  %8 = add i64 %7, 2
  %9 = select i1 %1, i64 %8, i64 %7
  br label %14

10:                                               ; preds = %2
  %11 = or i64 %4, 3
  %12 = zext i1 %1 to i64
  %13 = add i64 %11, %12
  ret i64 %13

14:                                               ; preds = %6, %2
  %15 = phi i64 [ %4, %2 ], [ %9, %6 ]
  ret i64 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4absl16strings_internal20Base64EscapeInternalEPKhmPcmPKcb(i8*, i64, i8*, i64, i8* nocapture readonly, i1 zeroext) local_unnamed_addr #1 {
  %7 = shl i64 %1, 2
  %8 = mul i64 %3, 3
  %9 = icmp ugt i64 %7, %8
  br i1 %9, label %147, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds i8, i8* %2, i64 %3
  %12 = getelementptr inbounds i8, i8* %0, i64 %1
  %13 = icmp ugt i64 %1, 2
  br i1 %13, label %14, label %48

14:                                               ; preds = %10
  %15 = getelementptr inbounds i8, i8* %12, i64 -3
  %16 = icmp ugt i8* %15, %0
  br i1 %16, label %17, label %48

17:                                               ; preds = %14, %17
  %18 = phi i8* [ %45, %17 ], [ %2, %14 ]
  %19 = phi i8* [ %46, %17 ], [ %0, %14 ]
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = tail call i32 @llvm.bswap.i32(i32 %21) #4
  %23 = lshr i32 %22, 8
  %24 = lshr i32 %22, 26
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %4, i64 %25
  %27 = load i8, i8* %26, align 1
  store i8 %27, i8* %18, align 1
  %28 = lshr i32 %22, 20
  %29 = and i32 %28, 63
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %4, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %22, 14
  %35 = and i32 %34, 63
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %4, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %18, i64 2
  store i8 %38, i8* %39, align 1
  %40 = and i32 %23, 63
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %4, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %18, i64 3
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %18, i64 4
  %46 = getelementptr inbounds i8, i8* %19, i64 3
  %47 = icmp ult i8* %46, %15
  br i1 %47, label %17, label %48

48:                                               ; preds = %17, %14, %10
  %49 = phi i8* [ %0, %10 ], [ %0, %14 ], [ %46, %17 ]
  %50 = phi i8* [ %2, %10 ], [ %2, %14 ], [ %45, %17 ]
  %51 = ptrtoint i8* %11 to i64
  %52 = ptrtoint i8* %50 to i64
  %53 = sub i64 %51, %52
  %54 = ptrtoint i8* %12 to i64
  %55 = ptrtoint i8* %49 to i64
  %56 = sub i64 %54, %55
  switch i64 %56, label %141 [
    i64 0, label %142
    i64 1, label %57
    i64 2, label %79
    i64 3, label %107
  ]

57:                                               ; preds = %48
  %58 = icmp ult i64 %53, 2
  br i1 %58, label %147, label %59

59:                                               ; preds = %57
  %60 = load i8, i8* %49, align 1
  %61 = zext i8 %60 to i32
  %62 = lshr i32 %61, 2
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %4, i64 %63
  %65 = load i8, i8* %64, align 1
  store i8 %65, i8* %50, align 1
  %66 = shl nuw nsw i32 %61, 4
  %67 = and i32 %66, 48
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %4, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds i8, i8* %50, i64 1
  store i8 %70, i8* %71, align 1
  %72 = getelementptr inbounds i8, i8* %50, i64 2
  br i1 %5, label %73, label %142

73:                                               ; preds = %59
  %74 = and i64 %53, -2
  %75 = icmp eq i64 %74, 2
  br i1 %75, label %147, label %76

76:                                               ; preds = %73
  store i8 61, i8* %72, align 1
  %77 = getelementptr inbounds i8, i8* %50, i64 3
  store i8 61, i8* %77, align 1
  %78 = getelementptr inbounds i8, i8* %50, i64 4
  br label %142

79:                                               ; preds = %48
  %80 = icmp ult i64 %53, 3
  br i1 %80, label %147, label %81

81:                                               ; preds = %79
  %82 = bitcast i8* %49 to i16*
  %83 = load i16, i16* %82, align 1
  %84 = tail call i16 @llvm.bswap.i16(i16 %83) #4
  %85 = zext i16 %84 to i32
  %86 = lshr i32 %85, 10
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %4, i64 %87
  %89 = load i8, i8* %88, align 1
  store i8 %89, i8* %50, align 1
  %90 = lshr i32 %85, 4
  %91 = and i32 %90, 63
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %4, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = getelementptr inbounds i8, i8* %50, i64 1
  store i8 %94, i8* %95, align 1
  %96 = shl nuw nsw i32 %85, 2
  %97 = and i32 %96, 60
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %4, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds i8, i8* %50, i64 2
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds i8, i8* %50, i64 3
  br i1 %5, label %103, label %142

103:                                              ; preds = %81
  %104 = icmp eq i64 %53, 3
  br i1 %104, label %147, label %105

105:                                              ; preds = %103
  store i8 61, i8* %102, align 1
  %106 = getelementptr inbounds i8, i8* %50, i64 4
  br label %142

107:                                              ; preds = %48
  %108 = icmp ult i64 %53, 4
  br i1 %108, label %147, label %109

109:                                              ; preds = %107
  %110 = load i8, i8* %49, align 1
  %111 = zext i8 %110 to i32
  %112 = shl nuw nsw i32 %111, 16
  %113 = getelementptr inbounds i8, i8* %49, i64 1
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 1
  %116 = tail call i16 @llvm.bswap.i16(i16 %115) #4
  %117 = zext i16 %116 to i32
  %118 = lshr i32 %111, 2
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %4, i64 %119
  %121 = load i8, i8* %120, align 1
  store i8 %121, i8* %50, align 1
  %122 = and i32 %112, 196608
  %123 = or i32 %122, %117
  %124 = lshr i32 %123, 12
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %4, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds i8, i8* %50, i64 1
  store i8 %127, i8* %128, align 1
  %129 = lshr i32 %117, 6
  %130 = and i32 %129, 63
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %4, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = getelementptr inbounds i8, i8* %50, i64 2
  store i8 %133, i8* %134, align 1
  %135 = and i32 %117, 63
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %4, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = getelementptr inbounds i8, i8* %50, i64 3
  store i8 %138, i8* %139, align 1
  %140 = getelementptr inbounds i8, i8* %50, i64 4
  br label %142

141:                                              ; preds = %48
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 51), i32 172, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i64 %56) #4
  br label %142

142:                                              ; preds = %81, %105, %59, %76, %141, %109, %48
  %143 = phi i8* [ %50, %141 ], [ %140, %109 ], [ %50, %48 ], [ %72, %59 ], [ %78, %76 ], [ %102, %81 ], [ %106, %105 ]
  %144 = ptrtoint i8* %143 to i64
  %145 = ptrtoint i8* %2 to i64
  %146 = sub i64 %144, %145
  br label %147

147:                                              ; preds = %103, %73, %142, %57, %79, %107, %6
  %148 = phi i64 [ 0, %6 ], [ %146, %142 ], [ 0, %57 ], [ 0, %79 ], [ 0, %107 ], [ 0, %73 ], [ 0, %103 ]
  ret i64 %148
}

declare void @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
