; ModuleID = '../../third_party/libgav1/src/src/dsp/distance_weighted_blend.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/distance_weighted_blend.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp27DistanceWeightedBlendInit_CEv() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #3
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 10
  store void (i8*, i8*, i8, i8, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_123DistanceWeightedBlend_CILi8EhEEvPKvS4_hhiiPvl, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)** %2, align 8
  %3 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #3
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %3, i64 0, i32 10
  store void (i8*, i8*, i8, i8, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_123DistanceWeightedBlend_CILi10EtEEvPKvS4_hhiiPvl, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)** %4, align 8
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_123DistanceWeightedBlend_CILi8EhEEvPKvS4_hhiiPvl(i8* nocapture readonly, i8* nocapture readonly, i8 zeroext, i8 zeroext, i32, i32, i8* nocapture, i64) #2 {
  %9 = bitcast i8* %0 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i8 %2 to i32
  %12 = zext i8 %3 to i32
  %13 = sext i32 %4 to i64
  %14 = icmp sgt i64 %13, 1
  %15 = select i1 %14, i64 %13, i64 1
  %16 = icmp sgt i64 %13, 1
  %17 = select i1 %16, i64 %13, i64 1
  %18 = shl nsw i64 %13, 1
  %19 = shl nuw nsw i64 %17, 1
  %20 = icmp ult i64 %15, 8
  %21 = and i64 %15, 9223372036854775800
  %22 = insertelement <8 x i32> undef, i32 %11, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %12, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  %26 = icmp eq i64 %15, %21
  br label %27

27:                                               ; preds = %99, %8
  %28 = phi i64 [ %105, %99 ], [ 0, %8 ]
  %29 = phi i16* [ %102, %99 ], [ %10, %8 ]
  %30 = phi i8* [ %100, %99 ], [ %6, %8 ]
  %31 = phi i32 [ %103, %99 ], [ 0, %8 ]
  %32 = phi i16* [ %101, %99 ], [ %9, %8 ]
  %33 = mul i64 %28, %7
  %34 = getelementptr i8, i8* %6, i64 %33
  %35 = add i64 %17, %33
  %36 = getelementptr i8, i8* %6, i64 %35
  %37 = mul i64 %18, %28
  %38 = add i64 %19, %37
  br i1 %20, label %76, label %39

39:                                               ; preds = %27
  %40 = getelementptr i8, i8* %1, i64 %38
  %41 = getelementptr i8, i8* %1, i64 %37
  %42 = getelementptr i8, i8* %0, i64 %38
  %43 = getelementptr i8, i8* %0, i64 %37
  %44 = icmp ult i8* %34, %42
  %45 = icmp ult i8* %43, %36
  %46 = and i1 %44, %45
  %47 = icmp ult i8* %34, %40
  %48 = icmp ult i8* %41, %36
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  br i1 %50, label %76, label %51

51:                                               ; preds = %39, %51
  %52 = phi i64 [ %73, %51 ], [ 0, %39 ]
  %53 = getelementptr inbounds i16, i16* %32, i64 %52
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2, !alias.scope !2
  %56 = sext <8 x i16> %55 to <8 x i32>
  %57 = mul nsw <8 x i32> %23, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 %52
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !5
  %61 = sext <8 x i16> %60 to <8 x i32>
  %62 = mul nsw <8 x i32> %25, %61
  %63 = add nsw <8 x i32> %57, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %64 = add nsw <8 x i32> %63, %62
  %65 = ashr <8 x i32> %64, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %66 = icmp slt <8 x i32> %65, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %67 = select <8 x i1> %66, <8 x i32> %65, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %68 = icmp sgt <8 x i32> %67, zeroinitializer
  %69 = select <8 x i1> %68, <8 x i32> %67, <8 x i32> zeroinitializer
  %70 = trunc <8 x i32> %69 to <8 x i8>
  %71 = getelementptr inbounds i8, i8* %30, i64 %52
  %72 = bitcast i8* %71 to <8 x i8>*
  store <8 x i8> %70, <8 x i8>* %72, align 1, !alias.scope !7, !noalias !9
  %73 = add i64 %52, 8
  %74 = icmp eq i64 %73, %21
  br i1 %74, label %75, label %51, !llvm.loop !10

75:                                               ; preds = %51
  br i1 %26, label %99, label %76

76:                                               ; preds = %75, %39, %27
  %77 = phi i64 [ 0, %39 ], [ 0, %27 ], [ %21, %75 ]
  br label %78

78:                                               ; preds = %76, %78
  %79 = phi i64 [ %97, %78 ], [ %77, %76 ]
  %80 = getelementptr inbounds i16, i16* %32, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = sext i16 %81 to i32
  %83 = mul nsw i32 %82, %11
  %84 = getelementptr inbounds i16, i16* %29, i64 %79
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = mul nsw i32 %86, %12
  %88 = add nsw i32 %83, 128
  %89 = add nsw i32 %88, %87
  %90 = ashr i32 %89, 8
  %91 = icmp slt i32 %90, 255
  %92 = select i1 %91, i32 %90, i32 255
  %93 = icmp sgt i32 %92, 0
  %94 = select i1 %93, i32 %92, i32 0
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds i8, i8* %30, i64 %79
  store i8 %95, i8* %96, align 1
  %97 = add nuw nsw i64 %79, 1
  %98 = icmp slt i64 %97, %13
  br i1 %98, label %78, label %99, !llvm.loop !12

99:                                               ; preds = %78, %75
  %100 = getelementptr inbounds i8, i8* %30, i64 %7
  %101 = getelementptr inbounds i16, i16* %32, i64 %13
  %102 = getelementptr inbounds i16, i16* %29, i64 %13
  %103 = add nuw nsw i32 %31, 1
  %104 = icmp slt i32 %103, %5
  %105 = add i64 %28, 1
  br i1 %104, label %27, label %106

106:                                              ; preds = %99
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_123DistanceWeightedBlend_CILi10EtEEvPKvS4_hhiiPvl(i8* nocapture readonly, i8* nocapture readonly, i8 zeroext, i8 zeroext, i32, i32, i8* nocapture, i64) #2 {
  %9 = bitcast i8* %0 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = bitcast i8* %6 to i16*
  %12 = lshr i64 %7, 1
  %13 = zext i8 %2 to i32
  %14 = zext i8 %3 to i32
  %15 = sext i32 %4 to i64
  %16 = icmp sgt i64 %15, 1
  %17 = select i1 %16, i64 %15, i64 1
  %18 = and i64 %7, -2
  %19 = icmp sgt i64 %15, 1
  %20 = select i1 %19, i64 %15, i64 1
  %21 = shl nuw nsw i64 %20, 1
  %22 = shl nsw i64 %15, 1
  %23 = icmp ult i64 %17, 8
  %24 = and i64 %17, 9223372036854775800
  %25 = insertelement <8 x i32> undef, i32 %13, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %14, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  %29 = icmp eq i64 %17, %24
  br label %30

30:                                               ; preds = %102, %8
  %31 = phi i64 [ %108, %102 ], [ 0, %8 ]
  %32 = phi i16* [ %105, %102 ], [ %10, %8 ]
  %33 = phi i16* [ %103, %102 ], [ %11, %8 ]
  %34 = phi i32 [ %106, %102 ], [ 0, %8 ]
  %35 = phi i16* [ %104, %102 ], [ %9, %8 ]
  %36 = mul i64 %18, %31
  %37 = getelementptr i8, i8* %6, i64 %36
  %38 = add i64 %21, %36
  %39 = getelementptr i8, i8* %6, i64 %38
  %40 = mul i64 %22, %31
  %41 = add i64 %21, %40
  br i1 %23, label %79, label %42

42:                                               ; preds = %30
  %43 = getelementptr i8, i8* %1, i64 %41
  %44 = getelementptr i8, i8* %1, i64 %40
  %45 = getelementptr i8, i8* %0, i64 %41
  %46 = getelementptr i8, i8* %0, i64 %40
  %47 = icmp ult i8* %37, %45
  %48 = icmp ult i8* %46, %39
  %49 = and i1 %47, %48
  %50 = icmp ult i8* %37, %43
  %51 = icmp ult i8* %44, %39
  %52 = and i1 %50, %51
  %53 = or i1 %49, %52
  br i1 %53, label %79, label %54

54:                                               ; preds = %42, %54
  %55 = phi i64 [ %76, %54 ], [ 0, %42 ]
  %56 = getelementptr inbounds i16, i16* %35, i64 %55
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2, !alias.scope !13
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %26, %59
  %61 = getelementptr inbounds i16, i16* %32, i64 %55
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !16
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %28, %64
  %66 = add nsw <8 x i32> %60, <i32 -393088, i32 -393088, i32 -393088, i32 -393088, i32 -393088, i32 -393088, i32 -393088, i32 -393088>
  %67 = add nsw <8 x i32> %66, %65
  %68 = ashr <8 x i32> %67, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %69 = icmp slt <8 x i32> %68, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %70 = select <8 x i1> %69, <8 x i32> %68, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %71 = icmp sgt <8 x i32> %70, zeroinitializer
  %72 = select <8 x i1> %71, <8 x i32> %70, <8 x i32> zeroinitializer
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 %55
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !18, !noalias !20
  %76 = add i64 %55, 8
  %77 = icmp eq i64 %76, %24
  br i1 %77, label %78, label %54, !llvm.loop !21

78:                                               ; preds = %54
  br i1 %29, label %102, label %79

79:                                               ; preds = %78, %42, %30
  %80 = phi i64 [ 0, %42 ], [ 0, %30 ], [ %24, %78 ]
  br label %81

81:                                               ; preds = %79, %81
  %82 = phi i64 [ %100, %81 ], [ %80, %79 ]
  %83 = getelementptr inbounds i16, i16* %35, i64 %82
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %85, %13
  %87 = getelementptr inbounds i16, i16* %32, i64 %82
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %89, %14
  %91 = add nsw i32 %86, -393088
  %92 = add nsw i32 %91, %90
  %93 = ashr i32 %92, 8
  %94 = icmp slt i32 %93, 1023
  %95 = select i1 %94, i32 %93, i32 1023
  %96 = icmp sgt i32 %95, 0
  %97 = select i1 %96, i32 %95, i32 0
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %33, i64 %82
  store i16 %98, i16* %99, align 2
  %100 = add nuw nsw i64 %82, 1
  %101 = icmp slt i64 %100, %15
  br i1 %101, label %81, label %102, !llvm.loop !22

102:                                              ; preds = %81, %78
  %103 = getelementptr inbounds i16, i16* %33, i64 %12
  %104 = getelementptr inbounds i16, i16* %35, i64 %15
  %105 = getelementptr inbounds i16, i16* %32, i64 %15
  %106 = add nuw nsw i32 %34, 1
  %107 = icmp slt i32 %106, %5
  %108 = add i64 %31, 1
  br i1 %107, label %30, label %109

109:                                              ; preds = %102
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = !{!19}
!19 = distinct !{!19, !15}
!20 = !{!14, !17}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !11}
