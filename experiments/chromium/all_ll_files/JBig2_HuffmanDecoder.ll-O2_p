; ModuleID = '../../third_party/pdfium/core/fxcodec/jbig2/JBig2_HuffmanDecoder.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jbig2/JBig2_HuffmanDecoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CJBig2_HuffmanDecoder = type { %"class.fxcrt::UnownedPtr" }
%"class.fxcrt::UnownedPtr" = type { %class.CJBig2_BitStream* }
%class.CJBig2_BitStream = type <{ %"class.pdfium::span", i32, i32, i32, [4 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.0", i64 }
%"class.fxcrt::UnownedPtr.0" = type { i8* }
%class.CJBig2_HuffmanTable = type { i8, i8, i32, %"class.std::__1::vector", %"class.std::__1::vector.2", %"class.std::__1::vector.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode*, %"class.std::__1::__compressed_pair" }
%struct.JBig2HuffmanCode = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.JBig2HuffmanCode* }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { i32*, i32*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i32* }

@_ZN21CJBig2_HuffmanDecoderC1EP16CJBig2_BitStream = hidden unnamed_addr alias void (%class.CJBig2_HuffmanDecoder*, %class.CJBig2_BitStream*), void (%class.CJBig2_HuffmanDecoder*, %class.CJBig2_BitStream*)* @_ZN21CJBig2_HuffmanDecoderC2EP16CJBig2_BitStream
@_ZN21CJBig2_HuffmanDecoderD1Ev = hidden unnamed_addr alias void (%class.CJBig2_HuffmanDecoder*), void (%class.CJBig2_HuffmanDecoder*)* @_ZN21CJBig2_HuffmanDecoderD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN21CJBig2_HuffmanDecoderC2EP16CJBig2_BitStream(%class.CJBig2_HuffmanDecoder* nocapture, %class.CJBig2_BitStream*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CJBig2_HuffmanDecoder, %class.CJBig2_HuffmanDecoder* %0, i64 0, i32 0, i32 0
  store %class.CJBig2_BitStream* %1, %class.CJBig2_BitStream** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN21CJBig2_HuffmanDecoderD2Ev(%class.CJBig2_HuffmanDecoder* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nocapture readonly, %class.CJBig2_HuffmanTable* nocapture readonly, i32* nocapture) local_unnamed_addr #2 align 2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #6
  store i32 -1431655766, i32* %4, align 4
  %6 = getelementptr inbounds %class.CJBig2_HuffmanDecoder, %class.CJBig2_HuffmanDecoder* %0, i64 0, i32 0, i32 0
  %7 = load %class.CJBig2_BitStream*, %class.CJBig2_BitStream** %6, align 8
  %8 = call i32 @_ZN16CJBig2_BitStream8read1BitEPj(%class.CJBig2_BitStream* %7, i32* nonnull %4) #6
  %9 = icmp eq i32 %8, -1
  br i1 %9, label %86, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %1, i64 0, i32 2
  %12 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %1, i64 0, i32 3, i32 0, i32 0
  br label %13

13:                                               ; preds = %10, %82
  %14 = phi i32 [ 0, %10 ], [ %29, %82 ]
  %15 = phi i8 [ 1, %10 ], [ %28, %82 ]
  %16 = phi i32 [ 0, %10 ], [ %25, %82 ]
  %17 = icmp ne i8 %15, 0
  %18 = add nuw i32 %16, 1073741824
  %19 = or i32 %16, %18
  %20 = icmp sgt i32 %19, -1
  %21 = and i1 %20, %17
  br i1 %21, label %22, label %86, !prof !2

22:                                               ; preds = %13
  %23 = shl i32 %16, 1
  %24 = load i32, i32* %4, align 4
  %25 = or i32 %24, %23
  %26 = lshr i32 %25, 31
  %27 = trunc i32 %26 to i8
  %28 = xor i8 %27, 1
  %29 = add nuw nsw i32 %14, 1
  %30 = icmp eq i8 %28, 0
  br i1 %30, label %37, label %31, !prof !3

31:                                               ; preds = %22
  %32 = load i32, i32* %11, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %82, label %34

34:                                               ; preds = %31
  %35 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %12, align 8
  %36 = zext i32 %32 to i64
  br label %38

37:                                               ; preds = %22
  call void @llvm.trap() #6
  unreachable

38:                                               ; preds = %34, %79
  %39 = phi i64 [ 0, %34 ], [ %80, %79 ]
  %40 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %35, i64 %39, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, %29
  br i1 %42, label %43, label %79

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %35, i64 %39, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, %25
  br i1 %46, label %47, label %79

47:                                               ; preds = %43
  %48 = trunc i64 %39 to i32
  %49 = and i64 %39, 4294967295
  %50 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %1, i64 0, i32 1
  %51 = load i8, i8* %50, align 1, !range !4
  %52 = icmp ne i8 %51, 0
  %53 = add i32 %32, -1
  %54 = icmp eq i32 %53, %48
  %55 = and i1 %54, %52
  br i1 %55, label %86, label %56

56:                                               ; preds = %47
  %57 = load %class.CJBig2_BitStream*, %class.CJBig2_BitStream** %6, align 8
  %58 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %1, i64 0, i32 4, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = getelementptr inbounds i32, i32* %59, i64 %49
  %61 = load i32, i32* %60, align 4
  %62 = call i32 @_ZN16CJBig2_BitStream9readNBitsEjPj(%class.CJBig2_BitStream* %57, i32 %61, i32* nonnull %4) #6
  %63 = icmp eq i32 %62, -1
  br i1 %63, label %86, label %64

64:                                               ; preds = %56
  %65 = load i8, i8* %50, align 1, !range !4
  %66 = icmp eq i8 %65, 0
  %67 = select i1 %66, i32 2, i32 3
  %68 = load i32, i32* %11, align 4
  %69 = sub i32 %68, %67
  %70 = icmp eq i32 %69, %48
  %71 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %1, i64 0, i32 5, i32 0, i32 0
  %72 = load i32*, i32** %71, align 8
  %73 = getelementptr inbounds i32, i32* %72, i64 %49
  %74 = load i32, i32* %73, align 4
  %75 = load i32, i32* %4, align 4
  %76 = sub i32 0, %75
  %77 = select i1 %70, i32 %76, i32 %75
  %78 = add i32 %77, %74
  store i32 %78, i32* %2, align 4
  br label %86

79:                                               ; preds = %43, %38
  %80 = add nuw nsw i64 %39, 1
  %81 = icmp ult i64 %80, %36
  br i1 %81, label %38, label %82

82:                                               ; preds = %79, %31
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #6
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #6
  store i32 -1431655766, i32* %4, align 4
  %83 = load %class.CJBig2_BitStream*, %class.CJBig2_BitStream** %6, align 8
  %84 = call i32 @_ZN16CJBig2_BitStream8read1BitEPj(%class.CJBig2_BitStream* %83, i32* nonnull %4) #6
  %85 = icmp eq i32 %84, -1
  br i1 %85, label %86, label %13

86:                                               ; preds = %13, %82, %3, %56, %64, %47
  %87 = phi i32 [ 0, %64 ], [ -1, %56 ], [ 1, %47 ], [ -1, %3 ], [ -1, %82 ], [ -1, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #6
  ret i32 %87
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @_ZN16CJBig2_BitStream8read1BitEPj(%class.CJBig2_BitStream*, i32*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @_ZN16CJBig2_BitStream9readNBitsEjPj(%class.CJBig2_BitStream*, i32, i32*) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 6004}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
