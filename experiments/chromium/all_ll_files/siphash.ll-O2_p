; ModuleID = '../../third_party/boringssl/src/crypto/siphash/siphash.c'
source_filename = "../../third_party/boringssl/src/crypto/siphash/siphash.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden i64 @SIPHASH_24(i64* nocapture readonly, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = load i64, i64* %0, align 8
  %6 = xor i64 %5, 8317987319222330741
  %7 = getelementptr inbounds i64, i64* %0, i64 1
  %8 = load i64, i64* %7, align 8
  %9 = xor i64 %8, 7237128888997146477
  %10 = xor i64 %5, 7816392313619706465
  %11 = xor i64 %8, 8387220255154660723
  %12 = icmp ugt i64 %2, 7
  br i1 %12, label %13, label %86

13:                                               ; preds = %3
  %14 = add i64 %2, -8
  %15 = and i64 %14, -8
  %16 = add nuw i64 %15, 8
  %17 = getelementptr i8, i8* %1, i64 %16
  br label %18

18:                                               ; preds = %13, %18
  %19 = phi i8* [ %81, %18 ], [ %1, %13 ]
  %20 = phi i64 [ %82, %18 ], [ %2, %13 ]
  %21 = phi i64 [ %80, %18 ], [ %6, %13 ]
  %22 = phi i64 [ %75, %18 ], [ %9, %13 ]
  %23 = phi i64 [ %79, %18 ], [ %10, %13 ]
  %24 = phi i64 [ %76, %18 ], [ %11, %13 ]
  %25 = bitcast i8* %19 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = xor i64 %26, %24
  %28 = add i64 %21, %22
  %29 = add i64 %27, %23
  %30 = shl i64 %22, 13
  %31 = lshr i64 %22, 51
  %32 = or i64 %30, %31
  %33 = shl i64 %27, 16
  %34 = lshr i64 %27, 48
  %35 = or i64 %33, %34
  %36 = xor i64 %32, %28
  %37 = xor i64 %35, %29
  %38 = shl i64 %28, 32
  %39 = lshr i64 %28, 32
  %40 = or i64 %38, %39
  %41 = add i64 %29, %36
  %42 = add i64 %37, %40
  %43 = shl i64 %36, 17
  %44 = lshr i64 %36, 47
  %45 = or i64 %43, %44
  %46 = shl i64 %37, 21
  %47 = lshr i64 %37, 43
  %48 = or i64 %46, %47
  %49 = xor i64 %41, %45
  %50 = xor i64 %48, %42
  %51 = shl i64 %41, 32
  %52 = lshr i64 %41, 32
  %53 = or i64 %51, %52
  %54 = add i64 %42, %49
  %55 = add i64 %50, %53
  %56 = shl i64 %49, 13
  %57 = lshr i64 %49, 51
  %58 = or i64 %56, %57
  %59 = shl i64 %50, 16
  %60 = lshr i64 %50, 48
  %61 = or i64 %59, %60
  %62 = xor i64 %58, %54
  %63 = xor i64 %61, %55
  %64 = shl i64 %54, 32
  %65 = lshr i64 %54, 32
  %66 = or i64 %64, %65
  %67 = add i64 %55, %62
  %68 = add i64 %63, %66
  %69 = shl i64 %62, 17
  %70 = lshr i64 %62, 47
  %71 = or i64 %69, %70
  %72 = shl i64 %63, 21
  %73 = lshr i64 %63, 43
  %74 = or i64 %72, %73
  %75 = xor i64 %67, %71
  %76 = xor i64 %74, %68
  %77 = shl i64 %67, 32
  %78 = lshr i64 %67, 32
  %79 = or i64 %77, %78
  %80 = xor i64 %68, %26
  %81 = getelementptr inbounds i8, i8* %19, i64 8
  %82 = add i64 %20, -8
  %83 = icmp ugt i64 %82, 7
  br i1 %83, label %18, label %84

84:                                               ; preds = %18
  %85 = sub i64 %14, %15
  br label %86

86:                                               ; preds = %84, %3
  %87 = phi i64 [ %11, %3 ], [ %76, %84 ]
  %88 = phi i64 [ %10, %3 ], [ %79, %84 ]
  %89 = phi i64 [ %9, %3 ], [ %75, %84 ]
  %90 = phi i64 [ %6, %3 ], [ %80, %84 ]
  %91 = phi i64 [ %2, %3 ], [ %85, %84 ]
  %92 = phi i8* [ %1, %3 ], [ %17, %84 ]
  %93 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93)
  store i64 0, i64* %4, align 8
  %94 = icmp eq i64 %91, 0
  br i1 %94, label %96, label %95

95:                                               ; preds = %86
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %93, i8* align 1 %92, i64 %91, i1 false) #2
  br label %96

96:                                               ; preds = %86, %95
  %97 = trunc i64 %2 to i8
  %98 = getelementptr inbounds i8, i8* %93, i64 7
  store i8 %97, i8* %98, align 1
  %99 = load i64, i64* %4, align 8
  %100 = xor i64 %99, %87
  %101 = add i64 %90, %89
  %102 = add i64 %100, %88
  %103 = shl i64 %89, 13
  %104 = lshr i64 %89, 51
  %105 = or i64 %103, %104
  %106 = shl i64 %100, 16
  %107 = lshr i64 %100, 48
  %108 = or i64 %106, %107
  %109 = xor i64 %105, %101
  %110 = xor i64 %108, %102
  %111 = shl i64 %101, 32
  %112 = lshr i64 %101, 32
  %113 = or i64 %111, %112
  %114 = add i64 %102, %109
  %115 = add i64 %110, %113
  %116 = shl i64 %109, 17
  %117 = lshr i64 %109, 47
  %118 = or i64 %116, %117
  %119 = shl i64 %110, 21
  %120 = lshr i64 %110, 43
  %121 = or i64 %119, %120
  %122 = xor i64 %114, %118
  %123 = xor i64 %121, %115
  %124 = shl i64 %114, 32
  %125 = lshr i64 %114, 32
  %126 = or i64 %124, %125
  %127 = add i64 %115, %122
  %128 = add i64 %123, %126
  %129 = shl i64 %122, 13
  %130 = lshr i64 %122, 51
  %131 = or i64 %129, %130
  %132 = shl i64 %123, 16
  %133 = lshr i64 %123, 48
  %134 = or i64 %132, %133
  %135 = xor i64 %131, %127
  %136 = xor i64 %134, %128
  %137 = shl i64 %127, 32
  %138 = lshr i64 %127, 32
  %139 = or i64 %137, %138
  %140 = add i64 %128, %135
  %141 = add i64 %136, %139
  %142 = shl i64 %135, 17
  %143 = lshr i64 %135, 47
  %144 = or i64 %142, %143
  %145 = shl i64 %136, 21
  %146 = lshr i64 %136, 43
  %147 = or i64 %145, %146
  %148 = xor i64 %140, %144
  %149 = xor i64 %147, %141
  %150 = shl i64 %140, 32
  %151 = lshr i64 %140, 32
  %152 = or i64 %150, %151
  %153 = xor i64 %141, %99
  %154 = xor i64 %152, 255
  %155 = add i64 %153, %148
  %156 = add i64 %149, %154
  %157 = shl i64 %148, 13
  %158 = lshr i64 %148, 51
  %159 = or i64 %157, %158
  %160 = shl i64 %149, 16
  %161 = lshr i64 %149, 48
  %162 = or i64 %160, %161
  %163 = xor i64 %155, %159
  %164 = xor i64 %162, %156
  %165 = shl i64 %155, 32
  %166 = lshr i64 %155, 32
  %167 = or i64 %165, %166
  %168 = add i64 %156, %163
  %169 = add i64 %164, %167
  %170 = shl i64 %163, 17
  %171 = lshr i64 %163, 47
  %172 = or i64 %170, %171
  %173 = shl i64 %164, 21
  %174 = lshr i64 %164, 43
  %175 = or i64 %173, %174
  %176 = xor i64 %172, %168
  %177 = xor i64 %175, %169
  %178 = shl i64 %168, 32
  %179 = lshr i64 %168, 32
  %180 = or i64 %178, %179
  %181 = add i64 %169, %176
  %182 = add i64 %177, %180
  %183 = shl i64 %176, 13
  %184 = lshr i64 %176, 51
  %185 = or i64 %183, %184
  %186 = shl i64 %177, 16
  %187 = lshr i64 %177, 48
  %188 = or i64 %186, %187
  %189 = xor i64 %185, %181
  %190 = xor i64 %188, %182
  %191 = shl i64 %181, 32
  %192 = lshr i64 %181, 32
  %193 = or i64 %191, %192
  %194 = add i64 %182, %189
  %195 = add i64 %190, %193
  %196 = shl i64 %189, 17
  %197 = lshr i64 %189, 47
  %198 = or i64 %196, %197
  %199 = shl i64 %190, 21
  %200 = lshr i64 %190, 43
  %201 = or i64 %199, %200
  %202 = xor i64 %198, %194
  %203 = xor i64 %201, %195
  %204 = shl i64 %194, 32
  %205 = lshr i64 %194, 32
  %206 = or i64 %204, %205
  %207 = add i64 %195, %202
  %208 = add i64 %203, %206
  %209 = shl i64 %202, 13
  %210 = lshr i64 %202, 51
  %211 = or i64 %209, %210
  %212 = shl i64 %203, 16
  %213 = lshr i64 %203, 48
  %214 = or i64 %212, %213
  %215 = xor i64 %211, %207
  %216 = xor i64 %214, %208
  %217 = shl i64 %207, 32
  %218 = lshr i64 %207, 32
  %219 = or i64 %217, %218
  %220 = add i64 %208, %215
  %221 = add i64 %216, %219
  %222 = shl i64 %215, 17
  %223 = lshr i64 %215, 47
  %224 = or i64 %222, %223
  %225 = shl i64 %216, 21
  %226 = lshr i64 %216, 43
  %227 = or i64 %225, %226
  %228 = xor i64 %224, %220
  %229 = xor i64 %227, %221
  %230 = shl i64 %220, 32
  %231 = lshr i64 %220, 32
  %232 = or i64 %230, %231
  %233 = add i64 %221, %228
  %234 = add i64 %229, %232
  %235 = shl i64 %228, 13
  %236 = lshr i64 %228, 51
  %237 = or i64 %235, %236
  %238 = shl i64 %229, 16
  %239 = lshr i64 %229, 48
  %240 = or i64 %238, %239
  %241 = xor i64 %237, %233
  %242 = xor i64 %240, %234
  %243 = add i64 %234, %241
  %244 = shl i64 %241, 17
  %245 = lshr i64 %241, 47
  %246 = or i64 %244, %245
  %247 = shl i64 %242, 21
  %248 = lshr i64 %242, 43
  %249 = or i64 %247, %248
  %250 = shl i64 %243, 32
  %251 = lshr i64 %243, 32
  %252 = or i64 %250, %251
  %253 = xor i64 %246, %243
  %254 = xor i64 %253, %252
  %255 = xor i64 %254, %249
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93)
  ret i64 %255
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
