; ModuleID = '../../third_party/blink/common/dom_storage/session_storage_namespace_id.cc'
source_filename = "../../third_party/blink/common/dom_storage/session_storage_namespace_id.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink33AllocateSessionStorageNamespaceIdEv(%"class.std::__1::basic_string"* noalias sret) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -86, i64 24, i1 false)
  tail call void @_ZN4base12GenerateGUIDEv(%"class.std::__1::basic_string"* sret %0) #3
  %5 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  %9 = load i8*, i8** %2, align 8
  %10 = load i64, i64* %3, align 8
  %11 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %12 = zext i8 %7 to i64
  %13 = select i1 %8, i8* %9, i8* %11
  %14 = select i1 %8, i64 %10, i64 %12
  %15 = getelementptr inbounds i8, i8* %13, i64 %14
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %120, label %17

17:                                               ; preds = %1
  %18 = icmp ult i64 %14, 16
  br i1 %18, label %110, label %19

19:                                               ; preds = %17
  %20 = and i64 %14, -16
  %21 = getelementptr i8, i8* %13, i64 %20
  br label %22

22:                                               ; preds = %105, %19
  %23 = phi i64 [ 0, %19 ], [ %106, %105 ]
  %24 = getelementptr i8, i8* %13, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp eq <16 x i8> %26, <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>
  %28 = extractelement <16 x i1> %27, i32 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %22
  store i8 95, i8* %24, align 1
  br label %30

30:                                               ; preds = %29, %22
  %31 = extractelement <16 x i1> %27, i32 1
  br i1 %31, label %32, label %35

32:                                               ; preds = %30
  %33 = or i64 %23, 1
  %34 = getelementptr i8, i8* %13, i64 %33
  store i8 95, i8* %34, align 1
  br label %35

35:                                               ; preds = %32, %30
  %36 = extractelement <16 x i1> %27, i32 2
  br i1 %36, label %37, label %40

37:                                               ; preds = %35
  %38 = or i64 %23, 2
  %39 = getelementptr i8, i8* %13, i64 %38
  store i8 95, i8* %39, align 1
  br label %40

40:                                               ; preds = %37, %35
  %41 = extractelement <16 x i1> %27, i32 3
  br i1 %41, label %42, label %45

42:                                               ; preds = %40
  %43 = or i64 %23, 3
  %44 = getelementptr i8, i8* %13, i64 %43
  store i8 95, i8* %44, align 1
  br label %45

45:                                               ; preds = %42, %40
  %46 = extractelement <16 x i1> %27, i32 4
  br i1 %46, label %47, label %50

47:                                               ; preds = %45
  %48 = or i64 %23, 4
  %49 = getelementptr i8, i8* %13, i64 %48
  store i8 95, i8* %49, align 1
  br label %50

50:                                               ; preds = %47, %45
  %51 = extractelement <16 x i1> %27, i32 5
  br i1 %51, label %52, label %55

52:                                               ; preds = %50
  %53 = or i64 %23, 5
  %54 = getelementptr i8, i8* %13, i64 %53
  store i8 95, i8* %54, align 1
  br label %55

55:                                               ; preds = %52, %50
  %56 = extractelement <16 x i1> %27, i32 6
  br i1 %56, label %57, label %60

57:                                               ; preds = %55
  %58 = or i64 %23, 6
  %59 = getelementptr i8, i8* %13, i64 %58
  store i8 95, i8* %59, align 1
  br label %60

60:                                               ; preds = %57, %55
  %61 = extractelement <16 x i1> %27, i32 7
  br i1 %61, label %62, label %65

62:                                               ; preds = %60
  %63 = or i64 %23, 7
  %64 = getelementptr i8, i8* %13, i64 %63
  store i8 95, i8* %64, align 1
  br label %65

65:                                               ; preds = %62, %60
  %66 = extractelement <16 x i1> %27, i32 8
  br i1 %66, label %67, label %70

67:                                               ; preds = %65
  %68 = or i64 %23, 8
  %69 = getelementptr i8, i8* %13, i64 %68
  store i8 95, i8* %69, align 1
  br label %70

70:                                               ; preds = %67, %65
  %71 = extractelement <16 x i1> %27, i32 9
  br i1 %71, label %72, label %75

72:                                               ; preds = %70
  %73 = or i64 %23, 9
  %74 = getelementptr i8, i8* %13, i64 %73
  store i8 95, i8* %74, align 1
  br label %75

75:                                               ; preds = %72, %70
  %76 = extractelement <16 x i1> %27, i32 10
  br i1 %76, label %77, label %80

77:                                               ; preds = %75
  %78 = or i64 %23, 10
  %79 = getelementptr i8, i8* %13, i64 %78
  store i8 95, i8* %79, align 1
  br label %80

80:                                               ; preds = %77, %75
  %81 = extractelement <16 x i1> %27, i32 11
  br i1 %81, label %82, label %85

82:                                               ; preds = %80
  %83 = or i64 %23, 11
  %84 = getelementptr i8, i8* %13, i64 %83
  store i8 95, i8* %84, align 1
  br label %85

85:                                               ; preds = %82, %80
  %86 = extractelement <16 x i1> %27, i32 12
  br i1 %86, label %87, label %90

87:                                               ; preds = %85
  %88 = or i64 %23, 12
  %89 = getelementptr i8, i8* %13, i64 %88
  store i8 95, i8* %89, align 1
  br label %90

90:                                               ; preds = %87, %85
  %91 = extractelement <16 x i1> %27, i32 13
  br i1 %91, label %92, label %95

92:                                               ; preds = %90
  %93 = or i64 %23, 13
  %94 = getelementptr i8, i8* %13, i64 %93
  store i8 95, i8* %94, align 1
  br label %95

95:                                               ; preds = %92, %90
  %96 = extractelement <16 x i1> %27, i32 14
  br i1 %96, label %97, label %100

97:                                               ; preds = %95
  %98 = or i64 %23, 14
  %99 = getelementptr i8, i8* %13, i64 %98
  store i8 95, i8* %99, align 1
  br label %100

100:                                              ; preds = %97, %95
  %101 = extractelement <16 x i1> %27, i32 15
  br i1 %101, label %102, label %105

102:                                              ; preds = %100
  %103 = or i64 %23, 15
  %104 = getelementptr i8, i8* %13, i64 %103
  store i8 95, i8* %104, align 1
  br label %105

105:                                              ; preds = %102, %100
  %106 = add i64 %23, 16
  %107 = icmp eq i64 %106, %20
  br i1 %107, label %108, label %22, !llvm.loop !2

108:                                              ; preds = %105
  %109 = icmp eq i64 %14, %20
  br i1 %109, label %120, label %110

110:                                              ; preds = %108, %17
  %111 = phi i8* [ %13, %17 ], [ %21, %108 ]
  br label %112

112:                                              ; preds = %110, %117
  %113 = phi i8* [ %118, %117 ], [ %111, %110 ]
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 45
  br i1 %115, label %116, label %117

116:                                              ; preds = %112
  store i8 95, i8* %113, align 1
  br label %117

117:                                              ; preds = %116, %112
  %118 = getelementptr inbounds i8, i8* %113, i64 1
  %119 = icmp eq i8* %118, %15
  br i1 %119, label %120, label %112, !llvm.loop !4

120:                                              ; preds = %117, %108, %1
  ret void
}

declare void @_ZN4base12GenerateGUIDEv(%"class.std::__1::basic_string"* sret) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
