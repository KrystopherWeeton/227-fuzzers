; ModuleID = '../../third_party/libzip/src/lib/zip_stat_init.c'
source_filename = "../../third_party/libzip/src/lib/zip_stat_init.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }
%struct.zip_error = type { i32, i32, i8* }

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @zip_stat_init(%struct.zip_stat* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 2
  %3 = bitcast %struct.zip_stat* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  store i64 -1, i64* %2, align 8
  %4 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 6
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 5
  store i64 -1, i64* %5, align 8
  %6 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 3
  %7 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 7
  store i16 0, i16* %7, align 4
  %8 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 8
  store i16 0, i16* %8, align 2
  %9 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_zip_stat_merge(%struct.zip_stat* nocapture, %struct.zip_stat* nocapture readonly, %struct.zip_error* nocapture readnone) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %1, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 2
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %1, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 2
  store i64 %10, i64* %11, align 8
  %12 = load i64, i64* %4, align 8
  br label %13

13:                                               ; preds = %3, %8
  %14 = phi i64 [ %5, %3 ], [ %12, %8 ]
  %15 = and i64 %14, 4
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %1, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 3
  store i64 %19, i64* %20, align 8
  %21 = load i64, i64* %4, align 8
  br label %22

22:                                               ; preds = %13, %17
  %23 = phi i64 [ %14, %13 ], [ %21, %17 ]
  %24 = and i64 %23, 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %1, i64 0, i32 4
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 4
  store i64 %28, i64* %29, align 8
  %30 = load i64, i64* %4, align 8
  br label %31

31:                                               ; preds = %22, %26
  %32 = phi i64 [ %23, %22 ], [ %30, %26 ]
  %33 = and i64 %32, 16
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %1, i64 0, i32 5
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 5
  store i64 %37, i64* %38, align 8
  %39 = load i64, i64* %4, align 8
  br label %40

40:                                               ; preds = %31, %35
  %41 = phi i64 [ %32, %31 ], [ %39, %35 ]
  %42 = and i64 %41, 32
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %1, i64 0, i32 6
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 6
  store i32 %46, i32* %47, align 8
  %48 = load i64, i64* %4, align 8
  br label %49

49:                                               ; preds = %40, %44
  %50 = phi i64 [ %41, %40 ], [ %48, %44 ]
  %51 = and i64 %50, 64
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %1, i64 0, i32 7
  %55 = load i16, i16* %54, align 4
  %56 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 7
  store i16 %55, i16* %56, align 4
  %57 = load i64, i64* %4, align 8
  br label %58

58:                                               ; preds = %49, %53
  %59 = phi i64 [ %50, %49 ], [ %57, %53 ]
  %60 = trunc i64 %59 to i8
  %61 = icmp slt i8 %60, 0
  br i1 %61, label %62, label %67

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %1, i64 0, i32 8
  %64 = load i16, i16* %63, align 2
  %65 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 8
  store i16 %64, i16* %65, align 2
  %66 = load i64, i64* %4, align 8
  br label %67

67:                                               ; preds = %62, %58
  %68 = phi i64 [ %66, %62 ], [ %59, %58 ]
  %69 = and i64 %68, 256
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %1, i64 0, i32 9
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 9
  store i32 %73, i32* %74, align 8
  %75 = load i64, i64* %4, align 8
  br label %76

76:                                               ; preds = %67, %71
  %77 = phi i64 [ %68, %67 ], [ %75, %71 ]
  %78 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %0, i64 0, i32 0
  %79 = load i64, i64* %78, align 8
  %80 = or i64 %79, %77
  store i64 %80, i64* %78, align 8
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
