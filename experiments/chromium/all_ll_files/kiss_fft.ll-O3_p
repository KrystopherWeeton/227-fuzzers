; ModuleID = '../../third_party/opus/src/celt/kiss_fft.c'
source_filename = "../../third_party/opus/src/celt/kiss_fft.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.kiss_fft_cpx = type { float, float }

@.str = private unnamed_addr constant [57 x i8] c"assertion failed: fin != fout\0AIn-place FFT not supported\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"../../third_party/opus/src/celt/kiss_fft.c\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"assertion failed: m==4\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @opus_fft_impl(%struct.kiss_fft_state* nocapture readonly, %struct.kiss_fft_cpx* nocapture) local_unnamed_addr #0 {
  %3 = alloca [8 x i32], align 16
  %4 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #3
  %5 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0
  %6 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 2
  %7 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = icmp sgt i32 %8, 0
  store i32 1, i32* %5, align 16
  br label %10

10:                                               ; preds = %10, %2
  %11 = phi i32 [ %20, %10 ], [ 1, %2 ]
  %12 = phi i64 [ %21, %10 ], [ 0, %2 ]
  %13 = shl nuw nsw i64 %12, 1
  %14 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 3, i64 %13
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = or i64 %13, 1
  %18 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 3, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = mul nsw i32 %11, %16
  %21 = add nuw i64 %12, 1
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %21
  store i32 %20, i32* %22, align 4
  %23 = icmp eq i16 %19, 1
  br i1 %23, label %24, label %10

24:                                               ; preds = %10
  %25 = select i1 %9, i32 %8, i32 0
  %26 = trunc i64 %21 to i32
  %27 = shl nuw nsw i32 %26, 1
  %28 = add nsw i32 %27, -1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 3, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = getelementptr %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 5
  %34 = and i64 %12, 4294967295
  br label %35

35:                                               ; preds = %24, %578
  %36 = phi i64 [ %34, %24 ], [ %579, %578 ]
  %37 = phi i32 [ %32, %24 ], [ %49, %578 ]
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %47, label %39

39:                                               ; preds = %35
  %40 = trunc i64 %36 to i32
  %41 = shl i32 %40, 1
  %42 = add nsw i32 %41, -1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 3, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  br label %47

47:                                               ; preds = %35, %39
  %48 = phi i32 [ %41, %39 ], [ 0, %35 ]
  %49 = phi i32 [ %46, %39 ], [ 1, %35 ]
  %50 = sext i32 %48 to i64
  %51 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 3, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  switch i32 %53, label %578 [
    i32 2, label %54
    i32 4, label %117
    i32 3, label %314
    i32 5, label %405
  ]

54:                                               ; preds = %47
  %55 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %36
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %37, 4
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = icmp sgt i32 %56, 0
  br i1 %59, label %61, label %578

60:                                               ; preds = %54
  tail call void @celt_fatal(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 76) #4
  unreachable

61:                                               ; preds = %58, %61
  %62 = phi %struct.kiss_fft_cpx* [ %114, %61 ], [ %1, %58 ]
  %63 = phi i32 [ %115, %61 ], [ 0, %58 ]
  %64 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %62, i64 4, i32 0
  %65 = bitcast float* %64 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 4
  %67 = bitcast %struct.kiss_fft_cpx* %62 to <4 x float>*
  %68 = load <4 x float>, <4 x float>* %67, align 4
  %69 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %62, i64 5, i32 0
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %62, i64 5, i32 1
  %72 = load float, float* %71, align 4
  %73 = fadd float %70, %72
  %74 = fmul float %73, 0x3FE6A09E60000000
  %75 = fsub float %72, %70
  %76 = fmul float %75, 0x3FE6A09E60000000
  %77 = extractelement <2 x float> %66, i32 0
  %78 = insertelement <4 x float> undef, float %77, i32 0
  %79 = extractelement <2 x float> %66, i32 1
  %80 = insertelement <4 x float> %78, float %79, i32 1
  %81 = insertelement <4 x float> %80, float %74, i32 2
  %82 = insertelement <4 x float> %81, float %76, i32 3
  %83 = fsub <4 x float> %68, %82
  %84 = bitcast float* %64 to <4 x float>*
  store <4 x float> %83, <4 x float>* %84, align 4
  %85 = fadd <4 x float> %82, %68
  %86 = bitcast %struct.kiss_fft_cpx* %62 to <4 x float>*
  store <4 x float> %85, <4 x float>* %86, align 4
  %87 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %62, i64 6, i32 1
  %88 = load float, float* %87, align 4
  %89 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %62, i64 6, i32 0
  %90 = load float, float* %89, align 4
  %91 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %62, i64 2, i32 0
  %92 = bitcast float* %91 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 4
  %94 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %62, i64 7, i32 1
  %95 = load float, float* %94, align 4
  %96 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %62, i64 7, i32 0
  %97 = load float, float* %96, align 4
  %98 = fsub float %95, %97
  %99 = fmul float %98, 0x3FE6A09E60000000
  %100 = fadd float %95, %97
  %101 = fmul float %100, 0xBFE6A09E60000000
  %102 = insertelement <4 x float> undef, float %88, i32 0
  %103 = insertelement <4 x float> %102, float %90, i32 1
  %104 = insertelement <4 x float> %103, float %99, i32 2
  %105 = insertelement <4 x float> %104, float %101, i32 3
  %106 = fsub <4 x float> %93, %105
  %107 = fadd <4 x float> %93, %105
  %108 = shufflevector <4 x float> %106, <4 x float> %107, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %109 = bitcast float* %89 to <4 x float>*
  store <4 x float> %108, <4 x float>* %109, align 4
  %110 = fadd <4 x float> %93, %105
  %111 = fsub <4 x float> %93, %105
  %112 = shufflevector <4 x float> %110, <4 x float> %111, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %113 = bitcast float* %91 to <4 x float>*
  store <4 x float> %112, <4 x float>* %113, align 4
  %114 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %62, i64 8
  %115 = add nuw nsw i32 %63, 1
  %116 = icmp eq i32 %115, %56
  br i1 %116, label %578, label %61

117:                                              ; preds = %47
  %118 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %36
  %119 = load i32, i32* %118, align 4
  %120 = shl i32 %119, %25
  %121 = sext i32 %120 to i64
  %122 = icmp eq i32 %37, 1
  %123 = icmp sgt i32 %119, 0
  br i1 %122, label %124, label %217

124:                                              ; preds = %117
  br i1 %123, label %125, label %578

125:                                              ; preds = %124
  %126 = add i32 %119, -1
  %127 = zext i32 %126 to i64
  %128 = add nuw nsw i64 %127, 1
  %129 = icmp ult i64 %128, 4
  br i1 %129, label %179, label %130

130:                                              ; preds = %125
  %131 = and i64 %128, 8589934588
  %132 = shl nuw nsw i64 %131, 2
  %133 = getelementptr %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %1, i64 %132
  %134 = trunc i64 %131 to i32
  br label %135

135:                                              ; preds = %135, %130
  %136 = phi i64 [ 0, %130 ], [ %175, %135 ]
  %137 = shl i64 %136, 2
  %138 = getelementptr %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %1, i64 %137
  %139 = bitcast %struct.kiss_fft_cpx* %138 to <32 x float>*
  %140 = load <32 x float>, <32 x float>* %139, align 4
  %141 = shufflevector <32 x float> %140, <32 x float> undef, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %142 = shufflevector <32 x float> %140, <32 x float> undef, <4 x i32> <i32 1, i32 9, i32 17, i32 25>
  %143 = shufflevector <32 x float> %140, <32 x float> undef, <4 x i32> <i32 2, i32 10, i32 18, i32 26>
  %144 = shufflevector <32 x float> %140, <32 x float> undef, <4 x i32> <i32 3, i32 11, i32 19, i32 27>
  %145 = shufflevector <32 x float> %140, <32 x float> undef, <4 x i32> <i32 4, i32 12, i32 20, i32 28>
  %146 = shufflevector <32 x float> %140, <32 x float> undef, <4 x i32> <i32 5, i32 13, i32 21, i32 29>
  %147 = shufflevector <32 x float> %140, <32 x float> undef, <4 x i32> <i32 6, i32 14, i32 22, i32 30>
  %148 = shufflevector <32 x float> %140, <32 x float> undef, <4 x i32> <i32 7, i32 15, i32 23, i32 31>
  %149 = fsub <4 x float> %141, %145
  %150 = fsub <4 x float> %142, %146
  %151 = fadd <4 x float> %141, %145
  %152 = fadd <4 x float> %142, %146
  %153 = fadd <4 x float> %143, %147
  %154 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %138, i64 3, i32 1
  %155 = fadd <4 x float> %144, %148
  %156 = fsub <4 x float> %151, %153
  %157 = fsub <4 x float> %152, %155
  %158 = fadd <4 x float> %151, %153
  %159 = fadd <4 x float> %152, %155
  %160 = fsub <4 x float> %143, %147
  %161 = fsub <4 x float> %144, %148
  %162 = fadd <4 x float> %149, %161
  %163 = fsub <4 x float> %150, %160
  %164 = fsub <4 x float> %149, %161
  %165 = fadd <4 x float> %150, %160
  %166 = getelementptr inbounds float, float* %154, i64 -7
  %167 = bitcast float* %166 to <32 x float>*
  %168 = shufflevector <4 x float> %158, <4 x float> %159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %169 = shufflevector <4 x float> %162, <4 x float> %163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %170 = shufflevector <4 x float> %156, <4 x float> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %171 = shufflevector <4 x float> %164, <4 x float> %165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %172 = shufflevector <8 x float> %168, <8 x float> %169, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %173 = shufflevector <8 x float> %170, <8 x float> %171, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %174 = shufflevector <16 x float> %172, <16 x float> %173, <32 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  store <32 x float> %174, <32 x float>* %167, align 4
  %175 = add i64 %136, 4
  %176 = icmp eq i64 %175, %131
  br i1 %176, label %177, label %135, !llvm.loop !2

177:                                              ; preds = %135
  %178 = icmp eq i64 %128, %131
  br i1 %178, label %578, label %179

179:                                              ; preds = %177, %125
  %180 = phi %struct.kiss_fft_cpx* [ %1, %125 ], [ %133, %177 ]
  %181 = phi i32 [ 0, %125 ], [ %134, %177 ]
  br label %182

182:                                              ; preds = %179, %182
  %183 = phi %struct.kiss_fft_cpx* [ %214, %182 ], [ %180, %179 ]
  %184 = phi i32 [ %215, %182 ], [ %181, %179 ]
  %185 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %183, i64 2, i32 0
  %186 = bitcast %struct.kiss_fft_cpx* %183 to <2 x float>*
  %187 = load <2 x float>, <2 x float>* %186, align 4
  %188 = shufflevector <2 x float> %187, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %189 = bitcast float* %185 to <2 x float>*
  %190 = load <2 x float>, <2 x float>* %189, align 4
  %191 = shufflevector <2 x float> %190, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %192 = fadd <4 x float> %188, %191
  %193 = fsub <4 x float> %188, %191
  %194 = shufflevector <4 x float> %192, <4 x float> %193, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %195 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %183, i64 1, i32 0
  %196 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %183, i64 3, i32 0
  %197 = bitcast float* %195 to <2 x float>*
  %198 = load <2 x float>, <2 x float>* %197, align 4
  %199 = shufflevector <2 x float> %198, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %200 = bitcast float* %196 to <2 x float>*
  %201 = load <2 x float>, <2 x float>* %200, align 4
  %202 = shufflevector <2 x float> %201, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %203 = fadd <4 x float> %199, %202
  %204 = fsub <4 x float> %199, %202
  %205 = shufflevector <4 x float> %203, <4 x float> %204, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %206 = fadd <4 x float> %194, %205
  %207 = fsub <4 x float> %194, %205
  %208 = shufflevector <4 x float> %206, <4 x float> %207, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %209 = bitcast %struct.kiss_fft_cpx* %183 to <4 x float>*
  store <4 x float> %208, <4 x float>* %209, align 4
  %210 = fsub <4 x float> %194, %205
  %211 = fadd <4 x float> %194, %205
  %212 = shufflevector <4 x float> %210, <4 x float> %211, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %213 = bitcast float* %185 to <4 x float>*
  store <4 x float> %212, <4 x float>* %213, align 4
  %214 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %183, i64 4
  %215 = add nuw nsw i32 %184, 1
  %216 = icmp eq i32 %215, %119
  br i1 %216, label %578, label %182, !llvm.loop !4

217:                                              ; preds = %117
  br i1 %123, label %218, label %578

218:                                              ; preds = %217
  %219 = mul nsw i32 %37, 3
  %220 = shl nsw i32 %37, 1
  %221 = icmp sgt i32 %37, 0
  %222 = sext i32 %37 to i64
  %223 = sext i32 %220 to i64
  %224 = sext i32 %219 to i64
  %225 = shl nsw i64 %121, 1
  %226 = mul nsw i64 %121, 3
  br i1 %221, label %227, label %578

227:                                              ; preds = %218
  %228 = sext i32 %49 to i64
  %229 = zext i32 %119 to i64
  br label %230

230:                                              ; preds = %311, %227
  %231 = phi i64 [ 0, %227 ], [ %312, %311 ]
  %232 = mul nsw i64 %231, %228
  %233 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %1, i64 %232
  %234 = load %struct.kiss_twiddle_cpx*, %struct.kiss_twiddle_cpx** %33, align 8
  br label %235

235:                                              ; preds = %235, %230
  %236 = phi %struct.kiss_twiddle_cpx* [ %234, %230 ], [ %299, %235 ]
  %237 = phi %struct.kiss_twiddle_cpx* [ %234, %230 ], [ %298, %235 ]
  %238 = phi %struct.kiss_twiddle_cpx* [ %234, %230 ], [ %297, %235 ]
  %239 = phi i32 [ 0, %230 ], [ %309, %235 ]
  %240 = phi %struct.kiss_fft_cpx* [ %233, %230 ], [ %308, %235 ]
  %241 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %240, i64 %222, i32 0
  %242 = load float, float* %241, align 4
  %243 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %238, i64 0, i32 0
  %244 = load float, float* %243, align 4
  %245 = fmul float %242, %244
  %246 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %240, i64 %222, i32 1
  %247 = load float, float* %246, align 4
  %248 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %238, i64 0, i32 1
  %249 = load float, float* %248, align 4
  %250 = fmul float %247, %249
  %251 = fsub float %245, %250
  %252 = fmul float %242, %249
  %253 = fmul float %244, %247
  %254 = fadd float %253, %252
  %255 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %240, i64 %223, i32 0
  %256 = load float, float* %255, align 4
  %257 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %237, i64 0, i32 0
  %258 = load float, float* %257, align 4
  %259 = fmul float %256, %258
  %260 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %240, i64 %223, i32 1
  %261 = load float, float* %260, align 4
  %262 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %237, i64 0, i32 1
  %263 = load float, float* %262, align 4
  %264 = fmul float %261, %263
  %265 = fsub float %259, %264
  %266 = fmul float %256, %263
  %267 = fmul float %258, %261
  %268 = fadd float %267, %266
  %269 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %240, i64 %224, i32 0
  %270 = load float, float* %269, align 4
  %271 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %236, i64 0, i32 0
  %272 = load float, float* %271, align 4
  %273 = fmul float %270, %272
  %274 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %240, i64 %224, i32 1
  %275 = load float, float* %274, align 4
  %276 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %236, i64 0, i32 1
  %277 = load float, float* %276, align 4
  %278 = fmul float %275, %277
  %279 = fsub float %273, %278
  %280 = fmul float %270, %277
  %281 = fmul float %272, %275
  %282 = fadd float %281, %280
  %283 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %240, i64 0, i32 0
  %284 = load float, float* %283, align 4
  %285 = fsub float %284, %265
  %286 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %240, i64 0, i32 1
  %287 = load float, float* %286, align 4
  %288 = fsub float %287, %268
  %289 = fadd float %265, %284
  store float %289, float* %283, align 4
  %290 = fadd float %268, %287
  store float %290, float* %286, align 4
  %291 = fadd float %251, %279
  %292 = fadd float %254, %282
  %293 = fsub float %251, %279
  %294 = fsub float %254, %282
  %295 = fsub float %289, %291
  store float %295, float* %255, align 4
  %296 = fsub float %290, %292
  store float %296, float* %260, align 4
  %297 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %238, i64 %121
  %298 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %237, i64 %225
  %299 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %236, i64 %226
  %300 = load float, float* %283, align 4
  %301 = fadd float %291, %300
  store float %301, float* %283, align 4
  %302 = load float, float* %286, align 4
  %303 = fadd float %292, %302
  store float %303, float* %286, align 4
  %304 = fadd float %285, %294
  store float %304, float* %241, align 4
  %305 = fsub float %288, %293
  store float %305, float* %246, align 4
  %306 = fsub float %285, %294
  store float %306, float* %269, align 4
  %307 = fadd float %288, %293
  store float %307, float* %274, align 4
  %308 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %240, i64 1
  %309 = add nuw nsw i32 %239, 1
  %310 = icmp eq i32 %309, %37
  br i1 %310, label %311, label %235

311:                                              ; preds = %235
  %312 = add nuw nsw i64 %231, 1
  %313 = icmp eq i64 %312, %229
  br i1 %313, label %578, label %230

314:                                              ; preds = %47
  %315 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %36
  %316 = load i32, i32* %315, align 4
  %317 = shl i32 %316, %25
  %318 = sext i32 %317 to i64
  %319 = shl nsw i32 %37, 1
  %320 = sext i32 %319 to i64
  %321 = load %struct.kiss_twiddle_cpx*, %struct.kiss_twiddle_cpx** %33, align 8
  %322 = sext i32 %37 to i64
  %323 = mul nsw i64 %318, %322
  %324 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %321, i64 %323, i32 1
  %325 = load float, float* %324, align 4
  %326 = icmp sgt i32 %316, 0
  br i1 %326, label %327, label %578

327:                                              ; preds = %314
  %328 = shl nsw i64 %318, 1
  %329 = sext i32 %49 to i64
  %330 = zext i32 %316 to i64
  br label %331

331:                                              ; preds = %403, %327
  %332 = phi %struct.kiss_twiddle_cpx* [ %321, %327 ], [ %404, %403 ]
  %333 = phi i64 [ 0, %327 ], [ %401, %403 ]
  %334 = mul nsw i64 %333, %329
  %335 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %1, i64 %334
  br label %336

336:                                              ; preds = %336, %331
  %337 = phi i64 [ %322, %331 ], [ %398, %336 ]
  %338 = phi %struct.kiss_twiddle_cpx* [ %332, %331 ], [ %373, %336 ]
  %339 = phi %struct.kiss_twiddle_cpx* [ %332, %331 ], [ %374, %336 ]
  %340 = phi %struct.kiss_fft_cpx* [ %335, %331 ], [ %397, %336 ]
  %341 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %340, i64 %322, i32 0
  %342 = load float, float* %341, align 4
  %343 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %338, i64 0, i32 0
  %344 = load float, float* %343, align 4
  %345 = fmul float %342, %344
  %346 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %340, i64 %322, i32 1
  %347 = load float, float* %346, align 4
  %348 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %338, i64 0, i32 1
  %349 = load float, float* %348, align 4
  %350 = fmul float %347, %349
  %351 = fsub float %345, %350
  %352 = fmul float %342, %349
  %353 = fmul float %344, %347
  %354 = fadd float %353, %352
  %355 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %340, i64 %320, i32 0
  %356 = load float, float* %355, align 4
  %357 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %339, i64 0, i32 0
  %358 = load float, float* %357, align 4
  %359 = fmul float %356, %358
  %360 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %340, i64 %320, i32 1
  %361 = load float, float* %360, align 4
  %362 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %339, i64 0, i32 1
  %363 = load float, float* %362, align 4
  %364 = fmul float %361, %363
  %365 = fsub float %359, %364
  %366 = fmul float %356, %363
  %367 = fmul float %358, %361
  %368 = fadd float %367, %366
  %369 = fadd float %351, %365
  %370 = fadd float %354, %368
  %371 = fsub float %351, %365
  %372 = fsub float %354, %368
  %373 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %338, i64 %318
  %374 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %339, i64 %328
  %375 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %340, i64 0, i32 0
  %376 = load float, float* %375, align 4
  %377 = fmul float %369, 5.000000e-01
  %378 = fsub float %376, %377
  store float %378, float* %341, align 4
  %379 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %340, i64 0, i32 1
  %380 = load float, float* %379, align 4
  %381 = fmul float %370, 5.000000e-01
  %382 = fsub float %380, %381
  store float %382, float* %346, align 4
  %383 = fmul float %325, %371
  %384 = fmul float %325, %372
  %385 = load float, float* %375, align 4
  %386 = fadd float %369, %385
  store float %386, float* %375, align 4
  %387 = load float, float* %379, align 4
  %388 = fadd float %370, %387
  store float %388, float* %379, align 4
  %389 = load float, float* %341, align 4
  %390 = fadd float %384, %389
  store float %390, float* %355, align 4
  %391 = load float, float* %346, align 4
  %392 = fsub float %391, %383
  store float %392, float* %360, align 4
  %393 = load float, float* %341, align 4
  %394 = fsub float %393, %384
  store float %394, float* %341, align 4
  %395 = load float, float* %346, align 4
  %396 = fadd float %383, %395
  store float %396, float* %346, align 4
  %397 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %340, i64 1
  %398 = add i64 %337, -1
  %399 = icmp eq i64 %398, 0
  br i1 %399, label %400, label %336

400:                                              ; preds = %336
  %401 = add nuw nsw i64 %333, 1
  %402 = icmp eq i64 %401, %330
  br i1 %402, label %578, label %403

403:                                              ; preds = %400
  %404 = load %struct.kiss_twiddle_cpx*, %struct.kiss_twiddle_cpx** %33, align 8
  br label %331

405:                                              ; preds = %47
  %406 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %36
  %407 = load i32, i32* %406, align 4
  %408 = shl i32 %407, %25
  %409 = sext i32 %408 to i64
  %410 = load %struct.kiss_twiddle_cpx*, %struct.kiss_twiddle_cpx** %33, align 8
  %411 = sext i32 %37 to i64
  %412 = mul nsw i64 %409, %411
  %413 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %412, i32 0
  %414 = load float, float* %413, align 4
  %415 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %412, i32 1
  %416 = load float, float* %415, align 4
  %417 = shl nsw i64 %409, 1
  %418 = mul nsw i64 %417, %411
  %419 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %418, i32 0
  %420 = load float, float* %419, align 4
  %421 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %418, i32 1
  %422 = load float, float* %421, align 4
  %423 = icmp sgt i32 %407, 0
  br i1 %423, label %424, label %578

424:                                              ; preds = %405
  %425 = shl nsw i32 %37, 1
  %426 = sext i32 %425 to i64
  %427 = mul nsw i32 %37, 3
  %428 = sext i32 %427 to i64
  %429 = shl nsw i32 %37, 2
  %430 = sext i32 %429 to i64
  %431 = icmp sgt i32 %37, 0
  %432 = sext i32 %49 to i64
  %433 = zext i32 %407 to i64
  %434 = zext i32 %37 to i64
  br label %435

435:                                              ; preds = %575, %424
  %436 = phi i64 [ 0, %424 ], [ %576, %575 ]
  %437 = mul nsw i64 %436, %432
  %438 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %1, i64 %437
  br i1 %431, label %439, label %575

439:                                              ; preds = %435
  %440 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %438, i64 %430
  %441 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %438, i64 %428
  %442 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %438, i64 %426
  %443 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %438, i64 %411
  br label %444

444:                                              ; preds = %444, %439
  %445 = phi i64 [ 0, %439 ], [ %573, %444 ]
  %446 = phi %struct.kiss_fft_cpx* [ %440, %439 ], [ %572, %444 ]
  %447 = phi %struct.kiss_fft_cpx* [ %441, %439 ], [ %571, %444 ]
  %448 = phi %struct.kiss_fft_cpx* [ %442, %439 ], [ %570, %444 ]
  %449 = phi %struct.kiss_fft_cpx* [ %443, %439 ], [ %569, %444 ]
  %450 = phi %struct.kiss_fft_cpx* [ %438, %439 ], [ %568, %444 ]
  %451 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %450, i64 0, i32 0
  %452 = load float, float* %451, align 4
  %453 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %450, i64 0, i32 1
  %454 = load float, float* %453, align 4
  %455 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %449, i64 0, i32 0
  %456 = load float, float* %455, align 4
  %457 = mul i64 %445, %409
  %458 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %457, i32 0
  %459 = load float, float* %458, align 4
  %460 = fmul float %456, %459
  %461 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %449, i64 0, i32 1
  %462 = load float, float* %461, align 4
  %463 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %457, i32 1
  %464 = load float, float* %463, align 4
  %465 = fmul float %462, %464
  %466 = fsub float %460, %465
  %467 = fmul float %456, %464
  %468 = fmul float %459, %462
  %469 = fadd float %468, %467
  %470 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %448, i64 0, i32 0
  %471 = load float, float* %470, align 4
  %472 = shl nuw nsw i64 %445, 1
  %473 = mul i64 %472, %409
  %474 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %473, i32 0
  %475 = load float, float* %474, align 4
  %476 = fmul float %471, %475
  %477 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %448, i64 0, i32 1
  %478 = load float, float* %477, align 4
  %479 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %473, i32 1
  %480 = load float, float* %479, align 4
  %481 = fmul float %478, %480
  %482 = fsub float %476, %481
  %483 = fmul float %471, %480
  %484 = fmul float %475, %478
  %485 = fadd float %484, %483
  %486 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %447, i64 0, i32 0
  %487 = load float, float* %486, align 4
  %488 = mul i64 %445, 3
  %489 = and i64 %488, 4294967295
  %490 = mul nsw i64 %489, %409
  %491 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %490, i32 0
  %492 = load float, float* %491, align 4
  %493 = fmul float %487, %492
  %494 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %447, i64 0, i32 1
  %495 = load float, float* %494, align 4
  %496 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %490, i32 1
  %497 = load float, float* %496, align 4
  %498 = fmul float %495, %497
  %499 = fsub float %493, %498
  %500 = fmul float %487, %497
  %501 = fmul float %492, %495
  %502 = fadd float %501, %500
  %503 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %446, i64 0, i32 0
  %504 = load float, float* %503, align 4
  %505 = shl i64 %445, 2
  %506 = and i64 %505, 4294967292
  %507 = mul nsw i64 %506, %409
  %508 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %507, i32 0
  %509 = load float, float* %508, align 4
  %510 = fmul float %504, %509
  %511 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %446, i64 0, i32 1
  %512 = load float, float* %511, align 4
  %513 = getelementptr inbounds %struct.kiss_twiddle_cpx, %struct.kiss_twiddle_cpx* %410, i64 %507, i32 1
  %514 = load float, float* %513, align 4
  %515 = fmul float %512, %514
  %516 = fsub float %510, %515
  %517 = fmul float %504, %514
  %518 = fmul float %509, %512
  %519 = fadd float %518, %517
  %520 = fadd float %466, %516
  %521 = fadd float %469, %519
  %522 = fsub float %466, %516
  %523 = fsub float %469, %519
  %524 = fadd float %482, %499
  %525 = fadd float %485, %502
  %526 = fsub float %482, %499
  %527 = fsub float %485, %502
  %528 = fadd float %524, %520
  %529 = fadd float %452, %528
  store float %529, float* %451, align 4
  %530 = fadd float %525, %521
  %531 = fadd float %454, %530
  store float %531, float* %453, align 4
  %532 = fmul float %414, %520
  %533 = fmul float %420, %524
  %534 = fadd float %533, %532
  %535 = fadd float %452, %534
  %536 = fmul float %414, %521
  %537 = fmul float %420, %525
  %538 = fadd float %537, %536
  %539 = fadd float %454, %538
  %540 = fmul float %416, %523
  %541 = fmul float %422, %527
  %542 = fadd float %541, %540
  %543 = fmul float %416, %522
  %544 = fmul float %422, %526
  %545 = fadd float %544, %543
  %546 = fsub float %535, %542
  store float %546, float* %455, align 4
  %547 = fadd float %545, %539
  store float %547, float* %461, align 4
  %548 = fadd float %542, %535
  store float %548, float* %503, align 4
  %549 = fsub float %539, %545
  store float %549, float* %511, align 4
  %550 = fmul float %420, %520
  %551 = fmul float %414, %524
  %552 = fadd float %551, %550
  %553 = fadd float %452, %552
  %554 = fmul float %420, %521
  %555 = fmul float %414, %525
  %556 = fadd float %555, %554
  %557 = fadd float %454, %556
  %558 = fmul float %416, %527
  %559 = fmul float %422, %523
  %560 = fsub float %558, %559
  %561 = fmul float %422, %522
  %562 = fmul float %416, %526
  %563 = fsub float %561, %562
  %564 = fadd float %560, %553
  store float %564, float* %470, align 4
  %565 = fadd float %563, %557
  store float %565, float* %477, align 4
  %566 = fsub float %553, %560
  store float %566, float* %486, align 4
  %567 = fsub float %557, %563
  store float %567, float* %494, align 4
  %568 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %450, i64 1
  %569 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %449, i64 1
  %570 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %448, i64 1
  %571 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %447, i64 1
  %572 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %446, i64 1
  %573 = add nuw nsw i64 %445, 1
  %574 = icmp eq i64 %573, %434
  br i1 %574, label %575, label %444

575:                                              ; preds = %444, %435
  %576 = add nuw nsw i64 %436, 1
  %577 = icmp eq i64 %576, %433
  br i1 %577, label %578, label %435

578:                                              ; preds = %575, %400, %311, %182, %61, %177, %405, %314, %218, %217, %124, %58, %47
  %579 = add nsw i64 %36, -1
  %580 = icmp sgt i64 %36, 0
  br i1 %580, label %35, label %581

581:                                              ; preds = %578
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @opus_fft_c(%struct.kiss_fft_state* nocapture readonly, %struct.kiss_fft_cpx* readonly, %struct.kiss_fft_cpx*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = icmp eq %struct.kiss_fft_cpx* %1, %2
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %36

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 4
  br label %14

13:                                               ; preds = %3
  tail call void @celt_fatal(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 580) #4
  unreachable

14:                                               ; preds = %11, %14
  %15 = phi i64 [ 0, %11 ], [ %32, %14 ]
  %16 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %1, i64 %15, i32 0
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %1, i64 %15, i32 1
  %19 = load float, float* %18, align 4
  %20 = fmul float %5, %17
  %21 = load i16*, i16** %12, align 8
  %22 = getelementptr inbounds i16, i16* %21, i64 %15
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i64
  %25 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %2, i64 %24, i32 0
  store float %20, float* %25, align 4
  %26 = fmul float %5, %19
  %27 = load i16*, i16** %12, align 8
  %28 = getelementptr inbounds i16, i16* %27, i64 %15
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i64
  %31 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %2, i64 %30, i32 1
  store float %26, float* %31, align 4
  %32 = add nuw nsw i64 %15, 1
  %33 = load i32, i32* %8, align 8
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %32, %34
  br i1 %35, label %14, label %36

36:                                               ; preds = %14, %7
  tail call void @opus_fft_impl(%struct.kiss_fft_state* %0, %struct.kiss_fft_cpx* %2)
  ret void
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @opus_ifft_c(%struct.kiss_fft_state* nocapture readonly, %struct.kiss_fft_cpx* readonly, %struct.kiss_fft_cpx*) local_unnamed_addr #0 {
  %4 = icmp eq %struct.kiss_fft_cpx* %1, %2
  br i1 %4, label %11, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %38

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.kiss_fft_state, %struct.kiss_fft_state* %0, i64 0, i32 4
  br label %14

11:                                               ; preds = %3
  tail call void @celt_fatal(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 595) #4
  unreachable

12:                                               ; preds = %14
  %13 = icmp sgt i32 %26, 0
  br i1 %13, label %29, label %38

14:                                               ; preds = %9, %14
  %15 = phi i64 [ 0, %9 ], [ %25, %14 ]
  %16 = load i16*, i16** %10, align 8
  %17 = getelementptr inbounds i16, i16* %16, i64 %15
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i64
  %20 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %2, i64 %19
  %21 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %1, i64 %15
  %22 = bitcast %struct.kiss_fft_cpx* %21 to i64*
  %23 = bitcast %struct.kiss_fft_cpx* %20 to i64*
  %24 = load i64, i64* %22, align 4
  store i64 %24, i64* %23, align 4
  %25 = add nuw nsw i64 %15, 1
  %26 = load i32, i32* %6, align 8
  %27 = sext i32 %26 to i64
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %14, label %12

29:                                               ; preds = %12, %29
  %30 = phi i64 [ %34, %29 ], [ 0, %12 ]
  %31 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %2, i64 %30, i32 1
  %32 = load float, float* %31, align 4
  %33 = fsub float -0.000000e+00, %32
  store float %33, float* %31, align 4
  %34 = add nuw nsw i64 %30, 1
  %35 = load i32, i32* %6, align 8
  %36 = sext i32 %35 to i64
  %37 = icmp slt i64 %34, %36
  br i1 %37, label %29, label %38

38:                                               ; preds = %29, %5, %12
  tail call void @opus_fft_impl(%struct.kiss_fft_state* %0, %struct.kiss_fft_cpx* %2)
  %39 = load i32, i32* %6, align 8
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %50

41:                                               ; preds = %38, %41
  %42 = phi i64 [ %46, %41 ], [ 0, %38 ]
  %43 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %2, i64 %42, i32 1
  %44 = load float, float* %43, align 4
  %45 = fsub float -0.000000e+00, %44
  store float %45, float* %43, align 4
  %46 = add nuw nsw i64 %42, 1
  %47 = load i32, i32* %6, align 8
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %46, %48
  br i1 %49, label %41, label %50

50:                                               ; preds = %41, %38
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
