; ModuleID = '../../third_party/dawn/third_party/tint/src/writer/spirv/binary_writer.cc'
source_filename = "../../third_party/dawn/third_party/tint/src/writer/spirv/binary_writer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.tint::writer::spirv::BinaryWriter" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.tint::writer::spirv::Builder" = type <{ %"class.tint::ProgramBuilder", %"class.std::__1::basic_string", i32, i32, %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.std::__1::vector.208", %"class.std::__1::unordered_map.215", %"class.std::__1::unordered_map.239", %"class.std::__1::unordered_map.215", %"class.std::__1::unordered_map.263", %"class.std::__1::unordered_map.215", %"class.std::__1::unordered_map.215", %"class.std::__1::unordered_map.215", %"class.tint::ScopeStack", %"class.std::__1::unordered_map.297", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::unordered_set", i8, [7 x i8] }>
%"class.tint::ProgramBuilder" = type <{ i32 (...)**, %"class.tint::ProgramBuilder::TypesBuilder", %"class.tint::ProgramID", [4 x i8], %"class.tint::sem::Manager", %"class.tint::BlockAllocator.27", %"class.tint::BlockAllocator.36", %"class.tint::ast::Module"*, %"class.tint::sem::Info", %"class.tint::SymbolTable", %"class.tint::diag::List", %"class.tint::Source", i8, i8, [6 x i8] }>
%"class.tint::ProgramBuilder::TypesBuilder" = type { %"class.tint::ProgramBuilder"* }
%"class.tint::ProgramID" = type { i32 }
%"class.tint::sem::Manager" = type { %"class.std::__1::unordered_map", %"class.tint::BlockAllocator" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.tint::BlockAllocator" = type { %"class.std::__1::vector.19" }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.std::__1::unique_ptr.21"*, %"class.std::__1::unique_ptr.21"*, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::unique_ptr.21" = type opaque
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.std::__1::unique_ptr.21"* }
%"class.tint::BlockAllocator.27" = type { %"class.std::__1::vector.28" }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { %"class.std::__1::unique_ptr.30"*, %"class.std::__1::unique_ptr.30"*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.347" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.348" }
%"struct.std::__1::__compressed_pair_elem.348" = type { %"class.tint::ast::Node"* }
%"class.tint::ast::Node" = type { %"class.tint::Castable.45", %"class.tint::ProgramID", %"class.tint::Source" }
%"class.tint::Castable.45" = type { %"class.tint::Cloneable" }
%"class.tint::Cloneable" = type { %"class.tint::Castable.46" }
%"class.tint::Castable.46" = type { %"class.tint::CastableBase" }
%"class.tint::CastableBase" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.std::__1::unique_ptr.30"* }
%"class.tint::BlockAllocator.36" = type { %"class.std::__1::vector.37" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.std::__1::unique_ptr.39"*, %"class.std::__1::unique_ptr.39"*, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::unique_ptr.39" = type opaque
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::unique_ptr.39"* }
%"class.tint::ast::Module" = type { %"class.tint::Castable", %"class.std::__1::vector.59", %"class.std::__1::vector.66", %"class.tint::ast::FunctionList", %"class.std::__1::vector.78" }
%"class.tint::Castable" = type { %"class.tint::ast::Node" }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"class.tint::ast::Node"**, %"class.tint::ast::Node"**, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.tint::ast::Node"** }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.tint::ast::NamedType"**, %"class.tint::ast::NamedType"**, %"class.std::__1::__compressed_pair.70" }
%"class.tint::ast::NamedType" = type { %"class.tint::Castable.68", %"class.tint::Symbol" }
%"class.tint::Castable.68" = type { %"class.tint::ast::Type" }
%"class.tint::ast::Type" = type { %"class.tint::Castable.69" }
%"class.tint::Castable.69" = type { %"class.tint::ast::Node" }
%"class.tint::Symbol" = type { i32, %"class.tint::ProgramID" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.tint::ast::NamedType"** }
%"class.tint::ast::FunctionList" = type { %"class.std::__1::vector.75" }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { %"class.tint::ast::Function"**, %"class.tint::ast::Function"**, %"class.std::__1::__compressed_pair.104" }
%"class.tint::ast::Function" = type { %"class.tint::Castable.77", %"class.tint::Symbol", %"class.std::__1::vector.78", %"class.tint::ast::Type"*, %"class.tint::ast::BlockStatement"*, %"class.std::__1::vector.82", %"class.std::__1::vector.82" }
%"class.tint::Castable.77" = type { %"class.tint::ast::Node" }
%"class.tint::ast::BlockStatement" = type { %"class.tint::Castable.95", %"class.std::__1::vector.97" }
%"class.tint::Castable.95" = type { %"class.tint::ast::Statement" }
%"class.tint::ast::Statement" = type { %"class.tint::Castable.96" }
%"class.tint::Castable.96" = type { %"class.tint::ast::Node" }
%"class.std::__1::vector.97" = type { %"class.std::__1::__vector_base.98" }
%"class.std::__1::__vector_base.98" = type { %"class.tint::ast::Statement"**, %"class.tint::ast::Statement"**, %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.tint::ast::Statement"** }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"class.tint::ast::Decoration"**, %"class.tint::ast::Decoration"**, %"class.std::__1::__compressed_pair.85" }
%"class.tint::ast::Decoration" = type { %"class.tint::Castable.84" }
%"class.tint::Castable.84" = type { %"class.tint::ast::Node" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.tint::ast::Decoration"** }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.tint::ast::Function"** }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"class.tint::ast::Variable"**, %"class.tint::ast::Variable"**, %"class.std::__1::__compressed_pair.90" }
%"class.tint::ast::Variable" = type <{ %"class.tint::Castable.80", %"class.tint::Symbol", %"class.tint::ast::Type"*, i8, [7 x i8], %"class.tint::ast::Expression"*, %"class.std::__1::vector.82", i32, [4 x i8] }>
%"class.tint::Castable.80" = type { %"class.tint::ast::Node" }
%"class.tint::ast::Expression" = type { %"class.tint::Castable.81" }
%"class.tint::Castable.81" = type { %"class.tint::ast::Node" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.tint::ast::Variable"** }
%"class.tint::sem::Info" = type { %"class.std::__1::unordered_map.109" }
%"class.std::__1::unordered_map.109" = type { %"class.std::__1::__hash_table.110" }
%"class.std::__1::__hash_table.110" = type <{ %"class.std::__1::unique_ptr.111", %"class.std::__1::__compressed_pair.121", %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.131", [4 x i8] }>
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113", %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.std::__1::__hash_node_base.114"** }
%"struct.std::__1::__hash_node_base.114" = type { %"struct.std::__1::__hash_node_base.114"* }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.std::__1::__bucket_list_deallocator.116" }
%"class.std::__1::__bucket_list_deallocator.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"struct.std::__1::__hash_node_base.114" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.tint::SymbolTable" = type { i32, [4 x i8], %"class.std::__1::unordered_map.137", %"class.std::__1::unordered_map.163", %"class.tint::ProgramID", [4 x i8] }
%"class.std::__1::unordered_map.137" = type { %"class.std::__1::__hash_table.138" }
%"class.std::__1::__hash_table.138" = type <{ %"class.std::__1::unique_ptr.139", %"class.std::__1::__compressed_pair.149", %"class.std::__1::__compressed_pair.154", %"class.std::__1::__compressed_pair.157", [4 x i8] }>
%"class.std::__1::unique_ptr.139" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141", %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"struct.std::__1::__hash_node_base.142"** }
%"struct.std::__1::__hash_node_base.142" = type { %"struct.std::__1::__hash_node_base.142"* }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.std::__1::__bucket_list_deallocator.144" }
%"class.std::__1::__bucket_list_deallocator.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"struct.std::__1::__hash_node_base.142" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.163" = type { %"class.std::__1::__hash_table.164" }
%"class.std::__1::__hash_table.164" = type <{ %"class.std::__1::unique_ptr.165", %"class.std::__1::__compressed_pair.175", %"class.std::__1::__compressed_pair.180", %"class.std::__1::__compressed_pair.183", [4 x i8] }>
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167", %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"struct.std::__1::__hash_node_base.168"** }
%"struct.std::__1::__hash_node_base.168" = type { %"struct.std::__1::__hash_node_base.168"* }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.std::__1::__bucket_list_deallocator.170" }
%"class.std::__1::__bucket_list_deallocator.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"struct.std::__1::__hash_node_base.168" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.tint::diag::List" = type { %"class.std::__1::vector.187", i64 }
%"class.std::__1::vector.187" = type { %"class.std::__1::__vector_base.188" }
%"class.std::__1::__vector_base.188" = type { %"class.tint::diag::Diagnostic"*, %"class.tint::diag::Diagnostic"*, %"class.std::__1::__compressed_pair.189" }
%"class.tint::diag::Diagnostic" = type { i32, %"class.tint::Source", %"class.std::__1::basic_string", i8* }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.tint::diag::Diagnostic"* }
%"class.tint::Source" = type { %"class.tint::Source::Range", %"class.std::__1::basic_string", %"class.tint::Source::FileContent"* }
%"class.tint::Source::Range" = type { %"class.tint::Source::Location", %"class.tint::Source::Location" }
%"class.tint::Source::Location" = type { i64, i64 }
%"class.tint::Source::FileContent" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.52" }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.194" = type { %"class.std::__1::__vector_base.195" }
%"class.std::__1::__vector_base.195" = type { %"class.tint::writer::spirv::Instruction"*, %"class.tint::writer::spirv::Instruction"*, %"class.std::__1::__compressed_pair.203" }
%"class.tint::writer::spirv::Instruction" = type { i32, %"class.std::__1::vector.196" }
%"class.std::__1::vector.196" = type { %"class.std::__1::__vector_base.197" }
%"class.std::__1::__vector_base.197" = type { %"class.tint::writer::spirv::Operand"*, %"class.tint::writer::spirv::Operand"*, %"class.std::__1::__compressed_pair.198" }
%"class.tint::writer::spirv::Operand" = type { i32, float, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.tint::writer::spirv::Operand"* }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.tint::writer::spirv::Instruction"* }
%"class.std::__1::vector.208" = type { %"class.std::__1::__vector_base.209" }
%"class.std::__1::__vector_base.209" = type { %"class.tint::writer::spirv::Function"*, %"class.tint::writer::spirv::Function"*, %"class.std::__1::__compressed_pair.210" }
%"class.tint::writer::spirv::Function" = type { %"class.tint::writer::spirv::Instruction", %"class.tint::writer::spirv::Operand", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.std::__1::vector.194" }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"class.tint::writer::spirv::Function"* }
%"class.std::__1::unordered_map.239" = type { %"class.std::__1::__hash_table.240" }
%"class.std::__1::__hash_table.240" = type <{ %"class.std::__1::unique_ptr.241", %"class.std::__1::__compressed_pair.251", %"class.std::__1::__compressed_pair.256", %"class.std::__1::__compressed_pair.259", [4 x i8] }>
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243", %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"struct.std::__1::__hash_node_base.244"** }
%"struct.std::__1::__hash_node_base.244" = type { %"struct.std::__1::__hash_node_base.244"* }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"class.std::__1::__bucket_list_deallocator.246" }
%"class.std::__1::__bucket_list_deallocator.246" = type { %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"struct.std::__1::__hash_node_base.244" }
%"class.std::__1::__compressed_pair.256" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.263" = type { %"class.std::__1::__hash_table.264" }
%"class.std::__1::__hash_table.264" = type <{ %"class.std::__1::unique_ptr.265", %"class.std::__1::__compressed_pair.275", %"class.std::__1::__compressed_pair.280", %"class.std::__1::__compressed_pair.284", [4 x i8] }>
%"class.std::__1::unique_ptr.265" = type { %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.267", %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.267" = type { %"struct.std::__1::__hash_node_base.268"** }
%"struct.std::__1::__hash_node_base.268" = type { %"struct.std::__1::__hash_node_base.268"* }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"class.std::__1::__bucket_list_deallocator.270" }
%"class.std::__1::__bucket_list_deallocator.270" = type { %"class.std::__1::__compressed_pair.271" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"struct.std::__1::__hash_node_base.268" }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.215" = type { %"class.std::__1::__hash_table.216" }
%"class.std::__1::__hash_table.216" = type <{ %"class.std::__1::unique_ptr.217", %"class.std::__1::__compressed_pair.227", %"class.std::__1::__compressed_pair.232", %"class.std::__1::__compressed_pair.235", [4 x i8] }>
%"class.std::__1::unique_ptr.217" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219", %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.std::__1::__hash_node_base.220"** }
%"struct.std::__1::__hash_node_base.220" = type { %"struct.std::__1::__hash_node_base.220"* }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.std::__1::__bucket_list_deallocator.222" }
%"class.std::__1::__bucket_list_deallocator.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"struct.std::__1::__hash_node_base.220" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.tint::ScopeStack" = type { %"class.std::__1::vector.290" }
%"class.std::__1::vector.290" = type { %"class.std::__1::__vector_base.291" }
%"class.std::__1::__vector_base.291" = type { %"class.std::__1::unordered_map.239"*, %"class.std::__1::unordered_map.239"*, %"class.std::__1::__compressed_pair.292" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"class.std::__1::unordered_map.239"* }
%"class.std::__1::unordered_map.297" = type { %"class.std::__1::__hash_table.298" }
%"class.std::__1::__hash_table.298" = type <{ %"class.std::__1::unique_ptr.299", %"class.std::__1::__compressed_pair.309", %"class.std::__1::__compressed_pair.314", %"class.std::__1::__compressed_pair.319", [4 x i8] }>
%"class.std::__1::unique_ptr.299" = type { %"class.std::__1::__compressed_pair.300" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301", %"struct.std::__1::__compressed_pair_elem.303" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"struct.std::__1::__hash_node_base.302"** }
%"struct.std::__1::__hash_node_base.302" = type { %"struct.std::__1::__hash_node_base.302"* }
%"struct.std::__1::__compressed_pair_elem.303" = type { %"class.std::__1::__bucket_list_deallocator.304" }
%"class.std::__1::__bucket_list_deallocator.304" = type { %"class.std::__1::__compressed_pair.305" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"struct.std::__1::__hash_node_base.302" }
%"class.std::__1::__compressed_pair.314" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.325" }
%"class.std::__1::__hash_table.325" = type <{ %"class.std::__1::unique_ptr.326", %"class.std::__1::__compressed_pair.336", %"class.std::__1::__compressed_pair.341", %"class.std::__1::__compressed_pair.343", [4 x i8] }>
%"class.std::__1::unique_ptr.326" = type { %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.328", %"struct.std::__1::__compressed_pair_elem.330" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"struct.std::__1::__hash_node_base.329"** }
%"struct.std::__1::__hash_node_base.329" = type { %"struct.std::__1::__hash_node_base.329"* }
%"struct.std::__1::__compressed_pair_elem.330" = type { %"class.std::__1::__bucket_list_deallocator.331" }
%"class.std::__1::__bucket_list_deallocator.331" = type { %"class.std::__1::__compressed_pair.332" }
%"class.std::__1::__compressed_pair.332" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.336" = type { %"struct.std::__1::__compressed_pair_elem.337" }
%"struct.std::__1::__compressed_pair_elem.337" = type { %"struct.std::__1::__hash_node_base.329" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.343" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, %"class.tint::writer::spirv::Instruction"*)* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj = comdat any

@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN4tint6writer5spirv12BinaryWriter12WriteBuilderEPNS6_7BuilderEE3$_0FvRKNS6_11InstructionEEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8

@_ZN4tint6writer5spirv12BinaryWriterC1Ev = hidden unnamed_addr alias void (%"class.tint::writer::spirv::BinaryWriter"*), void (%"class.tint::writer::spirv::BinaryWriter"*)* @_ZN4tint6writer5spirv12BinaryWriterC2Ev
@_ZN4tint6writer5spirv12BinaryWriterD1Ev = hidden unnamed_addr alias void (%"class.tint::writer::spirv::BinaryWriter"*), void (%"class.tint::writer::spirv::BinaryWriter"*)* @_ZN4tint6writer5spirv12BinaryWriterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint6writer5spirv12BinaryWriterC2Ev(%"class.tint::writer::spirv::BinaryWriter"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint6writer5spirv12BinaryWriterD2Ev(%"class.tint::writer::spirv::BinaryWriter"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #8
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint6writer5spirv12BinaryWriter12WriteBuilderEPNS1_7BuilderE(%"class.tint::writer::spirv::BinaryWriter"*, %"class.tint::writer::spirv::Builder"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::function", align 8
  %4 = tail call i32 @_ZNK4tint6writer5spirv7Builder10total_sizeEv(%"class.tint::writer::spirv::Builder"* %1) #7
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 2
  %13 = icmp ult i64 %12, %5
  br i1 %13, label %14, label %35

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %10
  %19 = ashr exact i64 %18, 2
  %20 = shl nuw nsw i64 %5, 2
  %21 = tail call i8* @_Znwm(i64 %20) #8
  %22 = bitcast i8* %21 to i32*
  %23 = getelementptr inbounds i32, i32* %22, i64 %19
  %24 = ptrtoint i32* %23 to i64
  %25 = getelementptr inbounds i32, i32* %22, i64 %5
  %26 = ptrtoint i32* %25 to i64
  %27 = ptrtoint i8* %21 to i64
  %28 = icmp sgt i64 %18, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %14
  %30 = inttoptr i64 %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %21, i8* align 4 %30, i64 %18, i1 false) #7
  br label %31

31:                                               ; preds = %29, %14
  store i64 %27, i64* %9, align 8
  store i64 %24, i64* %16, align 8
  store i64 %26, i64* %7, align 8
  %32 = icmp eq i64 %10, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %31
  %34 = inttoptr i64 %10 to i8*
  tail call void @_ZdlPv(i8* %34) #8
  br label %35

35:                                               ; preds = %2, %31, %33
  %36 = ptrtoint %"class.tint::writer::spirv::BinaryWriter"* %0 to i64
  %37 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 1, i32 0
  %38 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 2
  store void (%"union.std::__1::__function::__policy_storage"*, %"class.tint::writer::spirv::Instruction"*)* @"_ZNSt3__110__function16__policy_invokerIFvRKN4tint6writer5spirv11InstructionEEE11__call_implINS0_20__default_alloc_funcIZNS4_12BinaryWriter12WriteBuilderEPNS4_7BuilderEE3$_0S8_EEEEvPKNS0_16__policy_storageES7_", void (%"union.std::__1::__function::__policy_storage"*, %"class.tint::writer::spirv::Instruction"*)** %37, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN4tint6writer5spirv12BinaryWriter12WriteBuilderEPNS6_7BuilderEE3$_0FvRKNS6_11InstructionEEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %38, align 8
  %39 = bitcast %"class.std::__1::function"* %3 to i64*
  store i64 %36, i64* %39, align 8
  call void @_ZNK4tint6writer5spirv7Builder7iterateENSt3__18functionIFvRKNS1_11InstructionEEEE(%"class.tint::writer::spirv::Builder"* %1, %"class.std::__1::function"* nonnull %3) #7
  %40 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %38, align 8
  %41 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %40, i64 0, i32 1
  %42 = load void (i8*)*, void (i8*)** %41, align 8
  %43 = icmp eq void (i8*)* %42, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %35
  %45 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  call void %42(i8* %46) #7
  br label %47

47:                                               ; preds = %35, %44
  ret void
}

declare i32 @_ZNK4tint6writer5spirv7Builder10total_sizeEv(%"class.tint::writer::spirv::Builder"*) local_unnamed_addr #1

declare void @_ZNK4tint6writer5spirv7Builder7iterateENSt3__18functionIFvRKNS1_11InstructionEEEE(%"class.tint::writer::spirv::Builder"*, %"class.std::__1::function"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint6writer5spirv12BinaryWriter16WriteInstructionERKNS1_11InstructionE(%"class.tint::writer::spirv::BinaryWriter"*, %"class.tint::writer::spirv::Instruction"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4tint6writer5spirv12BinaryWriter19process_instructionERKNS1_11InstructionE(%"class.tint::writer::spirv::BinaryWriter"* %0, %"class.tint::writer::spirv::Instruction"* dereferenceable(32) %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint6writer5spirv12BinaryWriter19process_instructionERKNS1_11InstructionE(%"class.tint::writer::spirv::BinaryWriter"*, %"class.tint::writer::spirv::Instruction"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZNK4tint6writer5spirv11Instruction11word_lengthEv(%"class.tint::writer::spirv::Instruction"* %1) #7
  %4 = shl i32 %3, 16
  %5 = getelementptr inbounds %"class.tint::writer::spirv::Instruction", %"class.tint::writer::spirv::Instruction"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = or i32 %4, %6
  %8 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i32*, i32** %10, align 8
  %12 = icmp ult i32* %9, %11
  %13 = ptrtoint i32* %11 to i64
  br i1 %12, label %14, label %18

14:                                               ; preds = %2
  store i32 %7, i32* %9, align 4
  %15 = getelementptr inbounds i32, i32* %9, i64 1
  %16 = ptrtoint i32* %15 to i64
  %17 = bitcast i32** %8 to i64*
  store i64 %16, i64* %17, align 8
  br label %74

18:                                               ; preds = %2
  %19 = ptrtoint i32* %9 to i64
  %20 = bitcast i32** %8 to i64*
  %21 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %19, %22
  %24 = ashr exact i64 %23, 2
  %25 = add nsw i64 %24, 1
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %29

27:                                               ; preds = %18
  %28 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %28) #9
  unreachable

29:                                               ; preds = %18
  %30 = bitcast i32** %10 to i64*
  %31 = sub i64 %13, %22
  %32 = ashr exact i64 %31, 2
  %33 = icmp ult i64 %32, 2305843009213693951
  br i1 %33, label %34, label %42

34:                                               ; preds = %29
  %35 = ashr exact i64 %31, 1
  %36 = icmp ult i64 %35, %25
  %37 = select i1 %36, i64 %25, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %47, label %39

39:                                               ; preds = %34
  %40 = icmp ugt i64 %37, 4611686018427387903
  br i1 %40, label %41, label %42

41:                                               ; preds = %39
  tail call void @abort() #9
  unreachable

42:                                               ; preds = %39, %29
  %43 = phi i64 [ %37, %39 ], [ 4611686018427387903, %29 ]
  %44 = shl i64 %43, 2
  %45 = tail call i8* @_Znwm(i64 %44) #8
  %46 = bitcast i8* %45 to i32*
  br label %47

47:                                               ; preds = %42, %34
  %48 = phi i64 [ %43, %42 ], [ 0, %34 ]
  %49 = phi i32* [ %46, %42 ], [ null, %34 ]
  %50 = getelementptr inbounds i32, i32* %49, i64 %24
  %51 = getelementptr inbounds i32, i32* %49, i64 %48
  %52 = ptrtoint i32* %51 to i64
  store i32 %7, i32* %50, align 4
  %53 = getelementptr inbounds i32, i32* %50, i64 1
  %54 = ptrtoint i32* %53 to i64
  %55 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %56 = load i32*, i32** %55, align 8
  %57 = load i64, i64* %20, align 8
  %58 = ptrtoint i32* %56 to i64
  %59 = sub i64 %57, %58
  %60 = ashr exact i64 %59, 2
  %61 = sub nsw i64 0, %60
  %62 = getelementptr inbounds i32, i32* %50, i64 %61
  %63 = ptrtoint i32* %62 to i64
  %64 = icmp sgt i64 %59, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %47
  %66 = bitcast i32* %62 to i8*
  %67 = bitcast i32* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 %59, i1 false) #7
  %68 = load i32*, i32** %55, align 8
  br label %69

69:                                               ; preds = %65, %47
  %70 = phi i32* [ %56, %47 ], [ %68, %65 ]
  store i64 %63, i64* %21, align 8
  store i64 %54, i64* %20, align 8
  store i64 %52, i64* %30, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  tail call void @_ZdlPv(i8* %73) #8
  br label %74

74:                                               ; preds = %14, %69, %72
  %75 = getelementptr inbounds %"class.tint::writer::spirv::Instruction", %"class.tint::writer::spirv::Instruction"* %1, i64 0, i32 1, i32 0, i32 0
  %76 = load %"class.tint::writer::spirv::Operand"*, %"class.tint::writer::spirv::Operand"** %75, align 8
  %77 = getelementptr inbounds %"class.tint::writer::spirv::Instruction", %"class.tint::writer::spirv::Instruction"* %1, i64 0, i32 1, i32 0, i32 1
  %78 = load %"class.tint::writer::spirv::Operand"*, %"class.tint::writer::spirv::Operand"** %77, align 8
  %79 = icmp eq %"class.tint::writer::spirv::Operand"* %76, %78
  br i1 %79, label %80, label %81

80:                                               ; preds = %81, %74
  ret void

81:                                               ; preds = %74, %81
  %82 = phi %"class.tint::writer::spirv::Operand"* [ %83, %81 ], [ %76, %74 ]
  tail call void @_ZN4tint6writer5spirv12BinaryWriter10process_opERKNS1_7OperandE(%"class.tint::writer::spirv::BinaryWriter"* %0, %"class.tint::writer::spirv::Operand"* dereferenceable(40) %82)
  %83 = getelementptr inbounds %"class.tint::writer::spirv::Operand", %"class.tint::writer::spirv::Operand"* %82, i64 1
  %84 = icmp eq %"class.tint::writer::spirv::Operand"* %83, %78
  br i1 %84, label %80, label %81
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint6writer5spirv12BinaryWriter11WriteHeaderEj(%"class.tint::writer::spirv::BinaryWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  %8 = ptrtoint i32* %6 to i64
  br i1 %7, label %13, label %9

9:                                                ; preds = %2
  store i32 119734787, i32* %4, align 4
  %10 = getelementptr inbounds i32, i32* %4, i64 1
  %11 = ptrtoint i32* %10 to i64
  %12 = bitcast i32** %3 to i64*
  store i64 %11, i64* %12, align 8
  br label %70

13:                                               ; preds = %2
  %14 = ptrtoint i32* %4 to i64
  %15 = bitcast i32** %3 to i64*
  %16 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %14, %17
  %19 = ashr exact i64 %18, 2
  %20 = add nsw i64 %19, 1
  %21 = icmp ugt i64 %20, 4611686018427387903
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #9
  unreachable

24:                                               ; preds = %13
  %25 = bitcast i32** %5 to i64*
  %26 = sub i64 %8, %17
  %27 = ashr exact i64 %26, 2
  %28 = icmp ult i64 %27, 2305843009213693951
  br i1 %28, label %29, label %37

29:                                               ; preds = %24
  %30 = ashr exact i64 %26, 1
  %31 = icmp ult i64 %30, %20
  %32 = select i1 %31, i64 %20, i64 %30
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %29
  %35 = icmp ugt i64 %32, 4611686018427387903
  br i1 %35, label %36, label %37

36:                                               ; preds = %34
  tail call void @abort() #9
  unreachable

37:                                               ; preds = %34, %24
  %38 = phi i64 [ %32, %34 ], [ 4611686018427387903, %24 ]
  %39 = shl i64 %38, 2
  %40 = tail call i8* @_Znwm(i64 %39) #8
  %41 = bitcast i8* %40 to i32*
  br label %42

42:                                               ; preds = %37, %29
  %43 = phi i64 [ %38, %37 ], [ 0, %29 ]
  %44 = phi i32* [ %41, %37 ], [ null, %29 ]
  %45 = getelementptr inbounds i32, i32* %44, i64 %19
  %46 = getelementptr inbounds i32, i32* %44, i64 %43
  %47 = ptrtoint i32* %46 to i64
  store i32 119734787, i32* %45, align 4
  %48 = getelementptr inbounds i32, i32* %45, i64 1
  %49 = ptrtoint i32* %48 to i64
  %50 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %51 = load i32*, i32** %50, align 8
  %52 = load i64, i64* %15, align 8
  %53 = ptrtoint i32* %51 to i64
  %54 = sub i64 %52, %53
  %55 = ashr exact i64 %54, 2
  %56 = sub nsw i64 0, %55
  %57 = getelementptr inbounds i32, i32* %45, i64 %56
  %58 = ptrtoint i32* %57 to i64
  %59 = icmp sgt i64 %54, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %42
  %61 = bitcast i32* %57 to i8*
  %62 = bitcast i32* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %62, i64 %54, i1 false) #7
  %63 = load i32*, i32** %50, align 8
  br label %64

64:                                               ; preds = %60, %42
  %65 = phi i32* [ %51, %42 ], [ %63, %60 ]
  store i64 %58, i64* %16, align 8
  store i64 %49, i64* %15, align 8
  store i64 %47, i64* %25, align 8
  %66 = icmp eq i32* %65, null
  br i1 %66, label %70, label %67

67:                                               ; preds = %64
  %68 = bitcast i32* %65 to i8*
  tail call void @_ZdlPv(i8* %68) #8
  %69 = load i32*, i32** %3, align 8
  br label %70

70:                                               ; preds = %9, %64, %67
  %71 = phi i32* [ %10, %9 ], [ %48, %64 ], [ %69, %67 ]
  %72 = load i32*, i32** %5, align 8
  %73 = icmp ult i32* %71, %72
  %74 = ptrtoint i32* %72 to i64
  br i1 %73, label %75, label %79

75:                                               ; preds = %70
  store i32 66304, i32* %71, align 4
  %76 = getelementptr inbounds i32, i32* %71, i64 1
  %77 = ptrtoint i32* %76 to i64
  %78 = bitcast i32** %3 to i64*
  store i64 %77, i64* %78, align 8
  br label %136

79:                                               ; preds = %70
  %80 = ptrtoint i32* %71 to i64
  %81 = bitcast i32** %3 to i64*
  %82 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %80, %83
  %85 = ashr exact i64 %84, 2
  %86 = add nsw i64 %85, 1
  %87 = icmp ugt i64 %86, 4611686018427387903
  br i1 %87, label %88, label %90

88:                                               ; preds = %79
  %89 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %89) #9
  unreachable

90:                                               ; preds = %79
  %91 = bitcast i32** %5 to i64*
  %92 = sub i64 %74, %83
  %93 = ashr exact i64 %92, 2
  %94 = icmp ult i64 %93, 2305843009213693951
  br i1 %94, label %95, label %103

95:                                               ; preds = %90
  %96 = ashr exact i64 %92, 1
  %97 = icmp ult i64 %96, %86
  %98 = select i1 %97, i64 %86, i64 %96
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %108, label %100

100:                                              ; preds = %95
  %101 = icmp ugt i64 %98, 4611686018427387903
  br i1 %101, label %102, label %103

102:                                              ; preds = %100
  tail call void @abort() #9
  unreachable

103:                                              ; preds = %100, %90
  %104 = phi i64 [ %98, %100 ], [ 4611686018427387903, %90 ]
  %105 = shl i64 %104, 2
  %106 = tail call i8* @_Znwm(i64 %105) #8
  %107 = bitcast i8* %106 to i32*
  br label %108

108:                                              ; preds = %103, %95
  %109 = phi i64 [ %104, %103 ], [ 0, %95 ]
  %110 = phi i32* [ %107, %103 ], [ null, %95 ]
  %111 = getelementptr inbounds i32, i32* %110, i64 %85
  %112 = getelementptr inbounds i32, i32* %110, i64 %109
  %113 = ptrtoint i32* %112 to i64
  store i32 66304, i32* %111, align 4
  %114 = getelementptr inbounds i32, i32* %111, i64 1
  %115 = ptrtoint i32* %114 to i64
  %116 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %117 = load i32*, i32** %116, align 8
  %118 = load i64, i64* %81, align 8
  %119 = ptrtoint i32* %117 to i64
  %120 = sub i64 %118, %119
  %121 = ashr exact i64 %120, 2
  %122 = sub nsw i64 0, %121
  %123 = getelementptr inbounds i32, i32* %111, i64 %122
  %124 = ptrtoint i32* %123 to i64
  %125 = icmp sgt i64 %120, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %108
  %127 = bitcast i32* %123 to i8*
  %128 = bitcast i32* %117 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %127, i8* align 4 %128, i64 %120, i1 false) #7
  %129 = load i32*, i32** %116, align 8
  br label %130

130:                                              ; preds = %126, %108
  %131 = phi i32* [ %117, %108 ], [ %129, %126 ]
  store i64 %124, i64* %82, align 8
  store i64 %115, i64* %81, align 8
  store i64 %113, i64* %91, align 8
  %132 = icmp eq i32* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %130
  %134 = bitcast i32* %131 to i8*
  tail call void @_ZdlPv(i8* %134) #8
  %135 = load i32*, i32** %3, align 8
  br label %136

136:                                              ; preds = %75, %130, %133
  %137 = phi i32* [ %76, %75 ], [ %114, %130 ], [ %135, %133 ]
  %138 = load i32*, i32** %5, align 8
  %139 = icmp eq i32* %137, %138
  br i1 %139, label %144, label %140

140:                                              ; preds = %136
  store i32 1507328, i32* %137, align 4
  %141 = getelementptr inbounds i32, i32* %137, i64 1
  %142 = ptrtoint i32* %141 to i64
  %143 = bitcast i32** %3 to i64*
  store i64 %142, i64* %143, align 8
  br label %199

144:                                              ; preds = %136
  %145 = ptrtoint i32* %138 to i64
  %146 = bitcast i32** %3 to i64*
  %147 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = sub i64 %145, %148
  %150 = ashr exact i64 %149, 2
  %151 = add nsw i64 %150, 1
  %152 = icmp ugt i64 %151, 4611686018427387903
  br i1 %152, label %153, label %155

153:                                              ; preds = %144
  %154 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %154) #9
  unreachable

155:                                              ; preds = %144
  %156 = bitcast i32** %5 to i64*
  %157 = icmp ult i64 %150, 2305843009213693951
  br i1 %157, label %158, label %166

158:                                              ; preds = %155
  %159 = ashr exact i64 %149, 1
  %160 = icmp ult i64 %159, %151
  %161 = select i1 %160, i64 %151, i64 %159
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %171, label %163

163:                                              ; preds = %158
  %164 = icmp ugt i64 %161, 4611686018427387903
  br i1 %164, label %165, label %166

165:                                              ; preds = %163
  tail call void @abort() #9
  unreachable

166:                                              ; preds = %163, %155
  %167 = phi i64 [ %161, %163 ], [ 4611686018427387903, %155 ]
  %168 = shl i64 %167, 2
  %169 = tail call i8* @_Znwm(i64 %168) #8
  %170 = bitcast i8* %169 to i32*
  br label %171

171:                                              ; preds = %166, %158
  %172 = phi i64 [ %167, %166 ], [ 0, %158 ]
  %173 = phi i32* [ %170, %166 ], [ null, %158 ]
  %174 = getelementptr inbounds i32, i32* %173, i64 %150
  %175 = getelementptr inbounds i32, i32* %173, i64 %172
  %176 = ptrtoint i32* %175 to i64
  store i32 1507328, i32* %174, align 4
  %177 = getelementptr inbounds i32, i32* %174, i64 1
  %178 = ptrtoint i32* %177 to i64
  %179 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %180 = load i32*, i32** %179, align 8
  %181 = load i64, i64* %146, align 8
  %182 = ptrtoint i32* %180 to i64
  %183 = sub i64 %181, %182
  %184 = ashr exact i64 %183, 2
  %185 = sub nsw i64 0, %184
  %186 = getelementptr inbounds i32, i32* %174, i64 %185
  %187 = ptrtoint i32* %186 to i64
  %188 = icmp sgt i64 %183, 0
  br i1 %188, label %189, label %193

189:                                              ; preds = %171
  %190 = bitcast i32* %186 to i8*
  %191 = bitcast i32* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %190, i8* align 4 %191, i64 %183, i1 false) #7
  %192 = load i32*, i32** %179, align 8
  br label %193

193:                                              ; preds = %189, %171
  %194 = phi i32* [ %180, %171 ], [ %192, %189 ]
  store i64 %187, i64* %147, align 8
  store i64 %178, i64* %146, align 8
  store i64 %176, i64* %156, align 8
  %195 = icmp eq i32* %194, null
  br i1 %195, label %199, label %196

196:                                              ; preds = %193
  %197 = bitcast i32* %194 to i8*
  tail call void @_ZdlPv(i8* %197) #8
  %198 = load i32*, i32** %3, align 8
  br label %199

199:                                              ; preds = %140, %193, %196
  %200 = phi i32* [ %141, %140 ], [ %177, %193 ], [ %198, %196 ]
  %201 = load i32*, i32** %5, align 8
  %202 = icmp eq i32* %200, %201
  br i1 %202, label %207, label %203

203:                                              ; preds = %199
  store i32 %1, i32* %200, align 4
  %204 = getelementptr inbounds i32, i32* %200, i64 1
  %205 = ptrtoint i32* %204 to i64
  %206 = bitcast i32** %3 to i64*
  store i64 %205, i64* %206, align 8
  br label %262

207:                                              ; preds = %199
  %208 = ptrtoint i32* %201 to i64
  %209 = bitcast i32** %3 to i64*
  %210 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = sub i64 %208, %211
  %213 = ashr exact i64 %212, 2
  %214 = add nsw i64 %213, 1
  %215 = icmp ugt i64 %214, 4611686018427387903
  br i1 %215, label %216, label %218

216:                                              ; preds = %207
  %217 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %217) #9
  unreachable

218:                                              ; preds = %207
  %219 = bitcast i32** %5 to i64*
  %220 = icmp ult i64 %213, 2305843009213693951
  br i1 %220, label %221, label %229

221:                                              ; preds = %218
  %222 = ashr exact i64 %212, 1
  %223 = icmp ult i64 %222, %214
  %224 = select i1 %223, i64 %214, i64 %222
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %234, label %226

226:                                              ; preds = %221
  %227 = icmp ugt i64 %224, 4611686018427387903
  br i1 %227, label %228, label %229

228:                                              ; preds = %226
  tail call void @abort() #9
  unreachable

229:                                              ; preds = %226, %218
  %230 = phi i64 [ %224, %226 ], [ 4611686018427387903, %218 ]
  %231 = shl i64 %230, 2
  %232 = tail call i8* @_Znwm(i64 %231) #8
  %233 = bitcast i8* %232 to i32*
  br label %234

234:                                              ; preds = %229, %221
  %235 = phi i64 [ %230, %229 ], [ 0, %221 ]
  %236 = phi i32* [ %233, %229 ], [ null, %221 ]
  %237 = getelementptr inbounds i32, i32* %236, i64 %213
  %238 = getelementptr inbounds i32, i32* %236, i64 %235
  %239 = ptrtoint i32* %238 to i64
  store i32 %1, i32* %237, align 4
  %240 = getelementptr inbounds i32, i32* %237, i64 1
  %241 = ptrtoint i32* %240 to i64
  %242 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %243 = load i32*, i32** %242, align 8
  %244 = load i64, i64* %209, align 8
  %245 = ptrtoint i32* %243 to i64
  %246 = sub i64 %244, %245
  %247 = ashr exact i64 %246, 2
  %248 = sub nsw i64 0, %247
  %249 = getelementptr inbounds i32, i32* %237, i64 %248
  %250 = ptrtoint i32* %249 to i64
  %251 = icmp sgt i64 %246, 0
  br i1 %251, label %252, label %256

252:                                              ; preds = %234
  %253 = bitcast i32* %249 to i8*
  %254 = bitcast i32* %243 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %253, i8* align 4 %254, i64 %246, i1 false) #7
  %255 = load i32*, i32** %242, align 8
  br label %256

256:                                              ; preds = %252, %234
  %257 = phi i32* [ %243, %234 ], [ %255, %252 ]
  store i64 %250, i64* %210, align 8
  store i64 %241, i64* %209, align 8
  store i64 %239, i64* %219, align 8
  %258 = icmp eq i32* %257, null
  br i1 %258, label %262, label %259

259:                                              ; preds = %256
  %260 = bitcast i32* %257 to i8*
  tail call void @_ZdlPv(i8* %260) #8
  %261 = load i32*, i32** %3, align 8
  br label %262

262:                                              ; preds = %203, %256, %259
  %263 = phi i32* [ %204, %203 ], [ %240, %256 ], [ %261, %259 ]
  %264 = load i32*, i32** %5, align 8
  %265 = icmp ult i32* %263, %264
  %266 = ptrtoint i32* %264 to i64
  br i1 %265, label %267, label %271

267:                                              ; preds = %262
  store i32 0, i32* %263, align 4
  %268 = getelementptr inbounds i32, i32* %263, i64 1
  %269 = ptrtoint i32* %268 to i64
  %270 = bitcast i32** %3 to i64*
  store i64 %269, i64* %270, align 8
  br label %327

271:                                              ; preds = %262
  %272 = ptrtoint i32* %263 to i64
  %273 = bitcast i32** %3 to i64*
  %274 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = sub i64 %272, %275
  %277 = ashr exact i64 %276, 2
  %278 = add nsw i64 %277, 1
  %279 = icmp ugt i64 %278, 4611686018427387903
  br i1 %279, label %280, label %282

280:                                              ; preds = %271
  %281 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %281) #9
  unreachable

282:                                              ; preds = %271
  %283 = bitcast i32** %5 to i64*
  %284 = sub i64 %266, %275
  %285 = ashr exact i64 %284, 2
  %286 = icmp ult i64 %285, 2305843009213693951
  br i1 %286, label %287, label %295

287:                                              ; preds = %282
  %288 = ashr exact i64 %284, 1
  %289 = icmp ult i64 %288, %278
  %290 = select i1 %289, i64 %278, i64 %288
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %300, label %292

292:                                              ; preds = %287
  %293 = icmp ugt i64 %290, 4611686018427387903
  br i1 %293, label %294, label %295

294:                                              ; preds = %292
  tail call void @abort() #9
  unreachable

295:                                              ; preds = %292, %282
  %296 = phi i64 [ %290, %292 ], [ 4611686018427387903, %282 ]
  %297 = shl i64 %296, 2
  %298 = tail call i8* @_Znwm(i64 %297) #8
  %299 = bitcast i8* %298 to i32*
  br label %300

300:                                              ; preds = %295, %287
  %301 = phi i64 [ %296, %295 ], [ 0, %287 ]
  %302 = phi i32* [ %299, %295 ], [ null, %287 ]
  %303 = getelementptr inbounds i32, i32* %302, i64 %277
  %304 = getelementptr inbounds i32, i32* %302, i64 %301
  %305 = ptrtoint i32* %304 to i64
  store i32 0, i32* %303, align 4
  %306 = getelementptr inbounds i32, i32* %303, i64 1
  %307 = ptrtoint i32* %306 to i64
  %308 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %309 = load i32*, i32** %308, align 8
  %310 = load i64, i64* %273, align 8
  %311 = ptrtoint i32* %309 to i64
  %312 = sub i64 %310, %311
  %313 = ashr exact i64 %312, 2
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds i32, i32* %303, i64 %314
  %316 = ptrtoint i32* %315 to i64
  %317 = icmp sgt i64 %312, 0
  br i1 %317, label %318, label %322

318:                                              ; preds = %300
  %319 = bitcast i32* %315 to i8*
  %320 = bitcast i32* %309 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %319, i8* align 4 %320, i64 %312, i1 false) #7
  %321 = load i32*, i32** %308, align 8
  br label %322

322:                                              ; preds = %318, %300
  %323 = phi i32* [ %309, %300 ], [ %321, %318 ]
  store i64 %316, i64* %274, align 8
  store i64 %307, i64* %273, align 8
  store i64 %305, i64* %283, align 8
  %324 = icmp eq i32* %323, null
  br i1 %324, label %327, label %325

325:                                              ; preds = %322
  %326 = bitcast i32* %323 to i8*
  tail call void @_ZdlPv(i8* %326) #8
  br label %327

327:                                              ; preds = %267, %322, %325
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @_ZNK4tint6writer5spirv11Instruction11word_lengthEv(%"class.tint::writer::spirv::Instruction"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint6writer5spirv12BinaryWriter10process_opERKNS1_7OperandE(%"class.tint::writer::spirv::BinaryWriter"*, %"class.tint::writer::spirv::Operand"* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.tint::writer::spirv::Operand", %"class.tint::writer::spirv::Operand"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %87

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i32*, i32** %10, align 8
  %12 = icmp ult i32* %9, %11
  %13 = ptrtoint i32* %11 to i64
  br i1 %12, label %14, label %18

14:                                               ; preds = %7
  store i32 0, i32* %9, align 4
  %15 = getelementptr inbounds i32, i32* %9, i64 1
  %16 = ptrtoint i32* %15 to i64
  %17 = bitcast i32** %8 to i64*
  store i64 %16, i64* %17, align 8
  br label %75

18:                                               ; preds = %7
  %19 = ptrtoint i32* %9 to i64
  %20 = bitcast i32** %8 to i64*
  %21 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %19, %22
  %24 = ashr exact i64 %23, 2
  %25 = add nsw i64 %24, 1
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %29

27:                                               ; preds = %18
  %28 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %28) #9
  unreachable

29:                                               ; preds = %18
  %30 = bitcast i32** %10 to i64*
  %31 = sub i64 %13, %22
  %32 = ashr exact i64 %31, 2
  %33 = icmp ult i64 %32, 2305843009213693951
  br i1 %33, label %34, label %42

34:                                               ; preds = %29
  %35 = ashr exact i64 %31, 1
  %36 = icmp ult i64 %35, %25
  %37 = select i1 %36, i64 %25, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %47, label %39

39:                                               ; preds = %34
  %40 = icmp ugt i64 %37, 4611686018427387903
  br i1 %40, label %41, label %42

41:                                               ; preds = %39
  tail call void @abort() #9
  unreachable

42:                                               ; preds = %39, %29
  %43 = phi i64 [ %37, %39 ], [ 4611686018427387903, %29 ]
  %44 = shl i64 %43, 2
  %45 = tail call i8* @_Znwm(i64 %44) #8
  %46 = bitcast i8* %45 to i32*
  br label %47

47:                                               ; preds = %42, %34
  %48 = phi i64 [ %43, %42 ], [ 0, %34 ]
  %49 = phi i32* [ %46, %42 ], [ null, %34 ]
  %50 = getelementptr inbounds i32, i32* %49, i64 %24
  %51 = getelementptr inbounds i32, i32* %49, i64 %48
  %52 = ptrtoint i32* %51 to i64
  store i32 0, i32* %50, align 4
  %53 = getelementptr inbounds i32, i32* %50, i64 1
  %54 = ptrtoint i32* %53 to i64
  %55 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %56 = load i32*, i32** %55, align 8
  %57 = load i64, i64* %20, align 8
  %58 = ptrtoint i32* %56 to i64
  %59 = sub i64 %57, %58
  %60 = ashr exact i64 %59, 2
  %61 = sub nsw i64 0, %60
  %62 = getelementptr inbounds i32, i32* %50, i64 %61
  %63 = ptrtoint i32* %62 to i64
  %64 = icmp sgt i64 %59, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %47
  %66 = bitcast i32* %62 to i8*
  %67 = bitcast i32* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 %59, i1 false) #7
  %68 = load i32*, i32** %55, align 8
  br label %69

69:                                               ; preds = %65, %47
  %70 = phi i32* [ %56, %47 ], [ %68, %65 ]
  store i64 %63, i64* %21, align 8
  store i64 %54, i64* %20, align 8
  store i64 %52, i64* %30, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %75, label %72

72:                                               ; preds = %69
  %73 = bitcast i32* %70 to i8*
  tail call void @_ZdlPv(i8* %73) #8
  %74 = load i64, i64* %20, align 8
  br label %75

75:                                               ; preds = %14, %69, %72
  %76 = phi i64 [ %16, %14 ], [ %54, %69 ], [ %74, %72 ]
  %77 = getelementptr inbounds %"class.tint::writer::spirv::Operand", %"class.tint::writer::spirv::Operand"* %1, i64 0, i32 1
  %78 = bitcast float* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %81 = load i32*, i32** %80, align 8
  %82 = ptrtoint i32* %81 to i64
  %83 = sub i64 %76, %82
  %84 = ashr exact i64 %83, 2
  %85 = add nsw i64 %84, -1
  %86 = getelementptr inbounds i32, i32* %81, i64 %85
  store i32 %79, i32* %86, align 1
  br label %203

87:                                               ; preds = %2
  %88 = icmp eq i32 %5, 0
  %89 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0
  br i1 %88, label %90, label %159

90:                                               ; preds = %87
  %91 = getelementptr inbounds %"class.tint::writer::spirv::Operand", %"class.tint::writer::spirv::Operand"* %1, i64 0, i32 2
  %92 = load i32, i32* %91, align 8
  %93 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 1
  %94 = load i32*, i32** %93, align 8
  %95 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %96 = load i32*, i32** %95, align 8
  %97 = icmp ult i32* %94, %96
  %98 = ptrtoint i32* %96 to i64
  br i1 %97, label %99, label %103

99:                                               ; preds = %90
  store i32 %92, i32* %94, align 4
  %100 = getelementptr inbounds i32, i32* %94, i64 1
  %101 = ptrtoint i32* %100 to i64
  %102 = bitcast i32** %93 to i64*
  store i64 %101, i64* %102, align 8
  br label %203

103:                                              ; preds = %90
  %104 = ptrtoint i32* %94 to i64
  %105 = bitcast i32** %93 to i64*
  %106 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = sub i64 %104, %107
  %109 = ashr exact i64 %108, 2
  %110 = add nsw i64 %109, 1
  %111 = icmp ugt i64 %110, 4611686018427387903
  br i1 %111, label %112, label %114

112:                                              ; preds = %103
  %113 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %113) #9
  unreachable

114:                                              ; preds = %103
  %115 = bitcast i32** %95 to i64*
  %116 = sub i64 %98, %107
  %117 = ashr exact i64 %116, 2
  %118 = icmp ult i64 %117, 2305843009213693951
  br i1 %118, label %119, label %127

119:                                              ; preds = %114
  %120 = ashr exact i64 %116, 1
  %121 = icmp ult i64 %120, %110
  %122 = select i1 %121, i64 %110, i64 %120
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %132, label %124

124:                                              ; preds = %119
  %125 = icmp ugt i64 %122, 4611686018427387903
  br i1 %125, label %126, label %127

126:                                              ; preds = %124
  tail call void @abort() #9
  unreachable

127:                                              ; preds = %124, %114
  %128 = phi i64 [ %122, %124 ], [ 4611686018427387903, %114 ]
  %129 = shl i64 %128, 2
  %130 = tail call i8* @_Znwm(i64 %129) #8
  %131 = bitcast i8* %130 to i32*
  br label %132

132:                                              ; preds = %127, %119
  %133 = phi i64 [ %128, %127 ], [ 0, %119 ]
  %134 = phi i32* [ %131, %127 ], [ null, %119 ]
  %135 = getelementptr inbounds i32, i32* %134, i64 %109
  %136 = getelementptr inbounds i32, i32* %134, i64 %133
  %137 = ptrtoint i32* %136 to i64
  store i32 %92, i32* %135, align 4
  %138 = getelementptr inbounds i32, i32* %135, i64 1
  %139 = ptrtoint i32* %138 to i64
  %140 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %141 = load i32*, i32** %140, align 8
  %142 = load i64, i64* %105, align 8
  %143 = ptrtoint i32* %141 to i64
  %144 = sub i64 %142, %143
  %145 = ashr exact i64 %144, 2
  %146 = sub nsw i64 0, %145
  %147 = getelementptr inbounds i32, i32* %135, i64 %146
  %148 = ptrtoint i32* %147 to i64
  %149 = icmp sgt i64 %144, 0
  br i1 %149, label %150, label %154

150:                                              ; preds = %132
  %151 = bitcast i32* %147 to i8*
  %152 = bitcast i32* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %151, i8* align 4 %152, i64 %144, i1 false) #7
  %153 = load i32*, i32** %140, align 8
  br label %154

154:                                              ; preds = %150, %132
  %155 = phi i32* [ %141, %132 ], [ %153, %150 ]
  store i64 %148, i64* %106, align 8
  store i64 %139, i64* %105, align 8
  store i64 %137, i64* %115, align 8
  %156 = icmp eq i32* %155, null
  br i1 %156, label %203, label %157

157:                                              ; preds = %154
  %158 = bitcast i32* %155 to i8*
  tail call void @_ZdlPv(i8* %158) #8
  br label %203

159:                                              ; preds = %87
  %160 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 1
  %161 = bitcast i32** %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = bitcast %"class.tint::writer::spirv::BinaryWriter"* %0 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sub i64 %162, %164
  %166 = ashr exact i64 %165, 2
  %167 = getelementptr inbounds %"class.tint::writer::spirv::Operand", %"class.tint::writer::spirv::Operand"* %1, i64 0, i32 3
  %168 = tail call i32 @_ZNK4tint6writer5spirv7Operand6lengthEv(%"class.tint::writer::spirv::Operand"* %1) #7
  %169 = zext i32 %168 to i64
  %170 = add nsw i64 %166, %169
  %171 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %171) #7
  store i32 0, i32* %3, align 4
  %172 = load i64, i64* %161, align 8
  %173 = load i64, i64* %163, align 8
  %174 = sub i64 %172, %173
  %175 = ashr exact i64 %174, 2
  %176 = icmp ugt i64 %170, %175
  %177 = inttoptr i64 %173 to i32*
  br i1 %176, label %178, label %182

178:                                              ; preds = %159
  %179 = sub nsw i64 %170, %175
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector"* %89, i64 %179, i32* nonnull dereferenceable(4) %3) #7
  %180 = getelementptr inbounds %"class.tint::writer::spirv::BinaryWriter", %"class.tint::writer::spirv::BinaryWriter"* %0, i64 0, i32 0, i32 0, i32 0
  %181 = load i32*, i32** %180, align 8
  br label %186

182:                                              ; preds = %159
  %183 = icmp ult i64 %170, %175
  br i1 %183, label %184, label %186

184:                                              ; preds = %182
  %185 = getelementptr inbounds i32, i32* %177, i64 %170
  store i32* %185, i32** %160, align 8
  br label %186

186:                                              ; preds = %178, %182, %184
  %187 = phi i32* [ %181, %178 ], [ %177, %182 ], [ %177, %184 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %171) #7
  %188 = getelementptr inbounds i32, i32* %187, i64 %166
  %189 = bitcast i32* %188 to i8*
  %190 = bitcast %"class.std::__1::basic_string"* %167 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %191 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %190, i64 0, i32 1, i32 0
  %192 = load i8, i8* %191, align 1
  %193 = icmp slt i8 %192, 0
  %194 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %167, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds %"class.tint::writer::spirv::Operand", %"class.tint::writer::spirv::Operand"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %197 = load i64, i64* %196, align 8
  %198 = bitcast %"class.std::__1::basic_string"* %167 to i8*
  %199 = zext i8 %192 to i64
  %200 = select i1 %193, i8* %195, i8* %198
  %201 = select i1 %193, i64 %197, i64 %199
  %202 = add i64 %201, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %189, i8* align 1 %200, i64 %202, i1 false)
  br label %203

203:                                              ; preds = %157, %154, %99, %186, %75
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i32 @_ZNK4tint6writer5spirv7Operand6lengthEv(%"class.tint::writer::spirv::Operand"*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZNSt3__110__function16__policy_invokerIFvRKN4tint6writer5spirv11InstructionEEE11__call_implINS0_20__default_alloc_funcIZNS4_12BinaryWriter12WriteBuilderEPNS4_7BuilderEE3$_0S8_EEEEvPKNS0_16__policy_storageES7_"(%"union.std::__1::__function::__policy_storage"* nocapture readonly, %"class.tint::writer::spirv::Instruction"* dereferenceable(32)) #0 align 2 {
  %3 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to %"class.tint::writer::spirv::BinaryWriter"**
  %4 = load %"class.tint::writer::spirv::BinaryWriter"*, %"class.tint::writer::spirv::BinaryWriter"** %3, align 8
  tail call void @_ZN4tint6writer5spirv12BinaryWriter19process_instructionERKNS1_11InstructionE(%"class.tint::writer::spirv::BinaryWriter"* %4, %"class.tint::writer::spirv::Instruction"* dereferenceable(32) %1) #7
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !2

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !4
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !4
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !7, !noalias !4
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !7, !noalias !4
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !7, !noalias !4
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !7, !noalias !4
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !9

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !4
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !7, !noalias !4
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !7, !noalias !4
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !11

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #9
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #9
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #8
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !12
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !12
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !15, !noalias !12
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !15, !noalias !12
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !15, !noalias !12
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !15, !noalias !12
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !17

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !12
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !15, !noalias !12
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !15, !noalias !12
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !18

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !19

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #7
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #8
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !10}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !10}
