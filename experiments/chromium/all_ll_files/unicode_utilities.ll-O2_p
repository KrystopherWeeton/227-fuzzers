; ModuleID = '../../third_party/blink/renderer/platform/text/unicode_utilities.cc'
source_filename = "../../third_party/blink/renderer/platform/text/unicode_utilities.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i16*, i32, i32 }
%"class.icu_69::UnicodeString" = type { %"class.icu_69::Replaceable", %"union.icu_69::UnicodeString::StackBufferOrFields" }
%"class.icu_69::Replaceable" = type { %"class.icu_69::UObject" }
%"class.icu_69::UObject" = type { i32 (...)** }
%"union.icu_69::UnicodeString::StackBufferOrFields" = type { %struct.anon.1, [32 x i8] }
%struct.anon.1 = type { i16, i32, i32, i16* }
%"class.icu_69::ConstChar16Ptr" = type { i16* }
%"class.icu_69::Char16Ptr" = type { i16* }
%"class.icu_69::Normalizer2" = type { %"class.icu_69::UObject" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

@_ZZN5blink11IsSeparatorEiE21kLatin1SeparatorTable = internal unnamed_addr constant <{ [248 x i8], [8 x i8] }> <{ [248 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\01\01\00\01\01\01\01\01\01\01\01\01\01\00\01\01\01\01\00\01\01\01\01\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01", [8 x i8] zeroinitializer }>, align 16
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink28FoldQuoteMarksAndSoftHyphensEPDsm(i16* nocapture, i64) local_unnamed_addr #0 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = and i64 %1, 1
  %6 = icmp eq i64 %1, 1
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = sub i64 %1, %5
  br label %21

9:                                                ; preds = %37, %4
  %10 = phi i64 [ 0, %4 ], [ %39, %37 ]
  %11 = icmp eq i64 %5, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds i16, i16* %0, i64 %10
  %14 = load i16, i16* %13, align 2
  switch i16 %14, label %17 [
    i16 1524, label %18
    i16 8220, label %18
    i16 8221, label %18
    i16 1523, label %16
    i16 8216, label %16
    i16 8217, label %16
    i16 173, label %15
  ]

15:                                               ; preds = %12
  br label %18

16:                                               ; preds = %12, %12, %12
  br label %18

17:                                               ; preds = %12
  br label %18

18:                                               ; preds = %17, %16, %15, %12, %12, %12
  %19 = phi i16 [ %14, %17 ], [ 0, %15 ], [ 39, %16 ], [ 34, %12 ], [ 34, %12 ], [ 34, %12 ]
  store i16 %19, i16* %13, align 2
  br label %20

20:                                               ; preds = %18, %9, %2
  ret void

21:                                               ; preds = %37, %7
  %22 = phi i64 [ 0, %7 ], [ %39, %37 ]
  %23 = phi i64 [ %8, %7 ], [ %40, %37 ]
  %24 = getelementptr inbounds i16, i16* %0, i64 %22
  %25 = load i16, i16* %24, align 2
  switch i16 %25, label %28 [
    i16 1524, label %29
    i16 8220, label %29
    i16 8221, label %29
    i16 1523, label %26
    i16 8216, label %26
    i16 8217, label %26
    i16 173, label %27
  ]

26:                                               ; preds = %21, %21, %21
  br label %29

27:                                               ; preds = %21
  br label %29

28:                                               ; preds = %21
  br label %29

29:                                               ; preds = %21, %21, %21, %26, %27, %28
  %30 = phi i16 [ %25, %28 ], [ 0, %27 ], [ 39, %26 ], [ 34, %21 ], [ 34, %21 ], [ 34, %21 ]
  store i16 %30, i16* %24, align 2
  %31 = or i64 %22, 1
  %32 = getelementptr inbounds i16, i16* %0, i64 %31
  %33 = load i16, i16* %32, align 2
  switch i16 %33, label %36 [
    i16 1524, label %37
    i16 8220, label %37
    i16 8221, label %37
    i16 1523, label %35
    i16 8216, label %35
    i16 8217, label %35
    i16 173, label %34
  ]

34:                                               ; preds = %29
  br label %37

35:                                               ; preds = %29, %29, %29
  br label %37

36:                                               ; preds = %29
  br label %37

37:                                               ; preds = %36, %35, %34, %29, %29, %29
  %38 = phi i16 [ %33, %36 ], [ 0, %34 ], [ 39, %35 ], [ 34, %29 ], [ 34, %29 ], [ 34, %29 ]
  store i16 %38, i16* %32, align 2
  %39 = add nuw i64 %22, 2
  %40 = add i64 %23, -2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %9, label %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28FoldQuoteMarksAndSoftHyphensERN3WTF6StringE(%"class.WTF::String"* nocapture dereferenceable(8)) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %116, label %5

5:                                                ; preds = %1
  %6 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsDs(%"class.WTF::StringImpl"* nonnull %3, i16 zeroext 1523, i16 zeroext 39) #8
  %7 = ptrtoint %"class.WTF::StringImpl"* %6 to i64
  %8 = bitcast %"class.WTF::String"* %0 to i64*
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  store i64 %7, i64* %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %26, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  br i1 %15, label %18, label %20

18:                                               ; preds = %11
  %19 = add i32 %17, -1
  store i32 %19, i32* %16, align 4
  br label %20

20:                                               ; preds = %18, %11
  %21 = phi i32 [ %19, %18 ], [ %17, %11 ]
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %20
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #8
  br label %24

24:                                               ; preds = %23, %20
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  br label %26

26:                                               ; preds = %24, %5
  %27 = phi %"class.WTF::StringImpl"* [ %25, %24 ], [ %6, %5 ]
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %47, label %29

29:                                               ; preds = %26
  %30 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsDs(%"class.WTF::StringImpl"* nonnull %27, i16 zeroext 1524, i16 zeroext 34) #8
  %31 = ptrtoint %"class.WTF::StringImpl"* %30 to i64
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  store i64 %31, i64* %8, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %49, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  br i1 %38, label %41, label %43

41:                                               ; preds = %34
  %42 = add i32 %40, -1
  store i32 %42, i32* %39, align 4
  br label %43

43:                                               ; preds = %41, %34
  %44 = phi i32 [ %42, %41 ], [ %40, %34 ]
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #8
  br label %47

47:                                               ; preds = %46, %43, %26
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  br label %49

49:                                               ; preds = %47, %29
  %50 = phi %"class.WTF::StringImpl"* [ %48, %47 ], [ %30, %29 ]
  %51 = icmp eq %"class.WTF::StringImpl"* %50, null
  br i1 %51, label %70, label %52

52:                                               ; preds = %49
  %53 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsDs(%"class.WTF::StringImpl"* nonnull %50, i16 zeroext 8220, i16 zeroext 34) #8
  %54 = ptrtoint %"class.WTF::StringImpl"* %53 to i64
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  store i64 %54, i64* %8, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %72, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #8
  br label %70

70:                                               ; preds = %69, %66, %49
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  br label %72

72:                                               ; preds = %70, %52
  %73 = phi %"class.WTF::StringImpl"* [ %71, %70 ], [ %53, %52 ]
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %74, label %93, label %75

75:                                               ; preds = %72
  %76 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsDs(%"class.WTF::StringImpl"* nonnull %73, i16 zeroext 8216, i16 zeroext 39) #8
  %77 = ptrtoint %"class.WTF::StringImpl"* %76 to i64
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  store i64 %77, i64* %8, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %95, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #8
  br label %93

93:                                               ; preds = %92, %89, %72
  %94 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  br label %95

95:                                               ; preds = %93, %75
  %96 = phi %"class.WTF::StringImpl"* [ %94, %93 ], [ %76, %75 ]
  %97 = icmp eq %"class.WTF::StringImpl"* %96, null
  br i1 %97, label %116, label %98

98:                                               ; preds = %95
  %99 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsDs(%"class.WTF::StringImpl"* nonnull %96, i16 zeroext 8221, i16 zeroext 34) #8
  %100 = ptrtoint %"class.WTF::StringImpl"* %99 to i64
  %101 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  store i64 %100, i64* %8, align 8
  %102 = icmp eq %"class.WTF::StringImpl"* %101, null
  br i1 %102, label %118, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load atomic i32, i32* %104 monotonic, align 4
  %106 = and i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  br i1 %107, label %110, label %112

110:                                              ; preds = %103
  %111 = add i32 %109, -1
  store i32 %111, i32* %108, align 4
  br label %112

112:                                              ; preds = %110, %103
  %113 = phi i32 [ %111, %110 ], [ %109, %103 ]
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %101) #8
  br label %116

116:                                              ; preds = %1, %115, %112, %95
  %117 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  br label %118

118:                                              ; preds = %116, %98
  %119 = phi %"class.WTF::StringImpl"* [ %117, %116 ], [ %99, %98 ]
  %120 = icmp eq %"class.WTF::StringImpl"* %119, null
  br i1 %120, label %140, label %121

121:                                              ; preds = %118
  %122 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsDs(%"class.WTF::StringImpl"* nonnull %119, i16 zeroext 8217, i16 zeroext 39) #8
  %123 = ptrtoint %"class.WTF::StringImpl"* %122 to i64
  %124 = bitcast %"class.WTF::String"* %0 to i64*
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  store i64 %123, i64* %124, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %125, null
  br i1 %126, label %142, label %127

127:                                              ; preds = %121
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  br i1 %131, label %134, label %136

134:                                              ; preds = %127
  %135 = add i32 %133, -1
  store i32 %135, i32* %132, align 4
  br label %136

136:                                              ; preds = %134, %127
  %137 = phi i32 [ %135, %134 ], [ %133, %127 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %125) #8
  br label %140

140:                                              ; preds = %139, %136, %118
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  br label %142

142:                                              ; preds = %140, %121
  %143 = phi %"class.WTF::StringImpl"* [ %141, %140 ], [ %122, %121 ]
  %144 = icmp eq %"class.WTF::StringImpl"* %143, null
  br i1 %144, label %164, label %145

145:                                              ; preds = %142
  %146 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsDs(%"class.WTF::StringImpl"* nonnull %143, i16 zeroext 173, i16 zeroext 0) #8
  %147 = ptrtoint %"class.WTF::StringImpl"* %146 to i64
  %148 = bitcast %"class.WTF::String"* %0 to i64*
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  store i64 %147, i64* %148, align 8
  %150 = icmp eq %"class.WTF::StringImpl"* %149, null
  br i1 %150, label %164, label %151

151:                                              ; preds = %145
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %153 = load atomic i32, i32* %152 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %151
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %151
  %161 = phi i32 [ %159, %158 ], [ %157, %151 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %160
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %149) #8
  br label %164

164:                                              ; preds = %142, %145, %160, %163
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink11IsSeparatorEi(i32) local_unnamed_addr #2 {
  %2 = icmp slt i32 %0, 256
  br i1 %2, label %3, label %8

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [248 x i8], [8 x i8] }>* @_ZZN5blink11IsSeparatorEiE21kLatin1SeparatorTable to [256 x i8]*), i64 0, i64 %4
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp ne i8 %6, 0
  br label %14

8:                                                ; preds = %1
  %9 = tail call signext i8 @u_charType_69(i32 %0) #8
  %10 = sext i8 %9 to i32
  %11 = shl i32 1, %10
  %12 = and i32 %11, 1073311744
  %13 = icmp ne i32 %12, 0
  br label %14

14:                                               ; preds = %8, %3
  %15 = phi i1 [ %7, %3 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5blink12IsKanaLetterEDs(i16 zeroext) local_unnamed_addr #3 {
  %2 = add i16 %0, -12353
  %3 = icmp ult i16 %2, 86
  %4 = add i16 %0, -12449
  %5 = icmp ult i16 %4, 90
  %6 = or i1 %3, %5
  %7 = and i16 %0, -16
  %8 = icmp eq i16 %7, 12784
  %9 = or i1 %8, %6
  br i1 %9, label %15, label %10

10:                                               ; preds = %1
  %11 = add i16 %0, 154
  %12 = icmp ult i16 %11, 56
  %13 = icmp ne i16 %0, -144
  %14 = and i1 %13, %12
  ret i1 %14

15:                                               ; preds = %1
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5blink17IsSmallKanaLetterEDs(i16 zeroext) local_unnamed_addr #3 {
  switch i16 %0, label %2 [
    i16 12353, label %3
    i16 12355, label %3
    i16 12357, label %3
    i16 12359, label %3
    i16 12361, label %3
    i16 12387, label %3
    i16 12419, label %3
    i16 12421, label %3
    i16 12423, label %3
    i16 12430, label %3
    i16 12437, label %3
    i16 12438, label %3
    i16 12449, label %3
    i16 12451, label %3
    i16 12453, label %3
    i16 12455, label %3
    i16 12457, label %3
    i16 12483, label %3
    i16 12515, label %3
    i16 12517, label %3
    i16 12519, label %3
    i16 12526, label %3
    i16 12533, label %3
    i16 12534, label %3
    i16 12784, label %3
    i16 12785, label %3
    i16 12786, label %3
    i16 12787, label %3
    i16 12788, label %3
    i16 12789, label %3
    i16 12790, label %3
    i16 12791, label %3
    i16 12792, label %3
    i16 12793, label %3
    i16 12794, label %3
    i16 12795, label %3
    i16 12796, label %3
    i16 12797, label %3
    i16 12798, label %3
    i16 12799, label %3
    i16 -153, label %3
    i16 -152, label %3
    i16 -151, label %3
    i16 -150, label %3
    i16 -149, label %3
    i16 -148, label %3
    i16 -147, label %3
    i16 -146, label %3
    i16 -145, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19ContainsKanaLettersERKN3WTF6StringE(%"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %51, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %51, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 1
  %13 = bitcast %"class.WTF::StringImpl"* %12 to i8*
  %14 = bitcast %"class.WTF::StringImpl"* %12 to i16*
  %15 = zext i32 %7 to i64
  br label %18

16:                                               ; preds = %45
  %17 = icmp eq i64 %50, %15
  br i1 %17, label %51, label %18

18:                                               ; preds = %16, %9
  %19 = phi i64 [ 0, %9 ], [ %50, %16 ]
  br i1 %4, label %35, label %20

20:                                               ; preds = %18
  %21 = load i32, i32* %10, align 4
  %22 = zext i32 %21 to i64
  %23 = icmp ult i64 %19, %22
  br i1 %23, label %24, label %35

24:                                               ; preds = %20
  %25 = load atomic i32, i32* %11 monotonic, align 4
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %13, i64 %19
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i16
  br label %35

32:                                               ; preds = %24
  %33 = getelementptr inbounds i16, i16* %14, i64 %19
  %34 = load i16, i16* %33, align 2
  br label %35

35:                                               ; preds = %18, %20, %28, %32
  %36 = phi i16 [ 0, %20 ], [ 0, %18 ], [ %31, %28 ], [ %34, %32 ]
  %37 = add i16 %36, -12353
  %38 = icmp ult i16 %37, 86
  %39 = add i16 %36, -12449
  %40 = icmp ult i16 %39, 90
  %41 = or i1 %38, %40
  %42 = and i16 %36, -16
  %43 = icmp eq i16 %42, 12784
  %44 = or i1 %43, %41
  br i1 %44, label %51, label %45

45:                                               ; preds = %35
  %46 = add i16 %36, 154
  %47 = icmp ult i16 %46, 56
  %48 = icmp ne i16 %36, -144
  %49 = and i1 %48, %47
  %50 = add nuw nsw i64 %19, 1
  br i1 %49, label %51, label %16

51:                                               ; preds = %45, %35, %16, %1, %5
  %52 = phi i1 [ false, %5 ], [ false, %1 ], [ true, %35 ], [ true, %45 ], [ false, %16 ]
  ret i1 %52
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink30NormalizeCharactersIntoNFCFormEPKDsjRN3WTF6VectorIDsLj0ENS2_18PartitionAllocatorEEE(i16*, i32, %"class.WTF::Vector"* nocapture dereferenceable(16)) local_unnamed_addr #2 {
  %4 = alloca i32, align 4
  %5 = alloca %"class.icu_69::UnicodeString", align 8
  %6 = alloca %"class.icu_69::ConstChar16Ptr", align 8
  %7 = alloca %"class.icu_69::UnicodeString", align 8
  %8 = alloca %"class.icu_69::Char16Ptr", align 8
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #8
  store i32 0, i32* %4, align 4
  %10 = call %"class.icu_69::Normalizer2"* @_ZN6icu_6911Normalizer214getNFCInstanceER10UErrorCode(i32* nonnull dereferenceable(4) %4) #8
  %11 = bitcast %"class.icu_69::UnicodeString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 64, i1 false)
  %12 = getelementptr inbounds %"class.icu_69::ConstChar16Ptr", %"class.icu_69::ConstChar16Ptr"* %6, i64 0, i32 0
  store i16* %0, i16** %12, align 8
  call void @_ZN6icu_6913UnicodeStringC1EaNS_14ConstChar16PtrEi(%"class.icu_69::UnicodeString"* nonnull %5, i8 signext 0, %"class.icu_69::ConstChar16Ptr"* nonnull %6, i32 %1) #8
  %13 = load i16*, i16** %12, align 8
  call void asm sideeffect "", "rm,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %13) #8, !srcloc !3
  %14 = bitcast %"class.icu_69::Normalizer2"* %10 to i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)***
  %15 = load i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)**, i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)*** %14, align 8
  %16 = getelementptr inbounds i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)*, i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)** %15, i64 14
  %17 = load i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)*, i32 (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, i32*)** %16, align 8
  %18 = call i32 %17(%"class.icu_69::Normalizer2"* %10, %"class.icu_69::UnicodeString"* nonnull dereferenceable(64) %5, i32* nonnull dereferenceable(4) %4) #8
  %19 = icmp slt i32 %18, %1
  br i1 %19, label %20, label %52

20:                                               ; preds = %3
  %21 = bitcast %"class.icu_69::UnicodeString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %21) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 64, i1 false)
  call void @_ZN6icu_6913UnicodeStringC1ERKS0_i(%"class.icu_69::UnicodeString"* nonnull %7, %"class.icu_69::UnicodeString"* nonnull dereferenceable(64) %5, i32 %18) #8
  %22 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %5, i64 0, i32 1, i32 0, i32 0
  %23 = load i16, i16* %22, align 8
  %24 = and i16 %23, 1
  %25 = icmp ne i16 %24, 0
  %26 = icmp eq i32 %18, 0
  %27 = and i1 %26, %25
  br i1 %27, label %28, label %29

28:                                               ; preds = %20
  call void @_ZN6icu_6913UnicodeString7unBogusEv(%"class.icu_69::UnicodeString"* nonnull %5) #8
  br label %46

29:                                               ; preds = %20
  %30 = icmp slt i16 %23, 0
  %31 = lshr i16 %23, 5
  %32 = zext i16 %31 to i32
  %33 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %5, i64 0, i32 1, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = select i1 %30, i32 %34, i32 %32
  %36 = icmp ugt i32 %35, %18
  br i1 %36, label %37, label %46

37:                                               ; preds = %29
  %38 = icmp slt i32 %18, 1024
  br i1 %38, label %39, label %44

39:                                               ; preds = %37
  %40 = and i16 %23, 31
  %41 = trunc i32 %18 to i16
  %42 = shl i16 %41, 5
  %43 = or i16 %40, %42
  store i16 %43, i16* %22, align 8
  br label %46

44:                                               ; preds = %37
  %45 = or i16 %23, -32
  store i16 %45, i16* %22, align 8
  store i32 %18, i32* %33, align 4
  br label %46

46:                                               ; preds = %28, %29, %39, %44
  %47 = bitcast %"class.icu_69::Normalizer2"* %10 to %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)***
  %48 = load %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)**, %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)*** %47, align 8
  %49 = getelementptr inbounds %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)*, %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)** %48, i64 5
  %50 = load %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)*, %"class.icu_69::UnicodeString"* (%"class.icu_69::Normalizer2"*, %"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"*, i32*)** %49, align 8
  %51 = call dereferenceable(64) %"class.icu_69::UnicodeString"* %50(%"class.icu_69::Normalizer2"* %10, %"class.icu_69::UnicodeString"* nonnull dereferenceable(64) %5, %"class.icu_69::UnicodeString"* nonnull dereferenceable(64) %7, i32* nonnull dereferenceable(4) %4) #8
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %21) #8
  br label %52

52:                                               ; preds = %46, %3
  %53 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %5, i64 0, i32 1, i32 0, i32 0
  %54 = load i16, i16* %53, align 8
  %55 = icmp slt i16 %54, 0
  %56 = lshr i16 %54, 5
  %57 = zext i16 %56 to i32
  %58 = getelementptr inbounds %"class.icu_69::UnicodeString", %"class.icu_69::UnicodeString"* %5, i64 0, i32 1, i32 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = select i1 %55, i32 %59, i32 %57
  %61 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = icmp ult i32 %62, %60
  br i1 %63, label %64, label %119

64:                                               ; preds = %52
  %65 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %66 = load i32, i32* %65, align 8
  %67 = icmp ult i32 %66, %60
  br i1 %67, label %68, label %107

68:                                               ; preds = %64
  %69 = lshr i32 %66, 2
  %70 = add nuw i32 %66, 1
  %71 = add i32 %70, %69
  %72 = icmp ugt i32 %71, 4
  %73 = select i1 %72, i32 %71, i32 4
  %74 = icmp ugt i32 %73, %60
  %75 = select i1 %74, i32 %73, i32 %60
  %76 = icmp ult i32 %66, %75
  br i1 %76, label %77, label %107, !prof !4

77:                                               ; preds = %68
  %78 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %79 = load i16*, i16** %78, align 8
  %80 = icmp eq i16* %79, null
  %81 = zext i32 %75 to i64
  %82 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %81) #8
  %83 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %82, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #8
  br i1 %80, label %84, label %89

84:                                               ; preds = %77
  %85 = ptrtoint i8* %83 to i64
  %86 = bitcast %"class.WTF::Vector"* %2 to i64*
  store atomic i64 %85, i64* %86 monotonic, align 8
  %87 = lshr i64 %82, 1
  %88 = trunc i64 %87 to i32
  store i32 %88, i32* %65, align 8
  br label %107

89:                                               ; preds = %77
  %90 = lshr i64 %82, 1
  %91 = ptrtoint i8* %83 to i64
  %92 = load i16*, i16** %78, align 8
  %93 = icmp ne i8* %83, null
  %94 = icmp ne i16* %92, null
  %95 = and i1 %93, %94
  %96 = bitcast i16* %92 to i8*
  br i1 %95, label %97, label %103, !prof !4

97:                                               ; preds = %89
  %98 = load i32, i32* %61, align 4
  %99 = zext i32 %98 to i64
  %100 = shl nuw nsw i64 %99, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %83, i8* nonnull align 2 %96, i64 %100, i1 false) #8
  %101 = bitcast %"class.WTF::Vector"* %2 to i8**
  %102 = load i8*, i8** %101, align 8
  br label %103

103:                                              ; preds = %97, %89
  %104 = phi i8* [ %102, %97 ], [ %96, %89 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %104) #8
  %105 = bitcast %"class.WTF::Vector"* %2 to i64*
  store atomic i64 %91, i64* %105 monotonic, align 8
  %106 = trunc i64 %90 to i32
  store i32 %106, i32* %65, align 8
  br label %107

107:                                              ; preds = %103, %84, %68, %64
  %108 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %109 = load i16*, i16** %108, align 8
  %110 = load i32, i32* %61, align 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i16, i16* %109, i64 %111
  %113 = zext i32 %60 to i64
  %114 = getelementptr inbounds i16, i16* %109, i64 %113
  %115 = bitcast i16* %112 to i8*
  %116 = ptrtoint i16* %114 to i64
  %117 = ptrtoint i16* %112 to i64
  %118 = sub i64 %116, %117
  call void @llvm.memset.p0i8.i64(i8* align 2 %115, i8 0, i64 %118, i1 false) #8
  br label %119

119:                                              ; preds = %52, %107
  store i32 %60, i32* %61, align 4
  %120 = bitcast %"class.WTF::Vector"* %2 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds %"class.icu_69::Char16Ptr", %"class.icu_69::Char16Ptr"* %8, i64 0, i32 0
  %123 = bitcast %"class.icu_69::Char16Ptr"* %8 to i64*
  store i64 %121, i64* %123, align 8
  %124 = call i32 @_ZNK6icu_6913UnicodeString7extractENS_9Char16PtrEiR10UErrorCode(%"class.icu_69::UnicodeString"* nonnull %5, %"class.icu_69::Char16Ptr"* nonnull %8, i32 %60, i32* nonnull dereferenceable(4) %4) #8
  %125 = load i16*, i16** %122, align 8
  call void asm sideeffect "", "rm,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %125) #8, !srcloc !5
  call void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #8
  ret void
}

declare %"class.icu_69::Normalizer2"* @_ZN6icu_6911Normalizer214getNFCInstanceER10UErrorCode(i32* dereferenceable(4)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6icu_6913UnicodeStringC1EaNS_14ConstChar16PtrEi(%"class.icu_69::UnicodeString"*, i8 signext, %"class.icu_69::ConstChar16Ptr"*, i32) unnamed_addr #4

declare void @_ZN6icu_6913UnicodeStringC1ERKS0_i(%"class.icu_69::UnicodeString"*, %"class.icu_69::UnicodeString"* dereferenceable(64), i32) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN6icu_6913UnicodeStringD1Ev(%"class.icu_69::UnicodeString"*) unnamed_addr #5

declare i32 @_ZNK6icu_6913UnicodeString7extractENS_9Char16PtrEiR10UErrorCode(%"class.icu_69::UnicodeString"*, %"class.icu_69::Char16Ptr"*, i32, i32* dereferenceable(4)) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink29CheckOnlyKanaLettersInStringsEPKDsjS1_j(i16*, i32, i16* readonly, i32) local_unnamed_addr #6 {
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds i16, i16* %0, i64 %5
  %7 = zext i32 %3 to i64
  %8 = getelementptr inbounds i16, i16* %2, i64 %7
  br label %9

9:                                                ; preds = %91, %4
  %10 = phi i16* [ %0, %4 ], [ %99, %91 ]
  %11 = phi i16* [ %2, %4 ], [ %100, %91 ]
  %12 = icmp eq i16* %10, %6
  br i1 %12, label %32, label %13

13:                                               ; preds = %9, %29
  %14 = phi i16* [ %30, %29 ], [ %10, %9 ]
  %15 = load i16, i16* %14, align 2
  %16 = add i16 %15, -12353
  %17 = icmp ult i16 %16, 86
  %18 = add i16 %15, -12449
  %19 = icmp ult i16 %18, 90
  %20 = or i1 %17, %19
  %21 = and i16 %15, -16
  %22 = icmp eq i16 %21, 12784
  %23 = or i1 %22, %20
  br i1 %23, label %32, label %24

24:                                               ; preds = %13
  %25 = add i16 %15, 154
  %26 = icmp ult i16 %25, 56
  %27 = icmp ne i16 %15, -144
  %28 = and i1 %27, %26
  br i1 %28, label %32, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds i16, i16* %14, i64 1
  %31 = icmp eq i16* %30, %6
  br i1 %31, label %32, label %13

32:                                               ; preds = %29, %24, %13, %9
  %33 = phi i16* [ %6, %9 ], [ %14, %13 ], [ %14, %24 ], [ %6, %29 ]
  %34 = phi i1 [ true, %9 ], [ false, %13 ], [ false, %24 ], [ true, %29 ]
  %35 = icmp eq i16* %11, %8
  br i1 %35, label %56, label %36

36:                                               ; preds = %32, %52
  %37 = phi i16* [ %53, %52 ], [ %11, %32 ]
  %38 = load i16, i16* %37, align 2
  %39 = add i16 %38, -12353
  %40 = icmp ult i16 %39, 86
  %41 = add i16 %38, -12449
  %42 = icmp ult i16 %41, 90
  %43 = or i1 %40, %42
  %44 = and i16 %38, -16
  %45 = icmp eq i16 %44, 12784
  %46 = or i1 %45, %43
  br i1 %46, label %55, label %47

47:                                               ; preds = %36
  %48 = add i16 %38, 154
  %49 = icmp ult i16 %48, 56
  %50 = icmp ne i16 %38, -144
  %51 = and i1 %50, %49
  br i1 %51, label %55, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds i16, i16* %37, i64 1
  %54 = icmp eq i16* %53, %8
  br i1 %54, label %56, label %36

55:                                               ; preds = %36, %47
  br i1 %34, label %56, label %59

56:                                               ; preds = %55, %32, %52
  %57 = phi i1 [ true, %52 ], [ true, %32 ], [ false, %55 ]
  %58 = and i1 %34, %57
  br label %101

59:                                               ; preds = %55
  %60 = load i16, i16* %33, align 2
  %61 = tail call zeroext i1 @_ZN5blink17IsSmallKanaLetterEDs(i16 zeroext %60) #8
  %62 = tail call zeroext i1 @_ZN5blink17IsSmallKanaLetterEDs(i16 zeroext %38) #8
  %63 = xor i1 %61, %62
  br i1 %63, label %101, label %64

64:                                               ; preds = %59
  %65 = tail call fastcc i32 @_ZN5blinkL23ComposedVoicedSoundMarkEDs(i16 zeroext %60) #8
  %66 = tail call fastcc i32 @_ZN5blinkL23ComposedVoicedSoundMarkEDs(i16 zeroext %38) #8
  %67 = icmp eq i32 %65, %66
  br i1 %67, label %68, label %101

68:                                               ; preds = %64, %88
  %69 = phi i16* [ %72, %88 ], [ %33, %64 ]
  %70 = phi i16* [ %71, %88 ], [ %37, %64 ]
  %71 = getelementptr inbounds i16, i16* %70, i64 1
  %72 = getelementptr inbounds i16, i16* %69, i64 1
  %73 = icmp eq i16* %71, %8
  br i1 %73, label %79, label %74

74:                                               ; preds = %68
  %75 = load i16, i16* %71, align 2
  %76 = zext i16 %75 to i32
  %77 = add nsw i32 %76, -12441
  %78 = icmp ugt i32 %77, 1
  br label %79

79:                                               ; preds = %74, %68
  %80 = phi i1 [ true, %68 ], [ %78, %74 ]
  %81 = icmp eq i16* %72, %6
  br i1 %81, label %91, label %82

82:                                               ; preds = %79
  %83 = load i16, i16* %72, align 2
  %84 = zext i16 %83 to i32
  %85 = add nsw i32 %84, -12441
  %86 = icmp ult i32 %85, 2
  br i1 %86, label %87, label %91

87:                                               ; preds = %82
  br i1 %80, label %101, label %88

88:                                               ; preds = %87
  %89 = load i16, i16* %71, align 2
  %90 = icmp eq i16 %83, %89
  br i1 %90, label %68, label %101

91:                                               ; preds = %79, %82
  %92 = phi i16* [ %72, %82 ], [ %6, %79 ]
  %93 = ptrtoint i16* %92 to i64
  %94 = ptrtoint i16* %33 to i64
  %95 = sub i64 %93, %94
  %96 = ashr exact i64 %95, 1
  %97 = select i1 %80, i64 %96, i64 4294967295
  %98 = icmp eq i64 %97, 4294967295
  %99 = getelementptr inbounds i16, i16* %33, i64 %97
  %100 = getelementptr inbounds i16, i16* %37, i64 %97
  br i1 %98, label %101, label %9

101:                                              ; preds = %91, %64, %59, %88, %87, %56
  %102 = phi i1 [ %58, %56 ], [ false, %87 ], [ false, %88 ], [ false, %59 ], [ false, %64 ], [ false, %91 ]
  ret i1 %102
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink21CheckKanaStringsEqualEPKDsjS1_j(i16*, i32, i16* readonly, i32) local_unnamed_addr #6 {
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds i16, i16* %0, i64 %5
  %7 = zext i32 %3 to i64
  %8 = getelementptr inbounds i16, i16* %2, i64 %7
  br label %9

9:                                                ; preds = %51, %4
  %10 = phi i16* [ %0, %4 ], [ %52, %51 ]
  %11 = phi i16* [ %2, %4 ], [ %53, %51 ]
  %12 = icmp eq i16* %10, %6
  br i1 %12, label %13, label %15

13:                                               ; preds = %9
  %14 = icmp eq i16* %11, %8
  br label %56

15:                                               ; preds = %9
  %16 = load i16, i16* %10, align 2
  %17 = add i16 %16, -12353
  %18 = icmp ult i16 %17, 86
  %19 = add i16 %16, -12449
  %20 = icmp ult i16 %19, 90
  %21 = or i1 %18, %20
  %22 = and i16 %16, -16
  %23 = icmp eq i16 %22, 12784
  %24 = or i1 %23, %21
  br i1 %24, label %54, label %25

25:                                               ; preds = %15
  %26 = add i16 %16, 154
  %27 = icmp ult i16 %26, 56
  %28 = icmp ne i16 %16, -144
  %29 = and i1 %28, %27
  %30 = icmp eq i16* %11, %8
  %31 = or i1 %30, %29
  br i1 %31, label %54, label %32

32:                                               ; preds = %25
  %33 = load i16, i16* %11, align 2
  %34 = add i16 %33, -12353
  %35 = icmp ult i16 %34, 86
  %36 = add i16 %33, -12449
  %37 = icmp ult i16 %36, 90
  %38 = or i1 %35, %37
  %39 = and i16 %33, -16
  %40 = icmp eq i16 %39, 12784
  %41 = or i1 %40, %38
  br i1 %41, label %54, label %42

42:                                               ; preds = %32
  %43 = add i16 %33, 154
  %44 = icmp ugt i16 %43, 55
  %45 = icmp eq i16 %33, -144
  %46 = or i1 %45, %44
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = getelementptr inbounds i16, i16* %10, i64 1
  %49 = getelementptr inbounds i16, i16* %11, i64 1
  %50 = icmp eq i16 %16, %33
  br i1 %50, label %51, label %125

51:                                               ; preds = %47, %115
  %52 = phi i16* [ %48, %47 ], [ %123, %115 ]
  %53 = phi i16* [ %49, %47 ], [ %124, %115 ]
  br label %9

54:                                               ; preds = %32, %15, %25, %42
  %55 = icmp eq i16* %11, %8
  br i1 %55, label %56, label %60

56:                                               ; preds = %54, %13
  %57 = phi i1 [ true, %13 ], [ false, %54 ]
  %58 = phi i1 [ %14, %13 ], [ true, %54 ]
  %59 = and i1 %57, %58
  br label %125

60:                                               ; preds = %54
  br i1 %24, label %66, label %61

61:                                               ; preds = %60
  %62 = add i16 %16, 154
  %63 = icmp ult i16 %62, 56
  %64 = icmp ne i16 %16, -144
  %65 = and i1 %64, %63
  br label %66

66:                                               ; preds = %60, %61
  %67 = phi i1 [ %65, %61 ], [ true, %60 ]
  %68 = load i16, i16* %11, align 2
  %69 = add i16 %68, -12353
  %70 = icmp ult i16 %69, 86
  %71 = add i16 %68, -12449
  %72 = icmp ult i16 %71, 90
  %73 = or i1 %70, %72
  %74 = and i16 %68, -16
  %75 = icmp eq i16 %74, 12784
  %76 = or i1 %75, %73
  br i1 %76, label %77, label %78

77:                                               ; preds = %66
  br i1 %67, label %84, label %125

78:                                               ; preds = %66
  %79 = add i16 %68, 154
  %80 = icmp ult i16 %79, 56
  %81 = icmp ne i16 %68, -144
  %82 = and i1 %81, %80
  %83 = xor i1 %67, %82
  br i1 %83, label %125, label %84

84:                                               ; preds = %77, %78
  %85 = tail call zeroext i1 @_ZN5blink17IsSmallKanaLetterEDs(i16 zeroext %16) #8
  %86 = tail call zeroext i1 @_ZN5blink17IsSmallKanaLetterEDs(i16 zeroext %68) #8
  %87 = xor i1 %85, %86
  br i1 %87, label %125, label %88

88:                                               ; preds = %84
  %89 = tail call fastcc i32 @_ZN5blinkL23ComposedVoicedSoundMarkEDs(i16 zeroext %16) #8
  %90 = tail call fastcc i32 @_ZN5blinkL23ComposedVoicedSoundMarkEDs(i16 zeroext %68) #8
  %91 = icmp eq i32 %89, %90
  br i1 %91, label %92, label %125

92:                                               ; preds = %88, %112
  %93 = phi i16* [ %96, %112 ], [ %10, %88 ]
  %94 = phi i16* [ %95, %112 ], [ %11, %88 ]
  %95 = getelementptr inbounds i16, i16* %94, i64 1
  %96 = getelementptr inbounds i16, i16* %93, i64 1
  %97 = icmp eq i16* %95, %8
  br i1 %97, label %103, label %98

98:                                               ; preds = %92
  %99 = load i16, i16* %95, align 2
  %100 = zext i16 %99 to i32
  %101 = add nsw i32 %100, -12441
  %102 = icmp ugt i32 %101, 1
  br label %103

103:                                              ; preds = %98, %92
  %104 = phi i1 [ true, %92 ], [ %102, %98 ]
  %105 = icmp eq i16* %96, %6
  br i1 %105, label %115, label %106

106:                                              ; preds = %103
  %107 = load i16, i16* %96, align 2
  %108 = zext i16 %107 to i32
  %109 = add nsw i32 %108, -12441
  %110 = icmp ult i32 %109, 2
  br i1 %110, label %111, label %115

111:                                              ; preds = %106
  br i1 %104, label %125, label %112

112:                                              ; preds = %111
  %113 = load i16, i16* %95, align 2
  %114 = icmp eq i16 %107, %113
  br i1 %114, label %92, label %125

115:                                              ; preds = %103, %106
  %116 = phi i16* [ %96, %106 ], [ %6, %103 ]
  %117 = ptrtoint i16* %116 to i64
  %118 = ptrtoint i16* %10 to i64
  %119 = sub i64 %117, %118
  %120 = ashr exact i64 %119, 1
  %121 = select i1 %104, i64 %120, i64 4294967295
  %122 = icmp eq i64 %121, 4294967295
  %123 = getelementptr inbounds i16, i16* %10, i64 %121
  %124 = getelementptr inbounds i16, i16* %11, i64 %121
  br i1 %122, label %125, label %51

125:                                              ; preds = %77, %115, %88, %84, %78, %47, %112, %111, %56
  %126 = phi i1 [ %59, %56 ], [ false, %111 ], [ false, %112 ], [ false, %47 ], [ false, %78 ], [ false, %84 ], [ false, %88 ], [ false, %115 ], [ false, %77 ]
  ret i1 %126
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsDs(%"class.WTF::StringImpl"*, i16 zeroext, i16 zeroext) local_unnamed_addr #4

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare signext i8 @u_charType_69(i32) local_unnamed_addr #4

declare void @_ZN6icu_6913UnicodeString7unBogusEv(%"class.icu_69::UnicodeString"*) local_unnamed_addr #4

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal fastcc i32 @_ZN5blinkL23ComposedVoicedSoundMarkEDs(i16 zeroext) unnamed_addr #7 {
  switch i16 %0, label %3 [
    i16 12364, label %4
    i16 12366, label %4
    i16 12368, label %4
    i16 12370, label %4
    i16 12372, label %4
    i16 12374, label %4
    i16 12376, label %4
    i16 12378, label %4
    i16 12380, label %4
    i16 12382, label %4
    i16 12384, label %4
    i16 12386, label %4
    i16 12389, label %4
    i16 12391, label %4
    i16 12393, label %4
    i16 12400, label %4
    i16 12403, label %4
    i16 12406, label %4
    i16 12409, label %4
    i16 12412, label %4
    i16 12436, label %4
    i16 12460, label %4
    i16 12462, label %4
    i16 12464, label %4
    i16 12466, label %4
    i16 12468, label %4
    i16 12470, label %4
    i16 12472, label %4
    i16 12474, label %4
    i16 12476, label %4
    i16 12478, label %4
    i16 12480, label %4
    i16 12482, label %4
    i16 12485, label %4
    i16 12487, label %4
    i16 12489, label %4
    i16 12496, label %4
    i16 12499, label %4
    i16 12502, label %4
    i16 12505, label %4
    i16 12508, label %4
    i16 12532, label %4
    i16 12535, label %4
    i16 12536, label %4
    i16 12537, label %4
    i16 12538, label %4
    i16 12401, label %2
    i16 12404, label %2
    i16 12407, label %2
    i16 12410, label %2
    i16 12413, label %2
    i16 12497, label %2
    i16 12500, label %2
    i16 12503, label %2
    i16 12506, label %2
    i16 12509, label %2
  ]

2:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %3, %2
  %5 = phi i32 [ 0, %3 ], [ 2, %2 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ]
  ret i32 %5
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #2 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 -2138684950}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{i32 -2138685053}
