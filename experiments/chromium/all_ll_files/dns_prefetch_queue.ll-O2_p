; ModuleID = '../../components/network_hints/renderer/dns_prefetch_queue.cc'
source_filename = "../../components/network_hints/renderer/dns_prefetch_queue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.network_hints::DnsQueue" = type { %"class.std::__1::unique_ptr", i32, i32, i32, i32, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [62 x i8] c"../../components/network_hints/renderer/dns_prefetch_queue.cc\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"0 < static_cast<BufferSize>(size + 3)\00", align 1

@_ZN13network_hints8DnsQueueC1Ei = hidden unnamed_addr alias void (%"class.network_hints::DnsQueue"*, i32), void (%"class.network_hints::DnsQueue"*, i32)* @_ZN13network_hints8DnsQueueC2Ei
@_ZN13network_hints8DnsQueueD1Ev = hidden unnamed_addr alias void (%"class.network_hints::DnsQueue"*), void (%"class.network_hints::DnsQueue"*)* @_ZN13network_hints8DnsQueueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13network_hints8DnsQueueC2Ei(%"class.network_hints::DnsQueue"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = add nsw i32 %1, 2
  %5 = sext i32 %4 to i64
  %6 = tail call i8* @_Znam(i64 %5) #11
  %7 = ptrtoint i8* %6 to i64
  %8 = bitcast %"class.network_hints::DnsQueue"* %0 to i64*
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 1
  %10 = add nsw i32 %1, 1
  store i32 %10, i32* %9, align 8
  %11 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 2
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 5
  store i64 0, i64* %12, align 8
  %13 = icmp sgt i32 %1, -3
  br i1 %13, label %20, label %14

14:                                               ; preds = %2
  %15 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 20, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #12
  %16 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #12
  %17 = load i32, i32* %11, align 4
  %18 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  br label %20

20:                                               ; preds = %2, %14
  %21 = phi i8* [ %6, %2 ], [ %19, %14 ]
  %22 = phi i32 [ %10, %2 ], [ %17, %14 ]
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %21, i64 %23
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 4
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 3
  store i32 0, i32* %26, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13network_hints8DnsQueueD2Ev(%"class.network_hints::DnsQueue"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  store i8* null, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %3) #11
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13network_hints8DnsQueue5ClearEv(%"class.network_hints::DnsQueue"* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 5
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 3
  store i32 %4, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN13network_hints8DnsQueue4PushEPKcm(%"class.network_hints::DnsQueue"* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = trunc i64 %2 to i32
  %5 = add nsw i32 %4, 1
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %74, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 5
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  %11 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  br i1 %10, label %30, label %13

13:                                               ; preds = %7
  %14 = add nsw i32 %12, %4
  %15 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %14, %16
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = sext i32 %12 to i64
  %20 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %19
  %23 = tail call i32 @strncmp(i8* %1, i8* %22, i64 %2) #13
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %30

25:                                               ; preds = %18
  %26 = add i64 %19, %2
  %27 = getelementptr inbounds i8, i8* %21, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %74, label %30

30:                                               ; preds = %7, %25, %18, %13
  %31 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 4
  %32 = load i32, i32* %31, align 4
  %33 = sub nsw i32 %12, %32
  %34 = icmp slt i32 %33, 1
  br i1 %34, label %35, label %39

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = add nsw i32 %37, %33
  br label %39

39:                                               ; preds = %35, %30
  %40 = phi i32 [ %38, %35 ], [ %33, %30 ]
  %41 = icmp slt i32 %5, %40
  br i1 %41, label %42, label %74

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = sub nsw i32 %44, %32
  %46 = icmp sgt i32 %45, %4
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = sext i32 %32 to i64
  %49 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 %48
  %52 = sext i32 %45 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %1, i64 %52, i1 false)
  %53 = sub nsw i32 %4, %45
  %54 = getelementptr inbounds i8, i8* %1, i64 %52
  br label %55

55:                                               ; preds = %42, %47
  %56 = phi i8* [ %54, %47 ], [ %1, %42 ]
  %57 = phi i32 [ %53, %47 ], [ %4, %42 ]
  %58 = phi i32 [ 0, %47 ], [ %32, %42 ]
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %59
  %63 = sext i32 %57 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %56, i64 %63, i1 false)
  %64 = add i32 %58, %57
  %65 = sext i32 %64 to i64
  %66 = load i8*, i8** %60, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %65
  store i8 0, i8* %67, align 1
  %68 = add i32 %64, 1
  %69 = load i32, i32* %43, align 4
  %70 = icmp eq i32 %68, %69
  %71 = select i1 %70, i32 0, i32 %68
  store i32 %71, i32* %31, align 4
  %72 = load i64, i64* %8, align 8
  %73 = add i64 %72, 1
  store i64 %73, i64* %8, align 8
  br label %74

74:                                               ; preds = %55, %39, %25, %3
  %75 = phi i32 [ 1, %3 ], [ 2, %25 ], [ 0, %55 ], [ 1, %39 ]
  ret i32 %75
}

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13network_hints8DnsQueue3PopEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.network_hints::DnsQueue"* nocapture, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %87, label %8

8:                                                ; preds = %2
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %9
  %13 = load i8, i8* %12, align 1
  %14 = tail call i1 @llvm.is.constant.i8(i8 %13) #12
  br i1 %14, label %15, label %38

15:                                               ; preds = %8
  %16 = tail call i64 @strlen(i8* %12) #12
  %17 = icmp ult i64 %16, 23
  br i1 %17, label %18, label %36

18:                                               ; preds = %15
  %19 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %16, i64* %24, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  br label %30

27:                                               ; preds = %18
  %28 = trunc i64 %16 to i8
  store i8 %28, i8* %20, align 1
  %29 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %30

30:                                               ; preds = %27, %23
  %31 = phi i8* [ %26, %23 ], [ %29, %27 ]
  %32 = icmp eq i64 %16, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %30
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %12, i64 %16, i1 false) #12
  br label %34

34:                                               ; preds = %33, %30
  %35 = getelementptr inbounds i8, i8* %31, i64 %16
  store i8 0, i8* %35, align 1
  br label %40

36:                                               ; preds = %15
  %37 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %1, i8* %12, i64 %16) #12
  br label %40

38:                                               ; preds = %8
  %39 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %1, i8* %12) #12
  br label %40

40:                                               ; preds = %34, %36, %38
  %41 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %41, i64 0, i32 1, i32 0
  %43 = load i8, i8* %42, align 1
  %44 = icmp slt i8 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  br label %50

48:                                               ; preds = %40
  %49 = zext i8 %43 to i64
  br label %50

50:                                               ; preds = %45, %48
  %51 = phi i64 [ %47, %45 ], [ %49, %48 ]
  %52 = trunc i64 %51 to i32
  %53 = load i32, i32* %3, align 8
  %54 = add nsw i32 %53, %52
  %55 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %54, %56
  br i1 %57, label %73, label %58

58:                                               ; preds = %50
  %59 = load i8*, i8** %10, align 8
  %60 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %1, i8* %59) #12
  %61 = load i8, i8* %42, align 1
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  br label %68

66:                                               ; preds = %58
  %67 = zext i8 %61 to i64
  br label %68

68:                                               ; preds = %63, %66
  %69 = phi i64 [ %65, %63 ], [ %67, %66 ]
  %70 = trunc i64 %69 to i32
  %71 = sub nsw i32 %70, %52
  %72 = load i32, i32* %55, align 4
  br label %73

73:                                               ; preds = %50, %68
  %74 = phi i32 [ %72, %68 ], [ %56, %50 ]
  %75 = phi i32 [ %71, %68 ], [ %54, %50 ]
  %76 = add nsw i32 %75, 1
  %77 = icmp eq i32 %74, %76
  %78 = select i1 %77, i32 0, i32 %76
  store i32 %78, i32* %3, align 8
  %79 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 5
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, -1
  store i64 %81, i64* %79, align 8
  %82 = load i32, i32* %5, align 4
  %83 = icmp eq i32 %78, %82
  %84 = icmp eq i64 %81, 0
  %85 = or i1 %84, %83
  br i1 %85, label %86, label %87

86:                                               ; preds = %73
  store i32 0, i32* %5, align 4
  store i32 0, i32* %3, align 8
  br label %87

87:                                               ; preds = %86, %73, %2
  %88 = phi i1 [ false, %2 ], [ true, %73 ], [ true, %86 ]
  ret i1 %88
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN13network_hints8DnsQueue8ValidateEv(%"class.network_hints::DnsQueue"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %28

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %3, %7
  br i1 %8, label %9, label %28

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 4
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, -1
  %13 = icmp slt i32 %11, %7
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %28

15:                                               ; preds = %9
  %16 = sext i32 %7 to i64
  %17 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 %16
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %15
  %23 = getelementptr inbounds %"class.network_hints::DnsQueue", %"class.network_hints::DnsQueue"* %0, i64 0, i32 5
  %24 = load i64, i64* %23, align 8
  %25 = icmp ne i64 %24, 0
  %26 = icmp eq i32 %3, %11
  %27 = xor i1 %26, %25
  br label %28

28:                                               ; preds = %22, %15, %9, %5, %1
  %29 = phi i1 [ false, %15 ], [ false, %9 ], [ false, %5 ], [ false, %1 ], [ %27, %22 ]
  ret i1 %29
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i8(i8) #9

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
