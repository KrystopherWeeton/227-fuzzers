; ModuleID = '../../third_party/skia/src/gpu/GrSurface.cpp'
source_filename = "../../third_party/skia/src/gpu/GrSurface.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrBackendFormat = type { i32, i8, %union.anon, i32, [4 x i8] }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.3 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.2, [4 x i8] }>
%union.anon.2 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp, i8* }
%class.sk_sp = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.GrGpu = type opaque
%"class.GrGpuResource::UniqueID" = type { i32 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.3 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.4, void (i8*)*, i8* }
%class.SkNVRefCnt.4 = type { %"struct.std::__1::atomic" }
%class.SkTraceMemoryDump = type opaque
%class.SkString = type { %class.sk_sp.5 }
%class.sk_sp.5 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.GrRenderTarget = type <{ i32 (...)**, %class.sk_sp.6, %class.sk_sp.6, i32, [4 x i8], %class.GrSurface }>
%class.sk_sp.6 = type { %class.GrAttachment* }
%class.GrAttachment = type opaque

$_ZNK9GrSurface15getResourceTypeEv = comdat any

$_ZN9GrSurfaceD2Ev = comdat any

$_ZN9GrSurfaceD0Ev = comdat any

$_ZNK13GrGpuResource16setMemoryBackingEP17SkTraceMemoryDumpRK8SkString = comdat any

$_ZNK13GrGpuResource17computeScratchKeyEP12GrScratchKey = comdat any

$_ZN9GrSurface9asTextureEv = comdat any

$_ZNK9GrSurface9asTextureEv = comdat any

$_ZN9GrSurface14asRenderTargetEv = comdat any

$_ZNK9GrSurface14asRenderTargetEv = comdat any

$_ZN9GrSurface12onSetReleaseE5sk_spI18GrRefCntedCallbackE = comdat any

@_ZTV9GrSurface = hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGpuResource*, %class.SkTraceMemoryDump*)* @_ZNK13GrGpuResource20dumpMemoryStatisticsEP17SkTraceMemoryDump to i8*), i8* bitcast (i8* (%class.GrSurface*)* @_ZNK9GrSurface15getResourceTypeEv to i8*), i8* bitcast (void (%class.GrSurface*)* @_ZN9GrSurfaceD2Ev to i8*), i8* bitcast (void (%class.GrSurface*)* @_ZN9GrSurfaceD0Ev to i8*), i8* bitcast (void (%class.GrSurface*)* @_ZN9GrSurface9onReleaseEv to i8*), i8* bitcast (void (%class.GrSurface*)* @_ZN9GrSurface9onAbandonEv to i8*), i8* bitcast (void (%class.GrGpuResource*, %class.SkTraceMemoryDump*, %class.SkString*)* @_ZNK13GrGpuResource16setMemoryBackingEP17SkTraceMemoryDumpRK8SkString to i8*), i8* bitcast (void (%class.GrGpuResource*, %class.GrScratchKey*)* @_ZNK13GrGpuResource17computeScratchKeyEP12GrScratchKey to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%class.GrTexture* (%class.GrSurface*)* @_ZN9GrSurface9asTextureEv to i8*), i8* bitcast (%class.GrTexture* (%class.GrSurface*)* @_ZNK9GrSurface9asTextureEv to i8*), i8* bitcast (%class.GrRenderTarget* (%class.GrSurface*)* @_ZN9GrSurface14asRenderTargetEv to i8*), i8* bitcast (%class.GrRenderTarget* (%class.GrSurface*)* @_ZNK9GrSurface14asRenderTargetEv to i8*), i8* bitcast (void (%class.GrSurface*, %class.sk_sp.3*)* @_ZN9GrSurface12onSetReleaseE5sk_spI18GrRefCntedCallbackE to i8*)] }, align 8
@.str = private unnamed_addr constant [8 x i8] c"Surface\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN9GrSurface11ComputeSizeERK15GrBackendFormat7SkISizei11GrMipmappedb(%class.GrBackendFormat* dereferenceable(72), i64, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 3
  br i1 %8, label %32, label %9

9:                                                ; preds = %5
  br i1 %4, label %10, label %12

10:                                               ; preds = %9
  %11 = tail call i64 @_ZN18GrResourceProvider10MakeApproxE7SkISize(i64 %1) #5
  br label %12

12:                                               ; preds = %10, %9
  %13 = phi i64 [ %11, %10 ], [ %1, %9 ]
  %14 = tail call i32 @_Z32GrBackendFormatToCompressionTypeRK15GrBackendFormat(%class.GrBackendFormat* dereferenceable(72) %0) #5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call i64 @_Z26SkCompressedFormatDataSizeN7SkImage15CompressionTypeE7SkISizeb(i32 %14, i64 %13, i1 zeroext %3) #5
  br label %25

18:                                               ; preds = %12
  %19 = shl i64 %13, 32
  %20 = ashr exact i64 %19, 32
  %21 = ashr i64 %13, 32
  %22 = mul nsw i64 %20, %21
  %23 = tail call i64 @_Z28GrBackendFormatBytesPerPixelRK15GrBackendFormat(%class.GrBackendFormat* dereferenceable(72) %0) #5
  %24 = mul i64 %22, %23
  br label %25

25:                                               ; preds = %18, %16
  %26 = phi i64 [ %17, %16 ], [ %24, %18 ]
  %27 = sext i32 %2 to i64
  %28 = mul i64 %26, %27
  br i1 %3, label %29, label %32

29:                                               ; preds = %25
  %30 = udiv i64 %26, 3
  %31 = add i64 %28, %30
  br label %32

32:                                               ; preds = %25, %29, %5
  %33 = phi i64 [ 0, %5 ], [ %31, %29 ], [ %28, %25 ]
  ret i64 %33
}

declare i64 @_ZN18GrResourceProvider10MakeApproxE7SkISize(i64) local_unnamed_addr #1

declare i32 @_Z32GrBackendFormatToCompressionTypeRK15GrBackendFormat(%class.GrBackendFormat* dereferenceable(72)) local_unnamed_addr #1

declare i64 @_Z26SkCompressedFormatDataSizeN7SkImage15CompressionTypeE7SkISizeb(i32, i64, i1 zeroext) local_unnamed_addr #1

declare i64 @_Z28GrBackendFormatBytesPerPixelRK15GrBackendFormat(%class.GrBackendFormat* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrSurface9onReleaseEv(%class.GrSurface* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %0, i64 0, i32 4, i32 0
  %3 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %2, align 8
  store %class.GrRefCntedCallback* null, %class.GrRefCntedCallback** %2, align 8
  %4 = icmp eq %class.GrRefCntedCallback* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %3, i64 0, i32 0
  %7 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.SkNVRefCnt.4, %class.SkNVRefCnt.4* %6, i64 2
  %12 = bitcast %class.SkNVRefCnt.4* %11 to void (i8*)**
  %13 = load void (i8*)*, void (i8*)** %12, align 8
  %14 = getelementptr inbounds %class.SkNVRefCnt.4, %class.SkNVRefCnt.4* %6, i64 4
  %15 = bitcast %class.SkNVRefCnt.4* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void %13(i8* %16) #5
  %17 = bitcast %class.GrRefCntedCallback* %3 to i8*
  tail call void @_ZdlPv(i8* %17) #6
  br label %18

18:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrSurface9onAbandonEv(%class.GrSurface* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %0, i64 0, i32 4, i32 0
  %3 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %2, align 8
  store %class.GrRefCntedCallback* null, %class.GrRefCntedCallback** %2, align 8
  %4 = icmp eq %class.GrRefCntedCallback* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %3, i64 0, i32 0
  %7 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.SkNVRefCnt.4, %class.SkNVRefCnt.4* %6, i64 2
  %12 = bitcast %class.SkNVRefCnt.4* %11 to void (i8*)**
  %13 = load void (i8*)*, void (i8*)** %12, align 8
  %14 = getelementptr inbounds %class.SkNVRefCnt.4, %class.SkNVRefCnt.4* %6, i64 4
  %15 = bitcast %class.SkNVRefCnt.4* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void %13(i8* %16) #5
  %17 = bitcast %class.GrRefCntedCallback* %3 to i8*
  tail call void @_ZdlPv(i8* %17) #6
  br label %18

18:                                               ; preds = %1, %5, %10
  ret void
}

declare void @_ZNK13GrGpuResource20dumpMemoryStatisticsEP17SkTraceMemoryDump(%class.GrGpuResource*, %class.SkTraceMemoryDump*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK9GrSurface15getResourceTypeEv(%class.GrSurface*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrSurfaceD2Ev(%class.GrSurface*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV9GrSurface, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %0, i64 0, i32 4, i32 0
  %4 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %3, align 8
  %5 = icmp eq %class.GrRefCntedCallback* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %4, i64 0, i32 0
  %8 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 -1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %19

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.SkNVRefCnt.4, %class.SkNVRefCnt.4* %7, i64 2
  %13 = bitcast %class.SkNVRefCnt.4* %12 to void (i8*)**
  %14 = load void (i8*)*, void (i8*)** %13, align 8
  %15 = getelementptr inbounds %class.SkNVRefCnt.4, %class.SkNVRefCnt.4* %7, i64 4
  %16 = bitcast %class.SkNVRefCnt.4* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  tail call void %14(i8* %17) #5
  %18 = bitcast %class.GrRefCntedCallback* %4 to i8*
  tail call void @_ZdlPv(i8* %18) #6
  br label %19

19:                                               ; preds = %1, %6, %11
  %20 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %0, i64 0, i32 0
  tail call void @_ZN13GrGpuResourceD2Ev(%class.GrGpuResource* %20) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrSurfaceD0Ev(%class.GrSurface*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #7
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK13GrGpuResource16setMemoryBackingEP17SkTraceMemoryDumpRK8SkString(%class.GrGpuResource*, %class.SkTraceMemoryDump*, %class.SkString* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK13GrGpuResource17computeScratchKeyEP12GrScratchKey(%class.GrGpuResource*, %class.GrScratchKey*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.GrTexture* @_ZN9GrSurface9asTextureEv(%class.GrSurface*) unnamed_addr #0 comdat align 2 {
  ret %class.GrTexture* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.GrTexture* @_ZNK9GrSurface9asTextureEv(%class.GrSurface*) unnamed_addr #0 comdat align 2 {
  ret %class.GrTexture* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.GrRenderTarget* @_ZN9GrSurface14asRenderTargetEv(%class.GrSurface*) unnamed_addr #0 comdat align 2 {
  ret %class.GrRenderTarget* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.GrRenderTarget* @_ZNK9GrSurface14asRenderTargetEv(%class.GrSurface*) unnamed_addr #0 comdat align 2 {
  ret %class.GrRenderTarget* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrSurface12onSetReleaseE5sk_spI18GrRefCntedCallbackE(%class.GrSurface*, %class.sk_sp.3*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN13GrGpuResourceD2Ev(%class.GrGpuResource*) unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
