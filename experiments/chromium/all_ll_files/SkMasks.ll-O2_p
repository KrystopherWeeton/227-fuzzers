; ModuleID = '../../third_party/skia/src/codec/SkMasks.cpp'
source_filename = "../../third_party/skia/src/codec/SkMasks.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMasks = type { %"struct.SkMasks::MaskInfo", %"struct.SkMasks::MaskInfo", %"struct.SkMasks::MaskInfo", %"struct.SkMasks::MaskInfo" }
%"struct.SkMasks::MaskInfo" = type { i32, i32, i32 }

@_ZL27n_bit_to_8_bit_lookup_table = internal unnamed_addr constant [254 x i8] c"\00\FF\00U\AA\FF\00$Im\92\B6\DB\FF\00\11\223DUfw\88\99\AA\BB\CC\DD\EE\FF\00\08\10\19!)1:BJRZcks{\84\8C\94\9C\A5\AD\B5\BD\C5\CE\D6\DE\E6\EF\F7\FF\00\04\08\0C\10\14\18\1C $(-159=AEIMQUY]aeimquy}\82\86\8A\8E\92\96\9A\9E\A2\A6\AA\AE\B2\B6\BA\BE\C2\C6\CA\CE\D2\D7\DB\DF\E3\E7\EB\EF\F3\F7\FB\FF\00\02\04\06\08\0A\0C\0E\10\12\14\16\18\1A\1C\1E \22$&(*,.02468:<>@BDFHJLNPRTVXZ\5C^`bdfhjlnprtvxz|~\81\83\85\87\89\8B\8D\8F\91\93\95\97\99\9B\9D\9F\A1\A3\A5\A7\A9\AB\AD\AF\B1\B3\B5\B7\B9\BB\BD\BF\C1\C3\C5\C7\C9\CB\CD\CF\D1\D3\D5\D7\D9\DB\DD\DF\E1\E3\E5\E7\E9\EB\ED\EF\F1\F3\F5\F7\F9\FB\FD\FF", align 16

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK7SkMasks6getRedEj(%class.SkMasks* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %4, %1
  %10 = lshr i32 %9, %6
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %2
  %13 = trunc i32 %10 to i8
  %14 = icmp ult i32 %8, 8
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = shl i32 1, %8
  %17 = and i32 %10, 255
  %18 = add nsw i32 %17, -2
  %19 = add nsw i32 %18, %16
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [254 x i8], [254 x i8]* @_ZL27n_bit_to_8_bit_lookup_table, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  br label %23

23:                                               ; preds = %2, %12, %15
  %24 = phi i8 [ %22, %15 ], [ 0, %2 ], [ %13, %12 ]
  ret i8 %24
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK7SkMasks8getGreenEj(%class.SkMasks* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 1, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 1, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %4, %1
  %10 = lshr i32 %9, %6
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %2
  %13 = trunc i32 %10 to i8
  %14 = icmp ult i32 %8, 8
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = shl i32 1, %8
  %17 = and i32 %10, 255
  %18 = add nsw i32 %17, -2
  %19 = add nsw i32 %18, %16
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [254 x i8], [254 x i8]* @_ZL27n_bit_to_8_bit_lookup_table, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  br label %23

23:                                               ; preds = %2, %12, %15
  %24 = phi i8 [ %22, %15 ], [ 0, %2 ], [ %13, %12 ]
  ret i8 %24
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK7SkMasks7getBlueEj(%class.SkMasks* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 2, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 2, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 2, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %4, %1
  %10 = lshr i32 %9, %6
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %2
  %13 = trunc i32 %10 to i8
  %14 = icmp ult i32 %8, 8
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = shl i32 1, %8
  %17 = and i32 %10, 255
  %18 = add nsw i32 %17, -2
  %19 = add nsw i32 %18, %16
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [254 x i8], [254 x i8]* @_ZL27n_bit_to_8_bit_lookup_table, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  br label %23

23:                                               ; preds = %2, %12, %15
  %24 = phi i8 [ %22, %15 ], [ 0, %2 ], [ %13, %12 ]
  ret i8 %24
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK7SkMasks8getAlphaEj(%class.SkMasks* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 3, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 3, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %class.SkMasks, %class.SkMasks* %0, i64 0, i32 3, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %4, %1
  %10 = lshr i32 %9, %6
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %2
  %13 = trunc i32 %10 to i8
  %14 = icmp ult i32 %8, 8
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = shl i32 1, %8
  %17 = and i32 %10, 255
  %18 = add nsw i32 %17, -2
  %19 = add nsw i32 %18, %16
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [254 x i8], [254 x i8]* @_ZL27n_bit_to_8_bit_lookup_table, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  br label %23

23:                                               ; preds = %2, %12, %15
  %24 = phi i8 [ %22, %15 ], [ 0, %2 ], [ %13, %12 ]
  ret i8 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias %class.SkMasks* @_ZN7SkMasks11CreateMasksENS_10InputMasksEi(i64, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = trunc i64 %0 to i32
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = trunc i64 %1 to i32
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = icmp slt i32 %2, 4
  br i1 %10, label %11, label %19

11:                                               ; preds = %3
  %12 = shl nsw i32 %2, 3
  %13 = shl nsw i32 -1, %12
  %14 = xor i32 %13, -1
  %15 = and i32 %14, %4
  %16 = and i32 %14, %6
  %17 = and i32 %14, %7
  %18 = and i32 %14, %9
  br label %19

19:                                               ; preds = %11, %3
  %20 = phi i32 [ %15, %11 ], [ %4, %3 ]
  %21 = phi i32 [ %16, %11 ], [ %6, %3 ]
  %22 = phi i32 [ %17, %11 ], [ %7, %3 ]
  %23 = phi i32 [ %18, %11 ], [ %9, %3 ]
  %24 = or i32 %22, %21
  %25 = or i32 %24, %23
  %26 = and i32 %25, %20
  %27 = and i32 %23, %22
  %28 = or i32 %23, %22
  %29 = and i32 %28, %21
  %30 = or i32 %29, %27
  %31 = or i32 %30, %26
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %223

33:                                               ; preds = %19
  %34 = tail call i8* @_Znwm(i64 48) #4
  %35 = bitcast i8* %34 to %class.SkMasks*
  %36 = icmp eq i32 %20, 0
  br i1 %36, label %71, label %37

37:                                               ; preds = %33
  %38 = and i32 %20, 1
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %43, %37
  %41 = phi i32 [ %20, %37 ], [ %47, %43 ]
  %42 = phi i32 [ 0, %37 ], [ %46, %43 ]
  br label %50

43:                                               ; preds = %37, %43
  %44 = phi i32 [ %47, %43 ], [ %20, %37 ]
  %45 = phi i32 [ %46, %43 ], [ 0, %37 ]
  %46 = add i32 %45, 1
  %47 = lshr i32 %44, 1
  %48 = and i32 %44, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %43, label %40

50:                                               ; preds = %50, %40
  %51 = phi i32 [ %54, %50 ], [ %41, %40 ]
  %52 = phi i32 [ %53, %50 ], [ 0, %40 ]
  %53 = add i32 %52, 1
  %54 = lshr i32 %51, 1
  %55 = and i32 %51, 2
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %50

57:                                               ; preds = %50
  %58 = icmp eq i32 %54, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %57
  %60 = tail call i32 @llvm.ctlz.i32(i32 %54, i1 true) #5, !range !2
  %61 = sub nuw nsw i32 32, %60
  %62 = add i32 %61, %53
  br label %63

63:                                               ; preds = %59, %57
  %64 = phi i32 [ %53, %57 ], [ %62, %59 ]
  %65 = icmp ugt i32 %64, 8
  br i1 %65, label %66, label %71

66:                                               ; preds = %63
  %67 = add i32 %42, -8
  %68 = add i32 %67, %64
  %69 = shl i32 255, %68
  %70 = and i32 %69, %20
  br label %71

71:                                               ; preds = %33, %63, %66
  %72 = phi i32 [ %68, %66 ], [ %42, %63 ], [ 0, %33 ]
  %73 = phi i32 [ 8, %66 ], [ %64, %63 ], [ 0, %33 ]
  %74 = phi i32 [ %70, %66 ], [ %20, %63 ], [ 0, %33 ]
  %75 = zext i32 %72 to i64
  %76 = shl nuw i64 %75, 32
  %77 = zext i32 %74 to i64
  %78 = or i64 %76, %77
  %79 = icmp eq i32 %21, 0
  br i1 %79, label %114, label %80

80:                                               ; preds = %71
  %81 = and i32 %21, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %86, %80
  %84 = phi i32 [ %21, %80 ], [ %90, %86 ]
  %85 = phi i32 [ 0, %80 ], [ %89, %86 ]
  br label %93

86:                                               ; preds = %80, %86
  %87 = phi i32 [ %90, %86 ], [ %21, %80 ]
  %88 = phi i32 [ %89, %86 ], [ 0, %80 ]
  %89 = add i32 %88, 1
  %90 = lshr i32 %87, 1
  %91 = and i32 %87, 2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %86, label %83

93:                                               ; preds = %93, %83
  %94 = phi i32 [ %97, %93 ], [ %84, %83 ]
  %95 = phi i32 [ %96, %93 ], [ 0, %83 ]
  %96 = add i32 %95, 1
  %97 = lshr i32 %94, 1
  %98 = and i32 %94, 2
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %93

100:                                              ; preds = %93
  %101 = icmp eq i32 %97, 0
  br i1 %101, label %106, label %102

102:                                              ; preds = %100
  %103 = tail call i32 @llvm.ctlz.i32(i32 %97, i1 true) #5, !range !2
  %104 = sub nuw nsw i32 32, %103
  %105 = add i32 %104, %96
  br label %106

106:                                              ; preds = %102, %100
  %107 = phi i32 [ %96, %100 ], [ %105, %102 ]
  %108 = icmp ugt i32 %107, 8
  br i1 %108, label %109, label %114

109:                                              ; preds = %106
  %110 = add i32 %85, -8
  %111 = add i32 %110, %107
  %112 = shl i32 255, %111
  %113 = and i32 %112, %21
  br label %114

114:                                              ; preds = %71, %106, %109
  %115 = phi i32 [ %111, %109 ], [ %85, %106 ], [ 0, %71 ]
  %116 = phi i32 [ 8, %109 ], [ %107, %106 ], [ 0, %71 ]
  %117 = phi i32 [ %113, %109 ], [ %21, %106 ], [ 0, %71 ]
  %118 = zext i32 %115 to i64
  %119 = shl nuw i64 %118, 32
  %120 = zext i32 %117 to i64
  %121 = or i64 %119, %120
  %122 = icmp eq i32 %22, 0
  br i1 %122, label %157, label %123

123:                                              ; preds = %114
  %124 = and i32 %22, 1
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %129, label %126

126:                                              ; preds = %129, %123
  %127 = phi i32 [ %22, %123 ], [ %133, %129 ]
  %128 = phi i32 [ 0, %123 ], [ %132, %129 ]
  br label %136

129:                                              ; preds = %123, %129
  %130 = phi i32 [ %133, %129 ], [ %22, %123 ]
  %131 = phi i32 [ %132, %129 ], [ 0, %123 ]
  %132 = add i32 %131, 1
  %133 = lshr i32 %130, 1
  %134 = and i32 %130, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %129, label %126

136:                                              ; preds = %136, %126
  %137 = phi i32 [ %140, %136 ], [ %127, %126 ]
  %138 = phi i32 [ %139, %136 ], [ 0, %126 ]
  %139 = add i32 %138, 1
  %140 = lshr i32 %137, 1
  %141 = and i32 %137, 2
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %136

143:                                              ; preds = %136
  %144 = icmp eq i32 %140, 0
  br i1 %144, label %149, label %145

145:                                              ; preds = %143
  %146 = tail call i32 @llvm.ctlz.i32(i32 %140, i1 true) #5, !range !2
  %147 = sub nuw nsw i32 32, %146
  %148 = add i32 %147, %139
  br label %149

149:                                              ; preds = %145, %143
  %150 = phi i32 [ %139, %143 ], [ %148, %145 ]
  %151 = icmp ugt i32 %150, 8
  br i1 %151, label %152, label %157

152:                                              ; preds = %149
  %153 = add i32 %128, -8
  %154 = add i32 %153, %150
  %155 = shl i32 255, %154
  %156 = and i32 %155, %22
  br label %157

157:                                              ; preds = %114, %149, %152
  %158 = phi i32 [ %154, %152 ], [ %128, %149 ], [ 0, %114 ]
  %159 = phi i32 [ 8, %152 ], [ %150, %149 ], [ 0, %114 ]
  %160 = phi i32 [ %156, %152 ], [ %22, %149 ], [ 0, %114 ]
  %161 = zext i32 %158 to i64
  %162 = shl nuw i64 %161, 32
  %163 = zext i32 %160 to i64
  %164 = or i64 %162, %163
  %165 = icmp eq i32 %23, 0
  br i1 %165, label %200, label %166

166:                                              ; preds = %157
  %167 = and i32 %23, 1
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %172, label %169

169:                                              ; preds = %172, %166
  %170 = phi i32 [ %23, %166 ], [ %176, %172 ]
  %171 = phi i32 [ 0, %166 ], [ %175, %172 ]
  br label %179

172:                                              ; preds = %166, %172
  %173 = phi i32 [ %176, %172 ], [ %23, %166 ]
  %174 = phi i32 [ %175, %172 ], [ 0, %166 ]
  %175 = add i32 %174, 1
  %176 = lshr i32 %173, 1
  %177 = and i32 %173, 2
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %172, label %169

179:                                              ; preds = %179, %169
  %180 = phi i32 [ %183, %179 ], [ %170, %169 ]
  %181 = phi i32 [ %182, %179 ], [ 0, %169 ]
  %182 = add i32 %181, 1
  %183 = lshr i32 %180, 1
  %184 = and i32 %180, 2
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %179

186:                                              ; preds = %179
  %187 = icmp eq i32 %183, 0
  br i1 %187, label %192, label %188

188:                                              ; preds = %186
  %189 = tail call i32 @llvm.ctlz.i32(i32 %183, i1 true) #5, !range !2
  %190 = sub nuw nsw i32 32, %189
  %191 = add i32 %190, %182
  br label %192

192:                                              ; preds = %188, %186
  %193 = phi i32 [ %182, %186 ], [ %191, %188 ]
  %194 = icmp ugt i32 %193, 8
  br i1 %194, label %195, label %200

195:                                              ; preds = %192
  %196 = add i32 %171, -8
  %197 = add i32 %196, %193
  %198 = shl i32 255, %197
  %199 = and i32 %198, %23
  br label %200

200:                                              ; preds = %157, %192, %195
  %201 = phi i32 [ %197, %195 ], [ %171, %192 ], [ 0, %157 ]
  %202 = phi i32 [ 8, %195 ], [ %193, %192 ], [ 0, %157 ]
  %203 = phi i32 [ %199, %195 ], [ %23, %192 ], [ 0, %157 ]
  %204 = zext i32 %201 to i64
  %205 = shl nuw i64 %204, 32
  %206 = zext i32 %203 to i64
  %207 = or i64 %205, %206
  %208 = bitcast i8* %34 to i64*
  store i64 %78, i64* %208, align 4
  %209 = getelementptr inbounds i8, i8* %34, i64 8
  %210 = bitcast i8* %209 to i32*
  store i32 %73, i32* %210, align 4
  %211 = getelementptr inbounds i8, i8* %34, i64 12
  %212 = bitcast i8* %211 to i64*
  store i64 %121, i64* %212, align 4
  %213 = getelementptr inbounds i8, i8* %34, i64 20
  %214 = bitcast i8* %213 to i32*
  store i32 %116, i32* %214, align 4
  %215 = getelementptr inbounds i8, i8* %34, i64 24
  %216 = bitcast i8* %215 to i64*
  store i64 %164, i64* %216, align 4
  %217 = getelementptr inbounds i8, i8* %34, i64 32
  %218 = bitcast i8* %217 to i32*
  store i32 %159, i32* %218, align 4
  %219 = getelementptr inbounds i8, i8* %34, i64 36
  %220 = bitcast i8* %219 to i64*
  store i64 %207, i64* %220, align 4
  %221 = getelementptr inbounds i8, i8* %34, i64 44
  %222 = bitcast i8* %221 to i32*
  store i32 %202, i32* %222, align 4
  br label %223

223:                                              ; preds = %19, %200
  %224 = phi %class.SkMasks* [ %35, %200 ], [ null, %19 ]
  ret %class.SkMasks* %224
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { builtin nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
