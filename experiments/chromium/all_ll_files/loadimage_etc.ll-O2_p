; ModuleID = '../../third_party/angle/src/image_util/loadimage_etc.cpp'
source_filename = "../../third_party/angle/src/image_util/loadimage_etc.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.angle::(anonymous namespace)::ETC2Block" = type { %union.anon }
%union.anon = type { %struct.anon.7 }
%struct.anon.7 = type { i64 }
%"struct.angle::R8G8B8A8" = type { i8, i8, i8, i8 }
%struct.anon.1 = type { %union.anon.2, i8 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { [3 x i8] }
%struct.anon = type { %union.anon.0, [2 x i8], [2 x i8] }
%union.anon.0 = type { %struct.anon.5 }
%struct.anon.5 = type { i32 }
%struct.anon.8 = type { %union.anon.9, [7 x i8] }
%union.anon.9 = type { i8 }

@_ZN5angle12_GLOBAL__N_121DefaultETCAlphaValuesE = internal constant [4 x [4 x i8]] [[4 x i8] c"\FF\FF\FF\FF", [4 x i8] c"\FF\FF\FF\FF", [4 x i8] c"\FF\FF\FF\FF", [4 x i8] c"\FF\FF\FF\FF"], align 16
@_ZN5angle12_GLOBAL__N_126intensityModifierNonOpaqueE = internal unnamed_addr constant [8 x [4 x i32]] [[4 x i32] [i32 0, i32 8, i32 0, i32 -8], [4 x i32] [i32 0, i32 17, i32 0, i32 -17], [4 x i32] [i32 0, i32 29, i32 0, i32 -29], [4 x i32] [i32 0, i32 42, i32 0, i32 -42], [4 x i32] [i32 0, i32 60, i32 0, i32 -60], [4 x i32] [i32 0, i32 80, i32 0, i32 -80], [4 x i32] [i32 0, i32 106, i32 0, i32 -106], [4 x i32] [i32 0, i32 183, i32 0, i32 -183]], align 16
@_ZN5angle12_GLOBAL__N_124intensityModifierDefaultE = internal unnamed_addr constant [8 x [4 x i32]] [[4 x i32] [i32 2, i32 8, i32 -2, i32 -8], [4 x i32] [i32 5, i32 17, i32 -5, i32 -17], [4 x i32] [i32 9, i32 29, i32 -9, i32 -29], [4 x i32] [i32 13, i32 42, i32 -13, i32 -42], [4 x i32] [i32 18, i32 60, i32 -18, i32 -60], [4 x i32] [i32 24, i32 80, i32 -24, i32 -80], [4 x i32] [i32 33, i32 106, i32 -33, i32 -106], [4 x i32] [i32 47, i32 183, i32 -47, i32 -183]], align 16
@_ZZNK5angle12_GLOBAL__N_19ETC2Block20transcodeHBlockToBC1EPhmmmmPA4_KhbE8distance = internal unnamed_addr constant [8 x i32] [i32 3, i32 6, i32 11, i32 16, i32 23, i32 32, i32 41, i32 64], align 16
@__const._ZNK5angle12_GLOBAL__N_19ETC2Block25transcodePlanarBlockToBC1EPhmmmmPA4_Kh.pixelIndices = private unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15], align 16
@__const._ZNK5angle12_GLOBAL__N_19ETC2Block25transcodePlanarBlockToBC1EPhmmmmPA4_Kh.pixelIndexCounts = private unnamed_addr constant [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], align 16
@_ZZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmmE13modifierTable = internal unnamed_addr constant [16 x [8 x i32]] [[8 x i32] [i32 -3, i32 -6, i32 -9, i32 -15, i32 2, i32 5, i32 8, i32 14], [8 x i32] [i32 -3, i32 -7, i32 -10, i32 -13, i32 2, i32 6, i32 9, i32 12], [8 x i32] [i32 -2, i32 -5, i32 -8, i32 -13, i32 1, i32 4, i32 7, i32 12], [8 x i32] [i32 -2, i32 -4, i32 -6, i32 -13, i32 1, i32 3, i32 5, i32 12], [8 x i32] [i32 -3, i32 -6, i32 -8, i32 -12, i32 2, i32 5, i32 7, i32 11], [8 x i32] [i32 -3, i32 -7, i32 -9, i32 -11, i32 2, i32 6, i32 8, i32 10], [8 x i32] [i32 -4, i32 -7, i32 -8, i32 -11, i32 3, i32 6, i32 7, i32 10], [8 x i32] [i32 -3, i32 -5, i32 -8, i32 -11, i32 2, i32 4, i32 7, i32 10], [8 x i32] [i32 -2, i32 -6, i32 -8, i32 -10, i32 1, i32 5, i32 7, i32 9], [8 x i32] [i32 -2, i32 -5, i32 -8, i32 -10, i32 1, i32 4, i32 7, i32 9], [8 x i32] [i32 -2, i32 -4, i32 -8, i32 -10, i32 1, i32 3, i32 7, i32 9], [8 x i32] [i32 -2, i32 -5, i32 -7, i32 -10, i32 1, i32 4, i32 6, i32 9], [8 x i32] [i32 -3, i32 -4, i32 -7, i32 -10, i32 2, i32 3, i32 6, i32 9], [8 x i32] [i32 -1, i32 -2, i32 -3, i32 -10, i32 0, i32 1, i32 2, i32 9], [8 x i32] [i32 -4, i32 -6, i32 -8, i32 -9, i32 3, i32 5, i32 7, i32 8], [8 x i32] [i32 -3, i32 -5, i32 -7, i32 -9, i32 2, i32 4, i32 6, i32 8]], align 16
@switch.table._ZNK5angle12_GLOBAL__N_19ETC2Block7packBC1EPvPKiS4_PKNS_8R8G8B8A8Emiib = private unnamed_addr constant [3 x i32] [i32 1, i32 3, i32 2], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle19LoadETC1RGB8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %43, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %32, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %43, label %14

24:                                               ; preds = %32, %16
  %25 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  br i1 %13, label %32, label %35

32:                                               ; preds = %35, %24
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %24, label %21

35:                                               ; preds = %24, %35
  %36 = phi i64 [ %41, %35 ], [ 0, %24 ]
  %37 = lshr exact i64 %36, 2
  %38 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %37
  %39 = shl i64 %36, 2
  %40 = getelementptr inbounds i8, i8* %31, i64 %39
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block11decodeAsRGBEPhmmmmmPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %38, i8* %40, i64 %36, i64 %25, i64 %0, i64 %1, i64 %7, [4 x i8]* getelementptr inbounds ([4 x [4 x i8]], [4 x [4 x i8]]* @_ZN5angle12_GLOBAL__N_121DefaultETCAlphaValuesE, i64 0, i64 0), i1 zeroext false) #6
  %41 = add i64 %36, 4
  %42 = icmp ult i64 %41, %0
  br i1 %42, label %35, label %32

43:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle17LoadETC1RGB8ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  tail call fastcc void @_ZN5angle12_GLOBAL__N_117LoadETC2RGB8ToBC1EmmmPKhmmPhmmb(i64 %0, i64 %1, i64 %2, i8* %3, i64 %4, i64 %5, i8* %6, i64 %7, i64 %8, i1 zeroext false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5angle12_GLOBAL__N_117LoadETC2RGB8ToBC1EmmmPKhmmPhmmb(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64, i1 zeroext) unnamed_addr #0 {
  %11 = alloca [16 x %"struct.angle::R8G8B8A8"], align 16
  %12 = alloca [16 x i32], align 16
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [4 x %"struct.angle::R8G8B8A8"], align 16
  %18 = alloca [16 x i32], align 16
  %19 = alloca [4 x i32], align 16
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = icmp eq i64 %2, 0
  br i1 %22, label %56, label %23

23:                                               ; preds = %10
  %24 = icmp eq i64 %1, 0
  %25 = icmp eq i64 %0, 0
  %26 = getelementptr inbounds [16 x %"struct.angle::R8G8B8A8"], [16 x %"struct.angle::R8G8B8A8"]* %11, i64 0, i64 0, i32 0
  %27 = getelementptr inbounds [16 x %"struct.angle::R8G8B8A8"], [16 x %"struct.angle::R8G8B8A8"]* %11, i64 0, i64 0
  %28 = bitcast [16 x i32]* %18 to i8*
  %29 = bitcast [16 x i32]* %12 to i8*
  %30 = bitcast i32* %13 to i8*
  %31 = bitcast i32* %14 to i8*
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %12, i64 0, i64 0
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 0
  %34 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 0, i32 0
  %35 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 0
  %36 = bitcast [4 x %"struct.angle::R8G8B8A8"]* %17 to i32*
  %37 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 1
  %38 = bitcast %"struct.angle::R8G8B8A8"* %37 to i32*
  %39 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 2
  %40 = bitcast %"struct.angle::R8G8B8A8"* %39 to i32*
  %41 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 3
  %42 = bitcast %"struct.angle::R8G8B8A8"* %41 to i32*
  %43 = bitcast [4 x i32]* %19 to i8*
  %44 = bitcast i32* %15 to i8*
  %45 = bitcast i32* %16 to i8*
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 0
  %47 = bitcast i32* %20 to i8*
  %48 = bitcast i32* %21 to i8*
  br label %49

49:                                               ; preds = %57, %23
  %50 = phi i64 [ 0, %23 ], [ %58, %57 ]
  br i1 %24, label %57, label %51

51:                                               ; preds = %49
  %52 = mul i64 %50, %5
  %53 = mul i64 %50, %8
  %54 = getelementptr inbounds i8, i8* %3, i64 %52
  %55 = getelementptr inbounds i8, i8* %6, i64 %53
  br label %60

56:                                               ; preds = %57, %10
  ret void

57:                                               ; preds = %68, %49
  %58 = add nuw i64 %50, 1
  %59 = icmp eq i64 %58, %2
  br i1 %59, label %56, label %49

60:                                               ; preds = %51, %68
  %61 = phi i64 [ 0, %51 ], [ %69, %68 ]
  %62 = lshr exact i64 %61, 2
  %63 = mul i64 %62, %4
  %64 = getelementptr inbounds i8, i8* %54, i64 %63
  %65 = bitcast i8* %64 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %66 = mul i64 %62, %7
  %67 = getelementptr inbounds i8, i8* %55, i64 %66
  br i1 %25, label %68, label %71

68:                                               ; preds = %604, %60
  %69 = add i64 %61, 4
  %70 = icmp ult i64 %69, %1
  br i1 %70, label %60, label %57

71:                                               ; preds = %60, %604
  %72 = phi i64 [ %605, %604 ], [ 0, %60 ]
  %73 = lshr exact i64 %72, 2
  %74 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %65, i64 %73
  %75 = shl i64 %72, 1
  %76 = getelementptr inbounds i8, i8* %67, i64 %75
  %77 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %74 to %struct.anon.1*
  %78 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %77, i64 0, i32 1
  %79 = load i8, i8* %78, align 1
  %80 = and i8 %79, 2
  %81 = icmp eq i8 %80, 0
  %82 = xor i1 %81, true
  %83 = or i1 %82, %9
  %84 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %74 to i24*
  %85 = load i24, i24* %84, align 1
  br i1 %83, label %86, label %575

86:                                               ; preds = %71
  %87 = lshr i24 %85, 3
  %88 = and i24 %87, 31
  %89 = zext i24 %88 to i32
  %90 = shl i24 %85, 21
  %91 = ashr exact i24 %90, 21
  %92 = zext i24 %91 to i32
  %93 = shl i32 %92, 24
  %94 = ashr exact i32 %93, 24
  %95 = add nsw i32 %94, %89
  %96 = lshr i24 %85, 19
  %97 = zext i24 %96 to i32
  %98 = shl i24 %85, 5
  %99 = ashr i24 %98, 21
  %100 = zext i24 %99 to i32
  %101 = shl i32 %100, 24
  %102 = ashr exact i32 %101, 24
  %103 = add nsw i32 %102, %97
  %104 = icmp ugt i32 %95, 31
  br i1 %104, label %105, label %294

105:                                              ; preds = %86
  %106 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %74 to i32*
  %107 = load i32, i32* %106, align 1
  %108 = lshr i32 %107, 1
  %109 = and i32 %108, 12
  %110 = and i32 %107, 3
  %111 = or i32 %109, %110
  %112 = shl nuw nsw i32 %111, 4
  %113 = lshr i32 %107, 12
  %114 = and i32 %113, 15
  %115 = shl nuw nsw i32 %114, 4
  %116 = or i32 %115, %114
  %117 = lshr i32 %107, 8
  %118 = and i32 %117, 15
  %119 = shl nuw nsw i32 %118, 4
  %120 = or i32 %119, %118
  %121 = lshr i32 %107, 20
  %122 = and i32 %121, 15
  %123 = shl nuw nsw i32 %122, 4
  %124 = or i32 %123, %122
  %125 = lshr i32 %107, 16
  %126 = and i32 %125, 15
  %127 = shl nuw nsw i32 %126, 4
  %128 = or i32 %127, %126
  %129 = lshr i32 %107, 28
  %130 = shl nuw nsw i32 %129, 4
  %131 = or i32 %130, %129
  %132 = lshr i32 %107, 25
  %133 = and i32 %132, 6
  %134 = lshr i32 %107, 24
  %135 = and i32 %134, 1
  %136 = or i32 %133, %135
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZNK5angle12_GLOBAL__N_19ETC2Block20transcodeHBlockToBC1EPhmmmmPA4_KhbE8distance, i64 0, i64 %137
  %139 = load i32, i32* %138, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #6
  %140 = shl nuw nsw i32 %120, 16
  %141 = shl nuw nsw i32 %116, 8
  %142 = or i32 %111, %112
  %143 = or i32 %142, %141
  %144 = or i32 %143, %140
  %145 = or i32 %144, -16777216
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 16, i1 false) #6
  store i32 %145, i32* %36, align 16
  %146 = add nsw i32 %124, %139
  %147 = add nsw i32 %128, %139
  %148 = add nsw i32 %131, %139
  %149 = icmp slt i32 %146, 255
  %150 = select i1 %149, i32 %146, i32 255
  %151 = icmp sgt i32 %150, 0
  %152 = select i1 %151, i32 %150, i32 0
  %153 = icmp slt i32 %147, 255
  %154 = select i1 %153, i32 %147, i32 255
  %155 = icmp sgt i32 %154, 0
  %156 = select i1 %155, i32 %154, i32 0
  %157 = icmp slt i32 %148, 255
  %158 = select i1 %157, i32 %148, i32 255
  %159 = icmp sgt i32 %158, 0
  %160 = select i1 %159, i32 %158, i32 0
  %161 = shl nsw i32 %160, 16
  %162 = shl nsw i32 %156, 8
  %163 = and i32 %162, 65280
  %164 = and i32 %152, 255
  %165 = or i32 %161, %164
  %166 = or i32 %165, %163
  %167 = or i32 %166, -16777216
  store i32 %167, i32* %38, align 4
  br i1 %81, label %174, label %168

168:                                              ; preds = %105
  %169 = shl nuw nsw i32 %131, 16
  %170 = shl nuw nsw i32 %128, 8
  %171 = or i32 %124, %169
  %172 = or i32 %171, %170
  %173 = or i32 %172, -16777216
  br label %174

174:                                              ; preds = %105, %168
  %175 = phi i32 [ %173, %168 ], [ 0, %105 ]
  store i32 %175, i32* %40, align 8
  %176 = sub nsw i32 %124, %139
  %177 = sub nsw i32 %128, %139
  %178 = sub nsw i32 %131, %139
  %179 = icmp slt i32 %176, 255
  %180 = select i1 %179, i32 %176, i32 255
  %181 = icmp sgt i32 %180, 0
  %182 = select i1 %181, i32 %180, i32 0
  %183 = icmp slt i32 %177, 255
  %184 = select i1 %183, i32 %177, i32 255
  %185 = icmp sgt i32 %184, 0
  %186 = select i1 %185, i32 %184, i32 0
  %187 = icmp slt i32 %178, 255
  %188 = select i1 %187, i32 %178, i32 255
  %189 = icmp sgt i32 %188, 0
  %190 = select i1 %189, i32 %188, i32 0
  %191 = shl nsw i32 %190, 16
  %192 = shl nsw i32 %186, 8
  %193 = and i32 %192, 65280
  %194 = and i32 %182, 255
  %195 = or i32 %191, %194
  %196 = or i32 %195, %193
  %197 = or i32 %196, -16777216
  store i32 %197, i32* %42, align 4
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 64, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 0, i64 16, i1 false) #6
  %198 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %74 to %struct.anon*
  br label %199

199:                                              ; preds = %199, %174
  %200 = phi i64 [ 0, %174 ], [ %289, %199 ]
  %201 = shl i64 %200, 2
  %202 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 %201
  %203 = lshr i64 %200, 3
  %204 = sub nsw i64 1, %203
  %205 = getelementptr inbounds %struct.anon, %struct.anon* %198, i64 0, i32 2, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = trunc i64 %200 to i32
  %209 = and i32 %208, 7
  %210 = lshr i32 %207, %209
  %211 = and i32 %210, 1
  %212 = getelementptr inbounds %struct.anon, %struct.anon* %198, i64 0, i32 1, i64 %204
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = lshr i32 %214, %209
  %216 = shl nuw nsw i32 %215, 1
  %217 = and i32 %216, 2
  %218 = or i32 %217, %211
  %219 = zext i32 %218 to i64
  store i32 %218, i32* %202, align 16
  %220 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = add nsw i32 %221, 1
  store i32 %222, i32* %220, align 4
  %223 = add nuw nsw i64 %200, 4
  %224 = lshr i64 %223, 3
  %225 = sub nsw i64 1, %224
  %226 = getelementptr inbounds %struct.anon, %struct.anon* %198, i64 0, i32 2, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = trunc i64 %223 to i32
  %230 = and i32 %229, 7
  %231 = lshr i32 %228, %230
  %232 = and i32 %231, 1
  %233 = getelementptr inbounds %struct.anon, %struct.anon* %198, i64 0, i32 1, i64 %225
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = lshr i32 %235, %230
  %237 = shl nuw nsw i32 %236, 1
  %238 = and i32 %237, 2
  %239 = or i32 %238, %232
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds i32, i32* %202, i64 1
  store i32 %239, i32* %241, align 4
  %242 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 %240
  %243 = load i32, i32* %242, align 4
  %244 = add nsw i32 %243, 1
  store i32 %244, i32* %242, align 4
  %245 = add nuw nsw i64 %200, 8
  %246 = lshr i64 %245, 3
  %247 = sub nsw i64 1, %246
  %248 = getelementptr inbounds %struct.anon, %struct.anon* %198, i64 0, i32 2, i64 %247
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i32
  %251 = trunc i64 %245 to i32
  %252 = and i32 %251, 7
  %253 = lshr i32 %250, %252
  %254 = and i32 %253, 1
  %255 = getelementptr inbounds %struct.anon, %struct.anon* %198, i64 0, i32 1, i64 %247
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i32
  %258 = lshr i32 %257, %252
  %259 = shl nuw nsw i32 %258, 1
  %260 = and i32 %259, 2
  %261 = or i32 %260, %254
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds i32, i32* %202, i64 2
  store i32 %261, i32* %263, align 8
  %264 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 %262
  %265 = load i32, i32* %264, align 4
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %264, align 4
  %267 = add nuw nsw i64 %200, 12
  %268 = lshr i64 %267, 3
  %269 = sub nsw i64 1, %268
  %270 = getelementptr inbounds %struct.anon, %struct.anon* %198, i64 0, i32 2, i64 %269
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = trunc i64 %267 to i32
  %274 = and i32 %273, 7
  %275 = lshr i32 %272, %274
  %276 = and i32 %275, 1
  %277 = getelementptr inbounds %struct.anon, %struct.anon* %198, i64 0, i32 1, i64 %269
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i32
  %280 = lshr i32 %279, %274
  %281 = shl nuw nsw i32 %280, 1
  %282 = and i32 %281, 2
  %283 = or i32 %282, %276
  %284 = zext i32 %283 to i64
  %285 = getelementptr inbounds i32, i32* %202, i64 3
  store i32 %283, i32* %285, align 4
  %286 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 %284
  %287 = load i32, i32* %286, align 4
  %288 = add nsw i32 %287, 1
  store i32 %288, i32* %286, align 4
  %289 = add nuw nsw i64 %200, 1
  %290 = icmp eq i64 %289, 4
  br i1 %290, label %291, label %199

291:                                              ; preds = %199
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #6
  store i32 -1431655766, i32* %20, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %48) #6
  store i32 -1431655766, i32* %21, align 4
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block17selectEndPointPCAEPKiPKNS_8R8G8B8A8EmPiS7_(i32* nonnull %46, %"struct.angle::R8G8B8A8"* nonnull %35, i64 4, i32* nonnull %20, i32* nonnull %21) #6
  %292 = load i32, i32* %20, align 4
  %293 = load i32, i32* %21, align 4
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block7packBC1EPvPKiS4_PKNS_8R8G8B8A8Emiib(i8* %76, i32* nonnull %33, i32* nonnull %46, %"struct.angle::R8G8B8A8"* nonnull %35, i64 4, i32 %292, i32 %293, i1 zeroext %81) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #6
  br label %604

294:                                              ; preds = %86
  %295 = shl i24 %85, 13
  %296 = ashr i24 %295, 21
  %297 = zext i24 %296 to i32
  %298 = shl i32 %297, 24
  %299 = ashr exact i32 %298, 24
  %300 = lshr i24 %85, 11
  %301 = and i24 %300, 31
  %302 = zext i24 %301 to i32
  %303 = add nsw i32 %299, %302
  %304 = icmp ugt i32 %303, 31
  br i1 %304, label %305, label %548

305:                                              ; preds = %294
  %306 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %74 to i32*
  %307 = load i32, i32* %306, align 1
  %308 = lshr i32 %307, 3
  %309 = and i32 %308, 15
  %310 = shl nuw nsw i32 %309, 4
  %311 = or i32 %310, %309
  %312 = shl i32 %307, 1
  %313 = and i32 %312, 14
  %314 = lshr i32 %307, 12
  %315 = and i32 %314, 1
  %316 = or i32 %313, %315
  %317 = shl nuw nsw i32 %316, 4
  %318 = or i32 %317, %316
  %319 = lshr i32 %307, 8
  %320 = and i32 %319, 8
  %321 = lshr i32 %307, 7
  %322 = and i32 %321, 6
  %323 = or i32 %320, %322
  %324 = lshr i32 %307, 23
  %325 = and i32 %324, 1
  %326 = or i32 %323, %325
  %327 = shl nuw nsw i32 %326, 4
  %328 = or i32 %327, %326
  %329 = lshr i32 %307, 19
  %330 = and i32 %329, 15
  %331 = shl nuw nsw i32 %330, 4
  %332 = or i32 %331, %330
  %333 = lshr i32 %307, 15
  %334 = and i32 %333, 14
  %335 = lshr i32 %307, 31
  %336 = or i32 %334, %335
  %337 = shl nuw nsw i32 %336, 4
  %338 = or i32 %337, %336
  %339 = lshr i32 %307, 27
  %340 = and i32 %339, 15
  %341 = shl nuw nsw i32 %340, 4
  %342 = or i32 %341, %340
  %343 = shl nuw nsw i32 %311, 16
  %344 = shl nuw nsw i32 %318, 8
  %345 = or i32 %344, %343
  %346 = or i32 %345, %328
  %347 = shl nuw nsw i32 %332, 16
  %348 = shl nuw nsw i32 %338, 8
  %349 = or i32 %347, %342
  %350 = or i32 %349, %348
  %351 = icmp sge i32 %346, %350
  %352 = zext i1 %351 to i32
  %353 = lshr i32 %307, 24
  %354 = and i32 %353, 4
  %355 = and i32 %324, 2
  %356 = or i32 %354, %355
  %357 = or i32 %356, %352
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZNK5angle12_GLOBAL__N_19ETC2Block20transcodeHBlockToBC1EPhmmmmPA4_KhbE8distance, i64 0, i64 %358
  %360 = load i32, i32* %359, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #6
  %361 = add nsw i32 %311, %360
  %362 = add nsw i32 %318, %360
  %363 = add nsw i32 %328, %360
  %364 = icmp slt i32 %361, 255
  %365 = select i1 %364, i32 %361, i32 255
  %366 = icmp sgt i32 %365, 0
  %367 = select i1 %366, i32 %365, i32 0
  %368 = icmp slt i32 %362, 255
  %369 = select i1 %368, i32 %362, i32 255
  %370 = icmp sgt i32 %369, 0
  %371 = select i1 %370, i32 %369, i32 0
  %372 = icmp slt i32 %363, 255
  %373 = select i1 %372, i32 %363, i32 255
  %374 = icmp sgt i32 %373, 0
  %375 = select i1 %374, i32 %373, i32 0
  %376 = shl nsw i32 %375, 16
  %377 = shl nsw i32 %371, 8
  %378 = and i32 %377, 65280
  %379 = and i32 %367, 255
  %380 = or i32 %379, %378
  %381 = or i32 %380, %376
  %382 = or i32 %381, -16777216
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 16, i1 false) #6
  store i32 %382, i32* %36, align 16
  %383 = sub nsw i32 %311, %360
  %384 = sub nsw i32 %318, %360
  %385 = sub nsw i32 %328, %360
  %386 = icmp slt i32 %383, 255
  %387 = select i1 %386, i32 %383, i32 255
  %388 = icmp sgt i32 %387, 0
  %389 = select i1 %388, i32 %387, i32 0
  %390 = icmp slt i32 %384, 255
  %391 = select i1 %390, i32 %384, i32 255
  %392 = icmp sgt i32 %391, 0
  %393 = select i1 %392, i32 %391, i32 0
  %394 = icmp slt i32 %385, 255
  %395 = select i1 %394, i32 %385, i32 255
  %396 = icmp sgt i32 %395, 0
  %397 = select i1 %396, i32 %395, i32 0
  %398 = shl nsw i32 %397, 16
  %399 = shl nsw i32 %393, 8
  %400 = and i32 %399, 65280
  %401 = and i32 %389, 255
  %402 = or i32 %401, %400
  %403 = or i32 %402, %398
  %404 = or i32 %403, -16777216
  store i32 %404, i32* %38, align 4
  br i1 %81, label %428, label %405

405:                                              ; preds = %305
  %406 = add nsw i32 %332, %360
  %407 = add nsw i32 %338, %360
  %408 = add nsw i32 %342, %360
  %409 = icmp slt i32 %406, 255
  %410 = select i1 %409, i32 %406, i32 255
  %411 = icmp sgt i32 %410, 0
  %412 = select i1 %411, i32 %410, i32 0
  %413 = icmp slt i32 %407, 255
  %414 = select i1 %413, i32 %407, i32 255
  %415 = icmp sgt i32 %414, 0
  %416 = select i1 %415, i32 %414, i32 0
  %417 = icmp slt i32 %408, 255
  %418 = select i1 %417, i32 %408, i32 255
  %419 = icmp sgt i32 %418, 0
  %420 = select i1 %419, i32 %418, i32 0
  %421 = shl nsw i32 %420, 16
  %422 = shl nsw i32 %416, 8
  %423 = and i32 %422, 65280
  %424 = and i32 %412, 255
  %425 = or i32 %424, %421
  %426 = or i32 %425, %423
  %427 = or i32 %426, -16777216
  br label %428

428:                                              ; preds = %305, %405
  %429 = phi i32 [ %427, %405 ], [ 0, %305 ]
  store i32 %429, i32* %40, align 8
  %430 = sub nsw i32 %332, %360
  %431 = sub nsw i32 %338, %360
  %432 = sub nsw i32 %342, %360
  %433 = icmp slt i32 %430, 255
  %434 = select i1 %433, i32 %430, i32 255
  %435 = icmp sgt i32 %434, 0
  %436 = select i1 %435, i32 %434, i32 0
  %437 = icmp slt i32 %431, 255
  %438 = select i1 %437, i32 %431, i32 255
  %439 = icmp sgt i32 %438, 0
  %440 = select i1 %439, i32 %438, i32 0
  %441 = icmp slt i32 %432, 255
  %442 = select i1 %441, i32 %432, i32 255
  %443 = icmp sgt i32 %442, 0
  %444 = select i1 %443, i32 %442, i32 0
  %445 = shl nsw i32 %444, 16
  %446 = shl nsw i32 %440, 8
  %447 = and i32 %446, 65280
  %448 = and i32 %436, 255
  %449 = or i32 %448, %445
  %450 = or i32 %449, %447
  %451 = or i32 %450, -16777216
  store i32 %451, i32* %42, align 4
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 64, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 0, i64 16, i1 false) #6
  %452 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %74 to %struct.anon*
  br label %453

453:                                              ; preds = %453, %428
  %454 = phi i64 [ 0, %428 ], [ %543, %453 ]
  %455 = shl i64 %454, 2
  %456 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 %455
  %457 = lshr i64 %454, 3
  %458 = sub nsw i64 1, %457
  %459 = getelementptr inbounds %struct.anon, %struct.anon* %452, i64 0, i32 2, i64 %458
  %460 = load i8, i8* %459, align 1
  %461 = zext i8 %460 to i32
  %462 = trunc i64 %454 to i32
  %463 = and i32 %462, 7
  %464 = lshr i32 %461, %463
  %465 = and i32 %464, 1
  %466 = getelementptr inbounds %struct.anon, %struct.anon* %452, i64 0, i32 1, i64 %458
  %467 = load i8, i8* %466, align 1
  %468 = zext i8 %467 to i32
  %469 = lshr i32 %468, %463
  %470 = shl nuw nsw i32 %469, 1
  %471 = and i32 %470, 2
  %472 = or i32 %471, %465
  %473 = zext i32 %472 to i64
  store i32 %472, i32* %456, align 16
  %474 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 %473
  %475 = load i32, i32* %474, align 4
  %476 = add nsw i32 %475, 1
  store i32 %476, i32* %474, align 4
  %477 = add nuw nsw i64 %454, 4
  %478 = lshr i64 %477, 3
  %479 = sub nsw i64 1, %478
  %480 = getelementptr inbounds %struct.anon, %struct.anon* %452, i64 0, i32 2, i64 %479
  %481 = load i8, i8* %480, align 1
  %482 = zext i8 %481 to i32
  %483 = trunc i64 %477 to i32
  %484 = and i32 %483, 7
  %485 = lshr i32 %482, %484
  %486 = and i32 %485, 1
  %487 = getelementptr inbounds %struct.anon, %struct.anon* %452, i64 0, i32 1, i64 %479
  %488 = load i8, i8* %487, align 1
  %489 = zext i8 %488 to i32
  %490 = lshr i32 %489, %484
  %491 = shl nuw nsw i32 %490, 1
  %492 = and i32 %491, 2
  %493 = or i32 %492, %486
  %494 = zext i32 %493 to i64
  %495 = getelementptr inbounds i32, i32* %456, i64 1
  store i32 %493, i32* %495, align 4
  %496 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 %494
  %497 = load i32, i32* %496, align 4
  %498 = add nsw i32 %497, 1
  store i32 %498, i32* %496, align 4
  %499 = add nuw nsw i64 %454, 8
  %500 = lshr i64 %499, 3
  %501 = sub nsw i64 1, %500
  %502 = getelementptr inbounds %struct.anon, %struct.anon* %452, i64 0, i32 2, i64 %501
  %503 = load i8, i8* %502, align 1
  %504 = zext i8 %503 to i32
  %505 = trunc i64 %499 to i32
  %506 = and i32 %505, 7
  %507 = lshr i32 %504, %506
  %508 = and i32 %507, 1
  %509 = getelementptr inbounds %struct.anon, %struct.anon* %452, i64 0, i32 1, i64 %501
  %510 = load i8, i8* %509, align 1
  %511 = zext i8 %510 to i32
  %512 = lshr i32 %511, %506
  %513 = shl nuw nsw i32 %512, 1
  %514 = and i32 %513, 2
  %515 = or i32 %514, %508
  %516 = zext i32 %515 to i64
  %517 = getelementptr inbounds i32, i32* %456, i64 2
  store i32 %515, i32* %517, align 8
  %518 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 %516
  %519 = load i32, i32* %518, align 4
  %520 = add nsw i32 %519, 1
  store i32 %520, i32* %518, align 4
  %521 = add nuw nsw i64 %454, 12
  %522 = lshr i64 %521, 3
  %523 = sub nsw i64 1, %522
  %524 = getelementptr inbounds %struct.anon, %struct.anon* %452, i64 0, i32 2, i64 %523
  %525 = load i8, i8* %524, align 1
  %526 = zext i8 %525 to i32
  %527 = trunc i64 %521 to i32
  %528 = and i32 %527, 7
  %529 = lshr i32 %526, %528
  %530 = and i32 %529, 1
  %531 = getelementptr inbounds %struct.anon, %struct.anon* %452, i64 0, i32 1, i64 %523
  %532 = load i8, i8* %531, align 1
  %533 = zext i8 %532 to i32
  %534 = lshr i32 %533, %528
  %535 = shl nuw nsw i32 %534, 1
  %536 = and i32 %535, 2
  %537 = or i32 %536, %530
  %538 = zext i32 %537 to i64
  %539 = getelementptr inbounds i32, i32* %456, i64 3
  store i32 %537, i32* %539, align 4
  %540 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 %538
  %541 = load i32, i32* %540, align 4
  %542 = add nsw i32 %541, 1
  store i32 %542, i32* %540, align 4
  %543 = add nuw nsw i64 %454, 1
  %544 = icmp eq i64 %543, 4
  br i1 %544, label %545, label %453

545:                                              ; preds = %453
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #6
  store i32 -1431655766, i32* %15, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #6
  store i32 -1431655766, i32* %16, align 4
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block17selectEndPointPCAEPKiPKNS_8R8G8B8A8EmPiS7_(i32* nonnull %46, %"struct.angle::R8G8B8A8"* nonnull %35, i64 4, i32* nonnull %15, i32* nonnull %16) #6
  %546 = load i32, i32* %15, align 4
  %547 = load i32, i32* %16, align 4
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block7packBC1EPvPKiS4_PKNS_8R8G8B8A8Emiib(i8* %76, i32* nonnull %33, i32* nonnull %46, %"struct.angle::R8G8B8A8"* nonnull %35, i64 4, i32 %546, i32 %547, i1 zeroext %81) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #6
  br label %604

548:                                              ; preds = %294
  %549 = icmp ugt i32 %103, 31
  br i1 %549, label %550, label %553

550:                                              ; preds = %548
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -86, i64 64, i1 false) #6
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block17decodePlanarBlockEPhmmmmmPA4_Kh(%"struct.angle::(anonymous namespace)::ETC2Block"* %74, i8* nonnull %26, i64 %72, i64 %61, i64 %0, i64 %1, i64 16, [4 x i8]* getelementptr inbounds ([4 x [4 x i8]], [4 x [4 x i8]]* @_ZN5angle12_GLOBAL__N_121DefaultETCAlphaValuesE, i64 0, i64 0)) #6
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %28) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %28, i8* align 16 bitcast ([16 x i32]* @__const._ZNK5angle12_GLOBAL__N_19ETC2Block25transcodePlanarBlockToBC1EPhmmmmPA4_Kh.pixelIndices to i8*), i64 64, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %29) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %29, i8* align 16 bitcast ([16 x i32]* @__const._ZNK5angle12_GLOBAL__N_19ETC2Block25transcodePlanarBlockToBC1EPhmmmmPA4_Kh.pixelIndexCounts to i8*), i64 64, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #6
  store i32 -1431655766, i32* %13, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #6
  store i32 -1431655766, i32* %14, align 4
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block17selectEndPointPCAEPKiPKNS_8R8G8B8A8EmPiS7_(i32* nonnull %32, %"struct.angle::R8G8B8A8"* nonnull %27, i64 16, i32* nonnull %13, i32* nonnull %14) #6
  %551 = load i32, i32* %13, align 4
  %552 = load i32, i32* %14, align 4
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block7packBC1EPvPKiS4_PKNS_8R8G8B8A8Emiib(i8* %76, i32* nonnull %33, i32* nonnull %32, %"struct.angle::R8G8B8A8"* nonnull %27, i64 16, i32 %551, i32 %552, i1 zeroext false) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %29) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %26) #6
  br label %604

553:                                              ; preds = %548
  %554 = shl nuw nsw i24 %96, 3
  %555 = zext i24 %554 to i32
  %556 = lshr i32 %97, 2
  %557 = or i32 %556, %555
  %558 = shl nuw nsw i24 %301, 3
  %559 = zext i24 %558 to i32
  %560 = lshr i32 %302, 2
  %561 = or i32 %560, %559
  %562 = shl nuw nsw i24 %88, 3
  %563 = zext i24 %562 to i32
  %564 = lshr i32 %89, 2
  %565 = or i32 %564, %563
  %566 = shl nsw i32 %95, 3
  %567 = lshr i32 %95, 2
  %568 = or i32 %566, %567
  %569 = shl nsw i32 %303, 3
  %570 = lshr i32 %303, 2
  %571 = or i32 %569, %570
  %572 = shl nsw i32 %103, 3
  %573 = lshr i32 %103, 2
  %574 = or i32 %572, %573
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block43transcodeIndividualOrDifferentialBlockToBC1EPhmmmmiiiiiiPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %74, i8* %76, i32 %565, i32 %561, i32 %557, i32 %568, i32 %571, i32 %574, i1 zeroext %81) #6
  br label %604

575:                                              ; preds = %71
  %576 = lshr i24 %85, 4
  %577 = and i24 %576, 15
  %578 = shl nuw nsw i24 %577, 4
  %579 = or i24 %578, %577
  %580 = zext i24 %579 to i32
  %581 = lshr i24 %85, 12
  %582 = and i24 %581, 15
  %583 = shl nuw nsw i24 %582, 4
  %584 = or i24 %583, %582
  %585 = zext i24 %584 to i32
  %586 = lshr i24 %85, 20
  %587 = shl nuw nsw i24 %586, 4
  %588 = or i24 %587, %586
  %589 = zext i24 %588 to i32
  %590 = and i24 %85, 15
  %591 = shl nuw nsw i24 %590, 4
  %592 = or i24 %591, %590
  %593 = zext i24 %592 to i32
  %594 = lshr i24 %85, 8
  %595 = and i24 %594, 15
  %596 = shl nuw nsw i24 %595, 4
  %597 = or i24 %596, %595
  %598 = zext i24 %597 to i32
  %599 = lshr i24 %85, 16
  %600 = and i24 %599, 15
  %601 = shl nuw nsw i24 %600, 4
  %602 = or i24 %601, %600
  %603 = zext i24 %602 to i32
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block43transcodeIndividualOrDifferentialBlockToBC1EPhmmmmiiiiiiPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %74, i8* %76, i32 %580, i32 %585, i32 %589, i32 %593, i32 %598, i32 %603, i1 zeroext false) #6
  br label %604

604:                                              ; preds = %291, %545, %550, %553, %575
  %605 = add i64 %72, 4
  %606 = icmp ult i64 %605, %0
  br i1 %606, label %71, label %68
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle14LoadEACR11ToR8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %79, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %32, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %79, label %14

24:                                               ; preds = %32, %16
  %25 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  br i1 %13, label %32, label %35

32:                                               ; preds = %76, %24
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %24, label %21

35:                                               ; preds = %24, %76
  %36 = phi i64 [ %77, %76 ], [ 0, %24 ]
  %37 = lshr exact i64 %36, 2
  %38 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %37
  %39 = getelementptr inbounds i8, i8* %31, i64 %36
  %40 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %38 to %struct.anon.8*
  %41 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %38 to i8*
  %42 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %40, i64 0, i32 1
  %43 = bitcast [7 x i8]* %42 to i56*
  br label %44

44:                                               ; preds = %48, %35
  %45 = phi i64 [ 0, %35 ], [ %49, %48 ]
  %46 = mul i64 %45, %7
  %47 = getelementptr inbounds i8, i8* %39, i64 %46
  br label %54

48:                                               ; preds = %54
  %49 = add nuw nsw i64 %45, 1
  %50 = icmp ult i64 %49, 4
  %51 = add nuw i64 %49, %25
  %52 = icmp ult i64 %51, %1
  %53 = and i1 %50, %52
  br i1 %53, label %44, label %76

54:                                               ; preds = %54, %44
  %55 = phi i64 [ %71, %54 ], [ 0, %44 ]
  %56 = getelementptr inbounds i8, i8* %47, i64 %55
  %57 = load i8, i8* %41, align 1
  %58 = zext i8 %57 to i32
  %59 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %38, i64 %55, i64 %45) #6
  %60 = load i56, i56* %43, align 1
  %61 = lshr i56 %60, 4
  %62 = trunc i56 %61 to i32
  %63 = and i32 %62, 15
  %64 = mul nsw i32 %63, %59
  %65 = add nsw i32 %64, %58
  %66 = icmp slt i32 %65, 255
  %67 = select i1 %66, i32 %65, i32 255
  %68 = icmp sgt i32 %67, 0
  %69 = select i1 %68, i32 %67, i32 0
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %56, align 1
  %71 = add nuw nsw i64 %55, 1
  %72 = icmp ult i64 %71, 4
  %73 = add nuw i64 %71, %36
  %74 = icmp ult i64 %73, %0
  %75 = and i1 %72, %74
  br i1 %75, label %54, label %48

76:                                               ; preds = %48
  %77 = add i64 %36, 4
  %78 = icmp ult i64 %77, %0
  br i1 %78, label %35, label %32

79:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle15LoadEACR11SToR8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %79, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %32, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %79, label %14

24:                                               ; preds = %32, %16
  %25 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  br i1 %13, label %32, label %35

32:                                               ; preds = %76, %24
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %24, label %21

35:                                               ; preds = %24, %76
  %36 = phi i64 [ %77, %76 ], [ 0, %24 ]
  %37 = lshr exact i64 %36, 2
  %38 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %37
  %39 = getelementptr inbounds i8, i8* %31, i64 %36
  %40 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %38 to %struct.anon.8*
  %41 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %38 to i8*
  %42 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %40, i64 0, i32 1
  %43 = bitcast [7 x i8]* %42 to i56*
  br label %44

44:                                               ; preds = %48, %35
  %45 = phi i64 [ 0, %35 ], [ %49, %48 ]
  %46 = mul i64 %45, %7
  %47 = getelementptr inbounds i8, i8* %39, i64 %46
  br label %54

48:                                               ; preds = %54
  %49 = add nuw nsw i64 %45, 1
  %50 = icmp ult i64 %49, 4
  %51 = add nuw i64 %49, %25
  %52 = icmp ult i64 %51, %1
  %53 = and i1 %50, %52
  br i1 %53, label %44, label %76

54:                                               ; preds = %54, %44
  %55 = phi i64 [ %71, %54 ], [ 0, %44 ]
  %56 = getelementptr inbounds i8, i8* %47, i64 %55
  %57 = load i8, i8* %41, align 1
  %58 = sext i8 %57 to i32
  %59 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %38, i64 %55, i64 %45) #6
  %60 = load i56, i56* %43, align 1
  %61 = lshr i56 %60, 4
  %62 = trunc i56 %61 to i32
  %63 = and i32 %62, 15
  %64 = mul nsw i32 %63, %59
  %65 = add nsw i32 %64, %58
  %66 = icmp slt i32 %65, 127
  %67 = select i1 %66, i32 %65, i32 127
  %68 = icmp sgt i32 %67, -128
  %69 = select i1 %68, i32 %67, i32 -128
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %56, align 1
  %71 = add nuw nsw i64 %55, 1
  %72 = icmp ult i64 %71, 4
  %73 = add nuw i64 %71, %36
  %74 = icmp ult i64 %73, %0
  %75 = and i1 %72, %74
  br i1 %75, label %54, label %48

76:                                               ; preds = %48
  %77 = add i64 %36, 4
  %78 = icmp ult i64 %77, %0
  br i1 %78, label %35, label %32

79:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadEACRG11ToRG8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %121, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %32, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %121, label %14

24:                                               ; preds = %32, %16
  %25 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  br i1 %13, label %32, label %35

32:                                               ; preds = %118, %24
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %24, label %21

35:                                               ; preds = %24, %118
  %36 = phi i64 [ %119, %118 ], [ 0, %24 ]
  %37 = shl i64 %36, 1
  %38 = getelementptr inbounds i8, i8* %31, i64 %37
  %39 = lshr exact i64 %36, 1
  %40 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %39
  %41 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %40 to %struct.anon.8*
  %42 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %40 to i8*
  %43 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %41, i64 0, i32 1
  %44 = bitcast [7 x i8]* %43 to i56*
  br label %45

45:                                               ; preds = %35, %49
  %46 = phi i64 [ 0, %35 ], [ %50, %49 ]
  %47 = mul i64 %46, %7
  %48 = getelementptr inbounds i8, i8* %38, i64 %47
  br label %55

49:                                               ; preds = %55
  %50 = add nuw nsw i64 %46, 1
  %51 = icmp ult i64 %50, 4
  %52 = add nuw i64 %50, %25
  %53 = icmp ult i64 %52, %1
  %54 = and i1 %51, %53
  br i1 %54, label %45, label %78

55:                                               ; preds = %45, %55
  %56 = phi i64 [ %73, %55 ], [ 0, %45 ]
  %57 = shl nuw i64 %56, 1
  %58 = getelementptr inbounds i8, i8* %48, i64 %57
  %59 = load i8, i8* %42, align 1
  %60 = zext i8 %59 to i32
  %61 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %40, i64 %56, i64 %46) #6
  %62 = load i56, i56* %44, align 1
  %63 = lshr i56 %62, 4
  %64 = trunc i56 %63 to i32
  %65 = and i32 %64, 15
  %66 = mul nsw i32 %65, %61
  %67 = add nsw i32 %66, %60
  %68 = icmp slt i32 %67, 255
  %69 = select i1 %68, i32 %67, i32 255
  %70 = icmp sgt i32 %69, 0
  %71 = select i1 %70, i32 %69, i32 0
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %58, align 1
  %73 = add nuw nsw i64 %56, 1
  %74 = icmp ult i64 %73, 4
  %75 = add nuw i64 %73, %36
  %76 = icmp ult i64 %75, %0
  %77 = and i1 %74, %76
  br i1 %77, label %55, label %49

78:                                               ; preds = %49
  %79 = getelementptr inbounds i8, i8* %38, i64 1
  %80 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %40, i64 1
  %81 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %80 to %struct.anon.8*
  %82 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %80 to i8*
  %83 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %81, i64 0, i32 1
  %84 = bitcast [7 x i8]* %83 to i56*
  br label %85

85:                                               ; preds = %78, %89
  %86 = phi i64 [ 0, %78 ], [ %90, %89 ]
  %87 = mul i64 %86, %7
  %88 = getelementptr inbounds i8, i8* %79, i64 %87
  br label %95

89:                                               ; preds = %95
  %90 = add nuw nsw i64 %86, 1
  %91 = icmp ult i64 %90, 4
  %92 = add nuw i64 %90, %25
  %93 = icmp ult i64 %92, %1
  %94 = and i1 %91, %93
  br i1 %94, label %85, label %118

95:                                               ; preds = %85, %95
  %96 = phi i64 [ %113, %95 ], [ 0, %85 ]
  %97 = shl nuw i64 %96, 1
  %98 = getelementptr inbounds i8, i8* %88, i64 %97
  %99 = load i8, i8* %82, align 1
  %100 = zext i8 %99 to i32
  %101 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %80, i64 %96, i64 %86) #6
  %102 = load i56, i56* %84, align 1
  %103 = lshr i56 %102, 4
  %104 = trunc i56 %103 to i32
  %105 = and i32 %104, 15
  %106 = mul nsw i32 %105, %101
  %107 = add nsw i32 %106, %100
  %108 = icmp slt i32 %107, 255
  %109 = select i1 %108, i32 %107, i32 255
  %110 = icmp sgt i32 %109, 0
  %111 = select i1 %110, i32 %109, i32 0
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %98, align 1
  %113 = add nuw nsw i64 %96, 1
  %114 = icmp ult i64 %113, 4
  %115 = add nuw i64 %113, %36
  %116 = icmp ult i64 %115, %0
  %117 = and i1 %114, %116
  br i1 %117, label %95, label %89

118:                                              ; preds = %89
  %119 = add i64 %36, 4
  %120 = icmp ult i64 %119, %0
  br i1 %120, label %35, label %32

121:                                              ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadEACRG11SToRG8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %121, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %32, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %121, label %14

24:                                               ; preds = %32, %16
  %25 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  br i1 %13, label %32, label %35

32:                                               ; preds = %118, %24
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %24, label %21

35:                                               ; preds = %24, %118
  %36 = phi i64 [ %119, %118 ], [ 0, %24 ]
  %37 = shl i64 %36, 1
  %38 = getelementptr inbounds i8, i8* %31, i64 %37
  %39 = lshr exact i64 %36, 1
  %40 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %39
  %41 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %40 to %struct.anon.8*
  %42 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %40 to i8*
  %43 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %41, i64 0, i32 1
  %44 = bitcast [7 x i8]* %43 to i56*
  br label %45

45:                                               ; preds = %35, %49
  %46 = phi i64 [ 0, %35 ], [ %50, %49 ]
  %47 = mul i64 %46, %7
  %48 = getelementptr inbounds i8, i8* %38, i64 %47
  br label %55

49:                                               ; preds = %55
  %50 = add nuw nsw i64 %46, 1
  %51 = icmp ult i64 %50, 4
  %52 = add nuw i64 %50, %25
  %53 = icmp ult i64 %52, %1
  %54 = and i1 %51, %53
  br i1 %54, label %45, label %78

55:                                               ; preds = %45, %55
  %56 = phi i64 [ %73, %55 ], [ 0, %45 ]
  %57 = shl nuw i64 %56, 1
  %58 = getelementptr inbounds i8, i8* %48, i64 %57
  %59 = load i8, i8* %42, align 1
  %60 = sext i8 %59 to i32
  %61 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %40, i64 %56, i64 %46) #6
  %62 = load i56, i56* %44, align 1
  %63 = lshr i56 %62, 4
  %64 = trunc i56 %63 to i32
  %65 = and i32 %64, 15
  %66 = mul nsw i32 %65, %61
  %67 = add nsw i32 %66, %60
  %68 = icmp slt i32 %67, 127
  %69 = select i1 %68, i32 %67, i32 127
  %70 = icmp sgt i32 %69, -128
  %71 = select i1 %70, i32 %69, i32 -128
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %58, align 1
  %73 = add nuw nsw i64 %56, 1
  %74 = icmp ult i64 %73, 4
  %75 = add nuw i64 %73, %36
  %76 = icmp ult i64 %75, %0
  %77 = and i1 %74, %76
  br i1 %77, label %55, label %49

78:                                               ; preds = %49
  %79 = getelementptr inbounds i8, i8* %38, i64 1
  %80 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %40, i64 1
  %81 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %80 to %struct.anon.8*
  %82 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %80 to i8*
  %83 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %81, i64 0, i32 1
  %84 = bitcast [7 x i8]* %83 to i56*
  br label %85

85:                                               ; preds = %78, %89
  %86 = phi i64 [ 0, %78 ], [ %90, %89 ]
  %87 = mul i64 %86, %7
  %88 = getelementptr inbounds i8, i8* %79, i64 %87
  br label %95

89:                                               ; preds = %95
  %90 = add nuw nsw i64 %86, 1
  %91 = icmp ult i64 %90, 4
  %92 = add nuw i64 %90, %25
  %93 = icmp ult i64 %92, %1
  %94 = and i1 %91, %93
  br i1 %94, label %85, label %118

95:                                               ; preds = %85, %95
  %96 = phi i64 [ %113, %95 ], [ 0, %85 ]
  %97 = shl nuw i64 %96, 1
  %98 = getelementptr inbounds i8, i8* %88, i64 %97
  %99 = load i8, i8* %82, align 1
  %100 = sext i8 %99 to i32
  %101 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %80, i64 %96, i64 %86) #6
  %102 = load i56, i56* %84, align 1
  %103 = lshr i56 %102, 4
  %104 = trunc i56 %103 to i32
  %105 = and i32 %104, 15
  %106 = mul nsw i32 %105, %101
  %107 = add nsw i32 %106, %100
  %108 = icmp slt i32 %107, 127
  %109 = select i1 %108, i32 %107, i32 127
  %110 = icmp sgt i32 %109, -128
  %111 = select i1 %110, i32 %109, i32 -128
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %98, align 1
  %113 = add nuw nsw i64 %96, 1
  %114 = icmp ult i64 %113, 4
  %115 = add nuw i64 %113, %36
  %116 = icmp ult i64 %115, %0
  %117 = and i1 %114, %116
  br i1 %117, label %95, label %89

118:                                              ; preds = %89
  %119 = add i64 %36, 4
  %120 = icmp ult i64 %119, %0
  br i1 %120, label %35, label %32

121:                                              ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle15LoadEACR11ToR16EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %88, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %33, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %88, label %14

24:                                               ; preds = %33, %16
  %25 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %85, %24
  %34 = add i64 %25, 4
  %35 = icmp ult i64 %34, %1
  br i1 %35, label %24, label %21

36:                                               ; preds = %24, %85
  %37 = phi i64 [ %86, %85 ], [ 0, %24 ]
  %38 = lshr exact i64 %37, 2
  %39 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %38
  %40 = getelementptr inbounds i16, i16* %32, i64 %37
  %41 = bitcast i16* %40 to i8*
  %42 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %39 to %struct.anon.8*
  %43 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %39 to i8*
  %44 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %42, i64 0, i32 1
  %45 = bitcast [7 x i8]* %44 to i56*
  br label %46

46:                                               ; preds = %36, %51
  %47 = phi i64 [ 0, %36 ], [ %52, %51 ]
  %48 = mul i64 %47, %7
  %49 = getelementptr inbounds i8, i8* %41, i64 %48
  %50 = bitcast i8* %49 to i16*
  br label %57

51:                                               ; preds = %57
  %52 = add nuw nsw i64 %47, 1
  %53 = icmp ult i64 %52, 4
  %54 = add nuw i64 %52, %25
  %55 = icmp ult i64 %54, %1
  %56 = and i1 %53, %55
  br i1 %56, label %46, label %85

57:                                               ; preds = %46, %57
  %58 = phi i64 [ %80, %57 ], [ 0, %46 ]
  %59 = getelementptr inbounds i16, i16* %50, i64 %58
  %60 = load i8, i8* %43, align 1
  %61 = zext i8 %60 to i32
  %62 = load i56, i56* %45, align 1
  %63 = lshr i56 %62, 4
  %64 = trunc i56 %63 to i32
  %65 = and i32 %64, 15
  %66 = icmp eq i32 %65, 0
  %67 = shl nuw nsw i32 %65, 3
  %68 = select i1 %66, i32 1, i32 %67
  %69 = shl nuw nsw i32 %61, 3
  %70 = or i32 %69, 4
  %71 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %39, i64 %58, i64 %47) #6
  %72 = mul nsw i32 %68, %71
  %73 = add nsw i32 %72, %70
  %74 = icmp slt i32 %73, 2047
  %75 = select i1 %74, i32 %73, i32 2047
  %76 = icmp sgt i32 %75, 0
  %77 = select i1 %76, i32 %75, i32 0
  %78 = trunc i32 %77 to i16
  %79 = shl i16 %78, 5
  store i16 %79, i16* %59, align 2
  %80 = add nuw nsw i64 %58, 1
  %81 = icmp ult i64 %80, 4
  %82 = add nuw i64 %80, %37
  %83 = icmp ult i64 %82, %0
  %84 = and i1 %81, %83
  br i1 %84, label %57, label %51

85:                                               ; preds = %51
  %86 = add i64 %37, 4
  %87 = icmp ult i64 %86, %0
  br i1 %87, label %36, label %33

88:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadEACR11SToR16EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %88, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %33, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %88, label %14

24:                                               ; preds = %33, %16
  %25 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %85, %24
  %34 = add i64 %25, 4
  %35 = icmp ult i64 %34, %1
  br i1 %35, label %24, label %21

36:                                               ; preds = %24, %85
  %37 = phi i64 [ %86, %85 ], [ 0, %24 ]
  %38 = lshr exact i64 %37, 2
  %39 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %38
  %40 = getelementptr inbounds i16, i16* %32, i64 %37
  %41 = bitcast i16* %40 to i8*
  %42 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %39 to %struct.anon.8*
  %43 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %39 to i8*
  %44 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %42, i64 0, i32 1
  %45 = bitcast [7 x i8]* %44 to i56*
  br label %46

46:                                               ; preds = %36, %51
  %47 = phi i64 [ 0, %36 ], [ %52, %51 ]
  %48 = mul i64 %47, %7
  %49 = getelementptr inbounds i8, i8* %41, i64 %48
  %50 = bitcast i8* %49 to i16*
  br label %57

51:                                               ; preds = %57
  %52 = add nuw nsw i64 %47, 1
  %53 = icmp ult i64 %52, 4
  %54 = add nuw i64 %52, %25
  %55 = icmp ult i64 %54, %1
  %56 = and i1 %53, %55
  br i1 %56, label %46, label %85

57:                                               ; preds = %46, %57
  %58 = phi i64 [ %80, %57 ], [ 0, %46 ]
  %59 = getelementptr inbounds i16, i16* %50, i64 %58
  %60 = load i8, i8* %43, align 1
  %61 = sext i8 %60 to i32
  %62 = load i56, i56* %45, align 1
  %63 = lshr i56 %62, 4
  %64 = trunc i56 %63 to i32
  %65 = and i32 %64, 15
  %66 = icmp eq i32 %65, 0
  %67 = shl nuw nsw i32 %65, 3
  %68 = select i1 %66, i32 1, i32 %67
  %69 = shl nsw i32 %61, 3
  %70 = or i32 %69, 4
  %71 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %39, i64 %58, i64 %47) #6
  %72 = mul nsw i32 %68, %71
  %73 = add nsw i32 %72, %70
  %74 = icmp slt i32 %73, 1023
  %75 = select i1 %74, i32 %73, i32 1023
  %76 = icmp sgt i32 %75, -1023
  %77 = select i1 %76, i32 %75, i32 -1023
  %78 = trunc i32 %77 to i16
  %79 = shl i16 %78, 5
  store i16 %79, i16* %59, align 2
  %80 = add nuw nsw i64 %58, 1
  %81 = icmp ult i64 %80, 4
  %82 = add nuw i64 %80, %37
  %83 = icmp ult i64 %82, %0
  %84 = and i1 %81, %83
  br i1 %84, label %57, label %51

85:                                               ; preds = %51
  %86 = add i64 %37, 4
  %87 = icmp ult i64 %86, %0
  br i1 %87, label %36, label %33

88:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadEACRG11ToRG16EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %138, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %33, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %138, label %14

24:                                               ; preds = %33, %16
  %25 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %135, %24
  %34 = add i64 %25, 4
  %35 = icmp ult i64 %34, %1
  br i1 %35, label %24, label %21

36:                                               ; preds = %24, %135
  %37 = phi i64 [ %136, %135 ], [ 0, %24 ]
  %38 = shl i64 %37, 1
  %39 = getelementptr inbounds i16, i16* %32, i64 %38
  %40 = lshr exact i64 %37, 1
  %41 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %40
  %42 = bitcast i16* %39 to i8*
  %43 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %41 to %struct.anon.8*
  %44 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %41 to i8*
  %45 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %43, i64 0, i32 1
  %46 = bitcast [7 x i8]* %45 to i56*
  br label %47

47:                                               ; preds = %36, %52
  %48 = phi i64 [ 0, %36 ], [ %53, %52 ]
  %49 = mul i64 %48, %7
  %50 = getelementptr inbounds i8, i8* %42, i64 %49
  %51 = bitcast i8* %50 to i16*
  br label %58

52:                                               ; preds = %58
  %53 = add nuw nsw i64 %48, 1
  %54 = icmp ult i64 %53, 4
  %55 = add nuw i64 %53, %25
  %56 = icmp ult i64 %55, %1
  %57 = and i1 %54, %56
  br i1 %57, label %47, label %87

58:                                               ; preds = %47, %58
  %59 = phi i64 [ %82, %58 ], [ 0, %47 ]
  %60 = shl nuw i64 %59, 1
  %61 = getelementptr inbounds i16, i16* %51, i64 %60
  %62 = load i8, i8* %44, align 1
  %63 = zext i8 %62 to i32
  %64 = load i56, i56* %46, align 1
  %65 = lshr i56 %64, 4
  %66 = trunc i56 %65 to i32
  %67 = and i32 %66, 15
  %68 = icmp eq i32 %67, 0
  %69 = shl nuw nsw i32 %67, 3
  %70 = select i1 %68, i32 1, i32 %69
  %71 = shl nuw nsw i32 %63, 3
  %72 = or i32 %71, 4
  %73 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %41, i64 %59, i64 %48) #6
  %74 = mul nsw i32 %70, %73
  %75 = add nsw i32 %74, %72
  %76 = icmp slt i32 %75, 2047
  %77 = select i1 %76, i32 %75, i32 2047
  %78 = icmp sgt i32 %77, 0
  %79 = select i1 %78, i32 %77, i32 0
  %80 = trunc i32 %79 to i16
  %81 = shl i16 %80, 5
  store i16 %81, i16* %61, align 2
  %82 = add nuw nsw i64 %59, 1
  %83 = icmp ult i64 %82, 4
  %84 = add nuw i64 %82, %37
  %85 = icmp ult i64 %84, %0
  %86 = and i1 %83, %85
  br i1 %86, label %58, label %52

87:                                               ; preds = %52
  %88 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %41, i64 1
  %89 = getelementptr inbounds i16, i16* %39, i64 1
  %90 = bitcast i16* %89 to i8*
  %91 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %88 to %struct.anon.8*
  %92 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %88 to i8*
  %93 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %91, i64 0, i32 1
  %94 = bitcast [7 x i8]* %93 to i56*
  br label %95

95:                                               ; preds = %87, %100
  %96 = phi i64 [ 0, %87 ], [ %101, %100 ]
  %97 = mul i64 %96, %7
  %98 = getelementptr inbounds i8, i8* %90, i64 %97
  %99 = bitcast i8* %98 to i16*
  br label %106

100:                                              ; preds = %106
  %101 = add nuw nsw i64 %96, 1
  %102 = icmp ult i64 %101, 4
  %103 = add nuw i64 %101, %25
  %104 = icmp ult i64 %103, %1
  %105 = and i1 %102, %104
  br i1 %105, label %95, label %135

106:                                              ; preds = %95, %106
  %107 = phi i64 [ %130, %106 ], [ 0, %95 ]
  %108 = shl nuw i64 %107, 1
  %109 = getelementptr inbounds i16, i16* %99, i64 %108
  %110 = load i8, i8* %92, align 1
  %111 = zext i8 %110 to i32
  %112 = load i56, i56* %94, align 1
  %113 = lshr i56 %112, 4
  %114 = trunc i56 %113 to i32
  %115 = and i32 %114, 15
  %116 = icmp eq i32 %115, 0
  %117 = shl nuw nsw i32 %115, 3
  %118 = select i1 %116, i32 1, i32 %117
  %119 = shl nuw nsw i32 %111, 3
  %120 = or i32 %119, 4
  %121 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %88, i64 %107, i64 %96) #6
  %122 = mul nsw i32 %118, %121
  %123 = add nsw i32 %122, %120
  %124 = icmp slt i32 %123, 2047
  %125 = select i1 %124, i32 %123, i32 2047
  %126 = icmp sgt i32 %125, 0
  %127 = select i1 %126, i32 %125, i32 0
  %128 = trunc i32 %127 to i16
  %129 = shl i16 %128, 5
  store i16 %129, i16* %109, align 2
  %130 = add nuw nsw i64 %107, 1
  %131 = icmp ult i64 %130, 4
  %132 = add nuw i64 %130, %37
  %133 = icmp ult i64 %132, %0
  %134 = and i1 %131, %133
  br i1 %134, label %106, label %100

135:                                              ; preds = %100
  %136 = add i64 %37, 4
  %137 = icmp ult i64 %136, %0
  br i1 %137, label %36, label %33

138:                                              ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle18LoadEACRG11SToRG16EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %138, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %33, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %138, label %14

24:                                               ; preds = %33, %16
  %25 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %135, %24
  %34 = add i64 %25, 4
  %35 = icmp ult i64 %34, %1
  br i1 %35, label %24, label %21

36:                                               ; preds = %24, %135
  %37 = phi i64 [ %136, %135 ], [ 0, %24 ]
  %38 = shl i64 %37, 1
  %39 = getelementptr inbounds i16, i16* %32, i64 %38
  %40 = lshr exact i64 %37, 1
  %41 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %40
  %42 = bitcast i16* %39 to i8*
  %43 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %41 to %struct.anon.8*
  %44 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %41 to i8*
  %45 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %43, i64 0, i32 1
  %46 = bitcast [7 x i8]* %45 to i56*
  br label %47

47:                                               ; preds = %36, %52
  %48 = phi i64 [ 0, %36 ], [ %53, %52 ]
  %49 = mul i64 %48, %7
  %50 = getelementptr inbounds i8, i8* %42, i64 %49
  %51 = bitcast i8* %50 to i16*
  br label %58

52:                                               ; preds = %58
  %53 = add nuw nsw i64 %48, 1
  %54 = icmp ult i64 %53, 4
  %55 = add nuw i64 %53, %25
  %56 = icmp ult i64 %55, %1
  %57 = and i1 %54, %56
  br i1 %57, label %47, label %87

58:                                               ; preds = %47, %58
  %59 = phi i64 [ %82, %58 ], [ 0, %47 ]
  %60 = shl nuw i64 %59, 1
  %61 = getelementptr inbounds i16, i16* %51, i64 %60
  %62 = load i8, i8* %44, align 1
  %63 = sext i8 %62 to i32
  %64 = load i56, i56* %46, align 1
  %65 = lshr i56 %64, 4
  %66 = trunc i56 %65 to i32
  %67 = and i32 %66, 15
  %68 = icmp eq i32 %67, 0
  %69 = shl nuw nsw i32 %67, 3
  %70 = select i1 %68, i32 1, i32 %69
  %71 = shl nsw i32 %63, 3
  %72 = or i32 %71, 4
  %73 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %41, i64 %59, i64 %48) #6
  %74 = mul nsw i32 %70, %73
  %75 = add nsw i32 %74, %72
  %76 = icmp slt i32 %75, 1023
  %77 = select i1 %76, i32 %75, i32 1023
  %78 = icmp sgt i32 %77, -1023
  %79 = select i1 %78, i32 %77, i32 -1023
  %80 = trunc i32 %79 to i16
  %81 = shl i16 %80, 5
  store i16 %81, i16* %61, align 2
  %82 = add nuw nsw i64 %59, 1
  %83 = icmp ult i64 %82, 4
  %84 = add nuw i64 %82, %37
  %85 = icmp ult i64 %84, %0
  %86 = and i1 %83, %85
  br i1 %86, label %58, label %52

87:                                               ; preds = %52
  %88 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %41, i64 1
  %89 = getelementptr inbounds i16, i16* %39, i64 1
  %90 = bitcast i16* %89 to i8*
  %91 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %88 to %struct.anon.8*
  %92 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %88 to i8*
  %93 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %91, i64 0, i32 1
  %94 = bitcast [7 x i8]* %93 to i56*
  br label %95

95:                                               ; preds = %87, %100
  %96 = phi i64 [ 0, %87 ], [ %101, %100 ]
  %97 = mul i64 %96, %7
  %98 = getelementptr inbounds i8, i8* %90, i64 %97
  %99 = bitcast i8* %98 to i16*
  br label %106

100:                                              ; preds = %106
  %101 = add nuw nsw i64 %96, 1
  %102 = icmp ult i64 %101, 4
  %103 = add nuw i64 %101, %25
  %104 = icmp ult i64 %103, %1
  %105 = and i1 %102, %104
  br i1 %105, label %95, label %135

106:                                              ; preds = %95, %106
  %107 = phi i64 [ %130, %106 ], [ 0, %95 ]
  %108 = shl nuw i64 %107, 1
  %109 = getelementptr inbounds i16, i16* %99, i64 %108
  %110 = load i8, i8* %92, align 1
  %111 = sext i8 %110 to i32
  %112 = load i56, i56* %94, align 1
  %113 = lshr i56 %112, 4
  %114 = trunc i56 %113 to i32
  %115 = and i32 %114, 15
  %116 = icmp eq i32 %115, 0
  %117 = shl nuw nsw i32 %115, 3
  %118 = select i1 %116, i32 1, i32 %117
  %119 = shl nsw i32 %111, 3
  %120 = or i32 %119, 4
  %121 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %88, i64 %107, i64 %96) #6
  %122 = mul nsw i32 %118, %121
  %123 = add nsw i32 %122, %120
  %124 = icmp slt i32 %123, 1023
  %125 = select i1 %124, i32 %123, i32 1023
  %126 = icmp sgt i32 %125, -1023
  %127 = select i1 %126, i32 %125, i32 -1023
  %128 = trunc i32 %127 to i16
  %129 = shl i16 %128, 5
  store i16 %129, i16* %109, align 2
  %130 = add nuw nsw i64 %107, 1
  %131 = icmp ult i64 %130, 4
  %132 = add nuw i64 %130, %37
  %133 = icmp ult i64 %132, %0
  %134 = and i1 %131, %133
  br i1 %134, label %106, label %100

135:                                              ; preds = %100
  %136 = add i64 %37, 4
  %137 = icmp ult i64 %136, %0
  br i1 %137, label %36, label %33

138:                                              ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadEACR11ToR16FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %43, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %33, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %43, label %14

24:                                               ; preds = %33, %16
  %25 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %36, %24
  %34 = add i64 %25, 4
  %35 = icmp ult i64 %34, %1
  br i1 %35, label %24, label %21

36:                                               ; preds = %24, %36
  %37 = phi i64 [ %41, %36 ], [ 0, %24 ]
  %38 = lshr exact i64 %37, 2
  %39 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %38
  %40 = getelementptr inbounds i16, i16* %32, i64 %37
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block24decodeAsSingleEACChannelEPtmmmmmmbb(%"struct.angle::(anonymous namespace)::ETC2Block"* %39, i16* %40, i64 %37, i64 %25, i64 %0, i64 %1, i64 1, i64 %7, i1 zeroext false, i1 zeroext true) #6
  %41 = add i64 %37, 4
  %42 = icmp ult i64 %41, %0
  br i1 %42, label %36, label %33

43:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadEACR11SToR16FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %43, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %33, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %43, label %14

24:                                               ; preds = %33, %16
  %25 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %36, %24
  %34 = add i64 %25, 4
  %35 = icmp ult i64 %34, %1
  br i1 %35, label %24, label %21

36:                                               ; preds = %24, %36
  %37 = phi i64 [ %41, %36 ], [ 0, %24 ]
  %38 = lshr exact i64 %37, 2
  %39 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %38
  %40 = getelementptr inbounds i16, i16* %32, i64 %37
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block24decodeAsSingleEACChannelEPtmmmmmmbb(%"struct.angle::(anonymous namespace)::ETC2Block"* %39, i16* %40, i64 %37, i64 %25, i64 %0, i64 %1, i64 1, i64 %7, i1 zeroext true, i1 zeroext true) #6
  %41 = add i64 %37, 4
  %42 = icmp ult i64 %41, %0
  br i1 %42, label %36, label %33

43:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle18LoadEACRG11ToRG16FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %46, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %33, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %46, label %14

24:                                               ; preds = %33, %16
  %25 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %36, %24
  %34 = add i64 %25, 4
  %35 = icmp ult i64 %34, %1
  br i1 %35, label %24, label %21

36:                                               ; preds = %24, %36
  %37 = phi i64 [ %44, %36 ], [ 0, %24 ]
  %38 = shl i64 %37, 1
  %39 = getelementptr inbounds i16, i16* %32, i64 %38
  %40 = lshr exact i64 %37, 1
  %41 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %40
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block24decodeAsSingleEACChannelEPtmmmmmmbb(%"struct.angle::(anonymous namespace)::ETC2Block"* %41, i16* %39, i64 %37, i64 %25, i64 %0, i64 %1, i64 2, i64 %7, i1 zeroext false, i1 zeroext true) #6
  %42 = getelementptr inbounds i16, i16* %39, i64 1
  %43 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %41, i64 1
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block24decodeAsSingleEACChannelEPtmmmmmmbb(%"struct.angle::(anonymous namespace)::ETC2Block"* %43, i16* %42, i64 %37, i64 %25, i64 %0, i64 %1, i64 2, i64 %7, i1 zeroext false, i1 zeroext true) #6
  %44 = add i64 %37, 4
  %45 = icmp ult i64 %44, %0
  br i1 %45, label %36, label %33

46:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle19LoadEACRG11SToRG16FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %46, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %33, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %46, label %14

24:                                               ; preds = %33, %16
  %25 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %36, %24
  %34 = add i64 %25, 4
  %35 = icmp ult i64 %34, %1
  br i1 %35, label %24, label %21

36:                                               ; preds = %24, %36
  %37 = phi i64 [ %44, %36 ], [ 0, %24 ]
  %38 = shl i64 %37, 1
  %39 = getelementptr inbounds i16, i16* %32, i64 %38
  %40 = lshr exact i64 %37, 1
  %41 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %40
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block24decodeAsSingleEACChannelEPtmmmmmmbb(%"struct.angle::(anonymous namespace)::ETC2Block"* %41, i16* %39, i64 %37, i64 %25, i64 %0, i64 %1, i64 2, i64 %7, i1 zeroext true, i1 zeroext true) #6
  %42 = getelementptr inbounds i16, i16* %39, i64 1
  %43 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %41, i64 1
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block24decodeAsSingleEACChannelEPtmmmmmmbb(%"struct.angle::(anonymous namespace)::ETC2Block"* %43, i16* %42, i64 %37, i64 %25, i64 %0, i64 %1, i64 2, i64 %7, i1 zeroext true, i1 zeroext true) #6
  %44 = add i64 %37, 4
  %45 = icmp ult i64 %44, %0
  br i1 %45, label %36, label %33

46:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle19LoadETC2RGB8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %43, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %32, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %43, label %14

24:                                               ; preds = %32, %16
  %25 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  br i1 %13, label %32, label %35

32:                                               ; preds = %35, %24
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %24, label %21

35:                                               ; preds = %24, %35
  %36 = phi i64 [ %41, %35 ], [ 0, %24 ]
  %37 = lshr exact i64 %36, 2
  %38 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %37
  %39 = shl i64 %36, 2
  %40 = getelementptr inbounds i8, i8* %31, i64 %39
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block11decodeAsRGBEPhmmmmmPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %38, i8* %40, i64 %36, i64 %25, i64 %0, i64 %1, i64 %7, [4 x i8]* getelementptr inbounds ([4 x [4 x i8]], [4 x [4 x i8]]* @_ZN5angle12_GLOBAL__N_121DefaultETCAlphaValuesE, i64 0, i64 0), i1 zeroext false) #6
  %41 = add i64 %36, 4
  %42 = icmp ult i64 %41, %0
  br i1 %42, label %35, label %32

43:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle17LoadETC2RGB8ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  tail call fastcc void @_ZN5angle12_GLOBAL__N_117LoadETC2RGB8ToBC1EmmmPKhmmPhmmb(i64 %0, i64 %1, i64 %2, i8* %3, i64 %4, i64 %5, i8* %6, i64 %7, i64 %8, i1 zeroext false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle20LoadETC2SRGB8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %43, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %32, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %43, label %14

24:                                               ; preds = %32, %16
  %25 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  br i1 %13, label %32, label %35

32:                                               ; preds = %35, %24
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %24, label %21

35:                                               ; preds = %24, %35
  %36 = phi i64 [ %41, %35 ], [ 0, %24 ]
  %37 = lshr exact i64 %36, 2
  %38 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %37
  %39 = shl i64 %36, 2
  %40 = getelementptr inbounds i8, i8* %31, i64 %39
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block11decodeAsRGBEPhmmmmmPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %38, i8* %40, i64 %36, i64 %25, i64 %0, i64 %1, i64 %7, [4 x i8]* getelementptr inbounds ([4 x [4 x i8]], [4 x [4 x i8]]* @_ZN5angle12_GLOBAL__N_121DefaultETCAlphaValuesE, i64 0, i64 0), i1 zeroext false) #6
  %41 = add i64 %36, 4
  %42 = icmp ult i64 %41, %0
  br i1 %42, label %35, label %32

43:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle18LoadETC2SRGB8ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  tail call fastcc void @_ZN5angle12_GLOBAL__N_117LoadETC2RGB8ToBC1EmmmPKhmmPhmmb(i64 %0, i64 %1, i64 %2, i8* %3, i64 %4, i64 %5, i8* %6, i64 %7, i64 %8, i1 zeroext false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle21LoadETC2RGB8A1ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %43, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %32, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %43, label %14

24:                                               ; preds = %32, %16
  %25 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  br i1 %13, label %32, label %35

32:                                               ; preds = %35, %24
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %24, label %21

35:                                               ; preds = %24, %35
  %36 = phi i64 [ %41, %35 ], [ 0, %24 ]
  %37 = lshr exact i64 %36, 2
  %38 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %37
  %39 = shl i64 %36, 2
  %40 = getelementptr inbounds i8, i8* %31, i64 %39
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block11decodeAsRGBEPhmmmmmPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %38, i8* %40, i64 %36, i64 %25, i64 %0, i64 %1, i64 %7, [4 x i8]* getelementptr inbounds ([4 x [4 x i8]], [4 x [4 x i8]]* @_ZN5angle12_GLOBAL__N_121DefaultETCAlphaValuesE, i64 0, i64 0), i1 zeroext true) #6
  %41 = add i64 %36, 4
  %42 = icmp ult i64 %41, %0
  br i1 %42, label %35, label %32

43:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle19LoadETC2RGB8A1ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  tail call fastcc void @_ZN5angle12_GLOBAL__N_117LoadETC2RGB8ToBC1EmmmPKhmmPhmmb(i64 %0, i64 %1, i64 %2, i8* %3, i64 %4, i64 %5, i8* %6, i64 %7, i64 %8, i1 zeroext true)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle22LoadETC2SRGB8A1ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %43, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %32, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %43, label %14

24:                                               ; preds = %32, %16
  %25 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %26 = lshr exact i64 %25, 2
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %30 = mul i64 %25, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  br i1 %13, label %32, label %35

32:                                               ; preds = %35, %24
  %33 = add i64 %25, 4
  %34 = icmp ult i64 %33, %1
  br i1 %34, label %24, label %21

35:                                               ; preds = %24, %35
  %36 = phi i64 [ %41, %35 ], [ 0, %24 ]
  %37 = lshr exact i64 %36, 2
  %38 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %29, i64 %37
  %39 = shl i64 %36, 2
  %40 = getelementptr inbounds i8, i8* %31, i64 %39
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block11decodeAsRGBEPhmmmmmPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %38, i8* %40, i64 %36, i64 %25, i64 %0, i64 %1, i64 %7, [4 x i8]* getelementptr inbounds ([4 x [4 x i8]], [4 x [4 x i8]]* @_ZN5angle12_GLOBAL__N_121DefaultETCAlphaValuesE, i64 0, i64 0), i1 zeroext true) #6
  %41 = add i64 %36, 4
  %42 = icmp ult i64 %41, %0
  br i1 %42, label %35, label %32

43:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle20LoadETC2SRGB8A1ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  tail call fastcc void @_ZN5angle12_GLOBAL__N_117LoadETC2RGB8ToBC1EmmmPKhmmPhmmb(i64 %0, i64 %1, i64 %2, i8* %3, i64 %4, i64 %5, i8* %6, i64 %7, i64 %8, i1 zeroext true)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle20LoadETC2RGBA8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  tail call fastcc void @_ZN5angle12_GLOBAL__N_120LoadETC2RGBA8ToRGBA8EmmmPKhmmPhmmb(i64 %0, i64 %1, i64 %2, i8* %3, i64 %4, i64 %5, i8* %6, i64 %7, i64 %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5angle12_GLOBAL__N_120LoadETC2RGBA8ToRGBA8EmmmPKhmmPhmmb(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) unnamed_addr #0 {
  %10 = alloca [4 x [4 x i8]], align 16
  %11 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %10, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #6
  %12 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %10, i64 0, i64 0
  %13 = icmp eq i64 %2, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 16, i1 false)
  br i1 %13, label %24, label %14

14:                                               ; preds = %9
  %15 = icmp eq i64 %1, 0
  %16 = icmp eq i64 %0, 0
  br label %17

17:                                               ; preds = %25, %14
  %18 = phi i64 [ 0, %14 ], [ %26, %25 ]
  br i1 %15, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #6
  ret void

25:                                               ; preds = %36, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %19, %36
  %29 = phi i64 [ 0, %19 ], [ %37, %36 ]
  %30 = lshr exact i64 %29, 2
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %22, i64 %31
  %33 = bitcast i8* %32 to %"struct.angle::(anonymous namespace)::ETC2Block"*
  %34 = mul i64 %29, %7
  %35 = getelementptr inbounds i8, i8* %23, i64 %34
  br i1 %16, label %36, label %39

36:                                               ; preds = %79, %28
  %37 = add i64 %29, 4
  %38 = icmp ult i64 %37, %1
  br i1 %38, label %28, label %25

39:                                               ; preds = %28, %79
  %40 = phi i64 [ %83, %79 ], [ 0, %28 ]
  %41 = lshr exact i64 %40, 1
  %42 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %33, i64 %41
  %43 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %42 to %struct.anon.8*
  %44 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %42 to i8*
  %45 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %43, i64 0, i32 1
  %46 = bitcast [7 x i8]* %45 to i56*
  %47 = load i8, i8* %44, align 1
  %48 = zext i8 %47 to i32
  %49 = load i56, i56* %46, align 1
  %50 = lshr i56 %49, 4
  %51 = trunc i56 %50 to i32
  %52 = and i32 %51, 15
  br label %53

53:                                               ; preds = %57, %39
  %54 = phi i64 [ 0, %39 ], [ %58, %57 ]
  %55 = shl i64 %54, 2
  %56 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %10, i64 0, i64 0, i64 %55
  br label %63

57:                                               ; preds = %63
  %58 = add nuw nsw i64 %54, 1
  %59 = icmp ult i64 %58, 4
  %60 = add nuw i64 %58, %29
  %61 = icmp ult i64 %60, %1
  %62 = and i1 %59, %61
  br i1 %62, label %53, label %79

63:                                               ; preds = %53, %63
  %64 = phi i64 [ %74, %63 ], [ 0, %53 ]
  %65 = getelementptr inbounds i8, i8* %56, i64 %64
  %66 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %42, i64 %64, i64 %54) #6
  %67 = mul nsw i32 %52, %66
  %68 = add nsw i32 %67, %48
  %69 = icmp slt i32 %68, 255
  %70 = select i1 %69, i32 %68, i32 255
  %71 = icmp sgt i32 %70, 0
  %72 = select i1 %71, i32 %70, i32 0
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %65, align 1
  %74 = add nuw nsw i64 %64, 1
  %75 = icmp ult i64 %74, 4
  %76 = add nuw i64 %74, %40
  %77 = icmp ult i64 %76, %0
  %78 = and i1 %75, %77
  br i1 %78, label %63, label %57

79:                                               ; preds = %57
  %80 = shl i64 %40, 2
  %81 = getelementptr inbounds i8, i8* %35, i64 %80
  %82 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %42, i64 1
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block11decodeAsRGBEPhmmmmmPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %82, i8* %81, i64 %40, i64 %29, i64 %0, i64 %1, i64 %7, [4 x i8]* nonnull %12, i1 zeroext false)
  %83 = add i64 %40, 4
  %84 = icmp ult i64 %83, %0
  br i1 %84, label %39, label %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle22LoadETC2SRGBA8ToSRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #0 {
  tail call fastcc void @_ZN5angle12_GLOBAL__N_120LoadETC2RGBA8ToRGBA8EmmmPKhmmPhmmb(i64 %0, i64 %1, i64 %2, i8* %3, i64 %4, i64 %5, i8* %6, i64 %7, i64 %8)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block11decodeAsRGBEPhmmmmmPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* nocapture readonly, i8* nocapture, i64, i64, i64, i64, i64, [4 x i8]* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %10 = alloca [4 x %"struct.angle::R8G8B8A8"], align 16
  %11 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon.1*
  %12 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %11, i64 0, i32 1
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 2
  %15 = icmp eq i8 %14, 0
  %16 = xor i1 %15, true
  %17 = or i1 %16, %8
  %18 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to i24*
  %19 = load i24, i24* %18, align 1
  br i1 %17, label %20, label %495

20:                                               ; preds = %9
  %21 = lshr i24 %19, 3
  %22 = and i24 %21, 31
  %23 = zext i24 %22 to i32
  %24 = shl i24 %19, 21
  %25 = ashr exact i24 %24, 21
  %26 = zext i24 %25 to i32
  %27 = shl i32 %26, 24
  %28 = ashr exact i32 %27, 24
  %29 = add nsw i32 %28, %23
  %30 = lshr i24 %19, 19
  %31 = zext i24 %30 to i32
  %32 = shl i24 %19, 5
  %33 = ashr i24 %32, 21
  %34 = zext i24 %33 to i32
  %35 = shl i32 %34, 24
  %36 = ashr exact i32 %35, 24
  %37 = add nsw i32 %36, %31
  %38 = icmp ugt i32 %29, 31
  br i1 %38, label %39, label %222

39:                                               ; preds = %20
  %40 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to i32*
  %41 = load i32, i32* %40, align 1
  %42 = lshr i32 %41, 1
  %43 = and i32 %42, 12
  %44 = and i32 %41, 3
  %45 = or i32 %43, %44
  %46 = shl nuw nsw i32 %45, 4
  %47 = lshr i32 %41, 12
  %48 = and i32 %47, 15
  %49 = shl nuw nsw i32 %48, 4
  %50 = or i32 %49, %48
  %51 = lshr i32 %41, 8
  %52 = and i32 %51, 15
  %53 = shl nuw nsw i32 %52, 4
  %54 = or i32 %53, %52
  %55 = lshr i32 %41, 20
  %56 = and i32 %55, 15
  %57 = shl nuw nsw i32 %56, 4
  %58 = or i32 %57, %56
  %59 = lshr i32 %41, 16
  %60 = and i32 %59, 15
  %61 = shl nuw nsw i32 %60, 4
  %62 = or i32 %61, %60
  %63 = lshr i32 %41, 28
  %64 = shl nuw nsw i32 %63, 4
  %65 = or i32 %64, %63
  %66 = lshr i32 %41, 25
  %67 = and i32 %66, 6
  %68 = lshr i32 %41, 24
  %69 = and i32 %68, 1
  %70 = or i32 %67, %69
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZNK5angle12_GLOBAL__N_19ETC2Block20transcodeHBlockToBC1EPhmmmmPA4_KhbE8distance, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %74) #6
  %75 = shl nuw nsw i32 %54, 16
  %76 = shl nuw nsw i32 %50, 8
  %77 = or i32 %45, %46
  %78 = or i32 %77, %76
  %79 = or i32 %78, %75
  %80 = or i32 %79, -16777216
  %81 = bitcast [4 x %"struct.angle::R8G8B8A8"]* %10 to i32*
  store i32 %80, i32* %81, align 16
  %82 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 1
  %83 = add nsw i32 %58, %73
  %84 = add nsw i32 %62, %73
  %85 = add nsw i32 %65, %73
  %86 = icmp slt i32 %83, 255
  %87 = select i1 %86, i32 %83, i32 255
  %88 = icmp sgt i32 %87, 0
  %89 = select i1 %88, i32 %87, i32 0
  %90 = icmp slt i32 %84, 255
  %91 = select i1 %90, i32 %84, i32 255
  %92 = icmp sgt i32 %91, 0
  %93 = select i1 %92, i32 %91, i32 0
  %94 = icmp slt i32 %85, 255
  %95 = select i1 %94, i32 %85, i32 255
  %96 = icmp sgt i32 %95, 0
  %97 = select i1 %96, i32 %95, i32 0
  %98 = shl nsw i32 %97, 16
  %99 = shl nsw i32 %93, 8
  %100 = and i32 %99, 65280
  %101 = and i32 %89, 255
  %102 = or i32 %98, %101
  %103 = or i32 %102, %100
  %104 = or i32 %103, -16777216
  %105 = bitcast %"struct.angle::R8G8B8A8"* %82 to i32*
  store i32 %104, i32* %105, align 4
  %106 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 2
  %107 = shl nuw nsw i32 %65, 16
  %108 = shl nuw nsw i32 %62, 8
  %109 = or i32 %107, %58
  %110 = or i32 %109, %108
  %111 = or i32 %110, -16777216
  %112 = bitcast %"struct.angle::R8G8B8A8"* %106 to i32*
  store i32 %111, i32* %112, align 8
  %113 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 3
  %114 = sub nsw i32 %58, %73
  %115 = sub nsw i32 %62, %73
  %116 = sub nsw i32 %65, %73
  %117 = icmp slt i32 %114, 255
  %118 = select i1 %117, i32 %114, i32 255
  %119 = icmp sgt i32 %118, 0
  %120 = select i1 %119, i32 %118, i32 0
  %121 = icmp slt i32 %115, 255
  %122 = select i1 %121, i32 %115, i32 255
  %123 = icmp sgt i32 %122, 0
  %124 = select i1 %123, i32 %122, i32 0
  %125 = icmp slt i32 %116, 255
  %126 = select i1 %125, i32 %116, i32 255
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = shl nsw i32 %128, 16
  %130 = shl nsw i32 %124, 8
  %131 = and i32 %130, 65280
  %132 = and i32 %120, 255
  %133 = or i32 %129, %132
  %134 = or i32 %133, %131
  %135 = or i32 %134, -16777216
  %136 = bitcast %"struct.angle::R8G8B8A8"* %113 to i32*
  store i32 %135, i32* %136, align 4
  %137 = icmp ult i64 %3, %5
  br i1 %137, label %138, label %221

138:                                              ; preds = %39
  %139 = icmp ult i64 %2, %4
  %140 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon*
  %141 = add nuw i64 %2, 1
  %142 = icmp ult i64 %141, %4
  %143 = add nuw i64 %2, 2
  %144 = icmp ult i64 %143, %4
  %145 = add nuw i64 %2, 3
  %146 = icmp ult i64 %145, %4
  br label %155

147:                                              ; preds = %158
  br i1 %15, label %148, label %221

148:                                              ; preds = %147
  %149 = add nuw i64 %2, 1
  %150 = icmp ult i64 %149, %4
  %151 = add nuw i64 %2, 2
  %152 = icmp ult i64 %151, %4
  %153 = add nuw i64 %2, 3
  %154 = icmp ult i64 %153, %4
  br label %190

155:                                              ; preds = %158, %138
  %156 = phi i64 [ 0, %138 ], [ %160, %158 ]
  %157 = phi i8* [ %1, %138 ], [ %159, %158 ]
  br i1 %139, label %165, label %158

158:                                              ; preds = %165, %593, %620, %647, %155
  %159 = getelementptr inbounds i8, i8* %157, i64 %6
  %160 = add nuw nsw i64 %156, 1
  %161 = icmp ult i64 %160, 4
  %162 = add nuw i64 %160, %3
  %163 = icmp ult i64 %162, %5
  %164 = and i1 %161, %163
  br i1 %164, label %155, label %147

165:                                              ; preds = %155
  %166 = lshr i64 %156, 3
  %167 = sub nsw i64 1, %166
  %168 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 2, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = trunc i64 %156 to i32
  %172 = and i32 %171, 7
  %173 = lshr i32 %170, %172
  %174 = and i32 %173, 1
  %175 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 1, i64 %167
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = lshr i32 %177, %172
  %179 = shl nuw nsw i32 %178, 1
  %180 = and i32 %179, 2
  %181 = or i32 %180, %174
  %182 = zext i32 %181 to i64
  %183 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %182, i32 0
  %184 = bitcast i8* %183 to i32*
  %185 = bitcast i8* %157 to i32*
  %186 = load i32, i32* %184, align 4
  store i32 %186, i32* %185, align 1
  %187 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %156, i64 0
  %188 = load i8, i8* %187, align 1
  %189 = getelementptr inbounds i8, i8* %157, i64 3
  store i8 %188, i8* %189, align 1
  br i1 %142, label %593, label %158

190:                                              ; preds = %148, %193
  %191 = phi i8* [ %194, %193 ], [ %1, %148 ]
  %192 = phi i64 [ %195, %193 ], [ 0, %148 ]
  br i1 %139, label %200, label %193

193:                                              ; preds = %571, %590, %220, %547, %570, %190
  %194 = getelementptr inbounds i8, i8* %191, i64 %6
  %195 = add nuw nsw i64 %192, 1
  %196 = icmp ult i64 %195, 4
  %197 = add nuw i64 %195, %3
  %198 = icmp ult i64 %197, %5
  %199 = and i1 %196, %198
  br i1 %199, label %190, label %221

200:                                              ; preds = %190
  %201 = lshr i64 %192, 3
  %202 = sub nsw i64 1, %201
  %203 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 2, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = trunc i64 %192 to i32
  %207 = and i32 %206, 7
  %208 = lshr i32 %205, %207
  %209 = and i32 %208, 1
  %210 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 1, i64 %202
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = lshr i32 %212, %207
  %214 = shl nuw nsw i32 %213, 1
  %215 = and i32 %214, 2
  %216 = or i32 %215, %209
  %217 = icmp eq i32 %216, 2
  br i1 %217, label %218, label %220

218:                                              ; preds = %200
  %219 = bitcast i8* %191 to i32*
  store i32 0, i32* %219, align 1
  br label %220

220:                                              ; preds = %218, %200
  br i1 %150, label %525, label %193

221:                                              ; preds = %193, %39, %147
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %74) #6
  br label %524

222:                                              ; preds = %20
  %223 = shl i24 %19, 13
  %224 = ashr i24 %223, 21
  %225 = zext i24 %224 to i32
  %226 = shl i32 %225, 24
  %227 = ashr exact i32 %226, 24
  %228 = lshr i24 %19, 11
  %229 = and i24 %228, 31
  %230 = zext i24 %229 to i32
  %231 = add nsw i32 %227, %230
  %232 = icmp ugt i32 %231, 31
  br i1 %232, label %233, label %470

233:                                              ; preds = %222
  %234 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to i32*
  %235 = load i32, i32* %234, align 1
  %236 = lshr i32 %235, 3
  %237 = and i32 %236, 15
  %238 = shl nuw nsw i32 %237, 4
  %239 = or i32 %238, %237
  %240 = shl i32 %235, 1
  %241 = and i32 %240, 14
  %242 = lshr i32 %235, 12
  %243 = and i32 %242, 1
  %244 = or i32 %241, %243
  %245 = shl nuw nsw i32 %244, 4
  %246 = or i32 %245, %244
  %247 = lshr i32 %235, 8
  %248 = and i32 %247, 8
  %249 = lshr i32 %235, 7
  %250 = and i32 %249, 6
  %251 = or i32 %248, %250
  %252 = lshr i32 %235, 23
  %253 = and i32 %252, 1
  %254 = or i32 %251, %253
  %255 = shl nuw nsw i32 %254, 4
  %256 = or i32 %255, %254
  %257 = lshr i32 %235, 19
  %258 = and i32 %257, 15
  %259 = shl nuw nsw i32 %258, 4
  %260 = or i32 %259, %258
  %261 = lshr i32 %235, 15
  %262 = and i32 %261, 14
  %263 = lshr i32 %235, 31
  %264 = or i32 %262, %263
  %265 = shl nuw nsw i32 %264, 4
  %266 = or i32 %265, %264
  %267 = lshr i32 %235, 27
  %268 = and i32 %267, 15
  %269 = shl nuw nsw i32 %268, 4
  %270 = or i32 %269, %268
  %271 = shl nuw nsw i32 %239, 16
  %272 = shl nuw nsw i32 %246, 8
  %273 = or i32 %272, %271
  %274 = or i32 %273, %256
  %275 = shl nuw nsw i32 %260, 16
  %276 = shl nuw nsw i32 %266, 8
  %277 = or i32 %275, %270
  %278 = or i32 %277, %276
  %279 = icmp sge i32 %274, %278
  %280 = zext i1 %279 to i32
  %281 = lshr i32 %235, 24
  %282 = and i32 %281, 4
  %283 = and i32 %252, 2
  %284 = or i32 %282, %283
  %285 = or i32 %284, %280
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZNK5angle12_GLOBAL__N_19ETC2Block20transcodeHBlockToBC1EPhmmmmPA4_KhbE8distance, i64 0, i64 %286
  %288 = load i32, i32* %287, align 4
  %289 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %289) #6
  %290 = add nsw i32 %239, %288
  %291 = add nsw i32 %246, %288
  %292 = add nsw i32 %256, %288
  %293 = icmp slt i32 %290, 255
  %294 = select i1 %293, i32 %290, i32 255
  %295 = icmp sgt i32 %294, 0
  %296 = select i1 %295, i32 %294, i32 0
  %297 = icmp slt i32 %291, 255
  %298 = select i1 %297, i32 %291, i32 255
  %299 = icmp sgt i32 %298, 0
  %300 = select i1 %299, i32 %298, i32 0
  %301 = icmp slt i32 %292, 255
  %302 = select i1 %301, i32 %292, i32 255
  %303 = icmp sgt i32 %302, 0
  %304 = select i1 %303, i32 %302, i32 0
  %305 = shl nsw i32 %304, 16
  %306 = shl nsw i32 %300, 8
  %307 = and i32 %306, 65280
  %308 = and i32 %296, 255
  %309 = or i32 %308, %307
  %310 = or i32 %309, %305
  %311 = or i32 %310, -16777216
  %312 = bitcast [4 x %"struct.angle::R8G8B8A8"]* %10 to i32*
  store i32 %311, i32* %312, align 16
  %313 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 1
  %314 = sub nsw i32 %239, %288
  %315 = sub nsw i32 %246, %288
  %316 = sub nsw i32 %256, %288
  %317 = icmp slt i32 %314, 255
  %318 = select i1 %317, i32 %314, i32 255
  %319 = icmp sgt i32 %318, 0
  %320 = select i1 %319, i32 %318, i32 0
  %321 = icmp slt i32 %315, 255
  %322 = select i1 %321, i32 %315, i32 255
  %323 = icmp sgt i32 %322, 0
  %324 = select i1 %323, i32 %322, i32 0
  %325 = icmp slt i32 %316, 255
  %326 = select i1 %325, i32 %316, i32 255
  %327 = icmp sgt i32 %326, 0
  %328 = select i1 %327, i32 %326, i32 0
  %329 = shl nsw i32 %328, 16
  %330 = shl nsw i32 %324, 8
  %331 = and i32 %330, 65280
  %332 = and i32 %320, 255
  %333 = or i32 %332, %331
  %334 = or i32 %333, %329
  %335 = or i32 %334, -16777216
  %336 = bitcast %"struct.angle::R8G8B8A8"* %313 to i32*
  store i32 %335, i32* %336, align 4
  %337 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 2
  %338 = add nsw i32 %260, %288
  %339 = add nsw i32 %266, %288
  %340 = add nsw i32 %270, %288
  %341 = icmp slt i32 %338, 255
  %342 = select i1 %341, i32 %338, i32 255
  %343 = icmp sgt i32 %342, 0
  %344 = select i1 %343, i32 %342, i32 0
  %345 = icmp slt i32 %339, 255
  %346 = select i1 %345, i32 %339, i32 255
  %347 = icmp sgt i32 %346, 0
  %348 = select i1 %347, i32 %346, i32 0
  %349 = icmp slt i32 %340, 255
  %350 = select i1 %349, i32 %340, i32 255
  %351 = icmp sgt i32 %350, 0
  %352 = select i1 %351, i32 %350, i32 0
  %353 = shl nsw i32 %352, 16
  %354 = shl nsw i32 %348, 8
  %355 = and i32 %354, 65280
  %356 = and i32 %344, 255
  %357 = or i32 %353, %356
  %358 = or i32 %357, %355
  %359 = or i32 %358, -16777216
  %360 = bitcast %"struct.angle::R8G8B8A8"* %337 to i32*
  store i32 %359, i32* %360, align 8
  %361 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 3
  %362 = sub nsw i32 %260, %288
  %363 = sub nsw i32 %266, %288
  %364 = sub nsw i32 %270, %288
  %365 = icmp slt i32 %362, 255
  %366 = select i1 %365, i32 %362, i32 255
  %367 = icmp sgt i32 %366, 0
  %368 = select i1 %367, i32 %366, i32 0
  %369 = icmp slt i32 %363, 255
  %370 = select i1 %369, i32 %363, i32 255
  %371 = icmp sgt i32 %370, 0
  %372 = select i1 %371, i32 %370, i32 0
  %373 = icmp slt i32 %364, 255
  %374 = select i1 %373, i32 %364, i32 255
  %375 = icmp sgt i32 %374, 0
  %376 = select i1 %375, i32 %374, i32 0
  %377 = shl nsw i32 %376, 16
  %378 = shl nsw i32 %372, 8
  %379 = and i32 %378, 65280
  %380 = and i32 %368, 255
  %381 = or i32 %377, %380
  %382 = or i32 %381, %379
  %383 = or i32 %382, -16777216
  %384 = bitcast %"struct.angle::R8G8B8A8"* %361 to i32*
  store i32 %383, i32* %384, align 4
  %385 = icmp ult i64 %3, %5
  br i1 %385, label %386, label %469

386:                                              ; preds = %233
  %387 = icmp ult i64 %2, %4
  %388 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon*
  %389 = add nuw i64 %2, 1
  %390 = icmp ult i64 %389, %4
  %391 = add nuw i64 %2, 2
  %392 = icmp ult i64 %391, %4
  %393 = add nuw i64 %2, 3
  %394 = icmp ult i64 %393, %4
  br label %403

395:                                              ; preds = %406
  br i1 %15, label %396, label %469

396:                                              ; preds = %395
  %397 = add nuw i64 %2, 1
  %398 = icmp ult i64 %397, %4
  %399 = add nuw i64 %2, 2
  %400 = icmp ult i64 %399, %4
  %401 = add nuw i64 %2, 3
  %402 = icmp ult i64 %401, %4
  br label %438

403:                                              ; preds = %406, %386
  %404 = phi i64 [ 0, %386 ], [ %408, %406 ]
  %405 = phi i8* [ %1, %386 ], [ %407, %406 ]
  br i1 %387, label %413, label %406

406:                                              ; preds = %413, %742, %769, %796, %403
  %407 = getelementptr inbounds i8, i8* %405, i64 %6
  %408 = add nuw nsw i64 %404, 1
  %409 = icmp ult i64 %408, 4
  %410 = add nuw i64 %408, %3
  %411 = icmp ult i64 %410, %5
  %412 = and i1 %409, %411
  br i1 %412, label %403, label %395

413:                                              ; preds = %403
  %414 = lshr i64 %404, 3
  %415 = sub nsw i64 1, %414
  %416 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 2, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = zext i8 %417 to i32
  %419 = trunc i64 %404 to i32
  %420 = and i32 %419, 7
  %421 = lshr i32 %418, %420
  %422 = and i32 %421, 1
  %423 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 1, i64 %415
  %424 = load i8, i8* %423, align 1
  %425 = zext i8 %424 to i32
  %426 = lshr i32 %425, %420
  %427 = shl nuw nsw i32 %426, 1
  %428 = and i32 %427, 2
  %429 = or i32 %428, %422
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %430, i32 0
  %432 = bitcast i8* %431 to i32*
  %433 = bitcast i8* %405 to i32*
  %434 = load i32, i32* %432, align 4
  store i32 %434, i32* %433, align 1
  %435 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %404, i64 0
  %436 = load i8, i8* %435, align 1
  %437 = getelementptr inbounds i8, i8* %405, i64 3
  store i8 %436, i8* %437, align 1
  br i1 %390, label %742, label %406

438:                                              ; preds = %396, %441
  %439 = phi i8* [ %442, %441 ], [ %1, %396 ]
  %440 = phi i64 [ %443, %441 ], [ 0, %396 ]
  br i1 %387, label %448, label %441

441:                                              ; preds = %720, %739, %468, %696, %719, %438
  %442 = getelementptr inbounds i8, i8* %439, i64 %6
  %443 = add nuw nsw i64 %440, 1
  %444 = icmp ult i64 %443, 4
  %445 = add nuw i64 %443, %3
  %446 = icmp ult i64 %445, %5
  %447 = and i1 %444, %446
  br i1 %447, label %438, label %469

448:                                              ; preds = %438
  %449 = lshr i64 %440, 3
  %450 = sub nsw i64 1, %449
  %451 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 2, i64 %450
  %452 = load i8, i8* %451, align 1
  %453 = zext i8 %452 to i32
  %454 = trunc i64 %440 to i32
  %455 = and i32 %454, 7
  %456 = lshr i32 %453, %455
  %457 = and i32 %456, 1
  %458 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 1, i64 %450
  %459 = load i8, i8* %458, align 1
  %460 = zext i8 %459 to i32
  %461 = lshr i32 %460, %455
  %462 = shl nuw nsw i32 %461, 1
  %463 = and i32 %462, 2
  %464 = or i32 %463, %457
  %465 = icmp eq i32 %464, 2
  br i1 %465, label %466, label %468

466:                                              ; preds = %448
  %467 = bitcast i8* %439 to i32*
  store i32 0, i32* %467, align 1
  br label %468

468:                                              ; preds = %466, %448
  br i1 %398, label %674, label %441

469:                                              ; preds = %441, %233, %395
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %289) #6
  br label %524

470:                                              ; preds = %222
  %471 = icmp ugt i32 %37, 31
  br i1 %471, label %472, label %473

472:                                              ; preds = %470
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block17decodePlanarBlockEPhmmmmmPA4_Kh(%"struct.angle::(anonymous namespace)::ETC2Block"* %0, i8* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, [4 x i8]* %7)
  br label %524

473:                                              ; preds = %470
  %474 = shl nuw nsw i24 %30, 3
  %475 = zext i24 %474 to i32
  %476 = lshr i32 %31, 2
  %477 = or i32 %476, %475
  %478 = shl nuw nsw i24 %229, 3
  %479 = zext i24 %478 to i32
  %480 = lshr i32 %230, 2
  %481 = or i32 %480, %479
  %482 = shl nuw nsw i24 %22, 3
  %483 = zext i24 %482 to i32
  %484 = lshr i32 %23, 2
  %485 = or i32 %484, %483
  %486 = shl nsw i32 %29, 3
  %487 = lshr i32 %29, 2
  %488 = or i32 %486, %487
  %489 = shl nsw i32 %231, 3
  %490 = lshr i32 %231, 2
  %491 = or i32 %489, %490
  %492 = shl nsw i32 %37, 3
  %493 = lshr i32 %37, 2
  %494 = or i32 %492, %493
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block35decodeIndividualOrDifferentialBlockEPhmmmmmiiiiiiPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %0, i8* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32 %485, i32 %481, i32 %477, i32 %488, i32 %491, i32 %494, [4 x i8]* %7, i1 zeroext %15) #6
  br label %524

495:                                              ; preds = %9
  %496 = lshr i24 %19, 4
  %497 = and i24 %496, 15
  %498 = shl nuw nsw i24 %497, 4
  %499 = or i24 %498, %497
  %500 = zext i24 %499 to i32
  %501 = lshr i24 %19, 12
  %502 = and i24 %501, 15
  %503 = shl nuw nsw i24 %502, 4
  %504 = or i24 %503, %502
  %505 = zext i24 %504 to i32
  %506 = lshr i24 %19, 20
  %507 = shl nuw nsw i24 %506, 4
  %508 = or i24 %507, %506
  %509 = zext i24 %508 to i32
  %510 = and i24 %19, 15
  %511 = shl nuw nsw i24 %510, 4
  %512 = or i24 %511, %510
  %513 = zext i24 %512 to i32
  %514 = lshr i24 %19, 8
  %515 = and i24 %514, 15
  %516 = shl nuw nsw i24 %515, 4
  %517 = or i24 %516, %515
  %518 = zext i24 %517 to i32
  %519 = lshr i24 %19, 16
  %520 = and i24 %519, 15
  %521 = shl nuw nsw i24 %520, 4
  %522 = or i24 %521, %520
  %523 = zext i24 %522 to i32
  tail call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block35decodeIndividualOrDifferentialBlockEPhmmmmmiiiiiiPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* %0, i8* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32 %500, i32 %505, i32 %509, i32 %513, i32 %518, i32 %523, [4 x i8]* %7, i1 zeroext false) #6
  br label %524

524:                                              ; preds = %221, %472, %473, %469, %495
  ret void

525:                                              ; preds = %220
  %526 = add nuw nsw i64 %192, 4
  %527 = lshr i64 %526, 3
  %528 = sub nsw i64 1, %527
  %529 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 2, i64 %528
  %530 = load i8, i8* %529, align 1
  %531 = zext i8 %530 to i32
  %532 = trunc i64 %526 to i32
  %533 = and i32 %532, 7
  %534 = lshr i32 %531, %533
  %535 = and i32 %534, 1
  %536 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 1, i64 %528
  %537 = load i8, i8* %536, align 1
  %538 = zext i8 %537 to i32
  %539 = lshr i32 %538, %533
  %540 = shl nuw nsw i32 %539, 1
  %541 = and i32 %540, 2
  %542 = or i32 %541, %535
  %543 = icmp eq i32 %542, 2
  br i1 %543, label %544, label %547

544:                                              ; preds = %525
  %545 = getelementptr inbounds i8, i8* %191, i64 4
  %546 = bitcast i8* %545 to i32*
  store i32 0, i32* %546, align 1
  br label %547

547:                                              ; preds = %544, %525
  br i1 %152, label %548, label %193

548:                                              ; preds = %547
  %549 = add nuw nsw i64 %192, 8
  %550 = lshr i64 %549, 3
  %551 = sub nsw i64 1, %550
  %552 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 2, i64 %551
  %553 = load i8, i8* %552, align 1
  %554 = zext i8 %553 to i32
  %555 = trunc i64 %549 to i32
  %556 = and i32 %555, 7
  %557 = lshr i32 %554, %556
  %558 = and i32 %557, 1
  %559 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 1, i64 %551
  %560 = load i8, i8* %559, align 1
  %561 = zext i8 %560 to i32
  %562 = lshr i32 %561, %556
  %563 = shl nuw nsw i32 %562, 1
  %564 = and i32 %563, 2
  %565 = or i32 %564, %558
  %566 = icmp eq i32 %565, 2
  br i1 %566, label %567, label %570

567:                                              ; preds = %548
  %568 = getelementptr inbounds i8, i8* %191, i64 8
  %569 = bitcast i8* %568 to i32*
  store i32 0, i32* %569, align 1
  br label %570

570:                                              ; preds = %567, %548
  br i1 %154, label %571, label %193

571:                                              ; preds = %570
  %572 = add nuw nsw i64 %192, 12
  %573 = lshr i64 %572, 3
  %574 = sub nsw i64 1, %573
  %575 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 2, i64 %574
  %576 = load i8, i8* %575, align 1
  %577 = zext i8 %576 to i32
  %578 = trunc i64 %572 to i32
  %579 = and i32 %578, 7
  %580 = lshr i32 %577, %579
  %581 = and i32 %580, 1
  %582 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 1, i64 %574
  %583 = load i8, i8* %582, align 1
  %584 = zext i8 %583 to i32
  %585 = lshr i32 %584, %579
  %586 = shl nuw nsw i32 %585, 1
  %587 = and i32 %586, 2
  %588 = or i32 %587, %581
  %589 = icmp eq i32 %588, 2
  br i1 %589, label %590, label %193

590:                                              ; preds = %571
  %591 = getelementptr inbounds i8, i8* %191, i64 12
  %592 = bitcast i8* %591 to i32*
  store i32 0, i32* %592, align 1
  br label %193

593:                                              ; preds = %165
  %594 = add nuw nsw i64 %156, 4
  %595 = lshr i64 %594, 3
  %596 = sub nsw i64 1, %595
  %597 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 2, i64 %596
  %598 = load i8, i8* %597, align 1
  %599 = zext i8 %598 to i32
  %600 = trunc i64 %594 to i32
  %601 = and i32 %600, 7
  %602 = lshr i32 %599, %601
  %603 = and i32 %602, 1
  %604 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 1, i64 %596
  %605 = load i8, i8* %604, align 1
  %606 = zext i8 %605 to i32
  %607 = lshr i32 %606, %601
  %608 = shl nuw nsw i32 %607, 1
  %609 = and i32 %608, 2
  %610 = or i32 %609, %603
  %611 = zext i32 %610 to i64
  %612 = getelementptr inbounds i8, i8* %157, i64 4
  %613 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %611, i32 0
  %614 = bitcast i8* %613 to i32*
  %615 = bitcast i8* %612 to i32*
  %616 = load i32, i32* %614, align 4
  store i32 %616, i32* %615, align 1
  %617 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %156, i64 1
  %618 = load i8, i8* %617, align 1
  %619 = getelementptr inbounds i8, i8* %157, i64 7
  store i8 %618, i8* %619, align 1
  br i1 %144, label %620, label %158

620:                                              ; preds = %593
  %621 = add nuw nsw i64 %156, 8
  %622 = lshr i64 %621, 3
  %623 = sub nsw i64 1, %622
  %624 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 2, i64 %623
  %625 = load i8, i8* %624, align 1
  %626 = zext i8 %625 to i32
  %627 = trunc i64 %621 to i32
  %628 = and i32 %627, 7
  %629 = lshr i32 %626, %628
  %630 = and i32 %629, 1
  %631 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 1, i64 %623
  %632 = load i8, i8* %631, align 1
  %633 = zext i8 %632 to i32
  %634 = lshr i32 %633, %628
  %635 = shl nuw nsw i32 %634, 1
  %636 = and i32 %635, 2
  %637 = or i32 %636, %630
  %638 = zext i32 %637 to i64
  %639 = getelementptr inbounds i8, i8* %157, i64 8
  %640 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %638, i32 0
  %641 = bitcast i8* %640 to i32*
  %642 = bitcast i8* %639 to i32*
  %643 = load i32, i32* %641, align 4
  store i32 %643, i32* %642, align 1
  %644 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %156, i64 2
  %645 = load i8, i8* %644, align 1
  %646 = getelementptr inbounds i8, i8* %157, i64 11
  store i8 %645, i8* %646, align 1
  br i1 %146, label %647, label %158

647:                                              ; preds = %620
  %648 = add nuw nsw i64 %156, 12
  %649 = lshr i64 %648, 3
  %650 = sub nsw i64 1, %649
  %651 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 2, i64 %650
  %652 = load i8, i8* %651, align 1
  %653 = zext i8 %652 to i32
  %654 = trunc i64 %648 to i32
  %655 = and i32 %654, 7
  %656 = lshr i32 %653, %655
  %657 = and i32 %656, 1
  %658 = getelementptr inbounds %struct.anon, %struct.anon* %140, i64 0, i32 1, i64 %650
  %659 = load i8, i8* %658, align 1
  %660 = zext i8 %659 to i32
  %661 = lshr i32 %660, %655
  %662 = shl nuw nsw i32 %661, 1
  %663 = and i32 %662, 2
  %664 = or i32 %663, %657
  %665 = zext i32 %664 to i64
  %666 = getelementptr inbounds i8, i8* %157, i64 12
  %667 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %665, i32 0
  %668 = bitcast i8* %667 to i32*
  %669 = bitcast i8* %666 to i32*
  %670 = load i32, i32* %668, align 4
  store i32 %670, i32* %669, align 1
  %671 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %156, i64 3
  %672 = load i8, i8* %671, align 1
  %673 = getelementptr inbounds i8, i8* %157, i64 15
  store i8 %672, i8* %673, align 1
  br label %158

674:                                              ; preds = %468
  %675 = add nuw nsw i64 %440, 4
  %676 = lshr i64 %675, 3
  %677 = sub nsw i64 1, %676
  %678 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 2, i64 %677
  %679 = load i8, i8* %678, align 1
  %680 = zext i8 %679 to i32
  %681 = trunc i64 %675 to i32
  %682 = and i32 %681, 7
  %683 = lshr i32 %680, %682
  %684 = and i32 %683, 1
  %685 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 1, i64 %677
  %686 = load i8, i8* %685, align 1
  %687 = zext i8 %686 to i32
  %688 = lshr i32 %687, %682
  %689 = shl nuw nsw i32 %688, 1
  %690 = and i32 %689, 2
  %691 = or i32 %690, %684
  %692 = icmp eq i32 %691, 2
  br i1 %692, label %693, label %696

693:                                              ; preds = %674
  %694 = getelementptr inbounds i8, i8* %439, i64 4
  %695 = bitcast i8* %694 to i32*
  store i32 0, i32* %695, align 1
  br label %696

696:                                              ; preds = %693, %674
  br i1 %400, label %697, label %441

697:                                              ; preds = %696
  %698 = add nuw nsw i64 %440, 8
  %699 = lshr i64 %698, 3
  %700 = sub nsw i64 1, %699
  %701 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 2, i64 %700
  %702 = load i8, i8* %701, align 1
  %703 = zext i8 %702 to i32
  %704 = trunc i64 %698 to i32
  %705 = and i32 %704, 7
  %706 = lshr i32 %703, %705
  %707 = and i32 %706, 1
  %708 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 1, i64 %700
  %709 = load i8, i8* %708, align 1
  %710 = zext i8 %709 to i32
  %711 = lshr i32 %710, %705
  %712 = shl nuw nsw i32 %711, 1
  %713 = and i32 %712, 2
  %714 = or i32 %713, %707
  %715 = icmp eq i32 %714, 2
  br i1 %715, label %716, label %719

716:                                              ; preds = %697
  %717 = getelementptr inbounds i8, i8* %439, i64 8
  %718 = bitcast i8* %717 to i32*
  store i32 0, i32* %718, align 1
  br label %719

719:                                              ; preds = %716, %697
  br i1 %402, label %720, label %441

720:                                              ; preds = %719
  %721 = add nuw nsw i64 %440, 12
  %722 = lshr i64 %721, 3
  %723 = sub nsw i64 1, %722
  %724 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 2, i64 %723
  %725 = load i8, i8* %724, align 1
  %726 = zext i8 %725 to i32
  %727 = trunc i64 %721 to i32
  %728 = and i32 %727, 7
  %729 = lshr i32 %726, %728
  %730 = and i32 %729, 1
  %731 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 1, i64 %723
  %732 = load i8, i8* %731, align 1
  %733 = zext i8 %732 to i32
  %734 = lshr i32 %733, %728
  %735 = shl nuw nsw i32 %734, 1
  %736 = and i32 %735, 2
  %737 = or i32 %736, %730
  %738 = icmp eq i32 %737, 2
  br i1 %738, label %739, label %441

739:                                              ; preds = %720
  %740 = getelementptr inbounds i8, i8* %439, i64 12
  %741 = bitcast i8* %740 to i32*
  store i32 0, i32* %741, align 1
  br label %441

742:                                              ; preds = %413
  %743 = add nuw nsw i64 %404, 4
  %744 = lshr i64 %743, 3
  %745 = sub nsw i64 1, %744
  %746 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 2, i64 %745
  %747 = load i8, i8* %746, align 1
  %748 = zext i8 %747 to i32
  %749 = trunc i64 %743 to i32
  %750 = and i32 %749, 7
  %751 = lshr i32 %748, %750
  %752 = and i32 %751, 1
  %753 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 1, i64 %745
  %754 = load i8, i8* %753, align 1
  %755 = zext i8 %754 to i32
  %756 = lshr i32 %755, %750
  %757 = shl nuw nsw i32 %756, 1
  %758 = and i32 %757, 2
  %759 = or i32 %758, %752
  %760 = zext i32 %759 to i64
  %761 = getelementptr inbounds i8, i8* %405, i64 4
  %762 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %760, i32 0
  %763 = bitcast i8* %762 to i32*
  %764 = bitcast i8* %761 to i32*
  %765 = load i32, i32* %763, align 4
  store i32 %765, i32* %764, align 1
  %766 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %404, i64 1
  %767 = load i8, i8* %766, align 1
  %768 = getelementptr inbounds i8, i8* %405, i64 7
  store i8 %767, i8* %768, align 1
  br i1 %392, label %769, label %406

769:                                              ; preds = %742
  %770 = add nuw nsw i64 %404, 8
  %771 = lshr i64 %770, 3
  %772 = sub nsw i64 1, %771
  %773 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 2, i64 %772
  %774 = load i8, i8* %773, align 1
  %775 = zext i8 %774 to i32
  %776 = trunc i64 %770 to i32
  %777 = and i32 %776, 7
  %778 = lshr i32 %775, %777
  %779 = and i32 %778, 1
  %780 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 1, i64 %772
  %781 = load i8, i8* %780, align 1
  %782 = zext i8 %781 to i32
  %783 = lshr i32 %782, %777
  %784 = shl nuw nsw i32 %783, 1
  %785 = and i32 %784, 2
  %786 = or i32 %785, %779
  %787 = zext i32 %786 to i64
  %788 = getelementptr inbounds i8, i8* %405, i64 8
  %789 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %787, i32 0
  %790 = bitcast i8* %789 to i32*
  %791 = bitcast i8* %788 to i32*
  %792 = load i32, i32* %790, align 4
  store i32 %792, i32* %791, align 1
  %793 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %404, i64 2
  %794 = load i8, i8* %793, align 1
  %795 = getelementptr inbounds i8, i8* %405, i64 11
  store i8 %794, i8* %795, align 1
  br i1 %394, label %796, label %406

796:                                              ; preds = %769
  %797 = add nuw nsw i64 %404, 12
  %798 = lshr i64 %797, 3
  %799 = sub nsw i64 1, %798
  %800 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 2, i64 %799
  %801 = load i8, i8* %800, align 1
  %802 = zext i8 %801 to i32
  %803 = trunc i64 %797 to i32
  %804 = and i32 %803, 7
  %805 = lshr i32 %802, %804
  %806 = and i32 %805, 1
  %807 = getelementptr inbounds %struct.anon, %struct.anon* %388, i64 0, i32 1, i64 %799
  %808 = load i8, i8* %807, align 1
  %809 = zext i8 %808 to i32
  %810 = lshr i32 %809, %804
  %811 = shl nuw nsw i32 %810, 1
  %812 = and i32 %811, 2
  %813 = or i32 %812, %806
  %814 = zext i32 %813 to i64
  %815 = getelementptr inbounds i8, i8* %405, i64 12
  %816 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %814, i32 0
  %817 = bitcast i8* %816 to i32*
  %818 = bitcast i8* %815 to i32*
  %819 = load i32, i32* %817, align 4
  store i32 %819, i32* %818, align 1
  %820 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %404, i64 3
  %821 = load i8, i8* %820, align 1
  %822 = getelementptr inbounds i8, i8* %405, i64 15
  store i8 %821, i8* %822, align 1
  br label %406
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block17decodePlanarBlockEPhmmmmmPA4_Kh(%"struct.angle::(anonymous namespace)::ETC2Block"* nocapture readonly, i8* nocapture, i64, i64, i64, i64, i64, [4 x i8]* nocapture readonly) unnamed_addr #1 align 2 {
  %9 = getelementptr inbounds %"struct.angle::(anonymous namespace)::ETC2Block", %"struct.angle::(anonymous namespace)::ETC2Block"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %10, 1
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 63
  %14 = shl nuw nsw i32 %13, 2
  %15 = lshr i32 %13, 4
  %16 = or i32 %14, %15
  %17 = trunc i64 %10 to i32
  %18 = shl i32 %17, 6
  %19 = and i32 %18, 64
  %20 = lshr i64 %10, 9
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 63
  %23 = or i32 %19, %22
  %24 = shl nuw nsw i32 %23, 1
  %25 = lshr exact i32 %19, 6
  %26 = or i32 %24, %25
  %27 = lshr i64 %10, 3
  %28 = trunc i64 %27 to i32
  %29 = and i32 %28, 32
  %30 = lshr i64 %10, 16
  %31 = trunc i64 %30 to i32
  %32 = and i32 %31, 24
  %33 = or i32 %29, %32
  %34 = lshr i64 %10, 15
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 6
  %37 = lshr i64 %10, 31
  %38 = trunc i64 %37 to i32
  %39 = and i32 %38, 1
  %40 = or i32 %39, %36
  %41 = or i32 %40, %33
  %42 = shl nuw nsw i32 %41, 2
  %43 = lshr i32 %33, 4
  %44 = or i32 %42, %43
  %45 = lshr i64 %10, 25
  %46 = trunc i64 %45 to i32
  %47 = and i32 %46, 62
  %48 = lshr i64 %10, 33
  %49 = trunc i64 %48 to i32
  %50 = and i32 %49, 127
  %51 = lshr i64 %10, 27
  %52 = trunc i64 %51 to i32
  %53 = and i32 %52, 32
  %54 = lshr i64 %10, 43
  %55 = trunc i64 %54 to i32
  %56 = and i32 %55, 31
  %57 = or i32 %53, %56
  %58 = lshr i64 %10, 37
  %59 = trunc i64 %58 to i32
  %60 = and i32 %59, 56
  %61 = lshr i64 %10, 46
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 124
  %64 = lshr i64 %10, 56
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 63
  %67 = icmp ult i64 %3, %5
  br i1 %67, label %68, label %117

68:                                               ; preds = %8
  %69 = shl nuw nsw i32 %66, 2
  %70 = lshr i32 %66, 4
  %71 = or i32 %69, %70
  %72 = lshr i64 %10, 62
  %73 = trunc i64 %72 to i32
  %74 = or i32 %63, %73
  %75 = shl nuw nsw i32 %74, 1
  %76 = lshr i32 %63, 6
  %77 = or i32 %75, %76
  %78 = lshr i64 %10, 53
  %79 = trunc i64 %78 to i32
  %80 = and i32 %79, 7
  %81 = or i32 %60, %80
  %82 = shl nuw nsw i32 %81, 2
  %83 = lshr i32 %60, 4
  %84 = or i32 %82, %83
  %85 = shl nuw nsw i32 %57, 2
  %86 = lshr i32 %57, 4
  %87 = or i32 %85, %86
  %88 = shl nuw nsw i32 %50, 1
  %89 = lshr i32 %50, 6
  %90 = or i32 %88, %89
  %91 = lshr i64 %10, 24
  %92 = trunc i64 %91 to i32
  %93 = and i32 %92, 1
  %94 = or i32 %47, %93
  %95 = shl nuw nsw i32 %94, 2
  %96 = lshr i32 %47, 4
  %97 = or i32 %95, %96
  %98 = sub nsw i32 %84, %16
  %99 = sub nsw i32 %77, %26
  %100 = sub nsw i32 %71, %44
  %101 = icmp ult i64 %2, %4
  %102 = sub nsw i32 %97, %16
  %103 = sub nsw i32 %90, %26
  %104 = sub nsw i32 %87, %44
  %105 = add nuw i64 %2, 1
  %106 = icmp ult i64 %105, %4
  %107 = add nuw i64 %2, 2
  %108 = icmp ult i64 %107, %4
  %109 = shl nsw i32 %102, 1
  %110 = shl nsw i32 %103, 1
  %111 = shl nsw i32 %104, 1
  %112 = add nuw i64 %2, 3
  %113 = icmp ult i64 %112, %4
  %114 = mul nsw i32 %102, 3
  %115 = mul nsw i32 %103, 3
  %116 = mul nsw i32 %104, 3
  br label %118

117:                                              ; preds = %128, %8
  ret void

118:                                              ; preds = %68, %128
  %119 = phi i64 [ 0, %68 ], [ %130, %128 ]
  %120 = phi i8* [ %1, %68 ], [ %129, %128 ]
  %121 = trunc i64 %119 to i32
  %122 = mul nsw i32 %98, %121
  %123 = add nsw i32 %122, 2
  %124 = mul nsw i32 %99, %121
  %125 = add nsw i32 %124, 2
  %126 = mul nsw i32 %100, %121
  %127 = add nsw i32 %126, 2
  br i1 %101, label %135, label %128

128:                                              ; preds = %135, %167, %203, %239, %118
  %129 = getelementptr inbounds i8, i8* %120, i64 %6
  %130 = add nuw nsw i64 %119, 1
  %131 = icmp ult i64 %130, 4
  %132 = add nuw i64 %130, %3
  %133 = icmp ult i64 %132, %5
  %134 = and i1 %131, %133
  br i1 %134, label %118, label %117

135:                                              ; preds = %118
  %136 = ashr i32 %123, 2
  %137 = add nsw i32 %136, %16
  %138 = ashr i32 %125, 2
  %139 = add nsw i32 %138, %26
  %140 = ashr i32 %127, 2
  %141 = add nsw i32 %140, %44
  %142 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %119, i64 0
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = icmp slt i32 %137, 255
  %146 = select i1 %145, i32 %137, i32 255
  %147 = icmp sgt i32 %146, 0
  %148 = select i1 %147, i32 %146, i32 0
  %149 = icmp slt i32 %139, 255
  %150 = select i1 %149, i32 %139, i32 255
  %151 = icmp sgt i32 %150, 0
  %152 = select i1 %151, i32 %150, i32 0
  %153 = icmp slt i32 %141, 255
  %154 = select i1 %153, i32 %141, i32 255
  %155 = icmp sgt i32 %154, 0
  %156 = select i1 %155, i32 %154, i32 0
  %157 = shl nuw i32 %144, 24
  %158 = shl nsw i32 %156, 16
  %159 = and i32 %158, 16711680
  %160 = shl nsw i32 %152, 8
  %161 = and i32 %160, 65280
  %162 = and i32 %148, 255
  %163 = or i32 %161, %162
  %164 = or i32 %163, %159
  %165 = or i32 %164, %157
  %166 = bitcast i8* %120 to i32*
  store i32 %165, i32* %166, align 1
  br i1 %106, label %167, label %128

167:                                              ; preds = %135
  %168 = add nsw i32 %123, %102
  %169 = ashr i32 %168, 2
  %170 = add nsw i32 %169, %16
  %171 = add nsw i32 %125, %103
  %172 = ashr i32 %171, 2
  %173 = add nsw i32 %172, %26
  %174 = add nsw i32 %127, %104
  %175 = ashr i32 %174, 2
  %176 = add nsw i32 %175, %44
  %177 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %119, i64 1
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = icmp slt i32 %170, 255
  %181 = select i1 %180, i32 %170, i32 255
  %182 = icmp sgt i32 %181, 0
  %183 = select i1 %182, i32 %181, i32 0
  %184 = icmp slt i32 %173, 255
  %185 = select i1 %184, i32 %173, i32 255
  %186 = icmp sgt i32 %185, 0
  %187 = select i1 %186, i32 %185, i32 0
  %188 = icmp slt i32 %176, 255
  %189 = select i1 %188, i32 %176, i32 255
  %190 = icmp sgt i32 %189, 0
  %191 = select i1 %190, i32 %189, i32 0
  %192 = shl nuw i32 %179, 24
  %193 = shl nsw i32 %191, 16
  %194 = and i32 %193, 16711680
  %195 = shl nsw i32 %187, 8
  %196 = and i32 %195, 65280
  %197 = and i32 %183, 255
  %198 = or i32 %196, %197
  %199 = or i32 %198, %194
  %200 = or i32 %199, %192
  %201 = getelementptr inbounds i8, i8* %120, i64 4
  %202 = bitcast i8* %201 to i32*
  store i32 %200, i32* %202, align 1
  br i1 %108, label %203, label %128

203:                                              ; preds = %167
  %204 = add nsw i32 %123, %109
  %205 = ashr i32 %204, 2
  %206 = add nsw i32 %205, %16
  %207 = add nsw i32 %125, %110
  %208 = ashr i32 %207, 2
  %209 = add nsw i32 %208, %26
  %210 = add nsw i32 %127, %111
  %211 = ashr i32 %210, 2
  %212 = add nsw i32 %211, %44
  %213 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %119, i64 2
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i32
  %216 = icmp slt i32 %206, 255
  %217 = select i1 %216, i32 %206, i32 255
  %218 = icmp sgt i32 %217, 0
  %219 = select i1 %218, i32 %217, i32 0
  %220 = icmp slt i32 %209, 255
  %221 = select i1 %220, i32 %209, i32 255
  %222 = icmp sgt i32 %221, 0
  %223 = select i1 %222, i32 %221, i32 0
  %224 = icmp slt i32 %212, 255
  %225 = select i1 %224, i32 %212, i32 255
  %226 = icmp sgt i32 %225, 0
  %227 = select i1 %226, i32 %225, i32 0
  %228 = shl nuw i32 %215, 24
  %229 = shl nsw i32 %227, 16
  %230 = and i32 %229, 16711680
  %231 = shl nsw i32 %223, 8
  %232 = and i32 %231, 65280
  %233 = and i32 %219, 255
  %234 = or i32 %232, %233
  %235 = or i32 %234, %230
  %236 = or i32 %235, %228
  %237 = getelementptr inbounds i8, i8* %120, i64 8
  %238 = bitcast i8* %237 to i32*
  store i32 %236, i32* %238, align 1
  br i1 %113, label %239, label %128

239:                                              ; preds = %203
  %240 = add nsw i32 %123, %114
  %241 = ashr i32 %240, 2
  %242 = add nsw i32 %241, %16
  %243 = add nsw i32 %125, %115
  %244 = ashr i32 %243, 2
  %245 = add nsw i32 %244, %26
  %246 = add nsw i32 %127, %116
  %247 = ashr i32 %246, 2
  %248 = add nsw i32 %247, %44
  %249 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %119, i64 3
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = icmp slt i32 %242, 255
  %253 = select i1 %252, i32 %242, i32 255
  %254 = icmp sgt i32 %253, 0
  %255 = select i1 %254, i32 %253, i32 0
  %256 = icmp slt i32 %245, 255
  %257 = select i1 %256, i32 %245, i32 255
  %258 = icmp sgt i32 %257, 0
  %259 = select i1 %258, i32 %257, i32 0
  %260 = icmp slt i32 %248, 255
  %261 = select i1 %260, i32 %248, i32 255
  %262 = icmp sgt i32 %261, 0
  %263 = select i1 %262, i32 %261, i32 0
  %264 = shl nuw i32 %251, 24
  %265 = shl nsw i32 %263, 16
  %266 = and i32 %265, 16711680
  %267 = shl nsw i32 %259, 8
  %268 = and i32 %267, 65280
  %269 = and i32 %255, 255
  %270 = or i32 %268, %269
  %271 = or i32 %270, %266
  %272 = or i32 %271, %264
  %273 = getelementptr inbounds i8, i8* %120, i64 12
  %274 = bitcast i8* %273 to i32*
  store i32 %272, i32* %274, align 1
  br label %128
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block35decodeIndividualOrDifferentialBlockEPhmmmmmiiiiiiPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* nocapture readonly, i8* nocapture, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, [4 x i8]* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %16 = alloca <4 x i32>, align 16
  %17 = bitcast <4 x i32>* %16 to [4 x %"struct.angle::R8G8B8A8"]*
  %18 = alloca <4 x i32>, align 16
  %19 = bitcast <4 x i32>* %18 to [4 x %"struct.angle::R8G8B8A8"]*
  %20 = select i1 %14, [8 x [4 x i32]]* @_ZN5angle12_GLOBAL__N_126intensityModifierNonOpaqueE, [8 x [4 x i32]]* @_ZN5angle12_GLOBAL__N_124intensityModifierDefaultE
  %21 = bitcast <4 x i32>* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #6
  %22 = bitcast <4 x i32>* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #6
  %23 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon.1*
  %24 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %23, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 16, i1 false)
  %25 = load i8, i8* %24, align 1
  %26 = insertelement <4 x i32> undef, i32 %12, i32 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = insertelement <4 x i32> undef, i32 %11, i32 0
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = insertelement <4 x i32> undef, i32 %10, i32 0
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> zeroinitializer
  %32 = insertelement <4 x i32> undef, i32 %9, i32 0
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> zeroinitializer
  %34 = insertelement <4 x i32> undef, i32 %8, i32 0
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = insertelement <4 x i32> undef, i32 %7, i32 0
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> zeroinitializer
  %38 = lshr i8 %25, 2
  %39 = and i8 %38, 7
  %40 = zext i8 %39 to i64
  %41 = lshr i8 %25, 5
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %20, i64 0, i64 %42, i64 0
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 16
  %46 = add nsw <4 x i32> %45, %37
  %47 = add nsw <4 x i32> %45, %35
  %48 = add nsw <4 x i32> %45, %33
  %49 = icmp slt <4 x i32> %46, <i32 255, i32 255, i32 255, i32 255>
  %50 = select <4 x i1> %49, <4 x i32> %46, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %51 = icmp sgt <4 x i32> %50, zeroinitializer
  %52 = select <4 x i1> %51, <4 x i32> %50, <4 x i32> zeroinitializer
  %53 = icmp slt <4 x i32> %47, <i32 255, i32 255, i32 255, i32 255>
  %54 = select <4 x i1> %53, <4 x i32> %47, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %55 = icmp sgt <4 x i32> %54, zeroinitializer
  %56 = select <4 x i1> %55, <4 x i32> %54, <4 x i32> zeroinitializer
  %57 = icmp slt <4 x i32> %48, <i32 255, i32 255, i32 255, i32 255>
  %58 = select <4 x i1> %57, <4 x i32> %48, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %59 = icmp sgt <4 x i32> %58, zeroinitializer
  %60 = select <4 x i1> %59, <4 x i32> %58, <4 x i32> zeroinitializer
  %61 = shl nsw <4 x i32> %60, <i32 16, i32 16, i32 16, i32 16>
  %62 = shl nsw <4 x i32> %56, <i32 8, i32 8, i32 8, i32 8>
  %63 = and <4 x i32> %62, <i32 65280, i32 65280, i32 65280, i32 65280>
  %64 = and <4 x i32> %52, <i32 255, i32 255, i32 255, i32 255>
  %65 = or <4 x i32> %64, %61
  %66 = or <4 x i32> %65, %63
  %67 = or <4 x i32> %66, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  store <4 x i32> %67, <4 x i32>* %16, align 16
  %68 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %20, i64 0, i64 %40, i64 0
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 16
  %71 = add nsw <4 x i32> %70, %31
  %72 = add nsw <4 x i32> %70, %29
  %73 = add nsw <4 x i32> %70, %27
  %74 = icmp slt <4 x i32> %71, <i32 255, i32 255, i32 255, i32 255>
  %75 = select <4 x i1> %74, <4 x i32> %71, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %76 = icmp sgt <4 x i32> %75, zeroinitializer
  %77 = select <4 x i1> %76, <4 x i32> %75, <4 x i32> zeroinitializer
  %78 = icmp slt <4 x i32> %72, <i32 255, i32 255, i32 255, i32 255>
  %79 = select <4 x i1> %78, <4 x i32> %72, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %80 = icmp sgt <4 x i32> %79, zeroinitializer
  %81 = select <4 x i1> %80, <4 x i32> %79, <4 x i32> zeroinitializer
  %82 = icmp slt <4 x i32> %73, <i32 255, i32 255, i32 255, i32 255>
  %83 = select <4 x i1> %82, <4 x i32> %73, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %84 = icmp sgt <4 x i32> %83, zeroinitializer
  %85 = select <4 x i1> %84, <4 x i32> %83, <4 x i32> zeroinitializer
  %86 = shl nsw <4 x i32> %85, <i32 16, i32 16, i32 16, i32 16>
  %87 = shl nsw <4 x i32> %81, <i32 8, i32 8, i32 8, i32 8>
  %88 = and <4 x i32> %87, <i32 65280, i32 65280, i32 65280, i32 65280>
  %89 = and <4 x i32> %77, <i32 255, i32 255, i32 255, i32 255>
  %90 = or <4 x i32> %89, %86
  %91 = or <4 x i32> %90, %88
  %92 = or <4 x i32> %91, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  store <4 x i32> %92, <4 x i32>* %18, align 16
  %93 = and i8 %25, 1
  %94 = icmp eq i8 %93, 0
  %95 = icmp ult i64 %3, %5
  br i1 %94, label %100, label %96

96:                                               ; preds = %15
  br i1 %95, label %97, label %110

97:                                               ; preds = %96
  %98 = icmp ult i64 %2, %4
  %99 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon*
  br i1 %98, label %121, label %117

100:                                              ; preds = %15
  br i1 %95, label %101, label %269

101:                                              ; preds = %100
  %102 = icmp ult i64 %2, %4
  %103 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon*
  %104 = add i64 %2, 2
  %105 = icmp ult i64 %104, %4
  %106 = add nuw i64 %2, 1
  %107 = icmp ult i64 %106, %4
  %108 = add i64 %2, 3
  %109 = icmp ult i64 %108, %4
  br label %164

110:                                              ; preds = %117, %675, %96
  %111 = phi i8* [ %1, %96 ], [ %118, %117 ], [ %676, %675 ]
  %112 = add i64 %3, 2
  %113 = icmp ult i64 %112, %5
  br i1 %113, label %114, label %227

114:                                              ; preds = %110
  %115 = icmp ult i64 %2, %4
  %116 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon*
  br i1 %115, label %144, label %141

117:                                              ; preds = %121, %534, %555, %576, %97
  %118 = getelementptr inbounds i8, i8* %1, i64 %6
  %119 = add nuw i64 %3, 1
  %120 = icmp ult i64 %119, %5
  br i1 %120, label %595, label %110

121:                                              ; preds = %97
  %122 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 2, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = and i8 %123, 1
  %125 = zext i8 %124 to i64
  %126 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 1, i64 1
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i64
  %129 = shl nuw nsw i64 %128, 1
  %130 = and i64 %129, 2
  %131 = or i64 %130, %125
  %132 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %131, i32 0
  %133 = bitcast i8* %132 to i32*
  %134 = bitcast i8* %1 to i32*
  %135 = load i32, i32* %133, align 4
  store i32 %135, i32* %134, align 1
  %136 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 0
  %137 = load i8, i8* %136, align 1
  %138 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %137, i8* %138, align 1
  %139 = add nuw i64 %2, 1
  %140 = icmp ult i64 %139, %4
  br i1 %140, label %534, label %117

141:                                              ; preds = %144, %392, %413, %434, %114
  %142 = add i64 %3, 3
  %143 = icmp ult i64 %142, %5
  br i1 %143, label %453, label %227

144:                                              ; preds = %114
  %145 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 2, i64 1
  %146 = load i8, i8* %145, align 1
  %147 = lshr i8 %146, 2
  %148 = and i8 %147, 1
  %149 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 1, i64 1
  %150 = load i8, i8* %149, align 1
  %151 = lshr i8 %150, 1
  %152 = and i8 %151, 2
  %153 = or i8 %152, %148
  %154 = zext i8 %153 to i64
  %155 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %154, i32 0
  %156 = bitcast i8* %155 to i32*
  %157 = bitcast i8* %111 to i32*
  %158 = load i32, i32* %156, align 4
  store i32 %158, i32* %157, align 1
  %159 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 2, i64 0
  %160 = load i8, i8* %159, align 1
  %161 = getelementptr inbounds i8, i8* %111, i64 3
  store i8 %160, i8* %161, align 1
  %162 = add nuw i64 %2, 1
  %163 = icmp ult i64 %162, %4
  br i1 %163, label %392, label %141

164:                                              ; preds = %101, %193
  %165 = phi i64 [ 0, %101 ], [ %195, %193 ]
  %166 = phi i8* [ %1, %101 ], [ %194, %193 ]
  br i1 %102, label %168, label %167

167:                                              ; preds = %168, %338, %164
  br i1 %105, label %200, label %193

168:                                              ; preds = %164
  %169 = lshr i64 %165, 3
  %170 = sub nsw i64 1, %169
  %171 = getelementptr inbounds %struct.anon, %struct.anon* %103, i64 0, i32 2, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = trunc i64 %165 to i32
  %175 = and i32 %174, 7
  %176 = lshr i32 %173, %175
  %177 = and i32 %176, 1
  %178 = getelementptr inbounds %struct.anon, %struct.anon* %103, i64 0, i32 1, i64 %170
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = lshr i32 %180, %175
  %182 = shl nuw nsw i32 %181, 1
  %183 = and i32 %182, 2
  %184 = or i32 %183, %177
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %185, i32 0
  %187 = bitcast i8* %186 to i32*
  %188 = bitcast i8* %166 to i32*
  %189 = load i32, i32* %187, align 4
  store i32 %189, i32* %188, align 1
  %190 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %165, i64 0
  %191 = load i8, i8* %190, align 1
  %192 = getelementptr inbounds i8, i8* %166, i64 3
  store i8 %191, i8* %192, align 1
  br i1 %107, label %338, label %167

193:                                              ; preds = %200, %365, %167
  %194 = getelementptr inbounds i8, i8* %166, i64 %6
  %195 = add nuw nsw i64 %165, 1
  %196 = icmp ult i64 %195, 4
  %197 = add nuw i64 %195, %3
  %198 = icmp ult i64 %197, %5
  %199 = and i1 %196, %198
  br i1 %199, label %164, label %227

200:                                              ; preds = %167
  %201 = add nuw nsw i64 %165, 8
  %202 = lshr i64 %201, 3
  %203 = sub nsw i64 1, %202
  %204 = getelementptr inbounds %struct.anon, %struct.anon* %103, i64 0, i32 2, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = trunc i64 %201 to i32
  %208 = and i32 %207, 7
  %209 = lshr i32 %206, %208
  %210 = and i32 %209, 1
  %211 = getelementptr inbounds %struct.anon, %struct.anon* %103, i64 0, i32 1, i64 %203
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = lshr i32 %213, %208
  %215 = shl nuw nsw i32 %214, 1
  %216 = and i32 %215, 2
  %217 = or i32 %216, %210
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds i8, i8* %166, i64 8
  %220 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %218, i32 0
  %221 = bitcast i8* %220 to i32*
  %222 = bitcast i8* %219 to i32*
  %223 = load i32, i32* %221, align 4
  store i32 %223, i32* %222, align 1
  %224 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %165, i64 2
  %225 = load i8, i8* %224, align 1
  %226 = getelementptr inbounds i8, i8* %166, i64 11
  store i8 %225, i8* %226, align 1
  br i1 %109, label %365, label %193

227:                                              ; preds = %453, %516, %495, %475, %455, %141, %193, %110
  %228 = and i1 %95, %14
  br i1 %228, label %229, label %269

229:                                              ; preds = %227
  %230 = icmp ult i64 %2, %4
  %231 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon*
  %232 = add nuw i64 %2, 1
  %233 = icmp ult i64 %232, %4
  %234 = add nuw i64 %2, 2
  %235 = icmp ult i64 %234, %4
  %236 = add nuw i64 %2, 3
  %237 = icmp ult i64 %236, %4
  br label %238

238:                                              ; preds = %241, %229
  %239 = phi i8* [ %1, %229 ], [ %242, %241 ]
  %240 = phi i64 [ 0, %229 ], [ %243, %241 ]
  br i1 %230, label %248, label %241

241:                                              ; preds = %316, %335, %268, %292, %315, %238
  %242 = getelementptr inbounds i8, i8* %239, i64 %6
  %243 = add nuw nsw i64 %240, 1
  %244 = icmp ult i64 %243, 4
  %245 = add nuw i64 %243, %3
  %246 = icmp ult i64 %245, %5
  %247 = and i1 %244, %246
  br i1 %247, label %238, label %269

248:                                              ; preds = %238
  %249 = lshr i64 %240, 3
  %250 = sub nsw i64 1, %249
  %251 = getelementptr inbounds %struct.anon, %struct.anon* %231, i64 0, i32 2, i64 %250
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i32
  %254 = trunc i64 %240 to i32
  %255 = and i32 %254, 7
  %256 = lshr i32 %253, %255
  %257 = and i32 %256, 1
  %258 = getelementptr inbounds %struct.anon, %struct.anon* %231, i64 0, i32 1, i64 %250
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = lshr i32 %260, %255
  %262 = shl nuw nsw i32 %261, 1
  %263 = and i32 %262, 2
  %264 = or i32 %263, %257
  %265 = icmp eq i32 %264, 2
  br i1 %265, label %266, label %268

266:                                              ; preds = %248
  %267 = bitcast i8* %239 to i32*
  store i32 0, i32* %267, align 1
  br label %268

268:                                              ; preds = %266, %248
  br i1 %233, label %270, label %241

269:                                              ; preds = %241, %100, %227
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #6
  ret void

270:                                              ; preds = %268
  %271 = add nuw nsw i64 %240, 4
  %272 = lshr i64 %271, 3
  %273 = sub nsw i64 1, %272
  %274 = getelementptr inbounds %struct.anon, %struct.anon* %231, i64 0, i32 2, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = trunc i64 %271 to i32
  %278 = and i32 %277, 7
  %279 = lshr i32 %276, %278
  %280 = and i32 %279, 1
  %281 = getelementptr inbounds %struct.anon, %struct.anon* %231, i64 0, i32 1, i64 %273
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i32
  %284 = lshr i32 %283, %278
  %285 = shl nuw nsw i32 %284, 1
  %286 = and i32 %285, 2
  %287 = or i32 %286, %280
  %288 = icmp eq i32 %287, 2
  br i1 %288, label %289, label %292

289:                                              ; preds = %270
  %290 = getelementptr inbounds i8, i8* %239, i64 4
  %291 = bitcast i8* %290 to i32*
  store i32 0, i32* %291, align 1
  br label %292

292:                                              ; preds = %289, %270
  br i1 %235, label %293, label %241

293:                                              ; preds = %292
  %294 = add nuw nsw i64 %240, 8
  %295 = lshr i64 %294, 3
  %296 = sub nsw i64 1, %295
  %297 = getelementptr inbounds %struct.anon, %struct.anon* %231, i64 0, i32 2, i64 %296
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i32
  %300 = trunc i64 %294 to i32
  %301 = and i32 %300, 7
  %302 = lshr i32 %299, %301
  %303 = and i32 %302, 1
  %304 = getelementptr inbounds %struct.anon, %struct.anon* %231, i64 0, i32 1, i64 %296
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i32
  %307 = lshr i32 %306, %301
  %308 = shl nuw nsw i32 %307, 1
  %309 = and i32 %308, 2
  %310 = or i32 %309, %303
  %311 = icmp eq i32 %310, 2
  br i1 %311, label %312, label %315

312:                                              ; preds = %293
  %313 = getelementptr inbounds i8, i8* %239, i64 8
  %314 = bitcast i8* %313 to i32*
  store i32 0, i32* %314, align 1
  br label %315

315:                                              ; preds = %312, %293
  br i1 %237, label %316, label %241

316:                                              ; preds = %315
  %317 = add nuw nsw i64 %240, 12
  %318 = lshr i64 %317, 3
  %319 = sub nsw i64 1, %318
  %320 = getelementptr inbounds %struct.anon, %struct.anon* %231, i64 0, i32 2, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i32
  %323 = trunc i64 %317 to i32
  %324 = and i32 %323, 7
  %325 = lshr i32 %322, %324
  %326 = and i32 %325, 1
  %327 = getelementptr inbounds %struct.anon, %struct.anon* %231, i64 0, i32 1, i64 %319
  %328 = load i8, i8* %327, align 1
  %329 = zext i8 %328 to i32
  %330 = lshr i32 %329, %324
  %331 = shl nuw nsw i32 %330, 1
  %332 = and i32 %331, 2
  %333 = or i32 %332, %326
  %334 = icmp eq i32 %333, 2
  br i1 %334, label %335, label %241

335:                                              ; preds = %316
  %336 = getelementptr inbounds i8, i8* %239, i64 12
  %337 = bitcast i8* %336 to i32*
  store i32 0, i32* %337, align 1
  br label %241

338:                                              ; preds = %168
  %339 = add nuw nsw i64 %165, 4
  %340 = lshr i64 %339, 3
  %341 = sub nsw i64 1, %340
  %342 = getelementptr inbounds %struct.anon, %struct.anon* %103, i64 0, i32 2, i64 %341
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i32
  %345 = trunc i64 %339 to i32
  %346 = and i32 %345, 7
  %347 = lshr i32 %344, %346
  %348 = and i32 %347, 1
  %349 = getelementptr inbounds %struct.anon, %struct.anon* %103, i64 0, i32 1, i64 %341
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i32
  %352 = lshr i32 %351, %346
  %353 = shl nuw nsw i32 %352, 1
  %354 = and i32 %353, 2
  %355 = or i32 %354, %348
  %356 = zext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %166, i64 4
  %358 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %356, i32 0
  %359 = bitcast i8* %358 to i32*
  %360 = bitcast i8* %357 to i32*
  %361 = load i32, i32* %359, align 4
  store i32 %361, i32* %360, align 1
  %362 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %165, i64 1
  %363 = load i8, i8* %362, align 1
  %364 = getelementptr inbounds i8, i8* %166, i64 7
  store i8 %363, i8* %364, align 1
  br label %167

365:                                              ; preds = %200
  %366 = add nuw nsw i64 %165, 12
  %367 = lshr i64 %366, 3
  %368 = sub nsw i64 1, %367
  %369 = getelementptr inbounds %struct.anon, %struct.anon* %103, i64 0, i32 2, i64 %368
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i32
  %372 = trunc i64 %366 to i32
  %373 = and i32 %372, 7
  %374 = lshr i32 %371, %373
  %375 = and i32 %374, 1
  %376 = getelementptr inbounds %struct.anon, %struct.anon* %103, i64 0, i32 1, i64 %368
  %377 = load i8, i8* %376, align 1
  %378 = zext i8 %377 to i32
  %379 = lshr i32 %378, %373
  %380 = shl nuw nsw i32 %379, 1
  %381 = and i32 %380, 2
  %382 = or i32 %381, %375
  %383 = zext i32 %382 to i64
  %384 = getelementptr inbounds i8, i8* %166, i64 12
  %385 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %383, i32 0
  %386 = bitcast i8* %385 to i32*
  %387 = bitcast i8* %384 to i32*
  %388 = load i32, i32* %386, align 4
  store i32 %388, i32* %387, align 1
  %389 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %165, i64 3
  %390 = load i8, i8* %389, align 1
  %391 = getelementptr inbounds i8, i8* %166, i64 15
  store i8 %390, i8* %391, align 1
  br label %193

392:                                              ; preds = %144
  %393 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 2, i64 1
  %394 = load i8, i8* %393, align 1
  %395 = lshr i8 %394, 6
  %396 = and i8 %395, 1
  %397 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 1, i64 1
  %398 = load i8, i8* %397, align 1
  %399 = lshr i8 %398, 5
  %400 = and i8 %399, 2
  %401 = or i8 %400, %396
  %402 = zext i8 %401 to i64
  %403 = getelementptr inbounds i8, i8* %111, i64 4
  %404 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %402, i32 0
  %405 = bitcast i8* %404 to i32*
  %406 = bitcast i8* %403 to i32*
  %407 = load i32, i32* %405, align 4
  store i32 %407, i32* %406, align 1
  %408 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 2, i64 1
  %409 = load i8, i8* %408, align 1
  %410 = getelementptr inbounds i8, i8* %111, i64 7
  store i8 %409, i8* %410, align 1
  %411 = add nuw i64 %2, 2
  %412 = icmp ult i64 %411, %4
  br i1 %412, label %413, label %141

413:                                              ; preds = %392
  %414 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 2, i64 0
  %415 = load i8, i8* %414, align 1
  %416 = lshr i8 %415, 2
  %417 = and i8 %416, 1
  %418 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 1, i64 0
  %419 = load i8, i8* %418, align 1
  %420 = lshr i8 %419, 1
  %421 = and i8 %420, 2
  %422 = or i8 %421, %417
  %423 = zext i8 %422 to i64
  %424 = getelementptr inbounds i8, i8* %111, i64 8
  %425 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %423, i32 0
  %426 = bitcast i8* %425 to i32*
  %427 = bitcast i8* %424 to i32*
  %428 = load i32, i32* %426, align 4
  store i32 %428, i32* %427, align 1
  %429 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 2, i64 2
  %430 = load i8, i8* %429, align 1
  %431 = getelementptr inbounds i8, i8* %111, i64 11
  store i8 %430, i8* %431, align 1
  %432 = add nuw i64 %2, 3
  %433 = icmp ult i64 %432, %4
  br i1 %433, label %434, label %141

434:                                              ; preds = %413
  %435 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 2, i64 0
  %436 = load i8, i8* %435, align 1
  %437 = lshr i8 %436, 6
  %438 = and i8 %437, 1
  %439 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 1, i64 0
  %440 = load i8, i8* %439, align 1
  %441 = lshr i8 %440, 5
  %442 = and i8 %441, 2
  %443 = or i8 %442, %438
  %444 = zext i8 %443 to i64
  %445 = getelementptr inbounds i8, i8* %111, i64 12
  %446 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %444, i32 0
  %447 = bitcast i8* %446 to i32*
  %448 = bitcast i8* %445 to i32*
  %449 = load i32, i32* %447, align 4
  store i32 %449, i32* %448, align 1
  %450 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 2, i64 3
  %451 = load i8, i8* %450, align 1
  %452 = getelementptr inbounds i8, i8* %111, i64 15
  store i8 %451, i8* %452, align 1
  br label %141

453:                                              ; preds = %141
  %454 = getelementptr inbounds i8, i8* %111, i64 %6
  br i1 %115, label %455, label %227

455:                                              ; preds = %453
  %456 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 2, i64 1
  %457 = load i8, i8* %456, align 1
  %458 = lshr i8 %457, 3
  %459 = and i8 %458, 1
  %460 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 1, i64 1
  %461 = load i8, i8* %460, align 1
  %462 = lshr i8 %461, 2
  %463 = and i8 %462, 2
  %464 = or i8 %463, %459
  %465 = zext i8 %464 to i64
  %466 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %465, i32 0
  %467 = bitcast i8* %466 to i32*
  %468 = bitcast i8* %454 to i32*
  %469 = load i32, i32* %467, align 4
  store i32 %469, i32* %468, align 1
  %470 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 3, i64 0
  %471 = load i8, i8* %470, align 1
  %472 = getelementptr inbounds i8, i8* %454, i64 3
  store i8 %471, i8* %472, align 1
  %473 = add nuw i64 %2, 1
  %474 = icmp ult i64 %473, %4
  br i1 %474, label %475, label %227

475:                                              ; preds = %455
  %476 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 2, i64 1
  %477 = load i8, i8* %476, align 1
  %478 = lshr i8 %477, 7
  %479 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 1, i64 1
  %480 = load i8, i8* %479, align 1
  %481 = lshr i8 %480, 6
  %482 = and i8 %481, 2
  %483 = or i8 %482, %478
  %484 = zext i8 %483 to i64
  %485 = getelementptr inbounds i8, i8* %454, i64 4
  %486 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %484, i32 0
  %487 = bitcast i8* %486 to i32*
  %488 = bitcast i8* %485 to i32*
  %489 = load i32, i32* %487, align 4
  store i32 %489, i32* %488, align 1
  %490 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 3, i64 1
  %491 = load i8, i8* %490, align 1
  %492 = getelementptr inbounds i8, i8* %454, i64 7
  store i8 %491, i8* %492, align 1
  %493 = add nuw i64 %2, 2
  %494 = icmp ult i64 %493, %4
  br i1 %494, label %495, label %227

495:                                              ; preds = %475
  %496 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 2, i64 0
  %497 = load i8, i8* %496, align 1
  %498 = lshr i8 %497, 3
  %499 = and i8 %498, 1
  %500 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 1, i64 0
  %501 = load i8, i8* %500, align 1
  %502 = lshr i8 %501, 2
  %503 = and i8 %502, 2
  %504 = or i8 %503, %499
  %505 = zext i8 %504 to i64
  %506 = getelementptr inbounds i8, i8* %454, i64 8
  %507 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %505, i32 0
  %508 = bitcast i8* %507 to i32*
  %509 = bitcast i8* %506 to i32*
  %510 = load i32, i32* %508, align 4
  store i32 %510, i32* %509, align 1
  %511 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 3, i64 2
  %512 = load i8, i8* %511, align 1
  %513 = getelementptr inbounds i8, i8* %454, i64 11
  store i8 %512, i8* %513, align 1
  %514 = add nuw i64 %2, 3
  %515 = icmp ult i64 %514, %4
  br i1 %515, label %516, label %227

516:                                              ; preds = %495
  %517 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 2, i64 0
  %518 = load i8, i8* %517, align 1
  %519 = lshr i8 %518, 7
  %520 = getelementptr inbounds %struct.anon, %struct.anon* %116, i64 0, i32 1, i64 0
  %521 = load i8, i8* %520, align 1
  %522 = lshr i8 %521, 6
  %523 = and i8 %522, 2
  %524 = or i8 %523, %519
  %525 = zext i8 %524 to i64
  %526 = getelementptr inbounds i8, i8* %454, i64 12
  %527 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %19, i64 0, i64 %525, i32 0
  %528 = bitcast i8* %527 to i32*
  %529 = bitcast i8* %526 to i32*
  %530 = load i32, i32* %528, align 4
  store i32 %530, i32* %529, align 1
  %531 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 3, i64 3
  %532 = load i8, i8* %531, align 1
  %533 = getelementptr inbounds i8, i8* %454, i64 15
  store i8 %532, i8* %533, align 1
  br label %227

534:                                              ; preds = %121
  %535 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 2, i64 1
  %536 = load i8, i8* %535, align 1
  %537 = lshr i8 %536, 4
  %538 = and i8 %537, 1
  %539 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 1, i64 1
  %540 = load i8, i8* %539, align 1
  %541 = lshr i8 %540, 3
  %542 = and i8 %541, 2
  %543 = or i8 %542, %538
  %544 = zext i8 %543 to i64
  %545 = getelementptr inbounds i8, i8* %1, i64 4
  %546 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %544, i32 0
  %547 = bitcast i8* %546 to i32*
  %548 = bitcast i8* %545 to i32*
  %549 = load i32, i32* %547, align 4
  store i32 %549, i32* %548, align 1
  %550 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 1
  %551 = load i8, i8* %550, align 1
  %552 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %551, i8* %552, align 1
  %553 = add nuw i64 %2, 2
  %554 = icmp ult i64 %553, %4
  br i1 %554, label %555, label %117

555:                                              ; preds = %534
  %556 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 2, i64 0
  %557 = load i8, i8* %556, align 1
  %558 = and i8 %557, 1
  %559 = zext i8 %558 to i64
  %560 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 1, i64 0
  %561 = load i8, i8* %560, align 1
  %562 = zext i8 %561 to i64
  %563 = shl nuw nsw i64 %562, 1
  %564 = and i64 %563, 2
  %565 = or i64 %564, %559
  %566 = getelementptr inbounds i8, i8* %1, i64 8
  %567 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %565, i32 0
  %568 = bitcast i8* %567 to i32*
  %569 = bitcast i8* %566 to i32*
  %570 = load i32, i32* %568, align 4
  store i32 %570, i32* %569, align 1
  %571 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 2
  %572 = load i8, i8* %571, align 1
  %573 = getelementptr inbounds i8, i8* %1, i64 11
  store i8 %572, i8* %573, align 1
  %574 = add nuw i64 %2, 3
  %575 = icmp ult i64 %574, %4
  br i1 %575, label %576, label %117

576:                                              ; preds = %555
  %577 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 2, i64 0
  %578 = load i8, i8* %577, align 1
  %579 = lshr i8 %578, 4
  %580 = and i8 %579, 1
  %581 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 1, i64 0
  %582 = load i8, i8* %581, align 1
  %583 = lshr i8 %582, 3
  %584 = and i8 %583, 2
  %585 = or i8 %584, %580
  %586 = zext i8 %585 to i64
  %587 = getelementptr inbounds i8, i8* %1, i64 12
  %588 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %586, i32 0
  %589 = bitcast i8* %588 to i32*
  %590 = bitcast i8* %587 to i32*
  %591 = load i32, i32* %589, align 4
  store i32 %591, i32* %590, align 1
  %592 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 3
  %593 = load i8, i8* %592, align 1
  %594 = getelementptr inbounds i8, i8* %1, i64 15
  store i8 %593, i8* %594, align 1
  br label %117

595:                                              ; preds = %117
  br i1 %98, label %596, label %675

596:                                              ; preds = %595
  %597 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 2, i64 1
  %598 = load i8, i8* %597, align 1
  %599 = lshr i8 %598, 1
  %600 = and i8 %599, 1
  %601 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 1, i64 1
  %602 = load i8, i8* %601, align 1
  %603 = and i8 %602, 2
  %604 = or i8 %603, %600
  %605 = zext i8 %604 to i64
  %606 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %605, i32 0
  %607 = bitcast i8* %606 to i32*
  %608 = bitcast i8* %118 to i32*
  %609 = load i32, i32* %607, align 4
  store i32 %609, i32* %608, align 1
  %610 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 1, i64 0
  %611 = load i8, i8* %610, align 1
  %612 = getelementptr inbounds i8, i8* %118, i64 3
  store i8 %611, i8* %612, align 1
  %613 = add nuw i64 %2, 1
  %614 = icmp ult i64 %613, %4
  br i1 %614, label %615, label %675

615:                                              ; preds = %596
  %616 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 2, i64 1
  %617 = load i8, i8* %616, align 1
  %618 = lshr i8 %617, 5
  %619 = and i8 %618, 1
  %620 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 1, i64 1
  %621 = load i8, i8* %620, align 1
  %622 = lshr i8 %621, 4
  %623 = and i8 %622, 2
  %624 = or i8 %623, %619
  %625 = zext i8 %624 to i64
  %626 = getelementptr inbounds i8, i8* %118, i64 4
  %627 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %625, i32 0
  %628 = bitcast i8* %627 to i32*
  %629 = bitcast i8* %626 to i32*
  %630 = load i32, i32* %628, align 4
  store i32 %630, i32* %629, align 1
  %631 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 1, i64 1
  %632 = load i8, i8* %631, align 1
  %633 = getelementptr inbounds i8, i8* %118, i64 7
  store i8 %632, i8* %633, align 1
  %634 = add nuw i64 %2, 2
  %635 = icmp ult i64 %634, %4
  br i1 %635, label %636, label %675

636:                                              ; preds = %615
  %637 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 2, i64 0
  %638 = load i8, i8* %637, align 1
  %639 = lshr i8 %638, 1
  %640 = and i8 %639, 1
  %641 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 1, i64 0
  %642 = load i8, i8* %641, align 1
  %643 = and i8 %642, 2
  %644 = or i8 %643, %640
  %645 = zext i8 %644 to i64
  %646 = getelementptr inbounds i8, i8* %118, i64 8
  %647 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %645, i32 0
  %648 = bitcast i8* %647 to i32*
  %649 = bitcast i8* %646 to i32*
  %650 = load i32, i32* %648, align 4
  store i32 %650, i32* %649, align 1
  %651 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 1, i64 2
  %652 = load i8, i8* %651, align 1
  %653 = getelementptr inbounds i8, i8* %118, i64 11
  store i8 %652, i8* %653, align 1
  %654 = add nuw i64 %2, 3
  %655 = icmp ult i64 %654, %4
  br i1 %655, label %656, label %675

656:                                              ; preds = %636
  %657 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 2, i64 0
  %658 = load i8, i8* %657, align 1
  %659 = lshr i8 %658, 5
  %660 = and i8 %659, 1
  %661 = getelementptr inbounds %struct.anon, %struct.anon* %99, i64 0, i32 1, i64 0
  %662 = load i8, i8* %661, align 1
  %663 = lshr i8 %662, 4
  %664 = and i8 %663, 2
  %665 = or i8 %664, %660
  %666 = zext i8 %665 to i64
  %667 = getelementptr inbounds i8, i8* %118, i64 12
  %668 = getelementptr inbounds [4 x %"struct.angle::R8G8B8A8"], [4 x %"struct.angle::R8G8B8A8"]* %17, i64 0, i64 %666, i32 0
  %669 = bitcast i8* %668 to i32*
  %670 = bitcast i8* %667 to i32*
  %671 = load i32, i32* %669, align 4
  store i32 %671, i32* %670, align 1
  %672 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 1, i64 3
  %673 = load i8, i8* %672, align 1
  %674 = getelementptr inbounds i8, i8* %118, i64 15
  store i8 %673, i8* %674, align 1
  br label %675

675:                                              ; preds = %596, %615, %636, %656, %595
  %676 = getelementptr inbounds i8, i8* %118, i64 %6
  br label %110
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block17selectEndPointPCAEPKiPKNS_8R8G8B8A8EmPiS7_(i32* nocapture readonly, %"struct.angle::R8G8B8A8"* nocapture readonly, i64, i32* nocapture, i32* nocapture) unnamed_addr #0 align 2 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %38, label %10

7:                                                ; preds = %32
  %8 = add nsw i32 %35, 8
  %9 = sdiv i32 %8, 16
  br i1 %6, label %38, label %305

10:                                               ; preds = %5, %32
  %11 = phi i32 [ %35, %32 ], [ 0, %5 ]
  %12 = phi i64 [ %36, %32 ], [ 0, %5 ]
  %13 = phi i32 [ %34, %32 ], [ 255, %5 ]
  %14 = phi i32 [ %33, %32 ], [ 0, %5 ]
  %15 = getelementptr inbounds i32, i32* %0, i64 %12
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %32

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %12, i32 3
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %12, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = mul nsw i32 %16, %25
  %27 = add nsw i32 %26, %11
  %28 = icmp sgt i32 %13, %25
  %29 = select i1 %28, i32 %25, i32 %13
  %30 = icmp slt i32 %14, %25
  %31 = select i1 %30, i32 %25, i32 %14
  br label %32

32:                                               ; preds = %22, %18, %10
  %33 = phi i32 [ %14, %18 ], [ %31, %22 ], [ %14, %10 ]
  %34 = phi i32 [ %13, %18 ], [ %29, %22 ], [ %13, %10 ]
  %35 = phi i32 [ %11, %18 ], [ %27, %22 ], [ %11, %10 ]
  %36 = add nuw i64 %12, 1
  %37 = icmp eq i64 %36, %2
  br i1 %37, label %7, label %10

38:                                               ; preds = %128, %5, %7, %334, %366
  %39 = phi i32 [ %362, %366 ], [ 255, %334 ], [ 255, %7 ], [ 255, %5 ], [ %362, %128 ]
  %40 = phi i32 [ %361, %366 ], [ 0, %334 ], [ 0, %7 ], [ 0, %5 ], [ %361, %128 ]
  %41 = phi i32 [ %34, %366 ], [ %34, %334 ], [ %34, %7 ], [ 255, %5 ], [ %34, %128 ]
  %42 = phi i32 [ %33, %366 ], [ %33, %334 ], [ %33, %7 ], [ 0, %5 ], [ %33, %128 ]
  %43 = phi i32 [ %329, %366 ], [ %329, %334 ], [ 0, %7 ], [ 0, %5 ], [ %329, %128 ]
  %44 = phi i32 [ %330, %366 ], [ %330, %334 ], [ 255, %7 ], [ 255, %5 ], [ %330, %128 ]
  %45 = phi i32 [ 0, %366 ], [ 0, %334 ], [ 0, %7 ], [ 0, %5 ], [ %129, %128 ]
  %46 = phi i32 [ 0, %366 ], [ 0, %334 ], [ 0, %7 ], [ 0, %5 ], [ %130, %128 ]
  %47 = phi i32 [ 0, %366 ], [ 0, %334 ], [ 0, %7 ], [ 0, %5 ], [ %131, %128 ]
  %48 = phi i32 [ 0, %366 ], [ 0, %334 ], [ 0, %7 ], [ 0, %5 ], [ %132, %128 ]
  %49 = phi i32 [ 0, %366 ], [ 0, %334 ], [ 0, %7 ], [ 0, %5 ], [ %133, %128 ]
  %50 = phi i32 [ 0, %366 ], [ 0, %334 ], [ 0, %7 ], [ 0, %5 ], [ %134, %128 ]
  %51 = sub nsw i32 %42, %41
  %52 = sitofp i32 %51 to float
  %53 = sub nsw i32 %43, %44
  %54 = sitofp i32 %53 to float
  %55 = sub nsw i32 %40, %39
  %56 = sitofp i32 %55 to float
  %57 = sitofp i32 %50 to float
  %58 = sitofp i32 %49 to float
  %59 = sitofp i32 %48 to float
  %60 = sitofp i32 %47 to float
  %61 = sitofp i32 %45 to float
  %62 = sitofp i32 %46 to float
  %63 = fmul float %52, %57
  %64 = fmul float %54, %58
  %65 = fadd float %63, %64
  %66 = fmul float %56, %59
  %67 = fadd float %65, %66
  %68 = fmul float %52, %58
  %69 = fmul float %54, %60
  %70 = fadd float %68, %69
  %71 = fmul float %56, %61
  %72 = fadd float %70, %71
  %73 = fmul float %52, %59
  %74 = fmul float %54, %61
  %75 = fadd float %73, %74
  %76 = fmul float %56, %62
  %77 = fadd float %75, %76
  %78 = fmul float %67, %67
  %79 = fmul float %72, %72
  %80 = fadd float %78, %79
  %81 = fmul float %77, %77
  %82 = fadd float %81, %80
  %83 = tail call float @sqrtf(float %82) #6
  %84 = fcmp ogt float %83, 0.000000e+00
  br i1 %84, label %137, label %142

85:                                               ; preds = %366, %128
  %86 = phi i32 [ %134, %128 ], [ 0, %366 ]
  %87 = phi i32 [ %133, %128 ], [ 0, %366 ]
  %88 = phi i32 [ %132, %128 ], [ 0, %366 ]
  %89 = phi i32 [ %131, %128 ], [ 0, %366 ]
  %90 = phi i64 [ %135, %128 ], [ 0, %366 ]
  %91 = phi i32 [ %130, %128 ], [ 0, %366 ]
  %92 = phi i32 [ %129, %128 ], [ 0, %366 ]
  %93 = getelementptr inbounds i32, i32* %0, i64 %90
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %96, label %128

96:                                               ; preds = %85
  %97 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %90, i32 3
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %128, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %90, i32 0
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = sub nsw i32 %103, %9
  %105 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %90, i32 1
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = sub nsw i32 %107, %336
  %109 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %90, i32 2
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = sub nsw i32 %111, %368
  %113 = mul i32 %104, %94
  %114 = mul i32 %113, %104
  %115 = add nsw i32 %114, %86
  %116 = mul i32 %113, %108
  %117 = add nsw i32 %116, %87
  %118 = mul i32 %113, %112
  %119 = add nsw i32 %118, %88
  %120 = mul i32 %108, %94
  %121 = mul i32 %120, %108
  %122 = add nsw i32 %121, %89
  %123 = mul i32 %120, %112
  %124 = add nsw i32 %123, %92
  %125 = mul i32 %112, %94
  %126 = mul i32 %125, %112
  %127 = add nsw i32 %126, %91
  br label %128

128:                                              ; preds = %100, %96, %85
  %129 = phi i32 [ %92, %85 ], [ %124, %100 ], [ %92, %96 ]
  %130 = phi i32 [ %91, %85 ], [ %127, %100 ], [ %91, %96 ]
  %131 = phi i32 [ %89, %85 ], [ %122, %100 ], [ %89, %96 ]
  %132 = phi i32 [ %88, %85 ], [ %119, %100 ], [ %88, %96 ]
  %133 = phi i32 [ %87, %85 ], [ %117, %100 ], [ %87, %96 ]
  %134 = phi i32 [ %86, %85 ], [ %115, %100 ], [ %86, %96 ]
  %135 = add nuw i64 %90, 1
  %136 = icmp eq i64 %135, %2
  br i1 %136, label %38, label %85

137:                                              ; preds = %38
  %138 = fdiv float 1.000000e+00, %83
  %139 = fmul float %67, %138
  %140 = fmul float %72, %138
  %141 = fmul float %77, %138
  br label %142

142:                                              ; preds = %137, %38
  %143 = phi float [ %139, %137 ], [ %67, %38 ]
  %144 = phi float [ %140, %137 ], [ %72, %38 ]
  %145 = phi float [ %141, %137 ], [ %77, %38 ]
  %146 = fmul float %143, %57
  %147 = fmul float %144, %58
  %148 = fadd float %146, %147
  %149 = fmul float %145, %59
  %150 = fadd float %148, %149
  %151 = fmul float %143, %58
  %152 = fmul float %144, %60
  %153 = fadd float %151, %152
  %154 = fmul float %145, %61
  %155 = fadd float %153, %154
  %156 = fmul float %143, %59
  %157 = fmul float %144, %61
  %158 = fadd float %156, %157
  %159 = fmul float %145, %62
  %160 = fadd float %158, %159
  %161 = fmul float %150, %150
  %162 = fmul float %155, %155
  %163 = fadd float %161, %162
  %164 = fmul float %160, %160
  %165 = fadd float %164, %163
  %166 = tail call float @sqrtf(float %165) #6
  %167 = fcmp ogt float %166, 0.000000e+00
  br i1 %167, label %233, label %238

168:                                              ; preds = %300
  %169 = tail call float @llvm.fabs.f32(float %301) #6
  %170 = tail call float @llvm.fabs.f32(float %302) #6
  %171 = fcmp olt float %169, %170
  %172 = tail call float @llvm.fabs.f32(float %303) #6
  %173 = select i1 %171, float %170, float %169
  %174 = fcmp olt float %173, %172
  %175 = select i1 %174, float %172, float %173
  %176 = fdiv float 5.120000e+02, %175
  %177 = fmul float %301, %176
  %178 = fptosi float %177 to i32
  %179 = fmul float %302, %176
  %180 = fptosi float %179 to i32
  %181 = fmul float %303, %176
  %182 = fptosi float %181 to i32
  br label %183

183:                                              ; preds = %300, %168
  %184 = phi i32 [ %178, %168 ], [ 299, %300 ]
  %185 = phi i32 [ %180, %168 ], [ 587, %300 ]
  %186 = phi i32 [ %182, %168 ], [ 114, %300 ]
  br i1 %6, label %187, label %192

187:                                              ; preds = %226, %183
  %188 = phi i64 [ 0, %183 ], [ %229, %226 ]
  %189 = phi i64 [ 0, %183 ], [ %230, %226 ]
  %190 = trunc i64 %188 to i32
  store i32 %190, i32* %3, align 4
  %191 = trunc i64 %189 to i32
  store i32 %191, i32* %4, align 4
  ret void

192:                                              ; preds = %183, %226
  %193 = phi i64 [ %231, %226 ], [ 0, %183 ]
  %194 = phi i64 [ %230, %226 ], [ 0, %183 ]
  %195 = phi i64 [ %229, %226 ], [ 0, %183 ]
  %196 = phi i32 [ %228, %226 ], [ 0, %183 ]
  %197 = phi i32 [ %227, %226 ], [ 2147483647, %183 ]
  %198 = getelementptr inbounds i32, i32* %0, i64 %193
  %199 = load i32, i32* %198, align 4
  %200 = icmp sgt i32 %199, 0
  br i1 %200, label %201, label %226

201:                                              ; preds = %192
  %202 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %193, i32 3
  %203 = load i8, i8* %202, align 1
  %204 = icmp eq i8 %203, 0
  br i1 %204, label %226, label %205

205:                                              ; preds = %201
  %206 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %193, i32 0
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = mul nsw i32 %184, %208
  %210 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %193, i32 1
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = mul nsw i32 %185, %212
  %214 = add nsw i32 %213, %209
  %215 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %193, i32 2
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = mul nsw i32 %186, %217
  %219 = add nsw i32 %214, %218
  %220 = icmp slt i32 %219, %197
  %221 = select i1 %220, i32 %219, i32 %197
  %222 = select i1 %220, i64 %193, i64 %195
  %223 = icmp sgt i32 %219, %196
  %224 = select i1 %223, i32 %219, i32 %196
  %225 = select i1 %223, i64 %193, i64 %194
  br label %226

226:                                              ; preds = %201, %205, %192
  %227 = phi i32 [ %197, %192 ], [ %197, %201 ], [ %221, %205 ]
  %228 = phi i32 [ %196, %192 ], [ %196, %201 ], [ %224, %205 ]
  %229 = phi i64 [ %195, %192 ], [ %195, %201 ], [ %222, %205 ]
  %230 = phi i64 [ %194, %192 ], [ %194, %201 ], [ %225, %205 ]
  %231 = add nuw i64 %193, 1
  %232 = icmp eq i64 %231, %2
  br i1 %232, label %187, label %192

233:                                              ; preds = %142
  %234 = fdiv float 1.000000e+00, %166
  %235 = fmul float %150, %234
  %236 = fmul float %155, %234
  %237 = fmul float %160, %234
  br label %238

238:                                              ; preds = %233, %142
  %239 = phi float [ %235, %233 ], [ %150, %142 ]
  %240 = phi float [ %236, %233 ], [ %155, %142 ]
  %241 = phi float [ %237, %233 ], [ %160, %142 ]
  %242 = fmul float %239, %57
  %243 = fmul float %240, %58
  %244 = fadd float %242, %243
  %245 = fmul float %241, %59
  %246 = fadd float %244, %245
  %247 = fmul float %239, %58
  %248 = fmul float %240, %60
  %249 = fadd float %247, %248
  %250 = fmul float %241, %61
  %251 = fadd float %249, %250
  %252 = fmul float %239, %59
  %253 = fmul float %240, %61
  %254 = fadd float %252, %253
  %255 = fmul float %241, %62
  %256 = fadd float %254, %255
  %257 = fmul float %246, %246
  %258 = fmul float %251, %251
  %259 = fadd float %257, %258
  %260 = fmul float %256, %256
  %261 = fadd float %260, %259
  %262 = tail call float @sqrtf(float %261) #6
  %263 = fcmp ogt float %262, 0.000000e+00
  br i1 %263, label %264, label %269

264:                                              ; preds = %238
  %265 = fdiv float 1.000000e+00, %262
  %266 = fmul float %246, %265
  %267 = fmul float %251, %265
  %268 = fmul float %256, %265
  br label %269

269:                                              ; preds = %264, %238
  %270 = phi float [ %266, %264 ], [ %246, %238 ]
  %271 = phi float [ %267, %264 ], [ %251, %238 ]
  %272 = phi float [ %268, %264 ], [ %256, %238 ]
  %273 = fmul float %270, %57
  %274 = fmul float %271, %58
  %275 = fadd float %273, %274
  %276 = fmul float %272, %59
  %277 = fadd float %275, %276
  %278 = fmul float %270, %58
  %279 = fmul float %271, %60
  %280 = fadd float %278, %279
  %281 = fmul float %272, %61
  %282 = fadd float %280, %281
  %283 = fmul float %270, %59
  %284 = fmul float %271, %61
  %285 = fadd float %283, %284
  %286 = fmul float %272, %62
  %287 = fadd float %285, %286
  %288 = fmul float %277, %277
  %289 = fmul float %282, %282
  %290 = fadd float %288, %289
  %291 = fmul float %287, %287
  %292 = fadd float %291, %290
  %293 = tail call float @sqrtf(float %292) #6
  %294 = fcmp ogt float %293, 0.000000e+00
  br i1 %294, label %295, label %300

295:                                              ; preds = %269
  %296 = fdiv float 1.000000e+00, %293
  %297 = fmul float %277, %296
  %298 = fmul float %282, %296
  %299 = fmul float %287, %296
  br label %300

300:                                              ; preds = %295, %269
  %301 = phi float [ %297, %295 ], [ %277, %269 ]
  %302 = phi float [ %298, %295 ], [ %282, %269 ]
  %303 = phi float [ %299, %295 ], [ %287, %269 ]
  %304 = fcmp olt float %293, 1.020000e+03
  br i1 %304, label %183, label %168

305:                                              ; preds = %7, %328
  %306 = phi i32 [ %331, %328 ], [ 0, %7 ]
  %307 = phi i64 [ %332, %328 ], [ 0, %7 ]
  %308 = phi i32 [ %330, %328 ], [ 255, %7 ]
  %309 = phi i32 [ %329, %328 ], [ 0, %7 ]
  %310 = getelementptr inbounds i32, i32* %0, i64 %307
  %311 = load i32, i32* %310, align 4
  %312 = icmp sgt i32 %311, 0
  br i1 %312, label %313, label %328

313:                                              ; preds = %305
  %314 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %307, i32 3
  %315 = load i8, i8* %314, align 1
  %316 = icmp eq i8 %315, 0
  br i1 %316, label %328, label %317

317:                                              ; preds = %313
  %318 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %307, i32 0
  %319 = getelementptr inbounds i8, i8* %318, i64 1
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i32
  %322 = mul nsw i32 %311, %321
  %323 = add nsw i32 %322, %306
  %324 = icmp sgt i32 %308, %321
  %325 = select i1 %324, i32 %321, i32 %308
  %326 = icmp slt i32 %309, %321
  %327 = select i1 %326, i32 %321, i32 %309
  br label %328

328:                                              ; preds = %317, %313, %305
  %329 = phi i32 [ %309, %313 ], [ %327, %317 ], [ %309, %305 ]
  %330 = phi i32 [ %308, %313 ], [ %325, %317 ], [ %308, %305 ]
  %331 = phi i32 [ %306, %313 ], [ %323, %317 ], [ %306, %305 ]
  %332 = add nuw i64 %307, 1
  %333 = icmp eq i64 %332, %2
  br i1 %333, label %334, label %305

334:                                              ; preds = %328
  %335 = add nsw i32 %331, 8
  %336 = sdiv i32 %335, 16
  br i1 %6, label %38, label %337

337:                                              ; preds = %334, %360
  %338 = phi i32 [ %363, %360 ], [ 0, %334 ]
  %339 = phi i64 [ %364, %360 ], [ 0, %334 ]
  %340 = phi i32 [ %362, %360 ], [ 255, %334 ]
  %341 = phi i32 [ %361, %360 ], [ 0, %334 ]
  %342 = getelementptr inbounds i32, i32* %0, i64 %339
  %343 = load i32, i32* %342, align 4
  %344 = icmp sgt i32 %343, 0
  br i1 %344, label %345, label %360

345:                                              ; preds = %337
  %346 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %339, i32 3
  %347 = load i8, i8* %346, align 1
  %348 = icmp eq i8 %347, 0
  br i1 %348, label %360, label %349

349:                                              ; preds = %345
  %350 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %1, i64 %339, i32 0
  %351 = getelementptr inbounds i8, i8* %350, i64 2
  %352 = load i8, i8* %351, align 1
  %353 = zext i8 %352 to i32
  %354 = mul nsw i32 %343, %353
  %355 = add nsw i32 %354, %338
  %356 = icmp sgt i32 %340, %353
  %357 = select i1 %356, i32 %353, i32 %340
  %358 = icmp slt i32 %341, %353
  %359 = select i1 %358, i32 %353, i32 %341
  br label %360

360:                                              ; preds = %349, %345, %337
  %361 = phi i32 [ %341, %345 ], [ %359, %349 ], [ %341, %337 ]
  %362 = phi i32 [ %340, %345 ], [ %357, %349 ], [ %340, %337 ]
  %363 = phi i32 [ %338, %345 ], [ %355, %349 ], [ %338, %337 ]
  %364 = add nuw i64 %339, 1
  %365 = icmp eq i64 %364, %2
  br i1 %365, label %366, label %337

366:                                              ; preds = %360
  %367 = add nsw i32 %363, 8
  %368 = sdiv i32 %367, 16
  br i1 %6, label %38, label %85
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block7packBC1EPvPKiS4_PKNS_8R8G8B8A8Emiib(i8* nocapture, i32* nocapture readonly, i32* nocapture readonly, %"struct.angle::R8G8B8A8"* nocapture readonly, i64, i32, i32, i1 zeroext) unnamed_addr #0 align 2 {
  %9 = alloca [16 x i32], align 16
  %10 = sext i32 %5 to i64
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %11, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %11, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %11, i32 2
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %10, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = insertelement <2 x i8> undef, i8 %13, i32 0
  %21 = insertelement <2 x i8> %20, i8 %19, i32 1
  %22 = lshr <2 x i8> %21, <i8 3, i8 3>
  %23 = zext <2 x i8> %22 to <2 x i16>
  %24 = shl nuw <2 x i16> %23, <i16 11, i16 11>
  %25 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %10, i32 1
  %26 = load i8, i8* %25, align 1
  %27 = insertelement <2 x i8> undef, i8 %15, i32 0
  %28 = insertelement <2 x i8> %27, i8 %26, i32 1
  %29 = lshr <2 x i8> %28, <i8 2, i8 2>
  %30 = zext <2 x i8> %29 to <2 x i16>
  %31 = shl nuw nsw <2 x i16> %30, <i16 5, i16 5>
  %32 = or <2 x i16> %31, %24
  %33 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %10, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = insertelement <2 x i8> undef, i8 %17, i32 0
  %36 = insertelement <2 x i8> %35, i8 %34, i32 1
  %37 = lshr <2 x i8> %36, <i8 3, i8 3>
  %38 = zext <2 x i8> %37 to <2 x i16>
  %39 = or <2 x i16> %32, %38
  %40 = extractelement <2 x i16> %39, i32 0
  %41 = extractelement <2 x i16> %39, i32 1
  %42 = icmp eq i16 %40, %41
  br i1 %42, label %268, label %43

43:                                               ; preds = %8
  %44 = zext i8 %13 to i32
  %45 = zext i8 %19 to i32
  %46 = sub nsw i32 %44, %45
  %47 = zext i8 %15 to i32
  %48 = zext i8 %26 to i32
  %49 = sub nsw i32 %47, %48
  %50 = zext i8 %17 to i32
  %51 = zext i8 %34 to i32
  %52 = sub nsw i32 %50, %51
  %53 = mul nsw i32 %46, %44
  %54 = mul nsw i32 %49, %47
  %55 = add nsw i32 %54, %53
  %56 = mul nsw i32 %52, %50
  %57 = add nsw i32 %55, %56
  %58 = mul nsw i32 %46, %45
  %59 = mul nsw i32 %49, %48
  %60 = add nsw i32 %59, %58
  %61 = mul nsw i32 %52, %51
  %62 = add nsw i32 %60, %61
  %63 = bitcast [16 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %63) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %63, i8 -86, i64 64, i1 false) #6
  %64 = icmp ne i64 %4, 0
  br i1 %7, label %69, label %65

65:                                               ; preds = %43
  br i1 %64, label %66, label %158

66:                                               ; preds = %65
  %67 = sub nsw i32 %57, %62
  %68 = sitofp i32 %67 to float
  br label %117

69:                                               ; preds = %43
  br i1 %64, label %70, label %158

70:                                               ; preds = %69
  %71 = sub nsw i32 %57, %62
  %72 = sitofp i32 %71 to float
  br label %73

73:                                               ; preds = %114, %70
  %74 = phi i64 [ 0, %70 ], [ %115, %114 ]
  %75 = getelementptr inbounds i32, i32* %2, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %114

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %74, i32 3
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %111, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %74, i32 0
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = mul nsw i32 %46, %85
  %87 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %74, i32 1
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nsw i32 %49, %89
  %91 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %74, i32 2
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = mul nsw i32 %52, %93
  %95 = sub nsw i32 %86, %62
  %96 = add nsw i32 %95, %90
  %97 = add i32 %96, %94
  %98 = sitofp i32 %97 to float
  %99 = fdiv float %98, %72
  %100 = fmul float %99, 2.000000e+00
  %101 = fadd float %100, 5.000000e-01
  %102 = fptosi float %101 to i32
  %103 = icmp slt i32 %102, 2
  %104 = select i1 %103, i32 %102, i32 2
  %105 = icmp sgt i32 %102, 0
  %106 = icmp eq i32 %104, 1
  %107 = and i1 %105, %106
  %108 = select i1 %107, i32 2, i32 1
  %109 = icmp slt i32 %104, 1
  %110 = select i1 %109, i32 0, i32 %108
  br label %111

111:                                              ; preds = %82, %78
  %112 = phi i32 [ 3, %78 ], [ %110, %82 ]
  %113 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %74
  store i32 %112, i32* %113, align 4
  br label %114

114:                                              ; preds = %111, %73
  %115 = add nuw i64 %74, 1
  %116 = icmp eq i64 %115, %4
  br i1 %116, label %158, label %73

117:                                              ; preds = %155, %66
  %118 = phi i64 [ 0, %66 ], [ %156, %155 ]
  %119 = getelementptr inbounds i32, i32* %2, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = icmp sgt i32 %120, 0
  br i1 %121, label %122, label %155

122:                                              ; preds = %117
  %123 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %118, i32 0
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = mul nsw i32 %46, %125
  %127 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %118, i32 1
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = mul nsw i32 %49, %129
  %131 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %118, i32 2
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = mul nsw i32 %52, %133
  %135 = sub nsw i32 %126, %62
  %136 = add nsw i32 %135, %130
  %137 = add i32 %136, %134
  %138 = sitofp i32 %137 to float
  %139 = fdiv float %138, %68
  %140 = fmul float %139, 3.000000e+00
  %141 = fadd float %140, 5.000000e-01
  %142 = fptosi float %141 to i32
  %143 = icmp slt i32 %142, 3
  %144 = select i1 %143, i32 %142, i32 3
  %145 = icmp sgt i32 %144, 0
  %146 = select i1 %145, i32 %144, i32 0
  %147 = icmp ult i32 %146, 3
  br i1 %147, label %148, label %152

148:                                              ; preds = %122
  %149 = zext i32 %146 to i64
  %150 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZNK5angle12_GLOBAL__N_19ETC2Block7packBC1EPvPKiS4_PKNS_8R8G8B8A8Emiib, i64 0, i64 %149
  %151 = load i32, i32* %150, align 4
  br label %152

152:                                              ; preds = %122, %148
  %153 = phi i32 [ %151, %148 ], [ 0, %122 ]
  %154 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %118
  store i32 %153, i32* %154, align 4
  br label %155

155:                                              ; preds = %152, %117
  %156 = add nuw i64 %118, 1
  %157 = icmp eq i64 %156, %4
  br i1 %157, label %158, label %117

158:                                              ; preds = %155, %114, %65, %69
  %159 = getelementptr inbounds i32, i32* %1, i64 15
  %160 = load i32, i32* %159, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = shl i32 %163, 2
  %165 = getelementptr inbounds i32, i32* %1, i64 14
  %166 = load i32, i32* %165, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %167
  %169 = load i32, i32* %168, align 4
  %170 = or i32 %169, %164
  %171 = shl i32 %170, 2
  %172 = getelementptr inbounds i32, i32* %1, i64 13
  %173 = load i32, i32* %172, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = or i32 %176, %171
  %178 = shl i32 %177, 2
  %179 = getelementptr inbounds i32, i32* %1, i64 12
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = or i32 %183, %178
  %185 = shl i32 %184, 2
  %186 = getelementptr inbounds i32, i32* %1, i64 11
  %187 = load i32, i32* %186, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %188
  %190 = load i32, i32* %189, align 4
  %191 = or i32 %190, %185
  %192 = shl i32 %191, 2
  %193 = getelementptr inbounds i32, i32* %1, i64 10
  %194 = load i32, i32* %193, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = or i32 %197, %192
  %199 = shl i32 %198, 2
  %200 = getelementptr inbounds i32, i32* %1, i64 9
  %201 = load i32, i32* %200, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %202
  %204 = load i32, i32* %203, align 4
  %205 = or i32 %204, %199
  %206 = shl i32 %205, 2
  %207 = getelementptr inbounds i32, i32* %1, i64 8
  %208 = load i32, i32* %207, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = or i32 %211, %206
  %213 = shl i32 %212, 2
  %214 = getelementptr inbounds i32, i32* %1, i64 7
  %215 = load i32, i32* %214, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %216
  %218 = load i32, i32* %217, align 4
  %219 = or i32 %218, %213
  %220 = shl i32 %219, 2
  %221 = getelementptr inbounds i32, i32* %1, i64 6
  %222 = load i32, i32* %221, align 4
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %223
  %225 = load i32, i32* %224, align 4
  %226 = or i32 %225, %220
  %227 = shl i32 %226, 2
  %228 = getelementptr inbounds i32, i32* %1, i64 5
  %229 = load i32, i32* %228, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %230
  %232 = load i32, i32* %231, align 4
  %233 = or i32 %232, %227
  %234 = shl i32 %233, 2
  %235 = getelementptr inbounds i32, i32* %1, i64 4
  %236 = load i32, i32* %235, align 4
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %237
  %239 = load i32, i32* %238, align 4
  %240 = or i32 %239, %234
  %241 = shl i32 %240, 2
  %242 = getelementptr inbounds i32, i32* %1, i64 3
  %243 = load i32, i32* %242, align 4
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %244
  %246 = load i32, i32* %245, align 4
  %247 = or i32 %246, %241
  %248 = shl i32 %247, 2
  %249 = getelementptr inbounds i32, i32* %1, i64 2
  %250 = load i32, i32* %249, align 4
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %251
  %253 = load i32, i32* %252, align 4
  %254 = or i32 %253, %248
  %255 = shl i32 %254, 2
  %256 = getelementptr inbounds i32, i32* %1, i64 1
  %257 = load i32, i32* %256, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %258
  %260 = load i32, i32* %259, align 4
  %261 = or i32 %260, %255
  %262 = shl i32 %261, 2
  %263 = load i32, i32* %1, align 4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 %264
  %266 = load i32, i32* %265, align 4
  %267 = or i32 %266, %262
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %63) #6
  br label %396

268:                                              ; preds = %8
  br i1 %7, label %269, label %396

269:                                              ; preds = %268
  %270 = load i32, i32* %1, align 4
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %271, i32 3
  %273 = load i8, i8* %272, align 1
  %274 = icmp eq i8 %273, 0
  %275 = select i1 %274, i32 3, i32 0
  %276 = getelementptr inbounds i32, i32* %1, i64 1
  %277 = load i32, i32* %276, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %278, i32 3
  %280 = load i8, i8* %279, align 1
  %281 = icmp eq i8 %280, 0
  %282 = or i32 %275, 12
  %283 = select i1 %281, i32 %282, i32 %275
  %284 = getelementptr inbounds i32, i32* %1, i64 2
  %285 = load i32, i32* %284, align 4
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %286, i32 3
  %288 = load i8, i8* %287, align 1
  %289 = icmp eq i8 %288, 0
  %290 = or i32 %283, 48
  %291 = select i1 %289, i32 %290, i32 %283
  %292 = getelementptr inbounds i32, i32* %1, i64 3
  %293 = load i32, i32* %292, align 4
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %294, i32 3
  %296 = load i8, i8* %295, align 1
  %297 = icmp eq i8 %296, 0
  %298 = or i32 %291, 192
  %299 = select i1 %297, i32 %298, i32 %291
  %300 = getelementptr inbounds i32, i32* %1, i64 4
  %301 = load i32, i32* %300, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %302, i32 3
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 0
  %306 = or i32 %299, 768
  %307 = select i1 %305, i32 %306, i32 %299
  %308 = getelementptr inbounds i32, i32* %1, i64 5
  %309 = load i32, i32* %308, align 4
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %310, i32 3
  %312 = load i8, i8* %311, align 1
  %313 = icmp eq i8 %312, 0
  %314 = or i32 %307, 3072
  %315 = select i1 %313, i32 %314, i32 %307
  %316 = getelementptr inbounds i32, i32* %1, i64 6
  %317 = load i32, i32* %316, align 4
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %318, i32 3
  %320 = load i8, i8* %319, align 1
  %321 = icmp eq i8 %320, 0
  %322 = or i32 %315, 12288
  %323 = select i1 %321, i32 %322, i32 %315
  %324 = getelementptr inbounds i32, i32* %1, i64 7
  %325 = load i32, i32* %324, align 4
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %326, i32 3
  %328 = load i8, i8* %327, align 1
  %329 = icmp eq i8 %328, 0
  %330 = or i32 %323, 49152
  %331 = select i1 %329, i32 %330, i32 %323
  %332 = getelementptr inbounds i32, i32* %1, i64 8
  %333 = load i32, i32* %332, align 4
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %334, i32 3
  %336 = load i8, i8* %335, align 1
  %337 = icmp eq i8 %336, 0
  %338 = or i32 %331, 196608
  %339 = select i1 %337, i32 %338, i32 %331
  %340 = getelementptr inbounds i32, i32* %1, i64 9
  %341 = load i32, i32* %340, align 4
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %342, i32 3
  %344 = load i8, i8* %343, align 1
  %345 = icmp eq i8 %344, 0
  %346 = or i32 %339, 786432
  %347 = select i1 %345, i32 %346, i32 %339
  %348 = getelementptr inbounds i32, i32* %1, i64 10
  %349 = load i32, i32* %348, align 4
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %350, i32 3
  %352 = load i8, i8* %351, align 1
  %353 = icmp eq i8 %352, 0
  %354 = or i32 %347, 3145728
  %355 = select i1 %353, i32 %354, i32 %347
  %356 = getelementptr inbounds i32, i32* %1, i64 11
  %357 = load i32, i32* %356, align 4
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %358, i32 3
  %360 = load i8, i8* %359, align 1
  %361 = icmp eq i8 %360, 0
  %362 = or i32 %355, 12582912
  %363 = select i1 %361, i32 %362, i32 %355
  %364 = getelementptr inbounds i32, i32* %1, i64 12
  %365 = load i32, i32* %364, align 4
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %366, i32 3
  %368 = load i8, i8* %367, align 1
  %369 = icmp eq i8 %368, 0
  %370 = or i32 %363, 50331648
  %371 = select i1 %369, i32 %370, i32 %363
  %372 = getelementptr inbounds i32, i32* %1, i64 13
  %373 = load i32, i32* %372, align 4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %374, i32 3
  %376 = load i8, i8* %375, align 1
  %377 = icmp eq i8 %376, 0
  %378 = or i32 %371, 201326592
  %379 = select i1 %377, i32 %378, i32 %371
  %380 = getelementptr inbounds i32, i32* %1, i64 14
  %381 = load i32, i32* %380, align 4
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %382, i32 3
  %384 = load i8, i8* %383, align 1
  %385 = icmp eq i8 %384, 0
  %386 = or i32 %379, 805306368
  %387 = select i1 %385, i32 %386, i32 %379
  %388 = getelementptr inbounds i32, i32* %1, i64 15
  %389 = load i32, i32* %388, align 4
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds %"struct.angle::R8G8B8A8", %"struct.angle::R8G8B8A8"* %3, i64 %390, i32 3
  %392 = load i8, i8* %391, align 1
  %393 = icmp eq i8 %392, 0
  %394 = or i32 %387, -1073741824
  %395 = select i1 %393, i32 %394, i32 %387
  br label %396

396:                                              ; preds = %269, %268, %158
  %397 = phi i32 [ %267, %158 ], [ 0, %268 ], [ %395, %269 ]
  %398 = icmp ult i16 %40, %41
  br i1 %398, label %399, label %407

399:                                              ; preds = %396
  br i1 %7, label %400, label %404

400:                                              ; preds = %399
  %401 = lshr i32 %397, 1
  %402 = or i32 %401, -1431655766
  %403 = xor i32 %402, -1
  br label %404

404:                                              ; preds = %399, %400
  %405 = phi i32 [ %403, %400 ], [ 1431655765, %399 ]
  %406 = xor i32 %405, %397
  br label %407

407:                                              ; preds = %404, %396
  %408 = phi i16 [ %41, %404 ], [ %40, %396 ]
  %409 = phi i16 [ %40, %404 ], [ %41, %396 ]
  %410 = phi i32 [ %406, %404 ], [ %397, %396 ]
  %411 = bitcast i8* %0 to i16*
  %412 = select i1 %7, i16 %409, i16 %408
  %413 = select i1 %7, i16 %408, i16 %409
  store i16 %412, i16* %411, align 4
  %414 = getelementptr inbounds i8, i8* %0, i64 2
  %415 = bitcast i8* %414 to i16*
  store i16 %413, i16* %415, align 2
  %416 = getelementptr inbounds i8, i8* %0, i64 4
  %417 = bitcast i8* %416 to i32*
  store i32 %410, i32* %417, align 4
  ret void
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block43transcodeIndividualOrDifferentialBlockToBC1EPhmmmmiiiiiiPA4_Khb(%"struct.angle::(anonymous namespace)::ETC2Block"* nocapture readonly, i8* nocapture, i32, i32, i32, i32, i32, i32, i1 zeroext) unnamed_addr #0 align 2 {
  %10 = alloca [8 x %"struct.angle::R8G8B8A8"], align 16
  %11 = alloca [16 x i32], align 16
  %12 = alloca [8 x i32], align 16
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = select i1 %8, [8 x [4 x i32]]* @_ZN5angle12_GLOBAL__N_126intensityModifierNonOpaqueE, [8 x [4 x i32]]* @_ZN5angle12_GLOBAL__N_124intensityModifierDefaultE
  %16 = getelementptr inbounds [8 x %"struct.angle::R8G8B8A8"], [8 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #6
  %17 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon.1*
  %18 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %17, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 32, i1 false)
  %19 = getelementptr inbounds [8 x %"struct.angle::R8G8B8A8"], [8 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 2
  %20 = bitcast %"struct.angle::R8G8B8A8"* %19 to i32*
  %21 = getelementptr inbounds [8 x %"struct.angle::R8G8B8A8"], [8 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 6
  %22 = bitcast %"struct.angle::R8G8B8A8"* %21 to i32*
  br label %23

23:                                               ; preds = %88, %9
  %24 = phi i64 [ 0, %9 ], [ %89, %88 ]
  %25 = icmp eq i64 %24, 2
  %26 = and i1 %25, %8
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  store i32 0, i32* %20, align 8
  store i32 0, i32* %22, align 8
  br label %88

28:                                               ; preds = %23
  %29 = load i8, i8* %18, align 1
  %30 = lshr i8 %29, 5
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %15, i64 0, i64 %31, i64 %24
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, %2
  %35 = add nsw i32 %33, %3
  %36 = add nsw i32 %33, %4
  %37 = icmp slt i32 %34, 255
  %38 = select i1 %37, i32 %34, i32 255
  %39 = icmp sgt i32 %38, 0
  %40 = select i1 %39, i32 %38, i32 0
  %41 = icmp slt i32 %35, 255
  %42 = select i1 %41, i32 %35, i32 255
  %43 = icmp sgt i32 %42, 0
  %44 = select i1 %43, i32 %42, i32 0
  %45 = icmp slt i32 %36, 255
  %46 = select i1 %45, i32 %36, i32 255
  %47 = icmp sgt i32 %46, 0
  %48 = select i1 %47, i32 %46, i32 0
  %49 = shl nsw i32 %48, 16
  %50 = shl nsw i32 %44, 8
  %51 = and i32 %50, 65280
  %52 = and i32 %40, 255
  %53 = or i32 %52, %49
  %54 = or i32 %53, %51
  %55 = or i32 %54, -16777216
  %56 = getelementptr inbounds [8 x %"struct.angle::R8G8B8A8"], [8 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %24
  %57 = bitcast %"struct.angle::R8G8B8A8"* %56 to i32*
  store i32 %55, i32* %57, align 4
  %58 = lshr i8 %29, 2
  %59 = and i8 %58, 7
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %15, i64 0, i64 %60, i64 %24
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %62, %5
  %64 = add nsw i32 %62, %6
  %65 = add nsw i32 %62, %7
  %66 = icmp slt i32 %63, 255
  %67 = select i1 %66, i32 %63, i32 255
  %68 = icmp sgt i32 %67, 0
  %69 = select i1 %68, i32 %67, i32 0
  %70 = icmp slt i32 %64, 255
  %71 = select i1 %70, i32 %64, i32 255
  %72 = icmp sgt i32 %71, 0
  %73 = select i1 %72, i32 %71, i32 0
  %74 = icmp slt i32 %65, 255
  %75 = select i1 %74, i32 %65, i32 255
  %76 = icmp sgt i32 %75, 0
  %77 = select i1 %76, i32 %75, i32 0
  %78 = shl nsw i32 %77, 16
  %79 = shl nsw i32 %73, 8
  %80 = and i32 %79, 65280
  %81 = and i32 %69, 255
  %82 = or i32 %81, %78
  %83 = or i32 %82, %80
  %84 = or i32 %83, -16777216
  %85 = add nuw nsw i64 %24, 4
  %86 = getelementptr inbounds [8 x %"struct.angle::R8G8B8A8"], [8 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 %85
  %87 = bitcast %"struct.angle::R8G8B8A8"* %86 to i32*
  store i32 %84, i32* %87, align 4
  br label %88

88:                                               ; preds = %27, %28
  %89 = add nuw nsw i64 %24, 1
  %90 = icmp eq i64 %89, 4
  br i1 %90, label %91, label %23

91:                                               ; preds = %88
  %92 = getelementptr inbounds [8 x %"struct.angle::R8G8B8A8"], [8 x %"struct.angle::R8G8B8A8"]* %10, i64 0, i64 0
  %93 = bitcast [16 x i32]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %93) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %93, i8 -86, i64 64, i1 false)
  %94 = bitcast [8 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %94) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %94, i8 0, i64 32, i1 false)
  %95 = load i8, i8* %18, align 1
  %96 = and i8 %95, 1
  %97 = icmp ne i8 %96, 0
  %98 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon*
  %99 = select i1 %97, i64 4, i64 2
  %100 = select i1 %97, i64 2, i64 4
  br label %101

101:                                              ; preds = %91, %105
  %102 = phi i64 [ 0, %91 ], [ %106, %105 ]
  %103 = shl i64 %102, 2
  %104 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 %103
  br label %108

105:                                              ; preds = %108
  %106 = add nuw i64 %102, 1
  %107 = icmp eq i64 %106, %100
  br i1 %107, label %135, label %101

108:                                              ; preds = %101, %108
  %109 = phi i64 [ %133, %108 ], [ 0, %101 ]
  %110 = shl i64 %109, 2
  %111 = add i64 %110, %102
  %112 = lshr i64 %111, 3
  %113 = sub nsw i64 1, %112
  %114 = getelementptr inbounds %struct.anon, %struct.anon* %98, i64 0, i32 2, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = trunc i64 %111 to i32
  %118 = and i32 %117, 7
  %119 = lshr i32 %116, %118
  %120 = and i32 %119, 1
  %121 = getelementptr inbounds %struct.anon, %struct.anon* %98, i64 0, i32 1, i64 %113
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = lshr i32 %123, %118
  %125 = shl nuw nsw i32 %124, 1
  %126 = and i32 %125, 2
  %127 = or i32 %126, %120
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds i32, i32* %104, i64 %109
  store i32 %127, i32* %129, align 4
  %130 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %128
  %131 = load i32, i32* %130, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %130, align 4
  %133 = add nuw i64 %109, 1
  %134 = icmp eq i64 %133, %99
  br i1 %134, label %105, label %108

135:                                              ; preds = %105
  %136 = shl nuw nsw i8 %96, 1
  %137 = xor i8 %136, 2
  %138 = zext i8 %137 to i64
  %139 = shl nuw nsw i8 %96, 1
  %140 = zext i8 %139 to i64
  br label %141

141:                                              ; preds = %135, %173
  %142 = phi i64 [ %140, %135 ], [ %174, %173 ]
  %143 = shl i64 %142, 2
  %144 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 %143
  br label %145

145:                                              ; preds = %145, %141
  %146 = phi i64 [ %171, %145 ], [ %138, %141 ]
  %147 = shl i64 %146, 2
  %148 = add i64 %147, %142
  %149 = lshr i64 %148, 3
  %150 = sub nsw i64 1, %149
  %151 = getelementptr inbounds %struct.anon, %struct.anon* %98, i64 0, i32 2, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = trunc i64 %148 to i32
  %155 = and i32 %154, 7
  %156 = lshr i32 %153, %155
  %157 = and i32 %156, 1
  %158 = getelementptr inbounds %struct.anon, %struct.anon* %98, i64 0, i32 1, i64 %150
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = lshr i32 %160, %155
  %162 = shl nuw nsw i32 %161, 1
  %163 = and i32 %162, 2
  %164 = or i32 %163, %157
  %165 = or i32 %164, 4
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds i32, i32* %144, i64 %146
  store i32 %165, i32* %167, align 4
  %168 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %166
  %169 = load i32, i32* %168, align 4
  %170 = add nsw i32 %169, 1
  store i32 %170, i32* %168, align 4
  %171 = add nuw i64 %146, 1
  %172 = icmp eq i64 %171, 4
  br i1 %172, label %173, label %145

173:                                              ; preds = %145
  %174 = add nuw i64 %142, 1
  %175 = icmp eq i64 %174, 4
  br i1 %175, label %176, label %141

176:                                              ; preds = %173
  %177 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %177) #6
  store i32 -1431655766, i32* %13, align 4
  %178 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %178) #6
  store i32 -1431655766, i32* %14, align 4
  %179 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 0
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block17selectEndPointPCAEPKiPKNS_8R8G8B8A8EmPiS7_(i32* nonnull %179, %"struct.angle::R8G8B8A8"* nonnull %92, i64 8, i32* nonnull %13, i32* nonnull %14)
  %180 = getelementptr inbounds [16 x i32], [16 x i32]* %11, i64 0, i64 0
  %181 = load i32, i32* %13, align 4
  %182 = load i32, i32* %14, align 4
  call fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block7packBC1EPvPKiS4_PKNS_8R8G8B8A8Emiib(i8* %1, i32* nonnull %180, i32* nonnull %179, %"struct.angle::R8G8B8A8"* nonnull %92, i64 8, i32 %181, i32 %182, i1 zeroext %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %178) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %177) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %94) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %93) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #6
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* nocapture readonly, i64, i64) unnamed_addr #5 align 2 {
  %4 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon.8*
  %5 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %4, i64 0, i32 1
  %6 = bitcast [7 x i8]* %5 to i56*
  %7 = load i56, i56* %6, align 1
  %8 = and i56 %7, 15
  %9 = zext i56 %8 to i64
  %10 = shl i64 %1, 2
  %11 = add i64 %10, %2
  switch i64 %11, label %71 [
    i64 0, label %12
    i64 1, label %15
    i64 2, label %18
    i64 3, label %24
    i64 4, label %27
    i64 5, label %30
    i64 6, label %36
    i64 7, label %39
    i64 8, label %42
    i64 9, label %45
    i64 10, label %48
    i64 11, label %54
    i64 12, label %57
    i64 13, label %60
    i64 14, label %65
    i64 15, label %68
  ]

12:                                               ; preds = %3
  %13 = lshr i56 %7, 13
  %14 = and i56 %13, 7
  br label %71

15:                                               ; preds = %3
  %16 = lshr i56 %7, 10
  %17 = and i56 %16, 7
  br label %71

18:                                               ; preds = %3
  %19 = lshr i56 %7, 7
  %20 = and i56 %19, 6
  %21 = lshr i56 %7, 23
  %22 = and i56 %21, 1
  %23 = or i56 %20, %22
  br label %71

24:                                               ; preds = %3
  %25 = lshr i56 %7, 20
  %26 = and i56 %25, 7
  br label %71

27:                                               ; preds = %3
  %28 = lshr i56 %7, 17
  %29 = and i56 %28, 7
  br label %71

30:                                               ; preds = %3
  %31 = lshr i56 %7, 14
  %32 = and i56 %31, 4
  %33 = lshr i56 %7, 30
  %34 = and i56 %33, 3
  %35 = or i56 %32, %34
  br label %71

36:                                               ; preds = %3
  %37 = lshr i56 %7, 27
  %38 = and i56 %37, 7
  br label %71

39:                                               ; preds = %3
  %40 = lshr i56 %7, 24
  %41 = and i56 %40, 7
  br label %71

42:                                               ; preds = %3
  %43 = lshr i56 %7, 37
  %44 = and i56 %43, 7
  br label %71

45:                                               ; preds = %3
  %46 = lshr i56 %7, 34
  %47 = and i56 %46, 7
  br label %71

48:                                               ; preds = %3
  %49 = lshr i56 %7, 31
  %50 = and i56 %49, 6
  %51 = lshr i56 %7, 47
  %52 = and i56 %51, 1
  %53 = or i56 %50, %52
  br label %71

54:                                               ; preds = %3
  %55 = lshr i56 %7, 44
  %56 = and i56 %55, 7
  br label %71

57:                                               ; preds = %3
  %58 = lshr i56 %7, 41
  %59 = and i56 %58, 7
  br label %71

60:                                               ; preds = %3
  %61 = lshr i56 %7, 38
  %62 = and i56 %61, 4
  %63 = lshr i56 %7, 54
  %64 = or i56 %62, %63
  br label %71

65:                                               ; preds = %3
  %66 = lshr i56 %7, 51
  %67 = and i56 %66, 7
  br label %71

68:                                               ; preds = %3
  %69 = lshr i56 %7, 48
  %70 = and i56 %69, 7
  br label %71

71:                                               ; preds = %3, %12, %15, %18, %24, %27, %30, %36, %39, %42, %45, %48, %54, %57, %60, %65, %68
  %72 = phi i56 [ %70, %68 ], [ %67, %65 ], [ %64, %60 ], [ %59, %57 ], [ %56, %54 ], [ %53, %48 ], [ %47, %45 ], [ %44, %42 ], [ %41, %39 ], [ %38, %36 ], [ %35, %30 ], [ %29, %27 ], [ %26, %24 ], [ %23, %18 ], [ %17, %15 ], [ %14, %12 ], [ 0, %3 ]
  %73 = zext i56 %72 to i64
  %74 = shl i64 %73, 32
  %75 = ashr exact i64 %74, 32
  %76 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* @_ZZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmmE13modifierTable, i64 0, i64 %9, i64 %75
  %77 = load i32, i32* %76, align 4
  ret i32 %77
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZNK5angle12_GLOBAL__N_19ETC2Block24decodeAsSingleEACChannelEPtmmmmmmbb(%"struct.angle::(anonymous namespace)::ETC2Block"* nocapture readonly, i16* nocapture, i64, i64, i64, i64, i64, i64, i1 zeroext, i1 zeroext) unnamed_addr #1 align 2 {
  %11 = icmp ult i64 %3, %5
  br i1 %11, label %12, label %19

12:                                               ; preds = %10
  %13 = bitcast i16* %1 to i8*
  %14 = icmp ult i64 %2, %4
  %15 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to %struct.anon.8*
  %16 = bitcast %"struct.angle::(anonymous namespace)::ETC2Block"* %0 to i8*
  %17 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %15, i64 0, i32 1
  %18 = bitcast [7 x i8]* %17 to i56*
  br label %20

19:                                               ; preds = %25, %10
  ret void

20:                                               ; preds = %12, %25
  %21 = phi i64 [ 0, %12 ], [ %26, %25 ]
  %22 = mul i64 %21, %7
  %23 = getelementptr inbounds i8, i8* %13, i64 %22
  %24 = bitcast i8* %23 to i16*
  br i1 %14, label %31, label %25

25:                                               ; preds = %153, %20
  %26 = add nuw nsw i64 %21, 1
  %27 = icmp ult i64 %26, 4
  %28 = add nuw i64 %26, %3
  %29 = icmp ult i64 %28, %5
  %30 = and i1 %27, %29
  br i1 %30, label %20, label %19

31:                                               ; preds = %20, %153
  %32 = phi i64 [ %155, %153 ], [ 0, %20 ]
  %33 = mul i64 %32, %6
  %34 = getelementptr inbounds i16, i16* %24, i64 %33
  %35 = load i8, i8* %16, align 1
  %36 = sext i8 %35 to i32
  %37 = zext i8 %35 to i32
  %38 = select i1 %8, i32 %36, i32 %37
  %39 = load i56, i56* %18, align 1
  %40 = lshr i56 %39, 4
  %41 = trunc i56 %40 to i32
  %42 = and i32 %41, 15
  %43 = icmp eq i32 %42, 0
  %44 = shl nuw nsw i32 %42, 3
  %45 = select i1 %43, i32 1, i32 %44
  %46 = shl nsw i32 %38, 3
  %47 = or i32 %46, 4
  %48 = tail call fastcc i32 @_ZNK5angle12_GLOBAL__N_19ETC2Block24getSingleChannelModifierEmm(%"struct.angle::(anonymous namespace)::ETC2Block"* %0, i64 %32, i64 %21) #6
  %49 = mul nsw i32 %45, %48
  %50 = add nsw i32 %49, %47
  br i1 %8, label %51, label %105

51:                                               ; preds = %31
  %52 = icmp slt i32 %50, 1023
  %53 = select i1 %52, i32 %50, i32 1023
  %54 = icmp sgt i32 %53, -1023
  %55 = select i1 %54, i32 %53, i32 -1023
  %56 = trunc i32 %55 to i16
  %57 = shl i16 %56, 5
  br i1 %9, label %58, label %153

58:                                               ; preds = %51
  %59 = icmp slt i16 %57, 0
  %60 = sitofp i16 %57 to double
  br i1 %59, label %61, label %63

61:                                               ; preds = %58
  %62 = fmul double %60, 0x3F00000000000000
  br label %65

63:                                               ; preds = %58
  %64 = fdiv double %60, 3.276700e+04
  br label %65

65:                                               ; preds = %61, %63
  %66 = phi double [ %62, %61 ], [ %64, %63 ]
  %67 = fptrunc double %66 to float
  %68 = bitcast float %67 to i32
  %69 = lshr i32 %68, 16
  %70 = and i32 %69, 32768
  %71 = and i32 %68, 2147483647
  %72 = icmp ugt i32 %71, 2139095040
  br i1 %72, label %153, label %73

73:                                               ; preds = %65
  %74 = icmp ugt i32 %71, 1207955455
  br i1 %74, label %75, label %78

75:                                               ; preds = %73
  %76 = trunc i32 %70 to i16
  %77 = or i16 %76, 31744
  br label %153

78:                                               ; preds = %73
  %79 = icmp ult i32 %71, 947912704
  br i1 %79, label %80, label %97

80:                                               ; preds = %78
  %81 = icmp ugt i32 %71, 754974719
  br i1 %81, label %82, label %88

82:                                               ; preds = %80
  %83 = lshr i32 %71, 23
  %84 = sub nuw nsw i32 113, %83
  %85 = and i32 %68, 8388607
  %86 = or i32 %85, 8388608
  %87 = lshr i32 %86, %84
  br label %88

88:                                               ; preds = %82, %80
  %89 = phi i32 [ %87, %82 ], [ 0, %80 ]
  %90 = add nuw i32 %89, 4095
  %91 = lshr i32 %89, 13
  %92 = and i32 %91, 1
  %93 = add nuw i32 %90, %92
  %94 = lshr i32 %93, 13
  %95 = or i32 %94, %70
  %96 = trunc i32 %95 to i16
  br label %153

97:                                               ; preds = %78
  %98 = add i32 %68, 134221823
  %99 = lshr i32 %68, 13
  %100 = and i32 %99, 1
  %101 = add i32 %98, %100
  %102 = lshr i32 %101, 13
  %103 = or i32 %102, %70
  %104 = trunc i32 %103 to i16
  br label %153

105:                                              ; preds = %31
  %106 = icmp slt i32 %50, 2047
  %107 = select i1 %106, i32 %50, i32 2047
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = trunc i32 %109 to i16
  %111 = shl i16 %110, 5
  br i1 %9, label %112, label %153

112:                                              ; preds = %105
  %113 = uitofp i16 %111 to double
  %114 = fdiv double %113, 6.553500e+04
  %115 = fptrunc double %114 to float
  %116 = bitcast float %115 to i32
  %117 = lshr i32 %116, 16
  %118 = and i32 %117, 32768
  %119 = and i32 %116, 2147483647
  %120 = icmp ugt i32 %119, 2139095040
  br i1 %120, label %153, label %121

121:                                              ; preds = %112
  %122 = icmp ugt i32 %119, 1207955455
  br i1 %122, label %123, label %126

123:                                              ; preds = %121
  %124 = trunc i32 %118 to i16
  %125 = or i16 %124, 31744
  br label %153

126:                                              ; preds = %121
  %127 = icmp ult i32 %119, 947912704
  br i1 %127, label %128, label %145

128:                                              ; preds = %126
  %129 = icmp ugt i32 %119, 754974719
  br i1 %129, label %130, label %136

130:                                              ; preds = %128
  %131 = lshr i32 %119, 23
  %132 = sub nuw nsw i32 113, %131
  %133 = and i32 %116, 8388607
  %134 = or i32 %133, 8388608
  %135 = lshr i32 %134, %132
  br label %136

136:                                              ; preds = %130, %128
  %137 = phi i32 [ %135, %130 ], [ 0, %128 ]
  %138 = add nuw i32 %137, 4095
  %139 = lshr i32 %137, 13
  %140 = and i32 %139, 1
  %141 = add nuw i32 %138, %140
  %142 = lshr i32 %141, 13
  %143 = or i32 %142, %118
  %144 = trunc i32 %143 to i16
  br label %153

145:                                              ; preds = %126
  %146 = add i32 %116, 134221823
  %147 = lshr i32 %116, 13
  %148 = and i32 %147, 1
  %149 = add i32 %146, %148
  %150 = lshr i32 %149, 13
  %151 = or i32 %150, %118
  %152 = trunc i32 %151 to i16
  br label %153

153:                                              ; preds = %145, %136, %123, %112, %97, %88, %75, %65, %105, %51
  %154 = phi i16 [ %57, %51 ], [ %111, %105 ], [ %77, %75 ], [ %96, %88 ], [ %104, %97 ], [ 32767, %65 ], [ %125, %123 ], [ %144, %136 ], [ %152, %145 ], [ 32767, %112 ]
  store i16 %154, i16* %34, align 2
  %155 = add nuw nsw i64 %32, 1
  %156 = icmp ult i64 %155, 4
  %157 = add nuw i64 %155, %2
  %158 = icmp ult i64 %157, %4
  %159 = and i1 %156, %158
  br i1 %159, label %31, label %25
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
