; ModuleID = 'gen/third_party/blink/renderer/bindings/modules/v8/v8_address_errors.cc'
source_filename = "gen/third_party/blink/renderer/bindings/modules/v8/v8_address_errors.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.76", i32, [4 x i8], %"class.std::__1::unique_ptr.212", %"class.std::__1::unique_ptr.212", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.222", %"class.std::__1::unique_ptr.228", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.240", %"class.std::__1::unique_ptr.246", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.253", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.162", %"class.std::__1::unique_ptr.169", %"class.std::__1::unique_ptr.192", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.112" = type { %"struct.std::__1::__atomic_base.113" }
%"struct.std::__1::__atomic_base.113" = type { %"struct.std::__1::__atomic_base.114" }
%"struct.std::__1::__atomic_base.114" = type { %"struct.std::__1::__cxx_atomic_impl.115" }
%"struct.std::__1::__cxx_atomic_impl.115" = type { %"struct.std::__1::__cxx_atomic_base_impl.116" }
%"struct.std::__1::__cxx_atomic_base_impl.116" = type { i64 }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::Worklist.123"* }
%"class.blink::Worklist.123" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::Worklist.130"* }
%"class.blink::Worklist.130" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::Worklist.137"* }
%"class.blink::Worklist.137" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::Worklist.144"* }
%"class.blink::Worklist.144" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::Worklist.151"* }
%"class.blink::Worklist.151" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::Worklist.158"* }
%"class.blink::Worklist.158" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.blink::Worklist.165"* }
%"class.blink::Worklist.165" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.172", %"class.std::__1::__compressed_pair.179", %"class.std::__1::__compressed_pair.184", %"class.std::__1::__compressed_pair.186", [4 x i8] }>
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174", %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { i64 }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { float }
%"class.std::__1::unique_ptr.192" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.195", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.204" }
%"class.WTF::Vector.204" = type { %"class.WTF::VectorBuffer.205" }
%"class.WTF::VectorBuffer.205" = type { %"class.WTF::VectorBufferBase.206" }
%"class.WTF::VectorBufferBase.206" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.220" }
%"class.WTF::VectorBuffer.220" = type { %"class.WTF::VectorBufferBase.221" }
%"class.WTF::VectorBufferBase.221" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.234" }
%"class.std::__1::unique_ptr.234" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.123"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.130"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.137"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.144"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.151"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.284" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.240" = type { %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.246" = type { %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.252 }
%class.scoped_refptr.252 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.253" = type { %"struct.std::__1::__atomic_base.254" }
%"struct.std::__1::__atomic_base.254" = type { %"struct.std::__1::__cxx_atomic_impl.255" }
%"struct.std::__1::__cxx_atomic_impl.255" = type { %"struct.std::__1::__cxx_atomic_base_impl.256" }
%"struct.std::__1::__cxx_atomic_base_impl.256" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::AddressErrors" = type { %"class.blink::IDLDictionaryBase", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.23", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.70", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.257", %"class.std::__1::unique_ptr.262", %"class.blink::Persistent.268", %"class.blink::Persistent.272", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.7", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.17", i32, i32 }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.23" = type { %"class.WTF::HashTable.24" }
%"class.WTF::HashTable.24" = type <{ %"struct.WTF::KeyValuePair.27"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.27" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.36", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.31", i8* }
%"class.WTF::HashMap.31" = type { %"class.WTF::HashTable.32" }
%"class.WTF::HashTable.32" = type <{ %"struct.WTF::KeyValuePair.35"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.35" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.36" = type { %"class.v8::PersistentValueMapBase.37" }
%"class.v8::PersistentValueMapBase.37" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.38", i8* }
%"class.WTF::HashMap.38" = type { %"class.WTF::HashTable.39" }
%"class.WTF::HashTable.39" = type <{ %"struct.WTF::KeyValuePair.42"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.42" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.43" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.54", %"class.WTF::Vector.60", i8, i32 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.60" = type { %"class.WTF::VectorBuffer.61" }
%"class.WTF::VectorBuffer.61" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.291, %"class.blink::Member.310", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.291 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.292", i32, i32, %"class.blink::Persistent.294" }
%"class.WTF::RefCounted.292" = type { %"class.base::RefCounted.293" }
%"class.base::RefCounted.293" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.294" = type { %"class.blink::PersistentBase.295" }
%"class.blink::PersistentBase.295" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.300" }
%"class.WTF::HashMap.300" = type { %"class.WTF::HashTable.301" }
%"class.WTF::HashTable.301" = type <{ %"struct.WTF::KeyValuePair.303"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.303" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.307" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.304" }
%"class.blink::MemberBase.304" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.307" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.307" = type { %"class.v8::TracedReference.308" }
%"class.v8::TracedReference.308" = type { %"class.v8::BasicTracedReference.309" }
%"class.v8::BasicTracedReference.309" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.310" = type { %"class.blink::MemberBase.311" }
%"class.blink::MemberBase.311" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.257" = type { %"class.WTF::VectorBuffer.258" }
%"class.WTF::VectorBuffer.258" = type { %"class.WTF::VectorBufferBase.259" }
%"class.WTF::VectorBufferBase.259" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.262" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.268" = type { %"class.blink::PersistentBase.269" }
%"class.blink::PersistentBase.269" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.272" = type { %"class.blink::PersistentBase.273" }
%"class.blink::PersistentBase.273" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.278" }
%"class.WTF::Vector.278" = type { %"class.WTF::VectorBuffer.279" }
%"class.WTF::VectorBuffer.279" = type { %"class.WTF::VectorBufferBase.280" }
%"class.WTF::VectorBufferBase.280" = type { %"struct.std::__1::pair.281"*, i32, i32 }
%"struct.std::__1::pair.281" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.282" }
%"class.blink::MemberBase.282" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.312" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::String" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.v8::Int32" = type { i8 }

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@_ZZN5blinkL26eternalV8AddressErrorsKeysEPN2v87IsolateEE5kKeys = internal constant [10 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0)], align 16
@.str.1 = private unnamed_addr constant [12 x i8] c"addressLine\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"city\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"country\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"dependentLocality\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"organization\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"phone\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"postalCode\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"recipient\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"region\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"sortingCode\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 10, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZZN5blinkL26eternalV8AddressErrorsKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.12 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.13 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15V8AddressErrors6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_13AddressErrorsERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::AddressErrors"* nocapture, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.blink::V8StringResource", align 8
  %7 = alloca %"class.blink::V8StringResource", align 8
  %8 = alloca %"class.blink::V8StringResource", align 8
  %9 = alloca %"class.blink::V8StringResource", align 8
  %10 = alloca %"class.blink::V8StringResource", align 8
  %11 = alloca %"class.blink::V8StringResource", align 8
  %12 = alloca %"class.blink::V8StringResource", align 8
  %13 = alloca %"class.blink::V8StringResource", align 8
  %14 = alloca %"class.blink::V8StringResource", align 8
  %15 = alloca %"class.blink::V8StringResource", align 8
  %16 = icmp eq %"class.v8::Value"* %1, null
  br i1 %16, label %1790, label %17

17:                                               ; preds = %4
  %18 = bitcast %"class.v8::Value"* %1 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 3
  %21 = icmp eq i64 %20, 1
  br i1 %21, label %22, label %38

22:                                               ; preds = %17
  %23 = add i64 %19, -1
  %24 = inttoptr i64 %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = and i64 %19, -4294967296
  %27 = zext i32 %25 to i64
  %28 = or i64 %26, %27
  %29 = add i64 %28, 7
  %30 = inttoptr i64 %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = icmp eq i16 %31, 67
  br i1 %32, label %33, label %38

33:                                               ; preds = %22
  %34 = add i64 %19, 23
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = ashr i32 %36, 1
  switch i32 %37, label %38 [
    i32 5, label %1790
    i32 3, label %1790
  ]

38:                                               ; preds = %33, %22, %17
  %39 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #7
  br i1 %39, label %41, label %40

40:                                               ; preds = %38
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #7
  br label %1790

41:                                               ; preds = %38
  %42 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %43 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %44 = add i64 %43, 8
  %45 = inttoptr i64 %44 to %"class.blink::V8PerIsolateData"**
  %46 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %45, align 8
  %47 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %46, i8* bitcast ([10 x i8*]* @_ZZN5blinkL26eternalV8AddressErrorsKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.312"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.312"*)) #7
  %48 = extractvalue { i64, %"class.v8::Eternal"* } %47, 1
  %49 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %49) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %0) #7
  %50 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %51 = bitcast %"class.v8::Eternal"* %48 to %"class.v8::Value"**
  %52 = load %"class.v8::Value"*, %"class.v8::Value"** %51, align 8
  %53 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %52) #7
  %54 = icmp eq %"class.v8::Value"* %53, null
  br i1 %54, label %55, label %61

55:                                               ; preds = %41
  %56 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %57 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %58 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %57, align 8
  %59 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %58, i64 5
  %60 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %59, align 8
  call void %60(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %56) #7
  br label %1789

61:                                               ; preds = %41
  %62 = bitcast %"class.v8::Value"* %53 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = and i64 %63, 3
  %65 = icmp eq i64 %64, 1
  br i1 %65, label %66, label %83

66:                                               ; preds = %61
  %67 = add i64 %63, -1
  %68 = inttoptr i64 %67 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = and i64 %63, -4294967296
  %71 = zext i32 %69 to i64
  %72 = or i64 %70, %71
  %73 = add i64 %72, 7
  %74 = inttoptr i64 %73 to i16*
  %75 = load i16, i16* %74, align 2
  %76 = icmp eq i16 %75, 67
  br i1 %76, label %77, label %83

77:                                               ; preds = %66
  %78 = add i64 %63, 23
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = and i32 %80, -2
  %82 = icmp eq i32 %81, 10
  br i1 %82, label %223, label %83

83:                                               ; preds = %66, %61, %77
  %84 = bitcast %"class.blink::V8StringResource"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %84) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %84, i8 -86, i64 152, i1 false)
  %85 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %53, %"class.v8::Value"** %85, align 8
  %86 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 1
  store i32 0, i32* %86, align 8
  %87 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %87, align 8
  %88 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1
  %89 = bitcast %"class.std::__1::unique_ptr"* %88 to i64*
  store i64 0, i64* %89, align 8
  %90 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %6, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %90, label %91, label %201

91:                                               ; preds = %83
  %92 = load %"class.v8::Value"*, %"class.v8::Value"** %85, align 8
  %93 = icmp eq %"class.v8::Value"* %92, null
  br i1 %93, label %94, label %118, !prof !2

94:                                               ; preds = %91
  %95 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %96 = icmp eq %"class.WTF::StringImpl"* %95, null
  br i1 %96, label %97, label %99

97:                                               ; preds = %94
  %98 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 1
  br label %143

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = and i32 %101, 2
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %116

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i33
  %108 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %107, i33 1) #7
  %109 = extractvalue { i33, i1 } %108, 1
  %110 = extractvalue { i33, i1 } %108, 0
  %111 = icmp slt i33 %110, 0
  %112 = or i1 %109, %111
  br i1 %112, label %113, label %114, !prof !2

113:                                              ; preds = %104
  call void @llvm.trap() #7
  unreachable

114:                                              ; preds = %104
  %115 = trunc i33 %110 to i32
  store i32 %115, i32* %105, align 4
  br label %116

116:                                              ; preds = %99, %114
  %117 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 1
  br label %124

118:                                              ; preds = %91
  %119 = bitcast %"class.v8::Value"* %92 to %"class.v8::String"*
  %120 = load i32, i32* %86, align 8
  %121 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %119, i32 %120) #7
  %122 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 1
  %123 = icmp eq %"class.WTF::StringImpl"* %121, null
  br i1 %123, label %143, label %124

124:                                              ; preds = %116, %118
  %125 = phi %"class.WTF::String"* [ %117, %116 ], [ %122, %118 ]
  %126 = phi %"class.WTF::StringImpl"* [ %95, %116 ], [ %121, %118 ]
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = and i32 %128, 2
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %143

131:                                              ; preds = %124
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  %134 = zext i32 %133 to i33
  %135 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %134, i33 1) #7
  %136 = extractvalue { i33, i1 } %135, 1
  %137 = extractvalue { i33, i1 } %135, 0
  %138 = icmp slt i33 %137, 0
  %139 = or i1 %136, %138
  br i1 %139, label %140, label %141, !prof !2

140:                                              ; preds = %131
  call void @llvm.trap() #7
  unreachable

141:                                              ; preds = %131
  %142 = trunc i33 %137 to i32
  store i32 %142, i32* %132, align 4
  br label %143

143:                                              ; preds = %97, %141, %124, %118
  %144 = phi i1 [ false, %141 ], [ false, %124 ], [ true, %118 ], [ true, %97 ]
  %145 = phi %"class.WTF::String"* [ %125, %141 ], [ %125, %124 ], [ %122, %118 ], [ %98, %97 ]
  %146 = phi %"class.WTF::StringImpl"* [ %126, %141 ], [ %126, %124 ], [ null, %118 ], [ null, %97 ]
  %147 = ptrtoint %"class.WTF::StringImpl"* %146 to i64
  %148 = bitcast %"class.WTF::String"* %145 to i64*
  %149 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %145, i64 0, i32 0, i32 0
  %150 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %149, align 8
  store i64 %147, i64* %148, align 8
  %151 = icmp eq %"class.WTF::StringImpl"* %150, null
  br i1 %151, label %165, label %152

152:                                              ; preds = %143
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %150, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %154 = load atomic i32, i32* %153 monotonic, align 4
  %155 = and i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %150, i64 0, i32 0
  %158 = load i32, i32* %157, align 4
  br i1 %156, label %159, label %161

159:                                              ; preds = %152
  %160 = add i32 %158, -1
  store i32 %160, i32* %157, align 4
  br label %161

161:                                              ; preds = %159, %152
  %162 = phi i32 [ %160, %159 ], [ %158, %152 ]
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %161
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %150) #7
  br label %165

165:                                              ; preds = %143, %161, %164
  br i1 %144, label %179, label %166

166:                                              ; preds = %165
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %168 = load atomic i32, i32* %167 monotonic, align 4
  %169 = and i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 0
  %172 = load i32, i32* %171, align 4
  br i1 %170, label %173, label %175

173:                                              ; preds = %166
  %174 = add i32 %172, -1
  store i32 %174, i32* %171, align 4
  br label %175

175:                                              ; preds = %173, %166
  %176 = phi i32 [ %174, %173 ], [ %172, %166 ]
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %175
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %146) #7
  br label %179

179:                                              ; preds = %165, %175, %178
  %180 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  store i8* null, i8** %180, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %184, label %183

183:                                              ; preds = %179
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %181) #7
  br label %184

184:                                              ; preds = %183, %179
  %185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %185, null
  br i1 %186, label %200, label %187

187:                                              ; preds = %184
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 0
  %193 = load i32, i32* %192, align 4
  br i1 %191, label %194, label %196

194:                                              ; preds = %187
  %195 = add i32 %193, -1
  store i32 %195, i32* %192, align 4
  br label %196

196:                                              ; preds = %194, %187
  %197 = phi i32 [ %195, %194 ], [ %193, %187 ]
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %200

199:                                              ; preds = %196
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %185) #7
  br label %200

200:                                              ; preds = %184, %196, %199
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %84) #7
  br label %223

201:                                              ; preds = %83
  %202 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %203 = load i8*, i8** %202, align 8
  store i8* null, i8** %202, align 8
  %204 = icmp eq i8* %203, null
  br i1 %204, label %206, label %205

205:                                              ; preds = %201
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %203) #7
  br label %206

206:                                              ; preds = %205, %201
  %207 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %208 = icmp eq %"class.WTF::StringImpl"* %207, null
  br i1 %208, label %222, label %209

209:                                              ; preds = %206
  %210 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %211 = load atomic i32, i32* %210 monotonic, align 4
  %212 = and i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 0
  %215 = load i32, i32* %214, align 4
  br i1 %213, label %216, label %218

216:                                              ; preds = %209
  %217 = add i32 %215, -1
  store i32 %217, i32* %214, align 4
  br label %218

218:                                              ; preds = %216, %209
  %219 = phi i32 [ %217, %216 ], [ %215, %209 ]
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %221, label %222

221:                                              ; preds = %218
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %207) #7
  br label %222

222:                                              ; preds = %206, %218, %221
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %84) #7
  br label %1789

223:                                              ; preds = %200, %77
  %224 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 1, i32 0
  %225 = bitcast %"class.v8::Name"** %224 to %"class.v8::Value"**
  %226 = load %"class.v8::Value"*, %"class.v8::Value"** %225, align 8
  %227 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %226) #7
  %228 = icmp eq %"class.v8::Value"* %227, null
  br i1 %228, label %229, label %235

229:                                              ; preds = %223
  %230 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %231 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %232 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %231, align 8
  %233 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %232, i64 5
  %234 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %233, align 8
  call void %234(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %230) #7
  br label %1789

235:                                              ; preds = %223
  %236 = bitcast %"class.v8::Value"* %227 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = and i64 %237, 3
  %239 = icmp eq i64 %238, 1
  br i1 %239, label %240, label %257

240:                                              ; preds = %235
  %241 = add i64 %237, -1
  %242 = inttoptr i64 %241 to i32*
  %243 = load i32, i32* %242, align 4
  %244 = and i64 %237, -4294967296
  %245 = zext i32 %243 to i64
  %246 = or i64 %244, %245
  %247 = add i64 %246, 7
  %248 = inttoptr i64 %247 to i16*
  %249 = load i16, i16* %248, align 2
  %250 = icmp eq i16 %249, 67
  br i1 %250, label %251, label %257

251:                                              ; preds = %240
  %252 = add i64 %237, 23
  %253 = inttoptr i64 %252 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = and i32 %254, -2
  %256 = icmp eq i32 %255, 10
  br i1 %256, label %397, label %257

257:                                              ; preds = %240, %235, %251
  %258 = bitcast %"class.blink::V8StringResource"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %258) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %258, i8 -86, i64 152, i1 false)
  %259 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %227, %"class.v8::Value"** %259, align 8
  %260 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 1
  store i32 0, i32* %260, align 8
  %261 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %261, align 8
  %262 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1
  %263 = bitcast %"class.std::__1::unique_ptr"* %262 to i64*
  store i64 0, i64* %263, align 8
  %264 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %7, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %264, label %265, label %375

265:                                              ; preds = %257
  %266 = load %"class.v8::Value"*, %"class.v8::Value"** %259, align 8
  %267 = icmp eq %"class.v8::Value"* %266, null
  br i1 %267, label %268, label %292, !prof !2

268:                                              ; preds = %265
  %269 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %261, align 8
  %270 = icmp eq %"class.WTF::StringImpl"* %269, null
  br i1 %270, label %271, label %273

271:                                              ; preds = %268
  %272 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 2
  br label %317

273:                                              ; preds = %268
  %274 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %275 = load atomic i32, i32* %274 monotonic, align 4
  %276 = and i32 %275, 2
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %290

278:                                              ; preds = %273
  %279 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 0
  %280 = load i32, i32* %279, align 4
  %281 = zext i32 %280 to i33
  %282 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %281, i33 1) #7
  %283 = extractvalue { i33, i1 } %282, 1
  %284 = extractvalue { i33, i1 } %282, 0
  %285 = icmp slt i33 %284, 0
  %286 = or i1 %283, %285
  br i1 %286, label %287, label %288, !prof !2

287:                                              ; preds = %278
  call void @llvm.trap() #7
  unreachable

288:                                              ; preds = %278
  %289 = trunc i33 %284 to i32
  store i32 %289, i32* %279, align 4
  br label %290

290:                                              ; preds = %273, %288
  %291 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 2
  br label %298

292:                                              ; preds = %265
  %293 = bitcast %"class.v8::Value"* %266 to %"class.v8::String"*
  %294 = load i32, i32* %260, align 8
  %295 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %293, i32 %294) #7
  %296 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 2
  %297 = icmp eq %"class.WTF::StringImpl"* %295, null
  br i1 %297, label %317, label %298

298:                                              ; preds = %290, %292
  %299 = phi %"class.WTF::String"* [ %291, %290 ], [ %296, %292 ]
  %300 = phi %"class.WTF::StringImpl"* [ %269, %290 ], [ %295, %292 ]
  %301 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %300, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %302 = load atomic i32, i32* %301 monotonic, align 4
  %303 = and i32 %302, 2
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %317

305:                                              ; preds = %298
  %306 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %300, i64 0, i32 0
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i33
  %309 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %308, i33 1) #7
  %310 = extractvalue { i33, i1 } %309, 1
  %311 = extractvalue { i33, i1 } %309, 0
  %312 = icmp slt i33 %311, 0
  %313 = or i1 %310, %312
  br i1 %313, label %314, label %315, !prof !2

314:                                              ; preds = %305
  call void @llvm.trap() #7
  unreachable

315:                                              ; preds = %305
  %316 = trunc i33 %311 to i32
  store i32 %316, i32* %306, align 4
  br label %317

317:                                              ; preds = %271, %315, %298, %292
  %318 = phi i1 [ false, %315 ], [ false, %298 ], [ true, %292 ], [ true, %271 ]
  %319 = phi %"class.WTF::String"* [ %299, %315 ], [ %299, %298 ], [ %296, %292 ], [ %272, %271 ]
  %320 = phi %"class.WTF::StringImpl"* [ %300, %315 ], [ %300, %298 ], [ null, %292 ], [ null, %271 ]
  %321 = ptrtoint %"class.WTF::StringImpl"* %320 to i64
  %322 = bitcast %"class.WTF::String"* %319 to i64*
  %323 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %319, i64 0, i32 0, i32 0
  %324 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %323, align 8
  store i64 %321, i64* %322, align 8
  %325 = icmp eq %"class.WTF::StringImpl"* %324, null
  br i1 %325, label %339, label %326

326:                                              ; preds = %317
  %327 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %324, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %328 = load atomic i32, i32* %327 monotonic, align 4
  %329 = and i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %324, i64 0, i32 0
  %332 = load i32, i32* %331, align 4
  br i1 %330, label %333, label %335

333:                                              ; preds = %326
  %334 = add i32 %332, -1
  store i32 %334, i32* %331, align 4
  br label %335

335:                                              ; preds = %333, %326
  %336 = phi i32 [ %334, %333 ], [ %332, %326 ]
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %338, label %339

338:                                              ; preds = %335
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %324) #7
  br label %339

339:                                              ; preds = %317, %335, %338
  br i1 %318, label %353, label %340

340:                                              ; preds = %339
  %341 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %320, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %342 = load atomic i32, i32* %341 monotonic, align 4
  %343 = and i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %320, i64 0, i32 0
  %346 = load i32, i32* %345, align 4
  br i1 %344, label %347, label %349

347:                                              ; preds = %340
  %348 = add i32 %346, -1
  store i32 %348, i32* %345, align 4
  br label %349

349:                                              ; preds = %347, %340
  %350 = phi i32 [ %348, %347 ], [ %346, %340 ]
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %352, label %353

352:                                              ; preds = %349
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %320) #7
  br label %353

353:                                              ; preds = %339, %349, %352
  %354 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %355 = load i8*, i8** %354, align 8
  store i8* null, i8** %354, align 8
  %356 = icmp eq i8* %355, null
  br i1 %356, label %358, label %357

357:                                              ; preds = %353
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %355) #7
  br label %358

358:                                              ; preds = %357, %353
  %359 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %261, align 8
  %360 = icmp eq %"class.WTF::StringImpl"* %359, null
  br i1 %360, label %374, label %361

361:                                              ; preds = %358
  %362 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %363 = load atomic i32, i32* %362 monotonic, align 4
  %364 = and i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 0
  %367 = load i32, i32* %366, align 4
  br i1 %365, label %368, label %370

368:                                              ; preds = %361
  %369 = add i32 %367, -1
  store i32 %369, i32* %366, align 4
  br label %370

370:                                              ; preds = %368, %361
  %371 = phi i32 [ %369, %368 ], [ %367, %361 ]
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %373, label %374

373:                                              ; preds = %370
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %359) #7
  br label %374

374:                                              ; preds = %358, %370, %373
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %258) #7
  br label %397

375:                                              ; preds = %257
  %376 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %377 = load i8*, i8** %376, align 8
  store i8* null, i8** %376, align 8
  %378 = icmp eq i8* %377, null
  br i1 %378, label %380, label %379

379:                                              ; preds = %375
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %377) #7
  br label %380

380:                                              ; preds = %379, %375
  %381 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %261, align 8
  %382 = icmp eq %"class.WTF::StringImpl"* %381, null
  br i1 %382, label %396, label %383

383:                                              ; preds = %380
  %384 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %381, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %385 = load atomic i32, i32* %384 monotonic, align 4
  %386 = and i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %381, i64 0, i32 0
  %389 = load i32, i32* %388, align 4
  br i1 %387, label %390, label %392

390:                                              ; preds = %383
  %391 = add i32 %389, -1
  store i32 %391, i32* %388, align 4
  br label %392

392:                                              ; preds = %390, %383
  %393 = phi i32 [ %391, %390 ], [ %389, %383 ]
  %394 = icmp eq i32 %393, 0
  br i1 %394, label %395, label %396

395:                                              ; preds = %392
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %381) #7
  br label %396

396:                                              ; preds = %380, %392, %395
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %258) #7
  br label %1789

397:                                              ; preds = %374, %251
  %398 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 2, i32 0
  %399 = bitcast %"class.v8::Name"** %398 to %"class.v8::Value"**
  %400 = load %"class.v8::Value"*, %"class.v8::Value"** %399, align 8
  %401 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %400) #7
  %402 = icmp eq %"class.v8::Value"* %401, null
  br i1 %402, label %403, label %409

403:                                              ; preds = %397
  %404 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %405 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %406 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %405, align 8
  %407 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %406, i64 5
  %408 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %407, align 8
  call void %408(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %404) #7
  br label %1789

409:                                              ; preds = %397
  %410 = bitcast %"class.v8::Value"* %401 to i64*
  %411 = load i64, i64* %410, align 8
  %412 = and i64 %411, 3
  %413 = icmp eq i64 %412, 1
  br i1 %413, label %414, label %431

414:                                              ; preds = %409
  %415 = add i64 %411, -1
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = and i64 %411, -4294967296
  %419 = zext i32 %417 to i64
  %420 = or i64 %418, %419
  %421 = add i64 %420, 7
  %422 = inttoptr i64 %421 to i16*
  %423 = load i16, i16* %422, align 2
  %424 = icmp eq i16 %423, 67
  br i1 %424, label %425, label %431

425:                                              ; preds = %414
  %426 = add i64 %411, 23
  %427 = inttoptr i64 %426 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = and i32 %428, -2
  %430 = icmp eq i32 %429, 10
  br i1 %430, label %571, label %431

431:                                              ; preds = %414, %409, %425
  %432 = bitcast %"class.blink::V8StringResource"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %432) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %432, i8 -86, i64 152, i1 false)
  %433 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %401, %"class.v8::Value"** %433, align 8
  %434 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 1
  store i32 0, i32* %434, align 8
  %435 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %435, align 8
  %436 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1
  %437 = bitcast %"class.std::__1::unique_ptr"* %436 to i64*
  store i64 0, i64* %437, align 8
  %438 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %8, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %438, label %439, label %549

439:                                              ; preds = %431
  %440 = load %"class.v8::Value"*, %"class.v8::Value"** %433, align 8
  %441 = icmp eq %"class.v8::Value"* %440, null
  br i1 %441, label %442, label %466, !prof !2

442:                                              ; preds = %439
  %443 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %435, align 8
  %444 = icmp eq %"class.WTF::StringImpl"* %443, null
  br i1 %444, label %445, label %447

445:                                              ; preds = %442
  %446 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 3
  br label %491

447:                                              ; preds = %442
  %448 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %443, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %449 = load atomic i32, i32* %448 monotonic, align 4
  %450 = and i32 %449, 2
  %451 = icmp eq i32 %450, 0
  br i1 %451, label %452, label %464

452:                                              ; preds = %447
  %453 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %443, i64 0, i32 0
  %454 = load i32, i32* %453, align 4
  %455 = zext i32 %454 to i33
  %456 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %455, i33 1) #7
  %457 = extractvalue { i33, i1 } %456, 1
  %458 = extractvalue { i33, i1 } %456, 0
  %459 = icmp slt i33 %458, 0
  %460 = or i1 %457, %459
  br i1 %460, label %461, label %462, !prof !2

461:                                              ; preds = %452
  call void @llvm.trap() #7
  unreachable

462:                                              ; preds = %452
  %463 = trunc i33 %458 to i32
  store i32 %463, i32* %453, align 4
  br label %464

464:                                              ; preds = %447, %462
  %465 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 3
  br label %472

466:                                              ; preds = %439
  %467 = bitcast %"class.v8::Value"* %440 to %"class.v8::String"*
  %468 = load i32, i32* %434, align 8
  %469 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %467, i32 %468) #7
  %470 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 3
  %471 = icmp eq %"class.WTF::StringImpl"* %469, null
  br i1 %471, label %491, label %472

472:                                              ; preds = %464, %466
  %473 = phi %"class.WTF::String"* [ %465, %464 ], [ %470, %466 ]
  %474 = phi %"class.WTF::StringImpl"* [ %443, %464 ], [ %469, %466 ]
  %475 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %474, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %476 = load atomic i32, i32* %475 monotonic, align 4
  %477 = and i32 %476, 2
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %479, label %491

479:                                              ; preds = %472
  %480 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %474, i64 0, i32 0
  %481 = load i32, i32* %480, align 4
  %482 = zext i32 %481 to i33
  %483 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %482, i33 1) #7
  %484 = extractvalue { i33, i1 } %483, 1
  %485 = extractvalue { i33, i1 } %483, 0
  %486 = icmp slt i33 %485, 0
  %487 = or i1 %484, %486
  br i1 %487, label %488, label %489, !prof !2

488:                                              ; preds = %479
  call void @llvm.trap() #7
  unreachable

489:                                              ; preds = %479
  %490 = trunc i33 %485 to i32
  store i32 %490, i32* %480, align 4
  br label %491

491:                                              ; preds = %445, %489, %472, %466
  %492 = phi i1 [ false, %489 ], [ false, %472 ], [ true, %466 ], [ true, %445 ]
  %493 = phi %"class.WTF::String"* [ %473, %489 ], [ %473, %472 ], [ %470, %466 ], [ %446, %445 ]
  %494 = phi %"class.WTF::StringImpl"* [ %474, %489 ], [ %474, %472 ], [ null, %466 ], [ null, %445 ]
  %495 = ptrtoint %"class.WTF::StringImpl"* %494 to i64
  %496 = bitcast %"class.WTF::String"* %493 to i64*
  %497 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %493, i64 0, i32 0, i32 0
  %498 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %497, align 8
  store i64 %495, i64* %496, align 8
  %499 = icmp eq %"class.WTF::StringImpl"* %498, null
  br i1 %499, label %513, label %500

500:                                              ; preds = %491
  %501 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %498, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %502 = load atomic i32, i32* %501 monotonic, align 4
  %503 = and i32 %502, 2
  %504 = icmp eq i32 %503, 0
  %505 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %498, i64 0, i32 0
  %506 = load i32, i32* %505, align 4
  br i1 %504, label %507, label %509

507:                                              ; preds = %500
  %508 = add i32 %506, -1
  store i32 %508, i32* %505, align 4
  br label %509

509:                                              ; preds = %507, %500
  %510 = phi i32 [ %508, %507 ], [ %506, %500 ]
  %511 = icmp eq i32 %510, 0
  br i1 %511, label %512, label %513

512:                                              ; preds = %509
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %498) #7
  br label %513

513:                                              ; preds = %491, %509, %512
  br i1 %492, label %527, label %514

514:                                              ; preds = %513
  %515 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %494, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %516 = load atomic i32, i32* %515 monotonic, align 4
  %517 = and i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %494, i64 0, i32 0
  %520 = load i32, i32* %519, align 4
  br i1 %518, label %521, label %523

521:                                              ; preds = %514
  %522 = add i32 %520, -1
  store i32 %522, i32* %519, align 4
  br label %523

523:                                              ; preds = %521, %514
  %524 = phi i32 [ %522, %521 ], [ %520, %514 ]
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %526, label %527

526:                                              ; preds = %523
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %494) #7
  br label %527

527:                                              ; preds = %513, %523, %526
  %528 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %529 = load i8*, i8** %528, align 8
  store i8* null, i8** %528, align 8
  %530 = icmp eq i8* %529, null
  br i1 %530, label %532, label %531

531:                                              ; preds = %527
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %529) #7
  br label %532

532:                                              ; preds = %531, %527
  %533 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %435, align 8
  %534 = icmp eq %"class.WTF::StringImpl"* %533, null
  br i1 %534, label %548, label %535

535:                                              ; preds = %532
  %536 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %533, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %537 = load atomic i32, i32* %536 monotonic, align 4
  %538 = and i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %533, i64 0, i32 0
  %541 = load i32, i32* %540, align 4
  br i1 %539, label %542, label %544

542:                                              ; preds = %535
  %543 = add i32 %541, -1
  store i32 %543, i32* %540, align 4
  br label %544

544:                                              ; preds = %542, %535
  %545 = phi i32 [ %543, %542 ], [ %541, %535 ]
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %547, label %548

547:                                              ; preds = %544
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %533) #7
  br label %548

548:                                              ; preds = %532, %544, %547
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %432) #7
  br label %571

549:                                              ; preds = %431
  %550 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %551 = load i8*, i8** %550, align 8
  store i8* null, i8** %550, align 8
  %552 = icmp eq i8* %551, null
  br i1 %552, label %554, label %553

553:                                              ; preds = %549
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %551) #7
  br label %554

554:                                              ; preds = %553, %549
  %555 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %435, align 8
  %556 = icmp eq %"class.WTF::StringImpl"* %555, null
  br i1 %556, label %570, label %557

557:                                              ; preds = %554
  %558 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %555, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %559 = load atomic i32, i32* %558 monotonic, align 4
  %560 = and i32 %559, 2
  %561 = icmp eq i32 %560, 0
  %562 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %555, i64 0, i32 0
  %563 = load i32, i32* %562, align 4
  br i1 %561, label %564, label %566

564:                                              ; preds = %557
  %565 = add i32 %563, -1
  store i32 %565, i32* %562, align 4
  br label %566

566:                                              ; preds = %564, %557
  %567 = phi i32 [ %565, %564 ], [ %563, %557 ]
  %568 = icmp eq i32 %567, 0
  br i1 %568, label %569, label %570

569:                                              ; preds = %566
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %555) #7
  br label %570

570:                                              ; preds = %554, %566, %569
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %432) #7
  br label %1789

571:                                              ; preds = %548, %425
  %572 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 3, i32 0
  %573 = bitcast %"class.v8::Name"** %572 to %"class.v8::Value"**
  %574 = load %"class.v8::Value"*, %"class.v8::Value"** %573, align 8
  %575 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %574) #7
  %576 = icmp eq %"class.v8::Value"* %575, null
  br i1 %576, label %577, label %583

577:                                              ; preds = %571
  %578 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %579 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %580 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %579, align 8
  %581 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %580, i64 5
  %582 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %581, align 8
  call void %582(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %578) #7
  br label %1789

583:                                              ; preds = %571
  %584 = bitcast %"class.v8::Value"* %575 to i64*
  %585 = load i64, i64* %584, align 8
  %586 = and i64 %585, 3
  %587 = icmp eq i64 %586, 1
  br i1 %587, label %588, label %605

588:                                              ; preds = %583
  %589 = add i64 %585, -1
  %590 = inttoptr i64 %589 to i32*
  %591 = load i32, i32* %590, align 4
  %592 = and i64 %585, -4294967296
  %593 = zext i32 %591 to i64
  %594 = or i64 %592, %593
  %595 = add i64 %594, 7
  %596 = inttoptr i64 %595 to i16*
  %597 = load i16, i16* %596, align 2
  %598 = icmp eq i16 %597, 67
  br i1 %598, label %599, label %605

599:                                              ; preds = %588
  %600 = add i64 %585, 23
  %601 = inttoptr i64 %600 to i32*
  %602 = load i32, i32* %601, align 4
  %603 = and i32 %602, -2
  %604 = icmp eq i32 %603, 10
  br i1 %604, label %745, label %605

605:                                              ; preds = %588, %583, %599
  %606 = bitcast %"class.blink::V8StringResource"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %606) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %606, i8 -86, i64 152, i1 false)
  %607 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %575, %"class.v8::Value"** %607, align 8
  %608 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 1
  store i32 0, i32* %608, align 8
  %609 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %609, align 8
  %610 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1
  %611 = bitcast %"class.std::__1::unique_ptr"* %610 to i64*
  store i64 0, i64* %611, align 8
  %612 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %9, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %612, label %613, label %723

613:                                              ; preds = %605
  %614 = load %"class.v8::Value"*, %"class.v8::Value"** %607, align 8
  %615 = icmp eq %"class.v8::Value"* %614, null
  br i1 %615, label %616, label %640, !prof !2

616:                                              ; preds = %613
  %617 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %609, align 8
  %618 = icmp eq %"class.WTF::StringImpl"* %617, null
  br i1 %618, label %619, label %621

619:                                              ; preds = %616
  %620 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 4
  br label %665

621:                                              ; preds = %616
  %622 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %617, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %623 = load atomic i32, i32* %622 monotonic, align 4
  %624 = and i32 %623, 2
  %625 = icmp eq i32 %624, 0
  br i1 %625, label %626, label %638

626:                                              ; preds = %621
  %627 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %617, i64 0, i32 0
  %628 = load i32, i32* %627, align 4
  %629 = zext i32 %628 to i33
  %630 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %629, i33 1) #7
  %631 = extractvalue { i33, i1 } %630, 1
  %632 = extractvalue { i33, i1 } %630, 0
  %633 = icmp slt i33 %632, 0
  %634 = or i1 %631, %633
  br i1 %634, label %635, label %636, !prof !2

635:                                              ; preds = %626
  call void @llvm.trap() #7
  unreachable

636:                                              ; preds = %626
  %637 = trunc i33 %632 to i32
  store i32 %637, i32* %627, align 4
  br label %638

638:                                              ; preds = %621, %636
  %639 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 4
  br label %646

640:                                              ; preds = %613
  %641 = bitcast %"class.v8::Value"* %614 to %"class.v8::String"*
  %642 = load i32, i32* %608, align 8
  %643 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %641, i32 %642) #7
  %644 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 4
  %645 = icmp eq %"class.WTF::StringImpl"* %643, null
  br i1 %645, label %665, label %646

646:                                              ; preds = %638, %640
  %647 = phi %"class.WTF::String"* [ %639, %638 ], [ %644, %640 ]
  %648 = phi %"class.WTF::StringImpl"* [ %617, %638 ], [ %643, %640 ]
  %649 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %648, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %650 = load atomic i32, i32* %649 monotonic, align 4
  %651 = and i32 %650, 2
  %652 = icmp eq i32 %651, 0
  br i1 %652, label %653, label %665

653:                                              ; preds = %646
  %654 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %648, i64 0, i32 0
  %655 = load i32, i32* %654, align 4
  %656 = zext i32 %655 to i33
  %657 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %656, i33 1) #7
  %658 = extractvalue { i33, i1 } %657, 1
  %659 = extractvalue { i33, i1 } %657, 0
  %660 = icmp slt i33 %659, 0
  %661 = or i1 %658, %660
  br i1 %661, label %662, label %663, !prof !2

662:                                              ; preds = %653
  call void @llvm.trap() #7
  unreachable

663:                                              ; preds = %653
  %664 = trunc i33 %659 to i32
  store i32 %664, i32* %654, align 4
  br label %665

665:                                              ; preds = %619, %663, %646, %640
  %666 = phi i1 [ false, %663 ], [ false, %646 ], [ true, %640 ], [ true, %619 ]
  %667 = phi %"class.WTF::String"* [ %647, %663 ], [ %647, %646 ], [ %644, %640 ], [ %620, %619 ]
  %668 = phi %"class.WTF::StringImpl"* [ %648, %663 ], [ %648, %646 ], [ null, %640 ], [ null, %619 ]
  %669 = ptrtoint %"class.WTF::StringImpl"* %668 to i64
  %670 = bitcast %"class.WTF::String"* %667 to i64*
  %671 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %667, i64 0, i32 0, i32 0
  %672 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %671, align 8
  store i64 %669, i64* %670, align 8
  %673 = icmp eq %"class.WTF::StringImpl"* %672, null
  br i1 %673, label %687, label %674

674:                                              ; preds = %665
  %675 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %672, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %676 = load atomic i32, i32* %675 monotonic, align 4
  %677 = and i32 %676, 2
  %678 = icmp eq i32 %677, 0
  %679 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %672, i64 0, i32 0
  %680 = load i32, i32* %679, align 4
  br i1 %678, label %681, label %683

681:                                              ; preds = %674
  %682 = add i32 %680, -1
  store i32 %682, i32* %679, align 4
  br label %683

683:                                              ; preds = %681, %674
  %684 = phi i32 [ %682, %681 ], [ %680, %674 ]
  %685 = icmp eq i32 %684, 0
  br i1 %685, label %686, label %687

686:                                              ; preds = %683
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %672) #7
  br label %687

687:                                              ; preds = %665, %683, %686
  br i1 %666, label %701, label %688

688:                                              ; preds = %687
  %689 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %668, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %690 = load atomic i32, i32* %689 monotonic, align 4
  %691 = and i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %668, i64 0, i32 0
  %694 = load i32, i32* %693, align 4
  br i1 %692, label %695, label %697

695:                                              ; preds = %688
  %696 = add i32 %694, -1
  store i32 %696, i32* %693, align 4
  br label %697

697:                                              ; preds = %695, %688
  %698 = phi i32 [ %696, %695 ], [ %694, %688 ]
  %699 = icmp eq i32 %698, 0
  br i1 %699, label %700, label %701

700:                                              ; preds = %697
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %668) #7
  br label %701

701:                                              ; preds = %687, %697, %700
  %702 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %703 = load i8*, i8** %702, align 8
  store i8* null, i8** %702, align 8
  %704 = icmp eq i8* %703, null
  br i1 %704, label %706, label %705

705:                                              ; preds = %701
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %703) #7
  br label %706

706:                                              ; preds = %705, %701
  %707 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %609, align 8
  %708 = icmp eq %"class.WTF::StringImpl"* %707, null
  br i1 %708, label %722, label %709

709:                                              ; preds = %706
  %710 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %707, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %711 = load atomic i32, i32* %710 monotonic, align 4
  %712 = and i32 %711, 2
  %713 = icmp eq i32 %712, 0
  %714 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %707, i64 0, i32 0
  %715 = load i32, i32* %714, align 4
  br i1 %713, label %716, label %718

716:                                              ; preds = %709
  %717 = add i32 %715, -1
  store i32 %717, i32* %714, align 4
  br label %718

718:                                              ; preds = %716, %709
  %719 = phi i32 [ %717, %716 ], [ %715, %709 ]
  %720 = icmp eq i32 %719, 0
  br i1 %720, label %721, label %722

721:                                              ; preds = %718
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %707) #7
  br label %722

722:                                              ; preds = %706, %718, %721
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %606) #7
  br label %745

723:                                              ; preds = %605
  %724 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %725 = load i8*, i8** %724, align 8
  store i8* null, i8** %724, align 8
  %726 = icmp eq i8* %725, null
  br i1 %726, label %728, label %727

727:                                              ; preds = %723
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %725) #7
  br label %728

728:                                              ; preds = %727, %723
  %729 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %609, align 8
  %730 = icmp eq %"class.WTF::StringImpl"* %729, null
  br i1 %730, label %744, label %731

731:                                              ; preds = %728
  %732 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %729, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %733 = load atomic i32, i32* %732 monotonic, align 4
  %734 = and i32 %733, 2
  %735 = icmp eq i32 %734, 0
  %736 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %729, i64 0, i32 0
  %737 = load i32, i32* %736, align 4
  br i1 %735, label %738, label %740

738:                                              ; preds = %731
  %739 = add i32 %737, -1
  store i32 %739, i32* %736, align 4
  br label %740

740:                                              ; preds = %738, %731
  %741 = phi i32 [ %739, %738 ], [ %737, %731 ]
  %742 = icmp eq i32 %741, 0
  br i1 %742, label %743, label %744

743:                                              ; preds = %740
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %729) #7
  br label %744

744:                                              ; preds = %728, %740, %743
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %606) #7
  br label %1789

745:                                              ; preds = %722, %599
  %746 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 4, i32 0
  %747 = bitcast %"class.v8::Name"** %746 to %"class.v8::Value"**
  %748 = load %"class.v8::Value"*, %"class.v8::Value"** %747, align 8
  %749 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %748) #7
  %750 = icmp eq %"class.v8::Value"* %749, null
  br i1 %750, label %751, label %757

751:                                              ; preds = %745
  %752 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %753 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %754 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %753, align 8
  %755 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %754, i64 5
  %756 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %755, align 8
  call void %756(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %752) #7
  br label %1789

757:                                              ; preds = %745
  %758 = bitcast %"class.v8::Value"* %749 to i64*
  %759 = load i64, i64* %758, align 8
  %760 = and i64 %759, 3
  %761 = icmp eq i64 %760, 1
  br i1 %761, label %762, label %779

762:                                              ; preds = %757
  %763 = add i64 %759, -1
  %764 = inttoptr i64 %763 to i32*
  %765 = load i32, i32* %764, align 4
  %766 = and i64 %759, -4294967296
  %767 = zext i32 %765 to i64
  %768 = or i64 %766, %767
  %769 = add i64 %768, 7
  %770 = inttoptr i64 %769 to i16*
  %771 = load i16, i16* %770, align 2
  %772 = icmp eq i16 %771, 67
  br i1 %772, label %773, label %779

773:                                              ; preds = %762
  %774 = add i64 %759, 23
  %775 = inttoptr i64 %774 to i32*
  %776 = load i32, i32* %775, align 4
  %777 = and i32 %776, -2
  %778 = icmp eq i32 %777, 10
  br i1 %778, label %919, label %779

779:                                              ; preds = %762, %757, %773
  %780 = bitcast %"class.blink::V8StringResource"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %780) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %780, i8 -86, i64 152, i1 false)
  %781 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %749, %"class.v8::Value"** %781, align 8
  %782 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 1
  store i32 0, i32* %782, align 8
  %783 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %783, align 8
  %784 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1
  %785 = bitcast %"class.std::__1::unique_ptr"* %784 to i64*
  store i64 0, i64* %785, align 8
  %786 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %10, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %786, label %787, label %897

787:                                              ; preds = %779
  %788 = load %"class.v8::Value"*, %"class.v8::Value"** %781, align 8
  %789 = icmp eq %"class.v8::Value"* %788, null
  br i1 %789, label %790, label %814, !prof !2

790:                                              ; preds = %787
  %791 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %783, align 8
  %792 = icmp eq %"class.WTF::StringImpl"* %791, null
  br i1 %792, label %793, label %795

793:                                              ; preds = %790
  %794 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 5
  br label %839

795:                                              ; preds = %790
  %796 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %791, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %797 = load atomic i32, i32* %796 monotonic, align 4
  %798 = and i32 %797, 2
  %799 = icmp eq i32 %798, 0
  br i1 %799, label %800, label %812

800:                                              ; preds = %795
  %801 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %791, i64 0, i32 0
  %802 = load i32, i32* %801, align 4
  %803 = zext i32 %802 to i33
  %804 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %803, i33 1) #7
  %805 = extractvalue { i33, i1 } %804, 1
  %806 = extractvalue { i33, i1 } %804, 0
  %807 = icmp slt i33 %806, 0
  %808 = or i1 %805, %807
  br i1 %808, label %809, label %810, !prof !2

809:                                              ; preds = %800
  call void @llvm.trap() #7
  unreachable

810:                                              ; preds = %800
  %811 = trunc i33 %806 to i32
  store i32 %811, i32* %801, align 4
  br label %812

812:                                              ; preds = %795, %810
  %813 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 5
  br label %820

814:                                              ; preds = %787
  %815 = bitcast %"class.v8::Value"* %788 to %"class.v8::String"*
  %816 = load i32, i32* %782, align 8
  %817 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %815, i32 %816) #7
  %818 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 5
  %819 = icmp eq %"class.WTF::StringImpl"* %817, null
  br i1 %819, label %839, label %820

820:                                              ; preds = %812, %814
  %821 = phi %"class.WTF::String"* [ %813, %812 ], [ %818, %814 ]
  %822 = phi %"class.WTF::StringImpl"* [ %791, %812 ], [ %817, %814 ]
  %823 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %822, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %824 = load atomic i32, i32* %823 monotonic, align 4
  %825 = and i32 %824, 2
  %826 = icmp eq i32 %825, 0
  br i1 %826, label %827, label %839

827:                                              ; preds = %820
  %828 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %822, i64 0, i32 0
  %829 = load i32, i32* %828, align 4
  %830 = zext i32 %829 to i33
  %831 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %830, i33 1) #7
  %832 = extractvalue { i33, i1 } %831, 1
  %833 = extractvalue { i33, i1 } %831, 0
  %834 = icmp slt i33 %833, 0
  %835 = or i1 %832, %834
  br i1 %835, label %836, label %837, !prof !2

836:                                              ; preds = %827
  call void @llvm.trap() #7
  unreachable

837:                                              ; preds = %827
  %838 = trunc i33 %833 to i32
  store i32 %838, i32* %828, align 4
  br label %839

839:                                              ; preds = %793, %837, %820, %814
  %840 = phi i1 [ false, %837 ], [ false, %820 ], [ true, %814 ], [ true, %793 ]
  %841 = phi %"class.WTF::String"* [ %821, %837 ], [ %821, %820 ], [ %818, %814 ], [ %794, %793 ]
  %842 = phi %"class.WTF::StringImpl"* [ %822, %837 ], [ %822, %820 ], [ null, %814 ], [ null, %793 ]
  %843 = ptrtoint %"class.WTF::StringImpl"* %842 to i64
  %844 = bitcast %"class.WTF::String"* %841 to i64*
  %845 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %841, i64 0, i32 0, i32 0
  %846 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %845, align 8
  store i64 %843, i64* %844, align 8
  %847 = icmp eq %"class.WTF::StringImpl"* %846, null
  br i1 %847, label %861, label %848

848:                                              ; preds = %839
  %849 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %846, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %850 = load atomic i32, i32* %849 monotonic, align 4
  %851 = and i32 %850, 2
  %852 = icmp eq i32 %851, 0
  %853 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %846, i64 0, i32 0
  %854 = load i32, i32* %853, align 4
  br i1 %852, label %855, label %857

855:                                              ; preds = %848
  %856 = add i32 %854, -1
  store i32 %856, i32* %853, align 4
  br label %857

857:                                              ; preds = %855, %848
  %858 = phi i32 [ %856, %855 ], [ %854, %848 ]
  %859 = icmp eq i32 %858, 0
  br i1 %859, label %860, label %861

860:                                              ; preds = %857
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %846) #7
  br label %861

861:                                              ; preds = %839, %857, %860
  br i1 %840, label %875, label %862

862:                                              ; preds = %861
  %863 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %842, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %864 = load atomic i32, i32* %863 monotonic, align 4
  %865 = and i32 %864, 2
  %866 = icmp eq i32 %865, 0
  %867 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %842, i64 0, i32 0
  %868 = load i32, i32* %867, align 4
  br i1 %866, label %869, label %871

869:                                              ; preds = %862
  %870 = add i32 %868, -1
  store i32 %870, i32* %867, align 4
  br label %871

871:                                              ; preds = %869, %862
  %872 = phi i32 [ %870, %869 ], [ %868, %862 ]
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %874, label %875

874:                                              ; preds = %871
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %842) #7
  br label %875

875:                                              ; preds = %861, %871, %874
  %876 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %877 = load i8*, i8** %876, align 8
  store i8* null, i8** %876, align 8
  %878 = icmp eq i8* %877, null
  br i1 %878, label %880, label %879

879:                                              ; preds = %875
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %877) #7
  br label %880

880:                                              ; preds = %879, %875
  %881 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %783, align 8
  %882 = icmp eq %"class.WTF::StringImpl"* %881, null
  br i1 %882, label %896, label %883

883:                                              ; preds = %880
  %884 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %881, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %885 = load atomic i32, i32* %884 monotonic, align 4
  %886 = and i32 %885, 2
  %887 = icmp eq i32 %886, 0
  %888 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %881, i64 0, i32 0
  %889 = load i32, i32* %888, align 4
  br i1 %887, label %890, label %892

890:                                              ; preds = %883
  %891 = add i32 %889, -1
  store i32 %891, i32* %888, align 4
  br label %892

892:                                              ; preds = %890, %883
  %893 = phi i32 [ %891, %890 ], [ %889, %883 ]
  %894 = icmp eq i32 %893, 0
  br i1 %894, label %895, label %896

895:                                              ; preds = %892
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %881) #7
  br label %896

896:                                              ; preds = %880, %892, %895
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %780) #7
  br label %919

897:                                              ; preds = %779
  %898 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %899 = load i8*, i8** %898, align 8
  store i8* null, i8** %898, align 8
  %900 = icmp eq i8* %899, null
  br i1 %900, label %902, label %901

901:                                              ; preds = %897
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %899) #7
  br label %902

902:                                              ; preds = %901, %897
  %903 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %783, align 8
  %904 = icmp eq %"class.WTF::StringImpl"* %903, null
  br i1 %904, label %918, label %905

905:                                              ; preds = %902
  %906 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %903, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %907 = load atomic i32, i32* %906 monotonic, align 4
  %908 = and i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %903, i64 0, i32 0
  %911 = load i32, i32* %910, align 4
  br i1 %909, label %912, label %914

912:                                              ; preds = %905
  %913 = add i32 %911, -1
  store i32 %913, i32* %910, align 4
  br label %914

914:                                              ; preds = %912, %905
  %915 = phi i32 [ %913, %912 ], [ %911, %905 ]
  %916 = icmp eq i32 %915, 0
  br i1 %916, label %917, label %918

917:                                              ; preds = %914
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %903) #7
  br label %918

918:                                              ; preds = %902, %914, %917
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %780) #7
  br label %1789

919:                                              ; preds = %896, %773
  %920 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 5, i32 0
  %921 = bitcast %"class.v8::Name"** %920 to %"class.v8::Value"**
  %922 = load %"class.v8::Value"*, %"class.v8::Value"** %921, align 8
  %923 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %922) #7
  %924 = icmp eq %"class.v8::Value"* %923, null
  br i1 %924, label %925, label %931

925:                                              ; preds = %919
  %926 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %927 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %928 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %927, align 8
  %929 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %928, i64 5
  %930 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %929, align 8
  call void %930(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %926) #7
  br label %1789

931:                                              ; preds = %919
  %932 = bitcast %"class.v8::Value"* %923 to i64*
  %933 = load i64, i64* %932, align 8
  %934 = and i64 %933, 3
  %935 = icmp eq i64 %934, 1
  br i1 %935, label %936, label %953

936:                                              ; preds = %931
  %937 = add i64 %933, -1
  %938 = inttoptr i64 %937 to i32*
  %939 = load i32, i32* %938, align 4
  %940 = and i64 %933, -4294967296
  %941 = zext i32 %939 to i64
  %942 = or i64 %940, %941
  %943 = add i64 %942, 7
  %944 = inttoptr i64 %943 to i16*
  %945 = load i16, i16* %944, align 2
  %946 = icmp eq i16 %945, 67
  br i1 %946, label %947, label %953

947:                                              ; preds = %936
  %948 = add i64 %933, 23
  %949 = inttoptr i64 %948 to i32*
  %950 = load i32, i32* %949, align 4
  %951 = and i32 %950, -2
  %952 = icmp eq i32 %951, 10
  br i1 %952, label %1093, label %953

953:                                              ; preds = %936, %931, %947
  %954 = bitcast %"class.blink::V8StringResource"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %954) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %954, i8 -86, i64 152, i1 false)
  %955 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %923, %"class.v8::Value"** %955, align 8
  %956 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 1
  store i32 0, i32* %956, align 8
  %957 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %957, align 8
  %958 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1
  %959 = bitcast %"class.std::__1::unique_ptr"* %958 to i64*
  store i64 0, i64* %959, align 8
  %960 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %11, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %960, label %961, label %1071

961:                                              ; preds = %953
  %962 = load %"class.v8::Value"*, %"class.v8::Value"** %955, align 8
  %963 = icmp eq %"class.v8::Value"* %962, null
  br i1 %963, label %964, label %988, !prof !2

964:                                              ; preds = %961
  %965 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %957, align 8
  %966 = icmp eq %"class.WTF::StringImpl"* %965, null
  br i1 %966, label %967, label %969

967:                                              ; preds = %964
  %968 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 6
  br label %1013

969:                                              ; preds = %964
  %970 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %965, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %971 = load atomic i32, i32* %970 monotonic, align 4
  %972 = and i32 %971, 2
  %973 = icmp eq i32 %972, 0
  br i1 %973, label %974, label %986

974:                                              ; preds = %969
  %975 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %965, i64 0, i32 0
  %976 = load i32, i32* %975, align 4
  %977 = zext i32 %976 to i33
  %978 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %977, i33 1) #7
  %979 = extractvalue { i33, i1 } %978, 1
  %980 = extractvalue { i33, i1 } %978, 0
  %981 = icmp slt i33 %980, 0
  %982 = or i1 %979, %981
  br i1 %982, label %983, label %984, !prof !2

983:                                              ; preds = %974
  call void @llvm.trap() #7
  unreachable

984:                                              ; preds = %974
  %985 = trunc i33 %980 to i32
  store i32 %985, i32* %975, align 4
  br label %986

986:                                              ; preds = %969, %984
  %987 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 6
  br label %994

988:                                              ; preds = %961
  %989 = bitcast %"class.v8::Value"* %962 to %"class.v8::String"*
  %990 = load i32, i32* %956, align 8
  %991 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %989, i32 %990) #7
  %992 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 6
  %993 = icmp eq %"class.WTF::StringImpl"* %991, null
  br i1 %993, label %1013, label %994

994:                                              ; preds = %986, %988
  %995 = phi %"class.WTF::String"* [ %987, %986 ], [ %992, %988 ]
  %996 = phi %"class.WTF::StringImpl"* [ %965, %986 ], [ %991, %988 ]
  %997 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %996, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %998 = load atomic i32, i32* %997 monotonic, align 4
  %999 = and i32 %998, 2
  %1000 = icmp eq i32 %999, 0
  br i1 %1000, label %1001, label %1013

1001:                                             ; preds = %994
  %1002 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %996, i64 0, i32 0
  %1003 = load i32, i32* %1002, align 4
  %1004 = zext i32 %1003 to i33
  %1005 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1004, i33 1) #7
  %1006 = extractvalue { i33, i1 } %1005, 1
  %1007 = extractvalue { i33, i1 } %1005, 0
  %1008 = icmp slt i33 %1007, 0
  %1009 = or i1 %1006, %1008
  br i1 %1009, label %1010, label %1011, !prof !2

1010:                                             ; preds = %1001
  call void @llvm.trap() #7
  unreachable

1011:                                             ; preds = %1001
  %1012 = trunc i33 %1007 to i32
  store i32 %1012, i32* %1002, align 4
  br label %1013

1013:                                             ; preds = %967, %1011, %994, %988
  %1014 = phi i1 [ false, %1011 ], [ false, %994 ], [ true, %988 ], [ true, %967 ]
  %1015 = phi %"class.WTF::String"* [ %995, %1011 ], [ %995, %994 ], [ %992, %988 ], [ %968, %967 ]
  %1016 = phi %"class.WTF::StringImpl"* [ %996, %1011 ], [ %996, %994 ], [ null, %988 ], [ null, %967 ]
  %1017 = ptrtoint %"class.WTF::StringImpl"* %1016 to i64
  %1018 = bitcast %"class.WTF::String"* %1015 to i64*
  %1019 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1015, i64 0, i32 0, i32 0
  %1020 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1019, align 8
  store i64 %1017, i64* %1018, align 8
  %1021 = icmp eq %"class.WTF::StringImpl"* %1020, null
  br i1 %1021, label %1035, label %1022

1022:                                             ; preds = %1013
  %1023 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1020, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1024 = load atomic i32, i32* %1023 monotonic, align 4
  %1025 = and i32 %1024, 2
  %1026 = icmp eq i32 %1025, 0
  %1027 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1020, i64 0, i32 0
  %1028 = load i32, i32* %1027, align 4
  br i1 %1026, label %1029, label %1031

1029:                                             ; preds = %1022
  %1030 = add i32 %1028, -1
  store i32 %1030, i32* %1027, align 4
  br label %1031

1031:                                             ; preds = %1029, %1022
  %1032 = phi i32 [ %1030, %1029 ], [ %1028, %1022 ]
  %1033 = icmp eq i32 %1032, 0
  br i1 %1033, label %1034, label %1035

1034:                                             ; preds = %1031
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1020) #7
  br label %1035

1035:                                             ; preds = %1013, %1031, %1034
  br i1 %1014, label %1049, label %1036

1036:                                             ; preds = %1035
  %1037 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1016, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1038 = load atomic i32, i32* %1037 monotonic, align 4
  %1039 = and i32 %1038, 2
  %1040 = icmp eq i32 %1039, 0
  %1041 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1016, i64 0, i32 0
  %1042 = load i32, i32* %1041, align 4
  br i1 %1040, label %1043, label %1045

1043:                                             ; preds = %1036
  %1044 = add i32 %1042, -1
  store i32 %1044, i32* %1041, align 4
  br label %1045

1045:                                             ; preds = %1043, %1036
  %1046 = phi i32 [ %1044, %1043 ], [ %1042, %1036 ]
  %1047 = icmp eq i32 %1046, 0
  br i1 %1047, label %1048, label %1049

1048:                                             ; preds = %1045
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1016) #7
  br label %1049

1049:                                             ; preds = %1035, %1045, %1048
  %1050 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1051 = load i8*, i8** %1050, align 8
  store i8* null, i8** %1050, align 8
  %1052 = icmp eq i8* %1051, null
  br i1 %1052, label %1054, label %1053

1053:                                             ; preds = %1049
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1051) #7
  br label %1054

1054:                                             ; preds = %1053, %1049
  %1055 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %957, align 8
  %1056 = icmp eq %"class.WTF::StringImpl"* %1055, null
  br i1 %1056, label %1070, label %1057

1057:                                             ; preds = %1054
  %1058 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1055, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1059 = load atomic i32, i32* %1058 monotonic, align 4
  %1060 = and i32 %1059, 2
  %1061 = icmp eq i32 %1060, 0
  %1062 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1055, i64 0, i32 0
  %1063 = load i32, i32* %1062, align 4
  br i1 %1061, label %1064, label %1066

1064:                                             ; preds = %1057
  %1065 = add i32 %1063, -1
  store i32 %1065, i32* %1062, align 4
  br label %1066

1066:                                             ; preds = %1064, %1057
  %1067 = phi i32 [ %1065, %1064 ], [ %1063, %1057 ]
  %1068 = icmp eq i32 %1067, 0
  br i1 %1068, label %1069, label %1070

1069:                                             ; preds = %1066
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1055) #7
  br label %1070

1070:                                             ; preds = %1054, %1066, %1069
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %954) #7
  br label %1093

1071:                                             ; preds = %953
  %1072 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1073 = load i8*, i8** %1072, align 8
  store i8* null, i8** %1072, align 8
  %1074 = icmp eq i8* %1073, null
  br i1 %1074, label %1076, label %1075

1075:                                             ; preds = %1071
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1073) #7
  br label %1076

1076:                                             ; preds = %1075, %1071
  %1077 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %957, align 8
  %1078 = icmp eq %"class.WTF::StringImpl"* %1077, null
  br i1 %1078, label %1092, label %1079

1079:                                             ; preds = %1076
  %1080 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1077, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1081 = load atomic i32, i32* %1080 monotonic, align 4
  %1082 = and i32 %1081, 2
  %1083 = icmp eq i32 %1082, 0
  %1084 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1077, i64 0, i32 0
  %1085 = load i32, i32* %1084, align 4
  br i1 %1083, label %1086, label %1088

1086:                                             ; preds = %1079
  %1087 = add i32 %1085, -1
  store i32 %1087, i32* %1084, align 4
  br label %1088

1088:                                             ; preds = %1086, %1079
  %1089 = phi i32 [ %1087, %1086 ], [ %1085, %1079 ]
  %1090 = icmp eq i32 %1089, 0
  br i1 %1090, label %1091, label %1092

1091:                                             ; preds = %1088
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1077) #7
  br label %1092

1092:                                             ; preds = %1076, %1088, %1091
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %954) #7
  br label %1789

1093:                                             ; preds = %1070, %947
  %1094 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 6, i32 0
  %1095 = bitcast %"class.v8::Name"** %1094 to %"class.v8::Value"**
  %1096 = load %"class.v8::Value"*, %"class.v8::Value"** %1095, align 8
  %1097 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %1096) #7
  %1098 = icmp eq %"class.v8::Value"* %1097, null
  br i1 %1098, label %1099, label %1105

1099:                                             ; preds = %1093
  %1100 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1101 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1102 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1101, align 8
  %1103 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1102, i64 5
  %1104 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1103, align 8
  call void %1104(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1100) #7
  br label %1789

1105:                                             ; preds = %1093
  %1106 = bitcast %"class.v8::Value"* %1097 to i64*
  %1107 = load i64, i64* %1106, align 8
  %1108 = and i64 %1107, 3
  %1109 = icmp eq i64 %1108, 1
  br i1 %1109, label %1110, label %1127

1110:                                             ; preds = %1105
  %1111 = add i64 %1107, -1
  %1112 = inttoptr i64 %1111 to i32*
  %1113 = load i32, i32* %1112, align 4
  %1114 = and i64 %1107, -4294967296
  %1115 = zext i32 %1113 to i64
  %1116 = or i64 %1114, %1115
  %1117 = add i64 %1116, 7
  %1118 = inttoptr i64 %1117 to i16*
  %1119 = load i16, i16* %1118, align 2
  %1120 = icmp eq i16 %1119, 67
  br i1 %1120, label %1121, label %1127

1121:                                             ; preds = %1110
  %1122 = add i64 %1107, 23
  %1123 = inttoptr i64 %1122 to i32*
  %1124 = load i32, i32* %1123, align 4
  %1125 = and i32 %1124, -2
  %1126 = icmp eq i32 %1125, 10
  br i1 %1126, label %1267, label %1127

1127:                                             ; preds = %1110, %1105, %1121
  %1128 = bitcast %"class.blink::V8StringResource"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1128) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1128, i8 -86, i64 152, i1 false)
  %1129 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1097, %"class.v8::Value"** %1129, align 8
  %1130 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 1
  store i32 0, i32* %1130, align 8
  %1131 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1131, align 8
  %1132 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1
  %1133 = bitcast %"class.std::__1::unique_ptr"* %1132 to i64*
  store i64 0, i64* %1133, align 8
  %1134 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %12, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1134, label %1135, label %1245

1135:                                             ; preds = %1127
  %1136 = load %"class.v8::Value"*, %"class.v8::Value"** %1129, align 8
  %1137 = icmp eq %"class.v8::Value"* %1136, null
  br i1 %1137, label %1138, label %1162, !prof !2

1138:                                             ; preds = %1135
  %1139 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1131, align 8
  %1140 = icmp eq %"class.WTF::StringImpl"* %1139, null
  br i1 %1140, label %1141, label %1143

1141:                                             ; preds = %1138
  %1142 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 7
  br label %1187

1143:                                             ; preds = %1138
  %1144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1139, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1145 = load atomic i32, i32* %1144 monotonic, align 4
  %1146 = and i32 %1145, 2
  %1147 = icmp eq i32 %1146, 0
  br i1 %1147, label %1148, label %1160

1148:                                             ; preds = %1143
  %1149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1139, i64 0, i32 0
  %1150 = load i32, i32* %1149, align 4
  %1151 = zext i32 %1150 to i33
  %1152 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1151, i33 1) #7
  %1153 = extractvalue { i33, i1 } %1152, 1
  %1154 = extractvalue { i33, i1 } %1152, 0
  %1155 = icmp slt i33 %1154, 0
  %1156 = or i1 %1153, %1155
  br i1 %1156, label %1157, label %1158, !prof !2

1157:                                             ; preds = %1148
  call void @llvm.trap() #7
  unreachable

1158:                                             ; preds = %1148
  %1159 = trunc i33 %1154 to i32
  store i32 %1159, i32* %1149, align 4
  br label %1160

1160:                                             ; preds = %1143, %1158
  %1161 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 7
  br label %1168

1162:                                             ; preds = %1135
  %1163 = bitcast %"class.v8::Value"* %1136 to %"class.v8::String"*
  %1164 = load i32, i32* %1130, align 8
  %1165 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1163, i32 %1164) #7
  %1166 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 7
  %1167 = icmp eq %"class.WTF::StringImpl"* %1165, null
  br i1 %1167, label %1187, label %1168

1168:                                             ; preds = %1160, %1162
  %1169 = phi %"class.WTF::String"* [ %1161, %1160 ], [ %1166, %1162 ]
  %1170 = phi %"class.WTF::StringImpl"* [ %1139, %1160 ], [ %1165, %1162 ]
  %1171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1170, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1172 = load atomic i32, i32* %1171 monotonic, align 4
  %1173 = and i32 %1172, 2
  %1174 = icmp eq i32 %1173, 0
  br i1 %1174, label %1175, label %1187

1175:                                             ; preds = %1168
  %1176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1170, i64 0, i32 0
  %1177 = load i32, i32* %1176, align 4
  %1178 = zext i32 %1177 to i33
  %1179 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1178, i33 1) #7
  %1180 = extractvalue { i33, i1 } %1179, 1
  %1181 = extractvalue { i33, i1 } %1179, 0
  %1182 = icmp slt i33 %1181, 0
  %1183 = or i1 %1180, %1182
  br i1 %1183, label %1184, label %1185, !prof !2

1184:                                             ; preds = %1175
  call void @llvm.trap() #7
  unreachable

1185:                                             ; preds = %1175
  %1186 = trunc i33 %1181 to i32
  store i32 %1186, i32* %1176, align 4
  br label %1187

1187:                                             ; preds = %1141, %1185, %1168, %1162
  %1188 = phi i1 [ false, %1185 ], [ false, %1168 ], [ true, %1162 ], [ true, %1141 ]
  %1189 = phi %"class.WTF::String"* [ %1169, %1185 ], [ %1169, %1168 ], [ %1166, %1162 ], [ %1142, %1141 ]
  %1190 = phi %"class.WTF::StringImpl"* [ %1170, %1185 ], [ %1170, %1168 ], [ null, %1162 ], [ null, %1141 ]
  %1191 = ptrtoint %"class.WTF::StringImpl"* %1190 to i64
  %1192 = bitcast %"class.WTF::String"* %1189 to i64*
  %1193 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1189, i64 0, i32 0, i32 0
  %1194 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1193, align 8
  store i64 %1191, i64* %1192, align 8
  %1195 = icmp eq %"class.WTF::StringImpl"* %1194, null
  br i1 %1195, label %1209, label %1196

1196:                                             ; preds = %1187
  %1197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1194, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1198 = load atomic i32, i32* %1197 monotonic, align 4
  %1199 = and i32 %1198, 2
  %1200 = icmp eq i32 %1199, 0
  %1201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1194, i64 0, i32 0
  %1202 = load i32, i32* %1201, align 4
  br i1 %1200, label %1203, label %1205

1203:                                             ; preds = %1196
  %1204 = add i32 %1202, -1
  store i32 %1204, i32* %1201, align 4
  br label %1205

1205:                                             ; preds = %1203, %1196
  %1206 = phi i32 [ %1204, %1203 ], [ %1202, %1196 ]
  %1207 = icmp eq i32 %1206, 0
  br i1 %1207, label %1208, label %1209

1208:                                             ; preds = %1205
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1194) #7
  br label %1209

1209:                                             ; preds = %1187, %1205, %1208
  br i1 %1188, label %1223, label %1210

1210:                                             ; preds = %1209
  %1211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1190, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1212 = load atomic i32, i32* %1211 monotonic, align 4
  %1213 = and i32 %1212, 2
  %1214 = icmp eq i32 %1213, 0
  %1215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1190, i64 0, i32 0
  %1216 = load i32, i32* %1215, align 4
  br i1 %1214, label %1217, label %1219

1217:                                             ; preds = %1210
  %1218 = add i32 %1216, -1
  store i32 %1218, i32* %1215, align 4
  br label %1219

1219:                                             ; preds = %1217, %1210
  %1220 = phi i32 [ %1218, %1217 ], [ %1216, %1210 ]
  %1221 = icmp eq i32 %1220, 0
  br i1 %1221, label %1222, label %1223

1222:                                             ; preds = %1219
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1190) #7
  br label %1223

1223:                                             ; preds = %1209, %1219, %1222
  %1224 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1225 = load i8*, i8** %1224, align 8
  store i8* null, i8** %1224, align 8
  %1226 = icmp eq i8* %1225, null
  br i1 %1226, label %1228, label %1227

1227:                                             ; preds = %1223
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1225) #7
  br label %1228

1228:                                             ; preds = %1227, %1223
  %1229 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1131, align 8
  %1230 = icmp eq %"class.WTF::StringImpl"* %1229, null
  br i1 %1230, label %1244, label %1231

1231:                                             ; preds = %1228
  %1232 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1229, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1233 = load atomic i32, i32* %1232 monotonic, align 4
  %1234 = and i32 %1233, 2
  %1235 = icmp eq i32 %1234, 0
  %1236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1229, i64 0, i32 0
  %1237 = load i32, i32* %1236, align 4
  br i1 %1235, label %1238, label %1240

1238:                                             ; preds = %1231
  %1239 = add i32 %1237, -1
  store i32 %1239, i32* %1236, align 4
  br label %1240

1240:                                             ; preds = %1238, %1231
  %1241 = phi i32 [ %1239, %1238 ], [ %1237, %1231 ]
  %1242 = icmp eq i32 %1241, 0
  br i1 %1242, label %1243, label %1244

1243:                                             ; preds = %1240
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1229) #7
  br label %1244

1244:                                             ; preds = %1228, %1240, %1243
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1128) #7
  br label %1267

1245:                                             ; preds = %1127
  %1246 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1247 = load i8*, i8** %1246, align 8
  store i8* null, i8** %1246, align 8
  %1248 = icmp eq i8* %1247, null
  br i1 %1248, label %1250, label %1249

1249:                                             ; preds = %1245
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1247) #7
  br label %1250

1250:                                             ; preds = %1249, %1245
  %1251 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1131, align 8
  %1252 = icmp eq %"class.WTF::StringImpl"* %1251, null
  br i1 %1252, label %1266, label %1253

1253:                                             ; preds = %1250
  %1254 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1251, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1255 = load atomic i32, i32* %1254 monotonic, align 4
  %1256 = and i32 %1255, 2
  %1257 = icmp eq i32 %1256, 0
  %1258 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1251, i64 0, i32 0
  %1259 = load i32, i32* %1258, align 4
  br i1 %1257, label %1260, label %1262

1260:                                             ; preds = %1253
  %1261 = add i32 %1259, -1
  store i32 %1261, i32* %1258, align 4
  br label %1262

1262:                                             ; preds = %1260, %1253
  %1263 = phi i32 [ %1261, %1260 ], [ %1259, %1253 ]
  %1264 = icmp eq i32 %1263, 0
  br i1 %1264, label %1265, label %1266

1265:                                             ; preds = %1262
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1251) #7
  br label %1266

1266:                                             ; preds = %1250, %1262, %1265
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1128) #7
  br label %1789

1267:                                             ; preds = %1244, %1121
  %1268 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 7, i32 0
  %1269 = bitcast %"class.v8::Name"** %1268 to %"class.v8::Value"**
  %1270 = load %"class.v8::Value"*, %"class.v8::Value"** %1269, align 8
  %1271 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %1270) #7
  %1272 = icmp eq %"class.v8::Value"* %1271, null
  br i1 %1272, label %1273, label %1279

1273:                                             ; preds = %1267
  %1274 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1275 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1276 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1275, align 8
  %1277 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1276, i64 5
  %1278 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1277, align 8
  call void %1278(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1274) #7
  br label %1789

1279:                                             ; preds = %1267
  %1280 = bitcast %"class.v8::Value"* %1271 to i64*
  %1281 = load i64, i64* %1280, align 8
  %1282 = and i64 %1281, 3
  %1283 = icmp eq i64 %1282, 1
  br i1 %1283, label %1284, label %1301

1284:                                             ; preds = %1279
  %1285 = add i64 %1281, -1
  %1286 = inttoptr i64 %1285 to i32*
  %1287 = load i32, i32* %1286, align 4
  %1288 = and i64 %1281, -4294967296
  %1289 = zext i32 %1287 to i64
  %1290 = or i64 %1288, %1289
  %1291 = add i64 %1290, 7
  %1292 = inttoptr i64 %1291 to i16*
  %1293 = load i16, i16* %1292, align 2
  %1294 = icmp eq i16 %1293, 67
  br i1 %1294, label %1295, label %1301

1295:                                             ; preds = %1284
  %1296 = add i64 %1281, 23
  %1297 = inttoptr i64 %1296 to i32*
  %1298 = load i32, i32* %1297, align 4
  %1299 = and i32 %1298, -2
  %1300 = icmp eq i32 %1299, 10
  br i1 %1300, label %1441, label %1301

1301:                                             ; preds = %1284, %1279, %1295
  %1302 = bitcast %"class.blink::V8StringResource"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1302) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1302, i8 -86, i64 152, i1 false)
  %1303 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1271, %"class.v8::Value"** %1303, align 8
  %1304 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 1
  store i32 0, i32* %1304, align 8
  %1305 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1305, align 8
  %1306 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1
  %1307 = bitcast %"class.std::__1::unique_ptr"* %1306 to i64*
  store i64 0, i64* %1307, align 8
  %1308 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %13, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1308, label %1309, label %1419

1309:                                             ; preds = %1301
  %1310 = load %"class.v8::Value"*, %"class.v8::Value"** %1303, align 8
  %1311 = icmp eq %"class.v8::Value"* %1310, null
  br i1 %1311, label %1312, label %1336, !prof !2

1312:                                             ; preds = %1309
  %1313 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1305, align 8
  %1314 = icmp eq %"class.WTF::StringImpl"* %1313, null
  br i1 %1314, label %1315, label %1317

1315:                                             ; preds = %1312
  %1316 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 8
  br label %1361

1317:                                             ; preds = %1312
  %1318 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1313, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1319 = load atomic i32, i32* %1318 monotonic, align 4
  %1320 = and i32 %1319, 2
  %1321 = icmp eq i32 %1320, 0
  br i1 %1321, label %1322, label %1334

1322:                                             ; preds = %1317
  %1323 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1313, i64 0, i32 0
  %1324 = load i32, i32* %1323, align 4
  %1325 = zext i32 %1324 to i33
  %1326 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1325, i33 1) #7
  %1327 = extractvalue { i33, i1 } %1326, 1
  %1328 = extractvalue { i33, i1 } %1326, 0
  %1329 = icmp slt i33 %1328, 0
  %1330 = or i1 %1327, %1329
  br i1 %1330, label %1331, label %1332, !prof !2

1331:                                             ; preds = %1322
  call void @llvm.trap() #7
  unreachable

1332:                                             ; preds = %1322
  %1333 = trunc i33 %1328 to i32
  store i32 %1333, i32* %1323, align 4
  br label %1334

1334:                                             ; preds = %1317, %1332
  %1335 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 8
  br label %1342

1336:                                             ; preds = %1309
  %1337 = bitcast %"class.v8::Value"* %1310 to %"class.v8::String"*
  %1338 = load i32, i32* %1304, align 8
  %1339 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1337, i32 %1338) #7
  %1340 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 8
  %1341 = icmp eq %"class.WTF::StringImpl"* %1339, null
  br i1 %1341, label %1361, label %1342

1342:                                             ; preds = %1334, %1336
  %1343 = phi %"class.WTF::String"* [ %1335, %1334 ], [ %1340, %1336 ]
  %1344 = phi %"class.WTF::StringImpl"* [ %1313, %1334 ], [ %1339, %1336 ]
  %1345 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1344, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1346 = load atomic i32, i32* %1345 monotonic, align 4
  %1347 = and i32 %1346, 2
  %1348 = icmp eq i32 %1347, 0
  br i1 %1348, label %1349, label %1361

1349:                                             ; preds = %1342
  %1350 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1344, i64 0, i32 0
  %1351 = load i32, i32* %1350, align 4
  %1352 = zext i32 %1351 to i33
  %1353 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1352, i33 1) #7
  %1354 = extractvalue { i33, i1 } %1353, 1
  %1355 = extractvalue { i33, i1 } %1353, 0
  %1356 = icmp slt i33 %1355, 0
  %1357 = or i1 %1354, %1356
  br i1 %1357, label %1358, label %1359, !prof !2

1358:                                             ; preds = %1349
  call void @llvm.trap() #7
  unreachable

1359:                                             ; preds = %1349
  %1360 = trunc i33 %1355 to i32
  store i32 %1360, i32* %1350, align 4
  br label %1361

1361:                                             ; preds = %1315, %1359, %1342, %1336
  %1362 = phi i1 [ false, %1359 ], [ false, %1342 ], [ true, %1336 ], [ true, %1315 ]
  %1363 = phi %"class.WTF::String"* [ %1343, %1359 ], [ %1343, %1342 ], [ %1340, %1336 ], [ %1316, %1315 ]
  %1364 = phi %"class.WTF::StringImpl"* [ %1344, %1359 ], [ %1344, %1342 ], [ null, %1336 ], [ null, %1315 ]
  %1365 = ptrtoint %"class.WTF::StringImpl"* %1364 to i64
  %1366 = bitcast %"class.WTF::String"* %1363 to i64*
  %1367 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1363, i64 0, i32 0, i32 0
  %1368 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1367, align 8
  store i64 %1365, i64* %1366, align 8
  %1369 = icmp eq %"class.WTF::StringImpl"* %1368, null
  br i1 %1369, label %1383, label %1370

1370:                                             ; preds = %1361
  %1371 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1368, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1372 = load atomic i32, i32* %1371 monotonic, align 4
  %1373 = and i32 %1372, 2
  %1374 = icmp eq i32 %1373, 0
  %1375 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1368, i64 0, i32 0
  %1376 = load i32, i32* %1375, align 4
  br i1 %1374, label %1377, label %1379

1377:                                             ; preds = %1370
  %1378 = add i32 %1376, -1
  store i32 %1378, i32* %1375, align 4
  br label %1379

1379:                                             ; preds = %1377, %1370
  %1380 = phi i32 [ %1378, %1377 ], [ %1376, %1370 ]
  %1381 = icmp eq i32 %1380, 0
  br i1 %1381, label %1382, label %1383

1382:                                             ; preds = %1379
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1368) #7
  br label %1383

1383:                                             ; preds = %1361, %1379, %1382
  br i1 %1362, label %1397, label %1384

1384:                                             ; preds = %1383
  %1385 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1364, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1386 = load atomic i32, i32* %1385 monotonic, align 4
  %1387 = and i32 %1386, 2
  %1388 = icmp eq i32 %1387, 0
  %1389 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1364, i64 0, i32 0
  %1390 = load i32, i32* %1389, align 4
  br i1 %1388, label %1391, label %1393

1391:                                             ; preds = %1384
  %1392 = add i32 %1390, -1
  store i32 %1392, i32* %1389, align 4
  br label %1393

1393:                                             ; preds = %1391, %1384
  %1394 = phi i32 [ %1392, %1391 ], [ %1390, %1384 ]
  %1395 = icmp eq i32 %1394, 0
  br i1 %1395, label %1396, label %1397

1396:                                             ; preds = %1393
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1364) #7
  br label %1397

1397:                                             ; preds = %1383, %1393, %1396
  %1398 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1399 = load i8*, i8** %1398, align 8
  store i8* null, i8** %1398, align 8
  %1400 = icmp eq i8* %1399, null
  br i1 %1400, label %1402, label %1401

1401:                                             ; preds = %1397
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1399) #7
  br label %1402

1402:                                             ; preds = %1401, %1397
  %1403 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1305, align 8
  %1404 = icmp eq %"class.WTF::StringImpl"* %1403, null
  br i1 %1404, label %1418, label %1405

1405:                                             ; preds = %1402
  %1406 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1403, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1407 = load atomic i32, i32* %1406 monotonic, align 4
  %1408 = and i32 %1407, 2
  %1409 = icmp eq i32 %1408, 0
  %1410 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1403, i64 0, i32 0
  %1411 = load i32, i32* %1410, align 4
  br i1 %1409, label %1412, label %1414

1412:                                             ; preds = %1405
  %1413 = add i32 %1411, -1
  store i32 %1413, i32* %1410, align 4
  br label %1414

1414:                                             ; preds = %1412, %1405
  %1415 = phi i32 [ %1413, %1412 ], [ %1411, %1405 ]
  %1416 = icmp eq i32 %1415, 0
  br i1 %1416, label %1417, label %1418

1417:                                             ; preds = %1414
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1403) #7
  br label %1418

1418:                                             ; preds = %1402, %1414, %1417
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1302) #7
  br label %1441

1419:                                             ; preds = %1301
  %1420 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1421 = load i8*, i8** %1420, align 8
  store i8* null, i8** %1420, align 8
  %1422 = icmp eq i8* %1421, null
  br i1 %1422, label %1424, label %1423

1423:                                             ; preds = %1419
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1421) #7
  br label %1424

1424:                                             ; preds = %1423, %1419
  %1425 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1305, align 8
  %1426 = icmp eq %"class.WTF::StringImpl"* %1425, null
  br i1 %1426, label %1440, label %1427

1427:                                             ; preds = %1424
  %1428 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1425, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1429 = load atomic i32, i32* %1428 monotonic, align 4
  %1430 = and i32 %1429, 2
  %1431 = icmp eq i32 %1430, 0
  %1432 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1425, i64 0, i32 0
  %1433 = load i32, i32* %1432, align 4
  br i1 %1431, label %1434, label %1436

1434:                                             ; preds = %1427
  %1435 = add i32 %1433, -1
  store i32 %1435, i32* %1432, align 4
  br label %1436

1436:                                             ; preds = %1434, %1427
  %1437 = phi i32 [ %1435, %1434 ], [ %1433, %1427 ]
  %1438 = icmp eq i32 %1437, 0
  br i1 %1438, label %1439, label %1440

1439:                                             ; preds = %1436
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1425) #7
  br label %1440

1440:                                             ; preds = %1424, %1436, %1439
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1302) #7
  br label %1789

1441:                                             ; preds = %1418, %1295
  %1442 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 8, i32 0
  %1443 = bitcast %"class.v8::Name"** %1442 to %"class.v8::Value"**
  %1444 = load %"class.v8::Value"*, %"class.v8::Value"** %1443, align 8
  %1445 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %1444) #7
  %1446 = icmp eq %"class.v8::Value"* %1445, null
  br i1 %1446, label %1447, label %1453

1447:                                             ; preds = %1441
  %1448 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1449 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1450 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1449, align 8
  %1451 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1450, i64 5
  %1452 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1451, align 8
  call void %1452(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1448) #7
  br label %1789

1453:                                             ; preds = %1441
  %1454 = bitcast %"class.v8::Value"* %1445 to i64*
  %1455 = load i64, i64* %1454, align 8
  %1456 = and i64 %1455, 3
  %1457 = icmp eq i64 %1456, 1
  br i1 %1457, label %1458, label %1475

1458:                                             ; preds = %1453
  %1459 = add i64 %1455, -1
  %1460 = inttoptr i64 %1459 to i32*
  %1461 = load i32, i32* %1460, align 4
  %1462 = and i64 %1455, -4294967296
  %1463 = zext i32 %1461 to i64
  %1464 = or i64 %1462, %1463
  %1465 = add i64 %1464, 7
  %1466 = inttoptr i64 %1465 to i16*
  %1467 = load i16, i16* %1466, align 2
  %1468 = icmp eq i16 %1467, 67
  br i1 %1468, label %1469, label %1475

1469:                                             ; preds = %1458
  %1470 = add i64 %1455, 23
  %1471 = inttoptr i64 %1470 to i32*
  %1472 = load i32, i32* %1471, align 4
  %1473 = and i32 %1472, -2
  %1474 = icmp eq i32 %1473, 10
  br i1 %1474, label %1615, label %1475

1475:                                             ; preds = %1458, %1453, %1469
  %1476 = bitcast %"class.blink::V8StringResource"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1476) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1476, i8 -86, i64 152, i1 false)
  %1477 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1445, %"class.v8::Value"** %1477, align 8
  %1478 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 1
  store i32 0, i32* %1478, align 8
  %1479 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1479, align 8
  %1480 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1
  %1481 = bitcast %"class.std::__1::unique_ptr"* %1480 to i64*
  store i64 0, i64* %1481, align 8
  %1482 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %14, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1482, label %1483, label %1593

1483:                                             ; preds = %1475
  %1484 = load %"class.v8::Value"*, %"class.v8::Value"** %1477, align 8
  %1485 = icmp eq %"class.v8::Value"* %1484, null
  br i1 %1485, label %1486, label %1510, !prof !2

1486:                                             ; preds = %1483
  %1487 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1479, align 8
  %1488 = icmp eq %"class.WTF::StringImpl"* %1487, null
  br i1 %1488, label %1489, label %1491

1489:                                             ; preds = %1486
  %1490 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 9
  br label %1535

1491:                                             ; preds = %1486
  %1492 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1487, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1493 = load atomic i32, i32* %1492 monotonic, align 4
  %1494 = and i32 %1493, 2
  %1495 = icmp eq i32 %1494, 0
  br i1 %1495, label %1496, label %1508

1496:                                             ; preds = %1491
  %1497 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1487, i64 0, i32 0
  %1498 = load i32, i32* %1497, align 4
  %1499 = zext i32 %1498 to i33
  %1500 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1499, i33 1) #7
  %1501 = extractvalue { i33, i1 } %1500, 1
  %1502 = extractvalue { i33, i1 } %1500, 0
  %1503 = icmp slt i33 %1502, 0
  %1504 = or i1 %1501, %1503
  br i1 %1504, label %1505, label %1506, !prof !2

1505:                                             ; preds = %1496
  call void @llvm.trap() #7
  unreachable

1506:                                             ; preds = %1496
  %1507 = trunc i33 %1502 to i32
  store i32 %1507, i32* %1497, align 4
  br label %1508

1508:                                             ; preds = %1491, %1506
  %1509 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 9
  br label %1516

1510:                                             ; preds = %1483
  %1511 = bitcast %"class.v8::Value"* %1484 to %"class.v8::String"*
  %1512 = load i32, i32* %1478, align 8
  %1513 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1511, i32 %1512) #7
  %1514 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 9
  %1515 = icmp eq %"class.WTF::StringImpl"* %1513, null
  br i1 %1515, label %1535, label %1516

1516:                                             ; preds = %1508, %1510
  %1517 = phi %"class.WTF::String"* [ %1509, %1508 ], [ %1514, %1510 ]
  %1518 = phi %"class.WTF::StringImpl"* [ %1487, %1508 ], [ %1513, %1510 ]
  %1519 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1518, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1520 = load atomic i32, i32* %1519 monotonic, align 4
  %1521 = and i32 %1520, 2
  %1522 = icmp eq i32 %1521, 0
  br i1 %1522, label %1523, label %1535

1523:                                             ; preds = %1516
  %1524 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1518, i64 0, i32 0
  %1525 = load i32, i32* %1524, align 4
  %1526 = zext i32 %1525 to i33
  %1527 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1526, i33 1) #7
  %1528 = extractvalue { i33, i1 } %1527, 1
  %1529 = extractvalue { i33, i1 } %1527, 0
  %1530 = icmp slt i33 %1529, 0
  %1531 = or i1 %1528, %1530
  br i1 %1531, label %1532, label %1533, !prof !2

1532:                                             ; preds = %1523
  call void @llvm.trap() #7
  unreachable

1533:                                             ; preds = %1523
  %1534 = trunc i33 %1529 to i32
  store i32 %1534, i32* %1524, align 4
  br label %1535

1535:                                             ; preds = %1489, %1533, %1516, %1510
  %1536 = phi i1 [ false, %1533 ], [ false, %1516 ], [ true, %1510 ], [ true, %1489 ]
  %1537 = phi %"class.WTF::String"* [ %1517, %1533 ], [ %1517, %1516 ], [ %1514, %1510 ], [ %1490, %1489 ]
  %1538 = phi %"class.WTF::StringImpl"* [ %1518, %1533 ], [ %1518, %1516 ], [ null, %1510 ], [ null, %1489 ]
  %1539 = ptrtoint %"class.WTF::StringImpl"* %1538 to i64
  %1540 = bitcast %"class.WTF::String"* %1537 to i64*
  %1541 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1537, i64 0, i32 0, i32 0
  %1542 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1541, align 8
  store i64 %1539, i64* %1540, align 8
  %1543 = icmp eq %"class.WTF::StringImpl"* %1542, null
  br i1 %1543, label %1557, label %1544

1544:                                             ; preds = %1535
  %1545 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1542, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1546 = load atomic i32, i32* %1545 monotonic, align 4
  %1547 = and i32 %1546, 2
  %1548 = icmp eq i32 %1547, 0
  %1549 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1542, i64 0, i32 0
  %1550 = load i32, i32* %1549, align 4
  br i1 %1548, label %1551, label %1553

1551:                                             ; preds = %1544
  %1552 = add i32 %1550, -1
  store i32 %1552, i32* %1549, align 4
  br label %1553

1553:                                             ; preds = %1551, %1544
  %1554 = phi i32 [ %1552, %1551 ], [ %1550, %1544 ]
  %1555 = icmp eq i32 %1554, 0
  br i1 %1555, label %1556, label %1557

1556:                                             ; preds = %1553
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1542) #7
  br label %1557

1557:                                             ; preds = %1535, %1553, %1556
  br i1 %1536, label %1571, label %1558

1558:                                             ; preds = %1557
  %1559 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1538, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1560 = load atomic i32, i32* %1559 monotonic, align 4
  %1561 = and i32 %1560, 2
  %1562 = icmp eq i32 %1561, 0
  %1563 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1538, i64 0, i32 0
  %1564 = load i32, i32* %1563, align 4
  br i1 %1562, label %1565, label %1567

1565:                                             ; preds = %1558
  %1566 = add i32 %1564, -1
  store i32 %1566, i32* %1563, align 4
  br label %1567

1567:                                             ; preds = %1565, %1558
  %1568 = phi i32 [ %1566, %1565 ], [ %1564, %1558 ]
  %1569 = icmp eq i32 %1568, 0
  br i1 %1569, label %1570, label %1571

1570:                                             ; preds = %1567
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1538) #7
  br label %1571

1571:                                             ; preds = %1557, %1567, %1570
  %1572 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1573 = load i8*, i8** %1572, align 8
  store i8* null, i8** %1572, align 8
  %1574 = icmp eq i8* %1573, null
  br i1 %1574, label %1576, label %1575

1575:                                             ; preds = %1571
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1573) #7
  br label %1576

1576:                                             ; preds = %1575, %1571
  %1577 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1479, align 8
  %1578 = icmp eq %"class.WTF::StringImpl"* %1577, null
  br i1 %1578, label %1592, label %1579

1579:                                             ; preds = %1576
  %1580 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1577, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1581 = load atomic i32, i32* %1580 monotonic, align 4
  %1582 = and i32 %1581, 2
  %1583 = icmp eq i32 %1582, 0
  %1584 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1577, i64 0, i32 0
  %1585 = load i32, i32* %1584, align 4
  br i1 %1583, label %1586, label %1588

1586:                                             ; preds = %1579
  %1587 = add i32 %1585, -1
  store i32 %1587, i32* %1584, align 4
  br label %1588

1588:                                             ; preds = %1586, %1579
  %1589 = phi i32 [ %1587, %1586 ], [ %1585, %1579 ]
  %1590 = icmp eq i32 %1589, 0
  br i1 %1590, label %1591, label %1592

1591:                                             ; preds = %1588
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1577) #7
  br label %1592

1592:                                             ; preds = %1576, %1588, %1591
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1476) #7
  br label %1615

1593:                                             ; preds = %1475
  %1594 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1595 = load i8*, i8** %1594, align 8
  store i8* null, i8** %1594, align 8
  %1596 = icmp eq i8* %1595, null
  br i1 %1596, label %1598, label %1597

1597:                                             ; preds = %1593
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1595) #7
  br label %1598

1598:                                             ; preds = %1597, %1593
  %1599 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1479, align 8
  %1600 = icmp eq %"class.WTF::StringImpl"* %1599, null
  br i1 %1600, label %1614, label %1601

1601:                                             ; preds = %1598
  %1602 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1599, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1603 = load atomic i32, i32* %1602 monotonic, align 4
  %1604 = and i32 %1603, 2
  %1605 = icmp eq i32 %1604, 0
  %1606 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1599, i64 0, i32 0
  %1607 = load i32, i32* %1606, align 4
  br i1 %1605, label %1608, label %1610

1608:                                             ; preds = %1601
  %1609 = add i32 %1607, -1
  store i32 %1609, i32* %1606, align 4
  br label %1610

1610:                                             ; preds = %1608, %1601
  %1611 = phi i32 [ %1609, %1608 ], [ %1607, %1601 ]
  %1612 = icmp eq i32 %1611, 0
  br i1 %1612, label %1613, label %1614

1613:                                             ; preds = %1610
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1599) #7
  br label %1614

1614:                                             ; preds = %1598, %1610, %1613
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1476) #7
  br label %1789

1615:                                             ; preds = %1592, %1469
  %1616 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %48, i64 9, i32 0
  %1617 = bitcast %"class.v8::Name"** %1616 to %"class.v8::Value"**
  %1618 = load %"class.v8::Value"*, %"class.v8::Value"** %1617, align 8
  %1619 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %42, %"class.v8::Context"* %50, %"class.v8::Value"* %1618) #7
  %1620 = icmp eq %"class.v8::Value"* %1619, null
  br i1 %1620, label %1621, label %1627

1621:                                             ; preds = %1615
  %1622 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1623 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1624 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1623, align 8
  %1625 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1624, i64 5
  %1626 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1625, align 8
  call void %1626(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1622) #7
  br label %1789

1627:                                             ; preds = %1615
  %1628 = bitcast %"class.v8::Value"* %1619 to i64*
  %1629 = load i64, i64* %1628, align 8
  %1630 = and i64 %1629, 3
  %1631 = icmp eq i64 %1630, 1
  br i1 %1631, label %1632, label %1649

1632:                                             ; preds = %1627
  %1633 = add i64 %1629, -1
  %1634 = inttoptr i64 %1633 to i32*
  %1635 = load i32, i32* %1634, align 4
  %1636 = and i64 %1629, -4294967296
  %1637 = zext i32 %1635 to i64
  %1638 = or i64 %1636, %1637
  %1639 = add i64 %1638, 7
  %1640 = inttoptr i64 %1639 to i16*
  %1641 = load i16, i16* %1640, align 2
  %1642 = icmp eq i16 %1641, 67
  br i1 %1642, label %1643, label %1649

1643:                                             ; preds = %1632
  %1644 = add i64 %1629, 23
  %1645 = inttoptr i64 %1644 to i32*
  %1646 = load i32, i32* %1645, align 4
  %1647 = and i32 %1646, -2
  %1648 = icmp eq i32 %1647, 10
  br i1 %1648, label %1789, label %1649

1649:                                             ; preds = %1632, %1627, %1643
  %1650 = bitcast %"class.blink::V8StringResource"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1650) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1650, i8 -86, i64 152, i1 false)
  %1651 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1619, %"class.v8::Value"** %1651, align 8
  %1652 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 1
  store i32 0, i32* %1652, align 8
  %1653 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1653, align 8
  %1654 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1
  %1655 = bitcast %"class.std::__1::unique_ptr"* %1654 to i64*
  store i64 0, i64* %1655, align 8
  %1656 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %15, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1656, label %1657, label %1767

1657:                                             ; preds = %1649
  %1658 = load %"class.v8::Value"*, %"class.v8::Value"** %1651, align 8
  %1659 = icmp eq %"class.v8::Value"* %1658, null
  br i1 %1659, label %1660, label %1684, !prof !2

1660:                                             ; preds = %1657
  %1661 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1653, align 8
  %1662 = icmp eq %"class.WTF::StringImpl"* %1661, null
  br i1 %1662, label %1663, label %1665

1663:                                             ; preds = %1660
  %1664 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 10
  br label %1709

1665:                                             ; preds = %1660
  %1666 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1661, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1667 = load atomic i32, i32* %1666 monotonic, align 4
  %1668 = and i32 %1667, 2
  %1669 = icmp eq i32 %1668, 0
  br i1 %1669, label %1670, label %1682

1670:                                             ; preds = %1665
  %1671 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1661, i64 0, i32 0
  %1672 = load i32, i32* %1671, align 4
  %1673 = zext i32 %1672 to i33
  %1674 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1673, i33 1) #7
  %1675 = extractvalue { i33, i1 } %1674, 1
  %1676 = extractvalue { i33, i1 } %1674, 0
  %1677 = icmp slt i33 %1676, 0
  %1678 = or i1 %1675, %1677
  br i1 %1678, label %1679, label %1680, !prof !2

1679:                                             ; preds = %1670
  call void @llvm.trap() #7
  unreachable

1680:                                             ; preds = %1670
  %1681 = trunc i33 %1676 to i32
  store i32 %1681, i32* %1671, align 4
  br label %1682

1682:                                             ; preds = %1665, %1680
  %1683 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 10
  br label %1690

1684:                                             ; preds = %1657
  %1685 = bitcast %"class.v8::Value"* %1658 to %"class.v8::String"*
  %1686 = load i32, i32* %1652, align 8
  %1687 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1685, i32 %1686) #7
  %1688 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %2, i64 0, i32 10
  %1689 = icmp eq %"class.WTF::StringImpl"* %1687, null
  br i1 %1689, label %1709, label %1690

1690:                                             ; preds = %1682, %1684
  %1691 = phi %"class.WTF::String"* [ %1683, %1682 ], [ %1688, %1684 ]
  %1692 = phi %"class.WTF::StringImpl"* [ %1661, %1682 ], [ %1687, %1684 ]
  %1693 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1692, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1694 = load atomic i32, i32* %1693 monotonic, align 4
  %1695 = and i32 %1694, 2
  %1696 = icmp eq i32 %1695, 0
  br i1 %1696, label %1697, label %1709

1697:                                             ; preds = %1690
  %1698 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1692, i64 0, i32 0
  %1699 = load i32, i32* %1698, align 4
  %1700 = zext i32 %1699 to i33
  %1701 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1700, i33 1) #7
  %1702 = extractvalue { i33, i1 } %1701, 1
  %1703 = extractvalue { i33, i1 } %1701, 0
  %1704 = icmp slt i33 %1703, 0
  %1705 = or i1 %1702, %1704
  br i1 %1705, label %1706, label %1707, !prof !2

1706:                                             ; preds = %1697
  call void @llvm.trap() #7
  unreachable

1707:                                             ; preds = %1697
  %1708 = trunc i33 %1703 to i32
  store i32 %1708, i32* %1698, align 4
  br label %1709

1709:                                             ; preds = %1663, %1707, %1690, %1684
  %1710 = phi i1 [ false, %1707 ], [ false, %1690 ], [ true, %1684 ], [ true, %1663 ]
  %1711 = phi %"class.WTF::String"* [ %1691, %1707 ], [ %1691, %1690 ], [ %1688, %1684 ], [ %1664, %1663 ]
  %1712 = phi %"class.WTF::StringImpl"* [ %1692, %1707 ], [ %1692, %1690 ], [ null, %1684 ], [ null, %1663 ]
  %1713 = ptrtoint %"class.WTF::StringImpl"* %1712 to i64
  %1714 = bitcast %"class.WTF::String"* %1711 to i64*
  %1715 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1711, i64 0, i32 0, i32 0
  %1716 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1715, align 8
  store i64 %1713, i64* %1714, align 8
  %1717 = icmp eq %"class.WTF::StringImpl"* %1716, null
  br i1 %1717, label %1731, label %1718

1718:                                             ; preds = %1709
  %1719 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1716, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1720 = load atomic i32, i32* %1719 monotonic, align 4
  %1721 = and i32 %1720, 2
  %1722 = icmp eq i32 %1721, 0
  %1723 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1716, i64 0, i32 0
  %1724 = load i32, i32* %1723, align 4
  br i1 %1722, label %1725, label %1727

1725:                                             ; preds = %1718
  %1726 = add i32 %1724, -1
  store i32 %1726, i32* %1723, align 4
  br label %1727

1727:                                             ; preds = %1725, %1718
  %1728 = phi i32 [ %1726, %1725 ], [ %1724, %1718 ]
  %1729 = icmp eq i32 %1728, 0
  br i1 %1729, label %1730, label %1731

1730:                                             ; preds = %1727
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1716) #7
  br label %1731

1731:                                             ; preds = %1709, %1727, %1730
  br i1 %1710, label %1745, label %1732

1732:                                             ; preds = %1731
  %1733 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1712, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1734 = load atomic i32, i32* %1733 monotonic, align 4
  %1735 = and i32 %1734, 2
  %1736 = icmp eq i32 %1735, 0
  %1737 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1712, i64 0, i32 0
  %1738 = load i32, i32* %1737, align 4
  br i1 %1736, label %1739, label %1741

1739:                                             ; preds = %1732
  %1740 = add i32 %1738, -1
  store i32 %1740, i32* %1737, align 4
  br label %1741

1741:                                             ; preds = %1739, %1732
  %1742 = phi i32 [ %1740, %1739 ], [ %1738, %1732 ]
  %1743 = icmp eq i32 %1742, 0
  br i1 %1743, label %1744, label %1745

1744:                                             ; preds = %1741
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1712) #7
  br label %1745

1745:                                             ; preds = %1731, %1741, %1744
  %1746 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1747 = load i8*, i8** %1746, align 8
  store i8* null, i8** %1746, align 8
  %1748 = icmp eq i8* %1747, null
  br i1 %1748, label %1750, label %1749

1749:                                             ; preds = %1745
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1747) #7
  br label %1750

1750:                                             ; preds = %1749, %1745
  %1751 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1653, align 8
  %1752 = icmp eq %"class.WTF::StringImpl"* %1751, null
  br i1 %1752, label %1766, label %1753

1753:                                             ; preds = %1750
  %1754 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1751, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1755 = load atomic i32, i32* %1754 monotonic, align 4
  %1756 = and i32 %1755, 2
  %1757 = icmp eq i32 %1756, 0
  %1758 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1751, i64 0, i32 0
  %1759 = load i32, i32* %1758, align 4
  br i1 %1757, label %1760, label %1762

1760:                                             ; preds = %1753
  %1761 = add i32 %1759, -1
  store i32 %1761, i32* %1758, align 4
  br label %1762

1762:                                             ; preds = %1760, %1753
  %1763 = phi i32 [ %1761, %1760 ], [ %1759, %1753 ]
  %1764 = icmp eq i32 %1763, 0
  br i1 %1764, label %1765, label %1766

1765:                                             ; preds = %1762
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1751) #7
  br label %1766

1766:                                             ; preds = %1750, %1762, %1765
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1650) #7
  br label %1789

1767:                                             ; preds = %1649
  %1768 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1769 = load i8*, i8** %1768, align 8
  store i8* null, i8** %1768, align 8
  %1770 = icmp eq i8* %1769, null
  br i1 %1770, label %1772, label %1771

1771:                                             ; preds = %1767
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1769) #7
  br label %1772

1772:                                             ; preds = %1771, %1767
  %1773 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1653, align 8
  %1774 = icmp eq %"class.WTF::StringImpl"* %1773, null
  br i1 %1774, label %1788, label %1775

1775:                                             ; preds = %1772
  %1776 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1773, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1777 = load atomic i32, i32* %1776 monotonic, align 4
  %1778 = and i32 %1777, 2
  %1779 = icmp eq i32 %1778, 0
  %1780 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1773, i64 0, i32 0
  %1781 = load i32, i32* %1780, align 4
  br i1 %1779, label %1782, label %1784

1782:                                             ; preds = %1775
  %1783 = add i32 %1781, -1
  store i32 %1783, i32* %1780, align 4
  br label %1784

1784:                                             ; preds = %1782, %1775
  %1785 = phi i32 [ %1783, %1782 ], [ %1781, %1775 ]
  %1786 = icmp eq i32 %1785, 0
  br i1 %1786, label %1787, label %1788

1787:                                             ; preds = %1784
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1773) #7
  br label %1788

1788:                                             ; preds = %1772, %1784, %1787
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1650) #7
  br label %1789

1789:                                             ; preds = %229, %396, %577, %744, %925, %1092, %1273, %1440, %1621, %1788, %1766, %1643, %1614, %1447, %1266, %1099, %918, %751, %570, %403, %222, %55
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %49) #7
  br label %1790

1790:                                             ; preds = %33, %33, %4, %1789, %40
  ret void
}

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #1

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.v8::TryCatch", align 8
  %4 = tail call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* %0)
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #7
  %7 = bitcast %"class.v8::TryCatch"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %3, %"class.v8::Isolate"* %6) #7
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.v8::Value"*, %"class.v8::Value"** %8, align 8
  %10 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %6) #7
  %11 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %9, %"class.v8::Context"* %10) #7
  %12 = ptrtoint %"class.v8::String"* %11 to i64
  %13 = bitcast %"class.blink::V8StringResource"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = icmp eq %"class.v8::String"* %11, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %3) #7
  %17 = bitcast %"class.blink::ExceptionState"* %1 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %18 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %18, i64 5
  %20 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %19, align 8
  call void %20(%"class.blink::ExceptionState"* %1, %"class.v8::Value"* %16) #7
  br label %21

21:                                               ; preds = %5, %15
  %22 = phi i1 [ false, %15 ], [ true, %5 ]
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #7
  br label %23

23:                                               ; preds = %21, %2
  %24 = phi i1 [ true, %2 ], [ %22, %21 ]
  ret i1 %24
}

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink13AddressErrors8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::AddressErrors"* nocapture readonly, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #7
  %5 = tail call zeroext i1 @_ZN5blink17toV8AddressErrorsEPKNS_13AddressErrorsEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::AddressErrors"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* undef, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink17toV8AddressErrorsEPKNS_13AddressErrorsEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::AddressErrors"* nocapture readonly, %"class.v8::Object"*, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = alloca %"class.WTF::StringView", align 8
  %15 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %16 = add i64 %15, 8
  %17 = inttoptr i64 %16 to %"class.blink::V8PerIsolateData"**
  %18 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %17, align 8
  %19 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %18, i8* bitcast ([10 x i8*]* @_ZZN5blinkL26eternalV8AddressErrorsKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.312"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.312"*)) #7
  %20 = extractvalue { i64, %"class.v8::Eternal"* } %19, 1
  %21 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #7
  %22 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %24 = icmp eq %"class.WTF::StringImpl"* %23, null
  br i1 %24, label %43, label %25

25:                                               ; preds = %4
  %26 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #7
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %23, %"class.WTF::StringImpl"** %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 1
  %31 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %32 = bitcast i8** %31 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %32, align 8
  %33 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %29, i32* %33, align 8
  %34 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #7
  %35 = bitcast %"class.v8::String"* %34 to %"class.v8::Value"*
  %36 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 0, i32 0
  %37 = load %"class.v8::Name"*, %"class.v8::Name"** %36, align 8
  %38 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %37, %"class.v8::Value"* %35) #7
  %39 = trunc i16 %38 to i8
  %40 = icmp ne i8 %39, 0
  %41 = icmp ugt i16 %38, 255
  %42 = and i1 %41, %40
  br i1 %42, label %43, label %242

43:                                               ; preds = %4, %25
  %44 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 2, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %65, label %47

47:                                               ; preds = %43
  %48 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #7
  %49 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %45, %"class.WTF::StringImpl"** %49, align 8
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 1
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %54 = bitcast i8** %53 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %52, %"class.WTF::StringImpl"** %54, align 8
  %55 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %51, i32* %55, align 8
  %56 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #7
  %57 = bitcast %"class.v8::String"* %56 to %"class.v8::Value"*
  %58 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 1, i32 0
  %59 = load %"class.v8::Name"*, %"class.v8::Name"** %58, align 8
  %60 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %59, %"class.v8::Value"* %57) #7
  %61 = trunc i16 %60 to i8
  %62 = icmp ne i8 %61, 0
  %63 = icmp ugt i16 %60, 255
  %64 = and i1 %63, %62
  br i1 %64, label %65, label %242

65:                                               ; preds = %43, %47
  %66 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 3, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %68 = icmp eq %"class.WTF::StringImpl"* %67, null
  br i1 %68, label %87, label %69

69:                                               ; preds = %65
  %70 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #7
  %71 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %67, %"class.WTF::StringImpl"** %71, align 8
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 1
  %75 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %76 = bitcast i8** %75 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %74, %"class.WTF::StringImpl"** %76, align 8
  %77 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %73, i32* %77, align 8
  %78 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #7
  %79 = bitcast %"class.v8::String"* %78 to %"class.v8::Value"*
  %80 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 2, i32 0
  %81 = load %"class.v8::Name"*, %"class.v8::Name"** %80, align 8
  %82 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %81, %"class.v8::Value"* %79) #7
  %83 = trunc i16 %82 to i8
  %84 = icmp ne i8 %83, 0
  %85 = icmp ugt i16 %82, 255
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %242

87:                                               ; preds = %65, %69
  %88 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 4, i32 0, i32 0
  %89 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %90 = icmp eq %"class.WTF::StringImpl"* %89, null
  br i1 %90, label %109, label %91

91:                                               ; preds = %87
  %92 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #7
  %93 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %89, %"class.WTF::StringImpl"** %93, align 8
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 1
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 1
  %97 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %98 = bitcast i8** %97 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %96, %"class.WTF::StringImpl"** %98, align 8
  %99 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %95, i32* %99, align 8
  %100 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #7
  %101 = bitcast %"class.v8::String"* %100 to %"class.v8::Value"*
  %102 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 3, i32 0
  %103 = load %"class.v8::Name"*, %"class.v8::Name"** %102, align 8
  %104 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %103, %"class.v8::Value"* %101) #7
  %105 = trunc i16 %104 to i8
  %106 = icmp ne i8 %105, 0
  %107 = icmp ugt i16 %104, 255
  %108 = and i1 %107, %106
  br i1 %108, label %109, label %242

109:                                              ; preds = %87, %91
  %110 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 5, i32 0, i32 0
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %131, label %113

113:                                              ; preds = %109
  %114 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %114) #7
  %115 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %111, %"class.WTF::StringImpl"** %115, align 8
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 1
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 1
  %119 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %120 = bitcast i8** %119 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %118, %"class.WTF::StringImpl"** %120, align 8
  %121 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %117, i32* %121, align 8
  %122 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %114) #7
  %123 = bitcast %"class.v8::String"* %122 to %"class.v8::Value"*
  %124 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 4, i32 0
  %125 = load %"class.v8::Name"*, %"class.v8::Name"** %124, align 8
  %126 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %125, %"class.v8::Value"* %123) #7
  %127 = trunc i16 %126 to i8
  %128 = icmp ne i8 %127, 0
  %129 = icmp ugt i16 %126, 255
  %130 = and i1 %129, %128
  br i1 %130, label %131, label %242

131:                                              ; preds = %109, %113
  %132 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 6, i32 0, i32 0
  %133 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %132, align 8
  %134 = icmp eq %"class.WTF::StringImpl"* %133, null
  br i1 %134, label %153, label %135

135:                                              ; preds = %131
  %136 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %136) #7
  %137 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %133, %"class.WTF::StringImpl"** %137, align 8
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 1
  %141 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %142 = bitcast i8** %141 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %140, %"class.WTF::StringImpl"** %142, align 8
  %143 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %139, i32* %143, align 8
  %144 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %136) #7
  %145 = bitcast %"class.v8::String"* %144 to %"class.v8::Value"*
  %146 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 5, i32 0
  %147 = load %"class.v8::Name"*, %"class.v8::Name"** %146, align 8
  %148 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %147, %"class.v8::Value"* %145) #7
  %149 = trunc i16 %148 to i8
  %150 = icmp ne i8 %149, 0
  %151 = icmp ugt i16 %148, 255
  %152 = and i1 %151, %150
  br i1 %152, label %153, label %242

153:                                              ; preds = %131, %135
  %154 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 7, i32 0, i32 0
  %155 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %154, align 8
  %156 = icmp eq %"class.WTF::StringImpl"* %155, null
  br i1 %156, label %175, label %157

157:                                              ; preds = %153
  %158 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %158) #7
  %159 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %155, %"class.WTF::StringImpl"** %159, align 8
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %155, i64 0, i32 1
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %155, i64 1
  %163 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %164 = bitcast i8** %163 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %162, %"class.WTF::StringImpl"** %164, align 8
  %165 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %161, i32* %165, align 8
  %166 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %11)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %158) #7
  %167 = bitcast %"class.v8::String"* %166 to %"class.v8::Value"*
  %168 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 6, i32 0
  %169 = load %"class.v8::Name"*, %"class.v8::Name"** %168, align 8
  %170 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %169, %"class.v8::Value"* %167) #7
  %171 = trunc i16 %170 to i8
  %172 = icmp ne i8 %171, 0
  %173 = icmp ugt i16 %170, 255
  %174 = and i1 %173, %172
  br i1 %174, label %175, label %242

175:                                              ; preds = %153, %157
  %176 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 8, i32 0, i32 0
  %177 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %176, align 8
  %178 = icmp eq %"class.WTF::StringImpl"* %177, null
  br i1 %178, label %197, label %179

179:                                              ; preds = %175
  %180 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %180) #7
  %181 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 0
  store %"class.WTF::StringImpl"* %177, %"class.WTF::StringImpl"** %181, align 8
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 0, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 1
  %185 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  %186 = bitcast i8** %185 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %184, %"class.WTF::StringImpl"** %186, align 8
  %187 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  store i32 %183, i32* %187, align 8
  %188 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %12)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %180) #7
  %189 = bitcast %"class.v8::String"* %188 to %"class.v8::Value"*
  %190 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 7, i32 0
  %191 = load %"class.v8::Name"*, %"class.v8::Name"** %190, align 8
  %192 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %191, %"class.v8::Value"* %189) #7
  %193 = trunc i16 %192 to i8
  %194 = icmp ne i8 %193, 0
  %195 = icmp ugt i16 %192, 255
  %196 = and i1 %195, %194
  br i1 %196, label %197, label %242

197:                                              ; preds = %175, %179
  %198 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 9, i32 0, i32 0
  %199 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %198, align 8
  %200 = icmp eq %"class.WTF::StringImpl"* %199, null
  br i1 %200, label %219, label %201

201:                                              ; preds = %197
  %202 = bitcast %"class.WTF::StringView"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %202) #7
  %203 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 0
  store %"class.WTF::StringImpl"* %199, %"class.WTF::StringImpl"** %203, align 8
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %199, i64 0, i32 1
  %205 = load i32, i32* %204, align 4
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %199, i64 1
  %207 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  %208 = bitcast i8** %207 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %206, %"class.WTF::StringImpl"** %208, align 8
  %209 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 2
  store i32 %205, i32* %209, align 8
  %210 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %13)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %202) #7
  %211 = bitcast %"class.v8::String"* %210 to %"class.v8::Value"*
  %212 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 8, i32 0
  %213 = load %"class.v8::Name"*, %"class.v8::Name"** %212, align 8
  %214 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %213, %"class.v8::Value"* %211) #7
  %215 = trunc i16 %214 to i8
  %216 = icmp ne i8 %215, 0
  %217 = icmp ugt i16 %214, 255
  %218 = and i1 %217, %216
  br i1 %218, label %219, label %242

219:                                              ; preds = %197, %201
  %220 = getelementptr inbounds %"class.blink::AddressErrors", %"class.blink::AddressErrors"* %0, i64 0, i32 10, i32 0, i32 0
  %221 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %220, align 8
  %222 = icmp eq %"class.WTF::StringImpl"* %221, null
  br i1 %222, label %241, label %223

223:                                              ; preds = %219
  %224 = bitcast %"class.WTF::StringView"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %224) #7
  %225 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 0
  store %"class.WTF::StringImpl"* %221, %"class.WTF::StringImpl"** %225, align 8
  %226 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %221, i64 0, i32 1
  %227 = load i32, i32* %226, align 4
  %228 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %221, i64 1
  %229 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 1
  %230 = bitcast i8** %229 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %228, %"class.WTF::StringImpl"** %230, align 8
  %231 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 2
  store i32 %227, i32* %231, align 8
  %232 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %14)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %224) #7
  %233 = bitcast %"class.v8::String"* %232 to %"class.v8::Value"*
  %234 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %20, i64 9, i32 0
  %235 = load %"class.v8::Name"*, %"class.v8::Name"** %234, align 8
  %236 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %21, %"class.v8::Name"* %235, %"class.v8::Value"* %233) #7
  %237 = trunc i16 %236 to i8
  %238 = icmp ne i8 %237, 0
  %239 = icmp ugt i16 %236, 255
  %240 = and i1 %239, %238
  br i1 %240, label %241, label %242

241:                                              ; preds = %219, %223
  br label %242

242:                                              ; preds = %47, %91, %135, %179, %241, %223, %201, %157, %113, %69, %25
  %243 = phi i1 [ false, %25 ], [ false, %47 ], [ false, %69 ], [ false, %91 ], [ false, %113 ], [ false, %135 ], [ false, %157 ], [ false, %179 ], [ false, %201 ], [ true, %241 ], [ false, %223 ]
  ret i1 %243
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #7
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #7
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #7
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !2

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #7
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !2

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::AddressErrors"* @_ZN5blink17NativeValueTraitsINS_13AddressErrorsEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 88) #7
  %5 = bitcast i8* %4 to %"class.blink::AddressErrors"*
  tail call void @_ZN5blink13AddressErrorsC1Ev(%"class.blink::AddressErrors"* %5) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink15V8AddressErrors6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_13AddressErrorsERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::AddressErrors"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::AddressErrors"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.312"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #1

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink13AddressErrorsC1Ev(%"class.blink::AddressErrors"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.12, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !3

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !4

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %22, label %23, label %80, !prof !4

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #7
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #7
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #7
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #1

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2146410443, i32 1073205}
!4 = !{!"branch_weights", i32 2000, i32 1}
