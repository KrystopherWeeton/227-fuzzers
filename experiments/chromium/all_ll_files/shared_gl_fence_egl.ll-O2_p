; ModuleID = '../../ui/gl/shared_gl_fence_egl.cc'
source_filename = "../../ui/gl/shared_gl_fence_egl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gl::SharedGLFenceEGL" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.std::__1::unique_ptr", %"class.base::Lock", %"class.gl::GLApi"* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gl::GLFenceEGL"* }
%"class.gl::GLFenceEGL" = type { %"class.gl::GLFence", i8*, i8* }
%"class.gl::GLFence" = type { i32 (...)** }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.gl::GLApi" = type { i32 (...)** }

@_ZTVN2gl16SharedGLFenceEGLE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.gl::SharedGLFenceEGL"*)* @_ZN2gl16SharedGLFenceEGLD2Ev to i8*), i8* bitcast (void (%"class.gl::SharedGLFenceEGL"*)* @_ZN2gl16SharedGLFenceEGLD0Ev to i8*)] }, align 8

@_ZN2gl16SharedGLFenceEGLC1Ev = hidden unnamed_addr alias void (%"class.gl::SharedGLFenceEGL"*), void (%"class.gl::SharedGLFenceEGL"*)* @_ZN2gl16SharedGLFenceEGLC2Ev
@_ZN2gl16SharedGLFenceEGLD1Ev = hidden unnamed_addr alias void (%"class.gl::SharedGLFenceEGL"*), void (%"class.gl::SharedGLFenceEGL"*)* @_ZN2gl16SharedGLFenceEGLD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl16SharedGLFenceEGLC2Ev(%"class.gl::SharedGLFenceEGL"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN2gl16SharedGLFenceEGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = tail call %"class.gl::GLFenceEGL"* @_ZN2gl10GLFenceEGL6CreateEv() #4
  %5 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.gl::GLFenceEGL"* %4, %"class.gl::GLFenceEGL"** %5, align 8
  %6 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 3, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %6) #4
  %7 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 4
  store %"class.gl::GLApi"* null, %"class.gl::GLApi"** %7, align 8
  ret void
}

declare %"class.gl::GLFenceEGL"* @_ZN2gl10GLFenceEGL6CreateEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl16SharedGLFenceEGLD2Ev(%"class.gl::SharedGLFenceEGL"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN2gl16SharedGLFenceEGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 3, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %3) #4
  %4 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"class.gl::GLFenceEGL"*, %"class.gl::GLFenceEGL"** %4, align 8
  store %"class.gl::GLFenceEGL"* null, %"class.gl::GLFenceEGL"** %4, align 8
  %6 = icmp eq %"class.gl::GLFenceEGL"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.gl::GLFenceEGL"* %5 to void (%"class.gl::GLFenceEGL"*)***
  %9 = load void (%"class.gl::GLFenceEGL"*)**, void (%"class.gl::GLFenceEGL"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.gl::GLFenceEGL"*)*, void (%"class.gl::GLFenceEGL"*)** %9, i64 1
  %11 = load void (%"class.gl::GLFenceEGL"*)*, void (%"class.gl::GLFenceEGL"*)** %10, align 8
  tail call void %11(%"class.gl::GLFenceEGL"* nonnull %5) #4
  br label %12

12:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl16SharedGLFenceEGLD0Ev(%"class.gl::SharedGLFenceEGL"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN2gl16SharedGLFenceEGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 3, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %3) #4
  %4 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"class.gl::GLFenceEGL"*, %"class.gl::GLFenceEGL"** %4, align 8
  store %"class.gl::GLFenceEGL"* null, %"class.gl::GLFenceEGL"** %4, align 8
  %6 = icmp eq %"class.gl::GLFenceEGL"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.gl::GLFenceEGL"* %5 to void (%"class.gl::GLFenceEGL"*)***
  %9 = load void (%"class.gl::GLFenceEGL"*)**, void (%"class.gl::GLFenceEGL"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.gl::GLFenceEGL"*)*, void (%"class.gl::GLFenceEGL"*)** %9, i64 1
  %11 = load void (%"class.gl::GLFenceEGL"*)*, void (%"class.gl::GLFenceEGL"*)** %10, align 8
  tail call void %11(%"class.gl::GLFenceEGL"* nonnull %5) #4
  br label %12

12:                                               ; preds = %1, %7
  %13 = bitcast %"class.gl::SharedGLFenceEGL"* %0 to i8*
  tail call void @_ZdlPv(i8* %13) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl16SharedGLFenceEGL10ServerWaitEv(%"class.gl::SharedGLFenceEGL"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 3
  %3 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #4
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.gl::SharedGLFenceEGL", %"class.gl::SharedGLFenceEGL"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %"class.gl::GLFenceEGL"*, %"class.gl::GLFenceEGL"** %9, align 8
  %11 = icmp eq %"class.gl::GLFenceEGL"* %10, null
  br i1 %11, label %24, label %12

12:                                               ; preds = %8
  %13 = bitcast %"class.gl::GLFenceEGL"* %10 to void (%"class.gl::GLFenceEGL"*)***
  %14 = load void (%"class.gl::GLFenceEGL"*)**, void (%"class.gl::GLFenceEGL"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.gl::GLFenceEGL"*)*, void (%"class.gl::GLFenceEGL"*)** %14, i64 4
  %16 = load void (%"class.gl::GLFenceEGL"*)*, void (%"class.gl::GLFenceEGL"*)** %15, align 8
  tail call void %16(%"class.gl::GLFenceEGL"* nonnull %10) #4
  %17 = load %"class.gl::GLFenceEGL"*, %"class.gl::GLFenceEGL"** %9, align 8
  store %"class.gl::GLFenceEGL"* null, %"class.gl::GLFenceEGL"** %9, align 8
  %18 = icmp eq %"class.gl::GLFenceEGL"* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %12
  %20 = bitcast %"class.gl::GLFenceEGL"* %17 to void (%"class.gl::GLFenceEGL"*)***
  %21 = load void (%"class.gl::GLFenceEGL"*)**, void (%"class.gl::GLFenceEGL"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.gl::GLFenceEGL"*)*, void (%"class.gl::GLFenceEGL"*)** %21, i64 1
  %23 = load void (%"class.gl::GLFenceEGL"*)*, void (%"class.gl::GLFenceEGL"*)** %22, align 8
  tail call void %23(%"class.gl::GLFenceEGL"* nonnull %17) #4
  br label %24

24:                                               ; preds = %8, %19, %12
  %25 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #4
  ret void
}

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #3

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
