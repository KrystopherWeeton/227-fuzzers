; ModuleID = '../../third_party/opus/src/silk/NLSF2A.c'
source_filename = "../../third_party/opus/src/silk/NLSF2A.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@silk_NLSF2A.ordering16 = internal unnamed_addr constant [16 x i8] c"\00\0F\08\07\04\0B\0C\03\02\0D\0A\05\06\09\0E\01", align 16
@silk_NLSF2A.ordering10 = internal unnamed_addr constant [10 x i8] c"\00\09\06\03\04\05\08\01\02\07", align 1
@.str = private unnamed_addr constant [33 x i8] c"assertion failed: d==10 || d==16\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"../../third_party/opus/src/silk/NLSF2A.c\00", align 1
@silk_LSFCosTab_FIX_Q12 = external local_unnamed_addr constant [129 x i16], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_NLSF2A(i16*, i16* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [24 x i32], align 16
  %6 = alloca [13 x i32], align 16
  %7 = alloca [13 x i32], align 16
  %8 = alloca [24 x i32], align 16
  %9 = bitcast [24 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 96, i1 false)
  %10 = bitcast [13 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 52, i1 false)
  %11 = bitcast [13 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 52, i1 false)
  %12 = bitcast [24 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 96, i1 false)
  switch i32 %2, label %13 [
    i32 16, label %14
    i32 10, label %14
  ]

13:                                               ; preds = %4
  tail call void @celt_fatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0), i32 89) #5
  unreachable

14:                                               ; preds = %4, %4
  %15 = icmp eq i32 %2, 16
  %16 = select i1 %15, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @silk_NLSF2A.ordering16, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @silk_NLSF2A.ordering10, i64 0, i64 0)
  %17 = zext i32 %2 to i64
  br label %18

18:                                               ; preds = %18, %14
  %19 = phi i64 [ 0, %14 ], [ %45, %18 ]
  %20 = getelementptr inbounds i16, i16* %1, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = ashr i32 %22, 8
  %24 = and i32 %22, 255
  %25 = sext i32 %23 to i64
  %26 = getelementptr inbounds [129 x i16], [129 x i16]* @silk_LSFCosTab_FIX_Q12, i64 0, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = add nsw i32 %23, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [129 x i16], [129 x i16]* @silk_LSFCosTab_FIX_Q12, i64 0, i64 %30
  %32 = load i16, i16* %31, align 2
  %33 = sext i16 %32 to i32
  %34 = sub nsw i32 %33, %28
  %35 = shl nsw i32 %28, 8
  %36 = mul nsw i32 %34, %24
  %37 = add nsw i32 %36, %35
  %38 = ashr i32 %37, 3
  %39 = add nsw i32 %38, 1
  %40 = ashr i32 %39, 1
  %41 = getelementptr inbounds i8, i8* %16, i64 %19
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds [24 x i32], [24 x i32]* %5, i64 0, i64 %43
  store i32 %40, i32* %44, align 4
  %45 = add nuw nsw i64 %19, 1
  %46 = icmp eq i64 %45, %17
  br i1 %46, label %47, label %18

47:                                               ; preds = %18
  %48 = getelementptr inbounds [24 x i32], [24 x i32]* %5, i64 0, i64 0
  %49 = load i32, i32* %48, align 16
  %50 = sub i32 0, %49
  %51 = ashr i32 %2, 1
  %52 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 0
  store i32 65536, i32* %52, align 16
  %53 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 1
  store i32 %50, i32* %53, align 4
  %54 = icmp sgt i32 %2, 3
  br i1 %54, label %55, label %161

55:                                               ; preds = %47
  %56 = zext i32 %51 to i64
  br label %57

57:                                               ; preds = %157, %55
  %58 = phi i64 [ %160, %157 ], [ 0, %55 ]
  %59 = phi i32 [ %159, %157 ], [ %50, %55 ]
  %60 = phi i32 [ %158, %157 ], [ 65536, %55 ]
  %61 = phi i64 [ %76, %157 ], [ 1, %55 ]
  %62 = add i64 %58, -1
  %63 = shl nuw nsw i64 %61, 1
  %64 = getelementptr inbounds [24 x i32], [24 x i32]* %5, i64 0, i64 %63
  %65 = load i32, i32* %64, align 8
  %66 = shl i32 %60, 1
  %67 = sext i32 %65 to i64
  %68 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 %61
  %69 = sext i32 %59 to i64
  %70 = mul nsw i64 %67, %69
  %71 = lshr i64 %70, 15
  %72 = add nuw nsw i64 %71, 1
  %73 = lshr i64 %72, 1
  %74 = trunc i64 %73 to i32
  %75 = sub nsw i32 %66, %74
  %76 = add nuw nsw i64 %61, 1
  %77 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 %76
  store i32 %75, i32* %77, align 4
  %78 = icmp ugt i64 %61, 1
  br i1 %78, label %79, label %153

79:                                               ; preds = %57
  %80 = add nsw i64 %61, -2
  %81 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = add nsw i64 %61, -1
  %84 = sext i32 %60 to i64
  %85 = mul nsw i64 %84, %67
  %86 = lshr i64 %85, 15
  %87 = add nuw nsw i64 %86, 1
  %88 = lshr i64 %87, 1
  %89 = trunc i64 %88 to i32
  %90 = add i32 %82, %59
  %91 = sub i32 %90, %89
  store i32 %91, i32* %68, align 4
  %92 = icmp ugt i64 %83, 1
  br i1 %92, label %93, label %153

93:                                               ; preds = %79
  %94 = icmp ult i64 %62, 4
  br i1 %94, label %132, label %95

95:                                               ; preds = %93
  %96 = and i64 %62, -4
  %97 = sub i64 %83, %96
  %98 = insertelement <4 x i64> undef, i64 %67, i32 0
  %99 = shufflevector <4 x i64> %98, <4 x i64> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %82, i32 3
  br label %101

101:                                              ; preds = %101, %95
  %102 = phi i64 [ 0, %95 ], [ %127, %101 ]
  %103 = phi <4 x i32> [ %100, %95 ], [ %114, %101 ]
  %104 = sub i64 %83, %102
  %105 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 %104
  %106 = getelementptr inbounds i32, i32* %105, i64 -3
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4
  %109 = add nsw i64 %104, -2
  %110 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 %109
  %111 = getelementptr inbounds i32, i32* %110, i64 -3
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %115 = shufflevector <4 x i32> %103, <4 x i32> %114, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %116 = sext <4 x i32> %115 to <4 x i64>
  %117 = mul nsw <4 x i64> %99, %116
  %118 = lshr <4 x i64> %117, <i64 15, i64 15, i64 15, i64 15>
  %119 = add nuw nsw <4 x i64> %118, <i64 1, i64 1, i64 1, i64 1>
  %120 = lshr <4 x i64> %119, <i64 1, i64 1, i64 1, i64 1>
  %121 = trunc <4 x i64> %120 to <4 x i32>
  %122 = add <4 x i32> %113, %108
  %123 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %124 = sub <4 x i32> %123, %121
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %126 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %126, align 4
  %127 = add i64 %102, 4
  %128 = icmp eq i64 %127, %96
  br i1 %128, label %129, label %101, !llvm.loop !2

129:                                              ; preds = %101
  %130 = icmp eq i64 %62, %96
  %131 = extractelement <4 x i32> %113, i32 0
  br i1 %130, label %153, label %132

132:                                              ; preds = %129, %93
  %133 = phi i64 [ %83, %93 ], [ %97, %129 ]
  %134 = phi i32 [ %82, %93 ], [ %131, %129 ]
  br label %135

135:                                              ; preds = %132, %135
  %136 = phi i64 [ %143, %135 ], [ %133, %132 ]
  %137 = phi i32 [ %142, %135 ], [ %134, %132 ]
  %138 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 %136
  %139 = load i32, i32* %138, align 4
  %140 = add nsw i64 %136, -2
  %141 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 %140
  %142 = load i32, i32* %141, align 4
  %143 = add nsw i64 %136, -1
  %144 = sext i32 %137 to i64
  %145 = mul nsw i64 %144, %67
  %146 = lshr i64 %145, 15
  %147 = add nuw nsw i64 %146, 1
  %148 = lshr i64 %147, 1
  %149 = trunc i64 %148 to i32
  %150 = add i32 %142, %139
  %151 = sub i32 %150, %149
  store i32 %151, i32* %138, align 4
  %152 = icmp sgt i64 %143, 1
  br i1 %152, label %135, label %153, !llvm.loop !4

153:                                              ; preds = %135, %129, %79, %57
  %154 = load i32, i32* %53, align 4
  %155 = sub nsw i32 %154, %65
  store i32 %155, i32* %53, align 4
  %156 = icmp eq i64 %76, %56
  br i1 %156, label %161, label %157

157:                                              ; preds = %153
  %158 = load i32, i32* %68, align 4
  %159 = load i32, i32* %77, align 4
  %160 = add i64 %58, 1
  br label %57

161:                                              ; preds = %153, %47
  %162 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 0
  %163 = getelementptr inbounds [24 x i32], [24 x i32]* %5, i64 0, i64 1
  store i32 65536, i32* %162, align 16
  %164 = load i32, i32* %163, align 4
  %165 = sub nsw i32 0, %164
  %166 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 1
  store i32 %165, i32* %166, align 4
  br i1 %54, label %167, label %273

167:                                              ; preds = %161
  %168 = zext i32 %51 to i64
  br label %169

169:                                              ; preds = %269, %167
  %170 = phi i64 [ %272, %269 ], [ 0, %167 ]
  %171 = phi i32 [ %271, %269 ], [ %165, %167 ]
  %172 = phi i32 [ %270, %269 ], [ 65536, %167 ]
  %173 = phi i64 [ %188, %269 ], [ 1, %167 ]
  %174 = add i64 %170, -1
  %175 = shl nuw nsw i64 %173, 1
  %176 = getelementptr inbounds i32, i32* %163, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = shl i32 %172, 1
  %179 = sext i32 %177 to i64
  %180 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 %173
  %181 = sext i32 %171 to i64
  %182 = mul nsw i64 %179, %181
  %183 = lshr i64 %182, 15
  %184 = add nuw nsw i64 %183, 1
  %185 = lshr i64 %184, 1
  %186 = trunc i64 %185 to i32
  %187 = sub nsw i32 %178, %186
  %188 = add nuw nsw i64 %173, 1
  %189 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 %188
  store i32 %187, i32* %189, align 4
  %190 = icmp ugt i64 %173, 1
  br i1 %190, label %191, label %265

191:                                              ; preds = %169
  %192 = add nsw i64 %173, -2
  %193 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = add nsw i64 %173, -1
  %196 = sext i32 %172 to i64
  %197 = mul nsw i64 %196, %179
  %198 = lshr i64 %197, 15
  %199 = add nuw nsw i64 %198, 1
  %200 = lshr i64 %199, 1
  %201 = trunc i64 %200 to i32
  %202 = add i32 %194, %171
  %203 = sub i32 %202, %201
  store i32 %203, i32* %180, align 4
  %204 = icmp ugt i64 %195, 1
  br i1 %204, label %205, label %265

205:                                              ; preds = %191
  %206 = icmp ult i64 %174, 4
  br i1 %206, label %244, label %207

207:                                              ; preds = %205
  %208 = and i64 %174, -4
  %209 = sub i64 %195, %208
  %210 = insertelement <4 x i64> undef, i64 %179, i32 0
  %211 = shufflevector <4 x i64> %210, <4 x i64> undef, <4 x i32> zeroinitializer
  %212 = insertelement <4 x i32> undef, i32 %194, i32 3
  br label %213

213:                                              ; preds = %213, %207
  %214 = phi i64 [ 0, %207 ], [ %239, %213 ]
  %215 = phi <4 x i32> [ %212, %207 ], [ %226, %213 ]
  %216 = sub i64 %195, %214
  %217 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 %216
  %218 = getelementptr inbounds i32, i32* %217, i64 -3
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 4
  %221 = add nsw i64 %216, -2
  %222 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 %221
  %223 = getelementptr inbounds i32, i32* %222, i64 -3
  %224 = bitcast i32* %223 to <4 x i32>*
  %225 = load <4 x i32>, <4 x i32>* %224, align 4
  %226 = shufflevector <4 x i32> %225, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %227 = shufflevector <4 x i32> %215, <4 x i32> %226, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %228 = sext <4 x i32> %227 to <4 x i64>
  %229 = mul nsw <4 x i64> %211, %228
  %230 = lshr <4 x i64> %229, <i64 15, i64 15, i64 15, i64 15>
  %231 = add nuw nsw <4 x i64> %230, <i64 1, i64 1, i64 1, i64 1>
  %232 = lshr <4 x i64> %231, <i64 1, i64 1, i64 1, i64 1>
  %233 = trunc <4 x i64> %232 to <4 x i32>
  %234 = add <4 x i32> %225, %220
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %236 = sub <4 x i32> %235, %233
  %237 = shufflevector <4 x i32> %236, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %238 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %237, <4 x i32>* %238, align 4
  %239 = add i64 %214, 4
  %240 = icmp eq i64 %239, %208
  br i1 %240, label %241, label %213, !llvm.loop !6

241:                                              ; preds = %213
  %242 = icmp eq i64 %174, %208
  %243 = extractelement <4 x i32> %225, i32 0
  br i1 %242, label %265, label %244

244:                                              ; preds = %241, %205
  %245 = phi i64 [ %195, %205 ], [ %209, %241 ]
  %246 = phi i32 [ %194, %205 ], [ %243, %241 ]
  br label %247

247:                                              ; preds = %244, %247
  %248 = phi i64 [ %255, %247 ], [ %245, %244 ]
  %249 = phi i32 [ %254, %247 ], [ %246, %244 ]
  %250 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 %248
  %251 = load i32, i32* %250, align 4
  %252 = add nsw i64 %248, -2
  %253 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 %252
  %254 = load i32, i32* %253, align 4
  %255 = add nsw i64 %248, -1
  %256 = sext i32 %249 to i64
  %257 = mul nsw i64 %256, %179
  %258 = lshr i64 %257, 15
  %259 = add nuw nsw i64 %258, 1
  %260 = lshr i64 %259, 1
  %261 = trunc i64 %260 to i32
  %262 = add i32 %254, %251
  %263 = sub i32 %262, %261
  store i32 %263, i32* %250, align 4
  %264 = icmp sgt i64 %255, 1
  br i1 %264, label %247, label %265, !llvm.loop !7

265:                                              ; preds = %247, %241, %191, %169
  %266 = load i32, i32* %166, align 4
  %267 = sub nsw i32 %266, %177
  store i32 %267, i32* %166, align 4
  %268 = icmp eq i64 %188, %168
  br i1 %268, label %273, label %269

269:                                              ; preds = %265
  %270 = load i32, i32* %180, align 4
  %271 = load i32, i32* %189, align 4
  %272 = add i64 %170, 1
  br label %169

273:                                              ; preds = %265, %161
  %274 = icmp sgt i32 %2, 1
  br i1 %274, label %275, label %300

275:                                              ; preds = %273
  %276 = sext i32 %51 to i64
  %277 = load i32, i32* %52, align 16
  %278 = load i32, i32* %162, align 16
  br label %279

279:                                              ; preds = %279, %275
  %280 = phi i32 [ %278, %275 ], [ %288, %279 ]
  %281 = phi i32 [ %277, %275 ], [ %285, %279 ]
  %282 = phi i64 [ 0, %275 ], [ %283, %279 ]
  %283 = add nuw nsw i64 %282, 1
  %284 = getelementptr inbounds [13 x i32], [13 x i32]* %6, i64 0, i64 %283
  %285 = load i32, i32* %284, align 4
  %286 = add nsw i32 %281, %285
  %287 = getelementptr inbounds [13 x i32], [13 x i32]* %7, i64 0, i64 %283
  %288 = load i32, i32* %287, align 4
  %289 = sub nsw i32 %288, %280
  %290 = add i32 %289, %286
  %291 = sub i32 0, %290
  %292 = getelementptr inbounds [24 x i32], [24 x i32]* %8, i64 0, i64 %282
  store i32 %291, i32* %292, align 4
  %293 = sub nsw i32 %289, %286
  %294 = trunc i64 %282 to i32
  %295 = xor i32 %294, -1
  %296 = add i32 %295, %2
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds [24 x i32], [24 x i32]* %8, i64 0, i64 %297
  store i32 %293, i32* %298, align 4
  %299 = icmp slt i64 %283, %276
  br i1 %299, label %279, label %300

300:                                              ; preds = %279, %273
  %301 = getelementptr inbounds [24 x i32], [24 x i32]* %8, i64 0, i64 0
  call void @silk_LPC_fit(i16* %0, i32* nonnull %301, i32 12, i32 17, i32 %2) #4
  %302 = call i32 @silk_LPC_inverse_pred_gain_c(i16* %0, i32 %2) #4
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %304, label %406

304:                                              ; preds = %300
  %305 = zext i32 %2 to i64
  %306 = and i64 %17, 4294967288
  %307 = add nsw i64 %306, -8
  %308 = lshr exact i64 %307, 3
  %309 = add nuw nsw i64 %308, 1
  %310 = icmp ult i32 %2, 8
  %311 = and i64 %17, 4294967288
  %312 = and i64 %309, 1
  %313 = icmp eq i64 %307, 0
  %314 = sub nuw nsw i64 %309, %312
  %315 = icmp eq i64 %312, 0
  %316 = icmp eq i64 %311, %17
  br label %317

317:                                              ; preds = %304, %400
  %318 = phi i32 [ %401, %400 ], [ 0, %304 ]
  %319 = shl i32 2, %318
  %320 = sub nuw nsw i32 65536, %319
  call void @silk_bwexpander_32(i32* nonnull %301, i32 %2, i32 %320) #4
  br i1 %310, label %387, label %321

321:                                              ; preds = %317
  br i1 %313, label %365, label %322

322:                                              ; preds = %321, %322
  %323 = phi i64 [ %362, %322 ], [ 0, %321 ]
  %324 = phi i64 [ %363, %322 ], [ %314, %321 ]
  %325 = getelementptr inbounds [24 x i32], [24 x i32]* %8, i64 0, i64 %323
  %326 = bitcast i32* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16
  %328 = getelementptr inbounds i32, i32* %325, i64 4
  %329 = bitcast i32* %328 to <4 x i32>*
  %330 = load <4 x i32>, <4 x i32>* %329, align 16
  %331 = lshr <4 x i32> %327, <i32 4, i32 4, i32 4, i32 4>
  %332 = lshr <4 x i32> %330, <i32 4, i32 4, i32 4, i32 4>
  %333 = add nuw nsw <4 x i32> %331, <i32 1, i32 1, i32 1, i32 1>
  %334 = add nuw nsw <4 x i32> %332, <i32 1, i32 1, i32 1, i32 1>
  %335 = lshr <4 x i32> %333, <i32 1, i32 1, i32 1, i32 1>
  %336 = lshr <4 x i32> %334, <i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <4 x i32> %335 to <4 x i16>
  %338 = trunc <4 x i32> %336 to <4 x i16>
  %339 = getelementptr inbounds i16, i16* %0, i64 %323
  %340 = bitcast i16* %339 to <4 x i16>*
  store <4 x i16> %337, <4 x i16>* %340, align 2
  %341 = getelementptr inbounds i16, i16* %339, i64 4
  %342 = bitcast i16* %341 to <4 x i16>*
  store <4 x i16> %338, <4 x i16>* %342, align 2
  %343 = or i64 %323, 8
  %344 = getelementptr inbounds [24 x i32], [24 x i32]* %8, i64 0, i64 %343
  %345 = bitcast i32* %344 to <4 x i32>*
  %346 = load <4 x i32>, <4 x i32>* %345, align 16
  %347 = getelementptr inbounds i32, i32* %344, i64 4
  %348 = bitcast i32* %347 to <4 x i32>*
  %349 = load <4 x i32>, <4 x i32>* %348, align 16
  %350 = lshr <4 x i32> %346, <i32 4, i32 4, i32 4, i32 4>
  %351 = lshr <4 x i32> %349, <i32 4, i32 4, i32 4, i32 4>
  %352 = add nuw nsw <4 x i32> %350, <i32 1, i32 1, i32 1, i32 1>
  %353 = add nuw nsw <4 x i32> %351, <i32 1, i32 1, i32 1, i32 1>
  %354 = lshr <4 x i32> %352, <i32 1, i32 1, i32 1, i32 1>
  %355 = lshr <4 x i32> %353, <i32 1, i32 1, i32 1, i32 1>
  %356 = trunc <4 x i32> %354 to <4 x i16>
  %357 = trunc <4 x i32> %355 to <4 x i16>
  %358 = getelementptr inbounds i16, i16* %0, i64 %343
  %359 = bitcast i16* %358 to <4 x i16>*
  store <4 x i16> %356, <4 x i16>* %359, align 2
  %360 = getelementptr inbounds i16, i16* %358, i64 4
  %361 = bitcast i16* %360 to <4 x i16>*
  store <4 x i16> %357, <4 x i16>* %361, align 2
  %362 = add i64 %323, 16
  %363 = add i64 %324, -2
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %322, !llvm.loop !8

365:                                              ; preds = %322, %321
  %366 = phi i64 [ 0, %321 ], [ %362, %322 ]
  br i1 %315, label %386, label %367

367:                                              ; preds = %365
  %368 = getelementptr inbounds [24 x i32], [24 x i32]* %8, i64 0, i64 %366
  %369 = bitcast i32* %368 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 16
  %371 = getelementptr inbounds i32, i32* %368, i64 4
  %372 = bitcast i32* %371 to <4 x i32>*
  %373 = load <4 x i32>, <4 x i32>* %372, align 16
  %374 = lshr <4 x i32> %370, <i32 4, i32 4, i32 4, i32 4>
  %375 = lshr <4 x i32> %373, <i32 4, i32 4, i32 4, i32 4>
  %376 = add nuw nsw <4 x i32> %374, <i32 1, i32 1, i32 1, i32 1>
  %377 = add nuw nsw <4 x i32> %375, <i32 1, i32 1, i32 1, i32 1>
  %378 = lshr <4 x i32> %376, <i32 1, i32 1, i32 1, i32 1>
  %379 = lshr <4 x i32> %377, <i32 1, i32 1, i32 1, i32 1>
  %380 = trunc <4 x i32> %378 to <4 x i16>
  %381 = trunc <4 x i32> %379 to <4 x i16>
  %382 = getelementptr inbounds i16, i16* %0, i64 %366
  %383 = bitcast i16* %382 to <4 x i16>*
  store <4 x i16> %380, <4 x i16>* %383, align 2
  %384 = getelementptr inbounds i16, i16* %382, i64 4
  %385 = bitcast i16* %384 to <4 x i16>*
  store <4 x i16> %381, <4 x i16>* %385, align 2
  br label %386

386:                                              ; preds = %365, %367
  br i1 %316, label %400, label %387

387:                                              ; preds = %386, %317
  %388 = phi i64 [ 0, %317 ], [ %311, %386 ]
  br label %389

389:                                              ; preds = %387, %389
  %390 = phi i64 [ %398, %389 ], [ %388, %387 ]
  %391 = getelementptr inbounds [24 x i32], [24 x i32]* %8, i64 0, i64 %390
  %392 = load i32, i32* %391, align 4
  %393 = lshr i32 %392, 4
  %394 = add nuw nsw i32 %393, 1
  %395 = lshr i32 %394, 1
  %396 = trunc i32 %395 to i16
  %397 = getelementptr inbounds i16, i16* %0, i64 %390
  store i16 %396, i16* %397, align 2
  %398 = add nuw nsw i64 %390, 1
  %399 = icmp eq i64 %398, %305
  br i1 %399, label %400, label %389, !llvm.loop !9

400:                                              ; preds = %389, %386
  %401 = add nuw nsw i32 %318, 1
  %402 = call i32 @silk_LPC_inverse_pred_gain_c(i16* %0, i32 %2) #4
  %403 = icmp eq i32 %402, 0
  %404 = icmp ult i32 %401, 16
  %405 = and i1 %404, %403
  br i1 %405, label %317, label %406

406:                                              ; preds = %400, %300
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %9) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_LPC_fit(i16*, i32*, i32, i32, i32) local_unnamed_addr #3

declare i32 @silk_LPC_inverse_pred_gain_c(i16*, i32) local_unnamed_addr #3

declare void @silk_bwexpander_32(i32*, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
