; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/mr_dissim.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/mr_dissim.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }
%struct.LOWER_RES_FRAME_INFO = type { i32, i32, i32, double, [4 x i32], i32, i32, i32, %struct.LOWER_RES_MB_INFO* }
%struct.LOWER_RES_MB_INFO = type { i32, i32, %union.int_mv, i32 }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_cal_low_res_mb_cols(%struct.VP8_COMP* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 59, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = mul nsw i32 %5, %3
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 59, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = add i32 %9, %6
  %11 = udiv i32 %10, %8
  %12 = add nsw i32 %11, 15
  %13 = ashr i32 %12, 4
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 215
  store i32 %13, i32* %14, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_cal_dissimilarity(%struct.VP8_COMP* readonly) local_unnamed_addr #2 {
  %2 = alloca [8 x i32], align 16
  %3 = alloca [8 x i32], align 16
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 57
  %5 = load i32, i32* %4, align 4
  %6 = icmp ugt i32 %5, 1
  br i1 %6, label %7, label %630

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 58
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %5, -1
  %11 = icmp ult i32 %9, %10
  br i1 %11, label %12, label %630

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 60
  %14 = bitcast i8** %13 to %struct.LOWER_RES_FRAME_INFO**
  %15 = load %struct.LOWER_RES_FRAME_INFO*, %struct.LOWER_RES_FRAME_INFO** %14, align 8
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %15, i64 0, i32 0
  store i32 %17, i32* %18, align 8
  %19 = load i32, i32* %16, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %630, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %15, i64 0, i32 1
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %15, i64 0, i32 4, i64 1
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 2
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %15, i64 0, i32 4, i64 2
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 3
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %15, i64 0, i32 4, i64 3
  store i32 %30, i32* %31, align 4
  %32 = load i32, i32* %16, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %630, label %34

34:                                               ; preds = %21
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 29
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %37 = load i32, i32* %36, align 4
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %630

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %15, i64 0, i32 8
  %41 = load %struct.LOWER_RES_MB_INFO*, %struct.LOWER_RES_MB_INFO** %40, align 8
  %42 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 40
  %43 = load %struct.modeinfo*, %struct.modeinfo** %42, align 8
  %44 = load i32, i32* %35, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %43, i64 %45
  %47 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %48 = bitcast [8 x i32]* %2 to i8*
  %49 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 0
  %50 = bitcast [8 x i32]* %3 to i8*
  %51 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0
  %52 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 37
  %53 = load i32, i32* %47, align 8
  %54 = bitcast [8 x i32]* %2 to i8*
  %55 = bitcast [8 x i32]* %3 to i8*
  br label %56

56:                                               ; preds = %39, %623
  %57 = phi i32 [ %37, %39 ], [ %624, %623 ]
  %58 = phi i32 [ %53, %39 ], [ %625, %623 ]
  %59 = phi %struct.LOWER_RES_MB_INFO* [ %41, %39 ], [ %626, %623 ]
  %60 = phi %struct.modeinfo* [ %46, %39 ], [ %627, %623 ]
  %61 = phi i32 [ 0, %39 ], [ %628, %623 ]
  %62 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %60, i64 1
  %63 = icmp sgt i32 %58, 0
  br i1 %63, label %64, label %623

64:                                               ; preds = %56, %603
  %65 = phi i32 [ %619, %603 ], [ %58, %56 ]
  %66 = phi %struct.modeinfo* [ %618, %603 ], [ %62, %56 ]
  %67 = phi %struct.LOWER_RES_MB_INFO* [ %616, %603 ], [ %59, %56 ]
  %68 = phi %struct.modeinfo* [ %66, %603 ], [ %60, %56 ]
  %69 = phi i32 [ %617, %603 ], [ 0, %56 ]
  %70 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 1, i32 0, i32 2
  %71 = load i8, i8* %70, align 2
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %603, label %73

73:                                               ; preds = %64
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %48) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %54, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %50) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 -86, i64 32, i1 false)
  %74 = load i32, i32* %35, align 4
  %75 = sext i32 %74 to i64
  %76 = sub nsw i64 0, %75
  %77 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %76
  %78 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %77, i64 -1
  %79 = load i32, i32* %52, align 8
  %80 = icmp eq i32 %79, 0
  %81 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %76, i32 0, i32 2
  %82 = load i8, i8* %81, align 2
  %83 = icmp ne i8 %82, 0
  br i1 %80, label %336, label %84

84:                                               ; preds = %73
  br i1 %83, label %85, label %105

85:                                               ; preds = %84
  %86 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %76, i32 0, i32 4
  %87 = bitcast %union.int_mv* %86 to %struct.MV*
  %88 = bitcast %union.int_mv* %86 to i16*
  %89 = load i16, i16* %88, align 4
  %90 = sext i16 %89 to i32
  store i32 %90, i32* %49, align 16
  %91 = getelementptr inbounds %struct.MV, %struct.MV* %87, i64 0, i32 1
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i32
  store i32 %93, i32* %51, align 16
  %94 = load i8, i8* %81, align 2
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = zext i8 %71 to i64
  %99 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %97, %100
  br i1 %101, label %105, label %102

102:                                              ; preds = %85
  %103 = sub nsw i32 0, %90
  store i32 %103, i32* %49, align 16
  %104 = sub nsw i32 0, %93
  store i32 %104, i32* %51, align 16
  br label %105

105:                                              ; preds = %102, %85, %84
  %106 = phi i32 [ 0, %84 ], [ 1, %85 ], [ 1, %102 ]
  %107 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 0, i32 0, i32 2
  %108 = load i8, i8* %107, align 2
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %136, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 0, i32 0, i32 4
  %112 = bitcast %union.int_mv* %111 to %struct.MV*
  %113 = bitcast %union.int_mv* %111 to i16*
  %114 = load i16, i16* %113, align 4
  %115 = sext i16 %114 to i32
  %116 = zext i32 %106 to i64
  %117 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %116
  store i32 %115, i32* %117, align 4
  %118 = getelementptr inbounds %struct.MV, %struct.MV* %112, i64 0, i32 1
  %119 = load i16, i16* %118, align 2
  %120 = sext i16 %119 to i32
  %121 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %116
  store i32 %120, i32* %121, align 4
  %122 = load i8, i8* %107, align 2
  %123 = zext i8 %122 to i64
  %124 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = load i8, i8* %70, align 2
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %125, %129
  br i1 %130, label %134, label %131

131:                                              ; preds = %110
  %132 = sub nsw i32 0, %115
  store i32 %132, i32* %117, align 4
  %133 = sub nsw i32 0, %120
  store i32 %133, i32* %121, align 4
  br label %134

134:                                              ; preds = %110, %131
  %135 = add nuw nsw i32 %106, 1
  br label %136

136:                                              ; preds = %105, %134
  %137 = phi i32 [ %135, %134 ], [ %106, %105 ]
  %138 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %78, i64 0, i32 0, i32 2
  %139 = load i8, i8* %138, align 2
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %167, label %141

141:                                              ; preds = %136
  %142 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %78, i64 0, i32 0, i32 4
  %143 = bitcast %union.int_mv* %142 to %struct.MV*
  %144 = bitcast %union.int_mv* %142 to i16*
  %145 = load i16, i16* %144, align 4
  %146 = sext i16 %145 to i32
  %147 = sext i32 %137 to i64
  %148 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %147
  store i32 %146, i32* %148, align 4
  %149 = getelementptr inbounds %struct.MV, %struct.MV* %143, i64 0, i32 1
  %150 = load i16, i16* %149, align 2
  %151 = sext i16 %150 to i32
  %152 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %147
  store i32 %151, i32* %152, align 4
  %153 = load i8, i8* %138, align 2
  %154 = zext i8 %153 to i64
  %155 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = load i8, i8* %70, align 2
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %156, %160
  br i1 %161, label %165, label %162

162:                                              ; preds = %141
  %163 = sub nsw i32 0, %146
  store i32 %163, i32* %148, align 4
  %164 = sub nsw i32 0, %151
  store i32 %164, i32* %152, align 4
  br label %165

165:                                              ; preds = %141, %162
  %166 = add nuw nsw i32 %137, 1
  br label %167

167:                                              ; preds = %136, %165
  %168 = phi i32 [ %166, %165 ], [ %137, %136 ]
  %169 = add nsw i32 %65, -1
  %170 = icmp slt i32 %69, %169
  br i1 %170, label %171, label %234

171:                                              ; preds = %167
  %172 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %77, i64 1
  %173 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 2, i32 0, i32 2
  %174 = load i8, i8* %173, align 2
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %202, label %176

176:                                              ; preds = %171
  %177 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 2, i32 0, i32 4
  %178 = bitcast %union.int_mv* %177 to %struct.MV*
  %179 = bitcast %union.int_mv* %177 to i16*
  %180 = load i16, i16* %179, align 4
  %181 = sext i16 %180 to i32
  %182 = sext i32 %168 to i64
  %183 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %182
  store i32 %181, i32* %183, align 4
  %184 = getelementptr inbounds %struct.MV, %struct.MV* %178, i64 0, i32 1
  %185 = load i16, i16* %184, align 2
  %186 = sext i16 %185 to i32
  %187 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %182
  store i32 %186, i32* %187, align 4
  %188 = load i8, i8* %173, align 2
  %189 = zext i8 %188 to i64
  %190 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = load i8, i8* %70, align 2
  %193 = zext i8 %192 to i64
  %194 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %193
  %195 = load i32, i32* %194, align 4
  %196 = icmp eq i32 %191, %195
  br i1 %196, label %200, label %197

197:                                              ; preds = %176
  %198 = sub nsw i32 0, %181
  store i32 %198, i32* %183, align 4
  %199 = sub nsw i32 0, %186
  store i32 %199, i32* %187, align 4
  br label %200

200:                                              ; preds = %176, %197
  %201 = add nuw nsw i32 %168, 1
  br label %202

202:                                              ; preds = %171, %200
  %203 = phi i32 [ %201, %200 ], [ %168, %171 ]
  %204 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %172, i64 0, i32 0
  %205 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %204, i64 0, i32 2
  %206 = load i8, i8* %205, align 2
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %234, label %208

208:                                              ; preds = %202
  %209 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %204, i64 0, i32 4
  %210 = bitcast %union.int_mv* %209 to %struct.MV*
  %211 = bitcast %union.int_mv* %209 to i16*
  %212 = load i16, i16* %211, align 4
  %213 = sext i16 %212 to i32
  %214 = sext i32 %203 to i64
  %215 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %214
  store i32 %213, i32* %215, align 4
  %216 = getelementptr inbounds %struct.MV, %struct.MV* %210, i64 0, i32 1
  %217 = load i16, i16* %216, align 2
  %218 = sext i16 %217 to i32
  %219 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %214
  store i32 %218, i32* %219, align 4
  %220 = load i8, i8* %205, align 2
  %221 = zext i8 %220 to i64
  %222 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = load i8, i8* %70, align 2
  %225 = zext i8 %224 to i64
  %226 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %225
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %223, %227
  br i1 %228, label %232, label %229

229:                                              ; preds = %208
  %230 = sub nsw i32 0, %213
  store i32 %230, i32* %215, align 4
  %231 = sub nsw i32 0, %218
  store i32 %231, i32* %219, align 4
  br label %232

232:                                              ; preds = %208, %229
  %233 = add nuw nsw i32 %203, 1
  br label %234

234:                                              ; preds = %202, %232, %167
  %235 = phi i32 [ %233, %232 ], [ %203, %202 ], [ %168, %167 ]
  %236 = load i32, i32* %36, align 4
  %237 = add nsw i32 %236, -1
  %238 = icmp slt i32 %61, %237
  br i1 %238, label %239, label %486

239:                                              ; preds = %234
  %240 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %75
  %241 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %240, i64 -1
  %242 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %75, i32 0, i32 2
  %243 = load i8, i8* %242, align 2
  %244 = icmp eq i8 %243, 0
  br i1 %244, label %271, label %245

245:                                              ; preds = %239
  %246 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %75, i32 0, i32 4
  %247 = bitcast %union.int_mv* %246 to %struct.MV*
  %248 = bitcast %union.int_mv* %246 to i16*
  %249 = load i16, i16* %248, align 4
  %250 = sext i16 %249 to i32
  %251 = sext i32 %235 to i64
  %252 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %251
  store i32 %250, i32* %252, align 4
  %253 = getelementptr inbounds %struct.MV, %struct.MV* %247, i64 0, i32 1
  %254 = load i16, i16* %253, align 2
  %255 = sext i16 %254 to i32
  %256 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %251
  store i32 %255, i32* %256, align 4
  %257 = load i8, i8* %242, align 2
  %258 = zext i8 %257 to i64
  %259 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %258
  %260 = load i32, i32* %259, align 4
  %261 = load i8, i8* %70, align 2
  %262 = zext i8 %261 to i64
  %263 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = icmp eq i32 %260, %264
  br i1 %265, label %269, label %266

266:                                              ; preds = %245
  %267 = sub nsw i32 0, %250
  store i32 %267, i32* %252, align 4
  %268 = sub nsw i32 0, %255
  store i32 %268, i32* %256, align 4
  br label %269

269:                                              ; preds = %245, %266
  %270 = add nuw nsw i32 %235, 1
  br label %271

271:                                              ; preds = %239, %269
  %272 = phi i32 [ %270, %269 ], [ %235, %239 ]
  %273 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %241, i64 0, i32 0
  %274 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %273, i64 0, i32 2
  %275 = load i8, i8* %274, align 2
  %276 = icmp eq i8 %275, 0
  br i1 %276, label %303, label %277

277:                                              ; preds = %271
  %278 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %273, i64 0, i32 4
  %279 = bitcast %union.int_mv* %278 to %struct.MV*
  %280 = bitcast %union.int_mv* %278 to i16*
  %281 = load i16, i16* %280, align 4
  %282 = sext i16 %281 to i32
  %283 = sext i32 %272 to i64
  %284 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %283
  store i32 %282, i32* %284, align 4
  %285 = getelementptr inbounds %struct.MV, %struct.MV* %279, i64 0, i32 1
  %286 = load i16, i16* %285, align 2
  %287 = sext i16 %286 to i32
  %288 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %283
  store i32 %287, i32* %288, align 4
  %289 = load i8, i8* %274, align 2
  %290 = zext i8 %289 to i64
  %291 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = load i8, i8* %70, align 2
  %294 = zext i8 %293 to i64
  %295 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %294
  %296 = load i32, i32* %295, align 4
  %297 = icmp eq i32 %292, %296
  br i1 %297, label %301, label %298

298:                                              ; preds = %277
  %299 = sub nsw i32 0, %282
  store i32 %299, i32* %284, align 4
  %300 = sub nsw i32 0, %287
  store i32 %300, i32* %288, align 4
  br label %301

301:                                              ; preds = %277, %298
  %302 = add nuw nsw i32 %272, 1
  br label %303

303:                                              ; preds = %271, %301
  %304 = phi i32 [ %302, %301 ], [ %272, %271 ]
  %305 = and i1 %170, %238
  br i1 %305, label %306, label %486

306:                                              ; preds = %303
  %307 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %240, i64 1, i32 0, i32 2
  %308 = load i8, i8* %307, align 2
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %486, label %310

310:                                              ; preds = %306
  %311 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %240, i64 1, i32 0, i32 4
  %312 = bitcast %union.int_mv* %311 to %struct.MV*
  %313 = bitcast %union.int_mv* %311 to i16*
  %314 = load i16, i16* %313, align 4
  %315 = sext i16 %314 to i32
  %316 = sext i32 %304 to i64
  %317 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %316
  store i32 %315, i32* %317, align 4
  %318 = getelementptr inbounds %struct.MV, %struct.MV* %312, i64 0, i32 1
  %319 = load i16, i16* %318, align 2
  %320 = sext i16 %319 to i32
  %321 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %316
  store i32 %320, i32* %321, align 4
  %322 = load i8, i8* %307, align 2
  %323 = zext i8 %322 to i64
  %324 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %323
  %325 = load i32, i32* %324, align 4
  %326 = load i8, i8* %70, align 2
  %327 = zext i8 %326 to i64
  %328 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %327
  %329 = load i32, i32* %328, align 4
  %330 = icmp eq i32 %325, %329
  br i1 %330, label %334, label %331

331:                                              ; preds = %310
  %332 = sub nsw i32 0, %315
  store i32 %332, i32* %317, align 4
  %333 = sub nsw i32 0, %320
  store i32 %333, i32* %321, align 4
  br label %334

334:                                              ; preds = %310, %331
  %335 = add nuw nsw i32 %304, 1
  br label %489

336:                                              ; preds = %73
  br i1 %83, label %337, label %346

337:                                              ; preds = %336
  %338 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %76, i32 0, i32 4
  %339 = bitcast %union.int_mv* %338 to %struct.MV*
  %340 = bitcast %union.int_mv* %338 to i16*
  %341 = load i16, i16* %340, align 4
  %342 = sext i16 %341 to i32
  store i32 %342, i32* %49, align 16
  %343 = getelementptr inbounds %struct.MV, %struct.MV* %339, i64 0, i32 1
  %344 = load i16, i16* %343, align 2
  %345 = sext i16 %344 to i32
  store i32 %345, i32* %51, align 16
  br label %346

346:                                              ; preds = %337, %336
  %347 = phi i32 [ 1, %337 ], [ 0, %336 ]
  %348 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 0, i32 0, i32 2
  %349 = load i8, i8* %348, align 2
  %350 = icmp eq i8 %349, 0
  br i1 %350, label %364, label %351

351:                                              ; preds = %346
  %352 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 0, i32 0, i32 4
  %353 = bitcast %union.int_mv* %352 to %struct.MV*
  %354 = bitcast %union.int_mv* %352 to i16*
  %355 = load i16, i16* %354, align 4
  %356 = sext i16 %355 to i32
  %357 = zext i32 %347 to i64
  %358 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %357
  store i32 %356, i32* %358, align 4
  %359 = getelementptr inbounds %struct.MV, %struct.MV* %353, i64 0, i32 1
  %360 = load i16, i16* %359, align 2
  %361 = sext i16 %360 to i32
  %362 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %357
  store i32 %361, i32* %362, align 4
  %363 = add nuw nsw i32 %347, 1
  br label %364

364:                                              ; preds = %346, %351
  %365 = phi i32 [ %363, %351 ], [ %347, %346 ]
  %366 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %78, i64 0, i32 0, i32 2
  %367 = load i8, i8* %366, align 2
  %368 = icmp eq i8 %367, 0
  br i1 %368, label %382, label %369

369:                                              ; preds = %364
  %370 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %78, i64 0, i32 0, i32 4
  %371 = bitcast %union.int_mv* %370 to %struct.MV*
  %372 = bitcast %union.int_mv* %370 to i16*
  %373 = load i16, i16* %372, align 4
  %374 = sext i16 %373 to i32
  %375 = sext i32 %365 to i64
  %376 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %375
  store i32 %374, i32* %376, align 4
  %377 = getelementptr inbounds %struct.MV, %struct.MV* %371, i64 0, i32 1
  %378 = load i16, i16* %377, align 2
  %379 = sext i16 %378 to i32
  %380 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %375
  store i32 %379, i32* %380, align 4
  %381 = add nuw nsw i32 %365, 1
  br label %382

382:                                              ; preds = %364, %369
  %383 = phi i32 [ %381, %369 ], [ %365, %364 ]
  %384 = add nsw i32 %65, -1
  %385 = icmp slt i32 %69, %384
  br i1 %385, label %386, label %423

386:                                              ; preds = %382
  %387 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %77, i64 1
  %388 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 2, i32 0, i32 2
  %389 = load i8, i8* %388, align 2
  %390 = icmp eq i8 %389, 0
  br i1 %390, label %404, label %391

391:                                              ; preds = %386
  %392 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 2, i32 0, i32 4
  %393 = bitcast %union.int_mv* %392 to %struct.MV*
  %394 = bitcast %union.int_mv* %392 to i16*
  %395 = load i16, i16* %394, align 4
  %396 = sext i16 %395 to i32
  %397 = sext i32 %383 to i64
  %398 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %397
  store i32 %396, i32* %398, align 4
  %399 = getelementptr inbounds %struct.MV, %struct.MV* %393, i64 0, i32 1
  %400 = load i16, i16* %399, align 2
  %401 = sext i16 %400 to i32
  %402 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %397
  store i32 %401, i32* %402, align 4
  %403 = add nuw nsw i32 %383, 1
  br label %404

404:                                              ; preds = %386, %391
  %405 = phi i32 [ %403, %391 ], [ %383, %386 ]
  %406 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %387, i64 0, i32 0
  %407 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %406, i64 0, i32 2
  %408 = load i8, i8* %407, align 2
  %409 = icmp eq i8 %408, 0
  br i1 %409, label %423, label %410

410:                                              ; preds = %404
  %411 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %406, i64 0, i32 4
  %412 = bitcast %union.int_mv* %411 to %struct.MV*
  %413 = bitcast %union.int_mv* %411 to i16*
  %414 = load i16, i16* %413, align 4
  %415 = sext i16 %414 to i32
  %416 = sext i32 %405 to i64
  %417 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %416
  store i32 %415, i32* %417, align 4
  %418 = getelementptr inbounds %struct.MV, %struct.MV* %412, i64 0, i32 1
  %419 = load i16, i16* %418, align 2
  %420 = sext i16 %419 to i32
  %421 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %416
  store i32 %420, i32* %421, align 4
  %422 = add nuw nsw i32 %405, 1
  br label %423

423:                                              ; preds = %404, %410, %382
  %424 = phi i32 [ %422, %410 ], [ %405, %404 ], [ %383, %382 ]
  %425 = load i32, i32* %36, align 4
  %426 = add nsw i32 %425, -1
  %427 = icmp slt i32 %61, %426
  br i1 %427, label %428, label %486

428:                                              ; preds = %423
  %429 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %75
  %430 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %429, i64 -1
  %431 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %75, i32 0, i32 2
  %432 = load i8, i8* %431, align 2
  %433 = icmp eq i8 %432, 0
  br i1 %433, label %447, label %434

434:                                              ; preds = %428
  %435 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 %75, i32 0, i32 4
  %436 = bitcast %union.int_mv* %435 to %struct.MV*
  %437 = bitcast %union.int_mv* %435 to i16*
  %438 = load i16, i16* %437, align 4
  %439 = sext i16 %438 to i32
  %440 = sext i32 %424 to i64
  %441 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %440
  store i32 %439, i32* %441, align 4
  %442 = getelementptr inbounds %struct.MV, %struct.MV* %436, i64 0, i32 1
  %443 = load i16, i16* %442, align 2
  %444 = sext i16 %443 to i32
  %445 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %440
  store i32 %444, i32* %445, align 4
  %446 = add nuw nsw i32 %424, 1
  br label %447

447:                                              ; preds = %428, %434
  %448 = phi i32 [ %446, %434 ], [ %424, %428 ]
  %449 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %430, i64 0, i32 0
  %450 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %449, i64 0, i32 2
  %451 = load i8, i8* %450, align 2
  %452 = icmp eq i8 %451, 0
  br i1 %452, label %466, label %453

453:                                              ; preds = %447
  %454 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %449, i64 0, i32 4
  %455 = bitcast %union.int_mv* %454 to %struct.MV*
  %456 = bitcast %union.int_mv* %454 to i16*
  %457 = load i16, i16* %456, align 4
  %458 = sext i16 %457 to i32
  %459 = sext i32 %448 to i64
  %460 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %459
  store i32 %458, i32* %460, align 4
  %461 = getelementptr inbounds %struct.MV, %struct.MV* %455, i64 0, i32 1
  %462 = load i16, i16* %461, align 2
  %463 = sext i16 %462 to i32
  %464 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %459
  store i32 %463, i32* %464, align 4
  %465 = add nuw nsw i32 %448, 1
  br label %466

466:                                              ; preds = %447, %453
  %467 = phi i32 [ %465, %453 ], [ %448, %447 ]
  %468 = and i1 %385, %427
  br i1 %468, label %469, label %486

469:                                              ; preds = %466
  %470 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %429, i64 1, i32 0, i32 2
  %471 = load i8, i8* %470, align 2
  %472 = icmp eq i8 %471, 0
  br i1 %472, label %486, label %473

473:                                              ; preds = %469
  %474 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %429, i64 1, i32 0, i32 4
  %475 = bitcast %union.int_mv* %474 to %struct.MV*
  %476 = bitcast %union.int_mv* %474 to i16*
  %477 = load i16, i16* %476, align 4
  %478 = sext i16 %477 to i32
  %479 = sext i32 %467 to i64
  %480 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %479
  store i32 %478, i32* %480, align 4
  %481 = getelementptr inbounds %struct.MV, %struct.MV* %475, i64 0, i32 1
  %482 = load i16, i16* %481, align 2
  %483 = sext i16 %482 to i32
  %484 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %479
  store i32 %483, i32* %484, align 4
  %485 = add nuw nsw i32 %467, 1
  br label %489

486:                                              ; preds = %423, %234, %466, %303, %306, %469
  %487 = phi i32 [ %304, %306 ], [ %304, %303 ], [ %467, %469 ], [ %467, %466 ], [ %235, %234 ], [ %424, %423 ]
  %488 = icmp sgt i32 %487, 0
  br i1 %488, label %489, label %601

489:                                              ; preds = %473, %334, %486
  %490 = phi i32 [ %487, %486 ], [ %485, %473 ], [ %335, %334 ]
  %491 = load i32, i32* %49, align 16
  %492 = load i32, i32* %51, align 16
  %493 = icmp sgt i32 %490, 1
  br i1 %493, label %494, label %566

494:                                              ; preds = %489
  %495 = zext i32 %490 to i64
  %496 = add nsw i64 %495, -1
  %497 = and i64 %496, 1
  %498 = icmp eq i32 %490, 2
  br i1 %498, label %540, label %499

499:                                              ; preds = %494
  %500 = sub nsw i64 %496, %497
  br label %501

501:                                              ; preds = %501, %499
  %502 = phi i64 [ 1, %499 ], [ %537, %501 ]
  %503 = phi i32 [ %492, %499 ], [ %536, %501 ]
  %504 = phi i32 [ %492, %499 ], [ %535, %501 ]
  %505 = phi i32 [ %491, %499 ], [ %529, %501 ]
  %506 = phi i32 [ %491, %499 ], [ %528, %501 ]
  %507 = phi i64 [ %500, %499 ], [ %538, %501 ]
  %508 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %502
  %509 = load i32, i32* %508, align 4
  %510 = icmp sgt i32 %509, %506
  %511 = icmp slt i32 %509, %505
  %512 = select i1 %511, i32 %509, i32 %505
  %513 = select i1 %510, i32 %509, i32 %506
  %514 = select i1 %510, i32 %505, i32 %512
  %515 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %502
  %516 = load i32, i32* %515, align 4
  %517 = icmp sgt i32 %516, %504
  %518 = icmp slt i32 %516, %503
  %519 = select i1 %518, i32 %516, i32 %503
  %520 = select i1 %517, i32 %516, i32 %504
  %521 = select i1 %517, i32 %503, i32 %519
  %522 = add nuw nsw i64 %502, 1
  %523 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %522
  %524 = load i32, i32* %523, align 4
  %525 = icmp sgt i32 %524, %513
  %526 = icmp slt i32 %524, %514
  %527 = select i1 %526, i32 %524, i32 %514
  %528 = select i1 %525, i32 %524, i32 %513
  %529 = select i1 %525, i32 %514, i32 %527
  %530 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %522
  %531 = load i32, i32* %530, align 4
  %532 = icmp sgt i32 %531, %520
  %533 = icmp slt i32 %531, %521
  %534 = select i1 %533, i32 %531, i32 %521
  %535 = select i1 %532, i32 %531, i32 %520
  %536 = select i1 %532, i32 %521, i32 %534
  %537 = add nuw nsw i64 %502, 2
  %538 = add i64 %507, -2
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %540, label %501

540:                                              ; preds = %501, %494
  %541 = phi i32 [ undef, %494 ], [ %528, %501 ]
  %542 = phi i32 [ undef, %494 ], [ %529, %501 ]
  %543 = phi i32 [ undef, %494 ], [ %535, %501 ]
  %544 = phi i32 [ undef, %494 ], [ %536, %501 ]
  %545 = phi i64 [ 1, %494 ], [ %537, %501 ]
  %546 = phi i32 [ %492, %494 ], [ %536, %501 ]
  %547 = phi i32 [ %492, %494 ], [ %535, %501 ]
  %548 = phi i32 [ %491, %494 ], [ %529, %501 ]
  %549 = phi i32 [ %491, %494 ], [ %528, %501 ]
  %550 = icmp eq i64 %497, 0
  br i1 %550, label %566, label %551

551:                                              ; preds = %540
  %552 = getelementptr inbounds [8 x i32], [8 x i32]* %2, i64 0, i64 %545
  %553 = load i32, i32* %552, align 4
  %554 = icmp sgt i32 %553, %549
  %555 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %545
  %556 = load i32, i32* %555, align 4
  %557 = icmp sgt i32 %556, %547
  %558 = icmp slt i32 %556, %546
  %559 = select i1 %558, i32 %556, i32 %546
  %560 = select i1 %557, i32 %546, i32 %559
  %561 = select i1 %557, i32 %556, i32 %547
  %562 = icmp slt i32 %553, %548
  %563 = select i1 %562, i32 %553, i32 %548
  %564 = select i1 %554, i32 %548, i32 %563
  %565 = select i1 %554, i32 %553, i32 %549
  br label %566

566:                                              ; preds = %551, %540, %489
  %567 = phi i32 [ %491, %489 ], [ %541, %540 ], [ %565, %551 ]
  %568 = phi i32 [ %491, %489 ], [ %542, %540 ], [ %564, %551 ]
  %569 = phi i32 [ %492, %489 ], [ %543, %540 ], [ %561, %551 ]
  %570 = phi i32 [ %492, %489 ], [ %544, %540 ], [ %560, %551 ]
  %571 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 1, i32 0, i32 4
  %572 = bitcast %union.int_mv* %571 to %struct.MV*
  %573 = bitcast %union.int_mv* %571 to i16*
  %574 = load i16, i16* %573, align 4
  %575 = sext i16 %574 to i32
  %576 = sub nsw i32 %568, %575
  %577 = icmp slt i32 %576, 0
  %578 = sub nsw i32 0, %576
  %579 = select i1 %577, i32 %578, i32 %576
  %580 = sub nsw i32 %567, %575
  %581 = icmp slt i32 %580, 0
  %582 = sub nsw i32 0, %580
  %583 = select i1 %581, i32 %582, i32 %580
  %584 = icmp sgt i32 %579, %583
  %585 = select i1 %584, i32 %579, i32 %583
  %586 = getelementptr inbounds %struct.MV, %struct.MV* %572, i64 0, i32 1
  %587 = load i16, i16* %586, align 2
  %588 = sext i16 %587 to i32
  %589 = sub nsw i32 %570, %588
  %590 = icmp slt i32 %589, 0
  %591 = sub nsw i32 0, %589
  %592 = select i1 %590, i32 %591, i32 %589
  %593 = sub nsw i32 %569, %588
  %594 = icmp slt i32 %593, 0
  %595 = sub nsw i32 0, %593
  %596 = select i1 %594, i32 %595, i32 %593
  %597 = icmp sgt i32 %592, %596
  %598 = select i1 %597, i32 %592, i32 %596
  %599 = icmp ugt i32 %585, %598
  %600 = select i1 %599, i32 %585, i32 %598
  br label %601

601:                                              ; preds = %566, %486
  %602 = phi i32 [ %600, %566 ], [ 2147483647, %486 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %50) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %48) #3
  br label %603

603:                                              ; preds = %64, %601
  %604 = phi i32 [ %602, %601 ], [ 2147483647, %64 ]
  %605 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 0, i32 0, i32 0
  %606 = load i8, i8* %605, align 4
  %607 = zext i8 %606 to i32
  %608 = getelementptr inbounds %struct.LOWER_RES_MB_INFO, %struct.LOWER_RES_MB_INFO* %67, i64 0, i32 0
  store i32 %607, i32* %608, align 4
  %609 = load i8, i8* %70, align 2
  %610 = zext i8 %609 to i32
  %611 = getelementptr inbounds %struct.LOWER_RES_MB_INFO, %struct.LOWER_RES_MB_INFO* %67, i64 0, i32 1
  store i32 %610, i32* %611, align 4
  %612 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %68, i64 1, i32 0, i32 4, i32 0
  %613 = load i32, i32* %612, align 4
  %614 = getelementptr inbounds %struct.LOWER_RES_MB_INFO, %struct.LOWER_RES_MB_INFO* %67, i64 0, i32 2, i32 0
  store i32 %613, i32* %614, align 4
  %615 = getelementptr inbounds %struct.LOWER_RES_MB_INFO, %struct.LOWER_RES_MB_INFO* %67, i64 0, i32 3
  store i32 %604, i32* %615, align 4
  %616 = getelementptr inbounds %struct.LOWER_RES_MB_INFO, %struct.LOWER_RES_MB_INFO* %67, i64 1
  %617 = add nuw nsw i32 %69, 1
  %618 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %66, i64 1
  %619 = load i32, i32* %47, align 8
  %620 = icmp slt i32 %617, %619
  br i1 %620, label %64, label %621

621:                                              ; preds = %603
  %622 = load i32, i32* %36, align 4
  br label %623

623:                                              ; preds = %621, %56
  %624 = phi i32 [ %57, %56 ], [ %622, %621 ]
  %625 = phi i32 [ %58, %56 ], [ %619, %621 ]
  %626 = phi %struct.LOWER_RES_MB_INFO* [ %59, %56 ], [ %616, %621 ]
  %627 = phi %struct.modeinfo* [ %62, %56 ], [ %618, %621 ]
  %628 = add nuw nsw i32 %61, 1
  %629 = icmp slt i32 %628, %624
  br i1 %629, label %56, label %630

630:                                              ; preds = %623, %34, %12, %21, %7, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_store_drop_frame_info(%struct.VP8_COMP* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 57
  %3 = load i32, i32* %2, align 4
  %4 = icmp ugt i32 %3, 1
  br i1 %4, label %5, label %16

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 58
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %3, -1
  %9 = icmp ult i32 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 60
  %12 = bitcast i8** %11 to %struct.LOWER_RES_FRAME_INFO**
  %13 = load %struct.LOWER_RES_FRAME_INFO*, %struct.LOWER_RES_FRAME_INFO** %12, align 8
  %14 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %13, i64 0, i32 0
  store i32 1, i32* %14, align 8
  %15 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %13, i64 0, i32 1
  store i32 1, i32* %15, align 4
  br label %16

16:                                               ; preds = %10, %5, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
