; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/encodetxb_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/encodetxb_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_txb_init_levels_avx2(i32* nocapture readonly, i32, i32, i8*) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %3 to i64
  %6 = add nsw i32 %1, 4
  %7 = shl i32 %6, 2
  %8 = add nsw i32 %2, 4
  %9 = mul nsw i32 %8, %6
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %3, i64 %10
  %12 = add nsw i32 %7, 31
  %13 = and i32 %12, -32
  %14 = sext i32 %13 to i64
  %15 = sub nsw i64 0, %14
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  %17 = add nsw i64 %10, 32
  %18 = sub nsw i64 %17, %14
  %19 = getelementptr i8, i8* %3, i64 %18
  %20 = icmp ugt i8* %19, %11
  %21 = select i1 %20, i8* %19, i8* %11
  %22 = xor i64 %5, -1
  %23 = add i64 %22, %14
  %24 = sub i64 %23, %10
  %25 = getelementptr i8, i8* %21, i64 %24
  %26 = ptrtoint i8* %25 to i64
  %27 = add i64 %26, 32
  %28 = and i64 %27, -32
  call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 0, i64 %28, i1 false)
  switch i32 %1, label %40 [
    i32 4, label %43
    i32 8, label %33
    i32 16, label %29
  ]

29:                                               ; preds = %4
  %30 = sext i32 %6 to i64
  %31 = shl i32 %6, 1
  %32 = sext i32 %31 to i64
  br label %126

33:                                               ; preds = %4
  %34 = sext i32 %6 to i64
  %35 = shl nsw i32 %6, 1
  %36 = sext i32 %35 to i64
  %37 = mul nsw i32 %6, 3
  %38 = sext i32 %37 to i64
  %39 = sext i32 %7 to i64
  br label %66

40:                                               ; preds = %4
  %41 = sext i32 %1 to i64
  %42 = sext i32 %6 to i64
  br label %168

43:                                               ; preds = %4, %43
  %44 = phi i32* [ %63, %43 ], [ %0, %4 ]
  %45 = phi i8* [ %62, %43 ], [ %3, %4 ]
  %46 = phi i32 [ %64, %43 ], [ 0, %4 ]
  %47 = bitcast i32* %44 to <8 x i32>*
  %48 = load <8 x i32>, <8 x i32>* %47, align 1
  %49 = getelementptr inbounds i32, i32* %44, i64 8
  %50 = bitcast i32* %49 to <8 x i32>*
  %51 = load <8 x i32>, <8 x i32>* %50, align 1
  %52 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %48, <8 x i32> %51) #3
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = tail call <32 x i8> @llvm.x86.avx2.packsswb(<16 x i16> %55, <16 x i16> zeroinitializer) #3
  %57 = bitcast <32 x i8> %56 to <8 x i32>
  %58 = shufflevector <8 x i32> %57, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %59 = bitcast <8 x i32> %58 to <4 x i64>
  %60 = shufflevector <4 x i64> %59, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %61 = bitcast i8* %45 to <4 x i64>*
  store <4 x i64> %60, <4 x i64>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %45, i64 32
  %63 = getelementptr inbounds i32, i32* %44, i64 16
  %64 = add nuw nsw i32 %46, 4
  %65 = icmp slt i32 %64, %2
  br i1 %65, label %43, label %203

66:                                               ; preds = %33, %66
  %67 = phi i32* [ %122, %66 ], [ %0, %33 ]
  %68 = phi i8* [ %123, %66 ], [ %3, %33 ]
  %69 = phi i32 [ %124, %66 ], [ 0, %33 ]
  %70 = bitcast i32* %67 to <8 x i32>*
  %71 = load <8 x i32>, <8 x i32>* %70, align 1
  %72 = getelementptr inbounds i32, i32* %67, i64 8
  %73 = bitcast i32* %72 to <8 x i32>*
  %74 = load <8 x i32>, <8 x i32>* %73, align 1
  %75 = getelementptr inbounds i32, i32* %67, i64 16
  %76 = bitcast i32* %75 to <8 x i32>*
  %77 = load <8 x i32>, <8 x i32>* %76, align 1
  %78 = getelementptr inbounds i32, i32* %67, i64 24
  %79 = bitcast i32* %78 to <8 x i32>*
  %80 = load <8 x i32>, <8 x i32>* %79, align 1
  %81 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %71, <8 x i32> %74) #3
  %82 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %77, <8 x i32> %80) #3
  %83 = sub <16 x i16> zeroinitializer, %81
  %84 = icmp slt <16 x i16> %81, zeroinitializer
  %85 = select <16 x i1> %84, <16 x i16> %83, <16 x i16> %81
  %86 = sub <16 x i16> zeroinitializer, %82
  %87 = icmp slt <16 x i16> %82, zeroinitializer
  %88 = select <16 x i1> %87, <16 x i16> %86, <16 x i16> %82
  %89 = tail call <32 x i8> @llvm.x86.avx2.packsswb(<16 x i16> %85, <16 x i16> %88) #3
  %90 = bitcast <32 x i8> %89 to <4 x i64>
  %91 = shufflevector <4 x i64> %90, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %92 = bitcast <4 x i64> %91 to <8 x i32>
  %93 = shufflevector <8 x i32> %92, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %94 = bitcast <8 x i32> %93 to <4 x i64>
  %95 = shufflevector <4 x i64> %94, <4 x i64> undef, <2 x i32> <i32 undef, i32 1>
  %96 = shufflevector <4 x i64> %94, <4 x i64> undef, <2 x i32> <i32 undef, i32 3>
  %97 = extractelement <4 x i64> %94, i32 0
  %98 = bitcast i8* %68 to i64*
  store i64 %97, i64* %98, align 1
  %99 = getelementptr inbounds i8, i8* %68, i64 8
  %100 = bitcast i8* %99 to i32*
  store i32 0, i32* %100, align 4
  %101 = getelementptr inbounds i8, i8* %68, i64 %34
  %102 = bitcast <2 x i64> %95 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast <16 x i8> %103 to <2 x i64>
  %105 = extractelement <2 x i64> %104, i32 0
  %106 = bitcast i8* %101 to i64*
  store i64 %105, i64* %106, align 1
  %107 = getelementptr inbounds i8, i8* %99, i64 %34
  %108 = bitcast i8* %107 to i32*
  store i32 0, i32* %108, align 4
  %109 = getelementptr inbounds i8, i8* %68, i64 %36
  %110 = extractelement <4 x i64> %94, i32 2
  %111 = bitcast i8* %109 to i64*
  store i64 %110, i64* %111, align 1
  %112 = getelementptr inbounds i8, i8* %99, i64 %36
  %113 = bitcast i8* %112 to i32*
  store i32 0, i32* %113, align 4
  %114 = getelementptr inbounds i8, i8* %68, i64 %38
  %115 = bitcast <2 x i64> %96 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %117 = bitcast <16 x i8> %116 to <2 x i64>
  %118 = extractelement <2 x i64> %117, i32 0
  %119 = bitcast i8* %114 to i64*
  store i64 %118, i64* %119, align 1
  %120 = getelementptr inbounds i8, i8* %99, i64 %38
  %121 = bitcast i8* %120 to i32*
  store i32 0, i32* %121, align 4
  %122 = getelementptr inbounds i32, i32* %67, i64 32
  %123 = getelementptr inbounds i8, i8* %68, i64 %39
  %124 = add nuw nsw i32 %69, 4
  %125 = icmp slt i32 %124, %2
  br i1 %125, label %66, label %203

126:                                              ; preds = %29, %126
  %127 = phi i32* [ %160, %126 ], [ %0, %29 ]
  %128 = phi i8* [ %165, %126 ], [ %3, %29 ]
  %129 = phi i32 [ %166, %126 ], [ 0, %29 ]
  %130 = bitcast i32* %127 to <8 x i32>*
  %131 = load <8 x i32>, <8 x i32>* %130, align 1
  %132 = getelementptr inbounds i32, i32* %127, i64 8
  %133 = bitcast i32* %132 to <8 x i32>*
  %134 = load <8 x i32>, <8 x i32>* %133, align 1
  %135 = getelementptr inbounds i32, i32* %127, i64 16
  %136 = bitcast i32* %135 to <8 x i32>*
  %137 = load <8 x i32>, <8 x i32>* %136, align 1
  %138 = getelementptr inbounds i32, i32* %127, i64 24
  %139 = bitcast i32* %138 to <8 x i32>*
  %140 = load <8 x i32>, <8 x i32>* %139, align 1
  %141 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %131, <8 x i32> %134) #3
  %142 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %137, <8 x i32> %140) #3
  %143 = sub <16 x i16> zeroinitializer, %141
  %144 = icmp slt <16 x i16> %141, zeroinitializer
  %145 = select <16 x i1> %144, <16 x i16> %143, <16 x i16> %141
  %146 = sub <16 x i16> zeroinitializer, %142
  %147 = icmp slt <16 x i16> %142, zeroinitializer
  %148 = select <16 x i1> %147, <16 x i16> %146, <16 x i16> %142
  %149 = tail call <32 x i8> @llvm.x86.avx2.packsswb(<16 x i16> %145, <16 x i16> %148) #3
  %150 = bitcast <32 x i8> %149 to <4 x i64>
  %151 = shufflevector <4 x i64> %150, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %152 = bitcast <4 x i64> %151 to <8 x i32>
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %154 = bitcast <8 x i32> %153 to <4 x i64>
  %155 = shufflevector <4 x i64> %154, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %156 = bitcast i8* %128 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %156, align 1
  %157 = getelementptr inbounds i8, i8* %128, i64 %30
  %158 = shufflevector <4 x i64> %154, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %159 = bitcast i8* %157 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %159, align 1
  %160 = getelementptr inbounds i32, i32* %127, i64 32
  %161 = getelementptr inbounds i8, i8* %128, i64 16
  %162 = bitcast i8* %161 to i32*
  store i32 0, i32* %162, align 4
  %163 = getelementptr inbounds i8, i8* %157, i64 16
  %164 = bitcast i8* %163 to i32*
  store i32 0, i32* %164, align 4
  %165 = getelementptr inbounds i8, i8* %128, i64 %32
  %166 = add nuw nsw i32 %129, 2
  %167 = icmp slt i32 %166, %2
  br i1 %167, label %126, label %203

168:                                              ; preds = %40, %168
  %169 = phi i32* [ %197, %168 ], [ %0, %40 ]
  %170 = phi i8* [ %200, %168 ], [ %3, %40 ]
  %171 = phi i32 [ %201, %168 ], [ 0, %40 ]
  %172 = bitcast i32* %169 to <8 x i32>*
  %173 = load <8 x i32>, <8 x i32>* %172, align 1
  %174 = getelementptr inbounds i32, i32* %169, i64 8
  %175 = bitcast i32* %174 to <8 x i32>*
  %176 = load <8 x i32>, <8 x i32>* %175, align 1
  %177 = getelementptr inbounds i32, i32* %169, i64 16
  %178 = bitcast i32* %177 to <8 x i32>*
  %179 = load <8 x i32>, <8 x i32>* %178, align 1
  %180 = getelementptr inbounds i32, i32* %169, i64 24
  %181 = bitcast i32* %180 to <8 x i32>*
  %182 = load <8 x i32>, <8 x i32>* %181, align 1
  %183 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %173, <8 x i32> %176) #3
  %184 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %179, <8 x i32> %182) #3
  %185 = sub <16 x i16> zeroinitializer, %183
  %186 = icmp slt <16 x i16> %183, zeroinitializer
  %187 = select <16 x i1> %186, <16 x i16> %185, <16 x i16> %183
  %188 = sub <16 x i16> zeroinitializer, %184
  %189 = icmp slt <16 x i16> %184, zeroinitializer
  %190 = select <16 x i1> %189, <16 x i16> %188, <16 x i16> %184
  %191 = tail call <32 x i8> @llvm.x86.avx2.packsswb(<16 x i16> %187, <16 x i16> %190) #3
  %192 = bitcast <32 x i8> %191 to <4 x i64>
  %193 = shufflevector <4 x i64> %192, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %194 = bitcast <4 x i64> %193 to <8 x i32>
  %195 = shufflevector <8 x i32> %194, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %196 = bitcast i8* %170 to <8 x i32>*
  store <8 x i32> %195, <8 x i32>* %196, align 1
  %197 = getelementptr inbounds i32, i32* %169, i64 32
  %198 = getelementptr inbounds i8, i8* %170, i64 %41
  %199 = bitcast i8* %198 to i32*
  store i32 0, i32* %199, align 4
  %200 = getelementptr inbounds i8, i8* %170, i64 %42
  %201 = add nuw nsw i32 %171, 1
  %202 = icmp slt i32 %201, %2
  br i1 %202, label %168, label %203

203:                                              ; preds = %126, %66, %43, %168
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #1

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packsswb(<16 x i16>, <16 x i16>) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
