; ModuleID = '../../third_party/libgav1/src/src/utils/entropy_decoder.cc'
source_filename = "../../third_party/libgav1/src/src/utils/entropy_decoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.libgav1::DaalaBitReader" = type { %"class.libgav1::BitReader", i8*, i8*, i8*, i8, i32, i32, i64 }
%"class.libgav1::BitReader" = type { i32 (...)** }

$_ZN7libgav114DaalaBitReader10ReadSymbolILi3EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi4EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi5EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi6EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi7EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi8EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi9EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi10EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi11EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi12EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi13EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi14EEEiPt = comdat any

$_ZN7libgav114DaalaBitReader10ReadSymbolILi16EEEiPt = comdat any

$_ZN7libgav114DaalaBitReaderD0Ev = comdat any

$_ZN7libgav19BitReaderD2Ev = comdat any

@_ZN7libgav114DaalaBitReader11kWindowSizeE = hidden local_unnamed_addr constant i32 64, align 4
@_ZTVN7libgav114DaalaBitReaderE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.libgav1::BitReader"*)* @_ZN7libgav19BitReaderD2Ev to i8*), i8* bitcast (void (%"class.libgav1::DaalaBitReader"*)* @_ZN7libgav114DaalaBitReaderD0Ev to i8*), i8* bitcast (i32 (%"class.libgav1::DaalaBitReader"*)* @_ZN7libgav114DaalaBitReader7ReadBitEv to i8*), i8* bitcast (i64 (%"class.libgav1::DaalaBitReader"*, i32)* @_ZN7libgav114DaalaBitReader11ReadLiteralEi to i8*)] }, align 8

@_ZN7libgav114DaalaBitReaderC1EPKhmb = hidden unnamed_addr alias void (%"class.libgav1::DaalaBitReader"*, i8*, i64, i1), void (%"class.libgav1::DaalaBitReader"*, i8*, i64, i1)* @_ZN7libgav114DaalaBitReaderC2EPKhmb

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi3EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = load i16, i16* %1, align 2
  %14 = lshr i16 %13, 6
  %15 = zext i16 %14 to i32
  %16 = mul i32 %12, %15
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 8
  %19 = and i32 %11, 65535
  %20 = icmp ult i32 %19, %18
  br i1 %20, label %44, label %21

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %23 = load i8, i8* %22, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %95, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i16, i16* %1, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = icmp ult i16 %27, 32
  %29 = zext i1 %28 to i16
  %30 = add i16 %27, %29
  store i16 %30, i16* %26, align 2
  %31 = lshr i16 %27, 4
  %32 = add nuw nsw i16 %31, 4
  %33 = zext i16 %32 to i32
  %34 = zext i16 %13 to i32
  %35 = lshr i32 %34, %33
  %36 = trunc i32 %35 to i16
  %37 = sub i16 %13, %36
  store i16 %37, i16* %1, align 2
  %38 = getelementptr inbounds i16, i16* %1, i64 1
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = lshr i32 %40, %33
  %42 = trunc i32 %41 to i16
  %43 = sub i16 %39, %42
  store i16 %43, i16* %38, align 2
  br label %95

44:                                               ; preds = %2
  %45 = getelementptr inbounds i16, i16* %1, i64 1
  %46 = load i16, i16* %45, align 2
  %47 = lshr i16 %46, 6
  %48 = zext i16 %47 to i32
  %49 = mul i32 %12, %48
  %50 = lshr i32 %49, 1
  %51 = add nuw i32 %50, 4
  %52 = icmp ult i32 %19, %51
  %53 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = icmp eq i8 %54, 0
  br i1 %52, label %75, label %56

56:                                               ; preds = %44
  br i1 %55, label %95, label %57

57:                                               ; preds = %56
  %58 = getelementptr inbounds i16, i16* %1, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = icmp ult i16 %59, 32
  %61 = zext i1 %60 to i16
  %62 = add i16 %59, %61
  store i16 %62, i16* %58, align 2
  %63 = lshr i16 %59, 4
  %64 = add nuw nsw i16 %63, 4
  %65 = zext i16 %64 to i32
  %66 = zext i16 %13 to i32
  %67 = sub nsw i32 32768, %66
  %68 = ashr i32 %67, %65
  %69 = trunc i32 %68 to i16
  %70 = add i16 %13, %69
  store i16 %70, i16* %1, align 2
  %71 = zext i16 %46 to i32
  %72 = lshr i32 %71, %65
  %73 = trunc i32 %72 to i16
  %74 = sub i16 %46, %73
  store i16 %74, i16* %45, align 2
  br label %95

75:                                               ; preds = %44
  br i1 %55, label %95, label %76

76:                                               ; preds = %75
  %77 = getelementptr inbounds i16, i16* %1, i64 3
  %78 = load i16, i16* %77, align 2
  %79 = icmp ult i16 %78, 32
  %80 = zext i1 %79 to i16
  %81 = add i16 %78, %80
  store i16 %81, i16* %77, align 2
  %82 = lshr i16 %78, 4
  %83 = or i16 %82, 4
  %84 = zext i16 %83 to i32
  %85 = zext i16 %13 to i32
  %86 = sub nsw i32 32768, %85
  %87 = ashr i32 %86, %84
  %88 = trunc i32 %87 to i16
  %89 = add i16 %13, %88
  store i16 %89, i16* %1, align 2
  %90 = zext i16 %46 to i32
  %91 = sub nsw i32 32768, %90
  %92 = ashr i32 %91, %84
  %93 = trunc i32 %92 to i16
  %94 = add i16 %46, %93
  store i16 %94, i16* %45, align 2
  br label %95

95:                                               ; preds = %76, %75, %57, %56, %25, %21
  %96 = phi i32 [ 0, %21 ], [ 1, %56 ], [ 2, %75 ], [ 0, %25 ], [ 1, %57 ], [ 2, %76 ]
  %97 = phi i32 [ %4, %21 ], [ %18, %56 ], [ %51, %75 ], [ %4, %25 ], [ %18, %57 ], [ %51, %76 ]
  %98 = phi i32 [ %18, %21 ], [ %51, %56 ], [ 0, %75 ], [ %18, %25 ], [ %51, %57 ], [ 0, %76 ]
  %99 = sub i32 %97, %98
  %100 = zext i32 %98 to i64
  %101 = load i32, i32* %7, align 4
  %102 = zext i32 %101 to i64
  %103 = shl i64 %100, %102
  %104 = load i64, i64* %5, align 8
  %105 = sub i64 %104, %103
  store i64 %105, i64* %5, align 8
  %106 = tail call i32 @llvm.ctlz.i32(i32 %99, i1 true) #6, !range !3
  %107 = xor i32 %106, 16
  %108 = sub nsw i32 %101, %107
  store i32 %108, i32* %7, align 4
  %109 = shl i32 %99, %107
  store i32 %109, i32* %3, align 8
  %110 = icmp slt i32 %108, 0
  br i1 %110, label %111, label %148

111:                                              ; preds = %95
  %112 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %113 = load i8*, i8** %112, align 8
  %114 = sub i32 40, %108
  %115 = icmp sgt i32 %114, -1
  %116 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %117 = load i8*, i8** %116, align 8
  br i1 %115, label %118, label %134

118:                                              ; preds = %111, %124
  %119 = phi i8* [ %125, %124 ], [ %113, %111 ]
  %120 = phi i32 [ %132, %124 ], [ %114, %111 ]
  %121 = phi i64 [ %130, %124 ], [ %105, %111 ]
  %122 = phi i32 [ %131, %124 ], [ %108, %111 ]
  %123 = icmp ult i8* %119, %117
  br i1 %123, label %124, label %134

124:                                              ; preds = %118
  %125 = getelementptr inbounds i8, i8* %119, i64 1
  %126 = load i8, i8* %119, align 1
  %127 = xor i8 %126, -1
  %128 = zext i8 %127 to i64
  %129 = shl i64 %121, 8
  %130 = or i64 %129, %128
  %131 = add nsw i32 %122, 8
  %132 = add nsw i32 %120, -8
  %133 = icmp sgt i32 %132, -1
  br i1 %133, label %118, label %134, !llvm.loop !4

134:                                              ; preds = %124, %118, %111
  %135 = phi i32 [ %108, %111 ], [ %122, %118 ], [ %131, %124 ]
  %136 = phi i64 [ %105, %111 ], [ %121, %118 ], [ %130, %124 ]
  %137 = phi i8* [ %113, %111 ], [ %119, %118 ], [ %125, %124 ]
  %138 = icmp eq i8* %137, %117
  br i1 %138, label %139, label %145

139:                                              ; preds = %134
  %140 = add i64 %136, 1
  %141 = sub nsw i32 48, %135
  %142 = zext i32 %141 to i64
  %143 = shl i64 %140, %142
  %144 = add i64 %143, -1
  br label %145

145:                                              ; preds = %139, %134
  %146 = phi i32 [ 48, %139 ], [ %135, %134 ]
  %147 = phi i64 [ %144, %139 ], [ %136, %134 ]
  store i8* %137, i8** %112, align 8
  store i32 %146, i32* %7, align 4
  store i64 %147, i64* %5, align 8
  br label %148

148:                                              ; preds = %95, %145
  ret i32 %96
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi4EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = load i16, i16* %1, align 2
  %14 = lshr i16 %13, 6
  %15 = zext i16 %14 to i32
  %16 = mul i32 %12, %15
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 12
  %19 = and i32 %11, 65535
  %20 = icmp ult i32 %19, %18
  br i1 %20, label %44, label %21

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %23 = load i8, i8* %22, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %140, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i16, i16* %1, i64 4
  %27 = load i16, i16* %26, align 2
  %28 = icmp ult i16 %27, 32
  %29 = zext i1 %28 to i16
  %30 = add i16 %27, %29
  store i16 %30, i16* %26, align 2
  %31 = lshr i16 %27, 4
  %32 = add nuw nsw i16 %31, 5
  %33 = zext i16 %32 to i32
  %34 = bitcast i16* %1 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %35, i32 0
  %37 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %33, i32 0
  %38 = bitcast <2 x i64> %36 to <8 x i16>
  %39 = bitcast <4 x i32> %37 to <8 x i16>
  %40 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %38, <8 x i16> %39) #6
  %41 = sub <8 x i16> %38, %40
  %42 = bitcast <8 x i16> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  store i64 %43, i64* %34, align 1
  br label %140

44:                                               ; preds = %2
  %45 = getelementptr inbounds i16, i16* %1, i64 1
  %46 = load i16, i16* %45, align 2
  %47 = lshr i16 %46, 6
  %48 = zext i16 %47 to i32
  %49 = mul i32 %12, %48
  %50 = lshr i32 %49, 1
  %51 = add nuw i32 %50, 8
  %52 = icmp ult i32 %19, %51
  br i1 %52, label %81, label %53

53:                                               ; preds = %44
  %54 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %55 = load i8, i8* %54, align 8, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %140, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds i16, i16* %1, i64 4
  %59 = load i16, i16* %58, align 2
  %60 = icmp ult i16 %59, 32
  %61 = zext i1 %60 to i16
  %62 = add i16 %59, %61
  store i16 %62, i16* %58, align 2
  %63 = lshr i16 %59, 4
  %64 = add nuw nsw i16 %63, 5
  %65 = zext i16 %64 to i32
  %66 = zext i16 %13 to i32
  %67 = sub nsw i32 32768, %66
  %68 = ashr i32 %67, %65
  %69 = trunc i32 %68 to i16
  %70 = add i16 %13, %69
  store i16 %70, i16* %1, align 2
  %71 = zext i16 %46 to i32
  %72 = lshr i32 %71, %65
  %73 = trunc i32 %72 to i16
  %74 = sub i16 %46, %73
  store i16 %74, i16* %45, align 2
  %75 = getelementptr inbounds i16, i16* %1, i64 2
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = lshr i32 %77, %65
  %79 = trunc i32 %78 to i16
  %80 = sub i16 %76, %79
  store i16 %80, i16* %75, align 2
  br label %140

81:                                               ; preds = %44
  %82 = getelementptr inbounds i16, i16* %1, i64 2
  %83 = load i16, i16* %82, align 2
  %84 = lshr i16 %83, 6
  %85 = zext i16 %84 to i32
  %86 = mul i32 %12, %85
  %87 = lshr i32 %86, 1
  %88 = add nuw i32 %87, 4
  %89 = icmp ult i32 %19, %88
  %90 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %89, label %117, label %93

93:                                               ; preds = %81
  br i1 %92, label %140, label %94

94:                                               ; preds = %93
  %95 = getelementptr inbounds i16, i16* %1, i64 4
  %96 = load i16, i16* %95, align 2
  %97 = icmp ult i16 %96, 32
  %98 = zext i1 %97 to i16
  %99 = add i16 %96, %98
  store i16 %99, i16* %95, align 2
  %100 = lshr i16 %96, 4
  %101 = add nuw nsw i16 %100, 5
  %102 = zext i16 %101 to i32
  %103 = zext i16 %13 to i32
  %104 = sub nsw i32 32768, %103
  %105 = ashr i32 %104, %102
  %106 = trunc i32 %105 to i16
  %107 = add i16 %13, %106
  store i16 %107, i16* %1, align 2
  %108 = zext i16 %46 to i32
  %109 = sub nsw i32 32768, %108
  %110 = ashr i32 %109, %102
  %111 = trunc i32 %110 to i16
  %112 = add i16 %46, %111
  store i16 %112, i16* %45, align 2
  %113 = zext i16 %83 to i32
  %114 = lshr i32 %113, %102
  %115 = trunc i32 %114 to i16
  %116 = sub i16 %83, %115
  store i16 %116, i16* %82, align 2
  br label %140

117:                                              ; preds = %81
  br i1 %92, label %140, label %118

118:                                              ; preds = %117
  %119 = getelementptr inbounds i16, i16* %1, i64 4
  %120 = load i16, i16* %119, align 2
  %121 = icmp ult i16 %120, 32
  %122 = zext i1 %121 to i16
  %123 = add i16 %120, %122
  store i16 %123, i16* %119, align 2
  %124 = lshr i16 %120, 4
  %125 = or i16 %124, 4
  %126 = add nuw nsw i16 %125, 1
  %127 = zext i16 %126 to i32
  %128 = bitcast i16* %1 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %129, i32 0
  %131 = bitcast <2 x i64> %130 to <8 x i16>
  %132 = sub <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 0, i16 0, i16 0, i16 0>, %131
  %133 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %127, i32 0
  %134 = bitcast <4 x i32> %133 to <8 x i16>
  %135 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %132, <8 x i16> %134) #6
  %136 = add <8 x i16> %135, %131
  %137 = bitcast <8 x i16> %136 to <2 x i64>
  %138 = extractelement <2 x i64> %137, i32 0
  store i64 %138, i64* %128, align 1
  %139 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 0, i16* %139, align 2
  br label %140

140:                                              ; preds = %118, %117, %94, %93, %57, %53, %25, %21
  %141 = phi i32 [ 0, %21 ], [ 1, %53 ], [ 2, %94 ], [ 2, %93 ], [ 3, %117 ], [ 0, %25 ], [ 1, %57 ], [ 3, %118 ]
  %142 = phi i32 [ %4, %21 ], [ %18, %53 ], [ %51, %94 ], [ %51, %93 ], [ %88, %117 ], [ %4, %25 ], [ %18, %57 ], [ %88, %118 ]
  %143 = phi i32 [ %18, %21 ], [ %51, %53 ], [ %88, %94 ], [ %88, %93 ], [ 0, %117 ], [ %18, %25 ], [ %51, %57 ], [ 0, %118 ]
  %144 = sub i32 %142, %143
  %145 = zext i32 %143 to i64
  %146 = load i32, i32* %7, align 4
  %147 = zext i32 %146 to i64
  %148 = shl i64 %145, %147
  %149 = load i64, i64* %5, align 8
  %150 = sub i64 %149, %148
  store i64 %150, i64* %5, align 8
  %151 = tail call i32 @llvm.ctlz.i32(i32 %144, i1 true) #6, !range !3
  %152 = xor i32 %151, 16
  %153 = sub nsw i32 %146, %152
  store i32 %153, i32* %7, align 4
  %154 = shl i32 %144, %152
  store i32 %154, i32* %3, align 8
  %155 = icmp slt i32 %153, 0
  br i1 %155, label %156, label %193

156:                                              ; preds = %140
  %157 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %158 = load i8*, i8** %157, align 8
  %159 = sub i32 40, %153
  %160 = icmp sgt i32 %159, -1
  %161 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %162 = load i8*, i8** %161, align 8
  br i1 %160, label %163, label %179

163:                                              ; preds = %156, %169
  %164 = phi i8* [ %170, %169 ], [ %158, %156 ]
  %165 = phi i32 [ %177, %169 ], [ %159, %156 ]
  %166 = phi i64 [ %175, %169 ], [ %150, %156 ]
  %167 = phi i32 [ %176, %169 ], [ %153, %156 ]
  %168 = icmp ult i8* %164, %162
  br i1 %168, label %169, label %179

169:                                              ; preds = %163
  %170 = getelementptr inbounds i8, i8* %164, i64 1
  %171 = load i8, i8* %164, align 1
  %172 = xor i8 %171, -1
  %173 = zext i8 %172 to i64
  %174 = shl i64 %166, 8
  %175 = or i64 %174, %173
  %176 = add nsw i32 %167, 8
  %177 = add nsw i32 %165, -8
  %178 = icmp sgt i32 %177, -1
  br i1 %178, label %163, label %179, !llvm.loop !4

179:                                              ; preds = %169, %163, %156
  %180 = phi i32 [ %153, %156 ], [ %167, %163 ], [ %176, %169 ]
  %181 = phi i64 [ %150, %156 ], [ %166, %163 ], [ %175, %169 ]
  %182 = phi i8* [ %158, %156 ], [ %164, %163 ], [ %170, %169 ]
  %183 = icmp eq i8* %182, %162
  br i1 %183, label %184, label %190

184:                                              ; preds = %179
  %185 = add i64 %181, 1
  %186 = sub nsw i32 48, %180
  %187 = zext i32 %186 to i64
  %188 = shl i64 %185, %187
  %189 = add i64 %188, -1
  br label %190

190:                                              ; preds = %184, %179
  %191 = phi i32 [ 48, %184 ], [ %180, %179 ]
  %192 = phi i64 [ %189, %184 ], [ %181, %179 ]
  store i8* %182, i8** %157, align 8
  store i32 %191, i32* %7, align 4
  store i64 %192, i64* %5, align 8
  br label %193

193:                                              ; preds = %140, %190
  ret i32 %141
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi5EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = and i32 %11, 65535
  br label %14

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %19, %14 ], [ -1, %2 ]
  %16 = phi i32 [ %26, %14 ], [ %4, %2 ]
  %17 = phi i32 [ %18, %14 ], [ 20, %2 ]
  %18 = add i32 %17, -4
  %19 = add nsw i64 %15, 1
  %20 = getelementptr inbounds i16, i16* %1, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = lshr i16 %21, 6
  %23 = zext i16 %22 to i32
  %24 = mul i32 %12, %23
  %25 = lshr i32 %24, 1
  %26 = add i32 %25, %18
  %27 = icmp ult i32 %13, %26
  br i1 %27, label %14, label %28

28:                                               ; preds = %14
  %29 = trunc i64 %19 to i32
  %30 = sub i32 %16, %26
  %31 = zext i32 %26 to i64
  %32 = shl i64 %31, %9
  %33 = sub i64 %6, %32
  store i64 %33, i64* %5, align 8
  %34 = tail call i32 @llvm.ctlz.i32(i32 %30, i1 true) #6, !range !3
  %35 = xor i32 %34, 16
  %36 = sub nsw i32 %8, %35
  store i32 %36, i32* %7, align 4
  %37 = shl i32 %30, %35
  store i32 %37, i32* %3, align 8
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = sub i32 40, %36
  %43 = icmp sgt i32 %42, -1
  %44 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %45 = load i8*, i8** %44, align 8
  br i1 %43, label %46, label %62

46:                                               ; preds = %39, %52
  %47 = phi i8* [ %53, %52 ], [ %41, %39 ]
  %48 = phi i32 [ %60, %52 ], [ %42, %39 ]
  %49 = phi i64 [ %58, %52 ], [ %33, %39 ]
  %50 = phi i32 [ %59, %52 ], [ %36, %39 ]
  %51 = icmp ult i8* %47, %45
  br i1 %51, label %52, label %62

52:                                               ; preds = %46
  %53 = getelementptr inbounds i8, i8* %47, i64 1
  %54 = load i8, i8* %47, align 1
  %55 = xor i8 %54, -1
  %56 = zext i8 %55 to i64
  %57 = shl i64 %49, 8
  %58 = or i64 %57, %56
  %59 = add nsw i32 %50, 8
  %60 = add nsw i32 %48, -8
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %46, label %62, !llvm.loop !4

62:                                               ; preds = %52, %46, %39
  %63 = phi i32 [ %36, %39 ], [ %50, %46 ], [ %59, %52 ]
  %64 = phi i64 [ %33, %39 ], [ %49, %46 ], [ %58, %52 ]
  %65 = phi i8* [ %41, %39 ], [ %47, %46 ], [ %53, %52 ]
  %66 = icmp eq i8* %65, %45
  br i1 %66, label %67, label %73

67:                                               ; preds = %62
  %68 = add i64 %64, 1
  %69 = sub nsw i32 48, %63
  %70 = zext i32 %69 to i64
  %71 = shl i64 %68, %70
  %72 = add i64 %71, -1
  br label %73

73:                                               ; preds = %67, %62
  %74 = phi i32 [ 48, %67 ], [ %63, %62 ]
  %75 = phi i64 [ %72, %67 ], [ %64, %62 ]
  store i8* %65, i8** %40, align 8
  store i32 %74, i32* %7, align 4
  store i64 %75, i64* %5, align 8
  br label %76

76:                                               ; preds = %28, %73
  %77 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %107, label %80

80:                                               ; preds = %76
  %81 = bitcast i16* %1 to i64*
  %82 = load i64, i64* %81, align 1
  %83 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %82, i32 0
  %84 = getelementptr inbounds i16, i16* %1, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = lshr i16 %85, 4
  %87 = add nuw nsw i16 %86, 5
  %88 = zext i16 %87 to i32
  %89 = insertelement <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, i32 %29, i32 0
  %90 = bitcast <4 x i32> %89 to <8 x i16>
  %91 = shufflevector <8 x i16> %90, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %92 = icmp slt <8 x i16> %91, <i16 1, i16 2, i16 3, i16 4, i16 0, i16 0, i16 0, i16 0>
  %93 = select <8 x i1> %92, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 0, i16 0, i16 0, i16 0>
  %94 = bitcast <2 x i64> %83 to <8 x i16>
  %95 = sub <8 x i16> %93, %94
  %96 = zext <8 x i1> %92 to <8 x i16>
  %97 = add <8 x i16> %94, %96
  %98 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %88, i32 0
  %99 = bitcast <4 x i32> %98 to <8 x i16>
  %100 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %95, <8 x i16> %99) #6
  %101 = add <8 x i16> %97, %100
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  %103 = extractelement <2 x i64> %102, i32 0
  store i64 %103, i64* %81, align 1
  %104 = icmp ult i16 %85, 32
  %105 = zext i1 %104 to i16
  %106 = add i16 %85, %105
  store i16 %106, i16* %84, align 2
  br label %107

107:                                              ; preds = %76, %80
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi6EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = and i32 %11, 65535
  br label %14

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %19, %14 ], [ -1, %2 ]
  %16 = phi i32 [ %26, %14 ], [ %4, %2 ]
  %17 = phi i32 [ %18, %14 ], [ 24, %2 ]
  %18 = add i32 %17, -4
  %19 = add nsw i64 %15, 1
  %20 = getelementptr inbounds i16, i16* %1, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = lshr i16 %21, 6
  %23 = zext i16 %22 to i32
  %24 = mul i32 %12, %23
  %25 = lshr i32 %24, 1
  %26 = add i32 %25, %18
  %27 = icmp ult i32 %13, %26
  br i1 %27, label %14, label %28

28:                                               ; preds = %14
  %29 = trunc i64 %19 to i32
  %30 = sub i32 %16, %26
  %31 = zext i32 %26 to i64
  %32 = shl i64 %31, %9
  %33 = sub i64 %6, %32
  store i64 %33, i64* %5, align 8
  %34 = tail call i32 @llvm.ctlz.i32(i32 %30, i1 true) #6, !range !3
  %35 = xor i32 %34, 16
  %36 = sub nsw i32 %8, %35
  store i32 %36, i32* %7, align 4
  %37 = shl i32 %30, %35
  store i32 %37, i32* %3, align 8
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = sub i32 40, %36
  %43 = icmp sgt i32 %42, -1
  %44 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %45 = load i8*, i8** %44, align 8
  br i1 %43, label %46, label %62

46:                                               ; preds = %39, %52
  %47 = phi i8* [ %53, %52 ], [ %41, %39 ]
  %48 = phi i32 [ %60, %52 ], [ %42, %39 ]
  %49 = phi i64 [ %58, %52 ], [ %33, %39 ]
  %50 = phi i32 [ %59, %52 ], [ %36, %39 ]
  %51 = icmp ult i8* %47, %45
  br i1 %51, label %52, label %62

52:                                               ; preds = %46
  %53 = getelementptr inbounds i8, i8* %47, i64 1
  %54 = load i8, i8* %47, align 1
  %55 = xor i8 %54, -1
  %56 = zext i8 %55 to i64
  %57 = shl i64 %49, 8
  %58 = or i64 %57, %56
  %59 = add nsw i32 %50, 8
  %60 = add nsw i32 %48, -8
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %46, label %62, !llvm.loop !4

62:                                               ; preds = %52, %46, %39
  %63 = phi i32 [ %36, %39 ], [ %50, %46 ], [ %59, %52 ]
  %64 = phi i64 [ %33, %39 ], [ %49, %46 ], [ %58, %52 ]
  %65 = phi i8* [ %41, %39 ], [ %47, %46 ], [ %53, %52 ]
  %66 = icmp eq i8* %65, %45
  br i1 %66, label %67, label %73

67:                                               ; preds = %62
  %68 = add i64 %64, 1
  %69 = sub nsw i32 48, %63
  %70 = zext i32 %69 to i64
  %71 = shl i64 %68, %70
  %72 = add i64 %71, -1
  br label %73

73:                                               ; preds = %67, %62
  %74 = phi i32 [ 48, %67 ], [ %63, %62 ]
  %75 = phi i64 [ %72, %67 ], [ %64, %62 ]
  store i8* %65, i8** %40, align 8
  store i32 %74, i32* %7, align 4
  store i64 %75, i64* %5, align 8
  br label %76

76:                                               ; preds = %28, %73
  %77 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %106, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds i16, i16* %1, i64 6
  %82 = load i16, i16* %81, align 2
  %83 = lshr i16 %82, 4
  %84 = add nuw nsw i16 %83, 5
  %85 = zext i16 %84 to i32
  %86 = shl i64 %19, 32
  %87 = icmp sgt i64 %86, 0
  %88 = load i16, i16* %1, align 2
  %89 = zext i16 %88 to i32
  br i1 %87, label %97, label %90

90:                                               ; preds = %80
  %91 = lshr i32 %89, %85
  %92 = trunc i32 %91 to i16
  %93 = sub i16 %88, %92
  store i16 %93, i16* %1, align 2
  %94 = getelementptr inbounds i16, i16* %1, i64 1
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  br label %107

97:                                               ; preds = %80
  %98 = sub nsw i32 32768, %89
  %99 = ashr i32 %98, %85
  %100 = trunc i32 %99 to i16
  %101 = add i16 %88, %100
  store i16 %101, i16* %1, align 2
  %102 = icmp sgt i64 %86, 4294967296
  %103 = getelementptr inbounds i16, i16* %1, i64 1
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  br i1 %102, label %117, label %107

106:                                              ; preds = %76, %176
  ret i32 %29

107:                                              ; preds = %97, %90
  %108 = phi i32 [ %96, %90 ], [ %105, %97 ]
  %109 = phi i16 [ %95, %90 ], [ %104, %97 ]
  %110 = phi i16* [ %94, %90 ], [ %103, %97 ]
  %111 = lshr i32 %108, %85
  %112 = trunc i32 %111 to i16
  %113 = sub i16 %109, %112
  store i16 %113, i16* %110, align 2
  %114 = getelementptr inbounds i16, i16* %1, i64 2
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  br label %126

117:                                              ; preds = %97
  %118 = sub nsw i32 32768, %105
  %119 = ashr i32 %118, %85
  %120 = trunc i32 %119 to i16
  %121 = add i16 %104, %120
  store i16 %121, i16* %103, align 2
  %122 = icmp sgt i64 %86, 8589934592
  %123 = getelementptr inbounds i16, i16* %1, i64 2
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  br i1 %122, label %136, label %126

126:                                              ; preds = %117, %107
  %127 = phi i32 [ %116, %107 ], [ %125, %117 ]
  %128 = phi i16 [ %115, %107 ], [ %124, %117 ]
  %129 = phi i16* [ %114, %107 ], [ %123, %117 ]
  %130 = lshr i32 %127, %85
  %131 = trunc i32 %130 to i16
  %132 = sub i16 %128, %131
  store i16 %132, i16* %129, align 2
  %133 = getelementptr inbounds i16, i16* %1, i64 3
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  br label %145

136:                                              ; preds = %117
  %137 = sub nsw i32 32768, %125
  %138 = ashr i32 %137, %85
  %139 = trunc i32 %138 to i16
  %140 = add i16 %124, %139
  store i16 %140, i16* %123, align 2
  %141 = icmp sgt i64 %86, 12884901888
  %142 = getelementptr inbounds i16, i16* %1, i64 3
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  br i1 %141, label %155, label %145

145:                                              ; preds = %136, %126
  %146 = phi i32 [ %135, %126 ], [ %144, %136 ]
  %147 = phi i16 [ %134, %126 ], [ %143, %136 ]
  %148 = phi i16* [ %133, %126 ], [ %142, %136 ]
  %149 = lshr i32 %146, %85
  %150 = trunc i32 %149 to i16
  %151 = sub i16 %147, %150
  store i16 %151, i16* %148, align 2
  %152 = getelementptr inbounds i16, i16* %1, i64 4
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  br label %164

155:                                              ; preds = %136
  %156 = sub nsw i32 32768, %144
  %157 = ashr i32 %156, %85
  %158 = trunc i32 %157 to i16
  %159 = add i16 %143, %158
  store i16 %159, i16* %142, align 2
  %160 = icmp sgt i64 %86, 17179869184
  %161 = getelementptr inbounds i16, i16* %1, i64 4
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  br i1 %160, label %171, label %164

164:                                              ; preds = %145, %155
  %165 = phi i32 [ %154, %145 ], [ %163, %155 ]
  %166 = phi i16 [ %153, %145 ], [ %162, %155 ]
  %167 = phi i16* [ %152, %145 ], [ %161, %155 ]
  %168 = lshr i32 %165, %85
  %169 = trunc i32 %168 to i16
  %170 = sub i16 %166, %169
  br label %176

171:                                              ; preds = %155
  %172 = sub nsw i32 32768, %163
  %173 = ashr i32 %172, %85
  %174 = trunc i32 %173 to i16
  %175 = add i16 %162, %174
  br label %176

176:                                              ; preds = %171, %164
  %177 = phi i16* [ %167, %164 ], [ %161, %171 ]
  %178 = phi i16 [ %170, %164 ], [ %175, %171 ]
  store i16 %178, i16* %177, align 2
  %179 = icmp ult i16 %82, 32
  %180 = zext i1 %179 to i16
  %181 = add i16 %82, %180
  store i16 %181, i16* %81, align 2
  br label %106
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi7EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = and i32 %11, 65535
  br label %14

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %19, %14 ], [ -1, %2 ]
  %16 = phi i32 [ %26, %14 ], [ %4, %2 ]
  %17 = phi i32 [ %18, %14 ], [ 28, %2 ]
  %18 = add i32 %17, -4
  %19 = add nsw i64 %15, 1
  %20 = getelementptr inbounds i16, i16* %1, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = lshr i16 %21, 6
  %23 = zext i16 %22 to i32
  %24 = mul i32 %12, %23
  %25 = lshr i32 %24, 1
  %26 = add i32 %25, %18
  %27 = icmp ult i32 %13, %26
  br i1 %27, label %14, label %28

28:                                               ; preds = %14
  %29 = trunc i64 %19 to i32
  %30 = sub i32 %16, %26
  %31 = zext i32 %26 to i64
  %32 = shl i64 %31, %9
  %33 = sub i64 %6, %32
  store i64 %33, i64* %5, align 8
  %34 = tail call i32 @llvm.ctlz.i32(i32 %30, i1 true) #6, !range !3
  %35 = xor i32 %34, 16
  %36 = sub nsw i32 %8, %35
  store i32 %36, i32* %7, align 4
  %37 = shl i32 %30, %35
  store i32 %37, i32* %3, align 8
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = sub i32 40, %36
  %43 = icmp sgt i32 %42, -1
  %44 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %45 = load i8*, i8** %44, align 8
  br i1 %43, label %46, label %62

46:                                               ; preds = %39, %52
  %47 = phi i8* [ %53, %52 ], [ %41, %39 ]
  %48 = phi i32 [ %60, %52 ], [ %42, %39 ]
  %49 = phi i64 [ %58, %52 ], [ %33, %39 ]
  %50 = phi i32 [ %59, %52 ], [ %36, %39 ]
  %51 = icmp ult i8* %47, %45
  br i1 %51, label %52, label %62

52:                                               ; preds = %46
  %53 = getelementptr inbounds i8, i8* %47, i64 1
  %54 = load i8, i8* %47, align 1
  %55 = xor i8 %54, -1
  %56 = zext i8 %55 to i64
  %57 = shl i64 %49, 8
  %58 = or i64 %57, %56
  %59 = add nsw i32 %50, 8
  %60 = add nsw i32 %48, -8
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %46, label %62, !llvm.loop !4

62:                                               ; preds = %52, %46, %39
  %63 = phi i32 [ %36, %39 ], [ %50, %46 ], [ %59, %52 ]
  %64 = phi i64 [ %33, %39 ], [ %49, %46 ], [ %58, %52 ]
  %65 = phi i8* [ %41, %39 ], [ %47, %46 ], [ %53, %52 ]
  %66 = icmp eq i8* %65, %45
  br i1 %66, label %67, label %73

67:                                               ; preds = %62
  %68 = add i64 %64, 1
  %69 = sub nsw i32 48, %63
  %70 = zext i32 %69 to i64
  %71 = shl i64 %68, %70
  %72 = add i64 %71, -1
  br label %73

73:                                               ; preds = %67, %62
  %74 = phi i32 [ 48, %67 ], [ %63, %62 ]
  %75 = phi i64 [ %72, %67 ], [ %64, %62 ]
  store i8* %65, i8** %40, align 8
  store i32 %74, i32* %7, align 4
  store i64 %75, i64* %5, align 8
  br label %76

76:                                               ; preds = %28, %73
  %77 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %103, label %80

80:                                               ; preds = %76
  %81 = bitcast i16* %1 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %1, i64 7
  %84 = load i16, i16* %83, align 2
  %85 = lshr i16 %84, 4
  %86 = add nuw nsw i16 %85, 5
  %87 = zext i16 %86 to i32
  %88 = trunc i64 %19 to i16
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = icmp slt <8 x i16> %90, <i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8>
  %92 = select <8 x i1> %91, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %93 = sub <8 x i16> %92, %82
  %94 = zext <8 x i1> %91 to <8 x i16>
  %95 = add <8 x i16> %82, %94
  %96 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %87, i32 0
  %97 = bitcast <4 x i32> %96 to <8 x i16>
  %98 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %93, <8 x i16> %97) #6
  %99 = add <8 x i16> %95, %98
  store <8 x i16> %99, <8 x i16>* %81, align 1
  %100 = icmp ult i16 %84, 32
  %101 = zext i1 %100 to i16
  %102 = add i16 %84, %101
  store i16 %102, i16* %83, align 2
  br label %103

103:                                              ; preds = %76, %80
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi8EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = load i16, i16* %1, align 2
  %14 = lshr i16 %13, 6
  %15 = zext i16 %14 to i32
  %16 = mul i32 %12, %15
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 28
  %19 = and i32 %11, 65535
  %20 = icmp ult i32 %19, %18
  br i1 %20, label %21, label %78

21:                                               ; preds = %2
  %22 = getelementptr inbounds i16, i16* %1, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = lshr i16 %23, 6
  %25 = zext i16 %24 to i32
  %26 = mul i32 %12, %25
  %27 = lshr i32 %26, 1
  %28 = add nuw i32 %27, 24
  %29 = icmp ult i32 %19, %28
  br i1 %29, label %30, label %78

30:                                               ; preds = %21
  %31 = getelementptr inbounds i16, i16* %1, i64 2
  %32 = load i16, i16* %31, align 2
  %33 = lshr i16 %32, 6
  %34 = zext i16 %33 to i32
  %35 = mul i32 %12, %34
  %36 = lshr i32 %35, 1
  %37 = add nuw i32 %36, 20
  %38 = icmp ult i32 %19, %37
  br i1 %38, label %39, label %78

39:                                               ; preds = %30
  %40 = getelementptr inbounds i16, i16* %1, i64 3
  %41 = load i16, i16* %40, align 2
  %42 = lshr i16 %41, 6
  %43 = zext i16 %42 to i32
  %44 = mul i32 %12, %43
  %45 = lshr i32 %44, 1
  %46 = add nuw i32 %45, 16
  %47 = icmp ult i32 %19, %46
  br i1 %47, label %48, label %78

48:                                               ; preds = %39
  %49 = getelementptr inbounds i16, i16* %1, i64 4
  %50 = load i16, i16* %49, align 2
  %51 = lshr i16 %50, 6
  %52 = zext i16 %51 to i32
  %53 = mul i32 %12, %52
  %54 = lshr i32 %53, 1
  %55 = add nuw i32 %54, 12
  %56 = icmp ult i32 %19, %55
  br i1 %56, label %57, label %78

57:                                               ; preds = %48
  %58 = getelementptr inbounds i16, i16* %1, i64 5
  %59 = load i16, i16* %58, align 2
  %60 = lshr i16 %59, 6
  %61 = zext i16 %60 to i32
  %62 = mul i32 %12, %61
  %63 = lshr i32 %62, 1
  %64 = add nuw i32 %63, 8
  %65 = icmp ult i32 %19, %64
  br i1 %65, label %66, label %78

66:                                               ; preds = %57
  %67 = getelementptr inbounds i16, i16* %1, i64 6
  %68 = load i16, i16* %67, align 2
  %69 = lshr i16 %68, 6
  %70 = zext i16 %69 to i32
  %71 = mul i32 %12, %70
  %72 = lshr i32 %71, 1
  %73 = add nuw i32 %72, 4
  %74 = icmp ult i32 %19, %73
  %75 = select i1 %74, i32 0, i32 %73
  %76 = select i1 %74, i32 %73, i32 %64
  %77 = select i1 %74, i32 7, i32 6
  br label %78

78:                                               ; preds = %66, %57, %48, %39, %30, %21, %2
  %79 = phi i32 [ %18, %2 ], [ %28, %21 ], [ %37, %30 ], [ %46, %39 ], [ %55, %48 ], [ %64, %57 ], [ %75, %66 ]
  %80 = phi i32 [ %4, %2 ], [ %18, %21 ], [ %28, %30 ], [ %37, %39 ], [ %46, %48 ], [ %55, %57 ], [ %76, %66 ]
  %81 = phi i32 [ 0, %2 ], [ 1, %21 ], [ 2, %30 ], [ 3, %39 ], [ 4, %48 ], [ 5, %57 ], [ %77, %66 ]
  %82 = sub i32 %80, %79
  %83 = zext i32 %79 to i64
  %84 = shl i64 %83, %9
  %85 = sub i64 %6, %84
  store i64 %85, i64* %5, align 8
  %86 = tail call i32 @llvm.ctlz.i32(i32 %82, i1 true) #6, !range !3
  %87 = xor i32 %86, 16
  %88 = sub nsw i32 %8, %87
  store i32 %88, i32* %7, align 4
  %89 = shl i32 %82, %87
  store i32 %89, i32* %3, align 8
  %90 = icmp slt i32 %88, 0
  br i1 %90, label %91, label %128

91:                                               ; preds = %78
  %92 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %93 = load i8*, i8** %92, align 8
  %94 = sub i32 40, %88
  %95 = icmp sgt i32 %94, -1
  %96 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %97 = load i8*, i8** %96, align 8
  br i1 %95, label %98, label %114

98:                                               ; preds = %91, %104
  %99 = phi i8* [ %105, %104 ], [ %93, %91 ]
  %100 = phi i32 [ %112, %104 ], [ %94, %91 ]
  %101 = phi i64 [ %110, %104 ], [ %85, %91 ]
  %102 = phi i32 [ %111, %104 ], [ %88, %91 ]
  %103 = icmp ult i8* %99, %97
  br i1 %103, label %104, label %114

104:                                              ; preds = %98
  %105 = getelementptr inbounds i8, i8* %99, i64 1
  %106 = load i8, i8* %99, align 1
  %107 = xor i8 %106, -1
  %108 = zext i8 %107 to i64
  %109 = shl i64 %101, 8
  %110 = or i64 %109, %108
  %111 = add nsw i32 %102, 8
  %112 = add nsw i32 %100, -8
  %113 = icmp sgt i32 %112, -1
  br i1 %113, label %98, label %114, !llvm.loop !4

114:                                              ; preds = %104, %98, %91
  %115 = phi i32 [ %88, %91 ], [ %102, %98 ], [ %111, %104 ]
  %116 = phi i64 [ %85, %91 ], [ %101, %98 ], [ %110, %104 ]
  %117 = phi i8* [ %93, %91 ], [ %99, %98 ], [ %105, %104 ]
  %118 = icmp eq i8* %117, %97
  br i1 %118, label %119, label %125

119:                                              ; preds = %114
  %120 = add i64 %116, 1
  %121 = sub nsw i32 48, %115
  %122 = zext i32 %121 to i64
  %123 = shl i64 %120, %122
  %124 = add i64 %123, -1
  br label %125

125:                                              ; preds = %119, %114
  %126 = phi i32 [ 48, %119 ], [ %115, %114 ]
  %127 = phi i64 [ %124, %119 ], [ %116, %114 ]
  store i8* %117, i8** %92, align 8
  store i32 %126, i32* %7, align 4
  store i64 %127, i64* %5, align 8
  br label %128

128:                                              ; preds = %78, %125
  %129 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %130 = load i8, i8* %129, align 8, !range !2
  %131 = icmp eq i8 %130, 0
  br i1 %131, label %155, label %132

132:                                              ; preds = %128
  %133 = bitcast i16* %1 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 1
  %135 = getelementptr inbounds i16, i16* %1, i64 8
  %136 = load i16, i16* %135, align 2
  %137 = lshr i16 %136, 4
  %138 = add nuw nsw i16 %137, 5
  %139 = zext i16 %138 to i32
  %140 = trunc i32 %81 to i16
  %141 = insertelement <8 x i16> undef, i16 %140, i32 0
  %142 = shufflevector <8 x i16> %141, <8 x i16> undef, <8 x i32> zeroinitializer
  %143 = icmp slt <8 x i16> %142, <i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8>
  %144 = select <8 x i1> %143, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %145 = sub <8 x i16> %144, %134
  %146 = zext <8 x i1> %143 to <8 x i16>
  %147 = add <8 x i16> %134, %146
  %148 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %139, i32 0
  %149 = bitcast <4 x i32> %148 to <8 x i16>
  %150 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %145, <8 x i16> %149) #6
  %151 = add <8 x i16> %147, %150
  store <8 x i16> %151, <8 x i16>* %133, align 1
  %152 = icmp ult i16 %136, 32
  %153 = zext i1 %152 to i16
  %154 = add i16 %136, %153
  store i16 %154, i16* %135, align 2
  br label %155

155:                                              ; preds = %128, %132
  ret i32 %81
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi9EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = and i32 %11, 65535
  br label %14

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %19, %14 ], [ -1, %2 ]
  %16 = phi i32 [ %26, %14 ], [ %4, %2 ]
  %17 = phi i32 [ %18, %14 ], [ 36, %2 ]
  %18 = add i32 %17, -4
  %19 = add nsw i64 %15, 1
  %20 = getelementptr inbounds i16, i16* %1, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = lshr i16 %21, 6
  %23 = zext i16 %22 to i32
  %24 = mul i32 %12, %23
  %25 = lshr i32 %24, 1
  %26 = add i32 %25, %18
  %27 = icmp ult i32 %13, %26
  br i1 %27, label %14, label %28

28:                                               ; preds = %14
  %29 = trunc i64 %19 to i32
  %30 = sub i32 %16, %26
  %31 = zext i32 %26 to i64
  %32 = shl i64 %31, %9
  %33 = sub i64 %6, %32
  store i64 %33, i64* %5, align 8
  %34 = tail call i32 @llvm.ctlz.i32(i32 %30, i1 true) #6, !range !3
  %35 = xor i32 %34, 16
  %36 = sub nsw i32 %8, %35
  store i32 %36, i32* %7, align 4
  %37 = shl i32 %30, %35
  store i32 %37, i32* %3, align 8
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = sub i32 40, %36
  %43 = icmp sgt i32 %42, -1
  %44 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %45 = load i8*, i8** %44, align 8
  br i1 %43, label %46, label %62

46:                                               ; preds = %39, %52
  %47 = phi i8* [ %53, %52 ], [ %41, %39 ]
  %48 = phi i32 [ %60, %52 ], [ %42, %39 ]
  %49 = phi i64 [ %58, %52 ], [ %33, %39 ]
  %50 = phi i32 [ %59, %52 ], [ %36, %39 ]
  %51 = icmp ult i8* %47, %45
  br i1 %51, label %52, label %62

52:                                               ; preds = %46
  %53 = getelementptr inbounds i8, i8* %47, i64 1
  %54 = load i8, i8* %47, align 1
  %55 = xor i8 %54, -1
  %56 = zext i8 %55 to i64
  %57 = shl i64 %49, 8
  %58 = or i64 %57, %56
  %59 = add nsw i32 %50, 8
  %60 = add nsw i32 %48, -8
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %46, label %62, !llvm.loop !4

62:                                               ; preds = %52, %46, %39
  %63 = phi i32 [ %36, %39 ], [ %50, %46 ], [ %59, %52 ]
  %64 = phi i64 [ %33, %39 ], [ %49, %46 ], [ %58, %52 ]
  %65 = phi i8* [ %41, %39 ], [ %47, %46 ], [ %53, %52 ]
  %66 = icmp eq i8* %65, %45
  br i1 %66, label %67, label %73

67:                                               ; preds = %62
  %68 = add i64 %64, 1
  %69 = sub nsw i32 48, %63
  %70 = zext i32 %69 to i64
  %71 = shl i64 %68, %70
  %72 = add i64 %71, -1
  br label %73

73:                                               ; preds = %67, %62
  %74 = phi i32 [ 48, %67 ], [ %63, %62 ]
  %75 = phi i64 [ %72, %67 ], [ %64, %62 ]
  store i8* %65, i8** %40, align 8
  store i32 %74, i32* %7, align 4
  store i64 %75, i64* %5, align 8
  br label %76

76:                                               ; preds = %28, %73
  %77 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %103, label %80

80:                                               ; preds = %76
  %81 = bitcast i16* %1 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %1, i64 9
  %84 = load i16, i16* %83, align 2
  %85 = lshr i16 %84, 4
  %86 = add nuw nsw i16 %85, 5
  %87 = zext i16 %86 to i32
  %88 = trunc i64 %19 to i16
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = icmp slt <8 x i16> %90, <i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8>
  %92 = select <8 x i1> %91, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %93 = sub <8 x i16> %92, %82
  %94 = zext <8 x i1> %91 to <8 x i16>
  %95 = add <8 x i16> %82, %94
  %96 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %87, i32 0
  %97 = bitcast <4 x i32> %96 to <8 x i16>
  %98 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %93, <8 x i16> %97) #6
  %99 = add <8 x i16> %95, %98
  store <8 x i16> %99, <8 x i16>* %81, align 1
  %100 = icmp ult i16 %84, 32
  %101 = zext i1 %100 to i16
  %102 = add i16 %84, %101
  store i16 %102, i16* %83, align 2
  br label %103

103:                                              ; preds = %76, %80
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi10EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = and i32 %11, 65535
  br label %14

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %19, %14 ], [ -1, %2 ]
  %16 = phi i32 [ %26, %14 ], [ %4, %2 ]
  %17 = phi i32 [ %18, %14 ], [ 40, %2 ]
  %18 = add i32 %17, -4
  %19 = add nsw i64 %15, 1
  %20 = getelementptr inbounds i16, i16* %1, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = lshr i16 %21, 6
  %23 = zext i16 %22 to i32
  %24 = mul i32 %12, %23
  %25 = lshr i32 %24, 1
  %26 = add i32 %25, %18
  %27 = icmp ult i32 %13, %26
  br i1 %27, label %14, label %28

28:                                               ; preds = %14
  %29 = trunc i64 %19 to i32
  %30 = sub i32 %16, %26
  %31 = zext i32 %26 to i64
  %32 = shl i64 %31, %9
  %33 = sub i64 %6, %32
  store i64 %33, i64* %5, align 8
  %34 = tail call i32 @llvm.ctlz.i32(i32 %30, i1 true) #6, !range !3
  %35 = xor i32 %34, 16
  %36 = sub nsw i32 %8, %35
  store i32 %36, i32* %7, align 4
  %37 = shl i32 %30, %35
  store i32 %37, i32* %3, align 8
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = sub i32 40, %36
  %43 = icmp sgt i32 %42, -1
  %44 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %45 = load i8*, i8** %44, align 8
  br i1 %43, label %46, label %62

46:                                               ; preds = %39, %52
  %47 = phi i8* [ %53, %52 ], [ %41, %39 ]
  %48 = phi i32 [ %60, %52 ], [ %42, %39 ]
  %49 = phi i64 [ %58, %52 ], [ %33, %39 ]
  %50 = phi i32 [ %59, %52 ], [ %36, %39 ]
  %51 = icmp ult i8* %47, %45
  br i1 %51, label %52, label %62

52:                                               ; preds = %46
  %53 = getelementptr inbounds i8, i8* %47, i64 1
  %54 = load i8, i8* %47, align 1
  %55 = xor i8 %54, -1
  %56 = zext i8 %55 to i64
  %57 = shl i64 %49, 8
  %58 = or i64 %57, %56
  %59 = add nsw i32 %50, 8
  %60 = add nsw i32 %48, -8
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %46, label %62, !llvm.loop !4

62:                                               ; preds = %52, %46, %39
  %63 = phi i32 [ %36, %39 ], [ %50, %46 ], [ %59, %52 ]
  %64 = phi i64 [ %33, %39 ], [ %49, %46 ], [ %58, %52 ]
  %65 = phi i8* [ %41, %39 ], [ %47, %46 ], [ %53, %52 ]
  %66 = icmp eq i8* %65, %45
  br i1 %66, label %67, label %73

67:                                               ; preds = %62
  %68 = add i64 %64, 1
  %69 = sub nsw i32 48, %63
  %70 = zext i32 %69 to i64
  %71 = shl i64 %68, %70
  %72 = add i64 %71, -1
  br label %73

73:                                               ; preds = %67, %62
  %74 = phi i32 [ 48, %67 ], [ %63, %62 ]
  %75 = phi i64 [ %72, %67 ], [ %64, %62 ]
  store i8* %65, i8** %40, align 8
  store i32 %74, i32* %7, align 4
  store i64 %75, i64* %5, align 8
  br label %76

76:                                               ; preds = %28, %73
  %77 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %106, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds i16, i16* %1, i64 10
  %82 = load i16, i16* %81, align 2
  %83 = lshr i16 %82, 4
  %84 = add nuw nsw i16 %83, 5
  %85 = zext i16 %84 to i32
  %86 = shl i64 %19, 32
  %87 = icmp sgt i64 %86, 0
  %88 = load i16, i16* %1, align 2
  %89 = zext i16 %88 to i32
  br i1 %87, label %97, label %90

90:                                               ; preds = %80
  %91 = lshr i32 %89, %85
  %92 = trunc i32 %91 to i16
  %93 = sub i16 %88, %92
  store i16 %93, i16* %1, align 2
  %94 = getelementptr inbounds i16, i16* %1, i64 1
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  br label %107

97:                                               ; preds = %80
  %98 = sub nsw i32 32768, %89
  %99 = ashr i32 %98, %85
  %100 = trunc i32 %99 to i16
  %101 = add i16 %88, %100
  store i16 %101, i16* %1, align 2
  %102 = icmp sgt i64 %86, 4294967296
  %103 = getelementptr inbounds i16, i16* %1, i64 1
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  br i1 %102, label %117, label %107

106:                                              ; preds = %76, %252
  ret i32 %29

107:                                              ; preds = %97, %90
  %108 = phi i32 [ %96, %90 ], [ %105, %97 ]
  %109 = phi i16 [ %95, %90 ], [ %104, %97 ]
  %110 = phi i16* [ %94, %90 ], [ %103, %97 ]
  %111 = lshr i32 %108, %85
  %112 = trunc i32 %111 to i16
  %113 = sub i16 %109, %112
  store i16 %113, i16* %110, align 2
  %114 = getelementptr inbounds i16, i16* %1, i64 2
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  br label %126

117:                                              ; preds = %97
  %118 = sub nsw i32 32768, %105
  %119 = ashr i32 %118, %85
  %120 = trunc i32 %119 to i16
  %121 = add i16 %104, %120
  store i16 %121, i16* %103, align 2
  %122 = icmp sgt i64 %86, 8589934592
  %123 = getelementptr inbounds i16, i16* %1, i64 2
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  br i1 %122, label %136, label %126

126:                                              ; preds = %117, %107
  %127 = phi i32 [ %116, %107 ], [ %125, %117 ]
  %128 = phi i16 [ %115, %107 ], [ %124, %117 ]
  %129 = phi i16* [ %114, %107 ], [ %123, %117 ]
  %130 = lshr i32 %127, %85
  %131 = trunc i32 %130 to i16
  %132 = sub i16 %128, %131
  store i16 %132, i16* %129, align 2
  %133 = getelementptr inbounds i16, i16* %1, i64 3
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  br label %145

136:                                              ; preds = %117
  %137 = sub nsw i32 32768, %125
  %138 = ashr i32 %137, %85
  %139 = trunc i32 %138 to i16
  %140 = add i16 %124, %139
  store i16 %140, i16* %123, align 2
  %141 = icmp sgt i64 %86, 12884901888
  %142 = getelementptr inbounds i16, i16* %1, i64 3
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  br i1 %141, label %155, label %145

145:                                              ; preds = %136, %126
  %146 = phi i32 [ %135, %126 ], [ %144, %136 ]
  %147 = phi i16 [ %134, %126 ], [ %143, %136 ]
  %148 = phi i16* [ %133, %126 ], [ %142, %136 ]
  %149 = lshr i32 %146, %85
  %150 = trunc i32 %149 to i16
  %151 = sub i16 %147, %150
  store i16 %151, i16* %148, align 2
  %152 = getelementptr inbounds i16, i16* %1, i64 4
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  br label %164

155:                                              ; preds = %136
  %156 = sub nsw i32 32768, %144
  %157 = ashr i32 %156, %85
  %158 = trunc i32 %157 to i16
  %159 = add i16 %143, %158
  store i16 %159, i16* %142, align 2
  %160 = icmp sgt i64 %86, 17179869184
  %161 = getelementptr inbounds i16, i16* %1, i64 4
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  br i1 %160, label %174, label %164

164:                                              ; preds = %155, %145
  %165 = phi i32 [ %154, %145 ], [ %163, %155 ]
  %166 = phi i16 [ %153, %145 ], [ %162, %155 ]
  %167 = phi i16* [ %152, %145 ], [ %161, %155 ]
  %168 = lshr i32 %165, %85
  %169 = trunc i32 %168 to i16
  %170 = sub i16 %166, %169
  store i16 %170, i16* %167, align 2
  %171 = getelementptr inbounds i16, i16* %1, i64 5
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  br label %183

174:                                              ; preds = %155
  %175 = sub nsw i32 32768, %163
  %176 = ashr i32 %175, %85
  %177 = trunc i32 %176 to i16
  %178 = add i16 %162, %177
  store i16 %178, i16* %161, align 2
  %179 = icmp sgt i64 %86, 21474836480
  %180 = getelementptr inbounds i16, i16* %1, i64 5
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  br i1 %179, label %193, label %183

183:                                              ; preds = %174, %164
  %184 = phi i32 [ %173, %164 ], [ %182, %174 ]
  %185 = phi i16 [ %172, %164 ], [ %181, %174 ]
  %186 = phi i16* [ %171, %164 ], [ %180, %174 ]
  %187 = lshr i32 %184, %85
  %188 = trunc i32 %187 to i16
  %189 = sub i16 %185, %188
  store i16 %189, i16* %186, align 2
  %190 = getelementptr inbounds i16, i16* %1, i64 6
  %191 = load i16, i16* %190, align 2
  %192 = zext i16 %191 to i32
  br label %202

193:                                              ; preds = %174
  %194 = sub nsw i32 32768, %182
  %195 = ashr i32 %194, %85
  %196 = trunc i32 %195 to i16
  %197 = add i16 %181, %196
  store i16 %197, i16* %180, align 2
  %198 = icmp sgt i64 %86, 25769803776
  %199 = getelementptr inbounds i16, i16* %1, i64 6
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  br i1 %198, label %212, label %202

202:                                              ; preds = %193, %183
  %203 = phi i32 [ %192, %183 ], [ %201, %193 ]
  %204 = phi i16 [ %191, %183 ], [ %200, %193 ]
  %205 = phi i16* [ %190, %183 ], [ %199, %193 ]
  %206 = lshr i32 %203, %85
  %207 = trunc i32 %206 to i16
  %208 = sub i16 %204, %207
  store i16 %208, i16* %205, align 2
  %209 = getelementptr inbounds i16, i16* %1, i64 7
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i32
  br label %221

212:                                              ; preds = %193
  %213 = sub nsw i32 32768, %201
  %214 = ashr i32 %213, %85
  %215 = trunc i32 %214 to i16
  %216 = add i16 %200, %215
  store i16 %216, i16* %199, align 2
  %217 = icmp sgt i64 %86, 30064771072
  %218 = getelementptr inbounds i16, i16* %1, i64 7
  %219 = load i16, i16* %218, align 2
  %220 = zext i16 %219 to i32
  br i1 %217, label %231, label %221

221:                                              ; preds = %212, %202
  %222 = phi i32 [ %211, %202 ], [ %220, %212 ]
  %223 = phi i16 [ %210, %202 ], [ %219, %212 ]
  %224 = phi i16* [ %209, %202 ], [ %218, %212 ]
  %225 = lshr i32 %222, %85
  %226 = trunc i32 %225 to i16
  %227 = sub i16 %223, %226
  store i16 %227, i16* %224, align 2
  %228 = getelementptr inbounds i16, i16* %1, i64 8
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  br label %240

231:                                              ; preds = %212
  %232 = sub nsw i32 32768, %220
  %233 = ashr i32 %232, %85
  %234 = trunc i32 %233 to i16
  %235 = add i16 %219, %234
  store i16 %235, i16* %218, align 2
  %236 = icmp sgt i64 %86, 34359738368
  %237 = getelementptr inbounds i16, i16* %1, i64 8
  %238 = load i16, i16* %237, align 2
  %239 = zext i16 %238 to i32
  br i1 %236, label %247, label %240

240:                                              ; preds = %221, %231
  %241 = phi i32 [ %230, %221 ], [ %239, %231 ]
  %242 = phi i16 [ %229, %221 ], [ %238, %231 ]
  %243 = phi i16* [ %228, %221 ], [ %237, %231 ]
  %244 = lshr i32 %241, %85
  %245 = trunc i32 %244 to i16
  %246 = sub i16 %242, %245
  br label %252

247:                                              ; preds = %231
  %248 = sub nsw i32 32768, %239
  %249 = ashr i32 %248, %85
  %250 = trunc i32 %249 to i16
  %251 = add i16 %238, %250
  br label %252

252:                                              ; preds = %247, %240
  %253 = phi i16* [ %243, %240 ], [ %237, %247 ]
  %254 = phi i16 [ %246, %240 ], [ %251, %247 ]
  store i16 %254, i16* %253, align 2
  %255 = icmp ult i16 %82, 32
  %256 = zext i1 %255 to i16
  %257 = add i16 %82, %256
  store i16 %257, i16* %81, align 2
  br label %106
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi11EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = and i32 %11, 65535
  br label %14

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %19, %14 ], [ -1, %2 ]
  %16 = phi i32 [ %26, %14 ], [ %4, %2 ]
  %17 = phi i32 [ %18, %14 ], [ 44, %2 ]
  %18 = add i32 %17, -4
  %19 = add nsw i64 %15, 1
  %20 = getelementptr inbounds i16, i16* %1, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = lshr i16 %21, 6
  %23 = zext i16 %22 to i32
  %24 = mul i32 %12, %23
  %25 = lshr i32 %24, 1
  %26 = add i32 %25, %18
  %27 = icmp ult i32 %13, %26
  br i1 %27, label %14, label %28

28:                                               ; preds = %14
  %29 = trunc i64 %19 to i32
  %30 = sub i32 %16, %26
  %31 = zext i32 %26 to i64
  %32 = shl i64 %31, %9
  %33 = sub i64 %6, %32
  store i64 %33, i64* %5, align 8
  %34 = tail call i32 @llvm.ctlz.i32(i32 %30, i1 true) #6, !range !3
  %35 = xor i32 %34, 16
  %36 = sub nsw i32 %8, %35
  store i32 %36, i32* %7, align 4
  %37 = shl i32 %30, %35
  store i32 %37, i32* %3, align 8
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = sub i32 40, %36
  %43 = icmp sgt i32 %42, -1
  %44 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %45 = load i8*, i8** %44, align 8
  br i1 %43, label %46, label %62

46:                                               ; preds = %39, %52
  %47 = phi i8* [ %53, %52 ], [ %41, %39 ]
  %48 = phi i32 [ %60, %52 ], [ %42, %39 ]
  %49 = phi i64 [ %58, %52 ], [ %33, %39 ]
  %50 = phi i32 [ %59, %52 ], [ %36, %39 ]
  %51 = icmp ult i8* %47, %45
  br i1 %51, label %52, label %62

52:                                               ; preds = %46
  %53 = getelementptr inbounds i8, i8* %47, i64 1
  %54 = load i8, i8* %47, align 1
  %55 = xor i8 %54, -1
  %56 = zext i8 %55 to i64
  %57 = shl i64 %49, 8
  %58 = or i64 %57, %56
  %59 = add nsw i32 %50, 8
  %60 = add nsw i32 %48, -8
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %46, label %62, !llvm.loop !4

62:                                               ; preds = %52, %46, %39
  %63 = phi i32 [ %36, %39 ], [ %50, %46 ], [ %59, %52 ]
  %64 = phi i64 [ %33, %39 ], [ %49, %46 ], [ %58, %52 ]
  %65 = phi i8* [ %41, %39 ], [ %47, %46 ], [ %53, %52 ]
  %66 = icmp eq i8* %65, %45
  br i1 %66, label %67, label %73

67:                                               ; preds = %62
  %68 = add i64 %64, 1
  %69 = sub nsw i32 48, %63
  %70 = zext i32 %69 to i64
  %71 = shl i64 %68, %70
  %72 = add i64 %71, -1
  br label %73

73:                                               ; preds = %67, %62
  %74 = phi i32 [ 48, %67 ], [ %63, %62 ]
  %75 = phi i64 [ %72, %67 ], [ %64, %62 ]
  store i8* %65, i8** %40, align 8
  store i32 %74, i32* %7, align 4
  store i64 %75, i64* %5, align 8
  br label %76

76:                                               ; preds = %28, %73
  %77 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %149, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds i16, i16* %1, i64 2
  %82 = bitcast i16* %81 to <2 x i64>*
  %83 = load <2 x i64>, <2 x i64>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %1, i64 11
  %85 = load i16, i16* %84, align 2
  %86 = icmp ult i16 %85, 32
  %87 = zext i1 %86 to i16
  %88 = add i16 %85, %87
  store i16 %88, i16* %84, align 2
  %89 = lshr i16 %85, 4
  %90 = add nuw nsw i16 %89, 5
  %91 = zext i16 %90 to i32
  %92 = icmp sgt i32 %29, 1
  br i1 %92, label %93, label %120

93:                                               ; preds = %80
  %94 = load i16, i16* %1, align 2
  %95 = zext i16 %94 to i32
  %96 = sub nsw i32 32768, %95
  %97 = ashr i32 %96, %91
  %98 = trunc i32 %97 to i16
  %99 = add i16 %94, %98
  store i16 %99, i16* %1, align 2
  %100 = getelementptr inbounds i16, i16* %1, i64 1
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = sub nsw i32 32768, %102
  %104 = ashr i32 %103, %91
  %105 = trunc i32 %104 to i16
  %106 = add i16 %101, %105
  store i16 %106, i16* %100, align 2
  %107 = trunc i64 %19 to i16
  %108 = insertelement <8 x i16> undef, i16 %107, i32 0
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> zeroinitializer
  %110 = icmp slt <8 x i16> %109, <i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10>
  %111 = select <8 x i1> %110, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %112 = bitcast <2 x i64> %83 to <8 x i16>
  %113 = sub <8 x i16> %111, %112
  %114 = zext <8 x i1> %110 to <8 x i16>
  %115 = add <8 x i16> %112, %114
  %116 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %91, i32 0
  %117 = bitcast <4 x i32> %116 to <8 x i16>
  %118 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %113, <8 x i16> %117) #6
  %119 = add <8 x i16> %115, %118
  br label %146

120:                                              ; preds = %80
  %121 = icmp eq i32 %29, 0
  %122 = load i16, i16* %1, align 2
  %123 = zext i16 %122 to i32
  br i1 %121, label %129, label %124

124:                                              ; preds = %120
  %125 = sub nsw i32 32768, %123
  %126 = ashr i32 %125, %91
  %127 = trunc i32 %126 to i16
  %128 = add i16 %122, %127
  br label %133

129:                                              ; preds = %120
  %130 = lshr i32 %123, %91
  %131 = trunc i32 %130 to i16
  %132 = sub i16 %122, %131
  br label %133

133:                                              ; preds = %129, %124
  %134 = phi i16 [ %132, %129 ], [ %128, %124 ]
  store i16 %134, i16* %1, align 2
  %135 = getelementptr inbounds i16, i16* %1, i64 1
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = lshr i32 %137, %91
  %139 = trunc i32 %138 to i16
  %140 = sub i16 %136, %139
  store i16 %140, i16* %135, align 2
  %141 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %91, i32 0
  %142 = bitcast <2 x i64> %83 to <8 x i16>
  %143 = bitcast <4 x i32> %141 to <8 x i16>
  %144 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %142, <8 x i16> %143) #6
  %145 = sub <8 x i16> %142, %144
  br label %146

146:                                              ; preds = %93, %133
  %147 = phi <8 x i16> [ %145, %133 ], [ %119, %93 ]
  %148 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 1
  br label %149

149:                                              ; preds = %146, %76
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi12EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = and i32 %11, 65535
  br label %14

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %19, %14 ], [ -1, %2 ]
  %16 = phi i32 [ %26, %14 ], [ %4, %2 ]
  %17 = phi i32 [ %18, %14 ], [ 48, %2 ]
  %18 = add i32 %17, -4
  %19 = add nsw i64 %15, 1
  %20 = getelementptr inbounds i16, i16* %1, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = lshr i16 %21, 6
  %23 = zext i16 %22 to i32
  %24 = mul i32 %12, %23
  %25 = lshr i32 %24, 1
  %26 = add i32 %25, %18
  %27 = icmp ult i32 %13, %26
  br i1 %27, label %14, label %28

28:                                               ; preds = %14
  %29 = trunc i64 %19 to i32
  %30 = sub i32 %16, %26
  %31 = zext i32 %26 to i64
  %32 = shl i64 %31, %9
  %33 = sub i64 %6, %32
  store i64 %33, i64* %5, align 8
  %34 = tail call i32 @llvm.ctlz.i32(i32 %30, i1 true) #6, !range !3
  %35 = xor i32 %34, 16
  %36 = sub nsw i32 %8, %35
  store i32 %36, i32* %7, align 4
  %37 = shl i32 %30, %35
  store i32 %37, i32* %3, align 8
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = sub i32 40, %36
  %43 = icmp sgt i32 %42, -1
  %44 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %45 = load i8*, i8** %44, align 8
  br i1 %43, label %46, label %62

46:                                               ; preds = %39, %52
  %47 = phi i8* [ %53, %52 ], [ %41, %39 ]
  %48 = phi i32 [ %60, %52 ], [ %42, %39 ]
  %49 = phi i64 [ %58, %52 ], [ %33, %39 ]
  %50 = phi i32 [ %59, %52 ], [ %36, %39 ]
  %51 = icmp ult i8* %47, %45
  br i1 %51, label %52, label %62

52:                                               ; preds = %46
  %53 = getelementptr inbounds i8, i8* %47, i64 1
  %54 = load i8, i8* %47, align 1
  %55 = xor i8 %54, -1
  %56 = zext i8 %55 to i64
  %57 = shl i64 %49, 8
  %58 = or i64 %57, %56
  %59 = add nsw i32 %50, 8
  %60 = add nsw i32 %48, -8
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %46, label %62, !llvm.loop !4

62:                                               ; preds = %52, %46, %39
  %63 = phi i32 [ %36, %39 ], [ %50, %46 ], [ %59, %52 ]
  %64 = phi i64 [ %33, %39 ], [ %49, %46 ], [ %58, %52 ]
  %65 = phi i8* [ %41, %39 ], [ %47, %46 ], [ %53, %52 ]
  %66 = icmp eq i8* %65, %45
  br i1 %66, label %67, label %73

67:                                               ; preds = %62
  %68 = add i64 %64, 1
  %69 = sub nsw i32 48, %63
  %70 = zext i32 %69 to i64
  %71 = shl i64 %68, %70
  %72 = add i64 %71, -1
  br label %73

73:                                               ; preds = %67, %62
  %74 = phi i32 [ 48, %67 ], [ %63, %62 ]
  %75 = phi i64 [ %72, %67 ], [ %64, %62 ]
  store i8* %65, i8** %40, align 8
  store i32 %74, i32* %7, align 4
  store i64 %75, i64* %5, align 8
  br label %76

76:                                               ; preds = %28, %73
  %77 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %106, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds i16, i16* %1, i64 12
  %82 = load i16, i16* %81, align 2
  %83 = lshr i16 %82, 4
  %84 = add nuw nsw i16 %83, 5
  %85 = zext i16 %84 to i32
  %86 = shl i64 %19, 32
  %87 = icmp sgt i64 %86, 0
  %88 = load i16, i16* %1, align 2
  %89 = zext i16 %88 to i32
  br i1 %87, label %97, label %90

90:                                               ; preds = %80
  %91 = lshr i32 %89, %85
  %92 = trunc i32 %91 to i16
  %93 = sub i16 %88, %92
  store i16 %93, i16* %1, align 2
  %94 = getelementptr inbounds i16, i16* %1, i64 1
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  br label %107

97:                                               ; preds = %80
  %98 = sub nsw i32 32768, %89
  %99 = ashr i32 %98, %85
  %100 = trunc i32 %99 to i16
  %101 = add i16 %88, %100
  store i16 %101, i16* %1, align 2
  %102 = icmp sgt i64 %86, 4294967296
  %103 = getelementptr inbounds i16, i16* %1, i64 1
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  br i1 %102, label %117, label %107

106:                                              ; preds = %76, %290
  ret i32 %29

107:                                              ; preds = %97, %90
  %108 = phi i32 [ %96, %90 ], [ %105, %97 ]
  %109 = phi i16 [ %95, %90 ], [ %104, %97 ]
  %110 = phi i16* [ %94, %90 ], [ %103, %97 ]
  %111 = lshr i32 %108, %85
  %112 = trunc i32 %111 to i16
  %113 = sub i16 %109, %112
  store i16 %113, i16* %110, align 2
  %114 = getelementptr inbounds i16, i16* %1, i64 2
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  br label %126

117:                                              ; preds = %97
  %118 = sub nsw i32 32768, %105
  %119 = ashr i32 %118, %85
  %120 = trunc i32 %119 to i16
  %121 = add i16 %104, %120
  store i16 %121, i16* %103, align 2
  %122 = icmp sgt i64 %86, 8589934592
  %123 = getelementptr inbounds i16, i16* %1, i64 2
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  br i1 %122, label %136, label %126

126:                                              ; preds = %117, %107
  %127 = phi i32 [ %116, %107 ], [ %125, %117 ]
  %128 = phi i16 [ %115, %107 ], [ %124, %117 ]
  %129 = phi i16* [ %114, %107 ], [ %123, %117 ]
  %130 = lshr i32 %127, %85
  %131 = trunc i32 %130 to i16
  %132 = sub i16 %128, %131
  store i16 %132, i16* %129, align 2
  %133 = getelementptr inbounds i16, i16* %1, i64 3
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  br label %145

136:                                              ; preds = %117
  %137 = sub nsw i32 32768, %125
  %138 = ashr i32 %137, %85
  %139 = trunc i32 %138 to i16
  %140 = add i16 %124, %139
  store i16 %140, i16* %123, align 2
  %141 = icmp sgt i64 %86, 12884901888
  %142 = getelementptr inbounds i16, i16* %1, i64 3
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  br i1 %141, label %155, label %145

145:                                              ; preds = %136, %126
  %146 = phi i32 [ %135, %126 ], [ %144, %136 ]
  %147 = phi i16 [ %134, %126 ], [ %143, %136 ]
  %148 = phi i16* [ %133, %126 ], [ %142, %136 ]
  %149 = lshr i32 %146, %85
  %150 = trunc i32 %149 to i16
  %151 = sub i16 %147, %150
  store i16 %151, i16* %148, align 2
  %152 = getelementptr inbounds i16, i16* %1, i64 4
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  br label %164

155:                                              ; preds = %136
  %156 = sub nsw i32 32768, %144
  %157 = ashr i32 %156, %85
  %158 = trunc i32 %157 to i16
  %159 = add i16 %143, %158
  store i16 %159, i16* %142, align 2
  %160 = icmp sgt i64 %86, 17179869184
  %161 = getelementptr inbounds i16, i16* %1, i64 4
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  br i1 %160, label %174, label %164

164:                                              ; preds = %155, %145
  %165 = phi i32 [ %154, %145 ], [ %163, %155 ]
  %166 = phi i16 [ %153, %145 ], [ %162, %155 ]
  %167 = phi i16* [ %152, %145 ], [ %161, %155 ]
  %168 = lshr i32 %165, %85
  %169 = trunc i32 %168 to i16
  %170 = sub i16 %166, %169
  store i16 %170, i16* %167, align 2
  %171 = getelementptr inbounds i16, i16* %1, i64 5
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  br label %183

174:                                              ; preds = %155
  %175 = sub nsw i32 32768, %163
  %176 = ashr i32 %175, %85
  %177 = trunc i32 %176 to i16
  %178 = add i16 %162, %177
  store i16 %178, i16* %161, align 2
  %179 = icmp sgt i64 %86, 21474836480
  %180 = getelementptr inbounds i16, i16* %1, i64 5
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  br i1 %179, label %193, label %183

183:                                              ; preds = %174, %164
  %184 = phi i32 [ %173, %164 ], [ %182, %174 ]
  %185 = phi i16 [ %172, %164 ], [ %181, %174 ]
  %186 = phi i16* [ %171, %164 ], [ %180, %174 ]
  %187 = lshr i32 %184, %85
  %188 = trunc i32 %187 to i16
  %189 = sub i16 %185, %188
  store i16 %189, i16* %186, align 2
  %190 = getelementptr inbounds i16, i16* %1, i64 6
  %191 = load i16, i16* %190, align 2
  %192 = zext i16 %191 to i32
  br label %202

193:                                              ; preds = %174
  %194 = sub nsw i32 32768, %182
  %195 = ashr i32 %194, %85
  %196 = trunc i32 %195 to i16
  %197 = add i16 %181, %196
  store i16 %197, i16* %180, align 2
  %198 = icmp sgt i64 %86, 25769803776
  %199 = getelementptr inbounds i16, i16* %1, i64 6
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  br i1 %198, label %212, label %202

202:                                              ; preds = %193, %183
  %203 = phi i32 [ %192, %183 ], [ %201, %193 ]
  %204 = phi i16 [ %191, %183 ], [ %200, %193 ]
  %205 = phi i16* [ %190, %183 ], [ %199, %193 ]
  %206 = lshr i32 %203, %85
  %207 = trunc i32 %206 to i16
  %208 = sub i16 %204, %207
  store i16 %208, i16* %205, align 2
  %209 = getelementptr inbounds i16, i16* %1, i64 7
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i32
  br label %221

212:                                              ; preds = %193
  %213 = sub nsw i32 32768, %201
  %214 = ashr i32 %213, %85
  %215 = trunc i32 %214 to i16
  %216 = add i16 %200, %215
  store i16 %216, i16* %199, align 2
  %217 = icmp sgt i64 %86, 30064771072
  %218 = getelementptr inbounds i16, i16* %1, i64 7
  %219 = load i16, i16* %218, align 2
  %220 = zext i16 %219 to i32
  br i1 %217, label %231, label %221

221:                                              ; preds = %212, %202
  %222 = phi i32 [ %211, %202 ], [ %220, %212 ]
  %223 = phi i16 [ %210, %202 ], [ %219, %212 ]
  %224 = phi i16* [ %209, %202 ], [ %218, %212 ]
  %225 = lshr i32 %222, %85
  %226 = trunc i32 %225 to i16
  %227 = sub i16 %223, %226
  store i16 %227, i16* %224, align 2
  %228 = getelementptr inbounds i16, i16* %1, i64 8
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  br label %240

231:                                              ; preds = %212
  %232 = sub nsw i32 32768, %220
  %233 = ashr i32 %232, %85
  %234 = trunc i32 %233 to i16
  %235 = add i16 %219, %234
  store i16 %235, i16* %218, align 2
  %236 = icmp sgt i64 %86, 34359738368
  %237 = getelementptr inbounds i16, i16* %1, i64 8
  %238 = load i16, i16* %237, align 2
  %239 = zext i16 %238 to i32
  br i1 %236, label %250, label %240

240:                                              ; preds = %231, %221
  %241 = phi i32 [ %230, %221 ], [ %239, %231 ]
  %242 = phi i16 [ %229, %221 ], [ %238, %231 ]
  %243 = phi i16* [ %228, %221 ], [ %237, %231 ]
  %244 = lshr i32 %241, %85
  %245 = trunc i32 %244 to i16
  %246 = sub i16 %242, %245
  store i16 %246, i16* %243, align 2
  %247 = getelementptr inbounds i16, i16* %1, i64 9
  %248 = load i16, i16* %247, align 2
  %249 = zext i16 %248 to i32
  br label %259

250:                                              ; preds = %231
  %251 = sub nsw i32 32768, %239
  %252 = ashr i32 %251, %85
  %253 = trunc i32 %252 to i16
  %254 = add i16 %238, %253
  store i16 %254, i16* %237, align 2
  %255 = icmp sgt i64 %86, 38654705664
  %256 = getelementptr inbounds i16, i16* %1, i64 9
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  br i1 %255, label %269, label %259

259:                                              ; preds = %250, %240
  %260 = phi i32 [ %249, %240 ], [ %258, %250 ]
  %261 = phi i16 [ %248, %240 ], [ %257, %250 ]
  %262 = phi i16* [ %247, %240 ], [ %256, %250 ]
  %263 = lshr i32 %260, %85
  %264 = trunc i32 %263 to i16
  %265 = sub i16 %261, %264
  store i16 %265, i16* %262, align 2
  %266 = getelementptr inbounds i16, i16* %1, i64 10
  %267 = load i16, i16* %266, align 2
  %268 = zext i16 %267 to i32
  br label %278

269:                                              ; preds = %250
  %270 = sub nsw i32 32768, %258
  %271 = ashr i32 %270, %85
  %272 = trunc i32 %271 to i16
  %273 = add i16 %257, %272
  store i16 %273, i16* %256, align 2
  %274 = icmp sgt i64 %86, 42949672960
  %275 = getelementptr inbounds i16, i16* %1, i64 10
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  br i1 %274, label %285, label %278

278:                                              ; preds = %259, %269
  %279 = phi i32 [ %268, %259 ], [ %277, %269 ]
  %280 = phi i16 [ %267, %259 ], [ %276, %269 ]
  %281 = phi i16* [ %266, %259 ], [ %275, %269 ]
  %282 = lshr i32 %279, %85
  %283 = trunc i32 %282 to i16
  %284 = sub i16 %280, %283
  br label %290

285:                                              ; preds = %269
  %286 = sub nsw i32 32768, %277
  %287 = ashr i32 %286, %85
  %288 = trunc i32 %287 to i16
  %289 = add i16 %276, %288
  br label %290

290:                                              ; preds = %285, %278
  %291 = phi i16* [ %281, %278 ], [ %275, %285 ]
  %292 = phi i16 [ %284, %278 ], [ %289, %285 ]
  store i16 %292, i16* %291, align 2
  %293 = icmp ult i16 %82, 32
  %294 = zext i1 %293 to i16
  %295 = add i16 %82, %294
  store i16 %295, i16* %81, align 2
  br label %106
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi13EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = lshr i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %4, 8
  %13 = and i32 %11, 65535
  br label %14

14:                                               ; preds = %14, %2
  %15 = phi i64 [ %19, %14 ], [ -1, %2 ]
  %16 = phi i32 [ %26, %14 ], [ %4, %2 ]
  %17 = phi i32 [ %18, %14 ], [ 52, %2 ]
  %18 = add i32 %17, -4
  %19 = add nsw i64 %15, 1
  %20 = getelementptr inbounds i16, i16* %1, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = lshr i16 %21, 6
  %23 = zext i16 %22 to i32
  %24 = mul i32 %12, %23
  %25 = lshr i32 %24, 1
  %26 = add i32 %25, %18
  %27 = icmp ult i32 %13, %26
  br i1 %27, label %14, label %28

28:                                               ; preds = %14
  %29 = trunc i64 %19 to i32
  %30 = sub i32 %16, %26
  %31 = zext i32 %26 to i64
  %32 = shl i64 %31, %9
  %33 = sub i64 %6, %32
  store i64 %33, i64* %5, align 8
  %34 = tail call i32 @llvm.ctlz.i32(i32 %30, i1 true) #6, !range !3
  %35 = xor i32 %34, 16
  %36 = sub nsw i32 %8, %35
  store i32 %36, i32* %7, align 4
  %37 = shl i32 %30, %35
  store i32 %37, i32* %3, align 8
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %76

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = sub i32 40, %36
  %43 = icmp sgt i32 %42, -1
  %44 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %45 = load i8*, i8** %44, align 8
  br i1 %43, label %46, label %62

46:                                               ; preds = %39, %52
  %47 = phi i8* [ %53, %52 ], [ %41, %39 ]
  %48 = phi i32 [ %60, %52 ], [ %42, %39 ]
  %49 = phi i64 [ %58, %52 ], [ %33, %39 ]
  %50 = phi i32 [ %59, %52 ], [ %36, %39 ]
  %51 = icmp ult i8* %47, %45
  br i1 %51, label %52, label %62

52:                                               ; preds = %46
  %53 = getelementptr inbounds i8, i8* %47, i64 1
  %54 = load i8, i8* %47, align 1
  %55 = xor i8 %54, -1
  %56 = zext i8 %55 to i64
  %57 = shl i64 %49, 8
  %58 = or i64 %57, %56
  %59 = add nsw i32 %50, 8
  %60 = add nsw i32 %48, -8
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %46, label %62, !llvm.loop !4

62:                                               ; preds = %52, %46, %39
  %63 = phi i32 [ %36, %39 ], [ %50, %46 ], [ %59, %52 ]
  %64 = phi i64 [ %33, %39 ], [ %49, %46 ], [ %58, %52 ]
  %65 = phi i8* [ %41, %39 ], [ %47, %46 ], [ %53, %52 ]
  %66 = icmp eq i8* %65, %45
  br i1 %66, label %67, label %73

67:                                               ; preds = %62
  %68 = add i64 %64, 1
  %69 = sub nsw i32 48, %63
  %70 = zext i32 %69 to i64
  %71 = shl i64 %68, %70
  %72 = add i64 %71, -1
  br label %73

73:                                               ; preds = %67, %62
  %74 = phi i32 [ 48, %67 ], [ %63, %62 ]
  %75 = phi i64 [ %72, %67 ], [ %64, %62 ]
  store i8* %65, i8** %40, align 8
  store i32 %74, i32* %7, align 4
  store i64 %75, i64* %5, align 8
  br label %76

76:                                               ; preds = %28, %73
  %77 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %117, label %80

80:                                               ; preds = %76
  %81 = bitcast i16* %1 to i64*
  %82 = load i64, i64* %81, align 1
  %83 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %82, i32 0
  %84 = getelementptr inbounds i16, i16* %1, i64 4
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %1, i64 13
  %88 = load i16, i16* %87, align 2
  %89 = lshr i16 %88, 4
  %90 = add nuw nsw i16 %89, 5
  %91 = zext i16 %90 to i32
  %92 = trunc i64 %19 to i16
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = icmp slt <8 x i16> %94, <i16 1, i16 2, i16 3, i16 4, i16 0, i16 0, i16 0, i16 0>
  %96 = select <8 x i1> %95, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %97 = bitcast <2 x i64> %83 to <8 x i16>
  %98 = sub <8 x i16> %96, %97
  %99 = zext <8 x i1> %95 to <8 x i16>
  %100 = add <8 x i16> %97, %99
  %101 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %91, i32 0
  %102 = bitcast <4 x i32> %101 to <8 x i16>
  %103 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %98, <8 x i16> %102) #6
  %104 = add <8 x i16> %100, %103
  %105 = bitcast <8 x i16> %104 to <2 x i64>
  %106 = extractelement <2 x i64> %105, i32 0
  store i64 %106, i64* %81, align 1
  %107 = icmp slt <8 x i16> %94, <i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12>
  %108 = select <8 x i1> %107, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %109 = sub <8 x i16> %108, %86
  %110 = zext <8 x i1> %107 to <8 x i16>
  %111 = add <8 x i16> %86, %110
  %112 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %109, <8 x i16> %102) #6
  %113 = add <8 x i16> %111, %112
  store <8 x i16> %113, <8 x i16>* %85, align 1
  %114 = icmp ult i16 %88, 32
  %115 = zext i1 %114 to i16
  %116 = add i16 %88, %115
  store i16 %116, i16* %87, align 2
  br label %117

117:                                              ; preds = %76, %80
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi14EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = lshr i64 %4, %7
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %11 = load i32, i32* %10, align 8
  %12 = lshr i32 %11, 8
  %13 = and i32 %9, 65535
  br label %14

14:                                               ; preds = %37, %2
  %15 = phi i32 [ 0, %2 ], [ %38, %37 ]
  %16 = phi i32 [ 12, %2 ], [ %39, %37 ]
  %17 = phi i32 [ %11, %2 ], [ %40, %37 ]
  %18 = phi i32 [ 0, %2 ], [ %41, %37 ]
  %19 = add nsw i32 %16, %15
  %20 = ashr i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16, i16* %1, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = lshr i16 %23, 6
  %25 = zext i16 %24 to i32
  %26 = mul i32 %12, %25
  %27 = lshr i32 %26, 1
  %28 = shl i32 %20, 2
  %29 = xor i32 %28, -4
  %30 = add i32 %29, 56
  %31 = add i32 %30, %27
  %32 = icmp ult i32 %13, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %14
  %34 = add nsw i32 %20, 1
  br label %37

35:                                               ; preds = %14
  %36 = add nsw i32 %20, -1
  br label %37

37:                                               ; preds = %35, %33
  %38 = phi i32 [ %34, %33 ], [ %15, %35 ]
  %39 = phi i32 [ %16, %33 ], [ %36, %35 ]
  %40 = phi i32 [ %31, %33 ], [ %17, %35 ]
  %41 = phi i32 [ %18, %33 ], [ %31, %35 ]
  %42 = icmp sgt i32 %38, %39
  br i1 %42, label %43, label %14

43:                                               ; preds = %37
  %44 = sub i32 %40, %41
  %45 = zext i32 %41 to i64
  %46 = shl i64 %45, %7
  %47 = sub i64 %4, %46
  store i64 %47, i64* %3, align 8
  %48 = tail call i32 @llvm.ctlz.i32(i32 %44, i1 true) #6, !range !3
  %49 = xor i32 %48, 16
  %50 = sub nsw i32 %6, %49
  store i32 %50, i32* %5, align 4
  %51 = shl i32 %44, %49
  store i32 %51, i32* %10, align 8
  %52 = icmp slt i32 %50, 0
  br i1 %52, label %53, label %90

53:                                               ; preds = %43
  %54 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %55 = load i8*, i8** %54, align 8
  %56 = sub i32 40, %50
  %57 = icmp sgt i32 %56, -1
  %58 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %59 = load i8*, i8** %58, align 8
  br i1 %57, label %60, label %76

60:                                               ; preds = %53, %66
  %61 = phi i8* [ %67, %66 ], [ %55, %53 ]
  %62 = phi i32 [ %74, %66 ], [ %56, %53 ]
  %63 = phi i64 [ %72, %66 ], [ %47, %53 ]
  %64 = phi i32 [ %73, %66 ], [ %50, %53 ]
  %65 = icmp ult i8* %61, %59
  br i1 %65, label %66, label %76

66:                                               ; preds = %60
  %67 = getelementptr inbounds i8, i8* %61, i64 1
  %68 = load i8, i8* %61, align 1
  %69 = xor i8 %68, -1
  %70 = zext i8 %69 to i64
  %71 = shl i64 %63, 8
  %72 = or i64 %71, %70
  %73 = add nsw i32 %64, 8
  %74 = add nsw i32 %62, -8
  %75 = icmp sgt i32 %74, -1
  br i1 %75, label %60, label %76, !llvm.loop !4

76:                                               ; preds = %66, %60, %53
  %77 = phi i32 [ %50, %53 ], [ %64, %60 ], [ %73, %66 ]
  %78 = phi i64 [ %47, %53 ], [ %63, %60 ], [ %72, %66 ]
  %79 = phi i8* [ %55, %53 ], [ %61, %60 ], [ %67, %66 ]
  %80 = icmp eq i8* %79, %59
  br i1 %80, label %81, label %87

81:                                               ; preds = %76
  %82 = add i64 %78, 1
  %83 = sub nsw i32 48, %77
  %84 = zext i32 %83 to i64
  %85 = shl i64 %82, %84
  %86 = add i64 %85, -1
  br label %87

87:                                               ; preds = %81, %76
  %88 = phi i32 [ 48, %81 ], [ %77, %76 ]
  %89 = phi i64 [ %86, %81 ], [ %78, %76 ]
  store i8* %79, i8** %54, align 8
  store i32 %88, i32* %5, align 4
  store i64 %89, i64* %3, align 8
  br label %90

90:                                               ; preds = %43, %87
  %91 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %92 = load i8, i8* %91, align 8, !range !2
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %125, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds i16, i16* %1, i64 14
  %96 = load i16, i16* %95, align 2
  %97 = lshr i16 %96, 4
  %98 = add nuw nsw i16 %97, 5
  %99 = zext i16 %98 to i32
  %100 = sext i32 %38 to i64
  br label %101

101:                                              ; preds = %140, %94
  %102 = phi i64 [ 0, %94 ], [ %142, %140 ]
  %103 = icmp slt i64 %102, %100
  %104 = getelementptr inbounds i16, i16* %1, i64 %102
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  br i1 %103, label %107, label %112

107:                                              ; preds = %101
  %108 = sub nsw i32 32768, %106
  %109 = ashr i32 %108, %99
  %110 = trunc i32 %109 to i16
  %111 = add i16 %105, %110
  br label %116

112:                                              ; preds = %101
  %113 = lshr i32 %106, %99
  %114 = trunc i32 %113 to i16
  %115 = sub i16 %105, %114
  br label %116

116:                                              ; preds = %112, %107
  %117 = phi i16 [ %115, %112 ], [ %111, %107 ]
  store i16 %117, i16* %104, align 2
  %118 = or i64 %102, 1
  %119 = icmp eq i64 %118, 13
  br i1 %119, label %120, label %126

120:                                              ; preds = %116
  %121 = icmp ult i16 %96, 32
  %122 = zext i1 %121 to i16
  %123 = load i16, i16* %95, align 2
  %124 = add i16 %123, %122
  store i16 %124, i16* %95, align 2
  br label %125

125:                                              ; preds = %90, %120
  ret i32 %38

126:                                              ; preds = %116
  %127 = icmp slt i64 %118, %100
  %128 = getelementptr inbounds i16, i16* %1, i64 %118
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  br i1 %127, label %135, label %131

131:                                              ; preds = %126
  %132 = lshr i32 %130, %99
  %133 = trunc i32 %132 to i16
  %134 = sub i16 %129, %133
  br label %140

135:                                              ; preds = %126
  %136 = sub nsw i32 32768, %130
  %137 = ashr i32 %136, %99
  %138 = trunc i32 %137 to i16
  %139 = add i16 %129, %138
  br label %140

140:                                              ; preds = %135, %131
  %141 = phi i16 [ %134, %131 ], [ %139, %135 ]
  store i16 %141, i16* %128, align 2
  %142 = add nuw nsw i64 %102, 2
  br label %101
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi16EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = lshr i64 %4, %7
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %11 = load i32, i32* %10, align 8
  %12 = lshr i32 %11, 8
  %13 = and i32 %9, 65535
  br label %14

14:                                               ; preds = %37, %2
  %15 = phi i32 [ 0, %2 ], [ %38, %37 ]
  %16 = phi i32 [ 14, %2 ], [ %39, %37 ]
  %17 = phi i32 [ %11, %2 ], [ %40, %37 ]
  %18 = phi i32 [ 0, %2 ], [ %41, %37 ]
  %19 = add nsw i32 %16, %15
  %20 = ashr i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16, i16* %1, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = lshr i16 %23, 6
  %25 = zext i16 %24 to i32
  %26 = mul i32 %12, %25
  %27 = lshr i32 %26, 1
  %28 = shl i32 %20, 2
  %29 = xor i32 %28, -4
  %30 = add i32 %29, 64
  %31 = add i32 %30, %27
  %32 = icmp ult i32 %13, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %14
  %34 = add nsw i32 %20, 1
  br label %37

35:                                               ; preds = %14
  %36 = add nsw i32 %20, -1
  br label %37

37:                                               ; preds = %35, %33
  %38 = phi i32 [ %34, %33 ], [ %15, %35 ]
  %39 = phi i32 [ %16, %33 ], [ %36, %35 ]
  %40 = phi i32 [ %31, %33 ], [ %17, %35 ]
  %41 = phi i32 [ %18, %33 ], [ %31, %35 ]
  %42 = icmp sgt i32 %38, %39
  br i1 %42, label %43, label %14

43:                                               ; preds = %37
  %44 = sub i32 %40, %41
  %45 = zext i32 %41 to i64
  %46 = shl i64 %45, %7
  %47 = sub i64 %4, %46
  store i64 %47, i64* %3, align 8
  %48 = tail call i32 @llvm.ctlz.i32(i32 %44, i1 true) #6, !range !3
  %49 = xor i32 %48, 16
  %50 = sub nsw i32 %6, %49
  store i32 %50, i32* %5, align 4
  %51 = shl i32 %44, %49
  store i32 %51, i32* %10, align 8
  %52 = icmp slt i32 %50, 0
  br i1 %52, label %53, label %90

53:                                               ; preds = %43
  %54 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %55 = load i8*, i8** %54, align 8
  %56 = sub i32 40, %50
  %57 = icmp sgt i32 %56, -1
  %58 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %59 = load i8*, i8** %58, align 8
  br i1 %57, label %60, label %76

60:                                               ; preds = %53, %66
  %61 = phi i8* [ %67, %66 ], [ %55, %53 ]
  %62 = phi i32 [ %74, %66 ], [ %56, %53 ]
  %63 = phi i64 [ %72, %66 ], [ %47, %53 ]
  %64 = phi i32 [ %73, %66 ], [ %50, %53 ]
  %65 = icmp ult i8* %61, %59
  br i1 %65, label %66, label %76

66:                                               ; preds = %60
  %67 = getelementptr inbounds i8, i8* %61, i64 1
  %68 = load i8, i8* %61, align 1
  %69 = xor i8 %68, -1
  %70 = zext i8 %69 to i64
  %71 = shl i64 %63, 8
  %72 = or i64 %71, %70
  %73 = add nsw i32 %64, 8
  %74 = add nsw i32 %62, -8
  %75 = icmp sgt i32 %74, -1
  br i1 %75, label %60, label %76, !llvm.loop !4

76:                                               ; preds = %66, %60, %53
  %77 = phi i32 [ %50, %53 ], [ %64, %60 ], [ %73, %66 ]
  %78 = phi i64 [ %47, %53 ], [ %63, %60 ], [ %72, %66 ]
  %79 = phi i8* [ %55, %53 ], [ %61, %60 ], [ %67, %66 ]
  %80 = icmp eq i8* %79, %59
  br i1 %80, label %81, label %87

81:                                               ; preds = %76
  %82 = add i64 %78, 1
  %83 = sub nsw i32 48, %77
  %84 = zext i32 %83 to i64
  %85 = shl i64 %82, %84
  %86 = add i64 %85, -1
  br label %87

87:                                               ; preds = %81, %76
  %88 = phi i32 [ 48, %81 ], [ %77, %76 ]
  %89 = phi i64 [ %86, %81 ], [ %78, %76 ]
  store i8* %79, i8** %54, align 8
  store i32 %88, i32* %5, align 4
  store i64 %89, i64* %3, align 8
  br label %90

90:                                               ; preds = %43, %87
  %91 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %92 = load i8, i8* %91, align 8, !range !2
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %127, label %94

94:                                               ; preds = %90
  %95 = bitcast i16* %1 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %1, i64 16
  %98 = load i16, i16* %97, align 2
  %99 = lshr i16 %98, 4
  %100 = add nuw nsw i16 %99, 5
  %101 = zext i16 %100 to i32
  %102 = trunc i32 %38 to i16
  %103 = insertelement <8 x i16> undef, i16 %102, i32 0
  %104 = shufflevector <8 x i16> %103, <8 x i16> undef, <8 x i32> zeroinitializer
  %105 = icmp slt <8 x i16> %104, <i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8>
  %106 = select <8 x i1> %105, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %107 = sub <8 x i16> %106, %96
  %108 = zext <8 x i1> %105 to <8 x i16>
  %109 = add <8 x i16> %96, %108
  %110 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %101, i32 0
  %111 = bitcast <4 x i32> %110 to <8 x i16>
  %112 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %107, <8 x i16> %111) #6
  %113 = add <8 x i16> %109, %112
  store <8 x i16> %113, <8 x i16>* %95, align 1
  %114 = getelementptr inbounds i16, i16* %1, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 1
  %117 = icmp slt <8 x i16> %104, <i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16>
  %118 = select <8 x i1> %117, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %119 = sub <8 x i16> %118, %116
  %120 = zext <8 x i1> %117 to <8 x i16>
  %121 = add <8 x i16> %116, %120
  %122 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %119, <8 x i16> %111) #6
  %123 = add <8 x i16> %121, %122
  store <8 x i16> %123, <8 x i16>* %115, align 1
  %124 = icmp ult i16 %98, 32
  %125 = zext i1 %124 to i16
  %126 = add i16 %98, %125
  store i16 %126, i16* %97, align 2
  br label %127

127:                                              ; preds = %90, %94
  ret i32 %38
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN7libgav114DaalaBitReaderC2EPKhmb(%"class.libgav1::DaalaBitReader"* nocapture, i8*, i64, i1 zeroext) unnamed_addr #2 align 2 {
  %5 = zext i1 %3 to i8
  %6 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7libgav114DaalaBitReaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %9 = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %9, i8** %8, align 8
  %10 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 3
  %11 = icmp ugt i64 %2, 7
  %12 = getelementptr inbounds i8, i8* %9, i64 -8
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = select i1 %11, i8* %13, i8* %1
  store i8* %14, i8** %10, align 8
  %15 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  store i8 %5, i8* %15, align 8
  %16 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  store i32 32768, i32* %16, align 8
  %17 = icmp ugt i8* %14, %1
  br i1 %17, label %18, label %26

18:                                               ; preds = %4
  %19 = bitcast i8* %1 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = getelementptr inbounds i8, i8* %1, i64 8
  store i8* %21, i8** %7, align 8
  %22 = xor i64 %20, -1
  %23 = tail call i64 @llvm.bswap.i64(i64 %22)
  %24 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  store i32 49, i32* %25, align 4
  br label %50

26:                                               ; preds = %4
  %27 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  store i64 0, i64* %27, align 8
  %28 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  store i32 -15, i32* %28, align 4
  %29 = icmp sgt i64 %2, 0
  br i1 %29, label %30, label %36

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, i8* %1, i64 1
  %32 = load i8, i8* %1, align 1
  %33 = xor i8 %32, -1
  %34 = zext i8 %33 to i64
  %35 = icmp eq i64 %2, 1
  br i1 %35, label %36, label %51

36:                                               ; preds = %75, %59, %30, %91, %83, %67, %51, %26
  %37 = phi i32 [ -15, %26 ], [ -7, %30 ], [ 1, %51 ], [ 9, %59 ], [ 17, %67 ], [ 25, %75 ], [ 33, %83 ], [ 41, %91 ]
  %38 = phi i64 [ 0, %26 ], [ %34, %30 ], [ %57, %51 ], [ %65, %59 ], [ %73, %67 ], [ %81, %75 ], [ %89, %83 ], [ %97, %91 ]
  %39 = phi i8* [ %1, %26 ], [ %31, %30 ], [ %52, %51 ], [ %60, %59 ], [ %68, %67 ], [ %76, %75 ], [ %84, %83 ], [ %92, %91 ]
  %40 = icmp eq i8* %39, %9
  br i1 %40, label %41, label %47

41:                                               ; preds = %36
  %42 = add i64 %38, 1
  %43 = sub nsw i32 48, %37
  %44 = zext i32 %43 to i64
  %45 = shl i64 %42, %44
  %46 = add i64 %45, -1
  br label %47

47:                                               ; preds = %36, %41
  %48 = phi i32 [ 48, %41 ], [ %37, %36 ]
  %49 = phi i64 [ %46, %41 ], [ %38, %36 ]
  store i8* %39, i8** %7, align 8
  store i32 %48, i32* %28, align 4
  store i64 %49, i64* %27, align 8
  br label %50

50:                                               ; preds = %47, %18
  ret void

51:                                               ; preds = %30
  %52 = getelementptr inbounds i8, i8* %1, i64 2
  %53 = load i8, i8* %31, align 1
  %54 = xor i8 %53, -1
  %55 = zext i8 %54 to i64
  %56 = shl nuw nsw i64 %34, 8
  %57 = or i64 %56, %55
  %58 = icmp sgt i64 %2, 2
  br i1 %58, label %59, label %36

59:                                               ; preds = %51
  %60 = getelementptr inbounds i8, i8* %1, i64 3
  %61 = load i8, i8* %52, align 1
  %62 = xor i8 %61, -1
  %63 = zext i8 %62 to i64
  %64 = shl nuw nsw i64 %57, 8
  %65 = or i64 %64, %63
  %66 = icmp eq i64 %2, 3
  br i1 %66, label %36, label %67

67:                                               ; preds = %59
  %68 = getelementptr inbounds i8, i8* %1, i64 4
  %69 = load i8, i8* %60, align 1
  %70 = xor i8 %69, -1
  %71 = zext i8 %70 to i64
  %72 = shl nuw nsw i64 %65, 8
  %73 = or i64 %72, %71
  %74 = icmp sgt i64 %2, 4
  br i1 %74, label %75, label %36

75:                                               ; preds = %67
  %76 = getelementptr inbounds i8, i8* %1, i64 5
  %77 = load i8, i8* %68, align 1
  %78 = xor i8 %77, -1
  %79 = zext i8 %78 to i64
  %80 = shl i64 %73, 8
  %81 = or i64 %80, %79
  %82 = icmp eq i64 %2, 5
  br i1 %82, label %36, label %83

83:                                               ; preds = %75
  %84 = getelementptr inbounds i8, i8* %1, i64 6
  %85 = load i8, i8* %76, align 1
  %86 = xor i8 %85, -1
  %87 = zext i8 %86 to i64
  %88 = shl i64 %81, 8
  %89 = or i64 %88, %87
  %90 = icmp sgt i64 %2, 6
  br i1 %90, label %91, label %36

91:                                               ; preds = %83
  %92 = getelementptr inbounds i8, i8* %1, i64 7
  %93 = load i8, i8* %84, align 1
  %94 = xor i8 %93, -1
  %95 = zext i8 %94 to i64
  %96 = shl i64 %89, 8
  %97 = or i64 %96, %95
  br label %36
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZN7libgav114DaalaBitReader7ReadBitEv(%"class.libgav1::DaalaBitReader"* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %3 = load i32, i32* %2, align 8
  %4 = lshr i32 %3, 1
  %5 = and i32 %4, 2147483520
  %6 = or i32 %5, 4
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = lshr i64 %8, %11
  %13 = trunc i64 %12 to i32
  %14 = and i32 %13, 65535
  %15 = icmp ult i32 %14, %6
  br i1 %15, label %21, label %16

16:                                               ; preds = %1
  %17 = sub i32 %3, %6
  store i32 %17, i32* %2, align 8
  %18 = zext i32 %6 to i64
  %19 = shl i64 %18, %11
  %20 = sub i64 %8, %19
  store i64 %20, i64* %7, align 8
  br label %22

21:                                               ; preds = %1
  store i32 %6, i32* %2, align 8
  br label %22

22:                                               ; preds = %21, %16
  %23 = phi i64 [ %20, %16 ], [ %8, %21 ]
  %24 = phi i32 [ %17, %16 ], [ %6, %21 ]
  %25 = phi i32 [ 0, %16 ], [ 1, %21 ]
  %26 = tail call i32 @llvm.ctlz.i32(i32 %24, i1 true) #6, !range !3
  %27 = xor i32 %26, 16
  %28 = sub nsw i32 %10, %27
  store i32 %28, i32* %9, align 4
  %29 = shl i32 %24, %27
  store i32 %29, i32* %2, align 8
  %30 = icmp slt i32 %28, 0
  br i1 %30, label %31, label %68

31:                                               ; preds = %22
  %32 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %33 = load i8*, i8** %32, align 8
  %34 = sub i32 40, %28
  %35 = icmp sgt i32 %34, -1
  %36 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %37 = load i8*, i8** %36, align 8
  br i1 %35, label %38, label %54

38:                                               ; preds = %31, %44
  %39 = phi i8* [ %45, %44 ], [ %33, %31 ]
  %40 = phi i32 [ %52, %44 ], [ %34, %31 ]
  %41 = phi i64 [ %50, %44 ], [ %23, %31 ]
  %42 = phi i32 [ %51, %44 ], [ %28, %31 ]
  %43 = icmp ult i8* %39, %37
  br i1 %43, label %44, label %54

44:                                               ; preds = %38
  %45 = getelementptr inbounds i8, i8* %39, i64 1
  %46 = load i8, i8* %39, align 1
  %47 = xor i8 %46, -1
  %48 = zext i8 %47 to i64
  %49 = shl i64 %41, 8
  %50 = or i64 %49, %48
  %51 = add nsw i32 %42, 8
  %52 = add nsw i32 %40, -8
  %53 = icmp sgt i32 %52, -1
  br i1 %53, label %38, label %54, !llvm.loop !4

54:                                               ; preds = %44, %38, %31
  %55 = phi i32 [ %28, %31 ], [ %51, %44 ], [ %42, %38 ]
  %56 = phi i64 [ %23, %31 ], [ %50, %44 ], [ %41, %38 ]
  %57 = phi i8* [ %33, %31 ], [ %45, %44 ], [ %39, %38 ]
  %58 = icmp eq i8* %57, %37
  br i1 %58, label %59, label %65

59:                                               ; preds = %54
  %60 = add i64 %56, 1
  %61 = sub nsw i32 48, %55
  %62 = zext i32 %61 to i64
  %63 = shl i64 %60, %62
  %64 = add i64 %63, -1
  br label %65

65:                                               ; preds = %59, %54
  %66 = phi i32 [ 48, %59 ], [ %55, %54 ]
  %67 = phi i64 [ %64, %59 ], [ %56, %54 ]
  store i8* %57, i8** %32, align 8
  store i32 %66, i32* %9, align 4
  store i64 %67, i64* %7, align 8
  br label %68

68:                                               ; preds = %22, %65
  ret i32 %25
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i64 @_ZN7libgav114DaalaBitReader11ReadLiteralEi(%"class.libgav1::DaalaBitReader"* nocapture, i32) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %4 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %6 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %8 = load i32, i32* %3, align 8
  %9 = load i64, i64* %4, align 8
  %10 = load i32, i32* %5, align 4
  br label %11

11:                                               ; preds = %77, %2
  %12 = phi i32 [ %10, %2 ], [ %78, %77 ]
  %13 = phi i64 [ %9, %2 ], [ %79, %77 ]
  %14 = phi i32 [ %8, %2 ], [ %40, %77 ]
  %15 = phi i32 [ 0, %2 ], [ %80, %77 ]
  %16 = phi i32 [ %1, %2 ], [ %17, %77 ]
  %17 = add nsw i32 %16, -1
  %18 = shl i32 %15, 1
  %19 = lshr i32 %14, 1
  %20 = and i32 %19, 2147483520
  %21 = or i32 %20, 4
  %22 = zext i32 %12 to i64
  %23 = lshr i64 %13, %22
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 65535
  %26 = icmp ult i32 %25, %21
  br i1 %26, label %32, label %27

27:                                               ; preds = %11
  %28 = sub i32 %14, %21
  store i32 %28, i32* %3, align 8
  %29 = zext i32 %21 to i64
  %30 = shl i64 %29, %22
  %31 = sub i64 %13, %30
  store i64 %31, i64* %4, align 8
  br label %33

32:                                               ; preds = %11
  store i32 %21, i32* %3, align 8
  br label %33

33:                                               ; preds = %32, %27
  %34 = phi i64 [ %31, %27 ], [ %13, %32 ]
  %35 = phi i32 [ %28, %27 ], [ %21, %32 ]
  %36 = phi i32 [ 0, %27 ], [ 1, %32 ]
  %37 = tail call i32 @llvm.ctlz.i32(i32 %35, i1 true) #6, !range !3
  %38 = xor i32 %37, 16
  %39 = sub nsw i32 %12, %38
  store i32 %39, i32* %5, align 4
  %40 = shl i32 %35, %38
  store i32 %40, i32* %3, align 8
  %41 = icmp slt i32 %39, 0
  br i1 %41, label %42, label %77

42:                                               ; preds = %33
  %43 = load i8*, i8** %6, align 8
  %44 = sub i32 40, %39
  %45 = icmp sgt i32 %44, -1
  %46 = load i8*, i8** %7, align 8
  br i1 %45, label %47, label %63

47:                                               ; preds = %42, %53
  %48 = phi i8* [ %54, %53 ], [ %43, %42 ]
  %49 = phi i32 [ %61, %53 ], [ %44, %42 ]
  %50 = phi i64 [ %59, %53 ], [ %34, %42 ]
  %51 = phi i32 [ %60, %53 ], [ %39, %42 ]
  %52 = icmp ult i8* %48, %46
  br i1 %52, label %53, label %63

53:                                               ; preds = %47
  %54 = getelementptr inbounds i8, i8* %48, i64 1
  %55 = load i8, i8* %48, align 1
  %56 = xor i8 %55, -1
  %57 = zext i8 %56 to i64
  %58 = shl i64 %50, 8
  %59 = or i64 %58, %57
  %60 = add nsw i32 %51, 8
  %61 = add nsw i32 %49, -8
  %62 = icmp sgt i32 %61, -1
  br i1 %62, label %47, label %63, !llvm.loop !4

63:                                               ; preds = %53, %47, %42
  %64 = phi i32 [ %39, %42 ], [ %51, %47 ], [ %60, %53 ]
  %65 = phi i64 [ %34, %42 ], [ %50, %47 ], [ %59, %53 ]
  %66 = phi i8* [ %43, %42 ], [ %48, %47 ], [ %54, %53 ]
  %67 = icmp eq i8* %66, %46
  br i1 %67, label %68, label %74

68:                                               ; preds = %63
  %69 = add i64 %65, 1
  %70 = sub nsw i32 48, %64
  %71 = zext i32 %70 to i64
  %72 = shl i64 %69, %71
  %73 = add i64 %72, -1
  br label %74

74:                                               ; preds = %68, %63
  %75 = phi i32 [ 48, %68 ], [ %64, %63 ]
  %76 = phi i64 [ %73, %68 ], [ %65, %63 ]
  store i8* %66, i8** %6, align 8
  store i32 %75, i32* %5, align 4
  store i64 %76, i64* %4, align 8
  br label %77

77:                                               ; preds = %33, %74
  %78 = phi i32 [ %39, %33 ], [ %75, %74 ]
  %79 = phi i64 [ %34, %33 ], [ %76, %74 ]
  %80 = or i32 %36, %18
  %81 = icmp sgt i32 %17, 0
  br i1 %81, label %11, label %82

82:                                               ; preds = %77
  %83 = zext i32 %80 to i64
  ret i64 %83
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZN7libgav114DaalaBitReader10ReadSymbolEPti(%"class.libgav1::DaalaBitReader"* nocapture, i16* nocapture, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = lshr i64 %7, %10
  %12 = trunc i64 %11 to i32
  %13 = shl i32 %2, 2
  %14 = lshr i32 %5, 8
  %15 = and i32 %12, 65535
  br label %16

16:                                               ; preds = %16, %3
  %17 = phi i64 [ %21, %16 ], [ -1, %3 ]
  %18 = phi i32 [ %28, %16 ], [ %5, %3 ]
  %19 = phi i32 [ %20, %16 ], [ %13, %3 ]
  %20 = add i32 %19, -4
  %21 = add nsw i64 %17, 1
  %22 = getelementptr inbounds i16, i16* %1, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = lshr i16 %23, 6
  %25 = zext i16 %24 to i32
  %26 = mul i32 %14, %25
  %27 = lshr i32 %26, 1
  %28 = add i32 %27, %20
  %29 = icmp ult i32 %15, %28
  br i1 %29, label %16, label %30

30:                                               ; preds = %16
  %31 = trunc i64 %21 to i32
  %32 = sub i32 %18, %28
  %33 = zext i32 %28 to i64
  %34 = shl i64 %33, %10
  %35 = sub i64 %7, %34
  store i64 %35, i64* %6, align 8
  %36 = tail call i32 @llvm.ctlz.i32(i32 %32, i1 true) #6, !range !3
  %37 = xor i32 %36, 16
  %38 = sub nsw i32 %9, %37
  store i32 %38, i32* %8, align 4
  %39 = shl i32 %32, %37
  store i32 %39, i32* %4, align 8
  %40 = icmp slt i32 %38, 0
  br i1 %40, label %41, label %78

41:                                               ; preds = %30
  %42 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = sub i32 40, %38
  %45 = icmp sgt i32 %44, -1
  %46 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %47 = load i8*, i8** %46, align 8
  br i1 %45, label %48, label %64

48:                                               ; preds = %41, %54
  %49 = phi i8* [ %55, %54 ], [ %43, %41 ]
  %50 = phi i32 [ %62, %54 ], [ %44, %41 ]
  %51 = phi i64 [ %60, %54 ], [ %35, %41 ]
  %52 = phi i32 [ %61, %54 ], [ %38, %41 ]
  %53 = icmp ult i8* %49, %47
  br i1 %53, label %54, label %64

54:                                               ; preds = %48
  %55 = getelementptr inbounds i8, i8* %49, i64 1
  %56 = load i8, i8* %49, align 1
  %57 = xor i8 %56, -1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %51, 8
  %60 = or i64 %59, %58
  %61 = add nsw i32 %52, 8
  %62 = add nsw i32 %50, -8
  %63 = icmp sgt i32 %62, -1
  br i1 %63, label %48, label %64, !llvm.loop !4

64:                                               ; preds = %54, %48, %41
  %65 = phi i32 [ %38, %41 ], [ %52, %48 ], [ %61, %54 ]
  %66 = phi i64 [ %35, %41 ], [ %51, %48 ], [ %60, %54 ]
  %67 = phi i8* [ %43, %41 ], [ %49, %48 ], [ %55, %54 ]
  %68 = icmp eq i8* %67, %47
  br i1 %68, label %69, label %75

69:                                               ; preds = %64
  %70 = add i64 %66, 1
  %71 = sub nsw i32 48, %65
  %72 = zext i32 %71 to i64
  %73 = shl i64 %70, %72
  %74 = add i64 %73, -1
  br label %75

75:                                               ; preds = %69, %64
  %76 = phi i32 [ 48, %69 ], [ %65, %64 ]
  %77 = phi i64 [ %74, %69 ], [ %66, %64 ]
  store i8* %67, i8** %42, align 8
  store i32 %76, i32* %8, align 4
  store i64 %77, i64* %6, align 8
  br label %78

78:                                               ; preds = %30, %75
  %79 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %80 = load i8, i8* %79, align 8, !range !2
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %120, label %82

82:                                               ; preds = %78
  %83 = sext i32 %2 to i64
  %84 = getelementptr inbounds i16, i16* %1, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = lshr i16 %85, 4
  %87 = add nuw nsw i16 %86, 4
  %88 = zext i16 %87 to i32
  %89 = icmp sgt i32 %2, 3
  %90 = zext i1 %89 to i32
  %91 = add nuw nsw i32 %88, %90
  %92 = add nsw i32 %2, -1
  %93 = shl i64 %21, 32
  %94 = ashr exact i64 %93, 32
  %95 = sext i32 %92 to i64
  br label %96

96:                                               ; preds = %111, %82
  %97 = phi i64 [ %113, %111 ], [ 0, %82 ]
  %98 = icmp slt i64 %97, %94
  %99 = getelementptr inbounds i16, i16* %1, i64 %97
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  br i1 %98, label %102, label %107

102:                                              ; preds = %96
  %103 = sub nsw i32 32768, %101
  %104 = ashr i32 %103, %91
  %105 = trunc i32 %104 to i16
  %106 = add i16 %100, %105
  br label %111

107:                                              ; preds = %96
  %108 = lshr i32 %101, %91
  %109 = trunc i32 %108 to i16
  %110 = sub i16 %100, %109
  br label %111

111:                                              ; preds = %107, %102
  %112 = phi i16 [ %110, %107 ], [ %106, %102 ]
  store i16 %112, i16* %99, align 2
  %113 = add nuw nsw i64 %97, 1
  %114 = icmp slt i64 %113, %95
  br i1 %114, label %96, label %115

115:                                              ; preds = %111
  %116 = icmp ult i16 %85, 32
  %117 = zext i1 %116 to i16
  %118 = load i16, i16* %84, align 2
  %119 = add i16 %118, %117
  store i16 %119, i16* %84, align 2
  br label %120

120:                                              ; preds = %78, %115
  ret i32 %31
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav114DaalaBitReader10ReadSymbolEPt(%"class.libgav1::DaalaBitReader"* nocapture, i16* nocapture) local_unnamed_addr #2 align 2 {
  %3 = load i16, i16* %1, align 2
  %4 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = lshr i64 %5, %8
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = lshr i32 %12, 8
  %14 = lshr i16 %3, 6
  %15 = zext i16 %14 to i32
  %16 = mul i32 %13, %15
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 4
  %19 = and i32 %10, 65535
  %20 = icmp ult i32 %19, %18
  br i1 %20, label %21, label %22

21:                                               ; preds = %2
  store i32 %18, i32* %11, align 8
  br label %27

22:                                               ; preds = %2
  %23 = sub i32 %12, %18
  store i32 %23, i32* %11, align 8
  %24 = zext i32 %18 to i64
  %25 = shl i64 %24, %8
  %26 = sub i64 %5, %25
  store i64 %26, i64* %4, align 8
  br label %27

27:                                               ; preds = %22, %21
  %28 = phi i64 [ %26, %22 ], [ %5, %21 ]
  %29 = phi i32 [ %23, %22 ], [ %18, %21 ]
  %30 = tail call i32 @llvm.ctlz.i32(i32 %29, i1 true) #6, !range !3
  %31 = xor i32 %30, 16
  %32 = sub nsw i32 %7, %31
  store i32 %32, i32* %6, align 4
  %33 = shl i32 %29, %31
  store i32 %33, i32* %11, align 8
  %34 = icmp slt i32 %32, 0
  br i1 %34, label %35, label %72

35:                                               ; preds = %27
  %36 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = sub i32 40, %32
  %39 = icmp sgt i32 %38, -1
  %40 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %41 = load i8*, i8** %40, align 8
  br i1 %39, label %42, label %58

42:                                               ; preds = %35, %48
  %43 = phi i8* [ %49, %48 ], [ %37, %35 ]
  %44 = phi i32 [ %56, %48 ], [ %38, %35 ]
  %45 = phi i64 [ %54, %48 ], [ %28, %35 ]
  %46 = phi i32 [ %55, %48 ], [ %32, %35 ]
  %47 = icmp ult i8* %43, %41
  br i1 %47, label %48, label %58

48:                                               ; preds = %42
  %49 = getelementptr inbounds i8, i8* %43, i64 1
  %50 = load i8, i8* %43, align 1
  %51 = xor i8 %50, -1
  %52 = zext i8 %51 to i64
  %53 = shl i64 %45, 8
  %54 = or i64 %53, %52
  %55 = add nsw i32 %46, 8
  %56 = add nsw i32 %44, -8
  %57 = icmp sgt i32 %56, -1
  br i1 %57, label %42, label %58, !llvm.loop !4

58:                                               ; preds = %48, %42, %35
  %59 = phi i32 [ %32, %35 ], [ %46, %42 ], [ %55, %48 ]
  %60 = phi i64 [ %28, %35 ], [ %45, %42 ], [ %54, %48 ]
  %61 = phi i8* [ %37, %35 ], [ %43, %42 ], [ %49, %48 ]
  %62 = icmp eq i8* %61, %41
  br i1 %62, label %63, label %69

63:                                               ; preds = %58
  %64 = add i64 %60, 1
  %65 = sub nsw i32 48, %59
  %66 = zext i32 %65 to i64
  %67 = shl i64 %64, %66
  %68 = add i64 %67, -1
  br label %69

69:                                               ; preds = %63, %58
  %70 = phi i32 [ 48, %63 ], [ %59, %58 ]
  %71 = phi i64 [ %68, %63 ], [ %60, %58 ]
  store i8* %61, i8** %36, align 8
  store i32 %70, i32* %6, align 4
  store i64 %71, i64* %4, align 8
  br label %72

72:                                               ; preds = %27, %69
  %73 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 4
  %74 = load i8, i8* %73, align 8, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %98, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds i16, i16* %1, i64 2
  %78 = load i16, i16* %77, align 2
  %79 = lshr i16 %78, 4
  %80 = or i16 %79, 4
  %81 = zext i16 %80 to i32
  %82 = load i16, i16* %1, align 2
  %83 = zext i16 %82 to i32
  br i1 %20, label %84, label %89

84:                                               ; preds = %76
  %85 = sub nsw i32 32768, %83
  %86 = ashr i32 %85, %81
  %87 = trunc i32 %86 to i16
  %88 = add i16 %82, %87
  br label %93

89:                                               ; preds = %76
  %90 = lshr i32 %83, %81
  %91 = trunc i32 %90 to i16
  %92 = sub i16 %82, %91
  br label %93

93:                                               ; preds = %89, %84
  %94 = phi i16 [ %92, %89 ], [ %88, %84 ]
  store i16 %94, i16* %1, align 2
  %95 = icmp ult i16 %78, 32
  %96 = zext i1 %95 to i16
  %97 = add i16 %78, %96
  store i16 %97, i16* %77, align 2
  br label %98

98:                                               ; preds = %72, %93
  ret i1 %20
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav114DaalaBitReader26ReadSymbolWithoutCdfUpdateEt(%"class.libgav1::DaalaBitReader"* nocapture, i16 zeroext) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 7
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = lshr i64 %4, %7
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 6
  %11 = load i32, i32* %10, align 8
  %12 = lshr i32 %11, 8
  %13 = lshr i16 %1, 6
  %14 = zext i16 %13 to i32
  %15 = mul i32 %12, %14
  %16 = lshr i32 %15, 1
  %17 = add nuw i32 %16, 4
  %18 = and i32 %9, 65535
  %19 = icmp ult i32 %18, %17
  br i1 %19, label %20, label %21

20:                                               ; preds = %2
  store i32 %17, i32* %10, align 8
  br label %26

21:                                               ; preds = %2
  %22 = sub i32 %11, %17
  store i32 %22, i32* %10, align 8
  %23 = zext i32 %17 to i64
  %24 = shl i64 %23, %7
  %25 = sub i64 %4, %24
  store i64 %25, i64* %3, align 8
  br label %26

26:                                               ; preds = %21, %20
  %27 = phi i64 [ %25, %21 ], [ %4, %20 ]
  %28 = phi i32 [ %22, %21 ], [ %17, %20 ]
  %29 = tail call i32 @llvm.ctlz.i32(i32 %28, i1 true) #6, !range !3
  %30 = xor i32 %29, 16
  %31 = sub nsw i32 %6, %30
  store i32 %31, i32* %5, align 4
  %32 = shl i32 %28, %30
  store i32 %32, i32* %10, align 8
  %33 = icmp slt i32 %31, 0
  br i1 %33, label %34, label %71

34:                                               ; preds = %26
  %35 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 1
  %36 = load i8*, i8** %35, align 8
  %37 = sub i32 40, %31
  %38 = icmp sgt i32 %37, -1
  %39 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %0, i64 0, i32 2
  %40 = load i8*, i8** %39, align 8
  br i1 %38, label %41, label %57

41:                                               ; preds = %34, %47
  %42 = phi i8* [ %48, %47 ], [ %36, %34 ]
  %43 = phi i32 [ %55, %47 ], [ %37, %34 ]
  %44 = phi i64 [ %53, %47 ], [ %27, %34 ]
  %45 = phi i32 [ %54, %47 ], [ %31, %34 ]
  %46 = icmp ult i8* %42, %40
  br i1 %46, label %47, label %57

47:                                               ; preds = %41
  %48 = getelementptr inbounds i8, i8* %42, i64 1
  %49 = load i8, i8* %42, align 1
  %50 = xor i8 %49, -1
  %51 = zext i8 %50 to i64
  %52 = shl i64 %44, 8
  %53 = or i64 %52, %51
  %54 = add nsw i32 %45, 8
  %55 = add nsw i32 %43, -8
  %56 = icmp sgt i32 %55, -1
  br i1 %56, label %41, label %57, !llvm.loop !4

57:                                               ; preds = %47, %41, %34
  %58 = phi i32 [ %31, %34 ], [ %45, %41 ], [ %54, %47 ]
  %59 = phi i64 [ %27, %34 ], [ %44, %41 ], [ %53, %47 ]
  %60 = phi i8* [ %36, %34 ], [ %42, %41 ], [ %48, %47 ]
  %61 = icmp eq i8* %60, %40
  br i1 %61, label %62, label %68

62:                                               ; preds = %57
  %63 = add i64 %59, 1
  %64 = sub nsw i32 48, %58
  %65 = zext i32 %64 to i64
  %66 = shl i64 %63, %65
  %67 = add i64 %66, -1
  br label %68

68:                                               ; preds = %62, %57
  %69 = phi i32 [ 48, %62 ], [ %58, %57 ]
  %70 = phi i64 [ %67, %62 ], [ %59, %57 ]
  store i8* %60, i8** %35, align 8
  store i32 %69, i32* %5, align 4
  store i64 %70, i64* %3, align 8
  br label %71

71:                                               ; preds = %26, %68
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav114DaalaBitReaderD0Ev(%"class.libgav1::DaalaBitReader"*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %"class.libgav1::DaalaBitReader"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav19BitReaderD2Ev(%"class.libgav1::BitReader"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
!4 = distinct !{!4, !5, !6}
!5 = !{!"llvm.loop.vectorize.width", i32 1}
!6 = !{!"llvm.loop.interleave.count", i32 1}
