; ModuleID = '../../third_party/breakpad/breakpad/src/common/string_conversion.cc'
source_filename = "../../third_party/breakpad/breakpad/src/common/string_conversion.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i16* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNSt3__16vectorItNS_9allocatorItEEE6insertENS_11__wrap_iterIPKtEEmRS5_ = comdat any

$_ZNSt3__16vectorItNS_9allocatorItEEE8__appendEm = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15google_breakpad11UTF8ToUTF16EPKcPNSt3__16vectorItNS2_9allocatorItEEEE(i8*, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i16*, align 8
  %6 = tail call i64 @strlen(i8* %0) #9
  %7 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #10
  store i8* %0, i8** %3, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 %6
  %9 = bitcast %"class.std::__1::vector"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %12 = bitcast i16** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %14 = inttoptr i64 %10 to i16*
  %15 = bitcast i16* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %15) #10
  store i16 0, i16* %4, align 2
  %16 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertENS_11__wrap_iterIPKtEEmRS5_(%"class.std::__1::vector"* %1, i16* %14, i64 %6, i16* nonnull dereferenceable(2) %4)
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %15) #10
  %17 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  %18 = load i16*, i16** %13, align 8
  store i16* %18, i16** %5, align 8
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast i16** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = ptrtoint i16* %18 to i64
  %23 = sub i64 %21, %22
  %24 = ashr exact i64 %23, 1
  %25 = getelementptr inbounds i16, i16* %18, i64 %24
  %26 = call i32 @_ZN15google_breakpad18ConvertUTF8toUTF16EPPKhS1_PPtS3_NS_15ConversionFlagsE(i8** nonnull %3, i8* %8, i16** nonnull %5, i16* %25, i32 0) #10
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %2
  %29 = load i64, i64* %12, align 8
  %30 = load i64, i64* %9, align 8
  %31 = sub i64 %29, %30
  %32 = ashr exact i64 %31, 1
  br label %46

33:                                               ; preds = %2
  %34 = bitcast i16** %5 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = load i64, i64* %9, align 8
  %37 = sub i64 %35, %36
  %38 = ashr exact i64 %37, 1
  %39 = add nsw i64 %38, 1
  %40 = load i64, i64* %12, align 8
  %41 = sub i64 %40, %36
  %42 = ashr exact i64 %41, 1
  %43 = icmp ugt i64 %39, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %33
  %45 = sub i64 %39, %42
  call void @_ZNSt3__16vectorItNS_9allocatorItEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %45) #10
  br label %54

46:                                               ; preds = %28, %33
  %47 = phi i64 [ %30, %28 ], [ %36, %33 ]
  %48 = phi i64 [ %32, %28 ], [ %42, %33 ]
  %49 = phi i64 [ 0, %28 ], [ %39, %33 ]
  %50 = icmp ugt i64 %48, %49
  br i1 %50, label %51, label %54

51:                                               ; preds = %46
  %52 = inttoptr i64 %47 to i16*
  %53 = getelementptr inbounds i16, i16* %52, i64 %49
  store i16* %53, i16** %11, align 8
  br label %54

54:                                               ; preds = %44, %46, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertENS_11__wrap_iterIPKtEEmRS5_(%"class.std::__1::vector"*, i16*, i64, i16* dereferenceable(2)) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i16* %3 to i8*
  %6 = bitcast i16* %3 to i8*
  %7 = bitcast i16* %1 to i8*
  %8 = ptrtoint i16* %1 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %713, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i16** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i16*, i16** %15, align 8
  %17 = bitcast i16* %16 to i8*
  %18 = ptrtoint i16* %16 to i64
  %19 = sub i64 %14, %18
  %20 = ashr exact i64 %19, 1
  %21 = icmp ult i64 %20, %2
  br i1 %21, label %395, label %22

22:                                               ; preds = %11
  %23 = sub i64 %18, %8
  %24 = ashr exact i64 %23, 1
  %25 = icmp ult i64 %24, %2
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = bitcast i16** %15 to i64*
  br label %149

28:                                               ; preds = %22
  %29 = sub i64 %2, %24
  %30 = bitcast i16** %15 to i64*
  %31 = getelementptr inbounds i16, i16* %16, i64 %29
  %32 = icmp eq i64 %29, 0
  br i1 %32, label %144, label %33

33:                                               ; preds = %28
  %34 = shl i64 %2, 1
  %35 = add i64 %34, -2
  %36 = sub i64 %35, %23
  %37 = lshr i64 %36, 1
  %38 = add nuw i64 %37, 1
  %39 = icmp ult i64 %38, 16
  br i1 %39, label %40, label %62

40:                                               ; preds = %121, %62, %33
  %41 = phi i16* [ %16, %62 ], [ %16, %33 ], [ %75, %121 ]
  %42 = ptrtoint i16* %41 to i64
  %43 = xor i64 %24, -1
  %44 = add i64 %43, %2
  %45 = getelementptr i16, i16* %16, i64 %44
  %46 = ptrtoint i16* %45 to i64
  %47 = sub i64 %46, %42
  %48 = lshr i64 %47, 1
  %49 = add nuw i64 %48, 1
  %50 = and i64 %49, 7
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %40, %52
  %53 = phi i16* [ %56, %52 ], [ %41, %40 ]
  %54 = phi i64 [ %57, %52 ], [ %50, %40 ]
  %55 = load i16, i16* %3, align 2
  store i16 %55, i16* %53, align 2
  %56 = getelementptr inbounds i16, i16* %53, i64 1
  %57 = add i64 %54, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %52, !llvm.loop !2

59:                                               ; preds = %52, %40
  %60 = phi i16* [ %41, %40 ], [ %56, %52 ]
  %61 = icmp ult i64 %47, 14
  br i1 %61, label %123, label %125

62:                                               ; preds = %33
  %63 = shl i64 %2, 1
  %64 = add i64 %63, -2
  %65 = sub i64 %64, %23
  %66 = lshr i64 %65, 1
  %67 = add nuw i64 %66, 1
  %68 = getelementptr i16, i16* %16, i64 %67
  %69 = getelementptr i8, i8* %6, i64 1
  %70 = icmp ugt i8* %69, %17
  %71 = icmp ugt i16* %68, %3
  %72 = and i1 %70, %71
  br i1 %72, label %40, label %73

73:                                               ; preds = %62
  %74 = and i64 %38, -16
  %75 = getelementptr i16, i16* %16, i64 %74
  %76 = add i64 %74, -16
  %77 = lshr exact i64 %76, 4
  %78 = add nuw nsw i64 %77, 1
  %79 = and i64 %78, 1
  %80 = icmp eq i64 %76, 0
  br i1 %80, label %108, label %81

81:                                               ; preds = %73
  %82 = sub nuw nsw i64 %78, %79
  %83 = load i16, i16* %3, align 2, !alias.scope !4
  %84 = insertelement <8 x i16> undef, i16 %83, i32 0
  %85 = shufflevector <8 x i16> %84, <8 x i16> undef, <8 x i32> zeroinitializer
  %86 = insertelement <8 x i16> undef, i16 %83, i32 0
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> zeroinitializer
  %88 = load i16, i16* %3, align 2, !alias.scope !4
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = insertelement <8 x i16> undef, i16 %88, i32 0
  %92 = shufflevector <8 x i16> %91, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %93

93:                                               ; preds = %93, %81
  %94 = phi i64 [ 0, %81 ], [ %105, %93 ]
  %95 = phi i64 [ %82, %81 ], [ %106, %93 ]
  %96 = getelementptr i16, i16* %16, i64 %94
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %97, align 2, !alias.scope !7, !noalias !4
  %98 = getelementptr i16, i16* %96, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %99, align 2, !alias.scope !7, !noalias !4
  %100 = or i64 %94, 16
  %101 = getelementptr i16, i16* %16, i64 %100
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %102, align 2, !alias.scope !7, !noalias !4
  %103 = getelementptr i16, i16* %101, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %104, align 2, !alias.scope !7, !noalias !4
  %105 = add i64 %94, 32
  %106 = add i64 %95, -2
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %93, !llvm.loop !9

108:                                              ; preds = %93, %73
  %109 = phi i64 [ 0, %73 ], [ %105, %93 ]
  %110 = icmp eq i64 %79, 0
  br i1 %110, label %121, label %111

111:                                              ; preds = %108
  %112 = getelementptr i16, i16* %16, i64 %109
  %113 = load i16, i16* %3, align 2, !alias.scope !4
  %114 = insertelement <8 x i16> undef, i16 %113, i32 0
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <8 x i32> zeroinitializer
  %116 = insertelement <8 x i16> undef, i16 %113, i32 0
  %117 = shufflevector <8 x i16> %116, <8 x i16> undef, <8 x i32> zeroinitializer
  %118 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !7, !noalias !4
  %119 = getelementptr i16, i16* %112, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %120, align 2, !alias.scope !7, !noalias !4
  br label %121

121:                                              ; preds = %108, %111
  %122 = icmp eq i64 %38, %74
  br i1 %122, label %123, label %40

123:                                              ; preds = %59, %125, %121
  %124 = ptrtoint i16* %31 to i64
  br label %144

125:                                              ; preds = %59, %125
  %126 = phi i16* [ %142, %125 ], [ %60, %59 ]
  %127 = load i16, i16* %3, align 2
  store i16 %127, i16* %126, align 2
  %128 = getelementptr inbounds i16, i16* %126, i64 1
  %129 = load i16, i16* %3, align 2
  store i16 %129, i16* %128, align 2
  %130 = getelementptr inbounds i16, i16* %126, i64 2
  %131 = load i16, i16* %3, align 2
  store i16 %131, i16* %130, align 2
  %132 = getelementptr inbounds i16, i16* %126, i64 3
  %133 = load i16, i16* %3, align 2
  store i16 %133, i16* %132, align 2
  %134 = getelementptr inbounds i16, i16* %126, i64 4
  %135 = load i16, i16* %3, align 2
  store i16 %135, i16* %134, align 2
  %136 = getelementptr inbounds i16, i16* %126, i64 5
  %137 = load i16, i16* %3, align 2
  store i16 %137, i16* %136, align 2
  %138 = getelementptr inbounds i16, i16* %126, i64 6
  %139 = load i16, i16* %3, align 2
  store i16 %139, i16* %138, align 2
  %140 = getelementptr inbounds i16, i16* %126, i64 7
  %141 = load i16, i16* %3, align 2
  store i16 %141, i16* %140, align 2
  %142 = getelementptr inbounds i16, i16* %126, i64 8
  %143 = icmp eq i16* %142, %31
  br i1 %143, label %123, label %125, !llvm.loop !11

144:                                              ; preds = %123, %28
  %145 = phi i64 [ %124, %123 ], [ %18, %28 ]
  store i64 %145, i64* %30, align 8
  %146 = icmp eq i64 %23, 0
  br i1 %146, label %713, label %147

147:                                              ; preds = %144
  %148 = inttoptr i64 %145 to i16*
  br label %149

149:                                              ; preds = %147, %26
  %150 = phi i64* [ %30, %147 ], [ %27, %26 ]
  %151 = phi i64 [ %145, %147 ], [ %18, %26 ]
  %152 = phi i16* [ %148, %147 ], [ %16, %26 ]
  %153 = phi i64 [ %24, %147 ], [ %2, %26 ]
  %154 = getelementptr inbounds i16, i16* %1, i64 %2
  %155 = ptrtoint i16* %154 to i64
  %156 = sub i64 %151, %155
  %157 = ashr exact i64 %156, 1
  %158 = getelementptr inbounds i16, i16* %1, i64 %157
  %159 = icmp ult i16* %158, %16
  br i1 %159, label %160, label %273

160:                                              ; preds = %149
  %161 = sub nsw i64 0, %157
  %162 = getelementptr i16, i16* %16, i64 %161
  %163 = bitcast i16* %162 to i8*
  %164 = xor i64 %8, -1
  %165 = getelementptr i8, i8* %163, i64 %164
  %166 = ptrtoint i8* %165 to i64
  %167 = lshr i64 %166, 1
  %168 = add nuw i64 %167, 1
  %169 = icmp ult i64 %168, 16
  br i1 %169, label %170, label %173

170:                                              ; preds = %268, %173, %160
  %171 = phi i16* [ %152, %173 ], [ %152, %160 ], [ %191, %268 ]
  %172 = phi i16* [ %158, %173 ], [ %158, %160 ], [ %192, %268 ]
  br label %280

173:                                              ; preds = %160
  %174 = sub nsw i64 0, %157
  %175 = getelementptr i16, i16* %16, i64 %174
  %176 = bitcast i16* %175 to i8*
  %177 = xor i64 %8, -1
  %178 = getelementptr i8, i8* %176, i64 %177
  %179 = ptrtoint i8* %178 to i64
  %180 = lshr i64 %179, 1
  %181 = add nuw i64 %180, 1
  %182 = getelementptr i16, i16* %152, i64 %181
  %183 = add i64 %157, %180
  %184 = add i64 %183, 1
  %185 = getelementptr i16, i16* %1, i64 %184
  %186 = icmp ult i16* %152, %185
  %187 = icmp ult i16* %158, %182
  %188 = and i1 %186, %187
  br i1 %188, label %170, label %189

189:                                              ; preds = %173
  %190 = and i64 %168, -16
  %191 = getelementptr i16, i16* %152, i64 %190
  %192 = getelementptr i16, i16* %158, i64 %190
  %193 = add i64 %190, -16
  %194 = lshr exact i64 %193, 4
  %195 = add nuw nsw i64 %194, 1
  %196 = and i64 %195, 3
  %197 = icmp ult i64 %193, 48
  br i1 %197, label %249, label %198

198:                                              ; preds = %189
  %199 = sub nsw i64 %195, %196
  br label %200

200:                                              ; preds = %200, %198
  %201 = phi i64 [ 0, %198 ], [ %246, %200 ]
  %202 = phi i64 [ %199, %198 ], [ %247, %200 ]
  %203 = getelementptr i16, i16* %152, i64 %201
  %204 = getelementptr i16, i16* %158, i64 %201
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !12
  %207 = getelementptr i16, i16* %204, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 2, !alias.scope !12
  %210 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %206, <8 x i16>* %210, align 2, !alias.scope !15, !noalias !12
  %211 = getelementptr i16, i16* %203, i64 8
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %212, align 2, !alias.scope !15, !noalias !12
  %213 = or i64 %201, 16
  %214 = getelementptr i16, i16* %152, i64 %213
  %215 = getelementptr i16, i16* %158, i64 %213
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !12
  %218 = getelementptr i16, i16* %215, i64 8
  %219 = bitcast i16* %218 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 2, !alias.scope !12
  %221 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %221, align 2, !alias.scope !15, !noalias !12
  %222 = getelementptr i16, i16* %214, i64 8
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %223, align 2, !alias.scope !15, !noalias !12
  %224 = or i64 %201, 32
  %225 = getelementptr i16, i16* %152, i64 %224
  %226 = getelementptr i16, i16* %158, i64 %224
  %227 = bitcast i16* %226 to <8 x i16>*
  %228 = load <8 x i16>, <8 x i16>* %227, align 2, !alias.scope !12
  %229 = getelementptr i16, i16* %226, i64 8
  %230 = bitcast i16* %229 to <8 x i16>*
  %231 = load <8 x i16>, <8 x i16>* %230, align 2, !alias.scope !12
  %232 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %228, <8 x i16>* %232, align 2, !alias.scope !15, !noalias !12
  %233 = getelementptr i16, i16* %225, i64 8
  %234 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %231, <8 x i16>* %234, align 2, !alias.scope !15, !noalias !12
  %235 = or i64 %201, 48
  %236 = getelementptr i16, i16* %152, i64 %235
  %237 = getelementptr i16, i16* %158, i64 %235
  %238 = bitcast i16* %237 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !12
  %240 = getelementptr i16, i16* %237, i64 8
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 2, !alias.scope !12
  %243 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %239, <8 x i16>* %243, align 2, !alias.scope !15, !noalias !12
  %244 = getelementptr i16, i16* %236, i64 8
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %245, align 2, !alias.scope !15, !noalias !12
  %246 = add i64 %201, 64
  %247 = add i64 %202, -4
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %200, !llvm.loop !17

249:                                              ; preds = %200, %189
  %250 = phi i64 [ 0, %189 ], [ %246, %200 ]
  %251 = icmp eq i64 %196, 0
  br i1 %251, label %268, label %252

252:                                              ; preds = %249, %252
  %253 = phi i64 [ %265, %252 ], [ %250, %249 ]
  %254 = phi i64 [ %266, %252 ], [ %196, %249 ]
  %255 = getelementptr i16, i16* %152, i64 %253
  %256 = getelementptr i16, i16* %158, i64 %253
  %257 = bitcast i16* %256 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 2, !alias.scope !12
  %259 = getelementptr i16, i16* %256, i64 8
  %260 = bitcast i16* %259 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 2, !alias.scope !12
  %262 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %262, align 2, !alias.scope !15, !noalias !12
  %263 = getelementptr i16, i16* %255, i64 8
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %261, <8 x i16>* %264, align 2, !alias.scope !15, !noalias !12
  %265 = add i64 %253, 16
  %266 = add i64 %254, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %252, !llvm.loop !18

268:                                              ; preds = %252, %249
  %269 = icmp eq i64 %168, %190
  br i1 %269, label %270, label %170

270:                                              ; preds = %280, %268
  %271 = phi i16* [ %191, %268 ], [ %285, %280 ]
  %272 = ptrtoint i16* %271 to i64
  br label %273

273:                                              ; preds = %270, %149
  %274 = phi i64 [ %272, %270 ], [ %151, %149 ]
  store i64 %274, i64* %150, align 8
  %275 = icmp eq i64 %156, 0
  br i1 %275, label %287, label %276

276:                                              ; preds = %273
  %277 = sub nsw i64 0, %157
  %278 = getelementptr inbounds i16, i16* %152, i64 %277
  %279 = bitcast i16* %278 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %279, i8* align 2 %7, i64 %156, i1 false) #10
  br label %287

280:                                              ; preds = %170, %280
  %281 = phi i16* [ %285, %280 ], [ %171, %170 ]
  %282 = phi i16* [ %284, %280 ], [ %172, %170 ]
  %283 = load i16, i16* %282, align 2
  store i16 %283, i16* %281, align 2
  %284 = getelementptr inbounds i16, i16* %282, i64 1
  %285 = getelementptr inbounds i16, i16* %281, i64 1
  %286 = icmp ult i16* %284, %16
  br i1 %286, label %280, label %270, !llvm.loop !19

287:                                              ; preds = %273, %276
  %288 = icmp ugt i16* %1, %3
  br i1 %288, label %294, label %289

289:                                              ; preds = %287
  %290 = load i16*, i16** %15, align 8
  %291 = icmp ugt i16* %290, %3
  %292 = getelementptr inbounds i16, i16* %3, i64 %2
  %293 = select i1 %291, i16* %292, i16* %3
  br label %294

294:                                              ; preds = %289, %287
  %295 = phi i16* [ %3, %287 ], [ %293, %289 ]
  %296 = icmp ult i64 %153, 16
  br i1 %296, label %355, label %297

297:                                              ; preds = %294
  %298 = bitcast i16* %295 to i8*
  %299 = getelementptr i16, i16* %1, i64 %153
  %300 = getelementptr i8, i8* %298, i64 1
  %301 = icmp ugt i8* %300, %7
  %302 = icmp ult i16* %295, %299
  %303 = and i1 %301, %302
  br i1 %303, label %355, label %304

304:                                              ; preds = %297
  %305 = and i64 %153, -16
  %306 = getelementptr i16, i16* %1, i64 %305
  %307 = sub i64 %153, %305
  %308 = add i64 %305, -16
  %309 = lshr exact i64 %308, 4
  %310 = add nuw nsw i64 %309, 1
  %311 = and i64 %310, 1
  %312 = icmp eq i64 %308, 0
  br i1 %312, label %340, label %313

313:                                              ; preds = %304
  %314 = sub nuw nsw i64 %310, %311
  %315 = load i16, i16* %295, align 2, !alias.scope !20
  %316 = insertelement <8 x i16> undef, i16 %315, i32 0
  %317 = shufflevector <8 x i16> %316, <8 x i16> undef, <8 x i32> zeroinitializer
  %318 = insertelement <8 x i16> undef, i16 %315, i32 0
  %319 = shufflevector <8 x i16> %318, <8 x i16> undef, <8 x i32> zeroinitializer
  %320 = load i16, i16* %295, align 2, !alias.scope !20
  %321 = insertelement <8 x i16> undef, i16 %320, i32 0
  %322 = shufflevector <8 x i16> %321, <8 x i16> undef, <8 x i32> zeroinitializer
  %323 = insertelement <8 x i16> undef, i16 %320, i32 0
  %324 = shufflevector <8 x i16> %323, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %325

325:                                              ; preds = %325, %313
  %326 = phi i64 [ 0, %313 ], [ %337, %325 ]
  %327 = phi i64 [ %314, %313 ], [ %338, %325 ]
  %328 = getelementptr i16, i16* %1, i64 %326
  %329 = bitcast i16* %328 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %329, align 2, !alias.scope !23, !noalias !20
  %330 = getelementptr i16, i16* %328, i64 8
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %319, <8 x i16>* %331, align 2, !alias.scope !23, !noalias !20
  %332 = or i64 %326, 16
  %333 = getelementptr i16, i16* %1, i64 %332
  %334 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %322, <8 x i16>* %334, align 2, !alias.scope !23, !noalias !20
  %335 = getelementptr i16, i16* %333, i64 8
  %336 = bitcast i16* %335 to <8 x i16>*
  store <8 x i16> %324, <8 x i16>* %336, align 2, !alias.scope !23, !noalias !20
  %337 = add i64 %326, 32
  %338 = add i64 %327, -2
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %325, !llvm.loop !25

340:                                              ; preds = %325, %304
  %341 = phi i64 [ 0, %304 ], [ %337, %325 ]
  %342 = icmp eq i64 %311, 0
  br i1 %342, label %353, label %343

343:                                              ; preds = %340
  %344 = getelementptr i16, i16* %1, i64 %341
  %345 = load i16, i16* %295, align 2, !alias.scope !20
  %346 = insertelement <8 x i16> undef, i16 %345, i32 0
  %347 = shufflevector <8 x i16> %346, <8 x i16> undef, <8 x i32> zeroinitializer
  %348 = insertelement <8 x i16> undef, i16 %345, i32 0
  %349 = shufflevector <8 x i16> %348, <8 x i16> undef, <8 x i32> zeroinitializer
  %350 = bitcast i16* %344 to <8 x i16>*
  store <8 x i16> %347, <8 x i16>* %350, align 2, !alias.scope !23, !noalias !20
  %351 = getelementptr i16, i16* %344, i64 8
  %352 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %349, <8 x i16>* %352, align 2, !alias.scope !23, !noalias !20
  br label %353

353:                                              ; preds = %340, %343
  %354 = icmp eq i64 %153, %305
  br i1 %354, label %713, label %355

355:                                              ; preds = %353, %297, %294
  %356 = phi i16* [ %1, %297 ], [ %1, %294 ], [ %306, %353 ]
  %357 = phi i64 [ %153, %297 ], [ %153, %294 ], [ %307, %353 ]
  %358 = add i64 %357, -1
  %359 = and i64 %357, 7
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %370, label %361

361:                                              ; preds = %355, %361
  %362 = phi i16* [ %366, %361 ], [ %356, %355 ]
  %363 = phi i64 [ %367, %361 ], [ %357, %355 ]
  %364 = phi i64 [ %368, %361 ], [ %359, %355 ]
  %365 = load i16, i16* %295, align 2
  store i16 %365, i16* %362, align 2
  %366 = getelementptr inbounds i16, i16* %362, i64 1
  %367 = add i64 %363, -1
  %368 = add i64 %364, -1
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %370, label %361, !llvm.loop !26

370:                                              ; preds = %361, %355
  %371 = phi i16* [ %356, %355 ], [ %366, %361 ]
  %372 = phi i64 [ %357, %355 ], [ %367, %361 ]
  %373 = icmp ult i64 %358, 7
  br i1 %373, label %713, label %374

374:                                              ; preds = %370, %374
  %375 = phi i16* [ %392, %374 ], [ %371, %370 ]
  %376 = phi i64 [ %393, %374 ], [ %372, %370 ]
  %377 = load i16, i16* %295, align 2
  store i16 %377, i16* %375, align 2
  %378 = getelementptr inbounds i16, i16* %375, i64 1
  %379 = load i16, i16* %295, align 2
  store i16 %379, i16* %378, align 2
  %380 = getelementptr inbounds i16, i16* %375, i64 2
  %381 = load i16, i16* %295, align 2
  store i16 %381, i16* %380, align 2
  %382 = getelementptr inbounds i16, i16* %375, i64 3
  %383 = load i16, i16* %295, align 2
  store i16 %383, i16* %382, align 2
  %384 = getelementptr inbounds i16, i16* %375, i64 4
  %385 = load i16, i16* %295, align 2
  store i16 %385, i16* %384, align 2
  %386 = getelementptr inbounds i16, i16* %375, i64 5
  %387 = load i16, i16* %295, align 2
  store i16 %387, i16* %386, align 2
  %388 = getelementptr inbounds i16, i16* %375, i64 6
  %389 = load i16, i16* %295, align 2
  store i16 %389, i16* %388, align 2
  %390 = getelementptr inbounds i16, i16* %375, i64 7
  %391 = load i16, i16* %295, align 2
  store i16 %391, i16* %390, align 2
  %392 = getelementptr inbounds i16, i16* %375, i64 8
  %393 = add i64 %376, -8
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %713, label %374, !llvm.loop !27

395:                                              ; preds = %11
  %396 = bitcast i16** %15 to i64*
  %397 = bitcast %"class.std::__1::vector"* %0 to i64*
  %398 = load i64, i64* %397, align 8
  %399 = sub i64 %18, %398
  %400 = ashr exact i64 %399, 1
  %401 = add i64 %400, %2
  %402 = icmp slt i64 %401, 0
  br i1 %402, label %403, label %405

403:                                              ; preds = %395
  %404 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %404) #11
  unreachable

405:                                              ; preds = %395
  %406 = sub i64 %14, %398
  %407 = ashr exact i64 %406, 1
  %408 = icmp ult i64 %407, 4611686018427387903
  %409 = icmp ult i64 %406, %401
  %410 = select i1 %409, i64 %401, i64 %406
  %411 = select i1 %408, i64 %410, i64 9223372036854775807
  %412 = sub i64 %8, %398
  %413 = ashr exact i64 %412, 1
  %414 = icmp eq i64 %411, 0
  br i1 %414, label %422, label %415

415:                                              ; preds = %405
  %416 = icmp slt i64 %411, 0
  br i1 %416, label %417, label %418

417:                                              ; preds = %415
  tail call void @abort() #11
  unreachable

418:                                              ; preds = %415
  %419 = shl i64 %411, 1
  %420 = tail call i8* @_Znwm(i64 %419) #12
  %421 = bitcast i8* %420 to i16*
  br label %422

422:                                              ; preds = %405, %418
  %423 = phi i16* [ %421, %418 ], [ null, %405 ]
  %424 = getelementptr inbounds i16, i16* %423, i64 %413
  %425 = getelementptr inbounds i16, i16* %423, i64 %411
  %426 = getelementptr inbounds i16, i16* %424, i64 %2
  %427 = shl nsw i64 %2, 1
  %428 = add i64 %427, -2
  %429 = lshr exact i64 %428, 1
  %430 = add nuw i64 %429, 1
  %431 = icmp ult i64 %430, 16
  br i1 %431, label %494, label %432

432:                                              ; preds = %422
  %433 = bitcast i16* %424 to i8*
  %434 = shl nsw i64 %2, 1
  %435 = add i64 %434, -2
  %436 = lshr exact i64 %435, 1
  %437 = add i64 %413, %436
  %438 = add i64 %437, 1
  %439 = getelementptr i16, i16* %423, i64 %438
  %440 = getelementptr i8, i8* %5, i64 1
  %441 = icmp ugt i8* %440, %433
  %442 = icmp ugt i16* %439, %3
  %443 = and i1 %441, %442
  br i1 %443, label %494, label %444

444:                                              ; preds = %432
  %445 = and i64 %430, -16
  %446 = getelementptr i16, i16* %424, i64 %445
  %447 = add i64 %445, -16
  %448 = lshr exact i64 %447, 4
  %449 = add nuw nsw i64 %448, 1
  %450 = and i64 %449, 1
  %451 = icmp eq i64 %447, 0
  br i1 %451, label %479, label %452

452:                                              ; preds = %444
  %453 = sub nuw nsw i64 %449, %450
  %454 = load i16, i16* %3, align 2, !alias.scope !28
  %455 = insertelement <8 x i16> undef, i16 %454, i32 0
  %456 = shufflevector <8 x i16> %455, <8 x i16> undef, <8 x i32> zeroinitializer
  %457 = insertelement <8 x i16> undef, i16 %454, i32 0
  %458 = shufflevector <8 x i16> %457, <8 x i16> undef, <8 x i32> zeroinitializer
  %459 = load i16, i16* %3, align 2, !alias.scope !28
  %460 = insertelement <8 x i16> undef, i16 %459, i32 0
  %461 = shufflevector <8 x i16> %460, <8 x i16> undef, <8 x i32> zeroinitializer
  %462 = insertelement <8 x i16> undef, i16 %459, i32 0
  %463 = shufflevector <8 x i16> %462, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %464

464:                                              ; preds = %464, %452
  %465 = phi i64 [ 0, %452 ], [ %476, %464 ]
  %466 = phi i64 [ %453, %452 ], [ %477, %464 ]
  %467 = getelementptr i16, i16* %424, i64 %465
  %468 = bitcast i16* %467 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %468, align 2, !alias.scope !31, !noalias !28
  %469 = getelementptr i16, i16* %467, i64 8
  %470 = bitcast i16* %469 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %470, align 2, !alias.scope !31, !noalias !28
  %471 = or i64 %465, 16
  %472 = getelementptr i16, i16* %424, i64 %471
  %473 = bitcast i16* %472 to <8 x i16>*
  store <8 x i16> %461, <8 x i16>* %473, align 2, !alias.scope !31, !noalias !28
  %474 = getelementptr i16, i16* %472, i64 8
  %475 = bitcast i16* %474 to <8 x i16>*
  store <8 x i16> %463, <8 x i16>* %475, align 2, !alias.scope !31, !noalias !28
  %476 = add i64 %465, 32
  %477 = add i64 %466, -2
  %478 = icmp eq i64 %477, 0
  br i1 %478, label %479, label %464, !llvm.loop !33

479:                                              ; preds = %464, %444
  %480 = phi i64 [ 0, %444 ], [ %476, %464 ]
  %481 = icmp eq i64 %450, 0
  br i1 %481, label %492, label %482

482:                                              ; preds = %479
  %483 = getelementptr i16, i16* %424, i64 %480
  %484 = load i16, i16* %3, align 2, !alias.scope !28
  %485 = insertelement <8 x i16> undef, i16 %484, i32 0
  %486 = shufflevector <8 x i16> %485, <8 x i16> undef, <8 x i32> zeroinitializer
  %487 = insertelement <8 x i16> undef, i16 %484, i32 0
  %488 = shufflevector <8 x i16> %487, <8 x i16> undef, <8 x i32> zeroinitializer
  %489 = bitcast i16* %483 to <8 x i16>*
  store <8 x i16> %486, <8 x i16>* %489, align 2, !alias.scope !31, !noalias !28
  %490 = getelementptr i16, i16* %483, i64 8
  %491 = bitcast i16* %490 to <8 x i16>*
  store <8 x i16> %488, <8 x i16>* %491, align 2, !alias.scope !31, !noalias !28
  br label %492

492:                                              ; preds = %479, %482
  %493 = icmp eq i64 %430, %445
  br i1 %493, label %535, label %494

494:                                              ; preds = %492, %432, %422
  %495 = phi i16* [ %424, %432 ], [ %424, %422 ], [ %446, %492 ]
  %496 = ptrtoint i16* %495 to i64
  %497 = add i64 %413, %2
  %498 = add i64 %497, -1
  %499 = getelementptr i16, i16* %423, i64 %498
  %500 = ptrtoint i16* %499 to i64
  %501 = sub i64 %500, %496
  %502 = lshr i64 %501, 1
  %503 = add nuw i64 %502, 1
  %504 = and i64 %503, 7
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %513, label %506

506:                                              ; preds = %494, %506
  %507 = phi i16* [ %510, %506 ], [ %495, %494 ]
  %508 = phi i64 [ %511, %506 ], [ %504, %494 ]
  %509 = load i16, i16* %3, align 2
  store i16 %509, i16* %507, align 2
  %510 = getelementptr inbounds i16, i16* %507, i64 1
  %511 = add i64 %508, -1
  %512 = icmp eq i64 %511, 0
  br i1 %512, label %513, label %506, !llvm.loop !34

513:                                              ; preds = %506, %494
  %514 = phi i16* [ %495, %494 ], [ %510, %506 ]
  %515 = icmp ult i64 %501, 14
  br i1 %515, label %535, label %516

516:                                              ; preds = %513, %516
  %517 = phi i16* [ %533, %516 ], [ %514, %513 ]
  %518 = load i16, i16* %3, align 2
  store i16 %518, i16* %517, align 2
  %519 = getelementptr inbounds i16, i16* %517, i64 1
  %520 = load i16, i16* %3, align 2
  store i16 %520, i16* %519, align 2
  %521 = getelementptr inbounds i16, i16* %517, i64 2
  %522 = load i16, i16* %3, align 2
  store i16 %522, i16* %521, align 2
  %523 = getelementptr inbounds i16, i16* %517, i64 3
  %524 = load i16, i16* %3, align 2
  store i16 %524, i16* %523, align 2
  %525 = getelementptr inbounds i16, i16* %517, i64 4
  %526 = load i16, i16* %3, align 2
  store i16 %526, i16* %525, align 2
  %527 = getelementptr inbounds i16, i16* %517, i64 5
  %528 = load i16, i16* %3, align 2
  store i16 %528, i16* %527, align 2
  %529 = getelementptr inbounds i16, i16* %517, i64 6
  %530 = load i16, i16* %3, align 2
  store i16 %530, i16* %529, align 2
  %531 = getelementptr inbounds i16, i16* %517, i64 7
  %532 = load i16, i16* %3, align 2
  store i16 %532, i16* %531, align 2
  %533 = getelementptr inbounds i16, i16* %517, i64 8
  %534 = icmp eq i16* %426, %533
  br i1 %534, label %535, label %516, !llvm.loop !35

535:                                              ; preds = %513, %516, %492
  %536 = ptrtoint i16* %425 to i64
  %537 = load i16*, i16** %9, align 8
  %538 = ptrtoint i16* %537 to i64
  %539 = sub i64 %8, %538
  %540 = ashr exact i64 %539, 1
  %541 = sub nsw i64 0, %540
  %542 = getelementptr inbounds i16, i16* %424, i64 %541
  %543 = ptrtoint i16* %542 to i64
  %544 = icmp sgt i64 %539, 0
  br i1 %544, label %545, label %548

545:                                              ; preds = %535
  %546 = bitcast i16* %542 to i8*
  %547 = bitcast i16* %537 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %546, i8* align 2 %547, i64 %539, i1 false) #10
  br label %548

548:                                              ; preds = %545, %535
  %549 = load i16*, i16** %15, align 8
  %550 = icmp eq i16* %549, %1
  br i1 %550, label %706, label %551

551:                                              ; preds = %548
  %552 = getelementptr i16, i16* %549, i64 -1
  %553 = ptrtoint i16* %552 to i64
  %554 = sub i64 %553, %8
  %555 = lshr i64 %554, 1
  %556 = add nuw i64 %555, 1
  %557 = icmp ult i64 %556, 16
  br i1 %557, label %653, label %558

558:                                              ; preds = %551
  %559 = add i64 %413, %2
  %560 = getelementptr i16, i16* %549, i64 -1
  %561 = ptrtoint i16* %560 to i64
  %562 = sub i64 %561, %8
  %563 = lshr i64 %562, 1
  %564 = add i64 %559, %563
  %565 = add i64 %564, 1
  %566 = getelementptr i16, i16* %423, i64 %565
  %567 = add nuw i64 %563, 1
  %568 = getelementptr i16, i16* %1, i64 %567
  %569 = icmp ult i16* %426, %568
  %570 = icmp ugt i16* %566, %1
  %571 = and i1 %569, %570
  br i1 %571, label %653, label %572

572:                                              ; preds = %558
  %573 = and i64 %556, -16
  %574 = getelementptr i16, i16* %426, i64 %573
  %575 = getelementptr i16, i16* %1, i64 %573
  %576 = add i64 %573, -16
  %577 = lshr exact i64 %576, 4
  %578 = add nuw nsw i64 %577, 1
  %579 = and i64 %578, 3
  %580 = icmp ult i64 %576, 48
  br i1 %580, label %632, label %581

581:                                              ; preds = %572
  %582 = sub nsw i64 %578, %579
  br label %583

583:                                              ; preds = %583, %581
  %584 = phi i64 [ 0, %581 ], [ %629, %583 ]
  %585 = phi i64 [ %582, %581 ], [ %630, %583 ]
  %586 = getelementptr i16, i16* %426, i64 %584
  %587 = getelementptr i16, i16* %1, i64 %584
  %588 = bitcast i16* %587 to <8 x i16>*
  %589 = load <8 x i16>, <8 x i16>* %588, align 2, !alias.scope !36
  %590 = getelementptr i16, i16* %587, i64 8
  %591 = bitcast i16* %590 to <8 x i16>*
  %592 = load <8 x i16>, <8 x i16>* %591, align 2, !alias.scope !36
  %593 = bitcast i16* %586 to <8 x i16>*
  store <8 x i16> %589, <8 x i16>* %593, align 2, !alias.scope !39, !noalias !36
  %594 = getelementptr i16, i16* %586, i64 8
  %595 = bitcast i16* %594 to <8 x i16>*
  store <8 x i16> %592, <8 x i16>* %595, align 2, !alias.scope !39, !noalias !36
  %596 = or i64 %584, 16
  %597 = getelementptr i16, i16* %426, i64 %596
  %598 = getelementptr i16, i16* %1, i64 %596
  %599 = bitcast i16* %598 to <8 x i16>*
  %600 = load <8 x i16>, <8 x i16>* %599, align 2, !alias.scope !36
  %601 = getelementptr i16, i16* %598, i64 8
  %602 = bitcast i16* %601 to <8 x i16>*
  %603 = load <8 x i16>, <8 x i16>* %602, align 2, !alias.scope !36
  %604 = bitcast i16* %597 to <8 x i16>*
  store <8 x i16> %600, <8 x i16>* %604, align 2, !alias.scope !39, !noalias !36
  %605 = getelementptr i16, i16* %597, i64 8
  %606 = bitcast i16* %605 to <8 x i16>*
  store <8 x i16> %603, <8 x i16>* %606, align 2, !alias.scope !39, !noalias !36
  %607 = or i64 %584, 32
  %608 = getelementptr i16, i16* %426, i64 %607
  %609 = getelementptr i16, i16* %1, i64 %607
  %610 = bitcast i16* %609 to <8 x i16>*
  %611 = load <8 x i16>, <8 x i16>* %610, align 2, !alias.scope !36
  %612 = getelementptr i16, i16* %609, i64 8
  %613 = bitcast i16* %612 to <8 x i16>*
  %614 = load <8 x i16>, <8 x i16>* %613, align 2, !alias.scope !36
  %615 = bitcast i16* %608 to <8 x i16>*
  store <8 x i16> %611, <8 x i16>* %615, align 2, !alias.scope !39, !noalias !36
  %616 = getelementptr i16, i16* %608, i64 8
  %617 = bitcast i16* %616 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %617, align 2, !alias.scope !39, !noalias !36
  %618 = or i64 %584, 48
  %619 = getelementptr i16, i16* %426, i64 %618
  %620 = getelementptr i16, i16* %1, i64 %618
  %621 = bitcast i16* %620 to <8 x i16>*
  %622 = load <8 x i16>, <8 x i16>* %621, align 2, !alias.scope !36
  %623 = getelementptr i16, i16* %620, i64 8
  %624 = bitcast i16* %623 to <8 x i16>*
  %625 = load <8 x i16>, <8 x i16>* %624, align 2, !alias.scope !36
  %626 = bitcast i16* %619 to <8 x i16>*
  store <8 x i16> %622, <8 x i16>* %626, align 2, !alias.scope !39, !noalias !36
  %627 = getelementptr i16, i16* %619, i64 8
  %628 = bitcast i16* %627 to <8 x i16>*
  store <8 x i16> %625, <8 x i16>* %628, align 2, !alias.scope !39, !noalias !36
  %629 = add i64 %584, 64
  %630 = add i64 %585, -4
  %631 = icmp eq i64 %630, 0
  br i1 %631, label %632, label %583, !llvm.loop !41

632:                                              ; preds = %583, %572
  %633 = phi i64 [ 0, %572 ], [ %629, %583 ]
  %634 = icmp eq i64 %579, 0
  br i1 %634, label %651, label %635

635:                                              ; preds = %632, %635
  %636 = phi i64 [ %648, %635 ], [ %633, %632 ]
  %637 = phi i64 [ %649, %635 ], [ %579, %632 ]
  %638 = getelementptr i16, i16* %426, i64 %636
  %639 = getelementptr i16, i16* %1, i64 %636
  %640 = bitcast i16* %639 to <8 x i16>*
  %641 = load <8 x i16>, <8 x i16>* %640, align 2, !alias.scope !36
  %642 = getelementptr i16, i16* %639, i64 8
  %643 = bitcast i16* %642 to <8 x i16>*
  %644 = load <8 x i16>, <8 x i16>* %643, align 2, !alias.scope !36
  %645 = bitcast i16* %638 to <8 x i16>*
  store <8 x i16> %641, <8 x i16>* %645, align 2, !alias.scope !39, !noalias !36
  %646 = getelementptr i16, i16* %638, i64 8
  %647 = bitcast i16* %646 to <8 x i16>*
  store <8 x i16> %644, <8 x i16>* %647, align 2, !alias.scope !39, !noalias !36
  %648 = add i64 %636, 16
  %649 = add i64 %637, -1
  %650 = icmp eq i64 %649, 0
  br i1 %650, label %651, label %635, !llvm.loop !42

651:                                              ; preds = %635, %632
  %652 = icmp eq i64 %556, %573
  br i1 %652, label %706, label %653

653:                                              ; preds = %651, %558, %551
  %654 = phi i16* [ %426, %558 ], [ %426, %551 ], [ %574, %651 ]
  %655 = phi i16* [ %1, %558 ], [ %1, %551 ], [ %575, %651 ]
  %656 = ptrtoint i16* %655 to i64
  %657 = getelementptr i16, i16* %549, i64 -1
  %658 = ptrtoint i16* %657 to i64
  %659 = sub i64 %658, %656
  %660 = lshr i64 %659, 1
  %661 = add nuw i64 %660, 1
  %662 = and i64 %661, 7
  %663 = icmp eq i64 %662, 0
  br i1 %663, label %673, label %664

664:                                              ; preds = %653, %664
  %665 = phi i16* [ %670, %664 ], [ %654, %653 ]
  %666 = phi i16* [ %669, %664 ], [ %655, %653 ]
  %667 = phi i64 [ %671, %664 ], [ %662, %653 ]
  %668 = load i16, i16* %666, align 2
  store i16 %668, i16* %665, align 2
  %669 = getelementptr inbounds i16, i16* %666, i64 1
  %670 = getelementptr inbounds i16, i16* %665, i64 1
  %671 = add i64 %667, -1
  %672 = icmp eq i64 %671, 0
  br i1 %672, label %673, label %664, !llvm.loop !43

673:                                              ; preds = %664, %653
  %674 = phi i16* [ undef, %653 ], [ %670, %664 ]
  %675 = phi i16* [ %654, %653 ], [ %670, %664 ]
  %676 = phi i16* [ %655, %653 ], [ %669, %664 ]
  %677 = icmp ult i64 %659, 14
  br i1 %677, label %706, label %678

678:                                              ; preds = %673, %678
  %679 = phi i16* [ %704, %678 ], [ %675, %673 ]
  %680 = phi i16* [ %703, %678 ], [ %676, %673 ]
  %681 = load i16, i16* %680, align 2
  store i16 %681, i16* %679, align 2
  %682 = getelementptr inbounds i16, i16* %680, i64 1
  %683 = getelementptr inbounds i16, i16* %679, i64 1
  %684 = load i16, i16* %682, align 2
  store i16 %684, i16* %683, align 2
  %685 = getelementptr inbounds i16, i16* %680, i64 2
  %686 = getelementptr inbounds i16, i16* %679, i64 2
  %687 = load i16, i16* %685, align 2
  store i16 %687, i16* %686, align 2
  %688 = getelementptr inbounds i16, i16* %680, i64 3
  %689 = getelementptr inbounds i16, i16* %679, i64 3
  %690 = load i16, i16* %688, align 2
  store i16 %690, i16* %689, align 2
  %691 = getelementptr inbounds i16, i16* %680, i64 4
  %692 = getelementptr inbounds i16, i16* %679, i64 4
  %693 = load i16, i16* %691, align 2
  store i16 %693, i16* %692, align 2
  %694 = getelementptr inbounds i16, i16* %680, i64 5
  %695 = getelementptr inbounds i16, i16* %679, i64 5
  %696 = load i16, i16* %694, align 2
  store i16 %696, i16* %695, align 2
  %697 = getelementptr inbounds i16, i16* %680, i64 6
  %698 = getelementptr inbounds i16, i16* %679, i64 6
  %699 = load i16, i16* %697, align 2
  store i16 %699, i16* %698, align 2
  %700 = getelementptr inbounds i16, i16* %680, i64 7
  %701 = getelementptr inbounds i16, i16* %679, i64 7
  %702 = load i16, i16* %700, align 2
  store i16 %702, i16* %701, align 2
  %703 = getelementptr inbounds i16, i16* %680, i64 8
  %704 = getelementptr inbounds i16, i16* %679, i64 8
  %705 = icmp eq i16* %703, %549
  br i1 %705, label %706, label %678, !llvm.loop !44

706:                                              ; preds = %673, %678, %651, %548
  %707 = phi i16* [ %426, %548 ], [ %574, %651 ], [ %674, %673 ], [ %704, %678 ]
  %708 = ptrtoint i16* %707 to i64
  %709 = load i16*, i16** %9, align 8
  store i64 %543, i64* %397, align 8
  store i64 %708, i64* %396, align 8
  store i64 %536, i64* %13, align 8
  %710 = icmp eq i16* %709, null
  br i1 %710, label %713, label %711

711:                                              ; preds = %706
  %712 = bitcast i16* %709 to i8*
  tail call void @_ZdlPv(i8* %712) #12
  br label %713

713:                                              ; preds = %370, %374, %353, %711, %706, %144, %4
  %714 = phi i16* [ %1, %4 ], [ %1, %144 ], [ %424, %706 ], [ %424, %711 ], [ %1, %353 ], [ %1, %374 ], [ %1, %370 ]
  ret i16* %714
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN15google_breakpad18ConvertUTF8toUTF16EPPKhS1_PPtS3_NS_15ConversionFlagsE(i8**, i8*, i16**, i16*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15google_breakpad15UTF8ToUTF16CharEPKciPt(i8*, i32, i16*) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  store i8* %0, i8** %4, align 8
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  store i16* %2, i16** %5, align 8
  %9 = getelementptr inbounds i16, i16* %2, i64 2
  %10 = getelementptr inbounds i16, i16* %2, i64 1
  store i16 0, i16* %10, align 2
  store i16 0, i16* %2, align 2
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  br label %13

13:                                               ; preds = %23, %3
  %14 = phi i8* [ %7, %3 ], [ %24, %23 ]
  %15 = call i32 @_ZN15google_breakpad18ConvertUTF8toUTF16EPPKhS1_PPtS3_NS_15ConversionFlagsE(i8** nonnull %4, i8* %14, i16** nonnull %5, i16* %9, i32 0) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = bitcast i8** %4 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = ptrtoint i8* %0 to i64
  %21 = sub i64 %19, %20
  %22 = trunc i64 %21 to i32
  br label %26

23:                                               ; preds = %13
  store i8* %0, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %14, i64 1
  %25 = icmp ugt i8* %24, %12
  br i1 %25, label %26, label %13

26:                                               ; preds = %23, %17
  %27 = phi i32 [ %22, %17 ], [ 0, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15google_breakpad12UTF32ToUTF16EPKwPNSt3__16vectorItNS2_9allocatorItEEEE(i32*, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  %3 = alloca i64*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i16*, align 8
  %6 = tail call i64 @wcslen(i32* %0) #9
  %7 = bitcast i64** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #10
  %8 = bitcast i32* %0 to i64*
  %9 = bitcast i64** %3 to i32**
  store i32* %0, i32** %9, align 8
  %10 = getelementptr inbounds i64, i64* %8, i64 %6
  %11 = bitcast %"class.std::__1::vector"* %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %14 = bitcast i16** %13 to i64*
  store i64 %12, i64* %14, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %16 = inttoptr i64 %12 to i16*
  %17 = bitcast i16* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %17) #10
  store i16 0, i16* %4, align 2
  %18 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertENS_11__wrap_iterIPKtEEmRS5_(%"class.std::__1::vector"* %1, i16* %16, i64 %6, i16* nonnull dereferenceable(2) %4)
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %17) #10
  %19 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  %20 = load i16*, i16** %15, align 8
  store i16* %20, i16** %5, align 8
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast i16** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = ptrtoint i16* %20 to i64
  %25 = sub i64 %23, %24
  %26 = ashr exact i64 %25, 1
  %27 = getelementptr inbounds i16, i16* %20, i64 %26
  %28 = call i32 @_ZN15google_breakpad19ConvertUTF32toUTF16EPPKmS1_PPtS3_NS_15ConversionFlagsE(i64** nonnull %3, i64* %10, i16** nonnull %5, i16* %27, i32 0) #10
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %2
  %31 = load i64, i64* %14, align 8
  %32 = load i64, i64* %11, align 8
  %33 = sub i64 %31, %32
  %34 = ashr exact i64 %33, 1
  br label %48

35:                                               ; preds = %2
  %36 = bitcast i16** %5 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = load i64, i64* %11, align 8
  %39 = sub i64 %37, %38
  %40 = ashr exact i64 %39, 1
  %41 = add nsw i64 %40, 1
  %42 = load i64, i64* %14, align 8
  %43 = sub i64 %42, %38
  %44 = ashr exact i64 %43, 1
  %45 = icmp ugt i64 %41, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %35
  %47 = sub i64 %41, %44
  call void @_ZNSt3__16vectorItNS_9allocatorItEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %47) #10
  br label %56

48:                                               ; preds = %30, %35
  %49 = phi i64 [ %32, %30 ], [ %38, %35 ]
  %50 = phi i64 [ %34, %30 ], [ %44, %35 ]
  %51 = phi i64 [ 0, %30 ], [ %41, %35 ]
  %52 = icmp ugt i64 %50, %51
  br i1 %52, label %53, label %56

53:                                               ; preds = %48
  %54 = inttoptr i64 %49 to i16*
  %55 = getelementptr inbounds i16, i16* %54, i64 %51
  store i16* %55, i16** %13, align 8
  br label %56

56:                                               ; preds = %46, %48, %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #10
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @wcslen(i32* nocapture) local_unnamed_addr #2

declare i32 @_ZN15google_breakpad19ConvertUTF32toUTF16EPPKmS1_PPtS3_NS_15ConversionFlagsE(i64**, i64*, i16**, i16*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15google_breakpad16UTF32ToUTF16CharEwPt(i32 signext, i16*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i64*, align 8
  %5 = alloca i16*, align 8
  store i32 %0, i32* %3, align 4
  %6 = bitcast i64** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = bitcast i64** %4 to i32**
  store i32* %3, i32** %7, align 8
  %8 = getelementptr inbounds i32, i32* %3, i64 2
  %9 = bitcast i32* %8 to i64*
  %10 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  store i16* %1, i16** %5, align 8
  %11 = getelementptr inbounds i16, i16* %1, i64 2
  %12 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 0, i16* %12, align 2
  store i16 0, i16* %1, align 2
  %13 = call i32 @_ZN15google_breakpad19ConvertUTF32toUTF16EPPKmS1_PPtS3_NS_15ConversionFlagsE(i64** nonnull %4, i64* %9, i16** nonnull %5, i16* %11, i32 0) #10
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %2
  store i16 0, i16* %12, align 2
  store i16 0, i16* %1, align 2
  br label %16

16:                                               ; preds = %2, %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15google_breakpad11UTF16ToUTF8ERKNSt3__16vectorItNS0_9allocatorItEEEEb(%"class.std::__1::basic_string"* noalias sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), i1 zeroext) local_unnamed_addr #0 {
  %4 = alloca i16*, align 8
  %5 = alloca i8*, align 8
  %6 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = bitcast %"class.std::__1::vector"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast i16** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = inttoptr i64 %8 to i16*
  %11 = inttoptr i64 %8 to i8*
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %13 = bitcast i16** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %14, %8
  %16 = ashr exact i64 %15, 1
  br i1 %2, label %17, label %162

17:                                               ; preds = %3
  %18 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %16, i64 2)
  %19 = extractvalue { i64, i1 } %18, 1
  %20 = extractvalue { i64, i1 } %18, 0
  %21 = select i1 %19, i64 -1, i64 %20
  %22 = tail call i8* @_Znam(i64 %21) #12
  %23 = bitcast i8* %22 to i16*
  %24 = inttoptr i64 %14 to i16*
  %25 = icmp eq i16* %10, %24
  br i1 %25, label %136, label %26

26:                                               ; preds = %17
  %27 = getelementptr i16, i16* %24, i64 -1
  %28 = bitcast i16* %27 to i8*
  %29 = sub i64 0, %8
  %30 = getelementptr i8, i8* %28, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = lshr i64 %31, 1
  %33 = add nuw i64 %32, 1
  %34 = icmp ult i64 %33, 16
  br i1 %34, label %35, label %61

35:                                               ; preds = %134, %61, %26
  %36 = phi i64 [ 0, %61 ], [ 0, %26 ], [ %78, %134 ]
  %37 = phi i16* [ %10, %61 ], [ %10, %26 ], [ %79, %134 ]
  %38 = ptrtoint i16* %37 to i64
  %39 = getelementptr i16, i16* %24, i64 -1
  %40 = ptrtoint i16* %39 to i64
  %41 = sub i64 %40, %38
  %42 = lshr i64 %41, 1
  %43 = add nuw i64 %42, 1
  %44 = and i64 %43, 3
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %57, label %46

46:                                               ; preds = %35, %46
  %47 = phi i64 [ %54, %46 ], [ %36, %35 ]
  %48 = phi i16* [ %53, %46 ], [ %37, %35 ]
  %49 = phi i64 [ %55, %46 ], [ %44, %35 ]
  %50 = load i16, i16* %48, align 2
  %51 = tail call i16 @llvm.bswap.i16(i16 %50) #10
  %52 = getelementptr inbounds i16, i16* %23, i64 %47
  store i16 %51, i16* %52, align 2
  %53 = getelementptr inbounds i16, i16* %48, i64 1
  %54 = add nuw i64 %47, 1
  %55 = add i64 %49, -1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %46, !llvm.loop !45

57:                                               ; preds = %46, %35
  %58 = phi i64 [ %36, %35 ], [ %54, %46 ]
  %59 = phi i16* [ %37, %35 ], [ %53, %46 ]
  %60 = icmp ult i64 %41, 6
  br i1 %60, label %136, label %138

61:                                               ; preds = %26
  %62 = getelementptr i16, i16* %24, i64 -1
  %63 = bitcast i16* %62 to i8*
  %64 = sub i64 0, %8
  %65 = getelementptr i8, i8* %63, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = lshr i64 %66, 1
  %68 = add i64 %66, 2
  %69 = and i64 %68, -2
  %70 = getelementptr i8, i8* %22, i64 %69
  %71 = add nuw i64 %67, 1
  %72 = getelementptr i16, i16* %10, i64 %71
  %73 = bitcast i16* %72 to i8*
  %74 = icmp ult i8* %22, %73
  %75 = icmp ugt i8* %70, %11
  %76 = and i1 %74, %75
  br i1 %76, label %35, label %77

77:                                               ; preds = %61
  %78 = and i64 %33, -16
  %79 = getelementptr i16, i16* %10, i64 %78
  %80 = add i64 %78, -16
  %81 = lshr exact i64 %80, 4
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %118, label %85

85:                                               ; preds = %77
  %86 = sub nuw nsw i64 %82, %83
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ 0, %85 ], [ %115, %87 ]
  %89 = phi i64 [ %86, %85 ], [ %116, %87 ]
  %90 = getelementptr i16, i16* %10, i64 %88
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !46
  %93 = getelementptr i16, i16* %90, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !46
  %96 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %92)
  %97 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %95)
  %98 = getelementptr inbounds i16, i16* %23, i64 %88
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !49, !noalias !46
  %100 = getelementptr inbounds i16, i16* %98, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %101, align 2, !alias.scope !49, !noalias !46
  %102 = or i64 %88, 16
  %103 = getelementptr i16, i16* %10, i64 %102
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !46
  %106 = getelementptr i16, i16* %103, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !46
  %109 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %105)
  %110 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %108)
  %111 = getelementptr inbounds i16, i16* %23, i64 %102
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %112, align 2, !alias.scope !49, !noalias !46
  %113 = getelementptr inbounds i16, i16* %111, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %114, align 2, !alias.scope !49, !noalias !46
  %115 = add i64 %88, 32
  %116 = add i64 %89, -2
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %87, !llvm.loop !51

118:                                              ; preds = %87, %77
  %119 = phi i64 [ 0, %77 ], [ %115, %87 ]
  %120 = icmp eq i64 %83, 0
  br i1 %120, label %134, label %121

121:                                              ; preds = %118
  %122 = getelementptr i16, i16* %10, i64 %119
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !46
  %125 = getelementptr i16, i16* %122, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !46
  %128 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %124)
  %129 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %127)
  %130 = getelementptr inbounds i16, i16* %23, i64 %119
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %131, align 2, !alias.scope !49, !noalias !46
  %132 = getelementptr inbounds i16, i16* %130, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %133, align 2, !alias.scope !49, !noalias !46
  br label %134

134:                                              ; preds = %118, %121
  %135 = icmp eq i64 %33, %78
  br i1 %135, label %136, label %35

136:                                              ; preds = %57, %138, %134, %17
  %137 = bitcast i16** %4 to i8**
  store i8* %22, i8** %137, align 8
  br label %162

138:                                              ; preds = %57, %138
  %139 = phi i64 [ %160, %138 ], [ %58, %57 ]
  %140 = phi i16* [ %159, %138 ], [ %59, %57 ]
  %141 = load i16, i16* %140, align 2
  %142 = tail call i16 @llvm.bswap.i16(i16 %141) #10
  %143 = getelementptr inbounds i16, i16* %23, i64 %139
  store i16 %142, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %140, i64 1
  %145 = add nuw i64 %139, 1
  %146 = load i16, i16* %144, align 2
  %147 = tail call i16 @llvm.bswap.i16(i16 %146) #10
  %148 = getelementptr inbounds i16, i16* %23, i64 %145
  store i16 %147, i16* %148, align 2
  %149 = getelementptr inbounds i16, i16* %140, i64 2
  %150 = add nuw i64 %139, 2
  %151 = load i16, i16* %149, align 2
  %152 = tail call i16 @llvm.bswap.i16(i16 %151) #10
  %153 = getelementptr inbounds i16, i16* %23, i64 %150
  store i16 %152, i16* %153, align 2
  %154 = getelementptr inbounds i16, i16* %140, i64 3
  %155 = add nuw i64 %139, 3
  %156 = load i16, i16* %154, align 2
  %157 = tail call i16 @llvm.bswap.i16(i16 %156) #10
  %158 = getelementptr inbounds i16, i16* %23, i64 %155
  store i16 %157, i16* %158, align 2
  %159 = getelementptr inbounds i16, i16* %140, i64 4
  %160 = add nuw i64 %139, 4
  %161 = icmp eq i16* %159, %24
  br i1 %161, label %136, label %138, !llvm.loop !52

162:                                              ; preds = %3, %136
  %163 = phi i16* [ %23, %136 ], [ %10, %3 ]
  %164 = phi i8* [ %22, %136 ], [ null, %3 ]
  %165 = phi i16* [ %23, %136 ], [ null, %3 ]
  %166 = getelementptr inbounds i16, i16* %163, i64 %16
  %167 = shl i64 %15, 1
  %168 = tail call i8* @_Znam(i64 %167) #12
  %169 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169) #10
  store i8* %168, i8** %5, align 8
  %170 = getelementptr inbounds i8, i8* %168, i64 %167
  %171 = call i32 @_ZN15google_breakpad18ConvertUTF16toUTF8EPPKtS1_PPhS3_NS_15ConversionFlagsE(i16** nonnull %4, i16* %166, i8** nonnull %5, i8* %170, i32 0) #10
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %199

173:                                              ; preds = %162
  %174 = call i64 @strlen(i8* nonnull %168) #10
  %175 = icmp ugt i64 %174, -17
  br i1 %175, label %176, label %178

176:                                              ; preds = %173
  %177 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %177) #11
  unreachable

178:                                              ; preds = %173
  %179 = icmp ult i64 %174, 23
  br i1 %179, label %188, label %180

180:                                              ; preds = %178
  %181 = add nuw i64 %174, 16
  %182 = and i64 %181, -16
  %183 = call i8* @_Znwm(i64 %182) #12
  %184 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %183, i8** %184, align 8
  %185 = or i64 %182, -9223372036854775808
  %186 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %185, i64* %186, align 8
  %187 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %174, i64* %187, align 8
  br label %194

188:                                              ; preds = %178
  %189 = trunc i64 %174 to i8
  %190 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %191 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %190, i64 0, i32 1, i32 0
  store i8 %189, i8* %191, align 1
  %192 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %193 = icmp eq i64 %174, 0
  br i1 %193, label %196, label %194

194:                                              ; preds = %188, %180
  %195 = phi i8* [ %183, %180 ], [ %192, %188 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* nonnull align 1 %168, i64 %174, i1 false) #10
  br label %196

196:                                              ; preds = %188, %194
  %197 = phi i8* [ %192, %188 ], [ %195, %194 ]
  %198 = getelementptr inbounds i8, i8* %197, i64 %174
  store i8 0, i8* %198, align 1
  br label %203

199:                                              ; preds = %162
  %200 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %201 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %200, i64 0, i32 1, i32 0
  store i8 0, i8* %201, align 1
  %202 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 0, i8* %202, align 8
  br label %203

203:                                              ; preds = %199, %196
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #10
  call void @_ZdaPv(i8* nonnull %168) #12
  %204 = icmp eq i16* %165, null
  br i1 %204, label %206, label %205

205:                                              ; preds = %203
  call void @_ZdaPv(i8* %164) #12
  br label %206

206:                                              ; preds = %203, %205
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

declare i32 @_ZN15google_breakpad18ConvertUTF16toUTF8EPPKtS1_PPhS3_NS_15ConversionFlagsE(i16**, i16*, i8**, i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorItNS_9allocatorItEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i16** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i16** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 1
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i16*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i16, i16* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i16, i16* %13, i64 %18
  %20 = bitcast i16* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 2
  %25 = and i64 %24, -2
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint i16* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %81

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 1
  %34 = add i64 %33, %1
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 1
  %41 = icmp ult i64 %40, 4611686018427387903
  %42 = icmp ult i64 %39, %34
  %43 = select i1 %42, i64 %34, i64 %39
  %44 = select i1 %41, i64 %43, i64 9223372036854775807
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %38
  %47 = icmp slt i64 %44, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #11
  unreachable

49:                                               ; preds = %46
  %50 = shl i64 %44, 1
  %51 = tail call i8* @_Znwm(i64 %50) #12
  %52 = bitcast i8* %51 to i16*
  br label %53

53:                                               ; preds = %49, %38
  %54 = phi i16* [ %52, %49 ], [ null, %38 ]
  %55 = getelementptr inbounds i16, i16* %54, i64 %33
  %56 = getelementptr inbounds i16, i16* %54, i64 %44
  %57 = getelementptr inbounds i16, i16* %55, i64 %1
  %58 = bitcast i16* %55 to i8*
  %59 = shl i64 %1, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %58, i8 0, i64 %59, i1 false) #10
  %60 = ptrtoint i16* %56 to i64
  %61 = ptrtoint i16* %57 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %63 = load i16*, i16** %62, align 8
  %64 = load i64, i64* %7, align 8
  %65 = ptrtoint i16* %63 to i64
  %66 = sub i64 %64, %65
  %67 = ashr exact i64 %66, 1
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds i16, i16* %55, i64 %68
  %70 = ptrtoint i16* %69 to i64
  %71 = icmp sgt i64 %66, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %53
  %73 = bitcast i16* %69 to i8*
  %74 = bitcast i16* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %74, i64 %66, i1 false) #10
  %75 = load i16*, i16** %62, align 8
  br label %76

76:                                               ; preds = %53, %72
  %77 = phi i16* [ %63, %53 ], [ %75, %72 ]
  store i64 %70, i64* %30, align 8
  store i64 %61, i64* %7, align 8
  store i64 %60, i64* %4, align 8
  %78 = icmp eq i16* %77, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %76
  %80 = bitcast i16* %77 to i8*
  tail call void @_ZdlPv(i8* %80) #12
  br label %81

81:                                               ; preds = %79, %76, %27
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #4

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.bswap.v8i16(<8 x i16>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !10}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !10}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !10}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !10}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !10}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !10}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !10}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !10}
!45 = distinct !{!45, !3}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !10}
!52 = distinct !{!52, !10}
