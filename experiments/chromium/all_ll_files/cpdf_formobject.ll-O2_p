; ModuleID = '../../third_party/pdfium/core/fpdfapi/page/cpdf_formobject.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/page/cpdf_formobject.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_FormObject = type { %class.CPDF_PageObject, %"class.std::__1::unique_ptr.212", %class.CFX_Matrix }
%class.CPDF_PageObject = type { %class.CPDF_GraphicStates, %class.CFX_FloatRect, %class.CPDF_ContentMarks, i8, i32 }
%class.CPDF_GraphicStates = type { i32 (...)**, %class.CPDF_ClipPath, %class.CFX_GraphState, %class.CPDF_ColorState, %class.CPDF_TextState, %class.CPDF_GeneralState }
%class.CPDF_ClipPath = type { %"class.fxcrt::SharedCopyOnWrite" }
%"class.fxcrt::SharedCopyOnWrite" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.CPDF_ClipPath::PathData"* }
%"class.CPDF_ClipPath::PathData" = type { %"class.fxcrt::Retainable", %"class.std::__1::vector", %"class.std::__1::vector.3" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.0" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"class.std::__1::unique_ptr.5"*, %"class.std::__1::unique_ptr.5"*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::unique_ptr.5" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::unique_ptr.5"* }
%class.CFX_GraphState = type { %"class.fxcrt::SharedCopyOnWrite.12" }
%"class.fxcrt::SharedCopyOnWrite.12" = type { %"class.fxcrt::RetainPtr.13" }
%"class.fxcrt::RetainPtr.13" = type { %"class.std::__1::unique_ptr.14" }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %class.CFX_RetainableGraphStateData* }
%class.CFX_RetainableGraphStateData = type { %"class.fxcrt::Retainable", %class.CFX_GraphStateData }
%class.CFX_GraphStateData = type { i8, i8, float, float, float, %"class.std::__1::vector.17" }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { float*, float*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { float* }
%class.CPDF_ColorState = type { %"class.fxcrt::SharedCopyOnWrite.26" }
%"class.fxcrt::SharedCopyOnWrite.26" = type { %"class.fxcrt::RetainPtr.27" }
%"class.fxcrt::RetainPtr.27" = type { %"class.std::__1::unique_ptr.28" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.CPDF_ColorState::ColorData"* }
%"class.CPDF_ColorState::ColorData" = type { %"class.fxcrt::Retainable", i32, i32, %class.CPDF_Color, %class.CPDF_Color }
%class.CPDF_Color = type { %"class.std::__1::vector.17", %"class.std::__1::unique_ptr.31", %"class.fxcrt::RetainPtr.35" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %class.PatternValue* }
%class.PatternValue = type opaque
%"class.fxcrt::RetainPtr.35" = type { %"class.std::__1::unique_ptr.36" }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %class.CPDF_ColorSpace* }
%class.CPDF_ColorSpace = type opaque
%class.CPDF_TextState = type { %"class.fxcrt::SharedCopyOnWrite.43" }
%"class.fxcrt::SharedCopyOnWrite.43" = type { %"class.fxcrt::RetainPtr.44" }
%"class.fxcrt::RetainPtr.44" = type { %"class.std::__1::unique_ptr.45" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.CPDF_TextState::TextData"* }
%"class.CPDF_TextState::TextData" = type { %"class.fxcrt::Retainable", %"class.fxcrt::RetainPtr.48", %"class.fxcrt::UnownedPtr.170", float, float, float, i32, [4 x float], [4 x float] }
%"class.fxcrt::RetainPtr.48" = type { %"class.std::__1::unique_ptr.49" }
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %class.CPDF_Font* }
%class.CPDF_Font = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %class.CFX_Font, %"class.std::__1::vector.109", %"class.fxcrt::RetainPtr.117", %"class.fxcrt::RetainPtr.156", %"class.fxcrt::ByteString", %"class.std::__1::unique_ptr.162", i8, i32, i32, i32, i32, i32, %struct.FX_RECT }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.52", %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CPDF_Document* }
%class.CPDF_Document = type opaque
%class.CFX_Font = type <{ %"class.fxcrt::RetainPtr.60", %"class.std::__1::unique_ptr.66", %"class.fxcrt::RetainPtr.72", %"class.fxcrt::RetainPtr.88", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.100", %"class.std::__1::vector.104", %"class.pdfium::span", i8, i8, [6 x i8] }>
%"class.fxcrt::RetainPtr.60" = type { %"class.std::__1::unique_ptr.61" }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type opaque
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %struct.FT_StreamRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%"class.fxcrt::RetainPtr.72" = type { %"class.std::__1::unique_ptr.73" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %class.CFX_Face* }
%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.76", %"class.fxcrt::RetainPtr.80" }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %struct.FT_FaceRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.80" = type { %"class.std::__1::unique_ptr.81" }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.fxcrt::Retainable"* }
%"class.fxcrt::RetainPtr.88" = type { %"class.std::__1::unique_ptr.89" }
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %class.CFX_GlyphCache* }
%class.CFX_GlyphCache = type opaque
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %class.CFX_SubstFont* }
%class.CFX_SubstFont = type opaque
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { i8* }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { i8*, i8*, %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.108", i64 }
%"class.fxcrt::UnownedPtr.108" = type { i8* }
%"class.std::__1::vector.109" = type { %"class.std::__1::__vector_base.110" }
%"class.std::__1::__vector_base.110" = type { %"class.std::__1::unique_ptr.111"*, %"class.std::__1::unique_ptr.111"*, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::unique_ptr.111" = type opaque
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.std::__1::unique_ptr.111"* }
%"class.fxcrt::RetainPtr.117" = type { %"class.std::__1::unique_ptr.118" }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %class.CPDF_StreamAcc* }
%class.CPDF_StreamAcc = type { %"class.fxcrt::Retainable", %"class.fxcrt::MaybeOwned", i32, %"class.fxcrt::ByteString", %"class.fxcrt::RetainPtr.127", %"class.fxcrt::RetainPtr.148" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.100", %"class.fxcrt::UnownedPtr.108" }
%"class.fxcrt::RetainPtr.127" = type { %"class.std::__1::unique_ptr.128" }
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %class.CPDF_Dictionary* }
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr.131" }
%"class.fxcrt::RetainPtr.131" = type { %"class.std::__1::unique_ptr.132" }
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.289" }
%"class.std::__1::unique_ptr.289" = type { %"class.std::__1::__compressed_pair.290" }
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.292", %"class.std::__1::__compressed_pair.300", %"class.std::__1::__compressed_pair.305", %"class.std::__1::__compressed_pair.307", [4 x i8] }>
%"class.std::__1::unique_ptr.292" = type { %"class.std::__1::__compressed_pair.293" }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.294", %"struct.std::__1::__compressed_pair_elem.295" }
%"struct.std::__1::__compressed_pair_elem.294" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.295" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.std::__1::__compressed_pair.307" = type { %"struct.std::__1::__compressed_pair_elem.308" }
%"struct.std::__1::__compressed_pair_elem.308" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree.137" }
%"class.std::__1::__tree.137" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.138", %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.fxcrt::RetainPtr.148" = type { %"class.std::__1::unique_ptr.149" }
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %class.CPDF_Stream* }
%class.CPDF_Stream = type opaque
%"class.fxcrt::RetainPtr.156" = type { %"class.std::__1::unique_ptr.157" }
%"class.std::__1::unique_ptr.157" = type { %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %class.CPDF_Dictionary* }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.121" }
%"class.fxcrt::RetainPtr.121" = type { %"class.std::__1::unique_ptr.122" }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %class.CPDF_ToUnicodeMap* }
%class.CPDF_ToUnicodeMap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.fxcrt::UnownedPtr.170" = type { %class.CPDF_Document* }
%class.CPDF_GeneralState = type { %"class.fxcrt::SharedCopyOnWrite.173" }
%"class.fxcrt::SharedCopyOnWrite.173" = type { %"class.fxcrt::RetainPtr.174" }
%"class.fxcrt::RetainPtr.174" = type { %"class.std::__1::unique_ptr.175" }
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.CPDF_GeneralState::StateData"* }
%"class.CPDF_GeneralState::StateData" = type { %"class.fxcrt::Retainable", %"class.fxcrt::ByteString", i32, %"class.fxcrt::RetainPtr.178", %class.CFX_Matrix, float, float, %"class.fxcrt::RetainPtr.184", %"class.fxcrt::RetainPtr.190", %class.CFX_Matrix, i32, i8, i8, i8, i8, i8, i32, %"class.fxcrt::RetainPtr.184", %"class.fxcrt::RetainPtr.184", %"class.fxcrt::RetainPtr.184", float, float }
%"class.fxcrt::RetainPtr.178" = type { %"class.std::__1::unique_ptr.179" }
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %class.CPDF_Object* }
%"class.fxcrt::RetainPtr.190" = type { %"class.std::__1::unique_ptr.191" }
%"class.std::__1::unique_ptr.191" = type { %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %class.CPDF_TransferFunc* }
%class.CPDF_TransferFunc = type opaque
%"class.fxcrt::RetainPtr.184" = type { %"class.std::__1::unique_ptr.185" }
%"class.std::__1::unique_ptr.185" = type { %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %class.CPDF_Object* }
%class.CFX_FloatRect = type { float, float, float, float }
%class.CPDF_ContentMarks = type { %"class.fxcrt::RetainPtr.198" }
%"class.fxcrt::RetainPtr.198" = type { %"class.std::__1::unique_ptr.199" }
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.CPDF_ContentMarks::MarkData"* }
%"class.CPDF_ContentMarks::MarkData" = type { %"class.fxcrt::Retainable", %"class.std::__1::vector.202" }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"class.fxcrt::RetainPtr.204"*, %"class.fxcrt::RetainPtr.204"*, %"class.std::__1::__compressed_pair.205" }
%"class.fxcrt::RetainPtr.204" = type opaque
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"class.fxcrt::RetainPtr.204"* }
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %class.CPDF_Form* }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CPDF_Form = type { %class.CPDF_PageObjectHolder, %"class.CPDF_Font::FormIface", %"class.std::__1::set.270", %"class.fxcrt::RetainPtr.280" }
%class.CPDF_PageObjectHolder = type { i32 (...)**, %"class.fxcrt::RetainPtr.156", %"class.fxcrt::RetainPtr.156", %"class.std::__1::map.215", %"class.std::__1::map.226", %class.CFX_FloatRect, %class.CPDF_Transparency, i8, i8, %"class.fxcrt::RetainPtr.156", %"class.fxcrt::UnownedPtr", %"class.std::__1::vector.237", %"class.std::__1::unique_ptr.244", %"class.std::__1::deque", %class.CFX_Matrix, %"class.std::__1::set.260" }
%"class.std::__1::map.215" = type { %"class.std::__1::__tree.216" }
%"class.std::__1::__tree.216" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.217", %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.std::__1::map.226" = type { %"class.std::__1::__tree.227" }
%"class.std::__1::__tree.227" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.228", %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%class.CPDF_Transparency = type { i8, i8 }
%"class.std::__1::vector.237" = type { %"class.std::__1::__vector_base.238" }
%"class.std::__1::__vector_base.238" = type { %class.CFX_FloatRect*, %class.CFX_FloatRect*, %"class.std::__1::__compressed_pair.239" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %class.CFX_FloatRect* }
%"class.std::__1::unique_ptr.244" = type { %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %class.CPDF_ContentParser* }
%class.CPDF_ContentParser = type opaque
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.256" }
%"struct.std::__1::__split_buffer" = type { %"class.std::__1::unique_ptr.250"**, %"class.std::__1::unique_ptr.250"**, %"class.std::__1::unique_ptr.250"**, %"class.std::__1::__compressed_pair.251" }
%"class.std::__1::unique_ptr.250" = type { %"class.std::__1::__compressed_pair.313" }
%"class.std::__1::__compressed_pair.313" = type { %"struct.std::__1::__compressed_pair_elem.314" }
%"struct.std::__1::__compressed_pair_elem.314" = type { %class.CPDF_PageObject* }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.std::__1::unique_ptr.250"** }
%"class.std::__1::__compressed_pair.256" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.std::__1::set.260" = type { %"class.std::__1::__tree.261" }
%"class.std::__1::__tree.261" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.262", %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.CPDF_Font::FormIface" = type { i32 (...)** }
%"class.std::__1::set.270" = type { %"class.std::__1::__tree.271" }
%"class.std::__1::__tree.271" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.272", %"class.std::__1::__compressed_pair.276" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.fxcrt::RetainPtr.280" = type { %"class.std::__1::unique_ptr.281" }
%"class.std::__1::unique_ptr.281" = type { %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %class.CPDF_Stream* }
%class.CPDF_TextObject = type opaque
%class.CPDF_PathObject = type opaque
%class.CPDF_ImageObject = type opaque
%class.CPDF_ShadingObject = type opaque

@_ZTV15CPDF_FormObject = hidden unnamed_addr constant { [21 x i8*] } { [21 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CPDF_FormObject*)* @_ZN15CPDF_FormObjectD2Ev to i8*), i8* bitcast (void (%class.CPDF_FormObject*)* @_ZN15CPDF_FormObjectD0Ev to i8*), i8* bitcast (i32 (%class.CPDF_FormObject*)* @_ZNK15CPDF_FormObject7GetTypeEv to i8*), i8* bitcast (void (%class.CPDF_FormObject*, %class.CFX_Matrix*)* @_ZN15CPDF_FormObject9TransformERK10CFX_Matrix to i8*), i8* bitcast (i1 (%class.CPDF_PageObject*)* @_ZNK15CPDF_PageObject6IsTextEv to i8*), i8* bitcast (i1 (%class.CPDF_PageObject*)* @_ZNK15CPDF_PageObject6IsPathEv to i8*), i8* bitcast (i1 (%class.CPDF_PageObject*)* @_ZNK15CPDF_PageObject7IsImageEv to i8*), i8* bitcast (i1 (%class.CPDF_PageObject*)* @_ZNK15CPDF_PageObject9IsShadingEv to i8*), i8* bitcast (i1 (%class.CPDF_FormObject*)* @_ZNK15CPDF_FormObject6IsFormEv to i8*), i8* bitcast (%class.CPDF_TextObject* (%class.CPDF_PageObject*)* @_ZN15CPDF_PageObject6AsTextEv to i8*), i8* bitcast (%class.CPDF_TextObject* (%class.CPDF_PageObject*)* @_ZNK15CPDF_PageObject6AsTextEv to i8*), i8* bitcast (%class.CPDF_PathObject* (%class.CPDF_PageObject*)* @_ZN15CPDF_PageObject6AsPathEv to i8*), i8* bitcast (%class.CPDF_PathObject* (%class.CPDF_PageObject*)* @_ZNK15CPDF_PageObject6AsPathEv to i8*), i8* bitcast (%class.CPDF_ImageObject* (%class.CPDF_PageObject*)* @_ZN15CPDF_PageObject7AsImageEv to i8*), i8* bitcast (%class.CPDF_ImageObject* (%class.CPDF_PageObject*)* @_ZNK15CPDF_PageObject7AsImageEv to i8*), i8* bitcast (%class.CPDF_ShadingObject* (%class.CPDF_PageObject*)* @_ZN15CPDF_PageObject9AsShadingEv to i8*), i8* bitcast (%class.CPDF_ShadingObject* (%class.CPDF_PageObject*)* @_ZNK15CPDF_PageObject9AsShadingEv to i8*), i8* bitcast (%class.CPDF_FormObject* (%class.CPDF_FormObject*)* @_ZN15CPDF_FormObject6AsFormEv to i8*), i8* bitcast (%class.CPDF_FormObject* (%class.CPDF_FormObject*)* @_ZNK15CPDF_FormObject6AsFormEv to i8*)] }, align 8

@_ZN15CPDF_FormObjectC1EiNSt3__110unique_ptrI9CPDF_FormNS0_14default_deleteIS2_EEEERK10CFX_Matrix = hidden unnamed_addr alias void (%class.CPDF_FormObject*, i32, %class.CPDF_Form*, %class.CFX_Matrix*), void (%class.CPDF_FormObject*, i32, %class.CPDF_Form*, %class.CFX_Matrix*)* @_ZN15CPDF_FormObjectC2EiNSt3__110unique_ptrI9CPDF_FormNS0_14default_deleteIS2_EEEERK10CFX_Matrix
@_ZN15CPDF_FormObjectD1Ev = hidden unnamed_addr alias void (%class.CPDF_FormObject*), void (%class.CPDF_FormObject*)* @_ZN15CPDF_FormObjectD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_FormObjectC2EiNSt3__110unique_ptrI9CPDF_FormNS0_14default_deleteIS2_EEEERK10CFX_Matrix(%class.CPDF_FormObject*, i32, %class.CPDF_Form*, %class.CFX_Matrix* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %5 = ptrtoint %class.CPDF_Form* %2 to i64
  %6 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0
  tail call void @_ZN15CPDF_PageObjectC2Ei(%class.CPDF_PageObject* %6, i32 %1) #6
  %7 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV15CPDF_FormObject, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 1
  %9 = bitcast %"class.std::__1::unique_ptr.212"* %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 2
  %11 = bitcast %class.CFX_Matrix* %10 to i8*
  %12 = bitcast %class.CFX_Matrix* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 4 %12, i64 24, i1 false)
  ret void
}

declare void @_ZN15CPDF_PageObjectC2Ei(%class.CPDF_PageObject*, i32) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_FormObjectD2Ev(%class.CPDF_FormObject*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV15CPDF_FormObject, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %class.CPDF_Form*, %class.CPDF_Form** %3, align 8
  store %class.CPDF_Form* null, %class.CPDF_Form** %3, align 8
  %5 = icmp eq %class.CPDF_Form* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.CPDF_Form* %4 to void (%class.CPDF_Form*)***
  %8 = load void (%class.CPDF_Form*)**, void (%class.CPDF_Form*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.CPDF_Form*)*, void (%class.CPDF_Form*)** %8, i64 1
  %10 = load void (%class.CPDF_Form*)*, void (%class.CPDF_Form*)** %9, align 8
  tail call void %10(%class.CPDF_Form* nonnull %4) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0
  tail call void @_ZN15CPDF_PageObjectD2Ev(%class.CPDF_PageObject* %12) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN15CPDF_PageObjectD2Ev(%class.CPDF_PageObject*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_FormObjectD0Ev(%class.CPDF_FormObject*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV15CPDF_FormObject, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %class.CPDF_Form*, %class.CPDF_Form** %3, align 8
  store %class.CPDF_Form* null, %class.CPDF_Form** %3, align 8
  %5 = icmp eq %class.CPDF_Form* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.CPDF_Form* %4 to void (%class.CPDF_Form*)***
  %8 = load void (%class.CPDF_Form*)**, void (%class.CPDF_Form*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.CPDF_Form*)*, void (%class.CPDF_Form*)** %8, i64 1
  %10 = load void (%class.CPDF_Form*)*, void (%class.CPDF_Form*)** %9, align 8
  tail call void %10(%class.CPDF_Form* nonnull %4) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0
  tail call void @_ZN15CPDF_PageObjectD2Ev(%class.CPDF_PageObject* %12) #6
  %13 = bitcast %class.CPDF_FormObject* %0 to i8*
  tail call void @_ZdlPv(i8* %13) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_FormObject9TransformERK10CFX_Matrix(%class.CPDF_FormObject*, %class.CFX_Matrix* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 2
  %5 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 0
  %6 = load float, float* %5, align 4, !noalias !2
  %7 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 2, i32 1
  %8 = load float, float* %7, align 4, !noalias !2
  %9 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 2
  %10 = bitcast %class.CFX_Matrix* %1 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4, !noalias !2
  %12 = shufflevector <2 x float> %11, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %13 = bitcast float* %9 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4, !noalias !2
  %15 = shufflevector <2 x float> %14, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %16 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 2, i32 2
  %17 = load float, float* %16, align 4, !noalias !2
  %18 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 2, i32 3
  %19 = load float, float* %18, align 4, !noalias !2
  %20 = insertelement <4 x float> undef, float %6, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %22 = extractelement <2 x float> %11, i32 0
  %23 = extractelement <2 x float> %11, i32 1
  %24 = shufflevector <4 x float> %21, <4 x float> %12, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %25 = insertelement <4 x float> undef, float %22, i32 0
  %26 = insertelement <4 x float> %25, float %23, i32 1
  %27 = insertelement <4 x float> %26, float %17, i32 2
  %28 = insertelement <4 x float> %27, float %17, i32 3
  %29 = fmul <4 x float> %24, %28
  %30 = insertelement <4 x float> undef, float %8, i32 0
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %32 = extractelement <2 x float> %14, i32 0
  %33 = extractelement <2 x float> %14, i32 1
  %34 = shufflevector <4 x float> %31, <4 x float> %15, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %35 = insertelement <4 x float> undef, float %32, i32 0
  %36 = insertelement <4 x float> %35, float %33, i32 1
  %37 = insertelement <4 x float> %36, float %19, i32 2
  %38 = insertelement <4 x float> %37, float %19, i32 3
  %39 = fmul <4 x float> %34, %38
  %40 = fadd <4 x float> %29, %39
  %41 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 2, i32 4
  %42 = load float, float* %41, align 4, !noalias !2
  %43 = fmul float %22, %42
  %44 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 2, i32 5
  %45 = load float, float* %44, align 4, !noalias !2
  %46 = fmul float %32, %45
  %47 = fadd float %43, %46
  %48 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 4
  %49 = load float, float* %48, align 4, !noalias !2
  %50 = fadd float %49, %47
  %51 = fmul float %23, %42
  %52 = fmul float %33, %45
  %53 = fadd float %51, %52
  %54 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %1, i64 0, i32 5
  %55 = load float, float* %54, align 4, !noalias !2
  %56 = fadd float %53, %55
  %57 = bitcast %class.CFX_Matrix* %4 to <4 x float>*
  store <4 x float> %40, <4 x float>* %57, align 4
  store float %50, float* %41, align 4
  store float %56, float* %44, align 4
  %58 = bitcast { <2 x float>, <2 x float> }* %3 to %class.CFX_FloatRect*
  %59 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #6
  %60 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %61 = load %class.CPDF_Form*, %class.CPDF_Form** %60, align 8
  %62 = tail call { <2 x float>, <2 x float> } @_ZNK9CPDF_Form15CalcBoundingBoxEv(%class.CPDF_Form* %61) #6
  %63 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  %64 = extractvalue { <2 x float>, <2 x float> } %62, 0
  store <2 x float> %64, <2 x float>* %63, align 8
  %65 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  %66 = extractvalue { <2 x float>, <2 x float> } %62, 1
  store <2 x float> %66, <2 x float>* %65, align 8
  %67 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* %4, %class.CFX_FloatRect* nonnull dereferenceable(16) %58) #6
  %68 = extractvalue { <2 x float>, <2 x float> } %67, 0
  %69 = extractvalue { <2 x float>, <2 x float> } %67, 1
  %70 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0, i32 1
  %71 = bitcast %class.CFX_FloatRect* %70 to <2 x float>*
  store <2 x float> %68, <2 x float>* %71, align 8
  %72 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0, i32 1, i32 2
  %73 = bitcast float* %72 to <2 x float>*
  store <2 x float> %69, <2 x float>* %73, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_FormObject15CalcBoundingBoxEv(%class.CPDF_FormObject*) local_unnamed_addr #0 align 2 {
  %2 = alloca { <2 x float>, <2 x float> }, align 8
  %3 = bitcast { <2 x float>, <2 x float> }* %2 to %class.CFX_FloatRect*
  %4 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 2
  %5 = bitcast { <2 x float>, <2 x float> }* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #6
  %6 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %class.CPDF_Form*, %class.CPDF_Form** %6, align 8
  %8 = tail call { <2 x float>, <2 x float> } @_ZNK9CPDF_Form15CalcBoundingBoxEv(%class.CPDF_Form* %7) #6
  %9 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %2, i64 0, i32 0
  %10 = extractvalue { <2 x float>, <2 x float> } %8, 0
  store <2 x float> %10, <2 x float>* %9, align 8
  %11 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %2, i64 0, i32 1
  %12 = extractvalue { <2 x float>, <2 x float> } %8, 1
  store <2 x float> %12, <2 x float>* %11, align 8
  %13 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* %4, %class.CFX_FloatRect* nonnull dereferenceable(16) %3) #6
  %14 = extractvalue { <2 x float>, <2 x float> } %13, 0
  %15 = extractvalue { <2 x float>, <2 x float> } %13, 1
  %16 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0, i32 1
  %17 = bitcast %class.CFX_FloatRect* %16 to <2 x float>*
  store <2 x float> %14, <2 x float>* %17, align 8
  %18 = getelementptr inbounds %class.CPDF_FormObject, %class.CPDF_FormObject* %0, i64 0, i32 0, i32 1, i32 2
  %19 = bitcast float* %18 to <2 x float>*
  store <2 x float> %15, <2 x float>* %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #6
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK15CPDF_FormObject6IsFormEv(%class.CPDF_FormObject* nocapture readnone) unnamed_addr #5 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %class.CPDF_FormObject* @_ZN15CPDF_FormObject6AsFormEv(%class.CPDF_FormObject* readnone returned) unnamed_addr #5 align 2 {
  ret %class.CPDF_FormObject* %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %class.CPDF_FormObject* @_ZNK15CPDF_FormObject6AsFormEv(%class.CPDF_FormObject* readnone returned) unnamed_addr #5 align 2 {
  ret %class.CPDF_FormObject* %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK15CPDF_FormObject7GetTypeEv(%class.CPDF_FormObject* nocapture readnone) unnamed_addr #5 align 2 {
  ret i32 5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix*, %class.CFX_FloatRect* dereferenceable(16)) local_unnamed_addr #1

declare { <2 x float>, <2 x float> } @_ZNK9CPDF_Form15CalcBoundingBoxEv(%class.CPDF_Form*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZNK15CPDF_PageObject6IsTextEv(%class.CPDF_PageObject*) unnamed_addr #1

declare zeroext i1 @_ZNK15CPDF_PageObject6IsPathEv(%class.CPDF_PageObject*) unnamed_addr #1

declare zeroext i1 @_ZNK15CPDF_PageObject7IsImageEv(%class.CPDF_PageObject*) unnamed_addr #1

declare zeroext i1 @_ZNK15CPDF_PageObject9IsShadingEv(%class.CPDF_PageObject*) unnamed_addr #1

declare %class.CPDF_TextObject* @_ZN15CPDF_PageObject6AsTextEv(%class.CPDF_PageObject*) unnamed_addr #1

declare %class.CPDF_TextObject* @_ZNK15CPDF_PageObject6AsTextEv(%class.CPDF_PageObject*) unnamed_addr #1

declare %class.CPDF_PathObject* @_ZN15CPDF_PageObject6AsPathEv(%class.CPDF_PageObject*) unnamed_addr #1

declare %class.CPDF_PathObject* @_ZNK15CPDF_PageObject6AsPathEv(%class.CPDF_PageObject*) unnamed_addr #1

declare %class.CPDF_ImageObject* @_ZN15CPDF_PageObject7AsImageEv(%class.CPDF_PageObject*) unnamed_addr #1

declare %class.CPDF_ImageObject* @_ZNK15CPDF_PageObject7AsImageEv(%class.CPDF_PageObject*) unnamed_addr #1

declare %class.CPDF_ShadingObject* @_ZN15CPDF_PageObject9AsShadingEv(%class.CPDF_PageObject*) unnamed_addr #1

declare %class.CPDF_ShadingObject* @_ZNK15CPDF_PageObject9AsShadingEv(%class.CPDF_PageObject*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!4 = distinct !{!4, !"_ZNK10CFX_MatrixmlERKS_"}
