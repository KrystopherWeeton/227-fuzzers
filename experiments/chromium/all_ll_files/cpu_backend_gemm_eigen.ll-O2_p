; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/cpu_backend_gemm_eigen.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/cpu_backend_gemm_eigen.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.Eigen::internal::CacheSizes" = type { i64, i64, i64 }
%"struct.tflite::cpu_backend_gemm::MatrixParams" = type <{ i32, i32, i32, float, i8, [3 x i8] }>
%"struct.tflite::cpu_backend_gemm::GemmParams" = type { float, i32, float*, i32*, float*, float, float }
%"class.tflite::CpuBackendContext" = type <{ %"class.tflite::TfLiteInternalBackendContext", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2", i32, i8, [3 x i8] }>
%"class.tflite::TfLiteInternalBackendContext" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ruy::Context"* }
%"class.ruy::Context" = type { %"class.ruy::CtxImpl"* }
%"class.ruy::CtxImpl" = type opaque
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.gemmlowp::GemmContext"* }
%"class.gemmlowp::GemmContext" = type { %"class.gemmlowp::MultiThreadGemmContext" }
%"class.gemmlowp::MultiThreadGemmContext" = type { %"class.gemmlowp::MultiThreadGemmContextBase", %"class.gemmlowp::WorkersPool" }
%"class.gemmlowp::MultiThreadGemmContextBase" = type { %"class.gemmlowp::SingleThreadGemmContext.base", i32 }
%"class.gemmlowp::SingleThreadGemmContext.base" = type <{ %"class.gemmlowp::Allocator", i32, i32, float }>
%"class.gemmlowp::Allocator" = type { i8, i64, i8*, i64, i64, [5 x i64], i64 }
%"class.gemmlowp::WorkersPool" = type { %"class.std::__1::vector", %"class.gemmlowp::BlockingCounter", %"class.gemmlowp::Allocator" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gemmlowp::Worker"**, %"class.gemmlowp::Worker"**, %"class.std::__1::__compressed_pair.12" }
%"class.gemmlowp::Worker" = type { i64, %"struct.gemmlowp::Task"*, %union.pthread_cond_t, %union.pthread_mutex_t, %"struct.std::__1::atomic", %"class.gemmlowp::Allocator", %"class.gemmlowp::BlockingCounter"* }
%"struct.gemmlowp::Task" = type { i32 (...)**, %"class.gemmlowp::Allocator"* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.5, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.5 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.gemmlowp::Worker"** }
%"class.gemmlowp::BlockingCounter" = type { %"struct.std::__1::atomic.7" }
%"struct.std::__1::atomic.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i64 }
%"class.Eigen::Map" = type <{ %"class.Eigen::MapBase", %"class.Eigen::Stride", [6 x i8] }>
%"class.Eigen::MapBase" = type { float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::internal::variable_if_dynamic" = type { i64 }
%"class.Eigen::Stride" = type { %"class.Eigen::internal::variable_if_dynamic.19", %"class.Eigen::internal::variable_if_dynamic.19" }
%"class.Eigen::internal::variable_if_dynamic.19" = type { i8 }
%"class.Eigen::Block" = type { %"class.Eigen::BlockImpl" }
%"class.Eigen::BlockImpl" = type { %"class.Eigen::internal::BlockImpl_dense" }
%"class.Eigen::internal::BlockImpl_dense" = type { %"class.Eigen::MapBase.base", [7 x i8], %"class.Eigen::Map.20", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.base" = type <{ float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.48" }>
%"class.Eigen::internal::variable_if_dynamic.48" = type { i8 }
%"class.Eigen::Map.20" = type <{ %"class.Eigen::MapBase.21", %"class.Eigen::Stride", [6 x i8] }>
%"class.Eigen::MapBase.21" = type { float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::Transpose" = type { %"class.Eigen::Block.80" }
%"class.Eigen::Block.80" = type { %"class.Eigen::BlockImpl.81" }
%"class.Eigen::BlockImpl.81" = type { %"class.Eigen::internal::BlockImpl_dense.82" }
%"class.Eigen::internal::BlockImpl_dense.82" = type { %"class.Eigen::MapBase.83", %"class.Eigen::Map.28", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.83" = type { %"class.Eigen::MapBase.84" }
%"class.Eigen::MapBase.84" = type { float*, %"class.Eigen::internal::variable_if_dynamic.48", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::Map.28" = type <{ %"class.Eigen::MapBase.29", %"class.Eigen::Stride", [6 x i8] }>
%"class.Eigen::MapBase.29" = type { %"class.Eigen::MapBase.30" }
%"class.Eigen::MapBase.30" = type { float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::Transpose.167" = type { %"class.Eigen::Map.20" }
%"class.Eigen::Transpose.174" = type { %"class.Eigen::Block.70" }
%"class.Eigen::Block.70" = type { %"class.Eigen::BlockImpl.71" }
%"class.Eigen::BlockImpl.71" = type { %"class.Eigen::internal::BlockImpl_dense.72" }
%"class.Eigen::internal::BlockImpl_dense.72" = type { %"class.Eigen::MapBase.73", %"class.Eigen::Map", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.73" = type { float*, %"class.Eigen::internal::variable_if_dynamic.48", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::Block.50" = type { %"class.Eigen::BlockImpl.51" }
%"class.Eigen::BlockImpl.51" = type { %"class.Eigen::internal::BlockImpl_dense.52" }
%"class.Eigen::internal::BlockImpl_dense.52" = type { %"class.Eigen::MapBase.base.62", [7 x i8], %"class.Eigen::Map.28", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.base.62" = type { %"class.Eigen::MapBase.base.61" }
%"class.Eigen::MapBase.base.61" = type <{ float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.48" }>
%"class.Eigen::Product.91" = type { %"class.Eigen::Map", %"class.Eigen::Map.20" }
%"class.Eigen::internal::const_blas_data_mapper" = type { %"class.Eigen::internal::blas_data_mapper" }
%"class.Eigen::internal::blas_data_mapper" = type { float*, i64 }
%"class.Eigen::internal::const_blas_data_mapper.128" = type { %"class.Eigen::internal::blas_data_mapper.129" }
%"class.Eigen::internal::blas_data_mapper.129" = type { float*, i64 }
%"class.Eigen::Block.239" = type { %"class.Eigen::BlockImpl.240" }
%"class.Eigen::BlockImpl.240" = type { %"class.Eigen::internal::BlockImpl_dense.241" }
%"class.Eigen::internal::BlockImpl_dense.241" = type { %"class.Eigen::MapBase.base.248", [7 x i8], %"class.Eigen::Map.20", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.base.248" = type <{ float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.48" }>
%"class.Eigen::Transpose.223" = type { %"class.Eigen::Block.230" }
%"class.Eigen::Block.230" = type { %"class.Eigen::BlockImpl.231" }
%"class.Eigen::BlockImpl.231" = type { %"class.Eigen::internal::BlockImpl_dense.232" }
%"class.Eigen::internal::BlockImpl_dense.232" = type { %"class.Eigen::MapBase.233", %"class.Eigen::Map", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.233" = type { float*, %"class.Eigen::internal::variable_if_dynamic.48", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::internal::gemm_blocking_space" = type { %"class.Eigen::internal::level3_blocking", i64, i64 }
%"class.Eigen::internal::level3_blocking" = type { float*, float*, i64, i64, i64 }
%"struct.Eigen::internal::GemmParallelInfo" = type opaque
%"struct.Eigen::internal::gemm_pack_lhs" = type { i8 }
%"struct.Eigen::internal::gemm_pack_rhs" = type { i8 }
%"struct.Eigen::internal::gebp_kernel" = type { i8 }
%"class.Eigen::internal::blas_data_mapper.275" = type { float*, i64 }
%"struct.Eigen::internal::lhs_process_one_packet" = type { i8 }

$_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS_5BlockINS4_IKNS5_IfLin1ELin1ELi0ELin1ELin1EEELi0ES9_EELin1ELi1ELb1EEENSB_INS4_ISC_Li0ES9_EELin1ELi1ELb1EEEEEvRKT_RKT0_RT1_RKNSO_6ScalarE = comdat any

$_ZN5Eigen8internal29general_matrix_vector_productIlfNS0_22const_blas_data_mapperIflLi1EEELi1ELb0EfNS2_IflLi0EEELb0ELi0EE3runEllRKS3_RKS4_Pflf = comdat any

$_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_9TransposeIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEEENS4_IKNS_5BlockINS5_IKNS6_IfLin1ELin1ELi1ELin1ELin1EEELi0ESA_EELi1ELin1ELb1EEEEENS4_INSE_INS5_IS7_Li0ESA_EELi1ELin1ELb0EEEEEEEvRKT_RKT0_RT1_RKNSU_6ScalarE = comdat any

$_ZN5Eigen8internal20generic_product_implINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS2_IKNS3_IfLin1ELin1ELi0ELin1ELin1EEELi0ES7_EENS_10DenseShapeESC_Li8EE6evalToINS2_IS9_Li0ES7_EEEEvRT_RKS8_RKSB_ = comdat any

$_ZN5Eigen8internal20generic_product_implINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS2_IKNS3_IfLin1ELin1ELi0ELin1ELin1EEELi0ES7_EENS_10DenseShapeESC_Li8EE13scaleAndAddToINS2_IS9_Li0ES7_EEEEvRT_RKS8_RKSB_RKf = comdat any

$_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS_5BlockIKNS4_IKNS5_IfLin1ELin1ELi0ELin1ELin1EEELi0ES9_EELin1ELi1ELb1EEENSB_INS4_ISC_Li0ES9_EELin1ELi1ELb1EEEEEvRKT_RKT0_RT1_RKNSP_6ScalarE = comdat any

$_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_9TransposeIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEEENS4_IKNS_5BlockIKNS5_IKNS6_IfLin1ELin1ELi1ELin1ELin1EEELi0ESA_EELi1ELin1ELb1EEEEENS4_INSE_INS5_IS7_Li0ESA_EELi1ELin1ELb0EEEEEEEvRKT_RKT0_RT1_RKNSV_6ScalarE = comdat any

$_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIffLi1ElEEvRT2_S3_S3_S2_ = comdat any

$_ZN5Eigen8internal15queryCacheSizesERiS1_S1_ = comdat any

$_ZN5Eigen8internal27queryCacheSizes_intel_codesERiS1_S1_ = comdat any

$_ZN5Eigen8internal29general_matrix_matrix_productIlfLi1ELb0EfLi0ELb0ELi0ELi1EE3runElllPKflS4_lPfllfRNS0_15level3_blockingIffEEPNS0_16GemmParallelInfoIlEE = comdat any

$_ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi8ELi4EDv4_fLi1ELb0ELb0EEclEPfRKS3_llll = comdat any

$_ZN5Eigen8internal13gemm_pack_rhsIflNS0_22const_blas_data_mapperIflLi0EEELi4ELi0ELb0ELb0EEclEPfRKS3_llll = comdat any

$_ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi8ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll = comdat any

$_ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll = comdat any

$_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes = comdat any

$_ZGVZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes = comdat any

@_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes = linkonce_odr hidden local_unnamed_addr global %"struct.Eigen::internal::CacheSizes" zeroinitializer, comdat, align 8
@_ZGVZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes = linkonce_odr hidden global i64 0, comdat, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite16cpu_backend_gemm6detail18GemmImplUsingEigen3RunERKNS0_12MatrixParamsIfEEPKfS6_S8_S6_PfRKNS0_10GemmParamsIffLNS0_18QuantizationFlavorE0EEEPNS_17CpuBackendContextE(%"struct.tflite::cpu_backend_gemm::MatrixParams"* nocapture readonly dereferenceable(20), float*, %"struct.tflite::cpu_backend_gemm::MatrixParams"* nocapture readonly dereferenceable(20), float*, %"struct.tflite::cpu_backend_gemm::MatrixParams"* nocapture readonly dereferenceable(20), float*, %"struct.tflite::cpu_backend_gemm::GemmParams"* nocapture readonly dereferenceable(40), %"class.tflite::CpuBackendContext"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %9 = alloca %"class.Eigen::Map", align 8
  %10 = alloca %"class.Eigen::Block", align 8
  %11 = alloca float, align 4
  %12 = alloca %"class.Eigen::Transpose", align 8
  %13 = alloca %"class.Eigen::Transpose.167", align 8
  %14 = alloca %"class.Eigen::Transpose.174", align 8
  %15 = alloca float, align 4
  %16 = alloca %"class.Eigen::Map.28", align 8
  %17 = alloca %"class.Eigen::Block.50", align 8
  %18 = alloca %"class.Eigen::Product.91", align 8
  %19 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::MatrixParams", %"struct.tflite::cpu_backend_gemm::MatrixParams"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::MatrixParams", %"struct.tflite::cpu_backend_gemm::MatrixParams"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::MatrixParams", %"struct.tflite::cpu_backend_gemm::MatrixParams"* %2, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::MatrixParams", %"struct.tflite::cpu_backend_gemm::MatrixParams"* %2, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = ptrtoint float* %3 to i64
  %32 = bitcast %"class.Eigen::Map.28"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %32) #11
  %33 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %16, i64 0, i32 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %16, i64 0, i32 0, i32 0, i32 1, i32 0
  %35 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %16, i64 0, i32 0, i32 0, i32 2, i32 0
  %36 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::MatrixParams", %"struct.tflite::cpu_backend_gemm::MatrixParams"* %4, i64 0, i32 1
  %37 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %16, i64 0, i32 1, i32 0, i32 0
  %38 = bitcast i8* %37 to i64*
  store i64 -6148914691236517206, i64* %38, align 8
  %39 = load i32, i32* %36, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::MatrixParams", %"struct.tflite::cpu_backend_gemm::MatrixParams"* %4, i64 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = sext i32 %42 to i64
  store float* %5, float** %33, align 8
  store i64 %40, i64* %34, align 8
  store i64 %43, i64* %35, align 8
  %44 = icmp eq i32 %29, 1
  %45 = ptrtoint float* %5 to i64
  br i1 %44, label %46, label %114

46:                                               ; preds = %8
  %47 = bitcast %"class.Eigen::Block.50"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %47) #11
  %48 = bitcast %"class.Eigen::Block.50"* %17 to i64*
  store i64 %45, i64* %48, align 8, !alias.scope !2
  %49 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %40, i64* %49, align 8, !alias.scope !2
  %50 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %17, i64 0, i32 0, i32 0, i32 2
  %51 = bitcast %"class.Eigen::Map.28"* %50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* nonnull align 8 %32, i64 24, i1 false) #11
  %52 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %17, i64 0, i32 0, i32 0, i32 3, i32 0
  %53 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %17, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 1, i32 0
  %54 = bitcast i64* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 16, i1 false)
  %55 = load i64, i64* %53, align 8, !alias.scope !2
  %56 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %17, i64 0, i32 0, i32 0, i32 5
  store i64 %55, i64* %56, align 8, !alias.scope !2
  %57 = and i64 %45, 3
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %65

59:                                               ; preds = %46
  %60 = lshr i64 %45, 2
  %61 = sub nsw i64 0, %60
  %62 = and i64 %61, 3
  %63 = icmp slt i64 %62, %40
  %64 = select i1 %63, i64 %62, i64 %40
  br label %65

65:                                               ; preds = %59, %46
  %66 = phi i64 [ %64, %59 ], [ %40, %46 ]
  %67 = sub nsw i64 %40, %66
  %68 = sdiv i64 %67, 4
  %69 = shl nsw i64 %68, 2
  %70 = add nsw i64 %69, %66
  %71 = icmp sgt i64 %66, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = bitcast float* %5 to i8*
  %74 = shl nuw nsw i64 %66, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %73, i8 0, i64 %74, i1 false) #11
  br label %75

75:                                               ; preds = %72, %65
  %76 = icmp sgt i64 %67, 3
  br i1 %76, label %77, label %88

77:                                               ; preds = %75
  %78 = getelementptr float, float* %5, i64 %66
  %79 = bitcast float* %78 to i8*
  %80 = add nsw i64 %66, 4
  %81 = icmp sgt i64 %70, %80
  %82 = select i1 %81, i64 %70, i64 %80
  %83 = xor i64 %66, 4611686018427387903
  %84 = add i64 %82, %83
  %85 = lshr i64 %84, 2
  %86 = shl i64 %85, 4
  %87 = add i64 %86, 16
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %79, i8 0, i64 %87, i1 false) #11
  br label %88

88:                                               ; preds = %77, %75
  %89 = icmp slt i64 %70, %40
  br i1 %89, label %90, label %95

90:                                               ; preds = %88
  %91 = getelementptr float, float* %5, i64 %70
  %92 = bitcast float* %91 to i8*
  %93 = sub nsw i64 %67, %69
  %94 = shl nuw i64 %93, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %92, i8 0, i64 %94, i1 false) #11
  br label %95

95:                                               ; preds = %88, %90
  %96 = bitcast float* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %96) #11
  store float 1.000000e+00, float* %11, align 4
  %97 = bitcast %"class.Eigen::Map"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %97) #11
  %98 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %9, i64 0, i32 1, i32 0, i32 0
  %99 = bitcast i8* %98 to i64*
  store i64 -6148914691236517206, i64* %99, align 8
  %100 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %9, i64 0, i32 0, i32 0
  store float* %1, float** %100, align 8
  %101 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %9, i64 0, i32 0, i32 1, i32 0
  store i64 %21, i64* %101, align 8
  %102 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %9, i64 0, i32 0, i32 2, i32 0
  store i64 %24, i64* %102, align 8
  %103 = bitcast %"class.Eigen::Block"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %103) #11
  %104 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %10, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 -86, i64 40, i1 false) #11
  %105 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %3, float** %105, align 8
  %106 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %27, i64* %106, align 8
  %107 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %10, i64 0, i32 0, i32 0, i32 2
  %108 = bitcast %"class.Eigen::Map.20"* %107 to i64*
  store i64 %31, i64* %108, align 8
  %109 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %10, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1, i32 0
  store i64 %27, i64* %109, align 8
  %110 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %10, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0
  store i64 %30, i64* %110, align 8
  %111 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %10, i64 0, i32 0, i32 0, i32 3, i32 0
  %112 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %10, i64 0, i32 0, i32 0, i32 5
  %113 = bitcast i64* %111 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 16, i1 false)
  store i64 %27, i64* %112, align 8
  call void @_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS_5BlockINS4_IKNS5_IfLin1ELin1ELi0ELin1ELin1EEELi0ES9_EELin1ELi1ELb1EEENSB_INS4_ISC_Li0ES9_EELin1ELi1ELb1EEEEEvRKT_RKT0_RT1_RKNSO_6ScalarE(%"class.Eigen::Map"* nonnull dereferenceable(32) %9, %"class.Eigen::Block"* nonnull dereferenceable(80) %10, %"class.Eigen::Block.50"* nonnull dereferenceable(80) %17, float* nonnull dereferenceable(4) %11) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %103) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %97) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %47) #11
  br label %209

114:                                              ; preds = %8
  %115 = icmp eq i32 %20, 1
  br i1 %115, label %116, label %199

116:                                              ; preds = %114
  %117 = ptrtoint float* %1 to i64
  %118 = icmp sgt i32 %42, 0
  br i1 %118, label %119, label %174

119:                                              ; preds = %116
  %120 = add nsw i64 %43, -1
  %121 = and i64 %43, 7
  %122 = icmp ult i64 %120, 7
  br i1 %122, label %162, label %123

123:                                              ; preds = %119
  %124 = sub nsw i64 %43, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %159, %125 ]
  %127 = phi i64 [ %124, %123 ], [ %160, %125 ]
  %128 = mul nsw i64 %126, %40
  %129 = getelementptr inbounds float, float* %5, i64 %128
  %130 = bitcast float* %129 to i32*
  store i32 0, i32* %130, align 4
  %131 = or i64 %126, 1
  %132 = mul nsw i64 %131, %40
  %133 = getelementptr inbounds float, float* %5, i64 %132
  %134 = bitcast float* %133 to i32*
  store i32 0, i32* %134, align 4
  %135 = or i64 %126, 2
  %136 = mul nsw i64 %135, %40
  %137 = getelementptr inbounds float, float* %5, i64 %136
  %138 = bitcast float* %137 to i32*
  store i32 0, i32* %138, align 4
  %139 = or i64 %126, 3
  %140 = mul nsw i64 %139, %40
  %141 = getelementptr inbounds float, float* %5, i64 %140
  %142 = bitcast float* %141 to i32*
  store i32 0, i32* %142, align 4
  %143 = or i64 %126, 4
  %144 = mul nsw i64 %143, %40
  %145 = getelementptr inbounds float, float* %5, i64 %144
  %146 = bitcast float* %145 to i32*
  store i32 0, i32* %146, align 4
  %147 = or i64 %126, 5
  %148 = mul nsw i64 %147, %40
  %149 = getelementptr inbounds float, float* %5, i64 %148
  %150 = bitcast float* %149 to i32*
  store i32 0, i32* %150, align 4
  %151 = or i64 %126, 6
  %152 = mul nsw i64 %151, %40
  %153 = getelementptr inbounds float, float* %5, i64 %152
  %154 = bitcast float* %153 to i32*
  store i32 0, i32* %154, align 4
  %155 = or i64 %126, 7
  %156 = mul nsw i64 %155, %40
  %157 = getelementptr inbounds float, float* %5, i64 %156
  %158 = bitcast float* %157 to i32*
  store i32 0, i32* %158, align 4
  %159 = add nuw nsw i64 %126, 8
  %160 = add i64 %127, -8
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %125

162:                                              ; preds = %125, %119
  %163 = phi i64 [ 0, %119 ], [ %159, %125 ]
  %164 = icmp eq i64 %121, 0
  br i1 %164, label %174, label %165

165:                                              ; preds = %162, %165
  %166 = phi i64 [ %171, %165 ], [ %163, %162 ]
  %167 = phi i64 [ %172, %165 ], [ %121, %162 ]
  %168 = mul nsw i64 %166, %40
  %169 = getelementptr inbounds float, float* %5, i64 %168
  %170 = bitcast float* %169 to i32*
  store i32 0, i32* %170, align 4
  %171 = add nuw nsw i64 %166, 1
  %172 = add i64 %167, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %165, !llvm.loop !5

174:                                              ; preds = %162, %165, %116
  %175 = bitcast float* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %175) #11
  store float 1.000000e+00, float* %15, align 4
  %176 = bitcast %"class.Eigen::Transpose"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %176) #11
  %177 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %177, i8 -86, i64 48, i1 false) #11
  %178 = bitcast %"class.Eigen::Transpose"* %12 to i64*
  store i64 %45, i64* %178, align 8
  %179 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %43, i64* %179, align 8
  %180 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %12, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store float* %5, float** %180, align 8
  %181 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %12, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  store i64 %40, i64* %181, align 8
  %182 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %12, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0
  store i64 %43, i64* %182, align 8
  %183 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %12, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %184 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %12, i64 0, i32 0, i32 0, i32 0, i32 4
  %185 = bitcast i64* %183 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %185, i8 0, i64 16, i1 false)
  store i64 1, i64* %184, align 8
  %186 = bitcast %"class.Eigen::Transpose.167"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %186) #11
  %187 = bitcast %"class.Eigen::Transpose.167"* %13 to i64*
  store i64 %31, i64* %187, align 8
  %188 = getelementptr inbounds %"class.Eigen::Transpose.167", %"class.Eigen::Transpose.167"* %13, i64 0, i32 0, i32 0, i32 1, i32 0
  store i64 %27, i64* %188, align 8
  %189 = getelementptr inbounds %"class.Eigen::Transpose.167", %"class.Eigen::Transpose.167"* %13, i64 0, i32 0, i32 0, i32 2, i32 0
  store i64 %30, i64* %189, align 8
  %190 = bitcast %"class.Eigen::Transpose.174"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %190) #11
  %191 = bitcast %"class.Eigen::Transpose.174"* %14 to i64*
  store i64 %117, i64* %191, align 8, !alias.scope !7
  %192 = getelementptr inbounds %"class.Eigen::Transpose.174", %"class.Eigen::Transpose.174"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %24, i64* %192, align 8, !alias.scope !7
  %193 = getelementptr inbounds %"class.Eigen::Transpose.174", %"class.Eigen::Transpose.174"* %14, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store float* %1, float** %193, align 8
  %194 = getelementptr inbounds %"class.Eigen::Transpose.174", %"class.Eigen::Transpose.174"* %14, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  store i64 %21, i64* %194, align 8
  %195 = getelementptr inbounds %"class.Eigen::Transpose.174", %"class.Eigen::Transpose.174"* %14, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0
  store i64 %24, i64* %195, align 8
  %196 = getelementptr inbounds %"class.Eigen::Transpose.174", %"class.Eigen::Transpose.174"* %14, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %197 = getelementptr inbounds %"class.Eigen::Transpose.174", %"class.Eigen::Transpose.174"* %14, i64 0, i32 0, i32 0, i32 0, i32 4
  %198 = bitcast i64* %196 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %198, i8 0, i64 16, i1 false)
  store i64 %24, i64* %197, align 8
  call void @_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_9TransposeIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEEENS4_IKNS_5BlockINS5_IKNS6_IfLin1ELin1ELi1ELin1ELin1EEELi0ESA_EELi1ELin1ELb1EEEEENS4_INSE_INS5_IS7_Li0ESA_EELi1ELin1ELb0EEEEEEEvRKT_RKT0_RT1_RKNSU_6ScalarE(%"class.Eigen::Transpose.167"* nonnull dereferenceable(32) %13, %"class.Eigen::Transpose.174"* nonnull dereferenceable(80) %14, %"class.Eigen::Transpose"* nonnull dereferenceable(80) %12, float* nonnull dereferenceable(4) %15) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %190) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %186) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %176) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %175) #11
  br label %209

199:                                              ; preds = %114
  %200 = bitcast %"class.Eigen::Product.91"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %200) #11
  %201 = getelementptr inbounds %"class.Eigen::Product.91", %"class.Eigen::Product.91"* %18, i64 0, i32 0, i32 0, i32 0
  store float* %1, float** %201, align 8
  %202 = getelementptr inbounds %"class.Eigen::Product.91", %"class.Eigen::Product.91"* %18, i64 0, i32 0, i32 0, i32 1, i32 0
  store i64 %21, i64* %202, align 8
  %203 = getelementptr inbounds %"class.Eigen::Product.91", %"class.Eigen::Product.91"* %18, i64 0, i32 0, i32 0, i32 2, i32 0
  store i64 %24, i64* %203, align 8
  %204 = getelementptr inbounds %"class.Eigen::Product.91", %"class.Eigen::Product.91"* %18, i64 0, i32 1
  %205 = bitcast %"class.Eigen::Map.20"* %204 to i64*
  store i64 %31, i64* %205, align 8
  %206 = getelementptr inbounds %"class.Eigen::Product.91", %"class.Eigen::Product.91"* %18, i64 0, i32 1, i32 0, i32 1, i32 0
  store i64 %27, i64* %206, align 8
  %207 = getelementptr inbounds %"class.Eigen::Product.91", %"class.Eigen::Product.91"* %18, i64 0, i32 1, i32 0, i32 2, i32 0
  store i64 %30, i64* %207, align 8
  %208 = getelementptr inbounds %"class.Eigen::Product.91", %"class.Eigen::Product.91"* %18, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS2_IKNS3_IfLin1ELin1ELi0ELin1ELin1EEELi0ES7_EENS_10DenseShapeESC_Li8EE6evalToINS2_IS9_Li0ES7_EEEEvRT_RKS8_RKSB_(%"class.Eigen::Map.28"* nonnull dereferenceable(32) %16, %"class.Eigen::Map"* nonnull dereferenceable(32) %208, %"class.Eigen::Map.20"* dereferenceable(32) %204) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %200) #11
  br label %209

209:                                              ; preds = %174, %199, %95
  %210 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::GemmParams", %"struct.tflite::cpu_backend_gemm::GemmParams"* %6, i64 0, i32 4
  %211 = load float*, float** %210, align 8
  %212 = icmp eq float* %211, null
  br i1 %212, label %331, label %213

213:                                              ; preds = %209
  %214 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::GemmParams", %"struct.tflite::cpu_backend_gemm::GemmParams"* %6, i64 0, i32 5
  %215 = load float, float* %214, align 8
  %216 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::GemmParams", %"struct.tflite::cpu_backend_gemm::GemmParams"* %6, i64 0, i32 6
  %217 = load float, float* %216, align 4
  %218 = load i32, i32* %36, align 4
  %219 = load i32, i32* %41, align 4
  %220 = mul nsw i32 %219, %218
  %221 = icmp sgt i32 %220, 0
  br i1 %221, label %222, label %528

222:                                              ; preds = %213
  %223 = icmp sgt i32 %218, 0
  %224 = sext i32 %218 to i64
  %225 = sext i32 %220 to i64
  %226 = zext i32 %218 to i64
  %227 = getelementptr float, float* %211, i64 %226
  %228 = icmp ult i32 %218, 8
  %229 = and i64 %226, 4294967288
  %230 = insertelement <4 x float> undef, float %215, i32 0
  %231 = shufflevector <4 x float> %230, <4 x float> undef, <4 x i32> zeroinitializer
  %232 = insertelement <4 x float> undef, float %215, i32 0
  %233 = shufflevector <4 x float> %232, <4 x float> undef, <4 x i32> zeroinitializer
  %234 = insertelement <4 x float> undef, float %217, i32 0
  %235 = shufflevector <4 x float> %234, <4 x float> undef, <4 x i32> zeroinitializer
  %236 = insertelement <4 x float> undef, float %217, i32 0
  %237 = shufflevector <4 x float> %236, <4 x float> undef, <4 x i32> zeroinitializer
  %238 = icmp eq i64 %229, %226
  %239 = and i64 %226, 1
  %240 = icmp eq i64 %239, 0
  %241 = sub nsw i64 0, %226
  br label %242

242:                                              ; preds = %302, %222
  %243 = phi i64 [ %305, %302 ], [ 0, %222 ]
  %244 = phi i64 [ %303, %302 ], [ 0, %222 ]
  %245 = mul i64 %243, %224
  %246 = getelementptr float, float* %5, i64 %245
  %247 = add i64 %245, %226
  %248 = getelementptr float, float* %5, i64 %247
  br i1 %223, label %249, label %302

249:                                              ; preds = %242
  br i1 %228, label %250, label %268

250:                                              ; preds = %301, %268, %249
  %251 = phi i64 [ 0, %268 ], [ 0, %249 ], [ %229, %301 ]
  %252 = xor i64 %251, -1
  br i1 %240, label %265, label %253

253:                                              ; preds = %250
  %254 = add nsw i64 %251, %244
  %255 = getelementptr inbounds float, float* %5, i64 %254
  %256 = load float, float* %255, align 4
  %257 = getelementptr inbounds float, float* %211, i64 %251
  %258 = load float, float* %257, align 4
  %259 = fadd float %256, %258
  %260 = fcmp olt float %259, %215
  %261 = select i1 %260, float %215, float %259
  %262 = fcmp ogt float %261, %217
  %263 = select i1 %262, float %217, float %261
  store float %263, float* %255, align 4
  %264 = or i64 %251, 1
  br label %265

265:                                              ; preds = %253, %250
  %266 = phi i64 [ %264, %253 ], [ %251, %250 ]
  %267 = icmp eq i64 %252, %241
  br i1 %267, label %302, label %306

268:                                              ; preds = %249
  %269 = icmp ult float* %246, %227
  %270 = icmp ult float* %211, %248
  %271 = and i1 %269, %270
  br i1 %271, label %250, label %272

272:                                              ; preds = %268, %272
  %273 = phi i64 [ %299, %272 ], [ 0, %268 ]
  %274 = add nsw i64 %273, %244
  %275 = getelementptr inbounds float, float* %5, i64 %274
  %276 = bitcast float* %275 to <4 x float>*
  %277 = load <4 x float>, <4 x float>* %276, align 4, !alias.scope !10, !noalias !13
  %278 = getelementptr inbounds float, float* %275, i64 4
  %279 = bitcast float* %278 to <4 x float>*
  %280 = load <4 x float>, <4 x float>* %279, align 4, !alias.scope !10, !noalias !13
  %281 = getelementptr inbounds float, float* %211, i64 %273
  %282 = bitcast float* %281 to <4 x float>*
  %283 = load <4 x float>, <4 x float>* %282, align 4, !alias.scope !13
  %284 = getelementptr inbounds float, float* %281, i64 4
  %285 = bitcast float* %284 to <4 x float>*
  %286 = load <4 x float>, <4 x float>* %285, align 4, !alias.scope !13
  %287 = fadd <4 x float> %277, %283
  %288 = fadd <4 x float> %280, %286
  %289 = fcmp olt <4 x float> %287, %231
  %290 = fcmp olt <4 x float> %288, %233
  %291 = select <4 x i1> %289, <4 x float> %231, <4 x float> %287
  %292 = select <4 x i1> %290, <4 x float> %233, <4 x float> %288
  %293 = fcmp ogt <4 x float> %291, %235
  %294 = fcmp ogt <4 x float> %292, %237
  %295 = select <4 x i1> %293, <4 x float> %235, <4 x float> %291
  %296 = select <4 x i1> %294, <4 x float> %237, <4 x float> %292
  %297 = bitcast float* %275 to <4 x float>*
  store <4 x float> %295, <4 x float>* %297, align 4, !alias.scope !10, !noalias !13
  %298 = bitcast float* %278 to <4 x float>*
  store <4 x float> %296, <4 x float>* %298, align 4, !alias.scope !10, !noalias !13
  %299 = add i64 %273, 8
  %300 = icmp eq i64 %299, %229
  br i1 %300, label %301, label %272, !llvm.loop !15

301:                                              ; preds = %272
  br i1 %238, label %302, label %250

302:                                              ; preds = %265, %306, %301, %242
  %303 = add nsw i64 %244, %224
  %304 = icmp slt i64 %303, %225
  %305 = add i64 %243, 1
  br i1 %304, label %242, label %528

306:                                              ; preds = %265, %306
  %307 = phi i64 [ %329, %306 ], [ %266, %265 ]
  %308 = add nsw i64 %307, %244
  %309 = getelementptr inbounds float, float* %5, i64 %308
  %310 = load float, float* %309, align 4
  %311 = getelementptr inbounds float, float* %211, i64 %307
  %312 = load float, float* %311, align 4
  %313 = fadd float %310, %312
  %314 = fcmp olt float %313, %215
  %315 = select i1 %314, float %215, float %313
  %316 = fcmp ogt float %315, %217
  %317 = select i1 %316, float %217, float %315
  store float %317, float* %309, align 4
  %318 = add nuw nsw i64 %307, 1
  %319 = add nsw i64 %318, %244
  %320 = getelementptr inbounds float, float* %5, i64 %319
  %321 = load float, float* %320, align 4
  %322 = getelementptr inbounds float, float* %211, i64 %318
  %323 = load float, float* %322, align 4
  %324 = fadd float %321, %323
  %325 = fcmp olt float %324, %215
  %326 = select i1 %325, float %215, float %324
  %327 = fcmp ogt float %326, %217
  %328 = select i1 %327, float %217, float %326
  store float %328, float* %320, align 4
  %329 = add nuw nsw i64 %307, 2
  %330 = icmp eq i64 %329, %226
  br i1 %330, label %302, label %306, !llvm.loop !17

331:                                              ; preds = %209
  %332 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::GemmParams", %"struct.tflite::cpu_backend_gemm::GemmParams"* %6, i64 0, i32 6
  %333 = bitcast float* %332 to i32*
  %334 = load i32, i32* %333, align 4, !noalias !18
  %335 = bitcast %"class.Eigen::Map.28"* %16 to i64*
  %336 = load i64, i64* %335, align 8
  %337 = getelementptr inbounds %"struct.tflite::cpu_backend_gemm::GemmParams", %"struct.tflite::cpu_backend_gemm::GemmParams"* %6, i64 0, i32 5
  %338 = bitcast float* %337 to i32*
  %339 = load i32, i32* %338, align 4, !noalias !23
  %340 = load i64, i64* %34, align 8
  %341 = load i64, i64* %35, align 8
  %342 = mul nsw i64 %341, %340
  %343 = and i64 %336, 3
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %345, label %351

345:                                              ; preds = %331
  %346 = lshr i64 %336, 2
  %347 = sub nsw i64 0, %346
  %348 = and i64 %347, 3
  %349 = icmp slt i64 %348, %342
  %350 = select i1 %349, i64 %348, i64 %342
  br label %351

351:                                              ; preds = %345, %331
  %352 = phi i64 [ %350, %345 ], [ %342, %331 ]
  %353 = sub nsw i64 %342, %352
  %354 = sdiv i64 %353, 4
  %355 = shl nsw i64 %354, 2
  %356 = add nsw i64 %355, %352
  %357 = icmp sgt i64 %352, 0
  br i1 %357, label %358, label %453

358:                                              ; preds = %351
  %359 = inttoptr i64 %336 to float*
  %360 = bitcast i32 %334 to float
  %361 = bitcast i32 %339 to float
  %362 = icmp ult i64 %352, 8
  br i1 %362, label %441, label %363

363:                                              ; preds = %358
  %364 = and i64 %352, -8
  %365 = insertelement <4 x float> undef, float %360, i32 0
  %366 = shufflevector <4 x float> %365, <4 x float> undef, <4 x i32> zeroinitializer
  %367 = insertelement <4 x float> undef, float %360, i32 0
  %368 = shufflevector <4 x float> %367, <4 x float> undef, <4 x i32> zeroinitializer
  %369 = insertelement <4 x float> undef, float %361, i32 0
  %370 = shufflevector <4 x float> %369, <4 x float> undef, <4 x i32> zeroinitializer
  %371 = insertelement <4 x float> undef, float %361, i32 0
  %372 = shufflevector <4 x float> %371, <4 x float> undef, <4 x i32> zeroinitializer
  %373 = add i64 %364, -8
  %374 = lshr exact i64 %373, 3
  %375 = add nuw nsw i64 %374, 1
  %376 = and i64 %375, 1
  %377 = icmp eq i64 %373, 0
  br i1 %377, label %419, label %378

378:                                              ; preds = %363
  %379 = sub nuw nsw i64 %375, %376
  br label %380

380:                                              ; preds = %380, %378
  %381 = phi i64 [ 0, %378 ], [ %416, %380 ]
  %382 = phi i64 [ %379, %378 ], [ %417, %380 ]
  %383 = getelementptr inbounds float, float* %359, i64 %381
  %384 = bitcast float* %383 to <4 x float>*
  %385 = load <4 x float>, <4 x float>* %384, align 4
  %386 = getelementptr inbounds float, float* %383, i64 4
  %387 = bitcast float* %386 to <4 x float>*
  %388 = load <4 x float>, <4 x float>* %387, align 4
  %389 = fcmp ogt <4 x float> %385, %366
  %390 = fcmp ogt <4 x float> %388, %368
  %391 = select <4 x i1> %389, <4 x float> %366, <4 x float> %385
  %392 = select <4 x i1> %390, <4 x float> %368, <4 x float> %388
  %393 = fcmp olt <4 x float> %391, %370
  %394 = fcmp olt <4 x float> %392, %372
  %395 = select <4 x i1> %393, <4 x float> %370, <4 x float> %391
  %396 = select <4 x i1> %394, <4 x float> %372, <4 x float> %392
  %397 = bitcast float* %383 to <4 x float>*
  store <4 x float> %395, <4 x float>* %397, align 4
  %398 = bitcast float* %386 to <4 x float>*
  store <4 x float> %396, <4 x float>* %398, align 4
  %399 = or i64 %381, 8
  %400 = getelementptr inbounds float, float* %359, i64 %399
  %401 = bitcast float* %400 to <4 x float>*
  %402 = load <4 x float>, <4 x float>* %401, align 4
  %403 = getelementptr inbounds float, float* %400, i64 4
  %404 = bitcast float* %403 to <4 x float>*
  %405 = load <4 x float>, <4 x float>* %404, align 4
  %406 = fcmp ogt <4 x float> %402, %366
  %407 = fcmp ogt <4 x float> %405, %368
  %408 = select <4 x i1> %406, <4 x float> %366, <4 x float> %402
  %409 = select <4 x i1> %407, <4 x float> %368, <4 x float> %405
  %410 = fcmp olt <4 x float> %408, %370
  %411 = fcmp olt <4 x float> %409, %372
  %412 = select <4 x i1> %410, <4 x float> %370, <4 x float> %408
  %413 = select <4 x i1> %411, <4 x float> %372, <4 x float> %409
  %414 = bitcast float* %400 to <4 x float>*
  store <4 x float> %412, <4 x float>* %414, align 4
  %415 = bitcast float* %403 to <4 x float>*
  store <4 x float> %413, <4 x float>* %415, align 4
  %416 = add i64 %381, 16
  %417 = add i64 %382, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %419, label %380, !llvm.loop !28

419:                                              ; preds = %380, %363
  %420 = phi i64 [ 0, %363 ], [ %416, %380 ]
  %421 = icmp eq i64 %376, 0
  br i1 %421, label %439, label %422

422:                                              ; preds = %419
  %423 = getelementptr inbounds float, float* %359, i64 %420
  %424 = bitcast float* %423 to <4 x float>*
  %425 = load <4 x float>, <4 x float>* %424, align 4
  %426 = getelementptr inbounds float, float* %423, i64 4
  %427 = bitcast float* %426 to <4 x float>*
  %428 = load <4 x float>, <4 x float>* %427, align 4
  %429 = fcmp ogt <4 x float> %425, %366
  %430 = fcmp ogt <4 x float> %428, %368
  %431 = select <4 x i1> %429, <4 x float> %366, <4 x float> %425
  %432 = select <4 x i1> %430, <4 x float> %368, <4 x float> %428
  %433 = fcmp olt <4 x float> %431, %370
  %434 = fcmp olt <4 x float> %432, %372
  %435 = select <4 x i1> %433, <4 x float> %370, <4 x float> %431
  %436 = select <4 x i1> %434, <4 x float> %372, <4 x float> %432
  %437 = bitcast float* %423 to <4 x float>*
  store <4 x float> %435, <4 x float>* %437, align 4
  %438 = bitcast float* %426 to <4 x float>*
  store <4 x float> %436, <4 x float>* %438, align 4
  br label %439

439:                                              ; preds = %419, %422
  %440 = icmp eq i64 %352, %364
  br i1 %440, label %453, label %441

441:                                              ; preds = %439, %358
  %442 = phi i64 [ 0, %358 ], [ %364, %439 ]
  br label %443

443:                                              ; preds = %441, %443
  %444 = phi i64 [ %451, %443 ], [ %442, %441 ]
  %445 = getelementptr inbounds float, float* %359, i64 %444
  %446 = load float, float* %445, align 4
  %447 = fcmp ogt float %446, %360
  %448 = select i1 %447, float %360, float %446
  %449 = fcmp olt float %448, %361
  %450 = select i1 %449, float %361, float %448
  store float %450, float* %445, align 4
  %451 = add nuw nsw i64 %444, 1
  %452 = icmp eq i64 %451, %352
  br i1 %452, label %453, label %443, !llvm.loop !29

453:                                              ; preds = %443, %439, %351
  %454 = icmp sgt i64 %353, 3
  br i1 %454, label %455, label %463

455:                                              ; preds = %453
  %456 = inttoptr i64 %336 to float*
  %457 = bitcast i32 %334 to float
  %458 = insertelement <4 x float> undef, float %457, i32 0
  %459 = shufflevector <4 x float> %458, <4 x float> undef, <4 x i32> zeroinitializer
  %460 = bitcast i32 %339 to float
  %461 = insertelement <4 x float> undef, float %460, i32 0
  %462 = shufflevector <4 x float> %461, <4 x float> undef, <4 x i32> zeroinitializer
  br label %519

463:                                              ; preds = %519, %453
  %464 = icmp slt i64 %356, %342
  br i1 %464, label %465, label %528

465:                                              ; preds = %463
  %466 = inttoptr i64 %336 to float*
  %467 = bitcast i32 %334 to float
  %468 = bitcast i32 %339 to float
  %469 = mul i64 %341, %340
  %470 = sub i64 %469, %352
  %471 = sub i64 %470, %355
  %472 = icmp ult i64 %471, 8
  br i1 %472, label %507, label %473

473:                                              ; preds = %465
  %474 = and i64 %471, -8
  %475 = add i64 %356, %474
  %476 = insertelement <4 x float> undef, float %467, i32 0
  %477 = shufflevector <4 x float> %476, <4 x float> undef, <4 x i32> zeroinitializer
  %478 = insertelement <4 x float> undef, float %467, i32 0
  %479 = shufflevector <4 x float> %478, <4 x float> undef, <4 x i32> zeroinitializer
  %480 = insertelement <4 x float> undef, float %468, i32 0
  %481 = shufflevector <4 x float> %480, <4 x float> undef, <4 x i32> zeroinitializer
  %482 = insertelement <4 x float> undef, float %468, i32 0
  %483 = shufflevector <4 x float> %482, <4 x float> undef, <4 x i32> zeroinitializer
  br label %484

484:                                              ; preds = %484, %473
  %485 = phi i64 [ 0, %473 ], [ %503, %484 ]
  %486 = add i64 %356, %485
  %487 = getelementptr inbounds float, float* %466, i64 %486
  %488 = bitcast float* %487 to <4 x float>*
  %489 = load <4 x float>, <4 x float>* %488, align 4
  %490 = getelementptr inbounds float, float* %487, i64 4
  %491 = bitcast float* %490 to <4 x float>*
  %492 = load <4 x float>, <4 x float>* %491, align 4
  %493 = fcmp ogt <4 x float> %489, %477
  %494 = fcmp ogt <4 x float> %492, %479
  %495 = select <4 x i1> %493, <4 x float> %477, <4 x float> %489
  %496 = select <4 x i1> %494, <4 x float> %479, <4 x float> %492
  %497 = fcmp olt <4 x float> %495, %481
  %498 = fcmp olt <4 x float> %496, %483
  %499 = select <4 x i1> %497, <4 x float> %481, <4 x float> %495
  %500 = select <4 x i1> %498, <4 x float> %483, <4 x float> %496
  %501 = bitcast float* %487 to <4 x float>*
  store <4 x float> %499, <4 x float>* %501, align 4
  %502 = bitcast float* %490 to <4 x float>*
  store <4 x float> %500, <4 x float>* %502, align 4
  %503 = add i64 %485, 8
  %504 = icmp eq i64 %503, %474
  br i1 %504, label %505, label %484, !llvm.loop !31

505:                                              ; preds = %484
  %506 = icmp eq i64 %471, %474
  br i1 %506, label %528, label %507

507:                                              ; preds = %505, %465
  %508 = phi i64 [ %356, %465 ], [ %475, %505 ]
  br label %509

509:                                              ; preds = %507, %509
  %510 = phi i64 [ %517, %509 ], [ %508, %507 ]
  %511 = getelementptr inbounds float, float* %466, i64 %510
  %512 = load float, float* %511, align 4
  %513 = fcmp ogt float %512, %467
  %514 = select i1 %513, float %467, float %512
  %515 = fcmp olt float %514, %468
  %516 = select i1 %515, float %468, float %514
  store float %516, float* %511, align 4
  %517 = add nsw i64 %510, 1
  %518 = icmp eq i64 %517, %342
  br i1 %518, label %528, label %509, !llvm.loop !32

519:                                              ; preds = %519, %455
  %520 = phi i64 [ %526, %519 ], [ %352, %455 ]
  %521 = getelementptr inbounds float, float* %456, i64 %520
  %522 = bitcast float* %521 to <4 x float>*
  %523 = load <4 x float>, <4 x float>* %522, align 1
  %524 = call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %523, <4 x float> %459) #12, !srcloc !33
  %525 = call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %524, <4 x float> %462) #12, !srcloc !34
  store <4 x float> %525, <4 x float>* %522, align 16
  %526 = add nsw i64 %520, 4
  %527 = icmp slt i64 %526, %356
  br i1 %527, label %519, label %463

528:                                              ; preds = %302, %509, %505, %463, %213
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %32) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS_5BlockINS4_IKNS5_IfLin1ELin1ELi0ELin1ELin1EEELi0ES9_EELin1ELi1ELb1EEENSB_INS4_ISC_Li0ES9_EELin1ELi1ELb1EEEEEvRKT_RKT0_RT1_RKNSO_6ScalarE(%"class.Eigen::Map"* dereferenceable(32), %"class.Eigen::Block"* dereferenceable(80), %"class.Eigen::Block.50"* dereferenceable(80), float* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %5 = alloca %"class.Eigen::internal::const_blas_data_mapper", align 8
  %6 = alloca %"class.Eigen::internal::const_blas_data_mapper.128", align 8
  %7 = load float, float* %3, align 4
  %8 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %9, 4611686018427387903
  br i1 %10, label %11, label %13

11:                                               ; preds = %4
  %12 = tail call i8* @_Znwm(i64 -1) #11
  br label %13

13:                                               ; preds = %4, %11
  %14 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load float*, float** %14, align 8
  %16 = icmp eq float* %15, null
  br i1 %16, label %17, label %46

17:                                               ; preds = %13
  %18 = load i64, i64* %8, align 8
  %19 = shl i64 %18, 2
  %20 = icmp ult i64 %19, 131073
  br i1 %20, label %21, label %28

21:                                               ; preds = %17
  %22 = add nuw nsw i64 %19, 63
  %23 = alloca i8, i64 %22, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 %22, i1 false)
  %24 = ptrtoint i8* %23 to i64
  %25 = add i64 %24, 63
  %26 = and i64 %25, -64
  %27 = inttoptr i64 %26 to i8*
  br label %42

28:                                               ; preds = %17
  %29 = add i64 %19, 64
  %30 = tail call noalias i8* @malloc(i64 %29) #11
  %31 = icmp eq i8* %30, null
  br i1 %31, label %40, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i8* %30 to i64
  %34 = add i64 %33, 64
  %35 = and i64 %34, -64
  %36 = inttoptr i64 %35 to i8*
  %37 = inttoptr i64 %35 to i8**
  %38 = getelementptr inbounds i8*, i8** %37, i64 -1
  store i8* %30, i8** %38, align 8
  %39 = icmp eq i64 %35, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %28, %32
  %41 = tail call i8* @_Znwm(i64 -1) #11
  br label %42

42:                                               ; preds = %40, %32, %21
  %43 = phi i8* [ %27, %21 ], [ %36, %32 ], [ null, %40 ]
  %44 = bitcast i8* %43 to float*
  %45 = load float*, float** %14, align 8
  br label %46

46:                                               ; preds = %13, %42
  %47 = phi float* [ %45, %42 ], [ %15, %13 ]
  %48 = phi float* [ %44, %42 ], [ %15, %13 ]
  %49 = load i64, i64* %8, align 8
  %50 = shl i64 %49, 2
  %51 = icmp ult i64 %50, 131073
  %52 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %0, i64 0, i32 0, i32 1, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %0, i64 0, i32 0, i32 2, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"class.Eigen::internal::const_blas_data_mapper"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #11
  %57 = bitcast %"class.Eigen::Map"* %0 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.Eigen::internal::const_blas_data_mapper"* %5 to i64*
  store i64 %58, i64* %59, align 8
  %60 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %5, i64 0, i32 0, i32 1
  store i64 %55, i64* %60, align 8
  %61 = bitcast %"class.Eigen::internal::const_blas_data_mapper.128"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %61) #11
  %62 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %6, i64 0, i32 0, i32 0
  store float* %48, float** %62, align 8
  %63 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %6, i64 0, i32 0, i32 1
  store i64 1, i64* %63, align 8
  %64 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load float*, float** %64, align 8
  call void @_ZN5Eigen8internal29general_matrix_vector_productIlfNS0_22const_blas_data_mapperIflLi1EEELi1ELb0EfNS2_IflLi0EEELb0ELi0EE3runEllRKS3_RKS4_Pflf(i64 %53, i64 %55, %"class.Eigen::internal::const_blas_data_mapper"* nonnull dereferenceable(16) %5, %"class.Eigen::internal::const_blas_data_mapper.128"* nonnull dereferenceable(16) %6, float* %65, i64 1, float %7)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #11
  br i1 %51, label %74, label %66

66:                                               ; preds = %46
  %67 = icmp ne float* %47, null
  %68 = icmp eq float* %48, null
  %69 = or i1 %68, %67
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds float, float* %48, i64 -2
  %72 = bitcast float* %71 to i8**
  %73 = load i8*, i8** %72, align 8
  call void @free(i8* %73) #11
  br label %74

74:                                               ; preds = %46, %66, %70
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal29general_matrix_vector_productIlfNS0_22const_blas_data_mapperIflLi1EEELi1ELb0EfNS2_IflLi0EEELb0ELi0EE3runEllRKS3_RKS4_Pflf(i64, i64, %"class.Eigen::internal::const_blas_data_mapper"* dereferenceable(16), %"class.Eigen::internal::const_blas_data_mapper.128"* dereferenceable(16), float*, i64, float) local_unnamed_addr #3 comdat align 2 {
  %8 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %2, i64 0, i32 0, i32 0
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %2, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = shl i64 %11, 2
  %13 = icmp ugt i64 %12, 32000
  %14 = add nsw i64 %0, -7
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add nsw i64 %0, -3
  %17 = add nsw i64 %0, -1
  %18 = icmp sgt i64 %15, 0
  br i1 %18, label %19, label %42

19:                                               ; preds = %7
  %20 = icmp slt i64 %1, 4
  %21 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %3, i64 0, i32 0, i32 0
  %22 = and i64 %1, -4
  br label %23

23:                                               ; preds = %19, %229
  %24 = phi i64 [ 0, %19 ], [ %286, %229 ]
  br i1 %20, label %113, label %25

25:                                               ; preds = %23
  %26 = load float*, float** %21, align 8
  %27 = mul nsw i64 %24, %11
  %28 = or i64 %24, 1
  %29 = mul nsw i64 %28, %11
  %30 = or i64 %24, 2
  %31 = mul nsw i64 %30, %11
  %32 = or i64 %24, 3
  %33 = mul nsw i64 %32, %11
  %34 = or i64 %24, 4
  %35 = mul nsw i64 %34, %11
  %36 = or i64 %24, 5
  %37 = mul nsw i64 %36, %11
  %38 = or i64 %24, 6
  %39 = mul nsw i64 %38, %11
  %40 = or i64 %24, 7
  %41 = mul nsw i64 %40, %11
  br label %49

42:                                               ; preds = %229, %7
  %43 = phi i64 [ 0, %7 ], [ %286, %229 ]
  %44 = icmp slt i64 %43, %16
  br i1 %44, label %45, label %299

45:                                               ; preds = %42
  %46 = icmp slt i64 %1, 4
  %47 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %3, i64 0, i32 0, i32 0
  %48 = and i64 %1, -4
  br label %288

49:                                               ; preds = %25, %49
  %50 = phi i64 [ 4, %25 ], [ %111, %49 ]
  %51 = phi i64 [ 0, %25 ], [ %50, %49 ]
  %52 = phi <4 x float> [ zeroinitializer, %25 ], [ %68, %49 ]
  %53 = phi <4 x float> [ zeroinitializer, %25 ], [ %74, %49 ]
  %54 = phi <4 x float> [ zeroinitializer, %25 ], [ %80, %49 ]
  %55 = phi <4 x float> [ zeroinitializer, %25 ], [ %86, %49 ]
  %56 = phi <4 x float> [ zeroinitializer, %25 ], [ %92, %49 ]
  %57 = phi <4 x float> [ zeroinitializer, %25 ], [ %98, %49 ]
  %58 = phi <4 x float> [ zeroinitializer, %25 ], [ %104, %49 ]
  %59 = phi <4 x float> [ zeroinitializer, %25 ], [ %110, %49 ]
  %60 = getelementptr inbounds float, float* %26, i64 %51
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 1
  %63 = add nsw i64 %51, %27
  %64 = getelementptr inbounds float, float* %9, i64 %63
  %65 = bitcast float* %64 to <4 x float>*
  %66 = load <4 x float>, <4 x float>* %65, align 1
  %67 = fmul <4 x float> %62, %66
  %68 = fadd <4 x float> %52, %67
  %69 = add nsw i64 %51, %29
  %70 = getelementptr inbounds float, float* %9, i64 %69
  %71 = bitcast float* %70 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 1
  %73 = fmul <4 x float> %62, %72
  %74 = fadd <4 x float> %53, %73
  %75 = add nsw i64 %51, %31
  %76 = getelementptr inbounds float, float* %9, i64 %75
  %77 = bitcast float* %76 to <4 x float>*
  %78 = load <4 x float>, <4 x float>* %77, align 1
  %79 = fmul <4 x float> %62, %78
  %80 = fadd <4 x float> %54, %79
  %81 = add nsw i64 %51, %33
  %82 = getelementptr inbounds float, float* %9, i64 %81
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 1
  %85 = fmul <4 x float> %62, %84
  %86 = fadd <4 x float> %55, %85
  %87 = add nsw i64 %51, %35
  %88 = getelementptr inbounds float, float* %9, i64 %87
  %89 = bitcast float* %88 to <4 x float>*
  %90 = load <4 x float>, <4 x float>* %89, align 1
  %91 = fmul <4 x float> %62, %90
  %92 = fadd <4 x float> %56, %91
  %93 = add nsw i64 %51, %37
  %94 = getelementptr inbounds float, float* %9, i64 %93
  %95 = bitcast float* %94 to <4 x float>*
  %96 = load <4 x float>, <4 x float>* %95, align 1
  %97 = fmul <4 x float> %62, %96
  %98 = fadd <4 x float> %57, %97
  %99 = add nsw i64 %51, %39
  %100 = getelementptr inbounds float, float* %9, i64 %99
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 1
  %103 = fmul <4 x float> %62, %102
  %104 = fadd <4 x float> %58, %103
  %105 = add nsw i64 %51, %41
  %106 = getelementptr inbounds float, float* %9, i64 %105
  %107 = bitcast float* %106 to <4 x float>*
  %108 = load <4 x float>, <4 x float>* %107, align 1
  %109 = fmul <4 x float> %62, %108
  %110 = fadd <4 x float> %59, %109
  %111 = add nuw nsw i64 %50, 4
  %112 = icmp sgt i64 %111, %1
  br i1 %112, label %113, label %49

113:                                              ; preds = %49, %23
  %114 = phi <4 x float> [ zeroinitializer, %23 ], [ %110, %49 ]
  %115 = phi <4 x float> [ zeroinitializer, %23 ], [ %104, %49 ]
  %116 = phi <4 x float> [ zeroinitializer, %23 ], [ %98, %49 ]
  %117 = phi <4 x float> [ zeroinitializer, %23 ], [ %92, %49 ]
  %118 = phi <4 x float> [ zeroinitializer, %23 ], [ %86, %49 ]
  %119 = phi <4 x float> [ zeroinitializer, %23 ], [ %80, %49 ]
  %120 = phi <4 x float> [ zeroinitializer, %23 ], [ %74, %49 ]
  %121 = phi <4 x float> [ zeroinitializer, %23 ], [ %68, %49 ]
  %122 = phi i64 [ 0, %23 ], [ %22, %49 ]
  %123 = shufflevector <4 x float> %121, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %124 = fadd <4 x float> %121, %123
  %125 = shufflevector <4 x float> %120, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %126 = fadd <4 x float> %120, %125
  %127 = shufflevector <4 x float> %119, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %128 = fadd <4 x float> %119, %127
  %129 = shufflevector <4 x float> %128, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = shufflevector <4 x float> %118, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %131 = fadd <4 x float> %118, %130
  %132 = shufflevector <4 x float> %131, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = shufflevector <4 x float> %117, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %134 = fadd <4 x float> %117, %133
  %135 = shufflevector <4 x float> %134, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %136 = shufflevector <4 x float> %116, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %137 = fadd <4 x float> %116, %136
  %138 = shufflevector <4 x float> %137, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = shufflevector <4 x float> %115, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %140 = fadd <4 x float> %115, %139
  %141 = shufflevector <4 x float> %140, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = shufflevector <4 x float> %114, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %143 = fadd <4 x float> %114, %142
  %144 = shufflevector <4 x float> %143, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = shufflevector <4 x float> %124, <4 x float> %126, <8 x i32> <i32 0, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %146 = shufflevector <8 x float> %145, <8 x float> %129, <8 x i32> <i32 0, i32 1, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = shufflevector <8 x float> %146, <8 x float> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = shufflevector <8 x float> %147, <8 x float> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 undef, i32 undef, i32 undef>
  %149 = shufflevector <8 x float> %148, <8 x float> %138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 undef, i32 undef>
  %150 = shufflevector <8 x float> %149, <8 x float> %141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 undef>
  %151 = shufflevector <8 x float> %150, <8 x float> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  %152 = shufflevector <4 x float> %124, <4 x float> %126, <8 x i32> <i32 1, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = shufflevector <8 x float> %152, <8 x float> %129, <8 x i32> <i32 0, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %154 = shufflevector <8 x float> %153, <8 x float> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = shufflevector <8 x float> %154, <8 x float> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 undef, i32 undef, i32 undef>
  %156 = shufflevector <8 x float> %155, <8 x float> %138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 undef, i32 undef>
  %157 = shufflevector <8 x float> %156, <8 x float> %141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 undef>
  %158 = shufflevector <8 x float> %157, <8 x float> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>
  %159 = fadd <8 x float> %151, %158
  %160 = icmp slt i64 %122, %1
  br i1 %160, label %169, label %161

161:                                              ; preds = %113
  %162 = or i64 %24, 1
  %163 = or i64 %24, 2
  %164 = or i64 %24, 3
  %165 = or i64 %24, 4
  %166 = or i64 %24, 5
  %167 = or i64 %24, 6
  %168 = or i64 %24, 7
  br label %229

169:                                              ; preds = %113
  %170 = load float*, float** %21, align 8
  %171 = mul nsw i64 %24, %11
  %172 = or i64 %24, 1
  %173 = mul nsw i64 %172, %11
  %174 = or i64 %24, 2
  %175 = mul nsw i64 %174, %11
  %176 = or i64 %24, 3
  %177 = mul nsw i64 %176, %11
  %178 = or i64 %24, 4
  %179 = mul nsw i64 %178, %11
  %180 = or i64 %24, 5
  %181 = mul nsw i64 %180, %11
  %182 = or i64 %24, 6
  %183 = mul nsw i64 %182, %11
  %184 = or i64 %24, 7
  %185 = mul nsw i64 %184, %11
  br label %186

186:                                              ; preds = %186, %169
  %187 = phi i64 [ %122, %169 ], [ %227, %186 ]
  %188 = phi <8 x float> [ %159, %169 ], [ %226, %186 ]
  %189 = getelementptr inbounds float, float* %170, i64 %187
  %190 = load float, float* %189, align 4
  %191 = add nsw i64 %187, %171
  %192 = getelementptr inbounds float, float* %9, i64 %191
  %193 = load float, float* %192, align 4
  %194 = add nsw i64 %187, %173
  %195 = getelementptr inbounds float, float* %9, i64 %194
  %196 = load float, float* %195, align 4
  %197 = add nsw i64 %187, %175
  %198 = getelementptr inbounds float, float* %9, i64 %197
  %199 = load float, float* %198, align 4
  %200 = add nsw i64 %187, %177
  %201 = getelementptr inbounds float, float* %9, i64 %200
  %202 = load float, float* %201, align 4
  %203 = add nsw i64 %187, %179
  %204 = getelementptr inbounds float, float* %9, i64 %203
  %205 = load float, float* %204, align 4
  %206 = add nsw i64 %187, %181
  %207 = getelementptr inbounds float, float* %9, i64 %206
  %208 = load float, float* %207, align 4
  %209 = add nsw i64 %187, %183
  %210 = getelementptr inbounds float, float* %9, i64 %209
  %211 = load float, float* %210, align 4
  %212 = add nsw i64 %187, %185
  %213 = getelementptr inbounds float, float* %9, i64 %212
  %214 = load float, float* %213, align 4
  %215 = insertelement <8 x float> undef, float %190, i32 0
  %216 = shufflevector <8 x float> %215, <8 x float> undef, <8 x i32> zeroinitializer
  %217 = insertelement <8 x float> undef, float %193, i32 0
  %218 = insertelement <8 x float> %217, float %196, i32 1
  %219 = insertelement <8 x float> %218, float %199, i32 2
  %220 = insertelement <8 x float> %219, float %202, i32 3
  %221 = insertelement <8 x float> %220, float %205, i32 4
  %222 = insertelement <8 x float> %221, float %208, i32 5
  %223 = insertelement <8 x float> %222, float %211, i32 6
  %224 = insertelement <8 x float> %223, float %214, i32 7
  %225 = fmul <8 x float> %216, %224
  %226 = fadd <8 x float> %188, %225
  %227 = add nuw nsw i64 %187, 1
  %228 = icmp eq i64 %227, %1
  br i1 %228, label %229, label %186

229:                                              ; preds = %186, %161
  %230 = phi i64 [ %168, %161 ], [ %184, %186 ]
  %231 = phi i64 [ %167, %161 ], [ %182, %186 ]
  %232 = phi i64 [ %166, %161 ], [ %180, %186 ]
  %233 = phi i64 [ %165, %161 ], [ %178, %186 ]
  %234 = phi i64 [ %164, %161 ], [ %176, %186 ]
  %235 = phi i64 [ %163, %161 ], [ %174, %186 ]
  %236 = phi i64 [ %162, %161 ], [ %172, %186 ]
  %237 = phi <8 x float> [ %159, %161 ], [ %226, %186 ]
  %238 = extractelement <8 x float> %237, i32 0
  %239 = fmul float %238, %6
  %240 = mul nsw i64 %24, %5
  %241 = getelementptr inbounds float, float* %4, i64 %240
  %242 = load float, float* %241, align 4
  %243 = fadd float %239, %242
  store float %243, float* %241, align 4
  %244 = extractelement <8 x float> %237, i32 1
  %245 = fmul float %244, %6
  %246 = mul nsw i64 %236, %5
  %247 = getelementptr inbounds float, float* %4, i64 %246
  %248 = load float, float* %247, align 4
  %249 = fadd float %245, %248
  store float %249, float* %247, align 4
  %250 = extractelement <8 x float> %237, i32 2
  %251 = fmul float %250, %6
  %252 = mul nsw i64 %235, %5
  %253 = getelementptr inbounds float, float* %4, i64 %252
  %254 = load float, float* %253, align 4
  %255 = fadd float %251, %254
  store float %255, float* %253, align 4
  %256 = extractelement <8 x float> %237, i32 3
  %257 = fmul float %256, %6
  %258 = mul nsw i64 %234, %5
  %259 = getelementptr inbounds float, float* %4, i64 %258
  %260 = load float, float* %259, align 4
  %261 = fadd float %257, %260
  store float %261, float* %259, align 4
  %262 = extractelement <8 x float> %237, i32 4
  %263 = fmul float %262, %6
  %264 = mul nsw i64 %233, %5
  %265 = getelementptr inbounds float, float* %4, i64 %264
  %266 = load float, float* %265, align 4
  %267 = fadd float %263, %266
  store float %267, float* %265, align 4
  %268 = extractelement <8 x float> %237, i32 5
  %269 = fmul float %268, %6
  %270 = mul nsw i64 %232, %5
  %271 = getelementptr inbounds float, float* %4, i64 %270
  %272 = load float, float* %271, align 4
  %273 = fadd float %269, %272
  store float %273, float* %271, align 4
  %274 = extractelement <8 x float> %237, i32 6
  %275 = fmul float %274, %6
  %276 = mul nsw i64 %231, %5
  %277 = getelementptr inbounds float, float* %4, i64 %276
  %278 = load float, float* %277, align 4
  %279 = fadd float %275, %278
  store float %279, float* %277, align 4
  %280 = extractelement <8 x float> %237, i32 7
  %281 = fmul float %280, %6
  %282 = mul nsw i64 %230, %5
  %283 = getelementptr inbounds float, float* %4, i64 %282
  %284 = load float, float* %283, align 4
  %285 = fadd float %281, %284
  store float %285, float* %283, align 4
  %286 = add nuw nsw i64 %24, 8
  %287 = icmp slt i64 %286, %15
  br i1 %287, label %23, label %42

288:                                              ; preds = %45, %414
  %289 = phi i64 [ %43, %45 ], [ %443, %414 ]
  br i1 %46, label %352, label %290

290:                                              ; preds = %288
  %291 = load float*, float** %47, align 8
  %292 = mul nsw i64 %289, %11
  %293 = or i64 %289, 1
  %294 = mul nsw i64 %293, %11
  %295 = or i64 %289, 2
  %296 = mul nsw i64 %295, %11
  %297 = or i64 %289, 3
  %298 = mul nsw i64 %297, %11
  br label %316

299:                                              ; preds = %414, %42
  %300 = phi i64 [ %43, %42 ], [ %443, %414 ]
  %301 = icmp slt i64 %300, %17
  br i1 %301, label %302, label %452

302:                                              ; preds = %299
  %303 = icmp slt i64 %1, 4
  %304 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %3, i64 0, i32 0, i32 0
  %305 = and i64 %1, -4
  %306 = add i64 %1, -4
  %307 = lshr i64 %306, 2
  %308 = add nuw nsw i64 %307, 1
  %309 = and i64 %308, 1
  %310 = icmp eq i64 %307, 0
  %311 = sub nuw nsw i64 %308, %309
  %312 = icmp eq i64 %309, 0
  %313 = and i64 %1, 1
  %314 = icmp eq i64 %313, 0
  %315 = sub i64 0, %1
  br label %445

316:                                              ; preds = %290, %316
  %317 = phi i64 [ 4, %290 ], [ %350, %316 ]
  %318 = phi i64 [ 0, %290 ], [ %317, %316 ]
  %319 = phi <4 x float> [ zeroinitializer, %290 ], [ %331, %316 ]
  %320 = phi <4 x float> [ zeroinitializer, %290 ], [ %337, %316 ]
  %321 = phi <4 x float> [ zeroinitializer, %290 ], [ %343, %316 ]
  %322 = phi <4 x float> [ zeroinitializer, %290 ], [ %349, %316 ]
  %323 = getelementptr inbounds float, float* %291, i64 %318
  %324 = bitcast float* %323 to <4 x float>*
  %325 = load <4 x float>, <4 x float>* %324, align 1
  %326 = add nsw i64 %318, %292
  %327 = getelementptr inbounds float, float* %9, i64 %326
  %328 = bitcast float* %327 to <4 x float>*
  %329 = load <4 x float>, <4 x float>* %328, align 1
  %330 = fmul <4 x float> %325, %329
  %331 = fadd <4 x float> %319, %330
  %332 = add nsw i64 %318, %294
  %333 = getelementptr inbounds float, float* %9, i64 %332
  %334 = bitcast float* %333 to <4 x float>*
  %335 = load <4 x float>, <4 x float>* %334, align 1
  %336 = fmul <4 x float> %325, %335
  %337 = fadd <4 x float> %320, %336
  %338 = add nsw i64 %318, %296
  %339 = getelementptr inbounds float, float* %9, i64 %338
  %340 = bitcast float* %339 to <4 x float>*
  %341 = load <4 x float>, <4 x float>* %340, align 1
  %342 = fmul <4 x float> %325, %341
  %343 = fadd <4 x float> %321, %342
  %344 = add nsw i64 %318, %298
  %345 = getelementptr inbounds float, float* %9, i64 %344
  %346 = bitcast float* %345 to <4 x float>*
  %347 = load <4 x float>, <4 x float>* %346, align 1
  %348 = fmul <4 x float> %325, %347
  %349 = fadd <4 x float> %322, %348
  %350 = add nuw nsw i64 %317, 4
  %351 = icmp sgt i64 %350, %1
  br i1 %351, label %352, label %316

352:                                              ; preds = %316, %288
  %353 = phi <4 x float> [ zeroinitializer, %288 ], [ %349, %316 ]
  %354 = phi <4 x float> [ zeroinitializer, %288 ], [ %343, %316 ]
  %355 = phi <4 x float> [ zeroinitializer, %288 ], [ %337, %316 ]
  %356 = phi <4 x float> [ zeroinitializer, %288 ], [ %331, %316 ]
  %357 = phi i64 [ 0, %288 ], [ %48, %316 ]
  %358 = shufflevector <4 x float> %356, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %359 = fadd <4 x float> %356, %358
  %360 = shufflevector <4 x float> %355, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %361 = fadd <4 x float> %355, %360
  %362 = shufflevector <4 x float> %354, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %363 = fadd <4 x float> %354, %362
  %364 = shufflevector <4 x float> %353, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %365 = fadd <4 x float> %353, %364
  %366 = shufflevector <4 x float> %359, <4 x float> %361, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %367 = shufflevector <4 x float> %366, <4 x float> %363, <4 x i32> <i32 0, i32 1, i32 4, i32 undef>
  %368 = shufflevector <4 x float> %367, <4 x float> %365, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %369 = shufflevector <4 x float> %359, <4 x float> %361, <4 x i32> <i32 1, i32 5, i32 undef, i32 undef>
  %370 = shufflevector <4 x float> %369, <4 x float> %363, <4 x i32> <i32 0, i32 1, i32 5, i32 undef>
  %371 = shufflevector <4 x float> %370, <4 x float> %365, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %372 = fadd <4 x float> %368, %371
  %373 = icmp slt i64 %357, %1
  br i1 %373, label %378, label %374

374:                                              ; preds = %352
  %375 = or i64 %289, 1
  %376 = or i64 %289, 2
  %377 = or i64 %289, 3
  br label %414

378:                                              ; preds = %352
  %379 = load float*, float** %47, align 8
  %380 = mul nsw i64 %289, %11
  %381 = or i64 %289, 1
  %382 = mul nsw i64 %381, %11
  %383 = or i64 %289, 2
  %384 = mul nsw i64 %383, %11
  %385 = or i64 %289, 3
  %386 = mul nsw i64 %385, %11
  br label %387

387:                                              ; preds = %387, %378
  %388 = phi i64 [ %357, %378 ], [ %412, %387 ]
  %389 = phi <4 x float> [ %372, %378 ], [ %411, %387 ]
  %390 = getelementptr inbounds float, float* %379, i64 %388
  %391 = load float, float* %390, align 4
  %392 = add nsw i64 %388, %380
  %393 = getelementptr inbounds float, float* %9, i64 %392
  %394 = load float, float* %393, align 4
  %395 = add nsw i64 %388, %382
  %396 = getelementptr inbounds float, float* %9, i64 %395
  %397 = load float, float* %396, align 4
  %398 = add nsw i64 %388, %384
  %399 = getelementptr inbounds float, float* %9, i64 %398
  %400 = load float, float* %399, align 4
  %401 = add nsw i64 %388, %386
  %402 = getelementptr inbounds float, float* %9, i64 %401
  %403 = load float, float* %402, align 4
  %404 = insertelement <4 x float> undef, float %391, i32 0
  %405 = shufflevector <4 x float> %404, <4 x float> undef, <4 x i32> zeroinitializer
  %406 = insertelement <4 x float> undef, float %394, i32 0
  %407 = insertelement <4 x float> %406, float %397, i32 1
  %408 = insertelement <4 x float> %407, float %400, i32 2
  %409 = insertelement <4 x float> %408, float %403, i32 3
  %410 = fmul <4 x float> %405, %409
  %411 = fadd <4 x float> %389, %410
  %412 = add nuw nsw i64 %388, 1
  %413 = icmp eq i64 %412, %1
  br i1 %413, label %414, label %387

414:                                              ; preds = %387, %374
  %415 = phi i64 [ %377, %374 ], [ %385, %387 ]
  %416 = phi i64 [ %376, %374 ], [ %383, %387 ]
  %417 = phi i64 [ %375, %374 ], [ %381, %387 ]
  %418 = phi <4 x float> [ %372, %374 ], [ %411, %387 ]
  %419 = extractelement <4 x float> %418, i32 0
  %420 = fmul float %419, %6
  %421 = mul nsw i64 %289, %5
  %422 = getelementptr inbounds float, float* %4, i64 %421
  %423 = load float, float* %422, align 4
  %424 = fadd float %420, %423
  store float %424, float* %422, align 4
  %425 = extractelement <4 x float> %418, i32 1
  %426 = fmul float %425, %6
  %427 = mul nsw i64 %417, %5
  %428 = getelementptr inbounds float, float* %4, i64 %427
  %429 = load float, float* %428, align 4
  %430 = fadd float %426, %429
  store float %430, float* %428, align 4
  %431 = extractelement <4 x float> %418, i32 2
  %432 = fmul float %431, %6
  %433 = mul nsw i64 %416, %5
  %434 = getelementptr inbounds float, float* %4, i64 %433
  %435 = load float, float* %434, align 4
  %436 = fadd float %432, %435
  store float %436, float* %434, align 4
  %437 = extractelement <4 x float> %418, i32 3
  %438 = fmul float %437, %6
  %439 = mul nsw i64 %415, %5
  %440 = getelementptr inbounds float, float* %4, i64 %439
  %441 = load float, float* %440, align 4
  %442 = fadd float %438, %441
  store float %442, float* %440, align 4
  %443 = add nuw nsw i64 %289, 4
  %444 = icmp slt i64 %443, %16
  br i1 %444, label %288, label %299

445:                                              ; preds = %302, %605
  %446 = phi i64 [ %300, %302 ], [ %620, %605 ]
  br i1 %303, label %530, label %447

447:                                              ; preds = %445
  %448 = load float*, float** %304, align 8
  %449 = mul nsw i64 %446, %11
  %450 = or i64 %446, 1
  %451 = mul nsw i64 %450, %11
  br i1 %310, label %508, label %468

452:                                              ; preds = %605, %299
  %453 = phi i64 [ %300, %299 ], [ %620, %605 ]
  %454 = icmp slt i64 %453, %0
  br i1 %454, label %455, label %774

455:                                              ; preds = %452
  %456 = icmp slt i64 %1, 4
  %457 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %3, i64 0, i32 0, i32 0
  %458 = and i64 %1, -4
  %459 = add i64 %1, -4
  %460 = lshr i64 %459, 2
  %461 = add nuw nsw i64 %460, 1
  %462 = and i64 %461, 3
  %463 = icmp ult i64 %459, 12
  %464 = sub nsw i64 %461, %462
  %465 = icmp eq i64 %462, 0
  %466 = and i64 %1, 3
  %467 = icmp eq i64 %466, 0
  br label %622

468:                                              ; preds = %447, %468
  %469 = phi i64 [ %505, %468 ], [ 4, %447 ]
  %470 = phi i64 [ %489, %468 ], [ 0, %447 ]
  %471 = phi <4 x float> [ %504, %468 ], [ zeroinitializer, %447 ]
  %472 = phi <4 x float> [ %498, %468 ], [ zeroinitializer, %447 ]
  %473 = phi i64 [ %506, %468 ], [ %311, %447 ]
  %474 = getelementptr inbounds float, float* %448, i64 %470
  %475 = bitcast float* %474 to <4 x float>*
  %476 = load <4 x float>, <4 x float>* %475, align 1
  %477 = add nsw i64 %470, %449
  %478 = getelementptr inbounds float, float* %9, i64 %477
  %479 = bitcast float* %478 to <4 x float>*
  %480 = load <4 x float>, <4 x float>* %479, align 1
  %481 = fmul <4 x float> %476, %480
  %482 = fadd <4 x float> %472, %481
  %483 = add nsw i64 %470, %451
  %484 = getelementptr inbounds float, float* %9, i64 %483
  %485 = bitcast float* %484 to <4 x float>*
  %486 = load <4 x float>, <4 x float>* %485, align 1
  %487 = fmul <4 x float> %476, %486
  %488 = fadd <4 x float> %471, %487
  %489 = add nuw nsw i64 %469, 4
  %490 = getelementptr inbounds float, float* %448, i64 %469
  %491 = bitcast float* %490 to <4 x float>*
  %492 = load <4 x float>, <4 x float>* %491, align 1
  %493 = add nsw i64 %469, %449
  %494 = getelementptr inbounds float, float* %9, i64 %493
  %495 = bitcast float* %494 to <4 x float>*
  %496 = load <4 x float>, <4 x float>* %495, align 1
  %497 = fmul <4 x float> %492, %496
  %498 = fadd <4 x float> %482, %497
  %499 = add nsw i64 %469, %451
  %500 = getelementptr inbounds float, float* %9, i64 %499
  %501 = bitcast float* %500 to <4 x float>*
  %502 = load <4 x float>, <4 x float>* %501, align 1
  %503 = fmul <4 x float> %492, %502
  %504 = fadd <4 x float> %488, %503
  %505 = add nuw nsw i64 %469, 8
  %506 = add i64 %473, -2
  %507 = icmp eq i64 %506, 0
  br i1 %507, label %508, label %468

508:                                              ; preds = %468, %447
  %509 = phi <4 x float> [ undef, %447 ], [ %498, %468 ]
  %510 = phi <4 x float> [ undef, %447 ], [ %504, %468 ]
  %511 = phi i64 [ 0, %447 ], [ %489, %468 ]
  %512 = phi <4 x float> [ zeroinitializer, %447 ], [ %504, %468 ]
  %513 = phi <4 x float> [ zeroinitializer, %447 ], [ %498, %468 ]
  br i1 %312, label %530, label %514

514:                                              ; preds = %508
  %515 = getelementptr inbounds float, float* %448, i64 %511
  %516 = bitcast float* %515 to <4 x float>*
  %517 = load <4 x float>, <4 x float>* %516, align 1
  %518 = add nsw i64 %511, %451
  %519 = getelementptr inbounds float, float* %9, i64 %518
  %520 = bitcast float* %519 to <4 x float>*
  %521 = load <4 x float>, <4 x float>* %520, align 1
  %522 = fmul <4 x float> %517, %521
  %523 = fadd <4 x float> %512, %522
  %524 = add nsw i64 %511, %449
  %525 = getelementptr inbounds float, float* %9, i64 %524
  %526 = bitcast float* %525 to <4 x float>*
  %527 = load <4 x float>, <4 x float>* %526, align 1
  %528 = fmul <4 x float> %517, %527
  %529 = fadd <4 x float> %513, %528
  br label %530

530:                                              ; preds = %514, %508, %445
  %531 = phi <4 x float> [ zeroinitializer, %445 ], [ %509, %508 ], [ %529, %514 ]
  %532 = phi <4 x float> [ zeroinitializer, %445 ], [ %510, %508 ], [ %523, %514 ]
  %533 = phi i64 [ 0, %445 ], [ %305, %508 ], [ %305, %514 ]
  %534 = shufflevector <4 x float> %531, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %535 = fadd <4 x float> %531, %534
  %536 = shufflevector <4 x float> %532, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %537 = fadd <4 x float> %532, %536
  %538 = shufflevector <4 x float> %535, <4 x float> %537, <2 x i32> <i32 0, i32 4>
  %539 = shufflevector <4 x float> %535, <4 x float> %537, <2 x i32> <i32 1, i32 5>
  %540 = fadd <2 x float> %538, %539
  %541 = icmp slt i64 %533, %1
  br i1 %541, label %544, label %542

542:                                              ; preds = %530
  %543 = or i64 %446, 1
  br label %605

544:                                              ; preds = %530
  %545 = load float*, float** %304, align 8
  %546 = mul nsw i64 %446, %11
  %547 = or i64 %446, 1
  %548 = mul nsw i64 %547, %11
  %549 = xor i64 %533, -1
  br i1 %314, label %566, label %550

550:                                              ; preds = %544
  %551 = getelementptr inbounds float, float* %545, i64 %533
  %552 = load float, float* %551, align 4
  %553 = add nsw i64 %533, %546
  %554 = getelementptr inbounds float, float* %9, i64 %553
  %555 = load float, float* %554, align 4
  %556 = add nsw i64 %533, %548
  %557 = getelementptr inbounds float, float* %9, i64 %556
  %558 = load float, float* %557, align 4
  %559 = insertelement <2 x float> undef, float %552, i32 0
  %560 = shufflevector <2 x float> %559, <2 x float> undef, <2 x i32> zeroinitializer
  %561 = insertelement <2 x float> undef, float %555, i32 0
  %562 = insertelement <2 x float> %561, float %558, i32 1
  %563 = fmul <2 x float> %560, %562
  %564 = fadd <2 x float> %540, %563
  %565 = or i64 %533, 1
  br label %566

566:                                              ; preds = %550, %544
  %567 = phi <2 x float> [ %564, %550 ], [ undef, %544 ]
  %568 = phi i64 [ %565, %550 ], [ %533, %544 ]
  %569 = phi <2 x float> [ %564, %550 ], [ %540, %544 ]
  %570 = icmp eq i64 %549, %315
  br i1 %570, label %605, label %571

571:                                              ; preds = %566, %571
  %572 = phi i64 [ %603, %571 ], [ %568, %566 ]
  %573 = phi <2 x float> [ %602, %571 ], [ %569, %566 ]
  %574 = getelementptr inbounds float, float* %545, i64 %572
  %575 = load float, float* %574, align 4
  %576 = add nsw i64 %572, %546
  %577 = getelementptr inbounds float, float* %9, i64 %576
  %578 = load float, float* %577, align 4
  %579 = add nsw i64 %572, %548
  %580 = getelementptr inbounds float, float* %9, i64 %579
  %581 = load float, float* %580, align 4
  %582 = insertelement <2 x float> undef, float %575, i32 0
  %583 = shufflevector <2 x float> %582, <2 x float> undef, <2 x i32> zeroinitializer
  %584 = insertelement <2 x float> undef, float %578, i32 0
  %585 = insertelement <2 x float> %584, float %581, i32 1
  %586 = fmul <2 x float> %583, %585
  %587 = fadd <2 x float> %573, %586
  %588 = add nuw nsw i64 %572, 1
  %589 = getelementptr inbounds float, float* %545, i64 %588
  %590 = load float, float* %589, align 4
  %591 = add nsw i64 %588, %546
  %592 = getelementptr inbounds float, float* %9, i64 %591
  %593 = load float, float* %592, align 4
  %594 = add nsw i64 %588, %548
  %595 = getelementptr inbounds float, float* %9, i64 %594
  %596 = load float, float* %595, align 4
  %597 = insertelement <2 x float> undef, float %590, i32 0
  %598 = shufflevector <2 x float> %597, <2 x float> undef, <2 x i32> zeroinitializer
  %599 = insertelement <2 x float> undef, float %593, i32 0
  %600 = insertelement <2 x float> %599, float %596, i32 1
  %601 = fmul <2 x float> %598, %600
  %602 = fadd <2 x float> %587, %601
  %603 = add nuw nsw i64 %572, 2
  %604 = icmp eq i64 %603, %1
  br i1 %604, label %605, label %571

605:                                              ; preds = %566, %571, %542
  %606 = phi i64 [ %543, %542 ], [ %547, %571 ], [ %547, %566 ]
  %607 = phi <2 x float> [ %540, %542 ], [ %567, %566 ], [ %602, %571 ]
  %608 = extractelement <2 x float> %607, i32 0
  %609 = fmul float %608, %6
  %610 = mul nsw i64 %446, %5
  %611 = getelementptr inbounds float, float* %4, i64 %610
  %612 = load float, float* %611, align 4
  %613 = fadd float %609, %612
  store float %613, float* %611, align 4
  %614 = extractelement <2 x float> %607, i32 1
  %615 = fmul float %614, %6
  %616 = mul nsw i64 %606, %5
  %617 = getelementptr inbounds float, float* %4, i64 %616
  %618 = load float, float* %617, align 4
  %619 = fadd float %615, %618
  store float %619, float* %617, align 4
  %620 = add nuw nsw i64 %446, 2
  %621 = icmp slt i64 %620, %17
  br i1 %621, label %445, label %452

622:                                              ; preds = %765, %455
  %623 = phi i64 [ %453, %455 ], [ %772, %765 ]
  br i1 %456, label %696, label %624

624:                                              ; preds = %622
  %625 = load float*, float** %457, align 8
  %626 = mul nsw i64 %623, %11
  br i1 %463, label %674, label %627

627:                                              ; preds = %624, %627
  %628 = phi i64 [ %671, %627 ], [ 4, %624 ]
  %629 = phi i64 [ %661, %627 ], [ 0, %624 ]
  %630 = phi <4 x float> [ %670, %627 ], [ zeroinitializer, %624 ]
  %631 = phi i64 [ %672, %627 ], [ %464, %624 ]
  %632 = getelementptr inbounds float, float* %625, i64 %629
  %633 = bitcast float* %632 to <4 x float>*
  %634 = load <4 x float>, <4 x float>* %633, align 1
  %635 = add nsw i64 %629, %626
  %636 = getelementptr inbounds float, float* %9, i64 %635
  %637 = bitcast float* %636 to <4 x float>*
  %638 = load <4 x float>, <4 x float>* %637, align 1
  %639 = fmul <4 x float> %634, %638
  %640 = fadd <4 x float> %630, %639
  %641 = add nuw nsw i64 %628, 4
  %642 = getelementptr inbounds float, float* %625, i64 %628
  %643 = bitcast float* %642 to <4 x float>*
  %644 = load <4 x float>, <4 x float>* %643, align 1
  %645 = add nsw i64 %628, %626
  %646 = getelementptr inbounds float, float* %9, i64 %645
  %647 = bitcast float* %646 to <4 x float>*
  %648 = load <4 x float>, <4 x float>* %647, align 1
  %649 = fmul <4 x float> %644, %648
  %650 = fadd <4 x float> %640, %649
  %651 = add nuw nsw i64 %628, 8
  %652 = getelementptr inbounds float, float* %625, i64 %641
  %653 = bitcast float* %652 to <4 x float>*
  %654 = load <4 x float>, <4 x float>* %653, align 1
  %655 = add nsw i64 %641, %626
  %656 = getelementptr inbounds float, float* %9, i64 %655
  %657 = bitcast float* %656 to <4 x float>*
  %658 = load <4 x float>, <4 x float>* %657, align 1
  %659 = fmul <4 x float> %654, %658
  %660 = fadd <4 x float> %650, %659
  %661 = add nuw nsw i64 %628, 12
  %662 = getelementptr inbounds float, float* %625, i64 %651
  %663 = bitcast float* %662 to <4 x float>*
  %664 = load <4 x float>, <4 x float>* %663, align 1
  %665 = add nsw i64 %651, %626
  %666 = getelementptr inbounds float, float* %9, i64 %665
  %667 = bitcast float* %666 to <4 x float>*
  %668 = load <4 x float>, <4 x float>* %667, align 1
  %669 = fmul <4 x float> %664, %668
  %670 = fadd <4 x float> %660, %669
  %671 = add nuw nsw i64 %628, 16
  %672 = add i64 %631, -4
  %673 = icmp eq i64 %672, 0
  br i1 %673, label %674, label %627

674:                                              ; preds = %627, %624
  %675 = phi <4 x float> [ undef, %624 ], [ %670, %627 ]
  %676 = phi i64 [ 4, %624 ], [ %671, %627 ]
  %677 = phi i64 [ 0, %624 ], [ %661, %627 ]
  %678 = phi <4 x float> [ zeroinitializer, %624 ], [ %670, %627 ]
  br i1 %465, label %696, label %679

679:                                              ; preds = %674, %679
  %680 = phi i64 [ %693, %679 ], [ %676, %674 ]
  %681 = phi i64 [ %680, %679 ], [ %677, %674 ]
  %682 = phi <4 x float> [ %692, %679 ], [ %678, %674 ]
  %683 = phi i64 [ %694, %679 ], [ %462, %674 ]
  %684 = getelementptr inbounds float, float* %625, i64 %681
  %685 = bitcast float* %684 to <4 x float>*
  %686 = load <4 x float>, <4 x float>* %685, align 1
  %687 = add nsw i64 %681, %626
  %688 = getelementptr inbounds float, float* %9, i64 %687
  %689 = bitcast float* %688 to <4 x float>*
  %690 = load <4 x float>, <4 x float>* %689, align 1
  %691 = fmul <4 x float> %686, %690
  %692 = fadd <4 x float> %682, %691
  %693 = add nuw nsw i64 %680, 4
  %694 = add i64 %683, -1
  %695 = icmp eq i64 %694, 0
  br i1 %695, label %696, label %679, !llvm.loop !35

696:                                              ; preds = %674, %679, %622
  %697 = phi <4 x float> [ zeroinitializer, %622 ], [ %675, %674 ], [ %692, %679 ]
  %698 = phi i64 [ 0, %622 ], [ %458, %679 ], [ %458, %674 ]
  %699 = shufflevector <4 x float> %697, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %700 = fadd <4 x float> %697, %699
  %701 = extractelement <4 x float> %700, i32 1
  %702 = extractelement <4 x float> %700, i32 0
  %703 = fadd float %702, %701
  %704 = icmp slt i64 %698, %1
  br i1 %704, label %705, label %765

705:                                              ; preds = %696
  %706 = mul nsw i64 %623, %11
  %707 = load float*, float** %457, align 8
  %708 = xor i64 %698, -1
  %709 = add i64 %708, %1
  br i1 %467, label %724, label %710

710:                                              ; preds = %705, %710
  %711 = phi float [ %720, %710 ], [ %703, %705 ]
  %712 = phi i64 [ %721, %710 ], [ %698, %705 ]
  %713 = phi i64 [ %722, %710 ], [ %466, %705 ]
  %714 = add nsw i64 %712, %706
  %715 = getelementptr inbounds float, float* %9, i64 %714
  %716 = getelementptr inbounds float, float* %707, i64 %712
  %717 = load float, float* %715, align 4
  %718 = load float, float* %716, align 4
  %719 = fmul float %717, %718
  %720 = fadd float %711, %719
  %721 = add nuw nsw i64 %712, 1
  %722 = add i64 %713, -1
  %723 = icmp eq i64 %722, 0
  br i1 %723, label %724, label %710, !llvm.loop !36

724:                                              ; preds = %710, %705
  %725 = phi float [ undef, %705 ], [ %720, %710 ]
  %726 = phi float [ %703, %705 ], [ %720, %710 ]
  %727 = phi i64 [ %698, %705 ], [ %721, %710 ]
  %728 = icmp ult i64 %709, 3
  br i1 %728, label %765, label %729

729:                                              ; preds = %724, %729
  %730 = phi float [ %762, %729 ], [ %726, %724 ]
  %731 = phi i64 [ %763, %729 ], [ %727, %724 ]
  %732 = add nsw i64 %731, %706
  %733 = getelementptr inbounds float, float* %9, i64 %732
  %734 = getelementptr inbounds float, float* %707, i64 %731
  %735 = load float, float* %733, align 4
  %736 = load float, float* %734, align 4
  %737 = fmul float %735, %736
  %738 = fadd float %730, %737
  %739 = add nuw nsw i64 %731, 1
  %740 = add nsw i64 %739, %706
  %741 = getelementptr inbounds float, float* %9, i64 %740
  %742 = getelementptr inbounds float, float* %707, i64 %739
  %743 = load float, float* %741, align 4
  %744 = load float, float* %742, align 4
  %745 = fmul float %743, %744
  %746 = fadd float %738, %745
  %747 = add nuw nsw i64 %731, 2
  %748 = add nsw i64 %747, %706
  %749 = getelementptr inbounds float, float* %9, i64 %748
  %750 = getelementptr inbounds float, float* %707, i64 %747
  %751 = load float, float* %749, align 4
  %752 = load float, float* %750, align 4
  %753 = fmul float %751, %752
  %754 = fadd float %746, %753
  %755 = add nuw nsw i64 %731, 3
  %756 = add nsw i64 %755, %706
  %757 = getelementptr inbounds float, float* %9, i64 %756
  %758 = getelementptr inbounds float, float* %707, i64 %755
  %759 = load float, float* %757, align 4
  %760 = load float, float* %758, align 4
  %761 = fmul float %759, %760
  %762 = fadd float %754, %761
  %763 = add nuw nsw i64 %731, 4
  %764 = icmp eq i64 %763, %1
  br i1 %764, label %765, label %729

765:                                              ; preds = %724, %729, %696
  %766 = phi float [ %703, %696 ], [ %725, %724 ], [ %762, %729 ]
  %767 = fmul float %766, %6
  %768 = mul nsw i64 %623, %5
  %769 = getelementptr inbounds float, float* %4, i64 %768
  %770 = load float, float* %769, align 4
  %771 = fadd float %767, %770
  store float %771, float* %769, align 4
  %772 = add nuw nsw i64 %623, 1
  %773 = icmp eq i64 %772, %0
  br i1 %773, label %774, label %622

774:                                              ; preds = %765, %452
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_9TransposeIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEEENS4_IKNS_5BlockINS5_IKNS6_IfLin1ELin1ELi1ELin1ELin1EEELi0ESA_EELi1ELin1ELb1EEEEENS4_INSE_INS5_IS7_Li0ESA_EELi1ELin1ELb0EEEEEEEvRKT_RKT0_RT1_RKNSU_6ScalarE(%"class.Eigen::Transpose.167"* dereferenceable(32), %"class.Eigen::Transpose.174"* dereferenceable(80), %"class.Eigen::Transpose"* dereferenceable(80), float* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.Eigen::internal::const_blas_data_mapper"*
  %7 = alloca %"class.Eigen::internal::const_blas_data_mapper.128", align 8
  %8 = bitcast %"class.Eigen::Transpose.167"* %0 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 8
  %10 = getelementptr inbounds %"class.Eigen::Transpose.167", %"class.Eigen::Transpose.167"* %0, i64 0, i32 0, i32 0, i32 2, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.Eigen::Transpose.174", %"class.Eigen::Transpose.174"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load float*, float** %12, align 8, !noalias !37
  %14 = getelementptr inbounds %"class.Eigen::Transpose.174", %"class.Eigen::Transpose.174"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %15 = load i64, i64* %14, align 8, !noalias !37
  %16 = load float, float* %3, align 4
  %17 = icmp ugt i64 %15, 4611686018427387903
  br i1 %17, label %18, label %20

18:                                               ; preds = %4
  %19 = tail call i8* @_Znwm(i64 -1) #11
  br label %20

20:                                               ; preds = %4, %18
  %21 = icmp eq float* %13, null
  %22 = shl i64 %15, 2
  br i1 %21, label %23, label %49

23:                                               ; preds = %20
  %24 = icmp ult i64 %22, 131073
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = add nuw nsw i64 %22, 63
  %27 = alloca i8, i64 %26, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 %26, i1 false)
  %28 = ptrtoint i8* %27 to i64
  %29 = add i64 %28, 63
  %30 = and i64 %29, -64
  %31 = inttoptr i64 %30 to i8*
  br label %46

32:                                               ; preds = %23
  %33 = add i64 %22, 64
  %34 = tail call noalias i8* @malloc(i64 %33) #11
  %35 = icmp eq i8* %34, null
  br i1 %35, label %44, label %36

36:                                               ; preds = %32
  %37 = ptrtoint i8* %34 to i64
  %38 = add i64 %37, 64
  %39 = and i64 %38, -64
  %40 = inttoptr i64 %39 to i8*
  %41 = inttoptr i64 %39 to i8**
  %42 = getelementptr inbounds i8*, i8** %41, i64 -1
  store i8* %34, i8** %42, align 8
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %32, %36
  %45 = tail call i8* @_Znwm(i64 -1) #11
  br label %46

46:                                               ; preds = %44, %36, %25
  %47 = phi i8* [ %31, %25 ], [ %40, %36 ], [ null, %44 ]
  %48 = bitcast i8* %47 to float*
  br label %49

49:                                               ; preds = %20, %46
  %50 = phi float* [ %48, %46 ], [ %13, %20 ]
  %51 = icmp ult i64 %22, 131073
  %52 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #11
  store <2 x i64> %9, <2 x i64>* %5, align 16
  %53 = bitcast %"class.Eigen::internal::const_blas_data_mapper.128"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #11
  %54 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %7, i64 0, i32 0, i32 0
  store float* %50, float** %54, align 8
  %55 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %7, i64 0, i32 0, i32 1
  store i64 1, i64* %55, align 8
  %56 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load float*, float** %56, align 8
  %58 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = extractelement <2 x i64> %9, i32 1
  call void @_ZN5Eigen8internal29general_matrix_vector_productIlfNS0_22const_blas_data_mapperIflLi1EEELi1ELb0EfNS2_IflLi0EEELb0ELi0EE3runEllRKS3_RKS4_Pflf(i64 %11, i64 %60, %"class.Eigen::internal::const_blas_data_mapper"* nonnull dereferenceable(16) %6, %"class.Eigen::internal::const_blas_data_mapper.128"* nonnull dereferenceable(16) %7, float* %57, i64 %59, float %16)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #11
  br i1 %51, label %69, label %61

61:                                               ; preds = %49
  %62 = icmp eq float* %50, null
  %63 = xor i1 %21, true
  %64 = or i1 %62, %63
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds float, float* %50, i64 -2
  %67 = bitcast float* %66 to i8**
  %68 = load i8*, i8** %67, align 8
  call void @free(i8* %68) #11
  br label %69

69:                                               ; preds = %49, %61, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal20generic_product_implINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS2_IKNS3_IfLin1ELin1ELi0ELin1ELin1EEELi0ES7_EENS_10DenseShapeESC_Li8EE6evalToINS2_IS9_Li0ES7_EEEEvRT_RKS8_RKSB_(%"class.Eigen::Map.28"* dereferenceable(32), %"class.Eigen::Map"* dereferenceable(32), %"class.Eigen::Map.20"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca float, align 4
  %5 = getelementptr inbounds %"class.Eigen::Map.20", %"class.Eigen::Map.20"* %2, i64 0, i32 0, i32 1, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, %6
  %10 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %0, i64 0, i32 0, i32 0, i32 2, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = add nsw i64 %9, %11
  %13 = icmp slt i64 %12, 20
  %14 = icmp sgt i64 %6, 0
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %236

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %1, i64 0, i32 0, i32 0
  %18 = load float*, float** %17, align 8
  %19 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %1, i64 0, i32 0, i32 2, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.Eigen::Map.20", %"class.Eigen::Map.20"* %2, i64 0, i32 0, i32 0
  %22 = load float*, float** %21, align 8
  %23 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = icmp sgt i64 %11, 0
  br i1 %25, label %26, label %282

26:                                               ; preds = %16
  %27 = and i64 %6, -8
  %28 = and i64 %6, -4
  %29 = icmp ugt i64 %6, 3
  %30 = icmp sgt i64 %6, 1
  %31 = icmp sgt i64 %6, 7
  %32 = icmp sgt i64 %6, 15
  %33 = icmp sgt i64 %28, %27
  %34 = icmp sgt i64 %6, %28
  %35 = add i64 %6, -1
  %36 = add i64 %6, -2
  %37 = sub i64 %35, %28
  %38 = and i64 %35, 3
  %39 = icmp ult i64 %36, 3
  %40 = sub i64 %35, %38
  %41 = icmp eq i64 %38, 0
  %42 = and i64 %6, 3
  %43 = icmp eq i64 %42, 0
  %44 = icmp ult i64 %37, 3
  br label %45

45:                                               ; preds = %61, %26
  %46 = phi i64 [ %62, %61 ], [ %11, %26 ]
  %47 = phi i64 [ %63, %61 ], [ %8, %26 ]
  %48 = phi i64 [ %64, %61 ], [ 0, %26 ]
  %49 = icmp sgt i64 %47, 0
  br i1 %49, label %50, label %61

50:                                               ; preds = %45
  %51 = mul nsw i64 %48, %8
  %52 = mul nsw i64 %48, %6
  %53 = getelementptr inbounds float, float* %22, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %55 = getelementptr inbounds float, float* %53, i64 4
  %56 = bitcast float* %55 to <4 x float>*
  %57 = getelementptr inbounds float, float* %53, i64 %27
  %58 = bitcast float* %57 to <4 x float>*
  br label %66

59:                                               ; preds = %231
  %60 = load i64, i64* %10, align 8
  br label %61

61:                                               ; preds = %59, %45
  %62 = phi i64 [ %60, %59 ], [ %46, %45 ]
  %63 = phi i64 [ %234, %59 ], [ %47, %45 ]
  %64 = add nuw nsw i64 %48, 1
  %65 = icmp slt i64 %64, %62
  br i1 %65, label %45, label %282

66:                                               ; preds = %231, %50
  %67 = phi i64 [ %233, %231 ], [ 0, %50 ]
  %68 = add nsw i64 %67, %51
  %69 = getelementptr inbounds float, float* %24, i64 %68
  %70 = mul nsw i64 %67, %20
  %71 = getelementptr inbounds float, float* %18, i64 %70
  br i1 %29, label %72, label %175

72:                                               ; preds = %66
  %73 = bitcast float* %71 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 1
  %75 = load <4 x float>, <4 x float>* %54, align 1
  %76 = fmul <4 x float> %74, %75
  br i1 %31, label %77, label %118

77:                                               ; preds = %72
  %78 = getelementptr inbounds float, float* %71, i64 4
  %79 = bitcast float* %78 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 1
  %81 = load <4 x float>, <4 x float>* %56, align 1
  %82 = fmul <4 x float> %80, %81
  br i1 %32, label %87, label %83

83:                                               ; preds = %87, %77
  %84 = phi <4 x float> [ %82, %77 ], [ %108, %87 ]
  %85 = phi <4 x float> [ %76, %77 ], [ %99, %87 ]
  %86 = fadd <4 x float> %84, %85
  br i1 %33, label %111, label %118

87:                                               ; preds = %77, %87
  %88 = phi i64 [ %109, %87 ], [ 8, %77 ]
  %89 = phi i64 [ %88, %87 ], [ 0, %77 ]
  %90 = phi <4 x float> [ %99, %87 ], [ %76, %77 ]
  %91 = phi <4 x float> [ %108, %87 ], [ %82, %77 ]
  %92 = getelementptr inbounds float, float* %71, i64 %88
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 1
  %95 = getelementptr inbounds float, float* %53, i64 %88
  %96 = bitcast float* %95 to <4 x float>*
  %97 = load <4 x float>, <4 x float>* %96, align 1
  %98 = fmul <4 x float> %94, %97
  %99 = fadd <4 x float> %90, %98
  %100 = add nuw nsw i64 %89, 12
  %101 = getelementptr inbounds float, float* %71, i64 %100
  %102 = bitcast float* %101 to <4 x float>*
  %103 = load <4 x float>, <4 x float>* %102, align 1
  %104 = getelementptr inbounds float, float* %53, i64 %100
  %105 = bitcast float* %104 to <4 x float>*
  %106 = load <4 x float>, <4 x float>* %105, align 1
  %107 = fmul <4 x float> %103, %106
  %108 = fadd <4 x float> %91, %107
  %109 = add nuw nsw i64 %88, 8
  %110 = icmp slt i64 %109, %27
  br i1 %110, label %87, label %83

111:                                              ; preds = %83
  %112 = getelementptr inbounds float, float* %71, i64 %27
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 1
  %115 = load <4 x float>, <4 x float>* %58, align 1
  %116 = fmul <4 x float> %114, %115
  %117 = fadd <4 x float> %86, %116
  br label %118

118:                                              ; preds = %111, %83, %72
  %119 = phi <4 x float> [ %76, %72 ], [ %117, %111 ], [ %86, %83 ]
  %120 = shufflevector <4 x float> %119, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %121 = fadd <4 x float> %119, %120
  %122 = extractelement <4 x float> %121, i32 1
  %123 = extractelement <4 x float> %121, i32 0
  %124 = fadd float %123, %122
  br i1 %34, label %125, label %231

125:                                              ; preds = %118
  br i1 %43, label %139, label %126

126:                                              ; preds = %125, %126
  %127 = phi i64 [ %136, %126 ], [ %28, %125 ]
  %128 = phi float [ %135, %126 ], [ %124, %125 ]
  %129 = phi i64 [ %137, %126 ], [ %42, %125 ]
  %130 = getelementptr inbounds float, float* %71, i64 %127
  %131 = load float, float* %130, align 4
  %132 = getelementptr inbounds float, float* %53, i64 %127
  %133 = load float, float* %132, align 4
  %134 = fmul float %131, %133
  %135 = fadd float %128, %134
  %136 = add nsw i64 %127, 1
  %137 = add i64 %129, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %126, !llvm.loop !40

139:                                              ; preds = %126, %125
  %140 = phi float [ undef, %125 ], [ %135, %126 ]
  %141 = phi i64 [ %28, %125 ], [ %136, %126 ]
  %142 = phi float [ %124, %125 ], [ %135, %126 ]
  br i1 %44, label %231, label %143

143:                                              ; preds = %139, %143
  %144 = phi i64 [ %173, %143 ], [ %141, %139 ]
  %145 = phi float [ %172, %143 ], [ %142, %139 ]
  %146 = getelementptr inbounds float, float* %71, i64 %144
  %147 = load float, float* %146, align 4
  %148 = getelementptr inbounds float, float* %53, i64 %144
  %149 = load float, float* %148, align 4
  %150 = fmul float %147, %149
  %151 = fadd float %145, %150
  %152 = add nsw i64 %144, 1
  %153 = getelementptr inbounds float, float* %71, i64 %152
  %154 = load float, float* %153, align 4
  %155 = getelementptr inbounds float, float* %53, i64 %152
  %156 = load float, float* %155, align 4
  %157 = fmul float %154, %156
  %158 = fadd float %151, %157
  %159 = add nsw i64 %144, 2
  %160 = getelementptr inbounds float, float* %71, i64 %159
  %161 = load float, float* %160, align 4
  %162 = getelementptr inbounds float, float* %53, i64 %159
  %163 = load float, float* %162, align 4
  %164 = fmul float %161, %163
  %165 = fadd float %158, %164
  %166 = add nsw i64 %144, 3
  %167 = getelementptr inbounds float, float* %71, i64 %166
  %168 = load float, float* %167, align 4
  %169 = getelementptr inbounds float, float* %53, i64 %166
  %170 = load float, float* %169, align 4
  %171 = fmul float %168, %170
  %172 = fadd float %165, %171
  %173 = add nsw i64 %144, 4
  %174 = icmp eq i64 %173, %6
  br i1 %174, label %231, label %143

175:                                              ; preds = %66
  %176 = load float, float* %71, align 4
  %177 = load float, float* %53, align 4
  %178 = fmul float %176, %177
  br i1 %30, label %179, label %231

179:                                              ; preds = %175
  br i1 %39, label %214, label %180

180:                                              ; preds = %179, %180
  %181 = phi i64 [ %211, %180 ], [ 1, %179 ]
  %182 = phi float [ %210, %180 ], [ %178, %179 ]
  %183 = phi i64 [ %212, %180 ], [ %40, %179 ]
  %184 = getelementptr inbounds float, float* %71, i64 %181
  %185 = load float, float* %184, align 4
  %186 = getelementptr inbounds float, float* %53, i64 %181
  %187 = load float, float* %186, align 4
  %188 = fmul float %185, %187
  %189 = fadd float %182, %188
  %190 = add nuw nsw i64 %181, 1
  %191 = getelementptr inbounds float, float* %71, i64 %190
  %192 = load float, float* %191, align 4
  %193 = getelementptr inbounds float, float* %53, i64 %190
  %194 = load float, float* %193, align 4
  %195 = fmul float %192, %194
  %196 = fadd float %189, %195
  %197 = add nuw nsw i64 %181, 2
  %198 = getelementptr inbounds float, float* %71, i64 %197
  %199 = load float, float* %198, align 4
  %200 = getelementptr inbounds float, float* %53, i64 %197
  %201 = load float, float* %200, align 4
  %202 = fmul float %199, %201
  %203 = fadd float %196, %202
  %204 = add nuw nsw i64 %181, 3
  %205 = getelementptr inbounds float, float* %71, i64 %204
  %206 = load float, float* %205, align 4
  %207 = getelementptr inbounds float, float* %53, i64 %204
  %208 = load float, float* %207, align 4
  %209 = fmul float %206, %208
  %210 = fadd float %203, %209
  %211 = add nuw nsw i64 %181, 4
  %212 = add i64 %183, -4
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %180

214:                                              ; preds = %180, %179
  %215 = phi float [ undef, %179 ], [ %210, %180 ]
  %216 = phi i64 [ 1, %179 ], [ %211, %180 ]
  %217 = phi float [ %178, %179 ], [ %210, %180 ]
  br i1 %41, label %231, label %218

218:                                              ; preds = %214, %218
  %219 = phi i64 [ %228, %218 ], [ %216, %214 ]
  %220 = phi float [ %227, %218 ], [ %217, %214 ]
  %221 = phi i64 [ %229, %218 ], [ %38, %214 ]
  %222 = getelementptr inbounds float, float* %71, i64 %219
  %223 = load float, float* %222, align 4
  %224 = getelementptr inbounds float, float* %53, i64 %219
  %225 = load float, float* %224, align 4
  %226 = fmul float %223, %225
  %227 = fadd float %220, %226
  %228 = add nuw nsw i64 %219, 1
  %229 = add i64 %221, -1
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %218, !llvm.loop !41

231:                                              ; preds = %214, %218, %139, %143, %175, %118
  %232 = phi float [ %124, %118 ], [ %178, %175 ], [ %140, %139 ], [ %172, %143 ], [ %215, %214 ], [ %227, %218 ]
  store float %232, float* %69, align 4
  %233 = add nuw nsw i64 %67, 1
  %234 = load i64, i64* %7, align 8
  %235 = icmp slt i64 %233, %234
  br i1 %235, label %66, label %59

236:                                              ; preds = %3
  %237 = bitcast %"class.Eigen::Map.28"* %0 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = mul i64 %11, %8
  %240 = and i64 %238, 3
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %242, label %248

242:                                              ; preds = %236
  %243 = lshr i64 %238, 2
  %244 = sub nsw i64 0, %243
  %245 = and i64 %244, 3
  %246 = icmp slt i64 %245, %239
  %247 = select i1 %246, i64 %245, i64 %239
  br label %248

248:                                              ; preds = %242, %236
  %249 = phi i64 [ %247, %242 ], [ %239, %236 ]
  %250 = sub i64 %239, %249
  %251 = sdiv i64 %250, 4
  %252 = shl nsw i64 %251, 2
  %253 = add i64 %252, %249
  %254 = icmp sgt i64 %249, 0
  br i1 %254, label %255, label %258

255:                                              ; preds = %248
  %256 = inttoptr i64 %238 to i8*
  %257 = shl nuw i64 %249, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %256, i8 0, i64 %257, i1 false) #11
  br label %258

258:                                              ; preds = %255, %248
  %259 = icmp sgt i64 %250, 3
  br i1 %259, label %260, label %272

260:                                              ; preds = %258
  %261 = inttoptr i64 %238 to float*
  %262 = getelementptr float, float* %261, i64 %249
  %263 = bitcast float* %262 to i8*
  %264 = add nsw i64 %249, 4
  %265 = icmp sgt i64 %253, %264
  %266 = select i1 %265, i64 %253, i64 %264
  %267 = xor i64 %249, 4611686018427387903
  %268 = add i64 %266, %267
  %269 = lshr i64 %268, 2
  %270 = shl i64 %269, 4
  %271 = add i64 %270, 16
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %263, i8 0, i64 %271, i1 false) #11
  br label %272

272:                                              ; preds = %260, %258
  %273 = icmp slt i64 %253, %239
  br i1 %273, label %274, label %280

274:                                              ; preds = %272
  %275 = inttoptr i64 %238 to float*
  %276 = getelementptr float, float* %275, i64 %253
  %277 = bitcast float* %276 to i8*
  %278 = sub i64 %250, %252
  %279 = shl nuw i64 %278, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %277, i8 0, i64 %279, i1 false) #11
  br label %280

280:                                              ; preds = %272, %274
  %281 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %281) #11
  store float 1.000000e+00, float* %4, align 4
  call void @_ZN5Eigen8internal20generic_product_implINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS2_IKNS3_IfLin1ELin1ELi0ELin1ELin1EEELi0ES7_EENS_10DenseShapeESC_Li8EE13scaleAndAddToINS2_IS9_Li0ES7_EEEEvRT_RKS8_RKSB_RKf(%"class.Eigen::Map.28"* dereferenceable(32) %0, %"class.Eigen::Map"* dereferenceable(32) %1, %"class.Eigen::Map.20"* dereferenceable(32) %2, float* nonnull dereferenceable(4) %4)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %281) #11
  br label %282

282:                                              ; preds = %61, %16, %280
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal20generic_product_implINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS2_IKNS3_IfLin1ELin1ELi0ELin1ELin1EEELi0ES7_EENS_10DenseShapeESC_Li8EE13scaleAndAddToINS2_IS9_Li0ES7_EEEEvRT_RKS8_RKSB_RKf(%"class.Eigen::Map.28"* dereferenceable(32), %"class.Eigen::Map"* dereferenceable(32), %"class.Eigen::Map.20"* dereferenceable(32), float* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %5 = alloca %"class.Eigen::Map", align 8
  %6 = alloca %"class.Eigen::Block.239", align 8
  %7 = alloca %"class.Eigen::Transpose", align 8
  %8 = alloca %"class.Eigen::Transpose.167", align 16
  %9 = alloca %"class.Eigen::Transpose.223", align 8
  %10 = alloca { float*, %"class.Eigen::internal::variable_if_dynamic" }, align 8
  %11 = alloca %"class.Eigen::Block.50", align 16
  %12 = alloca %"class.Eigen::MapBase.30", align 8
  %13 = alloca %"class.Eigen::internal::gemm_blocking_space", align 8
  %14 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %1, i64 0, i32 0, i32 2, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %142, label %17

17:                                               ; preds = %4
  %18 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %1, i64 0, i32 0, i32 1, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %142, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.Eigen::Map.20", %"class.Eigen::Map.20"* %2, i64 0, i32 0, i32 2, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %142, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %0, i64 0, i32 0, i32 0, i32 2, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 1
  br i1 %28, label %29, label %62

29:                                               ; preds = %25
  %30 = bitcast %"class.Eigen::Block.50"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %30) #11
  %31 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -86, i64 40, i1 false)
  %32 = bitcast %"class.Eigen::Map.28"* %0 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 8, !noalias !42
  %34 = bitcast %"class.Eigen::Block.50"* %11 to <2 x i64>*
  store <2 x i64> %33, <2 x i64>* %34, align 16, !alias.scope !42
  %35 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %11, i64 0, i32 0, i32 0, i32 2
  %36 = bitcast %"class.Eigen::Map.28"* %35 to i8*
  %37 = bitcast %"class.Eigen::Map.28"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false) #11
  %38 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %11, i64 0, i32 0, i32 0, i32 3, i32 0
  %39 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %11, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 1, i32 0
  %40 = bitcast i64* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 16, i1 false)
  %41 = load i64, i64* %39, align 8, !alias.scope !42
  %42 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %11, i64 0, i32 0, i32 0, i32 5
  store i64 %41, i64* %42, align 8, !alias.scope !42
  %43 = bitcast %"class.Eigen::Map.20"* %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"class.Eigen::Map.20", %"class.Eigen::Map.20"* %2, i64 0, i32 0, i32 1, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.Eigen::Map"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #11
  %48 = bitcast %"class.Eigen::Map"* %1 to i8*
  %49 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %5, i64 0, i32 1, i32 0, i32 0
  %50 = bitcast i8* %49 to i64*
  store i64 -6148914691236517206, i64* %50, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %47, i8* align 8 %48, i64 24, i1 false) #11
  %51 = bitcast %"class.Eigen::Block.239"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %51) #11
  %52 = getelementptr inbounds %"class.Eigen::Block.239", %"class.Eigen::Block.239"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 -86, i64 40, i1 false) #11
  %53 = bitcast %"class.Eigen::Block.239"* %6 to i64*
  store i64 %44, i64* %53, align 8
  %54 = getelementptr inbounds %"class.Eigen::Block.239", %"class.Eigen::Block.239"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %46, i64* %54, align 8
  %55 = getelementptr inbounds %"class.Eigen::Block.239", %"class.Eigen::Block.239"* %6, i64 0, i32 0, i32 0, i32 2
  %56 = bitcast %"class.Eigen::Map.20"* %55 to i64*
  store i64 %44, i64* %56, align 8
  %57 = getelementptr inbounds %"class.Eigen::Block.239", %"class.Eigen::Block.239"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1, i32 0
  store i64 %46, i64* %57, align 8
  %58 = getelementptr inbounds %"class.Eigen::Block.239", %"class.Eigen::Block.239"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0
  store i64 %23, i64* %58, align 8
  %59 = getelementptr inbounds %"class.Eigen::Block.239", %"class.Eigen::Block.239"* %6, i64 0, i32 0, i32 0, i32 3, i32 0
  %60 = getelementptr inbounds %"class.Eigen::Block.239", %"class.Eigen::Block.239"* %6, i64 0, i32 0, i32 0, i32 5
  %61 = bitcast i64* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 16, i1 false)
  store i64 %46, i64* %60, align 8
  call void @_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS_5BlockIKNS4_IKNS5_IfLin1ELin1ELi0ELin1ELin1EEELi0ES9_EELin1ELi1ELb1EEENSB_INS4_ISC_Li0ES9_EELin1ELi1ELb1EEEEEvRKT_RKT0_RT1_RKNSP_6ScalarE(%"class.Eigen::Map"* nonnull dereferenceable(32) %5, %"class.Eigen::Block.239"* nonnull dereferenceable(80) %6, %"class.Eigen::Block.50"* nonnull dereferenceable(80) %11, float* dereferenceable(4) %3) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %51) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %30) #11
  br label %142

62:                                               ; preds = %25
  %63 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = icmp eq i64 %64, 1
  br i1 %65, label %66, label %98

66:                                               ; preds = %62
  %67 = bitcast %"class.Eigen::MapBase.30"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %67)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %67, i8 -86, i64 24, i1 false)
  %68 = bitcast %"class.Eigen::Map.28"* %0 to i64*
  %69 = load i64, i64* %68, align 8, !noalias !45
  %70 = bitcast %"class.Eigen::Map.28"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %67, i8* align 8 %70, i64 24, i1 false)
  %71 = bitcast %"class.Eigen::Map"* %1 to i64*
  %72 = load i64, i64* %71, align 8, !noalias !48
  %73 = bitcast %"class.Eigen::Map"* %1 to i8*
  %74 = bitcast { float*, %"class.Eigen::internal::variable_if_dynamic" }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %74)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %74, i8* align 8 %73, i64 16, i1 false)
  %75 = bitcast %"class.Eigen::Map.20"* %2 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 8
  %77 = bitcast %"class.Eigen::Transpose"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %77) #11
  %78 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -86, i64 48, i1 false) #11
  %79 = bitcast %"class.Eigen::Transpose"* %7 to i64*
  store i64 %69, i64* %79, align 8
  %80 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %27, i64* %80, align 8
  %81 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %7, i64 0, i32 0, i32 0, i32 0, i32 1
  %82 = bitcast %"class.Eigen::Map.28"* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* nonnull align 8 %67, i64 24, i1 false)
  %83 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %7, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %84 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %7, i64 0, i32 0, i32 0, i32 0, i32 4
  %85 = bitcast i64* %83 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 16, i1 false)
  store i64 1, i64* %84, align 8
  %86 = bitcast %"class.Eigen::Transpose.167"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %86) #11
  %87 = bitcast %"class.Eigen::Transpose.167"* %8 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %87, align 16
  %88 = getelementptr inbounds %"class.Eigen::Transpose.167", %"class.Eigen::Transpose.167"* %8, i64 0, i32 0, i32 0, i32 2, i32 0
  store i64 %23, i64* %88, align 16
  %89 = bitcast %"class.Eigen::Transpose.223"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %89) #11
  %90 = bitcast %"class.Eigen::Transpose.223"* %9 to i64*
  store i64 %72, i64* %90, align 8, !alias.scope !51
  %91 = getelementptr inbounds %"class.Eigen::Transpose.223", %"class.Eigen::Transpose.223"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %15, i64* %91, align 8, !alias.scope !51
  %92 = getelementptr inbounds %"class.Eigen::Transpose.223", %"class.Eigen::Transpose.223"* %9, i64 0, i32 0, i32 0, i32 0, i32 1
  %93 = bitcast %"class.Eigen::Map"* %92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* nonnull align 8 %74, i64 16, i1 false)
  %94 = getelementptr inbounds %"class.Eigen::Transpose.223", %"class.Eigen::Transpose.223"* %9, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0
  store i64 %15, i64* %94, align 8
  %95 = getelementptr inbounds %"class.Eigen::Transpose.223", %"class.Eigen::Transpose.223"* %9, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %96 = getelementptr inbounds %"class.Eigen::Transpose.223", %"class.Eigen::Transpose.223"* %9, i64 0, i32 0, i32 0, i32 0, i32 4
  %97 = bitcast i64* %95 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 16, i1 false)
  store i64 %15, i64* %96, align 8
  call void @_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_9TransposeIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEEENS4_IKNS_5BlockIKNS5_IKNS6_IfLin1ELin1ELi1ELin1ELin1EEELi0ESA_EELi1ELin1ELb1EEEEENS4_INSE_INS5_IS7_Li0ESA_EELi1ELin1ELb0EEEEEEEvRKT_RKT0_RT1_RKNSV_6ScalarE(%"class.Eigen::Transpose.167"* nonnull dereferenceable(32) %8, %"class.Eigen::Transpose.223"* nonnull dereferenceable(80) %9, %"class.Eigen::Transpose"* nonnull dereferenceable(80) %7, float* dereferenceable(4) %3) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %89) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %86) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %77) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %74)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %67)
  br label %142

98:                                               ; preds = %62
  %99 = load float, float* %3, align 4
  %100 = bitcast %"class.Eigen::internal::gemm_blocking_space"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %100) #11
  %101 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %13, i64 0, i32 1
  %102 = bitcast i64* %101 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %102, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %100, i8 0, i64 16, i1 false) #11
  %103 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %13, i64 0, i32 0, i32 2
  store i64 %64, i64* %103, align 8
  %104 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %13, i64 0, i32 0, i32 3
  store i64 %27, i64* %104, align 8
  %105 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %13, i64 0, i32 0, i32 4
  store i64 %15, i64* %105, align 8
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIffLi1ElEEvRT2_S3_S3_S2_(i64* dereferenceable(8) %105, i64* dereferenceable(8) %103, i64* dereferenceable(8) %104, i64 1) #11
  %106 = load i64, i64* %103, align 8
  %107 = load i64, i64* %105, align 8
  %108 = mul nsw i64 %107, %106
  %109 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %13, i64 0, i32 1
  store i64 %108, i64* %109, align 8
  %110 = load i64, i64* %104, align 8
  %111 = mul nsw i64 %110, %107
  %112 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %13, i64 0, i32 2
  store i64 %111, i64* %112, align 8
  %113 = load i64, i64* %18, align 8
  %114 = load i64, i64* %22, align 8
  %115 = load i64, i64* %14, align 8
  %116 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %1, i64 0, i32 0, i32 0
  %117 = load float*, float** %116, align 8
  %118 = getelementptr inbounds %"class.Eigen::Map.20", %"class.Eigen::Map.20"* %2, i64 0, i32 0, i32 0
  %119 = load float*, float** %118, align 8
  %120 = getelementptr inbounds %"class.Eigen::Map.20", %"class.Eigen::Map.20"* %2, i64 0, i32 0, i32 1, i32 0
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds %"class.Eigen::Map.28", %"class.Eigen::Map.28"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load float*, float** %122, align 8
  %124 = load i64, i64* %63, align 8
  %125 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %13, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIlfLi1ELb0EfLi0ELb0ELi0ELi1EE3runElllPKflS4_lPfllfRNS0_15level3_blockingIffEEPNS0_16GemmParallelInfoIlEE(i64 %113, i64 %114, i64 %115, float* %117, i64 %115, float* %119, i64 %121, float* %123, i64 1, i64 %124, float %99, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %125, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %126 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %13, i64 0, i32 0, i32 0
  %127 = load float*, float** %126, align 8
  %128 = icmp eq float* %127, null
  br i1 %128, label %133, label %129

129:                                              ; preds = %98
  %130 = getelementptr inbounds float, float* %127, i64 -2
  %131 = bitcast float* %130 to i8**
  %132 = load i8*, i8** %131, align 8
  call void @free(i8* %132) #11
  br label %133

133:                                              ; preds = %129, %98
  %134 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %13, i64 0, i32 0, i32 1
  %135 = load float*, float** %134, align 8
  %136 = icmp eq float* %135, null
  br i1 %136, label %141, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds float, float* %135, i64 -2
  %139 = bitcast float* %138 to i8**
  %140 = load i8*, i8** %139, align 8
  call void @free(i8* %140) #11
  br label %141

141:                                              ; preds = %133, %137
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %100) #11
  br label %142

142:                                              ; preds = %4, %17, %21, %141, %66, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS_5BlockIKNS4_IKNS5_IfLin1ELin1ELi0ELin1ELin1EEELi0ES9_EELin1ELi1ELb1EEENSB_INS4_ISC_Li0ES9_EELin1ELi1ELb1EEEEEvRKT_RKT0_RT1_RKNSP_6ScalarE(%"class.Eigen::Map"* dereferenceable(32), %"class.Eigen::Block.239"* dereferenceable(80), %"class.Eigen::Block.50"* dereferenceable(80), float* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %5 = alloca %"class.Eigen::internal::const_blas_data_mapper", align 8
  %6 = alloca %"class.Eigen::internal::const_blas_data_mapper.128", align 8
  %7 = load float, float* %3, align 4
  %8 = getelementptr inbounds %"class.Eigen::Block.239", %"class.Eigen::Block.239"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %9, 4611686018427387903
  br i1 %10, label %11, label %13

11:                                               ; preds = %4
  %12 = tail call i8* @_Znwm(i64 -1) #11
  br label %13

13:                                               ; preds = %4, %11
  %14 = getelementptr inbounds %"class.Eigen::Block.239", %"class.Eigen::Block.239"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load float*, float** %14, align 8
  %16 = icmp eq float* %15, null
  br i1 %16, label %17, label %46

17:                                               ; preds = %13
  %18 = load i64, i64* %8, align 8
  %19 = shl i64 %18, 2
  %20 = icmp ult i64 %19, 131073
  br i1 %20, label %21, label %28

21:                                               ; preds = %17
  %22 = add nuw nsw i64 %19, 63
  %23 = alloca i8, i64 %22, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 %22, i1 false)
  %24 = ptrtoint i8* %23 to i64
  %25 = add i64 %24, 63
  %26 = and i64 %25, -64
  %27 = inttoptr i64 %26 to i8*
  br label %42

28:                                               ; preds = %17
  %29 = add i64 %19, 64
  %30 = tail call noalias i8* @malloc(i64 %29) #11
  %31 = icmp eq i8* %30, null
  br i1 %31, label %40, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i8* %30 to i64
  %34 = add i64 %33, 64
  %35 = and i64 %34, -64
  %36 = inttoptr i64 %35 to i8*
  %37 = inttoptr i64 %35 to i8**
  %38 = getelementptr inbounds i8*, i8** %37, i64 -1
  store i8* %30, i8** %38, align 8
  %39 = icmp eq i64 %35, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %28, %32
  %41 = tail call i8* @_Znwm(i64 -1) #11
  br label %42

42:                                               ; preds = %40, %32, %21
  %43 = phi i8* [ %27, %21 ], [ %36, %32 ], [ null, %40 ]
  %44 = bitcast i8* %43 to float*
  %45 = load float*, float** %14, align 8
  br label %46

46:                                               ; preds = %13, %42
  %47 = phi float* [ %45, %42 ], [ %15, %13 ]
  %48 = phi float* [ %44, %42 ], [ %15, %13 ]
  %49 = load i64, i64* %8, align 8
  %50 = shl i64 %49, 2
  %51 = icmp ult i64 %50, 131073
  %52 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %0, i64 0, i32 0, i32 1, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.Eigen::Map", %"class.Eigen::Map"* %0, i64 0, i32 0, i32 2, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"class.Eigen::internal::const_blas_data_mapper"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #11
  %57 = bitcast %"class.Eigen::Map"* %0 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.Eigen::internal::const_blas_data_mapper"* %5 to i64*
  store i64 %58, i64* %59, align 8
  %60 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %5, i64 0, i32 0, i32 1
  store i64 %55, i64* %60, align 8
  %61 = bitcast %"class.Eigen::internal::const_blas_data_mapper.128"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %61) #11
  %62 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %6, i64 0, i32 0, i32 0
  store float* %48, float** %62, align 8
  %63 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %6, i64 0, i32 0, i32 1
  store i64 1, i64* %63, align 8
  %64 = getelementptr inbounds %"class.Eigen::Block.50", %"class.Eigen::Block.50"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load float*, float** %64, align 8
  call void @_ZN5Eigen8internal29general_matrix_vector_productIlfNS0_22const_blas_data_mapperIflLi1EEELi1ELb0EfNS2_IflLi0EEELb0ELi0EE3runEllRKS3_RKS4_Pflf(i64 %53, i64 %55, %"class.Eigen::internal::const_blas_data_mapper"* nonnull dereferenceable(16) %5, %"class.Eigen::internal::const_blas_data_mapper.128"* nonnull dereferenceable(16) %6, float* %65, i64 1, float %7)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #11
  br i1 %51, label %74, label %66

66:                                               ; preds = %46
  %67 = icmp ne float* %47, null
  %68 = icmp eq float* %48, null
  %69 = or i1 %68, %67
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds float, float* %48, i64 -2
  %72 = bitcast float* %71 to i8**
  %73 = load i8*, i8** %72, align 8
  call void @free(i8* %73) #11
  br label %74

74:                                               ; preds = %46, %66, %70
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal19gemv_dense_selectorILi2ELi1ELb1EE3runINS_9TransposeIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEEENS4_IKNS_5BlockIKNS5_IKNS6_IfLin1ELin1ELi1ELin1ELin1EEELi0ESA_EELi1ELin1ELb1EEEEENS4_INSE_INS5_IS7_Li0ESA_EELi1ELin1ELb0EEEEEEEvRKT_RKT0_RT1_RKNSV_6ScalarE(%"class.Eigen::Transpose.167"* dereferenceable(32), %"class.Eigen::Transpose.223"* dereferenceable(80), %"class.Eigen::Transpose"* dereferenceable(80), float* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.Eigen::internal::const_blas_data_mapper"*
  %7 = alloca %"class.Eigen::internal::const_blas_data_mapper.128", align 8
  %8 = bitcast %"class.Eigen::Transpose.167"* %0 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 8
  %10 = getelementptr inbounds %"class.Eigen::Transpose.167", %"class.Eigen::Transpose.167"* %0, i64 0, i32 0, i32 0, i32 2, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.Eigen::Transpose.223", %"class.Eigen::Transpose.223"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load float*, float** %12, align 8, !noalias !54
  %14 = getelementptr inbounds %"class.Eigen::Transpose.223", %"class.Eigen::Transpose.223"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %15 = load i64, i64* %14, align 8, !noalias !54
  %16 = load float, float* %3, align 4
  %17 = icmp ugt i64 %15, 4611686018427387903
  br i1 %17, label %18, label %20

18:                                               ; preds = %4
  %19 = tail call i8* @_Znwm(i64 -1) #11
  br label %20

20:                                               ; preds = %4, %18
  %21 = icmp eq float* %13, null
  %22 = shl i64 %15, 2
  br i1 %21, label %23, label %49

23:                                               ; preds = %20
  %24 = icmp ult i64 %22, 131073
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = add nuw nsw i64 %22, 63
  %27 = alloca i8, i64 %26, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 %26, i1 false)
  %28 = ptrtoint i8* %27 to i64
  %29 = add i64 %28, 63
  %30 = and i64 %29, -64
  %31 = inttoptr i64 %30 to i8*
  br label %46

32:                                               ; preds = %23
  %33 = add i64 %22, 64
  %34 = tail call noalias i8* @malloc(i64 %33) #11
  %35 = icmp eq i8* %34, null
  br i1 %35, label %44, label %36

36:                                               ; preds = %32
  %37 = ptrtoint i8* %34 to i64
  %38 = add i64 %37, 64
  %39 = and i64 %38, -64
  %40 = inttoptr i64 %39 to i8*
  %41 = inttoptr i64 %39 to i8**
  %42 = getelementptr inbounds i8*, i8** %41, i64 -1
  store i8* %34, i8** %42, align 8
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %32, %36
  %45 = tail call i8* @_Znwm(i64 -1) #11
  br label %46

46:                                               ; preds = %44, %36, %25
  %47 = phi i8* [ %31, %25 ], [ %40, %36 ], [ null, %44 ]
  %48 = bitcast i8* %47 to float*
  br label %49

49:                                               ; preds = %20, %46
  %50 = phi float* [ %48, %46 ], [ %13, %20 ]
  %51 = icmp ult i64 %22, 131073
  %52 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #11
  store <2 x i64> %9, <2 x i64>* %5, align 16
  %53 = bitcast %"class.Eigen::internal::const_blas_data_mapper.128"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #11
  %54 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %7, i64 0, i32 0, i32 0
  store float* %50, float** %54, align 8
  %55 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %7, i64 0, i32 0, i32 1
  store i64 1, i64* %55, align 8
  %56 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load float*, float** %56, align 8
  %58 = getelementptr inbounds %"class.Eigen::Transpose", %"class.Eigen::Transpose"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = extractelement <2 x i64> %9, i32 1
  call void @_ZN5Eigen8internal29general_matrix_vector_productIlfNS0_22const_blas_data_mapperIflLi1EEELi1ELb0EfNS2_IflLi0EEELb0ELi0EE3runEllRKS3_RKS4_Pflf(i64 %11, i64 %60, %"class.Eigen::internal::const_blas_data_mapper"* nonnull dereferenceable(16) %6, %"class.Eigen::internal::const_blas_data_mapper.128"* nonnull dereferenceable(16) %7, float* %57, i64 %59, float %16)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #11
  br i1 %51, label %69, label %61

61:                                               ; preds = %49
  %62 = icmp eq float* %50, null
  %63 = xor i1 %21, true
  %64 = or i1 %62, %63
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds float, float* %50, i64 -2
  %67 = bitcast float* %66 to i8**
  %68 = load i8*, i8** %67, align 8
  call void @free(i8* %68) #11
  br label %69

69:                                               ; preds = %49, %61, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIffLi1ElEEvRT2_S3_S3_S2_(i64* dereferenceable(8), i64* dereferenceable(8), i64* dereferenceable(8), i64) local_unnamed_addr #2 comdat {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = load atomic i8, i8* bitcast (i64* @_ZGVZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes to i8*) acquire, align 8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %29, !prof !57

10:                                               ; preds = %4
  %11 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes) #11
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %10
  %14 = bitcast i32* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes to i8*), i8 -1, i64 24, i1 false) #11
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #11
  store i32 -1431655766, i32* %5, align 4
  %15 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #11
  store i32 -1431655766, i32* %6, align 4
  %16 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #11
  store i32 -1431655766, i32* %7, align 4
  call void @_ZN5Eigen8internal15queryCacheSizesERiS1_S1_(i32* nonnull dereferenceable(4) %5, i32* nonnull dereferenceable(4) %6, i32* nonnull dereferenceable(4) %7) #11
  %17 = load i32, i32* %5, align 4
  %18 = icmp slt i32 %17, 1
  %19 = select i1 %18, i32 32768, i32 %17
  %20 = sext i32 %19 to i64
  store i64 %20, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 0), align 8
  %21 = load i32, i32* %6, align 4
  %22 = icmp slt i32 %21, 1
  %23 = select i1 %22, i32 262144, i32 %21
  %24 = sext i32 %23 to i64
  store i64 %24, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 1), align 8
  %25 = load i32, i32* %7, align 4
  %26 = icmp slt i32 %25, 1
  %27 = select i1 %26, i32 2097152, i32 %25
  %28 = sext i32 %27 to i64
  store i64 %28, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 2), align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #11
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes) #11
  br label %29

29:                                               ; preds = %4, %10, %13
  %30 = load i64, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 0), align 8
  %31 = load i64, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 1), align 8
  %32 = load i64, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 2), align 8
  %33 = icmp sgt i64 %3, 1
  br i1 %33, label %34, label %87

34:                                               ; preds = %29
  %35 = add nsw i64 %30, -128
  %36 = sdiv i64 %35, 48
  %37 = icmp slt i64 %36, 320
  %38 = select i1 %37, i64 %36, i64 320
  %39 = icmp sgt i64 %38, 8
  %40 = select i1 %39, i64 %38, i64 8
  %41 = load i64, i64* %0, align 8
  %42 = icmp slt i64 %40, %41
  br i1 %42, label %43, label %45

43:                                               ; preds = %34
  %44 = and i64 %40, 9223372036854775800
  store i64 %44, i64* %0, align 8
  br label %45

45:                                               ; preds = %43, %34
  %46 = phi i64 [ %44, %43 ], [ %41, %34 ]
  %47 = sub nsw i64 %31, %30
  %48 = shl i64 %46, 4
  %49 = udiv i64 %47, %48
  %50 = load i64, i64* %2, align 8
  %51 = add nsw i64 %3, -1
  %52 = add i64 %51, %50
  %53 = sdiv i64 %52, %3
  %54 = icmp sgt i64 %49, %53
  br i1 %54, label %58, label %55

55:                                               ; preds = %45
  %56 = srem i64 %49, 4
  %57 = sub nsw i64 %49, %56
  br label %64

58:                                               ; preds = %45
  %59 = add nsw i64 %53, 3
  %60 = srem i64 %59, 4
  %61 = sub nsw i64 %59, %60
  %62 = icmp slt i64 %61, %50
  %63 = select i1 %62, i64 %61, i64 %50
  br label %64

64:                                               ; preds = %58, %55
  %65 = phi i64 [ %57, %55 ], [ %63, %58 ]
  store i64 %65, i64* %2, align 8
  %66 = icmp sgt i64 %32, %31
  br i1 %66, label %67, label %190

67:                                               ; preds = %64
  %68 = sub nsw i64 %32, %31
  %69 = load i64, i64* %0, align 8
  %70 = shl i64 %3, 2
  %71 = mul i64 %70, %69
  %72 = udiv i64 %68, %71
  %73 = load i64, i64* %1, align 8
  %74 = add i64 %51, %73
  %75 = sdiv i64 %74, %3
  %76 = icmp slt i64 %72, %75
  %77 = icmp sgt i64 %72, 7
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %81

79:                                               ; preds = %67
  %80 = and i64 %72, -8
  store i64 %80, i64* %1, align 8
  br label %190

81:                                               ; preds = %67
  %82 = add nsw i64 %75, 7
  %83 = srem i64 %82, 8
  %84 = sub nsw i64 %82, %83
  %85 = icmp slt i64 %84, %73
  %86 = select i1 %85, i64 %84, i64 %73
  store i64 %86, i64* %1, align 8
  br label %190

87:                                               ; preds = %29
  %88 = load i64, i64* %1, align 8
  %89 = load i64, i64* %2, align 8
  %90 = icmp slt i64 %88, %89
  %91 = select i1 %90, i64 %89, i64 %88
  %92 = load i64, i64* %0, align 8
  %93 = icmp slt i64 %92, %91
  %94 = select i1 %93, i64 %91, i64 %92
  %95 = icmp slt i64 %94, 48
  br i1 %95, label %190, label %96

96:                                               ; preds = %87
  %97 = add nsw i64 %30, -128
  %98 = sdiv i64 %97, 48
  %99 = and i64 %98, -8
  %100 = icmp sgt i64 %99, 1
  %101 = select i1 %100, i64 %99, i64 1
  %102 = icmp sgt i64 %92, %101
  br i1 %102, label %103, label %118

103:                                              ; preds = %96
  %104 = srem i64 %92, %101
  %105 = sdiv i64 %92, %101
  %106 = icmp eq i64 %104, 0
  br i1 %106, label %115, label %107

107:                                              ; preds = %103
  %108 = xor i64 %104, -1
  %109 = add i64 %101, %108
  %110 = shl i64 %105, 3
  %111 = add i64 %110, 8
  %112 = sdiv i64 %109, %111
  %113 = shl nsw i64 %112, 3
  %114 = sub nsw i64 %101, %113
  br label %115

115:                                              ; preds = %103, %107
  %116 = phi i64 [ %114, %107 ], [ %101, %103 ]
  store i64 %116, i64* %0, align 8
  %117 = load i64, i64* %1, align 8
  br label %118

118:                                              ; preds = %115, %96
  %119 = phi i64 [ %116, %115 ], [ %92, %96 ]
  %120 = phi i64 [ %117, %115 ], [ %88, %96 ]
  %121 = shl i64 %120, 2
  %122 = mul i64 %121, %119
  %123 = sub nsw i64 %97, %122
  %124 = shl nsw i64 %119, 4
  %125 = icmp slt i64 %123, %124
  %126 = shl nsw i64 %101, 4
  %127 = shl i64 %119, 2
  %128 = select i1 %125, i64 %126, i64 %127
  %129 = select i1 %125, i64 4718592, i64 %123
  %130 = udiv i64 %129, %128
  %131 = shl i64 %119, 3
  %132 = udiv i64 1572864, %131
  %133 = icmp slt i64 %130, %132
  %134 = select i1 %133, i64 %130, i64 %132
  %135 = and i64 %134, -4
  %136 = load i64, i64* %2, align 8
  %137 = icmp sgt i64 %136, %135
  br i1 %137, label %138, label %151

138:                                              ; preds = %118
  %139 = srem i64 %136, %135
  %140 = sdiv i64 %136, %135
  %141 = icmp eq i64 %139, 0
  br i1 %141, label %149, label %142

142:                                              ; preds = %138
  %143 = sub nsw i64 %135, %139
  %144 = shl i64 %140, 2
  %145 = add i64 %144, 4
  %146 = sdiv i64 %143, %145
  %147 = shl nsw i64 %146, 2
  %148 = sub nsw i64 %135, %147
  br label %149

149:                                              ; preds = %138, %142
  %150 = phi i64 [ %148, %142 ], [ %135, %138 ]
  store i64 %150, i64* %2, align 8
  br label %190

151:                                              ; preds = %118
  %152 = icmp eq i64 %92, %119
  br i1 %152, label %153, label %190

153:                                              ; preds = %151
  %154 = shl i64 %92, 2
  %155 = mul i64 %154, %136
  %156 = icmp slt i64 %155, 1025
  br i1 %156, label %164, label %157

157:                                              ; preds = %153
  %158 = icmp ne i64 %32, 0
  %159 = icmp slt i64 %155, 32769
  %160 = and i1 %158, %159
  br i1 %160, label %161, label %164

161:                                              ; preds = %157
  %162 = icmp slt i64 %120, 576
  %163 = select i1 %162, i64 %120, i64 576
  br label %164

164:                                              ; preds = %153, %157, %161
  %165 = phi i64 [ %163, %161 ], [ %120, %157 ], [ %120, %153 ]
  %166 = phi i64 [ %31, %161 ], [ 1572864, %157 ], [ %30, %153 ]
  %167 = mul i64 %92, 12
  %168 = udiv i64 %166, %167
  %169 = icmp slt i64 %165, %168
  %170 = select i1 %169, i64 %165, i64 %168
  %171 = icmp sgt i64 %170, 8
  br i1 %171, label %172, label %174

172:                                              ; preds = %164
  %173 = and i64 %170, -8
  br label %176

174:                                              ; preds = %164
  %175 = icmp eq i64 %170, 0
  br i1 %175, label %190, label %176

176:                                              ; preds = %174, %172
  %177 = phi i64 [ %173, %172 ], [ %170, %174 ]
  %178 = srem i64 %120, %177
  %179 = sdiv i64 %120, %177
  %180 = icmp eq i64 %178, 0
  br i1 %180, label %188, label %181

181:                                              ; preds = %176
  %182 = sub nsw i64 %177, %178
  %183 = shl i64 %179, 3
  %184 = add i64 %183, 8
  %185 = sdiv i64 %182, %184
  %186 = shl nsw i64 %185, 3
  %187 = sub nsw i64 %177, %186
  br label %188

188:                                              ; preds = %176, %181
  %189 = phi i64 [ %187, %181 ], [ %177, %176 ]
  store i64 %189, i64* %1, align 8
  br label %190

190:                                              ; preds = %151, %149, %174, %188, %79, %81, %64, %87
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal15queryCacheSizesERiS1_S1_(i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #8 comdat {
  %4 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 0, i32 0) #11, !srcloc !58
  %5 = extractvalue { i32, i32, i32, i32 } %4, 1
  %6 = extractvalue { i32, i32, i32, i32 } %4, 2
  %7 = extractvalue { i32, i32, i32, i32 } %4, 3
  switch i32 %5, label %64 [
    i32 1970169159, label %8
    i32 1752462657, label %44
    i32 1766083905, label %48
  ]

8:                                                ; preds = %3
  %9 = icmp eq i32 %7, 1231384169
  %10 = icmp eq i32 %6, 1818588270
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %66

12:                                               ; preds = %8
  store i32 0, i32* %2, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %0, align 4
  br label %13

13:                                               ; preds = %39, %12
  %14 = phi i32 [ 0, %12 ], [ %40, %39 ]
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %14) #11, !srcloc !59
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = and i32 %16, 15
  %19 = or i32 %18, 2
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %21, label %39

21:                                               ; preds = %13
  %22 = extractvalue { i32, i32, i32, i32 } %15, 2
  %23 = lshr i32 %16, 5
  %24 = and i32 %23, 7
  %25 = lshr i32 %17, 22
  %26 = lshr i32 %17, 12
  %27 = and i32 %26, 1023
  %28 = and i32 %17, 4095
  %29 = add nuw nsw i32 %25, 1
  %30 = add nuw nsw i32 %27, 1
  %31 = add nuw nsw i32 %28, 1
  %32 = add nsw i32 %22, 1
  %33 = mul i32 %29, %32
  %34 = mul i32 %33, %31
  %35 = mul i32 %34, %30
  switch i32 %24, label %39 [
    i32 1, label %36
    i32 2, label %37
    i32 3, label %38
  ]

36:                                               ; preds = %21
  store i32 %35, i32* %0, align 4
  br label %39

37:                                               ; preds = %21
  store i32 %35, i32* %1, align 4
  br label %39

38:                                               ; preds = %21
  store i32 %35, i32* %2, align 4
  br label %39

39:                                               ; preds = %38, %37, %36, %21, %13
  %40 = add nuw nsw i32 %14, 1
  %41 = icmp ne i32 %18, 0
  %42 = icmp ult i32 %40, 16
  %43 = and i1 %42, %41
  br i1 %43, label %13, label %99

44:                                               ; preds = %3
  %45 = icmp eq i32 %7, 1769238117
  %46 = icmp eq i32 %6, 1145913699
  %47 = and i1 %45, %46
  br i1 %47, label %52, label %66

48:                                               ; preds = %3
  %49 = icmp eq i32 %7, 1952801395
  %50 = icmp eq i32 %6, 561145204
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %66

52:                                               ; preds = %48, %44
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 -2147483643, i32 0) #11, !srcloc !60
  %54 = extractvalue { i32, i32, i32, i32 } %53, 2
  %55 = ashr i32 %54, 24
  %56 = shl nsw i32 %55, 10
  store i32 %56, i32* %0, align 4
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 -2147483642, i32 0) #11, !srcloc !61
  %58 = extractvalue { i32, i32, i32, i32 } %57, 2
  %59 = extractvalue { i32, i32, i32, i32 } %57, 3
  %60 = ashr i32 %58, 16
  %61 = shl nsw i32 %60, 10
  store i32 %61, i32* %1, align 4
  %62 = shl i32 %59, 1
  %63 = and i32 %62, 536346624
  store i32 %63, i32* %2, align 4
  br label %99

64:                                               ; preds = %3
  %65 = icmp sgt i32 %5, 3
  br i1 %65, label %66, label %98

66:                                               ; preds = %8, %44, %48, %64
  store i32 0, i32* %2, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %0, align 4
  br label %67

67:                                               ; preds = %93, %66
  %68 = phi i32 [ 0, %66 ], [ %94, %93 ]
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %68) #11, !srcloc !59
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1
  %72 = and i32 %70, 15
  %73 = or i32 %72, 2
  %74 = icmp eq i32 %73, 3
  br i1 %74, label %75, label %93

75:                                               ; preds = %67
  %76 = extractvalue { i32, i32, i32, i32 } %69, 2
  %77 = lshr i32 %70, 5
  %78 = and i32 %77, 7
  %79 = lshr i32 %71, 22
  %80 = lshr i32 %71, 12
  %81 = and i32 %80, 1023
  %82 = and i32 %71, 4095
  %83 = add nuw nsw i32 %79, 1
  %84 = add nuw nsw i32 %81, 1
  %85 = add nuw nsw i32 %82, 1
  %86 = add nsw i32 %76, 1
  %87 = mul i32 %83, %86
  %88 = mul i32 %87, %85
  %89 = mul i32 %88, %84
  switch i32 %78, label %93 [
    i32 1, label %90
    i32 2, label %91
    i32 3, label %92
  ]

90:                                               ; preds = %75
  store i32 %89, i32* %0, align 4
  br label %93

91:                                               ; preds = %75
  store i32 %89, i32* %1, align 4
  br label %93

92:                                               ; preds = %75
  store i32 %89, i32* %2, align 4
  br label %93

93:                                               ; preds = %92, %91, %90, %75, %67
  %94 = add nuw nsw i32 %68, 1
  %95 = icmp ne i32 %72, 0
  %96 = icmp ult i32 %94, 16
  %97 = and i1 %96, %95
  br i1 %97, label %67, label %99

98:                                               ; preds = %64
  tail call void @_ZN5Eigen8internal27queryCacheSizes_intel_codesERiS1_S1_(i32* dereferenceable(4) %0, i32* dereferenceable(4) %1, i32* dereferenceable(4) %2) #11
  br label %99

99:                                               ; preds = %39, %93, %98, %52
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal27queryCacheSizes_intel_codesERiS1_S1_(i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #8 comdat {
  %4 = alloca [4 x i32], align 16
  %5 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 1
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 2
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 3
  store i32 0, i32* %2, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %0, align 4
  %10 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 2, i32 0) #11, !srcloc !62
  %11 = extractvalue { i32, i32, i32, i32 } %10, 0
  %12 = extractvalue { i32, i32, i32, i32 } %10, 1
  %13 = extractvalue { i32, i32, i32, i32 } %10, 2
  %14 = extractvalue { i32, i32, i32, i32 } %10, 3
  store i32 %11, i32* %6, align 16
  store i32 %12, i32* %7, align 4
  store i32 %13, i32* %8, align 8
  store i32 %14, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %5, i64 2
  %16 = lshr i32 %11, 16
  %17 = trunc i32 %16 to i8
  br label %21

18:                                               ; preds = %86
  %19 = and i8 %87, 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %98, label %93

21:                                               ; preds = %90, %3
  %22 = phi i8 [ %17, %3 ], [ %92, %90 ]
  %23 = phi i64 [ 0, %3 ], [ %88, %90 ]
  %24 = phi i8 [ 0, %3 ], [ %87, %90 ]
  switch i8 %22, label %86 [
    i8 10, label %25
    i8 12, label %26
    i8 14, label %27
    i8 16, label %28
    i8 21, label %29
    i8 44, label %30
    i8 48, label %31
    i8 96, label %32
    i8 102, label %33
    i8 103, label %34
    i8 104, label %35
    i8 26, label %36
    i8 34, label %37
    i8 35, label %38
    i8 37, label %39
    i8 41, label %40
    i8 57, label %41
    i8 58, label %42
    i8 59, label %43
    i8 60, label %44
    i8 61, label %45
    i8 62, label %46
    i8 64, label %47
    i8 65, label %48
    i8 66, label %49
    i8 67, label %50
    i8 68, label %51
    i8 69, label %52
    i8 70, label %53
    i8 71, label %54
    i8 72, label %55
    i8 73, label %56
    i8 74, label %61
    i8 75, label %62
    i8 76, label %63
    i8 77, label %64
    i8 78, label %65
    i8 120, label %66
    i8 121, label %67
    i8 122, label %68
    i8 123, label %69
    i8 124, label %70
    i8 125, label %71
    i8 126, label %72
    i8 127, label %73
    i8 -128, label %74
    i8 -127, label %75
    i8 -126, label %76
    i8 -125, label %77
    i8 -124, label %78
    i8 -123, label %79
    i8 -122, label %80
    i8 -121, label %81
    i8 -120, label %82
    i8 -119, label %83
    i8 -118, label %84
    i8 -115, label %85
  ]

25:                                               ; preds = %21
  store i32 8, i32* %0, align 4
  br label %86

26:                                               ; preds = %21
  store i32 16, i32* %0, align 4
  br label %86

27:                                               ; preds = %21
  store i32 24, i32* %0, align 4
  br label %86

28:                                               ; preds = %21
  store i32 16, i32* %0, align 4
  br label %86

29:                                               ; preds = %21
  store i32 16, i32* %0, align 4
  br label %86

30:                                               ; preds = %21
  store i32 32, i32* %0, align 4
  br label %86

31:                                               ; preds = %21
  store i32 32, i32* %0, align 4
  br label %86

32:                                               ; preds = %21
  store i32 16, i32* %0, align 4
  br label %86

33:                                               ; preds = %21
  store i32 8, i32* %0, align 4
  br label %86

34:                                               ; preds = %21
  store i32 16, i32* %0, align 4
  br label %86

35:                                               ; preds = %21
  store i32 32, i32* %0, align 4
  br label %86

36:                                               ; preds = %21
  store i32 96, i32* %1, align 4
  br label %86

37:                                               ; preds = %21
  store i32 512, i32* %2, align 4
  br label %86

38:                                               ; preds = %21
  store i32 1024, i32* %2, align 4
  br label %86

39:                                               ; preds = %21
  store i32 2048, i32* %2, align 4
  br label %86

40:                                               ; preds = %21
  store i32 4096, i32* %2, align 4
  br label %86

41:                                               ; preds = %21
  store i32 128, i32* %1, align 4
  br label %86

42:                                               ; preds = %21
  store i32 192, i32* %1, align 4
  br label %86

43:                                               ; preds = %21
  store i32 128, i32* %1, align 4
  br label %86

44:                                               ; preds = %21
  store i32 256, i32* %1, align 4
  br label %86

45:                                               ; preds = %21
  store i32 384, i32* %1, align 4
  br label %86

46:                                               ; preds = %21
  store i32 512, i32* %1, align 4
  br label %86

47:                                               ; preds = %21
  store i32 0, i32* %1, align 4
  br label %86

48:                                               ; preds = %21
  store i32 128, i32* %1, align 4
  br label %86

49:                                               ; preds = %21
  store i32 256, i32* %1, align 4
  br label %86

50:                                               ; preds = %21
  store i32 512, i32* %1, align 4
  br label %86

51:                                               ; preds = %21
  store i32 1024, i32* %1, align 4
  br label %86

52:                                               ; preds = %21
  store i32 2048, i32* %1, align 4
  br label %86

53:                                               ; preds = %21
  store i32 4096, i32* %2, align 4
  br label %86

54:                                               ; preds = %21
  store i32 8192, i32* %2, align 4
  br label %86

55:                                               ; preds = %21
  store i32 3072, i32* %1, align 4
  br label %86

56:                                               ; preds = %21
  %57 = load i32, i32* %1, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %60, label %59

59:                                               ; preds = %56
  store i32 4096, i32* %2, align 4
  br label %86

60:                                               ; preds = %56
  store i32 4096, i32* %1, align 4
  store i32 4096, i32* %2, align 4
  br label %86

61:                                               ; preds = %21
  store i32 6144, i32* %2, align 4
  br label %86

62:                                               ; preds = %21
  store i32 8192, i32* %2, align 4
  br label %86

63:                                               ; preds = %21
  store i32 12288, i32* %2, align 4
  br label %86

64:                                               ; preds = %21
  store i32 16384, i32* %2, align 4
  br label %86

65:                                               ; preds = %21
  store i32 6144, i32* %1, align 4
  br label %86

66:                                               ; preds = %21
  store i32 1024, i32* %1, align 4
  br label %86

67:                                               ; preds = %21
  store i32 128, i32* %1, align 4
  br label %86

68:                                               ; preds = %21
  store i32 256, i32* %1, align 4
  br label %86

69:                                               ; preds = %21
  store i32 512, i32* %1, align 4
  br label %86

70:                                               ; preds = %21
  store i32 1024, i32* %1, align 4
  br label %86

71:                                               ; preds = %21
  store i32 2048, i32* %1, align 4
  br label %86

72:                                               ; preds = %21
  store i32 256, i32* %1, align 4
  br label %86

73:                                               ; preds = %21
  store i32 512, i32* %1, align 4
  br label %86

74:                                               ; preds = %21
  store i32 512, i32* %1, align 4
  br label %86

75:                                               ; preds = %21
  store i32 128, i32* %1, align 4
  br label %86

76:                                               ; preds = %21
  store i32 256, i32* %1, align 4
  br label %86

77:                                               ; preds = %21
  store i32 512, i32* %1, align 4
  br label %86

78:                                               ; preds = %21
  store i32 1024, i32* %1, align 4
  br label %86

79:                                               ; preds = %21
  store i32 2048, i32* %1, align 4
  br label %86

80:                                               ; preds = %21
  store i32 512, i32* %1, align 4
  br label %86

81:                                               ; preds = %21
  store i32 1024, i32* %1, align 4
  br label %86

82:                                               ; preds = %21
  store i32 2048, i32* %2, align 4
  br label %86

83:                                               ; preds = %21
  store i32 4096, i32* %2, align 4
  br label %86

84:                                               ; preds = %21
  store i32 8192, i32* %2, align 4
  br label %86

85:                                               ; preds = %21
  store i32 3072, i32* %2, align 4
  br label %86

86:                                               ; preds = %25, %26, %27, %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52, %53, %54, %55, %61, %62, %63, %64, %65, %66, %67, %68, %69, %70, %71, %72, %73, %74, %75, %76, %77, %78, %79, %80, %81, %82, %83, %84, %85, %60, %59, %21
  %87 = phi i8 [ %24, %21 ], [ %24, %85 ], [ %24, %84 ], [ %24, %83 ], [ %24, %82 ], [ %24, %81 ], [ %24, %80 ], [ %24, %79 ], [ %24, %78 ], [ %24, %77 ], [ %24, %76 ], [ %24, %75 ], [ %24, %74 ], [ %24, %73 ], [ %24, %72 ], [ %24, %71 ], [ %24, %70 ], [ %24, %69 ], [ %24, %68 ], [ %24, %67 ], [ %24, %66 ], [ %24, %65 ], [ %24, %64 ], [ %24, %63 ], [ %24, %62 ], [ %24, %61 ], [ %24, %59 ], [ 1, %60 ], [ %24, %55 ], [ %24, %54 ], [ %24, %53 ], [ %24, %52 ], [ %24, %51 ], [ %24, %50 ], [ %24, %49 ], [ %24, %48 ], [ %24, %47 ], [ %24, %46 ], [ %24, %45 ], [ %24, %44 ], [ %24, %43 ], [ %24, %42 ], [ %24, %41 ], [ %24, %40 ], [ %24, %39 ], [ %24, %38 ], [ %24, %37 ], [ %24, %36 ], [ %24, %35 ], [ %24, %34 ], [ %24, %33 ], [ %24, %32 ], [ %24, %31 ], [ %24, %30 ], [ %24, %29 ], [ %24, %28 ], [ %24, %27 ], [ %24, %26 ], [ %24, %25 ]
  %88 = add nuw nsw i64 %23, 1
  %89 = icmp eq i64 %88, 14
  br i1 %89, label %18, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds i8, i8* %15, i64 %88
  %92 = load i8, i8* %91, align 1
  br label %21

93:                                               ; preds = %18
  %94 = load i32, i32* %1, align 4
  %95 = load i32, i32* %2, align 4
  %96 = icmp eq i32 %94, %95
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  store i32 0, i32* %2, align 4
  br label %98

98:                                               ; preds = %18, %97, %93
  %99 = load i32, i32* %0, align 4
  %100 = shl nsw i32 %99, 10
  store i32 %100, i32* %0, align 4
  %101 = load i32, i32* %1, align 4
  %102 = shl nsw i32 %101, 10
  store i32 %102, i32* %1, align 4
  %103 = load i32, i32* %2, align 4
  %104 = shl nsw i32 %103, 10
  store i32 %104, i32* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal29general_matrix_matrix_productIlfLi1ELb0EfLi0ELb0ELi0ELi1EE3runElllPKflS4_lPfllfRNS0_15level3_blockingIffEEPNS0_16GemmParallelInfoIlEE(i64, i64, i64, float*, i64, float*, i64, float*, i64, i64, float, %"class.Eigen::internal::level3_blocking"* dereferenceable(40), %"struct.Eigen::internal::GemmParallelInfo"*) local_unnamed_addr #2 comdat align 2 {
  %14 = alloca %"struct.Eigen::internal::gemm_pack_lhs", align 1
  %15 = alloca %"struct.Eigen::internal::gemm_pack_rhs", align 1
  %16 = alloca %"struct.Eigen::internal::gebp_kernel", align 1
  %17 = alloca %"class.Eigen::internal::const_blas_data_mapper", align 8
  %18 = alloca %"class.Eigen::internal::const_blas_data_mapper.128", align 8
  %19 = alloca %"class.Eigen::internal::blas_data_mapper.275", align 8
  %20 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %11, i64 0, i32 4
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %11, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp slt i64 %23, %0
  %25 = select i1 %24, i64 %23, i64 %0
  %26 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %11, i64 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %27, %1
  %29 = select i1 %28, i64 %27, i64 %1
  %30 = getelementptr inbounds %"struct.Eigen::internal::gemm_pack_lhs", %"struct.Eigen::internal::gemm_pack_lhs"* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %30) #11
  store i8 -86, i8* %30, align 1
  %31 = getelementptr inbounds %"struct.Eigen::internal::gemm_pack_rhs", %"struct.Eigen::internal::gemm_pack_rhs"* %15, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %31) #11
  store i8 -86, i8* %31, align 1
  %32 = getelementptr inbounds %"struct.Eigen::internal::gebp_kernel", %"struct.Eigen::internal::gebp_kernel"* %16, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %32) #11
  store i8 -86, i8* %32, align 1
  %33 = mul nsw i64 %25, %21
  %34 = mul nsw i64 %29, %21
  %35 = icmp ugt i64 %33, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %13
  %37 = tail call i8* @_Znwm(i64 -1) #11
  br label %38

38:                                               ; preds = %13, %36
  %39 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %11, i64 0, i32 0
  %40 = load float*, float** %39, align 8
  %41 = icmp eq float* %40, null
  %42 = shl i64 %33, 2
  br i1 %41, label %43, label %70

43:                                               ; preds = %38
  %44 = icmp ult i64 %42, 131073
  br i1 %44, label %45, label %52

45:                                               ; preds = %43
  %46 = add nuw nsw i64 %42, 63
  %47 = alloca i8, i64 %46, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 -86, i64 %46, i1 false)
  %48 = ptrtoint i8* %47 to i64
  %49 = add i64 %48, 63
  %50 = and i64 %49, -64
  %51 = inttoptr i64 %50 to i8*
  br label %66

52:                                               ; preds = %43
  %53 = add i64 %42, 64
  %54 = tail call noalias i8* @malloc(i64 %53) #11
  %55 = icmp eq i8* %54, null
  br i1 %55, label %64, label %56

56:                                               ; preds = %52
  %57 = ptrtoint i8* %54 to i64
  %58 = add i64 %57, 64
  %59 = and i64 %58, -64
  %60 = inttoptr i64 %59 to i8*
  %61 = inttoptr i64 %59 to i8**
  %62 = getelementptr inbounds i8*, i8** %61, i64 -1
  store i8* %54, i8** %62, align 8
  %63 = icmp eq i64 %59, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %52, %56
  %65 = tail call i8* @_Znwm(i64 -1) #11
  br label %66

66:                                               ; preds = %64, %56, %45
  %67 = phi i8* [ %51, %45 ], [ %60, %56 ], [ null, %64 ]
  %68 = bitcast i8* %67 to float*
  %69 = load float*, float** %39, align 8
  br label %70

70:                                               ; preds = %38, %66
  %71 = phi float* [ %69, %66 ], [ %40, %38 ]
  %72 = phi float* [ %68, %66 ], [ %40, %38 ]
  %73 = icmp eq float* %71, null
  %74 = select i1 %73, float* %72, float* null
  %75 = icmp ult i64 %42, 131073
  %76 = icmp ugt i64 %34, 4611686018427387903
  br i1 %76, label %77, label %79

77:                                               ; preds = %70
  %78 = call i8* @_Znwm(i64 -1) #11
  br label %79

79:                                               ; preds = %70, %77
  %80 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %11, i64 0, i32 1
  %81 = load float*, float** %80, align 8
  %82 = icmp eq float* %81, null
  %83 = shl i64 %34, 2
  br i1 %82, label %84, label %111

84:                                               ; preds = %79
  %85 = icmp ult i64 %83, 131073
  br i1 %85, label %86, label %93

86:                                               ; preds = %84
  %87 = add nuw nsw i64 %83, 63
  %88 = alloca i8, i64 %87, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %88, i8 -86, i64 %87, i1 false)
  %89 = ptrtoint i8* %88 to i64
  %90 = add i64 %89, 63
  %91 = and i64 %90, -64
  %92 = inttoptr i64 %91 to i8*
  br label %107

93:                                               ; preds = %84
  %94 = add i64 %83, 64
  %95 = call noalias i8* @malloc(i64 %94) #11
  %96 = icmp eq i8* %95, null
  br i1 %96, label %105, label %97

97:                                               ; preds = %93
  %98 = ptrtoint i8* %95 to i64
  %99 = add i64 %98, 64
  %100 = and i64 %99, -64
  %101 = inttoptr i64 %100 to i8*
  %102 = inttoptr i64 %100 to i8**
  %103 = getelementptr inbounds i8*, i8** %102, i64 -1
  store i8* %95, i8** %103, align 8
  %104 = icmp eq i64 %100, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %93, %97
  %106 = call i8* @_Znwm(i64 -1) #11
  br label %107

107:                                              ; preds = %105, %97, %86
  %108 = phi i8* [ %92, %86 ], [ %101, %97 ], [ null, %105 ]
  %109 = bitcast i8* %108 to float*
  %110 = load float*, float** %80, align 8
  br label %111

111:                                              ; preds = %79, %107
  %112 = phi float* [ %110, %107 ], [ %81, %79 ]
  %113 = phi float* [ %109, %107 ], [ %81, %79 ]
  %114 = icmp eq float* %112, null
  %115 = select i1 %114, float* %113, float* null
  %116 = icmp ult i64 %83, 131073
  %117 = icmp eq i64 %21, %2
  %118 = and i1 %117, %24
  %119 = xor i1 %118, true
  %120 = or i1 %28, %119
  %121 = icmp sgt i64 %0, 0
  br i1 %121, label %122, label %136

122:                                              ; preds = %111
  %123 = icmp sgt i64 %2, 0
  %124 = bitcast %"class.Eigen::internal::const_blas_data_mapper"* %17 to i8*
  %125 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %17, i64 0, i32 0, i32 0
  %126 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %17, i64 0, i32 0, i32 1
  %127 = icmp sgt i64 %1, 0
  %128 = bitcast %"class.Eigen::internal::const_blas_data_mapper.128"* %18 to i8*
  %129 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %18, i64 0, i32 0, i32 0
  %130 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %18, i64 0, i32 0, i32 1
  %131 = bitcast %"class.Eigen::internal::blas_data_mapper.275"* %19 to i8*
  %132 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %19, i64 0, i32 0
  %133 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %19, i64 0, i32 1
  br label %151

134:                                              ; preds = %161, %151
  %135 = icmp slt i64 %153, %0
  br i1 %135, label %151, label %136

136:                                              ; preds = %134, %111
  %137 = icmp eq float* %115, null
  %138 = or i1 %116, %137
  br i1 %138, label %143, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds float, float* %115, i64 -2
  %141 = bitcast float* %140 to i8**
  %142 = load i8*, i8** %141, align 8
  call void @free(i8* %142) #11
  br label %143

143:                                              ; preds = %136, %139
  %144 = icmp eq float* %74, null
  %145 = or i1 %75, %144
  br i1 %145, label %150, label %146

146:                                              ; preds = %143
  %147 = getelementptr inbounds float, float* %74, i64 -2
  %148 = bitcast float* %147 to i8**
  %149 = load i8*, i8** %148, align 8
  call void @free(i8* %149) #11
  br label %150

150:                                              ; preds = %143, %146
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %32) #11
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %31) #11
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %30) #11
  ret void

151:                                              ; preds = %122, %134
  %152 = phi i64 [ 0, %122 ], [ %153, %134 ]
  %153 = add nsw i64 %152, %25
  %154 = icmp sgt i64 %153, %0
  %155 = select i1 %154, i64 %0, i64 %153
  %156 = sub nsw i64 %155, %152
  br i1 %123, label %157, label %134

157:                                              ; preds = %151
  %158 = mul nsw i64 %152, %4
  %159 = icmp eq i64 %152, 0
  %160 = or i1 %120, %159
  br label %163

161:                                              ; preds = %181, %163
  %162 = icmp slt i64 %165, %2
  br i1 %162, label %163, label %134

163:                                              ; preds = %157, %161
  %164 = phi i64 [ 0, %157 ], [ %165, %161 ]
  %165 = add nsw i64 %164, %21
  %166 = icmp sgt i64 %165, %2
  %167 = select i1 %166, i64 %2, i64 %165
  %168 = sub nsw i64 %167, %164
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %124) #11
  %169 = add nsw i64 %164, %158
  %170 = getelementptr inbounds float, float* %3, i64 %169
  store float* %170, float** %125, align 8
  store i64 %4, i64* %126, align 8
  call void @_ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi8ELi4EDv4_fLi1ELb0ELb0EEclEPfRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs"* nonnull %14, float* %72, %"class.Eigen::internal::const_blas_data_mapper"* nonnull dereferenceable(16) %17, i64 %168, i64 %156, i64 0, i64 0)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %124) #11
  br i1 %127, label %171, label %161

171:                                              ; preds = %163, %181
  %172 = phi i64 [ %173, %181 ], [ 0, %163 ]
  %173 = add nsw i64 %172, %29
  %174 = icmp sgt i64 %173, %1
  %175 = select i1 %174, i64 %1, i64 %173
  %176 = sub nsw i64 %175, %172
  br i1 %160, label %177, label %181

177:                                              ; preds = %171
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %128) #11
  %178 = mul nsw i64 %172, %6
  %179 = add nsw i64 %178, %164
  %180 = getelementptr inbounds float, float* %5, i64 %179
  store float* %180, float** %129, align 8
  store i64 %6, i64* %130, align 8
  call void @_ZN5Eigen8internal13gemm_pack_rhsIflNS0_22const_blas_data_mapperIflLi0EEELi4ELi0ELb0ELb0EEclEPfRKS3_llll(%"struct.Eigen::internal::gemm_pack_rhs"* nonnull %15, float* %113, %"class.Eigen::internal::const_blas_data_mapper.128"* nonnull dereferenceable(16) %18, i64 %168, i64 %176, i64 0, i64 0)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %128) #11
  br label %181

181:                                              ; preds = %171, %177
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %131) #11
  %182 = mul nsw i64 %172, %9
  %183 = add nsw i64 %182, %152
  %184 = getelementptr inbounds float, float* %7, i64 %183
  store float* %184, float** %132, align 8
  store i64 %9, i64* %133, align 8
  call void @_ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi8ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll(%"struct.Eigen::internal::gebp_kernel"* nonnull %16, %"class.Eigen::internal::blas_data_mapper.275"* nonnull dereferenceable(16) %19, float* %72, float* %113, i64 %156, i64 %168, i64 %176, float %10, i64 -1, i64 -1, i64 0, i64 0)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %131) #11
  %185 = icmp slt i64 %173, %1
  br i1 %185, label %171, label %161
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi8ELi4EDv4_fLi1ELb0ELb0EEclEPfRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs"*, float*, %"class.Eigen::internal::const_blas_data_mapper"* dereferenceable(16), i64, i64, i64, i64) local_unnamed_addr #3 comdat align 2 {
  tail call void asm sideeffect "#EIGEN PRODUCT PACK LHS", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !63
  %8 = sdiv i64 %3, 4
  %9 = shl nsw i64 %8, 2
  %10 = icmp slt i64 %3, 4
  %11 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %2, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %2, i64 0, i32 0, i32 1
  br label %21

13:                                               ; preds = %149
  %14 = icmp slt i64 %150, %4
  br i1 %14, label %15, label %205

15:                                               ; preds = %13
  %16 = icmp sgt i64 %3, 0
  %17 = and i64 %3, 1
  %18 = icmp eq i64 %3, 1
  %19 = sub i64 %3, %17
  %20 = icmp eq i64 %17, 0
  br label %154

21:                                               ; preds = %149, %7
  %22 = phi i64 [ 8, %7 ], [ %152, %149 ]
  %23 = phi i64 [ 0, %7 ], [ %151, %149 ]
  %24 = phi i64 [ 0, %7 ], [ %150, %149 ]
  %25 = sub nsw i64 %4, %24
  %26 = srem i64 %25, %22
  %27 = sub i64 %4, %26
  %28 = icmp slt i64 %24, %27
  br i1 %28, label %29, label %149

29:                                               ; preds = %21
  %30 = shl nsw i64 %22, 2
  %31 = add nsw i64 %22, -3
  %32 = shl nuw nsw i64 %22, 1
  %33 = mul nuw nsw i64 %22, 3
  %34 = icmp ugt i64 %22, 4
  %35 = icmp ugt i64 %31, 4
  br label %36

36:                                               ; preds = %29, %145
  %37 = phi i64 [ %23, %29 ], [ %146, %145 ]
  %38 = phi i64 [ %24, %29 ], [ %147, %145 ]
  br i1 %10, label %92, label %39

39:                                               ; preds = %36
  %40 = add i64 %38, 1
  %41 = add i64 %38, 2
  %42 = add i64 %38, 3
  %43 = add i64 %38, 4
  %44 = add i64 %38, 5
  %45 = add i64 %38, 6
  %46 = add i64 %38, 7
  br label %47

47:                                               ; preds = %39, %88
  %48 = phi i64 [ %89, %88 ], [ %37, %39 ]
  %49 = phi i64 [ %90, %88 ], [ 0, %39 ]
  %50 = getelementptr inbounds float, float* %1, i64 %48
  %51 = load float*, float** %11, align 8
  %52 = load i64, i64* %12, align 8
  %53 = mul nsw i64 %52, %38
  %54 = add nsw i64 %53, %49
  %55 = getelementptr inbounds float, float* %51, i64 %54
  %56 = bitcast float* %55 to <4 x float>*
  %57 = load <4 x float>, <4 x float>* %56, align 1
  %58 = mul nsw i64 %52, %40
  %59 = add nsw i64 %58, %49
  %60 = getelementptr inbounds float, float* %51, i64 %59
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 1
  %63 = mul nsw i64 %52, %41
  %64 = add nsw i64 %63, %49
  %65 = getelementptr inbounds float, float* %51, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 1
  %68 = mul nsw i64 %52, %42
  %69 = add nsw i64 %68, %49
  %70 = getelementptr inbounds float, float* %51, i64 %69
  %71 = bitcast float* %70 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 1
  %73 = shufflevector <4 x float> %57, <4 x float> %62, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %74 = shufflevector <4 x float> %67, <4 x float> %72, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %75 = shufflevector <4 x float> %57, <4 x float> %62, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %76 = shufflevector <4 x float> %67, <4 x float> %72, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %77 = shufflevector <4 x float> %73, <4 x float> %74, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %78 = shufflevector <4 x float> %74, <4 x float> %73, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %79 = shufflevector <4 x float> %75, <4 x float> %76, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = shufflevector <4 x float> %76, <4 x float> %75, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %81 = bitcast float* %50 to <4 x float>*
  store <4 x float> %77, <4 x float>* %81, align 16
  %82 = getelementptr inbounds float, float* %50, i64 %22
  %83 = bitcast float* %82 to <4 x float>*
  store <4 x float> %78, <4 x float>* %83, align 16
  %84 = getelementptr inbounds float, float* %50, i64 %32
  %85 = bitcast float* %84 to <4 x float>*
  store <4 x float> %79, <4 x float>* %85, align 16
  %86 = getelementptr inbounds float, float* %50, i64 %33
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %80, <4 x float>* %87, align 16
  br i1 %34, label %206, label %88

88:                                               ; preds = %206, %47
  %89 = add nsw i64 %48, %30
  %90 = add nuw nsw i64 %49, 4
  %91 = icmp slt i64 %90, %9
  br i1 %91, label %47, label %92

92:                                               ; preds = %88, %36
  %93 = phi i64 [ 0, %36 ], [ %90, %88 ]
  %94 = phi i64 [ %37, %36 ], [ %89, %88 ]
  %95 = icmp slt i64 %93, %3
  br i1 %95, label %96, label %145

96:                                               ; preds = %92
  %97 = add nsw i64 %38, 1
  %98 = add nsw i64 %38, 2
  %99 = add nsw i64 %38, 3
  %100 = add nsw i64 %38, 4
  %101 = add nsw i64 %38, 5
  %102 = add nsw i64 %38, 6
  %103 = add nsw i64 %38, 7
  br label %104

104:                                              ; preds = %96, %141
  %105 = phi i64 [ %142, %141 ], [ %94, %96 ]
  %106 = phi i64 [ %143, %141 ], [ %93, %96 ]
  %107 = load float*, float** %11, align 8
  %108 = load i64, i64* %12, align 8
  %109 = mul nsw i64 %108, %38
  %110 = add nsw i64 %109, %106
  %111 = getelementptr inbounds float, float* %107, i64 %110
  %112 = bitcast float* %111 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = mul nsw i64 %108, %97
  %115 = add nsw i64 %114, %106
  %116 = getelementptr inbounds float, float* %107, i64 %115
  %117 = bitcast float* %116 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = mul nsw i64 %108, %98
  %120 = add nsw i64 %119, %106
  %121 = getelementptr inbounds float, float* %107, i64 %120
  %122 = bitcast float* %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = mul nsw i64 %108, %99
  %125 = add nsw i64 %124, %106
  %126 = getelementptr inbounds float, float* %107, i64 %125
  %127 = bitcast float* %126 to i32*
  %128 = load i32, i32* %127, align 4
  %129 = add nsw i64 %105, 1
  %130 = getelementptr inbounds float, float* %1, i64 %105
  %131 = bitcast float* %130 to i32*
  store i32 %113, i32* %131, align 4
  %132 = add nsw i64 %105, 2
  %133 = getelementptr inbounds float, float* %1, i64 %129
  %134 = bitcast float* %133 to i32*
  store i32 %118, i32* %134, align 4
  %135 = add nsw i64 %105, 3
  %136 = getelementptr inbounds float, float* %1, i64 %132
  %137 = bitcast float* %136 to i32*
  store i32 %123, i32* %137, align 4
  %138 = add nsw i64 %105, 4
  %139 = getelementptr inbounds float, float* %1, i64 %135
  %140 = bitcast float* %139 to i32*
  store i32 %128, i32* %140, align 4
  br i1 %35, label %245, label %141

141:                                              ; preds = %245, %104
  %142 = phi i64 [ %138, %104 ], [ %277, %245 ]
  %143 = add nuw nsw i64 %106, 1
  %144 = icmp eq i64 %143, %3
  br i1 %144, label %145, label %104

145:                                              ; preds = %141, %92
  %146 = phi i64 [ %94, %92 ], [ %142, %141 ]
  %147 = add nsw i64 %38, %22
  %148 = icmp slt i64 %147, %27
  br i1 %148, label %36, label %149

149:                                              ; preds = %145, %21
  %150 = phi i64 [ %24, %21 ], [ %147, %145 ]
  %151 = phi i64 [ %23, %21 ], [ %146, %145 ]
  %152 = add nsw i64 %22, -4
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %13, label %21

154:                                              ; preds = %173, %15
  %155 = phi i64 [ %151, %15 ], [ %174, %173 ]
  %156 = phi i64 [ %150, %15 ], [ %175, %173 ]
  br i1 %16, label %157, label %173

157:                                              ; preds = %154
  br i1 %18, label %158, label %177

158:                                              ; preds = %177, %157
  %159 = phi i64 [ undef, %157 ], [ %199, %177 ]
  %160 = phi i64 [ 0, %157 ], [ %202, %177 ]
  %161 = phi i64 [ %155, %157 ], [ %199, %177 ]
  br i1 %20, label %173, label %162

162:                                              ; preds = %158
  %163 = load float*, float** %11, align 8
  %164 = load i64, i64* %12, align 8
  %165 = mul nsw i64 %164, %156
  %166 = add nsw i64 %165, %160
  %167 = getelementptr inbounds float, float* %163, i64 %166
  %168 = bitcast float* %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = getelementptr inbounds float, float* %1, i64 %161
  %171 = bitcast float* %170 to i32*
  store i32 %169, i32* %171, align 4
  %172 = add nsw i64 %161, 1
  br label %173

173:                                              ; preds = %162, %158, %154
  %174 = phi i64 [ %155, %154 ], [ %159, %158 ], [ %172, %162 ]
  %175 = add nsw i64 %156, 1
  %176 = icmp eq i64 %175, %4
  br i1 %176, label %205, label %154

177:                                              ; preds = %157, %177
  %178 = phi i64 [ %202, %177 ], [ 0, %157 ]
  %179 = phi i64 [ %199, %177 ], [ %155, %157 ]
  %180 = phi i64 [ %203, %177 ], [ %19, %157 ]
  %181 = load float*, float** %11, align 8
  %182 = load i64, i64* %12, align 8
  %183 = mul nsw i64 %182, %156
  %184 = add nsw i64 %183, %178
  %185 = getelementptr inbounds float, float* %181, i64 %184
  %186 = bitcast float* %185 to i32*
  %187 = load i32, i32* %186, align 4
  %188 = add nsw i64 %179, 1
  %189 = getelementptr inbounds float, float* %1, i64 %179
  %190 = bitcast float* %189 to i32*
  store i32 %187, i32* %190, align 4
  %191 = or i64 %178, 1
  %192 = load float*, float** %11, align 8
  %193 = load i64, i64* %12, align 8
  %194 = mul nsw i64 %193, %156
  %195 = add nsw i64 %194, %191
  %196 = getelementptr inbounds float, float* %192, i64 %195
  %197 = bitcast float* %196 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = add nsw i64 %179, 2
  %200 = getelementptr inbounds float, float* %1, i64 %188
  %201 = bitcast float* %200 to i32*
  store i32 %198, i32* %201, align 4
  %202 = add nuw nsw i64 %178, 2
  %203 = add i64 %180, -2
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %158, label %177

205:                                              ; preds = %173, %13
  ret void

206:                                              ; preds = %47
  %207 = load float*, float** %11, align 8
  %208 = load i64, i64* %12, align 8
  %209 = mul nsw i64 %208, %43
  %210 = add nsw i64 %209, %49
  %211 = getelementptr inbounds float, float* %207, i64 %210
  %212 = bitcast float* %211 to <4 x float>*
  %213 = load <4 x float>, <4 x float>* %212, align 1
  %214 = mul nsw i64 %208, %44
  %215 = add nsw i64 %214, %49
  %216 = getelementptr inbounds float, float* %207, i64 %215
  %217 = bitcast float* %216 to <4 x float>*
  %218 = load <4 x float>, <4 x float>* %217, align 1
  %219 = mul nsw i64 %208, %45
  %220 = add nsw i64 %219, %49
  %221 = getelementptr inbounds float, float* %207, i64 %220
  %222 = bitcast float* %221 to <4 x float>*
  %223 = load <4 x float>, <4 x float>* %222, align 1
  %224 = mul nsw i64 %208, %46
  %225 = add nsw i64 %224, %49
  %226 = getelementptr inbounds float, float* %207, i64 %225
  %227 = bitcast float* %226 to <4 x float>*
  %228 = load <4 x float>, <4 x float>* %227, align 1
  %229 = shufflevector <4 x float> %213, <4 x float> %218, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %230 = shufflevector <4 x float> %223, <4 x float> %228, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %231 = shufflevector <4 x float> %213, <4 x float> %218, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %232 = shufflevector <4 x float> %223, <4 x float> %228, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %233 = shufflevector <4 x float> %229, <4 x float> %230, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %234 = shufflevector <4 x float> %230, <4 x float> %229, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %235 = shufflevector <4 x float> %231, <4 x float> %232, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %236 = shufflevector <4 x float> %232, <4 x float> %231, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %237 = getelementptr inbounds float, float* %50, i64 4
  %238 = bitcast float* %237 to <4 x float>*
  store <4 x float> %233, <4 x float>* %238, align 16
  %239 = getelementptr inbounds float, float* %237, i64 %22
  %240 = bitcast float* %239 to <4 x float>*
  store <4 x float> %234, <4 x float>* %240, align 16
  %241 = getelementptr inbounds float, float* %237, i64 %32
  %242 = bitcast float* %241 to <4 x float>*
  store <4 x float> %235, <4 x float>* %242, align 16
  %243 = getelementptr inbounds float, float* %237, i64 %33
  %244 = bitcast float* %243 to <4 x float>*
  store <4 x float> %236, <4 x float>* %244, align 16
  br label %88

245:                                              ; preds = %104
  %246 = load float*, float** %11, align 8
  %247 = load i64, i64* %12, align 8
  %248 = mul nsw i64 %247, %100
  %249 = add nsw i64 %248, %106
  %250 = getelementptr inbounds float, float* %246, i64 %249
  %251 = bitcast float* %250 to i32*
  %252 = load i32, i32* %251, align 4
  %253 = mul nsw i64 %247, %101
  %254 = add nsw i64 %253, %106
  %255 = getelementptr inbounds float, float* %246, i64 %254
  %256 = bitcast float* %255 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = mul nsw i64 %247, %102
  %259 = add nsw i64 %258, %106
  %260 = getelementptr inbounds float, float* %246, i64 %259
  %261 = bitcast float* %260 to i32*
  %262 = load i32, i32* %261, align 4
  %263 = mul nsw i64 %247, %103
  %264 = add nsw i64 %263, %106
  %265 = getelementptr inbounds float, float* %246, i64 %264
  %266 = bitcast float* %265 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = add nsw i64 %105, 5
  %269 = getelementptr inbounds float, float* %1, i64 %138
  %270 = bitcast float* %269 to i32*
  store i32 %252, i32* %270, align 4
  %271 = add nsw i64 %105, 6
  %272 = getelementptr inbounds float, float* %1, i64 %268
  %273 = bitcast float* %272 to i32*
  store i32 %257, i32* %273, align 4
  %274 = add nsw i64 %105, 7
  %275 = getelementptr inbounds float, float* %1, i64 %271
  %276 = bitcast float* %275 to i32*
  store i32 %262, i32* %276, align 4
  %277 = add nsw i64 %105, 8
  %278 = getelementptr inbounds float, float* %1, i64 %274
  %279 = bitcast float* %278 to i32*
  store i32 %267, i32* %279, align 4
  br label %141
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal13gemm_pack_rhsIflNS0_22const_blas_data_mapperIflLi0EEELi4ELi0ELb0ELb0EEclEPfRKS3_llll(%"struct.Eigen::internal::gemm_pack_rhs"*, float*, %"class.Eigen::internal::const_blas_data_mapper.128"* dereferenceable(16), i64, i64, i64, i64) local_unnamed_addr #3 comdat align 2 {
  tail call void asm sideeffect "#EIGEN PRODUCT PACK RHS COLMAJOR", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !64
  %8 = sdiv i64 %4, 4
  %9 = shl nsw i64 %8, 2
  %10 = sdiv i64 %3, 4
  %11 = shl nsw i64 %10, 2
  %12 = icmp sgt i64 %4, 3
  br i1 %12, label %13, label %20

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %2, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %2, i64 0, i32 0, i32 1
  %16 = icmp sgt i64 %3, 3
  %17 = shl i64 %3, 2
  %18 = getelementptr float, float* %1, i64 %17
  %19 = sub i64 0, %3
  br label %41

20:                                               ; preds = %330, %7
  %21 = phi i64 [ 0, %7 ], [ %331, %330 ]
  %22 = icmp slt i64 %9, %4
  br i1 %22, label %23, label %335

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %2, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.128", %"class.Eigen::internal::const_blas_data_mapper.128"* %2, i64 0, i32 0, i32 1
  %26 = icmp sgt i64 %3, 0
  %27 = getelementptr float, float* %1, i64 %3
  %28 = shl i64 %8, 4
  %29 = add i64 %3, -8
  %30 = lshr i64 %29, 3
  %31 = add nuw nsw i64 %30, 1
  %32 = icmp ult i64 %3, 8
  %33 = and i64 %3, -8
  %34 = and i64 %31, 3
  %35 = icmp ult i64 %29, 24
  %36 = sub nsw i64 %31, %34
  %37 = icmp eq i64 %34, 0
  %38 = icmp eq i64 %33, %3
  %39 = and i64 %3, 3
  %40 = icmp eq i64 %39, 0
  br label %336

41:                                               ; preds = %13, %330
  %42 = phi i64 [ 0, %13 ], [ %334, %330 ]
  %43 = phi i64 [ 0, %13 ], [ %332, %330 ]
  %44 = phi i64 [ 0, %13 ], [ %331, %330 ]
  %45 = shl i64 %42, 4
  %46 = or i64 %45, 12
  %47 = or i64 %45, 8
  %48 = or i64 %45, 4
  %49 = load float*, float** %14, align 8
  %50 = load i64, i64* %15, align 8
  %51 = mul nsw i64 %50, %43
  %52 = getelementptr inbounds float, float* %49, i64 %51
  %53 = or i64 %43, 1
  %54 = mul nsw i64 %50, %53
  %55 = getelementptr inbounds float, float* %49, i64 %54
  %56 = or i64 %43, 2
  %57 = mul nsw i64 %50, %56
  %58 = getelementptr inbounds float, float* %49, i64 %57
  %59 = or i64 %43, 3
  %60 = mul nsw i64 %50, %59
  %61 = getelementptr inbounds float, float* %49, i64 %60
  br i1 %16, label %242, label %62

62:                                               ; preds = %242, %41
  %63 = phi i64 [ %44, %41 ], [ %273, %242 ]
  %64 = phi i64 [ 0, %41 ], [ %274, %242 ]
  %65 = icmp slt i64 %64, %3
  br i1 %65, label %66, label %330

66:                                               ; preds = %62
  %67 = sub i64 %3, %64
  %68 = icmp ult i64 %67, 4
  br i1 %68, label %69, label %107

69:                                               ; preds = %240, %107, %66
  %70 = phi i64 [ %64, %107 ], [ %64, %66 ], [ %159, %240 ]
  %71 = phi i64 [ %63, %107 ], [ %63, %66 ], [ %161, %240 ]
  %72 = sub i64 %3, %70
  %73 = xor i64 %70, -1
  %74 = and i64 %72, 1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %102, label %76

76:                                               ; preds = %69
  %77 = getelementptr inbounds float, float* %52, i64 %70
  %78 = bitcast float* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds float, float* %1, i64 %71
  %81 = bitcast float* %80 to i32*
  store i32 %79, i32* %81, align 4
  %82 = getelementptr inbounds float, float* %55, i64 %70
  %83 = bitcast float* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = add nsw i64 %71, 1
  %86 = getelementptr inbounds float, float* %1, i64 %85
  %87 = bitcast float* %86 to i32*
  store i32 %84, i32* %87, align 4
  %88 = getelementptr inbounds float, float* %58, i64 %70
  %89 = bitcast float* %88 to i32*
  %90 = load i32, i32* %89, align 4
  %91 = add nsw i64 %71, 2
  %92 = getelementptr inbounds float, float* %1, i64 %91
  %93 = bitcast float* %92 to i32*
  store i32 %90, i32* %93, align 4
  %94 = getelementptr inbounds float, float* %61, i64 %70
  %95 = bitcast float* %94 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = add nsw i64 %71, 3
  %98 = getelementptr inbounds float, float* %1, i64 %97
  %99 = bitcast float* %98 to i32*
  store i32 %96, i32* %99, align 4
  %100 = add nsw i64 %71, 4
  %101 = add nuw nsw i64 %70, 1
  br label %102

102:                                              ; preds = %76, %69
  %103 = phi i64 [ %100, %76 ], [ undef, %69 ]
  %104 = phi i64 [ %101, %76 ], [ %70, %69 ]
  %105 = phi i64 [ %100, %76 ], [ %71, %69 ]
  %106 = icmp eq i64 %73, %19
  br i1 %106, label %330, label %276

107:                                              ; preds = %66
  %108 = getelementptr float, float* %1, i64 %63
  %109 = bitcast float* %108 to i8*
  %110 = shl i64 %64, 2
  %111 = sub i64 %63, %110
  %112 = getelementptr float, float* %18, i64 %111
  %113 = bitcast float* %112 to i8*
  %114 = getelementptr float, float* %49, i64 %64
  %115 = bitcast float* %114 to i8*
  %116 = mul i64 %50, %46
  %117 = getelementptr i8, i8* %115, i64 %116
  %118 = getelementptr float, float* %49, i64 %3
  %119 = bitcast float* %118 to i8*
  %120 = getelementptr i8, i8* %119, i64 %116
  %121 = getelementptr float, float* %49, i64 %64
  %122 = bitcast float* %121 to i8*
  %123 = mul i64 %50, %47
  %124 = getelementptr i8, i8* %122, i64 %123
  %125 = getelementptr float, float* %49, i64 %3
  %126 = bitcast float* %125 to i8*
  %127 = getelementptr i8, i8* %126, i64 %123
  %128 = getelementptr float, float* %49, i64 %64
  %129 = bitcast float* %128 to i8*
  %130 = mul i64 %50, %48
  %131 = getelementptr i8, i8* %129, i64 %130
  %132 = getelementptr float, float* %49, i64 %3
  %133 = bitcast float* %132 to i8*
  %134 = getelementptr i8, i8* %133, i64 %130
  %135 = getelementptr float, float* %49, i64 %64
  %136 = bitcast float* %135 to i8*
  %137 = mul i64 %50, %45
  %138 = getelementptr i8, i8* %136, i64 %137
  %139 = getelementptr float, float* %49, i64 %3
  %140 = bitcast float* %139 to i8*
  %141 = getelementptr i8, i8* %140, i64 %137
  %142 = icmp ugt i8* %120, %109
  %143 = icmp ult i8* %117, %113
  %144 = and i1 %142, %143
  %145 = icmp ugt i8* %127, %109
  %146 = icmp ult i8* %124, %113
  %147 = and i1 %145, %146
  %148 = or i1 %144, %147
  %149 = icmp ugt i8* %134, %109
  %150 = icmp ult i8* %131, %113
  %151 = and i1 %149, %150
  %152 = or i1 %148, %151
  %153 = icmp ugt i8* %141, %109
  %154 = icmp ult i8* %138, %113
  %155 = and i1 %153, %154
  %156 = or i1 %152, %155
  br i1 %156, label %69, label %157

157:                                              ; preds = %107
  %158 = and i64 %67, -4
  %159 = add i64 %64, %158
  %160 = shl i64 %158, 2
  %161 = add i64 %63, %160
  %162 = add i64 %158, -4
  %163 = lshr exact i64 %162, 2
  %164 = add nuw nsw i64 %163, 1
  %165 = and i64 %164, 1
  %166 = icmp eq i64 %162, 0
  br i1 %166, label %216, label %167

167:                                              ; preds = %157
  %168 = sub nuw nsw i64 %164, %165
  br label %169

169:                                              ; preds = %169, %167
  %170 = phi i64 [ 0, %167 ], [ %213, %169 ]
  %171 = phi i64 [ %168, %167 ], [ %214, %169 ]
  %172 = add i64 %64, %170
  %173 = shl i64 %170, 2
  %174 = add i64 %63, %173
  %175 = getelementptr inbounds float, float* %52, i64 %172
  %176 = bitcast float* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4, !alias.scope !65
  %178 = getelementptr inbounds float, float* %55, i64 %172
  %179 = bitcast float* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4, !alias.scope !68
  %181 = getelementptr inbounds float, float* %58, i64 %172
  %182 = bitcast float* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 4, !alias.scope !70
  %184 = getelementptr inbounds float, float* %61, i64 %172
  %185 = bitcast float* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4, !alias.scope !72
  %187 = getelementptr inbounds float, float* %1, i64 %174
  %188 = bitcast float* %187 to <16 x i32>*
  %189 = shufflevector <4 x i32> %177, <4 x i32> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %190 = shufflevector <4 x i32> %183, <4 x i32> %186, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %191 = shufflevector <8 x i32> %189, <8 x i32> %190, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i32> %191, <16 x i32>* %188, align 4
  %192 = or i64 %170, 4
  %193 = add i64 %64, %192
  %194 = shl i64 %192, 2
  %195 = add i64 %63, %194
  %196 = getelementptr inbounds float, float* %52, i64 %193
  %197 = bitcast float* %196 to <4 x i32>*
  %198 = load <4 x i32>, <4 x i32>* %197, align 4, !alias.scope !65
  %199 = getelementptr inbounds float, float* %55, i64 %193
  %200 = bitcast float* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4, !alias.scope !68
  %202 = getelementptr inbounds float, float* %58, i64 %193
  %203 = bitcast float* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 4, !alias.scope !70
  %205 = getelementptr inbounds float, float* %61, i64 %193
  %206 = bitcast float* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 4, !alias.scope !72
  %208 = getelementptr inbounds float, float* %1, i64 %195
  %209 = bitcast float* %208 to <16 x i32>*
  %210 = shufflevector <4 x i32> %198, <4 x i32> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %211 = shufflevector <4 x i32> %204, <4 x i32> %207, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %212 = shufflevector <8 x i32> %210, <8 x i32> %211, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i32> %212, <16 x i32>* %209, align 4
  %213 = add i64 %170, 8
  %214 = add i64 %171, -2
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %169, !llvm.loop !74

216:                                              ; preds = %169, %157
  %217 = phi i64 [ 0, %157 ], [ %213, %169 ]
  %218 = icmp eq i64 %165, 0
  br i1 %218, label %240, label %219

219:                                              ; preds = %216
  %220 = add i64 %64, %217
  %221 = shl i64 %217, 2
  %222 = add i64 %63, %221
  %223 = getelementptr inbounds float, float* %52, i64 %220
  %224 = bitcast float* %223 to <4 x i32>*
  %225 = load <4 x i32>, <4 x i32>* %224, align 4, !alias.scope !65
  %226 = getelementptr inbounds float, float* %55, i64 %220
  %227 = bitcast float* %226 to <4 x i32>*
  %228 = load <4 x i32>, <4 x i32>* %227, align 4, !alias.scope !68
  %229 = getelementptr inbounds float, float* %58, i64 %220
  %230 = bitcast float* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 4, !alias.scope !70
  %232 = getelementptr inbounds float, float* %61, i64 %220
  %233 = bitcast float* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4, !alias.scope !72
  %235 = getelementptr inbounds float, float* %1, i64 %222
  %236 = bitcast float* %235 to <16 x i32>*
  %237 = shufflevector <4 x i32> %225, <4 x i32> %228, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %238 = shufflevector <4 x i32> %231, <4 x i32> %234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %239 = shufflevector <8 x i32> %237, <8 x i32> %238, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i32> %239, <16 x i32>* %236, align 4
  br label %240

240:                                              ; preds = %216, %219
  %241 = icmp eq i64 %67, %158
  br i1 %241, label %330, label %69

242:                                              ; preds = %41, %242
  %243 = phi i64 [ %274, %242 ], [ 0, %41 ]
  %244 = phi i64 [ %273, %242 ], [ %44, %41 ]
  %245 = getelementptr inbounds float, float* %52, i64 %243
  %246 = bitcast float* %245 to <4 x float>*
  %247 = load <4 x float>, <4 x float>* %246, align 1
  %248 = getelementptr inbounds float, float* %55, i64 %243
  %249 = bitcast float* %248 to <4 x float>*
  %250 = load <4 x float>, <4 x float>* %249, align 1
  %251 = getelementptr inbounds float, float* %58, i64 %243
  %252 = bitcast float* %251 to <4 x float>*
  %253 = load <4 x float>, <4 x float>* %252, align 1
  %254 = getelementptr inbounds float, float* %61, i64 %243
  %255 = bitcast float* %254 to <4 x float>*
  %256 = load <4 x float>, <4 x float>* %255, align 1
  %257 = shufflevector <4 x float> %247, <4 x float> %250, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %258 = shufflevector <4 x float> %253, <4 x float> %256, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %259 = shufflevector <4 x float> %247, <4 x float> %250, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %260 = shufflevector <4 x float> %253, <4 x float> %256, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %261 = shufflevector <4 x float> %257, <4 x float> %258, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %262 = shufflevector <4 x float> %258, <4 x float> %257, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %263 = shufflevector <4 x float> %259, <4 x float> %260, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %264 = shufflevector <4 x float> %260, <4 x float> %259, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %265 = getelementptr inbounds float, float* %1, i64 %244
  %266 = bitcast float* %265 to <4 x float>*
  store <4 x float> %261, <4 x float>* %266, align 1
  %267 = getelementptr inbounds float, float* %265, i64 4
  %268 = bitcast float* %267 to <4 x float>*
  store <4 x float> %262, <4 x float>* %268, align 1
  %269 = getelementptr inbounds float, float* %265, i64 8
  %270 = bitcast float* %269 to <4 x float>*
  store <4 x float> %263, <4 x float>* %270, align 1
  %271 = getelementptr inbounds float, float* %265, i64 12
  %272 = bitcast float* %271 to <4 x float>*
  store <4 x float> %264, <4 x float>* %272, align 1
  %273 = add nsw i64 %244, 16
  %274 = add nuw nsw i64 %243, 4
  %275 = icmp slt i64 %274, %11
  br i1 %275, label %242, label %62

276:                                              ; preds = %102, %276
  %277 = phi i64 [ %328, %276 ], [ %104, %102 ]
  %278 = phi i64 [ %327, %276 ], [ %105, %102 ]
  %279 = getelementptr inbounds float, float* %52, i64 %277
  %280 = bitcast float* %279 to i32*
  %281 = load i32, i32* %280, align 4
  %282 = getelementptr inbounds float, float* %1, i64 %278
  %283 = bitcast float* %282 to i32*
  store i32 %281, i32* %283, align 4
  %284 = getelementptr inbounds float, float* %55, i64 %277
  %285 = bitcast float* %284 to i32*
  %286 = load i32, i32* %285, align 4
  %287 = add nsw i64 %278, 1
  %288 = getelementptr inbounds float, float* %1, i64 %287
  %289 = bitcast float* %288 to i32*
  store i32 %286, i32* %289, align 4
  %290 = getelementptr inbounds float, float* %58, i64 %277
  %291 = bitcast float* %290 to i32*
  %292 = load i32, i32* %291, align 4
  %293 = add nsw i64 %278, 2
  %294 = getelementptr inbounds float, float* %1, i64 %293
  %295 = bitcast float* %294 to i32*
  store i32 %292, i32* %295, align 4
  %296 = getelementptr inbounds float, float* %61, i64 %277
  %297 = bitcast float* %296 to i32*
  %298 = load i32, i32* %297, align 4
  %299 = add nsw i64 %278, 3
  %300 = getelementptr inbounds float, float* %1, i64 %299
  %301 = bitcast float* %300 to i32*
  store i32 %298, i32* %301, align 4
  %302 = add nsw i64 %278, 4
  %303 = add nuw nsw i64 %277, 1
  %304 = getelementptr inbounds float, float* %52, i64 %303
  %305 = bitcast float* %304 to i32*
  %306 = load i32, i32* %305, align 4
  %307 = getelementptr inbounds float, float* %1, i64 %302
  %308 = bitcast float* %307 to i32*
  store i32 %306, i32* %308, align 4
  %309 = getelementptr inbounds float, float* %55, i64 %303
  %310 = bitcast float* %309 to i32*
  %311 = load i32, i32* %310, align 4
  %312 = add nsw i64 %278, 5
  %313 = getelementptr inbounds float, float* %1, i64 %312
  %314 = bitcast float* %313 to i32*
  store i32 %311, i32* %314, align 4
  %315 = getelementptr inbounds float, float* %58, i64 %303
  %316 = bitcast float* %315 to i32*
  %317 = load i32, i32* %316, align 4
  %318 = add nsw i64 %278, 6
  %319 = getelementptr inbounds float, float* %1, i64 %318
  %320 = bitcast float* %319 to i32*
  store i32 %317, i32* %320, align 4
  %321 = getelementptr inbounds float, float* %61, i64 %303
  %322 = bitcast float* %321 to i32*
  %323 = load i32, i32* %322, align 4
  %324 = add nsw i64 %278, 7
  %325 = getelementptr inbounds float, float* %1, i64 %324
  %326 = bitcast float* %325 to i32*
  store i32 %323, i32* %326, align 4
  %327 = add nsw i64 %278, 8
  %328 = add nuw nsw i64 %277, 2
  %329 = icmp eq i64 %328, %3
  br i1 %329, label %330, label %276, !llvm.loop !75

330:                                              ; preds = %102, %276, %240, %62
  %331 = phi i64 [ %63, %62 ], [ %161, %240 ], [ %103, %102 ], [ %327, %276 ]
  %332 = add nuw nsw i64 %43, 4
  %333 = icmp slt i64 %332, %9
  %334 = add i64 %42, 1
  br i1 %333, label %41, label %20

335:                                              ; preds = %456, %20
  ret void

336:                                              ; preds = %456, %23
  %337 = phi i64 [ %460, %456 ], [ 0, %23 ]
  %338 = phi i64 [ %458, %456 ], [ %9, %23 ]
  %339 = phi i64 [ %457, %456 ], [ %21, %23 ]
  %340 = shl i64 %337, 2
  %341 = add i64 %28, %340
  %342 = load float*, float** %24, align 8
  %343 = load i64, i64* %25, align 8
  %344 = mul nsw i64 %343, %338
  %345 = getelementptr inbounds float, float* %342, i64 %344
  br i1 %26, label %346, label %456

346:                                              ; preds = %336
  br i1 %32, label %347, label %370

347:                                              ; preds = %455, %370, %346
  %348 = phi i64 [ 0, %370 ], [ 0, %346 ], [ %33, %455 ]
  %349 = phi i64 [ %339, %370 ], [ %339, %346 ], [ %382, %455 ]
  %350 = xor i64 %348, -1
  %351 = add i64 %350, %3
  br i1 %40, label %365, label %352

352:                                              ; preds = %347, %352
  %353 = phi i64 [ %362, %352 ], [ %348, %347 ]
  %354 = phi i64 [ %361, %352 ], [ %349, %347 ]
  %355 = phi i64 [ %363, %352 ], [ %39, %347 ]
  %356 = getelementptr inbounds float, float* %345, i64 %353
  %357 = bitcast float* %356 to i32*
  %358 = load i32, i32* %357, align 4
  %359 = getelementptr inbounds float, float* %1, i64 %354
  %360 = bitcast float* %359 to i32*
  store i32 %358, i32* %360, align 4
  %361 = add nsw i64 %354, 1
  %362 = add nuw nsw i64 %353, 1
  %363 = add i64 %355, -1
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %352, !llvm.loop !76

365:                                              ; preds = %352, %347
  %366 = phi i64 [ undef, %347 ], [ %361, %352 ]
  %367 = phi i64 [ %348, %347 ], [ %362, %352 ]
  %368 = phi i64 [ %349, %347 ], [ %361, %352 ]
  %369 = icmp ult i64 %351, 3
  br i1 %369, label %456, label %461

370:                                              ; preds = %346
  %371 = getelementptr float, float* %1, i64 %339
  %372 = bitcast float* %371 to i8*
  %373 = getelementptr float, float* %27, i64 %339
  %374 = getelementptr float, float* %342, i64 %3
  %375 = bitcast float* %374 to i8*
  %376 = mul i64 %343, %341
  %377 = getelementptr i8, i8* %375, i64 %376
  %378 = icmp ugt i8* %377, %372
  %379 = icmp ult float* %345, %373
  %380 = and i1 %378, %379
  br i1 %380, label %347, label %381

381:                                              ; preds = %370
  %382 = add i64 %339, %33
  br i1 %35, label %436, label %383

383:                                              ; preds = %381, %383
  %384 = phi i64 [ %433, %383 ], [ 0, %381 ]
  %385 = phi i64 [ %434, %383 ], [ %36, %381 ]
  %386 = add i64 %339, %384
  %387 = getelementptr inbounds float, float* %345, i64 %384
  %388 = bitcast float* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 4, !alias.scope !77
  %390 = getelementptr inbounds float, float* %387, i64 4
  %391 = bitcast float* %390 to <4 x i32>*
  %392 = load <4 x i32>, <4 x i32>* %391, align 4, !alias.scope !77
  %393 = getelementptr inbounds float, float* %1, i64 %386
  %394 = bitcast float* %393 to <4 x i32>*
  store <4 x i32> %389, <4 x i32>* %394, align 4, !alias.scope !80, !noalias !77
  %395 = getelementptr inbounds float, float* %393, i64 4
  %396 = bitcast float* %395 to <4 x i32>*
  store <4 x i32> %392, <4 x i32>* %396, align 4, !alias.scope !80, !noalias !77
  %397 = or i64 %384, 8
  %398 = add i64 %339, %397
  %399 = getelementptr inbounds float, float* %345, i64 %397
  %400 = bitcast float* %399 to <4 x i32>*
  %401 = load <4 x i32>, <4 x i32>* %400, align 4, !alias.scope !77
  %402 = getelementptr inbounds float, float* %399, i64 4
  %403 = bitcast float* %402 to <4 x i32>*
  %404 = load <4 x i32>, <4 x i32>* %403, align 4, !alias.scope !77
  %405 = getelementptr inbounds float, float* %1, i64 %398
  %406 = bitcast float* %405 to <4 x i32>*
  store <4 x i32> %401, <4 x i32>* %406, align 4, !alias.scope !80, !noalias !77
  %407 = getelementptr inbounds float, float* %405, i64 4
  %408 = bitcast float* %407 to <4 x i32>*
  store <4 x i32> %404, <4 x i32>* %408, align 4, !alias.scope !80, !noalias !77
  %409 = or i64 %384, 16
  %410 = add i64 %339, %409
  %411 = getelementptr inbounds float, float* %345, i64 %409
  %412 = bitcast float* %411 to <4 x i32>*
  %413 = load <4 x i32>, <4 x i32>* %412, align 4, !alias.scope !77
  %414 = getelementptr inbounds float, float* %411, i64 4
  %415 = bitcast float* %414 to <4 x i32>*
  %416 = load <4 x i32>, <4 x i32>* %415, align 4, !alias.scope !77
  %417 = getelementptr inbounds float, float* %1, i64 %410
  %418 = bitcast float* %417 to <4 x i32>*
  store <4 x i32> %413, <4 x i32>* %418, align 4, !alias.scope !80, !noalias !77
  %419 = getelementptr inbounds float, float* %417, i64 4
  %420 = bitcast float* %419 to <4 x i32>*
  store <4 x i32> %416, <4 x i32>* %420, align 4, !alias.scope !80, !noalias !77
  %421 = or i64 %384, 24
  %422 = add i64 %339, %421
  %423 = getelementptr inbounds float, float* %345, i64 %421
  %424 = bitcast float* %423 to <4 x i32>*
  %425 = load <4 x i32>, <4 x i32>* %424, align 4, !alias.scope !77
  %426 = getelementptr inbounds float, float* %423, i64 4
  %427 = bitcast float* %426 to <4 x i32>*
  %428 = load <4 x i32>, <4 x i32>* %427, align 4, !alias.scope !77
  %429 = getelementptr inbounds float, float* %1, i64 %422
  %430 = bitcast float* %429 to <4 x i32>*
  store <4 x i32> %425, <4 x i32>* %430, align 4, !alias.scope !80, !noalias !77
  %431 = getelementptr inbounds float, float* %429, i64 4
  %432 = bitcast float* %431 to <4 x i32>*
  store <4 x i32> %428, <4 x i32>* %432, align 4, !alias.scope !80, !noalias !77
  %433 = add i64 %384, 32
  %434 = add i64 %385, -4
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %436, label %383, !llvm.loop !82

436:                                              ; preds = %383, %381
  %437 = phi i64 [ 0, %381 ], [ %433, %383 ]
  br i1 %37, label %455, label %438

438:                                              ; preds = %436, %438
  %439 = phi i64 [ %452, %438 ], [ %437, %436 ]
  %440 = phi i64 [ %453, %438 ], [ %34, %436 ]
  %441 = add i64 %339, %439
  %442 = getelementptr inbounds float, float* %345, i64 %439
  %443 = bitcast float* %442 to <4 x i32>*
  %444 = load <4 x i32>, <4 x i32>* %443, align 4, !alias.scope !77
  %445 = getelementptr inbounds float, float* %442, i64 4
  %446 = bitcast float* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4, !alias.scope !77
  %448 = getelementptr inbounds float, float* %1, i64 %441
  %449 = bitcast float* %448 to <4 x i32>*
  store <4 x i32> %444, <4 x i32>* %449, align 4, !alias.scope !80, !noalias !77
  %450 = getelementptr inbounds float, float* %448, i64 4
  %451 = bitcast float* %450 to <4 x i32>*
  store <4 x i32> %447, <4 x i32>* %451, align 4, !alias.scope !80, !noalias !77
  %452 = add i64 %439, 8
  %453 = add i64 %440, -1
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %455, label %438, !llvm.loop !83

455:                                              ; preds = %438, %436
  br i1 %38, label %456, label %347

456:                                              ; preds = %365, %461, %455, %336
  %457 = phi i64 [ %339, %336 ], [ %382, %455 ], [ %366, %365 ], [ %490, %461 ]
  %458 = add nsw i64 %338, 1
  %459 = icmp eq i64 %458, %4
  %460 = add i64 %337, 1
  br i1 %459, label %335, label %336

461:                                              ; preds = %365, %461
  %462 = phi i64 [ %491, %461 ], [ %367, %365 ]
  %463 = phi i64 [ %490, %461 ], [ %368, %365 ]
  %464 = getelementptr inbounds float, float* %345, i64 %462
  %465 = bitcast float* %464 to i32*
  %466 = load i32, i32* %465, align 4
  %467 = getelementptr inbounds float, float* %1, i64 %463
  %468 = bitcast float* %467 to i32*
  store i32 %466, i32* %468, align 4
  %469 = add nsw i64 %463, 1
  %470 = add nuw nsw i64 %462, 1
  %471 = getelementptr inbounds float, float* %345, i64 %470
  %472 = bitcast float* %471 to i32*
  %473 = load i32, i32* %472, align 4
  %474 = getelementptr inbounds float, float* %1, i64 %469
  %475 = bitcast float* %474 to i32*
  store i32 %473, i32* %475, align 4
  %476 = add nsw i64 %463, 2
  %477 = add nuw nsw i64 %462, 2
  %478 = getelementptr inbounds float, float* %345, i64 %477
  %479 = bitcast float* %478 to i32*
  %480 = load i32, i32* %479, align 4
  %481 = getelementptr inbounds float, float* %1, i64 %476
  %482 = bitcast float* %481 to i32*
  store i32 %480, i32* %482, align 4
  %483 = add nsw i64 %463, 3
  %484 = add nuw nsw i64 %462, 3
  %485 = getelementptr inbounds float, float* %345, i64 %484
  %486 = bitcast float* %485 to i32*
  %487 = load i32, i32* %486, align 4
  %488 = getelementptr inbounds float, float* %1, i64 %483
  %489 = bitcast float* %488 to i32*
  store i32 %487, i32* %489, align 4
  %490 = add nsw i64 %463, 4
  %491 = add nuw nsw i64 %462, 4
  %492 = icmp eq i64 %491, %3
  br i1 %492, label %456, label %461, !llvm.loop !84
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi8ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll(%"struct.Eigen::internal::gebp_kernel"*, %"class.Eigen::internal::blas_data_mapper.275"* dereferenceable(16), float*, float*, i64, i64, i64, float, i64, i64, i64, i64) local_unnamed_addr #3 comdat align 2 {
  %13 = alloca %"struct.Eigen::internal::lhs_process_one_packet", align 1
  %14 = icmp eq i64 %8, -1
  %15 = select i1 %14, i64 %5, i64 %8
  %16 = icmp eq i64 %9, -1
  %17 = select i1 %16, i64 %5, i64 %9
  %18 = sdiv i64 %6, 4
  %19 = shl nsw i64 %18, 2
  %20 = sdiv i64 %4, 8
  %21 = shl nsw i64 %20, 3
  %22 = sub nsw i64 %4, %21
  %23 = sdiv i64 %22, 4
  %24 = shl nsw i64 %23, 2
  %25 = add i64 %24, %21
  %26 = sub nsw i64 %4, %25
  %27 = sdiv i64 %26, 4
  %28 = shl nsw i64 %27, 2
  %29 = add i64 %28, %25
  %30 = sub nsw i64 %4, %29
  %31 = sdiv i64 %30, 4
  %32 = shl nsw i64 %31, 2
  %33 = add i64 %32, %29
  %34 = and i64 %5, -8
  %35 = shl i64 %5, 4
  %36 = sub i64 32640, %35
  %37 = shl i64 %5, 5
  %38 = udiv i64 %36, %37
  %39 = icmp sgt i64 %38, 1
  %40 = select i1 %39, i64 %38, i64 1
  %41 = shl nsw i64 %40, 3
  %42 = icmp sgt i64 %4, 7
  br i1 %42, label %43, label %64

43:                                               ; preds = %12
  %44 = icmp sgt i64 %6, 3
  %45 = shl i64 %10, 3
  %46 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %1, i64 0, i32 0
  %47 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %1, i64 0, i32 1
  %48 = shl i64 %11, 2
  %49 = icmp sgt i64 %34, 0
  %50 = icmp slt i64 %34, %5
  %51 = insertelement <4 x float> undef, float %7, i32 0
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <4 x i32> zeroinitializer
  %53 = icmp slt i64 %19, %6
  %54 = mul i64 %17, %18
  %55 = shl i64 %54, 2
  %56 = add i64 %55, %11
  %57 = add i64 %34, -1
  %58 = and i64 %57, -8
  %59 = add i64 %56, %58
  %60 = add i64 %59, 8
  %61 = getelementptr float, float* %3, i64 %60
  br label %89

62:                                               ; preds = %498, %96
  %63 = icmp slt i64 %91, %21
  br i1 %63, label %89, label %64

64:                                               ; preds = %62, %12
  %65 = getelementptr inbounds %"struct.Eigen::internal::lhs_process_one_packet", %"struct.Eigen::internal::lhs_process_one_packet"* %13, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %65) #11
  store i8 -86, i8* %65, align 1
  call void @_ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll(%"struct.Eigen::internal::lhs_process_one_packet"* nonnull %13, %"class.Eigen::internal::blas_data_mapper.275"* dereferenceable(16) %1, float* %2, float* %3, float %7, i64 %21, i64 %25, i64 %15, i64 %17, i64 %10, i64 %11, i32 8, i64 %34, i64 8, i64 %6, i64 %5, i64 %19)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %65) #11
  %66 = icmp slt i64 %33, %4
  br i1 %66, label %67, label %915

67:                                               ; preds = %64
  %68 = icmp sgt i64 %6, 3
  br i1 %68, label %69, label %681

69:                                               ; preds = %67
  %70 = shl i64 %11, 2
  %71 = sdiv i64 %5, 4
  %72 = shl nsw i64 %71, 2
  %73 = icmp sgt i64 %5, 3
  %74 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %1, i64 0, i32 0
  %75 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %1, i64 0, i32 1
  %76 = insertelement <4 x float> undef, float %7, i32 0
  %77 = shufflevector <4 x float> %76, <4 x float> undef, <4 x i32> zeroinitializer
  %78 = icmp sgt i64 %72, 4
  %79 = select i1 %78, i64 %72, i64 4
  %80 = add nsw i64 %79, -1
  %81 = and i64 %80, -4
  %82 = mul i64 %15, %33
  %83 = add i64 %82, %10
  %84 = add i64 %83, %81
  %85 = add i64 %84, 4
  %86 = getelementptr float, float* %2, i64 %85
  %87 = add nuw nsw i64 %81, 4
  %88 = sub i64 0, %5
  br label %676

89:                                               ; preds = %43, %62
  %90 = phi i64 [ 0, %43 ], [ %91, %62 ]
  %91 = add nuw nsw i64 %90, %41
  %92 = icmp slt i64 %21, %91
  %93 = select i1 %92, i64 %21, i64 %91
  br i1 %44, label %94, label %96

94:                                               ; preds = %89
  %95 = icmp slt i64 %90, %93
  br label %99

96:                                               ; preds = %109, %89
  br i1 %53, label %97, label %62

97:                                               ; preds = %96
  %98 = icmp slt i64 %90, %93
  br label %491

99:                                               ; preds = %94, %109
  %100 = phi i64 [ 0, %94 ], [ %110, %109 ]
  br i1 %95, label %101, label %109

101:                                              ; preds = %99
  %102 = or i64 %100, 1
  %103 = or i64 %100, 2
  %104 = or i64 %100, 3
  %105 = mul nsw i64 %100, %17
  %106 = add nsw i64 %105, %48
  %107 = getelementptr inbounds float, float* %3, i64 %106
  %108 = bitcast float* %107 to i8*
  br label %112

109:                                              ; preds = %401, %99
  %110 = add nuw nsw i64 %100, 4
  %111 = icmp slt i64 %110, %19
  br i1 %111, label %99, label %96

112:                                              ; preds = %101, %401
  %113 = phi i64 [ %90, %101 ], [ %446, %401 ]
  %114 = mul nsw i64 %113, %15
  %115 = add nsw i64 %114, %45
  %116 = getelementptr inbounds float, float* %2, i64 %115
  %117 = bitcast float* %116 to i8*
  tail call void @llvm.prefetch(i8* %117, i32 0, i32 3, i32 1) #11
  %118 = load float*, float** %46, align 8
  %119 = load i64, i64* %47, align 8
  %120 = mul nsw i64 %119, %100
  %121 = add nsw i64 %120, %113
  %122 = getelementptr inbounds float, float* %118, i64 %121
  %123 = mul nsw i64 %119, %102
  %124 = add nsw i64 %123, %113
  %125 = getelementptr inbounds float, float* %118, i64 %124
  %126 = mul nsw i64 %119, %103
  %127 = add nsw i64 %126, %113
  %128 = getelementptr inbounds float, float* %118, i64 %127
  %129 = mul nsw i64 %119, %104
  %130 = add nsw i64 %129, %113
  %131 = getelementptr inbounds float, float* %118, i64 %130
  %132 = getelementptr inbounds float, float* %122, i64 8
  %133 = bitcast float* %132 to i8*
  tail call void @llvm.prefetch(i8* %133, i32 0, i32 3, i32 1) #11
  %134 = getelementptr inbounds float, float* %125, i64 8
  %135 = bitcast float* %134 to i8*
  tail call void @llvm.prefetch(i8* %135, i32 0, i32 3, i32 1) #11
  %136 = getelementptr inbounds float, float* %128, i64 8
  %137 = bitcast float* %136 to i8*
  tail call void @llvm.prefetch(i8* %137, i32 0, i32 3, i32 1) #11
  %138 = getelementptr inbounds float, float* %131, i64 8
  %139 = bitcast float* %138 to i8*
  tail call void @llvm.prefetch(i8* %139, i32 0, i32 3, i32 1) #11
  tail call void @llvm.prefetch(i8* %108, i32 0, i32 3, i32 1) #11
  br i1 %49, label %151, label %140

140:                                              ; preds = %151, %112
  %141 = phi <4 x float> [ zeroinitializer, %112 ], [ %396, %151 ]
  %142 = phi <4 x float> [ zeroinitializer, %112 ], [ %391, %151 ]
  %143 = phi <4 x float> [ zeroinitializer, %112 ], [ %386, %151 ]
  %144 = phi <4 x float> [ zeroinitializer, %112 ], [ %381, %151 ]
  %145 = phi <4 x float> [ zeroinitializer, %112 ], [ %394, %151 ]
  %146 = phi <4 x float> [ zeroinitializer, %112 ], [ %389, %151 ]
  %147 = phi <4 x float> [ zeroinitializer, %112 ], [ %384, %151 ]
  %148 = phi <4 x float> [ zeroinitializer, %112 ], [ %379, %151 ]
  %149 = phi float* [ %116, %112 ], [ %398, %151 ]
  %150 = phi float* [ %107, %112 ], [ %397, %151 ]
  br i1 %50, label %448, label %401

151:                                              ; preds = %112, %151
  %152 = phi i64 [ %399, %151 ], [ 0, %112 ]
  %153 = phi float* [ %397, %151 ], [ %107, %112 ]
  %154 = phi float* [ %398, %151 ], [ %116, %112 ]
  %155 = phi <4 x float> [ %379, %151 ], [ zeroinitializer, %112 ]
  %156 = phi <4 x float> [ %384, %151 ], [ zeroinitializer, %112 ]
  %157 = phi <4 x float> [ %389, %151 ], [ zeroinitializer, %112 ]
  %158 = phi <4 x float> [ %394, %151 ], [ zeroinitializer, %112 ]
  %159 = phi <4 x float> [ %381, %151 ], [ zeroinitializer, %112 ]
  %160 = phi <4 x float> [ %386, %151 ], [ zeroinitializer, %112 ]
  %161 = phi <4 x float> [ %391, %151 ], [ zeroinitializer, %112 ]
  %162 = phi <4 x float> [ %396, %151 ], [ zeroinitializer, %112 ]
  tail call void asm sideeffect "#begin gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !85
  %163 = getelementptr inbounds float, float* %153, i64 48
  %164 = bitcast float* %163 to i8*
  tail call void @llvm.prefetch(i8* %164, i32 0, i32 3, i32 1) #11
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !86
  %165 = bitcast float* %154 to <4 x float>*
  %166 = load <4 x float>, <4 x float>* %165, align 16
  %167 = getelementptr inbounds float, float* %154, i64 4
  %168 = bitcast float* %167 to <4 x float>*
  %169 = load <4 x float>, <4 x float>* %168, align 16
  %170 = bitcast float* %153 to <4 x float>*
  %171 = load <4 x float>, <4 x float>* %170, align 16
  %172 = shufflevector <4 x float> %171, <4 x float> undef, <4 x i32> zeroinitializer
  %173 = fmul <4 x float> %166, %172
  %174 = fadd <4 x float> %155, %173
  %175 = fmul <4 x float> %169, %172
  %176 = fadd <4 x float> %159, %175
  %177 = shufflevector <4 x float> %171, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %178 = fmul <4 x float> %166, %177
  %179 = fadd <4 x float> %156, %178
  %180 = fmul <4 x float> %169, %177
  %181 = fadd <4 x float> %160, %180
  %182 = shufflevector <4 x float> %171, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %183 = fmul <4 x float> %166, %182
  %184 = fadd <4 x float> %157, %183
  %185 = fmul <4 x float> %169, %182
  %186 = fadd <4 x float> %161, %185
  %187 = shufflevector <4 x float> %171, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %188 = fmul <4 x float> %166, %187
  %189 = fadd <4 x float> %158, %188
  %190 = fmul <4 x float> %169, %187
  %191 = fadd <4 x float> %162, %190
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !87
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !88
  %192 = getelementptr inbounds float, float* %154, i64 8
  %193 = bitcast float* %192 to <4 x float>*
  %194 = load <4 x float>, <4 x float>* %193, align 16
  %195 = getelementptr inbounds float, float* %154, i64 12
  %196 = bitcast float* %195 to <4 x float>*
  %197 = load <4 x float>, <4 x float>* %196, align 16
  %198 = getelementptr inbounds float, float* %153, i64 4
  %199 = bitcast float* %198 to <4 x float>*
  %200 = load <4 x float>, <4 x float>* %199, align 16
  %201 = shufflevector <4 x float> %200, <4 x float> undef, <4 x i32> zeroinitializer
  %202 = fmul <4 x float> %194, %201
  %203 = fadd <4 x float> %174, %202
  %204 = fmul <4 x float> %197, %201
  %205 = fadd <4 x float> %176, %204
  %206 = shufflevector <4 x float> %200, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %207 = fmul <4 x float> %194, %206
  %208 = fadd <4 x float> %179, %207
  %209 = fmul <4 x float> %197, %206
  %210 = fadd <4 x float> %181, %209
  %211 = shufflevector <4 x float> %200, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %212 = fmul <4 x float> %194, %211
  %213 = fadd <4 x float> %184, %212
  %214 = fmul <4 x float> %197, %211
  %215 = fadd <4 x float> %186, %214
  %216 = shufflevector <4 x float> %200, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %217 = fmul <4 x float> %194, %216
  %218 = fadd <4 x float> %189, %217
  %219 = fmul <4 x float> %197, %216
  %220 = fadd <4 x float> %191, %219
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !89
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !90
  %221 = getelementptr inbounds float, float* %154, i64 16
  %222 = bitcast float* %221 to <4 x float>*
  %223 = load <4 x float>, <4 x float>* %222, align 16
  %224 = getelementptr inbounds float, float* %154, i64 20
  %225 = bitcast float* %224 to <4 x float>*
  %226 = load <4 x float>, <4 x float>* %225, align 16
  %227 = getelementptr inbounds float, float* %153, i64 8
  %228 = bitcast float* %227 to <4 x float>*
  %229 = load <4 x float>, <4 x float>* %228, align 16
  %230 = shufflevector <4 x float> %229, <4 x float> undef, <4 x i32> zeroinitializer
  %231 = fmul <4 x float> %223, %230
  %232 = fadd <4 x float> %203, %231
  %233 = fmul <4 x float> %226, %230
  %234 = fadd <4 x float> %205, %233
  %235 = shufflevector <4 x float> %229, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %236 = fmul <4 x float> %223, %235
  %237 = fadd <4 x float> %208, %236
  %238 = fmul <4 x float> %226, %235
  %239 = fadd <4 x float> %210, %238
  %240 = shufflevector <4 x float> %229, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %241 = fmul <4 x float> %223, %240
  %242 = fadd <4 x float> %213, %241
  %243 = fmul <4 x float> %226, %240
  %244 = fadd <4 x float> %215, %243
  %245 = shufflevector <4 x float> %229, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %246 = fmul <4 x float> %223, %245
  %247 = fadd <4 x float> %218, %246
  %248 = fmul <4 x float> %226, %245
  %249 = fadd <4 x float> %220, %248
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !91
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !92
  %250 = getelementptr inbounds float, float* %154, i64 24
  %251 = bitcast float* %250 to <4 x float>*
  %252 = load <4 x float>, <4 x float>* %251, align 16
  %253 = getelementptr inbounds float, float* %154, i64 28
  %254 = bitcast float* %253 to <4 x float>*
  %255 = load <4 x float>, <4 x float>* %254, align 16
  %256 = getelementptr inbounds float, float* %153, i64 12
  %257 = bitcast float* %256 to <4 x float>*
  %258 = load <4 x float>, <4 x float>* %257, align 16
  %259 = shufflevector <4 x float> %258, <4 x float> undef, <4 x i32> zeroinitializer
  %260 = fmul <4 x float> %252, %259
  %261 = fadd <4 x float> %232, %260
  %262 = fmul <4 x float> %255, %259
  %263 = fadd <4 x float> %234, %262
  %264 = shufflevector <4 x float> %258, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %265 = fmul <4 x float> %252, %264
  %266 = fadd <4 x float> %237, %265
  %267 = fmul <4 x float> %255, %264
  %268 = fadd <4 x float> %239, %267
  %269 = shufflevector <4 x float> %258, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %270 = fmul <4 x float> %252, %269
  %271 = fadd <4 x float> %242, %270
  %272 = fmul <4 x float> %255, %269
  %273 = fadd <4 x float> %244, %272
  %274 = shufflevector <4 x float> %258, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %275 = fmul <4 x float> %252, %274
  %276 = fadd <4 x float> %247, %275
  %277 = fmul <4 x float> %255, %274
  %278 = fadd <4 x float> %249, %277
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !93
  %279 = getelementptr inbounds float, float* %153, i64 64
  %280 = bitcast float* %279 to i8*
  tail call void @llvm.prefetch(i8* %280, i32 0, i32 3, i32 1) #11
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !94
  %281 = getelementptr inbounds float, float* %154, i64 32
  %282 = bitcast float* %281 to <4 x float>*
  %283 = load <4 x float>, <4 x float>* %282, align 16
  %284 = getelementptr inbounds float, float* %154, i64 36
  %285 = bitcast float* %284 to <4 x float>*
  %286 = load <4 x float>, <4 x float>* %285, align 16
  %287 = getelementptr inbounds float, float* %153, i64 16
  %288 = bitcast float* %287 to <4 x float>*
  %289 = load <4 x float>, <4 x float>* %288, align 16
  %290 = shufflevector <4 x float> %289, <4 x float> undef, <4 x i32> zeroinitializer
  %291 = fmul <4 x float> %283, %290
  %292 = fadd <4 x float> %261, %291
  %293 = fmul <4 x float> %286, %290
  %294 = fadd <4 x float> %263, %293
  %295 = shufflevector <4 x float> %289, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %296 = fmul <4 x float> %283, %295
  %297 = fadd <4 x float> %266, %296
  %298 = fmul <4 x float> %286, %295
  %299 = fadd <4 x float> %268, %298
  %300 = shufflevector <4 x float> %289, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %301 = fmul <4 x float> %283, %300
  %302 = fadd <4 x float> %271, %301
  %303 = fmul <4 x float> %286, %300
  %304 = fadd <4 x float> %273, %303
  %305 = shufflevector <4 x float> %289, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %306 = fmul <4 x float> %283, %305
  %307 = fadd <4 x float> %276, %306
  %308 = fmul <4 x float> %286, %305
  %309 = fadd <4 x float> %278, %308
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !95
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !96
  %310 = getelementptr inbounds float, float* %154, i64 40
  %311 = bitcast float* %310 to <4 x float>*
  %312 = load <4 x float>, <4 x float>* %311, align 16
  %313 = getelementptr inbounds float, float* %154, i64 44
  %314 = bitcast float* %313 to <4 x float>*
  %315 = load <4 x float>, <4 x float>* %314, align 16
  %316 = getelementptr inbounds float, float* %153, i64 20
  %317 = bitcast float* %316 to <4 x float>*
  %318 = load <4 x float>, <4 x float>* %317, align 16
  %319 = shufflevector <4 x float> %318, <4 x float> undef, <4 x i32> zeroinitializer
  %320 = fmul <4 x float> %312, %319
  %321 = fadd <4 x float> %292, %320
  %322 = fmul <4 x float> %315, %319
  %323 = fadd <4 x float> %294, %322
  %324 = shufflevector <4 x float> %318, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %325 = fmul <4 x float> %312, %324
  %326 = fadd <4 x float> %297, %325
  %327 = fmul <4 x float> %315, %324
  %328 = fadd <4 x float> %299, %327
  %329 = shufflevector <4 x float> %318, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %330 = fmul <4 x float> %312, %329
  %331 = fadd <4 x float> %302, %330
  %332 = fmul <4 x float> %315, %329
  %333 = fadd <4 x float> %304, %332
  %334 = shufflevector <4 x float> %318, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %335 = fmul <4 x float> %312, %334
  %336 = fadd <4 x float> %307, %335
  %337 = fmul <4 x float> %315, %334
  %338 = fadd <4 x float> %309, %337
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !97
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !98
  %339 = getelementptr inbounds float, float* %154, i64 48
  %340 = bitcast float* %339 to <4 x float>*
  %341 = load <4 x float>, <4 x float>* %340, align 16
  %342 = getelementptr inbounds float, float* %154, i64 52
  %343 = bitcast float* %342 to <4 x float>*
  %344 = load <4 x float>, <4 x float>* %343, align 16
  %345 = getelementptr inbounds float, float* %153, i64 24
  %346 = bitcast float* %345 to <4 x float>*
  %347 = load <4 x float>, <4 x float>* %346, align 16
  %348 = shufflevector <4 x float> %347, <4 x float> undef, <4 x i32> zeroinitializer
  %349 = fmul <4 x float> %341, %348
  %350 = fadd <4 x float> %321, %349
  %351 = fmul <4 x float> %344, %348
  %352 = fadd <4 x float> %323, %351
  %353 = shufflevector <4 x float> %347, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %354 = fmul <4 x float> %341, %353
  %355 = fadd <4 x float> %326, %354
  %356 = fmul <4 x float> %344, %353
  %357 = fadd <4 x float> %328, %356
  %358 = shufflevector <4 x float> %347, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %359 = fmul <4 x float> %341, %358
  %360 = fadd <4 x float> %331, %359
  %361 = fmul <4 x float> %344, %358
  %362 = fadd <4 x float> %333, %361
  %363 = shufflevector <4 x float> %347, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %364 = fmul <4 x float> %341, %363
  %365 = fadd <4 x float> %336, %364
  %366 = fmul <4 x float> %344, %363
  %367 = fadd <4 x float> %338, %366
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !99
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !100
  %368 = getelementptr inbounds float, float* %154, i64 56
  %369 = bitcast float* %368 to <4 x float>*
  %370 = load <4 x float>, <4 x float>* %369, align 16
  %371 = getelementptr inbounds float, float* %154, i64 60
  %372 = bitcast float* %371 to <4 x float>*
  %373 = load <4 x float>, <4 x float>* %372, align 16
  %374 = getelementptr inbounds float, float* %153, i64 28
  %375 = bitcast float* %374 to <4 x float>*
  %376 = load <4 x float>, <4 x float>* %375, align 16
  %377 = shufflevector <4 x float> %376, <4 x float> undef, <4 x i32> zeroinitializer
  %378 = fmul <4 x float> %370, %377
  %379 = fadd <4 x float> %350, %378
  %380 = fmul <4 x float> %373, %377
  %381 = fadd <4 x float> %352, %380
  %382 = shufflevector <4 x float> %376, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %383 = fmul <4 x float> %370, %382
  %384 = fadd <4 x float> %355, %383
  %385 = fmul <4 x float> %373, %382
  %386 = fadd <4 x float> %357, %385
  %387 = shufflevector <4 x float> %376, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %388 = fmul <4 x float> %370, %387
  %389 = fadd <4 x float> %360, %388
  %390 = fmul <4 x float> %373, %387
  %391 = fadd <4 x float> %362, %390
  %392 = shufflevector <4 x float> %376, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %393 = fmul <4 x float> %370, %392
  %394 = fadd <4 x float> %365, %393
  %395 = fmul <4 x float> %373, %392
  %396 = fadd <4 x float> %367, %395
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !101
  %397 = getelementptr inbounds float, float* %153, i64 32
  %398 = getelementptr inbounds float, float* %154, i64 64
  tail call void asm sideeffect "#end gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !102
  %399 = add nuw nsw i64 %152, 8
  %400 = icmp slt i64 %399, %34
  br i1 %400, label %151, label %140

401:                                              ; preds = %448, %140
  %402 = phi <4 x float> [ %141, %140 ], [ %486, %448 ]
  %403 = phi <4 x float> [ %142, %140 ], [ %481, %448 ]
  %404 = phi <4 x float> [ %143, %140 ], [ %476, %448 ]
  %405 = phi <4 x float> [ %144, %140 ], [ %471, %448 ]
  %406 = phi <4 x float> [ %145, %140 ], [ %484, %448 ]
  %407 = phi <4 x float> [ %146, %140 ], [ %479, %448 ]
  %408 = phi <4 x float> [ %147, %140 ], [ %474, %448 ]
  %409 = phi <4 x float> [ %148, %140 ], [ %469, %448 ]
  %410 = bitcast float* %122 to <4 x float>*
  %411 = load <4 x float>, <4 x float>* %410, align 1
  %412 = getelementptr inbounds float, float* %122, i64 4
  %413 = bitcast float* %412 to <4 x float>*
  %414 = load <4 x float>, <4 x float>* %413, align 1
  %415 = bitcast float* %125 to <4 x float>*
  %416 = load <4 x float>, <4 x float>* %415, align 1
  %417 = getelementptr inbounds float, float* %125, i64 4
  %418 = bitcast float* %417 to <4 x float>*
  %419 = load <4 x float>, <4 x float>* %418, align 1
  %420 = fmul <4 x float> %52, %409
  %421 = fadd <4 x float> %420, %411
  %422 = fmul <4 x float> %52, %405
  %423 = fadd <4 x float> %422, %414
  %424 = fmul <4 x float> %52, %408
  %425 = fadd <4 x float> %424, %416
  %426 = fmul <4 x float> %52, %404
  %427 = fadd <4 x float> %426, %419
  store <4 x float> %421, <4 x float>* %410, align 1
  store <4 x float> %423, <4 x float>* %413, align 1
  store <4 x float> %425, <4 x float>* %415, align 1
  store <4 x float> %427, <4 x float>* %418, align 1
  %428 = bitcast float* %128 to <4 x float>*
  %429 = load <4 x float>, <4 x float>* %428, align 1
  %430 = getelementptr inbounds float, float* %128, i64 4
  %431 = bitcast float* %430 to <4 x float>*
  %432 = load <4 x float>, <4 x float>* %431, align 1
  %433 = bitcast float* %131 to <4 x float>*
  %434 = load <4 x float>, <4 x float>* %433, align 1
  %435 = getelementptr inbounds float, float* %131, i64 4
  %436 = bitcast float* %435 to <4 x float>*
  %437 = load <4 x float>, <4 x float>* %436, align 1
  %438 = fmul <4 x float> %52, %407
  %439 = fadd <4 x float> %438, %429
  %440 = fmul <4 x float> %52, %403
  %441 = fadd <4 x float> %440, %432
  %442 = fmul <4 x float> %52, %406
  %443 = fadd <4 x float> %442, %434
  %444 = fmul <4 x float> %52, %402
  %445 = fadd <4 x float> %444, %437
  store <4 x float> %439, <4 x float>* %428, align 1
  store <4 x float> %441, <4 x float>* %431, align 1
  store <4 x float> %443, <4 x float>* %433, align 1
  store <4 x float> %445, <4 x float>* %436, align 1
  %446 = add nuw nsw i64 %113, 8
  %447 = icmp slt i64 %446, %93
  br i1 %447, label %112, label %109

448:                                              ; preds = %140, %448
  %449 = phi i64 [ %489, %448 ], [ %34, %140 ]
  %450 = phi float* [ %487, %448 ], [ %150, %140 ]
  %451 = phi float* [ %488, %448 ], [ %149, %140 ]
  %452 = phi <4 x float> [ %469, %448 ], [ %148, %140 ]
  %453 = phi <4 x float> [ %474, %448 ], [ %147, %140 ]
  %454 = phi <4 x float> [ %479, %448 ], [ %146, %140 ]
  %455 = phi <4 x float> [ %484, %448 ], [ %145, %140 ]
  %456 = phi <4 x float> [ %471, %448 ], [ %144, %140 ]
  %457 = phi <4 x float> [ %476, %448 ], [ %143, %140 ]
  %458 = phi <4 x float> [ %481, %448 ], [ %142, %140 ]
  %459 = phi <4 x float> [ %486, %448 ], [ %141, %140 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !103
  %460 = bitcast float* %451 to <4 x float>*
  %461 = load <4 x float>, <4 x float>* %460, align 16
  %462 = getelementptr inbounds float, float* %451, i64 4
  %463 = bitcast float* %462 to <4 x float>*
  %464 = load <4 x float>, <4 x float>* %463, align 16
  %465 = bitcast float* %450 to <4 x float>*
  %466 = load <4 x float>, <4 x float>* %465, align 16
  %467 = shufflevector <4 x float> %466, <4 x float> undef, <4 x i32> zeroinitializer
  %468 = fmul <4 x float> %461, %467
  %469 = fadd <4 x float> %452, %468
  %470 = fmul <4 x float> %464, %467
  %471 = fadd <4 x float> %456, %470
  %472 = shufflevector <4 x float> %466, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %473 = fmul <4 x float> %461, %472
  %474 = fadd <4 x float> %453, %473
  %475 = fmul <4 x float> %464, %472
  %476 = fadd <4 x float> %457, %475
  %477 = shufflevector <4 x float> %466, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %478 = fmul <4 x float> %461, %477
  %479 = fadd <4 x float> %454, %478
  %480 = fmul <4 x float> %464, %477
  %481 = fadd <4 x float> %458, %480
  %482 = shufflevector <4 x float> %466, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %483 = fmul <4 x float> %461, %482
  %484 = fadd <4 x float> %455, %483
  %485 = fmul <4 x float> %464, %482
  %486 = fadd <4 x float> %459, %485
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !104
  %487 = getelementptr inbounds float, float* %450, i64 4
  %488 = getelementptr inbounds float, float* %451, i64 8
  %489 = add i64 %449, 1
  %490 = icmp eq i64 %489, %5
  br i1 %490, label %401, label %448

491:                                              ; preds = %498, %97
  %492 = phi float* [ %61, %97 ], [ %500, %498 ]
  %493 = phi i64 [ %19, %97 ], [ %499, %498 ]
  br i1 %98, label %494, label %498

494:                                              ; preds = %491
  %495 = mul nsw i64 %493, %17
  %496 = add nsw i64 %495, %11
  %497 = getelementptr inbounds float, float* %3, i64 %496
  br label %502

498:                                              ; preds = %640, %491
  %499 = add i64 %493, 1
  %500 = getelementptr float, float* %492, i64 %17
  %501 = icmp eq i64 %499, %6
  br i1 %501, label %62, label %491

502:                                              ; preds = %494, %640
  %503 = phi i64 [ %90, %494 ], [ %652, %640 ]
  %504 = mul nsw i64 %503, %15
  %505 = add nsw i64 %504, %45
  %506 = getelementptr inbounds float, float* %2, i64 %505
  %507 = bitcast float* %506 to i8*
  tail call void @llvm.prefetch(i8* %507, i32 0, i32 3, i32 1) #11
  %508 = load float*, float** %46, align 8
  %509 = load i64, i64* %47, align 8
  %510 = mul nsw i64 %509, %493
  %511 = add nsw i64 %510, %503
  %512 = getelementptr inbounds float, float* %508, i64 %511
  %513 = getelementptr inbounds float, float* %512, i64 8
  %514 = bitcast float* %513 to i8*
  tail call void @llvm.prefetch(i8* %514, i32 0, i32 3, i32 1) #11
  br i1 %49, label %520, label %515

515:                                              ; preds = %520, %502
  %516 = phi <4 x float> [ zeroinitializer, %502 ], [ %633, %520 ]
  %517 = phi <4 x float> [ zeroinitializer, %502 ], [ %635, %520 ]
  %518 = phi float* [ %506, %502 ], [ %637, %520 ]
  %519 = phi float* [ %497, %502 ], [ %492, %520 ]
  br i1 %50, label %654, label %640

520:                                              ; preds = %502, %520
  %521 = phi i64 [ %638, %520 ], [ 0, %502 ]
  %522 = phi float* [ %636, %520 ], [ %497, %502 ]
  %523 = phi float* [ %637, %520 ], [ %506, %502 ]
  %524 = phi <4 x float> [ %635, %520 ], [ zeroinitializer, %502 ]
  %525 = phi <4 x float> [ %633, %520 ], [ zeroinitializer, %502 ]
  tail call void asm sideeffect "#begin gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !105
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !106
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !107
  %526 = bitcast float* %523 to <4 x float>*
  %527 = load <4 x float>, <4 x float>* %526, align 16
  %528 = getelementptr inbounds float, float* %523, i64 4
  %529 = bitcast float* %528 to <4 x float>*
  %530 = load <4 x float>, <4 x float>* %529, align 16
  %531 = load float, float* %522, align 4
  %532 = insertelement <4 x float> undef, float %531, i32 0
  %533 = shufflevector <4 x float> %532, <4 x float> undef, <4 x i32> zeroinitializer
  %534 = fmul <4 x float> %527, %533
  %535 = fadd <4 x float> %525, %534
  %536 = fmul <4 x float> %530, %533
  %537 = fadd <4 x float> %524, %536
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !108
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !109
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !110
  %538 = getelementptr inbounds float, float* %523, i64 8
  %539 = bitcast float* %538 to <4 x float>*
  %540 = load <4 x float>, <4 x float>* %539, align 16
  %541 = getelementptr inbounds float, float* %523, i64 12
  %542 = bitcast float* %541 to <4 x float>*
  %543 = load <4 x float>, <4 x float>* %542, align 16
  %544 = getelementptr inbounds float, float* %522, i64 1
  %545 = load float, float* %544, align 4
  %546 = insertelement <4 x float> undef, float %545, i32 0
  %547 = shufflevector <4 x float> %546, <4 x float> undef, <4 x i32> zeroinitializer
  %548 = fmul <4 x float> %540, %547
  %549 = fadd <4 x float> %535, %548
  %550 = fmul <4 x float> %543, %547
  %551 = fadd <4 x float> %537, %550
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !111
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !112
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !113
  %552 = getelementptr inbounds float, float* %523, i64 16
  %553 = bitcast float* %552 to <4 x float>*
  %554 = load <4 x float>, <4 x float>* %553, align 16
  %555 = getelementptr inbounds float, float* %523, i64 20
  %556 = bitcast float* %555 to <4 x float>*
  %557 = load <4 x float>, <4 x float>* %556, align 16
  %558 = getelementptr inbounds float, float* %522, i64 2
  %559 = load float, float* %558, align 4
  %560 = insertelement <4 x float> undef, float %559, i32 0
  %561 = shufflevector <4 x float> %560, <4 x float> undef, <4 x i32> zeroinitializer
  %562 = fmul <4 x float> %554, %561
  %563 = fadd <4 x float> %549, %562
  %564 = fmul <4 x float> %557, %561
  %565 = fadd <4 x float> %551, %564
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !114
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !115
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !116
  %566 = getelementptr inbounds float, float* %523, i64 24
  %567 = bitcast float* %566 to <4 x float>*
  %568 = load <4 x float>, <4 x float>* %567, align 16
  %569 = getelementptr inbounds float, float* %523, i64 28
  %570 = bitcast float* %569 to <4 x float>*
  %571 = load <4 x float>, <4 x float>* %570, align 16
  %572 = getelementptr inbounds float, float* %522, i64 3
  %573 = load float, float* %572, align 4
  %574 = insertelement <4 x float> undef, float %573, i32 0
  %575 = shufflevector <4 x float> %574, <4 x float> undef, <4 x i32> zeroinitializer
  %576 = fmul <4 x float> %568, %575
  %577 = fadd <4 x float> %563, %576
  %578 = fmul <4 x float> %571, %575
  %579 = fadd <4 x float> %565, %578
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !117
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !118
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !119
  %580 = getelementptr inbounds float, float* %523, i64 32
  %581 = bitcast float* %580 to <4 x float>*
  %582 = load <4 x float>, <4 x float>* %581, align 16
  %583 = getelementptr inbounds float, float* %523, i64 36
  %584 = bitcast float* %583 to <4 x float>*
  %585 = load <4 x float>, <4 x float>* %584, align 16
  %586 = getelementptr inbounds float, float* %522, i64 4
  %587 = load float, float* %586, align 4
  %588 = insertelement <4 x float> undef, float %587, i32 0
  %589 = shufflevector <4 x float> %588, <4 x float> undef, <4 x i32> zeroinitializer
  %590 = fmul <4 x float> %582, %589
  %591 = fadd <4 x float> %577, %590
  %592 = fmul <4 x float> %585, %589
  %593 = fadd <4 x float> %579, %592
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !120
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !121
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !122
  %594 = getelementptr inbounds float, float* %523, i64 40
  %595 = bitcast float* %594 to <4 x float>*
  %596 = load <4 x float>, <4 x float>* %595, align 16
  %597 = getelementptr inbounds float, float* %523, i64 44
  %598 = bitcast float* %597 to <4 x float>*
  %599 = load <4 x float>, <4 x float>* %598, align 16
  %600 = getelementptr inbounds float, float* %522, i64 5
  %601 = load float, float* %600, align 4
  %602 = insertelement <4 x float> undef, float %601, i32 0
  %603 = shufflevector <4 x float> %602, <4 x float> undef, <4 x i32> zeroinitializer
  %604 = fmul <4 x float> %596, %603
  %605 = fadd <4 x float> %591, %604
  %606 = fmul <4 x float> %599, %603
  %607 = fadd <4 x float> %593, %606
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !123
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !124
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !125
  %608 = getelementptr inbounds float, float* %523, i64 48
  %609 = bitcast float* %608 to <4 x float>*
  %610 = load <4 x float>, <4 x float>* %609, align 16
  %611 = getelementptr inbounds float, float* %523, i64 52
  %612 = bitcast float* %611 to <4 x float>*
  %613 = load <4 x float>, <4 x float>* %612, align 16
  %614 = getelementptr inbounds float, float* %522, i64 6
  %615 = load float, float* %614, align 4
  %616 = insertelement <4 x float> undef, float %615, i32 0
  %617 = shufflevector <4 x float> %616, <4 x float> undef, <4 x i32> zeroinitializer
  %618 = fmul <4 x float> %610, %617
  %619 = fadd <4 x float> %605, %618
  %620 = fmul <4 x float> %613, %617
  %621 = fadd <4 x float> %607, %620
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !126
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !127
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !128
  %622 = getelementptr inbounds float, float* %523, i64 56
  %623 = bitcast float* %622 to <4 x float>*
  %624 = load <4 x float>, <4 x float>* %623, align 16
  %625 = getelementptr inbounds float, float* %523, i64 60
  %626 = bitcast float* %625 to <4 x float>*
  %627 = load <4 x float>, <4 x float>* %626, align 16
  %628 = getelementptr inbounds float, float* %522, i64 7
  %629 = load float, float* %628, align 4
  %630 = insertelement <4 x float> undef, float %629, i32 0
  %631 = shufflevector <4 x float> %630, <4 x float> undef, <4 x i32> zeroinitializer
  %632 = fmul <4 x float> %624, %631
  %633 = fadd <4 x float> %619, %632
  %634 = fmul <4 x float> %627, %631
  %635 = fadd <4 x float> %621, %634
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !129
  %636 = getelementptr inbounds float, float* %522, i64 8
  %637 = getelementptr inbounds float, float* %523, i64 64
  tail call void asm sideeffect "#end gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !130
  %638 = add nuw nsw i64 %521, 8
  %639 = icmp slt i64 %638, %34
  br i1 %639, label %520, label %515

640:                                              ; preds = %654, %515
  %641 = phi <4 x float> [ %516, %515 ], [ %669, %654 ]
  %642 = phi <4 x float> [ %517, %515 ], [ %671, %654 ]
  %643 = bitcast float* %512 to <4 x float>*
  %644 = load <4 x float>, <4 x float>* %643, align 1
  %645 = getelementptr inbounds float, float* %512, i64 4
  %646 = bitcast float* %645 to <4 x float>*
  %647 = load <4 x float>, <4 x float>* %646, align 1
  %648 = fmul <4 x float> %52, %641
  %649 = fadd <4 x float> %648, %644
  %650 = fmul <4 x float> %52, %642
  %651 = fadd <4 x float> %650, %647
  store <4 x float> %649, <4 x float>* %643, align 1
  store <4 x float> %651, <4 x float>* %646, align 1
  %652 = add nuw nsw i64 %503, 8
  %653 = icmp slt i64 %652, %93
  br i1 %653, label %502, label %498

654:                                              ; preds = %515, %654
  %655 = phi i64 [ %674, %654 ], [ %34, %515 ]
  %656 = phi float* [ %672, %654 ], [ %519, %515 ]
  %657 = phi float* [ %673, %654 ], [ %518, %515 ]
  %658 = phi <4 x float> [ %671, %654 ], [ %517, %515 ]
  %659 = phi <4 x float> [ %669, %654 ], [ %516, %515 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !131
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !132
  %660 = bitcast float* %657 to <4 x float>*
  %661 = load <4 x float>, <4 x float>* %660, align 16
  %662 = getelementptr inbounds float, float* %657, i64 4
  %663 = bitcast float* %662 to <4 x float>*
  %664 = load <4 x float>, <4 x float>* %663, align 16
  %665 = load float, float* %656, align 4
  %666 = insertelement <4 x float> undef, float %665, i32 0
  %667 = shufflevector <4 x float> %666, <4 x float> undef, <4 x i32> zeroinitializer
  %668 = fmul <4 x float> %661, %667
  %669 = fadd <4 x float> %659, %668
  %670 = fmul <4 x float> %664, %667
  %671 = fadd <4 x float> %658, %670
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !133
  %672 = getelementptr inbounds float, float* %656, i64 1
  %673 = getelementptr inbounds float, float* %657, i64 8
  %674 = add i64 %655, 1
  %675 = icmp eq i64 %674, %5
  br i1 %675, label %640, label %654

676:                                              ; preds = %692, %69
  %677 = phi i64 [ 0, %69 ], [ %693, %692 ]
  %678 = mul nsw i64 %677, %17
  %679 = add nsw i64 %678, %70
  %680 = getelementptr inbounds float, float* %3, i64 %679
  br label %695

681:                                              ; preds = %692, %67
  %682 = icmp slt i64 %19, %6
  br i1 %682, label %683, label %915

683:                                              ; preds = %681
  %684 = icmp sgt i64 %5, 0
  %685 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %1, i64 0, i32 0
  %686 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %1, i64 0, i32 1
  %687 = add i64 %5, -1
  %688 = and i64 %5, 3
  %689 = icmp ult i64 %687, 3
  %690 = sub i64 %5, %688
  %691 = icmp eq i64 %688, 0
  br label %837

692:                                              ; preds = %808
  %693 = add nuw nsw i64 %677, 4
  %694 = icmp slt i64 %693, %19
  br i1 %694, label %676, label %681

695:                                              ; preds = %808, %676
  %696 = phi float* [ %86, %676 ], [ %835, %808 ]
  %697 = phi i64 [ %33, %676 ], [ %834, %808 ]
  %698 = mul nsw i64 %697, %15
  %699 = add nsw i64 %698, %10
  %700 = getelementptr inbounds float, float* %2, i64 %699
  %701 = bitcast float* %700 to i8*
  call void @llvm.prefetch(i8* %701, i32 0, i32 3, i32 1) #11
  br i1 %73, label %702, label %748

702:                                              ; preds = %695, %702
  %703 = phi i64 [ %746, %702 ], [ 0, %695 ]
  %704 = phi float* [ %744, %702 ], [ %680, %695 ]
  %705 = phi float* [ %745, %702 ], [ %700, %695 ]
  %706 = phi <4 x float> [ %743, %702 ], [ zeroinitializer, %695 ]
  %707 = phi <4 x float> [ %741, %702 ], [ zeroinitializer, %695 ]
  %708 = phi <4 x float> [ %725, %702 ], [ zeroinitializer, %695 ]
  %709 = phi <4 x float> [ %723, %702 ], [ zeroinitializer, %695 ]
  %710 = bitcast float* %704 to <4 x float>*
  %711 = load <4 x float>, <4 x float>* %710, align 1
  %712 = getelementptr inbounds float, float* %704, i64 4
  %713 = bitcast float* %712 to <4 x float>*
  %714 = load <4 x float>, <4 x float>* %713, align 1
  %715 = load float, float* %705, align 4
  %716 = insertelement <4 x float> undef, float %715, i32 0
  %717 = shufflevector <4 x float> %716, <4 x float> undef, <4 x i32> zeroinitializer
  %718 = getelementptr inbounds float, float* %705, i64 1
  %719 = load float, float* %718, align 4
  %720 = insertelement <4 x float> undef, float %719, i32 0
  %721 = shufflevector <4 x float> %720, <4 x float> undef, <4 x i32> zeroinitializer
  %722 = fmul <4 x float> %711, %717
  %723 = fadd <4 x float> %709, %722
  %724 = fmul <4 x float> %714, %721
  %725 = fadd <4 x float> %708, %724
  %726 = getelementptr inbounds float, float* %704, i64 8
  %727 = bitcast float* %726 to <4 x float>*
  %728 = load <4 x float>, <4 x float>* %727, align 1
  %729 = getelementptr inbounds float, float* %704, i64 12
  %730 = bitcast float* %729 to <4 x float>*
  %731 = load <4 x float>, <4 x float>* %730, align 1
  %732 = getelementptr inbounds float, float* %705, i64 2
  %733 = load float, float* %732, align 4
  %734 = insertelement <4 x float> undef, float %733, i32 0
  %735 = shufflevector <4 x float> %734, <4 x float> undef, <4 x i32> zeroinitializer
  %736 = getelementptr inbounds float, float* %705, i64 3
  %737 = load float, float* %736, align 4
  %738 = insertelement <4 x float> undef, float %737, i32 0
  %739 = shufflevector <4 x float> %738, <4 x float> undef, <4 x i32> zeroinitializer
  %740 = fmul <4 x float> %728, %735
  %741 = fadd <4 x float> %707, %740
  %742 = fmul <4 x float> %731, %739
  %743 = fadd <4 x float> %706, %742
  %744 = getelementptr inbounds float, float* %704, i64 16
  %745 = getelementptr inbounds float, float* %705, i64 4
  %746 = add nuw nsw i64 %703, 4
  %747 = icmp slt i64 %746, %72
  br i1 %747, label %702, label %748

748:                                              ; preds = %702, %695
  %749 = phi <4 x float> [ zeroinitializer, %695 ], [ %723, %702 ]
  %750 = phi <4 x float> [ zeroinitializer, %695 ], [ %725, %702 ]
  %751 = phi <4 x float> [ zeroinitializer, %695 ], [ %741, %702 ]
  %752 = phi <4 x float> [ zeroinitializer, %695 ], [ %743, %702 ]
  %753 = phi float* [ %700, %695 ], [ %696, %702 ]
  %754 = phi float* [ %680, %695 ], [ %744, %702 ]
  %755 = phi i64 [ 0, %695 ], [ %87, %702 ]
  %756 = fadd <4 x float> %749, %750
  %757 = fadd <4 x float> %751, %752
  %758 = fadd <4 x float> %756, %757
  %759 = icmp slt i64 %755, %5
  br i1 %759, label %760, label %808

760:                                              ; preds = %748
  %761 = sub i64 %5, %755
  %762 = xor i64 %755, -1
  %763 = and i64 %761, 1
  %764 = icmp eq i64 %763, 0
  br i1 %764, label %776, label %765

765:                                              ; preds = %760
  %766 = bitcast float* %754 to <4 x float>*
  %767 = load <4 x float>, <4 x float>* %766, align 1
  %768 = load float, float* %753, align 4
  %769 = insertelement <4 x float> undef, float %768, i32 0
  %770 = shufflevector <4 x float> %769, <4 x float> undef, <4 x i32> zeroinitializer
  %771 = fmul <4 x float> %767, %770
  %772 = fadd <4 x float> %758, %771
  %773 = getelementptr inbounds float, float* %754, i64 4
  %774 = getelementptr inbounds float, float* %753, i64 1
  %775 = add nuw nsw i64 %755, 1
  br label %776

776:                                              ; preds = %765, %760
  %777 = phi <4 x float> [ %772, %765 ], [ undef, %760 ]
  %778 = phi i64 [ %775, %765 ], [ %755, %760 ]
  %779 = phi float* [ %773, %765 ], [ %754, %760 ]
  %780 = phi float* [ %774, %765 ], [ %753, %760 ]
  %781 = phi <4 x float> [ %772, %765 ], [ %758, %760 ]
  %782 = icmp eq i64 %762, %88
  br i1 %782, label %808, label %783

783:                                              ; preds = %776, %783
  %784 = phi i64 [ %806, %783 ], [ %778, %776 ]
  %785 = phi float* [ %804, %783 ], [ %779, %776 ]
  %786 = phi float* [ %805, %783 ], [ %780, %776 ]
  %787 = phi <4 x float> [ %803, %783 ], [ %781, %776 ]
  %788 = bitcast float* %785 to <4 x float>*
  %789 = load <4 x float>, <4 x float>* %788, align 1
  %790 = load float, float* %786, align 4
  %791 = insertelement <4 x float> undef, float %790, i32 0
  %792 = shufflevector <4 x float> %791, <4 x float> undef, <4 x i32> zeroinitializer
  %793 = fmul <4 x float> %789, %792
  %794 = fadd <4 x float> %787, %793
  %795 = getelementptr inbounds float, float* %785, i64 4
  %796 = getelementptr inbounds float, float* %786, i64 1
  %797 = bitcast float* %795 to <4 x float>*
  %798 = load <4 x float>, <4 x float>* %797, align 1
  %799 = load float, float* %796, align 4
  %800 = insertelement <4 x float> undef, float %799, i32 0
  %801 = shufflevector <4 x float> %800, <4 x float> undef, <4 x i32> zeroinitializer
  %802 = fmul <4 x float> %798, %801
  %803 = fadd <4 x float> %794, %802
  %804 = getelementptr inbounds float, float* %785, i64 8
  %805 = getelementptr inbounds float, float* %786, i64 2
  %806 = add nuw nsw i64 %784, 2
  %807 = icmp eq i64 %806, %5
  br i1 %807, label %808, label %783

808:                                              ; preds = %776, %783, %748
  %809 = phi <4 x float> [ %758, %748 ], [ %777, %776 ], [ %803, %783 ]
  %810 = load float*, float** %74, align 8
  %811 = load i64, i64* %75, align 8
  %812 = mul nsw i64 %811, %677
  %813 = add nsw i64 %812, %697
  %814 = getelementptr inbounds float, float* %810, i64 %813
  %815 = mul nsw i64 %811, 3
  %816 = getelementptr inbounds float, float* %814, i64 %815
  %817 = load float, float* %816, align 4
  %818 = shl nsw i64 %811, 1
  %819 = getelementptr inbounds float, float* %814, i64 %818
  %820 = load float, float* %819, align 4
  %821 = getelementptr inbounds float, float* %814, i64 %811
  %822 = load float, float* %821, align 4
  %823 = load float, float* %814, align 4
  %824 = insertelement <4 x float> undef, float %823, i32 0
  %825 = insertelement <4 x float> %824, float %822, i32 1
  %826 = insertelement <4 x float> %825, float %820, i32 2
  %827 = insertelement <4 x float> %826, float %817, i32 3
  %828 = fmul <4 x float> %77, %809
  %829 = fadd <4 x float> %828, %827
  %830 = extractelement <4 x float> %829, i32 0
  store float %830, float* %814, align 4
  %831 = extractelement <4 x float> %829, i32 1
  store float %831, float* %821, align 4
  %832 = extractelement <4 x float> %829, i32 2
  store float %832, float* %819, align 4
  %833 = extractelement <4 x float> %829, i32 3
  store float %833, float* %816, align 4
  %834 = add i64 %697, 1
  %835 = getelementptr float, float* %696, i64 %15
  %836 = icmp eq i64 %834, %4
  br i1 %836, label %692, label %695

837:                                              ; preds = %683, %842
  %838 = phi i64 [ %19, %683 ], [ %843, %842 ]
  %839 = mul nsw i64 %838, %17
  %840 = add nsw i64 %839, %11
  %841 = getelementptr inbounds float, float* %3, i64 %840
  br label %845

842:                                              ; preds = %869
  %843 = add i64 %838, 1
  %844 = icmp eq i64 %843, %6
  br i1 %844, label %915, label %837

845:                                              ; preds = %869, %837
  %846 = phi i64 [ %33, %837 ], [ %879, %869 ]
  %847 = mul nsw i64 %846, %15
  %848 = add nsw i64 %847, %10
  %849 = getelementptr inbounds float, float* %2, i64 %848
  %850 = bitcast float* %849 to i8*
  call void @llvm.prefetch(i8* %850, i32 0, i32 3, i32 1) #11
  br i1 %684, label %851, label %869

851:                                              ; preds = %845
  br i1 %689, label %852, label %881

852:                                              ; preds = %881, %851
  %853 = phi float [ undef, %851 ], [ %911, %881 ]
  %854 = phi i64 [ 0, %851 ], [ %912, %881 ]
  %855 = phi float [ 0.000000e+00, %851 ], [ %911, %881 ]
  br i1 %691, label %869, label %856

856:                                              ; preds = %852, %856
  %857 = phi i64 [ %866, %856 ], [ %854, %852 ]
  %858 = phi float [ %865, %856 ], [ %855, %852 ]
  %859 = phi i64 [ %867, %856 ], [ %688, %852 ]
  %860 = getelementptr inbounds float, float* %849, i64 %857
  %861 = load float, float* %860, align 4
  %862 = getelementptr inbounds float, float* %841, i64 %857
  %863 = load float, float* %862, align 4
  %864 = fmul float %861, %863
  %865 = fadd float %858, %864
  %866 = add nuw nsw i64 %857, 1
  %867 = add i64 %859, -1
  %868 = icmp eq i64 %867, 0
  br i1 %868, label %869, label %856, !llvm.loop !134

869:                                              ; preds = %852, %856, %845
  %870 = phi float [ 0.000000e+00, %845 ], [ %853, %852 ], [ %865, %856 ]
  %871 = fmul float %870, %7
  %872 = load float*, float** %685, align 8
  %873 = load i64, i64* %686, align 8
  %874 = mul nsw i64 %873, %838
  %875 = add nsw i64 %874, %846
  %876 = getelementptr inbounds float, float* %872, i64 %875
  %877 = load float, float* %876, align 4
  %878 = fadd float %871, %877
  store float %878, float* %876, align 4
  %879 = add i64 %846, 1
  %880 = icmp eq i64 %879, %4
  br i1 %880, label %842, label %845

881:                                              ; preds = %851, %881
  %882 = phi i64 [ %912, %881 ], [ 0, %851 ]
  %883 = phi float [ %911, %881 ], [ 0.000000e+00, %851 ]
  %884 = phi i64 [ %913, %881 ], [ %690, %851 ]
  %885 = getelementptr inbounds float, float* %849, i64 %882
  %886 = load float, float* %885, align 4
  %887 = getelementptr inbounds float, float* %841, i64 %882
  %888 = load float, float* %887, align 4
  %889 = fmul float %886, %888
  %890 = fadd float %883, %889
  %891 = or i64 %882, 1
  %892 = getelementptr inbounds float, float* %849, i64 %891
  %893 = load float, float* %892, align 4
  %894 = getelementptr inbounds float, float* %841, i64 %891
  %895 = load float, float* %894, align 4
  %896 = fmul float %893, %895
  %897 = fadd float %890, %896
  %898 = or i64 %882, 2
  %899 = getelementptr inbounds float, float* %849, i64 %898
  %900 = load float, float* %899, align 4
  %901 = getelementptr inbounds float, float* %841, i64 %898
  %902 = load float, float* %901, align 4
  %903 = fmul float %900, %902
  %904 = fadd float %897, %903
  %905 = or i64 %882, 3
  %906 = getelementptr inbounds float, float* %849, i64 %905
  %907 = load float, float* %906, align 4
  %908 = getelementptr inbounds float, float* %841, i64 %905
  %909 = load float, float* %908, align 4
  %910 = fmul float %907, %909
  %911 = fadd float %904, %910
  %912 = add nuw nsw i64 %882, 4
  %913 = add i64 %884, -4
  %914 = icmp eq i64 %913, 0
  br i1 %914, label %852, label %881

915:                                              ; preds = %842, %681, %64
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll(%"struct.Eigen::internal::lhs_process_one_packet"*, %"class.Eigen::internal::blas_data_mapper.275"* dereferenceable(16), float*, float*, float, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i64, i64) local_unnamed_addr #9 comdat align 2 {
  %18 = icmp slt i64 %5, %6
  br i1 %18, label %19, label %39

19:                                               ; preds = %17
  %20 = icmp sgt i64 %16, 0
  %21 = shl i64 %9, 2
  %22 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %1, i64 0, i32 0
  %23 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.275", %"class.Eigen::internal::blas_data_mapper.275"* %1, i64 0, i32 1
  %24 = sext i32 %11 to i64
  %25 = shl i64 %10, 2
  %26 = icmp sgt i64 %12, 0
  %27 = shl nsw i64 %13, 2
  %28 = icmp slt i64 %12, %15
  %29 = insertelement <4 x float> undef, float %4, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = icmp slt i64 %16, %14
  br label %32

32:                                               ; preds = %19, %305
  %33 = phi i64 [ %5, %19 ], [ %306, %305 ]
  br i1 %20, label %34, label %40

34:                                               ; preds = %32
  %35 = mul nsw i64 %33, %7
  %36 = add nsw i64 %35, %21
  %37 = getelementptr inbounds float, float* %2, i64 %36
  %38 = bitcast float* %37 to i8*
  br label %46

39:                                               ; preds = %305, %17
  ret void

40:                                               ; preds = %254, %32
  br i1 %31, label %41, label %305

41:                                               ; preds = %40
  %42 = mul nsw i64 %33, %7
  %43 = add nsw i64 %42, %21
  %44 = getelementptr inbounds float, float* %2, i64 %43
  %45 = bitcast float* %44 to i8*
  br label %308

46:                                               ; preds = %34, %254
  %47 = phi i64 [ 0, %34 ], [ %275, %254 ]
  tail call void @llvm.prefetch(i8* %38, i32 0, i32 3, i32 1) #11
  %48 = load float*, float** %22, align 8
  %49 = load i64, i64* %23, align 8
  %50 = mul nsw i64 %49, %47
  %51 = add nsw i64 %50, %33
  %52 = getelementptr inbounds float, float* %48, i64 %51
  %53 = or i64 %47, 1
  %54 = mul nsw i64 %49, %53
  %55 = add nsw i64 %54, %33
  %56 = getelementptr inbounds float, float* %48, i64 %55
  %57 = or i64 %47, 2
  %58 = mul nsw i64 %49, %57
  %59 = add nsw i64 %58, %33
  %60 = getelementptr inbounds float, float* %48, i64 %59
  %61 = or i64 %47, 3
  %62 = mul nsw i64 %49, %61
  %63 = add nsw i64 %62, %33
  %64 = getelementptr inbounds float, float* %48, i64 %63
  %65 = getelementptr inbounds float, float* %52, i64 %24
  %66 = bitcast float* %65 to i8*
  tail call void @llvm.prefetch(i8* %66, i32 0, i32 3, i32 1) #11
  %67 = getelementptr inbounds float, float* %56, i64 %24
  %68 = bitcast float* %67 to i8*
  tail call void @llvm.prefetch(i8* %68, i32 0, i32 3, i32 1) #11
  %69 = getelementptr inbounds float, float* %60, i64 %24
  %70 = bitcast float* %69 to i8*
  tail call void @llvm.prefetch(i8* %70, i32 0, i32 3, i32 1) #11
  %71 = getelementptr inbounds float, float* %64, i64 %24
  %72 = bitcast float* %71 to i8*
  tail call void @llvm.prefetch(i8* %72, i32 0, i32 3, i32 1) #11
  %73 = mul nsw i64 %47, %8
  %74 = add nsw i64 %73, %25
  %75 = getelementptr inbounds float, float* %3, i64 %74
  %76 = bitcast float* %75 to i8*
  tail call void @llvm.prefetch(i8* %76, i32 0, i32 3, i32 1) #11
  br i1 %26, label %92, label %77

77:                                               ; preds = %92, %46
  %78 = phi <4 x float> [ zeroinitializer, %46 ], [ %249, %92 ]
  %79 = phi <4 x float> [ zeroinitializer, %46 ], [ %246, %92 ]
  %80 = phi <4 x float> [ zeroinitializer, %46 ], [ %243, %92 ]
  %81 = phi <4 x float> [ zeroinitializer, %46 ], [ %240, %92 ]
  %82 = phi <4 x float> [ zeroinitializer, %46 ], [ %231, %92 ]
  %83 = phi <4 x float> [ zeroinitializer, %46 ], [ %228, %92 ]
  %84 = phi <4 x float> [ zeroinitializer, %46 ], [ %225, %92 ]
  %85 = phi <4 x float> [ zeroinitializer, %46 ], [ %222, %92 ]
  %86 = phi float* [ %37, %46 ], [ %251, %92 ]
  %87 = phi float* [ %75, %46 ], [ %250, %92 ]
  %88 = fadd <4 x float> %81, %85
  %89 = fadd <4 x float> %80, %84
  %90 = fadd <4 x float> %79, %83
  %91 = fadd <4 x float> %78, %82
  br i1 %28, label %277, label %254

92:                                               ; preds = %46, %92
  %93 = phi i64 [ %252, %92 ], [ 0, %46 ]
  %94 = phi float* [ %250, %92 ], [ %75, %46 ]
  %95 = phi float* [ %251, %92 ], [ %37, %46 ]
  %96 = phi <4 x float> [ %222, %92 ], [ zeroinitializer, %46 ]
  %97 = phi <4 x float> [ %225, %92 ], [ zeroinitializer, %46 ]
  %98 = phi <4 x float> [ %228, %92 ], [ zeroinitializer, %46 ]
  %99 = phi <4 x float> [ %231, %92 ], [ zeroinitializer, %46 ]
  %100 = phi <4 x float> [ %240, %92 ], [ zeroinitializer, %46 ]
  %101 = phi <4 x float> [ %243, %92 ], [ zeroinitializer, %46 ]
  %102 = phi <4 x float> [ %246, %92 ], [ zeroinitializer, %46 ]
  %103 = phi <4 x float> [ %249, %92 ], [ zeroinitializer, %46 ]
  tail call void asm sideeffect "#begin gebp micro kernel 1/half/quarterX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !135
  %104 = getelementptr inbounds float, float* %94, i64 48
  %105 = bitcast float* %104 to i8*
  tail call void @llvm.prefetch(i8* %105, i32 0, i32 3, i32 1) #11
  tail call void asm sideeffect "#begin step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !136
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !137
  %106 = bitcast float* %95 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 16
  %108 = bitcast float* %94 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 16
  %110 = shufflevector <4 x float> %109, <4 x float> undef, <4 x i32> zeroinitializer
  %111 = fmul <4 x float> %107, %110
  %112 = fadd <4 x float> %96, %111
  %113 = shufflevector <4 x float> %109, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %114 = fmul <4 x float> %107, %113
  %115 = fadd <4 x float> %97, %114
  %116 = shufflevector <4 x float> %109, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %117 = fmul <4 x float> %107, %116
  %118 = fadd <4 x float> %98, %117
  %119 = shufflevector <4 x float> %109, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %120 = fmul <4 x float> %107, %119
  %121 = fadd <4 x float> %99, %120
  tail call void asm sideeffect "#end step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !138
  tail call void asm sideeffect "#begin step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !136
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !137
  %122 = getelementptr inbounds float, float* %95, i64 4
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 16
  %125 = getelementptr inbounds float, float* %94, i64 4
  %126 = bitcast float* %125 to <4 x float>*
  %127 = load <4 x float>, <4 x float>* %126, align 16
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> zeroinitializer
  %129 = fmul <4 x float> %124, %128
  %130 = fadd <4 x float> %100, %129
  %131 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %132 = fmul <4 x float> %124, %131
  %133 = fadd <4 x float> %101, %132
  %134 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %135 = fmul <4 x float> %124, %134
  %136 = fadd <4 x float> %102, %135
  %137 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %138 = fmul <4 x float> %124, %137
  %139 = fadd <4 x float> %103, %138
  tail call void asm sideeffect "#end step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !138
  tail call void asm sideeffect "#begin step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !136
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !137
  %140 = getelementptr inbounds float, float* %95, i64 8
  %141 = bitcast float* %140 to <4 x float>*
  %142 = load <4 x float>, <4 x float>* %141, align 16
  %143 = getelementptr inbounds float, float* %94, i64 8
  %144 = bitcast float* %143 to <4 x float>*
  %145 = load <4 x float>, <4 x float>* %144, align 16
  %146 = shufflevector <4 x float> %145, <4 x float> undef, <4 x i32> zeroinitializer
  %147 = fmul <4 x float> %142, %146
  %148 = fadd <4 x float> %112, %147
  %149 = shufflevector <4 x float> %145, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %150 = fmul <4 x float> %142, %149
  %151 = fadd <4 x float> %115, %150
  %152 = shufflevector <4 x float> %145, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %153 = fmul <4 x float> %142, %152
  %154 = fadd <4 x float> %118, %153
  %155 = shufflevector <4 x float> %145, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %156 = fmul <4 x float> %142, %155
  %157 = fadd <4 x float> %121, %156
  tail call void asm sideeffect "#end step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !138
  tail call void asm sideeffect "#begin step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !136
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !137
  %158 = getelementptr inbounds float, float* %95, i64 12
  %159 = bitcast float* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 16
  %161 = getelementptr inbounds float, float* %94, i64 12
  %162 = bitcast float* %161 to <4 x float>*
  %163 = load <4 x float>, <4 x float>* %162, align 16
  %164 = shufflevector <4 x float> %163, <4 x float> undef, <4 x i32> zeroinitializer
  %165 = fmul <4 x float> %160, %164
  %166 = fadd <4 x float> %130, %165
  %167 = shufflevector <4 x float> %163, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %168 = fmul <4 x float> %160, %167
  %169 = fadd <4 x float> %133, %168
  %170 = shufflevector <4 x float> %163, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %171 = fmul <4 x float> %160, %170
  %172 = fadd <4 x float> %136, %171
  %173 = shufflevector <4 x float> %163, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %174 = fmul <4 x float> %160, %173
  %175 = fadd <4 x float> %139, %174
  tail call void asm sideeffect "#end step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !138
  %176 = getelementptr inbounds float, float* %94, i64 64
  %177 = bitcast float* %176 to i8*
  tail call void @llvm.prefetch(i8* %177, i32 0, i32 3, i32 1) #11
  tail call void asm sideeffect "#begin step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !136
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !137
  %178 = getelementptr inbounds float, float* %95, i64 16
  %179 = bitcast float* %178 to <4 x float>*
  %180 = load <4 x float>, <4 x float>* %179, align 16
  %181 = getelementptr inbounds float, float* %94, i64 16
  %182 = bitcast float* %181 to <4 x float>*
  %183 = load <4 x float>, <4 x float>* %182, align 16
  %184 = shufflevector <4 x float> %183, <4 x float> undef, <4 x i32> zeroinitializer
  %185 = fmul <4 x float> %180, %184
  %186 = fadd <4 x float> %148, %185
  %187 = shufflevector <4 x float> %183, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %188 = fmul <4 x float> %180, %187
  %189 = fadd <4 x float> %151, %188
  %190 = shufflevector <4 x float> %183, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %191 = fmul <4 x float> %180, %190
  %192 = fadd <4 x float> %154, %191
  %193 = shufflevector <4 x float> %183, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %194 = fmul <4 x float> %180, %193
  %195 = fadd <4 x float> %157, %194
  tail call void asm sideeffect "#end step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !138
  tail call void asm sideeffect "#begin step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !136
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !137
  %196 = getelementptr inbounds float, float* %95, i64 20
  %197 = bitcast float* %196 to <4 x float>*
  %198 = load <4 x float>, <4 x float>* %197, align 16
  %199 = getelementptr inbounds float, float* %94, i64 20
  %200 = bitcast float* %199 to <4 x float>*
  %201 = load <4 x float>, <4 x float>* %200, align 16
  %202 = shufflevector <4 x float> %201, <4 x float> undef, <4 x i32> zeroinitializer
  %203 = fmul <4 x float> %198, %202
  %204 = fadd <4 x float> %166, %203
  %205 = shufflevector <4 x float> %201, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %206 = fmul <4 x float> %198, %205
  %207 = fadd <4 x float> %169, %206
  %208 = shufflevector <4 x float> %201, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %209 = fmul <4 x float> %198, %208
  %210 = fadd <4 x float> %172, %209
  %211 = shufflevector <4 x float> %201, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %212 = fmul <4 x float> %198, %211
  %213 = fadd <4 x float> %175, %212
  tail call void asm sideeffect "#end step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !138
  tail call void asm sideeffect "#begin step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !136
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !137
  %214 = getelementptr inbounds float, float* %95, i64 24
  %215 = bitcast float* %214 to <4 x float>*
  %216 = load <4 x float>, <4 x float>* %215, align 16
  %217 = getelementptr inbounds float, float* %94, i64 24
  %218 = bitcast float* %217 to <4 x float>*
  %219 = load <4 x float>, <4 x float>* %218, align 16
  %220 = shufflevector <4 x float> %219, <4 x float> undef, <4 x i32> zeroinitializer
  %221 = fmul <4 x float> %216, %220
  %222 = fadd <4 x float> %186, %221
  %223 = shufflevector <4 x float> %219, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %224 = fmul <4 x float> %216, %223
  %225 = fadd <4 x float> %189, %224
  %226 = shufflevector <4 x float> %219, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %227 = fmul <4 x float> %216, %226
  %228 = fadd <4 x float> %192, %227
  %229 = shufflevector <4 x float> %219, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %230 = fmul <4 x float> %216, %229
  %231 = fadd <4 x float> %195, %230
  tail call void asm sideeffect "#end step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !138
  tail call void asm sideeffect "#begin step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !136
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !137
  %232 = getelementptr inbounds float, float* %95, i64 28
  %233 = bitcast float* %232 to <4 x float>*
  %234 = load <4 x float>, <4 x float>* %233, align 16
  %235 = getelementptr inbounds float, float* %94, i64 28
  %236 = bitcast float* %235 to <4 x float>*
  %237 = load <4 x float>, <4 x float>* %236, align 16
  %238 = shufflevector <4 x float> %237, <4 x float> undef, <4 x i32> zeroinitializer
  %239 = fmul <4 x float> %234, %238
  %240 = fadd <4 x float> %204, %239
  %241 = shufflevector <4 x float> %237, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %242 = fmul <4 x float> %234, %241
  %243 = fadd <4 x float> %207, %242
  %244 = shufflevector <4 x float> %237, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %245 = fmul <4 x float> %234, %244
  %246 = fadd <4 x float> %210, %245
  %247 = shufflevector <4 x float> %237, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %248 = fmul <4 x float> %234, %247
  %249 = fadd <4 x float> %213, %248
  tail call void asm sideeffect "#end step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !138
  %250 = getelementptr inbounds float, float* %94, i64 %27
  %251 = getelementptr inbounds float, float* %95, i64 %27
  tail call void asm sideeffect "#end gebp micro kernel 1/half/quarterX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !139
  %252 = add nsw i64 %93, %13
  %253 = icmp slt i64 %252, %12
  br i1 %253, label %92, label %77

254:                                              ; preds = %277, %77
  %255 = phi <4 x float> [ %91, %77 ], [ %300, %277 ]
  %256 = phi <4 x float> [ %90, %77 ], [ %297, %277 ]
  %257 = phi <4 x float> [ %89, %77 ], [ %294, %277 ]
  %258 = phi <4 x float> [ %88, %77 ], [ %291, %277 ]
  %259 = bitcast float* %52 to <4 x float>*
  %260 = load <4 x float>, <4 x float>* %259, align 1
  %261 = bitcast float* %56 to <4 x float>*
  %262 = load <4 x float>, <4 x float>* %261, align 1
  %263 = fmul <4 x float> %30, %258
  %264 = fadd <4 x float> %263, %260
  %265 = fmul <4 x float> %30, %257
  %266 = fadd <4 x float> %265, %262
  store <4 x float> %264, <4 x float>* %259, align 1
  store <4 x float> %266, <4 x float>* %261, align 1
  %267 = bitcast float* %60 to <4 x float>*
  %268 = load <4 x float>, <4 x float>* %267, align 1
  %269 = bitcast float* %64 to <4 x float>*
  %270 = load <4 x float>, <4 x float>* %269, align 1
  %271 = fmul <4 x float> %30, %256
  %272 = fadd <4 x float> %271, %268
  %273 = fmul <4 x float> %30, %255
  %274 = fadd <4 x float> %273, %270
  store <4 x float> %272, <4 x float>* %267, align 1
  store <4 x float> %274, <4 x float>* %269, align 1
  %275 = add nuw nsw i64 %47, 4
  %276 = icmp slt i64 %275, %16
  br i1 %276, label %46, label %40

277:                                              ; preds = %77, %277
  %278 = phi i64 [ %303, %277 ], [ %12, %77 ]
  %279 = phi float* [ %301, %277 ], [ %87, %77 ]
  %280 = phi float* [ %302, %277 ], [ %86, %77 ]
  %281 = phi <4 x float> [ %291, %277 ], [ %88, %77 ]
  %282 = phi <4 x float> [ %294, %277 ], [ %89, %77 ]
  %283 = phi <4 x float> [ %297, %277 ], [ %90, %77 ]
  %284 = phi <4 x float> [ %300, %277 ], [ %91, %77 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !136
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !137
  %285 = bitcast float* %280 to <4 x float>*
  %286 = load <4 x float>, <4 x float>* %285, align 16
  %287 = bitcast float* %279 to <4 x float>*
  %288 = load <4 x float>, <4 x float>* %287, align 16
  %289 = shufflevector <4 x float> %288, <4 x float> undef, <4 x i32> zeroinitializer
  %290 = fmul <4 x float> %286, %289
  %291 = fadd <4 x float> %281, %290
  %292 = shufflevector <4 x float> %288, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %293 = fmul <4 x float> %286, %292
  %294 = fadd <4 x float> %282, %293
  %295 = shufflevector <4 x float> %288, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %296 = fmul <4 x float> %286, %295
  %297 = fadd <4 x float> %283, %296
  %298 = shufflevector <4 x float> %288, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %299 = fmul <4 x float> %286, %298
  %300 = fadd <4 x float> %284, %299
  tail call void asm sideeffect "#end step of gebp micro kernel 1X4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !138
  %301 = getelementptr inbounds float, float* %279, i64 4
  %302 = getelementptr inbounds float, float* %280, i64 4
  %303 = add i64 %278, 1
  %304 = icmp eq i64 %303, %15
  br i1 %304, label %254, label %277

305:                                              ; preds = %401, %40
  %306 = add nsw i64 %33, 4
  %307 = icmp slt i64 %306, %6
  br i1 %307, label %32, label %39

308:                                              ; preds = %401, %41
  %309 = phi i64 [ %16, %41 ], [ %407, %401 ]
  tail call void @llvm.prefetch(i8* %45, i32 0, i32 3, i32 1) #11
  %310 = load float*, float** %22, align 8
  %311 = load i64, i64* %23, align 8
  %312 = mul nsw i64 %311, %309
  %313 = add nsw i64 %312, %33
  %314 = getelementptr inbounds float, float* %310, i64 %313
  %315 = mul nsw i64 %309, %8
  %316 = add nsw i64 %315, %10
  %317 = getelementptr inbounds float, float* %3, i64 %316
  br i1 %26, label %322, label %318

318:                                              ; preds = %322, %308
  %319 = phi <4 x float> [ zeroinitializer, %308 ], [ %396, %322 ]
  %320 = phi float* [ %44, %308 ], [ %398, %322 ]
  %321 = phi float* [ %317, %308 ], [ %397, %322 ]
  br i1 %28, label %409, label %401

322:                                              ; preds = %308, %322
  %323 = phi i64 [ %399, %322 ], [ 0, %308 ]
  %324 = phi float* [ %397, %322 ], [ %317, %308 ]
  %325 = phi float* [ %398, %322 ], [ %44, %308 ]
  %326 = phi <4 x float> [ %396, %322 ], [ zeroinitializer, %308 ]
  tail call void asm sideeffect "#begin gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !140
  tail call void asm sideeffect "#begin step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !141
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !142
  %327 = bitcast float* %325 to <4 x float>*
  %328 = load <4 x float>, <4 x float>* %327, align 1
  %329 = load float, float* %324, align 4
  %330 = insertelement <4 x float> undef, float %329, i32 0
  %331 = shufflevector <4 x float> %330, <4 x float> undef, <4 x i32> zeroinitializer
  %332 = fmul <4 x float> %328, %331
  %333 = fadd <4 x float> %326, %332
  tail call void asm sideeffect "#end step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !143
  tail call void asm sideeffect "#begin step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !144
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !145
  %334 = getelementptr inbounds float, float* %325, i64 4
  %335 = bitcast float* %334 to <4 x float>*
  %336 = load <4 x float>, <4 x float>* %335, align 1
  %337 = getelementptr inbounds float, float* %324, i64 1
  %338 = load float, float* %337, align 4
  %339 = insertelement <4 x float> undef, float %338, i32 0
  %340 = shufflevector <4 x float> %339, <4 x float> undef, <4 x i32> zeroinitializer
  %341 = fmul <4 x float> %336, %340
  %342 = fadd <4 x float> %333, %341
  tail call void asm sideeffect "#end step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !146
  tail call void asm sideeffect "#begin step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !147
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !148
  %343 = getelementptr inbounds float, float* %325, i64 8
  %344 = bitcast float* %343 to <4 x float>*
  %345 = load <4 x float>, <4 x float>* %344, align 1
  %346 = getelementptr inbounds float, float* %324, i64 2
  %347 = load float, float* %346, align 4
  %348 = insertelement <4 x float> undef, float %347, i32 0
  %349 = shufflevector <4 x float> %348, <4 x float> undef, <4 x i32> zeroinitializer
  %350 = fmul <4 x float> %345, %349
  %351 = fadd <4 x float> %342, %350
  tail call void asm sideeffect "#end step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !149
  tail call void asm sideeffect "#begin step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !150
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !151
  %352 = getelementptr inbounds float, float* %325, i64 12
  %353 = bitcast float* %352 to <4 x float>*
  %354 = load <4 x float>, <4 x float>* %353, align 1
  %355 = getelementptr inbounds float, float* %324, i64 3
  %356 = load float, float* %355, align 4
  %357 = insertelement <4 x float> undef, float %356, i32 0
  %358 = shufflevector <4 x float> %357, <4 x float> undef, <4 x i32> zeroinitializer
  %359 = fmul <4 x float> %354, %358
  %360 = fadd <4 x float> %351, %359
  tail call void asm sideeffect "#end step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !152
  tail call void asm sideeffect "#begin step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !153
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !154
  %361 = getelementptr inbounds float, float* %325, i64 16
  %362 = bitcast float* %361 to <4 x float>*
  %363 = load <4 x float>, <4 x float>* %362, align 1
  %364 = getelementptr inbounds float, float* %324, i64 4
  %365 = load float, float* %364, align 4
  %366 = insertelement <4 x float> undef, float %365, i32 0
  %367 = shufflevector <4 x float> %366, <4 x float> undef, <4 x i32> zeroinitializer
  %368 = fmul <4 x float> %363, %367
  %369 = fadd <4 x float> %360, %368
  tail call void asm sideeffect "#end step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !155
  tail call void asm sideeffect "#begin step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !156
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !157
  %370 = getelementptr inbounds float, float* %325, i64 20
  %371 = bitcast float* %370 to <4 x float>*
  %372 = load <4 x float>, <4 x float>* %371, align 1
  %373 = getelementptr inbounds float, float* %324, i64 5
  %374 = load float, float* %373, align 4
  %375 = insertelement <4 x float> undef, float %374, i32 0
  %376 = shufflevector <4 x float> %375, <4 x float> undef, <4 x i32> zeroinitializer
  %377 = fmul <4 x float> %372, %376
  %378 = fadd <4 x float> %369, %377
  tail call void asm sideeffect "#end step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !158
  tail call void asm sideeffect "#begin step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !159
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !160
  %379 = getelementptr inbounds float, float* %325, i64 24
  %380 = bitcast float* %379 to <4 x float>*
  %381 = load <4 x float>, <4 x float>* %380, align 1
  %382 = getelementptr inbounds float, float* %324, i64 6
  %383 = load float, float* %382, align 4
  %384 = insertelement <4 x float> undef, float %383, i32 0
  %385 = shufflevector <4 x float> %384, <4 x float> undef, <4 x i32> zeroinitializer
  %386 = fmul <4 x float> %381, %385
  %387 = fadd <4 x float> %378, %386
  tail call void asm sideeffect "#end step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !161
  tail call void asm sideeffect "#begin step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !162
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !163
  %388 = getelementptr inbounds float, float* %325, i64 28
  %389 = bitcast float* %388 to <4 x float>*
  %390 = load <4 x float>, <4 x float>* %389, align 1
  %391 = getelementptr inbounds float, float* %324, i64 7
  %392 = load float, float* %391, align 4
  %393 = insertelement <4 x float> undef, float %392, i32 0
  %394 = shufflevector <4 x float> %393, <4 x float> undef, <4 x i32> zeroinitializer
  %395 = fmul <4 x float> %390, %394
  %396 = fadd <4 x float> %387, %395
  tail call void asm sideeffect "#end step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !164
  %397 = getelementptr inbounds float, float* %324, i64 %13
  %398 = getelementptr inbounds float, float* %325, i64 %27
  tail call void asm sideeffect "#end gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !165
  %399 = add nsw i64 %323, %13
  %400 = icmp slt i64 %399, %12
  br i1 %400, label %322, label %318

401:                                              ; preds = %409, %318
  %402 = phi <4 x float> [ %319, %318 ], [ %420, %409 ]
  %403 = bitcast float* %314 to <4 x float>*
  %404 = load <4 x float>, <4 x float>* %403, align 1
  %405 = fmul <4 x float> %30, %402
  %406 = fadd <4 x float> %405, %404
  store <4 x float> %406, <4 x float>* %403, align 1
  %407 = add i64 %309, 1
  %408 = icmp eq i64 %407, %14
  br i1 %408, label %305, label %308

409:                                              ; preds = %318, %409
  %410 = phi i64 [ %423, %409 ], [ %12, %318 ]
  %411 = phi float* [ %421, %409 ], [ %321, %318 ]
  %412 = phi float* [ %422, %409 ], [ %320, %318 ]
  %413 = phi <4 x float> [ %420, %409 ], [ %319, %318 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !166
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !167
  %414 = bitcast float* %412 to <4 x float>*
  %415 = load <4 x float>, <4 x float>* %414, align 1
  %416 = load float, float* %411, align 4
  %417 = insertelement <4 x float> undef, float %416, i32 0
  %418 = shufflevector <4 x float> %417, <4 x float> undef, <4 x i32> zeroinitializer
  %419 = fmul <4 x float> %415, %418
  %420 = fadd <4 x float> %413, %419
  tail call void asm sideeffect "#end step of gebp micro kernel 1/half/quarterX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !168
  %421 = getelementptr inbounds float, float* %411, i64 1
  %422 = getelementptr inbounds float, float* %412, i64 4
  %423 = add i64 %410, 1
  %424 = icmp eq i64 %423, %15
  br i1 %424, label %401, label %409
}

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inaccessiblemem_or_argmemonly nounwind }
attributes #11 = { nounwind }
attributes #12 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE3colEl: argument 0"}
!4 = distinct !{!4, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE3colEl"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK5Eigen9DenseBaseINS_5BlockINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELin1ELb1EEEE9transposeEv: argument 0"}
!9 = distinct !{!9, !"_ZNK5Eigen9DenseBaseINS_5BlockINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELin1ELb1EEEE9transposeEv"}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !16}
!18 = !{!19, !21}
!19 = distinct !{!19, !20, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE8ConstantEllRKf: argument 0"}
!20 = distinct !{!20, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE8ConstantEllRKf"}
!21 = distinct !{!21, !22, !"_ZNK5Eigen10MatrixBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE8cwiseMinERKf: argument 0"}
!22 = distinct !{!22, !"_ZNK5Eigen10MatrixBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE8cwiseMinERKf"}
!23 = !{!24, !26}
!24 = distinct !{!24, !25, !"_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_min_opIffLi0EEEKNS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE8ConstantEllRKf: argument 0"}
!25 = distinct !{!25, !"_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_min_opIffLi0EEEKNS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE8ConstantEllRKf"}
!26 = distinct !{!26, !27, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_min_opIffLi0EEEKNS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE8cwiseMaxERKf: argument 0"}
!27 = distinct !{!27, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_min_opIffLi0EEEKNS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE8cwiseMaxERKf"}
!28 = distinct !{!28, !16}
!29 = distinct !{!29, !30, !16}
!30 = !{!"llvm.loop.unroll.runtime.disable"}
!31 = distinct !{!31, !16}
!32 = distinct !{!32, !30, !16}
!33 = !{i32 6013507}
!34 = !{i32 6015400}
!35 = distinct !{!35, !6}
!36 = distinct !{!36, !6}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN5Eigen8internal11blas_traitsINS_9TransposeIKNS_5BlockINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELin1ELb1EEEEEE7extractERKSD_: argument 0"}
!39 = distinct !{!39, !"_ZN5Eigen8internal11blas_traitsINS_9TransposeIKNS_5BlockINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELin1ELb1EEEEEE7extractERKSD_"}
!40 = distinct !{!40, !6}
!41 = distinct !{!41, !6}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE3colEl: argument 0"}
!44 = distinct !{!44, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE3colEl"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE3rowEl: argument 0"}
!47 = distinct !{!47, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE3rowEl"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZNK5Eigen9DenseBaseINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE3rowEl: argument 0"}
!50 = distinct !{!50, !"_ZNK5Eigen9DenseBaseINS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE3rowEl"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZNK5Eigen9DenseBaseINS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELin1ELb1EEEE9transposeEv: argument 0"}
!53 = distinct !{!53, !"_ZNK5Eigen9DenseBaseINS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELin1ELb1EEEE9transposeEv"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN5Eigen8internal11blas_traitsINS_9TransposeIKNS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELin1ELb1EEEEEE7extractERKSE_: argument 0"}
!56 = distinct !{!56, !"_ZN5Eigen8internal11blas_traitsINS_9TransposeIKNS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELin1ELb1EEEEEE7extractERKSE_"}
!57 = !{!"branch_weights", i32 1, i32 1048575}
!58 = !{i32 -2141695910}
!59 = !{i32 -2141696706}
!60 = !{i32 -2141696308}
!61 = !{i32 -2141696109}
!62 = !{i32 -2141696507}
!63 = !{i32 -2139870136}
!64 = !{i32 -2139869825}
!65 = !{!66}
!66 = distinct !{!66, !67}
!67 = distinct !{!67, !"LVerDomain"}
!68 = !{!69}
!69 = distinct !{!69, !67}
!70 = !{!71}
!71 = distinct !{!71, !67}
!72 = !{!73}
!73 = distinct !{!73, !67}
!74 = distinct !{!74, !16}
!75 = distinct !{!75, !16}
!76 = distinct !{!76, !6}
!77 = !{!78}
!78 = distinct !{!78, !79}
!79 = distinct !{!79, !"LVerDomain"}
!80 = !{!81}
!81 = distinct !{!81, !79}
!82 = distinct !{!82, !16}
!83 = distinct !{!83, !6}
!84 = distinct !{!84, !16}
!85 = !{i32 -2139890951}
!86 = !{i32 -2139889680}
!87 = !{i32 -2139889626}
!88 = !{i32 -2139888412}
!89 = !{i32 -2139888358}
!90 = !{i32 -2139887144}
!91 = !{i32 -2139887090}
!92 = !{i32 -2139885876}
!93 = !{i32 -2139885822}
!94 = !{i32 -2139884608}
!95 = !{i32 -2139884554}
!96 = !{i32 -2139883340}
!97 = !{i32 -2139883286}
!98 = !{i32 -2139882072}
!99 = !{i32 -2139882018}
!100 = !{i32 -2139880804}
!101 = !{i32 -2139880750}
!102 = !{i32 -2139880698}
!103 = !{i32 -2139879492}
!104 = !{i32 -2139879438}
!105 = !{i32 -2139879386}
!106 = !{i32 -2139878563}
!107 = !{i32 -2139878509}
!108 = !{i32 -2139878446}
!109 = !{i32 -2139877617}
!110 = !{i32 -2139877563}
!111 = !{i32 -2139877500}
!112 = !{i32 -2139876671}
!113 = !{i32 -2139876617}
!114 = !{i32 -2139876554}
!115 = !{i32 -2139875725}
!116 = !{i32 -2139875671}
!117 = !{i32 -2139875608}
!118 = !{i32 -2139874779}
!119 = !{i32 -2139874725}
!120 = !{i32 -2139874662}
!121 = !{i32 -2139873833}
!122 = !{i32 -2139873779}
!123 = !{i32 -2139873716}
!124 = !{i32 -2139872887}
!125 = !{i32 -2139872833}
!126 = !{i32 -2139872770}
!127 = !{i32 -2139871941}
!128 = !{i32 -2139871887}
!129 = !{i32 -2139871824}
!130 = !{i32 -2139871772}
!131 = !{i32 -2139870951}
!132 = !{i32 -2139870897}
!133 = !{i32 -2139870834}
!134 = distinct !{!134, !6}
!135 = !{i32 -2139930722}
!136 = !{i32 -2139930959}
!137 = !{i32 -2139930906}
!138 = !{i32 -2139930780}
!139 = !{i32 -2139930664}
!140 = !{i32 -2139930608}
!141 = !{i32 -2139930049}
!142 = !{i32 -2139929983}
!143 = !{i32 -2139929920}
!144 = !{i32 -2139929355}
!145 = !{i32 -2139929289}
!146 = !{i32 -2139929226}
!147 = !{i32 -2139928661}
!148 = !{i32 -2139928595}
!149 = !{i32 -2139928532}
!150 = !{i32 -2139927967}
!151 = !{i32 -2139927901}
!152 = !{i32 -2139927838}
!153 = !{i32 -2139927273}
!154 = !{i32 -2139927207}
!155 = !{i32 -2139927144}
!156 = !{i32 -2139926579}
!157 = !{i32 -2139926513}
!158 = !{i32 -2139926450}
!159 = !{i32 -2139925885}
!160 = !{i32 -2139925819}
!161 = !{i32 -2139925756}
!162 = !{i32 -2139925191}
!163 = !{i32 -2139925125}
!164 = !{i32 -2139925062}
!165 = !{i32 -2139924998}
!166 = !{i32 -2139924441}
!167 = !{i32 -2139924375}
!168 = !{i32 -2139924312}
