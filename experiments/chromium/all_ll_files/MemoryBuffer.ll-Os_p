; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/MemoryBuffer.cpp'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/MemoryBuffer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::nothrow_t" = type { i8 }
%"class.llvm::MemoryBuffer" = type { i32 (...)**, i8*, i8* }
%"class.llvm::StringRef" = type { i8*, i64 }
%"struct.(anonymous namespace)::NamedBufferAlloc" = type { %"class.llvm::Twine"* }
%"class.llvm::Twine" = type <{ %"union.llvm::Twine::Child", %"union.llvm::Twine::Child", i8, i8, [6 x i8] }>
%"union.llvm::Twine::Child" = type { %"class.llvm::Twine"* }
%"class.llvm::SmallString" = type { %"class.llvm::SmallVector" }
%"class.llvm::SmallVector" = type { %"class.llvm::SmallVectorImpl.base", %"struct.llvm::SmallVectorStorage" }
%"class.llvm::SmallVectorImpl.base" = type { %"class.llvm::SmallVectorTemplateBase.base" }
%"class.llvm::SmallVectorTemplateBase.base" = type { %"class.llvm::SmallVectorTemplateCommon.base" }
%"class.llvm::SmallVectorTemplateCommon.base" = type <{ %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }>
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [1 x i8] }
%"struct.llvm::SmallVectorStorage" = type { [255 x %"struct.llvm::AlignedCharArrayUnion"] }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase.base", [7 x i8] }
%"class.llvm::MemoryBufferRef" = type { %"class.llvm::StringRef", %"class.llvm::StringRef" }
%"class.llvm::ErrorOr" = type { %union.anon.4, i8, [7 x i8] }
%union.anon.4 = type { %"struct.llvm::AlignedCharArrayUnion.7" }
%"struct.llvm::AlignedCharArrayUnion.7" = type { %"struct.llvm::AlignedCharArray.8" }
%"struct.llvm::AlignedCharArray.8" = type { [16 x i8] }
%"class.std::__1::error_category" = type { i32 (...)** }
%"class.llvm::sys::fs::file_status" = type { i64, i64, i64, i64, i32, i32, i64, i32, i32 }
%"class.std::__1::error_code" = type { i32, %"class.std::__1::error_category"* }
%"class.llvm::sys::fs::mapped_file_region" = type { i64, i8* }
%"class.llvm::SmallString.9" = type { %"class.llvm::SmallVector.10" }
%"class.llvm::SmallVector.10" = type { %"class.llvm::SmallVectorImpl.base", %"struct.llvm::SmallVectorStorage.11" }
%"struct.llvm::SmallVectorStorage.11" = type { [16383 x %"struct.llvm::AlignedCharArrayUnion"] }
%"class.(anonymous namespace)::MemoryBufferMem" = type { %"class.llvm::MemoryBuffer" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.llvm::SmallVectorTemplateCommon" = type <{ %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion", [7 x i8] }>
%"class.(anonymous namespace)::MemoryBufferMMapFile" = type { %"class.llvm::MemoryBuffer", %"class.llvm::sys::fs::mapped_file_region" }

$_ZNK4llvm5Twine11toStringRefERNS_15SmallVectorImplIcEE = comdat any

$_ZNK4llvm12MemoryBuffer19getBufferIdentifierEv = comdat any

$_ZNK4llvm5Twine18getSingleStringRefEv = comdat any

$_ZN4llvm7ErrorOrINSt3__110unique_ptrINS_12MemoryBufferENS1_14default_deleteIS3_EEEEE13moveConstructIS6_EEvONS0_IT_EE = comdat any

@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"<stdin>\00", align 1
@_ZTVN4llvm12MemoryBufferE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.llvm::MemoryBuffer"*)* @_ZN4llvm12MemoryBufferD2Ev to i8*), i8* bitcast (void (%"class.llvm::MemoryBuffer"*)* @_ZN4llvm12MemoryBufferD0Ev to i8*), i8* bitcast ({ i8*, i64 } (%"class.llvm::MemoryBuffer"*)* @_ZNK4llvm12MemoryBuffer19getBufferIdentifierEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_115MemoryBufferMemE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.llvm::MemoryBuffer"*)* @_ZN4llvm12MemoryBufferD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::MemoryBufferMem"*)* @_ZN12_GLOBAL__N_115MemoryBufferMemD0Ev to i8*), i8* bitcast ({ i8*, i64 } (%"class.(anonymous namespace)::MemoryBufferMem"*)* @_ZNK12_GLOBAL__N_115MemoryBufferMem19getBufferIdentifierEv to i8*), i8* bitcast (i32 (%"class.(anonymous namespace)::MemoryBufferMem"*)* @_ZNK12_GLOBAL__N_115MemoryBufferMem13getBufferKindEv to i8*)] }, align 8
@_ZZL15getOpenFileImpliRKN4llvm5TwineEmmlbbE8PageSize = internal unnamed_addr global i32 0, align 4
@_ZGVZL15getOpenFileImpliRKN4llvm5TwineEmmlbbE8PageSize = internal global i64 0, align 8
@_ZTVN12_GLOBAL__N_120MemoryBufferMMapFileE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.(anonymous namespace)::MemoryBufferMMapFile"*)* @_ZN12_GLOBAL__N_120MemoryBufferMMapFileD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::MemoryBufferMMapFile"*)* @_ZN12_GLOBAL__N_120MemoryBufferMMapFileD0Ev to i8*), i8* bitcast ({ i8*, i64 } (%"class.(anonymous namespace)::MemoryBufferMMapFile"*)* @_ZNK12_GLOBAL__N_120MemoryBufferMMapFile19getBufferIdentifierEv to i8*), i8* bitcast (i32 (%"class.(anonymous namespace)::MemoryBufferMMapFile"*)* @_ZNK12_GLOBAL__N_120MemoryBufferMMapFile13getBufferKindEv to i8*)] }, align 8
@.str.3 = private unnamed_addr constant [15 x i8] c"Unknown buffer\00", align 1

@_ZN4llvm12MemoryBufferD1Ev = hidden unnamed_addr alias void (%"class.llvm::MemoryBuffer"*), void (%"class.llvm::MemoryBuffer"*)* @_ZN4llvm12MemoryBufferD2Ev

; Function Attrs: noreturn nounwind optsize ssp uwtable
define hidden void @_ZN4llvm12MemoryBufferD0Ev(%"class.llvm::MemoryBuffer"* nocapture readnone) unnamed_addr #0 align 2 {
  tail call void @llvm.trap() #17
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #1

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN4llvm12MemoryBuffer4initEPKcS2_b(%"class.llvm::MemoryBuffer"* nocapture, i8*, i8*, i1 zeroext) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.llvm::MemoryBuffer", %"class.llvm::MemoryBuffer"* %0, i64 0, i32 1
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %"class.llvm::MemoryBuffer", %"class.llvm::MemoryBuffer"* %0, i64 0, i32 2
  store i8* %2, i8** %6, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.llvm::MemoryBuffer"* @_ZN4llvm12MemoryBuffer12getMemBufferENS_9StringRefES1_b(i8*, i64, i8*, i64, i1 zeroext) local_unnamed_addr #3 align 2 {
  %6 = alloca %"class.llvm::StringRef", align 8
  %7 = alloca %"struct.(anonymous namespace)::NamedBufferAlloc", align 8
  %8 = alloca %"class.llvm::Twine", align 8
  %9 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %6, i64 0, i32 0
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %6, i64 0, i32 1
  store i64 %3, i64* %10, align 8
  %11 = bitcast %"struct.(anonymous namespace)::NamedBufferAlloc"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #18
  %12 = bitcast %"class.llvm::Twine"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #18
  %13 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %8, i64 0, i32 2
  store i8 5, i8* %13, align 8
  %14 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %8, i64 0, i32 3
  store i8 1, i8* %14, align 1
  %15 = bitcast %"class.llvm::Twine"* %8 to %"class.llvm::StringRef"**
  store %"class.llvm::StringRef"* %6, %"class.llvm::StringRef"** %15, align 8
  %16 = getelementptr inbounds %"struct.(anonymous namespace)::NamedBufferAlloc", %"struct.(anonymous namespace)::NamedBufferAlloc"* %7, i64 0, i32 0
  store %"class.llvm::Twine"* %8, %"class.llvm::Twine"** %16, align 8
  %17 = call fastcc i8* @_ZnwmRKN12_GLOBAL__N_116NamedBufferAllocE(i64 24, %"struct.(anonymous namespace)::NamedBufferAlloc"* nonnull dereferenceable(8) %7) #19
  %18 = bitcast i8* %17 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_115MemoryBufferMemE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %19 = getelementptr inbounds i8, i8* %0, i64 %1
  %20 = getelementptr inbounds i8, i8* %17, i64 8
  %21 = bitcast i8* %20 to i8**
  store i8* %0, i8** %21, align 8
  %22 = getelementptr inbounds i8, i8* %17, i64 16
  %23 = bitcast i8* %22 to i8**
  store i8* %19, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #18
  %24 = bitcast i8* %17 to %"class.llvm::MemoryBuffer"*
  ret %"class.llvm::MemoryBuffer"* %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc noalias nonnull i8* @_ZnwmRKN12_GLOBAL__N_116NamedBufferAllocE(i64, %"struct.(anonymous namespace)::NamedBufferAlloc"* nocapture readonly dereferenceable(8)) unnamed_addr #3 {
  %3 = alloca %"class.llvm::SmallString", align 8
  %4 = bitcast %"class.llvm::SmallString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %4) #18
  %5 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 256, i1 false)
  %6 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %7 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %6, i8** %7, align 8
  %8 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 1, i32 0
  %11 = bitcast i8** %9 to %"class.llvm::SmallVector"**
  store %"class.llvm::SmallVector"* %10, %"class.llvm::SmallVector"** %11, align 8
  %12 = getelementptr inbounds %"struct.(anonymous namespace)::NamedBufferAlloc", %"struct.(anonymous namespace)::NamedBufferAlloc"* %1, i64 0, i32 0
  %13 = load %"class.llvm::Twine"*, %"class.llvm::Twine"** %12, align 8
  %14 = bitcast %"class.llvm::SmallString"* %3 to %"class.llvm::SmallVectorImpl"*
  %15 = call { i8*, i64 } @_ZNK4llvm5Twine11toStringRefERNS_15SmallVectorImplIcEE(%"class.llvm::Twine"* %13, %"class.llvm::SmallVectorImpl"* nonnull dereferenceable(32) %14) #19
  %16 = extractvalue { i8*, i64 } %15, 1
  %17 = add i64 %0, 1
  %18 = add i64 %17, %16
  %19 = call i8* @_Znwm(i64 %18) #20
  %20 = getelementptr inbounds i8, i8* %19, i64 %0
  %21 = icmp eq i64 %16, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %2
  %23 = extractvalue { i8*, i64 } %15, 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %23, i64 %16, i1 false) #18
  br label %24

24:                                               ; preds = %2, %22
  %25 = getelementptr inbounds i8, i8* %20, i64 %16
  store i8 0, i8* %25, align 1
  %26 = load i8*, i8** %7, align 8
  %27 = icmp eq i8* %26, %6
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  call void @free(i8* %26) #20
  br label %29

29:                                               ; preds = %24, %28
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %4) #18
  ret i8* %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind optsize ssp uwtable
define hidden noalias nonnull %"class.llvm::MemoryBuffer"* @_ZN4llvm12MemoryBuffer12getMemBufferENS_15MemoryBufferRefEb(%"class.llvm::MemoryBufferRef"* nocapture readonly byval(%"class.llvm::MemoryBufferRef") align 8, i1 zeroext) local_unnamed_addr #3 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca %"struct.(anonymous namespace)::NamedBufferAlloc", align 8
  %5 = alloca %"class.llvm::Twine", align 8
  %6 = getelementptr inbounds %"class.llvm::MemoryBufferRef", %"class.llvm::MemoryBufferRef"* %0, i64 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.llvm::MemoryBufferRef", %"class.llvm::MemoryBufferRef"* %0, i64 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.llvm::MemoryBufferRef", %"class.llvm::MemoryBufferRef"* %0, i64 0, i32 1, i32 0
  %11 = bitcast i8** %10 to <2 x i64>*
  %12 = load <2 x i64>, <2 x i64>* %11, align 8
  %13 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13)
  store <2 x i64> %12, <2 x i64>* %3, align 16
  %14 = bitcast %"struct.(anonymous namespace)::NamedBufferAlloc"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #18
  %15 = bitcast %"class.llvm::Twine"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #18
  %16 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %5, i64 0, i32 2
  store i8 5, i8* %16, align 8
  %17 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %5, i64 0, i32 3
  store i8 1, i8* %17, align 1
  %18 = bitcast %"class.llvm::Twine"* %5 to <2 x i64>**
  store <2 x i64>* %3, <2 x i64>** %18, align 8
  %19 = getelementptr inbounds %"struct.(anonymous namespace)::NamedBufferAlloc", %"struct.(anonymous namespace)::NamedBufferAlloc"* %4, i64 0, i32 0
  store %"class.llvm::Twine"* %5, %"class.llvm::Twine"** %19, align 8
  %20 = call fastcc i8* @_ZnwmRKN12_GLOBAL__N_116NamedBufferAllocE(i64 24, %"struct.(anonymous namespace)::NamedBufferAlloc"* nonnull dereferenceable(8) %4) #20
  %21 = bitcast i8* %20 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_115MemoryBufferMemE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %22 = getelementptr inbounds i8, i8* %7, i64 %9
  %23 = getelementptr inbounds i8, i8* %20, i64 8
  %24 = bitcast i8* %23 to i8**
  store i8* %7, i8** %24, align 8
  %25 = getelementptr inbounds i8, i8* %20, i64 16
  %26 = bitcast i8* %25 to i8**
  store i8* %22, i8** %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #18
  %27 = bitcast i8* %20 to %"class.llvm::MemoryBuffer"*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13)
  ret %"class.llvm::MemoryBuffer"* %27
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.llvm::MemoryBuffer"* @_ZN4llvm12MemoryBuffer16getMemBufferCopyENS_9StringRefERKNS_5TwineE(i8*, i64, %"class.llvm::Twine"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %4 = tail call %"class.llvm::MemoryBuffer"* @_ZN4llvm12MemoryBuffer21getNewUninitMemBufferEmRKNS_5TwineE(i64 %1, %"class.llvm::Twine"* dereferenceable(24) %2) #19
  %5 = icmp eq %"class.llvm::MemoryBuffer"* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.llvm::MemoryBuffer", %"class.llvm::MemoryBuffer"* %4, i64 0, i32 1
  %8 = load i8*, i8** %7, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %0, i64 %1, i1 false)
  br label %9

9:                                                ; preds = %3, %6
  ret %"class.llvm::MemoryBuffer"* %4
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.llvm::MemoryBuffer"* @_ZN4llvm12MemoryBuffer21getNewUninitMemBufferEmRKNS_5TwineE(i64, %"class.llvm::Twine"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.llvm::SmallString", align 8
  %4 = bitcast %"class.llvm::SmallString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %4) #18
  %5 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 256, i1 false)
  %6 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %7 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %6, i8** %7, align 8
  %8 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %3, i64 1, i32 0
  %11 = bitcast i8** %9 to %"class.llvm::SmallVector"**
  store %"class.llvm::SmallVector"* %10, %"class.llvm::SmallVector"** %11, align 8
  %12 = bitcast %"class.llvm::SmallString"* %3 to %"class.llvm::SmallVectorImpl"*
  %13 = call { i8*, i64 } @_ZNK4llvm5Twine11toStringRefERNS_15SmallVectorImplIcEE(%"class.llvm::Twine"* %1, %"class.llvm::SmallVectorImpl"* nonnull dereferenceable(32) %12) #19
  %14 = extractvalue { i8*, i64 } %13, 0
  %15 = extractvalue { i8*, i64 } %13, 1
  %16 = add i64 %15, 40
  %17 = and i64 %16, -16
  %18 = add i64 %0, 1
  %19 = add i64 %18, %17
  %20 = call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %19, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #20
  %21 = icmp eq i8* %20, null
  br i1 %21, label %36, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds i8, i8* %20, i64 24
  %24 = icmp eq i64 %15, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %14, i64 %15, i1 false) #18
  br label %26

26:                                               ; preds = %22, %25
  %27 = getelementptr inbounds i8, i8* %23, i64 %15
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds i8, i8* %20, i64 %17
  %29 = getelementptr inbounds i8, i8* %28, i64 %0
  store i8 0, i8* %29, align 1
  %30 = bitcast i8* %20 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_115MemoryBufferMemE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %30, align 8
  %31 = getelementptr inbounds i8, i8* %20, i64 8
  %32 = bitcast i8* %31 to i8**
  store i8* %28, i8** %32, align 8
  %33 = getelementptr inbounds i8, i8* %20, i64 16
  %34 = bitcast i8* %33 to i8**
  store i8* %29, i8** %34, align 8
  %35 = bitcast i8* %20 to %"class.llvm::MemoryBuffer"*
  br label %36

36:                                               ; preds = %2, %26
  %37 = phi %"class.llvm::MemoryBuffer"* [ %35, %26 ], [ null, %2 ]
  %38 = load i8*, i8** %7, align 8
  %39 = icmp eq i8* %38, %6
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  call void @free(i8* %38) #20
  br label %41

41:                                               ; preds = %36, %40
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %4) #18
  ret %"class.llvm::MemoryBuffer"* %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK4llvm5Twine11toStringRefERNS_15SmallVectorImplIcEE(%"class.llvm::Twine"*, %"class.llvm::SmallVectorImpl"* dereferenceable(32)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 1
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %0, i64 0, i32 2
  %8 = load i8, i8* %7, align 8
  switch i8 %8, label %13 [
    i8 1, label %9
    i8 3, label %9
    i8 4, label %9
    i8 5, label %9
    i8 6, label %9
  ]

9:                                                ; preds = %6, %6, %6, %6, %6
  %10 = tail call { i8*, i64 } @_ZNK4llvm5Twine18getSingleStringRefEv(%"class.llvm::Twine"* %0) #19
  %11 = extractvalue { i8*, i64 } %10, 0
  %12 = extractvalue { i8*, i64 } %10, 1
  br label %21

13:                                               ; preds = %6, %2
  tail call void @_ZNK4llvm5Twine8toVectorERNS_15SmallVectorImplIcEE(%"class.llvm::Twine"* %0, %"class.llvm::SmallVectorImpl"* dereferenceable(32) %1) #20
  %14 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = ptrtoint i8* %15 to i64
  %20 = sub i64 %18, %19
  br label %21

21:                                               ; preds = %13, %9
  %22 = phi i64 [ %12, %9 ], [ %20, %13 ]
  %23 = phi i8* [ %11, %9 ], [ %15, %13 ]
  %24 = insertvalue { i8*, i64 } undef, i8* %23, 0
  %25 = insertvalue { i8*, i64 } %24, i64 %22, 1
  ret { i8*, i64 } %25
}

; Function Attrs: nobuiltin nofree nounwind optsize
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.llvm::MemoryBuffer"* @_ZN4llvm12MemoryBuffer15getNewMemBufferEmNS_9StringRefE(i64, i8*, i64) local_unnamed_addr #3 align 2 {
  %4 = alloca %"class.llvm::StringRef", align 8
  %5 = alloca %"class.llvm::Twine", align 8
  %6 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %4, i64 0, i32 0
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %4, i64 0, i32 1
  store i64 %2, i64* %7, align 8
  %8 = bitcast %"class.llvm::Twine"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #18
  %9 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %5, i64 0, i32 2
  store i8 5, i8* %9, align 8
  %10 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %5, i64 0, i32 3
  store i8 1, i8* %10, align 1
  %11 = bitcast %"class.llvm::Twine"* %5 to %"class.llvm::StringRef"**
  store %"class.llvm::StringRef"* %4, %"class.llvm::StringRef"** %11, align 8
  %12 = call %"class.llvm::MemoryBuffer"* @_ZN4llvm12MemoryBuffer21getNewUninitMemBufferEmRKNS_5TwineE(i64 %0, %"class.llvm::Twine"* nonnull dereferenceable(24) %5) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #18
  %13 = icmp eq %"class.llvm::MemoryBuffer"* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.llvm::MemoryBuffer", %"class.llvm::MemoryBuffer"* %12, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 0, i64 %0, i1 false)
  br label %17

17:                                               ; preds = %3, %14
  ret %"class.llvm::MemoryBuffer"* %12
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm12MemoryBuffer14getFileOrSTDINERKNS_5TwineElb(%"class.llvm::ErrorOr"* noalias sret, %"class.llvm::Twine"* dereferenceable(24), i64, i1 zeroext) local_unnamed_addr #3 align 2 {
  %5 = alloca %"class.llvm::Twine", align 8
  %6 = alloca %"class.llvm::SmallString", align 8
  %7 = bitcast %"class.llvm::SmallString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %7) #18
  %8 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 256, i1 false)
  %9 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %10 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %9, i8** %11, align 8
  %12 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %13 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 1, i32 0
  %14 = bitcast i8** %12 to %"class.llvm::SmallVector"**
  store %"class.llvm::SmallVector"* %13, %"class.llvm::SmallVector"** %14, align 8
  %15 = bitcast %"class.llvm::SmallString"* %6 to %"class.llvm::SmallVectorImpl"*
  %16 = call { i8*, i64 } @_ZNK4llvm5Twine11toStringRefERNS_15SmallVectorImplIcEE(%"class.llvm::Twine"* %1, %"class.llvm::SmallVectorImpl"* nonnull dereferenceable(32) %15) #19
  %17 = extractvalue { i8*, i64 } %16, 1
  %18 = icmp eq i64 %17, 1
  br i1 %18, label %19, label %29

19:                                               ; preds = %4
  %20 = extractvalue { i8*, i64 } %16, 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 45
  br i1 %22, label %23, label %29

23:                                               ; preds = %19
  %24 = call { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys19ChangeStdinToBinaryEv() #20, !noalias !2
  %25 = bitcast %"class.llvm::Twine"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #18, !noalias !2
  %26 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %5, i64 0, i32 3
  store i8 1, i8* %26, align 1, !noalias !2
  %27 = bitcast %"class.llvm::Twine"* %5 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8** %27, align 8, !noalias !2
  %28 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %5, i64 0, i32 2
  store i8 3, i8* %28, align 8, !noalias !2
  call fastcc void @_ZL24getMemoryBufferForStreamiRKN4llvm5TwineE(%"class.llvm::ErrorOr"* sret %0, i32 0, %"class.llvm::Twine"* nonnull dereferenceable(24) %5) #20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #18, !noalias !2
  br label %30

29:                                               ; preds = %4, %19
  call fastcc void @_ZL10getFileAuxRKN4llvm5TwineElmmbb(%"class.llvm::ErrorOr"* sret %0, %"class.llvm::Twine"* dereferenceable(24) %1, i64 %2, i64 %2, i64 0, i1 zeroext %3, i1 zeroext false) #20
  br label %30

30:                                               ; preds = %29, %23
  %31 = load i8*, i8** %10, align 8
  %32 = icmp eq i8* %31, %9
  br i1 %32, label %34, label %33

33:                                               ; preds = %30
  call void @free(i8* %31) #20
  br label %34

34:                                               ; preds = %30, %33
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %7) #18
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm12MemoryBuffer8getSTDINEv(%"class.llvm::ErrorOr"* noalias nocapture sret) local_unnamed_addr #3 align 2 {
  %2 = alloca %"class.llvm::Twine", align 8
  %3 = tail call { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys19ChangeStdinToBinaryEv() #20
  %4 = bitcast %"class.llvm::Twine"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #18
  %5 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %2, i64 0, i32 3
  store i8 1, i8* %5, align 1
  %6 = bitcast %"class.llvm::Twine"* %2 to i8**
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8** %6, align 8
  %7 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %2, i64 0, i32 2
  store i8 3, i8* %7, align 8
  call fastcc void @_ZL24getMemoryBufferForStreamiRKN4llvm5TwineE(%"class.llvm::ErrorOr"* sret %0, i32 0, %"class.llvm::Twine"* nonnull dereferenceable(24) %2) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #18
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm12MemoryBuffer7getFileERKNS_5TwineElbb(%"class.llvm::ErrorOr"* noalias sret, %"class.llvm::Twine"* dereferenceable(24), i64, i1 zeroext, i1 zeroext) local_unnamed_addr #3 align 2 {
  tail call fastcc void @_ZL10getFileAuxRKN4llvm5TwineElmmbb(%"class.llvm::ErrorOr"* sret %0, %"class.llvm::Twine"* dereferenceable(24) %1, i64 %2, i64 %2, i64 0, i1 zeroext %3, i1 zeroext %4) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm12MemoryBuffer12getFileSliceERKNS_5TwineEmm(%"class.llvm::ErrorOr"* noalias sret, %"class.llvm::Twine"* dereferenceable(24), i64, i64) local_unnamed_addr #3 align 2 {
  tail call fastcc void @_ZL10getFileAuxRKN4llvm5TwineElmmbb(%"class.llvm::ErrorOr"* sret %0, %"class.llvm::Twine"* dereferenceable(24) %1, i64 -1, i64 %2, i64 %3, i1 zeroext false, i1 zeroext false) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @_ZL10getFileAuxRKN4llvm5TwineElmmbb(%"class.llvm::ErrorOr"* noalias sret, %"class.llvm::Twine"* dereferenceable(24), i64, i64, i64, i1 zeroext, i1 zeroext) unnamed_addr #3 {
  %8 = alloca i32, align 4
  %9 = alloca %"class.llvm::ErrorOr", align 8
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #18
  store i32 -1431655766, i32* %8, align 4
  %11 = call { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys2fs15openFileForReadERKNS_5TwineERiPNS_15SmallVectorImplIcEE(%"class.llvm::Twine"* dereferenceable(24) %1, i32* nonnull dereferenceable(4) %8, %"class.llvm::SmallVectorImpl"* null) #20
  %12 = extractvalue { i32, %"class.std::__1::error_category"* } %11, 0
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %22, label %14

14:                                               ; preds = %7
  %15 = extractvalue { i32, %"class.std::__1::error_category"* } %11, 1
  %16 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %17 = load i8, i8* %16, align 8
  %18 = or i8 %17, 1
  store i8 %18, i8* %16, align 8
  %19 = bitcast %"class.llvm::ErrorOr"* %0 to i32*
  store i32 %12, i32* %19, align 8
  %20 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %21 = bitcast i8* %20 to %"class.std::__1::error_category"**
  store %"class.std::__1::error_category"* %15, %"class.std::__1::error_category"** %21, align 8
  br label %41

22:                                               ; preds = %7
  %23 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #18
  %24 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %9, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 24, i1 false)
  %25 = load i32, i32* %8, align 4
  call fastcc void @_ZL15getOpenFileImpliRKN4llvm5TwineEmmlbb(%"class.llvm::ErrorOr"* nonnull sret %9, i32 %25, %"class.llvm::Twine"* dereferenceable(24) %1, i64 %2, i64 %3, i64 %4, i1 zeroext %5, i1 zeroext %6) #19
  %26 = load i32, i32* %8, align 4
  %27 = call i32 @close(i32 %26) #20
  call void @_ZN4llvm7ErrorOrINSt3__110unique_ptrINS_12MemoryBufferENS1_14default_deleteIS3_EEEEE13moveConstructIS6_EEvONS0_IT_EE(%"class.llvm::ErrorOr"* %0, %"class.llvm::ErrorOr"* nonnull dereferenceable(24) %9) #20
  %28 = load i8, i8* %24, align 8
  %29 = and i8 %28, 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %40

31:                                               ; preds = %22
  %32 = bitcast %"class.llvm::ErrorOr"* %9 to %"class.llvm::MemoryBuffer"**
  %33 = load %"class.llvm::MemoryBuffer"*, %"class.llvm::MemoryBuffer"** %32, align 8
  store %"class.llvm::MemoryBuffer"* null, %"class.llvm::MemoryBuffer"** %32, align 8
  %34 = icmp eq %"class.llvm::MemoryBuffer"* %33, null
  br i1 %34, label %40, label %35

35:                                               ; preds = %31
  %36 = bitcast %"class.llvm::MemoryBuffer"* %33 to void (%"class.llvm::MemoryBuffer"*)***
  %37 = load void (%"class.llvm::MemoryBuffer"*)**, void (%"class.llvm::MemoryBuffer"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.llvm::MemoryBuffer"*)*, void (%"class.llvm::MemoryBuffer"*)** %37, i64 1
  %39 = load void (%"class.llvm::MemoryBuffer"*)*, void (%"class.llvm::MemoryBuffer"*)** %38, align 8
  call void %39(%"class.llvm::MemoryBuffer"* nonnull %33) #20
  br label %40

40:                                               ; preds = %22, %31, %35
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #18
  br label %41

41:                                               ; preds = %40, %14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #18
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm12MemoryBuffer11getOpenFileEiRKNS_5TwineEmbb(%"class.llvm::ErrorOr"* noalias nocapture sret, i32, %"class.llvm::Twine"* dereferenceable(24), i64, i1 zeroext, i1 zeroext) local_unnamed_addr #3 align 2 {
  tail call fastcc void @_ZL15getOpenFileImpliRKN4llvm5TwineEmmlbb(%"class.llvm::ErrorOr"* sret %0, i32 %1, %"class.llvm::Twine"* dereferenceable(24) %2, i64 %3, i64 %3, i64 0, i1 zeroext %4, i1 zeroext %5) #19
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @_ZL15getOpenFileImpliRKN4llvm5TwineEmmlbb(%"class.llvm::ErrorOr"* noalias nocapture sret, i32, %"class.llvm::Twine"* dereferenceable(24), i64, i64, i64, i1 zeroext, i1 zeroext) unnamed_addr #3 {
  %9 = alloca %"class.llvm::sys::fs::file_status", align 8
  %10 = alloca %"class.llvm::sys::fs::file_status", align 8
  %11 = alloca %"class.std::__1::error_code", align 8
  %12 = alloca %"struct.(anonymous namespace)::NamedBufferAlloc", align 8
  %13 = load atomic i8, i8* bitcast (i64* @_ZGVZL15getOpenFileImpliRKN4llvm5TwineEmmlbbE8PageSize to i8*) acquire, align 8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %20, !prof !5

15:                                               ; preds = %8
  %16 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZL15getOpenFileImpliRKN4llvm5TwineEmmlbbE8PageSize) #18
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @_ZN4llvm3sys7Process11getPageSizeEv() #20
  store i32 %19, i32* @_ZZL15getOpenFileImpliRKN4llvm5TwineEmmlbbE8PageSize, align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZL15getOpenFileImpliRKN4llvm5TwineEmmlbbE8PageSize) #18
  br label %20

20:                                               ; preds = %15, %18, %8
  %21 = icmp eq i64 %4, -1
  br i1 %21, label %22, label %46

22:                                               ; preds = %20
  %23 = icmp eq i64 %3, -1
  br i1 %23, label %24, label %46

24:                                               ; preds = %22
  %25 = bitcast %"class.llvm::sys::fs::file_status"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %25) #18
  %26 = getelementptr inbounds %"class.llvm::sys::fs::file_status", %"class.llvm::sys::fs::file_status"* %10, i64 0, i32 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 52, i1 false) #18
  store i32 65535, i32* %26, align 4
  %27 = call { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys2fs6statusEiRNS1_11file_statusE(i32 %1, %"class.llvm::sys::fs::file_status"* nonnull dereferenceable(56) %10) #20
  %28 = extractvalue { i32, %"class.std::__1::error_category"* } %27, 0
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %38, label %30

30:                                               ; preds = %24
  %31 = extractvalue { i32, %"class.std::__1::error_category"* } %27, 1
  %32 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %33 = load i8, i8* %32, align 8
  %34 = or i8 %33, 1
  store i8 %34, i8* %32, align 8
  %35 = bitcast %"class.llvm::ErrorOr"* %0 to i32*
  store i32 %28, i32* %35, align 8
  %36 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %37 = bitcast i8* %36 to %"class.std::__1::error_category"**
  store %"class.std::__1::error_category"* %31, %"class.std::__1::error_category"** %37, align 8
  br label %42

38:                                               ; preds = %24
  %39 = getelementptr inbounds %"class.llvm::sys::fs::file_status", %"class.llvm::sys::fs::file_status"* %10, i64 0, i32 7
  %40 = load i32, i32* %39, align 8
  switch i32 %40, label %41 [
    i32 5, label %43
    i32 2, label %43
  ]

41:                                               ; preds = %38
  call fastcc void @_ZL24getMemoryBufferForStreamiRKN4llvm5TwineE(%"class.llvm::ErrorOr"* sret %0, i32 %1, %"class.llvm::Twine"* dereferenceable(24) %2) #19
  br label %42

42:                                               ; preds = %30, %41
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %25) #18
  br label %182

43:                                               ; preds = %38, %38
  %44 = getelementptr inbounds %"class.llvm::sys::fs::file_status", %"class.llvm::sys::fs::file_status"* %10, i64 0, i32 6
  %45 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %25) #18
  br label %46

46:                                               ; preds = %43, %22, %20
  %47 = phi i64 [ %4, %20 ], [ %45, %43 ], [ %3, %22 ]
  %48 = phi i64 [ %3, %20 ], [ %45, %43 ], [ %3, %22 ]
  %49 = load i32, i32* @_ZZL15getOpenFileImpliRKN4llvm5TwineEmmlbbE8PageSize, align 4
  br i1 %7, label %129, label %50

50:                                               ; preds = %46
  %51 = icmp ult i64 %47, 16384
  %52 = zext i32 %49 to i64
  %53 = icmp ult i64 %47, %52
  %54 = or i1 %51, %53
  %55 = xor i1 %6, true
  %56 = or i1 %54, %55
  br i1 %56, label %78, label %57

57:                                               ; preds = %50
  %58 = icmp eq i64 %48, -1
  br i1 %58, label %59, label %69

59:                                               ; preds = %57
  %60 = bitcast %"class.llvm::sys::fs::file_status"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %60) #18
  %61 = getelementptr inbounds %"class.llvm::sys::fs::file_status", %"class.llvm::sys::fs::file_status"* %9, i64 0, i32 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %60, i8 0, i64 52, i1 false) #18
  store i32 65535, i32* %61, align 4
  %62 = call { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys2fs6statusEiRNS1_11file_statusE(i32 %1, %"class.llvm::sys::fs::file_status"* nonnull dereferenceable(56) %9) #20
  %63 = extractvalue { i32, %"class.std::__1::error_category"* } %62, 0
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.llvm::sys::fs::file_status", %"class.llvm::sys::fs::file_status"* %9, i64 0, i32 6
  %67 = load i64, i64* %66, align 8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %60) #18
  br label %69

68:                                               ; preds = %59
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %60) #18
  br label %129

69:                                               ; preds = %65, %57
  %70 = phi i64 [ %48, %57 ], [ %67, %65 ]
  %71 = add i64 %47, %5
  %72 = icmp eq i64 %71, %70
  br i1 %72, label %73, label %129

73:                                               ; preds = %69
  %74 = add nsw i32 %49, -1
  %75 = sext i32 %74 to i64
  %76 = and i64 %70, %75
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %129, label %79

78:                                               ; preds = %50
  br i1 %54, label %129, label %79

79:                                               ; preds = %78, %73
  %80 = bitcast %"class.std::__1::error_code"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %80) #18
  %81 = bitcast %"class.std::__1::error_code"* %11 to i64*
  store i64 -6148914691236517206, i64* %81, align 8
  %82 = getelementptr inbounds %"class.std::__1::error_code", %"class.std::__1::error_code"* %11, i64 0, i32 0
  store i32 0, i32* %82, align 8
  %83 = getelementptr inbounds %"class.std::__1::error_code", %"class.std::__1::error_code"* %11, i64 0, i32 1
  %84 = call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__115system_categoryEv() #20
  store %"class.std::__1::error_category"* %84, %"class.std::__1::error_category"** %83, align 8
  %85 = bitcast %"struct.(anonymous namespace)::NamedBufferAlloc"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #18
  %86 = getelementptr inbounds %"struct.(anonymous namespace)::NamedBufferAlloc", %"struct.(anonymous namespace)::NamedBufferAlloc"* %12, i64 0, i32 0
  store %"class.llvm::Twine"* %2, %"class.llvm::Twine"** %86, align 8
  %87 = call fastcc i8* @_ZnwmRKN12_GLOBAL__N_116NamedBufferAllocE(i64 40, %"struct.(anonymous namespace)::NamedBufferAlloc"* nonnull dereferenceable(8) %12) #19
  %88 = bitcast i8* %87 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_120MemoryBufferMMapFileE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %88, align 8
  %89 = getelementptr inbounds i8, i8* %87, i64 24
  %90 = bitcast i8* %89 to %"class.llvm::sys::fs::mapped_file_region"*
  %91 = call i32 @_ZN4llvm3sys2fs18mapped_file_region9alignmentEv() #20
  %92 = add i32 %91, -1
  %93 = sext i32 %92 to i64
  %94 = and i64 %93, %5
  %95 = add i64 %94, %47
  %96 = call i32 @_ZN4llvm3sys2fs18mapped_file_region9alignmentEv() #20
  %97 = sub i32 0, %96
  %98 = sext i32 %97 to i64
  %99 = and i64 %98, %5
  call void @_ZN4llvm3sys2fs18mapped_file_regionC1EiNS2_7mapmodeEmmRNSt3__110error_codeE(%"class.llvm::sys::fs::mapped_file_region"* %90, i32 %1, i32 0, i64 %95, i64 %99, %"class.std::__1::error_code"* nonnull dereferenceable(16) %11) #20
  %100 = load i32, i32* %82, align 8
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %103, label %102

102:                                              ; preds = %79
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #18
  br label %123

103:                                              ; preds = %79
  %104 = call i8* @_ZNK4llvm3sys2fs18mapped_file_region10const_dataEv(%"class.llvm::sys::fs::mapped_file_region"* %90) #20
  %105 = call i32 @_ZN4llvm3sys2fs18mapped_file_region9alignmentEv() #20
  %106 = add i32 %105, -1
  %107 = sext i32 %106 to i64
  %108 = and i64 %107, %5
  %109 = getelementptr inbounds i8, i8* %104, i64 %108
  %110 = getelementptr inbounds i8, i8* %109, i64 %47
  %111 = getelementptr inbounds i8, i8* %87, i64 8
  %112 = bitcast i8* %111 to i8**
  store i8* %109, i8** %112, align 8
  %113 = getelementptr inbounds i8, i8* %87, i64 16
  %114 = bitcast i8* %113 to i8**
  store i8* %110, i8** %114, align 8
  %115 = load i32, i32* %82, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #18
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %123

117:                                              ; preds = %103
  %118 = ptrtoint i8* %87 to i64
  %119 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %120 = load i8, i8* %119, align 8
  %121 = and i8 %120, -2
  store i8 %121, i8* %119, align 8
  %122 = bitcast %"class.llvm::ErrorOr"* %0 to i64*
  store i64 %118, i64* %122, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %80) #18
  br label %182

123:                                              ; preds = %103, %102
  %124 = bitcast i8* %87 to %"class.llvm::MemoryBuffer"*
  %125 = bitcast i8* %87 to void (%"class.llvm::MemoryBuffer"*)***
  %126 = load void (%"class.llvm::MemoryBuffer"*)**, void (%"class.llvm::MemoryBuffer"*)*** %125, align 8
  %127 = getelementptr inbounds void (%"class.llvm::MemoryBuffer"*)*, void (%"class.llvm::MemoryBuffer"*)** %126, i64 1
  %128 = load void (%"class.llvm::MemoryBuffer"*)*, void (%"class.llvm::MemoryBuffer"*)** %127, align 8
  call void %128(%"class.llvm::MemoryBuffer"* nonnull %124) #20
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %80) #18
  br label %129

129:                                              ; preds = %78, %73, %69, %46, %68, %123
  %130 = call %"class.llvm::MemoryBuffer"* @_ZN4llvm12MemoryBuffer21getNewUninitMemBufferEmRKNS_5TwineE(i64 %47, %"class.llvm::Twine"* dereferenceable(24) %2) #19
  %131 = ptrtoint %"class.llvm::MemoryBuffer"* %130 to i64
  %132 = icmp eq %"class.llvm::MemoryBuffer"* %130, null
  br i1 %132, label %133, label %141

133:                                              ; preds = %129
  %134 = call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__116generic_categoryEv() #20
  %135 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %136 = load i8, i8* %135, align 8
  %137 = or i8 %136, 1
  store i8 %137, i8* %135, align 8
  %138 = bitcast %"class.llvm::ErrorOr"* %0 to i32*
  store i32 12, i32* %138, align 8
  %139 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %140 = bitcast i8* %139 to %"class.std::__1::error_category"**
  store %"class.std::__1::error_category"* %134, %"class.std::__1::error_category"** %140, align 8
  br label %182

141:                                              ; preds = %129
  %142 = icmp eq i64 %47, 0
  br i1 %142, label %164, label %143

143:                                              ; preds = %141
  %144 = getelementptr inbounds %"class.llvm::MemoryBuffer", %"class.llvm::MemoryBuffer"* %130, i64 0, i32 1
  %145 = load i8*, i8** %144, align 8
  %146 = add i64 %47, %5
  br label %147

147:                                              ; preds = %143, %160
  %148 = phi i64 [ %47, %143 ], [ %162, %160 ]
  %149 = phi i8* [ %145, %143 ], [ %161, %160 ]
  %150 = sub i64 %146, %148
  %151 = call i64 @pread64(i32 %1, i8* %149, i64 %148, i64 %150) #20
  switch i64 %151, label %157 [
    i64 -1, label %152
    i64 0, label %156
  ]

152:                                              ; preds = %147
  %153 = tail call i32* @__errno_location() #21
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %154, 4
  br i1 %155, label %160, label %169

156:                                              ; preds = %147
  call void @llvm.memset.p0i8.i64(i8* align 1 %149, i8 0, i64 %148, i1 false)
  br label %164

157:                                              ; preds = %147
  %158 = sub i64 %148, %151
  %159 = getelementptr inbounds i8, i8* %149, i64 %151
  br label %160

160:                                              ; preds = %152, %157
  %161 = phi i8* [ %159, %157 ], [ %149, %152 ]
  %162 = phi i64 [ %158, %157 ], [ %148, %152 ]
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %147

164:                                              ; preds = %160, %141, %156
  %165 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %166 = load i8, i8* %165, align 8
  %167 = and i8 %166, -2
  store i8 %167, i8* %165, align 8
  %168 = bitcast %"class.llvm::ErrorOr"* %0 to i64*
  store i64 %131, i64* %168, align 8
  br label %182

169:                                              ; preds = %152
  %170 = call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__116generic_categoryEv() #20
  %171 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %172 = load i8, i8* %171, align 8
  %173 = or i8 %172, 1
  store i8 %173, i8* %171, align 8
  %174 = bitcast %"class.llvm::ErrorOr"* %0 to i32*
  store i32 %154, i32* %174, align 8
  %175 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %176 = bitcast i8* %175 to %"class.std::__1::error_category"**
  store %"class.std::__1::error_category"* %170, %"class.std::__1::error_category"** %176, align 8
  br i1 %132, label %182, label %177

177:                                              ; preds = %169
  %178 = bitcast %"class.llvm::MemoryBuffer"* %130 to void (%"class.llvm::MemoryBuffer"*)***
  %179 = load void (%"class.llvm::MemoryBuffer"*)**, void (%"class.llvm::MemoryBuffer"*)*** %178, align 8
  %180 = getelementptr inbounds void (%"class.llvm::MemoryBuffer"*)*, void (%"class.llvm::MemoryBuffer"*)** %179, i64 1
  %181 = load void (%"class.llvm::MemoryBuffer"*)*, void (%"class.llvm::MemoryBuffer"*)** %180, align 8
  call void %181(%"class.llvm::MemoryBuffer"* nonnull %130) #20
  br label %182

182:                                              ; preds = %133, %177, %169, %164, %42, %117
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm12MemoryBuffer16getOpenFileSliceEiRKNS_5TwineEml(%"class.llvm::ErrorOr"* noalias nocapture sret, i32, %"class.llvm::Twine"* dereferenceable(24), i64, i64) local_unnamed_addr #3 align 2 {
  tail call fastcc void @_ZL15getOpenFileImpliRKN4llvm5TwineEmmlbb(%"class.llvm::ErrorOr"* sret %0, i32 %1, %"class.llvm::Twine"* dereferenceable(24) %2, i64 -1, i64 %3, i64 %4, i1 zeroext false, i1 zeroext false) #19
  ret void
}

; Function Attrs: optsize
declare { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys19ChangeStdinToBinaryEv() local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @_ZL24getMemoryBufferForStreamiRKN4llvm5TwineE(%"class.llvm::ErrorOr"* noalias nocapture sret, i32, %"class.llvm::Twine"* dereferenceable(24)) unnamed_addr #3 {
  %4 = alloca %"class.llvm::SmallString.9", align 8
  %5 = bitcast %"class.llvm::SmallString.9"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16408, i8* nonnull %5) #18
  %6 = getelementptr inbounds %"class.llvm::SmallString.9", %"class.llvm::SmallString.9"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16384, i1 false)
  %7 = getelementptr inbounds %"class.llvm::SmallString.9", %"class.llvm::SmallString.9"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %8 = getelementptr inbounds %"class.llvm::SmallString.9", %"class.llvm::SmallString.9"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds %"class.llvm::SmallString.9", %"class.llvm::SmallString.9"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %7, i8** %9, align 8
  %10 = getelementptr inbounds %"class.llvm::SmallString.9", %"class.llvm::SmallString.9"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %11 = getelementptr inbounds %"class.llvm::SmallString.9", %"class.llvm::SmallString.9"* %4, i64 1, i32 0
  %12 = bitcast i8** %10 to %"class.llvm::SmallVector.10"**
  store %"class.llvm::SmallVector.10"* %11, %"class.llvm::SmallVector.10"** %12, align 8
  %13 = bitcast i8** %9 to i64*
  %14 = bitcast %"class.llvm::SmallString.9"* %4 to i64*
  %15 = bitcast i8** %10 to i64*
  %16 = getelementptr inbounds %"class.llvm::SmallString.9", %"class.llvm::SmallString.9"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = ptrtoint i8* %7 to i64
  %18 = ptrtoint %"class.llvm::SmallVector.10"* %11 to i64
  br label %19

19:                                               ; preds = %54, %3
  %20 = phi i8* [ %58, %54 ], [ %7, %3 ]
  %21 = phi i64 [ %57, %54 ], [ %18, %3 ]
  %22 = phi i64 [ %56, %54 ], [ %17, %3 ]
  %23 = phi i64 [ %55, %54 ], [ %17, %3 ]
  %24 = sub i64 %23, %22
  %25 = add i64 %24, 16384
  %26 = sub i64 %21, %22
  %27 = icmp ult i64 %26, %25
  br i1 %27, label %28, label %30

28:                                               ; preds = %19
  call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* nonnull %16, i8* %7, i64 %25, i64 1) #20
  %29 = load i8*, i8** %9, align 8
  br label %30

30:                                               ; preds = %19, %28
  %31 = phi i8* [ %20, %19 ], [ %29, %28 ]
  %32 = call i64 @read(i32 %1, i8* %31, i64 16384) #20
  %33 = icmp eq i64 %32, -1
  br i1 %33, label %34, label %46

34:                                               ; preds = %30
  %35 = tail call i32* @__errno_location() #21
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 4
  br i1 %37, label %54, label %38

38:                                               ; preds = %34
  %39 = call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__116generic_categoryEv() #20
  %40 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %41 = load i8, i8* %40, align 8
  %42 = or i8 %41, 1
  store i8 %42, i8* %40, align 8
  %43 = bitcast %"class.llvm::ErrorOr"* %0 to i32*
  store i32 %36, i32* %43, align 8
  %44 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %45 = bitcast i8* %44 to %"class.std::__1::error_category"**
  store %"class.std::__1::error_category"* %39, %"class.std::__1::error_category"** %45, align 8
  br label %75

46:                                               ; preds = %30
  %47 = load i64, i64* %13, align 8
  %48 = load i64, i64* %14, align 8
  %49 = add i64 %47, %32
  %50 = sub i64 %49, %48
  %51 = inttoptr i64 %48 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 %50
  store i8* %52, i8** %9, align 8
  %53 = icmp eq i64 %32, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %34, %46
  %55 = load i64, i64* %13, align 8
  %56 = load i64, i64* %14, align 8
  %57 = load i64, i64* %15, align 8
  %58 = inttoptr i64 %55 to i8*
  br label %19

59:                                               ; preds = %46
  %60 = load i8*, i8** %8, align 8
  %61 = load i64, i64* %13, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = sub i64 %61, %62
  %64 = call %"class.llvm::MemoryBuffer"* @_ZN4llvm12MemoryBuffer21getNewUninitMemBufferEmRKNS_5TwineE(i64 %63, %"class.llvm::Twine"* dereferenceable(24) %2) #20
  %65 = icmp eq %"class.llvm::MemoryBuffer"* %64, null
  br i1 %65, label %69, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds %"class.llvm::MemoryBuffer", %"class.llvm::MemoryBuffer"* %64, i64 0, i32 1
  %68 = load i8*, i8** %67, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %60, i64 %63, i1 false) #18
  br label %69

69:                                               ; preds = %66, %59
  %70 = ptrtoint %"class.llvm::MemoryBuffer"* %64 to i64
  %71 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %72 = load i8, i8* %71, align 8
  %73 = and i8 %72, -2
  store i8 %73, i8* %71, align 8
  %74 = bitcast %"class.llvm::ErrorOr"* %0 to i64*
  store i64 %70, i64* %74, align 8
  br label %75

75:                                               ; preds = %69, %38
  %76 = load i8*, i8** %8, align 8
  %77 = icmp eq i8* %76, %7
  br i1 %77, label %79, label %78

78:                                               ; preds = %75
  call void @free(i8* %76) #20
  br label %79

79:                                               ; preds = %75, %78
  call void @llvm.lifetime.end.p0i8(i64 16408, i8* nonnull %5) #18
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm12MemoryBuffer15getFileAsStreamERKNS_5TwineE(%"class.llvm::ErrorOr"* noalias sret, %"class.llvm::Twine"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca %"class.llvm::ErrorOr", align 8
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #18
  store i32 -1431655766, i32* %3, align 4
  %6 = call { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys2fs15openFileForReadERKNS_5TwineERiPNS_15SmallVectorImplIcEE(%"class.llvm::Twine"* dereferenceable(24) %1, i32* nonnull dereferenceable(4) %3, %"class.llvm::SmallVectorImpl"* null) #20
  %7 = extractvalue { i32, %"class.std::__1::error_category"* } %6, 0
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %17, label %9

9:                                                ; preds = %2
  %10 = extractvalue { i32, %"class.std::__1::error_category"* } %6, 1
  %11 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %12 = load i8, i8* %11, align 8
  %13 = or i8 %12, 1
  store i8 %13, i8* %11, align 8
  %14 = bitcast %"class.llvm::ErrorOr"* %0 to i32*
  store i32 %7, i32* %14, align 8
  %15 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %16 = bitcast i8* %15 to %"class.std::__1::error_category"**
  store %"class.std::__1::error_category"* %10, %"class.std::__1::error_category"** %16, align 8
  br label %36

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #18
  %19 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %4, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 24, i1 false)
  %20 = load i32, i32* %3, align 4
  call fastcc void @_ZL24getMemoryBufferForStreamiRKN4llvm5TwineE(%"class.llvm::ErrorOr"* nonnull sret %4, i32 %20, %"class.llvm::Twine"* dereferenceable(24) %1) #19
  %21 = load i32, i32* %3, align 4
  %22 = call i32 @close(i32 %21) #20
  call void @_ZN4llvm7ErrorOrINSt3__110unique_ptrINS_12MemoryBufferENS1_14default_deleteIS3_EEEEE13moveConstructIS6_EEvONS0_IT_EE(%"class.llvm::ErrorOr"* %0, %"class.llvm::ErrorOr"* nonnull dereferenceable(24) %4) #20
  %23 = load i8, i8* %19, align 8
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %35

26:                                               ; preds = %17
  %27 = bitcast %"class.llvm::ErrorOr"* %4 to %"class.llvm::MemoryBuffer"**
  %28 = load %"class.llvm::MemoryBuffer"*, %"class.llvm::MemoryBuffer"** %27, align 8
  store %"class.llvm::MemoryBuffer"* null, %"class.llvm::MemoryBuffer"** %27, align 8
  %29 = icmp eq %"class.llvm::MemoryBuffer"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = bitcast %"class.llvm::MemoryBuffer"* %28 to void (%"class.llvm::MemoryBuffer"*)***
  %32 = load void (%"class.llvm::MemoryBuffer"*)**, void (%"class.llvm::MemoryBuffer"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.llvm::MemoryBuffer"*)*, void (%"class.llvm::MemoryBuffer"*)** %32, i64 1
  %34 = load void (%"class.llvm::MemoryBuffer"*)*, void (%"class.llvm::MemoryBuffer"*)** %33, align 8
  call void %34(%"class.llvm::MemoryBuffer"* nonnull %28) #20
  br label %35

35:                                               ; preds = %17, %26, %30
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #18
  br label %36

36:                                               ; preds = %35, %9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #18
  ret void
}

; Function Attrs: optsize
declare { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys2fs15openFileForReadERKNS_5TwineERiPNS_15SmallVectorImplIcEE(%"class.llvm::Twine"* dereferenceable(24), i32* dereferenceable(4), %"class.llvm::SmallVectorImpl"*) local_unnamed_addr #6

; Function Attrs: optsize
declare i32 @close(i32) local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK4llvm12MemoryBuffer15getMemBufferRefEv(%"class.llvm::MemoryBufferRef"* noalias nocapture sret, %"class.llvm::MemoryBuffer"*) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.llvm::MemoryBuffer", %"class.llvm::MemoryBuffer"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::MemoryBuffer", %"class.llvm::MemoryBuffer"* %1, i64 0, i32 2
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint i8* %4 to i64
  %9 = sub i64 %7, %8
  %10 = bitcast %"class.llvm::MemoryBuffer"* %1 to { i8*, i64 } (%"class.llvm::MemoryBuffer"*)***
  %11 = load { i8*, i64 } (%"class.llvm::MemoryBuffer"*)**, { i8*, i64 } (%"class.llvm::MemoryBuffer"*)*** %10, align 8
  %12 = getelementptr inbounds { i8*, i64 } (%"class.llvm::MemoryBuffer"*)*, { i8*, i64 } (%"class.llvm::MemoryBuffer"*)** %11, i64 2
  %13 = load { i8*, i64 } (%"class.llvm::MemoryBuffer"*)*, { i8*, i64 } (%"class.llvm::MemoryBuffer"*)** %12, align 8
  %14 = tail call { i8*, i64 } %13(%"class.llvm::MemoryBuffer"* %1) #20
  %15 = extractvalue { i8*, i64 } %14, 0
  %16 = extractvalue { i8*, i64 } %14, 1
  %17 = getelementptr inbounds %"class.llvm::MemoryBufferRef", %"class.llvm::MemoryBufferRef"* %0, i64 0, i32 0, i32 0
  store i8* %4, i8** %17, align 8
  %18 = getelementptr inbounds %"class.llvm::MemoryBufferRef", %"class.llvm::MemoryBufferRef"* %0, i64 0, i32 0, i32 1
  store i64 %9, i64* %18, align 8
  %19 = getelementptr inbounds %"class.llvm::MemoryBufferRef", %"class.llvm::MemoryBufferRef"* %0, i64 0, i32 1, i32 0
  store i8* %15, i8** %19, align 8
  %20 = getelementptr inbounds %"class.llvm::MemoryBufferRef", %"class.llvm::MemoryBufferRef"* %0, i64 0, i32 1, i32 1
  store i64 %16, i64* %20, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK4llvm12MemoryBuffer19getBufferIdentifierEv(%"class.llvm::MemoryBuffer"*) unnamed_addr #3 comdat align 2 {
  ret { i8*, i64 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i64 14 }
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden void @_ZN4llvm12MemoryBufferD2Ev(%"class.llvm::MemoryBuffer"* nocapture) unnamed_addr #8 align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define internal void @_ZN12_GLOBAL__N_115MemoryBufferMemD0Ev(%"class.(anonymous namespace)::MemoryBufferMem"*) unnamed_addr #9 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::MemoryBufferMem"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #20
  ret void
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define internal { i8*, i64 } @_ZNK12_GLOBAL__N_115MemoryBufferMem19getBufferIdentifierEv(%"class.(anonymous namespace)::MemoryBufferMem"*) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::MemoryBufferMem", %"class.(anonymous namespace)::MemoryBufferMem"* %0, i64 1
  %3 = bitcast %"class.(anonymous namespace)::MemoryBufferMem"* %2 to i8*
  %4 = icmp eq %"class.(anonymous namespace)::MemoryBufferMem"* %2, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call i64 @strlen(i8* nonnull %3) #22
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i64 [ %6, %5 ], [ 0, %1 ]
  %9 = insertvalue { i8*, i64 } undef, i8* %3, 0
  %10 = insertvalue { i8*, i64 } %9, i64 %8, 1
  ret { i8*, i64 } %10
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define internal i32 @_ZNK12_GLOBAL__N_115MemoryBufferMem13getBufferKindEv(%"class.(anonymous namespace)::MemoryBufferMem"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i32 0
}

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK4llvm5Twine18getSingleStringRefEv(%"class.llvm::Twine"*) local_unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8
  switch i8 %3, label %4 [
    i8 1, label %44
    i8 3, label %5
    i8 4, label %11
    i8 5, label %26
    i8 6, label %34
  ]

4:                                                ; preds = %1
  unreachable

5:                                                ; preds = %1
  %6 = bitcast %"class.llvm::Twine"* %0 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %44, label %9

9:                                                ; preds = %5
  %10 = tail call i64 @strlen(i8* nonnull %7) #22
  br label %44

11:                                               ; preds = %1
  %12 = bitcast %"class.llvm::Twine"* %0 to %"class.std::__1::basic_string"**
  %13 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %12, align 8
  %14 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  %21 = select i1 %17, i8* %19, i8* %20
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = zext i8 %16 to i64
  %25 = select i1 %17, i64 %23, i64 %24
  br label %44

26:                                               ; preds = %1
  %27 = bitcast %"class.llvm::Twine"* %0 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = bitcast i8* %28 to i8**
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds i8, i8* %28, i64 8
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 8
  br label %44

34:                                               ; preds = %1
  %35 = bitcast %"class.llvm::Twine"* %0 to %"class.llvm::SmallVectorTemplateCommon"**
  %36 = load %"class.llvm::SmallVectorTemplateCommon"*, %"class.llvm::SmallVectorTemplateCommon"** %35, align 8
  %37 = getelementptr inbounds %"class.llvm::SmallVectorTemplateCommon", %"class.llvm::SmallVectorTemplateCommon"* %36, i64 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %"class.llvm::SmallVectorTemplateCommon", %"class.llvm::SmallVectorTemplateCommon"* %36, i64 0, i32 0, i32 1
  %40 = bitcast i8** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = ptrtoint i8* %38 to i64
  %43 = sub i64 %41, %42
  br label %44

44:                                               ; preds = %9, %5, %1, %34, %26, %11
  %45 = phi i8* [ %38, %34 ], [ %30, %26 ], [ %21, %11 ], [ null, %1 ], [ null, %5 ], [ %7, %9 ]
  %46 = phi i64 [ %43, %34 ], [ %33, %26 ], [ %25, %11 ], [ 0, %1 ], [ 0, %5 ], [ %10, %9 ]
  %47 = insertvalue { i8*, i64 } undef, i8* %45, 0
  %48 = insertvalue { i8*, i64 } %47, i64 %46, 1
  ret { i8*, i64 } %48
}

; Function Attrs: optsize
declare void @_ZNK4llvm5Twine8toVectorERNS_15SmallVectorImplIcEE(%"class.llvm::Twine"*, %"class.llvm::SmallVectorImpl"* dereferenceable(32)) local_unnamed_addr #6

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #12

; Function Attrs: argmemonly nofree nounwind optsize readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #13

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #14

; Function Attrs: optsize
declare i32 @_ZN4llvm3sys7Process11getPageSizeEv() local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #14

; Function Attrs: optsize
declare { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys2fs6statusEiRNS1_11file_statusE(i32, %"class.llvm::sys::fs::file_status"* dereferenceable(56)) local_unnamed_addr #6

; Function Attrs: optsize
declare i64 @pread64(i32, i8*, i64, i64) local_unnamed_addr #6

; Function Attrs: nounwind optsize readnone
declare i32* @__errno_location() local_unnamed_addr #15

; Function Attrs: nounwind optsize
declare dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__116generic_categoryEv() local_unnamed_addr #12

; Function Attrs: nounwind optsize
declare dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__115system_categoryEv() local_unnamed_addr #12

; Function Attrs: optsize
declare void @_ZN4llvm3sys2fs18mapped_file_regionC1EiNS2_7mapmodeEmmRNSt3__110error_codeE(%"class.llvm::sys::fs::mapped_file_region"*, i32, i32, i64, i64, %"class.std::__1::error_code"* dereferenceable(16)) unnamed_addr #6

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define internal void @_ZN12_GLOBAL__N_120MemoryBufferMMapFileD2Ev(%"class.(anonymous namespace)::MemoryBufferMMapFile"*) unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::MemoryBufferMMapFile", %"class.(anonymous namespace)::MemoryBufferMMapFile"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_120MemoryBufferMMapFileE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.(anonymous namespace)::MemoryBufferMMapFile", %"class.(anonymous namespace)::MemoryBufferMMapFile"* %0, i64 0, i32 1
  tail call void @_ZN4llvm3sys2fs18mapped_file_regionD1Ev(%"class.llvm::sys::fs::mapped_file_region"* %3) #20
  ret void
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define internal void @_ZN12_GLOBAL__N_120MemoryBufferMMapFileD0Ev(%"class.(anonymous namespace)::MemoryBufferMMapFile"*) unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::MemoryBufferMMapFile", %"class.(anonymous namespace)::MemoryBufferMMapFile"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_120MemoryBufferMMapFileE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.(anonymous namespace)::MemoryBufferMMapFile", %"class.(anonymous namespace)::MemoryBufferMMapFile"* %0, i64 0, i32 1
  tail call void @_ZN4llvm3sys2fs18mapped_file_regionD1Ev(%"class.llvm::sys::fs::mapped_file_region"* %3) #20
  %4 = bitcast %"class.(anonymous namespace)::MemoryBufferMMapFile"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #20
  ret void
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define internal { i8*, i64 } @_ZNK12_GLOBAL__N_120MemoryBufferMMapFile19getBufferIdentifierEv(%"class.(anonymous namespace)::MemoryBufferMMapFile"*) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::MemoryBufferMMapFile", %"class.(anonymous namespace)::MemoryBufferMMapFile"* %0, i64 1
  %3 = bitcast %"class.(anonymous namespace)::MemoryBufferMMapFile"* %2 to i8*
  %4 = icmp eq %"class.(anonymous namespace)::MemoryBufferMMapFile"* %2, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call i64 @strlen(i8* nonnull %3) #22
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i64 [ %6, %5 ], [ 0, %1 ]
  %9 = insertvalue { i8*, i64 } undef, i8* %3, 0
  %10 = insertvalue { i8*, i64 } %9, i64 %8, 1
  ret { i8*, i64 } %10
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define internal i32 @_ZNK12_GLOBAL__N_120MemoryBufferMMapFile13getBufferKindEv(%"class.(anonymous namespace)::MemoryBufferMMapFile"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i32 1
}

; Function Attrs: optsize
declare i32 @_ZN4llvm3sys2fs18mapped_file_region9alignmentEv() local_unnamed_addr #6

; Function Attrs: optsize
declare i8* @_ZNK4llvm3sys2fs18mapped_file_region10const_dataEv(%"class.llvm::sys::fs::mapped_file_region"*) local_unnamed_addr #6

; Function Attrs: nounwind optsize
declare void @_ZN4llvm3sys2fs18mapped_file_regionD1Ev(%"class.llvm::sys::fs::mapped_file_region"*) unnamed_addr #12

; Function Attrs: nofree optsize
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #16

; Function Attrs: optsize
declare void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"*, i8*, i64, i64) local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7ErrorOrINSt3__110unique_ptrINS_12MemoryBufferENS1_14default_deleteIS3_EEEEE13moveConstructIS6_EEvONS0_IT_EE(%"class.llvm::ErrorOr"*, %"class.llvm::ErrorOr"* dereferenceable(24)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 1
  %8 = load i8, i8* %7, align 8
  br i1 %6, label %9, label %15

9:                                                ; preds = %2
  %10 = and i8 %8, -2
  store i8 %10, i8* %7, align 8
  %11 = bitcast %"class.llvm::ErrorOr"* %1 to %"class.llvm::MemoryBuffer"**
  %12 = bitcast %"class.llvm::ErrorOr"* %1 to i64*
  %13 = load i64, i64* %12, align 8
  store %"class.llvm::MemoryBuffer"* null, %"class.llvm::MemoryBuffer"** %11, align 8
  %14 = bitcast %"class.llvm::ErrorOr"* %0 to i64*
  store i64 %13, i64* %14, align 8
  br label %34

15:                                               ; preds = %2
  %16 = or i8 %8, 1
  store i8 %16, i8* %7, align 8
  %17 = load i8, i8* %3, align 8
  %18 = and i8 %17, 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %15
  %21 = bitcast %"class.llvm::ErrorOr"* %1 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %24 = bitcast i8* %23 to %"class.std::__1::error_category"**
  %25 = load %"class.std::__1::error_category"*, %"class.std::__1::error_category"** %24, align 8
  br label %28

26:                                               ; preds = %15
  %27 = tail call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__115system_categoryEv() #20
  br label %28

28:                                               ; preds = %20, %26
  %29 = phi %"class.std::__1::error_category"* [ %27, %26 ], [ %25, %20 ]
  %30 = phi i32 [ 0, %26 ], [ %22, %20 ]
  %31 = bitcast %"class.llvm::ErrorOr"* %0 to i32*
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %"class.llvm::ErrorOr", %"class.llvm::ErrorOr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %33 = bitcast i8* %32 to %"class.std::__1::error_category"**
  store %"class.std::__1::error_category"* %29, %"class.std::__1::error_category"** %33, align 8
  br label %34

34:                                               ; preds = %28, %9
  ret void
}

attributes #0 = { noreturn nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold noreturn nounwind }
attributes #2 = { nofree norecurse nounwind optsize ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nobuiltin nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { argmemonly nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nofree nounwind }
attributes #15 = { nounwind optsize readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { noreturn nounwind }
attributes #18 = { nounwind }
attributes #19 = { optsize }
attributes #20 = { nounwind optsize }
attributes #21 = { nounwind optsize readnone }
attributes #22 = { nounwind optsize readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN4llvm12MemoryBuffer8getSTDINEv: argument 0"}
!4 = distinct !{!4, !"_ZN4llvm12MemoryBuffer8getSTDINEv"}
!5 = !{!"branch_weights", i32 1, i32 1048575}
