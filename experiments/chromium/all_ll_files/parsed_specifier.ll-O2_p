; ModuleID = '../../third_party/blink/renderer/core/script/parsed_specifier.cc'
source_filename = "../../third_party/blink/renderer/core/script/parsed_specifier.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ParsedSpecifier" = type { i32, %"class.blink::KURL", %"class.WTF::String" }
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

@.str = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"./\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15ParsedSpecifier6CreateERKN3WTF6StringERKNS_4KURLE(%"class.blink::ParsedSpecifier"* noalias sret, %"class.WTF::String"* dereferenceable(8), %"class.blink::KURL"* dereferenceable(112)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::KURL", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.blink::KURL", align 8
  %9 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 112, i1 false)
  %10 = tail call dereferenceable(112) %"class.blink::KURL"* @_ZN5blink7NullURLEv() #6
  call void @_ZN5blink4KURLC1ERKS0_RKN3WTF6StringE(%"class.blink::KURL"* nonnull %4, %"class.blink::KURL"* dereferenceable(112) %10, %"class.WTF::String"* dereferenceable(8) %1) #6
  %11 = call zeroext i1 @_ZNK5blink4KURL7IsValidEv(%"class.blink::KURL"* nonnull %4) #6
  br i1 %11, label %12, label %16

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 0
  store i32 2, i32* %13, align 8
  %14 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 1
  call void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"* %14, %"class.blink::KURL"* nonnull dereferenceable(112) %4) #6
  %15 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %15, align 8
  br label %108

16:                                               ; preds = %3
  %17 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #6
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %19 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i8** %20, align 8
  %21 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 1, i32* %21, align 8
  %22 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %24 = icmp eq %"class.WTF::StringImpl"* %23, null
  br i1 %24, label %25, label %31

25:                                               ; preds = %16
  %26 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #6
  %27 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #6
  %28 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %18, i64* %28, align 8
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8** %29, align 8
  %30 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 2, i32* %30, align 8
  br label %44

31:                                               ; preds = %16
  %32 = call zeroext i1 @_ZNK3WTF10StringImpl10StartsWithERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %23, %"class.WTF::StringView"* nonnull dereferenceable(24) %5) #6
  %33 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #6
  %34 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #6
  br i1 %32, label %97, label %35

35:                                               ; preds = %31
  %36 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %38 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8** %39, align 8
  %40 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 2, i32* %40, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %41, label %44, label %42

42:                                               ; preds = %35
  %43 = call zeroext i1 @_ZNK3WTF10StringImpl10StartsWithERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %37, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #6
  br i1 %43, label %97, label %51

44:                                               ; preds = %35, %25
  %45 = phi i8* [ %26, %25 ], [ %33, %35 ]
  %46 = phi i8* [ %27, %25 ], [ %34, %35 ]
  %47 = phi i64 [ %18, %25 ], [ %36, %35 ]
  %48 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8** %49, align 8
  %50 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 3, i32* %50, align 8
  br label %58

51:                                               ; preds = %42
  %52 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %54 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %52, i64* %54, align 8
  %55 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8** %55, align 8
  %56 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 3, i32* %56, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %57, label %58, label %61

58:                                               ; preds = %51, %44
  %59 = phi i8* [ %46, %44 ], [ %34, %51 ]
  %60 = phi i8* [ %45, %44 ], [ %33, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %60) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #6
  br label %70

61:                                               ; preds = %51
  %62 = call zeroext i1 @_ZNK3WTF10StringImpl10StartsWithERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %53, %"class.WTF::StringView"* nonnull dereferenceable(24) %7) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #6
  br i1 %62, label %98, label %63

63:                                               ; preds = %61
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %70, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %74

70:                                               ; preds = %58, %63, %66
  %71 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 0
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 1
  call void @_ZN5blink4KURLC1Ev(%"class.blink::KURL"* %72) #6
  %73 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %73, align 8
  br label %108

74:                                               ; preds = %66
  %75 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 0
  store i32 1, i32* %75, align 8
  %76 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 1
  call void @_ZN5blink4KURLC1Ev(%"class.blink::KURL"* %76) #6
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %78 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* %77, %"class.WTF::StringImpl"** %78, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %79, label %108, label %80

80:                                               ; preds = %74
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %108

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = zext i32 %87 to i33
  %89 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %88, i33 1) #6
  %90 = extractvalue { i33, i1 } %89, 1
  %91 = extractvalue { i33, i1 } %89, 0
  %92 = icmp slt i33 %91, 0
  %93 = or i1 %90, %92
  br i1 %93, label %94, label %95, !prof !2

94:                                               ; preds = %85
  call void @llvm.trap() #6
  unreachable

95:                                               ; preds = %85
  %96 = trunc i33 %91 to i32
  store i32 %96, i32* %86, align 4
  br label %108

97:                                               ; preds = %31, %42
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #6
  br label %98

98:                                               ; preds = %97, %61
  %99 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %99) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %99, i8 -86, i64 112, i1 false)
  call void @_ZN5blink4KURLC1ERKS0_RKN3WTF6StringE(%"class.blink::KURL"* nonnull %8, %"class.blink::KURL"* dereferenceable(112) %2, %"class.WTF::String"* dereferenceable(8) %1) #6
  %100 = call zeroext i1 @_ZNK5blink4KURL7IsValidEv(%"class.blink::KURL"* nonnull %8) #6
  %101 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 0
  br i1 %100, label %102, label %104

102:                                              ; preds = %98
  store i32 2, i32* %101, align 8
  %103 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 1
  call void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"* %103, %"class.blink::KURL"* nonnull dereferenceable(112) %8) #6
  br label %106

104:                                              ; preds = %98
  store i32 0, i32* %101, align 8
  %105 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 1
  call void @_ZN5blink4KURLC1Ev(%"class.blink::KURL"* %105) #6
  br label %106

106:                                              ; preds = %104, %102
  %107 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %107, align 8
  call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %99) #6
  br label %108

108:                                              ; preds = %95, %80, %74, %106, %70, %12
  call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %9) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dereferenceable(112) %"class.blink::KURL"* @_ZN5blink7NullURLEv() local_unnamed_addr #2

declare void @_ZN5blink4KURLC1ERKS0_RKN3WTF6StringE(%"class.blink::KURL"*, %"class.blink::KURL"* dereferenceable(112), %"class.WTF::String"* dereferenceable(8)) unnamed_addr #2

declare zeroext i1 @_ZNK5blink4KURL7IsValidEv(%"class.blink::KURL"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink15ParsedSpecifier21GetImportMapKeyStringEv(%"class.blink::ParsedSpecifier"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %48 [
    i32 0, label %49
    i32 1, label %4
    i32 2, label %26
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 2, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = ptrtoint %"class.WTF::StringImpl"* %6 to i64
  %8 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %8, label %49, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %49

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #6
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #6
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %49

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %0, i64 0, i32 1, i32 4, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = ptrtoint %"class.WTF::StringImpl"* %28 to i64
  %30 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %30, label %49, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %49

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i33
  %40 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %39, i33 1) #6
  %41 = extractvalue { i33, i1 } %40, 1
  %42 = extractvalue { i33, i1 } %40, 0
  %43 = icmp slt i33 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %45, label %46, !prof !2

45:                                               ; preds = %36
  tail call void @llvm.trap() #6
  unreachable

46:                                               ; preds = %36
  %47 = trunc i33 %42 to i32
  store i32 %47, i32* %37, align 4
  br label %49

48:                                               ; preds = %1
  unreachable

49:                                               ; preds = %46, %31, %26, %24, %9, %4, %1
  %50 = phi i64 [ 0, %1 ], [ %7, %4 ], [ %7, %9 ], [ %7, %24 ], [ %29, %26 ], [ %29, %31 ], [ %29, %46 ]
  %51 = inttoptr i64 %50 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15ParsedSpecifier6GetUrlEv(%"class.blink::KURL"* noalias sret, %"class.blink::ParsedSpecifier"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 2
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = tail call dereferenceable(112) %"class.blink::KURL"* @_ZN5blink7NullURLEv() #6
  br label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::ParsedSpecifier", %"class.blink::ParsedSpecifier"* %1, i64 0, i32 1
  br label %10

10:                                               ; preds = %8, %6
  %11 = phi %"class.blink::KURL"* [ %9, %8 ], [ %7, %6 ]
  tail call void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"* %0, %"class.blink::KURL"* dereferenceable(112) %11) #6
  ret void
}

declare void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"*, %"class.blink::KURL"* dereferenceable(112)) unnamed_addr #2

declare zeroext i1 @_ZNK3WTF10StringImpl10StartsWithERKNS_10StringViewE(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @_ZN5blink4KURLC1Ev(%"class.blink::KURL"*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
