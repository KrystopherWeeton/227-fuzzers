; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/context_tree.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/context_tree.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%union.int_mv = type { i32 }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.PC_TREE = type { i8, i8, %struct.PICK_MODE_CONTEXT*, [2 x %struct.PICK_MODE_CONTEXT*], [2 x %struct.PICK_MODE_CONTEXT*], [3 x %struct.PICK_MODE_CONTEXT*], [3 x %struct.PICK_MODE_CONTEXT*], [3 x %struct.PICK_MODE_CONTEXT*], [3 x %struct.PICK_MODE_CONTEXT*], [4 x %struct.PICK_MODE_CONTEXT*], [4 x %struct.PICK_MODE_CONTEXT*], [4 x %struct.PC_TREE*], i32 }

@.str = private unnamed_addr constant [45 x i8] c"Failed to allocate shared_bufs->coeff_buf[i]\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"Failed to allocate shared_bufs->qcoeff_buf[i]\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"Failed to allocate shared_bufs->dqcoeff_buf[i]\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"Failed to allocate ctx\00", align 1
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@.str.4 = private unnamed_addr constant [33 x i8] c"Failed to allocate ctx->blk_skip\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Failed to allocate ctx->tx_type_map\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"Failed to allocate ctx->eobs[i]\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"Failed to allocate ctx->txb_entropy_ctx[i]\00", align 1
@.str.8 = private unnamed_addr constant [43 x i8] c"Failed to allocate ctx->color_index_map[i]\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"Failed to allocate pc_tree\00", align 1
@.str.10 = private unnamed_addr constant [32 x i8] c"Failed to allocate td->sms_tree\00", align 1
@square = internal unnamed_addr constant [6 x i8] c"\00\03\06\09\0C\0F", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_copy_tree_context(%struct.PICK_MODE_CONTEXT* nocapture, %struct.PICK_MODE_CONTEXT* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 184, i1 false)
  %5 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 1
  %7 = bitcast %struct.MB_MODE_INFO_EXT_FRAME* %5 to i8*
  %8 = bitcast %struct.MB_MODE_INFO_EXT_FRAME* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 84, i1 false)
  %9 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 10
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 10
  store i32 %10, i32* %11, align 8
  %12 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 11
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 11
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 3
  %18 = load i8*, i8** %17, align 8
  %19 = load i32, i32* %9, align 8
  %20 = sext i32 %19 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %18, i64 %20, i1 false)
  %21 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 9
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 9
  %24 = load i8*, i8** %23, align 8
  %25 = load i32, i32* %9, align 8
  %26 = sext i32 %25 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 %24, i64 %26, i1 false)
  %27 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 12
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 12
  store i32 %28, i32* %29, align 8
  %30 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 13
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 13
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 14
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 14
  store i32 %34, i32* %35, align 8
  %36 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 15
  %37 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 15
  %38 = bitcast %struct.RD_STATS* %36 to i8*
  %39 = bitcast %struct.RD_STATS* %37 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 40, i1 false)
  %40 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 16
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 16
  store i32 %41, i32* %42, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_setup_shared_coeff_buffer(%struct.AV1Common* nocapture readonly, %struct.PC_TREE_SHARED_BUFFERS* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %4 = tail call i8* @aom_memalign(i64 32, i64 65536) #3
  %5 = bitcast %struct.PC_TREE_SHARED_BUFFERS* %1 to i8**
  store i8* %4, i8** %5, align 8
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %3, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %8, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0)) #3
  br label %9

9:                                                ; preds = %2, %7
  %10 = tail call i8* @aom_memalign(i64 32, i64 65536) #3
  %11 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %1, i64 0, i32 1, i64 0
  %12 = bitcast i32** %11 to i8**
  store i8* %10, i8** %12, align 8
  %13 = icmp eq i8* %10, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %9
  %15 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %3, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %15, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0)) #3
  br label %16

16:                                               ; preds = %9, %14
  %17 = tail call i8* @aom_memalign(i64 32, i64 65536) #3
  %18 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %1, i64 0, i32 2, i64 0
  %19 = bitcast i32** %18 to i8**
  store i8* %17, i8** %19, align 8
  %20 = icmp eq i8* %17, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %3, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %22, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0)) #3
  br label %23

23:                                               ; preds = %16, %21
  %24 = tail call i8* @aom_memalign(i64 32, i64 65536) #3
  %25 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %1, i64 0, i32 0, i64 1
  %26 = bitcast i32** %25 to i8**
  store i8* %24, i8** %26, align 8
  %27 = icmp eq i8* %24, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %3, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %29, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0)) #3
  br label %30

30:                                               ; preds = %28, %23
  %31 = tail call i8* @aom_memalign(i64 32, i64 65536) #3
  %32 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %1, i64 0, i32 1, i64 1
  %33 = bitcast i32** %32 to i8**
  store i8* %31, i8** %33, align 8
  %34 = icmp eq i8* %31, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %3, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %36, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0)) #3
  br label %37

37:                                               ; preds = %35, %30
  %38 = tail call i8* @aom_memalign(i64 32, i64 65536) #3
  %39 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %1, i64 0, i32 2, i64 1
  %40 = bitcast i32** %39 to i8**
  store i8* %38, i8** %40, align 8
  %41 = icmp eq i8* %38, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %3, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %43, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0)) #3
  br label %44

44:                                               ; preds = %42, %37
  %45 = tail call i8* @aom_memalign(i64 32, i64 65536) #3
  %46 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %1, i64 0, i32 0, i64 2
  %47 = bitcast i32** %46 to i8**
  store i8* %45, i8** %47, align 8
  %48 = icmp eq i8* %45, null
  br i1 %48, label %49, label %51

49:                                               ; preds = %44
  %50 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %3, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %50, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0)) #3
  br label %51

51:                                               ; preds = %49, %44
  %52 = tail call i8* @aom_memalign(i64 32, i64 65536) #3
  %53 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %1, i64 0, i32 1, i64 2
  %54 = bitcast i32** %53 to i8**
  store i8* %52, i8** %54, align 8
  %55 = icmp eq i8* %52, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %51
  %57 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %3, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %57, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0)) #3
  br label %58

58:                                               ; preds = %56, %51
  %59 = tail call i8* @aom_memalign(i64 32, i64 65536) #3
  %60 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %1, i64 0, i32 2, i64 2
  %61 = bitcast i32** %60 to i8**
  store i8* %59, i8** %61, align 8
  %62 = icmp eq i8* %59, null
  br i1 %62, label %63, label %65

63:                                               ; preds = %58
  %64 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %3, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %64, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0)) #3
  br label %65

65:                                               ; preds = %63, %58
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @aom_memalign(i64, i64) local_unnamed_addr #2

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_free_shared_coeff_buffer(%struct.PC_TREE_SHARED_BUFFERS* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %0, i64 0, i32 0, i64 0
  %3 = bitcast %struct.PC_TREE_SHARED_BUFFERS* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @aom_free(i8* %4) #3
  %5 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %0, i64 0, i32 1, i64 0
  %6 = bitcast i32** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  tail call void @aom_free(i8* %7) #3
  %8 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %0, i64 0, i32 2, i64 0
  %9 = bitcast i32** %8 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @aom_free(i8* %10) #3
  store i32* null, i32** %2, align 8
  store i32* null, i32** %5, align 8
  store i32* null, i32** %8, align 8
  %11 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %0, i64 0, i32 0, i64 1
  %12 = bitcast i32** %11 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @aom_free(i8* %13) #3
  %14 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %0, i64 0, i32 1, i64 1
  %15 = bitcast i32** %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void @aom_free(i8* %16) #3
  %17 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %0, i64 0, i32 2, i64 1
  %18 = bitcast i32** %17 to i8**
  %19 = load i8*, i8** %18, align 8
  tail call void @aom_free(i8* %19) #3
  store i32* null, i32** %11, align 8
  store i32* null, i32** %14, align 8
  store i32* null, i32** %17, align 8
  %20 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %0, i64 0, i32 0, i64 2
  %21 = bitcast i32** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  tail call void @aom_free(i8* %22) #3
  %23 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %0, i64 0, i32 1, i64 2
  %24 = bitcast i32** %23 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @aom_free(i8* %25) #3
  %26 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %0, i64 0, i32 2, i64 2
  %27 = bitcast i32** %26 to i8**
  %28 = load i8*, i8** %27, align 8
  tail call void @aom_free(i8* %28) #3
  store i32* null, i32** %20, align 8
  store i32* null, i32** %23, align 8
  store i32* null, i32** %26, align 8
  ret void
}

declare void @aom_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.PICK_MODE_CONTEXT* @av1_alloc_pmc(%struct.AV1_COMP* nocapture readonly, i8 zeroext, %struct.PC_TREE_SHARED_BUFFERS* nocapture readonly) local_unnamed_addr #0 {
  %4 = alloca %struct.aom_internal_error_info, align 8
  %5 = bitcast %struct.aom_internal_error_info* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 416, i1 false)
  %6 = tail call i8* @aom_calloc(i64 1, i64 536) #3
  %7 = bitcast i8* %6 to %struct.PICK_MODE_CONTEXT*
  %8 = icmp eq i8* %6, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* nonnull %4, i32 2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0)) #3
  br label %10

10:                                               ; preds = %3, %9
  %11 = getelementptr inbounds i8, i8* %6, i64 488
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %14 = load %struct.SequenceHeader*, %struct.SequenceHeader** %13, align 16
  %15 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %14, i64 0, i32 27
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  %18 = zext i8 %1 to i64
  %19 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %18
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = mul nuw nsw i32 %24, %21
  %26 = lshr i32 %25, 4
  %27 = zext i32 %26 to i64
  %28 = call i8* @aom_calloc(i64 %27, i64 1) #3
  %29 = getelementptr inbounds i8, i8* %6, i64 288
  %30 = bitcast i8* %29 to i8**
  store i8* %28, i8** %30, align 8
  %31 = icmp eq i8* %28, null
  br i1 %31, label %32, label %33

32:                                               ; preds = %10
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* nonnull %4, i32 2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0)) #3
  br label %33

33:                                               ; preds = %10, %32
  %34 = call i8* @aom_calloc(i64 %27, i64 1) #3
  %35 = getelementptr inbounds i8, i8* %6, i64 416
  %36 = bitcast i8* %35 to i8**
  store i8* %34, i8** %36, align 8
  %37 = icmp eq i8* %34, null
  br i1 %37, label %38, label %39

38:                                               ; preds = %33
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* nonnull %4, i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0)) #3
  br label %39

39:                                               ; preds = %33, %38
  %40 = getelementptr inbounds i8, i8* %6, i64 424
  %41 = bitcast i8* %40 to i32*
  store i32 %26, i32* %41, align 8
  %42 = getelementptr inbounds i8, i8* %6, i64 296
  %43 = bitcast i8* %42 to [3 x i32*]*
  %44 = getelementptr inbounds i8, i8* %6, i64 320
  %45 = bitcast i8* %44 to [3 x i32*]*
  %46 = getelementptr inbounds i8, i8* %6, i64 344
  %47 = bitcast i8* %46 to [3 x i32*]*
  %48 = shl nuw nsw i32 %26, 1
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %6, i64 368
  %51 = bitcast i8* %50 to [3 x i16*]*
  %52 = getelementptr inbounds i8, i8* %6, i64 392
  %53 = bitcast i8* %52 to [3 x i8*]*
  %54 = select i1 %17, i64 3, i64 1
  br label %64

55:                                               ; preds = %91
  %56 = icmp ult i32 %25, 4097
  br i1 %56, label %57, label %108

57:                                               ; preds = %55
  %58 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 7
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %60 = getelementptr inbounds i8, i8* %6, i64 272
  %61 = zext i32 %25 to i64
  %62 = load i32, i32* %58, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %98, label %94

64:                                               ; preds = %91, %39
  %65 = phi i64 [ 0, %39 ], [ %92, %91 ]
  %66 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %2, i64 0, i32 0, i64 %65
  %67 = bitcast i32** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds [3 x i32*], [3 x i32*]* %43, i64 0, i64 %65
  %70 = bitcast i32** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %2, i64 0, i32 1, i64 %65
  %72 = bitcast i32** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds [3 x i32*], [3 x i32*]* %45, i64 0, i64 %65
  %75 = bitcast i32** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = getelementptr inbounds %struct.PC_TREE_SHARED_BUFFERS, %struct.PC_TREE_SHARED_BUFFERS* %2, i64 0, i32 2, i64 %65
  %77 = bitcast i32** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds [3 x i32*], [3 x i32*]* %47, i64 0, i64 %65
  %80 = bitcast i32** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = call i8* @aom_memalign(i64 32, i64 %49) #3
  %82 = getelementptr inbounds [3 x i16*], [3 x i16*]* %51, i64 0, i64 %65
  %83 = bitcast i16** %82 to i8**
  store i8* %81, i8** %83, align 8
  %84 = icmp eq i8* %81, null
  br i1 %84, label %85, label %86

85:                                               ; preds = %64
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* nonnull %4, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0)) #3
  br label %86

86:                                               ; preds = %64, %85
  %87 = call i8* @aom_memalign(i64 32, i64 %27) #3
  %88 = getelementptr inbounds [3 x i8*], [3 x i8*]* %53, i64 0, i64 %65
  store i8* %87, i8** %88, align 8
  %89 = icmp eq i8* %87, null
  br i1 %89, label %90, label %91

90:                                               ; preds = %86
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* nonnull %4, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0)) #3
  br label %91

91:                                               ; preds = %86, %90
  %92 = add nuw nsw i64 %65, 1
  %93 = icmp eq i64 %92, %54
  br i1 %93, label %55, label %64

94:                                               ; preds = %57
  %95 = load i8, i8* %59, align 16
  %96 = and i8 %95, -3
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %103

98:                                               ; preds = %94, %57
  %99 = call i8* @aom_memalign(i64 32, i64 %61) #3
  %100 = bitcast i8* %60 to i8**
  store i8* %99, i8** %100, align 8
  %101 = icmp eq i8* %99, null
  br i1 %101, label %102, label %105

102:                                              ; preds = %98
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* nonnull %4, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0)) #3
  br label %105

103:                                              ; preds = %94
  %104 = bitcast i8* %60 to i8**
  store i8* null, i8** %104, align 8
  br label %105

105:                                              ; preds = %98, %103, %102
  %106 = load i32, i32* %58, align 4
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %126, label %119

108:                                              ; preds = %123, %126, %131, %55
  %109 = getelementptr inbounds i8, i8* %6, i64 448
  %110 = bitcast i8* %109 to i32*
  store i32 2147483647, i32* %110, align 8
  %111 = getelementptr inbounds i8, i8* %6, i64 456
  %112 = bitcast i8* %111 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %112, align 8
  %113 = getelementptr inbounds i8, i8* %6, i64 472
  %114 = bitcast i8* %113 to i64*
  store i64 9223372036854775807, i64* %114, align 8
  %115 = getelementptr inbounds i8, i8* %6, i64 480
  %116 = bitcast i8* %115 to i32*
  store i32 0, i32* %116, align 8
  %117 = getelementptr inbounds i8, i8* %6, i64 484
  %118 = bitcast i8* %117 to i32*
  store i32 0, i32* %118, align 4
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %5) #3
  ret %struct.PICK_MODE_CONTEXT* %7

119:                                              ; preds = %105
  %120 = load i8, i8* %59, align 16
  %121 = and i8 %120, -3
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %126, label %123

123:                                              ; preds = %119
  %124 = getelementptr inbounds i8, i8* %6, i64 280
  %125 = bitcast i8* %124 to i8**
  store i8* null, i8** %125, align 8
  br label %108

126:                                              ; preds = %119, %105
  %127 = call i8* @aom_memalign(i64 32, i64 %61) #3
  %128 = getelementptr inbounds i8, i8* %6, i64 280
  %129 = bitcast i8* %128 to i8**
  store i8* %127, i8** %129, align 8
  %130 = icmp eq i8* %127, null
  br i1 %130, label %131, label %108

131:                                              ; preds = %126
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* nonnull %4, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0)) #3
  br label %108
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @aom_calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_free_pmc(%struct.PICK_MODE_CONTEXT*, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.PICK_MODE_CONTEXT* %0, null
  br i1 %3, label %33, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  tail call void @aom_free(i8* %6) #3
  store i8* null, i8** %5, align 8
  %7 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 9
  %8 = load i8*, i8** %7, align 8
  tail call void @aom_free(i8* %8) #3
  %9 = icmp sgt i32 %1, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = zext i32 %1 to i64
  br label %16

12:                                               ; preds = %16, %4
  %13 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 2, i64 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %29, label %28

16:                                               ; preds = %16, %10
  %17 = phi i64 [ 0, %10 ], [ %26, %16 ]
  %18 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 4, i64 %17
  store i32* null, i32** %18, align 8
  %19 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 5, i64 %17
  store i32* null, i32** %19, align 8
  %20 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 6, i64 %17
  store i32* null, i32** %20, align 8
  %21 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 7, i64 %17
  %22 = bitcast i16** %21 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @aom_free(i8* %23) #3
  store i16* null, i16** %21, align 8
  %24 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 8, i64 %17
  %25 = load i8*, i8** %24, align 8
  tail call void @aom_free(i8* %25) #3
  store i8* null, i8** %24, align 8
  %26 = add nuw nsw i64 %17, 1
  %27 = icmp eq i64 %26, %11
  br i1 %27, label %12, label %16

28:                                               ; preds = %12
  tail call void @aom_free(i8* nonnull %14) #3
  store i8* null, i8** %13, align 8
  br label %29

29:                                               ; preds = %12, %28
  %30 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 2, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %35, label %34

33:                                               ; preds = %2, %35
  ret void

34:                                               ; preds = %29
  tail call void @aom_free(i8* nonnull %31) #3
  store i8* null, i8** %30, align 8
  br label %35

35:                                               ; preds = %34, %29
  %36 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 0, i32 0
  tail call void @aom_free(i8* %36) #3
  br label %33
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.PC_TREE* @av1_alloc_pc_tree_node(i8 zeroext) local_unnamed_addr #0 {
  %2 = alloca %struct.aom_internal_error_info, align 8
  %3 = bitcast %struct.aom_internal_error_info* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %3) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 416, i1 false)
  %4 = tail call i8* @aom_calloc(i64 1, i64 248) #3
  %5 = bitcast i8* %4 to %struct.PC_TREE*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* nonnull %2, i32 2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0)) #3
  br label %8

8:                                                ; preds = %1, %7
  store i8 0, i8* %4, align 8
  %9 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 %0, i8* %9, align 1
  %10 = getelementptr inbounds i8, i8* %4, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 236, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %3) #3
  ret %struct.PC_TREE* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_free_pc_tree_recursive(%struct.PC_TREE*, i32, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq %struct.PC_TREE* %0, null
  br i1 %5, label %77, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 0
  %8 = load i8, i8* %7, align 8
  %9 = icmp eq i32 %3, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %6
  %11 = icmp ne i32 %2, 0
  %12 = icmp eq i8 %8, 0
  %13 = and i1 %11, %12
  br i1 %13, label %23, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 2
  %16 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %15, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %16, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %15, align 8
  br label %17

17:                                               ; preds = %6, %14
  %18 = icmp ne i32 %2, 0
  %19 = icmp eq i8 %8, 1
  %20 = and i1 %18, %19
  %21 = icmp eq i8 %8, 2
  %22 = and i1 %18, %21
  br i1 %20, label %28, label %23

23:                                               ; preds = %10, %17
  %24 = phi i1 [ %22, %17 ], [ false, %10 ]
  %25 = phi i1 [ %18, %17 ], [ true, %10 ]
  %26 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 3, i64 0
  %27 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %26, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %27, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %26, align 8
  br i1 %24, label %145, label %28

28:                                               ; preds = %17, %23
  %29 = phi i1 [ %22, %17 ], [ false, %23 ]
  %30 = phi i1 [ true, %17 ], [ false, %23 ]
  %31 = phi i1 [ %18, %17 ], [ %25, %23 ]
  %32 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 4, i64 0
  %33 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %32, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %33, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %32, align 8
  br i1 %30, label %150, label %145

34:                                               ; preds = %154
  %35 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 5, i64 0
  %36 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %35, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %36, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %35, align 8
  br i1 %159, label %40, label %37

37:                                               ; preds = %154, %34
  %38 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 6, i64 0
  %39 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %38, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %39, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %38, align 8
  br i1 %161, label %43, label %40

40:                                               ; preds = %34, %37
  %41 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 7, i64 0
  %42 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %41, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %42, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %41, align 8
  br i1 %163, label %46, label %43

43:                                               ; preds = %37, %40
  %44 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 8, i64 0
  %45 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %44, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %45, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %44, align 8
  br label %46

46:                                               ; preds = %40, %43
  br i1 %157, label %119, label %116

47:                                               ; preds = %89, %97
  %48 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 9, i64 2
  %49 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %48, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %49, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %48, align 8
  br label %50

50:                                               ; preds = %47, %100
  %51 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 9, i64 3
  %52 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %51, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %52, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %51, align 8
  br label %53

53:                                               ; preds = %50, %108, %111
  %54 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 11, i64 0
  %55 = load %struct.PC_TREE*, %struct.PC_TREE** %54, align 8
  %56 = icmp eq %struct.PC_TREE* %55, null
  br i1 %56, label %69, label %68

57:                                               ; preds = %138
  %58 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 9, i64 0
  %59 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %58, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %59, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %58, align 8
  br i1 %144, label %97, label %63

60:                                               ; preds = %135
  %61 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 9, i64 0
  %62 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %61, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %62, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %61, align 8
  br label %63

63:                                               ; preds = %60, %57, %138
  %64 = phi i1 [ false, %57 ], [ %144, %138 ], [ false, %60 ]
  %65 = phi i1 [ false, %57 ], [ true, %138 ], [ false, %60 ]
  %66 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 10, i64 0
  %67 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %66, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %67, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %66, align 8
  br i1 %65, label %92, label %89

68:                                               ; preds = %53
  tail call void @av1_free_pc_tree_recursive(%struct.PC_TREE* nonnull %55, i32 %1, i32 0, i32 0)
  store %struct.PC_TREE* null, %struct.PC_TREE** %54, align 8
  br label %69

69:                                               ; preds = %53, %68
  %70 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 11, i64 1
  %71 = load %struct.PC_TREE*, %struct.PC_TREE** %70, align 8
  %72 = icmp eq %struct.PC_TREE* %71, null
  br i1 %72, label %79, label %78

73:                                               ; preds = %84, %88, %111
  %74 = or i32 %3, %2
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  tail call void @aom_free(i8* %7) #3
  br label %77

77:                                               ; preds = %76, %73, %4
  ret void

78:                                               ; preds = %69
  tail call void @av1_free_pc_tree_recursive(%struct.PC_TREE* nonnull %71, i32 %1, i32 0, i32 0)
  store %struct.PC_TREE* null, %struct.PC_TREE** %70, align 8
  br label %79

79:                                               ; preds = %78, %69
  %80 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 11, i64 2
  %81 = load %struct.PC_TREE*, %struct.PC_TREE** %80, align 8
  %82 = icmp eq %struct.PC_TREE* %81, null
  br i1 %82, label %84, label %83

83:                                               ; preds = %79
  tail call void @av1_free_pc_tree_recursive(%struct.PC_TREE* nonnull %81, i32 %1, i32 0, i32 0)
  store %struct.PC_TREE* null, %struct.PC_TREE** %80, align 8
  br label %84

84:                                               ; preds = %83, %79
  %85 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 11, i64 3
  %86 = load %struct.PC_TREE*, %struct.PC_TREE** %85, align 8
  %87 = icmp eq %struct.PC_TREE* %86, null
  br i1 %87, label %73, label %88

88:                                               ; preds = %84
  tail call void @av1_free_pc_tree_recursive(%struct.PC_TREE* nonnull %86, i32 %1, i32 0, i32 0)
  store %struct.PC_TREE* null, %struct.PC_TREE** %85, align 8
  br label %73

89:                                               ; preds = %63
  %90 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 9, i64 1
  %91 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %90, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %91, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %90, align 8
  br i1 %64, label %47, label %92

92:                                               ; preds = %63, %89
  %93 = phi i1 [ %64, %63 ], [ false, %89 ]
  %94 = phi i1 [ true, %63 ], [ false, %89 ]
  %95 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 10, i64 1
  %96 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %95, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %96, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %95, align 8
  br i1 %94, label %103, label %100

97:                                               ; preds = %57
  %98 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 9, i64 1
  %99 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %98, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %99, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %98, align 8
  br label %47

100:                                              ; preds = %92
  %101 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 9, i64 2
  %102 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %101, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %102, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %101, align 8
  br i1 %93, label %50, label %103

103:                                              ; preds = %92, %100
  %104 = phi i1 [ %93, %92 ], [ false, %100 ]
  %105 = phi i1 [ true, %92 ], [ false, %100 ]
  %106 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 10, i64 2
  %107 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %106, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %107, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %106, align 8
  br i1 %105, label %111, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 9, i64 3
  %110 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %109, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %110, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %109, align 8
  br i1 %104, label %53, label %111

111:                                              ; preds = %103, %108
  %112 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 10, i64 3
  %113 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %112, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %113, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %112, align 8
  %114 = icmp eq i8 %8, 3
  %115 = and i1 %155, %114
  br i1 %115, label %73, label %53

116:                                              ; preds = %46
  %117 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 5, i64 1
  %118 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %117, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %118, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %117, align 8
  br i1 %159, label %122, label %119

119:                                              ; preds = %116, %46
  %120 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 6, i64 1
  %121 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %120, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %121, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %120, align 8
  br i1 %161, label %125, label %122

122:                                              ; preds = %119, %116
  %123 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 7, i64 1
  %124 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %123, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %124, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %123, align 8
  br i1 %163, label %128, label %125

125:                                              ; preds = %122, %119
  %126 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 8, i64 1
  %127 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %126, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %127, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %126, align 8
  br label %128

128:                                              ; preds = %125, %122
  br i1 %157, label %132, label %129

129:                                              ; preds = %128
  %130 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 5, i64 2
  %131 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %130, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %131, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %130, align 8
  br i1 %159, label %135, label %132

132:                                              ; preds = %129, %128
  %133 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 6, i64 2
  %134 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %133, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %134, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %133, align 8
  br i1 %161, label %138, label %135

135:                                              ; preds = %132, %129
  %136 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 7, i64 2
  %137 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %136, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %137, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %136, align 8
  br i1 %163, label %60, label %138

138:                                              ; preds = %132, %135
  %139 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 8, i64 2
  %140 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %139, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %140, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %139, align 8
  %141 = icmp eq i8 %8, 8
  %142 = and i1 %155, %141
  %143 = icmp eq i8 %8, 9
  %144 = and i1 %155, %143
  br i1 %142, label %63, label %57

145:                                              ; preds = %23, %28
  %146 = phi i1 [ %31, %28 ], [ %25, %23 ]
  %147 = phi i1 [ %29, %28 ], [ true, %23 ]
  %148 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 3, i64 1
  %149 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %148, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %149, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %148, align 8
  br i1 %147, label %154, label %150

150:                                              ; preds = %28, %145
  %151 = phi i1 [ %31, %28 ], [ %146, %145 ]
  %152 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %0, i64 0, i32 4, i64 1
  %153 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %152, align 8
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %153, i32 %1)
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %152, align 8
  br label %154

154:                                              ; preds = %150, %145
  %155 = phi i1 [ %151, %150 ], [ %146, %145 ]
  %156 = icmp eq i8 %8, 4
  %157 = and i1 %155, %156
  %158 = icmp eq i8 %8, 5
  %159 = and i1 %155, %158
  %160 = icmp eq i8 %8, 6
  %161 = and i1 %155, %160
  %162 = icmp eq i8 %8, 7
  %163 = and i1 %155, %162
  br i1 %157, label %37, label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_setup_sms_tree(%struct.AV1_COMP* nocapture readonly, %struct.ThreadData* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %8 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %9 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 7
  %10 = load i8, i8* %9, align 4
  %11 = icmp eq i8 %10, 15
  br label %23

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %14 = load i8, i8* %13, align 8
  %15 = icmp ne i8 %14, 1
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %17 = load %struct.SequenceHeader*, %struct.SequenceHeader** %16, align 16
  %18 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %17, i64 0, i32 7
  %19 = load i8, i8* %18, align 4
  %20 = icmp eq i8 %19, 15
  %21 = select i1 %20, i32 1365, i32 341
  %22 = select i1 %15, i32 %21, i32 1
  br label %23

23:                                               ; preds = %12, %6
  %24 = phi i1 [ %11, %6 ], [ %20, %12 ]
  %25 = phi i1 [ false, %6 ], [ %15, %12 ]
  %26 = phi i32 [ 1, %6 ], [ %22, %12 ]
  %27 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 4
  %28 = bitcast %struct.SIMPLE_MOTION_DATA_TREE** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @aom_free(i8* %29) #3
  %30 = zext i32 %26 to i64
  %31 = tail call i8* @aom_calloc(i64 %30, i64 120) #3
  store i8* %31, i8** %28, align 8
  %32 = icmp eq i8* %31, null
  %33 = bitcast i8* %31 to %struct.SIMPLE_MOTION_DATA_TREE*
  br i1 %32, label %34, label %38

34:                                               ; preds = %23
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %36 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %35, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %36, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i64 0, i64 0)) #3
  %37 = load %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE** %27, align 8
  br label %38

38:                                               ; preds = %23, %34
  %39 = phi %struct.SIMPLE_MOTION_DATA_TREE* [ %33, %23 ], [ %37, %34 ]
  br i1 %25, label %40, label %85

40:                                               ; preds = %38
  %41 = select i1 %24, i32 1024, i32 256
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %39, i64 0, i32 0
  store i8 0, i8* %43, align 8
  br label %44

44:                                               ; preds = %40, %44
  %45 = phi i64 [ 1, %40 ], [ %48, %44 ]
  %46 = load %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE** %27, align 8
  %47 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %46, i64 %45, i32 0
  store i8 0, i8* %47, align 8
  %48 = add nuw nsw i64 %45, 1
  %49 = icmp ult i64 %48, %42
  br i1 %49, label %44, label %50

50:                                               ; preds = %44
  %51 = lshr exact i32 %41, 2
  br label %52

52:                                               ; preds = %50, %63
  %53 = phi i64 [ 1, %50 ], [ %64, %63 ]
  %54 = phi i32 [ %51, %50 ], [ %65, %63 ]
  %55 = phi %struct.SIMPLE_MOTION_DATA_TREE* [ %39, %50 ], [ %80, %63 ]
  %56 = phi i64 [ %48, %50 ], [ %82, %63 ]
  %57 = icmp sgt i32 %54, 0
  br i1 %57, label %58, label %87

58:                                               ; preds = %52
  %59 = getelementptr inbounds [6 x i8], [6 x i8]* @square, i64 0, i64 %53
  %60 = load i8, i8* %59, align 1
  %61 = shl i64 %56, 32
  %62 = ashr exact i64 %61, 32
  br label %67

63:                                               ; preds = %67
  %64 = add nuw nsw i64 %53, 1
  %65 = ashr i32 %54, 2
  %66 = icmp sgt i32 %54, 3
  br i1 %66, label %52, label %87

67:                                               ; preds = %67, %58
  %68 = phi i64 [ %62, %58 ], [ %82, %67 ]
  %69 = phi i32 [ 0, %58 ], [ %83, %67 ]
  %70 = phi %struct.SIMPLE_MOTION_DATA_TREE* [ %55, %58 ], [ %80, %67 ]
  %71 = load %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE** %27, align 8
  %72 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %71, i64 %68, i32 0
  store i8 %60, i8* %72, align 8
  %73 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %71, i64 %68, i32 2, i64 0
  store %struct.SIMPLE_MOTION_DATA_TREE* %70, %struct.SIMPLE_MOTION_DATA_TREE** %73, align 8
  %74 = insertelement <2 x %struct.SIMPLE_MOTION_DATA_TREE*> undef, %struct.SIMPLE_MOTION_DATA_TREE* %70, i32 0
  %75 = shufflevector <2 x %struct.SIMPLE_MOTION_DATA_TREE*> %74, <2 x %struct.SIMPLE_MOTION_DATA_TREE*> undef, <2 x i32> zeroinitializer
  %76 = getelementptr %struct.SIMPLE_MOTION_DATA_TREE, <2 x %struct.SIMPLE_MOTION_DATA_TREE*> %75, <2 x i64> <i64 1, i64 2>
  %77 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %71, i64 %68, i32 2, i64 1
  %78 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %70, i64 3
  %79 = bitcast %struct.SIMPLE_MOTION_DATA_TREE** %77 to <2 x %struct.SIMPLE_MOTION_DATA_TREE*>*
  store <2 x %struct.SIMPLE_MOTION_DATA_TREE*> %76, <2 x %struct.SIMPLE_MOTION_DATA_TREE*>* %79, align 8
  %80 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %70, i64 4
  %81 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %71, i64 %68, i32 2, i64 3
  store %struct.SIMPLE_MOTION_DATA_TREE* %78, %struct.SIMPLE_MOTION_DATA_TREE** %81, align 8
  %82 = add nsw i64 %68, 1
  %83 = add nuw nsw i32 %69, 1
  %84 = icmp eq i32 %83, %54
  br i1 %84, label %63, label %67

85:                                               ; preds = %38
  %86 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %39, i64 0, i32 0
  store i8 6, i8* %86, align 8
  br label %87

87:                                               ; preds = %52, %63, %85
  %88 = load %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE** %27, align 8
  %89 = add nsw i32 %26, -1
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %88, i64 %90
  %92 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 5
  store %struct.SIMPLE_MOTION_DATA_TREE* %91, %struct.SIMPLE_MOTION_DATA_TREE** %92, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_free_sms_tree(%struct.ThreadData* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 4
  %3 = load %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE** %2, align 8
  %4 = icmp eq %struct.SIMPLE_MOTION_DATA_TREE* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.SIMPLE_MOTION_DATA_TREE, %struct.SIMPLE_MOTION_DATA_TREE* %3, i64 0, i32 0
  tail call void @aom_free(i8* %6) #3
  store %struct.SIMPLE_MOTION_DATA_TREE* null, %struct.SIMPLE_MOTION_DATA_TREE** %2, align 8
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
