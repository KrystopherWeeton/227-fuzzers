; ModuleID = '../../components/url_formatter/url_formatter.cc'
source_filename = "../../components/url_formatter/url_formatter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::LazyInstance" = type { i64, [1440 x i8] }
%"class.base::BasicStringPiece.50" = type { i16*, i64 }
%"class.base::LazyInstance.53" = type { i64, [8 x i8] }
%struct.UIDNAInfo = type { i16, i8, i8, i32, i32, i32 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.std::__1::basic_string.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.7 }
%union.anon.7 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.GURL* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"*, %"class.std::__1::__compressed_pair.13" }
%"struct.base::OffsetAdjuster::Adjustment" = type { i64, i64, i64 }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.base::OffsetAdjuster::Adjustment"* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.8 }
%struct.anon.8 = type { %"struct.std::__1::__padding.9", i8 }
%"struct.std::__1::__padding.9" = type { [1 x i8] }
%"class.std::__1::allocator" = type { i8 }
%"class.url_formatter::(anonymous namespace)::NonHostComponentTransform" = type <{ %"class.url_formatter::(anonymous namespace)::AppendComponentTransform", i32, [4 x i8] }>
%"class.url_formatter::(anonymous namespace)::AppendComponentTransform" = type { i32 (...)** }
%"class.url_formatter::(anonymous namespace)::HostComponentTransform" = type <{ %"class.url_formatter::(anonymous namespace)::AppendComponentTransform", i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.18" = type opaque
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::__split_buffer" = type { %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"*, %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.14", %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::allocator.16"* }
%"class.std::__1::allocator.16" = type { i8 }
%"struct.url_formatter::IDNConversionResult" = type <{ %"class.std::__1::basic_string.4", i8, [7 x i8], %"struct.url_formatter::TopDomainEntry", i32, [4 x i8] }>
%"struct.url_formatter::TopDomainEntry" = type { %"class.std::__1::basic_string", i8, i32 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.23" }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::basic_string"* }
%"class.url_formatter::IDNSpoofChecker" = type { %struct.USpoofChecker*, %"class.icu_69::UnicodeSet", %"class.icu_69::UnicodeSet", %"class.icu_69::UnicodeSet", %"class.icu_69::UnicodeSet", %"class.icu_69::UnicodeSet", %"class.icu_69::UnicodeSet", %"class.icu_69::UnicodeSet", %"class.std::__1::unique_ptr.30", %"class.std::__1::vector.42" }
%struct.USpoofChecker = type opaque
%"class.icu_69::UnicodeSet" = type <{ %"class.icu_69::UnicodeFilter", i32*, i32, i32, i8, [7 x i8], %"class.icu_69::BMPSet"*, i32*, i32, [4 x i8], i16*, i32, [4 x i8], %"class.icu_69::UVector"*, %"class.icu_69::UnicodeSetStringSpan"*, [25 x i32], [4 x i8] }>
%"class.icu_69::UnicodeFilter" = type { %"class.icu_69::UnicodeFunctor", %"class.icu_69::UnicodeMatcher" }
%"class.icu_69::UnicodeFunctor" = type { %"class.icu_69::UObject" }
%"class.icu_69::UObject" = type { i32 (...)** }
%"class.icu_69::UnicodeMatcher" = type { i32 (...)** }
%"class.icu_69::BMPSet" = type opaque
%"class.icu_69::UVector" = type opaque
%"class.icu_69::UnicodeSetStringSpan" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %class.SkeletonGenerator* }
%class.SkeletonGenerator = type { %"class.icu_69::UnicodeSet", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.33", %struct.USpoofChecker* }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.icu_69::Transliterator"* }
%"class.icu_69::Transliterator" = type opaque
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { %"class.std::__1::unique_ptr.44"*, %"class.std::__1::unique_ptr.44"*, %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::unique_ptr.44" = type opaque
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.std::__1::unique_ptr.44"* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%struct.UIDNA = type opaque
%"struct.url_formatter::(anonymous namespace)::UIDNAWrapper" = type { %struct.UIDNA* }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertINS_11__wrap_iterIPKcEEEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueEE13_EnableIfImplINS7_IPDsEEEENS7_IPKDsEESC_SC_ = comdat any

$_ZNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_ = comdat any

$_ZNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS_9allocatorIS3_EEE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7reserveEm = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPDsEEEENSD_IPKDsEESA_SA_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__114__split_bufferIN4base14OffsetAdjuster10AdjustmentERNS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

@_ZN13url_formatter21kFormatUrlOmitNothingE = hidden local_unnamed_addr constant i32 0, align 4
@_ZN13url_formatter30kFormatUrlOmitUsernamePasswordE = hidden local_unnamed_addr constant i32 1, align 4
@_ZN13url_formatter18kFormatUrlOmitHTTPE = hidden local_unnamed_addr constant i32 2, align 4
@_ZN13url_formatter41kFormatUrlOmitTrailingSlashOnBareHostnameE = hidden local_unnamed_addr constant i32 4, align 4
@_ZN13url_formatter19kFormatUrlOmitHTTPSE = hidden local_unnamed_addr constant i32 8, align 4
@_ZN13url_formatter31kFormatUrlOmitTrivialSubdomainsE = hidden local_unnamed_addr constant i32 32, align 4
@_ZN13url_formatter23kFormatUrlTrimAfterHostE = hidden local_unnamed_addr constant i32 64, align 4
@_ZN13url_formatter24kFormatUrlOmitFileSchemeE = hidden local_unnamed_addr constant i32 128, align 4
@_ZN13url_formatter26kFormatUrlOmitMailToSchemeE = hidden local_unnamed_addr constant i32 256, align 4
@_ZN13url_formatter22kFormatUrlOmitDefaultsE = hidden local_unnamed_addr constant i32 7, align 4
@_ZZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEEE11kViewSource = internal constant [12 x i8] c"view-source\00", align 1
@_ZZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEEE16kViewSourceTwice = internal constant [25 x i8] c"view-source:view-source:\00", align 16
@_ZZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEEE4kFTP = internal constant [5 x i8] c"ftp.\00", align 1
@_ZN3url11kHttpSchemeE = external constant [0 x i8], align 1
@_ZN3url12kHttpsSchemeE = external constant [0 x i8], align 1
@_ZN3url11kFileSchemeE = external constant [0 x i8], align 1
@_ZN3url13kMailToSchemeE = external constant [0 x i8], align 1
@_ZN13url_formatter12_GLOBAL__N_14kWwwE = internal constant [5 x i8] c"www.\00", align 1
@_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE = internal global %"class.base::LazyInstance" zeroinitializer, align 8
@_ZZN13url_formatter12_GLOBAL__N_119FormatViewSourceUrlERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS8_9allocatorISC_EEEEE11kViewSource = internal unnamed_addr constant %"class.base::BasicStringPiece.50" { i16* getelementptr inbounds ([13 x i16], [13 x i16]* @.str.3, i32 0, i32 0), i64 12 }, align 8
@.str.3 = private unnamed_addr constant [13 x i16] [i16 118, i16 105, i16 101, i16 119, i16 45, i16 115, i16 111, i16 117, i16 114, i16 99, i16 101, i16 58, i16 0], align 2
@_ZTVN13url_formatter12_GLOBAL__N_125NonHostComponentTransformE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.url_formatter::(anonymous namespace)::AppendComponentTransform"*)* @_ZN13url_formatter12_GLOBAL__N_124AppendComponentTransformD2Ev to i8*), i8* bitcast (void (%"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"*)* @_ZN13url_formatter12_GLOBAL__N_125NonHostComponentTransformD0Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_string.4"*, %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"*, %"class.std::__1::basic_string"*, %"class.std::__1::vector"*)* @_ZNK13url_formatter12_GLOBAL__N_125NonHostComponentTransform7ExecuteERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS2_6vectorIN4base14OffsetAdjuster10AdjustmentENS6_ISE_EEEE to i8*)] }, align 8
@_ZTVN13url_formatter12_GLOBAL__N_122HostComponentTransformE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.url_formatter::(anonymous namespace)::AppendComponentTransform"*)* @_ZN13url_formatter12_GLOBAL__N_124AppendComponentTransformD2Ev to i8*), i8* bitcast (void (%"class.url_formatter::(anonymous namespace)::HostComponentTransform"*)* @_ZN13url_formatter12_GLOBAL__N_122HostComponentTransformD0Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_string.4"*, %"class.url_formatter::(anonymous namespace)::HostComponentTransform"*, %"class.std::__1::basic_string"*, %"class.std::__1::vector"*)* @_ZNK13url_formatter12_GLOBAL__N_122HostComponentTransform7ExecuteERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS2_6vectorIN4base14OffsetAdjuster10AdjustmentENS6_ISE_EEEE to i8*)] }, align 8
@_ZN3url17kFileSystemSchemeE = external constant [0 x i8], align 1
@_ZZN13url_formatter12_GLOBAL__N_124IDNToUnicodeOneComponentEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS2_IcNS4_IcEEEES6_bPNS3_12basic_stringIDsS5_NS3_9allocatorIDsEEEEE10kIdnPrefix = internal constant [5 x i16] [i16 120, i16 110, i16 45, i16 45, i16 0], align 2
@_ZN13url_formatter12_GLOBAL__N_17g_uidnaE = internal global %"class.base::LazyInstance.53" zeroinitializer, align 8
@__const._ZN13url_formatter12_GLOBAL__N_124IDNToUnicodeOneComponentEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS2_IcNS4_IcEEEES6_bPNS3_12basic_stringIDsS5_NS3_9allocatorIDsEEEE.info = private unnamed_addr constant %struct.UIDNAInfo { i16 16, i8 0, i8 0, i32 0, i32 0, i32 0 }, align 4
@.str.7 = private unnamed_addr constant [48 x i8] c"../../components/url_formatter/url_formatter.cc\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"U_SUCCESS(err)\00", align 1
@.str.9 = private unnamed_addr constant [39 x i8] c"failed to open UTS46 data with error: \00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c". If you see this error message in a test \00", align 1
@.str.11 = private unnamed_addr constant [48 x i8] c"environment your test environment likely lacks \00", align 1
@.str.12 = private unnamed_addr constant [42 x i8] c"the required data tables for libicu. See \00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"https://crbug.com/778929.\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter9FormatUrlERK4GURLjjPN3url6ParsedEPmS6_(%"class.std::__1::basic_string.4"* noalias sret, %class.GURL* dereferenceable(120), i32, i32, %"struct.url::Parsed"*, i64*, i64*) local_unnamed_addr #0 {
  %8 = alloca %"class.std::__1::vector", align 8
  %9 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #14
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #14
  %12 = bitcast %"class.std::__1::basic_string.4"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 -86, i64 24, i1 false)
  call void @_ZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEE(%"class.std::__1::basic_string.4"* sret %0, %class.GURL* dereferenceable(120) %1, i32 %2, i32 %3, %"struct.url::Parsed"* %4, i64* %5, %"class.std::__1::vector"* nonnull %8)
  %13 = icmp eq i64* %6, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = bitcast %"class.std::__1::basic_string.4"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %16, i64 0, i32 1, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  %20 = load i64, i64* %15, align 8
  %21 = zext i8 %18 to i64
  %22 = select i1 %19, i64 %20, i64 %21
  call void @_ZN4base14OffsetAdjuster12AdjustOffsetERKNSt3__16vectorINS0_10AdjustmentENS1_9allocatorIS3_EEEEPmm(%"class.std::__1::vector"* nonnull dereferenceable(24) %8, i64* nonnull %6, i64 %22) #14
  br label %23

23:                                               ; preds = %14, %7
  %24 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %10, align 8
  %25 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %24 to i64
  %28 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %11 to i64*
  store i64 %27, i64* %28, align 8
  %29 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %24 to i8*
  call void @_ZdlPv(i8* %29) #15
  br label %30

30:                                               ; preds = %23, %26
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEE(%"class.std::__1::basic_string.4"* noalias sret, %class.GURL* dereferenceable(120), i32, i32, %"struct.url::Parsed"*, i64*, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  %8 = alloca [2 x %"class.base::BasicStringPiece.50"], align 8
  %9 = alloca %"class.std::__1::basic_string.4", align 8
  %10 = alloca %class.GURL, align 8
  %11 = alloca %"class.std::__1::basic_string", align 8
  %12 = alloca %"class.std::__1::allocator", align 1
  %13 = alloca %"struct.url::Parsed", align 8
  %14 = alloca %"struct.url::Parsed", align 8
  %15 = alloca %"class.std::__1::basic_string.4", align 8
  %16 = alloca %"struct.base::OffsetAdjuster::Adjustment", align 8
  %17 = alloca %"struct.base::OffsetAdjuster::Adjustment", align 8
  %18 = alloca %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", align 8
  %19 = alloca %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", align 8
  %20 = alloca %"class.url_formatter::(anonymous namespace)::HostComponentTransform", align 8
  %21 = alloca %"struct.base::OffsetAdjuster::Adjustment", align 8
  %22 = alloca %"struct.base::OffsetAdjuster::Adjustment", align 8
  %23 = alloca %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", align 8
  %24 = alloca %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", align 8
  %25 = alloca %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", align 8
  %26 = alloca %"class.std::__1::basic_string", align 8
  %27 = alloca %"struct.base::OffsetAdjuster::Adjustment", align 8
  %28 = bitcast %"class.std::__1::vector"* %6 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %31 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = bitcast %"struct.url::Parsed"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %32) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 80, i1 false)
  call void @_ZN3url6ParsedC1Ev(%"struct.url::Parsed"* nonnull %13) #14
  %33 = icmp eq %"struct.url::Parsed"* %4, null
  br i1 %33, label %37, label %34

34:                                               ; preds = %7
  %35 = bitcast %"struct.url::Parsed"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %35) #14
  call void @_ZN3url6ParsedC1Ev(%"struct.url::Parsed"* nonnull %14) #14
  %36 = call dereferenceable(80) %"struct.url::Parsed"* @_ZN3url6ParsedaSERKS0_(%"struct.url::Parsed"* nonnull %4, %"struct.url::Parsed"* nonnull dereferenceable(80) %14) #14
  call void @_ZN3url6ParsedD1Ev(%"struct.url::Parsed"* nonnull %14) #14
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %35) #14
  br label %37

37:                                               ; preds = %7, %34
  %38 = phi %"struct.url::Parsed"* [ %4, %34 ], [ %13, %7 ]
  %39 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @_ZZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEEE11kViewSource, i64 0, i64 0), i64 11) #14
  %40 = bitcast %class.GURL* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br i1 %39, label %43, label %41

41:                                               ; preds = %37
  %42 = bitcast %class.GURL* %1 to i8*
  br label %184

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %40, i64 0, i32 1, i32 0
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  %47 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %class.GURL* %1 to i8*
  %50 = select i1 %46, i8* %48, i8* %49
  %51 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = zext i8 %45 to i64
  %54 = select i1 %46, i64 %52, i64 %53
  %55 = call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8* %50, i64 %54, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEEE16kViewSourceTwice, i64 0, i64 0), i64 24, i32 1) #14
  br i1 %55, label %184, label %56

56:                                               ; preds = %43
  %57 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 0
  %58 = and i32 %2, -233
  %59 = load i64, i64* %28, align 8, !noalias !2
  store i64 %59, i64* %31, align 8, !noalias !2
  %60 = bitcast [2 x %"class.base::BasicStringPiece.50"]* %8 to i8*
  %61 = bitcast %"class.std::__1::basic_string.4"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %60) #14, !noalias !2
  %62 = getelementptr inbounds [2 x %"class.base::BasicStringPiece.50"], [2 x %"class.base::BasicStringPiece.50"]* %8, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %60, i8* align 8 bitcast (%"class.base::BasicStringPiece.50"* @_ZZN13url_formatter12_GLOBAL__N_119FormatViewSourceUrlERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS8_9allocatorISC_EEEEE11kViewSource to i8*), i64 16, i1 false) #14, !noalias !2
  %63 = bitcast %"class.std::__1::basic_string.4"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %63) #14, !noalias !2
  %64 = bitcast %class.GURL* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %64) #14, !noalias !2
  %65 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #14, !noalias !2
  %66 = bitcast %class.GURL* %1 to %"class.std::__1::allocator"*
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %11, %"class.std::__1::basic_string"* dereferenceable(24) %57, i64 12, i64 -1, %"class.std::__1::allocator"* dereferenceable(1) %66) #14, !noalias !2
  %67 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %67, i64 0, i32 1, i32 0
  %69 = load i8, i8* %68, align 1, !noalias !2
  %70 = icmp slt i8 %69, 0
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8, !noalias !2
  %73 = select i1 %70, i8* %72, i8* %65
  %74 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %75 = load i64, i64* %74, align 8, !noalias !2
  %76 = zext i8 %69 to i64
  %77 = select i1 %70, i64 %75, i64 %76
  call void @_ZN4GURLC1EN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* nonnull %10, i8* %73, i64 %77) #14, !noalias !2
  call void @_ZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEE(%"class.std::__1::basic_string.4"* nonnull sret %9, %class.GURL* nonnull dereferenceable(120) %10, i32 %58, i32 %3, %"struct.url::Parsed"* nonnull %38, i64* %5, %"class.std::__1::vector"* %6) #14, !noalias !2
  %78 = getelementptr inbounds [2 x %"class.base::BasicStringPiece.50"], [2 x %"class.base::BasicStringPiece.50"]* %8, i64 0, i64 1, i32 0
  %79 = bitcast %"class.std::__1::basic_string.4"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %80 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %79, i64 0, i32 1, i32 1
  %81 = load i8, i8* %80, align 1, !noalias !2
  %82 = icmp slt i8 %81, 0
  %83 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load i16*, i16** %83, align 8, !noalias !2
  %85 = bitcast %"class.std::__1::basic_string.4"* %9 to i16*
  %86 = select i1 %82, i16* %84, i16* %85
  store i16* %86, i16** %78, align 8, !noalias !2
  %87 = getelementptr inbounds [2 x %"class.base::BasicStringPiece.50"], [2 x %"class.base::BasicStringPiece.50"]* %8, i64 0, i64 1, i32 1
  %88 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %89 = load i64, i64* %88, align 8, !noalias !2
  %90 = zext i8 %81 to i64
  %91 = select i1 %82, i64 %89, i64 %90
  store i64 %91, i64* %87, align 8, !noalias !2
  call void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEELm18446744073709551615EEE(%"class.std::__1::basic_string.4"* sret %0, i64 2, %"class.base::BasicStringPiece.50"* nonnull %62) #14
  %92 = load i8, i8* %80, align 1, !noalias !2
  %93 = icmp slt i8 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %56
  %95 = bitcast %"class.std::__1::basic_string.4"* %9 to i8**
  %96 = load i8*, i8** %95, align 8, !noalias !2
  call void @_ZdlPv(i8* %96) #15
  br label %97

97:                                               ; preds = %94, %56
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %10) #14
  %98 = load i8, i8* %68, align 1, !noalias !2
  %99 = icmp slt i8 %98, 0
  br i1 %99, label %100, label %102

100:                                              ; preds = %97
  %101 = load i8*, i8** %71, align 8, !noalias !2
  call void @_ZdlPv(i8* %101) #15
  br label %102

102:                                              ; preds = %100, %97
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #14, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %64) #14, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %63) #14, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %60) #14, !noalias !2
  %103 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %104 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %103, align 8, !noalias !2
  %105 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %30, align 8, !noalias !2
  %106 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %104, %105
  br i1 %106, label %107, label %111

107:                                              ; preds = %111, %102
  %108 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 0, i32 1
  %109 = load i32, i32* %108, align 4, !noalias !2
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %118, label %120

111:                                              ; preds = %102, %111
  %112 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %116, %111 ], [ %104, %102 ]
  %113 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %112, i64 0, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = add i64 %114, 12
  store i64 %115, i64* %113, align 8
  %116 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %112, i64 1
  %117 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %116, %105
  br i1 %117, label %107, label %111

118:                                              ; preds = %107
  %119 = add nuw i32 %109, 12
  br label %122

120:                                              ; preds = %107
  %121 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 0, i32 0
  store i32 0, i32* %121, align 8, !noalias !2
  br label %122

122:                                              ; preds = %120, %118
  %123 = phi i32 [ 11, %120 ], [ %119, %118 ]
  store i32 %123, i32* %108, align 4, !noalias !2
  %124 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 1, i32 1
  %125 = load i32, i32* %124, align 4, !noalias !2
  %126 = icmp eq i32 %125, -1
  br i1 %126, label %131, label %127

127:                                              ; preds = %122
  %128 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 1, i32 0
  %129 = load i32, i32* %128, align 4, !noalias !2
  %130 = add nsw i32 %129, 12
  store i32 %130, i32* %128, align 4, !noalias !2
  br label %131

131:                                              ; preds = %127, %122
  %132 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 2, i32 1
  %133 = load i32, i32* %132, align 4, !noalias !2
  %134 = icmp eq i32 %133, -1
  br i1 %134, label %139, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 2, i32 0
  %137 = load i32, i32* %136, align 4, !noalias !2
  %138 = add nsw i32 %137, 12
  store i32 %138, i32* %136, align 4, !noalias !2
  br label %139

139:                                              ; preds = %135, %131
  %140 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 3, i32 1
  %141 = load i32, i32* %140, align 4, !noalias !2
  %142 = icmp eq i32 %141, -1
  br i1 %142, label %147, label %143

143:                                              ; preds = %139
  %144 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 3, i32 0
  %145 = load i32, i32* %144, align 4, !noalias !2
  %146 = add nsw i32 %145, 12
  store i32 %146, i32* %144, align 4, !noalias !2
  br label %147

147:                                              ; preds = %143, %139
  %148 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 4, i32 1
  %149 = load i32, i32* %148, align 4, !noalias !2
  %150 = icmp eq i32 %149, -1
  br i1 %150, label %155, label %151

151:                                              ; preds = %147
  %152 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 4, i32 0
  %153 = load i32, i32* %152, align 4, !noalias !2
  %154 = add nsw i32 %153, 12
  store i32 %154, i32* %152, align 4, !noalias !2
  br label %155

155:                                              ; preds = %151, %147
  %156 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 5, i32 1
  %157 = load i32, i32* %156, align 4, !noalias !2
  %158 = icmp eq i32 %157, -1
  br i1 %158, label %163, label %159

159:                                              ; preds = %155
  %160 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 5, i32 0
  %161 = load i32, i32* %160, align 4, !noalias !2
  %162 = add nsw i32 %161, 12
  store i32 %162, i32* %160, align 4, !noalias !2
  br label %163

163:                                              ; preds = %159, %155
  %164 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 6, i32 1
  %165 = load i32, i32* %164, align 4, !noalias !2
  %166 = icmp eq i32 %165, -1
  br i1 %166, label %171, label %167

167:                                              ; preds = %163
  %168 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 6, i32 0
  %169 = load i32, i32* %168, align 4, !noalias !2
  %170 = add nsw i32 %169, 12
  store i32 %170, i32* %168, align 4, !noalias !2
  br label %171

171:                                              ; preds = %167, %163
  %172 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 7, i32 1
  %173 = load i32, i32* %172, align 4, !noalias !2
  %174 = icmp eq i32 %173, -1
  br i1 %174, label %179, label %175

175:                                              ; preds = %171
  %176 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 7, i32 0
  %177 = load i32, i32* %176, align 4, !noalias !2
  %178 = add nsw i32 %177, 12
  store i32 %178, i32* %176, align 4, !noalias !2
  br label %179

179:                                              ; preds = %175, %171
  %180 = icmp eq i64* %5, null
  br i1 %180, label %1285, label %181

181:                                              ; preds = %179
  %182 = load i64, i64* %5, align 8, !noalias !2
  %183 = add i64 %182, 12
  store i64 %183, i64* %5, align 8, !noalias !2
  br label %1285

184:                                              ; preds = %41, %43
  %185 = phi i8* [ %42, %41 ], [ %49, %43 ]
  %186 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 0
  %187 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2
  %188 = call i32 @_ZNK3url6Parsed21CountCharactersBeforeENS0_13ComponentTypeEb(%"struct.url::Parsed"* %187, i32 1, i1 zeroext true) #14
  %189 = sext i32 %188 to i64
  %190 = bitcast %"class.std::__1::basic_string.4"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %190) #14
  %191 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %192 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %193 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %190, i8 0, i64 24, i1 false) #14
  %194 = bitcast %"class.std::__1::basic_string.4"* %15 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %195 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %194, i64 0, i32 1, i32 1
  %196 = bitcast %"class.std::__1::basic_string.4"* %15 to i16*
  %197 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %40, i64 0, i32 1, i32 0
  %198 = load i8, i8* %197, align 1
  %199 = icmp slt i8 %198, 0
  %200 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = load i8*, i8** %200, align 8
  %202 = select i1 %199, i8* %201, i8* %185
  %203 = getelementptr inbounds i8, i8* %202, i64 %189
  %204 = call i16* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertINS_11__wrap_iterIPKcEEEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueEE13_EnableIfImplINS7_IPDsEEEENS7_IPKDsEESC_SC_(%"class.std::__1::basic_string.4"* nonnull %15, i16* nonnull %196, i8* %202, i8* %203)
  %205 = bitcast %"struct.url::Parsed"* %187 to i64*
  %206 = bitcast %"struct.url::Parsed"* %38 to i64*
  %207 = load i64, i64* %205, align 4
  store i64 %207, i64* %206, align 8
  %208 = and i32 %2, 64
  %209 = icmp eq i32 %208, 0
  %210 = and i32 %2, 65
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %365, label %212

212:                                              ; preds = %184
  %213 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 1, i32 0
  %214 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> <i32 0, i32 -1, i32 0, i32 -1>, <4 x i32>* %214, align 4
  %215 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 1
  %216 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 1, i32 1
  %217 = load i32, i32* %216, align 4
  %218 = icmp sgt i32 %217, 0
  %219 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 2, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = icmp sgt i32 %220, 0
  br i1 %218, label %223, label %222

222:                                              ; preds = %212
  br i1 %221, label %293, label %443

223:                                              ; preds = %212
  br i1 %221, label %224, label %293

224:                                              ; preds = %223
  %225 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %225) #14
  %226 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %215, i64 0, i32 0
  %227 = load i32, i32* %226, align 8
  %228 = sext i32 %227 to i64
  %229 = add nuw i32 %217, 2
  %230 = add i32 %229, %220
  %231 = sext i32 %230 to i64
  call void @_ZN4base14OffsetAdjuster10AdjustmentC1Emmm(%"struct.base::OffsetAdjuster::Adjustment"* nonnull %16, i64 %228, i64 %231, i64 0) #14
  %232 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %30, align 8
  %233 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %234 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %233, align 8
  %235 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %232, %234
  %236 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %234 to i64
  br i1 %235, label %237, label %241

237:                                              ; preds = %224
  %238 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %232 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %238, i8* nonnull align 8 %225, i64 24, i1 false) #14
  %239 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %232, i64 1
  %240 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %239 to i64
  store i64 %240, i64* %31, align 8
  br label %292

241:                                              ; preds = %224
  %242 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %232 to i64
  %243 = load i64, i64* %28, align 8
  %244 = sub i64 %242, %243
  %245 = sdiv exact i64 %244, 24
  %246 = add nsw i64 %245, 1
  %247 = icmp ugt i64 %246, 768614336404564650
  br i1 %247, label %248, label %250

248:                                              ; preds = %241
  %249 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %249) #16
  unreachable

250:                                              ; preds = %241
  %251 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %233 to i64*
  %252 = sub i64 %236, %243
  %253 = sdiv exact i64 %252, 24
  %254 = icmp ult i64 %253, 384307168202282325
  br i1 %254, label %255, label %260

255:                                              ; preds = %250
  %256 = shl nsw i64 %253, 1
  %257 = icmp ult i64 %256, %246
  %258 = select i1 %257, i64 %246, i64 %256
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %265, label %260

260:                                              ; preds = %255, %250
  %261 = phi i64 [ %258, %255 ], [ 768614336404564650, %250 ]
  %262 = mul i64 %261, 24
  %263 = call i8* @_Znwm(i64 %262) #15
  %264 = bitcast i8* %263 to %"struct.base::OffsetAdjuster::Adjustment"*
  br label %265

265:                                              ; preds = %260, %255
  %266 = phi i64 [ %261, %260 ], [ 0, %255 ]
  %267 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %264, %260 ], [ null, %255 ]
  %268 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %267, i64 %245
  %269 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %267, i64 %266
  %270 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %269 to i64
  %271 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %268 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %271, i8* nonnull align 8 %225, i64 24, i1 false) #14
  %272 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %268, i64 1
  %273 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %272 to i64
  %274 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %275 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %274, align 8
  %276 = load i64, i64* %31, align 8
  %277 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %275 to i64
  %278 = sub i64 %276, %277
  %279 = sdiv exact i64 %278, -24
  %280 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %268, i64 %279
  %281 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %280 to i64
  %282 = icmp sgt i64 %278, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %265
  %284 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %280 to i8*
  %285 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %275 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %284, i8* align 8 %285, i64 %278, i1 false) #14
  %286 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %274, align 8
  br label %287

287:                                              ; preds = %283, %265
  %288 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %275, %265 ], [ %286, %283 ]
  store i64 %281, i64* %28, align 8
  store i64 %273, i64* %31, align 8
  store i64 %270, i64* %251, align 8
  %289 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %288 to i8*
  call void @_ZdlPv(i8* %291) #15
  br label %292

292:                                              ; preds = %237, %287, %290
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %225) #14
  br label %443

293:                                              ; preds = %222, %223
  %294 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 2
  %295 = select i1 %218, %"struct.url::Component"* %215, %"struct.url::Component"* %294
  %296 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %296) #14
  %297 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %295, i64 0, i32 0
  %298 = load i32, i32* %297, align 4
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %295, i64 0, i32 1
  %301 = load i32, i32* %300, align 4
  %302 = add nsw i32 %301, 1
  %303 = sext i32 %302 to i64
  call void @_ZN4base14OffsetAdjuster10AdjustmentC1Emmm(%"struct.base::OffsetAdjuster::Adjustment"* nonnull %17, i64 %299, i64 %303, i64 0) #14
  %304 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %30, align 8
  %305 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %306 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %305, align 8
  %307 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %304, %306
  %308 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %306 to i64
  br i1 %307, label %309, label %313

309:                                              ; preds = %293
  %310 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %304 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %310, i8* nonnull align 8 %296, i64 24, i1 false) #14
  %311 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %304, i64 1
  %312 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %311 to i64
  store i64 %312, i64* %31, align 8
  br label %364

313:                                              ; preds = %293
  %314 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %304 to i64
  %315 = load i64, i64* %28, align 8
  %316 = sub i64 %314, %315
  %317 = sdiv exact i64 %316, 24
  %318 = add nsw i64 %317, 1
  %319 = icmp ugt i64 %318, 768614336404564650
  br i1 %319, label %320, label %322

320:                                              ; preds = %313
  %321 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %321) #16
  unreachable

322:                                              ; preds = %313
  %323 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %305 to i64*
  %324 = sub i64 %308, %315
  %325 = sdiv exact i64 %324, 24
  %326 = icmp ult i64 %325, 384307168202282325
  br i1 %326, label %327, label %332

327:                                              ; preds = %322
  %328 = shl nsw i64 %325, 1
  %329 = icmp ult i64 %328, %318
  %330 = select i1 %329, i64 %318, i64 %328
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %337, label %332

332:                                              ; preds = %327, %322
  %333 = phi i64 [ %330, %327 ], [ 768614336404564650, %322 ]
  %334 = mul i64 %333, 24
  %335 = call i8* @_Znwm(i64 %334) #15
  %336 = bitcast i8* %335 to %"struct.base::OffsetAdjuster::Adjustment"*
  br label %337

337:                                              ; preds = %332, %327
  %338 = phi i64 [ %333, %332 ], [ 0, %327 ]
  %339 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %336, %332 ], [ null, %327 ]
  %340 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %339, i64 %317
  %341 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %339, i64 %338
  %342 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %341 to i64
  %343 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %340 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %343, i8* nonnull align 8 %296, i64 24, i1 false) #14
  %344 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %340, i64 1
  %345 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %344 to i64
  %346 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %347 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %346, align 8
  %348 = load i64, i64* %31, align 8
  %349 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %347 to i64
  %350 = sub i64 %348, %349
  %351 = sdiv exact i64 %350, -24
  %352 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %340, i64 %351
  %353 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %352 to i64
  %354 = icmp sgt i64 %350, 0
  br i1 %354, label %355, label %359

355:                                              ; preds = %337
  %356 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %352 to i8*
  %357 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %347 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %356, i8* align 8 %357, i64 %350, i1 false) #14
  %358 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %346, align 8
  br label %359

359:                                              ; preds = %355, %337
  %360 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %347, %337 ], [ %358, %355 ]
  store i64 %353, i64* %28, align 8
  store i64 %345, i64* %31, align 8
  store i64 %342, i64* %323, align 8
  %361 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %360, null
  br i1 %361, label %364, label %362

362:                                              ; preds = %359
  %363 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %360 to i8*
  call void @_ZdlPv(i8* %363) #15
  br label %364

364:                                              ; preds = %309, %359, %362
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %296) #14
  br label %443

365:                                              ; preds = %184
  %366 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 1
  %367 = bitcast %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %367) #14
  %368 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %18, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN13url_formatter12_GLOBAL__N_125NonHostComponentTransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %368, align 8
  %369 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %18, i64 0, i32 1
  store i32 %3, i32* %369, align 8
  %370 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %18, i64 0, i32 0
  %371 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 1
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_124AppendFormattedComponentERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3url9ComponentERKNS0_24AppendComponentTransformEPNS2_IDsNS3_IDsEENS5_IDsEEEEPSB_PNS1_6vectorIN4base14OffsetAdjuster10AdjustmentENS5_ISP_EEEE(%"class.std::__1::basic_string"* dereferenceable(24) %186, %"struct.url::Component"* dereferenceable(8) %366, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* nonnull dereferenceable(8) %370, %"class.std::__1::basic_string.4"* nonnull %15, %"struct.url::Component"* %371, %"class.std::__1::vector"* %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %367) #14
  %372 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 2
  %373 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 2, i32 1
  %374 = load i32, i32* %373, align 4
  %375 = icmp eq i32 %374, -1
  br i1 %375, label %404, label %376

376:                                              ; preds = %365
  %377 = load i8, i8* %195, align 1
  %378 = icmp slt i8 %377, 0
  br i1 %378, label %381, label %379

379:                                              ; preds = %376
  %380 = zext i8 %377 to i64
  br label %386

381:                                              ; preds = %376
  %382 = load i64, i64* %193, align 8
  %383 = and i64 %382, 9223372036854775807
  %384 = add nsw i64 %383, -1
  %385 = load i64, i64* %192, align 8
  br label %386

386:                                              ; preds = %381, %379
  %387 = phi i64 [ 10, %379 ], [ %384, %381 ]
  %388 = phi i64 [ %380, %379 ], [ %385, %381 ]
  %389 = icmp eq i64 %388, %387
  br i1 %389, label %390, label %393

390:                                              ; preds = %386
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* nonnull %15, i64 %387, i64 1, i64 %387, i64 %387, i64 0, i64 0) #14
  %391 = load i8, i8* %195, align 1
  %392 = icmp slt i8 %391, 0
  br i1 %392, label %397, label %394

393:                                              ; preds = %386
  br i1 %378, label %397, label %394

394:                                              ; preds = %393, %390
  %395 = trunc i64 %388 to i8
  %396 = add i8 %395, 1
  store i8 %396, i8* %195, align 1
  br label %400

397:                                              ; preds = %393, %390
  %398 = load i16*, i16** %191, align 8
  %399 = add i64 %388, 1
  store i64 %399, i64* %192, align 8
  br label %400

400:                                              ; preds = %394, %397
  %401 = phi i16* [ %196, %394 ], [ %398, %397 ]
  %402 = getelementptr inbounds i16, i16* %401, i64 %388
  store i16 58, i16* %402, align 2
  %403 = getelementptr inbounds i16, i16* %402, i64 1
  store i16 0, i16* %403, align 2
  br label %404

404:                                              ; preds = %365, %400
  %405 = bitcast %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %405) #14
  %406 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %19, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN13url_formatter12_GLOBAL__N_125NonHostComponentTransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %406, align 8
  %407 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %19, i64 0, i32 1
  store i32 %3, i32* %407, align 8
  %408 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %19, i64 0, i32 0
  %409 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 2
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_124AppendFormattedComponentERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3url9ComponentERKNS0_24AppendComponentTransformEPNS2_IDsNS3_IDsEENS5_IDsEEEEPSB_PNS1_6vectorIN4base14OffsetAdjuster10AdjustmentENS5_ISP_EEEE(%"class.std::__1::basic_string"* dereferenceable(24) %186, %"struct.url::Component"* dereferenceable(8) %372, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* nonnull dereferenceable(8) %408, %"class.std::__1::basic_string.4"* nonnull %15, %"struct.url::Component"* %409, %"class.std::__1::vector"* %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %405) #14
  %410 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 1, i32 1
  %411 = load i32, i32* %410, align 4
  %412 = load i32, i32* %373, align 4
  %413 = and i32 %412, %411
  %414 = icmp eq i32 %413, -1
  br i1 %414, label %443, label %415

415:                                              ; preds = %404
  %416 = load i8, i8* %195, align 1
  %417 = icmp slt i8 %416, 0
  br i1 %417, label %420, label %418

418:                                              ; preds = %415
  %419 = zext i8 %416 to i64
  br label %425

420:                                              ; preds = %415
  %421 = load i64, i64* %193, align 8
  %422 = and i64 %421, 9223372036854775807
  %423 = add nsw i64 %422, -1
  %424 = load i64, i64* %192, align 8
  br label %425

425:                                              ; preds = %420, %418
  %426 = phi i64 [ 10, %418 ], [ %423, %420 ]
  %427 = phi i64 [ %419, %418 ], [ %424, %420 ]
  %428 = icmp eq i64 %427, %426
  br i1 %428, label %429, label %432

429:                                              ; preds = %425
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* nonnull %15, i64 %426, i64 1, i64 %426, i64 %426, i64 0, i64 0) #14
  %430 = load i8, i8* %195, align 1
  %431 = icmp slt i8 %430, 0
  br i1 %431, label %436, label %433

432:                                              ; preds = %425
  br i1 %417, label %436, label %433

433:                                              ; preds = %432, %429
  %434 = trunc i64 %427 to i8
  %435 = add i8 %434, 1
  store i8 %435, i8* %195, align 1
  br label %439

436:                                              ; preds = %432, %429
  %437 = load i16*, i16** %191, align 8
  %438 = add i64 %427, 1
  store i64 %438, i64* %192, align 8
  br label %439

439:                                              ; preds = %433, %436
  %440 = phi i16* [ %196, %433 ], [ %437, %436 ]
  %441 = getelementptr inbounds i16, i16* %440, i64 %427
  store i16 64, i16* %441, align 2
  %442 = getelementptr inbounds i16, i16* %441, i64 1
  store i16 0, i16* %442, align 2
  br label %443

443:                                              ; preds = %404, %439, %222, %364, %292
  %444 = icmp ne i64* %5, null
  br i1 %444, label %445, label %451

445:                                              ; preds = %443
  %446 = load i8, i8* %195, align 1
  %447 = icmp slt i8 %446, 0
  %448 = load i64, i64* %192, align 8
  %449 = zext i8 %446 to i64
  %450 = select i1 %447, i64 %448, i64 %449
  store i64 %450, i64* %5, align 8
  br label %451

451:                                              ; preds = %445, %443
  %452 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 3
  %453 = bitcast %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %453) #14
  %454 = lshr i32 %2, 5
  %455 = trunc i32 %454 to i8
  %456 = and i8 %455, 1
  %457 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::HostComponentTransform", %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %20, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN13url_formatter12_GLOBAL__N_122HostComponentTransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %457, align 8
  %458 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::HostComponentTransform", %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %20, i64 0, i32 1
  store i8 %456, i8* %458, align 8
  %459 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::HostComponentTransform", %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %20, i64 0, i32 0
  %460 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 3
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_124AppendFormattedComponentERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3url9ComponentERKNS0_24AppendComponentTransformEPNS2_IDsNS3_IDsEENS5_IDsEEEEPSB_PNS1_6vectorIN4base14OffsetAdjuster10AdjustmentENS5_ISP_EEEE(%"class.std::__1::basic_string"* dereferenceable(24) %186, %"struct.url::Component"* dereferenceable(8) %452, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* nonnull dereferenceable(8) %459, %"class.std::__1::basic_string.4"* nonnull %15, %"struct.url::Component"* %460, %"class.std::__1::vector"* %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %453) #14
  %461 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 4, i32 1
  %462 = load i32, i32* %461, align 4
  %463 = icmp sgt i32 %462, 0
  br i1 %463, label %464, label %530

464:                                              ; preds = %451
  %465 = load i8, i8* %195, align 1
  %466 = icmp slt i8 %465, 0
  br i1 %466, label %469, label %467

467:                                              ; preds = %464
  %468 = zext i8 %465 to i64
  br label %474

469:                                              ; preds = %464
  %470 = load i64, i64* %193, align 8
  %471 = and i64 %470, 9223372036854775807
  %472 = add nsw i64 %471, -1
  %473 = load i64, i64* %192, align 8
  br label %474

474:                                              ; preds = %469, %467
  %475 = phi i64 [ 10, %467 ], [ %472, %469 ]
  %476 = phi i64 [ %468, %467 ], [ %473, %469 ]
  %477 = icmp eq i64 %476, %475
  br i1 %477, label %478, label %481

478:                                              ; preds = %474
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* nonnull %15, i64 %475, i64 1, i64 %475, i64 %475, i64 0, i64 0) #14
  %479 = load i8, i8* %195, align 1
  %480 = icmp slt i8 %479, 0
  br i1 %480, label %485, label %482

481:                                              ; preds = %474
  br i1 %466, label %485, label %482

482:                                              ; preds = %481, %478
  %483 = trunc i64 %476 to i8
  %484 = add i8 %483, 1
  store i8 %484, i8* %195, align 1
  br label %488

485:                                              ; preds = %481, %478
  %486 = load i16*, i16** %191, align 8
  %487 = add i64 %476, 1
  store i64 %487, i64* %192, align 8
  br label %488

488:                                              ; preds = %482, %485
  %489 = phi i16* [ %196, %482 ], [ %486, %485 ]
  %490 = getelementptr inbounds i16, i16* %489, i64 %476
  store i16 58, i16* %490, align 2
  %491 = getelementptr inbounds i16, i16* %490, i64 1
  store i16 0, i16* %491, align 2
  %492 = load i8, i8* %195, align 1
  %493 = icmp slt i8 %492, 0
  br i1 %493, label %494, label %499

494:                                              ; preds = %488
  %495 = load i64, i64* %192, align 8
  %496 = trunc i64 %495 to i32
  %497 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 4, i32 0
  store i32 %496, i32* %497, align 8
  %498 = load i16*, i16** %191, align 8
  br label %503

499:                                              ; preds = %488
  %500 = zext i8 %492 to i32
  %501 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 4, i32 0
  store i32 %500, i32* %501, align 8
  %502 = zext i8 %492 to i64
  br label %503

503:                                              ; preds = %494, %499
  %504 = phi i32* [ %497, %494 ], [ %501, %499 ]
  %505 = phi i16* [ %498, %494 ], [ %196, %499 ]
  %506 = phi i64 [ %495, %494 ], [ %502, %499 ]
  %507 = getelementptr inbounds i16, i16* %505, i64 %506
  %508 = load i8, i8* %197, align 1
  %509 = icmp slt i8 %508, 0
  %510 = load i8*, i8** %200, align 8
  %511 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 4, i32 0
  %512 = load i32, i32* %511, align 8
  %513 = sext i32 %512 to i64
  %514 = select i1 %509, i8* %510, i8* %185
  %515 = getelementptr inbounds i8, i8* %514, i64 %513
  %516 = select i1 %509, i8* %510, i8* %185
  %517 = load i32, i32* %461, align 4
  %518 = add nsw i32 %517, %512
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds i8, i8* %516, i64 %519
  %521 = call i16* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertINS_11__wrap_iterIPKcEEEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueEE13_EnableIfImplINS7_IPDsEEEENS7_IPKDsEESC_SC_(%"class.std::__1::basic_string.4"* nonnull %15, i16* %507, i8* %515, i8* %520)
  %522 = load i8, i8* %195, align 1
  %523 = icmp slt i8 %522, 0
  %524 = load i64, i64* %192, align 8
  %525 = zext i8 %522 to i64
  %526 = select i1 %523, i64 %524, i64 %525
  %527 = load i32, i32* %504, align 8
  %528 = trunc i64 %526 to i32
  %529 = sub i32 %528, %527
  br label %532

530:                                              ; preds = %451
  %531 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 4, i32 0
  store i32 0, i32* %531, align 4
  br label %532

532:                                              ; preds = %530, %503
  %533 = phi i32 [ -1, %530 ], [ %529, %503 ]
  %534 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 4, i32 1
  store i32 %533, i32* %534, align 4
  br i1 %209, label %630, label %535

535:                                              ; preds = %532
  %536 = call zeroext i1 @_ZNK4GURL10IsStandardEv(%class.GURL* %1) #14
  br i1 %536, label %537, label %630

537:                                              ; preds = %535
  %538 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0)) #14
  %539 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0), i64 %538) #14
  br i1 %539, label %630, label %540

540:                                              ; preds = %537
  %541 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0)) #14
  %542 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0), i64 %541) #14
  br i1 %542, label %630, label %543

543:                                              ; preds = %540
  %544 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 5, i32 1
  %545 = load i32, i32* %544, align 4
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 6, i32 1
  %548 = load i32, i32* %547, align 4
  %549 = icmp eq i32 %548, -1
  br i1 %549, label %554, label %550

550:                                              ; preds = %543
  %551 = add nuw nsw i32 %548, 1
  %552 = sext i32 %551 to i64
  %553 = add nsw i64 %552, %546
  br label %554

554:                                              ; preds = %543, %550
  %555 = phi i64 [ %553, %550 ], [ %546, %543 ]
  %556 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 7, i32 1
  %557 = load i32, i32* %556, align 4
  %558 = icmp eq i32 %557, -1
  br i1 %558, label %563, label %559

559:                                              ; preds = %554
  %560 = add nuw nsw i32 %557, 1
  %561 = sext i32 %560 to i64
  %562 = add nsw i64 %555, %561
  br label %563

563:                                              ; preds = %554, %559
  %564 = phi i64 [ %562, %559 ], [ %555, %554 ]
  %565 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %565) #14
  %566 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 5, i32 0
  %567 = load i32, i32* %566, align 8
  %568 = sext i32 %567 to i64
  call void @_ZN4base14OffsetAdjuster10AdjustmentC1Emmm(%"struct.base::OffsetAdjuster::Adjustment"* nonnull %21, i64 %568, i64 %564, i64 0) #14
  %569 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %30, align 8
  %570 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %571 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %570, align 8
  %572 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %569, %571
  %573 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %571 to i64
  br i1 %572, label %574, label %578

574:                                              ; preds = %563
  %575 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %569 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %575, i8* nonnull align 8 %565, i64 24, i1 false) #14
  %576 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %569, i64 1
  %577 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %576 to i64
  store i64 %577, i64* %31, align 8
  br label %629

578:                                              ; preds = %563
  %579 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %569 to i64
  %580 = load i64, i64* %28, align 8
  %581 = sub i64 %579, %580
  %582 = sdiv exact i64 %581, 24
  %583 = add nsw i64 %582, 1
  %584 = icmp ugt i64 %583, 768614336404564650
  br i1 %584, label %585, label %587

585:                                              ; preds = %578
  %586 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %586) #16
  unreachable

587:                                              ; preds = %578
  %588 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %570 to i64*
  %589 = sub i64 %573, %580
  %590 = sdiv exact i64 %589, 24
  %591 = icmp ult i64 %590, 384307168202282325
  br i1 %591, label %592, label %597

592:                                              ; preds = %587
  %593 = shl nsw i64 %590, 1
  %594 = icmp ult i64 %593, %583
  %595 = select i1 %594, i64 %583, i64 %593
  %596 = icmp eq i64 %595, 0
  br i1 %596, label %602, label %597

597:                                              ; preds = %592, %587
  %598 = phi i64 [ %595, %592 ], [ 768614336404564650, %587 ]
  %599 = mul i64 %598, 24
  %600 = call i8* @_Znwm(i64 %599) #15
  %601 = bitcast i8* %600 to %"struct.base::OffsetAdjuster::Adjustment"*
  br label %602

602:                                              ; preds = %597, %592
  %603 = phi i64 [ %598, %597 ], [ 0, %592 ]
  %604 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %601, %597 ], [ null, %592 ]
  %605 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %604, i64 %582
  %606 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %604, i64 %603
  %607 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %606 to i64
  %608 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %605 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %608, i8* nonnull align 8 %565, i64 24, i1 false) #14
  %609 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %605, i64 1
  %610 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %609 to i64
  %611 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %612 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %611, align 8
  %613 = load i64, i64* %31, align 8
  %614 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %612 to i64
  %615 = sub i64 %613, %614
  %616 = sdiv exact i64 %615, -24
  %617 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %605, i64 %616
  %618 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %617 to i64
  %619 = icmp sgt i64 %615, 0
  br i1 %619, label %620, label %624

620:                                              ; preds = %602
  %621 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %617 to i8*
  %622 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %612 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %621, i8* align 8 %622, i64 %615, i1 false) #14
  %623 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %611, align 8
  br label %624

624:                                              ; preds = %620, %602
  %625 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %612, %602 ], [ %623, %620 ]
  store i64 %618, i64* %28, align 8
  store i64 %610, i64* %31, align 8
  store i64 %607, i64* %588, align 8
  %626 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %625, null
  br i1 %626, label %629, label %627

627:                                              ; preds = %624
  %628 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %625 to i8*
  call void @_ZdlPv(i8* %628) #15
  br label %629

629:                                              ; preds = %574, %624, %627
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %565) #14
  br label %789

630:                                              ; preds = %532, %540, %537, %535
  %631 = and i32 %2, 4
  %632 = icmp eq i32 %631, 0
  br i1 %632, label %706, label %633

633:                                              ; preds = %630
  %634 = call zeroext i1 @_ZN13url_formatter21CanStripTrailingSlashERK4GURL(%class.GURL* dereferenceable(120) %1)
  br i1 %634, label %635, label %706

635:                                              ; preds = %633
  %636 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 5, i32 1
  %637 = load i32, i32* %636, align 4
  %638 = icmp sgt i32 %637, 0
  br i1 %638, label %639, label %789

639:                                              ; preds = %635
  %640 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %640) #14
  %641 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 5, i32 0
  %642 = load i32, i32* %641, align 8
  %643 = sext i32 %642 to i64
  %644 = sext i32 %637 to i64
  call void @_ZN4base14OffsetAdjuster10AdjustmentC1Emmm(%"struct.base::OffsetAdjuster::Adjustment"* nonnull %22, i64 %643, i64 %644, i64 0) #14
  %645 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %30, align 8
  %646 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %647 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %646, align 8
  %648 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %645, %647
  %649 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %647 to i64
  br i1 %648, label %650, label %654

650:                                              ; preds = %639
  %651 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %645 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %651, i8* nonnull align 8 %640, i64 24, i1 false) #14
  %652 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %645, i64 1
  %653 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %652 to i64
  store i64 %653, i64* %31, align 8
  br label %705

654:                                              ; preds = %639
  %655 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %645 to i64
  %656 = load i64, i64* %28, align 8
  %657 = sub i64 %655, %656
  %658 = sdiv exact i64 %657, 24
  %659 = add nsw i64 %658, 1
  %660 = icmp ugt i64 %659, 768614336404564650
  br i1 %660, label %661, label %663

661:                                              ; preds = %654
  %662 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %662) #16
  unreachable

663:                                              ; preds = %654
  %664 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %646 to i64*
  %665 = sub i64 %649, %656
  %666 = sdiv exact i64 %665, 24
  %667 = icmp ult i64 %666, 384307168202282325
  br i1 %667, label %668, label %673

668:                                              ; preds = %663
  %669 = shl nsw i64 %666, 1
  %670 = icmp ult i64 %669, %659
  %671 = select i1 %670, i64 %659, i64 %669
  %672 = icmp eq i64 %671, 0
  br i1 %672, label %678, label %673

673:                                              ; preds = %668, %663
  %674 = phi i64 [ %671, %668 ], [ 768614336404564650, %663 ]
  %675 = mul i64 %674, 24
  %676 = call i8* @_Znwm(i64 %675) #15
  %677 = bitcast i8* %676 to %"struct.base::OffsetAdjuster::Adjustment"*
  br label %678

678:                                              ; preds = %673, %668
  %679 = phi i64 [ %674, %673 ], [ 0, %668 ]
  %680 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %677, %673 ], [ null, %668 ]
  %681 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %680, i64 %658
  %682 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %680, i64 %679
  %683 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %682 to i64
  %684 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %681 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %684, i8* nonnull align 8 %640, i64 24, i1 false) #14
  %685 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %681, i64 1
  %686 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %685 to i64
  %687 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %688 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %687, align 8
  %689 = load i64, i64* %31, align 8
  %690 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %688 to i64
  %691 = sub i64 %689, %690
  %692 = sdiv exact i64 %691, -24
  %693 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %681, i64 %692
  %694 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %693 to i64
  %695 = icmp sgt i64 %691, 0
  br i1 %695, label %696, label %700

696:                                              ; preds = %678
  %697 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %693 to i8*
  %698 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %688 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %697, i8* align 8 %698, i64 %691, i1 false) #14
  %699 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %687, align 8
  br label %700

700:                                              ; preds = %696, %678
  %701 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %688, %678 ], [ %699, %696 ]
  store i64 %694, i64* %28, align 8
  store i64 %686, i64* %31, align 8
  store i64 %683, i64* %664, align 8
  %702 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %701, null
  br i1 %702, label %705, label %703

703:                                              ; preds = %700
  %704 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %701 to i8*
  call void @_ZdlPv(i8* %704) #15
  br label %705

705:                                              ; preds = %650, %700, %703
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %640) #14
  br label %789

706:                                              ; preds = %630, %633
  %707 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 5
  %708 = bitcast %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %708) #14
  %709 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %23, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN13url_formatter12_GLOBAL__N_125NonHostComponentTransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %709, align 8
  %710 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %23, i64 0, i32 1
  store i32 %3, i32* %710, align 8
  %711 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %23, i64 0, i32 0
  %712 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 5
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_124AppendFormattedComponentERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3url9ComponentERKNS0_24AppendComponentTransformEPNS2_IDsNS3_IDsEENS5_IDsEEEEPSB_PNS1_6vectorIN4base14OffsetAdjuster10AdjustmentENS5_ISP_EEEE(%"class.std::__1::basic_string"* dereferenceable(24) %186, %"struct.url::Component"* dereferenceable(8) %707, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* nonnull dereferenceable(8) %711, %"class.std::__1::basic_string.4"* nonnull %15, %"struct.url::Component"* %712, %"class.std::__1::vector"* %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %708) #14
  %713 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 6
  %714 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 6, i32 1
  %715 = load i32, i32* %714, align 4
  %716 = icmp eq i32 %715, -1
  br i1 %716, label %745, label %717

717:                                              ; preds = %706
  %718 = load i8, i8* %195, align 1
  %719 = icmp slt i8 %718, 0
  br i1 %719, label %722, label %720

720:                                              ; preds = %717
  %721 = zext i8 %718 to i64
  br label %727

722:                                              ; preds = %717
  %723 = load i64, i64* %193, align 8
  %724 = and i64 %723, 9223372036854775807
  %725 = add nsw i64 %724, -1
  %726 = load i64, i64* %192, align 8
  br label %727

727:                                              ; preds = %722, %720
  %728 = phi i64 [ 10, %720 ], [ %725, %722 ]
  %729 = phi i64 [ %721, %720 ], [ %726, %722 ]
  %730 = icmp eq i64 %729, %728
  br i1 %730, label %731, label %734

731:                                              ; preds = %727
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* nonnull %15, i64 %728, i64 1, i64 %728, i64 %728, i64 0, i64 0) #14
  %732 = load i8, i8* %195, align 1
  %733 = icmp slt i8 %732, 0
  br i1 %733, label %738, label %735

734:                                              ; preds = %727
  br i1 %719, label %738, label %735

735:                                              ; preds = %734, %731
  %736 = trunc i64 %729 to i8
  %737 = add i8 %736, 1
  store i8 %737, i8* %195, align 1
  br label %741

738:                                              ; preds = %734, %731
  %739 = load i16*, i16** %191, align 8
  %740 = add i64 %729, 1
  store i64 %740, i64* %192, align 8
  br label %741

741:                                              ; preds = %735, %738
  %742 = phi i16* [ %196, %735 ], [ %739, %738 ]
  %743 = getelementptr inbounds i16, i16* %742, i64 %729
  store i16 63, i16* %743, align 2
  %744 = getelementptr inbounds i16, i16* %743, i64 1
  store i16 0, i16* %744, align 2
  br label %745

745:                                              ; preds = %706, %741
  %746 = bitcast %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %746) #14
  %747 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %24, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN13url_formatter12_GLOBAL__N_125NonHostComponentTransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %747, align 8
  %748 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %24, i64 0, i32 1
  store i32 %3, i32* %748, align 8
  %749 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %24, i64 0, i32 0
  %750 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 6
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_124AppendFormattedComponentERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3url9ComponentERKNS0_24AppendComponentTransformEPNS2_IDsNS3_IDsEENS5_IDsEEEEPSB_PNS1_6vectorIN4base14OffsetAdjuster10AdjustmentENS5_ISP_EEEE(%"class.std::__1::basic_string"* dereferenceable(24) %186, %"struct.url::Component"* dereferenceable(8) %713, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* nonnull dereferenceable(8) %749, %"class.std::__1::basic_string.4"* nonnull %15, %"struct.url::Component"* %750, %"class.std::__1::vector"* %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %746) #14
  %751 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 7
  %752 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 7, i32 1
  %753 = load i32, i32* %752, align 4
  %754 = icmp eq i32 %753, -1
  br i1 %754, label %783, label %755

755:                                              ; preds = %745
  %756 = load i8, i8* %195, align 1
  %757 = icmp slt i8 %756, 0
  br i1 %757, label %760, label %758

758:                                              ; preds = %755
  %759 = zext i8 %756 to i64
  br label %765

760:                                              ; preds = %755
  %761 = load i64, i64* %193, align 8
  %762 = and i64 %761, 9223372036854775807
  %763 = add nsw i64 %762, -1
  %764 = load i64, i64* %192, align 8
  br label %765

765:                                              ; preds = %760, %758
  %766 = phi i64 [ 10, %758 ], [ %763, %760 ]
  %767 = phi i64 [ %759, %758 ], [ %764, %760 ]
  %768 = icmp eq i64 %767, %766
  br i1 %768, label %769, label %772

769:                                              ; preds = %765
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* nonnull %15, i64 %766, i64 1, i64 %766, i64 %766, i64 0, i64 0) #14
  %770 = load i8, i8* %195, align 1
  %771 = icmp slt i8 %770, 0
  br i1 %771, label %776, label %773

772:                                              ; preds = %765
  br i1 %757, label %776, label %773

773:                                              ; preds = %772, %769
  %774 = trunc i64 %767 to i8
  %775 = add i8 %774, 1
  store i8 %775, i8* %195, align 1
  br label %779

776:                                              ; preds = %772, %769
  %777 = load i16*, i16** %191, align 8
  %778 = add i64 %767, 1
  store i64 %778, i64* %192, align 8
  br label %779

779:                                              ; preds = %773, %776
  %780 = phi i16* [ %196, %773 ], [ %777, %776 ]
  %781 = getelementptr inbounds i16, i16* %780, i64 %767
  store i16 35, i16* %781, align 2
  %782 = getelementptr inbounds i16, i16* %781, i64 1
  store i16 0, i16* %782, align 2
  br label %783

783:                                              ; preds = %745, %779
  %784 = bitcast %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %784) #14
  %785 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %25, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN13url_formatter12_GLOBAL__N_125NonHostComponentTransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %785, align 8
  %786 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %25, i64 0, i32 1
  store i32 %3, i32* %786, align 8
  %787 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %25, i64 0, i32 0
  %788 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 7
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_124AppendFormattedComponentERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3url9ComponentERKNS0_24AppendComponentTransformEPNS2_IDsNS3_IDsEENS5_IDsEEEEPSB_PNS1_6vectorIN4base14OffsetAdjuster10AdjustmentENS5_ISP_EEEE(%"class.std::__1::basic_string"* dereferenceable(24) %186, %"struct.url::Component"* dereferenceable(8) %751, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* nonnull dereferenceable(8) %787, %"class.std::__1::basic_string.4"* nonnull %15, %"struct.url::Component"* %788, %"class.std::__1::vector"* %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %784) #14
  br label %789

789:                                              ; preds = %783, %705, %635, %629
  %790 = bitcast %"class.std::__1::basic_string"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %790) #14
  %791 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 3, i32 1
  %792 = load i32, i32* %791, align 4, !noalias !5
  %793 = icmp slt i32 %792, 1
  br i1 %793, label %794, label %796

794:                                              ; preds = %789
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %790, i8 0, i64 24, i1 false) #14, !alias.scope !5
  %795 = bitcast %"class.std::__1::basic_string"* %26 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %809

796:                                              ; preds = %789
  %797 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 3, i32 0
  %798 = load i32, i32* %797, align 4, !noalias !5
  %799 = sext i32 %798 to i64
  %800 = sext i32 %792 to i64
  %801 = getelementptr inbounds %"class.std::__1::allocator", %"class.std::__1::allocator"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %801) #14, !noalias !5
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %26, %"class.std::__1::basic_string"* dereferenceable(24) %186, i64 %799, i64 %800, %"class.std::__1::allocator"* nonnull dereferenceable(1) %12) #14
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %801) #14, !noalias !5
  %802 = bitcast %"class.std::__1::basic_string"* %26 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %803 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %802, i64 0, i32 1, i32 0
  %804 = load i8, i8* %803, align 1
  %805 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %806 = load i8*, i8** %805, align 8
  %807 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %808 = load i64, i64* %807, align 8
  br label %809

809:                                              ; preds = %794, %796
  %810 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %795, %794 ], [ %802, %796 ]
  %811 = phi i64 [ 0, %794 ], [ %808, %796 ]
  %812 = phi i8* [ null, %794 ], [ %806, %796 ]
  %813 = phi i8 [ 0, %794 ], [ %804, %796 ]
  %814 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %810, i64 0, i32 1, i32 0
  %815 = icmp slt i8 %813, 0
  %816 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %817 = select i1 %815, i8* %812, i8* %790
  %818 = zext i8 %813 to i64
  %819 = select i1 %815, i64 %811, i64 %818
  %820 = call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8* %817, i64 %819, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEEE4kFTP, i64 0, i64 0), i64 4, i32 0) #14
  br i1 %820, label %1271, label %821

821:                                              ; preds = %809
  %822 = and i32 %2, 2
  %823 = icmp eq i32 %822, 0
  br i1 %823, label %827, label %824

824:                                              ; preds = %821
  %825 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kHttpSchemeE, i64 0, i64 0)) #14
  %826 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kHttpSchemeE, i64 0, i64 0), i64 %825) #14
  br i1 %826, label %860, label %827

827:                                              ; preds = %821, %824
  %828 = and i32 %2, 8
  %829 = icmp eq i32 %828, 0
  br i1 %829, label %833, label %830

830:                                              ; preds = %827
  %831 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url12kHttpsSchemeE, i64 0, i64 0)) #14
  %832 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url12kHttpsSchemeE, i64 0, i64 0), i64 %831) #14
  br i1 %832, label %855, label %833

833:                                              ; preds = %827, %830
  %834 = trunc i32 %2 to i8
  %835 = icmp slt i8 %834, 0
  br i1 %835, label %836, label %839

836:                                              ; preds = %833
  %837 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0)) #14
  %838 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0), i64 %837) #14
  br i1 %838, label %850, label %839

839:                                              ; preds = %836, %833
  %840 = and i32 %2, 256
  %841 = icmp eq i32 %840, 0
  br i1 %841, label %1277, label %842

842:                                              ; preds = %839
  %843 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url13kMailToSchemeE, i64 0, i64 0)) #14
  %844 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url13kMailToSchemeE, i64 0, i64 0), i64 %843) #14
  %845 = load i8, i8* %814, align 1
  %846 = icmp slt i8 %845, 0
  br i1 %846, label %847, label %849

847:                                              ; preds = %842
  %848 = load i8*, i8** %816, align 8
  call void @_ZdlPv(i8* %848) #15
  br label %849

849:                                              ; preds = %842, %847
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %790) #14
  br i1 %844, label %866, label %1283

850:                                              ; preds = %836
  %851 = load i8, i8* %814, align 1
  %852 = icmp slt i8 %851, 0
  br i1 %852, label %853, label %865

853:                                              ; preds = %850
  %854 = load i8*, i8** %816, align 8
  call void @_ZdlPv(i8* %854) #15
  br label %865

855:                                              ; preds = %830
  %856 = load i8, i8* %814, align 1
  %857 = icmp slt i8 %856, 0
  br i1 %857, label %858, label %865

858:                                              ; preds = %855
  %859 = load i8*, i8** %816, align 8
  call void @_ZdlPv(i8* %859) #15
  br label %865

860:                                              ; preds = %824
  %861 = load i8, i8* %814, align 1
  %862 = icmp slt i8 %861, 0
  br i1 %862, label %863, label %865

863:                                              ; preds = %860
  %864 = load i8*, i8** %816, align 8
  call void @_ZdlPv(i8* %864) #15
  br label %865

865:                                              ; preds = %863, %860, %858, %855, %853, %850
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %790) #14
  br label %866

866:                                              ; preds = %865, %849
  %867 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url13kMailToSchemeE, i64 0, i64 0)) #14
  %868 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url13kMailToSchemeE, i64 0, i64 0), i64 %867) #14
  %869 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 0, i32 1
  %870 = load i32, i32* %869, align 4
  %871 = select i1 %868, i32 1, i32 3
  %872 = add nsw i32 %870, %871
  %873 = load i8, i8* %195, align 1
  %874 = icmp slt i8 %873, 0
  switch i64 %189, label %879 [
    i64 -1, label %875
    i64 0, label %1206
  ]

875:                                              ; preds = %866
  br i1 %874, label %876, label %878

876:                                              ; preds = %875
  %877 = load i16*, i16** %191, align 8
  store i16 0, i16* %877, align 2
  store i64 0, i64* %192, align 8
  br label %1206

878:                                              ; preds = %875
  store i16 0, i16* %196, align 8
  store i8 0, i8* %195, align 1
  br label %1206

879:                                              ; preds = %866
  %880 = load i64, i64* %192, align 8
  %881 = load i16*, i16** %191, align 8
  %882 = zext i8 %873 to i64
  %883 = select i1 %874, i64 %880, i64 %882
  %884 = select i1 %874, i16* %881, i16* %196
  %885 = icmp ult i64 %883, %189
  %886 = select i1 %885, i64 %883, i64 %189
  %887 = sub i64 %883, %886
  %888 = icmp eq i64 %887, 0
  br i1 %888, label %1198, label %889

889:                                              ; preds = %879
  %890 = icmp sgt i64 %886, 0
  br i1 %890, label %891, label %1035

891:                                              ; preds = %889
  %892 = getelementptr inbounds i16, i16* %884, i64 %886
  %893 = icmp ult i64 %887, 16
  br i1 %893, label %982, label %894

894:                                              ; preds = %891
  %895 = getelementptr i16, i16* %884, i64 %887
  %896 = getelementptr i16, i16* %884, i64 %883
  %897 = icmp ult i16* %884, %896
  %898 = icmp ult i16* %892, %895
  %899 = and i1 %897, %898
  br i1 %899, label %982, label %900

900:                                              ; preds = %894
  %901 = and i64 %887, -16
  %902 = sub i64 %887, %901
  %903 = getelementptr i16, i16* %892, i64 %901
  %904 = getelementptr i16, i16* %884, i64 %901
  %905 = add i64 %901, -16
  %906 = lshr exact i64 %905, 4
  %907 = add nuw nsw i64 %906, 1
  %908 = and i64 %907, 3
  %909 = icmp ult i64 %905, 48
  br i1 %909, label %961, label %910

910:                                              ; preds = %900
  %911 = sub nsw i64 %907, %908
  br label %912

912:                                              ; preds = %912, %910
  %913 = phi i64 [ 0, %910 ], [ %958, %912 ]
  %914 = phi i64 [ %911, %910 ], [ %959, %912 ]
  %915 = getelementptr i16, i16* %892, i64 %913
  %916 = getelementptr i16, i16* %884, i64 %913
  %917 = bitcast i16* %915 to <8 x i16>*
  %918 = load <8 x i16>, <8 x i16>* %917, align 2, !alias.scope !10
  %919 = getelementptr i16, i16* %915, i64 8
  %920 = bitcast i16* %919 to <8 x i16>*
  %921 = load <8 x i16>, <8 x i16>* %920, align 2, !alias.scope !10
  %922 = bitcast i16* %916 to <8 x i16>*
  store <8 x i16> %918, <8 x i16>* %922, align 2, !alias.scope !13, !noalias !10
  %923 = getelementptr i16, i16* %916, i64 8
  %924 = bitcast i16* %923 to <8 x i16>*
  store <8 x i16> %921, <8 x i16>* %924, align 2, !alias.scope !13, !noalias !10
  %925 = or i64 %913, 16
  %926 = getelementptr i16, i16* %892, i64 %925
  %927 = getelementptr i16, i16* %884, i64 %925
  %928 = bitcast i16* %926 to <8 x i16>*
  %929 = load <8 x i16>, <8 x i16>* %928, align 2, !alias.scope !10
  %930 = getelementptr i16, i16* %926, i64 8
  %931 = bitcast i16* %930 to <8 x i16>*
  %932 = load <8 x i16>, <8 x i16>* %931, align 2, !alias.scope !10
  %933 = bitcast i16* %927 to <8 x i16>*
  store <8 x i16> %929, <8 x i16>* %933, align 2, !alias.scope !13, !noalias !10
  %934 = getelementptr i16, i16* %927, i64 8
  %935 = bitcast i16* %934 to <8 x i16>*
  store <8 x i16> %932, <8 x i16>* %935, align 2, !alias.scope !13, !noalias !10
  %936 = or i64 %913, 32
  %937 = getelementptr i16, i16* %892, i64 %936
  %938 = getelementptr i16, i16* %884, i64 %936
  %939 = bitcast i16* %937 to <8 x i16>*
  %940 = load <8 x i16>, <8 x i16>* %939, align 2, !alias.scope !10
  %941 = getelementptr i16, i16* %937, i64 8
  %942 = bitcast i16* %941 to <8 x i16>*
  %943 = load <8 x i16>, <8 x i16>* %942, align 2, !alias.scope !10
  %944 = bitcast i16* %938 to <8 x i16>*
  store <8 x i16> %940, <8 x i16>* %944, align 2, !alias.scope !13, !noalias !10
  %945 = getelementptr i16, i16* %938, i64 8
  %946 = bitcast i16* %945 to <8 x i16>*
  store <8 x i16> %943, <8 x i16>* %946, align 2, !alias.scope !13, !noalias !10
  %947 = or i64 %913, 48
  %948 = getelementptr i16, i16* %892, i64 %947
  %949 = getelementptr i16, i16* %884, i64 %947
  %950 = bitcast i16* %948 to <8 x i16>*
  %951 = load <8 x i16>, <8 x i16>* %950, align 2, !alias.scope !10
  %952 = getelementptr i16, i16* %948, i64 8
  %953 = bitcast i16* %952 to <8 x i16>*
  %954 = load <8 x i16>, <8 x i16>* %953, align 2, !alias.scope !10
  %955 = bitcast i16* %949 to <8 x i16>*
  store <8 x i16> %951, <8 x i16>* %955, align 2, !alias.scope !13, !noalias !10
  %956 = getelementptr i16, i16* %949, i64 8
  %957 = bitcast i16* %956 to <8 x i16>*
  store <8 x i16> %954, <8 x i16>* %957, align 2, !alias.scope !13, !noalias !10
  %958 = add i64 %913, 64
  %959 = add i64 %914, -4
  %960 = icmp eq i64 %959, 0
  br i1 %960, label %961, label %912, !llvm.loop !15

961:                                              ; preds = %912, %900
  %962 = phi i64 [ 0, %900 ], [ %958, %912 ]
  %963 = icmp eq i64 %908, 0
  br i1 %963, label %980, label %964

964:                                              ; preds = %961, %964
  %965 = phi i64 [ %977, %964 ], [ %962, %961 ]
  %966 = phi i64 [ %978, %964 ], [ %908, %961 ]
  %967 = getelementptr i16, i16* %892, i64 %965
  %968 = getelementptr i16, i16* %884, i64 %965
  %969 = bitcast i16* %967 to <8 x i16>*
  %970 = load <8 x i16>, <8 x i16>* %969, align 2, !alias.scope !10
  %971 = getelementptr i16, i16* %967, i64 8
  %972 = bitcast i16* %971 to <8 x i16>*
  %973 = load <8 x i16>, <8 x i16>* %972, align 2, !alias.scope !10
  %974 = bitcast i16* %968 to <8 x i16>*
  store <8 x i16> %970, <8 x i16>* %974, align 2, !alias.scope !13, !noalias !10
  %975 = getelementptr i16, i16* %968, i64 8
  %976 = bitcast i16* %975 to <8 x i16>*
  store <8 x i16> %973, <8 x i16>* %976, align 2, !alias.scope !13, !noalias !10
  %977 = add i64 %965, 16
  %978 = add i64 %966, -1
  %979 = icmp eq i64 %978, 0
  br i1 %979, label %980, label %964, !llvm.loop !17

980:                                              ; preds = %964, %961
  %981 = icmp eq i64 %887, %901
  br i1 %981, label %1198, label %982

982:                                              ; preds = %980, %894, %891
  %983 = phi i64 [ %887, %894 ], [ %887, %891 ], [ %902, %980 ]
  %984 = phi i16* [ %892, %894 ], [ %892, %891 ], [ %903, %980 ]
  %985 = phi i16* [ %884, %894 ], [ %884, %891 ], [ %904, %980 ]
  %986 = add i64 %983, -1
  %987 = and i64 %983, 7
  %988 = icmp eq i64 %987, 0
  br i1 %988, label %1000, label %989

989:                                              ; preds = %982, %989
  %990 = phi i64 [ %995, %989 ], [ %983, %982 ]
  %991 = phi i16* [ %997, %989 ], [ %984, %982 ]
  %992 = phi i16* [ %996, %989 ], [ %985, %982 ]
  %993 = phi i64 [ %998, %989 ], [ %987, %982 ]
  %994 = load i16, i16* %991, align 2
  store i16 %994, i16* %992, align 2
  %995 = add i64 %990, -1
  %996 = getelementptr inbounds i16, i16* %992, i64 1
  %997 = getelementptr inbounds i16, i16* %991, i64 1
  %998 = add i64 %993, -1
  %999 = icmp eq i64 %998, 0
  br i1 %999, label %1000, label %989, !llvm.loop !19

1000:                                             ; preds = %989, %982
  %1001 = phi i64 [ %983, %982 ], [ %995, %989 ]
  %1002 = phi i16* [ %984, %982 ], [ %997, %989 ]
  %1003 = phi i16* [ %985, %982 ], [ %996, %989 ]
  %1004 = icmp ult i64 %986, 7
  br i1 %1004, label %1198, label %1005

1005:                                             ; preds = %1000, %1005
  %1006 = phi i64 [ %1031, %1005 ], [ %1001, %1000 ]
  %1007 = phi i16* [ %1033, %1005 ], [ %1002, %1000 ]
  %1008 = phi i16* [ %1032, %1005 ], [ %1003, %1000 ]
  %1009 = load i16, i16* %1007, align 2
  store i16 %1009, i16* %1008, align 2
  %1010 = getelementptr inbounds i16, i16* %1008, i64 1
  %1011 = getelementptr inbounds i16, i16* %1007, i64 1
  %1012 = load i16, i16* %1011, align 2
  store i16 %1012, i16* %1010, align 2
  %1013 = getelementptr inbounds i16, i16* %1008, i64 2
  %1014 = getelementptr inbounds i16, i16* %1007, i64 2
  %1015 = load i16, i16* %1014, align 2
  store i16 %1015, i16* %1013, align 2
  %1016 = getelementptr inbounds i16, i16* %1008, i64 3
  %1017 = getelementptr inbounds i16, i16* %1007, i64 3
  %1018 = load i16, i16* %1017, align 2
  store i16 %1018, i16* %1016, align 2
  %1019 = getelementptr inbounds i16, i16* %1008, i64 4
  %1020 = getelementptr inbounds i16, i16* %1007, i64 4
  %1021 = load i16, i16* %1020, align 2
  store i16 %1021, i16* %1019, align 2
  %1022 = getelementptr inbounds i16, i16* %1008, i64 5
  %1023 = getelementptr inbounds i16, i16* %1007, i64 5
  %1024 = load i16, i16* %1023, align 2
  store i16 %1024, i16* %1022, align 2
  %1025 = getelementptr inbounds i16, i16* %1008, i64 6
  %1026 = getelementptr inbounds i16, i16* %1007, i64 6
  %1027 = load i16, i16* %1026, align 2
  store i16 %1027, i16* %1025, align 2
  %1028 = getelementptr inbounds i16, i16* %1008, i64 7
  %1029 = getelementptr inbounds i16, i16* %1007, i64 7
  %1030 = load i16, i16* %1029, align 2
  store i16 %1030, i16* %1028, align 2
  %1031 = add i64 %1006, -8
  %1032 = getelementptr inbounds i16, i16* %1008, i64 8
  %1033 = getelementptr inbounds i16, i16* %1007, i64 8
  %1034 = icmp eq i64 %1031, 0
  br i1 %1034, label %1198, label %1005, !llvm.loop !20

1035:                                             ; preds = %889
  %1036 = icmp slt i64 %886, 0
  br i1 %1036, label %1037, label %1198

1037:                                             ; preds = %1035
  %1038 = getelementptr inbounds i16, i16* %884, i64 %883
  %1039 = getelementptr inbounds i16, i16* %884, i64 %887
  %1040 = icmp ult i64 %887, 16
  br i1 %1040, label %1145, label %1041

1041:                                             ; preds = %1037
  %1042 = xor i64 %886, -1
  %1043 = add i64 %883, %1042
  %1044 = getelementptr i16, i16* %884, i64 %1043
  %1045 = ptrtoint i16* %1044 to i64
  %1046 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1043, i64 2)
  %1047 = extractvalue { i64, i1 } %1046, 0
  %1048 = extractvalue { i64, i1 } %1046, 1
  %1049 = icmp ugt i64 %1047, %1045
  %1050 = or i1 %1049, %1048
  %1051 = add i64 %883, -1
  %1052 = getelementptr i16, i16* %884, i64 %1051
  %1053 = ptrtoint i16* %1052 to i64
  %1054 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1043, i64 2)
  %1055 = extractvalue { i64, i1 } %1054, 0
  %1056 = extractvalue { i64, i1 } %1054, 1
  %1057 = icmp ugt i64 %1055, %1053
  %1058 = or i1 %1057, %1056
  %1059 = or i1 %1050, %1058
  br i1 %1059, label %1145, label %1060

1060:                                             ; preds = %1041
  %1061 = getelementptr i16, i16* %884, i64 %886
  %1062 = icmp sgt i64 %883, 0
  %1063 = icmp ult i16* %1061, %1039
  %1064 = and i1 %1062, %1063
  br i1 %1064, label %1145, label %1065

1065:                                             ; preds = %1060
  %1066 = and i64 %887, -16
  %1067 = sub i64 %887, %1066
  %1068 = sub i64 0, %1066
  %1069 = getelementptr i16, i16* %1038, i64 %1068
  %1070 = sub i64 0, %1066
  %1071 = getelementptr i16, i16* %1039, i64 %1070
  %1072 = add i64 %1066, -16
  %1073 = lshr exact i64 %1072, 4
  %1074 = add nuw nsw i64 %1073, 1
  %1075 = and i64 %1074, 1
  %1076 = icmp eq i64 %1072, 0
  br i1 %1076, label %1121, label %1077

1077:                                             ; preds = %1065
  %1078 = sub nuw nsw i64 %1074, %1075
  %1079 = getelementptr i16, i16* %1038, i64 -1
  %1080 = getelementptr i16, i16* %1039, i64 -1
  %1081 = getelementptr i16, i16* %1038, i64 -1
  %1082 = getelementptr i16, i16* %1039, i64 -1
  br label %1083

1083:                                             ; preds = %1083, %1077
  %1084 = phi i64 [ 0, %1077 ], [ %1118, %1083 ]
  %1085 = phi i64 [ %1078, %1077 ], [ %1119, %1083 ]
  %1086 = sub i64 0, %1084
  %1087 = sub i64 0, %1084
  %1088 = getelementptr inbounds i16, i16* %1080, i64 %1087
  %1089 = getelementptr inbounds i16, i16* %1079, i64 %1086
  %1090 = getelementptr inbounds i16, i16* %1089, i64 -7
  %1091 = bitcast i16* %1090 to <8 x i16>*
  %1092 = load <8 x i16>, <8 x i16>* %1091, align 2, !alias.scope !21
  %1093 = getelementptr inbounds i16, i16* %1089, i64 -8
  %1094 = getelementptr inbounds i16, i16* %1093, i64 -7
  %1095 = bitcast i16* %1094 to <8 x i16>*
  %1096 = load <8 x i16>, <8 x i16>* %1095, align 2, !alias.scope !21
  %1097 = getelementptr inbounds i16, i16* %1088, i64 -7
  %1098 = bitcast i16* %1097 to <8 x i16>*
  store <8 x i16> %1092, <8 x i16>* %1098, align 2, !alias.scope !24, !noalias !21
  %1099 = getelementptr inbounds i16, i16* %1088, i64 -8
  %1100 = getelementptr inbounds i16, i16* %1099, i64 -7
  %1101 = bitcast i16* %1100 to <8 x i16>*
  store <8 x i16> %1096, <8 x i16>* %1101, align 2, !alias.scope !24, !noalias !21
  %1102 = sub nuw nsw i64 -16, %1084
  %1103 = sub nuw nsw i64 -16, %1084
  %1104 = getelementptr inbounds i16, i16* %1082, i64 %1103
  %1105 = getelementptr inbounds i16, i16* %1081, i64 %1102
  %1106 = getelementptr inbounds i16, i16* %1105, i64 -7
  %1107 = bitcast i16* %1106 to <8 x i16>*
  %1108 = load <8 x i16>, <8 x i16>* %1107, align 2, !alias.scope !21
  %1109 = getelementptr inbounds i16, i16* %1105, i64 -8
  %1110 = getelementptr inbounds i16, i16* %1109, i64 -7
  %1111 = bitcast i16* %1110 to <8 x i16>*
  %1112 = load <8 x i16>, <8 x i16>* %1111, align 2, !alias.scope !21
  %1113 = getelementptr inbounds i16, i16* %1104, i64 -7
  %1114 = bitcast i16* %1113 to <8 x i16>*
  store <8 x i16> %1108, <8 x i16>* %1114, align 2, !alias.scope !24, !noalias !21
  %1115 = getelementptr inbounds i16, i16* %1104, i64 -8
  %1116 = getelementptr inbounds i16, i16* %1115, i64 -7
  %1117 = bitcast i16* %1116 to <8 x i16>*
  store <8 x i16> %1112, <8 x i16>* %1117, align 2, !alias.scope !24, !noalias !21
  %1118 = add i64 %1084, 32
  %1119 = add i64 %1085, -2
  %1120 = icmp eq i64 %1119, 0
  br i1 %1120, label %1121, label %1083, !llvm.loop !26

1121:                                             ; preds = %1083, %1065
  %1122 = phi i64 [ 0, %1065 ], [ %1118, %1083 ]
  %1123 = icmp eq i64 %1075, 0
  br i1 %1123, label %1143, label %1124

1124:                                             ; preds = %1121
  %1125 = sub i64 0, %1122
  %1126 = getelementptr i16, i16* %1038, i64 -1
  %1127 = sub i64 0, %1122
  %1128 = getelementptr i16, i16* %1039, i64 -1
  %1129 = getelementptr inbounds i16, i16* %1128, i64 %1127
  %1130 = getelementptr inbounds i16, i16* %1126, i64 %1125
  %1131 = getelementptr inbounds i16, i16* %1130, i64 -7
  %1132 = bitcast i16* %1131 to <8 x i16>*
  %1133 = load <8 x i16>, <8 x i16>* %1132, align 2, !alias.scope !21
  %1134 = getelementptr inbounds i16, i16* %1130, i64 -8
  %1135 = getelementptr inbounds i16, i16* %1134, i64 -7
  %1136 = bitcast i16* %1135 to <8 x i16>*
  %1137 = load <8 x i16>, <8 x i16>* %1136, align 2, !alias.scope !21
  %1138 = getelementptr inbounds i16, i16* %1129, i64 -7
  %1139 = bitcast i16* %1138 to <8 x i16>*
  store <8 x i16> %1133, <8 x i16>* %1139, align 2, !alias.scope !24, !noalias !21
  %1140 = getelementptr inbounds i16, i16* %1129, i64 -8
  %1141 = getelementptr inbounds i16, i16* %1140, i64 -7
  %1142 = bitcast i16* %1141 to <8 x i16>*
  store <8 x i16> %1137, <8 x i16>* %1142, align 2, !alias.scope !24, !noalias !21
  br label %1143

1143:                                             ; preds = %1121, %1124
  %1144 = icmp eq i64 %887, %1066
  br i1 %1144, label %1198, label %1145

1145:                                             ; preds = %1143, %1060, %1041, %1037
  %1146 = phi i64 [ %887, %1060 ], [ %887, %1041 ], [ %887, %1037 ], [ %1067, %1143 ]
  %1147 = phi i16* [ %1038, %1060 ], [ %1038, %1041 ], [ %1038, %1037 ], [ %1069, %1143 ]
  %1148 = phi i16* [ %1039, %1060 ], [ %1039, %1041 ], [ %1039, %1037 ], [ %1071, %1143 ]
  %1149 = add i64 %1146, -1
  %1150 = and i64 %1146, 7
  %1151 = icmp eq i64 %1150, 0
  br i1 %1151, label %1163, label %1152

1152:                                             ; preds = %1145, %1152
  %1153 = phi i64 [ %1160, %1152 ], [ %1146, %1145 ]
  %1154 = phi i16* [ %1158, %1152 ], [ %1147, %1145 ]
  %1155 = phi i16* [ %1157, %1152 ], [ %1148, %1145 ]
  %1156 = phi i64 [ %1161, %1152 ], [ %1150, %1145 ]
  %1157 = getelementptr inbounds i16, i16* %1155, i64 -1
  %1158 = getelementptr inbounds i16, i16* %1154, i64 -1
  %1159 = load i16, i16* %1158, align 2
  store i16 %1159, i16* %1157, align 2
  %1160 = add i64 %1153, -1
  %1161 = add i64 %1156, -1
  %1162 = icmp eq i64 %1161, 0
  br i1 %1162, label %1163, label %1152, !llvm.loop !27

1163:                                             ; preds = %1152, %1145
  %1164 = phi i64 [ %1146, %1145 ], [ %1160, %1152 ]
  %1165 = phi i16* [ %1147, %1145 ], [ %1158, %1152 ]
  %1166 = phi i16* [ %1148, %1145 ], [ %1157, %1152 ]
  %1167 = icmp ult i64 %1149, 7
  br i1 %1167, label %1198, label %1168

1168:                                             ; preds = %1163, %1168
  %1169 = phi i64 [ %1196, %1168 ], [ %1164, %1163 ]
  %1170 = phi i16* [ %1194, %1168 ], [ %1165, %1163 ]
  %1171 = phi i16* [ %1193, %1168 ], [ %1166, %1163 ]
  %1172 = getelementptr inbounds i16, i16* %1171, i64 -1
  %1173 = getelementptr inbounds i16, i16* %1170, i64 -1
  %1174 = load i16, i16* %1173, align 2
  store i16 %1174, i16* %1172, align 2
  %1175 = getelementptr inbounds i16, i16* %1171, i64 -2
  %1176 = getelementptr inbounds i16, i16* %1170, i64 -2
  %1177 = load i16, i16* %1176, align 2
  store i16 %1177, i16* %1175, align 2
  %1178 = getelementptr inbounds i16, i16* %1171, i64 -3
  %1179 = getelementptr inbounds i16, i16* %1170, i64 -3
  %1180 = load i16, i16* %1179, align 2
  store i16 %1180, i16* %1178, align 2
  %1181 = getelementptr inbounds i16, i16* %1171, i64 -4
  %1182 = getelementptr inbounds i16, i16* %1170, i64 -4
  %1183 = load i16, i16* %1182, align 2
  store i16 %1183, i16* %1181, align 2
  %1184 = getelementptr inbounds i16, i16* %1171, i64 -5
  %1185 = getelementptr inbounds i16, i16* %1170, i64 -5
  %1186 = load i16, i16* %1185, align 2
  store i16 %1186, i16* %1184, align 2
  %1187 = getelementptr inbounds i16, i16* %1171, i64 -6
  %1188 = getelementptr inbounds i16, i16* %1170, i64 -6
  %1189 = load i16, i16* %1188, align 2
  store i16 %1189, i16* %1187, align 2
  %1190 = getelementptr inbounds i16, i16* %1171, i64 -7
  %1191 = getelementptr inbounds i16, i16* %1170, i64 -7
  %1192 = load i16, i16* %1191, align 2
  store i16 %1192, i16* %1190, align 2
  %1193 = getelementptr inbounds i16, i16* %1171, i64 -8
  %1194 = getelementptr inbounds i16, i16* %1170, i64 -8
  %1195 = load i16, i16* %1194, align 2
  store i16 %1195, i16* %1193, align 2
  %1196 = add i64 %1169, -8
  %1197 = icmp eq i64 %1196, 0
  br i1 %1197, label %1198, label %1168, !llvm.loop !28

1198:                                             ; preds = %1163, %1168, %1000, %1005, %1143, %980, %1035, %879
  %1199 = load i8, i8* %195, align 1
  %1200 = icmp slt i8 %1199, 0
  br i1 %1200, label %1201, label %1202

1201:                                             ; preds = %1198
  store i64 %887, i64* %192, align 8
  br label %1204

1202:                                             ; preds = %1198
  %1203 = trunc i64 %887 to i8
  store i8 %1203, i8* %195, align 1
  br label %1204

1204:                                             ; preds = %1202, %1201
  %1205 = getelementptr inbounds i16, i16* %884, i64 %887
  store i16 0, i16* %1205, align 2
  br label %1206

1206:                                             ; preds = %866, %1204, %876, %878
  %1207 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %1208 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %1207, align 8
  %1209 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1209) #14
  call void @_ZN4base14OffsetAdjuster10AdjustmentC1Emmm(%"struct.base::OffsetAdjuster::Adjustment"* nonnull %27, i64 0, i64 %189, i64 0) #14
  %1210 = call %"struct.base::OffsetAdjuster::Adjustment"* @_ZNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector"* %6, %"struct.base::OffsetAdjuster::Adjustment"* %1208, %"struct.base::OffsetAdjuster::Adjustment"* nonnull dereferenceable(24) %27)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1209) #14
  br i1 %444, label %1211, label %1214

1211:                                             ; preds = %1206
  %1212 = load i64, i64* %5, align 8
  %1213 = sub i64 %1212, %189
  store i64 %1213, i64* %5, align 8
  br label %1214

1214:                                             ; preds = %1211, %1206
  %1215 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 0, i32 0
  store i32 0, i32* %1215, align 4
  store i32 -1, i32* %869, align 4
  %1216 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 1, i32 1
  %1217 = load i32, i32* %1216, align 4
  %1218 = icmp eq i32 %1217, -1
  br i1 %1218, label %1223, label %1219

1219:                                             ; preds = %1214
  %1220 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 1, i32 0
  %1221 = load i32, i32* %1220, align 4
  %1222 = sub i32 %1221, %872
  store i32 %1222, i32* %1220, align 4
  br label %1223

1223:                                             ; preds = %1219, %1214
  %1224 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 2, i32 1
  %1225 = load i32, i32* %1224, align 4
  %1226 = icmp eq i32 %1225, -1
  br i1 %1226, label %1231, label %1227

1227:                                             ; preds = %1223
  %1228 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 2, i32 0
  %1229 = load i32, i32* %1228, align 4
  %1230 = sub i32 %1229, %872
  store i32 %1230, i32* %1228, align 4
  br label %1231

1231:                                             ; preds = %1227, %1223
  %1232 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 3, i32 1
  %1233 = load i32, i32* %1232, align 4
  %1234 = icmp eq i32 %1233, -1
  br i1 %1234, label %1239, label %1235

1235:                                             ; preds = %1231
  %1236 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 3, i32 0
  %1237 = load i32, i32* %1236, align 4
  %1238 = sub i32 %1237, %872
  store i32 %1238, i32* %1236, align 4
  br label %1239

1239:                                             ; preds = %1235, %1231
  %1240 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 4, i32 1
  %1241 = load i32, i32* %1240, align 4
  %1242 = icmp eq i32 %1241, -1
  br i1 %1242, label %1247, label %1243

1243:                                             ; preds = %1239
  %1244 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 4, i32 0
  %1245 = load i32, i32* %1244, align 4
  %1246 = sub i32 %1245, %872
  store i32 %1246, i32* %1244, align 4
  br label %1247

1247:                                             ; preds = %1243, %1239
  %1248 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 5, i32 1
  %1249 = load i32, i32* %1248, align 4
  %1250 = icmp eq i32 %1249, -1
  br i1 %1250, label %1255, label %1251

1251:                                             ; preds = %1247
  %1252 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 5, i32 0
  %1253 = load i32, i32* %1252, align 4
  %1254 = sub i32 %1253, %872
  store i32 %1254, i32* %1252, align 4
  br label %1255

1255:                                             ; preds = %1251, %1247
  %1256 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 6, i32 1
  %1257 = load i32, i32* %1256, align 4
  %1258 = icmp eq i32 %1257, -1
  br i1 %1258, label %1263, label %1259

1259:                                             ; preds = %1255
  %1260 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 6, i32 0
  %1261 = load i32, i32* %1260, align 4
  %1262 = sub i32 %1261, %872
  store i32 %1262, i32* %1260, align 4
  br label %1263

1263:                                             ; preds = %1259, %1255
  %1264 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 7, i32 1
  %1265 = load i32, i32* %1264, align 4
  %1266 = icmp eq i32 %1265, -1
  br i1 %1266, label %1283, label %1267

1267:                                             ; preds = %1263
  %1268 = getelementptr inbounds %"struct.url::Parsed", %"struct.url::Parsed"* %38, i64 0, i32 7, i32 0
  %1269 = load i32, i32* %1268, align 4
  %1270 = sub i32 %1269, %872
  store i32 %1270, i32* %1268, align 4
  br label %1283

1271:                                             ; preds = %809
  %1272 = load i8, i8* %814, align 1
  %1273 = icmp slt i8 %1272, 0
  br i1 %1273, label %1274, label %1276

1274:                                             ; preds = %1271
  %1275 = load i8*, i8** %816, align 8
  call void @_ZdlPv(i8* %1275) #15
  br label %1276

1276:                                             ; preds = %1271, %1274
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %790) #14
  br label %1283

1277:                                             ; preds = %839
  %1278 = load i8, i8* %814, align 1
  %1279 = icmp slt i8 %1278, 0
  br i1 %1279, label %1280, label %1282

1280:                                             ; preds = %1277
  %1281 = load i8*, i8** %816, align 8
  call void @_ZdlPv(i8* %1281) #15
  br label %1282

1282:                                             ; preds = %1277, %1280
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %790) #14
  br label %1283

1283:                                             ; preds = %849, %1276, %1282, %1263, %1267
  %1284 = bitcast %"class.std::__1::basic_string.4"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1284, i8* nonnull align 8 %190, i64 24, i1 false) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %190) #14
  br label %1285

1285:                                             ; preds = %181, %179, %1283
  call void @_ZN3url6ParsedD1Ev(%"struct.url::Parsed"* nonnull %13) #14
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %32) #14
  ret void
}

declare void @_ZN4base14OffsetAdjuster12AdjustOffsetERKNSt3__16vectorINS0_10AdjustmentENS1_9allocatorIS3_EEEEPmm(%"class.std::__1::vector"* dereferenceable(24), i64*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter20FormatUrlWithOffsetsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorImNS7_9allocatorImEEEE(%"class.std::__1::basic_string.4"* noalias sret, %class.GURL* dereferenceable(120), i32, i32, %"struct.url::Parsed"*, i64*, %"class.std::__1::vector.18"*) local_unnamed_addr #0 {
  %8 = alloca %"class.std::__1::vector", align 8
  %9 = alloca %"class.std::__1::basic_string.4", align 8
  %10 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #14
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #14
  %13 = bitcast %"class.std::__1::basic_string.4"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #14
  call void @_ZN13url_formatter24FormatUrlWithAdjustmentsERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS7_9allocatorISB_EEEE(%"class.std::__1::basic_string.4"* nonnull sret %9, %class.GURL* dereferenceable(120) %1, i32 %2, i32 %3, %"struct.url::Parsed"* %4, i64* %5, %"class.std::__1::vector"* nonnull %8)
  %14 = bitcast %"class.std::__1::basic_string.4"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  %18 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = zext i8 %16 to i64
  %21 = select i1 %17, i64 %19, i64 %20
  call void @_ZN4base14OffsetAdjuster13AdjustOffsetsERKNSt3__16vectorINS0_10AdjustmentENS1_9allocatorIS3_EEEEPNS2_ImNS4_ImEEEEm(%"class.std::__1::vector"* nonnull dereferenceable(24) %8, %"class.std::__1::vector.18"* %6, i64 %21) #14
  %22 = load i8, i8* %15, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %7
  %25 = bitcast %"class.std::__1::basic_string.4"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* nonnull align 8 %13, i64 24, i1 false) #14
  br label %206

26:                                               ; preds = %7
  %27 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i16*, i16** %27, align 8
  %29 = load i64, i64* %18, align 8
  %30 = icmp ult i64 %29, 11
  br i1 %30, label %31, label %36

31:                                               ; preds = %26
  %32 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  %33 = trunc i64 %29 to i8
  %34 = bitcast %"class.std::__1::basic_string.4"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %34, i64 0, i32 1, i32 1
  store i8 %33, i8* %35, align 1
  br label %53

36:                                               ; preds = %26
  %37 = icmp ugt i64 %29, 9223372036854775791
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = bitcast %"class.std::__1::basic_string.4"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %39) #16
  unreachable

40:                                               ; preds = %36
  %41 = add nuw nsw i64 %29, 8
  %42 = and i64 %41, -8
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  call void @abort() #16
  unreachable

45:                                               ; preds = %40
  %46 = shl i64 %42, 1
  %47 = call i8* @_Znwm(i64 %46) #15
  %48 = bitcast i8* %47 to i16*
  %49 = bitcast %"class.std::__1::basic_string.4"* %0 to i8**
  store i8* %47, i8** %49, align 8
  %50 = or i64 %42, -9223372036854775808
  %51 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %50, i64* %51, align 8
  %52 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %29, i64* %52, align 8
  br label %53

53:                                               ; preds = %45, %31
  %54 = phi i16* [ %32, %31 ], [ %48, %45 ]
  %55 = add nuw nsw i64 %29, 1
  %56 = add i64 %29, 1
  %57 = icmp ult i64 %56, 16
  br i1 %57, label %147, label %58

58:                                               ; preds = %53
  %59 = add i64 %29, 1
  %60 = getelementptr i16, i16* %54, i64 %59
  %61 = getelementptr i16, i16* %28, i64 %59
  %62 = icmp ult i16* %54, %61
  %63 = icmp ult i16* %28, %60
  %64 = and i1 %62, %63
  br i1 %64, label %147, label %65

65:                                               ; preds = %58
  %66 = and i64 %56, -16
  %67 = sub i64 %55, %66
  %68 = getelementptr i16, i16* %28, i64 %66
  %69 = getelementptr i16, i16* %54, i64 %66
  %70 = add i64 %66, -16
  %71 = lshr exact i64 %70, 4
  %72 = add nuw nsw i64 %71, 1
  %73 = and i64 %72, 3
  %74 = icmp ult i64 %70, 48
  br i1 %74, label %126, label %75

75:                                               ; preds = %65
  %76 = sub nsw i64 %72, %73
  br label %77

77:                                               ; preds = %77, %75
  %78 = phi i64 [ 0, %75 ], [ %123, %77 ]
  %79 = phi i64 [ %76, %75 ], [ %124, %77 ]
  %80 = getelementptr i16, i16* %28, i64 %78
  %81 = getelementptr i16, i16* %54, i64 %78
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !29
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !29
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !32, !noalias !29
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !32, !noalias !29
  %90 = or i64 %78, 16
  %91 = getelementptr i16, i16* %28, i64 %90
  %92 = getelementptr i16, i16* %54, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !29
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !29
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !32, !noalias !29
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !32, !noalias !29
  %101 = or i64 %78, 32
  %102 = getelementptr i16, i16* %28, i64 %101
  %103 = getelementptr i16, i16* %54, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !29
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !29
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !32, !noalias !29
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !32, !noalias !29
  %112 = or i64 %78, 48
  %113 = getelementptr i16, i16* %28, i64 %112
  %114 = getelementptr i16, i16* %54, i64 %112
  %115 = bitcast i16* %113 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !29
  %117 = getelementptr i16, i16* %113, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !29
  %120 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %120, align 2, !alias.scope !32, !noalias !29
  %121 = getelementptr i16, i16* %114, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %122, align 2, !alias.scope !32, !noalias !29
  %123 = add i64 %78, 64
  %124 = add i64 %79, -4
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %77, !llvm.loop !34

126:                                              ; preds = %77, %65
  %127 = phi i64 [ 0, %65 ], [ %123, %77 ]
  %128 = icmp eq i64 %73, 0
  br i1 %128, label %145, label %129

129:                                              ; preds = %126, %129
  %130 = phi i64 [ %142, %129 ], [ %127, %126 ]
  %131 = phi i64 [ %143, %129 ], [ %73, %126 ]
  %132 = getelementptr i16, i16* %28, i64 %130
  %133 = getelementptr i16, i16* %54, i64 %130
  %134 = bitcast i16* %132 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !29
  %136 = getelementptr i16, i16* %132, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !29
  %139 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %139, align 2, !alias.scope !32, !noalias !29
  %140 = getelementptr i16, i16* %133, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %141, align 2, !alias.scope !32, !noalias !29
  %142 = add i64 %130, 16
  %143 = add i64 %131, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %129, !llvm.loop !35

145:                                              ; preds = %129, %126
  %146 = icmp eq i64 %56, %66
  br i1 %146, label %200, label %147

147:                                              ; preds = %145, %58, %53
  %148 = phi i64 [ %55, %58 ], [ %55, %53 ], [ %67, %145 ]
  %149 = phi i16* [ %28, %58 ], [ %28, %53 ], [ %68, %145 ]
  %150 = phi i16* [ %54, %58 ], [ %54, %53 ], [ %69, %145 ]
  %151 = add i64 %148, -1
  %152 = and i64 %148, 7
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %165, label %154

154:                                              ; preds = %147, %154
  %155 = phi i64 [ %160, %154 ], [ %148, %147 ]
  %156 = phi i16* [ %162, %154 ], [ %149, %147 ]
  %157 = phi i16* [ %161, %154 ], [ %150, %147 ]
  %158 = phi i64 [ %163, %154 ], [ %152, %147 ]
  %159 = load i16, i16* %156, align 2
  store i16 %159, i16* %157, align 2
  %160 = add i64 %155, -1
  %161 = getelementptr inbounds i16, i16* %157, i64 1
  %162 = getelementptr inbounds i16, i16* %156, i64 1
  %163 = add i64 %158, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %154, !llvm.loop !36

165:                                              ; preds = %154, %147
  %166 = phi i64 [ %148, %147 ], [ %160, %154 ]
  %167 = phi i16* [ %149, %147 ], [ %162, %154 ]
  %168 = phi i16* [ %150, %147 ], [ %161, %154 ]
  %169 = icmp ult i64 %151, 7
  br i1 %169, label %200, label %170

170:                                              ; preds = %165, %170
  %171 = phi i64 [ %196, %170 ], [ %166, %165 ]
  %172 = phi i16* [ %198, %170 ], [ %167, %165 ]
  %173 = phi i16* [ %197, %170 ], [ %168, %165 ]
  %174 = load i16, i16* %172, align 2
  store i16 %174, i16* %173, align 2
  %175 = getelementptr inbounds i16, i16* %173, i64 1
  %176 = getelementptr inbounds i16, i16* %172, i64 1
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %173, i64 2
  %179 = getelementptr inbounds i16, i16* %172, i64 2
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %173, i64 3
  %182 = getelementptr inbounds i16, i16* %172, i64 3
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %173, i64 4
  %185 = getelementptr inbounds i16, i16* %172, i64 4
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %173, i64 5
  %188 = getelementptr inbounds i16, i16* %172, i64 5
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %173, i64 6
  %191 = getelementptr inbounds i16, i16* %172, i64 6
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = getelementptr inbounds i16, i16* %173, i64 7
  %194 = getelementptr inbounds i16, i16* %172, i64 7
  %195 = load i16, i16* %194, align 2
  store i16 %195, i16* %193, align 2
  %196 = add i64 %171, -8
  %197 = getelementptr inbounds i16, i16* %173, i64 8
  %198 = getelementptr inbounds i16, i16* %172, i64 8
  %199 = icmp eq i64 %196, 0
  br i1 %199, label %200, label %170, !llvm.loop !37

200:                                              ; preds = %165, %170, %145
  %201 = load i8, i8* %15, align 1
  %202 = icmp slt i8 %201, 0
  br i1 %202, label %203, label %206

203:                                              ; preds = %200
  %204 = bitcast %"class.std::__1::basic_string.4"* %9 to i8**
  %205 = load i8*, i8** %204, align 8
  call void @_ZdlPv(i8* %205) #15
  br label %206

206:                                              ; preds = %24, %200, %203
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #14
  %207 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %11, align 8
  %208 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %207, null
  br i1 %208, label %213, label %209

209:                                              ; preds = %206
  %210 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %207 to i64
  %211 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %12 to i64*
  store i64 %210, i64* %211, align 8
  %212 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %207 to i8*
  call void @_ZdlPv(i8* %212) #15
  br label %213

213:                                              ; preds = %206, %209
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #14
  ret void
}

declare void @_ZN4base14OffsetAdjuster13AdjustOffsetsERKNSt3__16vectorINS0_10AdjustmentENS1_9allocatorIS3_EEEEPNS2_ImNS4_ImEEEEm(%"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::vector.18"*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3url6ParsedC1Ev(%"struct.url::Parsed"*) unnamed_addr #2

declare dereferenceable(80) %"struct.url::Parsed"* @_ZN3url6ParsedaSERKS0_(%"struct.url::Parsed"*, %"struct.url::Parsed"* dereferenceable(80)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3url6ParsedD1Ev(%"struct.url::Parsed"*) unnamed_addr #3

declare zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL*, i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8*, i64, i8*, i64, i32) local_unnamed_addr #2

declare i32 @_ZNK3url6Parsed21CountCharactersBeforeENS0_13ComponentTypeEb(%"struct.url::Parsed"*, i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertINS_11__wrap_iterIPKcEEEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueEE13_EnableIfImplINS7_IPDsEEEENS7_IPKDsEESC_SC_(%"class.std::__1::basic_string.4"*, i16*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %2 to i64
  %6 = ptrtoint i16* %1 to i64
  %7 = bitcast %"class.std::__1::basic_string.4"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i16*, i16** %12, align 8
  br label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  br label %16

16:                                               ; preds = %11, %14
  %17 = phi i16* [ %13, %11 ], [ %15, %14 ]
  %18 = ptrtoint i16* %17 to i64
  %19 = sub i64 %6, %18
  %20 = ashr exact i64 %19, 1
  %21 = ptrtoint i8* %3 to i64
  %22 = sub i64 %21, %5
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %467, label %24

24:                                               ; preds = %16
  br i1 %10, label %27, label %25

25:                                               ; preds = %24
  %26 = zext i8 %9 to i64
  br label %34

27:                                               ; preds = %24
  %28 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %31, 9223372036854775807
  %33 = add nsw i64 %32, -1
  br label %34

34:                                               ; preds = %25, %27
  %35 = phi i64 [ %29, %27 ], [ %26, %25 ]
  %36 = phi i64 [ %33, %27 ], [ 10, %25 ]
  %37 = sub i64 %36, %35
  %38 = icmp ult i64 %37, %22
  br i1 %38, label %364, label %39

39:                                               ; preds = %34
  br i1 %10, label %40, label %43

40:                                               ; preds = %39
  %41 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i16*, i16** %41, align 8
  br label %45

43:                                               ; preds = %39
  %44 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  br label %45

45:                                               ; preds = %40, %43
  %46 = phi i16* [ %42, %40 ], [ %44, %43 ]
  %47 = sub i64 %35, %20
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %369, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds i16, i16* %46, i64 %20
  %51 = getelementptr inbounds i16, i16* %50, i64 %22
  %52 = icmp slt i64 %22, 0
  br i1 %52, label %53, label %198

53:                                               ; preds = %49
  %54 = icmp ult i64 %47, 16
  br i1 %54, label %145, label %55

55:                                               ; preds = %53
  %56 = add i64 %35, %21
  %57 = sub i64 %56, %5
  %58 = getelementptr i16, i16* %46, i64 %57
  %59 = getelementptr i16, i16* %46, i64 %35
  %60 = icmp ult i16* %51, %59
  %61 = icmp ult i16* %50, %58
  %62 = and i1 %60, %61
  br i1 %62, label %145, label %63

63:                                               ; preds = %55
  %64 = and i64 %47, -16
  %65 = sub i64 %47, %64
  %66 = getelementptr i16, i16* %50, i64 %64
  %67 = getelementptr i16, i16* %51, i64 %64
  %68 = add i64 %64, -16
  %69 = lshr exact i64 %68, 4
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp ult i64 %68, 48
  br i1 %72, label %124, label %73

73:                                               ; preds = %63
  %74 = sub nsw i64 %70, %71
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ 0, %73 ], [ %121, %75 ]
  %77 = phi i64 [ %74, %73 ], [ %122, %75 ]
  %78 = getelementptr i16, i16* %50, i64 %76
  %79 = getelementptr i16, i16* %51, i64 %76
  %80 = bitcast i16* %78 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !38
  %82 = getelementptr i16, i16* %78, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !38
  %85 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %85, align 2, !alias.scope !41, !noalias !38
  %86 = getelementptr i16, i16* %79, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %87, align 2, !alias.scope !41, !noalias !38
  %88 = or i64 %76, 16
  %89 = getelementptr i16, i16* %50, i64 %88
  %90 = getelementptr i16, i16* %51, i64 %88
  %91 = bitcast i16* %89 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !38
  %93 = getelementptr i16, i16* %89, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !38
  %96 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %96, align 2, !alias.scope !41, !noalias !38
  %97 = getelementptr i16, i16* %90, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %98, align 2, !alias.scope !41, !noalias !38
  %99 = or i64 %76, 32
  %100 = getelementptr i16, i16* %50, i64 %99
  %101 = getelementptr i16, i16* %51, i64 %99
  %102 = bitcast i16* %100 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !38
  %104 = getelementptr i16, i16* %100, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2, !alias.scope !38
  %107 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %107, align 2, !alias.scope !41, !noalias !38
  %108 = getelementptr i16, i16* %101, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %109, align 2, !alias.scope !41, !noalias !38
  %110 = or i64 %76, 48
  %111 = getelementptr i16, i16* %50, i64 %110
  %112 = getelementptr i16, i16* %51, i64 %110
  %113 = bitcast i16* %111 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2, !alias.scope !38
  %115 = getelementptr i16, i16* %111, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2, !alias.scope !38
  %118 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %118, align 2, !alias.scope !41, !noalias !38
  %119 = getelementptr i16, i16* %112, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %120, align 2, !alias.scope !41, !noalias !38
  %121 = add i64 %76, 64
  %122 = add i64 %77, -4
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %75, !llvm.loop !43

124:                                              ; preds = %75, %63
  %125 = phi i64 [ 0, %63 ], [ %121, %75 ]
  %126 = icmp eq i64 %71, 0
  br i1 %126, label %143, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %140, %127 ], [ %125, %124 ]
  %129 = phi i64 [ %141, %127 ], [ %71, %124 ]
  %130 = getelementptr i16, i16* %50, i64 %128
  %131 = getelementptr i16, i16* %51, i64 %128
  %132 = bitcast i16* %130 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !38
  %134 = getelementptr i16, i16* %130, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2, !alias.scope !38
  %137 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %137, align 2, !alias.scope !41, !noalias !38
  %138 = getelementptr i16, i16* %131, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %139, align 2, !alias.scope !41, !noalias !38
  %140 = add i64 %128, 16
  %141 = add i64 %129, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %127, !llvm.loop !44

143:                                              ; preds = %127, %124
  %144 = icmp eq i64 %47, %64
  br i1 %144, label %369, label %145

145:                                              ; preds = %143, %55, %53
  %146 = phi i64 [ %47, %55 ], [ %47, %53 ], [ %65, %143 ]
  %147 = phi i16* [ %50, %55 ], [ %50, %53 ], [ %66, %143 ]
  %148 = phi i16* [ %51, %55 ], [ %51, %53 ], [ %67, %143 ]
  %149 = add i64 %146, -1
  %150 = and i64 %146, 7
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %163, label %152

152:                                              ; preds = %145, %152
  %153 = phi i64 [ %158, %152 ], [ %146, %145 ]
  %154 = phi i16* [ %160, %152 ], [ %147, %145 ]
  %155 = phi i16* [ %159, %152 ], [ %148, %145 ]
  %156 = phi i64 [ %161, %152 ], [ %150, %145 ]
  %157 = load i16, i16* %154, align 2
  store i16 %157, i16* %155, align 2
  %158 = add i64 %153, -1
  %159 = getelementptr inbounds i16, i16* %155, i64 1
  %160 = getelementptr inbounds i16, i16* %154, i64 1
  %161 = add i64 %156, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %152, !llvm.loop !45

163:                                              ; preds = %152, %145
  %164 = phi i64 [ %146, %145 ], [ %158, %152 ]
  %165 = phi i16* [ %147, %145 ], [ %160, %152 ]
  %166 = phi i16* [ %148, %145 ], [ %159, %152 ]
  %167 = icmp ult i64 %149, 7
  br i1 %167, label %369, label %168

168:                                              ; preds = %163, %168
  %169 = phi i64 [ %194, %168 ], [ %164, %163 ]
  %170 = phi i16* [ %196, %168 ], [ %165, %163 ]
  %171 = phi i16* [ %195, %168 ], [ %166, %163 ]
  %172 = load i16, i16* %170, align 2
  store i16 %172, i16* %171, align 2
  %173 = getelementptr inbounds i16, i16* %171, i64 1
  %174 = getelementptr inbounds i16, i16* %170, i64 1
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %171, i64 2
  %177 = getelementptr inbounds i16, i16* %170, i64 2
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %171, i64 3
  %180 = getelementptr inbounds i16, i16* %170, i64 3
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %171, i64 4
  %183 = getelementptr inbounds i16, i16* %170, i64 4
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = getelementptr inbounds i16, i16* %171, i64 5
  %186 = getelementptr inbounds i16, i16* %170, i64 5
  %187 = load i16, i16* %186, align 2
  store i16 %187, i16* %185, align 2
  %188 = getelementptr inbounds i16, i16* %171, i64 6
  %189 = getelementptr inbounds i16, i16* %170, i64 6
  %190 = load i16, i16* %189, align 2
  store i16 %190, i16* %188, align 2
  %191 = getelementptr inbounds i16, i16* %171, i64 7
  %192 = getelementptr inbounds i16, i16* %170, i64 7
  %193 = load i16, i16* %192, align 2
  store i16 %193, i16* %191, align 2
  %194 = add i64 %169, -8
  %195 = getelementptr inbounds i16, i16* %171, i64 8
  %196 = getelementptr inbounds i16, i16* %170, i64 8
  %197 = icmp eq i64 %194, 0
  br i1 %197, label %369, label %168, !llvm.loop !46

198:                                              ; preds = %49
  %199 = getelementptr inbounds i16, i16* %46, i64 %35
  %200 = getelementptr inbounds i16, i16* %51, i64 %47
  %201 = icmp ult i64 %47, 16
  br i1 %201, label %311, label %202

202:                                              ; preds = %198
  %203 = xor i64 %20, -1
  %204 = add i64 %35, %203
  %205 = add i64 %35, %21
  %206 = xor i64 %5, -1
  %207 = add i64 %205, %206
  %208 = getelementptr i16, i16* %46, i64 %207
  %209 = ptrtoint i16* %208 to i64
  %210 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %204, i64 2)
  %211 = extractvalue { i64, i1 } %210, 0
  %212 = extractvalue { i64, i1 } %210, 1
  %213 = icmp ugt i64 %211, %209
  %214 = or i1 %213, %212
  %215 = add i64 %35, -1
  %216 = getelementptr i16, i16* %46, i64 %215
  %217 = ptrtoint i16* %216 to i64
  %218 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %204, i64 2)
  %219 = extractvalue { i64, i1 } %218, 0
  %220 = extractvalue { i64, i1 } %218, 1
  %221 = icmp ugt i64 %219, %217
  %222 = or i1 %221, %220
  %223 = or i1 %214, %222
  br i1 %223, label %311, label %224

224:                                              ; preds = %202
  %225 = add i64 %20, %21
  %226 = sub i64 %225, %5
  %227 = getelementptr i16, i16* %46, i64 %226
  %228 = icmp ult i16* %227, %199
  %229 = icmp ult i16* %50, %200
  %230 = and i1 %228, %229
  br i1 %230, label %311, label %231

231:                                              ; preds = %224
  %232 = and i64 %47, -16
  %233 = sub i64 %47, %232
  %234 = sub i64 0, %232
  %235 = getelementptr i16, i16* %199, i64 %234
  %236 = sub i64 0, %232
  %237 = getelementptr i16, i16* %200, i64 %236
  %238 = add i64 %232, -16
  %239 = lshr exact i64 %238, 4
  %240 = add nuw nsw i64 %239, 1
  %241 = and i64 %240, 1
  %242 = icmp eq i64 %238, 0
  br i1 %242, label %287, label %243

243:                                              ; preds = %231
  %244 = sub nuw nsw i64 %240, %241
  %245 = getelementptr i16, i16* %199, i64 -1
  %246 = getelementptr i16, i16* %200, i64 -1
  %247 = getelementptr i16, i16* %199, i64 -1
  %248 = getelementptr i16, i16* %200, i64 -1
  br label %249

249:                                              ; preds = %249, %243
  %250 = phi i64 [ 0, %243 ], [ %284, %249 ]
  %251 = phi i64 [ %244, %243 ], [ %285, %249 ]
  %252 = sub i64 0, %250
  %253 = sub i64 0, %250
  %254 = getelementptr inbounds i16, i16* %246, i64 %253
  %255 = getelementptr inbounds i16, i16* %245, i64 %252
  %256 = getelementptr inbounds i16, i16* %255, i64 -7
  %257 = bitcast i16* %256 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 2, !alias.scope !47
  %259 = getelementptr inbounds i16, i16* %255, i64 -8
  %260 = getelementptr inbounds i16, i16* %259, i64 -7
  %261 = bitcast i16* %260 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 2, !alias.scope !47
  %263 = getelementptr inbounds i16, i16* %254, i64 -7
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %264, align 2, !alias.scope !50, !noalias !47
  %265 = getelementptr inbounds i16, i16* %254, i64 -8
  %266 = getelementptr inbounds i16, i16* %265, i64 -7
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %267, align 2, !alias.scope !50, !noalias !47
  %268 = sub nuw nsw i64 -16, %250
  %269 = sub nuw nsw i64 -16, %250
  %270 = getelementptr inbounds i16, i16* %248, i64 %269
  %271 = getelementptr inbounds i16, i16* %247, i64 %268
  %272 = getelementptr inbounds i16, i16* %271, i64 -7
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !47
  %275 = getelementptr inbounds i16, i16* %271, i64 -8
  %276 = getelementptr inbounds i16, i16* %275, i64 -7
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 2, !alias.scope !47
  %279 = getelementptr inbounds i16, i16* %270, i64 -7
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %280, align 2, !alias.scope !50, !noalias !47
  %281 = getelementptr inbounds i16, i16* %270, i64 -8
  %282 = getelementptr inbounds i16, i16* %281, i64 -7
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %283, align 2, !alias.scope !50, !noalias !47
  %284 = add i64 %250, 32
  %285 = add i64 %251, -2
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %287, label %249, !llvm.loop !52

287:                                              ; preds = %249, %231
  %288 = phi i64 [ 0, %231 ], [ %284, %249 ]
  %289 = icmp eq i64 %241, 0
  br i1 %289, label %309, label %290

290:                                              ; preds = %287
  %291 = sub i64 0, %288
  %292 = getelementptr i16, i16* %199, i64 -1
  %293 = sub i64 0, %288
  %294 = getelementptr i16, i16* %200, i64 -1
  %295 = getelementptr inbounds i16, i16* %294, i64 %293
  %296 = getelementptr inbounds i16, i16* %292, i64 %291
  %297 = getelementptr inbounds i16, i16* %296, i64 -7
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !47
  %300 = getelementptr inbounds i16, i16* %296, i64 -8
  %301 = getelementptr inbounds i16, i16* %300, i64 -7
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 2, !alias.scope !47
  %304 = getelementptr inbounds i16, i16* %295, i64 -7
  %305 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %305, align 2, !alias.scope !50, !noalias !47
  %306 = getelementptr inbounds i16, i16* %295, i64 -8
  %307 = getelementptr inbounds i16, i16* %306, i64 -7
  %308 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %303, <8 x i16>* %308, align 2, !alias.scope !50, !noalias !47
  br label %309

309:                                              ; preds = %287, %290
  %310 = icmp eq i64 %47, %232
  br i1 %310, label %369, label %311

311:                                              ; preds = %309, %224, %202, %198
  %312 = phi i64 [ %47, %224 ], [ %47, %202 ], [ %47, %198 ], [ %233, %309 ]
  %313 = phi i16* [ %199, %224 ], [ %199, %202 ], [ %199, %198 ], [ %235, %309 ]
  %314 = phi i16* [ %200, %224 ], [ %200, %202 ], [ %200, %198 ], [ %237, %309 ]
  %315 = add i64 %312, -1
  %316 = and i64 %312, 7
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %329, label %318

318:                                              ; preds = %311, %318
  %319 = phi i64 [ %326, %318 ], [ %312, %311 ]
  %320 = phi i16* [ %324, %318 ], [ %313, %311 ]
  %321 = phi i16* [ %323, %318 ], [ %314, %311 ]
  %322 = phi i64 [ %327, %318 ], [ %316, %311 ]
  %323 = getelementptr inbounds i16, i16* %321, i64 -1
  %324 = getelementptr inbounds i16, i16* %320, i64 -1
  %325 = load i16, i16* %324, align 2
  store i16 %325, i16* %323, align 2
  %326 = add i64 %319, -1
  %327 = add i64 %322, -1
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %318, !llvm.loop !53

329:                                              ; preds = %318, %311
  %330 = phi i64 [ %312, %311 ], [ %326, %318 ]
  %331 = phi i16* [ %313, %311 ], [ %324, %318 ]
  %332 = phi i16* [ %314, %311 ], [ %323, %318 ]
  %333 = icmp ult i64 %315, 7
  br i1 %333, label %369, label %334

334:                                              ; preds = %329, %334
  %335 = phi i64 [ %362, %334 ], [ %330, %329 ]
  %336 = phi i16* [ %360, %334 ], [ %331, %329 ]
  %337 = phi i16* [ %359, %334 ], [ %332, %329 ]
  %338 = getelementptr inbounds i16, i16* %337, i64 -1
  %339 = getelementptr inbounds i16, i16* %336, i64 -1
  %340 = load i16, i16* %339, align 2
  store i16 %340, i16* %338, align 2
  %341 = getelementptr inbounds i16, i16* %337, i64 -2
  %342 = getelementptr inbounds i16, i16* %336, i64 -2
  %343 = load i16, i16* %342, align 2
  store i16 %343, i16* %341, align 2
  %344 = getelementptr inbounds i16, i16* %337, i64 -3
  %345 = getelementptr inbounds i16, i16* %336, i64 -3
  %346 = load i16, i16* %345, align 2
  store i16 %346, i16* %344, align 2
  %347 = getelementptr inbounds i16, i16* %337, i64 -4
  %348 = getelementptr inbounds i16, i16* %336, i64 -4
  %349 = load i16, i16* %348, align 2
  store i16 %349, i16* %347, align 2
  %350 = getelementptr inbounds i16, i16* %337, i64 -5
  %351 = getelementptr inbounds i16, i16* %336, i64 -5
  %352 = load i16, i16* %351, align 2
  store i16 %352, i16* %350, align 2
  %353 = getelementptr inbounds i16, i16* %337, i64 -6
  %354 = getelementptr inbounds i16, i16* %336, i64 -6
  %355 = load i16, i16* %354, align 2
  store i16 %355, i16* %353, align 2
  %356 = getelementptr inbounds i16, i16* %337, i64 -7
  %357 = getelementptr inbounds i16, i16* %336, i64 -7
  %358 = load i16, i16* %357, align 2
  store i16 %358, i16* %356, align 2
  %359 = getelementptr inbounds i16, i16* %337, i64 -8
  %360 = getelementptr inbounds i16, i16* %336, i64 -8
  %361 = load i16, i16* %360, align 2
  store i16 %361, i16* %359, align 2
  %362 = add i64 %335, -8
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %369, label %334, !llvm.loop !54

364:                                              ; preds = %34
  %365 = add i64 %35, %22
  %366 = sub i64 %365, %36
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* %0, i64 %36, i64 %366, i64 %35, i64 %20, i64 0, i64 %22)
  %367 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %368 = load i16*, i16** %367, align 8
  br label %369

369:                                              ; preds = %329, %334, %163, %168, %309, %143, %45, %364
  %370 = phi i16* [ %368, %364 ], [ %46, %45 ], [ %46, %143 ], [ %46, %309 ], [ %46, %168 ], [ %46, %163 ], [ %46, %334 ], [ %46, %329 ]
  %371 = add i64 %35, %22
  %372 = load i8, i8* %8, align 1
  %373 = icmp slt i8 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %369
  %375 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %371, i64* %375, align 8
  br label %378

376:                                              ; preds = %369
  %377 = trunc i64 %371 to i8
  store i8 %377, i8* %8, align 1
  br label %378

378:                                              ; preds = %374, %376
  %379 = getelementptr inbounds i16, i16* %370, i64 %371
  store i16 0, i16* %379, align 2
  %380 = icmp eq i8* %2, %3
  br i1 %380, label %467, label %381

381:                                              ; preds = %378
  %382 = getelementptr inbounds i16, i16* %370, i64 %20
  %383 = ptrtoint i8* %3 to i64
  %384 = sub i64 %383, %5
  %385 = icmp ult i64 %384, 16
  br i1 %385, label %456, label %386

386:                                              ; preds = %381
  %387 = bitcast i16* %382 to i8*
  %388 = sub i64 %20, %5
  %389 = getelementptr i8, i8* %3, i64 %388
  %390 = ptrtoint i8* %389 to i64
  %391 = getelementptr i16, i16* %370, i64 %390
  %392 = bitcast i16* %391 to i8*
  %393 = icmp ult i8* %387, %3
  %394 = icmp ugt i8* %392, %2
  %395 = and i1 %393, %394
  br i1 %395, label %456, label %396

396:                                              ; preds = %386
  %397 = and i64 %384, -16
  %398 = getelementptr i16, i16* %382, i64 %397
  %399 = getelementptr i8, i8* %2, i64 %397
  %400 = add i64 %397, -16
  %401 = lshr exact i64 %400, 4
  %402 = add nuw nsw i64 %401, 1
  %403 = and i64 %402, 1
  %404 = icmp eq i64 %400, 0
  br i1 %404, label %438, label %405

405:                                              ; preds = %396
  %406 = sub nuw nsw i64 %402, %403
  br label %407

407:                                              ; preds = %407, %405
  %408 = phi i64 [ 0, %405 ], [ %435, %407 ]
  %409 = phi i64 [ %406, %405 ], [ %436, %407 ]
  %410 = getelementptr i16, i16* %382, i64 %408
  %411 = getelementptr i8, i8* %2, i64 %408
  %412 = bitcast i8* %411 to <8 x i8>*
  %413 = load <8 x i8>, <8 x i8>* %412, align 1, !alias.scope !55
  %414 = getelementptr i8, i8* %411, i64 8
  %415 = bitcast i8* %414 to <8 x i8>*
  %416 = load <8 x i8>, <8 x i8>* %415, align 1, !alias.scope !55
  %417 = sext <8 x i8> %413 to <8 x i16>
  %418 = sext <8 x i8> %416 to <8 x i16>
  %419 = bitcast i16* %410 to <8 x i16>*
  store <8 x i16> %417, <8 x i16>* %419, align 2, !alias.scope !58, !noalias !55
  %420 = getelementptr i16, i16* %410, i64 8
  %421 = bitcast i16* %420 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %421, align 2, !alias.scope !58, !noalias !55
  %422 = or i64 %408, 16
  %423 = getelementptr i16, i16* %382, i64 %422
  %424 = getelementptr i8, i8* %2, i64 %422
  %425 = bitcast i8* %424 to <8 x i8>*
  %426 = load <8 x i8>, <8 x i8>* %425, align 1, !alias.scope !55
  %427 = getelementptr i8, i8* %424, i64 8
  %428 = bitcast i8* %427 to <8 x i8>*
  %429 = load <8 x i8>, <8 x i8>* %428, align 1, !alias.scope !55
  %430 = sext <8 x i8> %426 to <8 x i16>
  %431 = sext <8 x i8> %429 to <8 x i16>
  %432 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %430, <8 x i16>* %432, align 2, !alias.scope !58, !noalias !55
  %433 = getelementptr i16, i16* %423, i64 8
  %434 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %431, <8 x i16>* %434, align 2, !alias.scope !58, !noalias !55
  %435 = add i64 %408, 32
  %436 = add i64 %409, -2
  %437 = icmp eq i64 %436, 0
  br i1 %437, label %438, label %407, !llvm.loop !60

438:                                              ; preds = %407, %396
  %439 = phi i64 [ 0, %396 ], [ %435, %407 ]
  %440 = icmp eq i64 %403, 0
  br i1 %440, label %454, label %441

441:                                              ; preds = %438
  %442 = getelementptr i16, i16* %382, i64 %439
  %443 = getelementptr i8, i8* %2, i64 %439
  %444 = bitcast i8* %443 to <8 x i8>*
  %445 = load <8 x i8>, <8 x i8>* %444, align 1, !alias.scope !55
  %446 = getelementptr i8, i8* %443, i64 8
  %447 = bitcast i8* %446 to <8 x i8>*
  %448 = load <8 x i8>, <8 x i8>* %447, align 1, !alias.scope !55
  %449 = sext <8 x i8> %445 to <8 x i16>
  %450 = sext <8 x i8> %448 to <8 x i16>
  %451 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %449, <8 x i16>* %451, align 2, !alias.scope !58, !noalias !55
  %452 = getelementptr i16, i16* %442, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %450, <8 x i16>* %453, align 2, !alias.scope !58, !noalias !55
  br label %454

454:                                              ; preds = %438, %441
  %455 = icmp eq i64 %384, %397
  br i1 %455, label %467, label %456

456:                                              ; preds = %454, %386, %381
  %457 = phi i16* [ %382, %386 ], [ %382, %381 ], [ %398, %454 ]
  %458 = phi i8* [ %2, %386 ], [ %2, %381 ], [ %399, %454 ]
  br label %459

459:                                              ; preds = %456, %459
  %460 = phi i16* [ %464, %459 ], [ %457, %456 ]
  %461 = phi i8* [ %465, %459 ], [ %458, %456 ]
  %462 = load i8, i8* %461, align 1
  %463 = sext i8 %462 to i16
  store i16 %463, i16* %460, align 2
  %464 = getelementptr inbounds i16, i16* %460, i64 1
  %465 = getelementptr inbounds i8, i8* %461, i64 1
  %466 = icmp eq i8* %465, %3
  br i1 %466, label %467, label %459, !llvm.loop !61

467:                                              ; preds = %459, %454, %378, %16
  %468 = load i8, i8* %8, align 1
  %469 = icmp slt i8 %468, 0
  br i1 %469, label %470, label %473

470:                                              ; preds = %467
  %471 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %472 = load i16*, i16** %471, align 8
  br label %475

473:                                              ; preds = %467
  %474 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  br label %475

475:                                              ; preds = %473, %470
  %476 = phi i16* [ %472, %470 ], [ %474, %473 ]
  %477 = getelementptr inbounds i16, i16* %476, i64 %20
  ret i16* %477
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN4base14OffsetAdjuster10AdjustmentC1Emmm(%"struct.base::OffsetAdjuster::Adjustment"*, i64, i64, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN13url_formatter12_GLOBAL__N_124AppendFormattedComponentERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3url9ComponentERKNS0_24AppendComponentTransformEPNS2_IDsNS3_IDsEENS5_IDsEEEEPSB_PNS1_6vectorIN4base14OffsetAdjuster10AdjustmentENS5_ISP_EEEE(%"class.std::__1::basic_string"* dereferenceable(24), %"struct.url::Component"* nocapture readonly dereferenceable(8), %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* dereferenceable(8), %"class.std::__1::basic_string.4"*, %"struct.url::Component"*, %"class.std::__1::vector"*) unnamed_addr #0 {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::allocator", align 1
  %9 = alloca %"class.std::__1::vector", align 8
  %10 = alloca %"class.std::__1::basic_string.4", align 8
  %11 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %295

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %1, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = bitcast %"class.std::__1::basic_string.4"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %18, i64 0, i32 1, i32 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  br label %27

25:                                               ; preds = %14
  %26 = zext i8 %20 to i64
  br label %27

27:                                               ; preds = %22, %25
  %28 = phi i64 [ %24, %22 ], [ %26, %25 ]
  %29 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #14
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = sext i32 %12 to i64
  %32 = getelementptr inbounds %"class.std::__1::allocator", %"class.std::__1::allocator"* %8, i64 0, i32 0
  %33 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %32) #14
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %7, %"class.std::__1::basic_string"* dereferenceable(24) %0, i64 %17, i64 %31, %"class.std::__1::allocator"* nonnull dereferenceable(1) %8) #14
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %32) #14
  %34 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #14
  %35 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 24, i1 false) #14
  %37 = bitcast %"class.std::__1::basic_string.4"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #14
  %38 = bitcast %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* %2 to void (%"class.std::__1::basic_string.4"*, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"*, %"class.std::__1::basic_string"*, %"class.std::__1::vector"*)***
  %39 = load void (%"class.std::__1::basic_string.4"*, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"*, %"class.std::__1::basic_string"*, %"class.std::__1::vector"*)**, void (%"class.std::__1::basic_string.4"*, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"*, %"class.std::__1::basic_string"*, %"class.std::__1::vector"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.std::__1::basic_string.4"*, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"*, %"class.std::__1::basic_string"*, %"class.std::__1::vector"*)*, void (%"class.std::__1::basic_string.4"*, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"*, %"class.std::__1::basic_string"*, %"class.std::__1::vector"*)** %39, i64 2
  %41 = load void (%"class.std::__1::basic_string.4"*, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"*, %"class.std::__1::basic_string"*, %"class.std::__1::vector"*)*, void (%"class.std::__1::basic_string.4"*, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"*, %"class.std::__1::basic_string"*, %"class.std::__1::vector"*)** %40, align 8
  call void %41(%"class.std::__1::basic_string.4"* nonnull sret %10, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7, %"class.std::__1::vector"* nonnull %9) #14
  %42 = bitcast %"class.std::__1::basic_string.4"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %43 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %42, i64 0, i32 1, i32 1
  %44 = load i8, i8* %43, align 1
  %45 = icmp slt i8 %44, 0
  %46 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i16*, i16** %46, align 8
  %48 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"class.std::__1::basic_string.4"* %10 to i16*
  %51 = zext i8 %44 to i64
  %52 = select i1 %45, i16* %47, i16* %50
  %53 = select i1 %45, i64 %49, i64 %51
  %54 = load i8, i8* %19, align 1
  %55 = icmp slt i8 %54, 0
  br i1 %55, label %56, label %63

56:                                               ; preds = %27
  %57 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %58 = load i64, i64* %57, align 8
  %59 = and i64 %58, 9223372036854775807
  %60 = add nsw i64 %59, -1
  %61 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  br label %65

63:                                               ; preds = %27
  %64 = zext i8 %54 to i64
  br label %65

65:                                               ; preds = %63, %56
  %66 = phi i64 [ %60, %56 ], [ 10, %63 ]
  %67 = phi i64 [ %62, %56 ], [ %64, %63 ]
  %68 = sub i64 %66, %67
  %69 = icmp ult i64 %68, %53
  br i1 %69, label %234, label %70

70:                                               ; preds = %65
  %71 = icmp eq i64 %53, 0
  br i1 %71, label %237, label %72

72:                                               ; preds = %70
  br i1 %55, label %73, label %76

73:                                               ; preds = %72
  %74 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load i16*, i16** %74, align 8
  br label %78

76:                                               ; preds = %72
  %77 = bitcast %"class.std::__1::basic_string.4"* %3 to i16*
  br label %78

78:                                               ; preds = %76, %73
  %79 = phi i16* [ %75, %73 ], [ %77, %76 ]
  %80 = getelementptr inbounds i16, i16* %79, i64 %67
  %81 = icmp ult i64 %53, 16
  br i1 %81, label %171, label %82

82:                                               ; preds = %78
  %83 = add i64 %53, %67
  %84 = getelementptr i16, i16* %79, i64 %83
  %85 = getelementptr i16, i16* %52, i64 %53
  %86 = icmp ult i16* %80, %85
  %87 = icmp ult i16* %52, %84
  %88 = and i1 %86, %87
  br i1 %88, label %171, label %89

89:                                               ; preds = %82
  %90 = and i64 %53, -16
  %91 = sub i64 %53, %90
  %92 = getelementptr i16, i16* %52, i64 %90
  %93 = getelementptr i16, i16* %80, i64 %90
  %94 = add i64 %90, -16
  %95 = lshr exact i64 %94, 4
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 3
  %98 = icmp ult i64 %94, 48
  br i1 %98, label %150, label %99

99:                                               ; preds = %89
  %100 = sub nsw i64 %96, %97
  br label %101

101:                                              ; preds = %101, %99
  %102 = phi i64 [ 0, %99 ], [ %147, %101 ]
  %103 = phi i64 [ %100, %99 ], [ %148, %101 ]
  %104 = getelementptr i16, i16* %52, i64 %102
  %105 = getelementptr i16, i16* %80, i64 %102
  %106 = bitcast i16* %104 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !62
  %108 = getelementptr i16, i16* %104, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !62
  %111 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %111, align 2, !alias.scope !65, !noalias !62
  %112 = getelementptr i16, i16* %105, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %113, align 2, !alias.scope !65, !noalias !62
  %114 = or i64 %102, 16
  %115 = getelementptr i16, i16* %52, i64 %114
  %116 = getelementptr i16, i16* %80, i64 %114
  %117 = bitcast i16* %115 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2, !alias.scope !62
  %119 = getelementptr i16, i16* %115, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 2, !alias.scope !62
  %122 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %122, align 2, !alias.scope !65, !noalias !62
  %123 = getelementptr i16, i16* %116, i64 8
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %124, align 2, !alias.scope !65, !noalias !62
  %125 = or i64 %102, 32
  %126 = getelementptr i16, i16* %52, i64 %125
  %127 = getelementptr i16, i16* %80, i64 %125
  %128 = bitcast i16* %126 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !62
  %130 = getelementptr i16, i16* %126, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !62
  %133 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %133, align 2, !alias.scope !65, !noalias !62
  %134 = getelementptr i16, i16* %127, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %135, align 2, !alias.scope !65, !noalias !62
  %136 = or i64 %102, 48
  %137 = getelementptr i16, i16* %52, i64 %136
  %138 = getelementptr i16, i16* %80, i64 %136
  %139 = bitcast i16* %137 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !62
  %141 = getelementptr i16, i16* %137, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !62
  %144 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %144, align 2, !alias.scope !65, !noalias !62
  %145 = getelementptr i16, i16* %138, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %146, align 2, !alias.scope !65, !noalias !62
  %147 = add i64 %102, 64
  %148 = add i64 %103, -4
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %101, !llvm.loop !67

150:                                              ; preds = %101, %89
  %151 = phi i64 [ 0, %89 ], [ %147, %101 ]
  %152 = icmp eq i64 %97, 0
  br i1 %152, label %169, label %153

153:                                              ; preds = %150, %153
  %154 = phi i64 [ %166, %153 ], [ %151, %150 ]
  %155 = phi i64 [ %167, %153 ], [ %97, %150 ]
  %156 = getelementptr i16, i16* %52, i64 %154
  %157 = getelementptr i16, i16* %80, i64 %154
  %158 = bitcast i16* %156 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2, !alias.scope !62
  %160 = getelementptr i16, i16* %156, i64 8
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2, !alias.scope !62
  %163 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %163, align 2, !alias.scope !65, !noalias !62
  %164 = getelementptr i16, i16* %157, i64 8
  %165 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %165, align 2, !alias.scope !65, !noalias !62
  %166 = add i64 %154, 16
  %167 = add i64 %155, -1
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %153, !llvm.loop !68

169:                                              ; preds = %153, %150
  %170 = icmp eq i64 %53, %90
  br i1 %170, label %224, label %171

171:                                              ; preds = %169, %82, %78
  %172 = phi i64 [ %53, %82 ], [ %53, %78 ], [ %91, %169 ]
  %173 = phi i16* [ %52, %82 ], [ %52, %78 ], [ %92, %169 ]
  %174 = phi i16* [ %80, %82 ], [ %80, %78 ], [ %93, %169 ]
  %175 = add i64 %172, -1
  %176 = and i64 %172, 7
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %189, label %178

178:                                              ; preds = %171, %178
  %179 = phi i64 [ %184, %178 ], [ %172, %171 ]
  %180 = phi i16* [ %186, %178 ], [ %173, %171 ]
  %181 = phi i16* [ %185, %178 ], [ %174, %171 ]
  %182 = phi i64 [ %187, %178 ], [ %176, %171 ]
  %183 = load i16, i16* %180, align 2
  store i16 %183, i16* %181, align 2
  %184 = add i64 %179, -1
  %185 = getelementptr inbounds i16, i16* %181, i64 1
  %186 = getelementptr inbounds i16, i16* %180, i64 1
  %187 = add i64 %182, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %178, !llvm.loop !69

189:                                              ; preds = %178, %171
  %190 = phi i64 [ %172, %171 ], [ %184, %178 ]
  %191 = phi i16* [ %173, %171 ], [ %186, %178 ]
  %192 = phi i16* [ %174, %171 ], [ %185, %178 ]
  %193 = icmp ult i64 %175, 7
  br i1 %193, label %224, label %194

194:                                              ; preds = %189, %194
  %195 = phi i64 [ %220, %194 ], [ %190, %189 ]
  %196 = phi i16* [ %222, %194 ], [ %191, %189 ]
  %197 = phi i16* [ %221, %194 ], [ %192, %189 ]
  %198 = load i16, i16* %196, align 2
  store i16 %198, i16* %197, align 2
  %199 = getelementptr inbounds i16, i16* %197, i64 1
  %200 = getelementptr inbounds i16, i16* %196, i64 1
  %201 = load i16, i16* %200, align 2
  store i16 %201, i16* %199, align 2
  %202 = getelementptr inbounds i16, i16* %197, i64 2
  %203 = getelementptr inbounds i16, i16* %196, i64 2
  %204 = load i16, i16* %203, align 2
  store i16 %204, i16* %202, align 2
  %205 = getelementptr inbounds i16, i16* %197, i64 3
  %206 = getelementptr inbounds i16, i16* %196, i64 3
  %207 = load i16, i16* %206, align 2
  store i16 %207, i16* %205, align 2
  %208 = getelementptr inbounds i16, i16* %197, i64 4
  %209 = getelementptr inbounds i16, i16* %196, i64 4
  %210 = load i16, i16* %209, align 2
  store i16 %210, i16* %208, align 2
  %211 = getelementptr inbounds i16, i16* %197, i64 5
  %212 = getelementptr inbounds i16, i16* %196, i64 5
  %213 = load i16, i16* %212, align 2
  store i16 %213, i16* %211, align 2
  %214 = getelementptr inbounds i16, i16* %197, i64 6
  %215 = getelementptr inbounds i16, i16* %196, i64 6
  %216 = load i16, i16* %215, align 2
  store i16 %216, i16* %214, align 2
  %217 = getelementptr inbounds i16, i16* %197, i64 7
  %218 = getelementptr inbounds i16, i16* %196, i64 7
  %219 = load i16, i16* %218, align 2
  store i16 %219, i16* %217, align 2
  %220 = add i64 %195, -8
  %221 = getelementptr inbounds i16, i16* %197, i64 8
  %222 = getelementptr inbounds i16, i16* %196, i64 8
  %223 = icmp eq i64 %220, 0
  br i1 %223, label %224, label %194, !llvm.loop !70

224:                                              ; preds = %189, %194, %169
  %225 = add i64 %67, %53
  %226 = load i8, i8* %19, align 1
  %227 = icmp slt i8 %226, 0
  br i1 %227, label %228, label %230

228:                                              ; preds = %224
  %229 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %225, i64* %229, align 8
  br label %232

230:                                              ; preds = %224
  %231 = trunc i64 %225 to i8
  store i8 %231, i8* %19, align 1
  br label %232

232:                                              ; preds = %230, %228
  %233 = getelementptr inbounds i16, i16* %79, i64 %225
  store i16 0, i16* %233, align 2
  br label %237

234:                                              ; preds = %65
  %235 = add i64 %67, %53
  %236 = sub i64 %235, %66
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.4"* %3, i64 %66, i64 %236, i64 %67, i64 %67, i64 0, i64 %53, i16* %52) #14
  br label %237

237:                                              ; preds = %70, %232, %234
  %238 = load i8, i8* %43, align 1
  %239 = icmp slt i8 %238, 0
  br i1 %239, label %240, label %243

240:                                              ; preds = %237
  %241 = bitcast %"class.std::__1::basic_string.4"* %10 to i8**
  %242 = load i8*, i8** %241, align 8
  call void @_ZdlPv(i8* %242) #15
  br label %243

243:                                              ; preds = %237, %240
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #14
  %244 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %35, align 8
  %245 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %36, align 8
  %246 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %244, %245
  br i1 %246, label %247, label %250

247:                                              ; preds = %250, %243
  %248 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %244, %243 ], [ %255, %250 ]
  %249 = icmp eq %"class.std::__1::vector"* %5, null
  br i1 %249, label %263, label %258

250:                                              ; preds = %243, %250
  %251 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %255, %250 ], [ %244, %243 ]
  %252 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %251, i64 0, i32 0
  %253 = load i64, i64* %252, align 8
  %254 = add i64 %253, %17
  store i64 %254, i64* %252, align 8
  %255 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %251, i64 1
  %256 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %36, align 8
  %257 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %255, %256
  br i1 %257, label %247, label %250

258:                                              ; preds = %247
  %259 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %260 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %259, align 8
  %261 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %35, align 8
  %262 = call %"struct.base::OffsetAdjuster::Adjustment"* @_ZNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS_9allocatorIS3_EEE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_(%"class.std::__1::vector"* nonnull %5, %"struct.base::OffsetAdjuster::Adjustment"* %260, %"struct.base::OffsetAdjuster::Adjustment"* %261, %"struct.base::OffsetAdjuster::Adjustment"* %248)
  br label %263

263:                                              ; preds = %247, %258
  %264 = icmp eq %"struct.url::Component"* %4, null
  br i1 %264, label %280, label %265

265:                                              ; preds = %263
  %266 = trunc i64 %28 to i32
  %267 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %4, i64 0, i32 0
  store i32 %266, i32* %267, align 4
  %268 = load i8, i8* %19, align 1
  %269 = icmp slt i8 %268, 0
  br i1 %269, label %270, label %273

270:                                              ; preds = %265
  %271 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %272 = load i64, i64* %271, align 8
  br label %275

273:                                              ; preds = %265
  %274 = zext i8 %268 to i64
  br label %275

275:                                              ; preds = %270, %273
  %276 = phi i64 [ %272, %270 ], [ %274, %273 ]
  %277 = sub i64 %276, %28
  %278 = trunc i64 %277 to i32
  %279 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %4, i64 0, i32 1
  store i32 %278, i32* %279, align 4
  br label %280

280:                                              ; preds = %263, %275
  %281 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %35, align 8
  %282 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %281, null
  br i1 %282, label %287, label %283

283:                                              ; preds = %280
  %284 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %281 to i64
  %285 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %36 to i64*
  store i64 %284, i64* %285, align 8
  %286 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %281 to i8*
  call void @_ZdlPv(i8* %286) #15
  br label %287

287:                                              ; preds = %280, %283
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #14
  %288 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %289 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %288, i64 0, i32 1, i32 0
  %290 = load i8, i8* %289, align 1
  %291 = icmp slt i8 %290, 0
  br i1 %291, label %292, label %294

292:                                              ; preds = %287
  %293 = load i8*, i8** %30, align 8
  call void @_ZdlPv(i8* %293) #15
  br label %294

294:                                              ; preds = %287, %292
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #14
  br label %300

295:                                              ; preds = %6
  %296 = icmp eq %"struct.url::Component"* %4, null
  br i1 %296, label %300, label %297

297:                                              ; preds = %295
  %298 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %4, i64 0, i32 0
  store i32 0, i32* %298, align 4
  %299 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %4, i64 0, i32 1
  store i32 -1, i32* %299, align 4
  br label %300

300:                                              ; preds = %295, %297, %294
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN13url_formatter12_GLOBAL__N_124AppendComponentTransformD2Ev(%"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

declare zeroext i1 @_ZNK4GURL10IsStandardEv(%class.GURL*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13url_formatter21CanStripTrailingSlashERK4GURL(%class.GURL* dereferenceable(120)) local_unnamed_addr #0 {
  %2 = tail call zeroext i1 @_ZNK4GURL10IsStandardEv(%class.GURL* %0) #14
  br i1 %2, label %3, label %36

3:                                                ; preds = %1
  %4 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0)) #14
  %5 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0), i64 %4) #14
  br i1 %5, label %36, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0), i64 %7) #14
  br i1 %8, label %36, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 2, i32 6, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, -1
  br i1 %12, label %36, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 2, i32 7, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, -1
  br i1 %16, label %36, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 2, i32 5, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %36

21:                                               ; preds = %17
  %22 = bitcast %class.GURL* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  %26 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = bitcast %class.GURL* %0 to i8*
  %29 = select i1 %25, i8* %27, i8* %28
  %30 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 2, i32 5, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %29, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 47
  br label %36

36:                                               ; preds = %17, %21, %13, %9, %6, %3, %1
  %37 = phi i1 [ false, %13 ], [ false, %9 ], [ false, %6 ], [ false, %3 ], [ false, %1 ], [ %35, %21 ], [ false, %17 ]
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.base::OffsetAdjuster::Adjustment"* @_ZNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector"*, %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.std::__1::__split_buffer", align 8
  %5 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %9, align 8
  %11 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %8, %10
  %12 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %8 to i64
  %13 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %10 to i64
  br i1 %11, label %14, label %53

14:                                               ; preds = %3
  %15 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %8, %1
  br i1 %15, label %16, label %22

16:                                               ; preds = %14
  %17 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %1 to i8*
  %18 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false) #14
  %19 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %1, i64 1
  %20 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %19 to i64
  %21 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %7 to i64*
  store i64 %20, i64* %21, align 8
  br label %159

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %1, i64 1
  %24 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %23 to i64
  %25 = sub i64 %12, %24
  %26 = sdiv exact i64 %25, 24
  %27 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %1, i64 %26
  %28 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %7 to i64*
  %29 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %27, %8
  br i1 %29, label %42, label %32

30:                                               ; preds = %42
  %31 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %48 to i64
  br label %32

32:                                               ; preds = %30, %22
  %33 = phi i64 [ %31, %30 ], [ %12, %22 ]
  store i64 %33, i64* %28, align 8
  %34 = icmp eq i64 %25, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %32
  %36 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %1 to i8*
  br label %50

37:                                               ; preds = %32
  %38 = sdiv exact i64 %25, -24
  %39 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %8, i64 %38
  %40 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %39 to i8*
  %41 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 %25, i1 false) #14
  br label %50

42:                                               ; preds = %22, %42
  %43 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %48, %42 ], [ %8, %22 ]
  %44 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %47, %42 ], [ %27, %22 ]
  %45 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %43 to i8*
  %46 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 24, i1 false) #14
  %47 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %44, i64 1
  %48 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %43, i64 1
  %49 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %47, %8
  br i1 %49, label %42, label %30

50:                                               ; preds = %35, %37
  %51 = phi i8* [ %36, %35 ], [ %41, %37 ]
  %52 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 24, i1 false)
  br label %159

53:                                               ; preds = %3
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2
  %55 = bitcast %"struct.std::__1::__split_buffer"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %55) #14
  %56 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 0
  %57 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 1
  %58 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 2
  %59 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 3, i32 0, i32 0
  %60 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 3, i32 1, i32 0
  %61 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %7 to i64*
  %62 = bitcast %"class.std::__1::vector"* %0 to i64*
  %63 = bitcast %"struct.std::__1::__split_buffer"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 40, i1 false)
  %64 = load i64, i64* %62, align 8
  %65 = sub i64 %12, %64
  %66 = sdiv exact i64 %65, 24
  %67 = add nsw i64 %66, 1
  %68 = icmp ugt i64 %67, 768614336404564650
  br i1 %68, label %69, label %71

69:                                               ; preds = %53
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #16
  unreachable

71:                                               ; preds = %53
  %72 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %9 to i64*
  %73 = sub i64 %13, %64
  %74 = sdiv exact i64 %73, 24
  %75 = icmp ult i64 %74, 384307168202282325
  br i1 %75, label %80, label %76

76:                                               ; preds = %71
  %77 = sub i64 %5, %64
  %78 = sdiv exact i64 %77, 24
  store %"struct.base::OffsetAdjuster::Adjustment"* null, %"struct.base::OffsetAdjuster::Adjustment"** %59, align 8
  %79 = bitcast %"class.std::__1::allocator.16"** %60 to %"class.std::__1::__compressed_pair.13"**
  store %"class.std::__1::__compressed_pair.13"* %54, %"class.std::__1::__compressed_pair.13"** %79, align 8
  br label %88

80:                                               ; preds = %71
  %81 = shl nsw i64 %74, 1
  %82 = icmp ult i64 %81, %67
  %83 = select i1 %82, i64 %67, i64 %81
  %84 = sub i64 %5, %64
  %85 = sdiv exact i64 %84, 24
  store %"struct.base::OffsetAdjuster::Adjustment"* null, %"struct.base::OffsetAdjuster::Adjustment"** %59, align 8
  %86 = bitcast %"class.std::__1::allocator.16"** %60 to %"class.std::__1::__compressed_pair.13"**
  store %"class.std::__1::__compressed_pair.13"* %54, %"class.std::__1::__compressed_pair.13"** %86, align 8
  %87 = icmp eq i64 %83, 0
  br i1 %87, label %94, label %88

88:                                               ; preds = %80, %76
  %89 = phi i64 [ %78, %76 ], [ %85, %80 ]
  %90 = phi i64 [ 768614336404564650, %76 ], [ %83, %80 ]
  %91 = mul i64 %90, 24
  %92 = tail call i8* @_Znwm(i64 %91) #15
  %93 = bitcast i8* %92 to %"struct.base::OffsetAdjuster::Adjustment"*
  br label %94

94:                                               ; preds = %80, %88
  %95 = phi i64 [ %89, %88 ], [ %85, %80 ]
  %96 = phi i64 [ %90, %88 ], [ 0, %80 ]
  %97 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %93, %88 ], [ null, %80 ]
  store %"struct.base::OffsetAdjuster::Adjustment"* %97, %"struct.base::OffsetAdjuster::Adjustment"** %56, align 8
  %98 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %97, i64 %95
  store %"struct.base::OffsetAdjuster::Adjustment"* %98, %"struct.base::OffsetAdjuster::Adjustment"** %58, align 8
  store %"struct.base::OffsetAdjuster::Adjustment"* %98, %"struct.base::OffsetAdjuster::Adjustment"** %57, align 8
  %99 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %97, i64 %96
  store %"struct.base::OffsetAdjuster::Adjustment"* %99, %"struct.base::OffsetAdjuster::Adjustment"** %59, align 8
  call void @_ZNSt3__114__split_bufferIN4base14OffsetAdjuster10AdjustmentERNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"* nonnull %4, %"struct.base::OffsetAdjuster::Adjustment"* dereferenceable(24) %2)
  %100 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %57, align 8
  %101 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %6, align 8
  %102 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %101 to i64
  %103 = sub i64 %5, %102
  %104 = sdiv exact i64 %103, -24
  %105 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %100, i64 %104
  store %"struct.base::OffsetAdjuster::Adjustment"* %105, %"struct.base::OffsetAdjuster::Adjustment"** %57, align 8
  %106 = icmp sgt i64 %103, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %94
  %108 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %105 to i8*
  %109 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %101 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 %103, i1 false) #14
  br label %110

110:                                              ; preds = %107, %94
  %111 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %7, align 8
  %112 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %111, %1
  br i1 %112, label %113, label %117

113:                                              ; preds = %110
  %114 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %111 to i64
  %115 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %58 to i64*
  %116 = load i64, i64* %115, align 8
  br label %133

117:                                              ; preds = %110
  %118 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %58 to i8**
  %119 = load i8*, i8** %118, align 8
  br label %120

120:                                              ; preds = %120, %117
  %121 = phi i8* [ %119, %117 ], [ %128, %120 ]
  %122 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %1, %117 ], [ %124, %120 ]
  %123 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %122 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %123, i64 24, i1 false) #14
  %124 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %122, i64 1
  %125 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %58, align 8
  %126 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %125, i64 1
  store %"struct.base::OffsetAdjuster::Adjustment"* %126, %"struct.base::OffsetAdjuster::Adjustment"** %58, align 8
  %127 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %124, %111
  %128 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %126 to i8*
  br i1 %127, label %129, label %120

129:                                              ; preds = %120
  %130 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %126 to i64
  %131 = load i64, i64* %61, align 8
  %132 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %58 to i64*
  br label %133

133:                                              ; preds = %113, %129
  %134 = phi i64* [ %115, %113 ], [ %132, %129 ]
  %135 = phi i64 [ %116, %113 ], [ %130, %129 ]
  %136 = phi i64 [ %114, %113 ], [ %131, %129 ]
  %137 = load i64, i64* %62, align 8
  %138 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %57 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %62, align 8
  store i64 %137, i64* %138, align 8
  store i64 %135, i64* %61, align 8
  store i64 %136, i64* %134, align 8
  %140 = load i64, i64* %72, align 8
  %141 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %59 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %72, align 8
  store i64 %140, i64* %141, align 8
  %143 = bitcast %"struct.std::__1::__split_buffer"* %4 to i64*
  store i64 %137, i64* %143, align 8
  %144 = inttoptr i64 %137 to %"struct.base::OffsetAdjuster::Adjustment"*
  %145 = inttoptr i64 %136 to %"struct.base::OffsetAdjuster::Adjustment"*
  %146 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %145, %144
  br i1 %146, label %154, label %147

147:                                              ; preds = %133
  %148 = getelementptr %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %145, i64 -1, i32 0
  %149 = ptrtoint i64* %148 to i64
  %150 = sub i64 %149, %137
  %151 = udiv i64 %150, 24
  %152 = xor i64 %151, -1
  %153 = getelementptr %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %145, i64 %152
  store %"struct.base::OffsetAdjuster::Adjustment"* %153, %"struct.base::OffsetAdjuster::Adjustment"** %58, align 8
  br label %154

154:                                              ; preds = %147, %133
  %155 = icmp eq i64 %137, 0
  br i1 %155, label %158, label %156

156:                                              ; preds = %154
  %157 = inttoptr i64 %137 to i8*
  call void @_ZdlPv(i8* %157) #15
  br label %158

158:                                              ; preds = %154, %156
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %55) #14
  br label %159

159:                                              ; preds = %16, %50, %158
  %160 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %1, %16 ], [ %1, %50 ], [ %100, %158 ]
  ret %"struct.base::OffsetAdjuster::Adjustment"* %160
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter19AppendFormattedHostERK4GURLPNSt3__112basic_stringIDsNS3_11char_traitsIDsEENS3_9allocatorIDsEEEE(%class.GURL* dereferenceable(120), %"class.std::__1::basic_string.4"*) local_unnamed_addr #0 {
  %3 = alloca %"class.url_formatter::(anonymous namespace)::HostComponentTransform", align 8
  %4 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 0
  %5 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 2, i32 3
  %6 = bitcast %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::HostComponentTransform", %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %3, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN13url_formatter12_GLOBAL__N_122HostComponentTransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::HostComponentTransform", %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %3, i64 0, i32 1
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::HostComponentTransform", %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %3, i64 0, i32 0
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_124AppendFormattedComponentERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN3url9ComponentERKNS0_24AppendComponentTransformEPNS2_IDsNS3_IDsEENS5_IDsEEEEPSB_PNS1_6vectorIN4base14OffsetAdjuster10AdjustmentENS5_ISP_EEEE(%"class.std::__1::basic_string"* dereferenceable(24) %4, %"struct.url::Component"* dereferenceable(8) %5, %"class.url_formatter::(anonymous namespace)::AppendComponentTransform"* nonnull dereferenceable(8) %9, %"class.std::__1::basic_string.4"* %1, %"struct.url::Component"* null, %"class.std::__1::vector"* null)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter29UnsafeIDNToUnicodeWithDetailsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"struct.url_formatter::IDNConversionResult"* noalias sret, i8*, i64) local_unnamed_addr #0 {
  tail call fastcc void @_ZN13url_formatter12_GLOBAL__N_131IDNToUnicodeWithAdjustmentsImplEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS3_6vectorINS1_14OffsetAdjuster10AdjustmentENS3_9allocatorIS9_EEEEb(%"struct.url_formatter::IDNConversionResult"* sret %0, i8* %1, i64 %2, %"class.std::__1::vector"* null, i1 zeroext true) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter12IDNToUnicodeEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string.4"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca %"struct.url_formatter::IDNConversionResult", align 8
  %5 = bitcast %"struct.url_formatter::IDNConversionResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %5) #14
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_131IDNToUnicodeWithAdjustmentsImplEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS3_6vectorINS1_14OffsetAdjuster10AdjustmentENS3_9allocatorIS9_EEEEb(%"struct.url_formatter::IDNConversionResult"* nonnull sret %4, i8* %1, i64 %2, %"class.std::__1::vector"* null, i1 zeroext false) #14
  %6 = bitcast %"class.std::__1::basic_string.4"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %5, i64 24, i1 false) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #14
  %7 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %4, i64 0, i32 3
  %8 = bitcast %"struct.url_formatter::TopDomainEntry"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %22

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"struct.url_formatter::TopDomainEntry", %"struct.url_formatter::TopDomainEntry"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @_ZdlPv(i8* %14) #15
  %15 = bitcast %"struct.url_formatter::IDNConversionResult"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %15, i64 0, i32 1, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %12
  %20 = bitcast %"struct.url_formatter::IDNConversionResult"* %4 to i8**
  %21 = load i8*, i8** %20, align 8
  call void @_ZdlPv(i8* %21) #15
  br label %22

22:                                               ; preds = %3, %12, %19
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %5) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter8StripWWWERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  %10 = load i8, i8* %8, align 1
  %11 = icmp slt i8 %10, 0
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %15 = select i1 %11, i8* %13, i8* %14
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = zext i8 %10 to i64
  %19 = select i1 %11, i64 %17, i64 %18
  call void @_ZN3net27registry_controlled_domains20GetDomainAndRegistryEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEENS0_21PrivateRegistryFilterE(%"class.std::__1::basic_string"* nonnull sret %3, i8* %15, i64 %19, i32 1) #14
  %20 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = load i64, i64* %6, align 8
  %25 = zext i8 %22 to i64
  %26 = select i1 %23, i64 %24, i64 %25
  %27 = icmp eq i64 %26, 0
  %28 = load i8, i8* %8, align 1
  %29 = icmp slt i8 %28, 0
  br i1 %27, label %30, label %36

30:                                               ; preds = %2
  br i1 %29, label %33, label %31

31:                                               ; preds = %30
  %32 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %14, i64 24, i1 false) #14
  br label %58

33:                                               ; preds = %30
  %34 = load i8*, i8** %12, align 8
  %35 = load i64, i64* %16, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %34, i64 %35) #14
  br label %58

36:                                               ; preds = %2
  %37 = load i64, i64* %16, align 8
  %38 = zext i8 %28 to i64
  %39 = select i1 %29, i64 %37, i64 %38
  %40 = sub i64 %39, %26
  %41 = icmp ugt i64 %40, 3
  br i1 %41, label %42, label %50

42:                                               ; preds = %36
  %43 = load i8*, i8** %12, align 8
  %44 = select i1 %29, i8* %43, i8* %14
  %45 = call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8* %44, i64 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZN13url_formatter12_GLOBAL__N_14kWwwE, i64 0, i64 0), i64 4, i32 0) #14
  br i1 %45, label %48, label %46

46:                                               ; preds = %42
  %47 = load i8, i8* %8, align 1
  br label %50

48:                                               ; preds = %42
  %49 = bitcast %"class.std::__1::basic_string"* %1 to %"class.std::__1::allocator"*
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"* %0, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64 4, i64 -1, %"class.std::__1::allocator"* dereferenceable(1) %49) #14
  br label %58

50:                                               ; preds = %46, %36
  %51 = phi i8 [ %47, %46 ], [ %28, %36 ]
  %52 = icmp slt i8 %51, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %50
  %54 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %14, i64 24, i1 false) #14
  br label %58

55:                                               ; preds = %50
  %56 = load i8*, i8** %12, align 8
  %57 = load i64, i64* %16, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %56, i64 %57) #14
  br label %58

58:                                               ; preds = %55, %53, %33, %31, %48
  %59 = load i8, i8* %21, align 1
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %58
  %62 = load i8*, i8** %5, align 8
  call void @_ZdlPv(i8* %62) #15
  br label %63

63:                                               ; preds = %58, %61
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #14
  ret void
}

declare void @_ZN3net27registry_controlled_domains20GetDomainAndRegistryEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEENS0_21PrivateRegistryFilterE(%"class.std::__1::basic_string"* sret, i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter25StripWWWFromHostComponentERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN3url9ComponentE(%"class.std::__1::basic_string"* dereferenceable(24), %"struct.url::Component"* nocapture) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #14
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %1, i64 0, i32 0
  %9 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  %10 = load i32, i32* %8, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::allocator"*
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %3, %"class.std::__1::basic_string"* dereferenceable(24) %0, i64 %11, i64 %14, %"class.std::__1::allocator"* dereferenceable(1) %15) #14
  %16 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #14
  call void @_ZN13url_formatter8StripWWWERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3)
  %17 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = zext i8 %19 to i64
  %24 = select i1 %20, i64 %22, i64 %23
  %25 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  %29 = load i64, i64* %7, align 8
  %30 = zext i8 %27 to i64
  %31 = select i1 %28, i64 %29, i64 %30
  %32 = icmp eq i64 %24, %31
  br i1 %32, label %33, label %60

33:                                               ; preds = %2
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = select i1 %20, i8* %35, i8* %16
  %37 = load i8*, i8** %6, align 8
  %38 = select i1 %28, i8* %37, i8* %5
  %39 = icmp eq i64 %24, 0
  br i1 %20, label %47, label %40

40:                                               ; preds = %33
  br i1 %39, label %46, label %41

41:                                               ; preds = %40
  %42 = ptrtoint i8* %35 to i64
  %43 = trunc i64 %42 to i8
  %44 = load i8, i8* %38, align 1
  %45 = icmp eq i8 %44, %43
  br i1 %45, label %48, label %60

46:                                               ; preds = %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #14
  br label %75

47:                                               ; preds = %33
  br i1 %39, label %74, label %65

48:                                               ; preds = %41, %55
  %49 = phi i64 [ %52, %55 ], [ %23, %41 ]
  %50 = phi i8* [ %53, %55 ], [ %16, %41 ]
  %51 = phi i8* [ %56, %55 ], [ %38, %41 ]
  %52 = add i64 %49, -1
  %53 = getelementptr inbounds i8, i8* %50, i64 1
  %54 = icmp eq i64 %52, 0
  br i1 %54, label %60, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds i8, i8* %51, i64 1
  %57 = load i8, i8* %53, align 1
  %58 = load i8, i8* %56, align 1
  %59 = icmp eq i8 %57, %58
  br i1 %59, label %48, label %60

60:                                               ; preds = %48, %55, %41, %2
  %61 = phi i1 [ false, %2 ], [ false, %41 ], [ false, %55 ], [ true, %48 ]
  br i1 %20, label %62, label %68

62:                                               ; preds = %60
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  call void @_ZdlPv(i8* %64) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #14
  br i1 %61, label %75, label %69

65:                                               ; preds = %47
  %66 = call i32 @bcmp(i8* %36, i8* %38, i64 %24) #14
  %67 = icmp eq i32 %66, 0
  call void @_ZdlPv(i8* %35) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #14
  br i1 %67, label %75, label %69

68:                                               ; preds = %60
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #14
  br i1 %61, label %75, label %69

69:                                               ; preds = %62, %65, %68
  %70 = load i32, i32* %8, align 4
  %71 = add i32 %70, 4
  store i32 %71, i32* %8, align 4
  %72 = load i32, i32* %12, align 4
  %73 = add i32 %72, -4
  store i32 %73, i32* %12, align 4
  br label %75

74:                                               ; preds = %47
  call void @_ZdlPv(i8* %35) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #14
  br label %75

75:                                               ; preds = %62, %74, %65, %46, %68, %69
  %76 = load i8, i8* %26, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %75
  %79 = load i8*, i8** %6, align 8
  call void @_ZdlPv(i8* %79) #15
  br label %80

80:                                               ; preds = %75, %78
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter12GetSkeletonsERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.base::internal::flat_tree"* noalias sret, %"class.std::__1::basic_string.4"* dereferenceable(24)) local_unnamed_addr #0 {
  %3 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0) acquire, align 8
  %4 = icmp ugt i64 %3, 1
  br i1 %4, label %10, label %5

5:                                                ; preds = %2
  %6 = tail call zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0)) #14
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @_ZN13url_formatter15IDNSpoofCheckerC1Ev(%"class.url_formatter::IDNSpoofChecker"* bitcast (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to %"class.url_formatter::IDNSpoofChecker"*)) #14
  tail call void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0), i64 ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to i64), void (i8*)* null, i8* bitcast (%"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE to i8*)) #14
  br label %10

8:                                                ; preds = %5
  %9 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0) acquire, align 8
  br label %10

10:                                               ; preds = %2, %7, %8
  %11 = phi i64 [ %3, %2 ], [ ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to i64), %7 ], [ %9, %8 ]
  %12 = inttoptr i64 %11 to %"class.url_formatter::IDNSpoofChecker"*
  %13 = bitcast %"class.std::__1::basic_string.4"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %13, i64 0, i32 1, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  %17 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i16*, i16** %17, align 8
  %19 = bitcast %"class.std::__1::basic_string.4"* %1 to i16*
  %20 = select i1 %16, i16* %18, i16* %19
  %21 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = zext i8 %15 to i64
  %24 = select i1 %16, i64 %22, i64 %23
  tail call void @_ZNK13url_formatter15IDNSpoofChecker12GetSkeletonsEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.base::internal::flat_tree"* sret %0, %"class.url_formatter::IDNSpoofChecker"* %12, i16* %20, i64 %24) #14
  ret void
}

declare void @_ZNK13url_formatter15IDNSpoofChecker12GetSkeletonsEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.base::internal::flat_tree"* sret, %"class.url_formatter::IDNSpoofChecker"*, i16*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13url_formatter26LookupSkeletonInTopDomainsERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_12SkeletonTypeE(%"struct.url_formatter::TopDomainEntry"* noalias sret, %"class.std::__1::basic_string"* dereferenceable(24), i32) local_unnamed_addr #0 {
  %4 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0) acquire, align 8
  %5 = icmp ugt i64 %4, 1
  br i1 %5, label %11, label %6

6:                                                ; preds = %3
  %7 = tail call zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0)) #14
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  tail call void @_ZN13url_formatter15IDNSpoofCheckerC1Ev(%"class.url_formatter::IDNSpoofChecker"* bitcast (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to %"class.url_formatter::IDNSpoofChecker"*)) #14
  tail call void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0), i64 ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to i64), void (i8*)* null, i8* bitcast (%"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE to i8*)) #14
  br label %11

9:                                                ; preds = %6
  %10 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0) acquire, align 8
  br label %11

11:                                               ; preds = %3, %8, %9
  %12 = phi i64 [ %4, %3 ], [ ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to i64), %8 ], [ %10, %9 ]
  %13 = inttoptr i64 %12 to %"class.url_formatter::IDNSpoofChecker"*
  tail call void @_ZN13url_formatter15IDNSpoofChecker26LookupSkeletonInTopDomainsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12SkeletonTypeE(%"struct.url_formatter::TopDomainEntry"* sret %0, %"class.url_formatter::IDNSpoofChecker"* %13, %"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2) #14
  ret void
}

declare void @_ZN13url_formatter15IDNSpoofChecker26LookupSkeletonInTopDomainsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12SkeletonTypeE(%"struct.url_formatter::TopDomainEntry"* sret, %"class.url_formatter::IDNSpoofChecker"*, %"class.std::__1::basic_string"* dereferenceable(24), i32) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare void @_ZN4GURLC1EN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #3

declare void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEELm18446744073709551615EEE(%"class.std::__1::basic_string.4"* sret, i64, %"class.base::BasicStringPiece.50"*) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24), i64, i64, %"class.std::__1::allocator"* dereferenceable(1)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.base::OffsetAdjuster::Adjustment"* @_ZNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS_9allocatorIS3_EEE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_(%"class.std::__1::vector"*, %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %2 to i64
  %8 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %3 to i64
  %9 = sub i64 %8, %7
  %10 = sdiv exact i64 %9, 24
  %11 = icmp sgt i64 %9, 0
  br i1 %11, label %12, label %154

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %16, align 8
  %18 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %17 to i64
  %19 = sub i64 %15, %18
  %20 = sdiv exact i64 %19, 24
  %21 = icmp sgt i64 %10, %20
  %22 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %16 to i64*
  br i1 %21, label %80, label %23

23:                                               ; preds = %12
  %24 = sub i64 %18, %5
  %25 = sdiv exact i64 %24, 24
  %26 = icmp sgt i64 %10, %25
  br i1 %26, label %27, label %45

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %2, i64 %25
  %29 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %28, %3
  br i1 %29, label %40, label %30

30:                                               ; preds = %27, %30
  %31 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %36, %30 ], [ %17, %27 ]
  %32 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %35, %30 ], [ %28, %27 ]
  %33 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %31 to i8*
  %34 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %32 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 24, i1 false) #14
  %35 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %32, i64 1
  %36 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %31, i64 1
  %37 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %35, %3
  br i1 %37, label %38, label %30

38:                                               ; preds = %30
  %39 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %36 to i64
  br label %40

40:                                               ; preds = %38, %27
  %41 = phi i64 [ %18, %27 ], [ %39, %38 ]
  store i64 %41, i64* %22, align 8
  %42 = icmp sgt i64 %24, 0
  br i1 %42, label %43, label %154

43:                                               ; preds = %40
  %44 = inttoptr i64 %41 to %"struct.base::OffsetAdjuster::Adjustment"*
  br label %45

45:                                               ; preds = %43, %23
  %46 = phi i64 [ %41, %43 ], [ %18, %23 ]
  %47 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %44, %43 ], [ %17, %23 ]
  %48 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %28, %43 ], [ %3, %23 ]
  %49 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %1, i64 %10
  %50 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %49 to i64
  %51 = sub i64 %46, %50
  %52 = sdiv exact i64 %51, 24
  %53 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %1, i64 %52
  %54 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %53, %17
  br i1 %54, label %65, label %57

55:                                               ; preds = %65
  %56 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %71 to i64
  br label %57

57:                                               ; preds = %55, %45
  %58 = phi i64 [ %56, %55 ], [ %46, %45 ]
  store i64 %58, i64* %22, align 8
  %59 = icmp eq i64 %51, 0
  br i1 %59, label %73, label %60

60:                                               ; preds = %57
  %61 = sdiv exact i64 %51, -24
  %62 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %47, i64 %61
  %63 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %62 to i8*
  %64 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 %51, i1 false) #14
  br label %73

65:                                               ; preds = %45, %65
  %66 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %71, %65 ], [ %47, %45 ]
  %67 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %70, %65 ], [ %53, %45 ]
  %68 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %66 to i8*
  %69 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 24, i1 false) #14
  %70 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %67, i64 1
  %71 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %66, i64 1
  %72 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %70, %17
  br i1 %72, label %65, label %55

73:                                               ; preds = %57, %60
  %74 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %48 to i64
  %75 = sub i64 %74, %7
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %154, label %77

77:                                               ; preds = %73
  %78 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %1 to i8*
  %79 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %2 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 %75, i1 false) #14
  br label %154

80:                                               ; preds = %12
  %81 = bitcast %"class.std::__1::vector"* %0 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %18, %82
  %84 = sdiv exact i64 %83, 24
  %85 = add nsw i64 %84, %10
  %86 = icmp ugt i64 %85, 768614336404564650
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #16
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %15, %82
  %91 = sdiv exact i64 %90, 24
  %92 = icmp ult i64 %91, 384307168202282325
  br i1 %92, label %96, label %93

93:                                               ; preds = %89
  %94 = sub i64 %5, %82
  %95 = sdiv exact i64 %94, 24
  br label %103

96:                                               ; preds = %89
  %97 = shl nsw i64 %91, 1
  %98 = icmp ult i64 %97, %85
  %99 = select i1 %98, i64 %85, i64 %97
  %100 = sub i64 %5, %82
  %101 = sdiv exact i64 %100, 24
  %102 = icmp eq i64 %99, 0
  br i1 %102, label %109, label %103

103:                                              ; preds = %96, %93
  %104 = phi i64 [ %95, %93 ], [ %101, %96 ]
  %105 = phi i64 [ 768614336404564650, %93 ], [ %99, %96 ]
  %106 = mul i64 %105, 24
  %107 = tail call i8* @_Znwm(i64 %106) #15
  %108 = bitcast i8* %107 to %"struct.base::OffsetAdjuster::Adjustment"*
  br label %109

109:                                              ; preds = %103, %96
  %110 = phi i64 [ %104, %103 ], [ %101, %96 ]
  %111 = phi i64 [ %105, %103 ], [ 0, %96 ]
  %112 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %108, %103 ], [ null, %96 ]
  %113 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %112, i64 %110
  %114 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %112, i64 %111
  %115 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %114 to i64
  %116 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %113, i64 %10
  br label %117

117:                                              ; preds = %109, %117
  %118 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %122, %117 ], [ %113, %109 ]
  %119 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %123, %117 ], [ %2, %109 ]
  %120 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %118 to i8*
  %121 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %119 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 24, i1 false) #14
  %122 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %118, i64 1
  %123 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %119, i64 1
  %124 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %116, %122
  br i1 %124, label %125, label %117

125:                                              ; preds = %117
  %126 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %6, align 8
  %127 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %126 to i64
  %128 = sub i64 %5, %127
  %129 = sdiv exact i64 %128, -24
  %130 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %113, i64 %129
  %131 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %130 to i64
  %132 = icmp sgt i64 %128, 0
  br i1 %132, label %133, label %136

133:                                              ; preds = %125
  %134 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %130 to i8*
  %135 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 %128, i1 false) #14
  br label %136

136:                                              ; preds = %133, %125
  %137 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %16, align 8
  %138 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %137, %1
  br i1 %138, label %147, label %139

139:                                              ; preds = %136, %139
  %140 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %145, %139 ], [ %116, %136 ]
  %141 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %144, %139 ], [ %1, %136 ]
  %142 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %140 to i8*
  %143 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 24, i1 false) #14
  %144 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %141, i64 1
  %145 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %140, i64 1
  %146 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %144, %137
  br i1 %146, label %147, label %139

147:                                              ; preds = %139, %136
  %148 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %116, %136 ], [ %145, %139 ]
  %149 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %148 to i64
  %150 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %6, align 8
  store i64 %131, i64* %81, align 8
  store i64 %149, i64* %22, align 8
  store i64 %115, i64* %14, align 8
  %151 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %150, null
  br i1 %151, label %154, label %152

152:                                              ; preds = %147
  %153 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %150 to i8*
  tail call void @_ZdlPv(i8* %153) #15
  br label %154

154:                                              ; preds = %152, %147, %40, %73, %77, %4
  %155 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %1, %4 ], [ %1, %77 ], [ %1, %73 ], [ %1, %40 ], [ %113, %147 ], [ %113, %152 ]
  ret %"struct.base::OffsetAdjuster::Adjustment"* %155
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.4"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string.4"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #16
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string.4"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #16
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #15
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !71
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !71
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !74, !noalias !71
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !74, !noalias !71
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !71
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !71
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !74, !noalias !71
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !74, !noalias !71
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !71
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !71
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !74, !noalias !71
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !74, !noalias !71
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !71
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !71
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !74, !noalias !71
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !74, !noalias !71
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !76

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !71
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !71
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !74, !noalias !71
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !74, !noalias !71
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !77

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !78

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !79

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !80

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !81

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !82

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !84
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !84
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !87, !noalias !84
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !87, !noalias !84
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !84
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !84
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !87, !noalias !84
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !87, !noalias !84
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !84
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !84
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !87, !noalias !84
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !87, !noalias !84
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !84
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !84
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !87, !noalias !84
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !87, !noalias !84
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !89

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !84
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !84
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !87, !noalias !84
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !87, !noalias !84
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !90

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !91

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !92

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #15
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string.4"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN13url_formatter12_GLOBAL__N_125NonHostComponentTransformD0Ev(%"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"*) unnamed_addr #10 align 2 {
  %2 = bitcast %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK13url_formatter12_GLOBAL__N_125NonHostComponentTransform7ExecuteERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS2_6vectorIN4base14OffsetAdjuster10AdjustmentENS6_ISE_EEEE(%"class.std::__1::basic_string.4"* noalias sret, %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* nocapture readonly, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::vector"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::BasicStringPiece", align 8
  %6 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform", %"class.url_formatter::(anonymous namespace)::NonHostComponentTransform"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = bitcast %"class.base::BasicStringPiece"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #14
  br i1 %8, label %10, label %25

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %12 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %19 = select i1 %15, i8* %17, i8* %18
  store i8* %19, i8** %11, align 8
  %20 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = zext i8 %14 to i64
  %24 = select i1 %15, i64 %22, i64 %23
  store i64 %24, i64* %20, align 8
  call void @_ZN4base26UTF8ToUTF16WithAdjustmentsERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_6vectorINS_14OffsetAdjuster10AdjustmentENS1_9allocatorIS9_EEEE(%"class.std::__1::basic_string.4"* sret %0, %"class.base::BasicStringPiece"* nonnull dereferenceable(16) %5, %"class.std::__1::vector"* %3) #14
  br label %38

25:                                               ; preds = %4
  %26 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %33 = select i1 %29, i8* %31, i8* %32
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = zext i8 %28 to i64
  %37 = select i1 %29, i64 %35, i64 %36
  tail call void @_ZN3net48UnescapeAndDecodeUTF8URLComponentWithAdjustmentsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEjPNS2_6vectorINS0_14OffsetAdjuster10AdjustmentENS2_9allocatorIS8_EEEE(%"class.std::__1::basic_string.4"* sret %0, i8* %33, i64 %37, i32 %7, %"class.std::__1::vector"* %3) #14
  br label %38

38:                                               ; preds = %25, %10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #14
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #11

declare void @_ZN4base26UTF8ToUTF16WithAdjustmentsERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_6vectorINS_14OffsetAdjuster10AdjustmentENS1_9allocatorIS9_EEEE(%"class.std::__1::basic_string.4"* sret, %"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::vector"*) local_unnamed_addr #2

declare void @_ZN3net48UnescapeAndDecodeUTF8URLComponentWithAdjustmentsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEjPNS2_6vectorINS0_14OffsetAdjuster10AdjustmentENS2_9allocatorIS8_EEEE(%"class.std::__1::basic_string.4"* sret, i8*, i64, i32, %"class.std::__1::vector"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN13url_formatter12_GLOBAL__N_122HostComponentTransformD0Ev(%"class.url_formatter::(anonymous namespace)::HostComponentTransform"*) unnamed_addr #10 align 2 {
  %2 = bitcast %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK13url_formatter12_GLOBAL__N_122HostComponentTransform7ExecuteERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS2_6vectorIN4base14OffsetAdjuster10AdjustmentENS6_ISE_EEEE(%"class.std::__1::basic_string.4"* noalias nocapture sret, %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* nocapture readonly, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::vector"*) unnamed_addr #0 align 2 {
  %5 = alloca %"struct.url_formatter::IDNConversionResult", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"struct.url_formatter::IDNConversionResult", align 8
  %8 = alloca %"class.std::__1::vector", align 8
  %9 = alloca %"struct.base::OffsetAdjuster::Adjustment", align 8
  %10 = alloca %"struct.url_formatter::IDNConversionResult", align 16
  %11 = getelementptr inbounds %"class.url_formatter::(anonymous namespace)::HostComponentTransform", %"class.url_formatter::(anonymous namespace)::HostComponentTransform"* %1, i64 0, i32 1
  %12 = load i8, i8* %11, align 8, !range !93
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %45

14:                                               ; preds = %4
  %15 = bitcast %"struct.url_formatter::IDNConversionResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %15) #14
  %16 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %23 = select i1 %19, i8* %21, i8* %22
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = zext i8 %18 to i64
  %27 = select i1 %19, i64 %25, i64 %26
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_131IDNToUnicodeWithAdjustmentsImplEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS3_6vectorINS1_14OffsetAdjuster10AdjustmentENS3_9allocatorIS9_EEEEb(%"struct.url_formatter::IDNConversionResult"* nonnull sret %5, i8* %23, i64 %27, %"class.std::__1::vector"* %3, i1 zeroext false) #14
  %28 = bitcast %"class.std::__1::basic_string.4"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* nonnull align 8 %15, i64 24, i1 false) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #14
  %29 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %5, i64 0, i32 3
  %30 = bitcast %"struct.url_formatter::TopDomainEntry"* %29 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %32 = load i8, i8* %31, align 1
  %33 = icmp slt i8 %32, 0
  br i1 %33, label %34, label %44

34:                                               ; preds = %14
  %35 = getelementptr inbounds %"struct.url_formatter::TopDomainEntry", %"struct.url_formatter::TopDomainEntry"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  call void @_ZdlPv(i8* %36) #15
  %37 = bitcast %"struct.url_formatter::IDNConversionResult"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %37, i64 0, i32 1, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %34
  %42 = bitcast %"struct.url_formatter::IDNConversionResult"* %5 to i8**
  %43 = load i8*, i8** %42, align 8
  call void @_ZdlPv(i8* %43) #15
  br label %44

44:                                               ; preds = %14, %34, %41
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %15) #14
  br label %171

45:                                               ; preds = %4
  %46 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #14
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %49 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 24, i1 false)
  call void @_ZN13url_formatter8StripWWWERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %6, %"class.std::__1::basic_string"* dereferenceable(24) %2)
  %50 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %50, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i64, i64* %48, align 8
  %55 = zext i8 %52 to i64
  %56 = select i1 %53, i64 %54, i64 %55
  %57 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  %59 = load i8, i8* %58, align 1
  %60 = icmp slt i8 %59, 0
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = zext i8 %59 to i64
  %64 = select i1 %60, i64 %62, i64 %63
  %65 = icmp eq i64 %56, %64
  br i1 %65, label %66, label %115

66:                                               ; preds = %45
  %67 = load i8*, i8** %47, align 8
  %68 = select i1 %53, i8* %67, i8* %46
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %72 = select i1 %60, i8* %70, i8* %71
  %73 = icmp eq i64 %56, 0
  br i1 %53, label %80, label %74

74:                                               ; preds = %66
  br i1 %73, label %96, label %75

75:                                               ; preds = %74
  %76 = ptrtoint i8* %67 to i64
  %77 = trunc i64 %76 to i8
  %78 = load i8, i8* %72, align 1
  %79 = icmp eq i8 %78, %77
  br i1 %79, label %81, label %115

80:                                               ; preds = %66
  br i1 %73, label %96, label %93

81:                                               ; preds = %75, %88
  %82 = phi i64 [ %85, %88 ], [ %55, %75 ]
  %83 = phi i8* [ %86, %88 ], [ %46, %75 ]
  %84 = phi i8* [ %89, %88 ], [ %72, %75 ]
  %85 = add i64 %82, -1
  %86 = getelementptr inbounds i8, i8* %83, i64 1
  %87 = icmp eq i64 %85, 0
  br i1 %87, label %96, label %88

88:                                               ; preds = %81
  %89 = getelementptr inbounds i8, i8* %84, i64 1
  %90 = load i8, i8* %86, align 1
  %91 = load i8, i8* %89, align 1
  %92 = icmp eq i8 %90, %91
  br i1 %92, label %81, label %115

93:                                               ; preds = %80
  %94 = call i32 @bcmp(i8* %68, i8* %72, i64 %56) #14
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %115

96:                                               ; preds = %81, %74, %80, %93
  %97 = bitcast %"struct.url_formatter::IDNConversionResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %97) #14
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_131IDNToUnicodeWithAdjustmentsImplEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS3_6vectorINS1_14OffsetAdjuster10AdjustmentENS3_9allocatorIS9_EEEEb(%"struct.url_formatter::IDNConversionResult"* nonnull sret %7, i8* %72, i64 %56, %"class.std::__1::vector"* %3, i1 zeroext false) #14
  %98 = bitcast %"class.std::__1::basic_string.4"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* nonnull align 8 %97, i64 24, i1 false) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %97, i8 0, i64 24, i1 false) #14
  %99 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %7, i64 0, i32 3
  %100 = bitcast %"struct.url_formatter::TopDomainEntry"* %99 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %101 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %100, i64 0, i32 1, i32 0
  %102 = load i8, i8* %101, align 1
  %103 = icmp slt i8 %102, 0
  br i1 %103, label %104, label %114

104:                                              ; preds = %96
  %105 = getelementptr inbounds %"struct.url_formatter::TopDomainEntry", %"struct.url_formatter::TopDomainEntry"* %99, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  call void @_ZdlPv(i8* %106) #15
  %107 = bitcast %"struct.url_formatter::IDNConversionResult"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %108 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %107, i64 0, i32 1, i32 1
  %109 = load i8, i8* %108, align 1
  %110 = icmp slt i8 %109, 0
  br i1 %110, label %111, label %114

111:                                              ; preds = %104
  %112 = bitcast %"struct.url_formatter::IDNConversionResult"* %7 to i8**
  %113 = load i8*, i8** %112, align 8
  call void @_ZdlPv(i8* %113) #15
  br label %114

114:                                              ; preds = %96, %104, %111
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %97) #14
  br label %165

115:                                              ; preds = %88, %75, %93, %45
  %116 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %116) #14
  %117 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %118 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  %119 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %120 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %120) #14
  call void @_ZN4base14OffsetAdjuster10AdjustmentC1Emmm(%"struct.base::OffsetAdjuster::Adjustment"* nonnull %9, i64 0, i64 4, i64 0) #14
  %121 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %118 to i64*
  %122 = bitcast %"class.std::__1::vector"* %8 to i64*
  %123 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %119 to i64*
  %124 = call i8* @_Znwm(i64 24) #15
  %125 = getelementptr inbounds i8, i8* %124, i64 24
  %126 = ptrtoint i8* %125 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %124, i8* nonnull align 8 %120, i64 24, i1 false) #14
  %127 = ptrtoint i8* %124 to i64
  store i64 %127, i64* %122, align 8
  store i64 %126, i64* %121, align 8
  store i64 %126, i64* %123, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %120) #14
  %128 = bitcast %"struct.url_formatter::IDNConversionResult"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %128) #14
  %129 = load i8, i8* %51, align 1
  %130 = icmp slt i8 %129, 0
  %131 = load i8*, i8** %47, align 8
  %132 = select i1 %130, i8* %131, i8* %46
  %133 = load i64, i64* %48, align 8
  %134 = zext i8 %129 to i64
  %135 = select i1 %130, i64 %133, i64 %134
  call fastcc void @_ZN13url_formatter12_GLOBAL__N_131IDNToUnicodeWithAdjustmentsImplEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS3_6vectorINS1_14OffsetAdjuster10AdjustmentENS3_9allocatorIS9_EEEEb(%"struct.url_formatter::IDNConversionResult"* nonnull sret %10, i8* %132, i64 %135, %"class.std::__1::vector"* %3, i1 zeroext false) #14
  %136 = bitcast %"struct.url_formatter::IDNConversionResult"* %10 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 16
  %138 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %139 = load i64, i64* %138, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %128, i8 0, i64 24, i1 false) #14
  %140 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %10, i64 0, i32 3
  %141 = bitcast %"struct.url_formatter::TopDomainEntry"* %140 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %142 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %141, i64 0, i32 1, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp slt i8 %143, 0
  br i1 %144, label %145, label %155

145:                                              ; preds = %115
  %146 = getelementptr inbounds %"struct.url_formatter::TopDomainEntry", %"struct.url_formatter::TopDomainEntry"* %140, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 16
  call void @_ZdlPv(i8* %147) #15
  %148 = bitcast %"struct.url_formatter::IDNConversionResult"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %149 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %148, i64 0, i32 1, i32 1
  %150 = load i8, i8* %149, align 1
  %151 = icmp slt i8 %150, 0
  br i1 %151, label %152, label %155

152:                                              ; preds = %145
  %153 = bitcast %"struct.url_formatter::IDNConversionResult"* %10 to i8**
  %154 = load i8*, i8** %153, align 16
  call void @_ZdlPv(i8* %154) #15
  br label %155

155:                                              ; preds = %115, %152, %145
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %128) #14
  call void @_ZN4base14OffsetAdjuster26MergeSequentialAdjustmentsERKNSt3__16vectorINS0_10AdjustmentENS1_9allocatorIS3_EEEEPS6_(%"class.std::__1::vector"* nonnull dereferenceable(24) %8, %"class.std::__1::vector"* %3) #14
  %156 = bitcast %"class.std::__1::basic_string.4"* %0 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %156, align 8
  %157 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %139, i64* %157, align 8
  %158 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %117, align 8
  %159 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %158, null
  br i1 %159, label %164, label %160

160:                                              ; preds = %155
  %161 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %158 to i64
  %162 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %118 to i64*
  store i64 %161, i64* %162, align 8
  %163 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %158 to i8*
  call void @_ZdlPv(i8* %163) #15
  br label %164

164:                                              ; preds = %155, %160
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %116) #14
  br label %165

165:                                              ; preds = %164, %114
  %166 = load i8, i8* %51, align 1
  %167 = icmp slt i8 %166, 0
  br i1 %167, label %168, label %170

168:                                              ; preds = %165
  %169 = load i8*, i8** %47, align 8
  call void @_ZdlPv(i8* %169) #15
  br label %170

170:                                              ; preds = %165, %168
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #14
  br label %171

171:                                              ; preds = %170, %44
  ret void
}

declare void @_ZN4base14OffsetAdjuster26MergeSequentialAdjustmentsERKNSt3__16vectorINS0_10AdjustmentENS1_9allocatorIS3_EEEEPS6_(%"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::vector"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN13url_formatter12_GLOBAL__N_131IDNToUnicodeWithAdjustmentsImplEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS3_6vectorINS1_14OffsetAdjuster10AdjustmentENS3_9allocatorIS9_EEEEb(%"struct.url_formatter::IDNConversionResult"* noalias sret, i8*, i64, %"class.std::__1::vector"*, i1 zeroext) unnamed_addr #0 {
  %6 = alloca %"class.base::BasicStringPiece", align 8
  %7 = alloca %"class.std::__1::basic_string.4", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::basic_string.4", align 8
  %10 = alloca %"class.std::__1::basic_string.4", align 8
  %11 = alloca %"class.std::__1::basic_string.4", align 8
  %12 = alloca %"class.std::__1::basic_string.4", align 8
  %13 = alloca %"struct.base::OffsetAdjuster::Adjustment", align 8
  %14 = alloca %"struct.url_formatter::TopDomainEntry", align 8
  %15 = icmp ne %"class.std::__1::vector"* %3, null
  br i1 %15, label %16, label %21

16:                                               ; preds = %5
  %17 = bitcast %"class.std::__1::vector"* %3 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %19 to i64*
  store i64 %18, i64* %20, align 8
  br label %21

21:                                               ; preds = %16, %5
  %22 = bitcast %"class.std::__1::basic_string.4"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #14
  %23 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 24, i1 false) #14
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7reserveEm(%"class.std::__1::basic_string.4"* nonnull %10, i64 %2)
  %25 = bitcast %"class.std::__1::basic_string.4"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %25, i64 0, i32 1, i32 1
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  %29 = load i16*, i16** %23, align 8
  %30 = load i64, i64* %24, align 8
  %31 = bitcast %"class.std::__1::basic_string.4"* %10 to i16*
  %32 = zext i8 %27 to i64
  %33 = select i1 %28, i16* %29, i16* %31
  %34 = select i1 %28, i64 %30, i64 %32
  %35 = getelementptr inbounds i16, i16* %33, i64 %34
  %36 = getelementptr inbounds i8, i8* %1, i64 %2
  %37 = call i16* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPDsEEEENSD_IPKDsEESA_SA_(%"class.std::__1::basic_string.4"* nonnull %10, i16* %35, i8* %1, i8* %36)
  %38 = bitcast %"class.std::__1::basic_string.4"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #14
  %39 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 0, i64 24, i1 false) #14
  %41 = bitcast %"class.base::BasicStringPiece"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41)
  %42 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %6, i64 0, i32 0
  store i8* %1, i8** %42, align 8
  %43 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %6, i64 0, i32 1
  store i64 %2, i64* %43, align 8
  %44 = icmp eq i64 %2, 0
  br i1 %44, label %113, label %45

45:                                               ; preds = %21
  %46 = add i64 %2, -1
  %47 = getelementptr inbounds i8, i8* %1, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 46
  br i1 %49, label %58, label %50

50:                                               ; preds = %45, %53
  %51 = phi i64 [ %54, %53 ], [ %46, %45 ]
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %113, label %53

53:                                               ; preds = %50
  %54 = add i64 %51, -1
  %55 = getelementptr inbounds i8, i8* %1, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 46
  br i1 %57, label %58, label %50

58:                                               ; preds = %53, %45
  %59 = phi i64 [ %46, %45 ], [ %54, %53 ]
  %60 = add nuw i64 %59, 1
  %61 = call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* nonnull %6, i64 %60, i64 -1) #14
  %62 = extractvalue { i8*, i64 } %61, 0
  %63 = extractvalue { i8*, i64 } %61, 1
  %64 = bitcast %"class.std::__1::basic_string.4"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #14
  %65 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 0, i64 24, i1 false) #14
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7reserveEm(%"class.std::__1::basic_string.4"* nonnull %7, i64 %63) #14
  %67 = bitcast %"class.std::__1::basic_string.4"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %67, i64 0, i32 1, i32 1
  %69 = load i8, i8* %68, align 1
  %70 = icmp slt i8 %69, 0
  %71 = load i16*, i16** %65, align 8
  %72 = load i64, i64* %66, align 8
  %73 = bitcast %"class.std::__1::basic_string.4"* %7 to i16*
  %74 = zext i8 %69 to i64
  %75 = select i1 %70, i16* %71, i16* %73
  %76 = select i1 %70, i64 %72, i64 %74
  %77 = getelementptr inbounds i16, i16* %75, i64 %76
  %78 = getelementptr inbounds i8, i8* %62, i64 %63
  %79 = call i16* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPDsEEEENSD_IPKDsEESA_SA_(%"class.std::__1::basic_string.4"* nonnull %7, i16* %77, i8* %62, i8* %78) #14
  %80 = load i8, i8* %68, align 1
  %81 = icmp slt i8 %80, 0
  %82 = load i16*, i16** %65, align 8
  %83 = select i1 %81, i16* %82, i16* %73
  %84 = load i64, i64* %66, align 8
  %85 = zext i8 %80 to i64
  %86 = select i1 %81, i64 %84, i64 %85
  %87 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %87) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %87, i8 0, i64 24, i1 false) #14
  %88 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %89 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %88, i64 0, i32 1, i32 0
  %90 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = bitcast %"class.std::__1::basic_string.4"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %91) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 0, i64 24, i1 false) #14
  %92 = bitcast %"class.std::__1::basic_string.4"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %93 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %92, i64 0, i32 1, i32 1
  %94 = bitcast %"class.std::__1::basic_string.4"* %9 to i16*
  %95 = call fastcc i64 @_ZN13url_formatter12_GLOBAL__N_124IDNToUnicodeOneComponentEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS2_IcNS4_IcEEEES6_bPNS3_12basic_stringIDsS5_NS3_9allocatorIDsEEEE(i16* %83, i64 %86, i8* nonnull %87, i64 0, i16* nonnull %94, i64 0, i1 zeroext true, %"class.std::__1::basic_string.4"* nonnull %11) #14
  %96 = load i8, i8* %93, align 1
  %97 = icmp slt i8 %96, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %58
  %99 = bitcast %"class.std::__1::basic_string.4"* %9 to i8**
  %100 = load i8*, i8** %99, align 8
  call void @_ZdlPv(i8* %100) #15
  br label %101

101:                                              ; preds = %98, %58
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %91) #14
  %102 = load i8, i8* %89, align 1
  %103 = icmp slt i8 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %101
  %105 = load i8*, i8** %90, align 8
  call void @_ZdlPv(i8* %105) #15
  br label %106

106:                                              ; preds = %104, %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %87) #14
  %107 = load i8, i8* %68, align 1
  %108 = icmp slt i8 %107, 0
  br i1 %108, label %109, label %112

109:                                              ; preds = %106
  %110 = bitcast %"class.std::__1::basic_string.4"* %7 to i8**
  %111 = load i8*, i8** %110, align 8
  call void @_ZdlPv(i8* %111) #15
  br label %112

112:                                              ; preds = %109, %106
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #14
  br label %113

113:                                              ; preds = %50, %21, %112
  %114 = phi i64 [ 0, %21 ], [ %63, %112 ], [ 0, %50 ]
  %115 = phi i8* [ null, %21 ], [ %62, %112 ], [ null, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41)
  %116 = bitcast %"struct.url_formatter::IDNConversionResult"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 -86, i64 72, i1 false)
  %117 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %0, i64 0, i32 3
  %118 = bitcast %"struct.url_formatter::TopDomainEntry"* %117 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 25, i1 false) #14
  %119 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %0, i64 0, i32 4
  store i32 0, i32* %119, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 0, i64 25, i1 false) #14
  %120 = bitcast %"class.std::__1::basic_string.4"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %120) #14
  %121 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %123 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %120, i8 0, i64 24, i1 false) #14
  %124 = load i8, i8* %26, align 1
  %125 = icmp slt i8 %124, 0
  %126 = load i64, i64* %24, align 8
  %127 = zext i8 %124 to i64
  %128 = select i1 %125, i64 %126, i64 %127
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %145, label %130

130:                                              ; preds = %113
  %131 = bitcast %"class.std::__1::basic_string.4"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %132 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %131, i64 0, i32 1, i32 1
  %133 = bitcast %"class.std::__1::basic_string.4"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %134 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %133, i64 0, i32 1, i32 1
  %135 = bitcast %"class.std::__1::basic_string.4"* %11 to i16*
  %136 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %0, i64 0, i32 1
  %137 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %13 to i8*
  %138 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %139 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %140 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %138 to i64*
  %141 = bitcast %"class.std::__1::vector"* %3 to i64*
  %142 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %139 to i64*
  %143 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %144 = bitcast %"class.std::__1::basic_string.4"* %12 to i16*
  br label %153

145:                                              ; preds = %324, %113
  %146 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %0, i64 0, i32 0
  %147 = call dereferenceable(24) %"class.std::__1::basic_string.4"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.4"* %146, %"class.std::__1::basic_string.4"* nonnull dereferenceable(24) %12)
  %148 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %0, i64 0, i32 1
  %149 = load i8, i8* %148, align 8, !range !93
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %151, label %332

151:                                              ; preds = %145
  %152 = bitcast %"class.std::__1::basic_string.4"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  br label %388

153:                                              ; preds = %130, %324
  %154 = phi i64 [ %126, %130 ], [ %326, %324 ]
  %155 = phi i1 [ %125, %130 ], [ %329, %324 ]
  %156 = phi i8 [ %124, %130 ], [ %327, %324 ]
  %157 = phi i64 [ 0, %130 ], [ %328, %324 ]
  %158 = load i16*, i16** %23, align 8
  %159 = zext i8 %156 to i64
  %160 = select i1 %155, i16* %158, i16* %31
  %161 = select i1 %155, i64 %154, i64 %159
  %162 = icmp ugt i64 %161, %157
  br i1 %162, label %163, label %185

163:                                              ; preds = %153
  %164 = sub i64 %161, %157
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %185, label %166

166:                                              ; preds = %163
  %167 = getelementptr inbounds i16, i16* %160, i64 %157
  br label %168

168:                                              ; preds = %173, %166
  %169 = phi i64 [ %175, %173 ], [ %164, %166 ]
  %170 = phi i16* [ %174, %173 ], [ %167, %166 ]
  %171 = load i16, i16* %170, align 2
  %172 = icmp eq i16 %171, 46
  br i1 %172, label %177, label %173

173:                                              ; preds = %168
  %174 = getelementptr inbounds i16, i16* %170, i64 1
  %175 = add i64 %169, -1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %185, label %168

177:                                              ; preds = %168
  %178 = icmp eq i16* %170, null
  %179 = ptrtoint i16* %170 to i64
  %180 = ptrtoint i16* %160 to i64
  %181 = sub i64 %179, %180
  %182 = ashr exact i64 %181, 1
  %183 = icmp eq i64 %181, -2
  %184 = or i1 %178, %183
  br i1 %184, label %185, label %187

185:                                              ; preds = %173, %163, %177, %153
  %186 = select i1 %155, i64 %154, i64 %159
  br label %187

187:                                              ; preds = %185, %177
  %188 = phi i64 [ %182, %177 ], [ %186, %185 ]
  %189 = sub i64 %188, %157
  %190 = load i8, i8* %132, align 1
  %191 = icmp slt i8 %190, 0
  %192 = load i64, i64* %122, align 8
  %193 = zext i8 %190 to i64
  %194 = select i1 %191, i64 %192, i64 %193
  %195 = icmp ugt i64 %188, %157
  br i1 %195, label %196, label %286

196:                                              ; preds = %187
  %197 = getelementptr inbounds i16, i16* %160, i64 %157
  %198 = load i8, i8* %134, align 1
  %199 = icmp slt i8 %198, 0
  %200 = load i16*, i16** %39, align 8
  %201 = select i1 %199, i16* %200, i16* %135
  %202 = load i64, i64* %40, align 8
  %203 = zext i8 %198 to i64
  %204 = select i1 %199, i64 %202, i64 %203
  %205 = call fastcc i64 @_ZN13url_formatter12_GLOBAL__N_124IDNToUnicodeOneComponentEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS2_IcNS4_IcEEEES6_bPNS3_12basic_stringIDsS5_NS3_9allocatorIDsEEEE(i16* %197, i64 %189, i8* %115, i64 %114, i16* %201, i64 %204, i1 zeroext %4, %"class.std::__1::basic_string.4"* nonnull %12)
  %206 = trunc i64 %205 to i8
  %207 = lshr i64 %205, 8
  %208 = trunc i64 %207 to i8
  %209 = lshr i64 %205, 32
  %210 = trunc i64 %209 to i32
  %211 = load i8, i8* %136, align 8, !range !93
  %212 = or i8 %211, %208
  store i8 %212, i8* %136, align 8
  %213 = icmp eq i32 %210, 0
  br i1 %213, label %218, label %214

214:                                              ; preds = %196
  %215 = load i32, i32* %119, align 8
  %216 = icmp ult i32 %215, 2
  br i1 %216, label %217, label %218

217:                                              ; preds = %214
  store i32 %210, i32* %119, align 8
  br label %218

218:                                              ; preds = %214, %196, %217
  %219 = load i8, i8* %132, align 1
  %220 = icmp ne i8 %206, 0
  %221 = and i1 %15, %220
  br i1 %221, label %222, label %286

222:                                              ; preds = %218
  %223 = icmp slt i8 %219, 0
  %224 = load i64, i64* %122, align 8
  %225 = zext i8 %219 to i64
  %226 = select i1 %223, i64 %224, i64 %225
  %227 = sub i64 %226, %194
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %137) #14
  call void @_ZN4base14OffsetAdjuster10AdjustmentC1Emmm(%"struct.base::OffsetAdjuster::Adjustment"* nonnull %13, i64 %157, i64 %189, i64 %227) #14
  %228 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %138, align 8
  %229 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %139, align 8
  %230 = icmp ult %"struct.base::OffsetAdjuster::Adjustment"* %228, %229
  %231 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %229 to i64
  br i1 %230, label %232, label %236

232:                                              ; preds = %222
  %233 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %228 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %233, i8* nonnull align 8 %137, i64 24, i1 false) #14
  %234 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %228, i64 1
  %235 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %234 to i64
  store i64 %235, i64* %140, align 8
  br label %285

236:                                              ; preds = %222
  %237 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %228 to i64
  %238 = load i64, i64* %141, align 8
  %239 = sub i64 %237, %238
  %240 = sdiv exact i64 %239, 24
  %241 = add nsw i64 %240, 1
  %242 = icmp ugt i64 %241, 768614336404564650
  br i1 %242, label %243, label %245

243:                                              ; preds = %236
  %244 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %244) #16
  unreachable

245:                                              ; preds = %236
  %246 = sub i64 %231, %238
  %247 = sdiv exact i64 %246, 24
  %248 = icmp ult i64 %247, 384307168202282325
  br i1 %248, label %249, label %254

249:                                              ; preds = %245
  %250 = shl nsw i64 %247, 1
  %251 = icmp ult i64 %250, %241
  %252 = select i1 %251, i64 %241, i64 %250
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %259, label %254

254:                                              ; preds = %249, %245
  %255 = phi i64 [ %252, %249 ], [ 768614336404564650, %245 ]
  %256 = mul i64 %255, 24
  %257 = call i8* @_Znwm(i64 %256) #15
  %258 = bitcast i8* %257 to %"struct.base::OffsetAdjuster::Adjustment"*
  br label %259

259:                                              ; preds = %254, %249
  %260 = phi i64 [ %255, %254 ], [ 0, %249 ]
  %261 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %258, %254 ], [ null, %249 ]
  %262 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %261, i64 %240
  %263 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %261, i64 %260
  %264 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %263 to i64
  %265 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %262 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %265, i8* nonnull align 8 %137, i64 24, i1 false) #14
  %266 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %262, i64 1
  %267 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %266 to i64
  %268 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %143, align 8
  %269 = load i64, i64* %140, align 8
  %270 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %268 to i64
  %271 = sub i64 %269, %270
  %272 = sdiv exact i64 %271, -24
  %273 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %262, i64 %272
  %274 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %273 to i64
  %275 = icmp sgt i64 %271, 0
  br i1 %275, label %276, label %280

276:                                              ; preds = %259
  %277 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %273 to i8*
  %278 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %268 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %277, i8* align 8 %278, i64 %271, i1 false) #14
  %279 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %143, align 8
  br label %280

280:                                              ; preds = %276, %259
  %281 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %268, %259 ], [ %279, %276 ]
  store i64 %274, i64* %141, align 8
  store i64 %267, i64* %140, align 8
  store i64 %264, i64* %142, align 8
  %282 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %281, null
  br i1 %282, label %285, label %283

283:                                              ; preds = %280
  %284 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %281 to i8*
  call void @_ZdlPv(i8* %284) #15
  br label %285

285:                                              ; preds = %232, %280, %283
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %137) #14
  br label %286

286:                                              ; preds = %187, %285, %218
  %287 = load i8, i8* %26, align 1
  %288 = icmp slt i8 %287, 0
  %289 = load i64, i64* %24, align 8
  %290 = zext i8 %287 to i64
  %291 = select i1 %288, i64 %289, i64 %290
  %292 = icmp ult i64 %188, %291
  br i1 %292, label %293, label %324

293:                                              ; preds = %286
  %294 = load i8, i8* %132, align 1
  %295 = icmp slt i8 %294, 0
  br i1 %295, label %298, label %296

296:                                              ; preds = %293
  %297 = zext i8 %294 to i64
  br label %303

298:                                              ; preds = %293
  %299 = load i64, i64* %123, align 8
  %300 = and i64 %299, 9223372036854775807
  %301 = add nsw i64 %300, -1
  %302 = load i64, i64* %122, align 8
  br label %303

303:                                              ; preds = %298, %296
  %304 = phi i64 [ 10, %296 ], [ %301, %298 ]
  %305 = phi i64 [ %297, %296 ], [ %302, %298 ]
  %306 = icmp eq i64 %305, %304
  br i1 %306, label %307, label %310

307:                                              ; preds = %303
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* nonnull %12, i64 %304, i64 1, i64 %304, i64 %304, i64 0, i64 0) #14
  %308 = load i8, i8* %132, align 1
  %309 = icmp slt i8 %308, 0
  br i1 %309, label %314, label %311

310:                                              ; preds = %303
  br i1 %295, label %314, label %311

311:                                              ; preds = %310, %307
  %312 = trunc i64 %305 to i8
  %313 = add i8 %312, 1
  store i8 %313, i8* %132, align 1
  br label %317

314:                                              ; preds = %310, %307
  %315 = load i16*, i16** %121, align 8
  %316 = add i64 %305, 1
  store i64 %316, i64* %122, align 8
  br label %317

317:                                              ; preds = %311, %314
  %318 = phi i16* [ %144, %311 ], [ %315, %314 ]
  %319 = getelementptr inbounds i16, i16* %318, i64 %305
  store i16 46, i16* %319, align 2
  %320 = getelementptr inbounds i16, i16* %319, i64 1
  store i16 0, i16* %320, align 2
  %321 = load i8, i8* %26, align 1
  %322 = load i64, i64* %24, align 8
  %323 = zext i8 %321 to i64
  br label %324

324:                                              ; preds = %317, %286
  %325 = phi i64 [ %323, %317 ], [ %290, %286 ]
  %326 = phi i64 [ %322, %317 ], [ %289, %286 ]
  %327 = phi i8 [ %321, %317 ], [ %287, %286 ]
  %328 = add i64 %188, 1
  %329 = icmp slt i8 %327, 0
  %330 = select i1 %329, i64 %326, i64 %325
  %331 = icmp ult i64 %328, %330
  br i1 %331, label %153, label %145

332:                                              ; preds = %145
  %333 = bitcast %"struct.url_formatter::TopDomainEntry"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %333) #14
  %334 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0) acquire, align 8
  %335 = icmp ugt i64 %334, 1
  br i1 %335, label %341, label %336

336:                                              ; preds = %332
  %337 = call zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0)) #14
  br i1 %337, label %338, label %339

338:                                              ; preds = %336
  call void @_ZN13url_formatter15IDNSpoofCheckerC1Ev(%"class.url_formatter::IDNSpoofChecker"* bitcast (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to %"class.url_formatter::IDNSpoofChecker"*)) #14
  call void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0), i64 ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to i64), void (i8*)* null, i8* bitcast (%"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE to i8*)) #14
  br label %341

339:                                              ; preds = %336
  %340 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0) acquire, align 8
  br label %341

341:                                              ; preds = %332, %338, %339
  %342 = phi i64 [ %334, %332 ], [ ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to i64), %338 ], [ %340, %339 ]
  %343 = inttoptr i64 %342 to %"class.url_formatter::IDNSpoofChecker"*
  %344 = bitcast %"class.std::__1::basic_string.4"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %345 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %344, i64 0, i32 1, i32 1
  %346 = load i8, i8* %345, align 1
  %347 = icmp slt i8 %346, 0
  %348 = load i16*, i16** %121, align 8
  %349 = bitcast %"class.std::__1::basic_string.4"* %12 to i16*
  %350 = select i1 %347, i16* %348, i16* %349
  %351 = load i64, i64* %122, align 8
  %352 = zext i8 %346 to i64
  %353 = select i1 %347, i64 %351, i64 %352
  call void @_ZN13url_formatter15IDNSpoofChecker19GetSimilarTopDomainEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"struct.url_formatter::TopDomainEntry"* nonnull sret %14, %"class.url_formatter::IDNSpoofChecker"* %343, i16* %350, i64 %353) #14
  %354 = bitcast %"struct.url_formatter::TopDomainEntry"* %117 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %355 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %354, i64 0, i32 1, i32 0
  %356 = load i8, i8* %355, align 1
  %357 = icmp slt i8 %356, 0
  br i1 %357, label %358, label %361

358:                                              ; preds = %341
  %359 = getelementptr inbounds %"struct.url_formatter::TopDomainEntry", %"struct.url_formatter::TopDomainEntry"* %117, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %360 = load i8*, i8** %359, align 8
  call void @_ZdlPv(i8* %360) #15
  br label %361

361:                                              ; preds = %358, %341
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* nonnull align 8 %333, i64 24, i1 false) #14
  %362 = bitcast %"struct.url_formatter::TopDomainEntry"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %363 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %362, i64 0, i32 1, i32 0
  store i8 0, i8* %363, align 1
  store i8 0, i8* %333, align 8
  %364 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %0, i64 0, i32 3, i32 1
  %365 = getelementptr inbounds %"struct.url_formatter::TopDomainEntry", %"struct.url_formatter::TopDomainEntry"* %14, i64 0, i32 1
  %366 = bitcast i8* %365 to i64*
  %367 = bitcast i8* %364 to i64*
  %368 = load i64, i64* %366, align 8
  store i64 %368, i64* %367, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %333) #14
  br i1 %4, label %388, label %369

369:                                              ; preds = %361
  %370 = load i8, i8* %355, align 1
  %371 = icmp slt i8 %370, 0
  br i1 %371, label %372, label %375

372:                                              ; preds = %369
  %373 = getelementptr inbounds %"struct.url_formatter::IDNConversionResult", %"struct.url_formatter::IDNConversionResult"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %374 = load i64, i64* %373, align 8
  br label %377

375:                                              ; preds = %369
  %376 = zext i8 %370 to i64
  br label %377

377:                                              ; preds = %372, %375
  %378 = phi i64 [ %374, %372 ], [ %376, %375 ]
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %388, label %380

380:                                              ; preds = %377
  br i1 %15, label %381, label %386

381:                                              ; preds = %380
  %382 = bitcast %"class.std::__1::vector"* %3 to i64*
  %383 = load i64, i64* %382, align 8
  %384 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %385 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %384 to i64*
  store i64 %383, i64* %385, align 8
  br label %386

386:                                              ; preds = %381, %380
  %387 = call dereferenceable(24) %"class.std::__1::basic_string.4"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.4"* %146, %"class.std::__1::basic_string.4"* nonnull dereferenceable(24) %10)
  br label %388

388:                                              ; preds = %151, %361, %377, %386
  %389 = phi %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* [ %152, %151 ], [ %344, %361 ], [ %344, %377 ], [ %344, %386 ]
  %390 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %389, i64 0, i32 1, i32 1
  %391 = load i8, i8* %390, align 1
  %392 = icmp slt i8 %391, 0
  br i1 %392, label %393, label %396

393:                                              ; preds = %388
  %394 = bitcast %"class.std::__1::basic_string.4"* %12 to i8**
  %395 = load i8*, i8** %394, align 8
  call void @_ZdlPv(i8* %395) #15
  br label %396

396:                                              ; preds = %388, %393
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %120) #14
  %397 = bitcast %"class.std::__1::basic_string.4"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %398 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %397, i64 0, i32 1, i32 1
  %399 = load i8, i8* %398, align 1
  %400 = icmp slt i8 %399, 0
  br i1 %400, label %401, label %404

401:                                              ; preds = %396
  %402 = bitcast %"class.std::__1::basic_string.4"* %11 to i8**
  %403 = load i8*, i8** %402, align 8
  call void @_ZdlPv(i8* %403) #15
  br label %404

404:                                              ; preds = %396, %401
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #14
  %405 = load i8, i8* %26, align 1
  %406 = icmp slt i8 %405, 0
  br i1 %406, label %407, label %410

407:                                              ; preds = %404
  %408 = bitcast %"class.std::__1::basic_string.4"* %10 to i8**
  %409 = load i8*, i8** %408, align 8
  call void @_ZdlPv(i8* %409) #15
  br label %410

410:                                              ; preds = %404, %407
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7reserveEm(%"class.std::__1::basic_string.4"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ugt i64 %1, 9223372036854775791
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::basic_string.4"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %5) #16
  unreachable

6:                                                ; preds = %2
  %7 = bitcast %"class.std::__1::basic_string.4"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %16

14:                                               ; preds = %6
  %15 = zext i8 %9 to i64
  br label %16

16:                                               ; preds = %11, %14
  %17 = phi i64 [ %13, %11 ], [ %15, %14 ]
  %18 = icmp ugt i64 %17, %1
  %19 = select i1 %18, i64 %17, i64 %1
  %20 = icmp ult i64 %19, 11
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = add i64 %19, 8
  %23 = and i64 %22, -8
  %24 = add i64 %23, -1
  br label %25

25:                                               ; preds = %16, %21
  %26 = phi i64 [ %24, %21 ], [ 10, %16 ]
  br i1 %10, label %27, label %32

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, 9223372036854775807
  %31 = add nsw i64 %30, -1
  br label %32

32:                                               ; preds = %25, %27
  %33 = phi i64 [ %31, %27 ], [ 10, %25 ]
  %34 = icmp eq i64 %26, %33
  br i1 %34, label %236, label %35

35:                                               ; preds = %32
  br i1 %10, label %36, label %39

36:                                               ; preds = %35
  %37 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  br label %41

39:                                               ; preds = %35
  %40 = zext i8 %9 to i64
  br label %41

41:                                               ; preds = %39, %36
  %42 = phi i64 [ %38, %36 ], [ %40, %39 ]
  %43 = icmp eq i64 %26, 10
  br i1 %43, label %57, label %44

44:                                               ; preds = %41
  %45 = add i64 %26, 1
  %46 = icmp slt i64 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  tail call void @abort() #16
  unreachable

48:                                               ; preds = %44
  %49 = shl i64 %45, 1
  %50 = tail call i8* @_Znwm(i64 %49) #15
  %51 = bitcast i8* %50 to i16*
  br i1 %10, label %52, label %55

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i16*, i16** %53, align 8
  br label %61

55:                                               ; preds = %48
  %56 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  br label %67

57:                                               ; preds = %41
  %58 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  %59 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i16*, i16** %59, align 8
  br i1 %10, label %61, label %67

61:                                               ; preds = %57, %52
  %62 = phi i1 [ true, %52 ], [ false, %57 ]
  %63 = phi i16* [ %54, %52 ], [ %60, %57 ]
  %64 = phi i16* [ %51, %52 ], [ %58, %57 ]
  %65 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  br label %73

67:                                               ; preds = %57, %55
  %68 = phi i1 [ true, %55 ], [ false, %57 ]
  %69 = phi i1 [ false, %55 ], [ true, %57 ]
  %70 = phi i16* [ %56, %55 ], [ %60, %57 ]
  %71 = phi i16* [ %51, %55 ], [ %58, %57 ]
  %72 = zext i8 %9 to i64
  br label %73

73:                                               ; preds = %67, %61
  %74 = phi i1 [ %62, %61 ], [ %68, %67 ]
  %75 = phi i1 [ true, %61 ], [ %69, %67 ]
  %76 = phi i16* [ %63, %61 ], [ %70, %67 ]
  %77 = phi i16* [ %64, %61 ], [ %71, %67 ]
  %78 = phi i64 [ %66, %61 ], [ %72, %67 ]
  %79 = bitcast i16* %76 to i8*
  %80 = add i64 %78, 1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %225, label %82

82:                                               ; preds = %73
  %83 = icmp ult i64 %80, 16
  br i1 %83, label %172, label %84

84:                                               ; preds = %82
  %85 = getelementptr i16, i16* %77, i64 %80
  %86 = getelementptr i16, i16* %76, i64 %80
  %87 = icmp ult i16* %77, %86
  %88 = icmp ult i16* %76, %85
  %89 = and i1 %87, %88
  br i1 %89, label %172, label %90

90:                                               ; preds = %84
  %91 = and i64 %80, -16
  %92 = sub i64 %80, %91
  %93 = getelementptr i16, i16* %76, i64 %91
  %94 = getelementptr i16, i16* %77, i64 %91
  %95 = add i64 %91, -16
  %96 = lshr exact i64 %95, 4
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 3
  %99 = icmp ult i64 %95, 48
  br i1 %99, label %151, label %100

100:                                              ; preds = %90
  %101 = sub nsw i64 %97, %98
  br label %102

102:                                              ; preds = %102, %100
  %103 = phi i64 [ 0, %100 ], [ %148, %102 ]
  %104 = phi i64 [ %101, %100 ], [ %149, %102 ]
  %105 = getelementptr i16, i16* %76, i64 %103
  %106 = getelementptr i16, i16* %77, i64 %103
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !94
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !94
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !97, !noalias !94
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !97, !noalias !94
  %115 = or i64 %103, 16
  %116 = getelementptr i16, i16* %76, i64 %115
  %117 = getelementptr i16, i16* %77, i64 %115
  %118 = bitcast i16* %116 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !94
  %120 = getelementptr i16, i16* %116, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !94
  %123 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %123, align 2, !alias.scope !97, !noalias !94
  %124 = getelementptr i16, i16* %117, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %125, align 2, !alias.scope !97, !noalias !94
  %126 = or i64 %103, 32
  %127 = getelementptr i16, i16* %76, i64 %126
  %128 = getelementptr i16, i16* %77, i64 %126
  %129 = bitcast i16* %127 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !94
  %131 = getelementptr i16, i16* %127, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !94
  %134 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %134, align 2, !alias.scope !97, !noalias !94
  %135 = getelementptr i16, i16* %128, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %136, align 2, !alias.scope !97, !noalias !94
  %137 = or i64 %103, 48
  %138 = getelementptr i16, i16* %76, i64 %137
  %139 = getelementptr i16, i16* %77, i64 %137
  %140 = bitcast i16* %138 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !94
  %142 = getelementptr i16, i16* %138, i64 8
  %143 = bitcast i16* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2, !alias.scope !94
  %145 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %145, align 2, !alias.scope !97, !noalias !94
  %146 = getelementptr i16, i16* %139, i64 8
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %147, align 2, !alias.scope !97, !noalias !94
  %148 = add i64 %103, 64
  %149 = add i64 %104, -4
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %102, !llvm.loop !99

151:                                              ; preds = %102, %90
  %152 = phi i64 [ 0, %90 ], [ %148, %102 ]
  %153 = icmp eq i64 %98, 0
  br i1 %153, label %170, label %154

154:                                              ; preds = %151, %154
  %155 = phi i64 [ %167, %154 ], [ %152, %151 ]
  %156 = phi i64 [ %168, %154 ], [ %98, %151 ]
  %157 = getelementptr i16, i16* %76, i64 %155
  %158 = getelementptr i16, i16* %77, i64 %155
  %159 = bitcast i16* %157 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !94
  %161 = getelementptr i16, i16* %157, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !94
  %164 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %164, align 2, !alias.scope !97, !noalias !94
  %165 = getelementptr i16, i16* %158, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %166, align 2, !alias.scope !97, !noalias !94
  %167 = add i64 %155, 16
  %168 = add i64 %156, -1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %154, !llvm.loop !100

170:                                              ; preds = %154, %151
  %171 = icmp eq i64 %80, %91
  br i1 %171, label %225, label %172

172:                                              ; preds = %170, %84, %82
  %173 = phi i64 [ %80, %84 ], [ %80, %82 ], [ %92, %170 ]
  %174 = phi i16* [ %76, %84 ], [ %76, %82 ], [ %93, %170 ]
  %175 = phi i16* [ %77, %84 ], [ %77, %82 ], [ %94, %170 ]
  %176 = add i64 %173, -1
  %177 = and i64 %173, 7
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %190, label %179

179:                                              ; preds = %172, %179
  %180 = phi i64 [ %185, %179 ], [ %173, %172 ]
  %181 = phi i16* [ %187, %179 ], [ %174, %172 ]
  %182 = phi i16* [ %186, %179 ], [ %175, %172 ]
  %183 = phi i64 [ %188, %179 ], [ %177, %172 ]
  %184 = load i16, i16* %181, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %180, -1
  %186 = getelementptr inbounds i16, i16* %182, i64 1
  %187 = getelementptr inbounds i16, i16* %181, i64 1
  %188 = add i64 %183, -1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %179, !llvm.loop !101

190:                                              ; preds = %179, %172
  %191 = phi i64 [ %173, %172 ], [ %185, %179 ]
  %192 = phi i16* [ %174, %172 ], [ %187, %179 ]
  %193 = phi i16* [ %175, %172 ], [ %186, %179 ]
  %194 = icmp ult i64 %176, 7
  br i1 %194, label %225, label %195

195:                                              ; preds = %190, %195
  %196 = phi i64 [ %221, %195 ], [ %191, %190 ]
  %197 = phi i16* [ %223, %195 ], [ %192, %190 ]
  %198 = phi i16* [ %222, %195 ], [ %193, %190 ]
  %199 = load i16, i16* %197, align 2
  store i16 %199, i16* %198, align 2
  %200 = getelementptr inbounds i16, i16* %198, i64 1
  %201 = getelementptr inbounds i16, i16* %197, i64 1
  %202 = load i16, i16* %201, align 2
  store i16 %202, i16* %200, align 2
  %203 = getelementptr inbounds i16, i16* %198, i64 2
  %204 = getelementptr inbounds i16, i16* %197, i64 2
  %205 = load i16, i16* %204, align 2
  store i16 %205, i16* %203, align 2
  %206 = getelementptr inbounds i16, i16* %198, i64 3
  %207 = getelementptr inbounds i16, i16* %197, i64 3
  %208 = load i16, i16* %207, align 2
  store i16 %208, i16* %206, align 2
  %209 = getelementptr inbounds i16, i16* %198, i64 4
  %210 = getelementptr inbounds i16, i16* %197, i64 4
  %211 = load i16, i16* %210, align 2
  store i16 %211, i16* %209, align 2
  %212 = getelementptr inbounds i16, i16* %198, i64 5
  %213 = getelementptr inbounds i16, i16* %197, i64 5
  %214 = load i16, i16* %213, align 2
  store i16 %214, i16* %212, align 2
  %215 = getelementptr inbounds i16, i16* %198, i64 6
  %216 = getelementptr inbounds i16, i16* %197, i64 6
  %217 = load i16, i16* %216, align 2
  store i16 %217, i16* %215, align 2
  %218 = getelementptr inbounds i16, i16* %198, i64 7
  %219 = getelementptr inbounds i16, i16* %197, i64 7
  %220 = load i16, i16* %219, align 2
  store i16 %220, i16* %218, align 2
  %221 = add i64 %196, -8
  %222 = getelementptr inbounds i16, i16* %198, i64 8
  %223 = getelementptr inbounds i16, i16* %197, i64 8
  %224 = icmp eq i64 %221, 0
  br i1 %224, label %225, label %195, !llvm.loop !102

225:                                              ; preds = %190, %195, %170, %73
  br i1 %75, label %226, label %227

226:                                              ; preds = %225
  tail call void @_ZdlPv(i8* %79) #15
  br label %227

227:                                              ; preds = %226, %225
  br i1 %74, label %228, label %234

228:                                              ; preds = %227
  %229 = add i64 %26, 1
  %230 = or i64 %229, -9223372036854775808
  %231 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %42, i64* %232, align 8
  %233 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i16* %77, i16** %233, align 8
  br label %236

234:                                              ; preds = %227
  %235 = trunc i64 %42 to i8
  store i8 %235, i8* %8, align 1
  br label %236

236:                                              ; preds = %234, %228, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertIPKcEENS_9_MetaBaseIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISA_EE5valueEE13_EnableIfImplINS_11__wrap_iterIPDsEEEENSD_IPKDsEESA_SA_(%"class.std::__1::basic_string.4"*, i16*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %2 to i64
  %6 = ptrtoint i16* %1 to i64
  %7 = bitcast %"class.std::__1::basic_string.4"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i16*, i16** %12, align 8
  br label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  br label %16

16:                                               ; preds = %11, %14
  %17 = phi i16* [ %13, %11 ], [ %15, %14 ]
  %18 = ptrtoint i16* %17 to i64
  %19 = sub i64 %6, %18
  %20 = ashr exact i64 %19, 1
  %21 = ptrtoint i8* %3 to i64
  %22 = sub i64 %21, %5
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %467, label %24

24:                                               ; preds = %16
  br i1 %10, label %27, label %25

25:                                               ; preds = %24
  %26 = zext i8 %9 to i64
  br label %34

27:                                               ; preds = %24
  %28 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %31, 9223372036854775807
  %33 = add nsw i64 %32, -1
  br label %34

34:                                               ; preds = %25, %27
  %35 = phi i64 [ %29, %27 ], [ %26, %25 ]
  %36 = phi i64 [ %33, %27 ], [ 10, %25 ]
  %37 = sub i64 %36, %35
  %38 = icmp ult i64 %37, %22
  br i1 %38, label %364, label %39

39:                                               ; preds = %34
  br i1 %10, label %40, label %43

40:                                               ; preds = %39
  %41 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i16*, i16** %41, align 8
  br label %45

43:                                               ; preds = %39
  %44 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  br label %45

45:                                               ; preds = %40, %43
  %46 = phi i16* [ %42, %40 ], [ %44, %43 ]
  %47 = sub i64 %35, %20
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %369, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds i16, i16* %46, i64 %20
  %51 = getelementptr inbounds i16, i16* %50, i64 %22
  %52 = icmp slt i64 %22, 0
  br i1 %52, label %53, label %198

53:                                               ; preds = %49
  %54 = icmp ult i64 %47, 16
  br i1 %54, label %145, label %55

55:                                               ; preds = %53
  %56 = add i64 %35, %21
  %57 = sub i64 %56, %5
  %58 = getelementptr i16, i16* %46, i64 %57
  %59 = getelementptr i16, i16* %46, i64 %35
  %60 = icmp ult i16* %51, %59
  %61 = icmp ult i16* %50, %58
  %62 = and i1 %60, %61
  br i1 %62, label %145, label %63

63:                                               ; preds = %55
  %64 = and i64 %47, -16
  %65 = sub i64 %47, %64
  %66 = getelementptr i16, i16* %50, i64 %64
  %67 = getelementptr i16, i16* %51, i64 %64
  %68 = add i64 %64, -16
  %69 = lshr exact i64 %68, 4
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp ult i64 %68, 48
  br i1 %72, label %124, label %73

73:                                               ; preds = %63
  %74 = sub nsw i64 %70, %71
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ 0, %73 ], [ %121, %75 ]
  %77 = phi i64 [ %74, %73 ], [ %122, %75 ]
  %78 = getelementptr i16, i16* %50, i64 %76
  %79 = getelementptr i16, i16* %51, i64 %76
  %80 = bitcast i16* %78 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !103
  %82 = getelementptr i16, i16* %78, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !103
  %85 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %85, align 2, !alias.scope !106, !noalias !103
  %86 = getelementptr i16, i16* %79, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %87, align 2, !alias.scope !106, !noalias !103
  %88 = or i64 %76, 16
  %89 = getelementptr i16, i16* %50, i64 %88
  %90 = getelementptr i16, i16* %51, i64 %88
  %91 = bitcast i16* %89 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !103
  %93 = getelementptr i16, i16* %89, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !103
  %96 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %96, align 2, !alias.scope !106, !noalias !103
  %97 = getelementptr i16, i16* %90, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %98, align 2, !alias.scope !106, !noalias !103
  %99 = or i64 %76, 32
  %100 = getelementptr i16, i16* %50, i64 %99
  %101 = getelementptr i16, i16* %51, i64 %99
  %102 = bitcast i16* %100 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !103
  %104 = getelementptr i16, i16* %100, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2, !alias.scope !103
  %107 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %107, align 2, !alias.scope !106, !noalias !103
  %108 = getelementptr i16, i16* %101, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %109, align 2, !alias.scope !106, !noalias !103
  %110 = or i64 %76, 48
  %111 = getelementptr i16, i16* %50, i64 %110
  %112 = getelementptr i16, i16* %51, i64 %110
  %113 = bitcast i16* %111 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2, !alias.scope !103
  %115 = getelementptr i16, i16* %111, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2, !alias.scope !103
  %118 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %118, align 2, !alias.scope !106, !noalias !103
  %119 = getelementptr i16, i16* %112, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %120, align 2, !alias.scope !106, !noalias !103
  %121 = add i64 %76, 64
  %122 = add i64 %77, -4
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %75, !llvm.loop !108

124:                                              ; preds = %75, %63
  %125 = phi i64 [ 0, %63 ], [ %121, %75 ]
  %126 = icmp eq i64 %71, 0
  br i1 %126, label %143, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %140, %127 ], [ %125, %124 ]
  %129 = phi i64 [ %141, %127 ], [ %71, %124 ]
  %130 = getelementptr i16, i16* %50, i64 %128
  %131 = getelementptr i16, i16* %51, i64 %128
  %132 = bitcast i16* %130 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !103
  %134 = getelementptr i16, i16* %130, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2, !alias.scope !103
  %137 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %137, align 2, !alias.scope !106, !noalias !103
  %138 = getelementptr i16, i16* %131, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %139, align 2, !alias.scope !106, !noalias !103
  %140 = add i64 %128, 16
  %141 = add i64 %129, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %127, !llvm.loop !109

143:                                              ; preds = %127, %124
  %144 = icmp eq i64 %47, %64
  br i1 %144, label %369, label %145

145:                                              ; preds = %143, %55, %53
  %146 = phi i64 [ %47, %55 ], [ %47, %53 ], [ %65, %143 ]
  %147 = phi i16* [ %50, %55 ], [ %50, %53 ], [ %66, %143 ]
  %148 = phi i16* [ %51, %55 ], [ %51, %53 ], [ %67, %143 ]
  %149 = add i64 %146, -1
  %150 = and i64 %146, 7
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %163, label %152

152:                                              ; preds = %145, %152
  %153 = phi i64 [ %158, %152 ], [ %146, %145 ]
  %154 = phi i16* [ %160, %152 ], [ %147, %145 ]
  %155 = phi i16* [ %159, %152 ], [ %148, %145 ]
  %156 = phi i64 [ %161, %152 ], [ %150, %145 ]
  %157 = load i16, i16* %154, align 2
  store i16 %157, i16* %155, align 2
  %158 = add i64 %153, -1
  %159 = getelementptr inbounds i16, i16* %155, i64 1
  %160 = getelementptr inbounds i16, i16* %154, i64 1
  %161 = add i64 %156, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %152, !llvm.loop !110

163:                                              ; preds = %152, %145
  %164 = phi i64 [ %146, %145 ], [ %158, %152 ]
  %165 = phi i16* [ %147, %145 ], [ %160, %152 ]
  %166 = phi i16* [ %148, %145 ], [ %159, %152 ]
  %167 = icmp ult i64 %149, 7
  br i1 %167, label %369, label %168

168:                                              ; preds = %163, %168
  %169 = phi i64 [ %194, %168 ], [ %164, %163 ]
  %170 = phi i16* [ %196, %168 ], [ %165, %163 ]
  %171 = phi i16* [ %195, %168 ], [ %166, %163 ]
  %172 = load i16, i16* %170, align 2
  store i16 %172, i16* %171, align 2
  %173 = getelementptr inbounds i16, i16* %171, i64 1
  %174 = getelementptr inbounds i16, i16* %170, i64 1
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %171, i64 2
  %177 = getelementptr inbounds i16, i16* %170, i64 2
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %171, i64 3
  %180 = getelementptr inbounds i16, i16* %170, i64 3
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %171, i64 4
  %183 = getelementptr inbounds i16, i16* %170, i64 4
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = getelementptr inbounds i16, i16* %171, i64 5
  %186 = getelementptr inbounds i16, i16* %170, i64 5
  %187 = load i16, i16* %186, align 2
  store i16 %187, i16* %185, align 2
  %188 = getelementptr inbounds i16, i16* %171, i64 6
  %189 = getelementptr inbounds i16, i16* %170, i64 6
  %190 = load i16, i16* %189, align 2
  store i16 %190, i16* %188, align 2
  %191 = getelementptr inbounds i16, i16* %171, i64 7
  %192 = getelementptr inbounds i16, i16* %170, i64 7
  %193 = load i16, i16* %192, align 2
  store i16 %193, i16* %191, align 2
  %194 = add i64 %169, -8
  %195 = getelementptr inbounds i16, i16* %171, i64 8
  %196 = getelementptr inbounds i16, i16* %170, i64 8
  %197 = icmp eq i64 %194, 0
  br i1 %197, label %369, label %168, !llvm.loop !111

198:                                              ; preds = %49
  %199 = getelementptr inbounds i16, i16* %46, i64 %35
  %200 = getelementptr inbounds i16, i16* %51, i64 %47
  %201 = icmp ult i64 %47, 16
  br i1 %201, label %311, label %202

202:                                              ; preds = %198
  %203 = xor i64 %20, -1
  %204 = add i64 %35, %203
  %205 = add i64 %35, %21
  %206 = xor i64 %5, -1
  %207 = add i64 %205, %206
  %208 = getelementptr i16, i16* %46, i64 %207
  %209 = ptrtoint i16* %208 to i64
  %210 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %204, i64 2)
  %211 = extractvalue { i64, i1 } %210, 0
  %212 = extractvalue { i64, i1 } %210, 1
  %213 = icmp ugt i64 %211, %209
  %214 = or i1 %213, %212
  %215 = add i64 %35, -1
  %216 = getelementptr i16, i16* %46, i64 %215
  %217 = ptrtoint i16* %216 to i64
  %218 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %204, i64 2)
  %219 = extractvalue { i64, i1 } %218, 0
  %220 = extractvalue { i64, i1 } %218, 1
  %221 = icmp ugt i64 %219, %217
  %222 = or i1 %221, %220
  %223 = or i1 %214, %222
  br i1 %223, label %311, label %224

224:                                              ; preds = %202
  %225 = add i64 %20, %21
  %226 = sub i64 %225, %5
  %227 = getelementptr i16, i16* %46, i64 %226
  %228 = icmp ult i16* %227, %199
  %229 = icmp ult i16* %50, %200
  %230 = and i1 %228, %229
  br i1 %230, label %311, label %231

231:                                              ; preds = %224
  %232 = and i64 %47, -16
  %233 = sub i64 %47, %232
  %234 = sub i64 0, %232
  %235 = getelementptr i16, i16* %199, i64 %234
  %236 = sub i64 0, %232
  %237 = getelementptr i16, i16* %200, i64 %236
  %238 = add i64 %232, -16
  %239 = lshr exact i64 %238, 4
  %240 = add nuw nsw i64 %239, 1
  %241 = and i64 %240, 1
  %242 = icmp eq i64 %238, 0
  br i1 %242, label %287, label %243

243:                                              ; preds = %231
  %244 = sub nuw nsw i64 %240, %241
  %245 = getelementptr i16, i16* %199, i64 -1
  %246 = getelementptr i16, i16* %200, i64 -1
  %247 = getelementptr i16, i16* %199, i64 -1
  %248 = getelementptr i16, i16* %200, i64 -1
  br label %249

249:                                              ; preds = %249, %243
  %250 = phi i64 [ 0, %243 ], [ %284, %249 ]
  %251 = phi i64 [ %244, %243 ], [ %285, %249 ]
  %252 = sub i64 0, %250
  %253 = sub i64 0, %250
  %254 = getelementptr inbounds i16, i16* %246, i64 %253
  %255 = getelementptr inbounds i16, i16* %245, i64 %252
  %256 = getelementptr inbounds i16, i16* %255, i64 -7
  %257 = bitcast i16* %256 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 2, !alias.scope !112
  %259 = getelementptr inbounds i16, i16* %255, i64 -8
  %260 = getelementptr inbounds i16, i16* %259, i64 -7
  %261 = bitcast i16* %260 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 2, !alias.scope !112
  %263 = getelementptr inbounds i16, i16* %254, i64 -7
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %264, align 2, !alias.scope !115, !noalias !112
  %265 = getelementptr inbounds i16, i16* %254, i64 -8
  %266 = getelementptr inbounds i16, i16* %265, i64 -7
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %267, align 2, !alias.scope !115, !noalias !112
  %268 = sub nuw nsw i64 -16, %250
  %269 = sub nuw nsw i64 -16, %250
  %270 = getelementptr inbounds i16, i16* %248, i64 %269
  %271 = getelementptr inbounds i16, i16* %247, i64 %268
  %272 = getelementptr inbounds i16, i16* %271, i64 -7
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !112
  %275 = getelementptr inbounds i16, i16* %271, i64 -8
  %276 = getelementptr inbounds i16, i16* %275, i64 -7
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 2, !alias.scope !112
  %279 = getelementptr inbounds i16, i16* %270, i64 -7
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %280, align 2, !alias.scope !115, !noalias !112
  %281 = getelementptr inbounds i16, i16* %270, i64 -8
  %282 = getelementptr inbounds i16, i16* %281, i64 -7
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %283, align 2, !alias.scope !115, !noalias !112
  %284 = add i64 %250, 32
  %285 = add i64 %251, -2
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %287, label %249, !llvm.loop !117

287:                                              ; preds = %249, %231
  %288 = phi i64 [ 0, %231 ], [ %284, %249 ]
  %289 = icmp eq i64 %241, 0
  br i1 %289, label %309, label %290

290:                                              ; preds = %287
  %291 = sub i64 0, %288
  %292 = getelementptr i16, i16* %199, i64 -1
  %293 = sub i64 0, %288
  %294 = getelementptr i16, i16* %200, i64 -1
  %295 = getelementptr inbounds i16, i16* %294, i64 %293
  %296 = getelementptr inbounds i16, i16* %292, i64 %291
  %297 = getelementptr inbounds i16, i16* %296, i64 -7
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !112
  %300 = getelementptr inbounds i16, i16* %296, i64 -8
  %301 = getelementptr inbounds i16, i16* %300, i64 -7
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 2, !alias.scope !112
  %304 = getelementptr inbounds i16, i16* %295, i64 -7
  %305 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %305, align 2, !alias.scope !115, !noalias !112
  %306 = getelementptr inbounds i16, i16* %295, i64 -8
  %307 = getelementptr inbounds i16, i16* %306, i64 -7
  %308 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %303, <8 x i16>* %308, align 2, !alias.scope !115, !noalias !112
  br label %309

309:                                              ; preds = %287, %290
  %310 = icmp eq i64 %47, %232
  br i1 %310, label %369, label %311

311:                                              ; preds = %309, %224, %202, %198
  %312 = phi i64 [ %47, %224 ], [ %47, %202 ], [ %47, %198 ], [ %233, %309 ]
  %313 = phi i16* [ %199, %224 ], [ %199, %202 ], [ %199, %198 ], [ %235, %309 ]
  %314 = phi i16* [ %200, %224 ], [ %200, %202 ], [ %200, %198 ], [ %237, %309 ]
  %315 = add i64 %312, -1
  %316 = and i64 %312, 7
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %329, label %318

318:                                              ; preds = %311, %318
  %319 = phi i64 [ %326, %318 ], [ %312, %311 ]
  %320 = phi i16* [ %324, %318 ], [ %313, %311 ]
  %321 = phi i16* [ %323, %318 ], [ %314, %311 ]
  %322 = phi i64 [ %327, %318 ], [ %316, %311 ]
  %323 = getelementptr inbounds i16, i16* %321, i64 -1
  %324 = getelementptr inbounds i16, i16* %320, i64 -1
  %325 = load i16, i16* %324, align 2
  store i16 %325, i16* %323, align 2
  %326 = add i64 %319, -1
  %327 = add i64 %322, -1
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %318, !llvm.loop !118

329:                                              ; preds = %318, %311
  %330 = phi i64 [ %312, %311 ], [ %326, %318 ]
  %331 = phi i16* [ %313, %311 ], [ %324, %318 ]
  %332 = phi i16* [ %314, %311 ], [ %323, %318 ]
  %333 = icmp ult i64 %315, 7
  br i1 %333, label %369, label %334

334:                                              ; preds = %329, %334
  %335 = phi i64 [ %362, %334 ], [ %330, %329 ]
  %336 = phi i16* [ %360, %334 ], [ %331, %329 ]
  %337 = phi i16* [ %359, %334 ], [ %332, %329 ]
  %338 = getelementptr inbounds i16, i16* %337, i64 -1
  %339 = getelementptr inbounds i16, i16* %336, i64 -1
  %340 = load i16, i16* %339, align 2
  store i16 %340, i16* %338, align 2
  %341 = getelementptr inbounds i16, i16* %337, i64 -2
  %342 = getelementptr inbounds i16, i16* %336, i64 -2
  %343 = load i16, i16* %342, align 2
  store i16 %343, i16* %341, align 2
  %344 = getelementptr inbounds i16, i16* %337, i64 -3
  %345 = getelementptr inbounds i16, i16* %336, i64 -3
  %346 = load i16, i16* %345, align 2
  store i16 %346, i16* %344, align 2
  %347 = getelementptr inbounds i16, i16* %337, i64 -4
  %348 = getelementptr inbounds i16, i16* %336, i64 -4
  %349 = load i16, i16* %348, align 2
  store i16 %349, i16* %347, align 2
  %350 = getelementptr inbounds i16, i16* %337, i64 -5
  %351 = getelementptr inbounds i16, i16* %336, i64 -5
  %352 = load i16, i16* %351, align 2
  store i16 %352, i16* %350, align 2
  %353 = getelementptr inbounds i16, i16* %337, i64 -6
  %354 = getelementptr inbounds i16, i16* %336, i64 -6
  %355 = load i16, i16* %354, align 2
  store i16 %355, i16* %353, align 2
  %356 = getelementptr inbounds i16, i16* %337, i64 -7
  %357 = getelementptr inbounds i16, i16* %336, i64 -7
  %358 = load i16, i16* %357, align 2
  store i16 %358, i16* %356, align 2
  %359 = getelementptr inbounds i16, i16* %337, i64 -8
  %360 = getelementptr inbounds i16, i16* %336, i64 -8
  %361 = load i16, i16* %360, align 2
  store i16 %361, i16* %359, align 2
  %362 = add i64 %335, -8
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %369, label %334, !llvm.loop !119

364:                                              ; preds = %34
  %365 = add i64 %35, %22
  %366 = sub i64 %365, %36
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* %0, i64 %36, i64 %366, i64 %35, i64 %20, i64 0, i64 %22)
  %367 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %368 = load i16*, i16** %367, align 8
  br label %369

369:                                              ; preds = %329, %334, %163, %168, %309, %143, %45, %364
  %370 = phi i16* [ %368, %364 ], [ %46, %45 ], [ %46, %143 ], [ %46, %309 ], [ %46, %168 ], [ %46, %163 ], [ %46, %334 ], [ %46, %329 ]
  %371 = add i64 %35, %22
  %372 = load i8, i8* %8, align 1
  %373 = icmp slt i8 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %369
  %375 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %371, i64* %375, align 8
  br label %378

376:                                              ; preds = %369
  %377 = trunc i64 %371 to i8
  store i8 %377, i8* %8, align 1
  br label %378

378:                                              ; preds = %374, %376
  %379 = getelementptr inbounds i16, i16* %370, i64 %371
  store i16 0, i16* %379, align 2
  %380 = icmp eq i8* %2, %3
  br i1 %380, label %467, label %381

381:                                              ; preds = %378
  %382 = getelementptr inbounds i16, i16* %370, i64 %20
  %383 = ptrtoint i8* %3 to i64
  %384 = sub i64 %383, %5
  %385 = icmp ult i64 %384, 16
  br i1 %385, label %456, label %386

386:                                              ; preds = %381
  %387 = bitcast i16* %382 to i8*
  %388 = sub i64 %20, %5
  %389 = getelementptr i8, i8* %3, i64 %388
  %390 = ptrtoint i8* %389 to i64
  %391 = getelementptr i16, i16* %370, i64 %390
  %392 = bitcast i16* %391 to i8*
  %393 = icmp ult i8* %387, %3
  %394 = icmp ugt i8* %392, %2
  %395 = and i1 %393, %394
  br i1 %395, label %456, label %396

396:                                              ; preds = %386
  %397 = and i64 %384, -16
  %398 = getelementptr i16, i16* %382, i64 %397
  %399 = getelementptr i8, i8* %2, i64 %397
  %400 = add i64 %397, -16
  %401 = lshr exact i64 %400, 4
  %402 = add nuw nsw i64 %401, 1
  %403 = and i64 %402, 1
  %404 = icmp eq i64 %400, 0
  br i1 %404, label %438, label %405

405:                                              ; preds = %396
  %406 = sub nuw nsw i64 %402, %403
  br label %407

407:                                              ; preds = %407, %405
  %408 = phi i64 [ 0, %405 ], [ %435, %407 ]
  %409 = phi i64 [ %406, %405 ], [ %436, %407 ]
  %410 = getelementptr i16, i16* %382, i64 %408
  %411 = getelementptr i8, i8* %2, i64 %408
  %412 = bitcast i8* %411 to <8 x i8>*
  %413 = load <8 x i8>, <8 x i8>* %412, align 1, !alias.scope !120
  %414 = getelementptr i8, i8* %411, i64 8
  %415 = bitcast i8* %414 to <8 x i8>*
  %416 = load <8 x i8>, <8 x i8>* %415, align 1, !alias.scope !120
  %417 = sext <8 x i8> %413 to <8 x i16>
  %418 = sext <8 x i8> %416 to <8 x i16>
  %419 = bitcast i16* %410 to <8 x i16>*
  store <8 x i16> %417, <8 x i16>* %419, align 2, !alias.scope !123, !noalias !120
  %420 = getelementptr i16, i16* %410, i64 8
  %421 = bitcast i16* %420 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %421, align 2, !alias.scope !123, !noalias !120
  %422 = or i64 %408, 16
  %423 = getelementptr i16, i16* %382, i64 %422
  %424 = getelementptr i8, i8* %2, i64 %422
  %425 = bitcast i8* %424 to <8 x i8>*
  %426 = load <8 x i8>, <8 x i8>* %425, align 1, !alias.scope !120
  %427 = getelementptr i8, i8* %424, i64 8
  %428 = bitcast i8* %427 to <8 x i8>*
  %429 = load <8 x i8>, <8 x i8>* %428, align 1, !alias.scope !120
  %430 = sext <8 x i8> %426 to <8 x i16>
  %431 = sext <8 x i8> %429 to <8 x i16>
  %432 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %430, <8 x i16>* %432, align 2, !alias.scope !123, !noalias !120
  %433 = getelementptr i16, i16* %423, i64 8
  %434 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %431, <8 x i16>* %434, align 2, !alias.scope !123, !noalias !120
  %435 = add i64 %408, 32
  %436 = add i64 %409, -2
  %437 = icmp eq i64 %436, 0
  br i1 %437, label %438, label %407, !llvm.loop !125

438:                                              ; preds = %407, %396
  %439 = phi i64 [ 0, %396 ], [ %435, %407 ]
  %440 = icmp eq i64 %403, 0
  br i1 %440, label %454, label %441

441:                                              ; preds = %438
  %442 = getelementptr i16, i16* %382, i64 %439
  %443 = getelementptr i8, i8* %2, i64 %439
  %444 = bitcast i8* %443 to <8 x i8>*
  %445 = load <8 x i8>, <8 x i8>* %444, align 1, !alias.scope !120
  %446 = getelementptr i8, i8* %443, i64 8
  %447 = bitcast i8* %446 to <8 x i8>*
  %448 = load <8 x i8>, <8 x i8>* %447, align 1, !alias.scope !120
  %449 = sext <8 x i8> %445 to <8 x i16>
  %450 = sext <8 x i8> %448 to <8 x i16>
  %451 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %449, <8 x i16>* %451, align 2, !alias.scope !123, !noalias !120
  %452 = getelementptr i16, i16* %442, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %450, <8 x i16>* %453, align 2, !alias.scope !123, !noalias !120
  br label %454

454:                                              ; preds = %438, %441
  %455 = icmp eq i64 %384, %397
  br i1 %455, label %467, label %456

456:                                              ; preds = %454, %386, %381
  %457 = phi i16* [ %382, %386 ], [ %382, %381 ], [ %398, %454 ]
  %458 = phi i8* [ %2, %386 ], [ %2, %381 ], [ %399, %454 ]
  br label %459

459:                                              ; preds = %456, %459
  %460 = phi i16* [ %464, %459 ], [ %457, %456 ]
  %461 = phi i8* [ %465, %459 ], [ %458, %456 ]
  %462 = load i8, i8* %461, align 1
  %463 = sext i8 %462 to i16
  store i16 %463, i16* %460, align 2
  %464 = getelementptr inbounds i16, i16* %460, i64 1
  %465 = getelementptr inbounds i8, i8* %461, i64 1
  %466 = icmp eq i8* %465, %3
  br i1 %466, label %467, label %459, !llvm.loop !126

467:                                              ; preds = %459, %454, %378, %16
  %468 = load i8, i8* %8, align 1
  %469 = icmp slt i8 %468, 0
  br i1 %469, label %470, label %473

470:                                              ; preds = %467
  %471 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %472 = load i16*, i16** %471, align 8
  br label %475

473:                                              ; preds = %467
  %474 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  br label %475

475:                                              ; preds = %473, %470
  %476 = phi i16* [ %472, %470 ], [ %474, %473 ]
  %477 = getelementptr inbounds i16, i16* %476, i64 %20
  ret i16* %477
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @_ZN13url_formatter12_GLOBAL__N_124IDNToUnicodeOneComponentEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS2_IcNS4_IcEEEES6_bPNS3_12basic_stringIDsS5_NS3_9allocatorIDsEEEE(i16*, i64, i8*, i64, i16*, i64, i1 zeroext, %"class.std::__1::basic_string.4"*) unnamed_addr #0 {
  %9 = alloca i32, align 4
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.base::BasicStringPiece.50", align 8
  %12 = alloca %"class.base::BasicStringPiece.50", align 8
  %13 = alloca %struct.UIDNAInfo, align 4
  %14 = alloca i32, align 4
  %15 = getelementptr inbounds %"class.base::BasicStringPiece.50", %"class.base::BasicStringPiece.50"* %12, i64 0, i32 0
  store i16* %0, i16** %15, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece.50", %"class.base::BasicStringPiece.50"* %12, i64 0, i32 1
  store i64 %1, i64* %16, align 8
  %17 = icmp eq i64 %1, 0
  br i1 %17, label %675, label %18

18:                                               ; preds = %8
  %19 = tail call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_11CompareCaseE(i16* %0, i64 %1, i16* getelementptr inbounds ([5 x i16], [5 x i16]* @_ZZN13url_formatter12_GLOBAL__N_124IDNToUnicodeOneComponentEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS2_IcNS4_IcEEEES6_bPNS3_12basic_stringIDsS5_NS3_9allocatorIDsEEEEE10kIdnPrefix, i64 0, i64 0), i64 4, i32 0) #14
  br i1 %19, label %20, label %28

20:                                               ; preds = %18
  %21 = add i64 %1, -1
  %22 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.50"* nonnull %12, i64 %21) #14
  %23 = load i16, i16* %22, align 2
  %24 = icmp eq i16 %23, 45
  br i1 %24, label %25, label %216

25:                                               ; preds = %20
  %26 = load i16*, i16** %15, align 8
  %27 = load i64, i64* %16, align 8
  br label %28

28:                                               ; preds = %25, %18
  %29 = phi i64 [ %27, %25 ], [ %1, %18 ]
  %30 = phi i16* [ %26, %25 ], [ %0, %18 ]
  %31 = bitcast %"class.std::__1::basic_string.4"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %31, i64 0, i32 1, i32 1
  %33 = load i8, i8* %32, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %28
  %36 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, 9223372036854775807
  %39 = add nsw i64 %38, -1
  %40 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  br label %44

42:                                               ; preds = %28
  %43 = zext i8 %33 to i64
  br label %44

44:                                               ; preds = %42, %35
  %45 = phi i64 [ %39, %35 ], [ 10, %42 ]
  %46 = phi i64 [ %41, %35 ], [ %43, %42 ]
  %47 = sub i64 %45, %46
  %48 = icmp ult i64 %47, %29
  br i1 %48, label %213, label %49

49:                                               ; preds = %44
  %50 = icmp eq i64 %29, 0
  br i1 %50, label %675, label %51

51:                                               ; preds = %49
  br i1 %34, label %52, label %55

52:                                               ; preds = %51
  %53 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i16*, i16** %53, align 8
  br label %57

55:                                               ; preds = %51
  %56 = bitcast %"class.std::__1::basic_string.4"* %7 to i16*
  br label %57

57:                                               ; preds = %55, %52
  %58 = phi i16* [ %54, %52 ], [ %56, %55 ]
  %59 = getelementptr inbounds i16, i16* %58, i64 %46
  %60 = icmp ult i64 %29, 16
  br i1 %60, label %150, label %61

61:                                               ; preds = %57
  %62 = add i64 %46, %29
  %63 = getelementptr i16, i16* %58, i64 %62
  %64 = getelementptr i16, i16* %30, i64 %29
  %65 = icmp ult i16* %59, %64
  %66 = icmp ult i16* %30, %63
  %67 = and i1 %65, %66
  br i1 %67, label %150, label %68

68:                                               ; preds = %61
  %69 = and i64 %29, -16
  %70 = sub i64 %29, %69
  %71 = getelementptr i16, i16* %30, i64 %69
  %72 = getelementptr i16, i16* %59, i64 %69
  %73 = add i64 %69, -16
  %74 = lshr exact i64 %73, 4
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 3
  %77 = icmp ult i64 %73, 48
  br i1 %77, label %129, label %78

78:                                               ; preds = %68
  %79 = sub nsw i64 %75, %76
  br label %80

80:                                               ; preds = %80, %78
  %81 = phi i64 [ 0, %78 ], [ %126, %80 ]
  %82 = phi i64 [ %79, %78 ], [ %127, %80 ]
  %83 = getelementptr i16, i16* %30, i64 %81
  %84 = getelementptr i16, i16* %59, i64 %81
  %85 = bitcast i16* %83 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !127
  %87 = getelementptr i16, i16* %83, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !127
  %90 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %90, align 2, !alias.scope !130, !noalias !127
  %91 = getelementptr i16, i16* %84, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %92, align 2, !alias.scope !130, !noalias !127
  %93 = or i64 %81, 16
  %94 = getelementptr i16, i16* %30, i64 %93
  %95 = getelementptr i16, i16* %59, i64 %93
  %96 = bitcast i16* %94 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !127
  %98 = getelementptr i16, i16* %94, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !127
  %101 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %101, align 2, !alias.scope !130, !noalias !127
  %102 = getelementptr i16, i16* %95, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %103, align 2, !alias.scope !130, !noalias !127
  %104 = or i64 %81, 32
  %105 = getelementptr i16, i16* %30, i64 %104
  %106 = getelementptr i16, i16* %59, i64 %104
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !127
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !127
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !130, !noalias !127
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !130, !noalias !127
  %115 = or i64 %81, 48
  %116 = getelementptr i16, i16* %30, i64 %115
  %117 = getelementptr i16, i16* %59, i64 %115
  %118 = bitcast i16* %116 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !127
  %120 = getelementptr i16, i16* %116, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !127
  %123 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %123, align 2, !alias.scope !130, !noalias !127
  %124 = getelementptr i16, i16* %117, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %125, align 2, !alias.scope !130, !noalias !127
  %126 = add i64 %81, 64
  %127 = add i64 %82, -4
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %80, !llvm.loop !132

129:                                              ; preds = %80, %68
  %130 = phi i64 [ 0, %68 ], [ %126, %80 ]
  %131 = icmp eq i64 %76, 0
  br i1 %131, label %148, label %132

132:                                              ; preds = %129, %132
  %133 = phi i64 [ %145, %132 ], [ %130, %129 ]
  %134 = phi i64 [ %146, %132 ], [ %76, %129 ]
  %135 = getelementptr i16, i16* %30, i64 %133
  %136 = getelementptr i16, i16* %59, i64 %133
  %137 = bitcast i16* %135 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !127
  %139 = getelementptr i16, i16* %135, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !127
  %142 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %142, align 2, !alias.scope !130, !noalias !127
  %143 = getelementptr i16, i16* %136, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %144, align 2, !alias.scope !130, !noalias !127
  %145 = add i64 %133, 16
  %146 = add i64 %134, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %132, !llvm.loop !133

148:                                              ; preds = %132, %129
  %149 = icmp eq i64 %29, %69
  br i1 %149, label %203, label %150

150:                                              ; preds = %148, %61, %57
  %151 = phi i64 [ %29, %61 ], [ %29, %57 ], [ %70, %148 ]
  %152 = phi i16* [ %30, %61 ], [ %30, %57 ], [ %71, %148 ]
  %153 = phi i16* [ %59, %61 ], [ %59, %57 ], [ %72, %148 ]
  %154 = add i64 %151, -1
  %155 = and i64 %151, 7
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %168, label %157

157:                                              ; preds = %150, %157
  %158 = phi i64 [ %163, %157 ], [ %151, %150 ]
  %159 = phi i16* [ %165, %157 ], [ %152, %150 ]
  %160 = phi i16* [ %164, %157 ], [ %153, %150 ]
  %161 = phi i64 [ %166, %157 ], [ %155, %150 ]
  %162 = load i16, i16* %159, align 2
  store i16 %162, i16* %160, align 2
  %163 = add i64 %158, -1
  %164 = getelementptr inbounds i16, i16* %160, i64 1
  %165 = getelementptr inbounds i16, i16* %159, i64 1
  %166 = add i64 %161, -1
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %157, !llvm.loop !134

168:                                              ; preds = %157, %150
  %169 = phi i64 [ %151, %150 ], [ %163, %157 ]
  %170 = phi i16* [ %152, %150 ], [ %165, %157 ]
  %171 = phi i16* [ %153, %150 ], [ %164, %157 ]
  %172 = icmp ult i64 %154, 7
  br i1 %172, label %203, label %173

173:                                              ; preds = %168, %173
  %174 = phi i64 [ %199, %173 ], [ %169, %168 ]
  %175 = phi i16* [ %201, %173 ], [ %170, %168 ]
  %176 = phi i16* [ %200, %173 ], [ %171, %168 ]
  %177 = load i16, i16* %175, align 2
  store i16 %177, i16* %176, align 2
  %178 = getelementptr inbounds i16, i16* %176, i64 1
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %176, i64 2
  %182 = getelementptr inbounds i16, i16* %175, i64 2
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %176, i64 3
  %185 = getelementptr inbounds i16, i16* %175, i64 3
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %176, i64 4
  %188 = getelementptr inbounds i16, i16* %175, i64 4
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %176, i64 5
  %191 = getelementptr inbounds i16, i16* %175, i64 5
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = getelementptr inbounds i16, i16* %176, i64 6
  %194 = getelementptr inbounds i16, i16* %175, i64 6
  %195 = load i16, i16* %194, align 2
  store i16 %195, i16* %193, align 2
  %196 = getelementptr inbounds i16, i16* %176, i64 7
  %197 = getelementptr inbounds i16, i16* %175, i64 7
  %198 = load i16, i16* %197, align 2
  store i16 %198, i16* %196, align 2
  %199 = add i64 %174, -8
  %200 = getelementptr inbounds i16, i16* %176, i64 8
  %201 = getelementptr inbounds i16, i16* %175, i64 8
  %202 = icmp eq i64 %199, 0
  br i1 %202, label %203, label %173, !llvm.loop !135

203:                                              ; preds = %168, %173, %148
  %204 = add i64 %46, %29
  %205 = load i8, i8* %32, align 1
  %206 = icmp slt i8 %205, 0
  br i1 %206, label %207, label %209

207:                                              ; preds = %203
  %208 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %204, i64* %208, align 8
  br label %211

209:                                              ; preds = %203
  %210 = trunc i64 %204 to i8
  store i8 %210, i8* %32, align 1
  br label %211

211:                                              ; preds = %209, %207
  %212 = getelementptr inbounds i16, i16* %58, i64 %204
  store i16 0, i16* %212, align 2
  br label %675

213:                                              ; preds = %44
  %214 = add i64 %46, %29
  %215 = sub i64 %214, %45
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.4"* %7, i64 %45, i64 %215, i64 %46, i64 %46, i64 0, i64 %29, i16* %30) #14
  br label %675

216:                                              ; preds = %20
  %217 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance.53", %"class.base::LazyInstance.53"* @_ZN13url_formatter12_GLOBAL__N_17g_uidnaE, i64 0, i32 0) acquire, align 8
  %218 = icmp ugt i64 %217, 1
  br i1 %218, label %241, label %219

219:                                              ; preds = %216
  %220 = call zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64* getelementptr inbounds (%"class.base::LazyInstance.53", %"class.base::LazyInstance.53"* @_ZN13url_formatter12_GLOBAL__N_17g_uidnaE, i64 0, i32 0)) #14
  br i1 %220, label %221, label %239

221:                                              ; preds = %219
  %222 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %222) #14
  store i32 0, i32* %9, align 4
  %223 = call %struct.UIDNA* @uidna_openUTS46_69(i32 4, i32* nonnull %9) #14
  store %struct.UIDNA* %223, %struct.UIDNA** bitcast (i8* getelementptr inbounds (%"class.base::LazyInstance.53", %"class.base::LazyInstance.53"* @_ZN13url_formatter12_GLOBAL__N_17g_uidnaE, i64 0, i32 1, i64 0) to %struct.UIDNA**), align 8
  %224 = load i32, i32* %9, align 4
  %225 = icmp sgt i32 %224, 0
  br i1 %225, label %226, label %238

226:                                              ; preds = %221
  %227 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %227) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.7, i64 0, i64 0), i32 381, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)) #14
  %228 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #14
  %229 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %228, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i64 38) #14
  %230 = load i32, i32* %9, align 4
  %231 = call i8* @u_errorName_69(i32 %230) #14
  %232 = call i64 @strlen(i8* %231) #14
  %233 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %229, i8* %231, i64 %232) #14
  %234 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %233, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0), i64 42) #14
  %235 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %234, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11, i64 0, i64 0), i64 47) #14
  %236 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %235, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.12, i64 0, i64 0), i64 41) #14
  %237 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %236, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0), i64 25) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %227) #14
  br label %238

238:                                              ; preds = %226, %221
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %222) #14
  call void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64* getelementptr inbounds (%"class.base::LazyInstance.53", %"class.base::LazyInstance.53"* @_ZN13url_formatter12_GLOBAL__N_17g_uidnaE, i64 0, i32 0), i64 ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance.53", %"class.base::LazyInstance.53"* @_ZN13url_formatter12_GLOBAL__N_17g_uidnaE, i64 0, i32 1, i64 0) to i64), void (i8*)* null, i8* bitcast (%"class.base::LazyInstance.53"* @_ZN13url_formatter12_GLOBAL__N_17g_uidnaE to i8*)) #14
  br label %241

239:                                              ; preds = %219
  %240 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance.53", %"class.base::LazyInstance.53"* @_ZN13url_formatter12_GLOBAL__N_17g_uidnaE, i64 0, i32 0) acquire, align 8
  br label %241

241:                                              ; preds = %216, %238, %239
  %242 = phi i64 [ %217, %216 ], [ ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance.53", %"class.base::LazyInstance.53"* @_ZN13url_formatter12_GLOBAL__N_17g_uidnaE, i64 0, i32 1, i64 0) to i64), %238 ], [ %240, %239 ]
  %243 = inttoptr i64 %242 to %"struct.url_formatter::(anonymous namespace)::UIDNAWrapper"*
  %244 = getelementptr inbounds %"struct.url_formatter::(anonymous namespace)::UIDNAWrapper", %"struct.url_formatter::(anonymous namespace)::UIDNAWrapper"* %243, i64 0, i32 0
  %245 = load %struct.UIDNA*, %struct.UIDNA** %244, align 8
  %246 = bitcast %"class.std::__1::basic_string.4"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %247 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %246, i64 0, i32 1, i32 1
  %248 = load i8, i8* %247, align 1
  %249 = icmp slt i8 %248, 0
  br i1 %249, label %250, label %253

250:                                              ; preds = %241
  %251 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %252 = load i64, i64* %251, align 8
  br label %255

253:                                              ; preds = %241
  %254 = zext i8 %248 to i64
  br label %255

255:                                              ; preds = %250, %253
  %256 = phi i64 [ %252, %250 ], [ %254, %253 ]
  %257 = bitcast %struct.UIDNAInfo* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %257) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %257, i8* align 4 bitcast (%struct.UIDNAInfo* @__const._ZN13url_formatter12_GLOBAL__N_124IDNToUnicodeOneComponentEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS2_IcNS4_IcEEEES6_bPNS3_12basic_stringIDsS5_NS3_9allocatorIDsEEEE.info to i8*), i64 16, i1 false)
  %258 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %258) #14
  store i32 -1431655766, i32* %14, align 4
  %259 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %260 = bitcast %"class.std::__1::basic_string.4"* %7 to i16*
  %261 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %262 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %263 = getelementptr inbounds %struct.UIDNAInfo, %struct.UIDNAInfo* %13, i64 0, i32 3
  br label %264

264:                                              ; preds = %341, %255
  %265 = phi i8 [ %248, %255 ], [ %342, %341 ]
  %266 = phi i32 [ 64, %255 ], [ %335, %341 ]
  %267 = sext i32 %266 to i64
  %268 = add i64 %256, %267
  %269 = icmp slt i8 %265, 0
  br i1 %269, label %270, label %272

270:                                              ; preds = %264
  %271 = load i64, i64* %259, align 8
  br label %274

272:                                              ; preds = %264
  %273 = zext i8 %265 to i64
  br label %274

274:                                              ; preds = %272, %270
  %275 = phi i64 [ %271, %270 ], [ %273, %272 ]
  %276 = icmp ugt i64 %268, %275
  br i1 %276, label %277, label %315

277:                                              ; preds = %274
  %278 = sub i64 %268, %275
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %322, label %280

280:                                              ; preds = %277
  br i1 %269, label %281, label %286

281:                                              ; preds = %280
  %282 = load i64, i64* %262, align 8
  %283 = and i64 %282, 9223372036854775807
  %284 = add nsw i64 %283, -1
  %285 = load i64, i64* %259, align 8
  br label %288

286:                                              ; preds = %280
  %287 = zext i8 %265 to i64
  br label %288

288:                                              ; preds = %286, %281
  %289 = phi i64 [ %284, %281 ], [ 10, %286 ]
  %290 = phi i64 [ %285, %281 ], [ %287, %286 ]
  %291 = sub i64 %289, %290
  %292 = icmp ult i64 %291, %278
  br i1 %292, label %293, label %297

293:                                              ; preds = %288
  %294 = add i64 %290, %278
  %295 = sub i64 %294, %289
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* %7, i64 %289, i64 %295, i64 %290, i64 %290, i64 0, i64 0) #14
  %296 = load i8, i8* %247, align 1
  br label %297

297:                                              ; preds = %293, %288
  %298 = phi i8 [ %296, %293 ], [ %265, %288 ]
  %299 = icmp slt i8 %298, 0
  br i1 %299, label %300, label %302

300:                                              ; preds = %297
  %301 = load i16*, i16** %261, align 8
  br label %302

302:                                              ; preds = %297, %300
  %303 = phi i16* [ %301, %300 ], [ %260, %297 ]
  %304 = getelementptr inbounds i16, i16* %303, i64 %290
  %305 = bitcast i16* %304 to i8*
  %306 = shl i64 %278, 1
  call void @llvm.memset.p0i8.i64(i8* align 2 %305, i8 0, i64 %306, i1 false) #14
  %307 = add i64 %290, %278
  %308 = load i8, i8* %247, align 1
  %309 = icmp slt i8 %308, 0
  br i1 %309, label %310, label %311

310:                                              ; preds = %302
  store i64 %307, i64* %259, align 8
  br label %313

311:                                              ; preds = %302
  %312 = trunc i64 %307 to i8
  store i8 %312, i8* %247, align 1
  br label %313

313:                                              ; preds = %311, %310
  %314 = getelementptr inbounds i16, i16* %303, i64 %307
  store i16 0, i16* %314, align 2
  br label %322

315:                                              ; preds = %274
  br i1 %269, label %316, label %319

316:                                              ; preds = %315
  %317 = load i16*, i16** %261, align 8
  %318 = getelementptr inbounds i16, i16* %317, i64 %268
  store i16 0, i16* %318, align 2
  store i64 %268, i64* %259, align 8
  br label %322

319:                                              ; preds = %315
  %320 = getelementptr inbounds i16, i16* %260, i64 %268
  store i16 0, i16* %320, align 2
  %321 = trunc i64 %268 to i8
  store i8 %321, i8* %247, align 1
  br label %324

322:                                              ; preds = %316, %313, %277
  %323 = load i8, i8* %247, align 1
  br label %324

324:                                              ; preds = %322, %319
  %325 = phi i8 [ %323, %322 ], [ %321, %319 ]
  store i32 0, i32* %14, align 4
  %326 = load i16*, i16** %15, align 8
  %327 = load i64, i64* %16, align 8
  %328 = trunc i64 %327 to i32
  %329 = icmp slt i8 %325, 0
  br i1 %329, label %330, label %332

330:                                              ; preds = %324
  %331 = load i16*, i16** %261, align 8
  br label %332

332:                                              ; preds = %324, %330
  %333 = phi i16* [ %331, %330 ], [ %260, %324 ]
  %334 = getelementptr inbounds i16, i16* %333, i64 %256
  %335 = call i32 @uidna_labelToUnicode_69(%struct.UIDNA* %245, i16* %326, i32 %328, i16* %334, i32 %266, %struct.UIDNAInfo* nonnull %13, i32* nonnull %14) #14
  %336 = load i32, i32* %14, align 4
  %337 = icmp eq i32 %336, 15
  %338 = load i32, i32* %263, align 4
  %339 = icmp eq i32 %338, 0
  %340 = and i1 %337, %339
  br i1 %340, label %341, label %343

341:                                              ; preds = %332
  %342 = load i8, i8* %247, align 1
  br label %264

343:                                              ; preds = %332
  %344 = icmp slt i32 %336, 1
  %345 = and i1 %344, %339
  br i1 %345, label %346, label %432

346:                                              ; preds = %343
  %347 = sext i32 %335 to i64
  %348 = add i64 %256, %347
  %349 = load i8, i8* %247, align 1
  %350 = icmp slt i8 %349, 0
  br i1 %350, label %351, label %353

351:                                              ; preds = %346
  %352 = load i64, i64* %259, align 8
  br label %355

353:                                              ; preds = %346
  %354 = zext i8 %349 to i64
  br label %355

355:                                              ; preds = %353, %351
  %356 = phi i64 [ %352, %351 ], [ %354, %353 ]
  %357 = icmp ugt i64 %348, %356
  br i1 %357, label %358, label %396

358:                                              ; preds = %355
  %359 = sub i64 %348, %356
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %403, label %361

361:                                              ; preds = %358
  br i1 %350, label %362, label %367

362:                                              ; preds = %361
  %363 = load i64, i64* %262, align 8
  %364 = and i64 %363, 9223372036854775807
  %365 = add nsw i64 %364, -1
  %366 = load i64, i64* %259, align 8
  br label %369

367:                                              ; preds = %361
  %368 = zext i8 %349 to i64
  br label %369

369:                                              ; preds = %367, %362
  %370 = phi i64 [ %365, %362 ], [ 10, %367 ]
  %371 = phi i64 [ %366, %362 ], [ %368, %367 ]
  %372 = sub i64 %370, %371
  %373 = icmp ult i64 %372, %359
  br i1 %373, label %374, label %378

374:                                              ; preds = %369
  %375 = add i64 %371, %359
  %376 = sub i64 %375, %370
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* %7, i64 %370, i64 %376, i64 %371, i64 %371, i64 0, i64 0) #14
  %377 = load i8, i8* %247, align 1
  br label %378

378:                                              ; preds = %374, %369
  %379 = phi i8 [ %377, %374 ], [ %349, %369 ]
  %380 = icmp slt i8 %379, 0
  br i1 %380, label %381, label %383

381:                                              ; preds = %378
  %382 = load i16*, i16** %261, align 8
  br label %383

383:                                              ; preds = %378, %381
  %384 = phi i16* [ %382, %381 ], [ %260, %378 ]
  %385 = getelementptr inbounds i16, i16* %384, i64 %371
  %386 = bitcast i16* %385 to i8*
  %387 = shl i64 %359, 1
  call void @llvm.memset.p0i8.i64(i8* align 2 %386, i8 0, i64 %387, i1 false) #14
  %388 = add i64 %371, %359
  %389 = load i8, i8* %247, align 1
  %390 = icmp slt i8 %389, 0
  br i1 %390, label %391, label %392

391:                                              ; preds = %383
  store i64 %388, i64* %259, align 8
  br label %394

392:                                              ; preds = %383
  %393 = trunc i64 %388 to i8
  store i8 %393, i8* %247, align 1
  br label %394

394:                                              ; preds = %392, %391
  %395 = getelementptr inbounds i16, i16* %384, i64 %388
  store i16 0, i16* %395, align 2
  br label %403

396:                                              ; preds = %355
  br i1 %350, label %397, label %400

397:                                              ; preds = %396
  %398 = load i16*, i16** %261, align 8
  %399 = getelementptr inbounds i16, i16* %398, i64 %348
  store i16 0, i16* %399, align 2
  store i64 %348, i64* %259, align 8
  br label %403

400:                                              ; preds = %396
  %401 = getelementptr inbounds i16, i16* %260, i64 %348
  store i16 0, i16* %401, align 2
  %402 = trunc i64 %348 to i8
  store i8 %402, i8* %247, align 1
  br label %405

403:                                              ; preds = %397, %394, %358
  %404 = load i8, i8* %247, align 1
  br label %405

405:                                              ; preds = %403, %400
  %406 = phi i8 [ %404, %403 ], [ %402, %400 ]
  %407 = icmp slt i8 %406, 0
  br i1 %407, label %408, label %410

408:                                              ; preds = %405
  %409 = load i16*, i16** %261, align 8
  br label %410

410:                                              ; preds = %405, %408
  %411 = phi i16* [ %409, %408 ], [ %260, %405 ]
  %412 = getelementptr inbounds i16, i16* %411, i64 %256
  %413 = icmp sgt i32 %335, -1
  br i1 %413, label %415, label %414, !prof !136

414:                                              ; preds = %410
  call void @llvm.trap() #14
  unreachable

415:                                              ; preds = %410
  %416 = bitcast %"class.base::BasicStringPiece.50"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %416)
  %417 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0) acquire, align 8
  %418 = icmp ugt i64 %417, 1
  br i1 %418, label %424, label %419

419:                                              ; preds = %415
  %420 = call zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0)) #14
  br i1 %420, label %421, label %422

421:                                              ; preds = %419
  call void @_ZN13url_formatter15IDNSpoofCheckerC1Ev(%"class.url_formatter::IDNSpoofChecker"* bitcast (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to %"class.url_formatter::IDNSpoofChecker"*)) #14
  call void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0), i64 ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to i64), void (i8*)* null, i8* bitcast (%"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE to i8*)) #14
  br label %424

422:                                              ; preds = %419
  %423 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 0) acquire, align 8
  br label %424

424:                                              ; preds = %415, %421, %422
  %425 = phi i64 [ %417, %415 ], [ ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZN13url_formatter12_GLOBAL__N_119g_idn_spoof_checkerE, i64 0, i32 1, i64 0) to i64), %421 ], [ %423, %422 ]
  %426 = inttoptr i64 %425 to %"class.url_formatter::IDNSpoofChecker"*
  %427 = getelementptr inbounds %"class.base::BasicStringPiece.50", %"class.base::BasicStringPiece.50"* %11, i64 0, i32 0
  store i16* %4, i16** %427, align 8
  %428 = getelementptr inbounds %"class.base::BasicStringPiece.50", %"class.base::BasicStringPiece.50"* %11, i64 0, i32 1
  store i64 %5, i64* %428, align 8
  %429 = call i32 @_ZN13url_formatter15IDNSpoofChecker22SafeToDisplayAsUnicodeEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS2_IcNS4_IcEEEES6_(%"class.url_formatter::IDNSpoofChecker"* %426, i16* %412, i64 %347, i8* %2, i64 %3, %"class.base::BasicStringPiece.50"* nonnull byval(%"class.base::BasicStringPiece.50") align 8 %11) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %416)
  %430 = icmp eq i32 %429, 1
  %431 = or i1 %430, %6
  br i1 %431, label %671, label %432

432:                                              ; preds = %424, %343
  %433 = phi i8 [ 1, %424 ], [ 0, %343 ]
  %434 = phi i32 [ %429, %424 ], [ 0, %343 ]
  %435 = load i8, i8* %247, align 1
  %436 = icmp slt i8 %435, 0
  br i1 %436, label %437, label %439

437:                                              ; preds = %432
  %438 = load i64, i64* %259, align 8
  br label %441

439:                                              ; preds = %432
  %440 = zext i8 %435 to i64
  br label %441

441:                                              ; preds = %439, %437
  %442 = phi i64 [ %438, %437 ], [ %440, %439 ]
  %443 = icmp ugt i64 %256, %442
  br i1 %443, label %444, label %482

444:                                              ; preds = %441
  %445 = sub i64 %256, %442
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %489, label %447

447:                                              ; preds = %444
  br i1 %436, label %448, label %453

448:                                              ; preds = %447
  %449 = load i64, i64* %262, align 8
  %450 = and i64 %449, 9223372036854775807
  %451 = add nsw i64 %450, -1
  %452 = load i64, i64* %259, align 8
  br label %455

453:                                              ; preds = %447
  %454 = zext i8 %435 to i64
  br label %455

455:                                              ; preds = %453, %448
  %456 = phi i64 [ %451, %448 ], [ 10, %453 ]
  %457 = phi i64 [ %452, %448 ], [ %454, %453 ]
  %458 = sub i64 %456, %457
  %459 = icmp ult i64 %458, %445
  br i1 %459, label %460, label %464

460:                                              ; preds = %455
  %461 = add i64 %457, %445
  %462 = sub i64 %461, %456
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"* %7, i64 %456, i64 %462, i64 %457, i64 %457, i64 0, i64 0) #14
  %463 = load i8, i8* %247, align 1
  br label %464

464:                                              ; preds = %460, %455
  %465 = phi i8 [ %463, %460 ], [ %435, %455 ]
  %466 = icmp slt i8 %465, 0
  br i1 %466, label %467, label %469

467:                                              ; preds = %464
  %468 = load i16*, i16** %261, align 8
  br label %469

469:                                              ; preds = %464, %467
  %470 = phi i16* [ %468, %467 ], [ %260, %464 ]
  %471 = getelementptr inbounds i16, i16* %470, i64 %457
  %472 = bitcast i16* %471 to i8*
  %473 = shl i64 %445, 1
  call void @llvm.memset.p0i8.i64(i8* align 2 %472, i8 0, i64 %473, i1 false) #14
  %474 = add i64 %457, %445
  %475 = load i8, i8* %247, align 1
  %476 = icmp slt i8 %475, 0
  br i1 %476, label %477, label %478

477:                                              ; preds = %469
  store i64 %474, i64* %259, align 8
  br label %480

478:                                              ; preds = %469
  %479 = trunc i64 %474 to i8
  store i8 %479, i8* %247, align 1
  br label %480

480:                                              ; preds = %478, %477
  %481 = getelementptr inbounds i16, i16* %470, i64 %474
  store i16 0, i16* %481, align 2
  br label %489

482:                                              ; preds = %441
  br i1 %436, label %483, label %486

483:                                              ; preds = %482
  %484 = load i16*, i16** %261, align 8
  %485 = getelementptr inbounds i16, i16* %484, i64 %256
  store i16 0, i16* %485, align 2
  store i64 %256, i64* %259, align 8
  br label %489

486:                                              ; preds = %482
  %487 = getelementptr inbounds i16, i16* %260, i64 %256
  store i16 0, i16* %487, align 2
  %488 = trunc i64 %256 to i8
  store i8 %488, i8* %247, align 1
  br label %491

489:                                              ; preds = %483, %480, %444
  %490 = load i8, i8* %247, align 1
  br label %491

491:                                              ; preds = %489, %486
  %492 = phi i8 [ %490, %489 ], [ %488, %486 ]
  %493 = load i16*, i16** %15, align 8
  %494 = load i64, i64* %16, align 8
  %495 = icmp slt i8 %492, 0
  br i1 %495, label %496, label %501

496:                                              ; preds = %491
  %497 = load i64, i64* %262, align 8
  %498 = and i64 %497, 9223372036854775807
  %499 = add nsw i64 %498, -1
  %500 = load i64, i64* %259, align 8
  br label %503

501:                                              ; preds = %491
  %502 = zext i8 %492 to i64
  br label %503

503:                                              ; preds = %501, %496
  %504 = phi i64 [ %499, %496 ], [ 10, %501 ]
  %505 = phi i64 [ %500, %496 ], [ %502, %501 ]
  %506 = sub i64 %504, %505
  %507 = icmp ult i64 %506, %494
  br i1 %507, label %668, label %508

508:                                              ; preds = %503
  %509 = icmp eq i64 %494, 0
  br i1 %509, label %671, label %510

510:                                              ; preds = %508
  br i1 %495, label %511, label %513

511:                                              ; preds = %510
  %512 = load i16*, i16** %261, align 8
  br label %513

513:                                              ; preds = %510, %511
  %514 = phi i16* [ %512, %511 ], [ %260, %510 ]
  %515 = getelementptr inbounds i16, i16* %514, i64 %505
  %516 = icmp ult i64 %494, 16
  br i1 %516, label %606, label %517

517:                                              ; preds = %513
  %518 = add i64 %505, %494
  %519 = getelementptr i16, i16* %514, i64 %518
  %520 = getelementptr i16, i16* %493, i64 %494
  %521 = icmp ult i16* %515, %520
  %522 = icmp ult i16* %493, %519
  %523 = and i1 %521, %522
  br i1 %523, label %606, label %524

524:                                              ; preds = %517
  %525 = and i64 %494, -16
  %526 = sub i64 %494, %525
  %527 = getelementptr i16, i16* %493, i64 %525
  %528 = getelementptr i16, i16* %515, i64 %525
  %529 = add i64 %525, -16
  %530 = lshr exact i64 %529, 4
  %531 = add nuw nsw i64 %530, 1
  %532 = and i64 %531, 3
  %533 = icmp ult i64 %529, 48
  br i1 %533, label %585, label %534

534:                                              ; preds = %524
  %535 = sub nsw i64 %531, %532
  br label %536

536:                                              ; preds = %536, %534
  %537 = phi i64 [ 0, %534 ], [ %582, %536 ]
  %538 = phi i64 [ %535, %534 ], [ %583, %536 ]
  %539 = getelementptr i16, i16* %493, i64 %537
  %540 = getelementptr i16, i16* %515, i64 %537
  %541 = bitcast i16* %539 to <8 x i16>*
  %542 = load <8 x i16>, <8 x i16>* %541, align 2, !alias.scope !137
  %543 = getelementptr i16, i16* %539, i64 8
  %544 = bitcast i16* %543 to <8 x i16>*
  %545 = load <8 x i16>, <8 x i16>* %544, align 2, !alias.scope !137
  %546 = bitcast i16* %540 to <8 x i16>*
  store <8 x i16> %542, <8 x i16>* %546, align 2, !alias.scope !140, !noalias !137
  %547 = getelementptr i16, i16* %540, i64 8
  %548 = bitcast i16* %547 to <8 x i16>*
  store <8 x i16> %545, <8 x i16>* %548, align 2, !alias.scope !140, !noalias !137
  %549 = or i64 %537, 16
  %550 = getelementptr i16, i16* %493, i64 %549
  %551 = getelementptr i16, i16* %515, i64 %549
  %552 = bitcast i16* %550 to <8 x i16>*
  %553 = load <8 x i16>, <8 x i16>* %552, align 2, !alias.scope !137
  %554 = getelementptr i16, i16* %550, i64 8
  %555 = bitcast i16* %554 to <8 x i16>*
  %556 = load <8 x i16>, <8 x i16>* %555, align 2, !alias.scope !137
  %557 = bitcast i16* %551 to <8 x i16>*
  store <8 x i16> %553, <8 x i16>* %557, align 2, !alias.scope !140, !noalias !137
  %558 = getelementptr i16, i16* %551, i64 8
  %559 = bitcast i16* %558 to <8 x i16>*
  store <8 x i16> %556, <8 x i16>* %559, align 2, !alias.scope !140, !noalias !137
  %560 = or i64 %537, 32
  %561 = getelementptr i16, i16* %493, i64 %560
  %562 = getelementptr i16, i16* %515, i64 %560
  %563 = bitcast i16* %561 to <8 x i16>*
  %564 = load <8 x i16>, <8 x i16>* %563, align 2, !alias.scope !137
  %565 = getelementptr i16, i16* %561, i64 8
  %566 = bitcast i16* %565 to <8 x i16>*
  %567 = load <8 x i16>, <8 x i16>* %566, align 2, !alias.scope !137
  %568 = bitcast i16* %562 to <8 x i16>*
  store <8 x i16> %564, <8 x i16>* %568, align 2, !alias.scope !140, !noalias !137
  %569 = getelementptr i16, i16* %562, i64 8
  %570 = bitcast i16* %569 to <8 x i16>*
  store <8 x i16> %567, <8 x i16>* %570, align 2, !alias.scope !140, !noalias !137
  %571 = or i64 %537, 48
  %572 = getelementptr i16, i16* %493, i64 %571
  %573 = getelementptr i16, i16* %515, i64 %571
  %574 = bitcast i16* %572 to <8 x i16>*
  %575 = load <8 x i16>, <8 x i16>* %574, align 2, !alias.scope !137
  %576 = getelementptr i16, i16* %572, i64 8
  %577 = bitcast i16* %576 to <8 x i16>*
  %578 = load <8 x i16>, <8 x i16>* %577, align 2, !alias.scope !137
  %579 = bitcast i16* %573 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %579, align 2, !alias.scope !140, !noalias !137
  %580 = getelementptr i16, i16* %573, i64 8
  %581 = bitcast i16* %580 to <8 x i16>*
  store <8 x i16> %578, <8 x i16>* %581, align 2, !alias.scope !140, !noalias !137
  %582 = add i64 %537, 64
  %583 = add i64 %538, -4
  %584 = icmp eq i64 %583, 0
  br i1 %584, label %585, label %536, !llvm.loop !142

585:                                              ; preds = %536, %524
  %586 = phi i64 [ 0, %524 ], [ %582, %536 ]
  %587 = icmp eq i64 %532, 0
  br i1 %587, label %604, label %588

588:                                              ; preds = %585, %588
  %589 = phi i64 [ %601, %588 ], [ %586, %585 ]
  %590 = phi i64 [ %602, %588 ], [ %532, %585 ]
  %591 = getelementptr i16, i16* %493, i64 %589
  %592 = getelementptr i16, i16* %515, i64 %589
  %593 = bitcast i16* %591 to <8 x i16>*
  %594 = load <8 x i16>, <8 x i16>* %593, align 2, !alias.scope !137
  %595 = getelementptr i16, i16* %591, i64 8
  %596 = bitcast i16* %595 to <8 x i16>*
  %597 = load <8 x i16>, <8 x i16>* %596, align 2, !alias.scope !137
  %598 = bitcast i16* %592 to <8 x i16>*
  store <8 x i16> %594, <8 x i16>* %598, align 2, !alias.scope !140, !noalias !137
  %599 = getelementptr i16, i16* %592, i64 8
  %600 = bitcast i16* %599 to <8 x i16>*
  store <8 x i16> %597, <8 x i16>* %600, align 2, !alias.scope !140, !noalias !137
  %601 = add i64 %589, 16
  %602 = add i64 %590, -1
  %603 = icmp eq i64 %602, 0
  br i1 %603, label %604, label %588, !llvm.loop !143

604:                                              ; preds = %588, %585
  %605 = icmp eq i64 %494, %525
  br i1 %605, label %659, label %606

606:                                              ; preds = %604, %517, %513
  %607 = phi i64 [ %494, %517 ], [ %494, %513 ], [ %526, %604 ]
  %608 = phi i16* [ %493, %517 ], [ %493, %513 ], [ %527, %604 ]
  %609 = phi i16* [ %515, %517 ], [ %515, %513 ], [ %528, %604 ]
  %610 = add i64 %607, -1
  %611 = and i64 %607, 7
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %624, label %613

613:                                              ; preds = %606, %613
  %614 = phi i64 [ %619, %613 ], [ %607, %606 ]
  %615 = phi i16* [ %621, %613 ], [ %608, %606 ]
  %616 = phi i16* [ %620, %613 ], [ %609, %606 ]
  %617 = phi i64 [ %622, %613 ], [ %611, %606 ]
  %618 = load i16, i16* %615, align 2
  store i16 %618, i16* %616, align 2
  %619 = add i64 %614, -1
  %620 = getelementptr inbounds i16, i16* %616, i64 1
  %621 = getelementptr inbounds i16, i16* %615, i64 1
  %622 = add i64 %617, -1
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %624, label %613, !llvm.loop !144

624:                                              ; preds = %613, %606
  %625 = phi i64 [ %607, %606 ], [ %619, %613 ]
  %626 = phi i16* [ %608, %606 ], [ %621, %613 ]
  %627 = phi i16* [ %609, %606 ], [ %620, %613 ]
  %628 = icmp ult i64 %610, 7
  br i1 %628, label %659, label %629

629:                                              ; preds = %624, %629
  %630 = phi i64 [ %655, %629 ], [ %625, %624 ]
  %631 = phi i16* [ %657, %629 ], [ %626, %624 ]
  %632 = phi i16* [ %656, %629 ], [ %627, %624 ]
  %633 = load i16, i16* %631, align 2
  store i16 %633, i16* %632, align 2
  %634 = getelementptr inbounds i16, i16* %632, i64 1
  %635 = getelementptr inbounds i16, i16* %631, i64 1
  %636 = load i16, i16* %635, align 2
  store i16 %636, i16* %634, align 2
  %637 = getelementptr inbounds i16, i16* %632, i64 2
  %638 = getelementptr inbounds i16, i16* %631, i64 2
  %639 = load i16, i16* %638, align 2
  store i16 %639, i16* %637, align 2
  %640 = getelementptr inbounds i16, i16* %632, i64 3
  %641 = getelementptr inbounds i16, i16* %631, i64 3
  %642 = load i16, i16* %641, align 2
  store i16 %642, i16* %640, align 2
  %643 = getelementptr inbounds i16, i16* %632, i64 4
  %644 = getelementptr inbounds i16, i16* %631, i64 4
  %645 = load i16, i16* %644, align 2
  store i16 %645, i16* %643, align 2
  %646 = getelementptr inbounds i16, i16* %632, i64 5
  %647 = getelementptr inbounds i16, i16* %631, i64 5
  %648 = load i16, i16* %647, align 2
  store i16 %648, i16* %646, align 2
  %649 = getelementptr inbounds i16, i16* %632, i64 6
  %650 = getelementptr inbounds i16, i16* %631, i64 6
  %651 = load i16, i16* %650, align 2
  store i16 %651, i16* %649, align 2
  %652 = getelementptr inbounds i16, i16* %632, i64 7
  %653 = getelementptr inbounds i16, i16* %631, i64 7
  %654 = load i16, i16* %653, align 2
  store i16 %654, i16* %652, align 2
  %655 = add i64 %630, -8
  %656 = getelementptr inbounds i16, i16* %632, i64 8
  %657 = getelementptr inbounds i16, i16* %631, i64 8
  %658 = icmp eq i64 %655, 0
  br i1 %658, label %659, label %629, !llvm.loop !145

659:                                              ; preds = %624, %629, %604
  %660 = add i64 %505, %494
  %661 = load i8, i8* %247, align 1
  %662 = icmp slt i8 %661, 0
  br i1 %662, label %663, label %664

663:                                              ; preds = %659
  store i64 %660, i64* %259, align 8
  br label %666

664:                                              ; preds = %659
  %665 = trunc i64 %660 to i8
  store i8 %665, i8* %247, align 1
  br label %666

666:                                              ; preds = %664, %663
  %667 = getelementptr inbounds i16, i16* %514, i64 %660
  store i16 0, i16* %667, align 2
  br label %671

668:                                              ; preds = %503
  %669 = add i64 %505, %494
  %670 = sub i64 %669, %504
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.4"* %7, i64 %504, i64 %670, i64 %505, i64 %505, i64 0, i64 %494, i16* %493) #14
  br label %671

671:                                              ; preds = %668, %666, %508, %424
  %672 = phi i64 [ 1, %424 ], [ 0, %508 ], [ 0, %666 ], [ 0, %668 ]
  %673 = phi i8 [ 1, %424 ], [ %433, %508 ], [ %433, %666 ], [ %433, %668 ]
  %674 = phi i32 [ %429, %424 ], [ %434, %508 ], [ %434, %666 ], [ %434, %668 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %258) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %257) #14
  br label %675

675:                                              ; preds = %213, %211, %49, %8, %671
  %676 = phi i64 [ 0, %8 ], [ %672, %671 ], [ 0, %49 ], [ 0, %211 ], [ 0, %213 ]
  %677 = phi i8 [ 0, %8 ], [ %673, %671 ], [ 0, %49 ], [ 0, %211 ], [ 0, %213 ]
  %678 = phi i32 [ 0, %8 ], [ %674, %671 ], [ 0, %49 ], [ 0, %211 ], [ 0, %213 ]
  %679 = zext i32 %678 to i64
  %680 = shl nuw i64 %679, 32
  %681 = zext i8 %677 to i64
  %682 = shl nuw nsw i64 %681, 8
  %683 = and i64 %676, 255
  %684 = or i64 %683, %682
  %685 = or i64 %684, %680
  %686 = or i64 %685, 2863267840
  ret i64 %686
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string.4"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.4"*, %"class.std::__1::basic_string.4"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string.4"* %0 to i8*
  %4 = icmp eq %"class.std::__1::basic_string.4"* %0, %1
  br i1 %4, label %510, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string.4"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = bitcast %"class.std::__1::basic_string.4"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %9, label %341, label %14

14:                                               ; preds = %5
  br i1 %13, label %17, label %15

15:                                               ; preds = %14
  %16 = bitcast %"class.std::__1::basic_string.4"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %16, i64 24, i1 false)
  br label %510

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 11
  br i1 %23, label %24, label %175

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  %26 = trunc i64 %22 to i8
  store i8 %26, i8* %7, align 1
  %27 = icmp eq i64 %22, 0
  br i1 %27, label %173, label %28

28:                                               ; preds = %24
  %29 = icmp ult i64 %22, 16
  br i1 %29, label %120, label %30

30:                                               ; preds = %28
  %31 = shl i64 %22, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = getelementptr i16, i16* %19, i64 %22
  %34 = bitcast i16* %33 to %"class.std::__1::basic_string.4"*
  %35 = icmp ugt %"class.std::__1::basic_string.4"* %34, %0
  %36 = icmp ugt i8* %32, %20
  %37 = and i1 %35, %36
  br i1 %37, label %120, label %38

38:                                               ; preds = %30
  %39 = and i64 %22, -16
  %40 = sub i64 %22, %39
  %41 = getelementptr i16, i16* %19, i64 %39
  %42 = getelementptr i16, i16* %25, i64 %39
  %43 = add i64 %39, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 48
  br i1 %47, label %99, label %48

48:                                               ; preds = %38
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %96, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %97, %50 ]
  %53 = getelementptr i16, i16* %19, i64 %51
  %54 = getelementptr i16, i16* %25, i64 %51
  %55 = bitcast i16* %53 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !146
  %57 = getelementptr i16, i16* %53, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !146
  %60 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %60, align 2, !alias.scope !149, !noalias !146
  %61 = getelementptr i16, i16* %54, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %62, align 2, !alias.scope !149, !noalias !146
  %63 = or i64 %51, 16
  %64 = getelementptr i16, i16* %19, i64 %63
  %65 = getelementptr i16, i16* %25, i64 %63
  %66 = bitcast i16* %64 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !146
  %68 = getelementptr i16, i16* %64, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !146
  %71 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %71, align 2, !alias.scope !149, !noalias !146
  %72 = getelementptr i16, i16* %65, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %73, align 2, !alias.scope !149, !noalias !146
  %74 = or i64 %51, 32
  %75 = getelementptr i16, i16* %19, i64 %74
  %76 = getelementptr i16, i16* %25, i64 %74
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !146
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !146
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !149, !noalias !146
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !149, !noalias !146
  %85 = or i64 %51, 48
  %86 = getelementptr i16, i16* %19, i64 %85
  %87 = getelementptr i16, i16* %25, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !146
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !146
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !149, !noalias !146
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !149, !noalias !146
  %96 = add i64 %51, 64
  %97 = add i64 %52, -4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %50, !llvm.loop !151

99:                                               ; preds = %50, %38
  %100 = phi i64 [ 0, %38 ], [ %96, %50 ]
  %101 = icmp eq i64 %46, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %115, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %116, %102 ], [ %46, %99 ]
  %105 = getelementptr i16, i16* %19, i64 %103
  %106 = getelementptr i16, i16* %25, i64 %103
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !146
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !146
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !149, !noalias !146
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !149, !noalias !146
  %115 = add i64 %103, 16
  %116 = add i64 %104, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %102, !llvm.loop !152

118:                                              ; preds = %102, %99
  %119 = icmp eq i64 %22, %39
  br i1 %119, label %173, label %120

120:                                              ; preds = %118, %30, %28
  %121 = phi i64 [ %22, %30 ], [ %22, %28 ], [ %40, %118 ]
  %122 = phi i16* [ %19, %30 ], [ %19, %28 ], [ %41, %118 ]
  %123 = phi i16* [ %25, %30 ], [ %25, %28 ], [ %42, %118 ]
  %124 = add i64 %121, -1
  %125 = and i64 %121, 7
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %120, %127
  %128 = phi i64 [ %133, %127 ], [ %121, %120 ]
  %129 = phi i16* [ %135, %127 ], [ %122, %120 ]
  %130 = phi i16* [ %134, %127 ], [ %123, %120 ]
  %131 = phi i64 [ %136, %127 ], [ %125, %120 ]
  %132 = load i16, i16* %129, align 2
  store i16 %132, i16* %130, align 2
  %133 = add i64 %128, -1
  %134 = getelementptr inbounds i16, i16* %130, i64 1
  %135 = getelementptr inbounds i16, i16* %129, i64 1
  %136 = add i64 %131, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %127, !llvm.loop !153

138:                                              ; preds = %127, %120
  %139 = phi i64 [ %121, %120 ], [ %133, %127 ]
  %140 = phi i16* [ %122, %120 ], [ %135, %127 ]
  %141 = phi i16* [ %123, %120 ], [ %134, %127 ]
  %142 = icmp ult i64 %124, 7
  br i1 %142, label %173, label %143

143:                                              ; preds = %138, %143
  %144 = phi i64 [ %169, %143 ], [ %139, %138 ]
  %145 = phi i16* [ %171, %143 ], [ %140, %138 ]
  %146 = phi i16* [ %170, %143 ], [ %141, %138 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %146, align 2
  %148 = getelementptr inbounds i16, i16* %146, i64 1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = load i16, i16* %149, align 2
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds i16, i16* %146, i64 2
  %152 = getelementptr inbounds i16, i16* %145, i64 2
  %153 = load i16, i16* %152, align 2
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds i16, i16* %146, i64 3
  %155 = getelementptr inbounds i16, i16* %145, i64 3
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds i16, i16* %146, i64 4
  %158 = getelementptr inbounds i16, i16* %145, i64 4
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds i16, i16* %146, i64 5
  %161 = getelementptr inbounds i16, i16* %145, i64 5
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %146, i64 6
  %164 = getelementptr inbounds i16, i16* %145, i64 6
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %146, i64 7
  %167 = getelementptr inbounds i16, i16* %145, i64 7
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = add i64 %144, -8
  %170 = getelementptr inbounds i16, i16* %146, i64 8
  %171 = getelementptr inbounds i16, i16* %145, i64 8
  %172 = icmp eq i64 %169, 0
  br i1 %172, label %173, label %143, !llvm.loop !154

173:                                              ; preds = %138, %143, %118, %24
  %174 = getelementptr inbounds i16, i16* %25, i64 %22
  store i16 0, i16* %174, align 2
  br label %510

175:                                              ; preds = %17
  %176 = add i64 %22, -10
  %177 = icmp ugt i64 %176, 9223372036854775780
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = bitcast %"class.std::__1::basic_string.4"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %179) #16
  unreachable

180:                                              ; preds = %175
  %181 = icmp ugt i64 %22, 20
  %182 = select i1 %181, i64 %22, i64 20
  %183 = add nuw nsw i64 %182, 8
  %184 = and i64 %183, -8
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %180
  tail call void @abort() #16
  unreachable

187:                                              ; preds = %180
  %188 = shl i64 %184, 1
  %189 = tail call i8* @_Znwm(i64 %188) #15
  %190 = bitcast i8* %189 to i16*
  %191 = icmp ult i64 %22, 16
  br i1 %191, label %282, label %192

192:                                              ; preds = %187
  %193 = shl i64 %22, 1
  %194 = getelementptr i8, i8* %189, i64 %193
  %195 = getelementptr i16, i16* %19, i64 %22
  %196 = bitcast i16* %195 to i8*
  %197 = icmp ult i8* %189, %196
  %198 = icmp ugt i8* %194, %20
  %199 = and i1 %197, %198
  br i1 %199, label %282, label %200

200:                                              ; preds = %192
  %201 = and i64 %22, -16
  %202 = sub i64 %22, %201
  %203 = getelementptr i16, i16* %19, i64 %201
  %204 = getelementptr i16, i16* %190, i64 %201
  %205 = add i64 %201, -16
  %206 = lshr exact i64 %205, 4
  %207 = add nuw nsw i64 %206, 1
  %208 = and i64 %207, 3
  %209 = icmp ult i64 %205, 48
  br i1 %209, label %261, label %210

210:                                              ; preds = %200
  %211 = sub nsw i64 %207, %208
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi i64 [ 0, %210 ], [ %258, %212 ]
  %214 = phi i64 [ %211, %210 ], [ %259, %212 ]
  %215 = getelementptr i16, i16* %19, i64 %213
  %216 = getelementptr i16, i16* %190, i64 %213
  %217 = bitcast i16* %215 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2, !alias.scope !155
  %219 = getelementptr i16, i16* %215, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2, !alias.scope !155
  %222 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %222, align 2, !alias.scope !158, !noalias !155
  %223 = getelementptr i16, i16* %216, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %224, align 2, !alias.scope !158, !noalias !155
  %225 = or i64 %213, 16
  %226 = getelementptr i16, i16* %19, i64 %225
  %227 = getelementptr i16, i16* %190, i64 %225
  %228 = bitcast i16* %226 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2, !alias.scope !155
  %230 = getelementptr i16, i16* %226, i64 8
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !155
  %233 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %233, align 2, !alias.scope !158, !noalias !155
  %234 = getelementptr i16, i16* %227, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %235, align 2, !alias.scope !158, !noalias !155
  %236 = or i64 %213, 32
  %237 = getelementptr i16, i16* %19, i64 %236
  %238 = getelementptr i16, i16* %190, i64 %236
  %239 = bitcast i16* %237 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !155
  %241 = getelementptr i16, i16* %237, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !155
  %244 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !158, !noalias !155
  %245 = getelementptr i16, i16* %238, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !158, !noalias !155
  %247 = or i64 %213, 48
  %248 = getelementptr i16, i16* %19, i64 %247
  %249 = getelementptr i16, i16* %190, i64 %247
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !155
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !155
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !158, !noalias !155
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !158, !noalias !155
  %258 = add i64 %213, 64
  %259 = add i64 %214, -4
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %212, !llvm.loop !160

261:                                              ; preds = %212, %200
  %262 = phi i64 [ 0, %200 ], [ %258, %212 ]
  %263 = icmp eq i64 %208, 0
  br i1 %263, label %280, label %264

264:                                              ; preds = %261, %264
  %265 = phi i64 [ %277, %264 ], [ %262, %261 ]
  %266 = phi i64 [ %278, %264 ], [ %208, %261 ]
  %267 = getelementptr i16, i16* %19, i64 %265
  %268 = getelementptr i16, i16* %190, i64 %265
  %269 = bitcast i16* %267 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !155
  %271 = getelementptr i16, i16* %267, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !155
  %274 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2, !alias.scope !158, !noalias !155
  %275 = getelementptr i16, i16* %268, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2, !alias.scope !158, !noalias !155
  %277 = add i64 %265, 16
  %278 = add i64 %266, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %264, !llvm.loop !161

280:                                              ; preds = %264, %261
  %281 = icmp eq i64 %22, %201
  br i1 %281, label %335, label %282

282:                                              ; preds = %280, %192, %187
  %283 = phi i64 [ %22, %192 ], [ %22, %187 ], [ %202, %280 ]
  %284 = phi i16* [ %19, %192 ], [ %19, %187 ], [ %203, %280 ]
  %285 = phi i16* [ %190, %192 ], [ %190, %187 ], [ %204, %280 ]
  %286 = add i64 %283, -1
  %287 = and i64 %283, 7
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %282, %289
  %290 = phi i64 [ %295, %289 ], [ %283, %282 ]
  %291 = phi i16* [ %297, %289 ], [ %284, %282 ]
  %292 = phi i16* [ %296, %289 ], [ %285, %282 ]
  %293 = phi i64 [ %298, %289 ], [ %287, %282 ]
  %294 = load i16, i16* %291, align 2
  store i16 %294, i16* %292, align 2
  %295 = add i64 %290, -1
  %296 = getelementptr inbounds i16, i16* %292, i64 1
  %297 = getelementptr inbounds i16, i16* %291, i64 1
  %298 = add i64 %293, -1
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %289, !llvm.loop !162

300:                                              ; preds = %289, %282
  %301 = phi i64 [ %283, %282 ], [ %295, %289 ]
  %302 = phi i16* [ %284, %282 ], [ %297, %289 ]
  %303 = phi i16* [ %285, %282 ], [ %296, %289 ]
  %304 = icmp ult i64 %286, 7
  br i1 %304, label %335, label %305

305:                                              ; preds = %300, %305
  %306 = phi i64 [ %331, %305 ], [ %301, %300 ]
  %307 = phi i16* [ %333, %305 ], [ %302, %300 ]
  %308 = phi i16* [ %332, %305 ], [ %303, %300 ]
  %309 = load i16, i16* %307, align 2
  store i16 %309, i16* %308, align 2
  %310 = getelementptr inbounds i16, i16* %308, i64 1
  %311 = getelementptr inbounds i16, i16* %307, i64 1
  %312 = load i16, i16* %311, align 2
  store i16 %312, i16* %310, align 2
  %313 = getelementptr inbounds i16, i16* %308, i64 2
  %314 = getelementptr inbounds i16, i16* %307, i64 2
  %315 = load i16, i16* %314, align 2
  store i16 %315, i16* %313, align 2
  %316 = getelementptr inbounds i16, i16* %308, i64 3
  %317 = getelementptr inbounds i16, i16* %307, i64 3
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = getelementptr inbounds i16, i16* %308, i64 4
  %320 = getelementptr inbounds i16, i16* %307, i64 4
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %319, align 2
  %322 = getelementptr inbounds i16, i16* %308, i64 5
  %323 = getelementptr inbounds i16, i16* %307, i64 5
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %308, i64 6
  %326 = getelementptr inbounds i16, i16* %307, i64 6
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %308, i64 7
  %329 = getelementptr inbounds i16, i16* %307, i64 7
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = add i64 %306, -8
  %332 = getelementptr inbounds i16, i16* %308, i64 8
  %333 = getelementptr inbounds i16, i16* %307, i64 8
  %334 = icmp eq i64 %331, 0
  br i1 %334, label %335, label %305, !llvm.loop !163

335:                                              ; preds = %300, %305, %280
  %336 = bitcast %"class.std::__1::basic_string.4"* %0 to i8**
  store i8* %189, i8** %336, align 8
  %337 = or i64 %184, -9223372036854775808
  %338 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %339, align 8
  %340 = getelementptr inbounds i16, i16* %190, i64 %22
  store i16 0, i16* %340, align 2
  br label %510

341:                                              ; preds = %5
  %342 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load i16*, i16** %342, align 8
  %344 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.std::__1::basic_string.4"* %1 to i16*
  %347 = zext i8 %12 to i64
  %348 = select i1 %13, i16* %343, i16* %346
  %349 = select i1 %13, i64 %345, i64 %347
  %350 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %351 = load i64, i64* %350, align 8
  %352 = and i64 %351, 9223372036854775807
  %353 = icmp ugt i64 %352, %349
  br i1 %353, label %354, label %504

354:                                              ; preds = %341
  %355 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %356 = load i16*, i16** %355, align 8
  %357 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %349, i64* %357, align 8
  %358 = icmp eq i64 %349, 0
  br i1 %358, label %502, label %359

359:                                              ; preds = %354
  %360 = icmp ult i64 %349, 16
  br i1 %360, label %449, label %361

361:                                              ; preds = %359
  %362 = getelementptr i16, i16* %356, i64 %349
  %363 = getelementptr i16, i16* %348, i64 %349
  %364 = icmp ult i16* %356, %363
  %365 = icmp ult i16* %348, %362
  %366 = and i1 %364, %365
  br i1 %366, label %449, label %367

367:                                              ; preds = %361
  %368 = and i64 %349, -16
  %369 = sub i64 %349, %368
  %370 = getelementptr i16, i16* %348, i64 %368
  %371 = getelementptr i16, i16* %356, i64 %368
  %372 = add i64 %368, -16
  %373 = lshr exact i64 %372, 4
  %374 = add nuw nsw i64 %373, 1
  %375 = and i64 %374, 3
  %376 = icmp ult i64 %372, 48
  br i1 %376, label %428, label %377

377:                                              ; preds = %367
  %378 = sub nsw i64 %374, %375
  br label %379

379:                                              ; preds = %379, %377
  %380 = phi i64 [ 0, %377 ], [ %425, %379 ]
  %381 = phi i64 [ %378, %377 ], [ %426, %379 ]
  %382 = getelementptr i16, i16* %348, i64 %380
  %383 = getelementptr i16, i16* %356, i64 %380
  %384 = bitcast i16* %382 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 2, !alias.scope !164
  %386 = getelementptr i16, i16* %382, i64 8
  %387 = bitcast i16* %386 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !164
  %389 = bitcast i16* %383 to <8 x i16>*
  store <8 x i16> %385, <8 x i16>* %389, align 2, !alias.scope !167, !noalias !164
  %390 = getelementptr i16, i16* %383, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %391, align 2, !alias.scope !167, !noalias !164
  %392 = or i64 %380, 16
  %393 = getelementptr i16, i16* %348, i64 %392
  %394 = getelementptr i16, i16* %356, i64 %392
  %395 = bitcast i16* %393 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2, !alias.scope !164
  %397 = getelementptr i16, i16* %393, i64 8
  %398 = bitcast i16* %397 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !164
  %400 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %400, align 2, !alias.scope !167, !noalias !164
  %401 = getelementptr i16, i16* %394, i64 8
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 2, !alias.scope !167, !noalias !164
  %403 = or i64 %380, 32
  %404 = getelementptr i16, i16* %348, i64 %403
  %405 = getelementptr i16, i16* %356, i64 %403
  %406 = bitcast i16* %404 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 2, !alias.scope !164
  %408 = getelementptr i16, i16* %404, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !164
  %411 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %411, align 2, !alias.scope !167, !noalias !164
  %412 = getelementptr i16, i16* %405, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %413, align 2, !alias.scope !167, !noalias !164
  %414 = or i64 %380, 48
  %415 = getelementptr i16, i16* %348, i64 %414
  %416 = getelementptr i16, i16* %356, i64 %414
  %417 = bitcast i16* %415 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !164
  %419 = getelementptr i16, i16* %415, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !164
  %422 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %422, align 2, !alias.scope !167, !noalias !164
  %423 = getelementptr i16, i16* %416, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %424, align 2, !alias.scope !167, !noalias !164
  %425 = add i64 %380, 64
  %426 = add i64 %381, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %379, !llvm.loop !169

428:                                              ; preds = %379, %367
  %429 = phi i64 [ 0, %367 ], [ %425, %379 ]
  %430 = icmp eq i64 %375, 0
  br i1 %430, label %447, label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %444, %431 ], [ %429, %428 ]
  %433 = phi i64 [ %445, %431 ], [ %375, %428 ]
  %434 = getelementptr i16, i16* %348, i64 %432
  %435 = getelementptr i16, i16* %356, i64 %432
  %436 = bitcast i16* %434 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !164
  %438 = getelementptr i16, i16* %434, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !164
  %441 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %441, align 2, !alias.scope !167, !noalias !164
  %442 = getelementptr i16, i16* %435, i64 8
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !167, !noalias !164
  %444 = add i64 %432, 16
  %445 = add i64 %433, -1
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %447, label %431, !llvm.loop !170

447:                                              ; preds = %431, %428
  %448 = icmp eq i64 %349, %368
  br i1 %448, label %502, label %449

449:                                              ; preds = %447, %361, %359
  %450 = phi i64 [ %349, %361 ], [ %349, %359 ], [ %369, %447 ]
  %451 = phi i16* [ %348, %361 ], [ %348, %359 ], [ %370, %447 ]
  %452 = phi i16* [ %356, %361 ], [ %356, %359 ], [ %371, %447 ]
  %453 = add i64 %450, -1
  %454 = and i64 %450, 7
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %467, label %456

456:                                              ; preds = %449, %456
  %457 = phi i64 [ %462, %456 ], [ %450, %449 ]
  %458 = phi i16* [ %464, %456 ], [ %451, %449 ]
  %459 = phi i16* [ %463, %456 ], [ %452, %449 ]
  %460 = phi i64 [ %465, %456 ], [ %454, %449 ]
  %461 = load i16, i16* %458, align 2
  store i16 %461, i16* %459, align 2
  %462 = add i64 %457, -1
  %463 = getelementptr inbounds i16, i16* %459, i64 1
  %464 = getelementptr inbounds i16, i16* %458, i64 1
  %465 = add i64 %460, -1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %456, !llvm.loop !171

467:                                              ; preds = %456, %449
  %468 = phi i64 [ %450, %449 ], [ %462, %456 ]
  %469 = phi i16* [ %451, %449 ], [ %464, %456 ]
  %470 = phi i16* [ %452, %449 ], [ %463, %456 ]
  %471 = icmp ult i64 %453, 7
  br i1 %471, label %502, label %472

472:                                              ; preds = %467, %472
  %473 = phi i64 [ %498, %472 ], [ %468, %467 ]
  %474 = phi i16* [ %500, %472 ], [ %469, %467 ]
  %475 = phi i16* [ %499, %472 ], [ %470, %467 ]
  %476 = load i16, i16* %474, align 2
  store i16 %476, i16* %475, align 2
  %477 = getelementptr inbounds i16, i16* %475, i64 1
  %478 = getelementptr inbounds i16, i16* %474, i64 1
  %479 = load i16, i16* %478, align 2
  store i16 %479, i16* %477, align 2
  %480 = getelementptr inbounds i16, i16* %475, i64 2
  %481 = getelementptr inbounds i16, i16* %474, i64 2
  %482 = load i16, i16* %481, align 2
  store i16 %482, i16* %480, align 2
  %483 = getelementptr inbounds i16, i16* %475, i64 3
  %484 = getelementptr inbounds i16, i16* %474, i64 3
  %485 = load i16, i16* %484, align 2
  store i16 %485, i16* %483, align 2
  %486 = getelementptr inbounds i16, i16* %475, i64 4
  %487 = getelementptr inbounds i16, i16* %474, i64 4
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = getelementptr inbounds i16, i16* %475, i64 5
  %490 = getelementptr inbounds i16, i16* %474, i64 5
  %491 = load i16, i16* %490, align 2
  store i16 %491, i16* %489, align 2
  %492 = getelementptr inbounds i16, i16* %475, i64 6
  %493 = getelementptr inbounds i16, i16* %474, i64 6
  %494 = load i16, i16* %493, align 2
  store i16 %494, i16* %492, align 2
  %495 = getelementptr inbounds i16, i16* %475, i64 7
  %496 = getelementptr inbounds i16, i16* %474, i64 7
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %495, align 2
  %498 = add i64 %473, -8
  %499 = getelementptr inbounds i16, i16* %475, i64 8
  %500 = getelementptr inbounds i16, i16* %474, i64 8
  %501 = icmp eq i64 %498, 0
  br i1 %501, label %502, label %472, !llvm.loop !172

502:                                              ; preds = %467, %472, %447, %354
  %503 = getelementptr inbounds i16, i16* %356, i64 %349
  store i16 0, i16* %503, align 2
  br label %510

504:                                              ; preds = %341
  %505 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %506 = load i64, i64* %505, align 8
  %507 = add nsw i64 %352, -1
  %508 = add i64 %349, 1
  %509 = sub i64 %508, %352
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.4"* %0, i64 %507, i64 %509, i64 %506, i64 0, i64 %506, i64 %349, i16* %348) #14
  br label %510

510:                                              ; preds = %504, %502, %335, %173, %15, %2
  ret %"class.std::__1::basic_string.4"* %0
}

declare void @_ZN13url_formatter15IDNSpoofChecker19GetSimilarTopDomainEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"struct.url_formatter::TopDomainEntry"* sret, %"class.url_formatter::IDNSpoofChecker"*, i16*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.4"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %8 = sub i64 9223372036854775791, %1
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = bitcast %"class.std::__1::basic_string.4"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %11) #16
  unreachable

12:                                               ; preds = %7
  %13 = bitcast %"class.std::__1::basic_string.4"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %13, i64 0, i32 1, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  br label %22

20:                                               ; preds = %12
  %21 = bitcast %"class.std::__1::basic_string.4"* %0 to i16*
  br label %22

22:                                               ; preds = %17, %20
  %23 = phi i16* [ %19, %17 ], [ %21, %20 ]
  %24 = bitcast i16* %23 to i8*
  %25 = icmp ult i64 %1, 4611686018427387879
  br i1 %25, label %26, label %37

26:                                               ; preds = %22
  %27 = add i64 %2, %1
  %28 = shl i64 %1, 1
  %29 = icmp ult i64 %27, %28
  %30 = select i1 %29, i64 %28, i64 %27
  %31 = icmp ult i64 %30, 11
  br i1 %31, label %37, label %32

32:                                               ; preds = %26
  %33 = add i64 %30, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #16
  unreachable

37:                                               ; preds = %22, %26, %32
  %38 = phi i64 [ %34, %32 ], [ 9223372036854775791, %22 ], [ 11, %26 ]
  %39 = shl i64 %38, 1
  %40 = tail call i8* @_Znwm(i64 %39) #15
  %41 = bitcast i8* %40 to i16*
  %42 = icmp eq i64 %4, 0
  br i1 %42, label %188, label %43

43:                                               ; preds = %37
  %44 = icmp ult i64 %4, 16
  br i1 %44, label %135, label %45

45:                                               ; preds = %43
  %46 = shl i64 %4, 1
  %47 = getelementptr i8, i8* %40, i64 %46
  %48 = getelementptr i16, i16* %23, i64 %4
  %49 = bitcast i16* %48 to i8*
  %50 = icmp ult i8* %40, %49
  %51 = icmp ugt i8* %47, %24
  %52 = and i1 %50, %51
  br i1 %52, label %135, label %53

53:                                               ; preds = %45
  %54 = and i64 %4, -16
  %55 = sub i64 %4, %54
  %56 = getelementptr i16, i16* %23, i64 %54
  %57 = getelementptr i16, i16* %41, i64 %54
  %58 = add i64 %54, -16
  %59 = lshr exact i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 48
  br i1 %62, label %114, label %63

63:                                               ; preds = %53
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i16, i16* %23, i64 %66
  %69 = getelementptr i16, i16* %41, i64 %66
  %70 = bitcast i16* %68 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !173
  %72 = getelementptr i16, i16* %68, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !173
  %75 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !176, !noalias !173
  %76 = getelementptr i16, i16* %69, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !176, !noalias !173
  %78 = or i64 %66, 16
  %79 = getelementptr i16, i16* %23, i64 %78
  %80 = getelementptr i16, i16* %41, i64 %78
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !173
  %83 = getelementptr i16, i16* %79, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !173
  %86 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !176, !noalias !173
  %87 = getelementptr i16, i16* %80, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !176, !noalias !173
  %89 = or i64 %66, 32
  %90 = getelementptr i16, i16* %23, i64 %89
  %91 = getelementptr i16, i16* %41, i64 %89
  %92 = bitcast i16* %90 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !173
  %94 = getelementptr i16, i16* %90, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !173
  %97 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !176, !noalias !173
  %98 = getelementptr i16, i16* %91, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !176, !noalias !173
  %100 = or i64 %66, 48
  %101 = getelementptr i16, i16* %23, i64 %100
  %102 = getelementptr i16, i16* %41, i64 %100
  %103 = bitcast i16* %101 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !173
  %105 = getelementptr i16, i16* %101, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !173
  %108 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !176, !noalias !173
  %109 = getelementptr i16, i16* %102, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !176, !noalias !173
  %111 = add i64 %66, 64
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !178

114:                                              ; preds = %65, %53
  %115 = phi i64 [ 0, %53 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i16, i16* %23, i64 %118
  %121 = getelementptr i16, i16* %41, i64 %118
  %122 = bitcast i16* %120 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !173
  %124 = getelementptr i16, i16* %120, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !173
  %127 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !176, !noalias !173
  %128 = getelementptr i16, i16* %121, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !176, !noalias !173
  %130 = add i64 %118, 16
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !179

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %54, %4
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %45, %43
  %136 = phi i64 [ %4, %45 ], [ %4, %43 ], [ %55, %133 ]
  %137 = phi i16* [ %23, %45 ], [ %23, %43 ], [ %56, %133 ]
  %138 = phi i16* [ %41, %45 ], [ %41, %43 ], [ %57, %133 ]
  %139 = add i64 %136, -1
  %140 = and i64 %136, 7
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %153, label %142

142:                                              ; preds = %135, %142
  %143 = phi i64 [ %148, %142 ], [ %136, %135 ]
  %144 = phi i16* [ %150, %142 ], [ %137, %135 ]
  %145 = phi i16* [ %149, %142 ], [ %138, %135 ]
  %146 = phi i64 [ %151, %142 ], [ %140, %135 ]
  %147 = load i16, i16* %144, align 2
  store i16 %147, i16* %145, align 2
  %148 = add i64 %143, -1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = getelementptr inbounds i16, i16* %144, i64 1
  %151 = add i64 %146, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %142, !llvm.loop !180

153:                                              ; preds = %142, %135
  %154 = phi i64 [ %136, %135 ], [ %148, %142 ]
  %155 = phi i16* [ %137, %135 ], [ %150, %142 ]
  %156 = phi i16* [ %138, %135 ], [ %149, %142 ]
  %157 = icmp ult i64 %139, 7
  br i1 %157, label %188, label %158

158:                                              ; preds = %153, %158
  %159 = phi i64 [ %184, %158 ], [ %154, %153 ]
  %160 = phi i16* [ %186, %158 ], [ %155, %153 ]
  %161 = phi i16* [ %185, %158 ], [ %156, %153 ]
  %162 = load i16, i16* %160, align 2
  store i16 %162, i16* %161, align 2
  %163 = getelementptr inbounds i16, i16* %161, i64 1
  %164 = getelementptr inbounds i16, i16* %160, i64 1
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %161, i64 2
  %167 = getelementptr inbounds i16, i16* %160, i64 2
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %161, i64 3
  %170 = getelementptr inbounds i16, i16* %160, i64 3
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %161, i64 4
  %173 = getelementptr inbounds i16, i16* %160, i64 4
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %161, i64 5
  %176 = getelementptr inbounds i16, i16* %160, i64 5
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %161, i64 6
  %179 = getelementptr inbounds i16, i16* %160, i64 6
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %161, i64 7
  %182 = getelementptr inbounds i16, i16* %160, i64 7
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = add i64 %159, -8
  %185 = getelementptr inbounds i16, i16* %161, i64 8
  %186 = getelementptr inbounds i16, i16* %160, i64 8
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %188, label %158, !llvm.loop !181

188:                                              ; preds = %153, %158, %133, %37
  %189 = sub i64 %3, %5
  %190 = sub i64 %189, %4
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %347, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds i16, i16* %41, i64 %4
  %194 = getelementptr inbounds i16, i16* %193, i64 %6
  %195 = getelementptr inbounds i16, i16* %23, i64 %4
  %196 = getelementptr inbounds i16, i16* %195, i64 %5
  %197 = icmp ult i64 %190, 16
  br i1 %197, label %294, label %198

198:                                              ; preds = %192
  %199 = bitcast i16* %196 to i8*
  %200 = add i64 %6, %4
  %201 = shl i64 %200, 1
  %202 = getelementptr i8, i8* %40, i64 %201
  %203 = add i64 %6, %3
  %204 = sub i64 %203, %5
  %205 = shl i64 %204, 1
  %206 = getelementptr i8, i8* %40, i64 %205
  %207 = getelementptr i16, i16* %23, i64 %3
  %208 = bitcast i16* %207 to i8*
  %209 = icmp ult i8* %202, %208
  %210 = icmp ugt i8* %206, %199
  %211 = and i1 %209, %210
  br i1 %211, label %294, label %212

212:                                              ; preds = %198
  %213 = and i64 %190, -16
  %214 = sub i64 %190, %213
  %215 = getelementptr i16, i16* %196, i64 %213
  %216 = getelementptr i16, i16* %194, i64 %213
  %217 = add i64 %213, -16
  %218 = lshr exact i64 %217, 4
  %219 = add nuw nsw i64 %218, 1
  %220 = and i64 %219, 3
  %221 = icmp ult i64 %217, 48
  br i1 %221, label %273, label %222

222:                                              ; preds = %212
  %223 = sub nsw i64 %219, %220
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi i64 [ 0, %222 ], [ %270, %224 ]
  %226 = phi i64 [ %223, %222 ], [ %271, %224 ]
  %227 = getelementptr i16, i16* %196, i64 %225
  %228 = getelementptr i16, i16* %194, i64 %225
  %229 = bitcast i16* %227 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2, !alias.scope !182
  %231 = getelementptr i16, i16* %227, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !182
  %234 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %234, align 2, !alias.scope !185, !noalias !182
  %235 = getelementptr i16, i16* %228, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %236, align 2, !alias.scope !185, !noalias !182
  %237 = or i64 %225, 16
  %238 = getelementptr i16, i16* %196, i64 %237
  %239 = getelementptr i16, i16* %194, i64 %237
  %240 = bitcast i16* %238 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !182
  %242 = getelementptr i16, i16* %238, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !182
  %245 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %245, align 2, !alias.scope !185, !noalias !182
  %246 = getelementptr i16, i16* %239, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %247, align 2, !alias.scope !185, !noalias !182
  %248 = or i64 %225, 32
  %249 = getelementptr i16, i16* %196, i64 %248
  %250 = getelementptr i16, i16* %194, i64 %248
  %251 = bitcast i16* %249 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2, !alias.scope !182
  %253 = getelementptr i16, i16* %249, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !182
  %256 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %256, align 2, !alias.scope !185, !noalias !182
  %257 = getelementptr i16, i16* %250, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %258, align 2, !alias.scope !185, !noalias !182
  %259 = or i64 %225, 48
  %260 = getelementptr i16, i16* %196, i64 %259
  %261 = getelementptr i16, i16* %194, i64 %259
  %262 = bitcast i16* %260 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !182
  %264 = getelementptr i16, i16* %260, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !182
  %267 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %267, align 2, !alias.scope !185, !noalias !182
  %268 = getelementptr i16, i16* %261, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %269, align 2, !alias.scope !185, !noalias !182
  %270 = add i64 %225, 64
  %271 = add i64 %226, -4
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %224, !llvm.loop !187

273:                                              ; preds = %224, %212
  %274 = phi i64 [ 0, %212 ], [ %270, %224 ]
  %275 = icmp eq i64 %220, 0
  br i1 %275, label %292, label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %289, %276 ], [ %274, %273 ]
  %278 = phi i64 [ %290, %276 ], [ %220, %273 ]
  %279 = getelementptr i16, i16* %196, i64 %277
  %280 = getelementptr i16, i16* %194, i64 %277
  %281 = bitcast i16* %279 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 2, !alias.scope !182
  %283 = getelementptr i16, i16* %279, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !182
  %286 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %286, align 2, !alias.scope !185, !noalias !182
  %287 = getelementptr i16, i16* %280, i64 8
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %288, align 2, !alias.scope !185, !noalias !182
  %289 = add i64 %277, 16
  %290 = add i64 %278, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %276, !llvm.loop !188

292:                                              ; preds = %276, %273
  %293 = icmp eq i64 %190, %213
  br i1 %293, label %347, label %294

294:                                              ; preds = %292, %198, %192
  %295 = phi i64 [ %190, %198 ], [ %190, %192 ], [ %214, %292 ]
  %296 = phi i16* [ %196, %198 ], [ %196, %192 ], [ %215, %292 ]
  %297 = phi i16* [ %194, %198 ], [ %194, %192 ], [ %216, %292 ]
  %298 = add i64 %295, -1
  %299 = and i64 %295, 7
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %312, label %301

301:                                              ; preds = %294, %301
  %302 = phi i64 [ %307, %301 ], [ %295, %294 ]
  %303 = phi i16* [ %309, %301 ], [ %296, %294 ]
  %304 = phi i16* [ %308, %301 ], [ %297, %294 ]
  %305 = phi i64 [ %310, %301 ], [ %299, %294 ]
  %306 = load i16, i16* %303, align 2
  store i16 %306, i16* %304, align 2
  %307 = add i64 %302, -1
  %308 = getelementptr inbounds i16, i16* %304, i64 1
  %309 = getelementptr inbounds i16, i16* %303, i64 1
  %310 = add i64 %305, -1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %301, !llvm.loop !189

312:                                              ; preds = %301, %294
  %313 = phi i64 [ %295, %294 ], [ %307, %301 ]
  %314 = phi i16* [ %296, %294 ], [ %309, %301 ]
  %315 = phi i16* [ %297, %294 ], [ %308, %301 ]
  %316 = icmp ult i64 %298, 7
  br i1 %316, label %347, label %317

317:                                              ; preds = %312, %317
  %318 = phi i64 [ %343, %317 ], [ %313, %312 ]
  %319 = phi i16* [ %345, %317 ], [ %314, %312 ]
  %320 = phi i16* [ %344, %317 ], [ %315, %312 ]
  %321 = load i16, i16* %319, align 2
  store i16 %321, i16* %320, align 2
  %322 = getelementptr inbounds i16, i16* %320, i64 1
  %323 = getelementptr inbounds i16, i16* %319, i64 1
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %320, i64 2
  %326 = getelementptr inbounds i16, i16* %319, i64 2
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %320, i64 3
  %329 = getelementptr inbounds i16, i16* %319, i64 3
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = getelementptr inbounds i16, i16* %320, i64 4
  %332 = getelementptr inbounds i16, i16* %319, i64 4
  %333 = load i16, i16* %332, align 2
  store i16 %333, i16* %331, align 2
  %334 = getelementptr inbounds i16, i16* %320, i64 5
  %335 = getelementptr inbounds i16, i16* %319, i64 5
  %336 = load i16, i16* %335, align 2
  store i16 %336, i16* %334, align 2
  %337 = getelementptr inbounds i16, i16* %320, i64 6
  %338 = getelementptr inbounds i16, i16* %319, i64 6
  %339 = load i16, i16* %338, align 2
  store i16 %339, i16* %337, align 2
  %340 = getelementptr inbounds i16, i16* %320, i64 7
  %341 = getelementptr inbounds i16, i16* %319, i64 7
  %342 = load i16, i16* %341, align 2
  store i16 %342, i16* %340, align 2
  %343 = add i64 %318, -8
  %344 = getelementptr inbounds i16, i16* %320, i64 8
  %345 = getelementptr inbounds i16, i16* %319, i64 8
  %346 = icmp eq i64 %343, 0
  br i1 %346, label %347, label %317, !llvm.loop !190

347:                                              ; preds = %312, %317, %292, %188
  %348 = icmp eq i64 %1, 10
  br i1 %348, label %350, label %349

349:                                              ; preds = %347
  tail call void @_ZdlPv(i8* %24) #15
  br label %350

350:                                              ; preds = %347, %349
  %351 = bitcast %"class.std::__1::basic_string.4"* %0 to i8**
  store i8* %40, i8** %351, align 8
  %352 = or i64 %38, -9223372036854775808
  %353 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %352, i64* %353, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
declare { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"*, i64, i64) local_unnamed_addr #0 align 2

declare zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_11CompareCaseE(i16*, i64, i16*, i64, i32) local_unnamed_addr #2

declare i32 @uidna_labelToUnicode_69(%struct.UIDNA*, i16*, i32, i16*, i32, %struct.UIDNAInfo*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
declare dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.50"*, i64) local_unnamed_addr #0 align 2

declare zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64*) local_unnamed_addr #2

declare void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64*, i64, void (i8*)*, i8*) local_unnamed_addr #2

declare %struct.UIDNA* @uidna_openUTS46_69(i32, i32*) local_unnamed_addr #2

declare i8* @u_errorName_69(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #14
  %7 = load i8, i8* %6, align 8, !range !93
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #14
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #14
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #14
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #14
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #14
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #14
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #14
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #14
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #14
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #15
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #14
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #14
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #15
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #14
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #14
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #3

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #3

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

declare i32 @_ZN13url_formatter15IDNSpoofChecker22SafeToDisplayAsUnicodeEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS2_IcNS4_IcEEEES6_(%"class.url_formatter::IDNSpoofChecker"*, i16*, i64, i8*, i64, %"class.base::BasicStringPiece.50"* byval(%"class.base::BasicStringPiece.50") align 8) local_unnamed_addr #2

declare void @_ZN13url_formatter15IDNSpoofCheckerC1Ev(%"class.url_formatter::IDNSpoofChecker"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIN4base14OffsetAdjuster10AdjustmentERNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"*, %"struct.base::OffsetAdjuster::Adjustment"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %5, align 8
  %7 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %4, %6
  %8 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %6 to i64
  %9 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %4 to i8*
  br i1 %7, label %10, label %87

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %13, align 8
  %15 = icmp ugt %"struct.base::OffsetAdjuster::Adjustment"* %12, %14
  %16 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %12 to i64
  %19 = sub i64 %18, %16
  %20 = sdiv exact i64 %19, 24
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %12, i64 %22
  %24 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %4 to i64
  %25 = sub i64 %24, %18
  %26 = sdiv exact i64 %25, 24
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %23 to i8*
  %30 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #14
  %31 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %23, i64 %26
  store %"struct.base::OffsetAdjuster::Adjustment"* %34, %"struct.base::OffsetAdjuster::Adjustment"** %3, align 8
  %35 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %33, i64 %22
  store %"struct.base::OffsetAdjuster::Adjustment"* %35, %"struct.base::OffsetAdjuster::Adjustment"** %11, align 8
  %36 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %34 to i8*
  br label %87

37:                                               ; preds = %10
  %38 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = sdiv exact i64 %40, 24
  %42 = shl nsw i64 %41, 1
  %43 = icmp eq i64 %40, 0
  %44 = select i1 %43, i64 1, i64 %42
  %45 = icmp ugt i64 %44, 768614336404564650
  br i1 %45, label %46, label %47

46:                                               ; preds = %37
  tail call void @abort() #16
  unreachable

47:                                               ; preds = %37
  %48 = lshr i64 %44, 2
  %49 = mul i64 %44, 24
  %50 = tail call i8* @_Znwm(i64 %49) #15
  %51 = bitcast i8* %50 to %"struct.base::OffsetAdjuster::Adjustment"*
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %51, i64 %48
  %54 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %53 to i64
  %55 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %51, i64 %44
  %56 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %55 to i64
  %57 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %12 to i64
  %58 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %4 to i64
  %59 = sub i64 %58, %57
  %60 = sdiv exact i64 %59, 24
  %61 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %76, label %63

63:                                               ; preds = %47, %63
  %64 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %69, %63 ], [ %53, %47 ]
  %65 = phi i64 [ %70, %63 ], [ %54, %47 ]
  %66 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %71, %63 ], [ %12, %47 ]
  %67 = inttoptr i64 %65 to i8*
  %68 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 24, i1 false) #14
  %69 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %64, i64 1
  %70 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %69 to i64
  %71 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %66, i64 1
  %72 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %61, %69
  br i1 %72, label %73, label %63

73:                                               ; preds = %63
  %74 = ptrtoint %"struct.base::OffsetAdjuster::Adjustment"* %61 to i64
  %75 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %13, align 8
  br label %76

76:                                               ; preds = %47, %73
  %77 = phi %"struct.base::OffsetAdjuster::Adjustment"* [ %75, %73 ], [ %14, %47 ]
  %78 = phi i64 [ %74, %73 ], [ %54, %47 ]
  store i64 %52, i64* %39, align 8
  %79 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %11 to i64*
  store i64 %54, i64* %79, align 8
  %80 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %3 to i64*
  store i64 %78, i64* %80, align 8
  store i64 %56, i64* %38, align 8
  %81 = icmp eq %"struct.base::OffsetAdjuster::Adjustment"* %77, null
  %82 = inttoptr i64 %78 to i8*
  br i1 %81, label %87, label %83

83:                                               ; preds = %76
  %84 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %77 to i8*
  tail call void @_ZdlPv(i8* %84) #15
  %85 = bitcast %"struct.base::OffsetAdjuster::Adjustment"** %3 to i8**
  %86 = load i8*, i8** %85, align 8
  br label %87

87:                                               ; preds = %83, %76, %32, %2
  %88 = phi i8* [ %86, %83 ], [ %82, %76 ], [ %36, %32 ], [ %9, %2 ]
  %89 = bitcast %"struct.base::OffsetAdjuster::Adjustment"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 24, i1 false) #14
  %90 = load %"struct.base::OffsetAdjuster::Adjustment"*, %"struct.base::OffsetAdjuster::Adjustment"** %3, align 8
  %91 = getelementptr inbounds %"struct.base::OffsetAdjuster::Adjustment", %"struct.base::OffsetAdjuster::Adjustment"* %90, i64 1
  store %"struct.base::OffsetAdjuster::Adjustment"* %91, %"struct.base::OffsetAdjuster::Adjustment"** %3, align 8
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #12

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #13

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { nofree nounwind readonly }
attributes #13 = { nounwind readnone speculatable }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN13url_formatter12_GLOBAL__N_119FormatViewSourceUrlERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS8_9allocatorISC_EEEE: argument 0"}
!4 = distinct !{!4, !"_ZN13url_formatter12_GLOBAL__N_119FormatViewSourceUrlERK4GURLjjPN3url6ParsedEPmPNSt3__16vectorIN4base14OffsetAdjuster10AdjustmentENS8_9allocatorISC_EEEE"}
!5 = !{!6, !8}
!6 = distinct !{!6, !7, !"_ZNK4GURL15ComponentStringERKN3url9ComponentE: argument 0"}
!7 = distinct !{!7, !"_ZNK4GURL15ComponentStringERKN3url9ComponentE"}
!8 = distinct !{!8, !9, !"_ZNK4GURL4hostEv: argument 0"}
!9 = distinct !{!9, !"_ZNK4GURL4hostEv"}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !18}
!20 = distinct !{!20, !16}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !16}
!27 = distinct !{!27, !18}
!28 = distinct !{!28, !16}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !16}
!35 = distinct !{!35, !18}
!36 = distinct !{!36, !18}
!37 = distinct !{!37, !16}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !16}
!44 = distinct !{!44, !18}
!45 = distinct !{!45, !18}
!46 = distinct !{!46, !16}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !16}
!53 = distinct !{!53, !18}
!54 = distinct !{!54, !16}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !16}
!61 = distinct !{!61, !16}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !16}
!68 = distinct !{!68, !18}
!69 = distinct !{!69, !18}
!70 = distinct !{!70, !16}
!71 = !{!72}
!72 = distinct !{!72, !73}
!73 = distinct !{!73, !"LVerDomain"}
!74 = !{!75}
!75 = distinct !{!75, !73}
!76 = distinct !{!76, !16}
!77 = distinct !{!77, !18}
!78 = distinct !{!78, !18}
!79 = distinct !{!79, !16}
!80 = distinct !{!80, !16}
!81 = distinct !{!81, !18}
!82 = distinct !{!82, !83, !16}
!83 = !{!"llvm.loop.unroll.runtime.disable"}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !16}
!90 = distinct !{!90, !18}
!91 = distinct !{!91, !18}
!92 = distinct !{!92, !16}
!93 = !{i8 0, i8 2}
!94 = !{!95}
!95 = distinct !{!95, !96}
!96 = distinct !{!96, !"LVerDomain"}
!97 = !{!98}
!98 = distinct !{!98, !96}
!99 = distinct !{!99, !16}
!100 = distinct !{!100, !18}
!101 = distinct !{!101, !18}
!102 = distinct !{!102, !16}
!103 = !{!104}
!104 = distinct !{!104, !105}
!105 = distinct !{!105, !"LVerDomain"}
!106 = !{!107}
!107 = distinct !{!107, !105}
!108 = distinct !{!108, !16}
!109 = distinct !{!109, !18}
!110 = distinct !{!110, !18}
!111 = distinct !{!111, !16}
!112 = !{!113}
!113 = distinct !{!113, !114}
!114 = distinct !{!114, !"LVerDomain"}
!115 = !{!116}
!116 = distinct !{!116, !114}
!117 = distinct !{!117, !16}
!118 = distinct !{!118, !18}
!119 = distinct !{!119, !16}
!120 = !{!121}
!121 = distinct !{!121, !122}
!122 = distinct !{!122, !"LVerDomain"}
!123 = !{!124}
!124 = distinct !{!124, !122}
!125 = distinct !{!125, !16}
!126 = distinct !{!126, !16}
!127 = !{!128}
!128 = distinct !{!128, !129}
!129 = distinct !{!129, !"LVerDomain"}
!130 = !{!131}
!131 = distinct !{!131, !129}
!132 = distinct !{!132, !16}
!133 = distinct !{!133, !18}
!134 = distinct !{!134, !18}
!135 = distinct !{!135, !16}
!136 = !{!"branch_weights", i32 2000, i32 1}
!137 = !{!138}
!138 = distinct !{!138, !139}
!139 = distinct !{!139, !"LVerDomain"}
!140 = !{!141}
!141 = distinct !{!141, !139}
!142 = distinct !{!142, !16}
!143 = distinct !{!143, !18}
!144 = distinct !{!144, !18}
!145 = distinct !{!145, !16}
!146 = !{!147}
!147 = distinct !{!147, !148}
!148 = distinct !{!148, !"LVerDomain"}
!149 = !{!150}
!150 = distinct !{!150, !148}
!151 = distinct !{!151, !16}
!152 = distinct !{!152, !18}
!153 = distinct !{!153, !18}
!154 = distinct !{!154, !16}
!155 = !{!156}
!156 = distinct !{!156, !157}
!157 = distinct !{!157, !"LVerDomain"}
!158 = !{!159}
!159 = distinct !{!159, !157}
!160 = distinct !{!160, !16}
!161 = distinct !{!161, !18}
!162 = distinct !{!162, !18}
!163 = distinct !{!163, !16}
!164 = !{!165}
!165 = distinct !{!165, !166}
!166 = distinct !{!166, !"LVerDomain"}
!167 = !{!168}
!168 = distinct !{!168, !166}
!169 = distinct !{!169, !16}
!170 = distinct !{!170, !18}
!171 = distinct !{!171, !18}
!172 = distinct !{!172, !16}
!173 = !{!174}
!174 = distinct !{!174, !175}
!175 = distinct !{!175, !"LVerDomain"}
!176 = !{!177}
!177 = distinct !{!177, !175}
!178 = distinct !{!178, !16}
!179 = distinct !{!179, !18}
!180 = distinct !{!180, !18}
!181 = distinct !{!181, !16}
!182 = !{!183}
!183 = distinct !{!183, !184}
!184 = distinct !{!184, !"LVerDomain"}
!185 = !{!186}
!186 = distinct !{!186, !184}
!187 = distinct !{!187, !16}
!188 = distinct !{!188, !18}
!189 = distinct !{!189, !18}
!190 = distinct !{!190, !16}
