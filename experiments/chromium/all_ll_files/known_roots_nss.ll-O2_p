; ModuleID = '../../net/cert/known_roots_nss.cc'
source_filename = "../../net/cert/known_roots_nss.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.PK11SlotInfoStr = type opaque
%struct.CERTCertificateStr = type { %struct.PLArenaPool*, i8*, i8*, %struct.CERTSignedDataStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECAlgorithmIDStr, %struct.CERTNameStr, %struct.CERTValidityStr, %struct.CERTNameStr, %struct.CERTSubjectPublicKeyInfoStr, %struct.SECItemStr, %struct.SECItemStr, %struct.CERTCertExtensionStr**, i8*, %struct.NSSTrustDomainStr*, %struct.SECItemStr, i32, i32, i32, i32, i32, i32, i32, %struct.CERTOKDomainNameStr*, i32, i32, i8*, i8*, %struct.NSSCertificateStr*, %struct.CERTCertTrustStr*, i32, %struct.CERTSubjectListStr*, %struct.CERTAuthKeyIDStr*, i32, %union.anon.0, i32, %struct.PK11SlotInfoStr*, i64, i32, %struct.CERTCertDistrustStr* }
%struct.PLArenaPool = type { %struct.PLArena, %struct.PLArena*, i32, i64 }
%struct.PLArena = type { %struct.PLArena*, i64, i64, i64 }
%struct.CERTSignedDataStr = type { %struct.SECItemStr, %struct.SECAlgorithmIDStr, %struct.SECItemStr }
%struct.SECAlgorithmIDStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTValidityStr = type { %struct.PLArenaPool*, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTNameStr = type { %struct.PLArenaPool*, %struct.CERTRDNStr** }
%struct.CERTRDNStr = type { %struct.CERTAVAStr** }
%struct.CERTAVAStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTSubjectPublicKeyInfoStr = type { %struct.PLArenaPool*, %struct.SECAlgorithmIDStr, %struct.SECItemStr }
%struct.CERTCertExtensionStr = type { %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr }
%struct.NSSTrustDomainStr = type opaque
%struct.SECItemStr = type { i32, i8*, i32 }
%struct.CERTOKDomainNameStr = type { %struct.CERTOKDomainNameStr*, i8* }
%struct.NSSCertificateStr = type opaque
%struct.CERTCertTrustStr = type { i32, i32, i32 }
%struct.CERTSubjectListStr = type { %struct.PLArenaPool*, i32, i8*, %struct.CERTSubjectNodeStr*, %struct.CERTSubjectNodeStr*, i8* }
%struct.CERTSubjectNodeStr = type { %struct.CERTSubjectNodeStr*, %struct.CERTSubjectNodeStr*, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTAuthKeyIDStr = type { %struct.SECItemStr, %struct.CERTGeneralNameStr*, %struct.SECItemStr, %struct.SECItemStr** }
%struct.CERTGeneralNameStr = type { i32, %union.anon, %struct.SECItemStr, %struct.PRCListStr }
%union.anon = type { %struct.OtherNameStr }
%struct.OtherNameStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.PRCListStr = type { %struct.PRCListStr*, %struct.PRCListStr* }
%union.anon.0 = type { i8* }
%struct.CERTCertDistrustStr = type { %struct.SECItemStr, %struct.SECItemStr }
%"class.crypto::AutoSECMODListReadLock" = type { %struct.nssRWLockStr* }
%struct.nssRWLockStr = type opaque
%struct.SECMODModuleListStr = type { %struct.SECMODModuleListStr*, %struct.SECMODModuleStr* }
%struct.SECMODModuleStr = type { %struct.PLArenaPool*, i32, i32, i32, i8*, i8*, i8*, i8*, %struct.PRLock*, i32, %struct.PK11SlotInfoStr**, i32, %struct.NSSUTILPreSlotInfoStr*, i32, i64, i32, [2 x i64], i8*, i8*, %struct.SECMODModuleStr*, i32, i32, i32, i32, i32, i64, %struct.CK_VERSION, i64 }
%struct.PRLock = type opaque
%struct.NSSUTILPreSlotInfoStr = type opaque
%struct.CK_VERSION = type { i8, i8 }

@_ZZN3net11IsKnownRootEP18CERTCertificateStrE22pk11_has_attribute_set = internal unnamed_addr global i8 (%struct.PK11SlotInfoStr*, i64, i64, i32)* null, align 8
@_ZGVZN3net11IsKnownRootEP18CERTCertificateStrE22pk11_has_attribute_set = internal global i64 0, align 8
@.str = private unnamed_addr constant [21 x i8] c"PK11_HasAttributeSet\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"NSS Builtin Objects\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net11IsKnownRootEP18CERTCertificateStr(%struct.CERTCertificateStr*) local_unnamed_addr #0 {
  %2 = alloca %"class.crypto::AutoSECMODListReadLock", align 8
  %3 = icmp eq %struct.CERTCertificateStr* %0, null
  br i1 %3, label %69, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.CERTCertificateStr, %struct.CERTCertificateStr* %0, i64 0, i32 42
  %6 = load %struct.PK11SlotInfoStr*, %struct.PK11SlotInfoStr** %5, align 8
  %7 = icmp eq %struct.PK11SlotInfoStr* %6, null
  br i1 %7, label %69, label %8

8:                                                ; preds = %4
  %9 = load atomic i8, i8* bitcast (i64* @_ZGVZN3net11IsKnownRootEP18CERTCertificateStrE22pk11_has_attribute_set to i8*) acquire, align 8
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %16, !prof !2

11:                                               ; preds = %8
  %12 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3net11IsKnownRootEP18CERTCertificateStrE22pk11_has_attribute_set) #6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %11
  %15 = tail call i8* @dlsym(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0)) #6
  store i8* %15, i8** bitcast (i8 (%struct.PK11SlotInfoStr*, i64, i64, i32)** @_ZZN3net11IsKnownRootEP18CERTCertificateStrE22pk11_has_attribute_set to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3net11IsKnownRootEP18CERTCertificateStrE22pk11_has_attribute_set) #6
  br label %16

16:                                               ; preds = %11, %14, %8
  %17 = load i8 (%struct.PK11SlotInfoStr*, i64, i64, i32)*, i8 (%struct.PK11SlotInfoStr*, i64, i64, i32)** @_ZZN3net11IsKnownRootEP18CERTCertificateStrE22pk11_has_attribute_set, align 8
  %18 = icmp eq i8 (%struct.PK11SlotInfoStr*, i64, i64, i32)* %17, null
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = bitcast %"class.crypto::AutoSECMODListReadLock"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #6
  %21 = getelementptr inbounds %"class.crypto::AutoSECMODListReadLock", %"class.crypto::AutoSECMODListReadLock"* %2, i64 0, i32 0
  store %struct.nssRWLockStr* inttoptr (i64 -6148914691236517206 to %struct.nssRWLockStr*), %struct.nssRWLockStr** %21, align 8
  call void @_ZN6crypto22AutoSECMODListReadLockC1Ev(%"class.crypto::AutoSECMODListReadLock"* nonnull %2) #6
  %22 = call %struct.SECMODModuleListStr* @SECMOD_GetDefaultModuleList() #6
  %23 = icmp eq %struct.SECMODModuleListStr* %22, null
  br i1 %23, label %62, label %24

24:                                               ; preds = %19, %58
  %25 = phi %struct.SECMODModuleListStr* [ %60, %58 ], [ %22, %19 ]
  %26 = getelementptr inbounds %struct.SECMODModuleListStr, %struct.SECMODModuleListStr* %25, i64 0, i32 1
  %27 = load %struct.SECMODModuleStr*, %struct.SECMODModuleStr** %26, align 8
  %28 = getelementptr inbounds %struct.SECMODModuleStr, %struct.SECMODModuleStr* %27, i64 0, i32 11
  %29 = load i32, i32* %28, align 8
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %58

31:                                               ; preds = %24, %51
  %32 = phi i64 [ %52, %51 ], [ 0, %24 ]
  %33 = phi %struct.SECMODModuleStr* [ %53, %51 ], [ %27, %24 ]
  %34 = getelementptr inbounds %struct.SECMODModuleStr, %struct.SECMODModuleStr* %33, i64 0, i32 10
  %35 = load %struct.PK11SlotInfoStr**, %struct.PK11SlotInfoStr*** %34, align 8
  %36 = getelementptr inbounds %struct.PK11SlotInfoStr*, %struct.PK11SlotInfoStr** %35, i64 %32
  %37 = load %struct.PK11SlotInfoStr*, %struct.PK11SlotInfoStr** %36, align 8
  %38 = call i32 @PK11_IsPresent(%struct.PK11SlotInfoStr* %37) #6
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = call i32 @PK11_HasRootCerts(%struct.PK11SlotInfoStr* %37) #6
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %40
  %44 = call i64 @PK11_FindCertInSlot(%struct.PK11SlotInfoStr* %37, %struct.CERTCertificateStr* nonnull %0, i8* null) #6
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %43
  %47 = load i8 (%struct.PK11SlotInfoStr*, i64, i64, i32)*, i8 (%struct.PK11SlotInfoStr*, i64, i64, i32)** @_ZZN3net11IsKnownRootEP18CERTCertificateStrE22pk11_has_attribute_set, align 8
  %48 = load %struct.PK11SlotInfoStr*, %struct.PK11SlotInfoStr** %5, align 8
  %49 = call zeroext i8 %47(%struct.PK11SlotInfoStr* %48, i64 %44, i64 3461563250, i32 0) #6
  %50 = icmp eq i8 %49, 1
  br i1 %50, label %62, label %51

51:                                               ; preds = %43, %46, %40, %31
  %52 = add nuw nsw i64 %32, 1
  %53 = load %struct.SECMODModuleStr*, %struct.SECMODModuleStr** %26, align 8
  %54 = getelementptr inbounds %struct.SECMODModuleStr, %struct.SECMODModuleStr* %53, i64 0, i32 11
  %55 = load i32, i32* %54, align 8
  %56 = sext i32 %55 to i64
  %57 = icmp slt i64 %52, %56
  br i1 %57, label %31, label %58

58:                                               ; preds = %51, %24
  %59 = getelementptr inbounds %struct.SECMODModuleListStr, %struct.SECMODModuleListStr* %25, i64 0, i32 0
  %60 = load %struct.SECMODModuleListStr*, %struct.SECMODModuleListStr** %59, align 8
  %61 = icmp eq %struct.SECMODModuleListStr* %60, null
  br i1 %61, label %62, label %24

62:                                               ; preds = %58, %46, %19
  %63 = phi i1 [ false, %19 ], [ true, %46 ], [ false, %58 ]
  call void @_ZN6crypto22AutoSECMODListReadLockD1Ev(%"class.crypto::AutoSECMODListReadLock"* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  br label %69

64:                                               ; preds = %16
  %65 = load %struct.PK11SlotInfoStr*, %struct.PK11SlotInfoStr** %5, align 8
  %66 = tail call i8* @PK11_GetSlotName(%struct.PK11SlotInfoStr* %65) #6
  %67 = tail call i32 @strcmp(i8* %66, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0)) #7
  %68 = icmp eq i32 %67, 0
  br label %69

69:                                               ; preds = %1, %4, %64, %62
  %70 = phi i1 [ %63, %62 ], [ %68, %64 ], [ false, %4 ], [ false, %1 ]
  ret i1 %70
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i8* @dlsym(i8*, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN6crypto22AutoSECMODListReadLockC1Ev(%"class.crypto::AutoSECMODListReadLock"*) unnamed_addr #4

declare %struct.SECMODModuleListStr* @SECMOD_GetDefaultModuleList() local_unnamed_addr #4

declare i32 @PK11_IsPresent(%struct.PK11SlotInfoStr*) local_unnamed_addr #4

declare i32 @PK11_HasRootCerts(%struct.PK11SlotInfoStr*) local_unnamed_addr #4

declare i64 @PK11_FindCertInSlot(%struct.PK11SlotInfoStr*, %struct.CERTCertificateStr*, i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind
declare void @_ZN6crypto22AutoSECMODListReadLockD1Ev(%"class.crypto::AutoSECMODListReadLock"*) unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

declare i8* @PK11_GetSlotName(%struct.PK11SlotInfoStr*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
