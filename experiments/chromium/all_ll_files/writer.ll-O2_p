; ModuleID = '../../components/cbor/writer.cc'
source_filename = "../../components/cbor/writer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cbor::Writer" = type { %"class.std::__1::vector"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.21 }
%union.anon.21 = type { %"class.std::__1::vector" }
%"class.cbor::Value" = type { i32, %union.anon }
%union.anon = type { %"class.std::__1::vector" }
%"struct.cbor::Writer::Config" = type <{ i32, i8, [3 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.3 }
%union.anon.3 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { %"class.cbor::Value"*, %"class.cbor::Value"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.cbor::Value"* }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.14" }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.16" }
%"struct.std::__1::pair" = type { %"class.cbor::Value", %"class.cbor::Value" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeES8_SA_SA_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_ = comdat any

@_ZN4cbor6WriterD1Ev = hidden unnamed_addr alias void (%"class.cbor::Writer"*), void (%"class.cbor::Writer"*)* @_ZN4cbor6WriterD2Ev
@_ZN4cbor6WriterC1EPNSt3__16vectorIhNS1_9allocatorIhEEEE = hidden unnamed_addr alias void (%"class.cbor::Writer"*, %"class.std::__1::vector"*), void (%"class.cbor::Writer"*, %"class.std::__1::vector"*)* @_ZN4cbor6WriterC2EPNSt3__16vectorIhNS1_9allocatorIhEEEE

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4cbor6WriterD2Ev(%"class.cbor::Writer"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4cbor6Writer5WriteERKNS_5ValueERKNS0_6ConfigE(%"class.absl::optional"* noalias nocapture sret, %"class.cbor::Value"* dereferenceable(32), %"struct.cbor::Writer::Config"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::vector", align 16
  %5 = alloca %"class.cbor::Writer", align 8
  %6 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 24, i1 false) #10
  %8 = bitcast %"class.cbor::Writer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %5, i64 0, i32 0
  store %"class.std::__1::vector"* %4, %"class.std::__1::vector"** %9, align 8
  %10 = getelementptr inbounds %"struct.cbor::Writer::Config", %"struct.cbor::Writer::Config"* %2, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"struct.cbor::Writer::Config", %"struct.cbor::Writer::Config"* %2, i64 0, i32 1
  %13 = load i8, i8* %12, align 4, !range !2
  %14 = icmp ne i8 %13, 0
  %15 = call zeroext i1 @_ZN4cbor6Writer10EncodeCBORERKNS_5ValueEib(%"class.cbor::Writer"* nonnull %5, %"class.cbor::Value"* dereferenceable(32) %1, i32 %11, i1 zeroext %14)
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br i1 %15, label %17, label %27

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8 1, i8* %16, align 8
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %20 = bitcast %"class.std::__1::vector"* %4 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 16
  %22 = bitcast %"class.std::__1::vector"* %19 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %22, align 8
  %23 = bitcast i8** %18 to i64*
  %24 = load i64, i64* %23, align 16
  %25 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %26 = bitcast i8** %25 to i64*
  store i64 %24, i64* %26, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 24, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  br label %36

27:                                               ; preds = %3
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  store i8 0, i8* %16, align 8
  %29 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %30 = bitcast %union.anon.21* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #10
  %31 = load i8*, i8** %28, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  %32 = icmp eq i8* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %27
  %34 = ptrtoint i8* %31 to i64
  %35 = bitcast i8** %7 to i64*
  store i64 %34, i64* %35, align 8
  call void @_ZdlPv(i8* nonnull %31) #11
  br label %36

36:                                               ; preds = %17, %27, %33
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4cbor6Writer10EncodeCBORERKNS_5ValueEib(%"class.cbor::Writer"*, %"class.cbor::Value"* dereferenceable(32), i32, i1 zeroext) local_unnamed_addr #1 align 2 {
  %5 = icmp slt i32 %2, 0
  br i1 %5, label %123, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.cbor::Value", %"class.cbor::Value"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  switch i32 %8, label %122 [
    i32 -1, label %9
    i32 -2, label %10
    i32 0, label %27
    i32 1, label %30
    i32 2, label %34
    i32 3, label %50
    i32 4, label %70
    i32 5, label %91
    i32 6, label %123
    i32 7, label %116
  ]

9:                                                ; preds = %6
  tail call void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* %0, i32 2, i64 0)
  br label %123

10:                                               ; preds = %6
  br i1 %3, label %11, label %123

11:                                               ; preds = %10
  %12 = tail call dereferenceable(24) %"class.std::__1::vector"* @_ZNK4cbor5Value14GetInvalidUTF8Ev(%"class.cbor::Value"* %1) #10
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 1
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector"* %12 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  tail call void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* %0, i32 3, i64 %18)
  %19 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %20 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %19, align 8
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %20, i64 0, i32 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = load i8*, i8** %13, align 8
  %26 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeES8_SA_SA_(%"class.std::__1::vector"* %20, i8* %22, i8* %24, i8* %25)
  br label %123

27:                                               ; preds = %6
  %28 = tail call dereferenceable(8) i64* @_ZNK4cbor5Value11GetUnsignedEv(%"class.cbor::Value"* %1) #10
  %29 = load i64, i64* %28, align 8
  tail call void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* %0, i32 0, i64 %29)
  br label %123

30:                                               ; preds = %6
  %31 = tail call dereferenceable(8) i64* @_ZNK4cbor5Value11GetNegativeEv(%"class.cbor::Value"* %1) #10
  %32 = load i64, i64* %31, align 8
  %33 = xor i64 %32, -1
  tail call void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* %0, i32 1, i64 %33)
  br label %123

34:                                               ; preds = %6
  %35 = tail call dereferenceable(24) %"class.std::__1::vector"* @_ZNK4cbor5Value13GetBytestringEv(%"class.cbor::Value"* %1) #10
  %36 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %35, i64 0, i32 0, i32 1
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector"* %35 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  tail call void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* %0, i32 2, i64 %41)
  %42 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %43 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %42, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %43, i64 0, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %35, i64 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = load i8*, i8** %36, align 8
  %49 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeES8_SA_SA_(%"class.std::__1::vector"* %43, i8* %45, i8* %47, i8* %48)
  br label %123

50:                                               ; preds = %6
  %51 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4cbor5Value9GetStringEv(%"class.cbor::Value"* %1) #10
  %52 = bitcast %"class.std::__1::basic_string"* %51 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %53 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %52, i64 0, i32 1, i32 0
  %54 = load i8, i8* %53, align 1
  %55 = icmp slt i8 %54, 0
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = bitcast %"class.std::__1::basic_string"* %51 to i8*
  %59 = select i1 %55, i8* %57, i8* %58
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = zext i8 %54 to i64
  %63 = select i1 %55, i64 %61, i64 %62
  tail call void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* %0, i32 3, i64 %63)
  %64 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %65 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %64, align 8
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %65, i64 0, i32 0, i32 1
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds i8, i8* %59, i64 %63
  %69 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %65, i8* %67, i8* %59, i8* %68)
  br label %123

70:                                               ; preds = %6
  %71 = tail call dereferenceable(24) %"class.std::__1::vector.7"* @_ZNK4cbor5Value8GetArrayEv(%"class.cbor::Value"* %1) #10
  %72 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %71, i64 0, i32 0, i32 1
  %73 = bitcast %"class.cbor::Value"** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %"class.std::__1::vector.7"* %71 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %74, %76
  %78 = ashr exact i64 %77, 5
  tail call void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* %0, i32 4, i64 %78)
  %79 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %71, i64 0, i32 0, i32 0
  %80 = load %"class.cbor::Value"*, %"class.cbor::Value"** %79, align 8
  %81 = load %"class.cbor::Value"*, %"class.cbor::Value"** %72, align 8
  %82 = icmp eq %"class.cbor::Value"* %80, %81
  br i1 %82, label %123, label %83

83:                                               ; preds = %70
  %84 = add nsw i32 %2, -1
  br label %87

85:                                               ; preds = %87
  %86 = icmp eq %"class.cbor::Value"* %90, %81
  br i1 %86, label %123, label %87

87:                                               ; preds = %83, %85
  %88 = phi %"class.cbor::Value"* [ %80, %83 ], [ %90, %85 ]
  %89 = tail call zeroext i1 @_ZN4cbor6Writer10EncodeCBORERKNS_5ValueEib(%"class.cbor::Writer"* %0, %"class.cbor::Value"* dereferenceable(32) %88, i32 %84, i1 zeroext %3)
  %90 = getelementptr inbounds %"class.cbor::Value", %"class.cbor::Value"* %88, i64 1
  br i1 %89, label %85, label %123

91:                                               ; preds = %6
  %92 = tail call dereferenceable(24) %"class.base::flat_map"* @_ZNK4cbor5Value6GetMapEv(%"class.cbor::Value"* %1) #10
  %93 = getelementptr inbounds %"class.base::flat_map", %"class.base::flat_map"* %92, i64 0, i32 0, i32 0, i32 0, i32 1
  %94 = bitcast %"struct.std::__1::pair"** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.base::flat_map"* %92 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %95, %97
  %99 = ashr exact i64 %98, 6
  tail call void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* %0, i32 5, i64 %99)
  %100 = getelementptr inbounds %"class.base::flat_map", %"class.base::flat_map"* %92, i64 0, i32 0, i32 0, i32 0, i32 0
  %101 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %100, align 8
  %102 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %93, align 8
  %103 = icmp eq %"struct.std::__1::pair"* %101, %102
  br i1 %103, label %123, label %104

104:                                              ; preds = %91
  %105 = add nsw i32 %2, -1
  br label %108

106:                                              ; preds = %112
  %107 = icmp eq %"struct.std::__1::pair"* %115, %102
  br i1 %107, label %123, label %108

108:                                              ; preds = %104, %106
  %109 = phi %"struct.std::__1::pair"* [ %101, %104 ], [ %115, %106 ]
  %110 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %109, i64 0, i32 0
  %111 = tail call zeroext i1 @_ZN4cbor6Writer10EncodeCBORERKNS_5ValueEib(%"class.cbor::Writer"* %0, %"class.cbor::Value"* dereferenceable(32) %110, i32 %105, i1 zeroext %3)
  br i1 %111, label %112, label %123

112:                                              ; preds = %108
  %113 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %109, i64 0, i32 1
  %114 = tail call zeroext i1 @_ZN4cbor6Writer10EncodeCBORERKNS_5ValueEib(%"class.cbor::Writer"* %0, %"class.cbor::Value"* dereferenceable(32) %113, i32 %105, i1 zeroext %3)
  %115 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %109, i64 1
  br i1 %114, label %106, label %123

116:                                              ; preds = %6
  %117 = tail call i32 @_ZNK4cbor5Value14GetSimpleValueEv(%"class.cbor::Value"* %1) #10
  %118 = icmp sgt i32 %117, -1
  br i1 %118, label %120, label %119, !prof !3

119:                                              ; preds = %116
  tail call void @llvm.trap() #10
  unreachable

120:                                              ; preds = %116
  %121 = sext i32 %117 to i64
  tail call void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* %0, i32 7, i64 %121)
  br label %123

122:                                              ; preds = %6
  unreachable

123:                                              ; preds = %112, %108, %106, %87, %85, %91, %70, %6, %10, %4, %120, %50, %34, %30, %27, %11, %9
  %124 = phi i1 [ true, %120 ], [ true, %50 ], [ true, %34 ], [ true, %30 ], [ true, %27 ], [ true, %11 ], [ true, %9 ], [ false, %4 ], [ false, %10 ], [ false, %6 ], [ true, %70 ], [ true, %91 ], [ false, %87 ], [ true, %85 ], [ false, %112 ], [ false, %108 ], [ true, %106 ]
  ret i1 %124
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4cbor6Writer5WriteERKNS_5ValueEm(%"class.absl::optional"* noalias nocapture sret, %"class.cbor::Value"* dereferenceable(32), i64) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::vector", align 16
  %5 = alloca %"class.cbor::Writer", align 8
  %6 = icmp ult i64 %2, 2147483648
  br i1 %6, label %8, label %7, !prof !3

7:                                                ; preds = %3
  tail call void @llvm.trap() #10
  unreachable

8:                                                ; preds = %3
  %9 = trunc i64 %2 to i32
  %10 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #10, !noalias !4
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 24, i1 false) #10, !noalias !4
  %12 = bitcast %"class.cbor::Writer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #10, !noalias !4
  %13 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %5, i64 0, i32 0
  store %"class.std::__1::vector"* %4, %"class.std::__1::vector"** %13, align 8, !noalias !4
  %14 = call zeroext i1 @_ZN4cbor6Writer10EncodeCBORERKNS_5ValueEib(%"class.cbor::Writer"* nonnull %5, %"class.cbor::Value"* dereferenceable(32) %1, i32 %9, i1 zeroext false) #10, !noalias !4
  %15 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br i1 %14, label %16, label %26

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8 1, i8* %15, align 8, !alias.scope !4
  %18 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %19 = bitcast %"class.std::__1::vector"* %4 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 16, !noalias !4
  %21 = bitcast %"class.std::__1::vector"* %18 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %21, align 8, !alias.scope !4
  %22 = bitcast i8** %17 to i64*
  %23 = load i64, i64* %22, align 16, !noalias !4
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast i8** %24 to i64*
  store i64 %23, i64* %25, align 8, !alias.scope !4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 24, i1 false) #10, !noalias !4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #10, !noalias !4
  br label %35

26:                                               ; preds = %8
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  store i8 0, i8* %15, align 8, !alias.scope !4
  %28 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = bitcast %union.anon.21* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 24, i1 false) #10, !alias.scope !4
  %30 = load i8*, i8** %27, align 16, !noalias !4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #10, !noalias !4
  %31 = icmp eq i8* %30, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %26
  %33 = ptrtoint i8* %30 to i64
  %34 = bitcast i8** %11 to i64*
  store i64 %33, i64* %34, align 8, !noalias !4
  call void @_ZdlPv(i8* nonnull %30) #11, !noalias !4
  br label %35

35:                                               ; preds = %16, %26, %32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #10, !noalias !4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4cbor6WriterC2EPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.cbor::Writer"* nocapture, %"class.std::__1::vector"*) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  store %"class.std::__1::vector"* %1, %"class.std::__1::vector"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4cbor6Writer9StartItemENS_5Value4TypeEm(%"class.cbor::Writer"* nocapture readonly, i32, i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %5 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %4, align 8
  %6 = shl i32 %1, 5
  %7 = icmp ult i32 %6, 256
  br i1 %7, label %9, label %8, !prof !3

8:                                                ; preds = %3
  tail call void @llvm.trap() #10
  unreachable

9:                                                ; preds = %3
  %10 = trunc i32 %6 to i8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ult i8* %12, %14
  %16 = ptrtoint i8* %14 to i64
  br i1 %15, label %17, label %21

17:                                               ; preds = %9
  store i8 %10, i8* %12, align 1
  %18 = getelementptr inbounds i8, i8* %12, i64 1
  %19 = ptrtoint i8* %18 to i64
  %20 = bitcast i8** %11 to i64*
  store i64 %19, i64* %20, align 8
  br label %66

21:                                               ; preds = %9
  %22 = ptrtoint i8* %12 to i64
  %23 = bitcast i8** %11 to i64*
  %24 = bitcast %"class.std::__1::vector"* %5 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %22, %25
  %27 = add i64 %26, 1
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %21
  %30 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %30) #12
  unreachable

31:                                               ; preds = %21
  %32 = bitcast i8** %13 to i64*
  %33 = sub i64 %16, %25
  %34 = icmp ult i64 %33, 4611686018427387903
  br i1 %34, label %35, label %40

35:                                               ; preds = %31
  %36 = shl i64 %33, 1
  %37 = icmp ult i64 %36, %27
  %38 = select i1 %37, i64 %27, i64 %36
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %35, %31
  %41 = phi i64 [ %38, %35 ], [ 9223372036854775807, %31 ]
  %42 = tail call i8* @_Znwm(i64 %41) #11
  br label %43

43:                                               ; preds = %40, %35
  %44 = phi i64 [ %41, %40 ], [ 0, %35 ]
  %45 = phi i8* [ %42, %40 ], [ null, %35 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 %26
  %47 = getelementptr inbounds i8, i8* %45, i64 %44
  %48 = ptrtoint i8* %47 to i64
  store i8 %10, i8* %46, align 1
  %49 = getelementptr inbounds i8, i8* %46, i64 1
  %50 = ptrtoint i8* %49 to i64
  %51 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = load i64, i64* %23, align 8
  %54 = ptrtoint i8* %52 to i64
  %55 = sub i64 %53, %54
  %56 = sub i64 0, %55
  %57 = getelementptr inbounds i8, i8* %46, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = icmp sgt i64 %55, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %43
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %52, i64 %55, i1 false) #10
  %61 = load i8*, i8** %51, align 8
  br label %62

62:                                               ; preds = %60, %43
  %63 = phi i8* [ %52, %43 ], [ %61, %60 ]
  store i64 %58, i64* %24, align 8
  store i64 %50, i64* %23, align 8
  store i64 %48, i64* %32, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %66, label %65

65:                                               ; preds = %62
  tail call void @_ZdlPv(i8* nonnull %63) #11
  br label %66

66:                                               ; preds = %17, %62, %65
  tail call void @_ZN4cbor6Writer7SetUintEm(%"class.cbor::Writer"* %0, i64 %2)
  ret void
}

declare dereferenceable(24) %"class.std::__1::vector"* @_ZNK4cbor5Value14GetInvalidUTF8Ev(%"class.cbor::Value"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeES8_SA_SA_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #1 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %518

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %268, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !7
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !7
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !10, !noalias !7
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !10, !noalias !7
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !7
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !7
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !10, !noalias !7
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !10, !noalias !7
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !7
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !7
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !10, !noalias !7
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !10, !noalias !7
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !7
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !7
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !10, !noalias !7
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !10, !noalias !7
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !12

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !7
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !7
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !10, !noalias !7
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !10, !noalias !7
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !14

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !16

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %518

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !17
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !17
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !20, !noalias !17
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !20, !noalias !17
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !17
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !17
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !20, !noalias !17
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !20, !noalias !17
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !17
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !17
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !20, !noalias !17
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !20, !noalias !17
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !17
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !17
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !20, !noalias !17
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !20, !noalias !17
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !22

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !17
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !17
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !20, !noalias !17
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !20, !noalias !17
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !23

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #10
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !24

263:                                              ; preds = %250, %253
  %264 = ptrtoint i8* %144 to i64
  %265 = sub i64 %264, %6
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %518, label %267

267:                                              ; preds = %263
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %265, i1 false) #10
  br label %518

268:                                              ; preds = %11
  %269 = bitcast %"class.std::__1::vector"* %0 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = sub i64 %17, %270
  %272 = add i64 %271, %9
  %273 = icmp slt i64 %272, 0
  br i1 %273, label %274, label %276

274:                                              ; preds = %268
  %275 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %275) #12
  unreachable

276:                                              ; preds = %268
  %277 = sub i64 %14, %270
  %278 = icmp ult i64 %277, 4611686018427387903
  br i1 %278, label %281, label %279

279:                                              ; preds = %276
  %280 = sub i64 %5, %270
  br label %287

281:                                              ; preds = %276
  %282 = shl i64 %277, 1
  %283 = icmp ult i64 %282, %272
  %284 = select i1 %283, i64 %272, i64 %282
  %285 = sub i64 %5, %270
  %286 = icmp eq i64 %284, 0
  br i1 %286, label %291, label %287

287:                                              ; preds = %279, %281
  %288 = phi i64 [ %280, %279 ], [ %285, %281 ]
  %289 = phi i64 [ 9223372036854775807, %279 ], [ %284, %281 ]
  %290 = tail call i8* @_Znwm(i64 %289) #11
  br label %291

291:                                              ; preds = %281, %287
  %292 = phi i64 [ %288, %287 ], [ %285, %281 ]
  %293 = phi i64 [ %289, %287 ], [ 0, %281 ]
  %294 = phi i8* [ %290, %287 ], [ null, %281 ]
  %295 = getelementptr inbounds i8, i8* %294, i64 %292
  %296 = getelementptr inbounds i8, i8* %294, i64 %293
  %297 = getelementptr inbounds i8, i8* %295, i64 %9
  %298 = icmp ult i64 %9, 32
  br i1 %298, label %384, label %299

299:                                              ; preds = %291
  %300 = icmp ult i8* %295, %3
  %301 = icmp ugt i8* %297, %2
  %302 = and i1 %300, %301
  br i1 %302, label %384, label %303

303:                                              ; preds = %299
  %304 = and i64 %9, -32
  %305 = getelementptr i8, i8* %295, i64 %304
  %306 = getelementptr i8, i8* %2, i64 %304
  %307 = add i64 %304, -32
  %308 = lshr exact i64 %307, 5
  %309 = add nuw nsw i64 %308, 1
  %310 = and i64 %309, 3
  %311 = icmp ult i64 %307, 96
  br i1 %311, label %363, label %312

312:                                              ; preds = %303
  %313 = sub nsw i64 %309, %310
  br label %314

314:                                              ; preds = %314, %312
  %315 = phi i64 [ 0, %312 ], [ %360, %314 ]
  %316 = phi i64 [ %313, %312 ], [ %361, %314 ]
  %317 = getelementptr i8, i8* %295, i64 %315
  %318 = getelementptr i8, i8* %2, i64 %315
  %319 = bitcast i8* %318 to <16 x i8>*
  %320 = load <16 x i8>, <16 x i8>* %319, align 1, !alias.scope !25
  %321 = getelementptr i8, i8* %318, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  %323 = load <16 x i8>, <16 x i8>* %322, align 1, !alias.scope !25
  %324 = bitcast i8* %317 to <16 x i8>*
  store <16 x i8> %320, <16 x i8>* %324, align 1, !alias.scope !28, !noalias !25
  %325 = getelementptr i8, i8* %317, i64 16
  %326 = bitcast i8* %325 to <16 x i8>*
  store <16 x i8> %323, <16 x i8>* %326, align 1, !alias.scope !28, !noalias !25
  %327 = or i64 %315, 32
  %328 = getelementptr i8, i8* %295, i64 %327
  %329 = getelementptr i8, i8* %2, i64 %327
  %330 = bitcast i8* %329 to <16 x i8>*
  %331 = load <16 x i8>, <16 x i8>* %330, align 1, !alias.scope !25
  %332 = getelementptr i8, i8* %329, i64 16
  %333 = bitcast i8* %332 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !25
  %335 = bitcast i8* %328 to <16 x i8>*
  store <16 x i8> %331, <16 x i8>* %335, align 1, !alias.scope !28, !noalias !25
  %336 = getelementptr i8, i8* %328, i64 16
  %337 = bitcast i8* %336 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %337, align 1, !alias.scope !28, !noalias !25
  %338 = or i64 %315, 64
  %339 = getelementptr i8, i8* %295, i64 %338
  %340 = getelementptr i8, i8* %2, i64 %338
  %341 = bitcast i8* %340 to <16 x i8>*
  %342 = load <16 x i8>, <16 x i8>* %341, align 1, !alias.scope !25
  %343 = getelementptr i8, i8* %340, i64 16
  %344 = bitcast i8* %343 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1, !alias.scope !25
  %346 = bitcast i8* %339 to <16 x i8>*
  store <16 x i8> %342, <16 x i8>* %346, align 1, !alias.scope !28, !noalias !25
  %347 = getelementptr i8, i8* %339, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  store <16 x i8> %345, <16 x i8>* %348, align 1, !alias.scope !28, !noalias !25
  %349 = or i64 %315, 96
  %350 = getelementptr i8, i8* %295, i64 %349
  %351 = getelementptr i8, i8* %2, i64 %349
  %352 = bitcast i8* %351 to <16 x i8>*
  %353 = load <16 x i8>, <16 x i8>* %352, align 1, !alias.scope !25
  %354 = getelementptr i8, i8* %351, i64 16
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 1, !alias.scope !25
  %357 = bitcast i8* %350 to <16 x i8>*
  store <16 x i8> %353, <16 x i8>* %357, align 1, !alias.scope !28, !noalias !25
  %358 = getelementptr i8, i8* %350, i64 16
  %359 = bitcast i8* %358 to <16 x i8>*
  store <16 x i8> %356, <16 x i8>* %359, align 1, !alias.scope !28, !noalias !25
  %360 = add i64 %315, 128
  %361 = add i64 %316, -4
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %363, label %314, !llvm.loop !30

363:                                              ; preds = %314, %303
  %364 = phi i64 [ 0, %303 ], [ %360, %314 ]
  %365 = icmp eq i64 %310, 0
  br i1 %365, label %382, label %366

366:                                              ; preds = %363, %366
  %367 = phi i64 [ %379, %366 ], [ %364, %363 ]
  %368 = phi i64 [ %380, %366 ], [ %310, %363 ]
  %369 = getelementptr i8, i8* %295, i64 %367
  %370 = getelementptr i8, i8* %2, i64 %367
  %371 = bitcast i8* %370 to <16 x i8>*
  %372 = load <16 x i8>, <16 x i8>* %371, align 1, !alias.scope !25
  %373 = getelementptr i8, i8* %370, i64 16
  %374 = bitcast i8* %373 to <16 x i8>*
  %375 = load <16 x i8>, <16 x i8>* %374, align 1, !alias.scope !25
  %376 = bitcast i8* %369 to <16 x i8>*
  store <16 x i8> %372, <16 x i8>* %376, align 1, !alias.scope !28, !noalias !25
  %377 = getelementptr i8, i8* %369, i64 16
  %378 = bitcast i8* %377 to <16 x i8>*
  store <16 x i8> %375, <16 x i8>* %378, align 1, !alias.scope !28, !noalias !25
  %379 = add i64 %367, 32
  %380 = add i64 %368, -1
  %381 = icmp eq i64 %380, 0
  br i1 %381, label %382, label %366, !llvm.loop !31

382:                                              ; preds = %366, %363
  %383 = icmp eq i64 %9, %304
  br i1 %383, label %394, label %384

384:                                              ; preds = %382, %299, %291
  %385 = phi i8* [ %295, %299 ], [ %295, %291 ], [ %305, %382 ]
  %386 = phi i8* [ %2, %299 ], [ %2, %291 ], [ %306, %382 ]
  br label %387

387:                                              ; preds = %384, %387
  %388 = phi i8* [ %391, %387 ], [ %385, %384 ]
  %389 = phi i8* [ %392, %387 ], [ %386, %384 ]
  %390 = load i8, i8* %389, align 1
  store i8 %390, i8* %388, align 1
  %391 = getelementptr inbounds i8, i8* %388, i64 1
  %392 = getelementptr inbounds i8, i8* %389, i64 1
  %393 = icmp eq i8* %297, %391
  br i1 %393, label %394, label %387, !llvm.loop !32

394:                                              ; preds = %387, %382
  %395 = ptrtoint i8* %296 to i64
  %396 = load i8*, i8** %7, align 8
  %397 = ptrtoint i8* %396 to i64
  %398 = sub i64 %5, %397
  %399 = sub i64 0, %398
  %400 = getelementptr inbounds i8, i8* %295, i64 %399
  %401 = ptrtoint i8* %400 to i64
  %402 = icmp sgt i64 %398, 0
  br i1 %402, label %403, label %404

403:                                              ; preds = %394
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %400, i8* align 1 %396, i64 %398, i1 false) #10
  br label %404

404:                                              ; preds = %403, %394
  %405 = load i8*, i8** %15, align 8
  %406 = icmp eq i8* %405, %1
  br i1 %406, label %512, label %407

407:                                              ; preds = %404
  %408 = ptrtoint i8* %405 to i64
  %409 = sub i64 %408, %5
  %410 = icmp ult i64 %409, 32
  br i1 %410, label %502, label %411

411:                                              ; preds = %407
  %412 = add i64 %292, %8
  %413 = sub i64 %412, %5
  %414 = sub i64 %413, %6
  %415 = getelementptr i8, i8* %405, i64 %414
  %416 = ptrtoint i8* %415 to i64
  %417 = getelementptr i8, i8* %294, i64 %416
  %418 = icmp ult i8* %297, %405
  %419 = icmp ugt i8* %417, %1
  %420 = and i1 %418, %419
  br i1 %420, label %502, label %421

421:                                              ; preds = %411
  %422 = and i64 %409, -32
  %423 = getelementptr i8, i8* %297, i64 %422
  %424 = getelementptr i8, i8* %1, i64 %422
  %425 = add i64 %422, -32
  %426 = lshr exact i64 %425, 5
  %427 = add nuw nsw i64 %426, 1
  %428 = and i64 %427, 3
  %429 = icmp ult i64 %425, 96
  br i1 %429, label %481, label %430

430:                                              ; preds = %421
  %431 = sub nsw i64 %427, %428
  br label %432

432:                                              ; preds = %432, %430
  %433 = phi i64 [ 0, %430 ], [ %478, %432 ]
  %434 = phi i64 [ %431, %430 ], [ %479, %432 ]
  %435 = getelementptr i8, i8* %297, i64 %433
  %436 = getelementptr i8, i8* %1, i64 %433
  %437 = bitcast i8* %436 to <16 x i8>*
  %438 = load <16 x i8>, <16 x i8>* %437, align 1, !alias.scope !33
  %439 = getelementptr i8, i8* %436, i64 16
  %440 = bitcast i8* %439 to <16 x i8>*
  %441 = load <16 x i8>, <16 x i8>* %440, align 1, !alias.scope !33
  %442 = bitcast i8* %435 to <16 x i8>*
  store <16 x i8> %438, <16 x i8>* %442, align 1, !alias.scope !36, !noalias !33
  %443 = getelementptr i8, i8* %435, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  store <16 x i8> %441, <16 x i8>* %444, align 1, !alias.scope !36, !noalias !33
  %445 = or i64 %433, 32
  %446 = getelementptr i8, i8* %297, i64 %445
  %447 = getelementptr i8, i8* %1, i64 %445
  %448 = bitcast i8* %447 to <16 x i8>*
  %449 = load <16 x i8>, <16 x i8>* %448, align 1, !alias.scope !33
  %450 = getelementptr i8, i8* %447, i64 16
  %451 = bitcast i8* %450 to <16 x i8>*
  %452 = load <16 x i8>, <16 x i8>* %451, align 1, !alias.scope !33
  %453 = bitcast i8* %446 to <16 x i8>*
  store <16 x i8> %449, <16 x i8>* %453, align 1, !alias.scope !36, !noalias !33
  %454 = getelementptr i8, i8* %446, i64 16
  %455 = bitcast i8* %454 to <16 x i8>*
  store <16 x i8> %452, <16 x i8>* %455, align 1, !alias.scope !36, !noalias !33
  %456 = or i64 %433, 64
  %457 = getelementptr i8, i8* %297, i64 %456
  %458 = getelementptr i8, i8* %1, i64 %456
  %459 = bitcast i8* %458 to <16 x i8>*
  %460 = load <16 x i8>, <16 x i8>* %459, align 1, !alias.scope !33
  %461 = getelementptr i8, i8* %458, i64 16
  %462 = bitcast i8* %461 to <16 x i8>*
  %463 = load <16 x i8>, <16 x i8>* %462, align 1, !alias.scope !33
  %464 = bitcast i8* %457 to <16 x i8>*
  store <16 x i8> %460, <16 x i8>* %464, align 1, !alias.scope !36, !noalias !33
  %465 = getelementptr i8, i8* %457, i64 16
  %466 = bitcast i8* %465 to <16 x i8>*
  store <16 x i8> %463, <16 x i8>* %466, align 1, !alias.scope !36, !noalias !33
  %467 = or i64 %433, 96
  %468 = getelementptr i8, i8* %297, i64 %467
  %469 = getelementptr i8, i8* %1, i64 %467
  %470 = bitcast i8* %469 to <16 x i8>*
  %471 = load <16 x i8>, <16 x i8>* %470, align 1, !alias.scope !33
  %472 = getelementptr i8, i8* %469, i64 16
  %473 = bitcast i8* %472 to <16 x i8>*
  %474 = load <16 x i8>, <16 x i8>* %473, align 1, !alias.scope !33
  %475 = bitcast i8* %468 to <16 x i8>*
  store <16 x i8> %471, <16 x i8>* %475, align 1, !alias.scope !36, !noalias !33
  %476 = getelementptr i8, i8* %468, i64 16
  %477 = bitcast i8* %476 to <16 x i8>*
  store <16 x i8> %474, <16 x i8>* %477, align 1, !alias.scope !36, !noalias !33
  %478 = add i64 %433, 128
  %479 = add i64 %434, -4
  %480 = icmp eq i64 %479, 0
  br i1 %480, label %481, label %432, !llvm.loop !38

481:                                              ; preds = %432, %421
  %482 = phi i64 [ 0, %421 ], [ %478, %432 ]
  %483 = icmp eq i64 %428, 0
  br i1 %483, label %500, label %484

484:                                              ; preds = %481, %484
  %485 = phi i64 [ %497, %484 ], [ %482, %481 ]
  %486 = phi i64 [ %498, %484 ], [ %428, %481 ]
  %487 = getelementptr i8, i8* %297, i64 %485
  %488 = getelementptr i8, i8* %1, i64 %485
  %489 = bitcast i8* %488 to <16 x i8>*
  %490 = load <16 x i8>, <16 x i8>* %489, align 1, !alias.scope !33
  %491 = getelementptr i8, i8* %488, i64 16
  %492 = bitcast i8* %491 to <16 x i8>*
  %493 = load <16 x i8>, <16 x i8>* %492, align 1, !alias.scope !33
  %494 = bitcast i8* %487 to <16 x i8>*
  store <16 x i8> %490, <16 x i8>* %494, align 1, !alias.scope !36, !noalias !33
  %495 = getelementptr i8, i8* %487, i64 16
  %496 = bitcast i8* %495 to <16 x i8>*
  store <16 x i8> %493, <16 x i8>* %496, align 1, !alias.scope !36, !noalias !33
  %497 = add i64 %485, 32
  %498 = add i64 %486, -1
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %500, label %484, !llvm.loop !39

500:                                              ; preds = %484, %481
  %501 = icmp eq i64 %409, %422
  br i1 %501, label %512, label %502

502:                                              ; preds = %500, %411, %407
  %503 = phi i8* [ %297, %411 ], [ %297, %407 ], [ %423, %500 ]
  %504 = phi i8* [ %1, %411 ], [ %1, %407 ], [ %424, %500 ]
  br label %505

505:                                              ; preds = %502, %505
  %506 = phi i8* [ %510, %505 ], [ %503, %502 ]
  %507 = phi i8* [ %509, %505 ], [ %504, %502 ]
  %508 = load i8, i8* %507, align 1
  store i8 %508, i8* %506, align 1
  %509 = getelementptr inbounds i8, i8* %507, i64 1
  %510 = getelementptr inbounds i8, i8* %506, i64 1
  %511 = icmp eq i8* %509, %405
  br i1 %511, label %512, label %505, !llvm.loop !40

512:                                              ; preds = %505, %500, %404
  %513 = phi i8* [ %297, %404 ], [ %423, %500 ], [ %510, %505 ]
  %514 = ptrtoint i8* %513 to i64
  %515 = load i8*, i8** %7, align 8
  store i64 %401, i64* %269, align 8
  store i64 %514, i64* %20, align 8
  store i64 %395, i64* %13, align 8
  %516 = icmp eq i8* %515, null
  br i1 %516, label %518, label %517

517:                                              ; preds = %512
  tail call void @_ZdlPv(i8* nonnull %515) #11
  br label %518

518:                                              ; preds = %517, %512, %136, %263, %267, %4
  %519 = phi i8* [ %1, %4 ], [ %1, %267 ], [ %1, %263 ], [ %1, %136 ], [ %295, %512 ], [ %295, %517 ]
  ret i8* %519
}

declare dereferenceable(8) i64* @_ZNK4cbor5Value11GetUnsignedEv(%"class.cbor::Value"*) local_unnamed_addr #4

declare dereferenceable(8) i64* @_ZNK4cbor5Value11GetNegativeEv(%"class.cbor::Value"*) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::vector"* @_ZNK4cbor5Value13GetBytestringEv(%"class.cbor::Value"*) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4cbor5Value9GetStringEv(%"class.cbor::Value"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #1 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %618

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %368, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !41
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !41
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !44, !noalias !41
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !44, !noalias !41
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !41
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !41
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !44, !noalias !41
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !44, !noalias !41
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !41
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !41
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !44, !noalias !41
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !44, !noalias !41
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !41
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !41
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !44, !noalias !41
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !44, !noalias !41
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !46

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !41
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !41
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !44, !noalias !41
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !44, !noalias !41
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !47

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !48

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %618

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !49
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !49
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !52, !noalias !49
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !52, !noalias !49
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !49
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !49
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !52, !noalias !49
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !52, !noalias !49
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !49
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !49
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !52, !noalias !49
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !52, !noalias !49
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !49
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !49
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !52, !noalias !49
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !52, !noalias !49
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !54

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !49
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !49
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !52, !noalias !49
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !52, !noalias !49
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !55

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #10
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !56

263:                                              ; preds = %250, %253
  %264 = icmp eq i8* %144, %2
  br i1 %264, label %618, label %265

265:                                              ; preds = %263
  %266 = sub i64 0, %6
  %267 = getelementptr i8, i8* %144, i64 %266
  %268 = ptrtoint i8* %267 to i64
  %269 = icmp ult i8* %267, inttoptr (i64 32 to i8*)
  br i1 %269, label %358, label %270

270:                                              ; preds = %265
  %271 = ptrtoint i8* %1 to i64
  %272 = sub i64 %271, %6
  %273 = getelementptr i8, i8* %144, i64 %272
  %274 = icmp ugt i8* %144, %1
  %275 = icmp ugt i8* %273, %2
  %276 = and i1 %274, %275
  br i1 %276, label %358, label %277

277:                                              ; preds = %270
  %278 = and i64 %268, -32
  %279 = getelementptr i8, i8* %1, i64 %278
  %280 = getelementptr i8, i8* %2, i64 %278
  %281 = add i64 %278, -32
  %282 = lshr exact i64 %281, 5
  %283 = add nuw nsw i64 %282, 1
  %284 = and i64 %283, 3
  %285 = icmp ult i64 %281, 96
  br i1 %285, label %337, label %286

286:                                              ; preds = %277
  %287 = sub nsw i64 %283, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %334, %288 ]
  %290 = phi i64 [ %287, %286 ], [ %335, %288 ]
  %291 = getelementptr i8, i8* %1, i64 %289
  %292 = getelementptr i8, i8* %2, i64 %289
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1, !alias.scope !57
  %295 = getelementptr i8, i8* %292, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !57
  %298 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %298, align 1, !alias.scope !60, !noalias !57
  %299 = getelementptr i8, i8* %291, i64 16
  %300 = bitcast i8* %299 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %300, align 1, !alias.scope !60, !noalias !57
  %301 = or i64 %289, 32
  %302 = getelementptr i8, i8* %1, i64 %301
  %303 = getelementptr i8, i8* %2, i64 %301
  %304 = bitcast i8* %303 to <16 x i8>*
  %305 = load <16 x i8>, <16 x i8>* %304, align 1, !alias.scope !57
  %306 = getelementptr i8, i8* %303, i64 16
  %307 = bitcast i8* %306 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1, !alias.scope !57
  %309 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %305, <16 x i8>* %309, align 1, !alias.scope !60, !noalias !57
  %310 = getelementptr i8, i8* %302, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %311, align 1, !alias.scope !60, !noalias !57
  %312 = or i64 %289, 64
  %313 = getelementptr i8, i8* %1, i64 %312
  %314 = getelementptr i8, i8* %2, i64 %312
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !57
  %317 = getelementptr i8, i8* %314, i64 16
  %318 = bitcast i8* %317 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1, !alias.scope !57
  %320 = bitcast i8* %313 to <16 x i8>*
  store <16 x i8> %316, <16 x i8>* %320, align 1, !alias.scope !60, !noalias !57
  %321 = getelementptr i8, i8* %313, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %319, <16 x i8>* %322, align 1, !alias.scope !60, !noalias !57
  %323 = or i64 %289, 96
  %324 = getelementptr i8, i8* %1, i64 %323
  %325 = getelementptr i8, i8* %2, i64 %323
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1, !alias.scope !57
  %328 = getelementptr i8, i8* %325, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1, !alias.scope !57
  %331 = bitcast i8* %324 to <16 x i8>*
  store <16 x i8> %327, <16 x i8>* %331, align 1, !alias.scope !60, !noalias !57
  %332 = getelementptr i8, i8* %324, i64 16
  %333 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %330, <16 x i8>* %333, align 1, !alias.scope !60, !noalias !57
  %334 = add i64 %289, 128
  %335 = add i64 %290, -4
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %288, !llvm.loop !62

337:                                              ; preds = %288, %277
  %338 = phi i64 [ 0, %277 ], [ %334, %288 ]
  %339 = icmp eq i64 %284, 0
  br i1 %339, label %356, label %340

340:                                              ; preds = %337, %340
  %341 = phi i64 [ %353, %340 ], [ %338, %337 ]
  %342 = phi i64 [ %354, %340 ], [ %284, %337 ]
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = getelementptr i8, i8* %2, i64 %341
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !57
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !57
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !60, !noalias !57
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !60, !noalias !57
  %353 = add i64 %341, 32
  %354 = add i64 %342, -1
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %340, !llvm.loop !63

356:                                              ; preds = %340, %337
  %357 = icmp eq i64 %278, %268
  br i1 %357, label %618, label %358

358:                                              ; preds = %356, %270, %265
  %359 = phi i8* [ %1, %270 ], [ %1, %265 ], [ %279, %356 ]
  %360 = phi i8* [ %2, %270 ], [ %2, %265 ], [ %280, %356 ]
  br label %361

361:                                              ; preds = %358, %361
  %362 = phi i8* [ %366, %361 ], [ %359, %358 ]
  %363 = phi i8* [ %365, %361 ], [ %360, %358 ]
  %364 = load i8, i8* %363, align 1
  store i8 %364, i8* %362, align 1
  %365 = getelementptr inbounds i8, i8* %363, i64 1
  %366 = getelementptr inbounds i8, i8* %362, i64 1
  %367 = icmp eq i8* %365, %144
  br i1 %367, label %618, label %361, !llvm.loop !64

368:                                              ; preds = %11
  %369 = bitcast %"class.std::__1::vector"* %0 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = sub i64 %17, %370
  %372 = add i64 %371, %9
  %373 = icmp slt i64 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %368
  %375 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %375) #12
  unreachable

376:                                              ; preds = %368
  %377 = sub i64 %14, %370
  %378 = icmp ult i64 %377, 4611686018427387903
  br i1 %378, label %381, label %379

379:                                              ; preds = %376
  %380 = sub i64 %5, %370
  br label %387

381:                                              ; preds = %376
  %382 = shl i64 %377, 1
  %383 = icmp ult i64 %382, %372
  %384 = select i1 %383, i64 %372, i64 %382
  %385 = sub i64 %5, %370
  %386 = icmp eq i64 %384, 0
  br i1 %386, label %391, label %387

387:                                              ; preds = %379, %381
  %388 = phi i64 [ %380, %379 ], [ %385, %381 ]
  %389 = phi i64 [ 9223372036854775807, %379 ], [ %384, %381 ]
  %390 = tail call i8* @_Znwm(i64 %389) #11
  br label %391

391:                                              ; preds = %381, %387
  %392 = phi i64 [ %388, %387 ], [ %385, %381 ]
  %393 = phi i64 [ %389, %387 ], [ 0, %381 ]
  %394 = phi i8* [ %390, %387 ], [ null, %381 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 %392
  %396 = getelementptr inbounds i8, i8* %394, i64 %393
  %397 = getelementptr inbounds i8, i8* %395, i64 %9
  %398 = icmp ult i64 %9, 32
  br i1 %398, label %484, label %399

399:                                              ; preds = %391
  %400 = icmp ult i8* %395, %3
  %401 = icmp ugt i8* %397, %2
  %402 = and i1 %400, %401
  br i1 %402, label %484, label %403

403:                                              ; preds = %399
  %404 = and i64 %9, -32
  %405 = getelementptr i8, i8* %395, i64 %404
  %406 = getelementptr i8, i8* %2, i64 %404
  %407 = add i64 %404, -32
  %408 = lshr exact i64 %407, 5
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 3
  %411 = icmp ult i64 %407, 96
  br i1 %411, label %463, label %412

412:                                              ; preds = %403
  %413 = sub nsw i64 %409, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %460, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %461, %414 ]
  %417 = getelementptr i8, i8* %395, i64 %415
  %418 = getelementptr i8, i8* %2, i64 %415
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1, !alias.scope !65
  %421 = getelementptr i8, i8* %418, i64 16
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !alias.scope !65
  %424 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %420, <16 x i8>* %424, align 1, !alias.scope !68, !noalias !65
  %425 = getelementptr i8, i8* %417, i64 16
  %426 = bitcast i8* %425 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %426, align 1, !alias.scope !68, !noalias !65
  %427 = or i64 %415, 32
  %428 = getelementptr i8, i8* %395, i64 %427
  %429 = getelementptr i8, i8* %2, i64 %427
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !65
  %432 = getelementptr i8, i8* %429, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1, !alias.scope !65
  %435 = bitcast i8* %428 to <16 x i8>*
  store <16 x i8> %431, <16 x i8>* %435, align 1, !alias.scope !68, !noalias !65
  %436 = getelementptr i8, i8* %428, i64 16
  %437 = bitcast i8* %436 to <16 x i8>*
  store <16 x i8> %434, <16 x i8>* %437, align 1, !alias.scope !68, !noalias !65
  %438 = or i64 %415, 64
  %439 = getelementptr i8, i8* %395, i64 %438
  %440 = getelementptr i8, i8* %2, i64 %438
  %441 = bitcast i8* %440 to <16 x i8>*
  %442 = load <16 x i8>, <16 x i8>* %441, align 1, !alias.scope !65
  %443 = getelementptr i8, i8* %440, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  %445 = load <16 x i8>, <16 x i8>* %444, align 1, !alias.scope !65
  %446 = bitcast i8* %439 to <16 x i8>*
  store <16 x i8> %442, <16 x i8>* %446, align 1, !alias.scope !68, !noalias !65
  %447 = getelementptr i8, i8* %439, i64 16
  %448 = bitcast i8* %447 to <16 x i8>*
  store <16 x i8> %445, <16 x i8>* %448, align 1, !alias.scope !68, !noalias !65
  %449 = or i64 %415, 96
  %450 = getelementptr i8, i8* %395, i64 %449
  %451 = getelementptr i8, i8* %2, i64 %449
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1, !alias.scope !65
  %454 = getelementptr i8, i8* %451, i64 16
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1, !alias.scope !65
  %457 = bitcast i8* %450 to <16 x i8>*
  store <16 x i8> %453, <16 x i8>* %457, align 1, !alias.scope !68, !noalias !65
  %458 = getelementptr i8, i8* %450, i64 16
  %459 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %456, <16 x i8>* %459, align 1, !alias.scope !68, !noalias !65
  %460 = add i64 %415, 128
  %461 = add i64 %416, -4
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %414, !llvm.loop !70

463:                                              ; preds = %414, %403
  %464 = phi i64 [ 0, %403 ], [ %460, %414 ]
  %465 = icmp eq i64 %410, 0
  br i1 %465, label %482, label %466

466:                                              ; preds = %463, %466
  %467 = phi i64 [ %479, %466 ], [ %464, %463 ]
  %468 = phi i64 [ %480, %466 ], [ %410, %463 ]
  %469 = getelementptr i8, i8* %395, i64 %467
  %470 = getelementptr i8, i8* %2, i64 %467
  %471 = bitcast i8* %470 to <16 x i8>*
  %472 = load <16 x i8>, <16 x i8>* %471, align 1, !alias.scope !65
  %473 = getelementptr i8, i8* %470, i64 16
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1, !alias.scope !65
  %476 = bitcast i8* %469 to <16 x i8>*
  store <16 x i8> %472, <16 x i8>* %476, align 1, !alias.scope !68, !noalias !65
  %477 = getelementptr i8, i8* %469, i64 16
  %478 = bitcast i8* %477 to <16 x i8>*
  store <16 x i8> %475, <16 x i8>* %478, align 1, !alias.scope !68, !noalias !65
  %479 = add i64 %467, 32
  %480 = add i64 %468, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %466, !llvm.loop !71

482:                                              ; preds = %466, %463
  %483 = icmp eq i64 %9, %404
  br i1 %483, label %494, label %484

484:                                              ; preds = %482, %399, %391
  %485 = phi i8* [ %395, %399 ], [ %395, %391 ], [ %405, %482 ]
  %486 = phi i8* [ %2, %399 ], [ %2, %391 ], [ %406, %482 ]
  br label %487

487:                                              ; preds = %484, %487
  %488 = phi i8* [ %491, %487 ], [ %485, %484 ]
  %489 = phi i8* [ %492, %487 ], [ %486, %484 ]
  %490 = load i8, i8* %489, align 1
  store i8 %490, i8* %488, align 1
  %491 = getelementptr inbounds i8, i8* %488, i64 1
  %492 = getelementptr inbounds i8, i8* %489, i64 1
  %493 = icmp eq i8* %397, %491
  br i1 %493, label %494, label %487, !llvm.loop !72

494:                                              ; preds = %487, %482
  %495 = ptrtoint i8* %396 to i64
  %496 = load i8*, i8** %7, align 8
  %497 = ptrtoint i8* %496 to i64
  %498 = sub i64 %5, %497
  %499 = sub i64 0, %498
  %500 = getelementptr inbounds i8, i8* %395, i64 %499
  %501 = ptrtoint i8* %500 to i64
  %502 = icmp sgt i64 %498, 0
  br i1 %502, label %503, label %504

503:                                              ; preds = %494
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %500, i8* align 1 %496, i64 %498, i1 false) #10
  br label %504

504:                                              ; preds = %503, %494
  %505 = load i8*, i8** %15, align 8
  %506 = icmp eq i8* %505, %1
  br i1 %506, label %612, label %507

507:                                              ; preds = %504
  %508 = ptrtoint i8* %505 to i64
  %509 = sub i64 %508, %5
  %510 = icmp ult i64 %509, 32
  br i1 %510, label %602, label %511

511:                                              ; preds = %507
  %512 = add i64 %392, %8
  %513 = sub i64 %512, %5
  %514 = sub i64 %513, %6
  %515 = getelementptr i8, i8* %505, i64 %514
  %516 = ptrtoint i8* %515 to i64
  %517 = getelementptr i8, i8* %394, i64 %516
  %518 = icmp ult i8* %397, %505
  %519 = icmp ugt i8* %517, %1
  %520 = and i1 %518, %519
  br i1 %520, label %602, label %521

521:                                              ; preds = %511
  %522 = and i64 %509, -32
  %523 = getelementptr i8, i8* %397, i64 %522
  %524 = getelementptr i8, i8* %1, i64 %522
  %525 = add i64 %522, -32
  %526 = lshr exact i64 %525, 5
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 3
  %529 = icmp ult i64 %525, 96
  br i1 %529, label %581, label %530

530:                                              ; preds = %521
  %531 = sub nsw i64 %527, %528
  br label %532

532:                                              ; preds = %532, %530
  %533 = phi i64 [ 0, %530 ], [ %578, %532 ]
  %534 = phi i64 [ %531, %530 ], [ %579, %532 ]
  %535 = getelementptr i8, i8* %397, i64 %533
  %536 = getelementptr i8, i8* %1, i64 %533
  %537 = bitcast i8* %536 to <16 x i8>*
  %538 = load <16 x i8>, <16 x i8>* %537, align 1, !alias.scope !73
  %539 = getelementptr i8, i8* %536, i64 16
  %540 = bitcast i8* %539 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 1, !alias.scope !73
  %542 = bitcast i8* %535 to <16 x i8>*
  store <16 x i8> %538, <16 x i8>* %542, align 1, !alias.scope !76, !noalias !73
  %543 = getelementptr i8, i8* %535, i64 16
  %544 = bitcast i8* %543 to <16 x i8>*
  store <16 x i8> %541, <16 x i8>* %544, align 1, !alias.scope !76, !noalias !73
  %545 = or i64 %533, 32
  %546 = getelementptr i8, i8* %397, i64 %545
  %547 = getelementptr i8, i8* %1, i64 %545
  %548 = bitcast i8* %547 to <16 x i8>*
  %549 = load <16 x i8>, <16 x i8>* %548, align 1, !alias.scope !73
  %550 = getelementptr i8, i8* %547, i64 16
  %551 = bitcast i8* %550 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1, !alias.scope !73
  %553 = bitcast i8* %546 to <16 x i8>*
  store <16 x i8> %549, <16 x i8>* %553, align 1, !alias.scope !76, !noalias !73
  %554 = getelementptr i8, i8* %546, i64 16
  %555 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %552, <16 x i8>* %555, align 1, !alias.scope !76, !noalias !73
  %556 = or i64 %533, 64
  %557 = getelementptr i8, i8* %397, i64 %556
  %558 = getelementptr i8, i8* %1, i64 %556
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !73
  %561 = getelementptr i8, i8* %558, i64 16
  %562 = bitcast i8* %561 to <16 x i8>*
  %563 = load <16 x i8>, <16 x i8>* %562, align 1, !alias.scope !73
  %564 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %564, align 1, !alias.scope !76, !noalias !73
  %565 = getelementptr i8, i8* %557, i64 16
  %566 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %563, <16 x i8>* %566, align 1, !alias.scope !76, !noalias !73
  %567 = or i64 %533, 96
  %568 = getelementptr i8, i8* %397, i64 %567
  %569 = getelementptr i8, i8* %1, i64 %567
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !73
  %572 = getelementptr i8, i8* %569, i64 16
  %573 = bitcast i8* %572 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1, !alias.scope !73
  %575 = bitcast i8* %568 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %575, align 1, !alias.scope !76, !noalias !73
  %576 = getelementptr i8, i8* %568, i64 16
  %577 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %574, <16 x i8>* %577, align 1, !alias.scope !76, !noalias !73
  %578 = add i64 %533, 128
  %579 = add i64 %534, -4
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %532, !llvm.loop !78

581:                                              ; preds = %532, %521
  %582 = phi i64 [ 0, %521 ], [ %578, %532 ]
  %583 = icmp eq i64 %528, 0
  br i1 %583, label %600, label %584

584:                                              ; preds = %581, %584
  %585 = phi i64 [ %597, %584 ], [ %582, %581 ]
  %586 = phi i64 [ %598, %584 ], [ %528, %581 ]
  %587 = getelementptr i8, i8* %397, i64 %585
  %588 = getelementptr i8, i8* %1, i64 %585
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !73
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !73
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !76, !noalias !73
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !76, !noalias !73
  %597 = add i64 %585, 32
  %598 = add i64 %586, -1
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %584, !llvm.loop !79

600:                                              ; preds = %584, %581
  %601 = icmp eq i64 %509, %522
  br i1 %601, label %612, label %602

602:                                              ; preds = %600, %511, %507
  %603 = phi i8* [ %397, %511 ], [ %397, %507 ], [ %523, %600 ]
  %604 = phi i8* [ %1, %511 ], [ %1, %507 ], [ %524, %600 ]
  br label %605

605:                                              ; preds = %602, %605
  %606 = phi i8* [ %610, %605 ], [ %603, %602 ]
  %607 = phi i8* [ %609, %605 ], [ %604, %602 ]
  %608 = load i8, i8* %607, align 1
  store i8 %608, i8* %606, align 1
  %609 = getelementptr inbounds i8, i8* %607, i64 1
  %610 = getelementptr inbounds i8, i8* %606, i64 1
  %611 = icmp eq i8* %609, %505
  br i1 %611, label %612, label %605, !llvm.loop !80

612:                                              ; preds = %605, %600, %504
  %613 = phi i8* [ %397, %504 ], [ %523, %600 ], [ %610, %605 ]
  %614 = ptrtoint i8* %613 to i64
  %615 = load i8*, i8** %7, align 8
  store i64 %501, i64* %369, align 8
  store i64 %614, i64* %20, align 8
  store i64 %495, i64* %13, align 8
  %616 = icmp eq i8* %615, null
  br i1 %616, label %618, label %617

617:                                              ; preds = %612
  tail call void @_ZdlPv(i8* nonnull %615) #11
  br label %618

618:                                              ; preds = %361, %356, %617, %612, %136, %263, %4
  %619 = phi i8* [ %1, %4 ], [ %1, %263 ], [ %1, %136 ], [ %395, %612 ], [ %395, %617 ], [ %1, %356 ], [ %1, %361 ]
  ret i8* %619
}

declare dereferenceable(24) %"class.std::__1::vector.7"* @_ZNK4cbor5Value8GetArrayEv(%"class.cbor::Value"*) local_unnamed_addr #4

declare dereferenceable(24) %"class.base::flat_map"* @_ZNK4cbor5Value6GetMapEv(%"class.cbor::Value"*) local_unnamed_addr #4

declare i32 @_ZNK4cbor5Value14GetSimpleValueEv(%"class.cbor::Value"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4cbor6Writer7SetUintEm(%"class.cbor::Writer"* nocapture readonly, i64) local_unnamed_addr #1 align 2 {
  %3 = icmp ult i64 %1, 24
  br i1 %3, label %36, label %4

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 256
  br i1 %5, label %16, label %6

6:                                                ; preds = %4
  %7 = icmp ult i64 %1, 65536
  br i1 %7, label %24, label %8

8:                                                ; preds = %6
  %9 = icmp ult i64 %1, 4294967296
  %10 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %11 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 -1
  %15 = load i8, i8* %14, align 1
  br i1 %9, label %32, label %34

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %18 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %17, align 8
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %18, i64 0, i32 0, i32 1
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 -1
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 24
  br label %46

24:                                               ; preds = %6
  %25 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %26 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %25, align 8
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %26, i64 0, i32 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 -1
  %30 = load i8, i8* %29, align 1
  %31 = or i8 %30, 25
  br label %46

32:                                               ; preds = %8
  %33 = or i8 %15, 26
  br label %46

34:                                               ; preds = %8
  %35 = or i8 %15, 27
  br label %46

36:                                               ; preds = %2
  %37 = trunc i64 %1 to i8
  %38 = and i8 %37, 31
  %39 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %40 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %39, align 8
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %40, i64 0, i32 0, i32 1
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 -1
  %44 = load i8, i8* %43, align 1
  %45 = or i8 %44, %38
  store i8 %45, i8* %43, align 1
  br label %119

46:                                               ; preds = %34, %32, %24, %16
  %47 = phi i8* [ %14, %34 ], [ %14, %32 ], [ %29, %24 ], [ %21, %16 ]
  %48 = phi i8 [ %35, %34 ], [ %33, %32 ], [ %31, %24 ], [ %23, %16 ]
  %49 = phi i32 [ 7, %34 ], [ 3, %32 ], [ 1, %24 ], [ 0, %16 ]
  store i8 %48, i8* %47, align 1
  %50 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %51 = zext i32 %49 to i64
  br label %52

52:                                               ; preds = %46, %115
  %53 = phi i64 [ %51, %46 ], [ %118, %115 ]
  %54 = phi i32 [ %49, %46 ], [ %116, %115 ]
  %55 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %50, align 8
  %56 = shl nsw i32 %54, 3
  %57 = zext i32 %56 to i64
  %58 = lshr i64 %1, %57
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %55, i64 0, i32 0, i32 1
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %55, i64 0, i32 0, i32 2, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = icmp ult i8* %61, %63
  %65 = ptrtoint i8* %63 to i64
  br i1 %64, label %66, label %70

66:                                               ; preds = %52
  store i8 %59, i8* %61, align 1
  %67 = getelementptr inbounds i8, i8* %61, i64 1
  %68 = ptrtoint i8* %67 to i64
  %69 = bitcast i8** %60 to i64*
  store i64 %68, i64* %69, align 8
  br label %115

70:                                               ; preds = %52
  %71 = ptrtoint i8* %61 to i64
  %72 = bitcast i8** %60 to i64*
  %73 = bitcast %"class.std::__1::vector"* %55 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = sub i64 %71, %74
  %76 = add i64 %75, 1
  %77 = icmp slt i64 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %70
  %79 = bitcast %"class.std::__1::vector"* %55 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %79) #12
  unreachable

80:                                               ; preds = %70
  %81 = bitcast i8** %62 to i64*
  %82 = sub i64 %65, %74
  %83 = icmp ult i64 %82, 4611686018427387903
  br i1 %83, label %84, label %89

84:                                               ; preds = %80
  %85 = shl i64 %82, 1
  %86 = icmp ult i64 %85, %76
  %87 = select i1 %86, i64 %76, i64 %85
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %84, %80
  %90 = phi i64 [ %87, %84 ], [ 9223372036854775807, %80 ]
  %91 = tail call i8* @_Znwm(i64 %90) #11
  br label %92

92:                                               ; preds = %89, %84
  %93 = phi i64 [ %90, %89 ], [ 0, %84 ]
  %94 = phi i8* [ %91, %89 ], [ null, %84 ]
  %95 = getelementptr inbounds i8, i8* %94, i64 %75
  %96 = getelementptr inbounds i8, i8* %94, i64 %93
  %97 = ptrtoint i8* %96 to i64
  store i8 %59, i8* %95, align 1
  %98 = getelementptr inbounds i8, i8* %95, i64 1
  %99 = ptrtoint i8* %98 to i64
  %100 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %55, i64 0, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = load i64, i64* %72, align 8
  %103 = ptrtoint i8* %101 to i64
  %104 = sub i64 %102, %103
  %105 = sub i64 0, %104
  %106 = getelementptr inbounds i8, i8* %95, i64 %105
  %107 = ptrtoint i8* %106 to i64
  %108 = icmp sgt i64 %104, 0
  br i1 %108, label %109, label %111

109:                                              ; preds = %92
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %101, i64 %104, i1 false) #10
  %110 = load i8*, i8** %100, align 8
  br label %111

111:                                              ; preds = %109, %92
  %112 = phi i8* [ %101, %92 ], [ %110, %109 ]
  store i64 %107, i64* %73, align 8
  store i64 %99, i64* %72, align 8
  store i64 %97, i64* %81, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %111
  tail call void @_ZdlPv(i8* nonnull %112) #11
  br label %115

115:                                              ; preds = %66, %111, %114
  %116 = add nsw i32 %54, -1
  %117 = icmp sgt i64 %53, 0
  %118 = add nsw i64 %53, -1
  br i1 %117, label %52, label %119

119:                                              ; preds = %115, %36
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4cbor6Writer24SetAdditionalInformationEh(%"class.cbor::Writer"* nocapture readonly, i8 zeroext) local_unnamed_addr #5 align 2 {
  %3 = and i8 %1, 31
  %4 = getelementptr inbounds %"class.cbor::Writer", %"class.cbor::Writer"* %0, i64 0, i32 0
  %5 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -1
  %9 = load i8, i8* %8, align 1
  %10 = or i8 %9, %3
  store i8 %10, i8* %8, align 1
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4cbor6Writer15GetNumUintBytesEm(%"class.cbor::Writer"* nocapture readnone, i64) local_unnamed_addr #0 align 2 {
  %3 = icmp ult i64 %1, 24
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 256
  br i1 %5, label %11, label %6

6:                                                ; preds = %4
  %7 = icmp ult i64 %1, 65536
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  %9 = icmp ult i64 %1, 4294967296
  %10 = select i1 %9, i64 4, i64 8
  br label %11

11:                                               ; preds = %8, %6, %4, %2
  %12 = phi i64 [ 0, %2 ], [ 1, %4 ], [ 2, %6 ], [ %10, %8 ]
  ret i64 %12
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN4cbor6Writer5WriteERKNS_5ValueERKNS0_6ConfigE: argument 0"}
!6 = distinct !{!6, !"_ZN4cbor6Writer5WriteERKNS_5ValueERKNS0_6ConfigE"}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !13}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !13}
!23 = distinct !{!23, !15}
!24 = distinct !{!24, !13}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !13}
!31 = distinct !{!31, !15}
!32 = distinct !{!32, !13}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !13}
!39 = distinct !{!39, !15}
!40 = distinct !{!40, !13}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !13}
!47 = distinct !{!47, !15}
!48 = distinct !{!48, !13}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = distinct !{!54, !13}
!55 = distinct !{!55, !15}
!56 = distinct !{!56, !13}
!57 = !{!58}
!58 = distinct !{!58, !59}
!59 = distinct !{!59, !"LVerDomain"}
!60 = !{!61}
!61 = distinct !{!61, !59}
!62 = distinct !{!62, !13}
!63 = distinct !{!63, !15}
!64 = distinct !{!64, !13}
!65 = !{!66}
!66 = distinct !{!66, !67}
!67 = distinct !{!67, !"LVerDomain"}
!68 = !{!69}
!69 = distinct !{!69, !67}
!70 = distinct !{!70, !13}
!71 = distinct !{!71, !15}
!72 = distinct !{!72, !13}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !13}
!79 = distinct !{!79, !15}
!80 = distinct !{!80, !13}
