; ModuleID = '../../net/ssl/client_cert_identity.cc'
source_filename = "../../net/ssl/client_cert_identity.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::ClientCertIdentity" = type { i32 (...)**, %class.scoped_refptr }
%class.scoped_refptr = type { %"class.net::X509Certificate"* }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr", %"class.std::__1::vector.10" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::basic_string"* }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::unique_ptr"* }
%"class.net::ClientCertIdentitySorter" = type { %"class.base::Time" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.21 }
%class.scoped_refptr.21 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.22", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.22" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.net::SSLPrivateKey" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.24", [4 x i8] }>
%"class.base::RefCountedThreadSafe.24" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.23 = type { %"class.net::SSLPrivateKey"* }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.net::ClientCertIdentity"* }

$_ZN4base8internal7InvokerINS0_9BindStateIPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS3_14default_deleteIS6_EEEENS_12OnceCallbackIFv13scoped_refptrINS5_13SSLPrivateKeyEEEEESD_EJS9_SF_EEESE_E7RunOnceEPNS0_13BindStateBaseEOSD_ = comdat any

$_ZN4base8internal9BindStateIPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS2_14default_deleteIS5_EEEENS_12OnceCallbackIFv13scoped_refptrINS4_13SSLPrivateKeyEEEEESC_EJS8_SE_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

@_ZTVN3net18ClientCertIdentityE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::ClientCertIdentity"*)* @_ZN3net18ClientCertIdentityD2Ev to i8*), i8* bitcast (void (%"class.net::ClientCertIdentity"*)* @_ZN3net18ClientCertIdentityD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN3net18ClientCertIdentityD1Ev = hidden unnamed_addr alias void (%"class.net::ClientCertIdentity"*), void (%"class.net::ClientCertIdentity"*)* @_ZN3net18ClientCertIdentityD2Ev
@_ZN3net24ClientCertIdentitySorterC1Ev = hidden unnamed_addr alias void (%"class.net::ClientCertIdentitySorter"*), void (%"class.net::ClientCertIdentitySorter"*)* @_ZN3net24ClientCertIdentitySorterC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18ClientCertIdentityC2E13scoped_refptrINS_15X509CertificateEE(%"class.net::ClientCertIdentity"* nocapture, %"class.net::X509Certificate"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.net::X509Certificate"* %1 to i64
  %4 = getelementptr inbounds %"class.net::ClientCertIdentity", %"class.net::ClientCertIdentity"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net18ClientCertIdentityE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.net::ClientCertIdentity", %"class.net::ClientCertIdentity"* %0, i64 0, i32 1
  %6 = bitcast %class.scoped_refptr* %5 to i64*
  store i64 %3, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18ClientCertIdentityD2Ev(%"class.net::ClientCertIdentity"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::ClientCertIdentity", %"class.net::ClientCertIdentity"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net18ClientCertIdentityE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::ClientCertIdentity", %"class.net::ClientCertIdentity"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %3, align 8
  %5 = icmp eq %"class.net::X509Certificate"* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  tail call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %4) #9
  %11 = bitcast %"class.net::X509Certificate"* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #10
  br label %12

12:                                               ; preds = %1, %6, %10
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3net18ClientCertIdentityD0Ev(%"class.net::ClientCertIdentity"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18ClientCertIdentity27SelfOwningAcquirePrivateKeyENSt3__110unique_ptrIS0_NS1_14default_deleteIS0_EEEEN4base12OnceCallbackIFv13scoped_refptrINS_13SSLPrivateKeyEEEEE(%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = ptrtoint %"class.net::ClientCertIdentity"* %0 to i64
  %6 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %8 = tail call i8* @_Znwm(i64 56) #10, !noalias !2
  %9 = bitcast i8* %8 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %9, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %class.scoped_refptr.23*)* @_ZN4base8internal7InvokerINS0_9BindStateIPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS3_14default_deleteIS6_EEEENS_12OnceCallbackIFv13scoped_refptrINS5_13SSLPrivateKeyEEEEESD_EJS9_SF_EEESE_E7RunOnceEPNS0_13BindStateBaseEOSD_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS2_14default_deleteIS5_EEEENS_12OnceCallbackIFv13scoped_refptrINS4_13SSLPrivateKeyEEEEESC_EJS8_SE_EE7DestroyEPKNS0_13BindStateBaseE) #9, !noalias !2
  %10 = getelementptr inbounds i8, i8* %8, i64 32
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*, %"class.net::SSLPrivateKey"*)* @_ZN3net12_GLOBAL__N_132IdentityOwningPrivateKeyCallbackENSt3__110unique_ptrINS_18ClientCertIdentityENS1_14default_deleteIS3_EEEEN4base12OnceCallbackIFv13scoped_refptrINS_13SSLPrivateKeyEEEEESB_ to i64), i64* %11, align 8, !noalias !2
  %12 = getelementptr inbounds i8, i8* %8, i64 40
  %13 = bitcast i8* %12 to i64*
  store i64 %5, i64* %13, align 8, !noalias !2
  %14 = getelementptr inbounds i8, i8* %8, i64 48
  %15 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %17 = load i64, i64* %16, align 8, !noalias !2
  %18 = bitcast i8* %14 to i64*
  store i64 %17, i64* %18, align 8, !noalias !2
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %15, align 8, !noalias !2
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %19, i64* %20, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %7, align 8
  %21 = bitcast %"class.net::ClientCertIdentity"* %0 to void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*)***
  %22 = load void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*)**, void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*)*, void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*)** %22, i64 2
  %24 = load void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*)*, void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*)** %23, align 8
  call void %24(%"class.net::ClientCertIdentity"* %0, %"class.base::OnceCallback"* nonnull %4) #9
  %25 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %25) #9
  %26 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %26) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_132IdentityOwningPrivateKeyCallbackENSt3__110unique_ptrINS_18ClientCertIdentityENS1_14default_deleteIS3_EEEEN4base12OnceCallbackIFv13scoped_refptrINS_13SSLPrivateKeyEEEEESB_(%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"* nocapture, %"class.net::SSLPrivateKey"*) #0 {
  %4 = alloca %class.scoped_refptr.23, align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = bitcast %class.scoped_refptr.23* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  %7 = getelementptr inbounds %class.scoped_refptr.23, %class.scoped_refptr.23* %4, i64 0, i32 0
  store %"class.net::SSLPrivateKey"* %2, %"class.net::SSLPrivateKey"** %7, align 8
  %8 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #9
  %9 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %11, i64* %12, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %9, align 8
  %13 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  %14 = inttoptr i64 %11 to %"class.base::internal::BindStateBase"*
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %14, i64 0, i32 1
  %16 = bitcast void ()** %15 to void (%"class.base::internal::BindStateBase"*, %class.scoped_refptr.23*)**
  %17 = load void (%"class.base::internal::BindStateBase"*, %class.scoped_refptr.23*)*, void (%"class.base::internal::BindStateBase"*, %class.scoped_refptr.23*)** %16, align 8
  call void %17(%"class.base::internal::BindStateBase"* %14, %class.scoped_refptr.23* nonnull dereferenceable(8) %4) #9
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #9
  %18 = load %"class.net::SSLPrivateKey"*, %"class.net::SSLPrivateKey"** %7, align 8
  %19 = icmp eq %"class.net::SSLPrivateKey"* %18, null
  br i1 %19, label %32, label %20

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.net::SSLPrivateKey", %"class.net::SSLPrivateKey"* %18, i64 0, i32 1
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe.24", %"class.base::RefCountedThreadSafe.24"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw sub i32* %22, i32 1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %32

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.base::RefCountedThreadSafe.24", %"class.base::RefCountedThreadSafe.24"* %21, i64 -2
  %27 = bitcast %"class.base::RefCountedThreadSafe.24"* %26 to %"class.net::SSLPrivateKey"*
  %28 = bitcast %"class.base::RefCountedThreadSafe.24"* %26 to void (%"class.net::SSLPrivateKey"*)***
  %29 = load void (%"class.net::SSLPrivateKey"*)**, void (%"class.net::SSLPrivateKey"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.net::SSLPrivateKey"*)*, void (%"class.net::SSLPrivateKey"*)** %29, i64 4
  %31 = load void (%"class.net::SSLPrivateKey"*)*, void (%"class.net::SSLPrivateKey"*)** %30, align 8
  call void %31(%"class.net::SSLPrivateKey"* nonnull %27) #9
  br label %32

32:                                               ; preds = %25, %20, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6)
  %33 = icmp eq %"class.net::ClientCertIdentity"* %0, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %32
  %35 = bitcast %"class.net::ClientCertIdentity"* %0 to void (%"class.net::ClientCertIdentity"*)***
  %36 = load void (%"class.net::ClientCertIdentity"*)**, void (%"class.net::ClientCertIdentity"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.net::ClientCertIdentity"*)*, void (%"class.net::ClientCertIdentity"*)** %36, i64 1
  %38 = load void (%"class.net::ClientCertIdentity"*)*, void (%"class.net::ClientCertIdentity"*)** %37, align 8
  call void %38(%"class.net::ClientCertIdentity"* nonnull %0) #9
  br label %39

39:                                               ; preds = %32, %34
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18ClientCertIdentity16SetIntermediatesENSt3__16vectorINS1_10unique_ptrI16crypto_buffer_stN4bssl8internal7DeleterIS4_EEEENS1_9allocatorIS9_EEEE(%"class.net::ClientCertIdentity"* nocapture, %"class.std::__1::vector.10"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.10", align 16
  %4 = getelementptr inbounds %"class.net::ClientCertIdentity", %"class.net::ClientCertIdentity"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 0, i32 0
  %6 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %5, align 8
  %7 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %6, i64 0, i32 6, i32 0, i32 0, i32 0
  %8 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %7, align 8
  %9 = icmp eq %struct.crypto_buffer_st* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %2
  %11 = tail call i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st* nonnull %8) #9
  br label %12

12:                                               ; preds = %2, %10
  %13 = bitcast %"class.std::__1::vector.10"* %1 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %3, i64 0, i32 0, i32 1
  %16 = bitcast %"class.std::__1::vector.10"* %3 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %16, align 16
  %17 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"class.std::__1::unique_ptr"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast %"class.std::__1::unique_ptr"** %20 to i64*
  store i64 %19, i64* %21, align 16
  %22 = bitcast %"class.std::__1::vector.10"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #9
  %23 = call %"class.net::X509Certificate"* @_ZN3net15X509Certificate29CreateFromBufferUnsafeOptionsENSt3__110unique_ptrI16crypto_buffer_stN4bssl8internal7DeleterIS3_EEEENS1_6vectorIS8_NS1_9allocatorIS8_EEEENS0_19UnsafeCreateOptionsE(%struct.crypto_buffer_st* %8, %"class.std::__1::vector.10"* nonnull %3, i8 1) #9
  %24 = ptrtoint %"class.net::X509Certificate"* %23 to i64
  %25 = bitcast %class.scoped_refptr* %4 to i64*
  %26 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %5, align 8
  store i64 %24, i64* %25, align 8
  %27 = icmp eq %"class.net::X509Certificate"* %26, null
  br i1 %27, label %34, label %28

28:                                               ; preds = %12
  %29 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = atomicrmw sub i32* %29, i32 1 acq_rel
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %26) #9
  %33 = bitcast %"class.net::X509Certificate"* %26 to i8*
  call void @_ZdlPv(i8* %33) #10
  br label %34

34:                                               ; preds = %12, %28, %32
  %35 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %3, i64 0, i32 0, i32 0
  %36 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %35, align 16
  %37 = icmp eq %"class.std::__1::unique_ptr"* %36, null
  br i1 %37, label %56, label %38

38:                                               ; preds = %34
  %39 = bitcast %"class.std::__1::unique_ptr"* %36 to i8*
  %40 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %15, align 8
  %41 = icmp eq %"class.std::__1::unique_ptr"* %40, %36
  br i1 %41, label %54, label %42

42:                                               ; preds = %38, %49
  %43 = phi %"class.std::__1::unique_ptr"* [ %44, %49 ], [ %40, %38 ]
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 -1
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %45, align 8
  store %struct.crypto_buffer_st* null, %struct.crypto_buffer_st** %45, align 8
  %47 = icmp eq %struct.crypto_buffer_st* %46, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %42
  call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* nonnull %46) #9
  br label %49

49:                                               ; preds = %48, %42
  %50 = icmp eq %"class.std::__1::unique_ptr"* %44, %36
  br i1 %50, label %51, label %42

51:                                               ; preds = %49
  %52 = bitcast %"class.std::__1::vector.10"* %3 to i8**
  %53 = load i8*, i8** %52, align 16
  br label %54

54:                                               ; preds = %51, %38
  %55 = phi i8* [ %53, %51 ], [ %39, %38 ]
  store %"class.std::__1::unique_ptr"* %36, %"class.std::__1::unique_ptr"** %15, align 8
  call void @_ZdlPv(i8* %55) #10
  br label %56

56:                                               ; preds = %34, %54
  ret void
}

declare %"class.net::X509Certificate"* @_ZN3net15X509Certificate29CreateFromBufferUnsafeOptionsENSt3__110unique_ptrI16crypto_buffer_stN4bssl8internal7DeleterIS3_EEEENS1_6vectorIS8_NS1_9allocatorIS8_EEEENS0_19UnsafeCreateOptionsE(%struct.crypto_buffer_st*, %"class.std::__1::vector.10"*, i8) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net24ClientCertIdentitySorterC2Ev(%"class.net::ClientCertIdentitySorter"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i64 @_ZN4base4Time3NowEv() #9
  %3 = getelementptr inbounds %"class.net::ClientCertIdentitySorter", %"class.net::ClientCertIdentitySorter"* %0, i64 0, i32 0, i32 0, i32 0
  store i64 %2, i64* %3, align 8
  ret void
}

declare i64 @_ZN4base4Time3NowEv() local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net24ClientCertIdentitySorterclERKNSt3__110unique_ptrINS_18ClientCertIdentityENS1_14default_deleteIS3_EEEES8_(%"class.net::ClientCertIdentitySorter"* nocapture readonly, %"class.std::__1::unique_ptr.17"* nocapture readonly dereferenceable(8), %"class.std::__1::unique_ptr.17"* nocapture readonly dereferenceable(8)) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr.17", %"class.std::__1::unique_ptr.17"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.net::ClientCertIdentity"*, %"class.net::ClientCertIdentity"** %4, align 8
  %6 = getelementptr inbounds %"class.net::ClientCertIdentity", %"class.net::ClientCertIdentity"* %5, i64 0, i32 1, i32 0
  %7 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::unique_ptr.17", %"class.std::__1::unique_ptr.17"* %2, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.net::ClientCertIdentity"*, %"class.net::ClientCertIdentity"** %8, align 8
  %10 = getelementptr inbounds %"class.net::ClientCertIdentity", %"class.net::ClientCertIdentity"* %9, i64 0, i32 1, i32 0
  %11 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %10, align 8
  %12 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %7, i64 0, i32 3, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.net::ClientCertIdentitySorter", %"class.net::ClientCertIdentitySorter"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp slt i64 %15, %13
  br i1 %16, label %21, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %7, i64 0, i32 4, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = icmp sle i64 %15, %19
  br label %21

21:                                               ; preds = %3, %17
  %22 = phi i1 [ false, %3 ], [ %20, %17 ]
  %23 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %11, i64 0, i32 3, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = icmp slt i64 %15, %24
  br i1 %25, label %26, label %30

26:                                               ; preds = %21
  br i1 %22, label %35, label %27

27:                                               ; preds = %26
  %28 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %11, i64 0, i32 4, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  br label %39

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %11, i64 0, i32 4, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = icmp sle i64 %15, %32
  %34 = xor i1 %22, %33
  br i1 %34, label %35, label %39

35:                                               ; preds = %26, %30
  %36 = phi i1 [ false, %26 ], [ %33, %30 ]
  %37 = xor i1 %36, true
  %38 = and i1 %22, %37
  br label %66

39:                                               ; preds = %27, %30
  %40 = phi i64 [ %29, %27 ], [ %32, %30 ]
  %41 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %7, i64 0, i32 4, i32 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, %40
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  %45 = icmp sgt i64 %42, %40
  br label %66

46:                                               ; preds = %39
  %47 = icmp eq i64 %13, %24
  br i1 %47, label %50, label %48

48:                                               ; preds = %46
  %49 = icmp sgt i64 %13, %24
  br label %66

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %7, i64 0, i32 7
  %52 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %11, i64 0, i32 7
  %53 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %7, i64 0, i32 7, i32 0, i32 1
  %54 = bitcast %"class.std::__1::unique_ptr"** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"class.std::__1::vector.10"* %51 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = sub i64 %55, %57
  %59 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %11, i64 0, i32 7, i32 0, i32 1
  %60 = bitcast %"class.std::__1::unique_ptr"** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"class.std::__1::vector.10"* %52 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %61, %63
  %65 = icmp ult i64 %58, %64
  br label %66

66:                                               ; preds = %50, %48, %44, %35
  %67 = phi i1 [ %38, %35 ], [ %45, %44 ], [ %49, %48 ], [ %65, %50 ]
  ret i1 %67
}

declare void @__cxa_pure_virtual() unnamed_addr

declare i32 @CRYPTO_BUFFER_up_ref(%struct.crypto_buffer_st*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS3_14default_deleteIS6_EEEENS_12OnceCallbackIFv13scoped_refptrINS5_13SSLPrivateKeyEEEEESD_EJS9_SF_EEESE_E7RunOnceEPNS0_13BindStateBaseEOSD_(%"class.base::internal::BindStateBase"*, %class.scoped_refptr.23* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %5 = bitcast %"class.base::internal::BindStateBase"* %4 to void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*, %"class.net::SSLPrivateKey"*)**
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %7 = getelementptr inbounds void ()*, void ()** %6, i64 1
  %8 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #9
  %9 = load void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*, %"class.net::SSLPrivateKey"*)*, void (%"class.net::ClientCertIdentity"*, %"class.base::OnceCallback"*, %"class.net::SSLPrivateKey"*)** %5, align 8
  %10 = bitcast void ()** %6 to %"class.net::ClientCertIdentity"**
  %11 = load %"class.net::ClientCertIdentity"*, %"class.net::ClientCertIdentity"** %10, align 8
  store %"class.net::ClientCertIdentity"* null, %"class.net::ClientCertIdentity"** %10, align 8
  %12 = bitcast void ()** %7 to %"class.base::internal::BindStateBase"**
  %13 = bitcast void ()** %7 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %14, i64* %15, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %12, align 8
  %16 = getelementptr inbounds %class.scoped_refptr.23, %class.scoped_refptr.23* %1, i64 0, i32 0
  %17 = load %"class.net::SSLPrivateKey"*, %"class.net::SSLPrivateKey"** %16, align 8
  store %"class.net::SSLPrivateKey"* null, %"class.net::SSLPrivateKey"** %16, align 8
  call void %9(%"class.net::ClientCertIdentity"* %11, %"class.base::OnceCallback"* nonnull %3, %"class.net::SSLPrivateKey"* %17) #9
  %18 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #9
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS2_14default_deleteIS5_EEEENS_12OnceCallbackIFv13scoped_refptrINS4_13SSLPrivateKeyEEEEESC_EJS8_SE_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %17, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to %"class.base::internal::CallbackBase"*
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %5) #9
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %7 = bitcast void ()** %6 to %"class.net::ClientCertIdentity"**
  %8 = load %"class.net::ClientCertIdentity"*, %"class.net::ClientCertIdentity"** %7, align 8
  store %"class.net::ClientCertIdentity"* null, %"class.net::ClientCertIdentity"** %7, align 8
  %9 = icmp eq %"class.net::ClientCertIdentity"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %3
  %11 = bitcast %"class.net::ClientCertIdentity"* %8 to void (%"class.net::ClientCertIdentity"*)***
  %12 = load void (%"class.net::ClientCertIdentity"*)**, void (%"class.net::ClientCertIdentity"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.net::ClientCertIdentity"*)*, void (%"class.net::ClientCertIdentity"*)** %12, i64 1
  %14 = load void (%"class.net::ClientCertIdentity"*)*, void (%"class.net::ClientCertIdentity"*)** %13, align 8
  tail call void %14(%"class.net::ClientCertIdentity"* nonnull %8) #9
  br label %15

15:                                               ; preds = %3, %10
  %16 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %15, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #5

declare void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS3_14default_deleteIS6_EEEENS2_IFv13scoped_refptrINS5_13SSLPrivateKeyEEEEESC_EJS9_SE_EEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS3_14default_deleteIS6_EEEENS2_IFv13scoped_refptrINS5_13SSLPrivateKeyEEEEESC_EJS9_SE_EEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base8BindOnceIPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS1_14default_deleteIS4_EEEENS_12OnceCallbackIFv13scoped_refptrINS3_13SSLPrivateKeyEEEEESB_EJS7_SD_EEENS8_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSI_DpOSJ_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8BindOnceIPFvNSt3__110unique_ptrIN3net18ClientCertIdentityENS1_14default_deleteIS4_EEEENS_12OnceCallbackIFv13scoped_refptrINS3_13SSLPrivateKeyEEEEESB_EJS7_SD_EEENS8_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSI_DpOSJ_"}
