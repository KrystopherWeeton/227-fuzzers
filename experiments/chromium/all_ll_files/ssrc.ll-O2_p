; ModuleID = '../../third_party/openscreen/src/cast/streaming/ssrc.cc'
source_filename = "../../third_party/openscreen/src/cast/streaming/ssrc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::linear_congruential_engine" = type { i64 }
%"class.std::__1::uniform_int_distribution" = type { %"class.std::__1::uniform_int_distribution<int>::param_type" }
%"class.std::__1::uniform_int_distribution<int>::param_type" = type { i32, i32 }

$_ZNSt3__124uniform_int_distributionIiEclINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEEiRT_RKNS1_10param_typeE = comdat any

@_ZZN10openscreen4cast12GenerateSsrcEbE9generator = internal global %"class.std::__1::linear_congruential_engine" zeroinitializer, align 8
@_ZGVZN10openscreen4cast12GenerateSsrcEbE9generator = internal global i64 0, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN10openscreen4cast12GenerateSsrcEb(i1 zeroext) local_unnamed_addr #0 {
  %2 = alloca %"class.std::__1::uniform_int_distribution", align 4
  %3 = load atomic i8, i8* bitcast (i64* @_ZGVZN10openscreen4cast12GenerateSsrcEbE9generator to i8*) acquire, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %13, !prof !2

5:                                                ; preds = %1
  %6 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN10openscreen4cast12GenerateSsrcEbE9generator) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %5
  %9 = tail call i64 @_ZN10openscreen5Clock3nowEv() #6
  %10 = urem i64 %9, 2147483647
  %11 = icmp eq i64 %10, 0
  %12 = select i1 %11, i64 1, i64 %10
  store i64 %12, i64* getelementptr inbounds (%"class.std::__1::linear_congruential_engine", %"class.std::__1::linear_congruential_engine"* @_ZZN10openscreen4cast12GenerateSsrcEbE9generator, i64 0, i32 0), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN10openscreen4cast12GenerateSsrcEbE9generator) #6
  br label %13

13:                                               ; preds = %5, %8, %1
  %14 = bitcast %"class.std::__1::uniform_int_distribution"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #6
  %15 = getelementptr inbounds %"class.std::__1::uniform_int_distribution", %"class.std::__1::uniform_int_distribution"* %2, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::uniform_int_distribution", %"class.std::__1::uniform_int_distribution"* %2, i64 0, i32 0, i32 1
  %17 = select i1 %0, i32 1, i32 50001
  %18 = select i1 %0, i32 50000, i32 100000
  store i32 %17, i32* %15, align 4
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds %"class.std::__1::uniform_int_distribution", %"class.std::__1::uniform_int_distribution"* %2, i64 0, i32 0
  %20 = call i32 @_ZNSt3__124uniform_int_distributionIiEclINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEEiRT_RKNS1_10param_typeE(%"class.std::__1::uniform_int_distribution"* nonnull %2, %"class.std::__1::linear_congruential_engine"* nonnull dereferenceable(8) @_ZZN10openscreen4cast12GenerateSsrcEbE9generator, %"class.std::__1::uniform_int_distribution<int>::param_type"* nonnull dereferenceable(8) %19) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #6
  ret i32 %20
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare i64 @_ZN10openscreen5Clock3nowEv() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN10openscreen4cast15ComparePriorityEjj(i32, i32) local_unnamed_addr #4 {
  %3 = sub nsw i32 %0, %1
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__124uniform_int_distributionIiEclINS_26linear_congruential_engineImLm48271ELm0ELm2147483647EEEEEiRT_RKNS1_10param_typeE(%"class.std::__1::uniform_int_distribution"*, %"class.std::__1::linear_congruential_engine"* dereferenceable(8), %"class.std::__1::uniform_int_distribution<int>::param_type"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::uniform_int_distribution<int>::param_type", %"class.std::__1::uniform_int_distribution<int>::param_type"* %2, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.std::__1::uniform_int_distribution<int>::param_type", %"class.std::__1::uniform_int_distribution<int>::param_type"* %2, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = sub i32 %5, %7
  %9 = add i32 %8, 1
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %147, label %11

11:                                               ; preds = %3
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %13, label %24

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.std::__1::linear_congruential_engine", %"class.std::__1::linear_congruential_engine"* %1, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  br label %16

16:                                               ; preds = %16, %13
  %17 = phi i64 [ %19, %16 ], [ %15, %13 ]
  %18 = mul i64 %17, 48271
  %19 = urem i64 %18, 2147483647
  %20 = add nsw i64 %19, -1
  %21 = icmp ult i64 %20, 2147418112
  br i1 %21, label %22, label %16

22:                                               ; preds = %16
  %23 = trunc i64 %20 to i32
  br label %149

24:                                               ; preds = %11
  %25 = tail call i32 @llvm.ctlz.i32(i32 %9, i1 true) #6, !range !3
  %26 = zext i32 %25 to i64
  %27 = lshr i32 2147483647, %25
  %28 = and i32 %27, %9
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i64 31, i64 32
  %31 = sub nsw i64 %30, %26
  %32 = udiv i64 %31, 30
  %33 = urem i64 %31, 30
  %34 = icmp ne i64 %33, 0
  %35 = zext i1 %34 to i64
  %36 = add nuw nsw i64 %32, %35
  %37 = udiv i64 %31, %36
  %38 = icmp ult i64 %37, 64
  %39 = shl i64 -1, %37
  %40 = and i64 %39, 2147483646
  %41 = select i1 %38, i64 %40, i64 0
  %42 = sub nuw nsw i64 2147483646, %41
  %43 = udiv i64 %41, %36
  %44 = icmp ugt i64 %42, %43
  br i1 %44, label %45, label %55

45:                                               ; preds = %24
  %46 = add nuw nsw i64 %36, 1
  %47 = udiv i64 %31, %46
  %48 = urem i64 %31, %46
  %49 = icmp ult i64 %47, 64
  br i1 %49, label %50, label %53

50:                                               ; preds = %45
  %51 = shl i64 -1, %47
  %52 = and i64 %51, 2147483646
  br label %55

53:                                               ; preds = %45
  %54 = sub nsw i64 %46, %48
  br label %62

55:                                               ; preds = %50, %24
  %56 = phi i64 [ %47, %50 ], [ %37, %24 ]
  %57 = phi i64 [ %46, %50 ], [ %36, %24 ]
  %58 = phi i64 [ %52, %50 ], [ %41, %24 ]
  %59 = urem i64 %31, %57
  %60 = sub nsw i64 %57, %59
  %61 = icmp ult i64 %56, 63
  br i1 %61, label %71, label %62

62:                                               ; preds = %55, %53
  %63 = phi i64 [ %47, %53 ], [ %56, %55 ]
  %64 = phi i64 [ %46, %53 ], [ %57, %55 ]
  %65 = phi i64 [ %54, %53 ], [ %60, %55 ]
  %66 = phi i64 [ 0, %53 ], [ %58, %55 ]
  %67 = icmp eq i64 %63, 0
  %68 = sub i64 64, %63
  %69 = lshr i64 -1, %68
  %70 = select i1 %67, i64 0, i64 %69
  br label %81

71:                                               ; preds = %55
  %72 = add nuw nsw i64 %56, 1
  %73 = shl i64 -1, %72
  %74 = and i64 %73, 2147483646
  %75 = icmp eq i64 %56, 0
  %76 = sub nuw nsw i64 64, %56
  %77 = lshr i64 -1, %76
  %78 = select i1 %75, i64 0, i64 %77
  %79 = sub nuw nsw i64 63, %56
  %80 = lshr i64 -1, %79
  br label %81

81:                                               ; preds = %62, %71
  %82 = phi i64 [ %78, %71 ], [ %70, %62 ]
  %83 = phi i64 [ %74, %71 ], [ 0, %62 ]
  %84 = phi i64 [ %58, %71 ], [ %66, %62 ]
  %85 = phi i64 [ %60, %71 ], [ %65, %62 ]
  %86 = phi i64 [ %57, %71 ], [ %64, %62 ]
  %87 = phi i64 [ %56, %71 ], [ %63, %62 ]
  %88 = phi i64 [ %80, %71 ], [ -1, %62 ]
  %89 = icmp eq i64 %85, 0
  %90 = icmp ult i64 %87, 32
  %91 = trunc i64 %87 to i32
  %92 = getelementptr inbounds %"class.std::__1::linear_congruential_engine", %"class.std::__1::linear_congruential_engine"* %1, i64 0, i32 0
  %93 = icmp ult i64 %85, %86
  %94 = icmp ult i64 %87, 31
  %95 = add i32 %91, 1
  br label %96

96:                                               ; preds = %141, %81
  br i1 %89, label %104, label %97

97:                                               ; preds = %96
  %98 = load i64, i64* %92, align 8
  br label %99

99:                                               ; preds = %114, %97
  %100 = phi i64 [ %111, %114 ], [ %98, %97 ]
  %101 = phi i64 [ %120, %114 ], [ 0, %97 ]
  %102 = phi i32 [ %119, %114 ], [ 0, %97 ]
  br label %108

103:                                              ; preds = %114
  store i64 %111, i64* %92, align 8
  br label %104

104:                                              ; preds = %103, %96
  %105 = phi i32 [ 0, %96 ], [ %119, %103 ]
  br i1 %93, label %106, label %141

106:                                              ; preds = %104
  %107 = load i64, i64* %92, align 8
  br label %122

108:                                              ; preds = %108, %99
  %109 = phi i64 [ %111, %108 ], [ %100, %99 ]
  %110 = mul i64 %109, 48271
  %111 = urem i64 %110, 2147483647
  %112 = add nsw i64 %111, -1
  %113 = icmp ult i64 %112, %84
  br i1 %113, label %114, label %108

114:                                              ; preds = %108
  %115 = shl i32 %102, %91
  %116 = select i1 %90, i32 %115, i32 0
  %117 = and i64 %112, %82
  %118 = trunc i64 %117 to i32
  %119 = add i32 %116, %118
  %120 = add nuw i64 %101, 1
  %121 = icmp eq i64 %120, %85
  br i1 %121, label %103, label %99

122:                                              ; preds = %132, %106
  %123 = phi i64 [ %129, %132 ], [ %107, %106 ]
  %124 = phi i64 [ %138, %132 ], [ %85, %106 ]
  %125 = phi i32 [ %137, %132 ], [ %105, %106 ]
  br label %126

126:                                              ; preds = %126, %122
  %127 = phi i64 [ %129, %126 ], [ %123, %122 ]
  %128 = mul i64 %127, 48271
  %129 = urem i64 %128, 2147483647
  %130 = add nsw i64 %129, -1
  %131 = icmp ult i64 %130, %83
  br i1 %131, label %132, label %126

132:                                              ; preds = %126
  %133 = shl i32 %125, %95
  %134 = select i1 %94, i32 %133, i32 0
  %135 = and i64 %130, %88
  %136 = trunc i64 %135 to i32
  %137 = add i32 %134, %136
  %138 = add nuw nsw i64 %124, 1
  %139 = icmp eq i64 %138, %86
  br i1 %139, label %140, label %122

140:                                              ; preds = %132
  store i64 %129, i64* %92, align 8
  br label %141

141:                                              ; preds = %140, %104
  %142 = phi i32 [ %105, %104 ], [ %137, %140 ]
  %143 = icmp ult i32 %142, %9
  br i1 %143, label %144, label %96

144:                                              ; preds = %141
  %145 = load i32, i32* %6, align 4
  %146 = add i32 %145, %142
  br label %147

147:                                              ; preds = %155, %3, %144
  %148 = phi i32 [ %146, %144 ], [ %7, %3 ], [ %159, %155 ]
  ret i32 %148

149:                                              ; preds = %149, %22
  %150 = phi i64 [ %152, %149 ], [ %19, %22 ]
  %151 = mul nuw nsw i64 %150, 48271
  %152 = urem i64 %151, 2147483647
  %153 = add nsw i64 %152, -1
  %154 = icmp ult i64 %153, 2147418112
  br i1 %154, label %155, label %149

155:                                              ; preds = %149
  %156 = shl i32 %23, 16
  %157 = trunc i64 %153 to i32
  %158 = and i32 %157, 65535
  %159 = or i32 %158, %156
  store i64 %152, i64* %14, align 8
  br label %147
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{i32 0, i32 33}
