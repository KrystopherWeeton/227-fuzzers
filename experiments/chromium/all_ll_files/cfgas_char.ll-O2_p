; ModuleID = '../../third_party/pdfium/xfa/fgas/layout/cfgas_char.cpp'
source_filename = "../../third_party/pdfium/xfa/fgas/layout/cfgas_char.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFGAS_Char = type <{ i8, i8, i8, i8, i32, i32, i16, i16, i16, [2 x i8], i32, i32, [4 x i8], %"class.fxcrt::RetainPtr", i16, [2 x i8], i32, i32, [4 x i8] }>
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFGAS_TextUserData* }
%class.CFGAS_TextUserData = type { %"class.fxcrt::Retainable", %"class.fxcrt::RetainPtr.0", %"class.fxcrt::RetainPtr.5" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CFX_CSSComputedStyle* }
%class.CFX_CSSComputedStyle = type opaque
%"class.fxcrt::RetainPtr.5" = type { %"class.std::__1::unique_ptr.6" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %class.CFGAS_LinkUserData* }
%class.CFGAS_LinkUserData = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.CFGAS_Char*, %class.CFGAS_Char*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %class.CFGAS_Char* }

$_ZNSt3__17reverseINS_11__wrap_iterIP10CFGAS_CharEEEEvT_S5_ = comdat any

@_ZN12_GLOBAL__N_17kNTypesE = internal unnamed_addr constant [20 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0A\00\0D\0E\0F\10\11\12\00", align 16
@_ZN12_GLOBAL__N_112kWeakActionsE = internal unnamed_addr constant [20 x [10 x i16]] [[10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 243, i16 242, i16 242, i16 240, i16 240, i16 240], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 244, i16 242, i16 242, i16 240, i16 240, i16 511], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 241, i16 242, i16 241, i16 240, i16 240, i16 511], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 243, i16 242, i16 240, i16 240, i16 240, i16 240], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 244, i16 242, i16 240, i16 240, i16 240, i16 511], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 241, i16 242, i16 240, i16 240, i16 240, i16 511], [10 x i16] [i16 15, i16 15, i16 15, i16 15, i16 68, i16 2, i16 511, i16 0, i16 0, i16 511], [10 x i16] [i16 15, i16 15, i16 15, i16 15, i16 17, i16 2, i16 511, i16 0, i16 0, i16 511], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 243, i16 242, i16 243, i16 511, i16 240, i16 240], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 244, i16 242, i16 243, i16 511, i16 240, i16 511], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 244, i16 242, i16 244, i16 511, i16 511, i16 244], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 241, i16 242, i16 243, i16 511, i16 240, i16 511], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 241, i16 242, i16 241, i16 511, i16 511, i16 241], [10 x i16] [i16 15, i16 15, i16 15, i16 63, i16 51, i16 2, i16 0, i16 0, i16 0, i16 0], [10 x i16] [i16 15, i16 15, i16 15, i16 63, i16 4, i16 2, i16 0, i16 0, i16 0, i16 271], [10 x i16] [i16 15, i16 15, i16 15, i16 15, i16 68, i16 2, i16 0, i16 0, i16 0, i16 271], [10 x i16] [i16 15, i16 15, i16 15, i16 63, i16 1, i16 2, i16 0, i16 0, i16 0, i16 271], [10 x i16] [i16 15, i16 15, i16 15, i16 15, i16 17, i16 2, i16 0, i16 0, i16 0, i16 271], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 244, i16 242, i16 244, i16 240, i16 240, i16 244], [10 x i16] [i16 255, i16 255, i16 255, i16 255, i16 241, i16 242, i16 241, i16 240, i16 240, i16 241]], align 16
@_ZN12_GLOBAL__N_111kWeakStatesE = internal unnamed_addr constant [20 x [10 x i8]] [[10 x i8] c"\03\02\01\08\08\00\00\03\03\03", [10 x i8] c"\04\02\01\09\0A\00\01\04\04\06", [10 x i8] c"\05\02\01\0B\0C\00\02\05\05\07", [10 x i8] c"\03\02\01\08\08\00\03\03\03\03", [10 x i8] c"\04\02\01\09\0A\00\04\04\04\06", [10 x i8] c"\05\02\01\0B\0C\00\05\05\05\07", [10 x i8] c"\04\02\01\09\0A\00\06\04\04\06", [10 x i8] c"\05\02\01\0B\0C\00\07\05\05\07", [10 x i8] c"\03\02\01\08\08\00\08\0D\03\03", [10 x i8] c"\04\02\01\09\0A\00\09\0E\04\06", [10 x i8] c"\04\02\01\09\0A\00\0A\0F\0F\12", [10 x i8] c"\05\02\01\0B\0C\00\0B\10\05\07", [10 x i8] c"\05\02\01\0B\0C\00\0C\11\11\13", [10 x i8] c"\03\02\01\08\08\00\03\03\03\03", [10 x i8] c"\04\02\01\09\0A\00\04\04\04\06", [10 x i8] c"\04\02\01\09\0A\00\04\04\04\06", [10 x i8] c"\05\02\01\0B\0C\00\05\05\05\07", [10 x i8] c"\05\02\01\0B\0C\00\05\05\05\07", [10 x i8] c"\04\02\01\09\0A\00\12\04\04\12", [10 x i8] c"\05\02\01\0B\0C\00\13\05\05\13"], align 16
@_ZN12_GLOBAL__N_115kNeutralActionsE = internal unnamed_addr constant [6 x [5 x i16]] [[5 x i16] [i16 256, i16 0, i16 0, i16 0, i16 0], [5 x i16] [i16 256, i16 0, i16 0, i16 0, i16 1], [5 x i16] [i16 256, i16 48, i16 32, i16 32, i16 32], [5 x i16] [i16 256, i16 16, i16 48, i16 48, i16 17], [5 x i16] [i16 256, i16 0, i16 0, i16 0, i16 1], [5 x i16] [i16 256, i16 48, i16 32, i16 32, i16 48]], align 16
@_ZN12_GLOBAL__N_114kNeutralStatesE = internal unnamed_addr constant [6 x [5 x i8]] [[5 x i8] c"\02\01\00\00\00", [5 x i8] c"\03\01\00\04\01", [5 x i8] c"\02\01\00\00\00", [5 x i8] c"\03\01\00\04\01", [5 x i8] c"\05\01\00\04\01", [5 x i8] c"\05\01\00\04\01"], align 16
@_ZN12_GLOBAL__N_19kAddLevelE = internal unnamed_addr constant [2 x [4 x i8]] [[4 x i8] c"\00\01\02\02", [4 x i8] c"\01\00\01\01"], align 1

@_ZN10CFGAS_CharC1Et = hidden unnamed_addr alias void (%class.CFGAS_Char*, i16), void (%class.CFGAS_Char*, i16)* @_ZN10CFGAS_CharC2Et
@_ZN10CFGAS_CharC1Etii = hidden unnamed_addr alias void (%class.CFGAS_Char*, i16, i32, i32), void (%class.CFGAS_Char*, i16, i32, i32)* @_ZN10CFGAS_CharC2Etii
@_ZN10CFGAS_CharC1ERKS_ = hidden unnamed_addr alias void (%class.CFGAS_Char*, %class.CFGAS_Char*), void (%class.CFGAS_Char*, %class.CFGAS_Char*)* @_ZN10CFGAS_CharC2ERKS_
@_ZN10CFGAS_CharD1Ev = hidden unnamed_addr alias void (%class.CFGAS_Char*), void (%class.CFGAS_Char*)* @_ZN10CFGAS_CharD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10CFGAS_Char8BidiLineEPNSt3__16vectorIS_NS0_9allocatorIS_EEEEm(%"class.std::__1::vector"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = icmp ult i64 %1, 2
  br i1 %3, label %532, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  br label %6

6:                                                ; preds = %6, %4
  %7 = phi i64 [ 0, %4 ], [ %17, %6 ]
  %8 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %9 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %8, i64 %7, i32 14
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = tail call zeroext i8 @_Z15FX_GetBidiClassw(i32 signext %11) #5
  %13 = zext i8 %12 to i64
  %14 = getelementptr inbounds [20 x i8], [20 x i8]* @_ZN12_GLOBAL__N_17kNTypesE, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %8, i64 %7, i32 1
  store i8 %15, i8* %16, align 1
  %17 = add nuw i64 %7, 1
  %18 = icmp eq i64 %17, %1
  br i1 %18, label %19, label %6

19:                                               ; preds = %6
  %20 = add i64 %1, -1
  %21 = and i64 %1, 3
  %22 = icmp ult i64 %20, 3
  br i1 %22, label %42, label %23

23:                                               ; preds = %19
  %24 = sub i64 %1, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %39, %25 ]
  %27 = phi i64 [ %24, %23 ], [ %40, %25 ]
  %28 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %29 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %28, i64 %26, i32 6
  store i16 0, i16* %29, align 4
  %30 = or i64 %26, 1
  %31 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %32 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %31, i64 %30, i32 6
  store i16 0, i16* %32, align 4
  %33 = or i64 %26, 2
  %34 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %35 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %34, i64 %33, i32 6
  store i16 0, i16* %35, align 4
  %36 = or i64 %26, 3
  %37 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %38 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %37, i64 %36, i32 6
  store i16 0, i16* %38, align 4
  %39 = add nuw i64 %26, 4
  %40 = add i64 %27, -4
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %25

42:                                               ; preds = %25, %19
  %43 = phi i64 [ 0, %19 ], [ %39, %25 ]
  %44 = icmp eq i64 %21, 0
  br i1 %44, label %53, label %45

45:                                               ; preds = %42, %45
  %46 = phi i64 [ %50, %45 ], [ %43, %42 ]
  %47 = phi i64 [ %51, %45 ], [ %21, %42 ]
  %48 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %49 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %48, i64 %46, i32 6
  store i16 0, i16* %49, align 4
  %50 = add nuw i64 %46, 1
  %51 = add i64 %47, -1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %45, !llvm.loop !2

53:                                               ; preds = %45, %42
  %54 = add i64 %1, -1
  br label %55

55:                                               ; preds = %166, %53
  %56 = phi i64 [ 0, %53 ], [ %169, %166 ]
  %57 = phi i64 [ 0, %53 ], [ %170, %166 ]
  %58 = phi i8 [ 2, %53 ], [ %168, %166 ]
  %59 = phi i32 [ 0, %53 ], [ %167, %166 ]
  %60 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %61 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %60, i64 %57, i32 1
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 10
  br i1 %63, label %64, label %102

64:                                               ; preds = %55
  %65 = trunc i32 %59 to i16
  %66 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %60, i64 %57, i32 6
  store i16 %65, i16* %66, align 4
  %67 = icmp eq i64 %57, %54
  %68 = icmp ne i32 %59, 0
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %74

70:                                               ; preds = %64
  %71 = and i32 %59, 1
  %72 = icmp eq i32 %71, 0
  %73 = select i1 %72, i8 1, i8 2
  br label %104

74:                                               ; preds = %64
  %75 = icmp ult i64 %57, %54
  br i1 %75, label %76, label %98

76:                                               ; preds = %74
  %77 = add nuw i64 %57, 1
  %78 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %79 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %78, i64 %77, i32 1
  %80 = load i8, i8* %79, align 1
  %81 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %78, i64 %77, i32 6
  %82 = load i16, i16* %81, align 4
  %83 = zext i16 %82 to i32
  %84 = icmp eq i8 %80, 10
  %85 = icmp eq i32 %59, %83
  %86 = or i1 %84, %85
  br i1 %86, label %94, label %87

87:                                               ; preds = %76
  %88 = icmp sgt i32 %59, %83
  %89 = select i1 %88, i32 %59, i32 %83
  %90 = trunc i32 %89 to i16
  store i16 %90, i16* %66, align 4
  %91 = and i32 %89, 1
  %92 = icmp eq i32 %91, 0
  %93 = select i1 %92, i8 1, i8 2
  br label %104

94:                                               ; preds = %76
  %95 = icmp eq i64 %56, 0
  %96 = add i64 %56, 1
  %97 = select i1 %95, i64 0, i64 %96
  br label %166

98:                                               ; preds = %74
  %99 = icmp eq i64 %56, 0
  %100 = add i64 %56, 1
  %101 = select i1 %99, i64 0, i64 %100
  br label %166

102:                                              ; preds = %55
  %103 = icmp ugt i8 %62, 10
  br i1 %103, label %166, label %107

104:                                              ; preds = %70, %87
  %105 = phi i8 [ %93, %87 ], [ %73, %70 ]
  %106 = phi i32 [ %83, %87 ], [ %59, %70 ]
  store i8 %105, i8* %61, align 1
  br label %107

107:                                              ; preds = %104, %102
  %108 = phi i8 [ %62, %102 ], [ %105, %104 ]
  %109 = phi i32 [ %59, %102 ], [ %106, %104 ]
  %110 = zext i8 %58 to i64
  %111 = zext i8 %108 to i64
  %112 = getelementptr inbounds [20 x [10 x i16]], [20 x [10 x i16]]* @_ZN12_GLOBAL__N_112kWeakActionsE, i64 0, i64 %110, i64 %111
  %113 = load i16, i16* %112, align 2
  %114 = lshr i16 %113, 4
  %115 = trunc i16 %114 to i8
  %116 = and i8 %115, 15
  %117 = icmp ne i8 %116, 15
  %118 = icmp ne i64 %56, 0
  %119 = and i1 %118, %117
  br i1 %119, label %120, label %153

120:                                              ; preds = %107
  %121 = sub i64 %57, %56
  %122 = icmp ult i64 %121, %57
  br i1 %122, label %123, label %153

123:                                              ; preds = %120
  %124 = add i64 %56, -1
  %125 = and i64 %56, 3
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %135, label %127

127:                                              ; preds = %123, %127
  %128 = phi i64 [ %130, %127 ], [ %57, %123 ]
  %129 = phi i64 [ %133, %127 ], [ %125, %123 ]
  %130 = add i64 %128, -1
  %131 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %132 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %131, i64 %130, i32 1
  store i8 %116, i8* %132, align 1
  %133 = add i64 %129, -1
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %127, !llvm.loop !4

135:                                              ; preds = %127, %123
  %136 = phi i64 [ %57, %123 ], [ %130, %127 ]
  %137 = icmp ult i64 %124, 3
  br i1 %137, label %153, label %138

138:                                              ; preds = %135, %138
  %139 = phi i64 [ %149, %138 ], [ %136, %135 ]
  %140 = add i64 %139, -1
  %141 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %142 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %141, i64 %140, i32 1
  store i8 %116, i8* %142, align 1
  %143 = add i64 %139, -2
  %144 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %145 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %144, i64 %143, i32 1
  store i8 %116, i8* %145, align 1
  %146 = add i64 %139, -3
  %147 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %148 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %147, i64 %146, i32 1
  store i8 %116, i8* %148, align 1
  %149 = add i64 %139, -4
  %150 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %151 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %150, i64 %149, i32 1
  store i8 %116, i8* %151, align 1
  %152 = icmp ugt i64 %149, %121
  br i1 %152, label %138, label %153

153:                                              ; preds = %135, %138, %120, %107
  %154 = phi i64 [ %56, %107 ], [ 0, %120 ], [ 0, %138 ], [ 0, %135 ]
  %155 = trunc i16 %113 to i8
  %156 = and i8 %155, 15
  %157 = icmp eq i8 %156, 15
  br i1 %157, label %159, label %158

158:                                              ; preds = %153
  store i8 %156, i8* %61, align 1
  br label %159

159:                                              ; preds = %158, %153
  %160 = lshr i16 %113, 8
  %161 = and i16 %160, 1
  %162 = zext i16 %161 to i64
  %163 = add i64 %154, %162
  %164 = getelementptr inbounds [20 x [10 x i8]], [20 x [10 x i8]]* @_ZN12_GLOBAL__N_111kWeakStatesE, i64 0, i64 %110, i64 %111
  %165 = load i8, i8* %164, align 1
  br label %166

166:                                              ; preds = %159, %102, %98, %94
  %167 = phi i32 [ %59, %102 ], [ %109, %159 ], [ %59, %94 ], [ %59, %98 ]
  %168 = phi i8 [ %58, %102 ], [ %165, %159 ], [ %58, %94 ], [ %58, %98 ]
  %169 = phi i64 [ %56, %102 ], [ %163, %159 ], [ %97, %94 ], [ %101, %98 ]
  %170 = add i64 %57, 1
  %171 = icmp ugt i64 %170, %54
  br i1 %171, label %172, label %55

172:                                              ; preds = %166
  %173 = icmp eq i64 %169, 0
  br i1 %173, label %215, label %174

174:                                              ; preds = %172
  %175 = zext i8 %168 to i64
  %176 = getelementptr inbounds [20 x [10 x i16]], [20 x [10 x i16]]* @_ZN12_GLOBAL__N_112kWeakActionsE, i64 0, i64 %175, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = lshr i16 %177, 4
  %179 = trunc i16 %178 to i8
  %180 = and i8 %179, 15
  %181 = icmp eq i8 %180, 15
  br i1 %181, label %215, label %182

182:                                              ; preds = %174
  %183 = sub i64 %170, %169
  %184 = icmp ult i64 %183, %170
  br i1 %184, label %185, label %215

185:                                              ; preds = %182
  %186 = add i64 %169, -1
  %187 = and i64 %169, 3
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %197, label %189

189:                                              ; preds = %185, %189
  %190 = phi i64 [ %192, %189 ], [ %170, %185 ]
  %191 = phi i64 [ %195, %189 ], [ %187, %185 ]
  %192 = add i64 %190, -1
  %193 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %194 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %193, i64 %192, i32 1
  store i8 %180, i8* %194, align 1
  %195 = add i64 %191, -1
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %189, !llvm.loop !5

197:                                              ; preds = %189, %185
  %198 = phi i64 [ %170, %185 ], [ %192, %189 ]
  %199 = icmp ult i64 %186, 3
  br i1 %199, label %215, label %200

200:                                              ; preds = %197, %200
  %201 = phi i64 [ %211, %200 ], [ %198, %197 ]
  %202 = add i64 %201, -1
  %203 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %204 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %203, i64 %202, i32 1
  store i8 %180, i8* %204, align 1
  %205 = add i64 %201, -2
  %206 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %207 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %206, i64 %205, i32 1
  store i8 %180, i8* %207, align 1
  %208 = add i64 %201, -3
  %209 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %210 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %209, i64 %208, i32 1
  store i8 %180, i8* %210, align 1
  %211 = add i64 %201, -4
  %212 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %213 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %212, i64 %211, i32 1
  store i8 %180, i8* %213, align 1
  %214 = icmp ugt i64 %211, %183
  br i1 %214, label %200, label %215

215:                                              ; preds = %197, %200, %182, %174, %172
  br label %216

216:                                              ; preds = %215, %303
  %217 = phi i8 [ %306, %303 ], [ 1, %215 ]
  %218 = phi i64 [ %305, %303 ], [ 0, %215 ]
  %219 = phi i64 [ %307, %303 ], [ 0, %215 ]
  %220 = phi i32 [ %304, %303 ], [ 0, %215 ]
  %221 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %222 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %221, i64 %219, i32 1
  %223 = load i8, i8* %222, align 1
  %224 = icmp eq i8 %223, 10
  br i1 %224, label %225, label %229

225:                                              ; preds = %216
  %226 = icmp eq i64 %218, 0
  %227 = add i64 %218, 1
  %228 = select i1 %226, i64 0, i64 %227
  br label %303

229:                                              ; preds = %216
  %230 = icmp ugt i8 %223, 4
  br i1 %230, label %303, label %231

231:                                              ; preds = %229
  %232 = zext i8 %217 to i64
  %233 = zext i8 %223 to i64
  %234 = getelementptr inbounds [6 x [5 x i16]], [6 x [5 x i16]]* @_ZN12_GLOBAL__N_115kNeutralActionsE, i64 0, i64 %232, i64 %233
  %235 = load i16, i16* %234, align 2
  %236 = lshr i16 %235, 4
  %237 = trunc i16 %236 to i8
  %238 = and i8 %237, 15
  %239 = icmp eq i8 %238, 3
  br i1 %239, label %240, label %244

240:                                              ; preds = %231
  %241 = and i32 %220, 1
  %242 = icmp eq i32 %241, 0
  %243 = select i1 %242, i8 1, i8 2
  br label %244

244:                                              ; preds = %240, %231
  %245 = phi i8 [ %243, %240 ], [ %238, %231 ]
  %246 = icmp ne i8 %245, 0
  %247 = icmp ne i64 %218, 0
  %248 = and i1 %247, %246
  br i1 %248, label %249, label %287

249:                                              ; preds = %244
  %250 = sub i64 %219, %218
  %251 = icmp ult i64 %250, %219
  br i1 %251, label %252, label %287

252:                                              ; preds = %249
  %253 = add i64 %219, -1
  %254 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %221, i64 %253, i32 1
  store i8 %245, i8* %254, align 1
  %255 = icmp ugt i64 %253, %250
  br i1 %255, label %256, label %287

256:                                              ; preds = %252
  %257 = add i64 %218, 3
  %258 = add i64 %218, -2
  %259 = and i64 %257, 3
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %269, label %261

261:                                              ; preds = %256, %261
  %262 = phi i64 [ %265, %261 ], [ %253, %256 ]
  %263 = phi i64 [ %267, %261 ], [ %259, %256 ]
  %264 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %265 = add i64 %262, -1
  %266 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %264, i64 %265, i32 1
  store i8 %245, i8* %266, align 1
  %267 = add i64 %263, -1
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %269, label %261, !llvm.loop !6

269:                                              ; preds = %261, %256
  %270 = phi i64 [ %253, %256 ], [ %265, %261 ]
  %271 = icmp ult i64 %258, 3
  br i1 %271, label %287, label %272

272:                                              ; preds = %269, %272
  %273 = phi i64 [ %284, %272 ], [ %270, %269 ]
  %274 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %275 = add i64 %273, -1
  %276 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %274, i64 %275, i32 1
  store i8 %245, i8* %276, align 1
  %277 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %278 = add i64 %273, -2
  %279 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %277, i64 %278, i32 1
  store i8 %245, i8* %279, align 1
  %280 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %281 = add i64 %273, -3
  %282 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %280, i64 %281, i32 1
  store i8 %245, i8* %282, align 1
  %283 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %284 = add i64 %273, -4
  %285 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %283, i64 %284, i32 1
  store i8 %245, i8* %285, align 1
  %286 = icmp ugt i64 %284, %250
  br i1 %286, label %272, label %287

287:                                              ; preds = %269, %272, %252, %249, %244
  %288 = phi i64 [ %218, %244 ], [ 0, %249 ], [ 0, %252 ], [ 0, %272 ], [ 0, %269 ]
  %289 = trunc i16 %235 to i8
  %290 = and i8 %289, 15
  %291 = icmp eq i8 %290, 0
  br i1 %291, label %293, label %292

292:                                              ; preds = %287
  store i8 %290, i8* %222, align 1
  br label %293

293:                                              ; preds = %292, %287
  %294 = lshr i16 %235, 8
  %295 = and i16 %294, 1
  %296 = zext i16 %295 to i64
  %297 = add i64 %288, %296
  %298 = getelementptr inbounds [6 x [5 x i8]], [6 x [5 x i8]]* @_ZN12_GLOBAL__N_114kNeutralStatesE, i64 0, i64 %232, i64 %233
  %299 = load i8, i8* %298, align 1
  %300 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %221, i64 %219, i32 6
  %301 = load i16, i16* %300, align 4
  %302 = zext i16 %301 to i32
  br label %303

303:                                              ; preds = %293, %229, %225
  %304 = phi i32 [ %220, %229 ], [ %302, %293 ], [ %220, %225 ]
  %305 = phi i64 [ %218, %229 ], [ %297, %293 ], [ %228, %225 ]
  %306 = phi i8 [ %217, %229 ], [ %299, %293 ], [ %217, %225 ]
  %307 = add i64 %219, 1
  %308 = icmp ugt i64 %307, %54
  br i1 %308, label %309, label %216

309:                                              ; preds = %303
  %310 = icmp eq i64 %305, 0
  br i1 %310, label %357, label %311

311:                                              ; preds = %309
  %312 = and i32 %304, 1
  %313 = icmp eq i32 %312, 0
  %314 = select i1 %313, i8 1, i8 2
  %315 = zext i8 %306 to i64
  %316 = zext i8 %314 to i64
  %317 = getelementptr inbounds [6 x [5 x i16]], [6 x [5 x i16]]* @_ZN12_GLOBAL__N_115kNeutralActionsE, i64 0, i64 %315, i64 %316
  %318 = load i16, i16* %317, align 2
  %319 = lshr i16 %318, 4
  %320 = trunc i16 %319 to i8
  %321 = and i8 %320, 15
  switch i8 %321, label %322 [
    i8 3, label %323
    i8 0, label %357
  ]

322:                                              ; preds = %311
  br label %323

323:                                              ; preds = %322, %311
  %324 = phi i8 [ %314, %311 ], [ %321, %322 ]
  %325 = sub i64 %307, %305
  %326 = icmp ult i64 %325, %307
  br i1 %326, label %327, label %357

327:                                              ; preds = %323
  %328 = add i64 %305, -1
  %329 = and i64 %305, 3
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %339, label %331

331:                                              ; preds = %327, %331
  %332 = phi i64 [ %334, %331 ], [ %307, %327 ]
  %333 = phi i64 [ %337, %331 ], [ %329, %327 ]
  %334 = add i64 %332, -1
  %335 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %336 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %335, i64 %334, i32 1
  store i8 %324, i8* %336, align 1
  %337 = add i64 %333, -1
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %331, !llvm.loop !7

339:                                              ; preds = %331, %327
  %340 = phi i64 [ %307, %327 ], [ %334, %331 ]
  %341 = icmp ult i64 %328, 3
  br i1 %341, label %357, label %342

342:                                              ; preds = %339, %342
  %343 = phi i64 [ %353, %342 ], [ %340, %339 ]
  %344 = add i64 %343, -1
  %345 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %346 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %345, i64 %344, i32 1
  store i8 %324, i8* %346, align 1
  %347 = add i64 %343, -2
  %348 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %349 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %348, i64 %347, i32 1
  store i8 %324, i8* %349, align 1
  %350 = add i64 %343, -3
  %351 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %352 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %351, i64 %350, i32 1
  store i8 %324, i8* %352, align 1
  %353 = add i64 %343, -4
  %354 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %355 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %354, i64 %353, i32 1
  store i8 %324, i8* %355, align 1
  %356 = icmp ugt i64 %353, %325
  br i1 %356, label %342, label %357

357:                                              ; preds = %339, %342, %323, %311, %309
  br label %358

358:                                              ; preds = %357, %376
  %359 = phi i64 [ %377, %376 ], [ 0, %357 ]
  %360 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %361 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %360, i64 %359, i32 1
  %362 = load i8, i8* %361, align 1
  %363 = add i8 %362, -1
  %364 = icmp ugt i8 %363, 3
  br i1 %364, label %376, label %365

365:                                              ; preds = %358
  %366 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %360, i64 %359, i32 6
  %367 = load i16, i16* %366, align 4
  %368 = and i16 %367, 1
  %369 = zext i16 %368 to i64
  %370 = zext i8 %362 to i64
  %371 = add nsw i64 %370, -1
  %372 = getelementptr inbounds [2 x [4 x i8]], [2 x [4 x i8]]* @_ZN12_GLOBAL__N_19kAddLevelE, i64 0, i64 %369, i64 %371
  %373 = load i8, i8* %372, align 1
  %374 = zext i8 %373 to i16
  %375 = add i16 %367, %374
  store i16 %375, i16* %366, align 4
  br label %376

376:                                              ; preds = %365, %358
  %377 = add nuw i64 %359, 1
  %378 = icmp eq i64 %377, %1
  br i1 %378, label %379, label %358

379:                                              ; preds = %376, %379
  %380 = phi i64 [ %387, %379 ], [ 0, %376 ]
  %381 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %382 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %381, i64 %380, i32 14
  %383 = load i16, i16* %382, align 8
  %384 = zext i16 %383 to i32
  %385 = tail call zeroext i8 @_Z15FX_GetBidiClassw(i32 signext %384) #5
  %386 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %381, i64 %380, i32 1
  store i8 %385, i8* %386, align 1
  %387 = add nuw i64 %380, 1
  %388 = icmp eq i64 %387, %1
  br i1 %388, label %389, label %379

389:                                              ; preds = %379
  %390 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  br label %391

391:                                              ; preds = %445, %389
  %392 = phi %class.CFGAS_Char* [ %390, %389 ], [ %447, %445 ]
  %393 = phi i64 [ 0, %389 ], [ %446, %445 ]
  %394 = phi i64 [ 0, %389 ], [ %450, %445 ]
  %395 = phi i16 [ 0, %389 ], [ %449, %445 ]
  %396 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %392, i64 %394, i32 1
  %397 = load i8, i8* %396, align 1
  switch i8 %397, label %445 [
    i8 12, label %398
    i8 15, label %400
    i8 17, label %400
    i8 16, label %400
    i8 14, label %400
    i8 18, label %400
    i8 10, label %400
    i8 11, label %403
    i8 13, label %403
  ]

398:                                              ; preds = %391
  %399 = add i64 %393, 1
  br label %445

400:                                              ; preds = %391, %391, %391, %391, %391, %391
  %401 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %392, i64 %394, i32 6
  store i16 %395, i16* %401, align 4
  %402 = add i64 %393, 1
  br label %445

403:                                              ; preds = %391, %391
  %404 = icmp eq i64 %393, 0
  br i1 %404, label %442, label %405

405:                                              ; preds = %403
  %406 = sub i64 %394, %393
  %407 = icmp ult i64 %406, %394
  br i1 %407, label %408, label %442

408:                                              ; preds = %405
  %409 = add i64 %393, -1
  %410 = and i64 %393, 3
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %421, label %412

412:                                              ; preds = %408, %412
  %413 = phi %class.CFGAS_Char* [ %418, %412 ], [ %392, %408 ]
  %414 = phi i64 [ %416, %412 ], [ %394, %408 ]
  %415 = phi i64 [ %419, %412 ], [ %410, %408 ]
  %416 = add i64 %414, -1
  %417 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %413, i64 %416, i32 6
  store i16 0, i16* %417, align 4
  %418 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %419 = add i64 %415, -1
  %420 = icmp eq i64 %419, 0
  br i1 %420, label %421, label %412, !llvm.loop !8

421:                                              ; preds = %412, %408
  %422 = phi %class.CFGAS_Char* [ %392, %408 ], [ %418, %412 ]
  %423 = phi i64 [ %394, %408 ], [ %416, %412 ]
  %424 = phi %class.CFGAS_Char* [ undef, %408 ], [ %418, %412 ]
  %425 = icmp ult i64 %409, 3
  br i1 %425, label %442, label %426

426:                                              ; preds = %421, %426
  %427 = phi %class.CFGAS_Char* [ %441, %426 ], [ %422, %421 ]
  %428 = phi i64 [ %438, %426 ], [ %423, %421 ]
  %429 = add i64 %428, -1
  %430 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %427, i64 %429, i32 6
  store i16 0, i16* %430, align 4
  %431 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %432 = add i64 %428, -2
  %433 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %431, i64 %432, i32 6
  store i16 0, i16* %433, align 4
  %434 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %435 = add i64 %428, -3
  %436 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %434, i64 %435, i32 6
  store i16 0, i16* %436, align 4
  %437 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %438 = add i64 %428, -4
  %439 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %437, i64 %438, i32 6
  store i16 0, i16* %439, align 4
  %440 = icmp ugt i64 %438, %406
  %441 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  br i1 %440, label %426, label %442

442:                                              ; preds = %421, %426, %405, %403
  %443 = phi %class.CFGAS_Char* [ %392, %405 ], [ %392, %403 ], [ %424, %421 ], [ %441, %426 ]
  %444 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %443, i64 %394, i32 6
  store i16 0, i16* %444, align 4
  br label %445

445:                                              ; preds = %442, %400, %398, %391
  %446 = phi i64 [ 0, %442 ], [ %402, %400 ], [ %399, %398 ], [ 0, %391 ]
  %447 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %448 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %447, i64 %394, i32 6
  %449 = load i16, i16* %448, align 4
  %450 = add i64 %394, 1
  %451 = icmp ugt i64 %450, %54
  br i1 %451, label %452, label %391

452:                                              ; preds = %445
  %453 = icmp eq i64 %446, 0
  br i1 %453, label %491, label %454

454:                                              ; preds = %452
  %455 = sub i64 %450, %446
  %456 = icmp ult i64 %455, %450
  br i1 %456, label %457, label %491

457:                                              ; preds = %454
  store i16 0, i16* %448, align 4
  %458 = icmp ugt i64 %394, %455
  br i1 %458, label %459, label %491

459:                                              ; preds = %457
  %460 = add i64 %446, %394
  %461 = sub i64 %460, %450
  %462 = add i64 %446, -2
  %463 = and i64 %461, 3
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %473, label %465

465:                                              ; preds = %459, %465
  %466 = phi i64 [ %469, %465 ], [ %394, %459 ]
  %467 = phi i64 [ %471, %465 ], [ %463, %459 ]
  %468 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %469 = add i64 %466, -1
  %470 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %468, i64 %469, i32 6
  store i16 0, i16* %470, align 4
  %471 = add i64 %467, -1
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %473, label %465, !llvm.loop !9

473:                                              ; preds = %465, %459
  %474 = phi i64 [ %394, %459 ], [ %469, %465 ]
  %475 = icmp ult i64 %462, 3
  br i1 %475, label %491, label %476

476:                                              ; preds = %473, %476
  %477 = phi i64 [ %488, %476 ], [ %474, %473 ]
  %478 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %479 = add i64 %477, -1
  %480 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %478, i64 %479, i32 6
  store i16 0, i16* %480, align 4
  %481 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %482 = add i64 %477, -2
  %483 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %481, i64 %482, i32 6
  store i16 0, i16* %483, align 4
  %484 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %485 = add i64 %477, -3
  %486 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %484, i64 %485, i32 6
  store i16 0, i16* %486, align 4
  %487 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %488 = add i64 %477, -4
  %489 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %487, i64 %488, i32 6
  store i16 0, i16* %489, align 4
  %490 = icmp ugt i64 %488, %455
  br i1 %490, label %476, label %491

491:                                              ; preds = %473, %476, %457, %452, %454
  br label %492

492:                                              ; preds = %491, %492
  %493 = phi i64 [ %495, %492 ], [ 0, %491 ]
  %494 = tail call fastcc i64 @_ZN12_GLOBAL__N_112ReorderLevelEPNSt3__16vectorI10CFGAS_CharNS0_9allocatorIS2_EEEEmimb(%"class.std::__1::vector"* %0, i64 %1, i32 0, i64 %493, i1 zeroext false) #5
  %495 = add i64 %494, %493
  %496 = icmp ult i64 %495, %1
  br i1 %496, label %492, label %497

497:                                              ; preds = %492
  %498 = and i64 %1, 1
  %499 = icmp eq i64 %1, 1
  br i1 %499, label %520, label %500

500:                                              ; preds = %497
  %501 = sub i64 %1, %498
  br label %502

502:                                              ; preds = %536, %500
  %503 = phi i64 [ 0, %500 ], [ %537, %536 ]
  %504 = phi i64 [ %501, %500 ], [ %538, %536 ]
  %505 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %506 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %505, i64 %503, i32 7
  %507 = load i16, i16* %506, align 2
  %508 = zext i16 %507 to i64
  %509 = icmp ugt i64 %508, %1
  br i1 %509, label %513, label %510

510:                                              ; preds = %502
  %511 = trunc i64 %503 to i16
  %512 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %505, i64 %508, i32 8
  store i16 %511, i16* %512, align 8
  br label %513

513:                                              ; preds = %510, %502
  %514 = or i64 %503, 1
  %515 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %516 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %515, i64 %514, i32 7
  %517 = load i16, i16* %516, align 2
  %518 = zext i16 %517 to i64
  %519 = icmp ugt i64 %518, %1
  br i1 %519, label %536, label %533

520:                                              ; preds = %536, %497
  %521 = phi i64 [ 0, %497 ], [ %537, %536 ]
  %522 = icmp eq i64 %498, 0
  br i1 %522, label %532, label %523

523:                                              ; preds = %520
  %524 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %525 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %524, i64 %521, i32 7
  %526 = load i16, i16* %525, align 2
  %527 = zext i16 %526 to i64
  %528 = icmp ugt i64 %527, %1
  br i1 %528, label %532, label %529

529:                                              ; preds = %523
  %530 = trunc i64 %521 to i16
  %531 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %524, i64 %527, i32 8
  store i16 %530, i16* %531, align 8
  br label %532

532:                                              ; preds = %520, %523, %529, %2
  ret void

533:                                              ; preds = %513
  %534 = trunc i64 %514 to i16
  %535 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %515, i64 %518, i32 8
  store i16 %534, i16* %535, align 8
  br label %536

536:                                              ; preds = %533, %513
  %537 = add nuw i64 %503, 2
  %538 = add i64 %504, -2
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %520, label %502
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10CFGAS_CharC2Et(%class.CFGAS_Char* nocapture, i16 zeroext) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 0
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 1
  store i8 0, i8* %4, align 1
  %5 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 2
  store i8 0, i8* %5, align 2
  %6 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 4
  %7 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 10
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 11
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 13
  %10 = bitcast %"class.fxcrt::RetainPtr"* %9 to i64*
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 14
  %12 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 14, i1 false) #5
  store i16 %1, i16* %11, align 8
  %13 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 16
  store i32 100, i32* %13, align 4
  %14 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 17
  store i32 100, i32* %14, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10CFGAS_CharC2Etii(%class.CFGAS_Char* nocapture, i16 zeroext, i32, i32) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 0
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 1
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 2
  store i8 0, i8* %7, align 2
  %8 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 4
  %9 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 10
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 11
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 13
  %12 = bitcast %"class.fxcrt::RetainPtr"* %11 to i64*
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 14
  %14 = bitcast i32* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 14, i1 false)
  store i16 %1, i16* %13, align 8
  %15 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 16
  store i32 %2, i32* %15, align 4
  %16 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 17
  store i32 %3, i32* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10CFGAS_CharC2ERKS_(%class.CFGAS_Char* nocapture, %class.CFGAS_Char* nocapture readonly dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 28, i1 false)
  %5 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 13
  %6 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %7 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %6, align 8
  %8 = ptrtoint %class.CFGAS_TextUserData* %7 to i64
  %9 = bitcast %"class.fxcrt::RetainPtr"* %5 to i64*
  store i64 %8, i64* %9, align 8
  %10 = icmp eq %class.CFGAS_TextUserData* %7, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %7, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add nsw i64 %13, 1
  store i64 %14, i64* %12, align 8
  br label %15

15:                                               ; preds = %2, %11
  %16 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 14
  %17 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 14
  %18 = bitcast i16* %16 to i8*
  %19 = bitcast i16* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 12, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10CFGAS_CharD2Ev(%class.CFGAS_Char* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %2, align 8
  store %class.CFGAS_TextUserData* null, %class.CFGAS_TextUserData** %2, align 8
  %4 = icmp eq %class.CFGAS_TextUserData* %3, null
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %3, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add nsw i64 %7, -1
  store i64 %8, i64* %6, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %3, i64 0, i32 0
  %12 = bitcast %class.CFGAS_TextUserData* %3 to void (%"class.fxcrt::Retainable"*)***
  %13 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %13, i64 1
  %15 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, align 8
  tail call void %15(%"class.fxcrt::Retainable"* nonnull %11) #5
  br label %16

16:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %0, i64 0, i32 14
  %3 = load i16, i16* %2, align 8
  %4 = zext i16 %3 to i32
  %5 = tail call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %4) #5
  ret i8 %5
}

declare zeroext i8 @_Z14FX_GetCharTypew(i32 signext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i8 @_Z15FX_GetBidiClassw(i32 signext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @_ZN12_GLOBAL__N_112ReorderLevelEPNSt3__16vectorI10CFGAS_CharNS0_9allocatorIS2_EEEEmimb(%"class.std::__1::vector"* nocapture, i64, i32, i64, i1 zeroext) unnamed_addr #0 {
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %42, label %7

7:                                                ; preds = %5
  %8 = and i32 %2, 1
  %9 = icmp ne i32 %8, 0
  %10 = or i1 %9, %4
  %11 = icmp ult i64 %3, %1
  br i1 %11, label %12, label %32

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %14 = add nsw i32 %2, 1
  br label %15

15:                                               ; preds = %12, %28
  %16 = phi i64 [ %3, %12 ], [ %30, %28 ]
  %17 = load %class.CFGAS_Char*, %class.CFGAS_Char** %13, align 8
  %18 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %17, i64 %16, i32 6
  %19 = load i16, i16* %18, align 4
  %20 = zext i16 %19 to i32
  %21 = icmp eq i32 %20, %2
  br i1 %21, label %28, label %22

22:                                               ; preds = %15
  %23 = icmp slt i32 %20, %2
  br i1 %23, label %32, label %24

24:                                               ; preds = %22
  %25 = tail call fastcc i64 @_ZN12_GLOBAL__N_112ReorderLevelEPNSt3__16vectorI10CFGAS_CharNS0_9allocatorIS2_EEEEmimb(%"class.std::__1::vector"* %0, i64 %1, i32 %14, i64 %16, i1 zeroext %10)
  %26 = add i64 %16, -1
  %27 = add i64 %26, %25
  br label %28

28:                                               ; preds = %24, %15
  %29 = phi i64 [ %16, %15 ], [ %27, %24 ]
  %30 = add i64 %29, 1
  %31 = icmp ult i64 %30, %1
  br i1 %31, label %15, label %32

32:                                               ; preds = %28, %22, %7
  %33 = phi i64 [ %3, %7 ], [ %16, %22 ], [ %30, %28 ]
  %34 = sub i64 %33, %3
  %35 = icmp ugt i64 %34, 1
  %36 = and i1 %10, %35
  br i1 %36, label %37, label %42

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %39 = load %class.CFGAS_Char*, %class.CFGAS_Char** %38, align 8
  %40 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %39, i64 %3
  %41 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %39, i64 %33
  tail call void @_ZNSt3__17reverseINS_11__wrap_iterIP10CFGAS_CharEEEEvT_S5_(%class.CFGAS_Char* %40, %class.CFGAS_Char* %41) #5
  br label %42

42:                                               ; preds = %32, %37, %5
  %43 = phi i64 [ 0, %5 ], [ %34, %37 ], [ %34, %32 ]
  ret i64 %43
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__17reverseINS_11__wrap_iterIP10CFGAS_CharEEEEvT_S5_(%class.CFGAS_Char*, %class.CFGAS_Char*) local_unnamed_addr #4 comdat {
  %3 = alloca <{ i8, i8, i8, i8, i32, i32, i16, i16, i16, [2 x i8], i32, i32 }>, align 8
  %4 = alloca [12 x i8], align 8
  %5 = icmp eq %class.CFGAS_Char* %0, %1
  br i1 %5, label %97, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 -1
  %8 = icmp ugt %class.CFGAS_Char* %7, %0
  br i1 %8, label %9, label %97

9:                                                ; preds = %6
  %10 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 0
  %11 = getelementptr inbounds <{ i8, i8, i8, i8, i32, i32, i16, i16, i16, [2 x i8], i32, i32 }>, <{ i8, i8, i8, i8, i32, i32, i16, i16, i16, [2 x i8], i32, i32 }>* %3, i64 0, i32 0
  br label %12

12:                                               ; preds = %9, %93
  %13 = phi %class.CFGAS_Char* [ %95, %93 ], [ %7, %9 ]
  %14 = phi %class.CFGAS_Char* [ %94, %93 ], [ %0, %9 ]
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %11)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %10)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 12, i1 false)
  %15 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 %15, i64 28, i1 false) #5
  %16 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %17 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %16, align 8
  %18 = icmp eq %class.CFGAS_TextUserData* %17, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %17, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = add nsw i64 %21, 1
  store i64 %22, i64* %20, align 8
  %23 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %16, align 8
  %24 = bitcast %class.CFGAS_TextUserData* %23 to void (%"class.fxcrt::Retainable"*)***
  br label %25

25:                                               ; preds = %19, %12
  %26 = phi void (%"class.fxcrt::Retainable"*)*** [ null, %12 ], [ %24, %19 ]
  %27 = phi %class.CFGAS_TextUserData* [ null, %12 ], [ %23, %19 ]
  %28 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 0, i32 14
  %29 = bitcast i16* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 8 %29, i64 12, i1 false) #5
  %30 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %13, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %30, i64 28, i1 false) #5
  %31 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %13, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %32 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %31, align 8
  %33 = icmp eq %class.CFGAS_TextUserData* %27, %32
  br i1 %33, label %56, label %34

34:                                               ; preds = %25
  %35 = icmp eq %class.CFGAS_TextUserData* %32, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %32, i64 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = add nsw i64 %38, 1
  store i64 %39, i64* %37, align 8
  %40 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %16, align 8
  %41 = bitcast %class.CFGAS_TextUserData* %40 to void (%"class.fxcrt::Retainable"*)***
  br label %42

42:                                               ; preds = %36, %34
  %43 = phi void (%"class.fxcrt::Retainable"*)*** [ %41, %36 ], [ %26, %34 ]
  %44 = phi %class.CFGAS_TextUserData* [ %40, %36 ], [ %27, %34 ]
  store %class.CFGAS_TextUserData* %32, %class.CFGAS_TextUserData** %16, align 8
  %45 = icmp eq %class.CFGAS_TextUserData* %44, null
  br i1 %45, label %56, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %44, i64 0, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = add nsw i64 %48, -1
  store i64 %49, i64* %47, align 8
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %56

51:                                               ; preds = %46
  %52 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %44, i64 0, i32 0
  %53 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %43, align 8
  %54 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %53, i64 1
  %55 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %54, align 8
  tail call void %55(%"class.fxcrt::Retainable"* nonnull %52) #5
  br label %56

56:                                               ; preds = %51, %46, %42, %25
  %57 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %13, i64 0, i32 14
  %58 = bitcast i16* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %58, i64 12, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* nonnull align 8 %11, i64 28, i1 false) #5
  %59 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %31, align 8
  %60 = icmp eq %class.CFGAS_TextUserData* %59, %17
  br i1 %60, label %81, label %61

61:                                               ; preds = %56
  br i1 %18, label %67, label %62

62:                                               ; preds = %61
  %63 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %17, i64 0, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = add nsw i64 %64, 1
  store i64 %65, i64* %63, align 8
  %66 = load %class.CFGAS_TextUserData*, %class.CFGAS_TextUserData** %31, align 8
  br label %67

67:                                               ; preds = %62, %61
  %68 = phi %class.CFGAS_TextUserData* [ %66, %62 ], [ %59, %61 ]
  store %class.CFGAS_TextUserData* %17, %class.CFGAS_TextUserData** %31, align 8
  %69 = icmp eq %class.CFGAS_TextUserData* %68, null
  br i1 %69, label %81, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %68, i64 0, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = add nsw i64 %72, -1
  store i64 %73, i64* %71, align 8
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %81

75:                                               ; preds = %70
  %76 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %68, i64 0, i32 0
  %77 = bitcast %class.CFGAS_TextUserData* %68 to void (%"class.fxcrt::Retainable"*)***
  %78 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %77, align 8
  %79 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %78, i64 1
  %80 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %79, align 8
  tail call void %80(%"class.fxcrt::Retainable"* nonnull %76) #5
  br label %81

81:                                               ; preds = %75, %70, %67, %56
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* nonnull align 8 %10, i64 12, i1 false) #5
  br i1 %18, label %93, label %82

82:                                               ; preds = %81
  %83 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %17, i64 0, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = add nsw i64 %84, -1
  store i64 %85, i64* %83, align 8
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %93

87:                                               ; preds = %82
  %88 = getelementptr inbounds %class.CFGAS_TextUserData, %class.CFGAS_TextUserData* %17, i64 0, i32 0
  %89 = bitcast %class.CFGAS_TextUserData* %17 to void (%"class.fxcrt::Retainable"*)***
  %90 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %89, align 8
  %91 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %90, i64 1
  %92 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %91, align 8
  tail call void %92(%"class.fxcrt::Retainable"* nonnull %88) #5
  br label %93

93:                                               ; preds = %81, %82, %87
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %11)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %10)
  %94 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 1
  %95 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %13, i64 -1
  %96 = icmp ult %class.CFGAS_Char* %94, %95
  br i1 %96, label %12, label %97

97:                                               ; preds = %93, %2, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
