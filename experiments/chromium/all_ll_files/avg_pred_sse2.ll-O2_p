; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/avg_pred_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/avg_pred_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_comp_avg_pred_sse2(i8* nocapture, i8* nocapture readonly, i32, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = icmp sgt i32 %2, 8
  br i1 %7, label %21, label %8

8:                                                ; preds = %6
  %9 = mul nsw i32 %3, %2
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %156

11:                                               ; preds = %8
  %12 = icmp eq i32 %2, %5
  %13 = icmp eq i32 %2, 4
  %14 = sext i32 %5 to i64
  %15 = shl nsw i32 %5, 1
  %16 = sext i32 %15 to i64
  %17 = mul nsw i32 %5, 3
  %18 = sext i32 %17 to i64
  %19 = shl nsw i32 %5, 2
  %20 = sext i32 %19 to i64
  br label %106

21:                                               ; preds = %6
  %22 = icmp sgt i32 %3, 0
  br i1 %22, label %23, label %156

23:                                               ; preds = %21
  %24 = sext i32 %2 to i64
  %25 = sext i32 %5 to i64
  %26 = add nsw i64 %24, -1
  %27 = lshr i64 %26, 4
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 3
  %30 = icmp ult i64 %26, 48
  %31 = sub nsw i64 %28, %29
  %32 = icmp eq i64 %29, 0
  br label %33

33:                                               ; preds = %100, %23
  %34 = phi i8* [ %0, %23 ], [ %101, %100 ]
  %35 = phi i8* [ %1, %23 ], [ %102, %100 ]
  %36 = phi i8* [ %4, %23 ], [ %103, %100 ]
  %37 = phi i32 [ 0, %23 ], [ %104, %100 ]
  br i1 %30, label %83, label %38

38:                                               ; preds = %33, %38
  %39 = phi i64 [ %80, %38 ], [ 0, %33 ]
  %40 = phi i64 [ %81, %38 ], [ %31, %33 ]
  %41 = getelementptr inbounds i8, i8* %35, i64 %39
  %42 = bitcast i8* %41 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 16
  %44 = getelementptr inbounds i8, i8* %36, i64 %39
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %43, <16 x i8> %46) #2
  %48 = getelementptr inbounds i8, i8* %34, i64 %39
  %49 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %47, <16 x i8>* %49, align 16
  %50 = or i64 %39, 16
  %51 = getelementptr inbounds i8, i8* %35, i64 %50
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 16
  %54 = getelementptr inbounds i8, i8* %36, i64 %50
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %53, <16 x i8> %56) #2
  %58 = getelementptr inbounds i8, i8* %34, i64 %50
  %59 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> %57, <16 x i8>* %59, align 16
  %60 = or i64 %39, 32
  %61 = getelementptr inbounds i8, i8* %35, i64 %60
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 16
  %64 = getelementptr inbounds i8, i8* %36, i64 %60
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1
  %67 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %63, <16 x i8> %66) #2
  %68 = getelementptr inbounds i8, i8* %34, i64 %60
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %69, align 16
  %70 = or i64 %39, 48
  %71 = getelementptr inbounds i8, i8* %35, i64 %70
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 16
  %74 = getelementptr inbounds i8, i8* %36, i64 %70
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %73, <16 x i8> %76) #2
  %78 = getelementptr inbounds i8, i8* %34, i64 %70
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %77, <16 x i8>* %79, align 16
  %80 = add nuw nsw i64 %39, 64
  %81 = add i64 %40, -4
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %38

83:                                               ; preds = %38, %33
  %84 = phi i64 [ 0, %33 ], [ %80, %38 ]
  br i1 %32, label %100, label %85

85:                                               ; preds = %83, %85
  %86 = phi i64 [ %97, %85 ], [ %84, %83 ]
  %87 = phi i64 [ %98, %85 ], [ %29, %83 ]
  %88 = getelementptr inbounds i8, i8* %35, i64 %86
  %89 = bitcast i8* %88 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 16
  %91 = getelementptr inbounds i8, i8* %36, i64 %86
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1
  %94 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %90, <16 x i8> %93) #2
  %95 = getelementptr inbounds i8, i8* %34, i64 %86
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %94, <16 x i8>* %96, align 16
  %97 = add nuw nsw i64 %86, 16
  %98 = add i64 %87, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %85, !llvm.loop !2

100:                                              ; preds = %85, %83
  %101 = getelementptr inbounds i8, i8* %34, i64 %24
  %102 = getelementptr inbounds i8, i8* %35, i64 %24
  %103 = getelementptr inbounds i8, i8* %36, i64 %25
  %104 = add nuw nsw i32 %37, 1
  %105 = icmp eq i32 %104, %3
  br i1 %105, label %156, label %33

106:                                              ; preds = %11, %145
  %107 = phi i8* [ %0, %11 ], [ %153, %145 ]
  %108 = phi i32 [ 0, %11 ], [ %154, %145 ]
  %109 = phi i8* [ %1, %11 ], [ %152, %145 ]
  %110 = phi i8* [ %4, %11 ], [ %148, %145 ]
  %111 = bitcast i8* %109 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 16
  br i1 %12, label %113, label %116

113:                                              ; preds = %106
  %114 = bitcast i8* %110 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1
  br label %145

116:                                              ; preds = %106
  br i1 %13, label %117, label %134

117:                                              ; preds = %116
  %118 = getelementptr inbounds i8, i8* %110, i64 %18
  %119 = bitcast i8* %118 to i32*
  %120 = load i32, i32* %119, align 1
  %121 = getelementptr inbounds i8, i8* %110, i64 %16
  %122 = bitcast i8* %121 to i32*
  %123 = load i32, i32* %122, align 1
  %124 = getelementptr inbounds i8, i8* %110, i64 %14
  %125 = bitcast i8* %124 to i32*
  %126 = load i32, i32* %125, align 1
  %127 = bitcast i8* %110 to i32*
  %128 = load i32, i32* %127, align 1
  %129 = insertelement <4 x i32> undef, i32 %128, i32 0
  %130 = insertelement <4 x i32> %129, i32 %126, i32 1
  %131 = insertelement <4 x i32> %130, i32 %123, i32 2
  %132 = insertelement <4 x i32> %131, i32 %120, i32 3
  %133 = bitcast <4 x i32> %132 to <2 x i64>
  br label %145

134:                                              ; preds = %116
  %135 = bitcast i8* %110 to i64*
  %136 = load i64, i64* %135, align 1
  %137 = insertelement <2 x i64> undef, i64 %136, i32 0
  %138 = bitcast <2 x i64> %137 to <4 x float>
  %139 = getelementptr inbounds i8, i8* %110, i64 %14
  %140 = bitcast i8* %139 to <2 x float>*
  %141 = load <2 x float>, <2 x float>* %140, align 1
  %142 = shufflevector <2 x float> %141, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %143 = shufflevector <4 x float> %138, <4 x float> %142, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %144 = bitcast <4 x float> %143 to <2 x i64>
  br label %145

145:                                              ; preds = %117, %134, %113
  %146 = phi i64 [ %20, %117 ], [ %16, %134 ], [ 16, %113 ]
  %147 = phi <2 x i64> [ %133, %117 ], [ %144, %134 ], [ %115, %113 ]
  %148 = getelementptr inbounds i8, i8* %110, i64 %146
  %149 = bitcast <2 x i64> %147 to <16 x i8>
  %150 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %112, <16 x i8> %149) #2
  %151 = bitcast i8* %107 to <16 x i8>*
  store <16 x i8> %150, <16 x i8>* %151, align 16
  %152 = getelementptr inbounds i8, i8* %109, i64 16
  %153 = getelementptr inbounds i8, i8* %107, i64 16
  %154 = add nuw nsw i32 %108, 16
  %155 = icmp slt i32 %154, %9
  br i1 %155, label %106, label %156

156:                                              ; preds = %145, %100, %8, %21
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
