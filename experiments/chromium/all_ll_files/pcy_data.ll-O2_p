; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/pcy_data.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/pcy_data.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.X509_POLICY_DATA_st = type { i32, %struct.asn1_object_st*, %struct.stack_st_POLICYQUALINFO*, %struct.stack_st_ASN1_OBJECT* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.stack_st_POLICYQUALINFO = type opaque
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.POLICYQUALINFO_st = type { %struct.asn1_object_st*, %union.anon }
%union.anon = type { %struct.asn1_string_st* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.POLICYINFO_st = type { %struct.asn1_object_st*, %struct.stack_st_POLICYQUALINFO* }

@.str = private unnamed_addr constant [57 x i8] c"../../third_party/boringssl/src/crypto/x509v3/pcy_data.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @policy_data_free(%struct.X509_POLICY_DATA_st*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %0, i64 0, i32 1
  %3 = load %struct.asn1_object_st*, %struct.asn1_object_st** %2, align 8
  tail call void @ASN1_OBJECT_free(%struct.asn1_object_st* %3) #3
  %4 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %0, i64 0, i32 2
  %10 = bitcast %struct.stack_st_POLICYQUALINFO** %9 to %struct.stack_st**
  %11 = load %struct.stack_st*, %struct.stack_st** %10, align 8
  tail call void @sk_pop_free_ex(%struct.stack_st* %11, void (void (i8*)*, i8*)* nonnull @sk_POLICYQUALINFO_call_free_func, void (i8*)* bitcast (void (%struct.POLICYQUALINFO_st*)* @POLICYQUALINFO_free to void (i8*)*)) #3
  br label %12

12:                                               ; preds = %1, %8
  %13 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %0, i64 0, i32 3
  %14 = bitcast %struct.stack_st_ASN1_OBJECT** %13 to %struct.stack_st**
  %15 = load %struct.stack_st*, %struct.stack_st** %14, align 8
  tail call void @sk_pop_free_ex(%struct.stack_st* %15, void (void (i8*)*, i8*)* nonnull @sk_ASN1_OBJECT_call_free_func, void (i8*)* bitcast (void (%struct.asn1_object_st*)* @ASN1_OBJECT_free to void (i8*)*)) #3
  %16 = bitcast %struct.X509_POLICY_DATA_st* %0 to i8*
  tail call void @OPENSSL_free(i8* %16) #3
  ret void
}

declare void @ASN1_OBJECT_free(%struct.asn1_object_st*) #1

declare void @POLICYQUALINFO_free(%struct.POLICYQUALINFO_st*) #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_POLICY_DATA_st* @policy_data_new(%struct.POLICYINFO_st*, %struct.asn1_object_st*, i32) local_unnamed_addr #0 {
  %4 = icmp ne %struct.POLICYINFO_st* %0, null
  %5 = icmp ne %struct.asn1_object_st* %1, null
  %6 = or i1 %4, %5
  br i1 %6, label %7, label %47

7:                                                ; preds = %3
  br i1 %5, label %8, label %11

8:                                                ; preds = %7
  %9 = tail call %struct.asn1_object_st* @OBJ_dup(%struct.asn1_object_st* nonnull %1) #3
  %10 = icmp eq %struct.asn1_object_st* %9, null
  br i1 %10, label %47, label %11

11:                                               ; preds = %7, %8
  %12 = phi %struct.asn1_object_st* [ %9, %8 ], [ null, %7 ]
  %13 = tail call i8* @OPENSSL_malloc(i64 32) #3
  %14 = bitcast i8* %13 to %struct.X509_POLICY_DATA_st*
  %15 = icmp eq i8* %13, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), i32 102) #3
  tail call void @ASN1_OBJECT_free(%struct.asn1_object_st* %12) #3
  br label %47

17:                                               ; preds = %11
  %18 = tail call %struct.stack_st* @sk_new_null() #3
  %19 = getelementptr inbounds i8, i8* %13, i64 24
  %20 = bitcast i8* %19 to %struct.stack_st**
  store %struct.stack_st* %18, %struct.stack_st** %20, align 8
  %21 = icmp eq %struct.stack_st* %18, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %17
  tail call void @OPENSSL_free(i8* nonnull %13) #3
  tail call void @ASN1_OBJECT_free(%struct.asn1_object_st* %12) #3
  br label %47

23:                                               ; preds = %17
  %24 = icmp eq i32 %2, 0
  %25 = bitcast i8* %13 to i32*
  %26 = select i1 %24, i32 0, i32 16
  store i32 %26, i32* %25, align 8
  %27 = icmp eq %struct.asn1_object_st* %12, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds i8, i8* %13, i64 8
  %30 = bitcast i8* %29 to %struct.asn1_object_st**
  store %struct.asn1_object_st* %12, %struct.asn1_object_st** %30, align 8
  br label %37

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.POLICYINFO_st, %struct.POLICYINFO_st* %0, i64 0, i32 0
  %33 = bitcast %struct.POLICYINFO_st* %0 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds i8, i8* %13, i64 8
  %36 = bitcast i8* %35 to i64*
  store i64 %34, i64* %36, align 8
  store %struct.asn1_object_st* null, %struct.asn1_object_st** %32, align 8
  br label %37

37:                                               ; preds = %31, %28
  br i1 %4, label %38, label %44

38:                                               ; preds = %37
  %39 = getelementptr inbounds %struct.POLICYINFO_st, %struct.POLICYINFO_st* %0, i64 0, i32 1
  %40 = bitcast %struct.stack_st_POLICYQUALINFO** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds i8, i8* %13, i64 16
  %43 = bitcast i8* %42 to i64*
  store i64 %41, i64* %43, align 8
  store %struct.stack_st_POLICYQUALINFO* null, %struct.stack_st_POLICYQUALINFO** %39, align 8
  br label %47

44:                                               ; preds = %37
  %45 = getelementptr inbounds i8, i8* %13, i64 16
  %46 = bitcast i8* %45 to %struct.stack_st_POLICYQUALINFO**
  store %struct.stack_st_POLICYQUALINFO* null, %struct.stack_st_POLICYQUALINFO** %46, align 8
  br label %47

47:                                               ; preds = %38, %44, %8, %3, %22, %16
  %48 = phi %struct.X509_POLICY_DATA_st* [ null, %22 ], [ null, %16 ], [ null, %3 ], [ null, %8 ], [ %14, %44 ], [ %14, %38 ]
  ret %struct.X509_POLICY_DATA_st* %48
}

declare %struct.asn1_object_st* @OBJ_dup(%struct.asn1_object_st*) local_unnamed_addr #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_POLICYQUALINFO_call_free_func(void (i8*)* nocapture, i8*) #2 {
  %3 = bitcast void (i8*)* %0 to void (%struct.POLICYQUALINFO_st*)*
  %4 = bitcast i8* %1 to %struct.POLICYQUALINFO_st*
  tail call void %3(%struct.POLICYQUALINFO_st* %4) #3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_ASN1_OBJECT_call_free_func(void (i8*)* nocapture, i8*) #2 {
  %3 = bitcast void (i8*)* %0 to void (%struct.asn1_object_st*)*
  %4 = bitcast i8* %1 to %struct.asn1_object_st*
  tail call void %3(%struct.asn1_object_st* %4) #3
  ret void
}

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
