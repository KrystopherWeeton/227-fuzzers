; ModuleID = '../../third_party/blink/renderer/core/html/parser/html_meta_charset_parser.cc'
source_filename = "../../third_party/blink/renderer/core/html/parser/html_meta_charset_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::HTMLQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.30 }
%class.scoped_refptr.30 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::HTMLMetaCharsetParser" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.14", %"class.blink::SegmentedString", %"class.blink::HTMLToken", i8, i8, %"class.WTF::TextEncoding" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::HTMLTokenizer"* }
%"class.blink::HTMLTokenizer" = type <{ i32, i8, i8, [2 x i8], %"class.blink::HTMLToken"*, i16, [6 x i8], %"class.blink::InputStreamPreprocessor", %class.LiteralBuffer.0, %class.LiteralBuffer.10, %class.LiteralBuffer.10, %"class.blink::HTMLParserOptions", [6 x i8] }>
%"class.blink::InputStreamPreprocessor" = type <{ %"class.blink::HTMLTokenizer"*, i8, [7 x i8] }>
%class.LiteralBuffer.0 = type { i16*, i16*, i16*, [32 x i16] }
%class.LiteralBuffer.10 = type { i8*, i8*, i8*, [32 x i8] }
%"class.blink::HTMLParserOptions" = type { i8, i8 }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.WTF::TextCodec"* }
%"class.WTF::TextCodec" = type { i32 (...)** }
%"class.blink::SegmentedString" = type <{ %"class.blink::SegmentedSubstring", i32, i32, i32, [4 x i8], %"class.WTF::Deque", i8, i8, [6 x i8] }>
%"class.blink::SegmentedSubstring" = type { %union.anon, i8*, i8*, i8, i8, %"class.WTF::String" }
%union.anon = type { i8* }
%"class.WTF::Deque" = type { %"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.23" }
%"class.WTF::VectorBuffer.23" = type { %"class.WTF::VectorBufferBase.24" }
%"class.WTF::VectorBufferBase.24" = type { %"class.blink::SegmentedSubstring"*, i32, i32 }
%"class.blink::HTMLToken" = type { i32, %"class.blink::HTMLToken::Attribute::Range", i32, %class.LiteralBuffer, i16, i8, %"class.WTF::Vector", %"class.blink::HTMLToken::Attribute"*, %"class.std::__1::unique_ptr.1" }
%"class.blink::HTMLToken::Attribute::Range" = type { i32, i32 }
%class.LiteralBuffer = type { i16*, i16*, i16*, [256 x i16] }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [1920 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::HTMLToken::Attribute"*, i32, i32 }
%"class.blink::HTMLToken::Attribute" = type { %class.LiteralBuffer.0, %class.LiteralBuffer.0, %"class.blink::HTMLToken::Attribute::Range", %"class.blink::HTMLToken::Attribute::Range" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.blink::DoctypeData"* }
%"class.blink::DoctypeData" = type <{ i8, i8, [6 x i8], %"class.WTF::Vector.4", %"class.WTF::Vector.4", i8, [7 x i8] }>
%"class.WTF::Vector.4" = type { %"class.WTF::VectorBuffer.5" }
%"class.WTF::VectorBuffer.5" = type { %"class.WTF::VectorBufferBase.6" }
%"class.WTF::VectorBufferBase.6" = type { i16*, i32, i32 }
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::Document" = type opaque
%"class.WTF::Vector.25" = type { %"class.WTF::VectorBuffer.26" }
%"class.WTF::VectorBuffer.26" = type { %"class.WTF::VectorBufferBase.27" }
%"class.WTF::VectorBufferBase.27" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { %"class.WTF::String", %"class.WTF::String" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.33 }
%union.anon.33 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN5blink9HTMLTokenD2Ev = comdat any

$_ZN3WTF12VectorBufferIN5blink9HTMLToken9AttributeELj10ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_ = comdat any

$_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv = comdat any

$_ZN3WTF6VectorINSt3__14pairINS_6StringES3_EELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS4_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringES4_EEEEmm = comdat any

@_ZN5blink10html_names8kMetaTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kScriptTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names12kNoscriptTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kStyleTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kLinkTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kObjectTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kTitleTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kBaseTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kHTMLTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kHeadTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringES3_EEEEPKcv = private unnamed_addr constant [88 x i8] c"const char *WTF::GetStringWithTypeName() [T = std::__1::pair<WTF::String, WTF::String>]\00", align 1

@_ZN5blink21HTMLMetaCharsetParserC1Ev = hidden unnamed_addr alias void (%"class.blink::HTMLMetaCharsetParser"*), void (%"class.blink::HTMLMetaCharsetParser"*)* @_ZN5blink21HTMLMetaCharsetParserC2Ev
@_ZN5blink21HTMLMetaCharsetParserD1Ev = hidden unnamed_addr alias void (%"class.blink::HTMLMetaCharsetParser"*), void (%"class.blink::HTMLMetaCharsetParser"*)* @_ZN5blink21HTMLMetaCharsetParserD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21HTMLMetaCharsetParserC2Ev(%"class.blink::HTMLMetaCharsetParser"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::HTMLParserOptions", align 1
  %3 = getelementptr inbounds %"class.blink::HTMLParserOptions", %"class.blink::HTMLParserOptions"* %2, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3) #9
  call void @_ZN5blink17HTMLParserOptionsC1EPNS_8DocumentE(%"class.blink::HTMLParserOptions"* nonnull %2, %"class.blink::Document"* null) #9
  %4 = call noalias i8* @malloc(i64 248) #9
  %5 = bitcast i8* %4 to %"class.blink::HTMLTokenizer"*
  call void @_ZN5blink13HTMLTokenizerC1ERKNS_17HTMLParserOptionsE(%"class.blink::HTMLTokenizer"* %5, %"class.blink::HTMLParserOptions"* nonnull dereferenceable(2) %2) #9
  %6 = bitcast %"class.blink::HTMLMetaCharsetParser"* %0 to i8**
  store i8* %4, i8** %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3) #9
  %7 = call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF14Latin1EncodingEv() #9
  %8 = call %"class.WTF::TextCodec"* @_ZN3WTF12NewTextCodecERKNS_12TextEncodingE(%"class.WTF::TextEncoding"* dereferenceable(8) %7) #9
  %9 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::TextCodec"* %8, %"class.WTF::TextCodec"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 0, i32 3
  store i8 1, i8* %11, align 8
  %12 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 0, i32 4
  %13 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %13, align 8
  store i8 1, i8* %12, align 1
  %14 = bitcast %"class.blink::SegmentedString"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #9
  %15 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 1
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 2
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 3
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 5
  %19 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 7
  %20 = bitcast %"class.WTF::Deque"* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 25, i1 false) #9
  store i8 1, i8* %19, align 1
  %21 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 3, i32 0
  %22 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 3, i32 3, i64 0
  store i16* %22, i16** %21, align 8
  %23 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 3, i32 1
  %24 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 3, i32 2
  %25 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 3, i32 3, i64 256
  store i16* %25, i16** %24, align 8
  %26 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 6
  %27 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 6, i32 0, i32 1, i64 0
  %28 = bitcast %"class.WTF::Vector"* %26 to i8**
  store i8* %27, i8** %28, align 8
  %29 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 6, i32 0, i32 0, i32 1
  store i32 10, i32* %29, align 8
  %30 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 6, i32 0, i32 0, i32 2
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 8
  %32 = bitcast %"class.std::__1::unique_ptr.1"* %31 to i64*
  store i64 0, i64* %32, align 8
  %33 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 0
  store i32 0, i32* %33, align 8
  %34 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 1, i32 0
  store i32 0, i32* %34, align 4
  %35 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 2
  store i32 0, i32* %35, align 4
  %36 = ptrtoint i16* %22 to i64
  %37 = bitcast i16** %23 to i64*
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 4
  store i16 0, i16* %38, align 8
  %39 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 4
  store i8 1, i8* %39, align 8
  %40 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 5
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 6, i32 0
  store i8* null, i8** %41, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink17HTMLParserOptionsC1EPNS_8DocumentE(%"class.blink::HTMLParserOptions"*, %"class.blink::Document"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.WTF::TextCodec"* @_ZN3WTF12NewTextCodecERKNS_12TextEncodingE(%"class.WTF::TextEncoding"* dereferenceable(8)) local_unnamed_addr #2

declare dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF14Latin1EncodingEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21HTMLMetaCharsetParserD2Ev(%"class.blink::HTMLMetaCharsetParser"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3
  tail call void @_ZN5blink9HTMLTokenD2Ev(%"class.blink::HTMLToken"* %2) #9
  %3 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 5
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %4, align 8
  %6 = icmp eq %"class.blink::SegmentedSubstring"* %5, null
  br i1 %6, label %19, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.blink::SegmentedSubstring"* %5 to i8*
  %9 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 5, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 5, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %17, label %14

14:                                               ; preds = %7
  tail call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %3) #9
  %15 = bitcast %"class.WTF::Deque"* %3 to i8**
  %16 = load i8*, i8** %15, align 8
  br label %17

17:                                               ; preds = %14, %7
  %18 = phi i8* [ %16, %14 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %18) #9
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %4, align 8
  br label %19

19:                                               ; preds = %17, %1
  %20 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  br i1 %27, label %30, label %32

30:                                               ; preds = %23
  %31 = add i32 %29, -1
  store i32 %31, i32* %28, align 4
  br label %32

32:                                               ; preds = %30, %23
  %33 = phi i32 [ %31, %30 ], [ %29, %23 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %21) #9
  br label %36

36:                                               ; preds = %19, %32, %35
  %37 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %37, align 8
  store %"class.WTF::TextCodec"* null, %"class.WTF::TextCodec"** %37, align 8
  %39 = icmp eq %"class.WTF::TextCodec"* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %36
  %41 = bitcast %"class.WTF::TextCodec"* %38 to void (%"class.WTF::TextCodec"*)***
  %42 = load void (%"class.WTF::TextCodec"*)**, void (%"class.WTF::TextCodec"*)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %42, i64 1
  %44 = load void (%"class.WTF::TextCodec"*)*, void (%"class.WTF::TextCodec"*)** %43, align 8
  tail call void %44(%"class.WTF::TextCodec"* nonnull %38) #9
  br label %45

45:                                               ; preds = %36, %40
  %46 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %47 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %46, align 8
  store %"class.blink::HTMLTokenizer"* null, %"class.blink::HTMLTokenizer"** %46, align 8
  %48 = icmp eq %"class.blink::HTMLTokenizer"* %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %45
  tail call void @_ZN5blink13HTMLTokenizerD1Ev(%"class.blink::HTMLTokenizer"* nonnull %47) #9
  %50 = bitcast %"class.blink::HTMLTokenizer"* %47 to i8*
  tail call void @free(i8* %50) #9
  br label %51

51:                                               ; preds = %45, %49
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink9HTMLTokenD2Ev(%"class.blink::HTMLToken"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %3 = load %"class.blink::DoctypeData"*, %"class.blink::DoctypeData"** %2, align 8
  store %"class.blink::DoctypeData"* null, %"class.blink::DoctypeData"** %2, align 8
  %4 = icmp eq %"class.blink::DoctypeData"* %3, null
  br i1 %4, label %29, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 4, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp eq i16* %7, null
  %9 = bitcast i16* %7 to i8*
  br i1 %8, label %16, label %10, !prof !2

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 4, i32 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14, !prof !3

14:                                               ; preds = %10
  store i32 0, i32* %11, align 4
  br label %15

15:                                               ; preds = %14, %10
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %9) #9
  store i16* null, i16** %6, align 8
  br label %16

16:                                               ; preds = %15, %5
  %17 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 3, i32 0, i32 0, i32 0
  %18 = load i16*, i16** %17, align 8
  %19 = icmp eq i16* %18, null
  %20 = bitcast i16* %18 to i8*
  br i1 %19, label %27, label %21, !prof !2

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 3, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25, !prof !3

25:                                               ; preds = %21
  store i32 0, i32* %22, align 4
  br label %26

26:                                               ; preds = %25, %21
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %20) #9
  br label %27

27:                                               ; preds = %26, %16
  %28 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 0
  tail call void @free(i8* %28) #9
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 6
  %31 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %30, i64 0, i32 0, i32 0, i32 0
  br i1 %33, label %58, label %35, !prof !3

35:                                               ; preds = %29
  %36 = load %"class.blink::HTMLToken::Attribute"*, %"class.blink::HTMLToken::Attribute"** %34, align 8
  %37 = zext i32 %32 to i64
  %38 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %36, i64 %37
  br label %39

39:                                               ; preds = %54, %35
  %40 = phi %"class.blink::HTMLToken::Attribute"* [ %55, %54 ], [ %36, %35 ]
  %41 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 0, i32 1, i32 0
  %42 = load i16*, i16** %41, align 8
  %43 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 0, i32 1, i32 3, i64 0
  %44 = icmp eq i16* %42, %43
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = bitcast i16* %42 to i8*
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* %46) #9
  br label %47

47:                                               ; preds = %45, %39
  %48 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 0, i32 0, i32 0
  %49 = load i16*, i16** %48, align 8
  %50 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 0, i32 0, i32 3, i64 0
  %51 = icmp eq i16* %49, %50
  br i1 %51, label %54, label %52

52:                                               ; preds = %47
  %53 = bitcast i16* %49 to i8*
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* %53) #9
  br label %54

54:                                               ; preds = %52, %47
  %55 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 1
  %56 = icmp eq %"class.blink::HTMLToken::Attribute"* %55, %38
  br i1 %56, label %57, label %39

57:                                               ; preds = %54
  store i32 0, i32* %31, align 4
  br label %58

58:                                               ; preds = %57, %29
  %59 = load %"class.blink::HTMLToken::Attribute"*, %"class.blink::HTMLToken::Attribute"** %34, align 8
  %60 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 6, i32 0, i32 1, i64 0
  %61 = bitcast i8* %60 to %"class.blink::HTMLToken::Attribute"*
  %62 = icmp eq %"class.blink::HTMLToken::Attribute"* %59, %61
  br i1 %62, label %65, label %63, !prof !2

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %30, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink9HTMLToken9AttributeELj10ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer"* %64, %"class.blink::HTMLToken::Attribute"* %59) #9
  br label %65

65:                                               ; preds = %58, %63
  store %"class.blink::HTMLToken::Attribute"* null, %"class.blink::HTMLToken::Attribute"** %34, align 8
  %66 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 3, i32 0
  %67 = load i16*, i16** %66, align 8
  %68 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 3, i32 3, i64 0
  %69 = icmp eq i16* %67, %68
  br i1 %69, label %72, label %70

70:                                               ; preds = %65
  %71 = bitcast i16* %67 to i8*
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* %71) #9
  br label %72

72:                                               ; preds = %65, %70
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink21HTMLMetaCharsetParser11ProcessMetaEv(%"class.blink::HTMLMetaCharsetParser"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::Vector.25", align 8
  %3 = alloca %"struct.std::__1::pair", align 8
  %4 = bitcast %"class.WTF::Vector.25"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #9
  %5 = getelementptr inbounds %"class.WTF::Vector.25", %"class.WTF::Vector.25"* %2, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.WTF::Vector.25", %"class.WTF::Vector.25"* %2, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.WTF::Vector.25", %"class.WTF::Vector.25"* %2, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 16, i1 false) #9
  %8 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 6, i32 0, i32 0, i32 0
  %9 = load %"class.blink::HTMLToken::Attribute"*, %"class.blink::HTMLToken::Attribute"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 6, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %9, i64 %12
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = bitcast %"struct.std::__1::pair"* %3 to i8*
  %17 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %3, i64 0, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %3, i64 0, i32 1, i32 0, i32 0
  %19 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %3, i64 0, i32 1
  %20 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %19, i64 0, i32 0, i32 0
  %21 = bitcast %"class.WTF::String"* %19 to i64*
  br label %79

22:                                               ; preds = %213, %1
  %23 = call i8* @_ZN5blink26EncodingFromMetaAttributesERKN3WTF6VectorINSt3__14pairINS0_6StringES4_EELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector.25"* nonnull dereferenceable(16) %2) #9
  %24 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 6, i32 0
  store i8* %23, i8** %24, align 8
  %25 = icmp ne i8* %23, null
  %26 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %5, align 8
  %27 = icmp eq %"struct.std::__1::pair"* %26, null
  br i1 %27, label %78, label %28, !prof !2

28:                                               ; preds = %22
  %29 = bitcast %"struct.std::__1::pair"* %26 to i8*
  %30 = load i32, i32* %7, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %76, label %32, !prof !3

32:                                               ; preds = %28
  %33 = zext i32 %30 to i64
  %34 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %26, i64 %33
  br label %35

35:                                               ; preds = %32, %70
  %36 = phi %"struct.std::__1::pair"* [ %71, %70 ], [ %26, %32 ]
  %37 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 0, i32 1, i32 0, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %49

47:                                               ; preds = %40
  %48 = add i32 %46, -1
  store i32 %48, i32* %45, align 4
  br label %49

49:                                               ; preds = %47, %40
  %50 = phi i32 [ %48, %47 ], [ %46, %40 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #9
  br label %53

53:                                               ; preds = %52, %49, %35
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #9
  br label %70

70:                                               ; preds = %69, %66, %53
  %71 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 1
  %72 = icmp eq %"struct.std::__1::pair"* %71, %34
  br i1 %72, label %73, label %35

73:                                               ; preds = %70
  store i32 0, i32* %7, align 4
  %74 = bitcast %"class.WTF::Vector.25"* %2 to i8**
  %75 = load i8*, i8** %74, align 8
  br label %76

76:                                               ; preds = %73, %28
  %77 = phi i8* [ %75, %73 ], [ %29, %28 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %77) #9
  store %"struct.std::__1::pair"* null, %"struct.std::__1::pair"** %5, align 8
  br label %78

78:                                               ; preds = %22, %76
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #9
  ret i1 %25

79:                                               ; preds = %15, %213
  %80 = phi %"class.blink::HTMLToken::Attribute"* [ %9, %15 ], [ %214, %213 ]
  %81 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %80, i64 0, i32 0, i32 0
  %82 = load i16*, i16** %81, align 8
  %83 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %80, i64 0, i32 0, i32 1
  %84 = bitcast i16** %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = ptrtoint i16* %82 to i64
  %87 = sub i64 %85, %86
  %88 = lshr exact i64 %87, 1
  %89 = trunc i64 %88 to i32
  %90 = call %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16* %82, i32 %89, i32 0) #9
  %91 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %80, i64 0, i32 1, i32 0
  %92 = load i16*, i16** %91, align 8
  %93 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %80, i64 0, i32 1, i32 1
  %94 = bitcast i16** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = ptrtoint i16* %92 to i64
  %97 = sub i64 %95, %96
  %98 = lshr exact i64 %97, 1
  %99 = trunc i64 %98 to i32
  %100 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* %92, i32 %99) #9
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #9
  %101 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %101, label %119, label %102

102:                                              ; preds = %79
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %119

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i33
  %111 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %110, i33 1) #9
  %112 = extractvalue { i33, i1 } %111, 1
  %113 = extractvalue { i33, i1 } %111, 0
  %114 = icmp slt i33 %113, 0
  %115 = or i1 %112, %114
  br i1 %115, label %116, label %117, !prof !3

116:                                              ; preds = %107
  call void @llvm.trap() #9
  unreachable

117:                                              ; preds = %107
  %118 = trunc i33 %113 to i32
  store i32 %118, i32* %108, align 4
  br label %119

119:                                              ; preds = %117, %102, %79
  %120 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %120, label %138, label %121

121:                                              ; preds = %119
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load atomic i32, i32* %122 monotonic, align 4
  %124 = and i32 %123, 2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %138

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %128 to i33
  %130 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %129, i33 1) #9
  %131 = extractvalue { i33, i1 } %130, 1
  %132 = extractvalue { i33, i1 } %130, 0
  %133 = icmp slt i33 %132, 0
  %134 = or i1 %131, %133
  br i1 %134, label %135, label %136, !prof !3

135:                                              ; preds = %126
  call void @llvm.trap() #9
  unreachable

136:                                              ; preds = %126
  %137 = trunc i33 %132 to i32
  store i32 %137, i32* %127, align 4
  br label %138

138:                                              ; preds = %119, %121, %136
  store %"class.WTF::StringImpl"* %90, %"class.WTF::StringImpl"** %17, align 8
  store %"class.WTF::StringImpl"* %100, %"class.WTF::StringImpl"** %18, align 8
  %139 = load i32, i32* %7, align 4
  %140 = load i32, i32* %6, align 8
  %141 = icmp eq i32 %139, %140
  br i1 %141, label %153, label %142, !prof !3

142:                                              ; preds = %138
  %143 = ptrtoint %"class.WTF::StringImpl"* %90 to i64
  %144 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %5, align 8
  %145 = zext i32 %139 to i64
  %146 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 %145
  %147 = bitcast %"struct.std::__1::pair"* %146 to i64*
  store i64 %143, i64* %147, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %148 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 %145, i32 1
  %149 = load i64, i64* %21, align 8
  %150 = bitcast %"class.WTF::String"* %148 to i64*
  store i64 %149, i64* %150, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %20, align 8
  %151 = load i32, i32* %7, align 4
  %152 = add i32 %151, 1
  store i32 %152, i32* %7, align 4
  br label %169

153:                                              ; preds = %138
  call void @_ZN3WTF6VectorINSt3__14pairINS_6StringES3_EELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS4_EEvOT_(%"class.WTF::Vector.25"* nonnull %2, %"struct.std::__1::pair"* nonnull dereferenceable(16) %3) #9
  %154 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %155 = icmp eq %"class.WTF::StringImpl"* %154, null
  br i1 %155, label %169, label %156

156:                                              ; preds = %153
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load atomic i32, i32* %157 monotonic, align 4
  %159 = and i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 0
  %162 = load i32, i32* %161, align 4
  br i1 %160, label %163, label %165

163:                                              ; preds = %156
  %164 = add i32 %162, -1
  store i32 %164, i32* %161, align 4
  br label %165

165:                                              ; preds = %163, %156
  %166 = phi i32 [ %164, %163 ], [ %162, %156 ]
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %169

168:                                              ; preds = %165
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %154) #9
  br label %169

169:                                              ; preds = %142, %168, %165, %153
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %185, label %172

172:                                              ; preds = %169
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  br i1 %176, label %179, label %181

179:                                              ; preds = %172
  %180 = add i32 %178, -1
  store i32 %180, i32* %177, align 4
  br label %181

181:                                              ; preds = %179, %172
  %182 = phi i32 [ %180, %179 ], [ %178, %172 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %170) #9
  br label %185

185:                                              ; preds = %169, %181, %184
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #9
  br i1 %120, label %199, label %186

186:                                              ; preds = %185
  %187 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %188 = load atomic i32, i32* %187 monotonic, align 4
  %189 = and i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %192 = load i32, i32* %191, align 4
  br i1 %190, label %193, label %195

193:                                              ; preds = %186
  %194 = add i32 %192, -1
  store i32 %194, i32* %191, align 4
  br label %195

195:                                              ; preds = %193, %186
  %196 = phi i32 [ %194, %193 ], [ %192, %186 ]
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %199

198:                                              ; preds = %195
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #9
  br label %199

199:                                              ; preds = %185, %195, %198
  br i1 %101, label %213, label %200

200:                                              ; preds = %199
  %201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %202 = load atomic i32, i32* %201 monotonic, align 4
  %203 = and i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 0
  %206 = load i32, i32* %205, align 4
  br i1 %204, label %207, label %209

207:                                              ; preds = %200
  %208 = add i32 %206, -1
  store i32 %208, i32* %205, align 4
  br label %209

209:                                              ; preds = %207, %200
  %210 = phi i32 [ %208, %207 ], [ %206, %200 ]
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %213

212:                                              ; preds = %209
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %90) #9
  br label %213

213:                                              ; preds = %199, %209, %212
  %214 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %80, i64 1
  %215 = icmp eq %"class.blink::HTMLToken::Attribute"* %214, %13
  br i1 %215, label %22, label %79
}

declare i8* @_ZN5blink26EncodingFromMetaAttributesERKN3WTF6VectorINSt3__14pairINS0_6StringES4_EELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector.25"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink21HTMLMetaCharsetParser19CheckForMetaCharsetEPKcj(%"class.blink::HTMLMetaCharsetParser"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca i8, align 1
  %5 = alloca %"class.blink::SegmentedString", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 5
  %8 = load i8, i8* %7, align 1, !range !4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %252

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2
  %12 = bitcast %"class.blink::SegmentedString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %12) #9
  %13 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %13, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  store i8 -86, i8* %4, align 1
  %15 = bitcast %"class.WTF::TextCodec"* %14 to %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)***
  %16 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)**, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*** %15, align 8
  %17 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %16, i64 2
  %18 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %17, align 8
  %19 = call %"class.WTF::StringImpl"* %18(%"class.WTF::TextCodec"* %14, i8* %1, i32 %2, i32 0, i1 zeroext false, i8* nonnull dereferenceable(1) %4) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  %20 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 3
  store i8 1, i8* %20, align 8
  %21 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 4
  store i8 1, i8* %21, align 1
  %22 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %22, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %23, label %74, label %24

24:                                               ; preds = %10
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i33
  %33 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %32, i33 1) #9
  %34 = extractvalue { i33, i1 } %33, 1
  %35 = extractvalue { i33, i1 } %33, 0
  %36 = icmp slt i33 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %39, !prof !3

38:                                               ; preds = %29
  call void @llvm.trap() #9
  unreachable

39:                                               ; preds = %29
  %40 = trunc i33 %35 to i32
  store i32 %40, i32* %30, align 4
  br label %41

41:                                               ; preds = %39, %24
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %74, label %45

45:                                               ; preds = %41
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 1
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %62, label %51

51:                                               ; preds = %45
  store i8 1, i8* %21, align 1
  %52 = icmp eq %"class.WTF::StringImpl"* %46, null
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 1
  %54 = bitcast %"class.WTF::StringImpl"* %53 to i8*
  %55 = select i1 %52, i8* null, i8* %54
  %56 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 0, i32 0
  store i8* %55, i8** %56, align 8
  %57 = zext i32 %43 to i64
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  %59 = getelementptr inbounds i8, i8* %58, i64 -1
  %60 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 2
  store i8* %59, i8** %60, align 8
  %61 = ptrtoint i8* %55 to i64
  br label %77

62:                                               ; preds = %45
  store i8 0, i8* %21, align 1
  %63 = icmp eq %"class.WTF::StringImpl"* %46, null
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 1
  %65 = bitcast %"class.WTF::StringImpl"* %64 to i16*
  %66 = select i1 %63, i16* null, i16* %65
  %67 = bitcast %"class.blink::SegmentedString"* %5 to i16**
  store i16* %66, i16** %67, align 8
  %68 = zext i32 %43 to i64
  %69 = getelementptr inbounds i16, i16* %66, i64 %68
  %70 = getelementptr inbounds i16, i16* %69, i64 -1
  %71 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 2
  %72 = bitcast i8** %71 to i16**
  store i16* %70, i16** %72, align 8
  %73 = ptrtoint i16* %66 to i64
  br label %77

74:                                               ; preds = %10, %41
  store i8 1, i8* %21, align 1
  %75 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %75, align 8
  %76 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 2
  store i8* null, i8** %76, align 8
  br label %77

77:                                               ; preds = %74, %62, %51
  %78 = phi i64 [ %61, %51 ], [ %73, %62 ], [ 0, %74 ]
  %79 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 0, i32 1
  %80 = bitcast i8** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 1
  store i32 0, i32* %81, align 8
  %82 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 2
  store i32 0, i32* %82, align 4
  %83 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 3
  store i32 0, i32* %83, align 8
  %84 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 5
  %85 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 7
  %86 = bitcast %"class.WTF::Deque"* %84 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 25, i1 false) #9
  br i1 %23, label %92, label %87

87:                                               ; preds = %77
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, 0
  %91 = zext i1 %90 to i8
  br label %92

92:                                               ; preds = %77, %87
  %93 = phi i8 [ %91, %87 ], [ 1, %77 ]
  store i8 %93, i8* %85, align 1
  call void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"* %11, %"class.blink::SegmentedString"* nonnull dereferenceable(88) %5) #9
  %94 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %84, i64 0, i32 0, i32 0, i32 0, i32 0
  %95 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %94, align 8
  %96 = icmp eq %"class.blink::SegmentedSubstring"* %95, null
  br i1 %96, label %109, label %97

97:                                               ; preds = %92
  %98 = bitcast %"class.blink::SegmentedSubstring"* %95 to i8*
  %99 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 5, i32 1
  %100 = load i32, i32* %99, align 8
  %101 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %5, i64 0, i32 5, i32 2
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %100, %102
  br i1 %103, label %107, label %104

104:                                              ; preds = %97
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %84) #9
  %105 = bitcast %"class.WTF::Deque"* %84 to i8**
  %106 = load i8*, i8** %105, align 8
  br label %107

107:                                              ; preds = %104, %97
  %108 = phi i8* [ %106, %104 ], [ %98, %97 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %108) #9
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %94, align 8
  br label %109

109:                                              ; preds = %107, %92
  %110 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %111 = icmp eq %"class.WTF::StringImpl"* %110, null
  br i1 %111, label %125, label %112

112:                                              ; preds = %109
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 0
  %118 = load i32, i32* %117, align 4
  br i1 %116, label %119, label %121

119:                                              ; preds = %112
  %120 = add i32 %118, -1
  store i32 %120, i32* %117, align 4
  br label %121

121:                                              ; preds = %119, %112
  %122 = phi i32 [ %120, %119 ], [ %118, %112 ]
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %121
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %110) #9
  br label %125

125:                                              ; preds = %109, %121, %124
  br i1 %23, label %139, label %126

126:                                              ; preds = %125
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = and i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  br i1 %130, label %133, label %135

133:                                              ; preds = %126
  %134 = add i32 %132, -1
  store i32 %134, i32* %131, align 4
  br label %135

135:                                              ; preds = %133, %126
  %136 = phi i32 [ %134, %133 ], [ %132, %126 ]
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %135
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #9
  br label %139

139:                                              ; preds = %125, %135, %138
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %12) #9
  %140 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %141 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %140, align 8
  %142 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3
  %143 = call zeroext i1 @_ZN5blink13HTMLTokenizer9NextTokenERNS_15SegmentedStringERNS_9HTMLTokenE(%"class.blink::HTMLTokenizer"* %141, %"class.blink::SegmentedString"* dereferenceable(88) %11, %"class.blink::HTMLToken"* dereferenceable(2512) %142) #9
  br i1 %143, label %144, label %252

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %142, i64 0, i32 0
  %146 = bitcast %"class.WTF::String"* %6 to i8*
  %147 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 3, i32 0
  %149 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 3, i32 1
  %150 = bitcast i16** %149 to i64*
  %151 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kMetaTagE to %"class.blink::QualifiedName"**), align 8
  %152 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kScriptTagE to %"class.blink::QualifiedName"**), align 8
  %153 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kNoscriptTagE to %"class.blink::QualifiedName"**), align 8
  %154 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kStyleTagE to %"class.blink::QualifiedName"**), align 8
  %155 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kLinkTagE to %"class.blink::QualifiedName"**), align 8
  %156 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kObjectTagE to %"class.blink::QualifiedName"**), align 8
  %157 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTitleTagE to %"class.blink::QualifiedName"**), align 8
  %158 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kBaseTagE to %"class.blink::QualifiedName"**), align 8
  %159 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kHTMLTagE to %"class.blink::QualifiedName"**), align 8
  %160 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kHeadTagE to %"class.blink::QualifiedName"**), align 8
  %161 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 4
  %162 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 1
  %163 = bitcast %"class.blink::SegmentedString"* %11 to i64*
  %164 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 0, i32 1
  %165 = bitcast i8** %164 to i64*
  %166 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 2, i32 0, i32 4
  %167 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 1, i32 0
  %168 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 2
  %169 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 3
  %170 = bitcast %class.LiteralBuffer* %169 to i64*
  %171 = getelementptr inbounds %"class.blink::HTMLMetaCharsetParser", %"class.blink::HTMLMetaCharsetParser"* %0, i64 0, i32 3, i32 4
  br label %172

172:                                              ; preds = %144, %248
  %173 = load i32, i32* %145, align 8
  %174 = icmp eq i32 %173, 3
  %175 = and i32 %173, -2
  %176 = icmp eq i32 %175, 2
  br i1 %176, label %177, label %232

177:                                              ; preds = %172
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %146) #9
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %147, align 8
  %178 = load i16*, i16** %148, align 8
  %179 = load i64, i64* %150, align 8
  %180 = ptrtoint i16* %178 to i64
  %181 = sub i64 %179, %180
  %182 = lshr exact i64 %181, 1
  %183 = trunc i64 %182 to i32
  %184 = call %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16* %178, i32 %183, i32 0) #9
  store %"class.WTF::StringImpl"* %184, %"class.WTF::StringImpl"** %147, align 8
  br i1 %174, label %191, label %185

185:                                              ; preds = %177
  %186 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %140, align 8
  call void @_ZN5blink13HTMLTokenizer14UpdateStateForERKN3WTF6StringE(%"class.blink::HTMLTokenizer"* %186, %"class.WTF::String"* nonnull dereferenceable(8) %6) #9
  %187 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %151) #9
  br i1 %187, label %188, label %191

188:                                              ; preds = %185
  %189 = call zeroext i1 @_ZN5blink21HTMLMetaCharsetParser11ProcessMetaEv(%"class.blink::HTMLMetaCharsetParser"* %0)
  br i1 %189, label %190, label %191

190:                                              ; preds = %188
  store i8 1, i8* %7, align 1
  br label %213

191:                                              ; preds = %185, %188, %177
  %192 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %152) #9
  br i1 %192, label %213, label %193

193:                                              ; preds = %191
  %194 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %153) #9
  br i1 %194, label %213, label %195

195:                                              ; preds = %193
  %196 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %154) #9
  br i1 %196, label %213, label %197

197:                                              ; preds = %195
  %198 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %155) #9
  br i1 %198, label %213, label %199

199:                                              ; preds = %197
  %200 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %151) #9
  br i1 %200, label %213, label %201

201:                                              ; preds = %199
  %202 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %156) #9
  br i1 %202, label %213, label %203

203:                                              ; preds = %201
  %204 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %157) #9
  br i1 %204, label %213, label %205

205:                                              ; preds = %203
  %206 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %158) #9
  br i1 %206, label %213, label %207

207:                                              ; preds = %205
  br i1 %174, label %212, label %208

208:                                              ; preds = %207
  %209 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %159) #9
  br i1 %209, label %213, label %210

210:                                              ; preds = %208
  %211 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.blink::QualifiedName"* dereferenceable(8) %160) #9
  br i1 %211, label %213, label %212

212:                                              ; preds = %207, %210
  store i8 0, i8* %161, align 8
  br label %213

213:                                              ; preds = %191, %193, %195, %197, %199, %201, %203, %205, %208, %210, %212, %190
  %214 = phi i32 [ 1, %190 ], [ 0, %212 ], [ 0, %210 ], [ 0, %208 ], [ 0, %205 ], [ 0, %203 ], [ 0, %201 ], [ 0, %199 ], [ 0, %197 ], [ 0, %195 ], [ 0, %193 ], [ 0, %191 ]
  %215 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %147, align 8
  %216 = icmp eq %"class.WTF::StringImpl"* %215, null
  br i1 %216, label %230, label %217

217:                                              ; preds = %213
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %219 = load atomic i32, i32* %218 monotonic, align 4
  %220 = and i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 0
  %223 = load i32, i32* %222, align 4
  br i1 %221, label %224, label %226

224:                                              ; preds = %217
  %225 = add i32 %223, -1
  store i32 %225, i32* %222, align 4
  br label %226

226:                                              ; preds = %224, %217
  %227 = phi i32 [ %225, %224 ], [ %223, %217 ]
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %230

229:                                              ; preds = %226
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %215) #9
  br label %230

230:                                              ; preds = %213, %226, %229
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146) #9
  %231 = icmp eq i32 %214, 0
  br i1 %231, label %232, label %252

232:                                              ; preds = %172, %230
  %233 = load i8, i8* %161, align 8, !range !4
  %234 = icmp eq i8 %233, 0
  br i1 %234, label %235, label %248

235:                                              ; preds = %232
  %236 = load i32, i32* %162, align 8
  %237 = load i64, i64* %163, align 8
  %238 = load i64, i64* %165, align 8
  %239 = sub i64 %237, %238
  %240 = trunc i64 %239 to i32
  %241 = load i8, i8* %166, align 1, !range !4
  %242 = xor i8 %241, 1
  %243 = zext i8 %242 to i32
  %244 = ashr i32 %240, %243
  %245 = add nsw i32 %244, %236
  %246 = icmp sgt i32 %245, 1023
  br i1 %246, label %247, label %248

247:                                              ; preds = %235
  store i8 1, i8* %7, align 1
  br label %252

248:                                              ; preds = %235, %232
  store i32 0, i32* %145, align 8
  store i32 0, i32* %167, align 4
  store i32 0, i32* %168, align 4
  %249 = load i64, i64* %170, align 8
  store i64 %249, i64* %150, align 8
  store i16 0, i16* %171, align 8
  %250 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %140, align 8
  %251 = call zeroext i1 @_ZN5blink13HTMLTokenizer9NextTokenERNS_15SegmentedStringERNS_9HTMLTokenE(%"class.blink::HTMLTokenizer"* %250, %"class.blink::SegmentedString"* dereferenceable(88) %11, %"class.blink::HTMLToken"* dereferenceable(2512) %142) #9
  br i1 %251, label %172, label %252

252:                                              ; preds = %248, %230, %139, %247, %3
  %253 = phi i1 [ true, %3 ], [ true, %247 ], [ false, %139 ], [ false, %248 ], [ true, %230 ]
  ret i1 %253
}

declare void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"*, %"class.blink::SegmentedString"* dereferenceable(88)) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink13HTMLTokenizer9NextTokenERNS_15SegmentedStringERNS_9HTMLTokenE(%"class.blink::HTMLTokenizer"*, %"class.blink::SegmentedString"* dereferenceable(88), %"class.blink::HTMLToken"* dereferenceable(2512)) local_unnamed_addr #2

declare void @_ZN5blink13HTMLTokenizer14UpdateStateForERKN3WTF6StringE(%"class.blink::HTMLTokenizer"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8), %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink9HTMLToken9AttributeELj10ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer"*, %"class.blink::HTMLToken::Attribute"*) local_unnamed_addr #5 comdat align 2 {
  %3 = bitcast %"class.blink::HTMLToken::Attribute"* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"*) local_unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp ugt i32 %3, %5
  %7 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %9
  br i1 %6, label %37, label %11

11:                                               ; preds = %1
  %12 = icmp eq i32 %3, %5
  br i1 %12, label %95, label %13

13:                                               ; preds = %11
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %14
  br label %16

16:                                               ; preds = %13, %34
  %17 = phi %"class.blink::SegmentedSubstring"* [ %35, %34 ], [ %15, %13 ]
  %18 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 0, i32 5, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %21
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi i32 [ %29, %28 ], [ %27, %21 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #9
  br label %34

34:                                               ; preds = %33, %30, %16
  %35 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 1
  %36 = icmp eq %"class.blink::SegmentedSubstring"* %35, %10
  br i1 %36, label %95, label %16

37:                                               ; preds = %1
  %38 = icmp eq i32 %5, 0
  br i1 %38, label %63, label %39

39:                                               ; preds = %37, %57
  %40 = phi %"class.blink::SegmentedSubstring"* [ %58, %57 ], [ %8, %37 ]
  %41 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 0, i32 5, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #9
  br label %57

57:                                               ; preds = %56, %53, %39
  %58 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 1
  %59 = icmp eq %"class.blink::SegmentedSubstring"* %58, %10
  br i1 %59, label %60, label %39

60:                                               ; preds = %57
  %61 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %62 = load i32, i32* %2, align 8
  br label %63

63:                                               ; preds = %60, %37
  %64 = phi i32 [ %62, %60 ], [ %3, %37 ]
  %65 = phi %"class.blink::SegmentedSubstring"* [ %61, %60 ], [ %8, %37 ]
  %66 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %68
  %70 = icmp eq i32 %64, %67
  br i1 %70, label %95, label %71

71:                                               ; preds = %63
  %72 = zext i32 %64 to i64
  %73 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %72
  br label %74

74:                                               ; preds = %71, %92
  %75 = phi %"class.blink::SegmentedSubstring"* [ %93, %92 ], [ %73, %71 ]
  %76 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 0, i32 5, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %77) #9
  br label %92

92:                                               ; preds = %91, %88, %74
  %93 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 1
  %94 = icmp eq %"class.blink::SegmentedSubstring"* %93, %69
  br i1 %94, label %95, label %74

95:                                               ; preds = %34, %92, %63, %11
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16*, i32, i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16*, i32) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare void @_ZN5blink13HTMLTokenizerC1ERKNS_17HTMLParserOptionsE(%"class.blink::HTMLTokenizer"*, %"class.blink::HTMLParserOptions"* dereferenceable(2)) unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN5blink13HTMLTokenizerD1Ev(%"class.blink::HTMLTokenizer"*) unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINSt3__14pairINS_6StringES3_EELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS4_EEvOT_(%"class.WTF::Vector.25"*, %"struct.std::__1::pair"* dereferenceable(16)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.25", %"class.WTF::Vector.25"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.25", %"class.WTF::Vector.25"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %6, align 8
  %8 = icmp ugt %"struct.std::__1::pair"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %7, i64 %10
  %12 = icmp ugt %"struct.std::__1::pair"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.25", %"class.WTF::Vector.25"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !2

24:                                               ; preds = %13
  %25 = icmp eq %"struct.std::__1::pair"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringES4_EEEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringES3_EEEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.25"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 4
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"struct.std::__1::pair"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 4
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"struct.std::__1::pair"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"struct.std::__1::pair"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !2

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector.25"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector.25"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"struct.std::__1::pair"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"struct.std::__1::pair"* %1 to i64
  %56 = ptrtoint %"struct.std::__1::pair"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 4
  %59 = getelementptr inbounds %"class.WTF::Vector.25", %"class.WTF::Vector.25"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !2

69:                                               ; preds = %54
  %70 = icmp eq %"struct.std::__1::pair"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringES4_EEEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringES3_EEEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.25"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"struct.std::__1::pair"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"struct.std::__1::pair"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !2

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector.25"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector.25"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 4
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"struct.std::__1::pair"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"struct.std::__1::pair"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"struct.std::__1::pair"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"struct.std::__1::pair"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %100, i64 %103
  %105 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"struct.std::__1::pair"* %101 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"struct.std::__1::pair"* %104 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %105, align 8
  %109 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %100, i64 %103, i32 1
  %110 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 0, i32 1
  %111 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %110, i64 0, i32 0, i32 0
  %112 = bitcast %"class.WTF::String"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.WTF::String"* %109 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %111, align 8
  %115 = load i32, i32* %3, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringES4_EEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
