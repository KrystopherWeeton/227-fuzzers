; ModuleID = '../../third_party/skia/src/gpu/glsl/GrGLSL.cpp'
source_filename = "../../third_party/skia/src/gpu/glsl/GrGLSL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [5 x i8] c"void\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"bool2\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"bool3\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"bool4\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"byte\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"byte2\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"byte3\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"byte4\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"ubyte\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"ubyte2\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"ubyte3\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"ubyte4\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"short\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"short2\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"short3\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"short4\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"ushort\00", align 1
@.str.18 = private unnamed_addr constant [8 x i8] c"ushort2\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c"ushort3\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"ushort4\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"float2\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"float3\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"float4\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"float2x2\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c"float3x3\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"float4x4\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"half\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"half2\00", align 1
@.str.30 = private unnamed_addr constant [6 x i8] c"half3\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"half4\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"half2x2\00", align 1
@.str.33 = private unnamed_addr constant [8 x i8] c"half3x3\00", align 1
@.str.34 = private unnamed_addr constant [8 x i8] c"half4x4\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.36 = private unnamed_addr constant [5 x i8] c"int2\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"int3\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"int4\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.40 = private unnamed_addr constant [6 x i8] c"uint2\00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c"uint3\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"uint4\00", align 1
@.str.43 = private unnamed_addr constant [10 x i8] c"sampler2D\00", align 1
@.str.44 = private unnamed_addr constant [19 x i8] c"samplerExternalOES\00", align 1
@.str.45 = private unnamed_addr constant [14 x i8] c"sampler2DRect\00", align 1
@.str.46 = private unnamed_addr constant [10 x i8] c"texture2D\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"sampler\00", align 1
@.str.48 = private unnamed_addr constant [13 x i8] c"subpassInput\00", align 1
@.str.49 = private unnamed_addr constant [47 x i8] c"../../third_party/skia/src/gpu/glsl/GrGLSL.cpp\00", align 1
@.str.50 = private unnamed_addr constant [25 x i8] c"Unknown shader var type.\00", align 1
@switch.table._Z16GrGLSLTypeString8GrSLType = private unnamed_addr constant [49 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i64 0, i64 0)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_Z16GrGLSLTypeString8GrSLType(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 49
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.49, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.50, i64 0, i64 0)) #2
  unreachable

4:                                                ; preds = %1
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [49 x i8*], [49 x i8*]* @switch.table._Z16GrGLSLTypeString8GrSLType, i64 0, i64 %5
  %7 = load i8*, i8** %6, align 8
  ret i8* %7
}

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
