; ModuleID = '../../third_party/ffmpeg/libavformat/isom.c'
source_filename = "../../third_party/ffmpeg/libavformat/isom.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodecTag = type { i32, i32 }
%struct.MovChannelLayout = type { i64, i32 }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type { i32, %struct.AVBSFContext*, i32, %struct.AVCodecContext*, i32, i32, %struct.anon, i32, i32, %struct.FFFrac*, %struct.anon.0*, %struct.AVIndexEntry*, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], [17 x i64], i64, i8, i8, i32, %struct.AVRational, %struct.AVProbeData, %struct.AVPacketList* }
%struct.anon = type { %struct.AVBSFContext*, %struct.AVPacket*, i32 }
%struct.FFFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type { i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32, i64, %struct.AVRational, i32, i32, i32, i64, i32, i32, %struct.AVDictionary*, i32, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.MPEG4AudioConfig = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@ff_mp4_obj_type = hidden constant [38 x %struct.AVCodecTag] [%struct.AVCodecTag { i32 94213, i32 8 }, %struct.AVCodecTag { i32 12, i32 32 }, %struct.AVCodecTag { i32 27, i32 33 }, %struct.AVCodecTag { i32 173, i32 35 }, %struct.AVCodecTag { i32 86018, i32 64 }, %struct.AVCodecTag { i32 86061, i32 64 }, %struct.AVCodecTag { i32 2, i32 97 }, %struct.AVCodecTag { i32 2, i32 96 }, %struct.AVCodecTag { i32 2, i32 98 }, %struct.AVCodecTag { i32 2, i32 99 }, %struct.AVCodecTag { i32 2, i32 100 }, %struct.AVCodecTag { i32 2, i32 101 }, %struct.AVCodecTag { i32 86018, i32 102 }, %struct.AVCodecTag { i32 86018, i32 103 }, %struct.AVCodecTag { i32 86018, i32 104 }, %struct.AVCodecTag { i32 86017, i32 105 }, %struct.AVCodecTag { i32 86016, i32 105 }, %struct.AVCodecTag { i32 1, i32 106 }, %struct.AVCodecTag { i32 86017, i32 107 }, %struct.AVCodecTag { i32 7, i32 108 }, %struct.AVCodecTag { i32 61, i32 109 }, %struct.AVCodecTag { i32 88, i32 110 }, %struct.AVCodecTag { i32 70, i32 163 }, %struct.AVCodecTag { i32 116, i32 164 }, %struct.AVCodecTag { i32 86019, i32 165 }, %struct.AVCodecTag { i32 86056, i32 166 }, %struct.AVCodecTag { i32 86020, i32 169 }, %struct.AVCodecTag { i32 86076, i32 173 }, %struct.AVCodecTag { i32 167, i32 177 }, %struct.AVCodecTag { i32 86028, i32 193 }, %struct.AVCodecTag { i32 163, i32 208 }, %struct.AVCodecTag { i32 88067, i32 209 }, %struct.AVCodecTag { i32 86021, i32 221 }, %struct.AVCodecTag { i32 94208, i32 224 }, %struct.AVCodecTag { i32 86040, i32 225 }, %struct.AVCodecTag { i32 131073, i32 1 }, %struct.AVCodecTag { i32 131073, i32 2 }, %struct.AVCodecTag zeroinitializer], align 16
@ff_codec_movsubtitle_tags = hidden local_unnamed_addr constant [4 x %struct.AVCodecTag] [%struct.AVCodecTag { i32 94213, i32 1954047348 }, %struct.AVCodecTag { i32 94213, i32 1731426420 }, %struct.AVCodecTag { i32 96257, i32 942683747 }, %struct.AVCodecTag zeroinitializer], align 16
@ff_codec_movdata_tags = hidden local_unnamed_addr constant [2 x %struct.AVCodecTag] [%struct.AVCodecTag { i32 100359, i32 1684893799 }, %struct.AVCodecTag zeroinitializer], align 16
@mov_mdhd_language_map = internal constant [139 x [4 x i8]] [[4 x i8] c"eng\00", [4 x i8] c"fra\00", [4 x i8] c"ger\00", [4 x i8] c"ita\00", [4 x i8] c"dut\00", [4 x i8] c"sve\00", [4 x i8] c"spa\00", [4 x i8] c"dan\00", [4 x i8] c"por\00", [4 x i8] c"nor\00", [4 x i8] c"heb\00", [4 x i8] c"jpn\00", [4 x i8] c"ara\00", [4 x i8] c"fin\00", [4 x i8] c"gre\00", [4 x i8] c"ice\00", [4 x i8] c"mlt\00", [4 x i8] c"tur\00", [4 x i8] c"hr \00", [4 x i8] c"chi\00", [4 x i8] c"urd\00", [4 x i8] c"hin\00", [4 x i8] c"tha\00", [4 x i8] c"kor\00", [4 x i8] c"lit\00", [4 x i8] c"pol\00", [4 x i8] c"hun\00", [4 x i8] c"est\00", [4 x i8] c"lav\00", [4 x i8] zeroinitializer, [4 x i8] c"fo \00", [4 x i8] zeroinitializer, [4 x i8] c"rus\00", [4 x i8] c"chi\00", [4 x i8] zeroinitializer, [4 x i8] c"iri\00", [4 x i8] c"alb\00", [4 x i8] c"ron\00", [4 x i8] c"ces\00", [4 x i8] c"slk\00", [4 x i8] c"slv\00", [4 x i8] c"yid\00", [4 x i8] c"sr \00", [4 x i8] c"mac\00", [4 x i8] c"bul\00", [4 x i8] c"ukr\00", [4 x i8] c"bel\00", [4 x i8] c"uzb\00", [4 x i8] c"kaz\00", [4 x i8] c"aze\00", [4 x i8] c"aze\00", [4 x i8] c"arm\00", [4 x i8] c"geo\00", [4 x i8] c"mol\00", [4 x i8] c"kir\00", [4 x i8] c"tgk\00", [4 x i8] c"tuk\00", [4 x i8] c"mon\00", [4 x i8] zeroinitializer, [4 x i8] c"pus\00", [4 x i8] c"kur\00", [4 x i8] c"kas\00", [4 x i8] c"snd\00", [4 x i8] c"tib\00", [4 x i8] c"nep\00", [4 x i8] c"san\00", [4 x i8] c"mar\00", [4 x i8] c"ben\00", [4 x i8] c"asm\00", [4 x i8] c"guj\00", [4 x i8] c"pa \00", [4 x i8] c"ori\00", [4 x i8] c"mal\00", [4 x i8] c"kan\00", [4 x i8] c"tam\00", [4 x i8] c"tel\00", [4 x i8] zeroinitializer, [4 x i8] c"bur\00", [4 x i8] c"khm\00", [4 x i8] c"lao\00", [4 x i8] c"vie\00", [4 x i8] c"ind\00", [4 x i8] c"tgl\00", [4 x i8] c"may\00", [4 x i8] c"may\00", [4 x i8] c"amh\00", [4 x i8] c"tir\00", [4 x i8] c"orm\00", [4 x i8] c"som\00", [4 x i8] c"swa\00", [4 x i8] zeroinitializer, [4 x i8] c"run\00", [4 x i8] zeroinitializer, [4 x i8] c"mlg\00", [4 x i8] c"epo\00", [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] c"wel\00", [4 x i8] c"baq\00", [4 x i8] c"cat\00", [4 x i8] c"lat\00", [4 x i8] c"que\00", [4 x i8] c"grn\00", [4 x i8] c"aym\00", [4 x i8] c"tat\00", [4 x i8] c"uig\00", [4 x i8] c"dzo\00", [4 x i8] c"jav\00"], align 16
@.str = private unnamed_addr constant [4 x i8] c"und\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"MPEG-4 description: tag=0x%02x len=%d\0A\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"esds object type id 0x%02x\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"Specific MPEG-4 header len=%d\0A\00", align 1
@avpriv_mpa_freq_tab = external local_unnamed_addr constant [3 x i16], align 2
@.str.4 = private unnamed_addr constant [77 x i8] c"mp4a config channels %d obj %d ext obj %d sample rate %d ext sample rate %d\0A\00", align 1
@mp4_audio_types = internal constant [6 x %struct.AVCodecTag] [%struct.AVCodecTag { i32 86030, i32 29 }, %struct.AVCodecTag { i32 86030, i32 32 }, %struct.AVCodecTag { i32 86030, i32 33 }, %struct.AVCodecTag { i32 86030, i32 34 }, %struct.AVCodecTag { i32 86061, i32 36 }, %struct.AVCodecTag zeroinitializer], align 16
@mov_channel_layout = internal unnamed_addr constant [23 x %struct.MovChannelLayout] [%struct.MovChannelLayout { i64 4, i32 6553601 }, %struct.MovChannelLayout { i64 3, i32 6619138 }, %struct.MovChannelLayout { i64 3, i32 6684674 }, %struct.MovChannelLayout { i64 259, i32 8585219 }, %struct.MovChannelLayout { i64 51, i32 8650756 }, %struct.MovChannelLayout { i64 1539, i32 8650756 }, %struct.MovChannelLayout { i64 51, i32 7077892 }, %struct.MovChannelLayout { i64 7, i32 7405571 }, %struct.MovChannelLayout { i64 263, i32 7536644 }, %struct.MovChannelLayout { i64 55, i32 7667717 }, %struct.MovChannelLayout { i64 1543, i32 7667717 }, %struct.MovChannelLayout { i64 63, i32 7929862 }, %struct.MovChannelLayout { i64 1551, i32 7929862 }, %struct.MovChannelLayout { i64 1599, i32 8388616 }, %struct.MovChannelLayout { i64 1743, i32 8257544 }, %struct.MovChannelLayout { i64 1610612799, i32 8519688 }, %struct.MovChannelLayout { i64 11, i32 8716291 }, %struct.MovChannelLayout { i64 267, i32 8781828 }, %struct.MovChannelLayout { i64 59, i32 8847364 }, %struct.MovChannelLayout { i64 1547, i32 8847364 }, %struct.MovChannelLayout { i64 15, i32 8912900 }, %struct.MovChannelLayout { i64 271, i32 8978437 }, %struct.MovChannelLayout zeroinitializer], align 16

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @ff_mov_iso639_to_lang(i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = load i8, i8* %0, align 1
  %4 = icmp eq i8 %3, 0
  %5 = icmp ne i32 %1, 0
  %6 = or i1 %5, %4
  br i1 %6, label %15, label %7

7:                                                ; preds = %2, %12
  %8 = phi i64 [ %13, %12 ], [ 0, %2 ]
  %9 = getelementptr inbounds [139 x [4 x i8]], [139 x [4 x i8]]* @mov_mdhd_language_map, i64 0, i64 %8, i64 0
  %10 = tail call i32 @strcmp(i8* %0, i8* %9) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %27, label %12

12:                                               ; preds = %7
  %13 = add nuw nsw i64 %8, 1
  %14 = icmp ult i64 %13, 139
  br i1 %14, label %7, label %15

15:                                               ; preds = %12, %2
  %16 = phi i1 [ %4, %2 ], [ false, %12 ]
  br i1 %5, label %17, label %29

17:                                               ; preds = %15
  %18 = select i1 %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %0
  %19 = load i8, i8* %18, align 1
  %20 = add i8 %19, -96
  %21 = icmp ugt i8 %20, 31
  br i1 %21, label %29, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds i8, i8* %18, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = add i8 %24, -96
  %26 = icmp ugt i8 %25, 31
  br i1 %26, label %29, label %31

27:                                               ; preds = %7
  %28 = trunc i64 %8 to i32
  br label %29

29:                                               ; preds = %17, %22, %31, %36, %27, %15
  %30 = phi i32 [ -1, %15 ], [ %28, %27 ], [ -1, %17 ], [ -1, %22 ], [ -1, %31 ], [ %43, %36 ]
  ret i32 %30

31:                                               ; preds = %22
  %32 = getelementptr inbounds i8, i8* %18, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, -96
  %35 = icmp ugt i8 %34, 31
  br i1 %35, label %29, label %36

36:                                               ; preds = %31
  %37 = zext i8 %20 to i32
  %38 = shl nuw nsw i32 %37, 5
  %39 = zext i8 %25 to i32
  %40 = or i32 %38, %39
  %41 = zext i8 %34 to i32
  %42 = shl nuw nsw i32 %40, 5
  %43 = or i32 %42, %41
  br label %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @ff_mov_lang_to_iso639(i32, i8* nocapture) local_unnamed_addr #3 {
  %3 = bitcast i8* %1 to i32*
  store i32 0, i32* %3, align 1
  %4 = icmp ugt i32 %0, 1023
  %5 = icmp ne i32 %0, 32767
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %21

7:                                                ; preds = %2
  %8 = trunc i32 %0 to i8
  %9 = and i8 %8, 31
  %10 = or i8 %9, 96
  %11 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %10, i8* %11, align 1
  %12 = lshr i32 %0, 5
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 31
  %15 = or i8 %14, 96
  %16 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %0, 10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 31
  %20 = or i8 %19, 96
  store i8 %20, i8* %1, align 1
  br label %31

21:                                               ; preds = %2
  %22 = icmp ugt i32 %0, 138
  br i1 %22, label %31, label %23

23:                                               ; preds = %21
  %24 = zext i32 %0 to i64
  %25 = getelementptr inbounds [139 x [4 x i8]], [139 x [4 x i8]]* @mov_mdhd_language_map, i64 0, i64 %24, i64 0
  %26 = load i8, i8* %25, align 4
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %23
  %29 = bitcast i8* %25 to i32*
  %30 = load i32, i32* %29, align 4
  store i32 %30, i32* %3, align 1
  br label %31

31:                                               ; preds = %7, %23, %21, %28
  %32 = phi i32 [ 1, %28 ], [ 0, %21 ], [ 0, %23 ], [ 1, %7 ]
  ret i32 %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_mp4_read_descr_len(%struct.AVIOContext*) local_unnamed_addr #4 {
  br label %2

2:                                                ; preds = %6, %1
  %3 = phi i32 [ 4, %1 ], [ %7, %6 ]
  %4 = phi i32 [ 0, %1 ], [ %11, %6 ]
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = add nsw i32 %3, -1
  %8 = tail call i32 @avio_r8(%struct.AVIOContext* %0) #7
  %9 = shl i32 %4, 7
  %10 = and i32 %8, 127
  %11 = or i32 %10, %9
  %12 = trunc i32 %8 to i8
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %2, label %14

14:                                               ; preds = %2, %6
  %15 = phi i32 [ %11, %6 ], [ %4, %2 ]
  ret i32 %15
}

declare i32 @avio_r8(%struct.AVIOContext*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_mp4_read_descr(%struct.AVFormatContext*, %struct.AVIOContext*, i32* nocapture) local_unnamed_addr #4 {
  %4 = tail call i32 @avio_r8(%struct.AVIOContext* %1) #7
  store i32 %4, i32* %2, align 4
  br label %5

5:                                                ; preds = %9, %3
  %6 = phi i32 [ 4, %3 ], [ %10, %9 ]
  %7 = phi i32 [ 0, %3 ], [ %14, %9 ]
  %8 = icmp eq i32 %6, 0
  br i1 %8, label %17, label %9

9:                                                ; preds = %5
  %10 = add nsw i32 %6, -1
  %11 = tail call i32 @avio_r8(%struct.AVIOContext* %1) #7
  %12 = shl i32 %7, 7
  %13 = and i32 %11, 127
  %14 = or i32 %13, %12
  %15 = trunc i32 %11 to i8
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %5, label %17

17:                                               ; preds = %5, %9
  %18 = phi i32 [ %14, %9 ], [ %7, %5 ]
  %19 = bitcast %struct.AVFormatContext* %0 to i8*
  %20 = load i32, i32* %2, align 4
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %19, i32 56, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 %20, i32 %18) #7
  ret i32 %18
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_mp4_parse_es_descr(%struct.AVIOContext*, i32*) local_unnamed_addr #4 {
  %3 = icmp eq i32* %1, null
  %4 = tail call i32 @avio_rb16(%struct.AVIOContext* %0) #7
  br i1 %3, label %6, label %5

5:                                                ; preds = %2
  store i32 %4, i32* %1, align 4
  br label %6

6:                                                ; preds = %2, %5
  %7 = tail call i32 @avio_r8(%struct.AVIOContext* %0) #7
  %8 = trunc i32 %7 to i8
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = tail call i32 @avio_rb16(%struct.AVIOContext* %0) #7
  br label %12

12:                                               ; preds = %10, %6
  %13 = and i32 %7, 64
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %12
  %16 = tail call i32 @avio_r8(%struct.AVIOContext* %0) #7
  %17 = sext i32 %16 to i64
  %18 = tail call i64 @avio_skip(%struct.AVIOContext* %0, i64 %17) #7
  br label %19

19:                                               ; preds = %12, %15
  %20 = and i32 %7, 32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  %23 = tail call i32 @avio_rb16(%struct.AVIOContext* %0) #7
  br label %24

24:                                               ; preds = %19, %22
  ret void
}

declare i32 @avio_rb16(%struct.AVIOContext*) local_unnamed_addr #5

declare i64 @avio_skip(%struct.AVIOContext*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_mp4_read_dec_config_descr(%struct.AVFormatContext*, %struct.AVStream* nocapture readonly, %struct.AVIOContext*) local_unnamed_addr #4 {
  %4 = alloca %struct.MPEG4AudioConfig, align 4
  %5 = tail call i32 @avio_r8(%struct.AVIOContext* %2) #7
  %6 = tail call i32 @avio_r8(%struct.AVIOContext* %2) #7
  %7 = tail call i32 @avio_rb24(%struct.AVIOContext* %2) #7
  %8 = tail call i32 @avio_rb32(%struct.AVIOContext* %2) #7
  %9 = icmp ult i32 %8, 2147483647
  br i1 %9, label %10, label %15

10:                                               ; preds = %3
  %11 = zext i32 %8 to i64
  %12 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 2
  %13 = load %struct.AVCodecContext*, %struct.AVCodecContext** %12, align 8
  %14 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %13, i64 0, i32 103
  store i64 %11, i64* %14, align 8
  br label %15

15:                                               ; preds = %10, %3
  %16 = tail call i32 @avio_rb32(%struct.AVIOContext* %2) #7
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %1, i64 0, i32 19
  %19 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %20 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %19, i64 0, i32 6
  store i64 %17, i64* %20, align 8
  %21 = tail call i32 @ff_codec_get_id(%struct.AVCodecTag* getelementptr inbounds ([38 x %struct.AVCodecTag], [38 x %struct.AVCodecTag]* @ff_mp4_obj_type, i64 0, i64 0), i32 %5) #7
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %15
  %24 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %25 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %24, i64 0, i32 1
  store i32 %21, i32* %25, align 4
  br label %26

26:                                               ; preds = %15, %23
  %27 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %27, i32 56, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i32 %5) #7
  %28 = tail call i32 @avio_r8(%struct.AVIOContext* %2) #7
  br label %29

29:                                               ; preds = %33, %26
  %30 = phi i32 [ 4, %26 ], [ %34, %33 ]
  %31 = phi i32 [ 0, %26 ], [ %38, %33 ]
  %32 = icmp eq i32 %30, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %29
  %34 = add nsw i32 %30, -1
  %35 = tail call i32 @avio_r8(%struct.AVIOContext* %2) #7
  %36 = shl i32 %31, 7
  %37 = and i32 %35, 127
  %38 = or i32 %37, %36
  %39 = trunc i32 %35 to i8
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %29, label %41

41:                                               ; preds = %29, %33
  %42 = phi i32 [ %38, %33 ], [ %31, %29 ]
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %27, i32 56, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 %28, i32 %42) #7
  %43 = icmp eq i32 %28, 5
  br i1 %43, label %44, label %119

44:                                               ; preds = %41
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %27, i32 56, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i32 %42) #7
  %45 = or i32 %5, 2
  %46 = icmp eq i32 %45, 107
  br i1 %46, label %119, label %47

47:                                               ; preds = %44
  %48 = add i32 %42, -1
  %49 = icmp ugt i32 %48, 1073741823
  br i1 %49, label %119, label %50

50:                                               ; preds = %47
  %51 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %52 = tail call i32 @ff_get_extradata(%struct.AVFormatContext* %0, %struct.AVCodecParameters* %51, %struct.AVIOContext* %2, i32 %42) #7
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %119, label %54

54:                                               ; preds = %50
  %55 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %56 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %55, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 86018
  br i1 %58, label %59, label %119

59:                                               ; preds = %54
  %60 = bitcast %struct.MPEG4AudioConfig* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %60) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %60, i8 0, i64 48, i1 false)
  %61 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %55, i64 0, i32 3
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %55, i64 0, i32 4
  %64 = load i32, i32* %63, align 8
  %65 = call i32 @avpriv_mpeg4audio_get_config2(%struct.MPEG4AudioConfig* nonnull %4, i8* %62, i32 %64, i32 1, i8* %27) #7
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %118, label %67

67:                                               ; preds = %59
  %68 = getelementptr inbounds %struct.MPEG4AudioConfig, %struct.MPEG4AudioConfig* %4, i64 0, i32 9
  %69 = load i32, i32* %68, align 4
  %70 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %71 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %70, i64 0, i32 22
  store i32 %69, i32* %71, align 8
  %72 = getelementptr inbounds %struct.MPEG4AudioConfig, %struct.MPEG4AudioConfig* %4, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 29
  br i1 %74, label %75, label %88

75:                                               ; preds = %67
  %76 = getelementptr inbounds %struct.MPEG4AudioConfig, %struct.MPEG4AudioConfig* %4, i64 0, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = icmp slt i32 %77, 3
  br i1 %78, label %79, label %88

79:                                               ; preds = %75
  %80 = sext i32 %77 to i64
  %81 = getelementptr inbounds [3 x i16], [3 x i16]* @avpriv_mpa_freq_tab, i64 0, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %85 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %84, i64 0, i32 23
  store i32 %83, i32* %85, align 4
  %86 = getelementptr inbounds %struct.MPEG4AudioConfig, %struct.MPEG4AudioConfig* %4, i64 0, i32 7
  %87 = load i32, i32* %86, align 4
  br label %100

88:                                               ; preds = %75, %67
  %89 = getelementptr inbounds %struct.MPEG4AudioConfig, %struct.MPEG4AudioConfig* %4, i64 0, i32 7
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %88
  %93 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %94 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %93, i64 0, i32 23
  store i32 %90, i32* %94, align 4
  br label %100

95:                                               ; preds = %88
  %96 = getelementptr inbounds %struct.MPEG4AudioConfig, %struct.MPEG4AudioConfig* %4, i64 0, i32 2
  %97 = load i32, i32* %96, align 4
  %98 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %99 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %98, i64 0, i32 23
  store i32 %97, i32* %99, align 4
  br label %100

100:                                              ; preds = %92, %95, %79
  %101 = phi i32 [ %90, %92 ], [ 0, %95 ], [ %87, %79 ]
  %102 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %103 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %102, i64 0, i32 22
  %104 = load i32, i32* %103, align 8
  %105 = getelementptr inbounds %struct.MPEG4AudioConfig, %struct.MPEG4AudioConfig* %4, i64 0, i32 5
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %struct.MPEG4AudioConfig, %struct.MPEG4AudioConfig* %4, i64 0, i32 2
  %108 = load i32, i32* %107, align 4
  call void (i8*, i32, i8*, ...) @av_log(i8* %27, i32 56, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.4, i64 0, i64 0), i32 %104, i32 %73, i32 %106, i32 %108, i32 %101) #7
  %109 = load i32, i32* %72, align 4
  %110 = call i32 @ff_codec_get_id(%struct.AVCodecTag* getelementptr inbounds ([6 x %struct.AVCodecTag], [6 x %struct.AVCodecTag]* @mp4_audio_types, i64 0, i64 0), i32 %109) #7
  %111 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %112 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %111, i64 0, i32 1
  store i32 %110, i32* %112, align 4
  %113 = icmp eq i32 %110, 0
  br i1 %113, label %114, label %117

114:                                              ; preds = %100
  %115 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %18, align 8
  %116 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %115, i64 0, i32 1
  store i32 86018, i32* %116, align 4
  br label %117

117:                                              ; preds = %114, %100
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %60) #7
  br label %119

118:                                              ; preds = %59
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %60) #7
  br label %119

119:                                              ; preds = %41, %54, %117, %118, %50, %47, %44
  %120 = phi i32 [ 0, %44 ], [ -1094995529, %47 ], [ %52, %50 ], [ %65, %118 ], [ 0, %117 ], [ 0, %54 ], [ 0, %41 ]
  ret i32 %120
}

declare i32 @avio_rb24(%struct.AVIOContext*) local_unnamed_addr #5

declare i32 @avio_rb32(%struct.AVIOContext*) local_unnamed_addr #5

declare i32 @ff_codec_get_id(%struct.AVCodecTag*, i32) local_unnamed_addr #5

declare i32 @ff_get_extradata(%struct.AVFormatContext*, %struct.AVCodecParameters*, %struct.AVIOContext*, i32) local_unnamed_addr #5

declare i32 @avpriv_mpeg4audio_get_config2(%struct.MPEG4AudioConfig*, i8*, i32, i32, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_mov_write_chan(%struct.AVIOContext*, i64) local_unnamed_addr #4 {
  switch i64 %1, label %28 [
    i64 4, label %22
    i64 3, label %3
    i64 259, label %4
    i64 51, label %5
    i64 1539, label %6
    i64 7, label %7
    i64 263, label %8
    i64 55, label %9
    i64 1543, label %10
    i64 63, label %11
    i64 1551, label %12
    i64 1599, label %13
    i64 1743, label %14
    i64 1610612799, label %15
    i64 11, label %16
    i64 267, label %17
    i64 59, label %18
    i64 1547, label %19
    i64 15, label %20
    i64 271, label %21
  ]

3:                                                ; preds = %2
  br label %22

4:                                                ; preds = %2
  br label %22

5:                                                ; preds = %2
  br label %22

6:                                                ; preds = %2
  br label %22

7:                                                ; preds = %2
  br label %22

8:                                                ; preds = %2
  br label %22

9:                                                ; preds = %2
  br label %22

10:                                               ; preds = %2
  br label %22

11:                                               ; preds = %2
  br label %22

12:                                               ; preds = %2
  br label %22

13:                                               ; preds = %2
  br label %22

14:                                               ; preds = %2
  br label %22

15:                                               ; preds = %2
  br label %22

16:                                               ; preds = %2
  br label %22

17:                                               ; preds = %2
  br label %22

18:                                               ; preds = %2
  br label %22

19:                                               ; preds = %2
  br label %22

20:                                               ; preds = %2
  br label %22

21:                                               ; preds = %2
  br label %22

22:                                               ; preds = %2, %21, %20, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3
  %23 = phi %struct.MovChannelLayout* [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 0), %2 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 1), %3 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 3), %4 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 4), %5 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 5), %6 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 7), %7 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 8), %8 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 9), %9 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 10), %10 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 11), %11 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 12), %12 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 13), %13 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 14), %14 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 15), %15 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 16), %16 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 17), %17 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 18), %18 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 19), %19 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 20), %20 ], [ getelementptr inbounds ([23 x %struct.MovChannelLayout], [23 x %struct.MovChannelLayout]* @mov_channel_layout, i64 0, i64 21), %21 ]
  %24 = getelementptr inbounds %struct.MovChannelLayout, %struct.MovChannelLayout* %23, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %22
  tail call void @avio_wb32(%struct.AVIOContext* %0, i32 %25) #7
  br label %30

28:                                               ; preds = %2, %22
  tail call void @avio_wb32(%struct.AVIOContext* %0, i32 65536) #7
  %29 = trunc i64 %1 to i32
  br label %30

30:                                               ; preds = %28, %27
  %31 = phi i32 [ %29, %28 ], [ 0, %27 ]
  tail call void @avio_wb32(%struct.AVIOContext* %0, i32 %31) #7
  tail call void @avio_wb32(%struct.AVIOContext* %0, i32 0) #7
  ret void
}

declare void @avio_wb32(%struct.AVIOContext*, i32) local_unnamed_addr #5

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
