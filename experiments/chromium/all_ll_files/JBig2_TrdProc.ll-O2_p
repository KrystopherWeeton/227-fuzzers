; ModuleID = '../../third_party/pdfium/core/fxcodec/jbig2/JBig2_TrdProc.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jbig2/JBig2_TrdProc.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.JBig2IntDecoderState = type { %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr.1" }
%"class.fxcrt::UnownedPtr" = type { %class.CJBig2_ArithIntDecoder* }
%class.CJBig2_ArithIntDecoder = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.JBig2ArithCtx*, %class.JBig2ArithCtx*, %"class.std::__1::__compressed_pair" }
%class.JBig2ArithCtx = type { i8, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.JBig2ArithCtx* }
%"class.fxcrt::UnownedPtr.1" = type { %class.CJBig2_ArithIaidDecoder* }
%class.CJBig2_ArithIaidDecoder = type <{ %"class.std::__1::vector", i8, [7 x i8] }>
%class.CJBig2_TRDProc = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, [4 x i8], %"class.std::__1::vector.2", %class.CJBig2_Image**, i32, i32, %"class.fxcrt::UnownedPtr.13", %"class.fxcrt::UnownedPtr.13", %"class.fxcrt::UnownedPtr.13", %"class.fxcrt::UnownedPtr.13", %"class.fxcrt::UnownedPtr.13", %"class.fxcrt::UnownedPtr.13", %"class.fxcrt::UnownedPtr.13", %"class.fxcrt::UnownedPtr.13", [4 x i8], [4 x i8] }>
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode*, %"class.std::__1::__compressed_pair.4" }
%struct.JBig2HuffmanCode = type { i32, i32 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %struct.JBig2HuffmanCode* }
%class.CJBig2_Image = type <{ %"class.fxcrt::MaybeOwned", i32, i32, i32, [4 x i8] }>
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr", %"class.fxcrt::UnownedPtr.12" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i8* }
%"class.fxcrt::UnownedPtr.12" = type { i8* }
%"class.fxcrt::UnownedPtr.13" = type { %class.CJBig2_HuffmanTable* }
%class.CJBig2_HuffmanTable = type { i8, i8, i32, %"class.std::__1::vector.2", %"class.std::__1::vector.14", %"class.std::__1::vector.14" }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { i32*, i32*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i32* }
%class.CJBig2_BitStream = type <{ %"class.pdfium::span", i32, i32, i32, [4 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.25", i64 }
%"class.fxcrt::UnownedPtr.25" = type { i8* }
%class.CJBig2_HuffmanDecoder = type { %"class.fxcrt::UnownedPtr.29" }
%"class.fxcrt::UnownedPtr.29" = type { %class.CJBig2_BitStream* }
%class.CJBig2_GRRDProc = type <{ i8, i8, [2 x i8], i32, i32, i32, i32, [4 x i8], %"class.fxcrt::UnownedPtr.34", [4 x i8], [4 x i8] }>
%"class.fxcrt::UnownedPtr.34" = type { %class.CJBig2_Image* }
%class.CJBig2_ArithDecoder = type { i8, i8, i8, i32, i32, i32, %"class.fxcrt::UnownedPtr.29" }

@_ZN20JBig2IntDecoderStateC1Ev = hidden unnamed_addr alias void (%struct.JBig2IntDecoderState*), void (%struct.JBig2IntDecoderState*)* @_ZN20JBig2IntDecoderStateC2Ev
@_ZN20JBig2IntDecoderStateD1Ev = hidden unnamed_addr alias void (%struct.JBig2IntDecoderState*), void (%struct.JBig2IntDecoderState*)* @_ZN20JBig2IntDecoderStateD2Ev
@_ZN14CJBig2_TRDProcC1Ev = hidden unnamed_addr alias void (%class.CJBig2_TRDProc*), void (%class.CJBig2_TRDProc*)* @_ZN14CJBig2_TRDProcC2Ev
@_ZN14CJBig2_TRDProcD1Ev = hidden unnamed_addr alias void (%class.CJBig2_TRDProc*), void (%class.CJBig2_TRDProc*)* @_ZN14CJBig2_TRDProcD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20JBig2IntDecoderStateC2Ev(%struct.JBig2IntDecoderState* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %struct.JBig2IntDecoderState* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 80, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN20JBig2IntDecoderStateD2Ev(%struct.JBig2IntDecoderState* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CJBig2_TRDProcC2Ev(%class.CJBig2_TRDProc* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 14
  %3 = bitcast %"class.std::__1::vector.2"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #12
  %4 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 18, i32 0
  %5 = bitcast %class.CJBig2_HuffmanTable** %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CJBig2_TRDProcD2Ev(%class.CJBig2_TRDProc* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 14, i32 0, i32 0
  %3 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %2, align 8
  %4 = icmp eq %struct.JBig2HuffmanCode* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %struct.JBig2HuffmanCode* %3 to i64
  %7 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 14, i32 0, i32 1
  %8 = bitcast %struct.JBig2HuffmanCode** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %struct.JBig2HuffmanCode* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #13
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CJBig2_Image* @_ZN14CJBig2_TRDProc13DecodeHuffmanEP16CJBig2_BitStreamP13JBig2ArithCtx(%class.CJBig2_TRDProc* readonly, %class.CJBig2_BitStream*, %class.JBig2ArithCtx*) local_unnamed_addr #2 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 8
  %17 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 9
  %18 = tail call i8* @_Znwm(i64 32) #13
  %19 = bitcast i8* %18 to %class.CJBig2_Image*
  %20 = load i32, i32* %16, align 4
  %21 = load i32, i32* %17, align 4
  tail call void @_ZN12CJBig2_ImageC1Eii(%class.CJBig2_Image* nonnull %19, i32 %20, i32 %21) #12
  %22 = ptrtoint i8* %18 to i64
  %23 = getelementptr inbounds i8, i8* %18, i64 8
  %24 = bitcast i8* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %506, label %27

27:                                               ; preds = %3
  %28 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 4
  %29 = load i8, i8* %28, align 4, !range !2
  %30 = icmp ne i8 %29, 0
  tail call void @_ZN12CJBig2_Image4FillEb(%class.CJBig2_Image* nonnull %19, i1 zeroext %30) #12
  %31 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #12
  store i32 -1431655766, i32* %4, align 4
  %32 = tail call i8* @_Znwm(i64 8) #13
  %33 = bitcast i8* %32 to %class.CJBig2_HuffmanDecoder*
  tail call void @_ZN21CJBig2_HuffmanDecoderC1EP16CJBig2_BitStream(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_BitStream* %1) #12
  %34 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 20, i32 0
  %35 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %34, align 8
  %36 = call i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_HuffmanTable* %35, i32* nonnull %4) #12
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %502

38:                                               ; preds = %27
  %39 = load i32, i32* %4, align 4
  %40 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 11
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %39, 0
  %43 = sub i32 0, %39
  %44 = select i1 %42, i32 %43, i32 %39
  %45 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %44, i32 %41) #12
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = lshr i32 %39, 31
  %49 = add nuw i32 %48, 2147483647
  %50 = icmp ugt i32 %47, %49
  %51 = or i1 %46, %50
  %52 = sub i32 0, %47
  %53 = select i1 %42, i32 %52, i32 %47
  %54 = xor i1 %51, true
  %55 = call i1 @llvm.is.constant.i32(i32 %53) #12
  br i1 %55, label %56, label %60

56:                                               ; preds = %38
  %57 = sub i32 0, %53
  %58 = icmp ne i32 %57, -2147483648
  %59 = and i1 %58, %54
  br label %66

60:                                               ; preds = %38
  %61 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %53) #12
  %62 = extractvalue { i32, i1 } %61, 1
  %63 = extractvalue { i32, i1 } %61, 0
  %64 = xor i1 %62, true
  %65 = and i1 %54, %64
  br label %66

66:                                               ; preds = %56, %60
  %67 = phi i32 [ %57, %56 ], [ %63, %60 ]
  %68 = phi i1 [ %59, %56 ], [ %65, %60 ]
  %69 = zext i1 %68 to i8
  %70 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 10
  %71 = bitcast i32* %5 to i8*
  %72 = bitcast i32* %6 to i8*
  %73 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 18, i32 0
  %74 = bitcast i32* %7 to i8*
  %75 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 19, i32 0
  %76 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 5
  %77 = bitcast i32* %8 to i8*
  %78 = bitcast i32* %9 to i8*
  %79 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 12
  %80 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 14, i32 0, i32 0
  %81 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 1
  %82 = bitcast i32* %11 to i8*
  %83 = bitcast i32* %12 to i8*
  %84 = bitcast i32* %13 to i8*
  %85 = bitcast i32* %14 to i8*
  %86 = bitcast i32* %15 to i8*
  %87 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 21, i32 0
  %88 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 22, i32 0
  %89 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 23, i32 0
  %90 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 24, i32 0
  %91 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 25, i32 0
  %92 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 15
  %93 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 2
  %94 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 26, i64 0
  %95 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 26, i64 1
  %96 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 26, i64 2
  %97 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 26, i64 3
  %98 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 3
  %99 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 17
  %100 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 16
  br label %101

101:                                              ; preds = %496, %66
  %102 = phi i32 [ 0, %66 ], [ %497, %496 ]
  %103 = phi i8 [ 1, %66 ], [ %498, %496 ]
  %104 = phi i8 [ %69, %66 ], [ %140, %496 ]
  %105 = phi i32 [ %67, %66 ], [ %138, %496 ]
  %106 = phi i32 [ 0, %66 ], [ %499, %496 ]
  %107 = load i32, i32* %70, align 8
  %108 = icmp ult i32 %106, %107
  br i1 %108, label %109, label %502

109:                                              ; preds = %101
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %71) #12
  store i32 -1431655766, i32* %5, align 4
  %110 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %34, align 8
  %111 = call i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_HuffmanTable* %110, i32* nonnull %5) #12
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %495

113:                                              ; preds = %109
  %114 = load i32, i32* %5, align 4
  %115 = load i32, i32* %40, align 4
  %116 = icmp slt i32 %114, 0
  %117 = sub i32 0, %114
  %118 = select i1 %116, i32 %117, i32 %114
  %119 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %118, i32 %115) #12
  %120 = extractvalue { i32, i1 } %119, 1
  %121 = extractvalue { i32, i1 } %119, 0
  %122 = lshr i32 %114, 31
  %123 = add nuw i32 %122, 2147483647
  %124 = icmp ugt i32 %121, %123
  %125 = or i1 %120, %124
  %126 = xor i1 %125, true
  %127 = icmp ne i8 %104, 0
  %128 = and i1 %127, %126
  br i1 %128, label %129, label %137

129:                                              ; preds = %113
  %130 = sub i32 0, %121
  %131 = select i1 %116, i32 %130, i32 %121
  %132 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %105, i32 %131) #12
  %133 = extractvalue { i32, i1 } %132, 1
  %134 = extractvalue { i32, i1 } %132, 0
  %135 = xor i1 %133, true
  %136 = zext i1 %135 to i64
  br label %137

137:                                              ; preds = %113, %129
  %138 = phi i32 [ %134, %129 ], [ 0, %113 ]
  %139 = phi i64 [ %136, %129 ], [ 0, %113 ]
  %140 = trunc i64 %139 to i8
  %141 = icmp eq i64 %139, 0
  br label %142

142:                                              ; preds = %493, %137
  %143 = phi i32 [ %102, %137 ], [ %188, %493 ]
  %144 = phi i8 [ %103, %137 ], [ %189, %493 ]
  %145 = phi i32 [ 0, %137 ], [ %483, %493 ]
  %146 = phi i8 [ 1, %137 ], [ %484, %493 ]
  %147 = phi i8 [ 1, %137 ], [ %190, %493 ]
  %148 = phi i32 [ %106, %137 ], [ %486, %493 ]
  %149 = and i8 %147, 1
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %165, label %151

151:                                              ; preds = %142
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %72) #12
  store i32 -1431655766, i32* %6, align 4
  %152 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %73, align 8
  %153 = call i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_HuffmanTable* %152, i32* nonnull %6) #12
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %164

155:                                              ; preds = %151
  %156 = icmp eq i8 %144, 0
  br i1 %156, label %184, label %157

157:                                              ; preds = %155
  %158 = load i32, i32* %6, align 4
  %159 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %143, i32 %158) #12
  %160 = extractvalue { i32, i1 } %159, 1
  %161 = extractvalue { i32, i1 } %159, 0
  %162 = xor i1 %160, true
  %163 = zext i1 %162 to i8
  br label %184

164:                                              ; preds = %151
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %72) #12
  br label %495

165:                                              ; preds = %142
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %74) #12
  store i32 -1431655766, i32* %7, align 4
  %166 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %75, align 8
  %167 = call i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_HuffmanTable* %166, i32* nonnull %7) #12
  switch i32 %167, label %168 [
    i32 1, label %494
    i32 0, label %169
  ]

168:                                              ; preds = %165
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %74) #12
  br label %495

169:                                              ; preds = %165
  %170 = icmp eq i8 %146, 0
  br i1 %170, label %184, label %171

171:                                              ; preds = %169
  %172 = load i32, i32* %7, align 4
  %173 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %145, i32 %172) #12
  %174 = extractvalue { i32, i1 } %173, 1
  br i1 %174, label %184, label %175

175:                                              ; preds = %171
  %176 = extractvalue { i32, i1 } %173, 0
  %177 = load i8, i8* %76, align 1
  %178 = sext i8 %177 to i32
  %179 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %176, i32 %178) #12
  %180 = extractvalue { i32, i1 } %179, 1
  %181 = extractvalue { i32, i1 } %179, 0
  %182 = xor i1 %180, true
  %183 = zext i1 %182 to i8
  br label %184

184:                                              ; preds = %171, %175, %169, %155, %157
  %185 = phi i8* [ %72, %157 ], [ %72, %155 ], [ %74, %169 ], [ %74, %175 ], [ %74, %171 ]
  %186 = phi i32 [ %161, %157 ], [ 0, %155 ], [ 0, %169 ], [ %181, %175 ], [ 0, %171 ]
  %187 = phi i8 [ %163, %157 ], [ 0, %155 ], [ 0, %169 ], [ %183, %175 ], [ 0, %171 ]
  %188 = phi i32 [ %161, %157 ], [ 0, %155 ], [ %143, %169 ], [ %143, %175 ], [ %143, %171 ]
  %189 = phi i8 [ %163, %157 ], [ 0, %155 ], [ %144, %169 ], [ %144, %175 ], [ %144, %171 ]
  %190 = phi i8 [ 0, %157 ], [ 0, %155 ], [ %147, %169 ], [ %147, %175 ], [ %147, %171 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %185) #12
  %191 = load i32, i32* %40, align 4
  %192 = icmp eq i32 %191, 1
  br i1 %192, label %204, label %193

193:                                              ; preds = %184, %193
  %194 = phi i32 [ %197, %193 ], [ 1, %184 ]
  %195 = shl i32 1, %194
  %196 = icmp ult i32 %195, %191
  %197 = add i32 %194, 1
  br i1 %196, label %193, label %198

198:                                              ; preds = %193
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %77) #12
  store i32 -1431655766, i32* %8, align 4
  %199 = call i32 @_ZN16CJBig2_BitStream9readNBitsEjPi(%class.CJBig2_BitStream* %1, i32 %194, i32* nonnull %8) #12
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %203

201:                                              ; preds = %198
  %202 = load i32, i32* %8, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %77) #12
  br label %204

203:                                              ; preds = %198
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %77) #12
  br label %495

204:                                              ; preds = %201, %184
  %205 = phi i32 [ 0, %184 ], [ %202, %201 ]
  br i1 %141, label %495, label %206

206:                                              ; preds = %204
  %207 = and i32 %205, 255
  %208 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %138, i32 %207) #12
  %209 = extractvalue { i32, i1 } %208, 1
  %210 = extractvalue { i32, i1 } %208, 0
  br i1 %209, label %495, label %211

211:                                              ; preds = %206
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %78) #12
  store i32 -1431655766, i32* %9, align 4
  %212 = call i32 @_ZN16CJBig2_BitStream8read1BitEPj(%class.CJBig2_BitStream* %1, i32* nonnull %9) #12
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %251

214:                                              ; preds = %211, %252
  %215 = phi i32 [ %230, %252 ], [ 0, %211 ]
  %216 = phi i8 [ %229, %252 ], [ 1, %211 ]
  %217 = phi i32 [ %226, %252 ], [ 0, %211 ]
  %218 = icmp ne i8 %216, 0
  %219 = add nuw i32 %217, 1073741824
  %220 = or i32 %217, %219
  %221 = icmp sgt i32 %220, -1
  %222 = and i1 %221, %218
  br i1 %222, label %223, label %251, !prof !3

223:                                              ; preds = %214
  %224 = shl i32 %217, 1
  %225 = load i32, i32* %9, align 4
  %226 = or i32 %225, %224
  %227 = lshr i32 %226, 31
  %228 = trunc i32 %227 to i8
  %229 = xor i8 %228, 1
  %230 = add nuw nsw i32 %215, 1
  %231 = icmp eq i8 %229, 0
  br i1 %231, label %238, label %232, !prof !4

232:                                              ; preds = %223
  %233 = load i32, i32* %79, align 8
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %252, label %235

235:                                              ; preds = %232
  %236 = load %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode** %80, align 8
  %237 = zext i32 %233 to i64
  br label %239

238:                                              ; preds = %223
  call void @llvm.trap() #12
  unreachable

239:                                              ; preds = %235, %248
  %240 = phi i64 [ 0, %235 ], [ %249, %248 ]
  %241 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %236, i64 %240, i32 0
  %242 = load i32, i32* %241, align 4
  %243 = icmp eq i32 %230, %242
  br i1 %243, label %244, label %248

244:                                              ; preds = %239
  %245 = getelementptr inbounds %struct.JBig2HuffmanCode, %struct.JBig2HuffmanCode* %236, i64 %240, i32 1
  %246 = load i32, i32* %245, align 4
  %247 = icmp eq i32 %226, %246
  br i1 %247, label %255, label %248

248:                                              ; preds = %239, %244
  %249 = add nuw nsw i64 %240, 1
  %250 = icmp ult i64 %249, %237
  br i1 %250, label %239, label %252

251:                                              ; preds = %211, %252, %214
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %78) #12
  br label %495

252:                                              ; preds = %248, %232
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %78) #12
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %78) #12
  store i32 -1431655766, i32* %9, align 4
  %253 = call i32 @_ZN16CJBig2_BitStream8read1BitEPj(%class.CJBig2_BitStream* %1, i32* nonnull %9) #12
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %214, label %251

255:                                              ; preds = %244
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %78) #12
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %10) #12
  store i8 0, i8* %10, align 1
  %256 = load i8, i8* %81, align 1, !range !2
  %257 = icmp eq i8 %256, 0
  br i1 %257, label %265, label %258

258:                                              ; preds = %255
  %259 = call i32 @_ZN16CJBig2_BitStream8read1BitEPb(%class.CJBig2_BitStream* %1, i8* nonnull %10) #12
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %262, label %261

261:                                              ; preds = %258
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #12
  br label %495

262:                                              ; preds = %258
  %263 = load i8, i8* %10, align 1
  %264 = icmp eq i8 %263, 0
  br i1 %264, label %265, label %270

265:                                              ; preds = %255, %262
  %266 = load %class.CJBig2_Image**, %class.CJBig2_Image*** %92, align 8
  %267 = and i64 %240, 4294967295
  %268 = getelementptr inbounds %class.CJBig2_Image*, %class.CJBig2_Image** %266, i64 %267
  %269 = load %class.CJBig2_Image*, %class.CJBig2_Image** %268, align 8
  br label %378

270:                                              ; preds = %262
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %82) #12
  store i32 -1431655766, i32* %11, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %83) #12
  store i32 -1431655766, i32* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %84) #12
  store i32 -1431655766, i32* %13, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %85) #12
  store i32 -1431655766, i32* %14, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %86) #12
  store i32 -1431655766, i32* %15, align 4
  %271 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %87, align 8
  %272 = call i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_HuffmanTable* %271, i32* nonnull %11) #12
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %373

274:                                              ; preds = %270
  %275 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %88, align 8
  %276 = call i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_HuffmanTable* %275, i32* nonnull %12) #12
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %373

278:                                              ; preds = %274
  %279 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %89, align 8
  %280 = call i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_HuffmanTable* %279, i32* nonnull %13) #12
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %373

282:                                              ; preds = %278
  %283 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %90, align 8
  %284 = call i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_HuffmanTable* %283, i32* nonnull %14) #12
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %373

286:                                              ; preds = %282
  %287 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %91, align 8
  %288 = call i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder* nonnull %33, %class.CJBig2_HuffmanTable* %287, i32* nonnull %15) #12
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %290, label %373

290:                                              ; preds = %286
  call void @_ZN16CJBig2_BitStream9alignByteEv(%class.CJBig2_BitStream* %1) #12
  %291 = call i32 @_ZNK16CJBig2_BitStream9getOffsetEv(%class.CJBig2_BitStream* %1) #12
  %292 = load %class.CJBig2_Image**, %class.CJBig2_Image*** %92, align 8
  %293 = and i64 %240, 4294967295
  %294 = getelementptr inbounds %class.CJBig2_Image*, %class.CJBig2_Image** %292, i64 %293
  %295 = load %class.CJBig2_Image*, %class.CJBig2_Image** %294, align 8
  %296 = icmp eq %class.CJBig2_Image* %295, null
  br i1 %296, label %373, label %297

297:                                              ; preds = %290
  %298 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %295, i64 0, i32 1
  %299 = load i32, i32* %298, align 8
  %300 = load i32, i32* %11, align 4
  %301 = zext i32 %299 to i33
  %302 = sext i32 %300 to i33
  %303 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %301, i33 %302) #12
  %304 = extractvalue { i33, i1 } %303, 1
  %305 = extractvalue { i33, i1 } %303, 0
  %306 = icmp slt i33 %305, 0
  %307 = or i1 %304, %306
  %308 = trunc i33 %305 to i32
  %309 = select i1 %307, i32 0, i32 %308
  %310 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %295, i64 0, i32 2
  %311 = load i32, i32* %310, align 4
  %312 = load i32, i32* %12, align 4
  %313 = zext i32 %311 to i33
  %314 = sext i32 %312 to i33
  %315 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %313, i33 %314) #12
  %316 = extractvalue { i33, i1 } %315, 1
  %317 = extractvalue { i33, i1 } %315, 0
  %318 = icmp slt i33 %317, 0
  %319 = or i1 %316, %318
  %320 = trunc i33 %317 to i32
  %321 = select i1 %319, i32 0, i32 %320
  %322 = or i1 %307, %319
  br i1 %322, label %373, label %323

323:                                              ; preds = %297
  %324 = load i32, i32* %13, align 4
  %325 = ashr i32 %300, 2
  %326 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %324, i32 %325) #12
  %327 = extractvalue { i32, i1 } %326, 1
  %328 = load i32, i32* %14, align 4
  %329 = ashr i32 %312, 2
  %330 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %328, i32 %329) #12
  %331 = extractvalue { i32, i1 } %330, 1
  %332 = or i1 %327, %331
  br i1 %332, label %373, label %333

333:                                              ; preds = %323
  %334 = extractvalue { i32, i1 } %330, 0
  %335 = select i1 %331, i32 0, i32 %334
  %336 = extractvalue { i32, i1 } %326, 0
  %337 = select i1 %327, i32 0, i32 %336
  %338 = call i8* @_Znwm(i64 40) #13
  %339 = bitcast i8* %338 to %class.CJBig2_GRRDProc*
  call void @_ZN15CJBig2_GRRDProcC1Ev(%class.CJBig2_GRRDProc* nonnull %339) #12
  %340 = getelementptr inbounds i8, i8* %338, i64 4
  %341 = bitcast i8* %340 to i32*
  store i32 %309, i32* %341, align 4
  %342 = getelementptr inbounds i8, i8* %338, i64 8
  %343 = bitcast i8* %342 to i32*
  store i32 %321, i32* %343, align 8
  %344 = load i8, i8* %93, align 2, !range !2
  store i8 %344, i8* %338, align 8
  %345 = getelementptr inbounds i8, i8* %338, i64 24
  %346 = bitcast i8* %345 to %class.CJBig2_Image**
  store %class.CJBig2_Image* %295, %class.CJBig2_Image** %346, align 8
  %347 = getelementptr inbounds i8, i8* %338, i64 12
  %348 = bitcast i8* %347 to i32*
  store i32 %337, i32* %348, align 4
  %349 = getelementptr inbounds i8, i8* %338, i64 16
  %350 = bitcast i8* %349 to i32*
  store i32 %335, i32* %350, align 8
  %351 = getelementptr inbounds i8, i8* %338, i64 1
  store i8 0, i8* %351, align 1
  %352 = load i8, i8* %94, align 8
  %353 = getelementptr inbounds i8, i8* %338, i64 32
  store i8 %352, i8* %353, align 8
  %354 = load i8, i8* %95, align 1
  %355 = getelementptr inbounds i8, i8* %338, i64 33
  store i8 %354, i8* %355, align 1
  %356 = load i8, i8* %96, align 2
  %357 = getelementptr inbounds i8, i8* %338, i64 34
  store i8 %356, i8* %357, align 2
  %358 = load i8, i8* %97, align 1
  %359 = getelementptr inbounds i8, i8* %338, i64 35
  store i8 %358, i8* %359, align 1
  %360 = call i8* @_Znwm(i64 24) #13
  %361 = bitcast i8* %360 to %class.CJBig2_ArithDecoder*
  call void @_ZN19CJBig2_ArithDecoderC1EP16CJBig2_BitStream(%class.CJBig2_ArithDecoder* nonnull %361, %class.CJBig2_BitStream* %1) #12
  %362 = call %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc6DecodeEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* nonnull %339, %class.CJBig2_ArithDecoder* nonnull %361, %class.JBig2ArithCtx* %2) #12
  %363 = ptrtoint %class.CJBig2_Image* %362 to i64
  %364 = icmp eq %class.CJBig2_Image* %362, null
  br i1 %364, label %371, label %365

365:                                              ; preds = %333
  call void @_ZN16CJBig2_BitStream9alignByteEv(%class.CJBig2_BitStream* %1) #12
  call void @_ZN16CJBig2_BitStream6offsetEj(%class.CJBig2_BitStream* %1, i32 2) #12
  %366 = load i32, i32* %15, align 4
  %367 = call i32 @_ZNK16CJBig2_BitStream9getOffsetEv(%class.CJBig2_BitStream* %1) #12
  %368 = sub i32 %367, %291
  %369 = icmp ne i32 %366, %368
  %370 = zext i1 %369 to i32
  br label %371

371:                                              ; preds = %333, %365
  %372 = phi i32 [ 1, %333 ], [ %370, %365 ]
  call void @_ZN19CJBig2_ArithDecoderD1Ev(%class.CJBig2_ArithDecoder* nonnull %361) #12
  call void @_ZdlPv(i8* nonnull %360) #13
  call void @_ZN15CJBig2_GRRDProcD1Ev(%class.CJBig2_GRRDProc* nonnull %339) #12
  call void @_ZdlPv(i8* nonnull %338) #13
  br label %373

373:                                              ; preds = %323, %297, %371, %290, %270, %274, %278, %282, %286
  %374 = phi i64 [ 0, %286 ], [ 0, %282 ], [ 0, %278 ], [ 0, %274 ], [ 0, %270 ], [ 0, %290 ], [ 0, %297 ], [ %363, %371 ], [ 0, %323 ]
  %375 = phi %class.CJBig2_Image* [ null, %286 ], [ null, %282 ], [ null, %278 ], [ null, %274 ], [ null, %270 ], [ null, %290 ], [ null, %297 ], [ %362, %371 ], [ null, %323 ]
  %376 = phi i32 [ 1, %286 ], [ 1, %282 ], [ 1, %278 ], [ 1, %274 ], [ 1, %270 ], [ 1, %290 ], [ 1, %297 ], [ %372, %371 ], [ 1, %323 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %86) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %85) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %84) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %83) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %82) #12
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %378, label %482

378:                                              ; preds = %373, %265
  %379 = phi i64 [ 0, %265 ], [ %374, %373 ]
  %380 = phi %class.CJBig2_Image* [ %269, %265 ], [ %375, %373 ]
  %381 = icmp eq %class.CJBig2_Image* %380, null
  br i1 %381, label %482, label %382

382:                                              ; preds = %378
  %383 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %380, i64 0, i32 1
  %384 = load i32, i32* %383, align 8
  %385 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %380, i64 0, i32 2
  %386 = load i32, i32* %385, align 4
  %387 = load i8, i8* %98, align 1, !range !2
  %388 = icmp eq i8 %387, 0
  %389 = load i32, i32* %99, align 4
  br i1 %388, label %390, label %408

390:                                              ; preds = %382
  %391 = and i32 %389, -2
  %392 = icmp eq i32 %391, 2
  br i1 %392, label %393, label %424

393:                                              ; preds = %390
  %394 = icmp eq i8 %187, 0
  br i1 %394, label %482, label %395

395:                                              ; preds = %393
  %396 = add i32 %384, -1
  %397 = sext i32 %186 to i33
  %398 = zext i32 %396 to i33
  %399 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %397, i33 %398) #12
  %400 = extractvalue { i33, i1 } %399, 1
  %401 = extractvalue { i33, i1 } %399, 0
  %402 = add i33 %401, 2147483648
  %403 = icmp slt i33 %402, 0
  %404 = or i1 %400, %403
  %405 = xor i1 %404, true
  %406 = trunc i33 %401 to i32
  %407 = zext i1 %405 to i8
  br label %424

408:                                              ; preds = %382
  switch i32 %389, label %424 [
    i32 0, label %409
    i32 2, label %409
  ]

409:                                              ; preds = %408, %408
  %410 = icmp eq i8 %187, 0
  br i1 %410, label %482, label %411

411:                                              ; preds = %409
  %412 = add i32 %386, -1
  %413 = sext i32 %186 to i33
  %414 = zext i32 %412 to i33
  %415 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %413, i33 %414) #12
  %416 = extractvalue { i33, i1 } %415, 1
  %417 = extractvalue { i33, i1 } %415, 0
  %418 = add i33 %417, 2147483648
  %419 = icmp slt i33 %418, 0
  %420 = or i1 %416, %419
  %421 = xor i1 %420, true
  %422 = trunc i33 %417 to i32
  %423 = zext i1 %421 to i8
  br label %424

424:                                              ; preds = %411, %395, %390, %408
  %425 = phi i32 [ %186, %408 ], [ %186, %390 ], [ %406, %395 ], [ %422, %411 ]
  %426 = phi i8 [ %187, %408 ], [ %187, %390 ], [ %407, %395 ], [ %423, %411 ]
  %427 = icmp eq i8 %426, 0
  br i1 %427, label %482, label %428

428:                                              ; preds = %424
  br i1 %388, label %429, label %441

429:                                              ; preds = %428
  switch i32 %389, label %453 [
    i32 1, label %458
    i32 3, label %430
    i32 0, label %433
    i32 2, label %436
  ]

430:                                              ; preds = %429
  %431 = add i32 %425, 1
  %432 = sub i32 %431, %384
  br label %453

433:                                              ; preds = %429
  %434 = add i32 %210, 1
  %435 = sub i32 %434, %386
  br label %458

436:                                              ; preds = %429
  %437 = add i32 %425, 1
  %438 = sub i32 %437, %384
  %439 = add i32 %210, 1
  %440 = sub i32 %439, %386
  br label %453

441:                                              ; preds = %428
  switch i32 %389, label %453 [
    i32 1, label %458
    i32 3, label %442
    i32 0, label %445
    i32 2, label %448
  ]

442:                                              ; preds = %441
  %443 = add i32 %210, 1
  %444 = sub i32 %443, %384
  br label %458

445:                                              ; preds = %441
  %446 = add i32 %425, 1
  %447 = sub i32 %446, %386
  br label %453

448:                                              ; preds = %441
  %449 = add i32 %210, 1
  %450 = sub i32 %449, %384
  %451 = add i32 %425, 1
  %452 = sub i32 %451, %386
  br label %453

453:                                              ; preds = %429, %436, %430, %441, %448, %445
  %454 = phi i32 [ %447, %445 ], [ %452, %448 ], [ -1431655766, %441 ], [ %210, %430 ], [ %440, %436 ], [ -1431655766, %429 ]
  %455 = phi i32 [ %210, %445 ], [ %450, %448 ], [ -1431655766, %441 ], [ %432, %430 ], [ %438, %436 ], [ -1431655766, %429 ]
  %456 = load i32, i32* %100, align 8
  %457 = call zeroext i1 @_ZN12CJBig2_Image9ComposeToEPS_ii14JBig2ComposeOp(%class.CJBig2_Image* nonnull %380, %class.CJBig2_Image* nonnull %19, i32 %455, i32 %454, i32 %456) #12
  br label %478

458:                                              ; preds = %441, %429, %433, %442
  %459 = phi i32 [ %384, %433 ], [ %386, %442 ], [ %384, %429 ], [ %386, %441 ]
  %460 = phi i32 [ %435, %433 ], [ %425, %442 ], [ %210, %429 ], [ %425, %441 ]
  %461 = phi i32 [ %425, %433 ], [ %444, %442 ], [ %425, %429 ], [ %210, %441 ]
  %462 = add i32 %459, -1
  %463 = load i32, i32* %100, align 8
  %464 = call zeroext i1 @_ZN12CJBig2_Image9ComposeToEPS_ii14JBig2ComposeOp(%class.CJBig2_Image* nonnull %380, %class.CJBig2_Image* nonnull %19, i32 %461, i32 %460, i32 %463) #12
  %465 = icmp eq i32 %462, 0
  br i1 %465, label %478, label %466

466:                                              ; preds = %458
  %467 = sext i32 %425 to i33
  %468 = zext i32 %462 to i33
  %469 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %467, i33 %468) #12
  %470 = extractvalue { i33, i1 } %469, 1
  %471 = extractvalue { i33, i1 } %469, 0
  %472 = add i33 %471, 2147483648
  %473 = icmp slt i33 %472, 0
  %474 = or i1 %470, %473
  %475 = xor i1 %474, true
  %476 = zext i1 %475 to i8
  %477 = trunc i33 %471 to i32
  br label %478

478:                                              ; preds = %453, %458, %466
  %479 = phi i32 [ %425, %458 ], [ %477, %466 ], [ %425, %453 ]
  %480 = phi i8 [ %426, %458 ], [ %476, %466 ], [ %426, %453 ]
  %481 = add i32 %148, 1
  br label %482

482:                                              ; preds = %409, %393, %424, %378, %478, %373
  %483 = phi i32 [ %479, %478 ], [ %186, %378 ], [ %186, %373 ], [ %425, %424 ], [ 0, %393 ], [ 0, %409 ]
  %484 = phi i8 [ %480, %478 ], [ %187, %378 ], [ %187, %373 ], [ 0, %424 ], [ 0, %393 ], [ 0, %409 ]
  %485 = phi i64 [ %379, %478 ], [ %379, %378 ], [ %374, %373 ], [ %379, %424 ], [ %379, %393 ], [ %379, %409 ]
  %486 = phi i32 [ %481, %478 ], [ %148, %378 ], [ %148, %373 ], [ %148, %424 ], [ %148, %393 ], [ %148, %409 ]
  %487 = phi i32 [ 0, %478 ], [ 5, %378 ], [ 1, %373 ], [ 1, %424 ], [ 1, %393 ], [ 1, %409 ]
  %488 = icmp eq i64 %485, 0
  br i1 %488, label %492, label %489

489:                                              ; preds = %482
  %490 = inttoptr i64 %485 to %class.CJBig2_Image*
  call void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image* nonnull %490) #12
  %491 = inttoptr i64 %485 to i8*
  call void @_ZdlPv(i8* %491) #13
  br label %492

492:                                              ; preds = %482, %489
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #12
  switch i32 %487, label %496 [
    i32 0, label %493
    i32 5, label %493
  ]

493:                                              ; preds = %492, %492
  br label %142

494:                                              ; preds = %165
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %74) #12
  br label %496

495:                                              ; preds = %109, %204, %206, %164, %168, %261, %203, %251
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %71) #12
  br label %502

496:                                              ; preds = %492, %494
  %497 = phi i32 [ %143, %494 ], [ %188, %492 ]
  %498 = phi i8 [ %144, %494 ], [ %189, %492 ]
  %499 = phi i32 [ %148, %494 ], [ %486, %492 ]
  %500 = phi i32 [ 0, %494 ], [ %487, %492 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %71) #12
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %101, label %502

502:                                              ; preds = %101, %496, %27, %495
  %503 = phi i64 [ %22, %27 ], [ %22, %495 ], [ 0, %101 ], [ %22, %496 ]
  %504 = phi i64 [ 0, %27 ], [ 0, %495 ], [ %22, %101 ], [ 0, %496 ]
  call void @_ZN21CJBig2_HuffmanDecoderD1Ev(%class.CJBig2_HuffmanDecoder* nonnull %33) #12
  call void @_ZdlPv(i8* nonnull %32) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #12
  %505 = icmp eq i64 %503, 0
  br i1 %505, label %511, label %506

506:                                              ; preds = %3, %502
  %507 = phi i64 [ %504, %502 ], [ 0, %3 ]
  %508 = phi i64 [ %503, %502 ], [ %22, %3 ]
  %509 = inttoptr i64 %508 to %class.CJBig2_Image*
  call void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image* nonnull %509) #12
  %510 = inttoptr i64 %508 to i8*
  call void @_ZdlPv(i8* %510) #13
  br label %511

511:                                              ; preds = %502, %506
  %512 = phi i64 [ %504, %502 ], [ %507, %506 ]
  %513 = inttoptr i64 %512 to %class.CJBig2_Image*
  ret %class.CJBig2_Image* %513
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN12CJBig2_Image4FillEb(%class.CJBig2_Image*, i1 zeroext) local_unnamed_addr #4

declare i32 @_ZN21CJBig2_HuffmanDecoder12DecodeAValueEPK19CJBig2_HuffmanTablePi(%class.CJBig2_HuffmanDecoder*, %class.CJBig2_HuffmanTable*, i32*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @_ZN16CJBig2_BitStream9readNBitsEjPi(%class.CJBig2_BitStream*, i32, i32*) local_unnamed_addr #4

declare i32 @_ZN16CJBig2_BitStream8read1BitEPj(%class.CJBig2_BitStream*, i32*) local_unnamed_addr #4

declare i32 @_ZN16CJBig2_BitStream8read1BitEPb(%class.CJBig2_BitStream*, i8*) local_unnamed_addr #4

declare void @_ZN16CJBig2_BitStream9alignByteEv(%class.CJBig2_BitStream*) local_unnamed_addr #4

declare i32 @_ZNK16CJBig2_BitStream9getOffsetEv(%class.CJBig2_BitStream*) local_unnamed_addr #4

declare %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc6DecodeEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc*, %class.CJBig2_ArithDecoder*, %class.JBig2ArithCtx*) local_unnamed_addr #4

declare void @_ZN16CJBig2_BitStream6offsetEj(%class.CJBig2_BitStream*, i32) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i32 } @_ZNK14CJBig2_TRDProc14GetComposeDataEiijj(%class.CJBig2_TRDProc* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #5 align 2 {
  %6 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 3
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 17
  %10 = load i32, i32* %9, align 4
  br i1 %8, label %11, label %26

11:                                               ; preds = %5
  switch i32 %10, label %41 [
    i32 1, label %12
    i32 3, label %14
    i32 0, label %17
    i32 2, label %21
  ]

12:                                               ; preds = %11
  %13 = add i32 %3, -1
  br label %41

14:                                               ; preds = %11
  %15 = add i32 %1, 1
  %16 = sub i32 %15, %3
  br label %41

17:                                               ; preds = %11
  %18 = add i32 %2, 1
  %19 = sub i32 %18, %4
  %20 = add i32 %3, -1
  br label %41

21:                                               ; preds = %11
  %22 = add i32 %1, 1
  %23 = sub i32 %22, %3
  %24 = add i32 %2, 1
  %25 = sub i32 %24, %4
  br label %41

26:                                               ; preds = %5
  switch i32 %10, label %41 [
    i32 1, label %27
    i32 3, label %29
    i32 0, label %33
    i32 2, label %36
  ]

27:                                               ; preds = %26
  %28 = add i32 %4, -1
  br label %41

29:                                               ; preds = %26
  %30 = add i32 %2, 1
  %31 = sub i32 %30, %3
  %32 = add i32 %4, -1
  br label %41

33:                                               ; preds = %26
  %34 = add i32 %1, 1
  %35 = sub i32 %34, %4
  br label %41

36:                                               ; preds = %26
  %37 = add i32 %2, 1
  %38 = sub i32 %37, %3
  %39 = add i32 %1, 1
  %40 = sub i32 %39, %4
  br label %41

41:                                               ; preds = %27, %29, %33, %36, %26, %12, %14, %17, %21, %11
  %42 = phi i32 [ 0, %11 ], [ 0, %21 ], [ %20, %17 ], [ 0, %14 ], [ %13, %12 ], [ 0, %26 ], [ 0, %36 ], [ 0, %33 ], [ %32, %29 ], [ %28, %27 ]
  %43 = phi i32 [ -1431655766, %11 ], [ %25, %21 ], [ %19, %17 ], [ %2, %14 ], [ %2, %12 ], [ -1431655766, %26 ], [ %40, %36 ], [ %35, %33 ], [ %1, %29 ], [ %1, %27 ]
  %44 = phi i32 [ -1431655766, %11 ], [ %23, %21 ], [ %1, %17 ], [ %16, %14 ], [ %1, %12 ], [ -1431655766, %26 ], [ %38, %36 ], [ %2, %33 ], [ %31, %29 ], [ %2, %27 ]
  %45 = zext i32 %43 to i64
  %46 = shl nuw i64 %45, 32
  %47 = zext i32 %44 to i64
  %48 = or i64 %46, %47
  %49 = insertvalue { i64, i32 } undef, i64 %48, 0
  %50 = insertvalue { i64, i32 } %49, i32 %42, 1
  ret { i64, i32 } %50
}

declare zeroext i1 @_ZN12CJBig2_Image9ComposeToEPS_ii14JBig2ComposeOp(%class.CJBig2_Image*, %class.CJBig2_Image*, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %class.CJBig2_Image* @_ZN14CJBig2_TRDProc11DecodeArithEP19CJBig2_ArithDecoderP13JBig2ArithCtxP20JBig2IntDecoderState(%class.CJBig2_TRDProc* readonly, %class.CJBig2_ArithDecoder*, %class.JBig2ArithCtx*, %struct.JBig2IntDecoderState* readonly) local_unnamed_addr #2 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 8
  %17 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 9
  %18 = tail call i8* @_Znwm(i64 32) #13
  %19 = bitcast i8* %18 to %class.CJBig2_Image*
  %20 = load i32, i32* %16, align 4
  %21 = load i32, i32* %17, align 4
  tail call void @_ZN12CJBig2_ImageC1Eii(%class.CJBig2_Image* nonnull %19, i32 %20, i32 %21) #12
  %22 = ptrtoint i8* %18 to i64
  %23 = getelementptr inbounds i8, i8* %18, i64 8
  %24 = bitcast i8* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %553, label %27

27:                                               ; preds = %4
  %28 = icmp ne %struct.JBig2IntDecoderState* %3, null
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = bitcast %struct.JBig2IntDecoderState* %3 to i64*
  %31 = load i64, i64* %30, align 8
  br label %36

32:                                               ; preds = %27
  %33 = tail call i8* @_Znwm(i64 24) #13
  %34 = bitcast i8* %33 to %class.CJBig2_ArithIntDecoder*
  tail call void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder* nonnull %34) #12
  %35 = ptrtoint i8* %33 to i64
  br label %36

36:                                               ; preds = %32, %29
  %37 = phi i64 [ %31, %29 ], [ %35, %32 ]
  %38 = phi i8* [ null, %29 ], [ %33, %32 ]
  %39 = phi %class.CJBig2_ArithIntDecoder* [ null, %29 ], [ %34, %32 ]
  %40 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40) #12
  store i32 -1431655766, i32* %5, align 4
  %41 = inttoptr i64 %37 to %class.CJBig2_ArithIntDecoder*
  %42 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %41, %class.CJBig2_ArithDecoder* %1, i32* nonnull %5) #12
  br i1 %42, label %43, label %546

43:                                               ; preds = %36
  br i1 %28, label %44, label %72

44:                                               ; preds = %43
  %45 = getelementptr inbounds %struct.JBig2IntDecoderState, %struct.JBig2IntDecoderState* %3, i64 0, i32 1
  %46 = bitcast %"class.fxcrt::UnownedPtr"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %struct.JBig2IntDecoderState, %struct.JBig2IntDecoderState* %3, i64 0, i32 2
  %49 = bitcast %"class.fxcrt::UnownedPtr"* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.JBig2IntDecoderState, %struct.JBig2IntDecoderState* %3, i64 0, i32 3
  %52 = bitcast %"class.fxcrt::UnownedPtr"* %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.JBig2IntDecoderState, %struct.JBig2IntDecoderState* %3, i64 0, i32 4
  %55 = bitcast %"class.fxcrt::UnownedPtr"* %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.JBig2IntDecoderState, %struct.JBig2IntDecoderState* %3, i64 0, i32 5
  %58 = bitcast %"class.fxcrt::UnownedPtr"* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %struct.JBig2IntDecoderState, %struct.JBig2IntDecoderState* %3, i64 0, i32 6
  %61 = bitcast %"class.fxcrt::UnownedPtr"* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.JBig2IntDecoderState, %struct.JBig2IntDecoderState* %3, i64 0, i32 7
  %64 = bitcast %"class.fxcrt::UnownedPtr"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %struct.JBig2IntDecoderState, %struct.JBig2IntDecoderState* %3, i64 0, i32 8
  %67 = bitcast %"class.fxcrt::UnownedPtr"* %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.JBig2IntDecoderState, %struct.JBig2IntDecoderState* %3, i64 0, i32 9
  %70 = bitcast %"class.fxcrt::UnownedPtr.1"* %69 to i64*
  %71 = load i64, i64* %70, align 8
  br label %102

72:                                               ; preds = %43
  %73 = call i8* @_Znwm(i64 24) #13
  %74 = bitcast i8* %73 to %class.CJBig2_ArithIntDecoder*
  call void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder* nonnull %74) #12
  %75 = ptrtoint i8* %73 to i64
  %76 = call i8* @_Znwm(i64 24) #13
  %77 = bitcast i8* %76 to %class.CJBig2_ArithIntDecoder*
  call void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder* nonnull %77) #12
  %78 = ptrtoint i8* %76 to i64
  %79 = call i8* @_Znwm(i64 24) #13
  %80 = bitcast i8* %79 to %class.CJBig2_ArithIntDecoder*
  call void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder* nonnull %80) #12
  %81 = ptrtoint i8* %79 to i64
  %82 = call i8* @_Znwm(i64 24) #13
  %83 = bitcast i8* %82 to %class.CJBig2_ArithIntDecoder*
  call void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder* nonnull %83) #12
  %84 = ptrtoint i8* %82 to i64
  %85 = call i8* @_Znwm(i64 24) #13
  %86 = bitcast i8* %85 to %class.CJBig2_ArithIntDecoder*
  call void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder* nonnull %86) #12
  %87 = ptrtoint i8* %85 to i64
  %88 = call i8* @_Znwm(i64 24) #13
  %89 = bitcast i8* %88 to %class.CJBig2_ArithIntDecoder*
  call void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder* nonnull %89) #12
  %90 = ptrtoint i8* %88 to i64
  %91 = call i8* @_Znwm(i64 24) #13
  %92 = bitcast i8* %91 to %class.CJBig2_ArithIntDecoder*
  call void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder* nonnull %92) #12
  %93 = ptrtoint i8* %91 to i64
  %94 = call i8* @_Znwm(i64 24) #13
  %95 = bitcast i8* %94 to %class.CJBig2_ArithIntDecoder*
  call void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder* nonnull %95) #12
  %96 = ptrtoint i8* %94 to i64
  %97 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 6
  %98 = call i8* @_Znwm(i64 32) #13
  %99 = bitcast i8* %98 to %class.CJBig2_ArithIaidDecoder*
  %100 = load i8, i8* %97, align 1
  call void @_ZN23CJBig2_ArithIaidDecoderC1Eh(%class.CJBig2_ArithIaidDecoder* nonnull %99, i8 zeroext %100) #12
  %101 = ptrtoint i8* %98 to i64
  br label %102

102:                                              ; preds = %72, %44
  %103 = phi i8* [ null, %44 ], [ %76, %72 ]
  %104 = phi %class.CJBig2_ArithIntDecoder* [ null, %44 ], [ %77, %72 ]
  %105 = phi i64 [ %50, %44 ], [ %78, %72 ]
  %106 = phi i8* [ null, %44 ], [ %79, %72 ]
  %107 = phi %class.CJBig2_ArithIntDecoder* [ null, %44 ], [ %80, %72 ]
  %108 = phi i64 [ %53, %44 ], [ %81, %72 ]
  %109 = phi i8* [ null, %44 ], [ %82, %72 ]
  %110 = phi %class.CJBig2_ArithIntDecoder* [ null, %44 ], [ %83, %72 ]
  %111 = phi i64 [ %56, %44 ], [ %84, %72 ]
  %112 = phi i8* [ null, %44 ], [ %85, %72 ]
  %113 = phi %class.CJBig2_ArithIntDecoder* [ null, %44 ], [ %86, %72 ]
  %114 = phi i64 [ %59, %44 ], [ %87, %72 ]
  %115 = phi i8* [ null, %44 ], [ %88, %72 ]
  %116 = phi %class.CJBig2_ArithIntDecoder* [ null, %44 ], [ %89, %72 ]
  %117 = phi i64 [ %62, %44 ], [ %90, %72 ]
  %118 = phi i8* [ null, %44 ], [ %91, %72 ]
  %119 = phi %class.CJBig2_ArithIntDecoder* [ null, %44 ], [ %92, %72 ]
  %120 = phi i64 [ %65, %44 ], [ %93, %72 ]
  %121 = phi i8* [ null, %44 ], [ %94, %72 ]
  %122 = phi %class.CJBig2_ArithIntDecoder* [ null, %44 ], [ %95, %72 ]
  %123 = phi i64 [ %68, %44 ], [ %96, %72 ]
  %124 = phi i8* [ null, %44 ], [ %98, %72 ]
  %125 = phi %class.CJBig2_ArithIaidDecoder* [ null, %44 ], [ %99, %72 ]
  %126 = phi i64 [ %71, %44 ], [ %101, %72 ]
  %127 = phi i64 [ %47, %44 ], [ %75, %72 ]
  %128 = phi i8* [ null, %44 ], [ %73, %72 ]
  %129 = phi %class.CJBig2_ArithIntDecoder* [ null, %44 ], [ %74, %72 ]
  %130 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 4
  %131 = load i8, i8* %130, align 4, !range !2
  %132 = icmp ne i8 %131, 0
  call void @_ZN12CJBig2_Image4FillEb(%class.CJBig2_Image* nonnull %19, i1 zeroext %132) #12
  %133 = load i32, i32* %5, align 4
  %134 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 11
  %135 = load i32, i32* %134, align 4
  %136 = icmp slt i32 %133, 0
  %137 = sub i32 0, %133
  %138 = select i1 %136, i32 %137, i32 %133
  %139 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %138, i32 %135) #12
  %140 = extractvalue { i32, i1 } %139, 1
  %141 = extractvalue { i32, i1 } %139, 0
  %142 = lshr i32 %133, 31
  %143 = add nuw i32 %142, 2147483647
  %144 = icmp ugt i32 %141, %143
  %145 = or i1 %140, %144
  %146 = sub i32 0, %141
  %147 = select i1 %136, i32 %146, i32 %141
  %148 = xor i1 %145, true
  %149 = call i1 @llvm.is.constant.i32(i32 %147) #12
  br i1 %149, label %150, label %154

150:                                              ; preds = %102
  %151 = sub i32 0, %147
  %152 = icmp ne i32 %151, -2147483648
  %153 = and i1 %152, %148
  br label %160

154:                                              ; preds = %102
  %155 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %147) #12
  %156 = extractvalue { i32, i1 } %155, 1
  %157 = extractvalue { i32, i1 } %155, 0
  %158 = xor i1 %156, true
  %159 = and i1 %148, %158
  br label %160

160:                                              ; preds = %150, %154
  %161 = phi i32 [ %151, %150 ], [ %157, %154 ]
  %162 = phi i1 [ %153, %150 ], [ %159, %154 ]
  %163 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 10
  %164 = load i32, i32* %163, align 8
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %517, label %166

166:                                              ; preds = %160
  %167 = zext i1 %162 to i8
  %168 = bitcast i32* %6 to i8*
  %169 = bitcast i32* %7 to i8*
  %170 = inttoptr i64 %127 to %class.CJBig2_ArithIntDecoder*
  %171 = bitcast i32* %8 to i8*
  %172 = inttoptr i64 %105 to %class.CJBig2_ArithIntDecoder*
  %173 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 5
  %174 = bitcast i32* %9 to i8*
  %175 = inttoptr i64 %108 to %class.CJBig2_ArithIntDecoder*
  %176 = bitcast i32* %10 to i8*
  %177 = inttoptr i64 %126 to %class.CJBig2_ArithIaidDecoder*
  %178 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 12
  %179 = bitcast i32* %11 to i8*
  %180 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 1
  %181 = inttoptr i64 %111 to %class.CJBig2_ArithIntDecoder*
  %182 = bitcast i32* %12 to i8*
  %183 = bitcast i32* %13 to i8*
  %184 = bitcast i32* %14 to i8*
  %185 = bitcast i32* %15 to i8*
  %186 = inttoptr i64 %114 to %class.CJBig2_ArithIntDecoder*
  %187 = inttoptr i64 %117 to %class.CJBig2_ArithIntDecoder*
  %188 = inttoptr i64 %120 to %class.CJBig2_ArithIntDecoder*
  %189 = inttoptr i64 %123 to %class.CJBig2_ArithIntDecoder*
  %190 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 15
  %191 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 2
  %192 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 26, i64 0
  %193 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 26, i64 1
  %194 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 26, i64 2
  %195 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 26, i64 3
  %196 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 3
  %197 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 17
  %198 = getelementptr inbounds %class.CJBig2_TRDProc, %class.CJBig2_TRDProc* %0, i64 0, i32 16
  br label %199

199:                                              ; preds = %166, %512
  %200 = phi i32 [ 0, %166 ], [ %241, %512 ]
  %201 = phi i8 [ 1, %166 ], [ %515, %512 ]
  %202 = phi i32 [ 0, %166 ], [ %514, %512 ]
  %203 = phi i8 [ %167, %166 ], [ %233, %512 ]
  %204 = phi i32 [ %161, %166 ], [ %231, %512 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %168) #12
  store i32 -1431655766, i32* %6, align 4
  %205 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %41, %class.CJBig2_ArithDecoder* %1, i32* nonnull %6) #12
  br i1 %205, label %206, label %511

206:                                              ; preds = %199
  %207 = load i32, i32* %6, align 4
  %208 = load i32, i32* %134, align 4
  %209 = icmp slt i32 %207, 0
  %210 = sub i32 0, %207
  %211 = select i1 %209, i32 %210, i32 %207
  %212 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %211, i32 %208) #12
  %213 = extractvalue { i32, i1 } %212, 1
  %214 = extractvalue { i32, i1 } %212, 0
  %215 = lshr i32 %207, 31
  %216 = add nuw i32 %215, 2147483647
  %217 = icmp ugt i32 %214, %216
  %218 = or i1 %213, %217
  %219 = xor i1 %218, true
  %220 = icmp ne i8 %203, 0
  %221 = and i1 %220, %219
  br i1 %221, label %222, label %230

222:                                              ; preds = %206
  %223 = sub i32 0, %214
  %224 = select i1 %209, i32 %223, i32 %214
  %225 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %204, i32 %224) #12
  %226 = extractvalue { i32, i1 } %225, 1
  %227 = extractvalue { i32, i1 } %225, 0
  %228 = xor i1 %226, true
  %229 = zext i1 %228 to i64
  br label %230

230:                                              ; preds = %206, %222
  %231 = phi i32 [ %227, %222 ], [ 0, %206 ]
  %232 = phi i64 [ %229, %222 ], [ 0, %206 ]
  %233 = trunc i64 %232 to i8
  %234 = icmp eq i64 %232, 0
  br label %235

235:                                              ; preds = %509, %230
  %236 = phi i32 [ %202, %230 ], [ %277, %509 ]
  %237 = phi i8 [ %201, %230 ], [ %278, %509 ]
  %238 = phi i32 [ 0, %230 ], [ %500, %509 ]
  %239 = phi i8 [ 1, %230 ], [ %501, %509 ]
  %240 = phi i8 [ 1, %230 ], [ %279, %509 ]
  %241 = phi i32 [ %200, %230 ], [ %503, %509 ]
  %242 = and i8 %240, 1
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %254, label %244

244:                                              ; preds = %235
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %169) #12
  store i32 -1431655766, i32* %7, align 4
  %245 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %170, %class.CJBig2_ArithDecoder* %1, i32* nonnull %7) #12
  %246 = icmp eq i8 %237, 0
  br i1 %246, label %273, label %247

247:                                              ; preds = %244
  %248 = load i32, i32* %7, align 4
  %249 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %236, i32 %248) #12
  %250 = extractvalue { i32, i1 } %249, 1
  %251 = extractvalue { i32, i1 } %249, 0
  %252 = xor i1 %250, true
  %253 = zext i1 %252 to i8
  br label %273

254:                                              ; preds = %235
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %171) #12
  store i32 -1431655766, i32* %8, align 4
  %255 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %172, %class.CJBig2_ArithDecoder* %1, i32* nonnull %8) #12
  br i1 %255, label %256, label %271

256:                                              ; preds = %254
  %257 = icmp eq i8 %239, 0
  br i1 %257, label %273, label %258

258:                                              ; preds = %256
  %259 = load i32, i32* %8, align 4
  %260 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %238, i32 %259) #12
  %261 = extractvalue { i32, i1 } %260, 1
  br i1 %261, label %273, label %262

262:                                              ; preds = %258
  %263 = extractvalue { i32, i1 } %260, 0
  %264 = load i8, i8* %173, align 1
  %265 = sext i8 %264 to i32
  %266 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %263, i32 %265) #12
  %267 = extractvalue { i32, i1 } %266, 1
  %268 = extractvalue { i32, i1 } %266, 0
  %269 = xor i1 %267, true
  %270 = zext i1 %269 to i8
  br label %273

271:                                              ; preds = %254
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %171) #12
  %272 = load i32, i32* %163, align 8
  br label %512

273:                                              ; preds = %262, %258, %256, %247, %244
  %274 = phi i8* [ %169, %244 ], [ %169, %247 ], [ %171, %256 ], [ %171, %258 ], [ %171, %262 ]
  %275 = phi i32 [ 0, %244 ], [ %251, %247 ], [ 0, %256 ], [ 0, %258 ], [ %268, %262 ]
  %276 = phi i8 [ 0, %244 ], [ %253, %247 ], [ 0, %256 ], [ 0, %258 ], [ %270, %262 ]
  %277 = phi i32 [ 0, %244 ], [ %251, %247 ], [ %236, %256 ], [ %236, %258 ], [ %236, %262 ]
  %278 = phi i8 [ 0, %244 ], [ %253, %247 ], [ %237, %256 ], [ %237, %258 ], [ %237, %262 ]
  %279 = phi i8 [ 0, %244 ], [ 0, %247 ], [ %240, %256 ], [ %240, %258 ], [ %240, %262 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %274) #12
  %280 = load i32, i32* %163, align 8
  %281 = icmp ult i32 %241, %280
  br i1 %281, label %282, label %512

282:                                              ; preds = %273
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %174) #12
  store i32 0, i32* %9, align 4
  %283 = load i32, i32* %134, align 4
  %284 = icmp eq i32 %283, 1
  br i1 %284, label %287, label %285

285:                                              ; preds = %282
  %286 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %175, %class.CJBig2_ArithDecoder* %1, i32* nonnull %9) #12
  br label %287

287:                                              ; preds = %282, %285
  br i1 %234, label %293, label %288

288:                                              ; preds = %287
  %289 = load i32, i32* %9, align 4
  %290 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %231, i32 %289) #12
  %291 = extractvalue { i32, i1 } %290, 1
  %292 = extractvalue { i32, i1 } %290, 0
  br i1 %291, label %293, label %294

293:                                              ; preds = %287, %288
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %174) #12
  br label %511

294:                                              ; preds = %288
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %176) #12
  store i32 -1431655766, i32* %10, align 4
  call void @_ZN23CJBig2_ArithIaidDecoder6DecodeEP19CJBig2_ArithDecoderPj(%class.CJBig2_ArithIaidDecoder* %177, %class.CJBig2_ArithDecoder* %1, i32* nonnull %10) #12
  %295 = load i32, i32* %10, align 4
  %296 = load i32, i32* %178, align 8
  %297 = icmp ult i32 %295, %296
  br i1 %297, label %299, label %298

298:                                              ; preds = %294
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %176) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %174) #12
  br label %511

299:                                              ; preds = %294
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %179) #12
  store i32 -1431655766, i32* %11, align 4
  %300 = load i8, i8* %180, align 1, !range !2
  %301 = icmp eq i8 %300, 0
  br i1 %301, label %302, label %303

302:                                              ; preds = %299
  store i32 0, i32* %11, align 4
  br label %309

303:                                              ; preds = %299
  %304 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %181, %class.CJBig2_ArithDecoder* %1, i32* nonnull %11) #12
  %305 = load i32, i32* %11, align 4
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %315

307:                                              ; preds = %303
  %308 = load i32, i32* %10, align 4
  br label %309

309:                                              ; preds = %307, %302
  %310 = phi i32 [ %308, %307 ], [ %295, %302 ]
  %311 = load %class.CJBig2_Image**, %class.CJBig2_Image*** %190, align 8
  %312 = zext i32 %310 to i64
  %313 = getelementptr inbounds %class.CJBig2_Image*, %class.CJBig2_Image** %311, i64 %312
  %314 = load %class.CJBig2_Image*, %class.CJBig2_Image** %313, align 8
  br label %395

315:                                              ; preds = %303
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %182) #12
  store i32 -1431655766, i32* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %183) #12
  store i32 -1431655766, i32* %13, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %184) #12
  store i32 -1431655766, i32* %14, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %185) #12
  store i32 -1431655766, i32* %15, align 4
  %316 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %186, %class.CJBig2_ArithDecoder* %1, i32* nonnull %12) #12
  %317 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %187, %class.CJBig2_ArithDecoder* %1, i32* nonnull %13) #12
  %318 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %188, %class.CJBig2_ArithDecoder* %1, i32* nonnull %14) #12
  %319 = call zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* %189, %class.CJBig2_ArithDecoder* %1, i32* nonnull %15) #12
  %320 = load %class.CJBig2_Image**, %class.CJBig2_Image*** %190, align 8
  %321 = load i32, i32* %10, align 4
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds %class.CJBig2_Image*, %class.CJBig2_Image** %320, i64 %322
  %324 = load %class.CJBig2_Image*, %class.CJBig2_Image** %323, align 8
  %325 = icmp eq %class.CJBig2_Image* %324, null
  br i1 %325, label %391, label %326

326:                                              ; preds = %315
  %327 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %324, i64 0, i32 1
  %328 = load i32, i32* %327, align 8
  %329 = load i32, i32* %12, align 4
  %330 = zext i32 %328 to i33
  %331 = sext i32 %329 to i33
  %332 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %330, i33 %331) #12
  %333 = extractvalue { i33, i1 } %332, 1
  %334 = extractvalue { i33, i1 } %332, 0
  %335 = icmp slt i33 %334, 0
  %336 = or i1 %333, %335
  %337 = trunc i33 %334 to i32
  %338 = select i1 %336, i32 0, i32 %337
  %339 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %324, i64 0, i32 2
  %340 = load i32, i32* %339, align 4
  %341 = load i32, i32* %13, align 4
  %342 = zext i32 %340 to i33
  %343 = sext i32 %341 to i33
  %344 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %342, i33 %343) #12
  %345 = extractvalue { i33, i1 } %344, 1
  %346 = extractvalue { i33, i1 } %344, 0
  %347 = icmp slt i33 %346, 0
  %348 = or i1 %345, %347
  %349 = trunc i33 %346 to i32
  %350 = select i1 %348, i32 0, i32 %349
  %351 = or i1 %336, %348
  br i1 %351, label %391, label %352

352:                                              ; preds = %326
  %353 = load i32, i32* %14, align 4
  %354 = ashr i32 %329, 1
  %355 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %353, i32 %354) #12
  %356 = extractvalue { i32, i1 } %355, 1
  %357 = load i32, i32* %15, align 4
  %358 = ashr i32 %341, 1
  %359 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %357, i32 %358) #12
  %360 = extractvalue { i32, i1 } %359, 1
  %361 = or i1 %356, %360
  br i1 %361, label %391, label %362

362:                                              ; preds = %352
  %363 = extractvalue { i32, i1 } %359, 0
  %364 = select i1 %360, i32 0, i32 %363
  %365 = extractvalue { i32, i1 } %355, 0
  %366 = select i1 %356, i32 0, i32 %365
  %367 = call i8* @_Znwm(i64 40) #13
  %368 = bitcast i8* %367 to %class.CJBig2_GRRDProc*
  call void @_ZN15CJBig2_GRRDProcC1Ev(%class.CJBig2_GRRDProc* nonnull %368) #12
  %369 = getelementptr inbounds i8, i8* %367, i64 4
  %370 = bitcast i8* %369 to i32*
  store i32 %338, i32* %370, align 4
  %371 = getelementptr inbounds i8, i8* %367, i64 8
  %372 = bitcast i8* %371 to i32*
  store i32 %350, i32* %372, align 8
  %373 = load i8, i8* %191, align 2, !range !2
  store i8 %373, i8* %367, align 8
  %374 = getelementptr inbounds i8, i8* %367, i64 24
  %375 = bitcast i8* %374 to %class.CJBig2_Image**
  store %class.CJBig2_Image* %324, %class.CJBig2_Image** %375, align 8
  %376 = getelementptr inbounds i8, i8* %367, i64 12
  %377 = bitcast i8* %376 to i32*
  store i32 %366, i32* %377, align 4
  %378 = getelementptr inbounds i8, i8* %367, i64 16
  %379 = bitcast i8* %378 to i32*
  store i32 %364, i32* %379, align 8
  %380 = getelementptr inbounds i8, i8* %367, i64 1
  store i8 0, i8* %380, align 1
  %381 = load i8, i8* %192, align 8
  %382 = getelementptr inbounds i8, i8* %367, i64 32
  store i8 %381, i8* %382, align 8
  %383 = load i8, i8* %193, align 1
  %384 = getelementptr inbounds i8, i8* %367, i64 33
  store i8 %383, i8* %384, align 1
  %385 = load i8, i8* %194, align 2
  %386 = getelementptr inbounds i8, i8* %367, i64 34
  store i8 %385, i8* %386, align 2
  %387 = load i8, i8* %195, align 1
  %388 = getelementptr inbounds i8, i8* %367, i64 35
  store i8 %387, i8* %388, align 1
  %389 = call %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc6DecodeEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* nonnull %368, %class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %2) #12
  %390 = ptrtoint %class.CJBig2_Image* %389 to i64
  call void @_ZN15CJBig2_GRRDProcD1Ev(%class.CJBig2_GRRDProc* nonnull %368) #12
  call void @_ZdlPv(i8* nonnull %367) #13
  br label %391

391:                                              ; preds = %352, %326, %362, %315
  %392 = phi i64 [ 0, %315 ], [ 0, %326 ], [ %390, %362 ], [ 0, %352 ]
  %393 = phi %class.CJBig2_Image* [ null, %315 ], [ null, %326 ], [ %389, %362 ], [ null, %352 ]
  %394 = phi i1 [ false, %315 ], [ false, %326 ], [ true, %362 ], [ false, %352 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %185) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %184) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %183) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %182) #12
  br i1 %394, label %395, label %499

395:                                              ; preds = %391, %309
  %396 = phi i64 [ 0, %309 ], [ %392, %391 ]
  %397 = phi %class.CJBig2_Image* [ %314, %309 ], [ %393, %391 ]
  %398 = icmp eq %class.CJBig2_Image* %397, null
  br i1 %398, label %499, label %399

399:                                              ; preds = %395
  %400 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %397, i64 0, i32 1
  %401 = load i32, i32* %400, align 8
  %402 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %397, i64 0, i32 2
  %403 = load i32, i32* %402, align 4
  %404 = load i8, i8* %196, align 1, !range !2
  %405 = icmp eq i8 %404, 0
  %406 = load i32, i32* %197, align 4
  br i1 %405, label %407, label %425

407:                                              ; preds = %399
  %408 = and i32 %406, -2
  %409 = icmp eq i32 %408, 2
  br i1 %409, label %410, label %441

410:                                              ; preds = %407
  %411 = icmp eq i8 %276, 0
  br i1 %411, label %499, label %412

412:                                              ; preds = %410
  %413 = add i32 %401, -1
  %414 = sext i32 %275 to i33
  %415 = zext i32 %413 to i33
  %416 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %414, i33 %415) #12
  %417 = extractvalue { i33, i1 } %416, 1
  %418 = extractvalue { i33, i1 } %416, 0
  %419 = add i33 %418, 2147483648
  %420 = icmp slt i33 %419, 0
  %421 = or i1 %417, %420
  %422 = xor i1 %421, true
  %423 = trunc i33 %418 to i32
  %424 = zext i1 %422 to i8
  br label %441

425:                                              ; preds = %399
  switch i32 %406, label %441 [
    i32 0, label %426
    i32 2, label %426
  ]

426:                                              ; preds = %425, %425
  %427 = icmp eq i8 %276, 0
  br i1 %427, label %499, label %428

428:                                              ; preds = %426
  %429 = add i32 %403, -1
  %430 = sext i32 %275 to i33
  %431 = zext i32 %429 to i33
  %432 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %430, i33 %431) #12
  %433 = extractvalue { i33, i1 } %432, 1
  %434 = extractvalue { i33, i1 } %432, 0
  %435 = add i33 %434, 2147483648
  %436 = icmp slt i33 %435, 0
  %437 = or i1 %433, %436
  %438 = xor i1 %437, true
  %439 = trunc i33 %434 to i32
  %440 = zext i1 %438 to i8
  br label %441

441:                                              ; preds = %428, %412, %407, %425
  %442 = phi i32 [ %275, %425 ], [ %275, %407 ], [ %423, %412 ], [ %439, %428 ]
  %443 = phi i8 [ %276, %425 ], [ %276, %407 ], [ %424, %412 ], [ %440, %428 ]
  %444 = icmp eq i8 %443, 0
  br i1 %444, label %499, label %445

445:                                              ; preds = %441
  br i1 %405, label %446, label %458

446:                                              ; preds = %445
  switch i32 %406, label %470 [
    i32 1, label %475
    i32 3, label %447
    i32 0, label %450
    i32 2, label %453
  ]

447:                                              ; preds = %446
  %448 = add i32 %442, 1
  %449 = sub i32 %448, %401
  br label %470

450:                                              ; preds = %446
  %451 = add i32 %292, 1
  %452 = sub i32 %451, %403
  br label %475

453:                                              ; preds = %446
  %454 = add i32 %442, 1
  %455 = sub i32 %454, %401
  %456 = add i32 %292, 1
  %457 = sub i32 %456, %403
  br label %470

458:                                              ; preds = %445
  switch i32 %406, label %470 [
    i32 1, label %475
    i32 3, label %459
    i32 0, label %462
    i32 2, label %465
  ]

459:                                              ; preds = %458
  %460 = add i32 %292, 1
  %461 = sub i32 %460, %401
  br label %475

462:                                              ; preds = %458
  %463 = add i32 %442, 1
  %464 = sub i32 %463, %403
  br label %470

465:                                              ; preds = %458
  %466 = add i32 %292, 1
  %467 = sub i32 %466, %401
  %468 = add i32 %442, 1
  %469 = sub i32 %468, %403
  br label %470

470:                                              ; preds = %446, %453, %447, %458, %465, %462
  %471 = phi i32 [ %464, %462 ], [ %469, %465 ], [ -1431655766, %458 ], [ %292, %447 ], [ %457, %453 ], [ -1431655766, %446 ]
  %472 = phi i32 [ %292, %462 ], [ %467, %465 ], [ -1431655766, %458 ], [ %449, %447 ], [ %455, %453 ], [ -1431655766, %446 ]
  %473 = load i32, i32* %198, align 8
  %474 = call zeroext i1 @_ZN12CJBig2_Image9ComposeToEPS_ii14JBig2ComposeOp(%class.CJBig2_Image* nonnull %397, %class.CJBig2_Image* nonnull %19, i32 %472, i32 %471, i32 %473) #12
  br label %495

475:                                              ; preds = %458, %446, %450, %459
  %476 = phi i32 [ %401, %450 ], [ %403, %459 ], [ %401, %446 ], [ %403, %458 ]
  %477 = phi i32 [ %452, %450 ], [ %442, %459 ], [ %292, %446 ], [ %442, %458 ]
  %478 = phi i32 [ %442, %450 ], [ %461, %459 ], [ %442, %446 ], [ %292, %458 ]
  %479 = add i32 %476, -1
  %480 = load i32, i32* %198, align 8
  %481 = call zeroext i1 @_ZN12CJBig2_Image9ComposeToEPS_ii14JBig2ComposeOp(%class.CJBig2_Image* nonnull %397, %class.CJBig2_Image* nonnull %19, i32 %478, i32 %477, i32 %480) #12
  %482 = icmp eq i32 %479, 0
  br i1 %482, label %495, label %483

483:                                              ; preds = %475
  %484 = sext i32 %442 to i33
  %485 = zext i32 %479 to i33
  %486 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %484, i33 %485) #12
  %487 = extractvalue { i33, i1 } %486, 1
  %488 = extractvalue { i33, i1 } %486, 0
  %489 = add i33 %488, 2147483648
  %490 = icmp slt i33 %489, 0
  %491 = or i1 %487, %490
  %492 = xor i1 %491, true
  %493 = zext i1 %492 to i8
  %494 = trunc i33 %488 to i32
  br label %495

495:                                              ; preds = %470, %475, %483
  %496 = phi i32 [ %442, %475 ], [ %494, %483 ], [ %442, %470 ]
  %497 = phi i8 [ 1, %475 ], [ %493, %483 ], [ 1, %470 ]
  %498 = add nuw i32 %241, 1
  br label %499

499:                                              ; preds = %426, %410, %441, %395, %495, %391
  %500 = phi i32 [ %496, %495 ], [ %275, %391 ], [ %275, %395 ], [ %442, %441 ], [ 0, %410 ], [ 0, %426 ]
  %501 = phi i8 [ %497, %495 ], [ %276, %391 ], [ %276, %395 ], [ 0, %441 ], [ 0, %410 ], [ 0, %426 ]
  %502 = phi i64 [ %396, %495 ], [ %392, %391 ], [ %396, %395 ], [ %396, %441 ], [ %396, %410 ], [ %396, %426 ]
  %503 = phi i32 [ %498, %495 ], [ %241, %391 ], [ %241, %395 ], [ %241, %441 ], [ %241, %410 ], [ %241, %426 ]
  %504 = phi i32 [ 0, %495 ], [ 1, %391 ], [ 1, %395 ], [ 1, %441 ], [ 1, %410 ], [ 1, %426 ]
  %505 = icmp eq i64 %502, 0
  br i1 %505, label %509, label %506

506:                                              ; preds = %499
  %507 = inttoptr i64 %502 to %class.CJBig2_Image*
  call void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image* nonnull %507) #12
  %508 = inttoptr i64 %502 to i8*
  call void @_ZdlPv(i8* %508) #13
  br label %509

509:                                              ; preds = %506, %499
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %179) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %176) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %174) #12
  %510 = icmp eq i32 %504, 0
  br i1 %510, label %235, label %511

511:                                              ; preds = %199, %509, %293, %298
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %168) #12
  br label %517

512:                                              ; preds = %273, %271
  %513 = phi i32 [ %272, %271 ], [ %280, %273 ]
  %514 = phi i32 [ %236, %271 ], [ %277, %273 ]
  %515 = phi i8 [ %237, %271 ], [ %278, %273 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %168) #12
  %516 = icmp ult i32 %241, %513
  br i1 %516, label %199, label %517

517:                                              ; preds = %512, %160, %511
  %518 = phi i64 [ %22, %511 ], [ 0, %160 ], [ 0, %512 ]
  %519 = phi i64 [ 0, %511 ], [ %22, %160 ], [ %22, %512 ]
  %520 = icmp eq %class.CJBig2_ArithIaidDecoder* %125, null
  br i1 %520, label %522, label %521

521:                                              ; preds = %517
  call void @_ZN23CJBig2_ArithIaidDecoderD1Ev(%class.CJBig2_ArithIaidDecoder* nonnull %125) #12
  call void @_ZdlPv(i8* %124) #13
  br label %522

522:                                              ; preds = %517, %521
  %523 = icmp eq %class.CJBig2_ArithIntDecoder* %122, null
  br i1 %523, label %525, label %524

524:                                              ; preds = %522
  call void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder* nonnull %122) #12
  call void @_ZdlPv(i8* %121) #13
  br label %525

525:                                              ; preds = %522, %524
  %526 = icmp eq %class.CJBig2_ArithIntDecoder* %119, null
  br i1 %526, label %528, label %527

527:                                              ; preds = %525
  call void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder* nonnull %119) #12
  call void @_ZdlPv(i8* %118) #13
  br label %528

528:                                              ; preds = %525, %527
  %529 = icmp eq %class.CJBig2_ArithIntDecoder* %116, null
  br i1 %529, label %531, label %530

530:                                              ; preds = %528
  call void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder* nonnull %116) #12
  call void @_ZdlPv(i8* %115) #13
  br label %531

531:                                              ; preds = %528, %530
  %532 = icmp eq %class.CJBig2_ArithIntDecoder* %113, null
  br i1 %532, label %534, label %533

533:                                              ; preds = %531
  call void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder* nonnull %113) #12
  call void @_ZdlPv(i8* %112) #13
  br label %534

534:                                              ; preds = %531, %533
  %535 = icmp eq %class.CJBig2_ArithIntDecoder* %110, null
  br i1 %535, label %537, label %536

536:                                              ; preds = %534
  call void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder* nonnull %110) #12
  call void @_ZdlPv(i8* %109) #13
  br label %537

537:                                              ; preds = %534, %536
  %538 = icmp eq %class.CJBig2_ArithIntDecoder* %107, null
  br i1 %538, label %540, label %539

539:                                              ; preds = %537
  call void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder* nonnull %107) #12
  call void @_ZdlPv(i8* %106) #13
  br label %540

540:                                              ; preds = %537, %539
  %541 = icmp eq %class.CJBig2_ArithIntDecoder* %104, null
  br i1 %541, label %543, label %542

542:                                              ; preds = %540
  call void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder* nonnull %104) #12
  call void @_ZdlPv(i8* %103) #13
  br label %543

543:                                              ; preds = %540, %542
  %544 = icmp eq %class.CJBig2_ArithIntDecoder* %129, null
  br i1 %544, label %546, label %545

545:                                              ; preds = %543
  call void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder* nonnull %129) #12
  call void @_ZdlPv(i8* %128) #13
  br label %546

546:                                              ; preds = %545, %543, %36
  %547 = phi i64 [ %22, %36 ], [ %518, %543 ], [ %518, %545 ]
  %548 = phi i64 [ 0, %36 ], [ %519, %543 ], [ %519, %545 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40) #12
  %549 = icmp eq %class.CJBig2_ArithIntDecoder* %39, null
  br i1 %549, label %551, label %550

550:                                              ; preds = %546
  call void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder* nonnull %39) #12
  call void @_ZdlPv(i8* %38) #13
  br label %551

551:                                              ; preds = %550, %546
  %552 = icmp eq i64 %547, 0
  br i1 %552, label %558, label %553

553:                                              ; preds = %4, %551
  %554 = phi i64 [ %548, %551 ], [ 0, %4 ]
  %555 = phi i64 [ %547, %551 ], [ %22, %4 ]
  %556 = inttoptr i64 %555 to %class.CJBig2_Image*
  call void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image* nonnull %556) #12
  %557 = inttoptr i64 %555 to i8*
  call void @_ZdlPv(i8* %557) #13
  br label %558

558:                                              ; preds = %551, %553
  %559 = phi i64 [ %548, %551 ], [ %554, %553 ]
  %560 = inttoptr i64 %559 to %class.CJBig2_Image*
  ret %class.CJBig2_Image* %560
}

declare zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder*, %class.CJBig2_ArithDecoder*, i32*) local_unnamed_addr #4

declare void @_ZN23CJBig2_ArithIaidDecoder6DecodeEP19CJBig2_ArithDecoderPj(%class.CJBig2_ArithIaidDecoder*, %class.CJBig2_ArithDecoder*, i32*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #7

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: nounwind
declare void @_ZN23CJBig2_ArithIaidDecoderD1Ev(%class.CJBig2_ArithIaidDecoder*) unnamed_addr #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: nounwind
declare void @_ZN22CJBig2_ArithIntDecoderD1Ev(%class.CJBig2_ArithIntDecoder*) unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

declare void @_ZN12CJBig2_ImageC1Eii(%class.CJBig2_Image*, i32, i32) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image*) unnamed_addr #9

declare void @_ZN21CJBig2_HuffmanDecoderC1EP16CJBig2_BitStream(%class.CJBig2_HuffmanDecoder*, %class.CJBig2_BitStream*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN21CJBig2_HuffmanDecoderD1Ev(%class.CJBig2_HuffmanDecoder*) unnamed_addr #9

declare void @_ZN15CJBig2_GRRDProcC1Ev(%class.CJBig2_GRRDProc*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN15CJBig2_GRRDProcD1Ev(%class.CJBig2_GRRDProc*) unnamed_addr #9

declare void @_ZN19CJBig2_ArithDecoderC1EP16CJBig2_BitStream(%class.CJBig2_ArithDecoder*, %class.CJBig2_BitStream*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN19CJBig2_ArithDecoderD1Ev(%class.CJBig2_ArithDecoder*) unnamed_addr #9

declare void @_ZN22CJBig2_ArithIntDecoderC1Ev(%class.CJBig2_ArithIntDecoder*) unnamed_addr #4

declare void @_ZN23CJBig2_ArithIaidDecoderC1Eh(%class.CJBig2_ArithIaidDecoder*, i8 zeroext) unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind readnone }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 6004}
!4 = !{!"branch_weights", i32 1, i32 2000}
