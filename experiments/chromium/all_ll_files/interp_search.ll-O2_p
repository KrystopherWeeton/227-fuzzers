; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/interp_search.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/interp_search.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERPOLATION_FILTER_STATS = type { %union.int_interpfilters, [2 x %union.int_mv], [2 x i8], i8, i32, i64, i32 }
%struct.BUFFER_SET = type { [3 x i8*], [3 x i32] }
%struct.HandleInterModeArgs = type { [3 x i8*], [3 x i32], [3 x i8*], [3 x i32], [8 x %union.int_mv]*, [8 x i32]*, [8 x i32]*, [3 x [8 x i64]]*, i32, i32, [3 x [8 x i64]]*, i32, i8*, [128 x %struct.INTERPOLATION_FILTER_STATS], i32, i32, i32, i32, [29 x i32], [8 x i32] }

@find_interp_filter_in_stats.thr = internal unnamed_addr constant [2 x [2 x i32]] [[2 x i32] zeroinitializer, [2 x i32] [i32 3, i32 7]], align 16
@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@mi_size_high = internal unnamed_addr constant [22 x i8] c"\01\02\01\02\04\02\04\08\04\08\10\08\10 \10 \04\01\08\02\10\04", align 16
@model_rd_sb_fn = internal unnamed_addr constant [2 x void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*] [void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)* @model_rd_for_sb, void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)* @model_rd_for_sb_with_curvfit], align 16
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@ss_size_lookup = internal unnamed_addr constant [22 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\FF\00"], [2 x [2 x i8]] [[2 x i8] c"\02\FF", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\04\03", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\05\FF", [2 x i8] c"\03\02"], [2 x [2 x i8]] [[2 x i8] c"\06\05", [2 x i8] c"\04\03"], [2 x [2 x i8]] [[2 x i8] c"\07\06", [2 x i8] c"\FF\04"], [2 x [2 x i8]] [[2 x i8] c"\08\FF", [2 x i8] c"\06\05"], [2 x [2 x i8]] [[2 x i8] c"\09\08", [2 x i8] c"\07\06"], [2 x [2 x i8]] [[2 x i8] c"\0A\09", [2 x i8] c"\FF\07"], [2 x [2 x i8]] [[2 x i8] c"\0B\FF", [2 x i8] c"\09\08"], [2 x [2 x i8]] [[2 x i8] c"\0C\0B", [2 x i8] c"\0A\09"], [2 x [2 x i8]] [[2 x i8] c"\0D\0C", [2 x i8] c"\FF\0A"], [2 x [2 x i8]] [[2 x i8] c"\0E\FF", [2 x i8] c"\0C\0B"], [2 x [2 x i8]] [[2 x i8] c"\0F\0E", [2 x i8] c"\0D\0C"], [2 x [2 x i8]] [[2 x i8] c"\10\01", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\11\FF", [2 x i8] c"\02\02"], [2 x [2 x i8]] [[2 x i8] c"\12\04", [2 x i8] c"\FF\10"], [2 x [2 x i8]] [[2 x i8] c"\13\FF", [2 x i8] c"\05\11"], [2 x [2 x i8]] [[2 x i8] c"\14\07", [2 x i8] c"\FF\12"], [2 x [2 x i8]] [[2 x i8] c"\15\FF", [2 x i8] c"\08\13"]], align 16
@aom_sse = external local_unnamed_addr global i64 (i8*, i32, i8*, i32, i32, i32)*, align 8
@num_pels_log2_lookup = internal unnamed_addr constant [22 x i8] c"\04\05\05\06\07\07\08\09\09\0A\0B\0B\0C\0D\0D\0E\06\06\08\08\0A\0A", align 16
@compound_ref0_mode.lut = internal unnamed_addr constant [25 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\0D\0E\0D\10\0E\10\0F\10", align 16
@compound_ref1_mode.lut = internal unnamed_addr constant [25 x i8] c"\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\0D\0E\10\0D\10\0E\0F\10", align 16
@mi_size_wide_log2 = internal unnamed_addr constant [22 x i8] c"\00\00\01\01\01\02\02\02\03\03\03\04\04\04\05\05\00\02\01\03\02\04", align 16
@av1_interp_dual_filt_mask = internal unnamed_addr constant [2 x [3 x i16]] [[3 x i16] [i16 73, i16 146, i16 292], [3 x i16] [i16 7, i16 56, i16 448]], align 2
@filter_sets = internal unnamed_addr constant [9 x %union.int_interpfilters] [%union.int_interpfilters zeroinitializer, %union.int_interpfilters { i32 65536 }, %union.int_interpfilters { i32 131072 }, %union.int_interpfilters { i32 1 }, %union.int_interpfilters { i32 65537 }, %union.int_interpfilters { i32 131073 }, %union.int_interpfilters { i32 2 }, %union.int_interpfilters { i32 65538 }, %union.int_interpfilters { i32 131074 }], align 16
@find_best_non_dual_interp_filter.thr = internal unnamed_addr constant [7 x i32] [i32 0, i32 8, i32 8, i32 8, i32 8, i32 0, i32 8], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @av1_find_interp_filter_match(%struct.MB_MODE_INFO* nocapture, %struct.AV1_COMP* nocapture readonly, i8 zeroext, i32, %struct.INTERPOLATION_FILTER_STATS* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 7, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = icmp ne i32 %8, 0
  %10 = icmp ne i32 %3, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %118

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp sgt i8 %14, 0
  %16 = icmp sgt i32 %5, 0
  br i1 %16, label %17, label %118

17:                                               ; preds = %12
  %18 = select i1 %15, i64 2, i64 1
  %19 = icmp eq i32 %8, 1
  %20 = and i1 %19, %15
  %21 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 17, i32 4
  %22 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 28
  %23 = add nsw i32 %8, -1
  %24 = sext i32 %23 to i64
  %25 = zext i1 %15 to i64
  %26 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @find_interp_filter_in_stats.thr, i64 0, i64 %24, i64 %25
  %27 = zext i32 %5 to i64
  br label %28

28:                                               ; preds = %98, %17
  %29 = phi i64 [ 0, %17 ], [ %101, %98 ]
  %30 = phi i32 [ -1, %17 ], [ %100, %98 ]
  %31 = phi i32 [ 2147483647, %17 ], [ %99, %98 ]
  br label %35

32:                                               ; preds = %35
  %33 = add nuw nsw i64 %36, 1
  %34 = icmp eq i64 %33, %18
  br i1 %34, label %42, label %35

35:                                               ; preds = %32, %28
  %36 = phi i64 [ %33, %32 ], [ 0, %28 ]
  %37 = getelementptr inbounds %struct.INTERPOLATION_FILTER_STATS, %struct.INTERPOLATION_FILTER_STATS* %4, i64 %29, i32 2, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 %36
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %38, %40
  br i1 %41, label %32, label %98

42:                                               ; preds = %32
  br i1 %20, label %43, label %56

43:                                               ; preds = %42
  %44 = getelementptr inbounds %struct.INTERPOLATION_FILTER_STATS, %struct.INTERPOLATION_FILTER_STATS* %4, i64 %29, i32 3
  %45 = load i8, i8* %44, align 2
  %46 = load i8, i8* %21, align 1
  %47 = icmp eq i8 %45, %46
  br i1 %47, label %48, label %98

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.INTERPOLATION_FILTER_STATS, %struct.INTERPOLATION_FILTER_STATS* %4, i64 %29, i32 4
  %50 = load i32, i32* %49, align 8
  %51 = load i16, i16* %22, align 1
  %52 = lshr i16 %51, 9
  %53 = and i16 %52, 1
  %54 = zext i16 %53 to i32
  %55 = icmp eq i32 %50, %54
  br i1 %55, label %56, label %98

56:                                               ; preds = %42, %48
  br label %57

57:                                               ; preds = %56, %57
  %58 = phi i64 [ %86, %57 ], [ 0, %56 ]
  %59 = phi i32 [ %85, %57 ], [ 0, %56 ]
  %60 = getelementptr inbounds %struct.INTERPOLATION_FILTER_STATS, %struct.INTERPOLATION_FILTER_STATS* %4, i64 %29, i32 1, i64 %58
  %61 = bitcast %union.int_mv* %60 to %struct.mv*
  %62 = bitcast %union.int_mv* %60 to i16*
  %63 = load i16, i16* %62, align 4
  %64 = sext i16 %63 to i32
  %65 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 %58
  %66 = bitcast %union.int_mv* %65 to %struct.mv*
  %67 = bitcast %union.int_mv* %65 to i16*
  %68 = load i16, i16* %67, align 4
  %69 = sext i16 %68 to i32
  %70 = sub nsw i32 %64, %69
  %71 = icmp slt i32 %70, 0
  %72 = sub nsw i32 0, %70
  %73 = select i1 %71, i32 %72, i32 %70
  %74 = getelementptr inbounds %struct.mv, %struct.mv* %61, i64 0, i32 1
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = getelementptr inbounds %struct.mv, %struct.mv* %66, i64 0, i32 1
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  %80 = sub nsw i32 %76, %79
  %81 = icmp slt i32 %80, 0
  %82 = sub nsw i32 0, %80
  %83 = select i1 %81, i32 %82, i32 %80
  %84 = add i32 %73, %59
  %85 = add i32 %84, %83
  %86 = add nuw nsw i64 %58, 1
  %87 = icmp eq i64 %86, %18
  br i1 %87, label %88, label %57, !llvm.loop !2

88:                                               ; preds = %57
  %89 = icmp eq i32 %85, 0
  br i1 %89, label %110, label %90

90:                                               ; preds = %88
  %91 = icmp slt i32 %85, %31
  br i1 %91, label %92, label %98

92:                                               ; preds = %90
  %93 = load i32, i32* %26, align 4
  %94 = icmp sgt i32 %85, %93
  %95 = select i1 %94, i32 %31, i32 %85
  %96 = trunc i64 %29 to i32
  %97 = select i1 %94, i32 %30, i32 %96
  br label %98

98:                                               ; preds = %35, %92, %90, %48, %43
  %99 = phi i32 [ %95, %92 ], [ %31, %90 ], [ %31, %48 ], [ %31, %43 ], [ %31, %35 ]
  %100 = phi i32 [ %97, %92 ], [ %30, %90 ], [ %30, %48 ], [ %30, %43 ], [ %30, %35 ]
  %101 = add nuw nsw i64 %29, 1
  %102 = icmp eq i64 %101, %27
  br i1 %102, label %103, label %28

103:                                              ; preds = %98
  %104 = icmp eq i32 %100, -1
  br i1 %104, label %118, label %105

105:                                              ; preds = %103
  %106 = sext i32 %100 to i64
  %107 = getelementptr inbounds %struct.INTERPOLATION_FILTER_STATS, %struct.INTERPOLATION_FILTER_STATS* %4, i64 %106, i32 0, i32 0
  %108 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 8, i32 0
  %109 = load i32, i32* %107, align 8
  store i32 %109, i32* %108, align 4
  br label %125

110:                                              ; preds = %88
  %111 = trunc i64 %29 to i32
  %112 = shl i64 %29, 32
  %113 = ashr exact i64 %112, 32
  %114 = getelementptr inbounds %struct.INTERPOLATION_FILTER_STATS, %struct.INTERPOLATION_FILTER_STATS* %4, i64 %113, i32 0, i32 0
  %115 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 8, i32 0
  %116 = load i32, i32* %114, align 8
  store i32 %116, i32* %115, align 4
  %117 = icmp eq i32 %111, -1
  br i1 %117, label %118, label %125

118:                                              ; preds = %12, %103, %6, %110
  %119 = icmp eq i8 %2, 4
  %120 = select i1 %119, i8 0, i8 %2
  %121 = zext i8 %120 to i32
  %122 = shl nuw nsw i32 %121, 16
  %123 = or i32 %122, %121
  %124 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 8, i32 0
  store i32 %123, i32* %124, align 4
  br label %125

125:                                              ; preds = %105, %110, %118
  %126 = phi i32 [ %111, %110 ], [ -1, %118 ], [ %100, %105 ]
  ret i32 %126
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @av1_interpolation_filter_search(%struct.macroblock*, %struct.AV1_COMP*, %struct.TileDataEnc* nocapture readnone, i8 zeroext, %struct.BUFFER_SET*, %struct.BUFFER_SET*, i64* nocapture, i32* nocapture, i32* nocapture, %struct.HandleInterModeArgs* nocapture, i64) local_unnamed_addr #2 {
  %12 = alloca %struct.BUFFER_SET, align 8
  %13 = alloca %struct.RD_STATS, align 8
  %14 = alloca %struct.RD_STATS, align 8
  %15 = alloca %struct.BUFFER_SET, align 8
  %16 = alloca %struct.RD_STATS, align 8
  %17 = alloca %struct.RD_STATS, align 8
  %18 = alloca [2 x i32], align 4
  %19 = alloca [2 x %struct.BUFFER_SET*], align 16
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 35
  %22 = load %struct.SequenceHeader*, %struct.SequenceHeader** %21, align 16
  %23 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %22, i64 0, i32 27
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 6
  %28 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %27, align 8
  %29 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %28, align 8
  %30 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 28
  %31 = load i16, i16* %30, align 1
  %32 = and i16 %31, 64
  %33 = icmp eq i16 %32, 0
  br i1 %33, label %34, label %69

34:                                               ; preds = %11
  %35 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 9
  %36 = load i8, i8* %35, align 8
  %37 = icmp eq i8 %36, 2
  br i1 %37, label %69, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 2
  %40 = load i8, i8* %39, align 2
  switch i8 %40, label %65 [
    i8 15, label %41
    i8 23, label %41
  ]

41:                                               ; preds = %38, %38
  %42 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 0
  %43 = load i8, i8* %42, align 8
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %44
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %46, %48
  %50 = select i1 %49, i8 %46, i8 %48
  %51 = icmp ult i8 %50, 2
  br i1 %51, label %65, label %52

52:                                               ; preds = %41
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 46
  %54 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 6, i64 1
  %55 = load %struct.WarpedMotionParams*, %struct.WarpedMotionParams** %53, align 8
  %56 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 6, i64 0
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i64
  %59 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %55, i64 %58, i32 5
  %60 = load i8, i8* %59, align 4
  %61 = icmp eq i8 %60, 1
  br i1 %61, label %65, label %62

62:                                               ; preds = %52
  %63 = load i8, i8* %54, align 1
  %64 = icmp sgt i8 %63, 0
  br i1 %64, label %978, label %69

65:                                               ; preds = %52, %978, %41, %38
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 13, i32 18
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 0
  br label %69

69:                                               ; preds = %978, %62, %34, %11, %65
  %70 = phi i1 [ %68, %65 ], [ false, %11 ], [ false, %34 ], [ false, %62 ], [ false, %978 ]
  %71 = zext i1 %70 to i32
  %72 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 6, i64 0
  %73 = load i8, i8* %72, align 8
  %74 = bitcast %struct.RD_STATS* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %74) #6
  %75 = bitcast %struct.RD_STATS* %16 to i64*
  store i64 -6148914691236517206, i64* %75, align 8
  %76 = bitcast %struct.RD_STATS* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %76) #6
  %77 = bitcast %struct.RD_STATS* %17 to i64*
  store i64 -6148914691236517206, i64* %77, align 8
  %78 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 0
  store i32 0, i32* %78, align 8
  %79 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 1
  %80 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 4
  %81 = bitcast i64* %79 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %80, align 8
  %82 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 5
  store i32 0, i32* %82, align 4
  %83 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 0
  store i32 0, i32* %83, align 8
  %84 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 1
  %85 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 4
  %86 = bitcast i64* %84 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %85, align 8
  %87 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 5
  store i32 0, i32* %87, align 4
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 20, i32 13
  %89 = load i8, i8* %88, align 1
  %90 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 0
  %91 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 14
  %92 = load i32, i32* %91, align 8
  %93 = tail call i32 @av1_find_interp_filter_match(%struct.MB_MODE_INFO* %29, %struct.AV1_COMP* %1, i8 zeroext %89, i32 %71, %struct.INTERPOLATION_FILTER_STATS* %90, i32 %92)
  %94 = icmp eq i32 %93, -1
  br i1 %94, label %103, label %95

95:                                               ; preds = %69
  %96 = sext i32 %93 to i64
  %97 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %96, i32 5
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %6, align 8
  %99 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %96, i32 6
  %100 = load i32, i32* %99, align 8
  %101 = sext i8 %73 to i64
  %102 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 61, i64 %101
  store i32 %100, i32* %102, align 4
  br label %895

103:                                              ; preds = %69
  %104 = bitcast [2 x i32]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %104) #6
  %105 = getelementptr inbounds [2 x i32], [2 x i32]* %18, i64 0, i64 0
  %106 = getelementptr inbounds [2 x i32], [2 x i32]* %18, i64 0, i64 1
  %107 = tail call i32 @av1_get_pred_context_switchable_interp(%struct.macroblockd* %26, i32 0) #6
  store i32 %107, i32* %105, align 4
  %108 = tail call i32 @av1_get_pred_context_switchable_interp(%struct.macroblockd* %26, i32 1) #6
  store i32 %108, i32* %106, align 4
  %109 = load %struct.SequenceHeader*, %struct.SequenceHeader** %21, align 16
  %110 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %109, i64 0, i32 19
  %111 = load i8, i8* %110, align 8
  %112 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 8, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = sext i32 %107 to i64
  %115 = and i32 %113, 255
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 20, i32 37, i64 %114, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp eq i8 %111, 0
  br i1 %119, label %128, label %120

120:                                              ; preds = %103
  %121 = lshr i32 %113, 16
  %122 = sext i32 %108 to i64
  %123 = and i32 %121, 255
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 20, i32 37, i64 %122, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = add nsw i32 %126, %118
  br label %128

128:                                              ; preds = %103, %120
  %129 = phi i32 [ %127, %120 ], [ %118, %103 ]
  store i32 %129, i32* %7, align 4
  %130 = load i32, i32* %8, align 4
  %131 = bitcast %struct.RD_STATS* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %131) #6
  %132 = bitcast %struct.RD_STATS* %14 to i64*
  store i64 -6148914694099828736, i64* %132, align 8
  %133 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 0
  %134 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 1
  %135 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 4
  %136 = bitcast i64* %134 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %136, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %135, align 8
  %137 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 5
  store i32 0, i32* %137, align 4
  %138 = icmp eq i32 %130, 0
  br i1 %138, label %139, label %144

139:                                              ; preds = %128
  %140 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %26, i64 0, i32 0
  %141 = load i32, i32* %140, align 16
  %142 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 1
  %143 = load i32, i32* %142, align 4
  tail call void @av1_enc_build_inter_predictor(%struct.AV1Common* %20, %struct.macroblockd* %26, i32 %141, i32 %143, %struct.BUFFER_SET* %5, i8 zeroext %3, i32 0, i32 0) #6
  br label %144

144:                                              ; preds = %128, %139
  %145 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 13, i32 17
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 0
  %148 = zext i1 %147 to i64
  %149 = getelementptr inbounds [2 x void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*], [2 x void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*]* @model_rd_sb_fn, i64 0, i64 %148
  %150 = load void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*, void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)** %149, align 8
  %151 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 3
  call void %150(%struct.AV1_COMP* %1, i8 zeroext %3, %struct.macroblock* %0, %struct.macroblockd* %26, i32 0, i32 0, i32* nonnull %133, i64* %134, i32* %135, i64* %151, i32* null, i64* null, i64* null) #6
  %152 = load i32, i32* %133, align 8
  %153 = icmp eq i32 %152, 2147483647
  br i1 %153, label %154, label %157

154:                                              ; preds = %144
  store i32 2147483647, i32* %78, align 8
  %155 = bitcast i64* %79 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %155, align 8
  %156 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 3
  store i64 9223372036854775807, i64* %156, align 8
  store i32 0, i32* %80, align 8
  store i32 0, i32* %82, align 4
  br label %164

157:                                              ; preds = %144
  store i32 %152, i32* %78, align 8
  %158 = load i32, i32* %137, align 4
  store i32 %158, i32* %82, align 4
  %159 = load i64, i64* %134, align 8
  store i64 %159, i64* %79, align 8
  %160 = load i64, i64* %151, align 8
  %161 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 3
  store i64 %160, i64* %161, align 8
  %162 = load i32, i32* %135, align 8
  %163 = and i32 %162, 1
  store i32 %163, i32* %80, align 8
  br label %164

164:                                              ; preds = %154, %157
  %165 = phi i32 [ 0, %154 ], [ %163, %157 ]
  %166 = phi i64 [ 9223372036854775807, %154 ], [ %160, %157 ]
  %167 = phi i64 [ 9223372036854775807, %154 ], [ %159, %157 ]
  %168 = phi i32 [ 0, %154 ], [ %158, %157 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %131) #6
  br i1 %25, label %169, label %203

169:                                              ; preds = %164
  %170 = load i32, i32* %8, align 4
  %171 = bitcast %struct.RD_STATS* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %171) #6
  %172 = bitcast %struct.RD_STATS* %13 to i64*
  store i64 -6148914694099828736, i64* %172, align 8
  %173 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 0
  %174 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 1
  %175 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 4
  %176 = bitcast i64* %174 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %176, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %175, align 8
  %177 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 5
  store i32 0, i32* %177, align 4
  %178 = icmp eq i32 %170, 0
  br i1 %178, label %179, label %184

179:                                              ; preds = %169
  %180 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %26, i64 0, i32 0
  %181 = load i32, i32* %180, align 16
  %182 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 1
  %183 = load i32, i32* %182, align 4
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %20, %struct.macroblockd* %26, i32 %181, i32 %183, %struct.BUFFER_SET* %5, i8 zeroext %3, i32 1, i32 2) #6
  br label %184

184:                                              ; preds = %169, %179
  %185 = load i32, i32* %145, align 4
  %186 = icmp eq i32 %185, 0
  %187 = zext i1 %186 to i64
  %188 = getelementptr inbounds [2 x void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*], [2 x void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*]* @model_rd_sb_fn, i64 0, i64 %187
  %189 = load void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*, void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)** %188, align 8
  %190 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 3
  call void %189(%struct.AV1_COMP* %1, i8 zeroext %3, %struct.macroblock* %0, %struct.macroblockd* %26, i32 1, i32 2, i32* nonnull %173, i64* %174, i32* %175, i64* %190, i32* null, i64* null, i64* null) #6
  %191 = load i32, i32* %173, align 8
  %192 = icmp eq i32 %191, 2147483647
  br i1 %192, label %193, label %196

193:                                              ; preds = %184
  store i32 2147483647, i32* %83, align 8
  %194 = bitcast i64* %84 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %194, align 8
  %195 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 3
  store i64 9223372036854775807, i64* %195, align 8
  store i32 0, i32* %85, align 8
  store i32 0, i32* %87, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %171) #6
  store i32 1, i32* %8, align 4
  br label %210

196:                                              ; preds = %184
  store i32 %191, i32* %83, align 8
  %197 = load i32, i32* %177, align 4
  store i32 %197, i32* %87, align 4
  %198 = load i64, i64* %174, align 8
  store i64 %198, i64* %84, align 8
  %199 = load i64, i64* %190, align 8
  %200 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 3
  store i64 %199, i64* %200, align 8
  %201 = load i32, i32* %175, align 8
  %202 = and i32 %201, 1
  store i32 %202, i32* %85, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %171) #6
  br label %203

203:                                              ; preds = %164, %196
  %204 = phi i32 [ %191, %196 ], [ 0, %164 ]
  %205 = phi i32 [ %197, %196 ], [ 0, %164 ]
  %206 = phi i64 [ %198, %196 ], [ 0, %164 ]
  %207 = phi i64 [ %199, %196 ], [ 0, %164 ]
  %208 = phi i32 [ %202, %196 ], [ 1, %164 ]
  store i32 1, i32* %8, align 4
  %209 = icmp eq i32 %152, 2147483647
  br i1 %209, label %210, label %213

210:                                              ; preds = %193, %203
  store i32 2147483647, i32* %83, align 8
  %211 = bitcast i64* %84 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %211, align 8
  %212 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 3
  store i64 9223372036854775807, i64* %212, align 8
  store i32 0, i32* %85, align 8
  store i32 0, i32* %87, align 4
  br label %227

213:                                              ; preds = %203
  %214 = sext i32 %204 to i64
  %215 = sext i32 %152 to i64
  %216 = add nsw i64 %215, %214
  %217 = icmp slt i64 %216, 2147483647
  %218 = select i1 %217, i64 %216, i64 2147483647
  %219 = trunc i64 %218 to i32
  store i32 %219, i32* %83, align 8
  %220 = icmp eq i32 %205, 0
  br i1 %220, label %221, label %222

221:                                              ; preds = %213
  store i32 %168, i32* %87, align 4
  br label %222

222:                                              ; preds = %221, %213
  %223 = add nsw i64 %206, %167
  store i64 %223, i64* %84, align 8
  %224 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 3
  %225 = add nsw i64 %207, %166
  store i64 %225, i64* %224, align 8
  %226 = and i32 %208, %165
  store i32 %226, i32* %85, align 8
  br label %227

227:                                              ; preds = %210, %222
  %228 = phi i64 [ 9223372036854775807, %210 ], [ %223, %222 ]
  %229 = phi i32 [ 2147483647, %210 ], [ %219, %222 ]
  %230 = load i32, i32* %7, align 4
  %231 = add nsw i32 %229, %230
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 17
  %234 = load i32, i32* %233, align 8
  %235 = sext i32 %234 to i64
  %236 = mul nsw i64 %232, %235
  %237 = add nsw i64 %236, 256
  %238 = ashr i64 %237, 9
  %239 = shl i64 %228, 7
  %240 = add nsw i64 %238, %239
  store i64 %240, i64* %6, align 8
  %241 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 3
  %242 = lshr i64 %166, 4
  %243 = trunc i64 %242 to i32
  %244 = sext i8 %73 to i64
  %245 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 61, i64 %244
  store i32 %243, i32* %245, align 4
  %246 = icmp ne i8 %89, 4
  %247 = xor i1 %70, true
  %248 = or i1 %246, %247
  br i1 %248, label %893, label %249

249:                                              ; preds = %227
  %250 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 7
  %251 = load [3 x [8 x i64]]*, [3 x [8 x i64]]** %250, align 8
  %252 = icmp eq [3 x [8 x i64]]* %251, null
  br i1 %252, label %285, label %253

253:                                              ; preds = %249
  %254 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 6, i64 1
  %255 = load i8, i8* %254, align 1
  %256 = icmp slt i8 %255, 1
  br i1 %256, label %285, label %257

257:                                              ; preds = %253
  %258 = load i16, i16* %30, align 1
  %259 = lshr i16 %258, 4
  %260 = and i16 %259, 3
  %261 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 2
  %262 = load i8, i8* %261, align 2
  %263 = zext i8 %262 to i64
  %264 = getelementptr inbounds [25 x i8], [25 x i8]* @compound_ref0_mode.lut, i64 0, i64 %263
  %265 = load i8, i8* %264, align 1
  %266 = getelementptr inbounds [25 x i8], [25 x i8]* @compound_ref1_mode.lut, i64 0, i64 %263
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %265 to i64
  %269 = zext i16 %260 to i64
  %270 = load i8, i8* %72, align 1
  %271 = sext i8 %270 to i64
  %272 = getelementptr inbounds [3 x [8 x i64]], [3 x [8 x i64]]* %251, i64 %268, i64 %269, i64 %271
  %273 = load i64, i64* %272, align 8
  %274 = zext i8 %267 to i64
  %275 = sext i8 %255 to i64
  %276 = getelementptr inbounds [3 x [8 x i64]], [3 x [8 x i64]]* %251, i64 %274, i64 %269, i64 %275
  %277 = load i64, i64* %276, align 8
  %278 = icmp slt i64 %273, %277
  %279 = select i1 %278, i64 %273, i64 %277
  %280 = load i64, i64* %6, align 8
  %281 = ashr i64 %280, 1
  %282 = icmp sgt i64 %281, %279
  %283 = icmp ne i64 %10, 9223372036854775807
  %284 = and i1 %283, %282
  br i1 %284, label %893, label %285

285:                                              ; preds = %257, %253, %249
  %286 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 49
  store i32 0, i32* %286, align 4
  %287 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 68, i32 0
  %288 = load i32, i32* %287, align 4
  %289 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %27, align 8
  %290 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %289, align 8
  %291 = load %struct.SequenceHeader*, %struct.SequenceHeader** %21, align 16
  %292 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %291, i64 0, i32 27
  %293 = load i8, i8* %292, align 1
  %294 = icmp eq i8 %293, 0
  %295 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %290, i64 0, i32 6, i64 1
  %296 = load i8, i8* %295, align 1
  %297 = icmp sgt i8 %296, 0
  %298 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 17
  %299 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 18
  %300 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 19
  %301 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 20
  %302 = select i1 %297, i64 2, i64 1
  %303 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 9
  %304 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 10
  %305 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 1
  %306 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 2
  %307 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 9
  %308 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 10
  %309 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 1
  %310 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 2
  br label %311

311:                                              ; preds = %393, %285
  %312 = phi i32 [ %288, %285 ], [ %397, %393 ]
  %313 = phi i32 [ %288, %285 ], [ %396, %393 ]
  %314 = phi i64 [ 0, %285 ], [ %398, %393 ]
  %315 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %290, i64 0, i32 6, i64 %314
  %316 = load i8, i8* %315, align 1
  %317 = add i8 %316, -1
  %318 = icmp ult i8 %317, 8
  br i1 %318, label %319, label %327

319:                                              ; preds = %311
  %320 = sext i8 %316 to i64
  %321 = add nsw i64 %320, -1
  %322 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 13, i64 %321
  %323 = load i32, i32* %322, align 4
  %324 = icmp eq i32 %323, -1
  %325 = sext i32 %323 to i64
  %326 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 15, i64 %325
  br i1 %324, label %327, label %328

327:                                              ; preds = %319, %311
  br label %328

328:                                              ; preds = %327, %319
  %329 = phi %struct.scale_factors* [ null, %327 ], [ %326, %319 ]
  %330 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %329, i64 0, i32 0
  %331 = load i32, i32* %330, align 8
  %332 = icmp eq i32 %331, -1
  br i1 %332, label %341, label %333

333:                                              ; preds = %328
  %334 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %329, i64 0, i32 1
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, -1
  br i1 %336, label %341, label %337

337:                                              ; preds = %333
  %338 = icmp eq i32 %331, 16384
  %339 = icmp eq i32 %335, 16384
  %340 = and i1 %338, %339
  br i1 %340, label %341, label %400

341:                                              ; preds = %337, %333, %328
  %342 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %290, i64 0, i32 5, i64 %314, i32 0
  %343 = load i32, i32* %342, align 4
  %344 = shl i32 %343, 16
  %345 = ashr exact i32 %344, 16
  %346 = ashr i32 %343, 16
  %347 = load i32, i32* %298, align 4
  %348 = load i32, i32* %299, align 8
  %349 = load i32, i32* %300, align 4
  %350 = load i32, i32* %301, align 16
  %351 = load i8, i8* %303, align 8
  %352 = zext i8 %351 to i32
  %353 = load i8, i8* %304, align 1
  %354 = zext i8 %353 to i32
  %355 = load i32, i32* %305, align 4
  %356 = load i32, i32* %306, align 8
  %357 = shl nuw nsw i32 %352, 4
  %358 = add nuw nsw i32 %357, 48
  %359 = shl nuw nsw i32 %354, 4
  %360 = add nuw nsw i32 %359, 48
  %361 = sub nsw i32 1, %356
  %362 = shl i32 %345, %361
  %363 = sub nsw i32 1, %355
  %364 = shl i32 %346, %363
  %365 = shl i32 %347, %363
  %366 = sub nuw nsw i32 -64, %357
  %367 = add i32 %365, %366
  %368 = shl i32 %348, %363
  %369 = add nsw i32 %358, %368
  %370 = shl i32 %349, %361
  %371 = sub nuw nsw i32 -64, %359
  %372 = add i32 %370, %371
  %373 = shl i32 %350, %361
  %374 = add nsw i32 %360, %373
  %375 = shl i32 %364, 16
  %376 = ashr exact i32 %375, 16
  %377 = icmp sgt i32 %367, %376
  %378 = icmp slt i32 %369, %376
  %379 = select i1 %378, i32 %369, i32 %376
  %380 = select i1 %377, i32 %367, i32 %379
  %381 = shl i32 %362, 16
  %382 = ashr exact i32 %381, 16
  %383 = icmp sgt i32 %372, %382
  %384 = icmp slt i32 %374, %382
  %385 = select i1 %384, i32 %374, i32 %382
  %386 = select i1 %383, i32 %372, i32 %385
  %387 = and i32 %380, 15
  %388 = and i32 %386, 15
  %389 = icmp eq i32 %387, 0
  %390 = zext i1 %389 to i32
  %391 = icmp eq i32 %388, 0
  %392 = zext i1 %391 to i32
  br i1 %294, label %931, label %393

393:                                              ; preds = %931, %341
  %394 = phi i32 [ %390, %341 ], [ %973, %931 ]
  %395 = phi i32 [ %392, %341 ], [ %977, %931 ]
  %396 = and i32 %394, %313
  %397 = and i32 %395, %312
  %398 = add nuw nsw i64 %314, 1
  %399 = icmp eq i64 %398, %302
  br i1 %399, label %400, label %311

400:                                              ; preds = %337, %393
  %401 = phi i32 [ %397, %393 ], [ 0, %337 ]
  %402 = phi i32 [ %396, %393 ], [ 0, %337 ]
  br i1 %297, label %403, label %417

403:                                              ; preds = %400
  %404 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %290, i64 0, i32 28
  %405 = load i16, i16* %404, align 1
  %406 = and i16 %405, 512
  %407 = icmp eq i16 %406, 0
  br i1 %407, label %417, label %408

408:                                              ; preds = %403
  %409 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %290, i64 0, i32 17, i32 4
  %410 = load i8, i8* %409, align 1
  %411 = icmp eq i8 %410, 3
  br i1 %411, label %412, label %417

412:                                              ; preds = %408
  %413 = icmp eq i32 %402, 0
  %414 = icmp eq i32 %401, 1
  %415 = and i1 %414, %413
  %416 = select i1 %415, i32 0, i32 %401
  br label %417

417:                                              ; preds = %412, %400, %403, %408
  %418 = phi i32 [ %401, %403 ], [ %401, %408 ], [ %401, %400 ], [ %416, %412 ]
  %419 = bitcast %struct.BUFFER_SET* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %419)
  %420 = bitcast %struct.BUFFER_SET* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %419, i8* align 1 %420, i64 40, i1 false)
  %421 = bitcast %struct.BUFFER_SET* %12 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 3
  %424 = bitcast %struct.buf_2d* %423 to i64*
  store i64 %422, i64* %424, align 16
  %425 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %12, i64 0, i32 1, i64 0
  %426 = load i32, i32* %425, align 8
  %427 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  store i32 %426, i32* %427, align 8
  br i1 %25, label %914, label %428

428:                                              ; preds = %417, %914
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %419)
  %429 = bitcast [2 x %struct.BUFFER_SET*]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %429) #6
  %430 = getelementptr inbounds [2 x %struct.BUFFER_SET*], [2 x %struct.BUFFER_SET*]* %19, i64 0, i64 0
  %431 = getelementptr inbounds [2 x %struct.BUFFER_SET*], [2 x %struct.BUFFER_SET*]* %19, i64 0, i64 1
  store %struct.BUFFER_SET* %4, %struct.BUFFER_SET** %430, align 16
  store %struct.BUFFER_SET* %5, %struct.BUFFER_SET** %431, align 8
  %432 = load %struct.SequenceHeader*, %struct.SequenceHeader** %21, align 16
  %433 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %432, i64 0, i32 19
  %434 = load i8, i8* %433, align 8
  %435 = icmp eq i8 %434, 0
  br i1 %435, label %604, label %436

436:                                              ; preds = %428
  %437 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 7, i32 0
  %438 = load i32, i32* %437, align 16
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %592, label %440

440:                                              ; preds = %436
  %441 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 68
  %442 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %27, align 8
  %443 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %442, align 8
  %444 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %443, i64 0, i32 2
  %445 = load i8, i8* %444, align 2
  switch i8 %445, label %446 [
    i8 16, label %559
    i8 24, label %559
    i8 19, label %559
    i8 20, label %559
    i8 21, label %559
    i8 22, label %559
  ]

446:                                              ; preds = %440
  %447 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 12
  %448 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %447, align 16
  %449 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 11
  %450 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %449, align 8
  %451 = zext i8 %3 to i64
  %452 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide_log2, i64 0, i64 %451
  %453 = load i8, i8* %452, align 1
  %454 = zext i8 %453 to i32
  %455 = icmp eq %struct.MB_MODE_INFO* %448, null
  br i1 %455, label %471, label %456

456:                                              ; preds = %446
  %457 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %448, i64 0, i32 28
  %458 = load i16, i16* %457, align 1
  %459 = trunc i16 %458 to i8
  %460 = icmp sgt i8 %459, -1
  br i1 %460, label %461, label %465

461:                                              ; preds = %456
  %462 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %448, i64 0, i32 6, i64 0
  %463 = load i8, i8* %462, align 8
  %464 = icmp slt i8 %463, 1
  br i1 %464, label %471, label %465

465:                                              ; preds = %461, %456
  %466 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %448, i64 0, i32 8, i32 0
  %467 = load i32, i32* %466, align 4
  %468 = trunc i32 %467 to i16
  %469 = lshr i32 %467, 16
  %470 = trunc i32 %469 to i16
  br label %471

471:                                              ; preds = %465, %461, %446
  %472 = phi i16 [ 255, %446 ], [ 255, %461 ], [ %470, %465 ]
  %473 = phi i16 [ 255, %446 ], [ 255, %461 ], [ %468, %465 ]
  %474 = icmp eq %struct.MB_MODE_INFO* %450, null
  br i1 %474, label %490, label %475

475:                                              ; preds = %471
  %476 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %450, i64 0, i32 28
  %477 = load i16, i16* %476, align 1
  %478 = trunc i16 %477 to i8
  %479 = icmp sgt i8 %478, -1
  br i1 %479, label %480, label %484

480:                                              ; preds = %475
  %481 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %450, i64 0, i32 6, i64 0
  %482 = load i8, i8* %481, align 8
  %483 = icmp slt i8 %482, 1
  br i1 %483, label %490, label %484

484:                                              ; preds = %480, %475
  %485 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %450, i64 0, i32 8, i32 0
  %486 = load i32, i32* %485, align 4
  %487 = trunc i32 %486 to i16
  %488 = lshr i32 %486, 16
  %489 = trunc i32 %488 to i16
  br label %490

490:                                              ; preds = %484, %480, %471
  %491 = phi i16 [ 255, %471 ], [ 255, %480 ], [ %489, %484 ]
  %492 = phi i16 [ 255, %471 ], [ 255, %480 ], [ %487, %484 ]
  %493 = icmp ne i16 %472, 255
  %494 = icmp eq i16 %472, %491
  %495 = and i1 %493, %494
  %496 = zext i1 %495 to i32
  %497 = icmp ne i16 %473, 255
  %498 = icmp eq i16 %473, %492
  %499 = and i1 %497, %498
  %500 = zext i1 %499 to i32
  %501 = shl nuw nsw i32 %500, 1
  %502 = or i32 %501, %496
  %503 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 7, i32 4
  %504 = load i32, i32* %503, align 16
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %517, label %506

506:                                              ; preds = %490
  %507 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 1
  %508 = load i32, i32* %507, align 4
  %509 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 0
  %510 = load i32, i32* %509, align 16
  %511 = add nsw i32 %510, %508
  %512 = lshr i32 %511, %454
  %513 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 0, i32 4
  %514 = load i32, i32* %513, align 4
  %515 = add i32 %512, %514
  %516 = and i32 %515, 1
  br label %517

517:                                              ; preds = %506, %490
  %518 = phi i32 [ %516, %506 ], [ 0, %490 ]
  %519 = or i1 %495, %499
  %520 = zext i1 %519 to i32
  %521 = and i32 %518, %520
  %522 = mul nuw nsw i32 %521, %502
  %523 = trunc i32 %522 to i8
  %524 = icmp eq i8 %523, 0
  br i1 %524, label %559, label %525

525:                                              ; preds = %517
  %526 = and i32 %418, %402
  switch i8 %523, label %535 [
    i8 1, label %527
    i8 2, label %531
  ]

527:                                              ; preds = %525
  %528 = zext i16 %472 to i64
  %529 = getelementptr inbounds [2 x [3 x i16]], [2 x [3 x i16]]* @av1_interp_dual_filt_mask, i64 0, i64 0, i64 %528
  %530 = load i16, i16* %529, align 2
  br label %543

531:                                              ; preds = %525
  %532 = zext i16 %473 to i64
  %533 = getelementptr inbounds [2 x [3 x i16]], [2 x [3 x i16]]* @av1_interp_dual_filt_mask, i64 0, i64 1, i64 %532
  %534 = load i16, i16* %533, align 2
  br label %543

535:                                              ; preds = %525
  %536 = zext i16 %472 to i32
  %537 = zext i16 %473 to i32
  %538 = mul nuw nsw i32 %537, 3
  %539 = add nuw nsw i32 %538, %536
  %540 = and i32 %539, 255
  %541 = shl i32 1, %540
  %542 = trunc i32 %541 to i16
  br label %543

543:                                              ; preds = %535, %531, %527
  %544 = phi i16 [ %542, %535 ], [ %534, %531 ], [ %530, %527 ]
  %545 = and i16 %544, 510
  %546 = icmp eq i16 %545, 0
  br i1 %546, label %824, label %547

547:                                              ; preds = %543
  %548 = zext i16 %545 to i32
  br label %549

549:                                              ; preds = %556, %547
  %550 = phi i32 [ 8, %547 ], [ %557, %556 ]
  %551 = shl i32 1, %550
  %552 = and i32 %551, %548
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %556, label %554

554:                                              ; preds = %549
  %555 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 %550, i32* nonnull %105, i32 %526) #6
  br label %556

556:                                              ; preds = %554, %549
  %557 = add nsw i32 %550, -1
  %558 = icmp eq i32 %550, 0
  br i1 %558, label %824, label %549

559:                                              ; preds = %517, %440, %440, %440, %440, %440, %440
  %560 = zext i8 %3 to i64
  %561 = lshr i64 65539, %560
  %562 = and i64 %561, 1
  %563 = icmp eq i64 %562, 0
  br i1 %563, label %567, label %564

564:                                              ; preds = %559
  %565 = getelementptr inbounds %struct.InterpSearchFlags, %struct.InterpSearchFlags* %441, i64 0, i32 0
  %566 = load i32, i32* %565, align 4
  br label %567

567:                                              ; preds = %564, %559
  %568 = phi i32 [ %566, %564 ], [ %402, %559 ]
  %569 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 2, i32* nonnull %105, i32 %568) #6
  %570 = icmp eq i64 %569, 0
  %571 = select i1 %570, i32 0, i32 2
  %572 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 1, i32* nonnull %105, i32 %402) #6
  %573 = icmp eq i64 %572, 0
  %574 = select i1 %573, i32 %571, i32 1
  %575 = lshr i64 131077, %560
  %576 = and i64 %575, 1
  %577 = icmp eq i64 %576, 0
  br i1 %577, label %581, label %578

578:                                              ; preds = %567
  %579 = getelementptr inbounds %struct.InterpSearchFlags, %struct.InterpSearchFlags* %441, i64 0, i32 0
  %580 = load i32, i32* %579, align 4
  br label %581

581:                                              ; preds = %578, %567
  %582 = phi i32 [ %580, %578 ], [ %418, %567 ]
  %583 = add nuw nsw i32 %574, 6
  %584 = add nuw nsw i32 %574, 3
  %585 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 %583, i32* nonnull %105, i32 %582) #6
  %586 = add nuw nsw i32 %574, 3
  br label %587

587:                                              ; preds = %587, %581
  %588 = phi i32 [ %586, %581 ], [ %590, %587 ]
  %589 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 %588, i32* nonnull %105, i32 %418) #6
  %590 = add nsw i32 %588, -3
  %591 = icmp slt i32 %590, %584
  br i1 %591, label %824, label %587, !llvm.loop !5

592:                                              ; preds = %436
  %593 = and i32 %418, %402
  br label %594

594:                                              ; preds = %601, %592
  %595 = phi i32 [ 8, %592 ], [ %602, %601 ]
  %596 = shl i32 1, %595
  %597 = and i32 %596, 510
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %601, label %599

599:                                              ; preds = %594
  %600 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 %595, i32* nonnull %105, i32 %593) #6
  br label %601

601:                                              ; preds = %599, %594
  %602 = add nsw i32 %595, -1
  %603 = icmp eq i32 %595, 0
  br i1 %603, label %824, label %594

604:                                              ; preds = %428
  %605 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %27, align 8
  %606 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %605, align 8
  %607 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 68, i32 1
  %608 = load i16, i16* %607, align 4
  %609 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 7, i32 5
  %610 = load i32, i32* %609, align 4
  %611 = icmp eq i32 %610, 2
  br i1 %611, label %612, label %641

612:                                              ; preds = %604
  %613 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 0
  %614 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %613, align 16
  %615 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 46
  %616 = load i8, i8* %615, align 16
  %617 = zext i8 %616 to i64
  %618 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %614, i64 0, i32 6, i32 0, i64 %617
  %619 = load i8, i8* %618, align 1
  %620 = call i32 @av1_get_pred_context_switchable_interp(%struct.macroblockd* %26, i32 0) #6
  %621 = call i32 @av1_get_pred_context_switchable_interp(%struct.macroblockd* %26, i32 1) #6
  %622 = zext i8 %619 to i64
  %623 = sext i32 %620 to i64
  %624 = sext i32 %621 to i64
  %625 = getelementptr inbounds [7 x i32], [7 x i32]* @find_best_non_dual_interp_filter.thr, i64 0, i64 %622
  %626 = load i32, i32* %625, align 4
  %627 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 60, i32 3, i64 %622, i64 %623, i64 0
  %628 = load i32, i32* %627, align 4
  %629 = icmp slt i32 %628, %626
  br i1 %629, label %630, label %636

630:                                              ; preds = %612
  %631 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 60, i32 3, i64 %622, i64 %624, i64 0
  %632 = load i32, i32* %631, align 4
  %633 = icmp slt i32 %632, %626
  %634 = and i16 %608, 510
  %635 = select i1 %633, i16 %634, i16 %608
  br label %636

636:                                              ; preds = %630, %612
  %637 = phi i16 [ %608, %612 ], [ %635, %630 ]
  %638 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 60, i32 3, i64 %622, i64 %623, i64 1
  %639 = load i32, i32* %638, align 4
  %640 = icmp slt i32 %639, %626
  br i1 %640, label %807, label %813

641:                                              ; preds = %818, %813, %604
  %642 = phi i16 [ %608, %604 ], [ %814, %813 ], [ %823, %818 ]
  %643 = and i32 %418, %402
  %644 = load i32, i32* %287, align 4
  %645 = icmp eq i32 %643, %644
  br i1 %645, label %741, label %646

646:                                              ; preds = %641
  %647 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 12
  %648 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %647, align 16
  %649 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 11
  %650 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %649, align 8
  %651 = zext i8 %3 to i64
  %652 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide_log2, i64 0, i64 %651
  %653 = load i8, i8* %652, align 1
  %654 = zext i8 %653 to i32
  %655 = icmp eq %struct.MB_MODE_INFO* %648, null
  br i1 %655, label %671, label %656

656:                                              ; preds = %646
  %657 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %648, i64 0, i32 28
  %658 = load i16, i16* %657, align 1
  %659 = trunc i16 %658 to i8
  %660 = icmp sgt i8 %659, -1
  br i1 %660, label %661, label %665

661:                                              ; preds = %656
  %662 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %648, i64 0, i32 6, i64 0
  %663 = load i8, i8* %662, align 8
  %664 = icmp slt i8 %663, 1
  br i1 %664, label %671, label %665

665:                                              ; preds = %661, %656
  %666 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %648, i64 0, i32 8, i32 0
  %667 = load i32, i32* %666, align 4
  %668 = trunc i32 %667 to i16
  %669 = lshr i32 %667, 16
  %670 = trunc i32 %669 to i16
  br label %671

671:                                              ; preds = %665, %661, %646
  %672 = phi i16 [ 255, %646 ], [ 255, %661 ], [ %670, %665 ]
  %673 = phi i16 [ 255, %646 ], [ 255, %661 ], [ %668, %665 ]
  %674 = icmp eq %struct.MB_MODE_INFO* %650, null
  br i1 %674, label %690, label %675

675:                                              ; preds = %671
  %676 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %650, i64 0, i32 28
  %677 = load i16, i16* %676, align 1
  %678 = trunc i16 %677 to i8
  %679 = icmp sgt i8 %678, -1
  br i1 %679, label %680, label %684

680:                                              ; preds = %675
  %681 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %650, i64 0, i32 6, i64 0
  %682 = load i8, i8* %681, align 8
  %683 = icmp slt i8 %682, 1
  br i1 %683, label %690, label %684

684:                                              ; preds = %680, %675
  %685 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %650, i64 0, i32 8, i32 0
  %686 = load i32, i32* %685, align 4
  %687 = trunc i32 %686 to i16
  %688 = lshr i32 %686, 16
  %689 = trunc i32 %688 to i16
  br label %690

690:                                              ; preds = %684, %680, %671
  %691 = phi i16 [ 255, %671 ], [ 255, %680 ], [ %689, %684 ]
  %692 = phi i16 [ 255, %671 ], [ 255, %680 ], [ %687, %684 ]
  %693 = icmp ne i16 %672, 255
  %694 = icmp eq i16 %672, %691
  %695 = and i1 %693, %694
  %696 = zext i1 %695 to i32
  %697 = icmp ne i16 %673, 255
  %698 = icmp eq i16 %673, %692
  %699 = and i1 %697, %698
  %700 = zext i1 %699 to i32
  %701 = shl nuw nsw i32 %700, 1
  %702 = or i32 %701, %696
  %703 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 7, i32 4
  %704 = load i32, i32* %703, align 16
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %717, label %706

706:                                              ; preds = %690
  %707 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 1
  %708 = load i32, i32* %707, align 4
  %709 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %26, i64 0, i32 0
  %710 = load i32, i32* %709, align 16
  %711 = add nsw i32 %710, %708
  %712 = lshr i32 %711, %654
  %713 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 0, i32 4
  %714 = load i32, i32* %713, align 4
  %715 = add i32 %712, %714
  %716 = and i32 %715, 1
  br label %717

717:                                              ; preds = %706, %690
  %718 = phi i32 [ %716, %706 ], [ 0, %690 ]
  %719 = or i1 %695, %699
  %720 = zext i1 %719 to i32
  %721 = and i32 %718, %720
  %722 = mul nuw nsw i32 %721, %702
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %741, label %724

724:                                              ; preds = %717
  %725 = zext i16 %672 to i32
  %726 = shl nuw nsw i32 %725, 2
  %727 = load i32, i32* %609, align 4
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %737, label %729

729:                                              ; preds = %724
  %730 = zext i16 %642 to i32
  %731 = and i32 %726, 252
  %732 = shl i32 1, %731
  %733 = and i32 %732, %730
  %734 = icmp eq i32 %733, 0
  %735 = icmp eq i16 %672, 0
  %736 = or i1 %735, %734
  br i1 %736, label %824, label %739

737:                                              ; preds = %724
  %738 = icmp eq i16 %672, 0
  br i1 %738, label %824, label %739

739:                                              ; preds = %737, %729
  %740 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 %726, i32* nonnull %105, i32 %643) #6
  br label %824

741:                                              ; preds = %717, %641
  %742 = icmp eq i8 %3, 0
  br i1 %742, label %764, label %743

743:                                              ; preds = %741
  %744 = zext i8 %3 to i64
  %745 = lshr i64 65539, %744
  %746 = and i64 %745, 1
  %747 = icmp ne i64 %746, 0
  %748 = icmp eq i32 %644, %418
  %749 = and i1 %747, %748
  br i1 %749, label %764, label %750

750:                                              ; preds = %743
  %751 = lshr i64 131077, %744
  %752 = and i64 %751, 1
  %753 = icmp ne i64 %752, 0
  %754 = icmp eq i32 %644, %402
  %755 = and i1 %753, %754
  br i1 %755, label %764, label %756

756:                                              ; preds = %750
  %757 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %606, i64 0, i32 8, i32 0
  %758 = zext i16 %642 to i32
  %759 = load i32, i32* %609, align 4
  %760 = icmp ne i32 %759, 0
  %761 = and i32 %758, 16
  %762 = icmp eq i32 %761, 0
  %763 = and i1 %762, %760
  br i1 %763, label %802, label %788

764:                                              ; preds = %750, %743, %741
  %765 = load i32, i32* %609, align 4
  %766 = icmp eq i32 %765, 0
  br i1 %766, label %770, label %767

767:                                              ; preds = %764
  %768 = and i16 %642, 272
  %769 = icmp eq i16 %768, 0
  br i1 %769, label %824, label %770

770:                                              ; preds = %767, %764
  %771 = phi i16 [ %768, %767 ], [ 272, %764 ]
  %772 = zext i16 %771 to i32
  %773 = and i32 %772, 256
  %774 = icmp eq i32 %773, 0
  br i1 %774, label %777, label %775

775:                                              ; preds = %770
  %776 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 8, i32* nonnull %105, i32 %644) #6
  br label %777

777:                                              ; preds = %770, %775
  br label %778

778:                                              ; preds = %785, %777
  %779 = phi i32 [ 7, %777 ], [ %786, %785 ]
  %780 = shl i32 1, %779
  %781 = and i32 %780, %772
  %782 = icmp eq i32 %781, 0
  br i1 %782, label %785, label %783

783:                                              ; preds = %778
  %784 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 %779, i32* nonnull %105, i32 %643) #6
  br label %785

785:                                              ; preds = %783, %778
  %786 = add nsw i32 %779, -1
  %787 = icmp eq i32 %779, 0
  br i1 %787, label %824, label %778, !llvm.loop !7

788:                                              ; preds = %756
  %789 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 7, i32 3
  %790 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 4, i32* nonnull %105, i32 %643) #6
  %791 = load i32, i32* %789, align 4
  %792 = icmp eq i32 %791, 0
  br i1 %792, label %799, label %793

793:                                              ; preds = %788
  %794 = load i32, i32* %287, align 4
  %795 = icmp eq i32 %643, %794
  br i1 %795, label %799, label %796

796:                                              ; preds = %793
  %797 = load i32, i32* %757, align 4
  %798 = icmp eq i32 %797, 65537
  br i1 %798, label %824, label %799

799:                                              ; preds = %796, %793, %788
  %800 = load i32, i32* %609, align 4
  %801 = icmp eq i32 %800, 0
  br i1 %801, label %805, label %802

802:                                              ; preds = %799, %756
  %803 = and i32 %758, 256
  %804 = icmp eq i32 %803, 0
  br i1 %804, label %824, label %805

805:                                              ; preds = %802, %799
  %806 = call fastcc i64 @interpolation_filter_rd(%struct.macroblock* %0, %struct.AV1_COMP* %1, i8 zeroext %3, %struct.BUFFER_SET* %5, i64* %6, %struct.RD_STATS* nonnull %16, %struct.RD_STATS* nonnull %17, i32* %7, %struct.BUFFER_SET** nonnull %430, i32 8, i32* nonnull %105, i32 %643) #6
  br label %824

807:                                              ; preds = %636
  %808 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 60, i32 3, i64 %622, i64 %624, i64 1
  %809 = load i32, i32* %808, align 4
  %810 = icmp slt i32 %809, %626
  %811 = and i16 %637, 495
  %812 = select i1 %810, i16 %811, i16 %637
  br label %813

813:                                              ; preds = %807, %636
  %814 = phi i16 [ %637, %636 ], [ %812, %807 ]
  %815 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 60, i32 3, i64 %622, i64 %623, i64 2
  %816 = load i32, i32* %815, align 4
  %817 = icmp slt i32 %816, %626
  br i1 %817, label %818, label %641

818:                                              ; preds = %813
  %819 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 60, i32 3, i64 %622, i64 %624, i64 2
  %820 = load i32, i32* %819, align 4
  %821 = icmp slt i32 %820, %626
  %822 = and i16 %814, 255
  %823 = select i1 %821, i16 %822, i16 %814
  br label %641

824:                                              ; preds = %556, %587, %601, %785, %805, %802, %796, %767, %739, %737, %729, %543
  %825 = bitcast [2 x %struct.BUFFER_SET*]* %19 to i64*
  %826 = load i64, i64* %825, align 16
  %827 = bitcast %struct.BUFFER_SET** %431 to i64*
  %828 = load i64, i64* %827, align 8
  store i64 %828, i64* %825, align 16
  store i64 %826, i64* %827, align 8
  %829 = bitcast %struct.BUFFER_SET* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %829) #6
  %830 = inttoptr i64 %828 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %829, i8* align 1 %830, i64 40, i1 false) #6
  %831 = bitcast %struct.BUFFER_SET* %15 to i64*
  %832 = load i64, i64* %831, align 8
  %833 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 3
  %834 = bitcast %struct.buf_2d* %833 to i64*
  store i64 %832, i64* %834, align 16
  %835 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 1, i64 0
  %836 = load i32, i32* %835, align 8
  %837 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  store i32 %836, i32* %837, align 8
  br i1 %25, label %897, label %838

838:                                              ; preds = %824, %897
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %829) #6
  %839 = load i32, i32* %286, align 4
  %840 = icmp eq i32 %839, 1
  br i1 %840, label %841, label %846

841:                                              ; preds = %838
  %842 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %26, i64 0, i32 0
  %843 = load i32, i32* %842, align 16
  %844 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 1
  %845 = load i32, i32* %844, align 4
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %20, %struct.macroblockd* %26, i32 %843, i32 %845, %struct.BUFFER_SET* %5, i8 zeroext %3, i32 0, i32 0) #6
  br label %846

846:                                              ; preds = %841, %838
  %847 = load i64, i64* %241, align 8
  %848 = lshr i64 %847, 4
  %849 = trunc i64 %848 to i32
  store i32 %849, i32* %245, align 4
  %850 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 7, i32 2
  %851 = load i32, i32* %850, align 8
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %892, label %853

853:                                              ; preds = %846
  %854 = load i32, i32* %91, align 8
  %855 = icmp slt i32 %854, 128
  br i1 %855, label %856, label %890

856:                                              ; preds = %853
  %857 = load i64, i64* %6, align 8
  %858 = load i32, i32* %112, align 4
  %859 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 5, i64 0, i32 0
  %860 = load i32, i32* %859, align 8
  %861 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 5, i64 1, i32 0
  %862 = load i32, i32* %861, align 4
  %863 = load i8, i8* %72, align 8
  %864 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 6, i64 1
  %865 = load i8, i8* %864, align 1
  %866 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 17, i32 4
  %867 = load i8, i8* %866, align 1
  %868 = load i16, i16* %30, align 1
  %869 = lshr i16 %868, 9
  %870 = and i16 %869, 1
  %871 = zext i16 %870 to i32
  %872 = sext i32 %854 to i64
  %873 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %872
  %874 = bitcast %struct.INTERPOLATION_FILTER_STATS* %873 to i8*
  %875 = getelementptr inbounds %struct.INTERPOLATION_FILTER_STATS, %struct.INTERPOLATION_FILTER_STATS* %873, i64 0, i32 0, i32 0
  store i32 %858, i32* %875, align 8
  %876 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %872, i32 1, i64 0, i32 0
  store i32 %860, i32* %876, align 4
  %877 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %872, i32 1, i64 1, i32 0
  store i32 %862, i32* %877, align 8
  %878 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %872, i32 2, i64 0
  store i8 %863, i8* %878, align 4
  %879 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %872, i32 2, i64 1
  store i8 %865, i8* %879, align 1
  %880 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %872, i32 3
  store i8 %867, i8* %880, align 2
  %881 = getelementptr inbounds i8, i8* %874, i64 15
  store i8 -86, i8* %881, align 1
  %882 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %872, i32 4
  store i32 %871, i32* %882, align 8
  %883 = getelementptr inbounds i8, i8* %874, i64 20
  %884 = bitcast i8* %883 to i32*
  store i32 -1431655766, i32* %884, align 4
  %885 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %872, i32 5
  store i64 %857, i64* %885, align 8
  %886 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %9, i64 0, i32 13, i64 %872, i32 6
  store i32 %849, i32* %886, align 8
  %887 = getelementptr inbounds i8, i8* %874, i64 36
  %888 = bitcast i8* %887 to i32*
  store i32 -1431655766, i32* %888, align 4
  %889 = add nsw i32 %854, 1
  br label %890

890:                                              ; preds = %853, %856
  %891 = phi i32 [ %889, %856 ], [ %854, %853 ]
  store i32 %891, i32* %91, align 8
  br label %892

892:                                              ; preds = %846, %890
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %429) #6
  br label %893

893:                                              ; preds = %227, %257, %892
  %894 = phi i64 [ 0, %892 ], [ 0, %227 ], [ 9223372036854775807, %257 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %104) #6
  br label %895

895:                                              ; preds = %893, %95
  %896 = phi i64 [ 0, %95 ], [ %894, %893 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %76) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %74) #6
  ret i64 %896

897:                                              ; preds = %824
  %898 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 0, i64 1
  %899 = bitcast i8** %898 to i64*
  %900 = load i64, i64* %899, align 8
  %901 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 3
  %902 = bitcast %struct.buf_2d* %901 to i64*
  store i64 %900, i64* %902, align 16
  %903 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 1, i64 1
  %904 = load i32, i32* %903, align 4
  %905 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 3, i32 4
  store i32 %904, i32* %905, align 8
  %906 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 0, i64 2
  %907 = bitcast i8** %906 to i64*
  %908 = load i64, i64* %907, align 8
  %909 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 2, i32 3
  %910 = bitcast %struct.buf_2d* %909 to i64*
  store i64 %908, i64* %910, align 16
  %911 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 1, i64 2
  %912 = load i32, i32* %911, align 8
  %913 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 2, i32 3, i32 4
  store i32 %912, i32* %913, align 8
  br label %838

914:                                              ; preds = %417
  %915 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %12, i64 0, i32 0, i64 1
  %916 = bitcast i8** %915 to i64*
  %917 = load i64, i64* %916, align 8
  %918 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 3
  %919 = bitcast %struct.buf_2d* %918 to i64*
  store i64 %917, i64* %919, align 16
  %920 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %12, i64 0, i32 1, i64 1
  %921 = load i32, i32* %920, align 4
  %922 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 3, i32 4
  store i32 %921, i32* %922, align 8
  %923 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %12, i64 0, i32 0, i64 2
  %924 = bitcast i8** %923 to i64*
  %925 = load i64, i64* %924, align 8
  %926 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 2, i32 3
  %927 = bitcast %struct.buf_2d* %926 to i64*
  store i64 %925, i64* %927, align 16
  %928 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %12, i64 0, i32 1, i64 2
  %929 = load i32, i32* %928, align 8
  %930 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 2, i32 3, i32 4
  store i32 %929, i32* %930, align 8
  br label %428

931:                                              ; preds = %341
  %932 = load i8, i8* %307, align 8
  %933 = zext i8 %932 to i32
  %934 = load i8, i8* %308, align 1
  %935 = zext i8 %934 to i32
  %936 = load i32, i32* %309, align 4
  %937 = load i32, i32* %310, align 8
  %938 = shl nuw nsw i32 %933, 4
  %939 = add nuw nsw i32 %938, 48
  %940 = shl nuw nsw i32 %935, 4
  %941 = add nuw nsw i32 %940, 48
  %942 = sub nsw i32 1, %937
  %943 = shl i32 %345, %942
  %944 = sub nsw i32 1, %936
  %945 = shl i32 %346, %944
  %946 = shl i32 %347, %944
  %947 = sub nuw nsw i32 -64, %938
  %948 = add i32 %946, %947
  %949 = shl i32 %348, %944
  %950 = add nsw i32 %939, %949
  %951 = shl i32 %349, %942
  %952 = sub nuw nsw i32 -64, %940
  %953 = add i32 %951, %952
  %954 = shl i32 %350, %942
  %955 = add nsw i32 %941, %954
  %956 = shl i32 %945, 16
  %957 = ashr exact i32 %956, 16
  %958 = icmp sgt i32 %948, %957
  %959 = icmp slt i32 %950, %957
  %960 = select i1 %959, i32 %950, i32 %957
  %961 = select i1 %958, i32 %948, i32 %960
  %962 = shl i32 %943, 16
  %963 = ashr exact i32 %962, 16
  %964 = icmp sgt i32 %953, %963
  %965 = icmp slt i32 %955, %963
  %966 = select i1 %965, i32 %955, i32 %963
  %967 = select i1 %964, i32 %953, i32 %966
  %968 = and i32 %961, 15
  %969 = and i32 %967, 15
  %970 = icmp eq i32 %968, 0
  %971 = zext i1 %970 to i32
  %972 = shl nuw nsw i32 %971, 1
  %973 = or i32 %972, %390
  %974 = icmp eq i32 %969, 0
  %975 = zext i1 %974 to i32
  %976 = shl nuw nsw i32 %975, 1
  %977 = or i32 %976, %392
  br label %393

978:                                              ; preds = %62
  %979 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %29, i64 0, i32 6, i64 1
  %980 = load i8, i8* %979, align 1
  %981 = sext i8 %980 to i64
  %982 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %55, i64 %981, i32 5
  %983 = load i8, i8* %982, align 4
  %984 = icmp eq i8 %983, 1
  br i1 %984, label %65, label %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @av1_get_pred_context_switchable_interp(%struct.macroblockd*, i32) local_unnamed_addr #3

declare void @av1_enc_build_inter_predictor(%struct.AV1Common*, %struct.macroblockd*, i32, i32, %struct.BUFFER_SET*, i8 zeroext, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @model_rd_for_sb(%struct.AV1_COMP* nocapture readonly, i8 zeroext, %struct.macroblock* nocapture, %struct.macroblockd* nocapture readonly, i32, i32, i32* nocapture, i64* nocapture, i32*, i64*, i32*, i64*, i64*) #4 {
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 3
  %17 = icmp sgt i32 %4, %5
  br i1 %17, label %137, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 6
  %20 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %19, align 8
  %21 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %20, align 8
  %22 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %21, i64 0, i32 6, i64 0
  %23 = load i8, i8* %22, align 8
  %24 = zext i8 %1 to i64
  %25 = bitcast i32* %14 to i8*
  %26 = bitcast i64* %15 to i8*
  %27 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 40
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 10, i32 0
  %29 = sext i8 %23 to i64
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %29
  %31 = icmp eq i32* %10, null
  %32 = icmp eq i64* %11, null
  %33 = icmp eq i64* %12, null
  %34 = sext i32 %4 to i64
  %35 = sext i32 %5 to i64
  br label %36

36:                                               ; preds = %134, %18
  %37 = phi i64 [ %135, %134 ], [ %34, %18 ]
  %38 = phi i64 [ %124, %134 ], [ 0, %18 ]
  %39 = phi i64 [ %125, %134 ], [ 0, %18 ]
  %40 = phi i64 [ %121, %134 ], [ 0, %18 ]
  %41 = icmp eq i64 %37, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %36
  %43 = load i8, i8* %16, align 4, !range !8
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %137, label %45

45:                                               ; preds = %42, %36
  %46 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %37, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %37, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = sext i32 %47 to i64
  %51 = sext i32 %49 to i64
  %52 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %24, i64 %50, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %54
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #6
  store i32 -1431655766, i32* %14, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #6
  store i64 -6148914691236517206, i64* %15, align 8
  %61 = load i32, i32* %27, align 16
  %62 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %37, i32 6, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %37, i32 6, i32 4
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %37, i32 3, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %37, i32 3, i32 4
  %70 = load i32, i32* %69, align 8
  %71 = call i64 %62(i8* %64, i32 %66, i8* %68, i32 %70, i32 %57, i32 %60) #6
  %72 = shl i32 %61, 1
  %73 = add i32 %72, -16
  %74 = shl i32 1, %73
  %75 = ashr i32 %74, 1
  %76 = sext i32 %75 to i64
  %77 = add nsw i64 %71, %76
  %78 = zext i32 %73 to i64
  %79 = ashr i64 %77, %78
  %80 = load i32, i32* %28, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %102, label %82

82:                                               ; preds = %45
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %37, i32 13
  %84 = load i16*, i16** %83, align 8
  %85 = getelementptr inbounds i16, i16* %84, i64 1
  %86 = load i16, i16* %85, align 2
  %87 = ashr i16 %86, 3
  %88 = icmp slt i16 %86, 960
  br i1 %88, label %89, label %97

89:                                               ; preds = %82
  %90 = sub nsw i16 280, %87
  %91 = sext i16 %90 to i64
  %92 = mul nsw i64 %79, %91
  %93 = icmp slt i64 %92, 274877906816
  %94 = lshr i64 %92, 7
  %95 = trunc i64 %94 to i32
  %96 = select i1 %93, i32 %95, i32 2147483647
  br label %97

97:                                               ; preds = %89, %82
  %98 = phi i32 [ %96, %89 ], [ 0, %82 ]
  store i32 %98, i32* %14, align 4
  %99 = sext i16 %87 to i64
  %100 = mul nsw i64 %79, %99
  %101 = ashr i64 %100, 8
  store i64 %101, i64* %15, align 8
  br label %113

102:                                              ; preds = %45
  %103 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %54
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %37, i32 13
  %107 = load i16*, i16** %106, align 8
  %108 = getelementptr inbounds i16, i16* %107, i64 1
  %109 = load i16, i16* %108, align 2
  %110 = ashr i16 %109, 3
  %111 = sext i16 %110 to i32
  call void @av1_model_rd_from_var_lapndz(i64 %79, i32 %105, i32 %111, i32* nonnull %14, i64* nonnull %15) #6
  %112 = load i64, i64* %15, align 8
  br label %113

113:                                              ; preds = %97, %102
  %114 = phi i64 [ %112, %102 ], [ %101, %97 ]
  %115 = shl i64 %114, 4
  store i64 %115, i64* %15, align 8
  br i1 %41, label %116, label %120

116:                                              ; preds = %113
  %117 = icmp slt i64 %79, 4294967295
  %118 = select i1 %117, i64 %79, i64 4294967295
  %119 = trunc i64 %118 to i32
  store i32 %119, i32* %30, align 4
  br label %120

120:                                              ; preds = %116, %113
  %121 = add nsw i64 %79, %40
  %122 = load i32, i32* %14, align 4
  %123 = sext i32 %122 to i64
  %124 = add nsw i64 %38, %123
  %125 = add nsw i64 %115, %39
  br i1 %31, label %128, label %126

126:                                              ; preds = %120
  %127 = getelementptr inbounds i32, i32* %10, i64 %37
  store i32 %122, i32* %127, align 4
  br label %128

128:                                              ; preds = %120, %126
  br i1 %32, label %131, label %129

129:                                              ; preds = %128
  %130 = getelementptr inbounds i64, i64* %11, i64 %37
  store i64 %79, i64* %130, align 8
  br label %131

131:                                              ; preds = %128, %129
  br i1 %33, label %134, label %132

132:                                              ; preds = %131
  %133 = getelementptr inbounds i64, i64* %12, i64 %37
  store i64 %115, i64* %133, align 8
  br label %134

134:                                              ; preds = %131, %132
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #6
  %135 = add nsw i64 %37, 1
  %136 = icmp slt i64 %37, %35
  br i1 %136, label %36, label %137

137:                                              ; preds = %134, %42, %13
  %138 = phi i64 [ 0, %13 ], [ %40, %42 ], [ %121, %134 ]
  %139 = phi i64 [ 0, %13 ], [ %39, %42 ], [ %125, %134 ]
  %140 = phi i64 [ 0, %13 ], [ %38, %42 ], [ %124, %134 ]
  %141 = icmp eq i32* %8, null
  br i1 %141, label %145, label %142

142:                                              ; preds = %137
  %143 = icmp eq i64 %138, 0
  %144 = zext i1 %143 to i32
  store i32 %144, i32* %8, align 4
  br label %145

145:                                              ; preds = %137, %142
  %146 = icmp eq i64* %9, null
  br i1 %146, label %149, label %147

147:                                              ; preds = %145
  %148 = shl i64 %138, 4
  store i64 %148, i64* %9, align 8
  br label %149

149:                                              ; preds = %145, %147
  %150 = icmp slt i64 %140, 2147483647
  %151 = select i1 %150, i64 %140, i64 2147483647
  %152 = trunc i64 %151 to i32
  store i32 %152, i32* %6, align 4
  store i64 %139, i64* %7, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @model_rd_for_sb_with_curvfit(%struct.AV1_COMP* nocapture readnone, i8 zeroext, %struct.macroblock* nocapture, %struct.macroblockd* nocapture readonly, i32, i32, i32* nocapture, i64* nocapture, i32*, i64*, i32*, i64*, i64*) #4 {
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 3
  %17 = icmp sgt i32 %4, %5
  br i1 %17, label %179, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 6
  %20 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %19, align 8
  %21 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %20, align 8
  %22 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %21, i64 0, i32 6, i64 0
  %23 = load i8, i8* %22, align 8
  %24 = zext i8 %1 to i64
  %25 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 20
  %26 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 18
  %27 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 40
  %28 = bitcast double* %14 to i8*
  %29 = bitcast double* %15 to i8*
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 17
  %31 = sext i8 %23 to i64
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %31
  %33 = icmp eq i32* %10, null
  %34 = icmp eq i64* %11, null
  %35 = icmp eq i64* %12, null
  %36 = sext i32 %4 to i64
  %37 = sext i32 %5 to i64
  br label %38

38:                                               ; preds = %176, %18
  %39 = phi i64 [ %177, %176 ], [ %36, %18 ]
  %40 = phi i64 [ %166, %176 ], [ 0, %18 ]
  %41 = phi i64 [ %167, %176 ], [ 0, %18 ]
  %42 = phi i64 [ %164, %176 ], [ 0, %18 ]
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %38
  %45 = load i8, i8* %16, align 4, !range !8
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %179, label %47

47:                                               ; preds = %44, %38
  %48 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %39, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %39, i32 2
  %51 = load i32, i32* %50, align 8
  %52 = sext i32 %49 to i64
  %53 = sext i32 %51 to i64
  %54 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %24, i64 %52, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %56
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = load i32, i32* %25, align 16
  %64 = icmp sgt i32 %63, -1
  br i1 %64, label %73, label %65

65:                                               ; preds = %47
  %66 = add nsw i32 %51, 3
  %67 = ashr i32 %63, %66
  %68 = add nsw i32 %67, %59
  %69 = icmp slt i32 %68, 0
  %70 = icmp sgt i32 %68, %59
  %71 = select i1 %70, i32 %59, i32 %68
  %72 = select i1 %69, i32 0, i32 %71
  br label %73

73:                                               ; preds = %65, %47
  %74 = phi i32 [ %72, %65 ], [ %59, %47 ]
  %75 = load i32, i32* %26, align 8
  %76 = icmp sgt i32 %75, -1
  br i1 %76, label %85, label %77

77:                                               ; preds = %73
  %78 = add nsw i32 %49, 3
  %79 = ashr i32 %75, %78
  %80 = add nsw i32 %79, %62
  %81 = icmp slt i32 %80, 0
  %82 = icmp sgt i32 %80, %62
  %83 = select i1 %82, i32 %62, i32 %80
  %84 = select i1 %81, i32 0, i32 %83
  br label %85

85:                                               ; preds = %73, %77
  %86 = phi i32 [ %84, %77 ], [ %62, %73 ]
  %87 = load i32, i32* %27, align 16
  %88 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %39, i32 6, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %39, i32 6, i32 4
  %92 = load i32, i32* %91, align 8
  %93 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %39, i32 3, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %39, i32 3, i32 4
  %96 = load i32, i32* %95, align 8
  %97 = call i64 %88(i8* %90, i32 %92, i8* %94, i32 %96, i32 %86, i32 %74) #6
  %98 = shl i32 %87, 1
  %99 = add i32 %98, -16
  %100 = shl i32 1, %99
  %101 = ashr i32 %100, 1
  %102 = sext i32 %101 to i64
  %103 = add nsw i64 %97, %102
  %104 = zext i32 %99 to i64
  %105 = ashr i64 %103, %104
  %106 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %39, i32 13
  %107 = load i16*, i16** %106, align 8
  %108 = getelementptr inbounds i16, i16* %107, i64 1
  %109 = load i16, i16* %108, align 2
  %110 = icmp sgt i16 %109, 15
  %111 = ashr i16 %109, 3
  %112 = sitofp i16 %111 to double
  %113 = select i1 %110, double %112, double 1.000000e+00
  %114 = icmp eq i64 %105, 0
  br i1 %114, label %156, label %115

115:                                              ; preds = %85
  %116 = mul nsw i32 %86, %74
  %117 = sitofp i64 %105 to double
  %118 = sitofp i32 %116 to double
  %119 = fdiv double %117, %118
  %120 = fmul double %113, %113
  %121 = fdiv double %119, %120
  %122 = call double @log2(double %121) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #6
  store double 0xFFFFFFFFFFFFFFFF, double* %14, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #6
  store double 0xFFFFFFFFFFFFFFFF, double* %15, align 8
  call void @av1_model_rd_curvfit(i8 zeroext %55, double %119, double %122, double* nonnull %14, double* nonnull %15) #6
  %123 = load double, double* %15, align 8
  %124 = fmul double %119, %123
  %125 = load double, double* %14, align 8
  %126 = fmul double %125, %118
  %127 = fcmp olt double %126, 0.000000e+00
  %128 = fadd double %126, 5.000000e-01
  %129 = fptosi double %128 to i32
  %130 = fmul double %124, %118
  %131 = fcmp olt double %130, 0.000000e+00
  %132 = fadd double %130, 5.000000e-01
  %133 = fptosi double %132 to i64
  %134 = select i1 %131, i64 0, i64 %133
  %135 = icmp eq i32 %129, 0
  %136 = or i1 %127, %135
  br i1 %136, label %137, label %139

137:                                              ; preds = %115
  %138 = shl i64 %105, 4
  br label %153

139:                                              ; preds = %115
  %140 = sext i32 %129 to i64
  %141 = load i32, i32* %30, align 8
  %142 = sext i32 %141 to i64
  %143 = mul nsw i64 %142, %140
  %144 = add nsw i64 %143, 256
  %145 = ashr i64 %144, 9
  %146 = shl i64 %134, 7
  %147 = add nsw i64 %145, %146
  %148 = shl i64 %105, 11
  %149 = icmp slt i64 %147, %148
  %150 = shl i64 %105, 4
  %151 = select i1 %149, i32 %129, i32 0
  %152 = select i1 %149, i64 %134, i64 %150
  br label %153

153:                                              ; preds = %139, %137
  %154 = phi i32 [ 0, %137 ], [ %151, %139 ]
  %155 = phi i64 [ %138, %137 ], [ %152, %139 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #6
  br label %156

156:                                              ; preds = %85, %153
  %157 = phi i64 [ %155, %153 ], [ 0, %85 ]
  %158 = phi i32 [ %154, %153 ], [ 0, %85 ]
  br i1 %43, label %159, label %163

159:                                              ; preds = %156
  %160 = icmp slt i64 %105, 4294967295
  %161 = select i1 %160, i64 %105, i64 4294967295
  %162 = trunc i64 %161 to i32
  store i32 %162, i32* %32, align 4
  br label %163

163:                                              ; preds = %159, %156
  %164 = add nsw i64 %105, %42
  %165 = sext i32 %158 to i64
  %166 = add nsw i64 %40, %165
  %167 = add nsw i64 %157, %41
  br i1 %33, label %170, label %168

168:                                              ; preds = %163
  %169 = getelementptr inbounds i32, i32* %10, i64 %39
  store i32 %158, i32* %169, align 4
  br label %170

170:                                              ; preds = %163, %168
  br i1 %34, label %173, label %171

171:                                              ; preds = %170
  %172 = getelementptr inbounds i64, i64* %11, i64 %39
  store i64 %105, i64* %172, align 8
  br label %173

173:                                              ; preds = %170, %171
  br i1 %35, label %176, label %174

174:                                              ; preds = %173
  %175 = getelementptr inbounds i64, i64* %12, i64 %39
  store i64 %157, i64* %175, align 8
  br label %176

176:                                              ; preds = %173, %174
  %177 = add nsw i64 %39, 1
  %178 = icmp slt i64 %39, %37
  br i1 %178, label %38, label %179

179:                                              ; preds = %176, %44, %13
  %180 = phi i64 [ 0, %13 ], [ %42, %44 ], [ %164, %176 ]
  %181 = phi i64 [ 0, %13 ], [ %41, %44 ], [ %167, %176 ]
  %182 = phi i64 [ 0, %13 ], [ %40, %44 ], [ %166, %176 ]
  %183 = icmp eq i32* %8, null
  br i1 %183, label %187, label %184

184:                                              ; preds = %179
  %185 = icmp eq i64 %182, 0
  %186 = zext i1 %185 to i32
  store i32 %186, i32* %8, align 4
  br label %187

187:                                              ; preds = %179, %184
  %188 = icmp eq i64* %9, null
  br i1 %188, label %191, label %189

189:                                              ; preds = %187
  %190 = shl i64 %180, 4
  store i64 %190, i64* %9, align 8
  br label %191

191:                                              ; preds = %187, %189
  %192 = trunc i64 %182 to i32
  store i32 %192, i32* %6, align 4
  store i64 %181, i64* %7, align 8
  ret void
}

declare void @av1_model_rd_from_var_lapndz(i64, i32, i32, i32*, i64*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #5

declare void @av1_model_rd_curvfit(i8 zeroext, double, double, double*, double*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i64 @interpolation_filter_rd(%struct.macroblock*, %struct.AV1_COMP*, i8 zeroext, %struct.BUFFER_SET*, i64* nocapture, %struct.RD_STATS* nocapture, %struct.RD_STATS* nocapture, i32* nocapture, %struct.BUFFER_SET** nocapture, i32, i32* nocapture readonly, i32) unnamed_addr #4 {
  %13 = alloca %struct.RD_STATS, align 8
  %14 = alloca %struct.RD_STATS, align 8
  %15 = alloca %struct.BUFFER_SET, align 8
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 35
  %18 = load %struct.SequenceHeader*, %struct.SequenceHeader** %17, align 16
  %19 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %18, i64 0, i32 27
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  %22 = select i1 %21, i32 3, i32 1
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 6
  %25 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %24, align 8
  %26 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %25, align 8
  %27 = bitcast %struct.RD_STATS* %5 to i8*
  %28 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds i8, i8* %27, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 3
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 4
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 5
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %26, i64 0, i32 8, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = sext i32 %9 to i64
  %46 = getelementptr inbounds [9 x %union.int_interpfilters], [9 x %union.int_interpfilters]* @filter_sets, i64 0, i64 %45, i32 0
  %47 = load i32, i32* %46, align 4
  store i32 %47, i32* %43, align 4
  %48 = load %struct.SequenceHeader*, %struct.SequenceHeader** %17, align 16
  %49 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %48, i64 0, i32 19
  %50 = load i8, i8* %49, align 8
  %51 = load i32, i32* %10, align 4
  %52 = sext i32 %51 to i64
  %53 = and i32 %47, 255
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 20, i32 37, i64 %52, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i8 %50, 0
  br i1 %57, label %68, label %58

58:                                               ; preds = %12
  %59 = lshr i32 %47, 16
  %60 = getelementptr inbounds i32, i32* %10, i64 1
  %61 = load i32, i32* %60, align 4
  %62 = sext i32 %61 to i64
  %63 = and i32 %59, 255
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 20, i32 37, i64 %62, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i32 %66, %56
  br label %68

68:                                               ; preds = %12, %58
  %69 = phi i32 [ %67, %58 ], [ %56, %12 ]
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 17
  %72 = load i32, i32* %71, align 8
  %73 = sext i32 %72 to i64
  %74 = mul nsw i64 %73, %70
  %75 = add nsw i64 %74, 256
  %76 = ashr i64 %75, 9
  %77 = load i64, i64* %4, align 8
  %78 = icmp sgt i64 %76, %77
  br i1 %78, label %79, label %80

79:                                               ; preds = %68
  store i32 %44, i32* %43, align 4
  br label %288

80:                                               ; preds = %68
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 68, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %82, %11
  %84 = select i1 %83, i32 3, i32 %11
  switch i32 %84, label %288 [
    i32 0, label %85
    i32 1, label %118
    i32 3, label %201
  ]

85:                                               ; preds = %80
  %86 = bitcast %struct.RD_STATS* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %86) #6
  %87 = bitcast %struct.RD_STATS* %13 to i64*
  store i64 -6148914694099828736, i64* %87, align 8
  %88 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 0
  %89 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 1
  %90 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 4
  %91 = bitcast i64* %89 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %90, align 8
  %92 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 5
  store i32 0, i32* %92, align 4
  %93 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %23, i64 0, i32 0
  %94 = load i32, i32* %93, align 16
  %95 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 1
  %96 = load i32, i32* %95, align 4
  tail call void @av1_enc_build_inter_predictor(%struct.AV1Common* %16, %struct.macroblockd* %23, i32 %94, i32 %96, %struct.BUFFER_SET* %3, i8 zeroext %2, i32 0, i32 0) #6
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 13, i32 17
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %98, 0
  %100 = zext i1 %99 to i64
  %101 = getelementptr inbounds [2 x void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*], [2 x void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*]* @model_rd_sb_fn, i64 0, i64 %100
  %102 = load void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*, void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)** %101, align 8
  %103 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 3
  call void %102(%struct.AV1_COMP* %1, i8 zeroext %2, %struct.macroblock* %0, %struct.macroblockd* %23, i32 0, i32 0, i32* nonnull %88, i64* %89, i32* %90, i64* %103, i32* null, i64* null, i64* null) #6
  %104 = load i32, i32* %88, align 8
  %105 = icmp eq i32 %104, 2147483647
  br i1 %105, label %112, label %106

106:                                              ; preds = %85
  %107 = load i32, i32* %92, align 4
  %108 = load i64, i64* %89, align 8
  %109 = load i64, i64* %103, align 8
  %110 = load i32, i32* %90, align 8
  %111 = and i32 %110, 1
  br label %112

112:                                              ; preds = %85, %106
  %113 = phi i64 [ %108, %106 ], [ 9223372036854775807, %85 ]
  %114 = phi i64 [ 0, %106 ], [ 9223372036854775807, %85 ]
  %115 = phi i64 [ %109, %106 ], [ 9223372036854775807, %85 ]
  %116 = phi i32 [ %111, %106 ], [ 0, %85 ]
  %117 = phi i32 [ %107, %106 ], [ 0, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %86) #6
  br label %118

118:                                              ; preds = %80, %112
  %119 = phi i32 [ 0, %80 ], [ %104, %112 ]
  %120 = phi i64 [ 0, %80 ], [ %113, %112 ]
  %121 = phi i64 [ 0, %80 ], [ %114, %112 ]
  %122 = phi i64 [ 0, %80 ], [ %115, %112 ]
  %123 = phi i32 [ %84, %80 ], [ %116, %112 ]
  %124 = phi i32 [ 0, %80 ], [ %117, %112 ]
  %125 = phi i32 [ %29, %80 ], [ %104, %112 ]
  %126 = phi i32 [ %32, %80 ], [ -1431655766, %112 ]
  %127 = phi i64 [ %34, %80 ], [ %113, %112 ]
  %128 = phi i64 [ %36, %80 ], [ %114, %112 ]
  %129 = phi i64 [ %38, %80 ], [ %115, %112 ]
  %130 = phi i32 [ %40, %80 ], [ %116, %112 ]
  %131 = phi i32 [ %42, %80 ], [ %117, %112 ]
  br i1 %21, label %132, label %218

132:                                              ; preds = %118
  %133 = bitcast %struct.RD_STATS* %14 to i8*
  %134 = bitcast %struct.RD_STATS* %14 to i64*
  %135 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 0
  %136 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 1
  %137 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 4
  %138 = bitcast i64* %136 to i8*
  %139 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 5
  %140 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %23, i64 0, i32 0
  %141 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 1
  %142 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 13, i32 17
  %143 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 3
  br label %144

144:                                              ; preds = %132, %191
  %145 = phi i32 [ 1, %132 ], [ %198, %191 ]
  %146 = phi i32 [ %131, %132 ], [ %197, %191 ]
  %147 = phi i32 [ %130, %132 ], [ %196, %191 ]
  %148 = phi i64 [ %129, %132 ], [ %195, %191 ]
  %149 = phi i64 [ %128, %132 ], [ %194, %191 ]
  %150 = phi i64 [ %127, %132 ], [ %193, %191 ]
  %151 = phi i32 [ %125, %132 ], [ %192, %191 ]
  %152 = add nsw i32 %151, %69
  %153 = sext i32 %152 to i64
  %154 = load i32, i32* %71, align 8
  %155 = sext i32 %154 to i64
  %156 = mul nsw i64 %155, %153
  %157 = add nsw i64 %156, 256
  %158 = ashr i64 %157, 9
  %159 = shl i64 %150, 7
  %160 = add nsw i64 %158, %159
  %161 = load i64, i64* %4, align 8
  %162 = icmp slt i64 %160, %161
  br i1 %162, label %163, label %200

163:                                              ; preds = %144
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %133) #6
  store i64 -6148914694099828736, i64* %134, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %138, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %137, align 8
  store i32 0, i32* %139, align 4
  %164 = load i32, i32* %140, align 16
  %165 = load i32, i32* %141, align 4
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %16, %struct.macroblockd* %23, i32 %164, i32 %165, %struct.BUFFER_SET* %3, i8 zeroext %2, i32 %145, i32 %145) #6
  %166 = load i32, i32* %142, align 4
  %167 = icmp eq i32 %166, 0
  %168 = zext i1 %167 to i64
  %169 = getelementptr inbounds [2 x void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*], [2 x void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*]* @model_rd_sb_fn, i64 0, i64 %168
  %170 = load void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)*, void (%struct.AV1_COMP*, i8, %struct.macroblock*, %struct.macroblockd*, i32, i32, i32*, i64*, i32*, i64*, i32*, i64*, i64*)** %169, align 8
  call void %170(%struct.AV1_COMP* %1, i8 zeroext %2, %struct.macroblock* %0, %struct.macroblockd* %23, i32 %145, i32 %145, i32* nonnull %135, i64* %136, i32* %137, i64* %143, i32* null, i64* null, i64* null) #6
  %171 = icmp eq i32 %151, 2147483647
  br i1 %171, label %191, label %172

172:                                              ; preds = %163
  %173 = load i32, i32* %135, align 8
  %174 = icmp eq i32 %173, 2147483647
  br i1 %174, label %191, label %175

175:                                              ; preds = %172
  %176 = sext i32 %151 to i64
  %177 = sext i32 %173 to i64
  %178 = add nsw i64 %177, %176
  %179 = icmp slt i64 %178, 2147483647
  %180 = select i1 %179, i64 %178, i64 2147483647
  %181 = trunc i64 %180 to i32
  %182 = icmp eq i32 %146, 0
  %183 = load i32, i32* %139, align 4
  %184 = select i1 %182, i32 %183, i32 %146
  %185 = load i64, i64* %136, align 8
  %186 = add nsw i64 %185, %150
  %187 = load i64, i64* %143, align 8
  %188 = add nsw i64 %187, %148
  %189 = load i32, i32* %137, align 8
  %190 = and i32 %189, %147
  br label %191

191:                                              ; preds = %175, %172, %163
  %192 = phi i32 [ %181, %175 ], [ 2147483647, %172 ], [ 2147483647, %163 ]
  %193 = phi i64 [ %186, %175 ], [ 9223372036854775807, %172 ], [ 9223372036854775807, %163 ]
  %194 = phi i64 [ %149, %175 ], [ 9223372036854775807, %172 ], [ 9223372036854775807, %163 ]
  %195 = phi i64 [ %188, %175 ], [ 9223372036854775807, %172 ], [ 9223372036854775807, %163 ]
  %196 = phi i32 [ %190, %175 ], [ 0, %172 ], [ 0, %163 ]
  %197 = phi i32 [ %184, %175 ], [ 0, %172 ], [ 0, %163 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %133) #6
  %198 = add nuw nsw i32 %145, 1
  %199 = icmp ult i32 %198, %22
  br i1 %199, label %144, label %218

200:                                              ; preds = %144
  store i32 %44, i32* %43, align 4
  br label %288

201:                                              ; preds = %80
  %202 = bitcast %struct.RD_STATS* %6 to i8*
  %203 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  %204 = load i32, i32* %203, align 8
  %205 = getelementptr inbounds i8, i8* %202, i64 4
  %206 = bitcast i8* %205 to i32*
  %207 = load i32, i32* %206, align 4
  %208 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  %209 = load i64, i64* %208, align 8
  %210 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 2
  %211 = load i64, i64* %210, align 8
  %212 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 3
  %213 = load i64, i64* %212, align 8
  %214 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 4
  %215 = load i32, i32* %214, align 8
  %216 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 5
  %217 = load i32, i32* %216, align 4
  br label %218

218:                                              ; preds = %191, %118, %201
  %219 = phi i32 [ 0, %201 ], [ %119, %118 ], [ %119, %191 ]
  %220 = phi i64 [ 0, %201 ], [ %120, %118 ], [ %120, %191 ]
  %221 = phi i64 [ 0, %201 ], [ %121, %118 ], [ %121, %191 ]
  %222 = phi i64 [ 0, %201 ], [ %122, %118 ], [ %122, %191 ]
  %223 = phi i32 [ 1, %201 ], [ %123, %118 ], [ %123, %191 ]
  %224 = phi i32 [ 0, %201 ], [ %124, %118 ], [ %124, %191 ]
  %225 = phi i32 [ %204, %201 ], [ %125, %118 ], [ %192, %191 ]
  %226 = phi i32 [ %207, %201 ], [ %126, %118 ], [ %126, %191 ]
  %227 = phi i64 [ %209, %201 ], [ %127, %118 ], [ %193, %191 ]
  %228 = phi i64 [ %211, %201 ], [ %128, %118 ], [ %194, %191 ]
  %229 = phi i64 [ %213, %201 ], [ %129, %118 ], [ %195, %191 ]
  %230 = phi i32 [ %215, %201 ], [ %130, %118 ], [ %196, %191 ]
  %231 = phi i32 [ %217, %201 ], [ %131, %118 ], [ %197, %191 ]
  %232 = add nsw i32 %225, %69
  %233 = sext i32 %232 to i64
  %234 = load i32, i32* %71, align 8
  %235 = sext i32 %234 to i64
  %236 = mul nsw i64 %235, %233
  %237 = add nsw i64 %236, 256
  %238 = ashr i64 %237, 9
  %239 = shl nsw i64 %227, 7
  %240 = add nsw i64 %238, %239
  %241 = load i64, i64* %4, align 8
  %242 = icmp slt i64 %240, %241
  br i1 %242, label %243, label %287

243:                                              ; preds = %218
  store i64 %240, i64* %4, align 8
  store i32 %69, i32* %7, align 4
  %244 = load i32, i32* %81, align 4
  %245 = icmp eq i32 %244, %11
  br i1 %245, label %288, label %246

246:                                              ; preds = %243
  switch i32 %11, label %271 [
    i32 0, label %247
    i32 1, label %258
  ]

247:                                              ; preds = %246
  store i32 %219, i32* %28, align 8
  store i32 -1431655766, i32* %31, align 4
  store i64 %220, i64* %33, align 8
  store i64 %221, i64* %35, align 8
  store i64 %222, i64* %37, align 8
  store i32 %223, i32* %39, align 8
  store i32 %224, i32* %41, align 4
  %248 = bitcast %struct.RD_STATS* %6 to i8*
  %249 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  store i32 %225, i32* %249, align 8
  %250 = getelementptr inbounds i8, i8* %248, i64 4
  %251 = bitcast i8* %250 to i32*
  store i32 %226, i32* %251, align 4
  %252 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  store i64 %227, i64* %252, align 8
  %253 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 2
  store i64 %228, i64* %253, align 8
  %254 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 3
  store i64 %229, i64* %254, align 8
  %255 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 4
  store i32 %230, i32* %255, align 8
  %256 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 5
  store i32 %231, i32* %256, align 4
  %257 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 49
  store i32 0, i32* %257, align 4
  br label %271

258:                                              ; preds = %246
  %259 = bitcast %struct.RD_STATS* %6 to i8*
  %260 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  store i32 %225, i32* %260, align 8
  %261 = getelementptr inbounds i8, i8* %259, i64 4
  %262 = bitcast i8* %261 to i32*
  store i32 %226, i32* %262, align 4
  %263 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  store i64 %227, i64* %263, align 8
  %264 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 2
  store i64 %228, i64* %264, align 8
  %265 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 3
  store i64 %229, i64* %265, align 8
  %266 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 4
  store i32 %230, i32* %266, align 8
  %267 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 5
  store i32 %231, i32* %267, align 4
  %268 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 49
  %269 = load i32, i32* %268, align 4
  %270 = xor i32 %269, 1
  store i32 %270, i32* %268, align 4
  br label %271

271:                                              ; preds = %246, %258, %247
  %272 = bitcast %struct.BUFFER_SET** %8 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = getelementptr inbounds %struct.BUFFER_SET*, %struct.BUFFER_SET** %8, i64 1
  %275 = bitcast %struct.BUFFER_SET** %274 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %272, align 8
  store i64 %273, i64* %275, align 8
  %277 = bitcast %struct.BUFFER_SET* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %277) #6
  %278 = inttoptr i64 %276 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %277, i8* align 1 %278, i64 40, i1 false) #6
  %279 = bitcast %struct.BUFFER_SET* %15 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 3
  %282 = bitcast %struct.buf_2d* %281 to i64*
  store i64 %280, i64* %282, align 16
  %283 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 1, i64 0
  %284 = load i32, i32* %283, align 8
  %285 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  store i32 %284, i32* %285, align 8
  br i1 %21, label %290, label %286

286:                                              ; preds = %271, %290
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %277) #6
  br label %288

287:                                              ; preds = %218
  store i32 %44, i32* %43, align 4
  br label %288

288:                                              ; preds = %200, %80, %286, %243, %287, %79
  %289 = phi i64 [ 0, %79 ], [ 0, %200 ], [ 0, %80 ], [ 0, %287 ], [ 1, %243 ], [ 1, %286 ]
  ret i64 %289

290:                                              ; preds = %271
  %291 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 0, i64 1
  %292 = bitcast i8** %291 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 3
  %295 = bitcast %struct.buf_2d* %294 to i64*
  store i64 %293, i64* %295, align 16
  %296 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 1, i64 1
  %297 = load i32, i32* %296, align 4
  %298 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 1, i32 3, i32 4
  store i32 %297, i32* %298, align 8
  %299 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 0, i64 2
  %300 = bitcast i8** %299 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 2, i32 3
  %303 = bitcast %struct.buf_2d* %302 to i64*
  store i64 %301, i64* %303, align 16
  %304 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 1, i64 2
  %305 = load i32, i32* %304, align 8
  %306 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 2, i32 3, i32 4
  store i32 %305, i32* %306, align 8
  br label %286
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3, !4}
!3 = !{!"llvm.loop.unroll.runtime.disable"}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !6}
!8 = !{i8 0, i8 2}
